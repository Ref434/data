varible_name,method,"AffinityPropagation(damping=0.999, random_state=0)","AgglomerativeClustering(metric='euclidean', n_clusters=13)","KMeans(n_clusters=13, n_init='auto', random_state=0)",MeanShift(bandwidth=2.3),"SpectralClustering(assign_labels='discretize', n_clusters=13, random_state=0)"
text,"re.sub(r""\'ve"",""have"",text)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_12,CLUSTER_1
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_12,CLUSTER_1
text,"re.sub(r""\'d"",""would"",text)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_12,CLUSTER_1
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_12,CLUSTER_1
text,"re.sub(r""won't"",""willnot"",text)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_12,CLUSTER_1
text,"re.sub(r""can't"",""cannot"",text)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_12,CLUSTER_1
text,"re.sub(r""n't"",""not"",text)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_12,CLUSTER_1
text,"re.sub(r""n'"",""ng"",text)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_12,CLUSTER_1
text,"re.sub(r""'bout"",""about"",text)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_12,CLUSTER_1
text,"re.sub(r""'til"",""until"",text)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_12,CLUSTER_1
text,"re.sub(r""[-()",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_12,CLUSTER_1
pat,"re.compile(r""([()",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_12,CLUSTER_1
j,json.dumps(x),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_12,CLUSTER_1
df,"pandas.DataFrame(X,columns=cancer.feature_names)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,prediction[:,1])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,"sklearn.tree.DecisionTreeClassifier(max_depth=3,random_state=17)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"numpy.array([[1,1,1,1,1,1,1,1,1,1],
[1,1,2,1,3,0,5,10,1,2],
[500,700,750,600,1450,
800,1500,2000,450,1000],
[1,1,2,1,2,
1,3,3,1,2]])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
res,"numpy.zeros((4,Nl+1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
res,"numpy.zeros((4,Nl+1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
res,"numpy.zeros((10,4)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y_pred,"numpy.dot(W,X)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y_pred_tmp,"numpy.dot(W,X_tmp)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y_pred,"numpy.dot(W_old,X)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y_pred,"numpy.dot(W_old,X)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
err,numpy.mean((y-y_pred),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
xx,"numpy.linspace(0,1,Nl+1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
xx,"numpy.linspace(0,1,Nl+1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
xx,"numpy.linspace(0,1,Nl+1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
xx,"numpy.linspace(0,1,Nl+1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
W_old,numpy.copy(W),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
W_old,numpy.copy(W),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.Ridge(alpha=1),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('df_sub.csv.gz',
compression='gzip')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_output,pandas.DataFrame(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
features,pandas.DataFrame(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_grad,pandas.DataFrame(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
feat_imp,"pandas.Series(alg.feature_importances_,X.columns)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
feat_imp,pandas.Series(alg.booster(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('C:/Users/Damanjit/Documents/HousingPrediction/sold3.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
predictions,pandas.read_csv('C:/Users/Damanjit/Documents/HousingPrediction/testing3.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dec_tree_reg,pandas.read_csv('C:/Users/Damanjit/Documents/HousingPrediction/decisionTreePredictions.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
grad_predictions,pandas.read_csv('C:/Users/Damanjit/Documents/HousingPrediction/gradientBoostedPredictions.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['ListingDate'],pandas.to_datetime(data['ListingDate']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['PendingDate'],pandas.to_datetime(data['PendingDate']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
predictions['temp'],pandas.to_datetime(predictions['temp']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"m,b","numpy.polyfit(x_axis,y_axis,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"slope,intercept,r_value,p_value,std_err","scipy.stats.linregress(x_axis,y_axis)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.mean_squared_error(y_true,y_predict)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.20,train_size=0.80,random_state=50)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,sklearn.tree.DecisionTreeRegressor(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
DTR0,"sklearn.tree.DecisionTreeRegressor(max_features='auto',random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
DTR1,"sklearn.tree.DecisionTreeRegressor(max_features='auto',random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
DTR1,"sklearn.tree.DecisionTreeRegressor(max_features='auto',random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(regressor,params,scoring='neg_mean_squared_error',cv=5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch1,"sklearn.model_selection.GridSearchCV(estimator=ensemble.GradientBoostingRegressor(learning_rate=0.05,min_samples_split=40,min_samples_leaf=2,max_depth=6,max_features='auto',subsample=0.8,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch2,"sklearn.model_selection.GridSearchCV(estimator=ensemble.GradientBoostingRegressor(learning_rate=0.05,n_estimators=140,max_features='auto',subsample=0.8,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch3,"sklearn.model_selection.GridSearchCV(estimator=ensemble.GradientBoostingRegressor(learning_rate=0.05,n_estimators=140,max_depth=3,max_features='auto',subsample=0.8,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch4,"sklearn.model_selection.GridSearchCV(estimator=ensemble.GradientBoostingRegressor(learning_rate=0.05,n_estimators=140,max_depth=3,min_samples_split=160,min_samples_leaf=2,subsample=0.8,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch5,"sklearn.model_selection.GridSearchCV(estimator=ensemble.GradientBoostingRegressor(learning_rate=0.05,n_estimators=140,max_depth=3,min_samples_split=150,min_samples_leaf=2,subsample=0.8,random_state=10,max_features=13)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch6,"sklearn.model_selection.GridSearchCV(estimator=ensemble.AdaBoostRegressor(base_estimator=DTR1,learning_rate=0.05,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch7,"sklearn.model_selection.GridSearchCV(estimator=XGBRegressor(learning_rate=0.1,n_estimators=83,max_depth=5,
min_child_weight=1,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='reg:linear',nthread=4,scale_pos_weight=1,seed=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch8,"sklearn.model_selection.GridSearchCV(estimator=XGBRegressor(learning_rate=0.1,n_estimators=83,max_depth=3,
min_child_weight=2,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='reg:linear',nthread=4,scale_pos_weight=1,seed=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch9,"sklearn.model_selection.GridSearchCV(estimator=XGBRegressor(learning_rate=0.1,n_estimators=133,max_depth=3,
min_child_weight=2,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='reg:linear',nthread=4,scale_pos_weight=1,seed=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch10,"sklearn.model_selection.GridSearchCV(estimator=XGBRegressor(learning_rate=0.1,n_estimators=133,max_depth=3,
min_child_weight=2,gamma=0,subsample=0.7,colsample_bytree=0.9,
objective='reg:linear',nthread=4,scale_pos_weight=1,seed=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch11,"sklearn.model_selection.GridSearchCV(estimator=XGBRegressor(learning_rate=0.1,n_estimators=133,max_depth=3,
min_child_weight=2,gamma=0,subsample=0.75,colsample_bytree=0.85,
objective='reg:linear',nthread=4,scale_pos_weight=1,seed=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch12,"sklearn.model_selection.GridSearchCV(estimator=XGBRegressor(learning_rate=0.1,n_estimators=133,max_depth=3,
min_child_weight=2,gamma=0,subsample=0.75,colsample_bytree=0.85,
objective='reg:linear',nthread=4,scale_pos_weight=1,seed=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch13,"sklearn.model_selection.GridSearchCV(estimator=XGBRegressor(learning_rate=0.1,n_estimators=133,max_depth=3,
min_child_weight=2,gamma=0,subsample=0.75,colsample_bytree=0.85,
objective='reg:linear',nthread=4,scale_pos_weight=1,seed=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch14,"sklearn.model_selection.GridSearchCV(estimator=XGBRegressor(learning_rate=0.1,n_estimators=133,max_depth=3,
min_child_weight=2,gamma=0,subsample=0.75,colsample_bytree=0.85,
objective='reg:linear',nthread=4,scale_pos_weight=1,seed=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch15,"sklearn.model_selection.GridSearchCV(estimator=ensemble.RandomForestRegressor(min_samples_split=40,min_samples_leaf=2,max_depth=6,max_features='auto',random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch16,"sklearn.model_selection.GridSearchCV(estimator=ensemble.RandomForestRegressor(n_estimators=80,max_features='auto',random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch17,"sklearn.model_selection.GridSearchCV(estimator=ensemble.RandomForestRegressor(n_estimators=80,max_depth=4,max_features='auto',random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch6,"GridSearchCV(estimator=sklearn.ensemble.AdaBoostRegressor(base_estimator=DTR1,learning_rate=0.05,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ada_tuned1,"sklearn.ensemble.AdaBoostRegressor(base_estimator=DTR1,learning_rate=0.05,random_state=10,n_estimators=160)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gb_baseline,sklearn.ensemble.GradientBoostingRegressor(random_state=10),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch1,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingRegressor(learning_rate=0.05,min_samples_split=40,min_samples_leaf=2,max_depth=6,max_features='auto',subsample=0.8,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch2,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingRegressor(learning_rate=0.05,n_estimators=140,max_features='auto',subsample=0.8,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch3,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingRegressor(learning_rate=0.05,n_estimators=140,max_depth=3,max_features='auto',subsample=0.8,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch4,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingRegressor(learning_rate=0.05,n_estimators=140,max_depth=3,min_samples_split=160,min_samples_leaf=2,subsample=0.8,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch5,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingRegressor(learning_rate=0.05,n_estimators=140,max_depth=3,min_samples_split=150,min_samples_leaf=2,subsample=0.8,random_state=10,max_features=13)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gb_tuned_1,"sklearn.ensemble.GradientBoostingRegressor(learning_rate=0.05,n_estimators=140,max_depth=3,min_samples_split=160,min_samples_leaf=2,subsample=0.6,random_state=10,max_features='auto')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gradBoost,sklearn.ensemble.GradientBoostingRegressor(**params),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch15,"GridSearchCV(estimator=sklearn.ensemble.RandomForestRegressor(min_samples_split=40,min_samples_leaf=2,max_depth=6,max_features='auto',random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch16,"GridSearchCV(estimator=sklearn.ensemble.RandomForestRegressor(n_estimators=80,max_features='auto',random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch17,"GridSearchCV(estimator=sklearn.ensemble.RandomForestRegressor(n_estimators=80,max_depth=4,max_features='auto',random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv_score,"sklearn.model_selection.cross_val_score(alg,X,y,cv=cv_folds)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv_score_mse,"sklearn.model_selection.cross_val_score(alg,X,y,cv=cv_folds,scoring='neg_mean_squared_error')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(estimator,data_matrix,targets_matrix,cv=5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results1,"sklearn.model_selection.cross_val_score(estimator1,data_matrix,targets_matrix,cv=5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results2,"sklearn.model_selection.cross_val_score(estimator2,data_matrix,targets_matrix,cv=5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ada,"sklearn.ensemble.AdaBoostRegressor(base_estimator=DTR0,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestRegressor(random_state=10),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
v,numpy.sqrt(phi_bar_squared),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
phi,numpy.sqrt(chi2/n),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
result_df,"pandas.DataFrame(p_results,columns=['Protein1','Protein2','P-Value','CramersV'])",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
expected,pandas.DataFrame(expected),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
crosstab,"pandas.crosstab(df[protein],df[protein2])",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
crosstab,"pandas.crosstab(one_hot[protein1],one_hot[protein2])",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('../input/train.csv'),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"chi2,p,_,_","scipy.stats.chi2_contingency(crosstab,correction=False)",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"_,p,_,expected",scipy.stats.chi2_contingency(crosstab),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
tanti_x,"numpy.arange(-5,35,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data1,"pandas.DataFrame(raw_data_1,columns=['subject_id','first_name','last_name'])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,"pandas.DataFrame(raw_data_2,columns=['subject_id','first_name','last_name'])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
data3,"pandas.DataFrame(raw_data_3,columns=['subject_id','test_id'])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
loc_stats,pandas.DataFrame(),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
day_stats,pandas.DataFrame(),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
pokemon,pandas.DataFrame(raw_data),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_data,"pandas.concat([data1,data2])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_data_col,"pandas.concat([data1,data2],axis=1)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
chipo,"pandas.read_csv(path1,sep='\t')",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
euro12,pandas.read_csv(path2),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
drinks,pandas.read_csv(path3),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
crime,pandas.read_csv(path4),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
titanic,pandas.read_csv(path7),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
apple,pandas.read_csv(path9),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,pandas.read_csv(path10),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,"pandas.read_csv(path10,names=['sepal_length','sepal_width','petal_length','petal_width','class'])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_table(path6,sep=""\s+"",parse_dates=[[0,1,2]])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
crime.Year,"pandas.to_datetime(crime.Year,format='%Y')",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"data[""Yr_Mo_Dy""]","pandas.to_datetime(data[""Yr_Mo_Dy""])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
apple.Date,pandas.to_datetime(apple.Date),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
binsVal,"numpy.arange(0,600,10)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,"seaborn.lmplot(x='Age',y='Fare',data=titanic,hue='Sex',fit_reg=False)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
pdf,"pandas.read_csv(""D:/Phd-IIMRaipur/1stYear1stQrtr/PredictiveAnalysisandMachineLearningAlgorithm/Project/cars_clus.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
dist_matrix,"scipy.spatial.distance_matrix(feature_mtx,feature_mtx)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
agglom,"sklearn.cluster.AgglomerativeClustering(n_clusters=6,linkage='complete')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
selected_product,random.sample(group_product_ids[str(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
selected_product,random.sample(group_product_ids[str(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
group_ids,json.load(json_file),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
group_product_ids,json.load(json_file),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
group_ids,json.load(json_file),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
group_product_ids,json.load(json_file),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
group_ids,json.load(json_file),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
group_product_ids,json.load(json_file),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
time,"pandas.DataFrame(data=pd.date_range('2018-04-01','2019-12-31',freq='D')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
data_norm,pandas.DataFrame(scaling(data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
data_norm,pandas.DataFrame(scaling(data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df.index,pandas.DatetimeIndex(df.date),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
y_pred,pandas.Series(y_pred),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
y_pred,pandas.Series(y_pred.reshape(len(y_pred),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
y_test,pandas.Series(y_test.reshape(len(y_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
data_filled,"pandas.concat(data,axis=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X_train_csv,pandas.concat(X_train),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X_test_csv,pandas.concat(X_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
Y_train_csv,pandas.concat(Y_train),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
Y_test_csv,pandas.concat(Y_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
idx,"pandas.date_range('04-01-2019','11-30-2019')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
time,"pd.DataFrame(data=pandas.date_range('2018-04-01','2019-12-31',freq='D')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
sale,"pandas.read_csv('../data/all/all_sales.csv',)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
holiday,"pandas.read_csv('../data/holiday.csv',names=['holiday'],header=0,parse_dates=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
session,pandas.read_csv('../data/all/all_session.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
product_list,"pandas.read_csv('../data/product.csv',index_col=0,encoding='ISO-8859-1')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
group,"pandas.read_csv('../data/all/segmentation/product_segmentation.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X_train[group_id],pandas.read_csv('../data/all/boosting_input_data/group%d_X_train.csv'%(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X_test[group_id],pandas.read_csv('../data/all/boosting_input_data/group%d_X_test.csv'%(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
Y_train[group_id],pandas.read_csv('../data/all/boosting_input_data/group%d_Y_train.csv'%(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
Y_test[group_id],pandas.read_csv('../data/all/boosting_input_data/group%d_Y_test.csv'%(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
sales,"pandas.read_json('../data/all/data.json',orient='split')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
sales,"pandas.read_json('../data/all/data_feature_engineer.json',orient='split')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
sale.date,"pandas.to_datetime(sale.date,format='%Y-%m-%d')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
holiday.holiday,"pandas.to_datetime(holiday.holiday,format='%Y-%m-%d')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
time.date,"pandas.to_datetime(time.date,format='%Y-%m-%d')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
session.date,"pandas.to_datetime(session.date,format='%Y-%m-%d')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"y_true,y_pred",numpy.array(y_true),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"X_train,X_test,Y_train,Y_test",numpy.array(X_train),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X_train,"numpy.reshape(X_train,(total_train_size,timestep*7,n_features)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X_test,"numpy.reshape(X_test,(total_samples-total_train_size,timestep*7,n_features)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
Y_train,"numpy.reshape(Y_train,(total_train_size,2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
Y_test,"numpy.reshape(Y_test,(total_samples-total_train_size,2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X_train[group_id],numpy.load('../data/all/rnn_input_data/group%d_X_train.npy'%(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X_test[group_id],numpy.load('../data/all/rnn_input_data/group%d_X_test.npy'%(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
Y_train[group_id],numpy.load('../data/all/rnn_input_data/group%d_Y_train.npy'%(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
Y_test[group_id],numpy.load('../data/all/rnn_input_data/group%d_Y_test.npy'%(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X_train[group_id],numpy.load('../data/all/rnn_input_data/group%d_X_train.npy'%(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X_test[group_id],numpy.load('../data/all/rnn_input_data/group%d_X_test.npy'%(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
Y_train[group_id],numpy.load('../data/all/rnn_input_data/group%d_Y_train.npy'%(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
Y_test[group_id],numpy.load('../data/all/rnn_input_data/group%d_Y_test.npy'%(group_id),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
column_trans,"sklearn.compose.ColumnTransformer([('sales',MinMaxScaler()",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(lg,gridParams,verbose=0,cv=4,n_jobs=3)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
rad,math.radians(C),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
d,math.sqrt((x2-x1),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
L,math.sqrt(a**2+b**2-2*a*b*math.cos(rad),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
tick_marks,numpy.arange(len(classes),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
resols,"numpy.arange(0.01,0.5,0.01)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
resols_ref,"numpy.arange(1,len(resols)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_index,numpy.arange(len(Y_total),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
num_clusters,"numpy.arange(1,50)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
nc,"numpy.arange(1,50)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
num_clusters,"numpy.arange(1,50)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ref_clust,numpy.arange(len(labels_list),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
sign_vect,numpy.array([]),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
acum_pred,numpy.array([]),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
svm_ind,numpy.array([]),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
svm_ind,numpy.array([]),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
svm_ind,numpy.array([]),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
svm_ind,numpy.array([]),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
svm_ind,numpy.array([]),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
svm_ind,numpy.array([]),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
m_ag,numpy.zeros((4),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
matrix_distance,numpy.zeros((len(labels_list),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
prof_vec_wt,numpy.empty((len(list_masks_wt),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
prof_vec_rq,numpy.empty((len(list_masks_rq),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
prof_vec_px,numpy.empty((len(list_masks_px),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
prof_vec_dt,numpy.empty((len(list_masks_dt),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
mm_conf,"numpy.empty((4,acum_acc2.shape[0],acum_acc2.shape[0])",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ind_rel_cor,numpy.where(np.logical_not(list_labels_wt),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ind_rel_err,numpy.where(list_labels_wt),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ind_rel_cor,numpy.where(np.logical_not(list_labels_rq),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ind_rel_err,numpy.where(list_labels_rq),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ind_rel_cor,numpy.where(np.logical_not(list_labels_px),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ind_rel_err,numpy.where(list_labels_px),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ind_rel_cor,numpy.where(np.logical_not(list_labels_dt),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ind_rel_err,numpy.where(list_labels_dt),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
res_clust,numpy.where(labels_res==clust),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
res_clust,numpy.where(labels_res==clust),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
num_clust_ch,numpy.where(clusters_acc_mean>min_acc+acc_perc*(max_acc-min_acc),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
res_clust,numpy.where(labels_res==clust),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ind_err_rand,"numpy.where(np.logical_xor(y_true,y_pred)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ind_err_rand,"numpy.where(np.logical_xor(y_true,y_pred)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
X_total,"numpy.concatenate((prof_vec_wt,prof_vec_rq,prof_vec_px,prof_vec_dt)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
Y_total,"numpy.concatenate((list_labels_wt,list_labels_rq,list_labels_px,list_labels_dt)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_index,numpy.ones((len(Y_total),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
val_norm,"numpy.amax(numpy.amax(X_train,axis=0)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"max_acc,min_acc",numpy.amax(clusters_acc_mean),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
dist_intra,"numpy.amax(DM[res_clust[0],res_clust[0]])",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
dist_intra,"numpy.amax(DM[res_clust[0],res_clust[1:]])",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"matrix_distance[clust,clusts]",numpy.amax(d_per_clust),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
m_ag[pos],numpy.sum(y==pos),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
acum_acc2,numpy.logical_not(np.logical_xor(acum_pred.astype('bool'),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
sign_vect,"numpy.vstack((sign_vect,FW.get_profile(splines,n_samples=points,radius=resol)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
x,"numpy.vstack((x1,x2)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
acum_pred,"numpy.vstack((acum_pred,y_pred)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
svm_ind,"numpy.vstack((svm_ind,d_train[""string{0}"".format(res_ch)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
svm_ind,"numpy.vstack((svm_ind,d_train[""string{0}"".format(res_ch)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
svm_ind,"numpy.vstack((svm_ind,d_train[""string{0}"".format(res_ch)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
svm_ind,"numpy.vstack((svm_ind,d_train[""string{0}"".format(res_ch)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
svm_ind,"numpy.vstack((svm_ind,d_train[""string{0}"".format(res_ch)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
svm_ind,"numpy.vstack((svm_ind,d_train[""string{0}"".format(res_ch)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
resols,"numpy.insert(resols,0,fit_res)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
acum_acc,"numpy.append(acum_acc,A_rf_n)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
labels_list,numpy.unique(labels_res),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
labels_list,numpy.unique(labels_res),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
labels_list,numpy.unique(labels_res),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
err_acum,"numpy.unique((np.concatenate((err_acum,ind_err)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
mask_pn,numpy.load('../../dataset/Seg_Watershed/mask_wate_{}.npy'.format(mask),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
mask_pn,numpy.load('../../dataset/Seg_ROQS/mask_roqs_{}.npy'.format(mask),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
mask_pn,numpy.load('../../dataset/Seg_pixel/mask_pixe_{}.npy'.format(mask),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
mask_pn,numpy.load('../../dataset/Seg_DataAug/mask_data_{}.npy'.format(mask),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
X_total,numpy.load('../../dataset/X_set.npy'),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
Y_total,numpy.load('../../dataset/Y_set.npy'),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
mask_pn,numpy.load('../../dataset/Seg_Watershed/mask_wate_{}.npy'.format(mask),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
mask_pn,numpy.load('../../dataset/Seg_ROQS/mask_roqs_{}.npy'.format(mask),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
mask_pn,numpy.load('../../dataset/Seg_pixel/mask_pixe_{}.npy'.format(mask),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
mask_pn,numpy.load('../../dataset/Seg_DataAug/mask_data_{}.npy'.format(mask),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
seg_label,"numpy.genfromtxt('../../dataset/Seg_Watershed/watershed_label.csv',delimiter=',')",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
seg_label,"numpy.genfromtxt('../../dataset/Seg_ROQS/roqs_label.csv',delimiter=',')",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
seg_label,"numpy.genfromtxt('../../dataset/Seg_pixel/pixel_label.csv',delimiter=',')",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
seg_label,"numpy.genfromtxt('../../dataset/Seg_DataAug/dataaug_label.csv',delimiter=',')",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
agg,"sklearn.cluster.AgglomerativeClustering(n_clusters=n_cl,affinity='precomputed',linkage='average')",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
agg,"sklearn.cluster.AgglomerativeClustering(n_clusters=n_cl,affinity='precomputed',linkage='average')",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
agg,"sklearn.cluster.AgglomerativeClustering(n_clusters=num_clust_ch,affinity='precomputed',linkage='complete')",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
cv_s,"sklearn.model_selection.StratifiedKFold(5,shuffle=True)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"d_train[""string{0}"".format(res)]",sklearn.model_selection.GridSearchCV(svm.SVC(),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
clf,sklearn.model_selection.GridSearchCV(svm.SVC(),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
clf,sklearn.model_selection.GridSearchCV(svm.SVC(),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
clf,sklearn.model_selection.GridSearchCV(svm.SVC(),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
sss,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=split_valid,train_size=split_train,random_state=33)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
Matrix_conf,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
Matrix_conf,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
Matrix_conf,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
Matrix_conf,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
Matrix_conf,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
s,pandas.Series(data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,pandas.Series(data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,pandas.Series(data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,"pandas.Series([2,4,6,8])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,"pandas.Series([2,4,6,8])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,pandas.Series(data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,pandas.Series(data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,pandas.Series(data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,pandas.Series(data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,pandas.Series(data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,pandas.Series(data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
train,pandas.read_csv('train.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
rank_est,"numpy.arange(1,len(user_ratings[:k])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
rank_true,"numpy.arange(1,len(user_ratings[:k])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
discount_est,numpy.log2(rank_est+1),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
discount_true,numpy.log2(rank_true+1),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
user_est_true,collections.defaultdict(list),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
user_est_true,collections.defaultdict(list),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(12,4)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax1,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax1,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax1,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
all_time_sum_pooled,"all_time_sum_pooled.reindex(index=numpy.arange(-200,200)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
r,"numpy.arange(0,N,dtype=np.float)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GLUCOSE_GROWTH_CURVE_STDDEV,"numpy.array([0.00058,0.00208,0.00306,0.00058,0.01210,0.00321,0.00100,0.00306,0.00153,0.00208])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax1.set_ylim(bottom,"-0.1*numpy.ceil(max(modcount_means+unmodcount_means)),top=numpy.ceil(max(modcount_means+unmodcount_means)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
nrows,numpy.ceil(nplots/2),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
posn_modFET,"pandas.DataFrame(index=unmod_prot_posn_nmod_posn_idx.index,columns=pd.MultiIndex.from_product([[1,2,3],['ExpMod','ExpUnmod','StaMod','StaUnmod','twotail_pValue','greater_pValue','less_pValue']],sortorder=0,names=['BiolRep','PeptCounts'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
FE_pval_biorep,"pandas.DataFrame(index=FE_df.index,columns=['Exponential','Stationary','pValue'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
reps,"pandas.concat(reps_ls,axis=1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
unmodified_pepts_fdr1,"pandas.read_pickle(""data/unmodified_pept_fdr1.pck"")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
unmodified_posn_fdr1,"pandas.read_pickle(""data/unmodified_posn_fdr1.pck"")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
modified_pepts_fdr1,"pandas.read_pickle(""data/modified_pept_fdr1.pck"")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
all_pept_fdr1,"pandas.read_pickle(""data/all_pept_fdr1.pck"")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Data,pandas.read_csv('kc_house_data.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=600,min_samples_split=2,max_depth=5,loss='ls')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
match_data,pandas.read_csv('finalDataset.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
DTclf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""employees.csv"",parse_dates=[""StartDate"",""LastLoginTime""])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dataset,"pandas.DataFrame(data,columns=columns)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,"pandas.DataFrame(data,columns=columns)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
columns,"numpy.append(diabetes.feature_names,[""target""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
columns,"numpy.append(diabetes.feature_names,[""target""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=K_value,weights='uniform',algorithm='auto')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n_neighbors),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=18),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
it,"numpy.nditer(grid,flags=['multi_index'])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
it,"numpy.nditer(a,flags=['multi_index'])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
it,"numpy.nditer(a,flags=['multi_index'])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
it,"numpy.nditer(a,flags=['multi_index'])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
iterator,"numpy.nditer(iterator,flags=['multi_index'])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
grid,numpy.arange(9),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,numpy.arange(6),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
iterator,numpy.arange(sqr_size),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,numpy.zeros(9),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,numpy.identity(3*3),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
observation_space,numpy.identity(sqr_size),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
read_data,"pandas.read_excel(temp_name,skiprows=1)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
accuracies_mean,numpy.array([np.mean(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
accuracies_std,numpy.array([np.std(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
idxs,numpy.flatnonzero(y_train==y),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_one,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_two,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('email_network.txt',delimiter='\t')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data_test,pandas.read_csv('final_testing.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
maj_dummy_classifier,"sklearn.dummy.DummyClassifier(strategy=""most_frequent"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rand_dummy_classifier,"sklearn.dummy.DummyClassifier(strategy=""stratified"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
hotel_df,pandas.DataFrame(narrow_df),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
weather_data,pandas.read_csv(weather_data),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
response,"requests.get(base_url,params=params)",CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
name_address,"requests.get(base_url,params=params)",CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
resp1,"requests.post(url=url1,data=json.dumps(data)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
tag_associations_df,"pandas.DataFrame(tag_associations,columns=['tag','title','publication_month','url'])",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
df,"pandas.read_csv(filename,encoding='utf-8')",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
resp2,"requests.get(url=url2,headers=headers2)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
resp1,"requests.post(url=url1,data=json.dumps(data)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
today,datetime.datetime.now(),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
d,"datetime.datetime.strptime(col,'%Y-%m')",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
ImgMid,math.floor(ImgSize/2),CLUSTER_23,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
Img,"numpy.zeros((ImgSize,410)",CLUSTER_23,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
imgplot,matplotlib.pyplot.imshow(Img),CLUSTER_23,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
imgplot,matplotlib.pyplot.imshow(Img),CLUSTER_23,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
rain_drops,"numpy.zeros(n_drops,dtype=[('position',float,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"rain_drops['color'][:,3]","numpy.clip(rain_drops['color'][:,3],0,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.sin(2*np.pi*(x-0.01*i),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,2*np.pi,120)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(0,2*np.pi,100)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,2,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.axes(xlim=(0,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(7,7)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
im,"plt.imshow(f(x,y),cmap=matplotlib.pyplot.get_cmap('viridis')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
im,"matplotlib.pyplot.imshow(f(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
coords,"pandas.DataFrame({""latitude"":lats,""longitude"":longs})",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.DataFrame({""latitude"":[37],""longitude"":[-122]})",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
weather_df,pandas.DataFrame(important_json_data),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,requests.get(query),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_flights,pandas.concat(dict_df.values(),CLUSTER_0,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
"dict_df[""df_{}"".format(date)]","pandas.read_csv(""flights{}.csv"".format(date)",CLUSTER_0,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_flights[""date""]","pandas.to_datetime(df_flights[""date""])",CLUSTER_0,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
date_to_string,pandas.to_datetime(str(date),CLUSTER_0,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
t,"numpy.arange(0.,tStop,tInc)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(1,figsize=(8,8)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
psoln,"scipy.integrate.odeint(f,y0,t,args=(params,)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
d2,"datetime.date(2015,10,11)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
today,datetime.date.today(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
d1,datetime.date.today(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
t,"datetime.time(5,25,1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
feat_importances,"pandas.Series(model.feature_importances_,index=X.columns)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.get_dummies(data,columns=['City',],dummy_na=True)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['Number_of_Reviews_isNAN'],pandas.isna(data['NumberofReviews']),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['Cuisine_Style_isNAN'],pandas.isna(data['CuisineStyle']),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['Price_Range_isNAN'],pandas.isna(data['PriceRange']),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['Reviews_isNAN'],pandas.isna(data['Reviews']),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(DATA_DIR+'/main_task.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv(DATA_DIR+'kaggle_task.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
sample_submission,pandas.read_csv(DATA_DIR+'/sample_submission.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=RANDOM_SEED)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,verbose=1,n_jobs=-1,random_state=RANDOM_SEED)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
resultDF,pandas.DataFrame(X.toarray(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
corpDF,"pandas.DataFrame({'Corpus':corpusMetaData,'Label':labelsMetaData})",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
predDF,"pandas.DataFrame(columns=['Prediction','Observed','Fold'])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
finalDF,"pandas.DataFrame({'FeatureName':inputData.columns,'FeatureImportance':rf.feature_importances_})",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
finalDF,"pandas.DataFrame({'FeatureName':inputData.columns,'FeatureImportance':rf.feature_importances_})",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
finalDF,"pandas.DataFrame({'FeatureName':inputData.columns,'FeatureImportance':rf.feature_importances_})",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
corpMetaData,"pandas.read_csv(""CorpusMetaDataPostiveExamples_2018-02-04.csv"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
corpMetaData,"pandas.read_csv(""CorpusMetaData_2018-02-08.csv"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
corpMetaData,"pandas.read_csv(""CorpusMetaData_2018-02-06.csv"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
predLabels,numpy.where(preds==1),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
obsLabels,"numpy.where(testNewDF120.iloc[:,-1]==1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
match,"re.search(timePattern,line)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
match,re.search(r'(r\d+),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
line,"re.sub(r'\s\d+\s','',line)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pattern,re.compile('(\d+-\d+-\d+),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
timePattern,re.compile('.*T(\d+:\d+:\d+),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
jobidpattern,re.compile('JID:(\d+),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
startTime,datetime.datetime.now(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
endTime,datetime.datetime.now(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
tdelta,"datetime.datetime.strptime(currentTime,FMT)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
startDate,datetime.datetime.strptime(dateRange.split(':'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
endDate,datetime.datetime.strptime(dateRange.split(':'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LogisticRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=num_folds,shuffle=True,random_state=2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(negIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(posIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(negIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(negIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(negIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(posIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(negIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(posIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(negIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(negIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(posIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(negIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(negIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(negIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
indexPicked,random.choice(posIndexesworeplacement),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(outputData,preds)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(testDF.iloc[:,-1],preds)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(outputData,preds)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(outputData,preds)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(testNewDF.iloc[:,-1],preds)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"numpy.array(data_,dtype=float)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
d_train,"numpy.array(data[0:train_split,:])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
d_test,"numpy.array(data[train_split:,:])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
z,"numpy.multiply(W[1],D[0])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(mnist.train.images,(data_size,image_size,image_size,channel)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(mnist.test.images,(test_data_size,image_size,image_size,channel)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
"sessions_df.loc[pages_less_than1,'pagetime']",pandas.Timedelta(0),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_1
sessions_df,"pandas.read_pickle(os.path.join('data','sessions.pkl')",CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_1
mat,"numpy.arange(0,100)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,numpy.array(my_list),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.sin(x),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,10,n)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mush_df2,pandas.get_dummies(mush_df),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mush_df,pandas.read_csv('mushrooms.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,random_state=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train2,X_test2,y_train2,y_test2","sklearn.model_selection.train_test_split(X_mush,y_mush,random_state=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
positions,numpy.arange(len(doors),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
doors,numpy.full((no_doors),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
positions,"numpy.delete(positions,user_choice)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
doors_to_choose_from,"numpy.append(user_choice,positions)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
P,"numpy.array([[1,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v1,"numpy.array(np.random.uniform(-2,2,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
P,"numpy.array([[1,2]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v1,"numpy.array(np.random.uniform(-4,4,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
P,"numpy.array([[1,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v1,"numpy.array([[1,2]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v2,"numpy.array([[-1,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v3,"numpy.array([[-2,-1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
P1,"numpy.array([[1,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
P2,"numpy.array([[-1,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
P3,"numpy.array([[-1,-1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v,"numpy.array([[2,2]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v,"numpy.array([[2,2]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
document_embedding,"numpy.array([0,0,0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
PT,"numpy.dot([[0,1],[-1,0]],P.T)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dotproduct,"numpy.dot(P,v.T)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dotproduct,"numpy.dot(P,v.T)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
side_of_plane,"numpy.sign(np.dot(P,v1.T)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
side_of_plane,"numpy.sign(np.dot(P,v1.T)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sign_of_dot_product,numpy.sign(dotproduct),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sign_of_dot_product,numpy.sign(dotproduct),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax1","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax1","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('Housing.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_input,"sklearn.preprocessing.scale(data.iloc[:,:12].values)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
temp,"seaborn.heatmap(correlations,cbar=True,square=True,annot=True,
fmt='.2f',annot_kws={'size':12},cmap='coolwarm')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
j,"numpy.array(idx[i:min(i+batch_size,num_examples)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
b,"numpy.zeros((1,)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
sqr+,"numpy.multiply(grad,grad)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_axis,"numpy.linspace(0,epochs,len(total_loss)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
grad_w,"numpy.expand_dims(np.array([-np.dot((yhat-np.reshape(y,yhat.shape)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
inside_bool,numpy.sqrt(x**2+y**2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"x,y",random.random(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"x,y",random.random(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
travel_df,pandas.read_excel(file_name),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
curve_start,"pandas.DataFrame([aforainzip(y_start,x_start)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df0,"pandas.DataFrame([aforainzip(day_october,y0)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df1,"pandas.DataFrame([aforainzip(day_october1,y1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df2,"pandas.DataFrame([aforainzip(day_october,y2)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
categorie0,"pandas.DataFrame([aforainzip(x_imputation,y0_imputation)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
categorie1,"pandas.DataFrame([aforainzip(x_imputation,y1_imputation)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
categorie2,"pandas.DataFrame([aforainzip(x_imputation,y2_imputation)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df1_imput,"pandas.DataFrame([aforainzip(date_imputation,price1_imputation)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
nb_sales_month_012,"pandas.DataFrame([aforainzip(x_month,nb_sales_month_012)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
nb_sales_month_0,"pandas.DataFrame([aforainzip(x_month,nb_sales_month_0)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
nb_sales_month_1,"pandas.DataFrame([aforainzip(x_month,nb_sales_month_1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
nb_sales_month_2,"pandas.DataFrame([aforainzip(x_month,nb_sales_month_2)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
SR_customer,"pandas.DataFrame([aforainzip(customer,SR_customer)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
SR_product,"pandas.DataFrame([aforainzip(product,SR_product)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
tx,pandas.DataFrame(tx),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ty,pandas.DataFrame(ty),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
correlation_total_amount_purchases_age,"pandas.DataFrame([aforainzip(client_age['client_id'],client_age['age'],total_amount_purchases)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
correlation_purchase_frequency_per_age,"pandas.DataFrame([aforainzip(client_age['client_id'],client_age['age'],nb_sessions_per_client/12)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
correlation_average_shopping_basket_size_age,"pandas.DataFrame([aforainzip(client_age['client_id'],client_age['age'],nb_purchased_products_per_client/nb_sessions_per_client)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
tx,pandas.DataFrame(tx),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ty,pandas.DataFrame(ty),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data['date'],pandas.DatetimeIndex(data['datetime']),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data['year'],pandas.DatetimeIndex(data['datetime']),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data['month'],pandas.DatetimeIndex(data['datetime']),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data['yearmonth'],pandas.DatetimeIndex(data['datetime']),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data['day'],pandas.DatetimeIndex(data['datetime']),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.merge(products,transactions,how='outer',left_on='id_prod',right_on='id_prod')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.merge(customers,data,how='outer',left_on='client_id',right_on='client_id')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data_imputation,"pandas.merge(categorie0,categorie1,on=['date'],how='left')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data_imputation,"pandas.merge(data_imputation,categorie2,on=['date'],how='left')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
imputation,"pandas.merge(df0,df1,on=['date'],how='left')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
imputation,"pandas.merge(imputation,df2,on=['date'],how='left')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data_imputation_nb_sales,"pandas.merge(nb_sales_month_0,nb_sales_month_1,on=['month'],how='left')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data_imputation_nb_sales,"pandas.merge(data_imputation_nb_sales,nb_sales_month_2,on=['month'],how='left')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
customers,"pandas.read_csv(""dataset_P4/customers.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
products,"pandas.read_csv(""dataset_P4/products.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
transactions,"pandas.read_csv(""dataset_P4/transactions.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y1,numpy.array(categ_sex.f),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y2,numpy.array(categ_sex.m),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
SR_client_list,"numpy.asarray(data.groupby([""client_id""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
SR_product_list,"numpy.asarray(data.groupby([""id_prod""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
lorenz,numpy.cumsum(np.sort(SR_client_list),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
lorenz,numpy.cumsum(np.sort(SR_product_list),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"plt.bar(x_month,SR2_month,bottom","numpy.add(SR0_month,SR1_month)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"plt.bar(x_month,nb_sales_month_2.nb_sales2,bottom","numpy.add(nb_sales_month_0.nb_sales0,nb_sales_month_1.nb_sales1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"plt.bar(x_month,nb_sales_month_2.nb_sales2,bottom","numpy.add(nb_sales_month_0.nb_sales0,nb_sales_month_1.nb_sales1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,1,len(lorenz)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,1,len(lorenz)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
correlation_total_amount_purchases_age['categ_age'],"numpy.select(conditions,choices)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
correlation_purchase_frequency_per_age['categ_age'],"numpy.select(conditions,choices)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
correlation_average_shopping_basket_size_age['categ_age'],"numpy.select(conditions,choices)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data_correlations['categ_age'],"numpy.select(conditions,choices)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
lorenz,"numpy.append([0],lorenz)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
lorenz,"numpy.append([0],lorenz)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(mesure/xi_n,annot=categ_sex,linewidths=0.5,annot_kws={""size"":20})",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(mesure/xi_n,annot=categ_categ_age,linewidths=0.5,annot_kws={""size"":20})",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pearson1,"scipy.stats.pearsonr(X1['age'],Y1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pearson2,"scipy.stats.pearsonr(X2['age'],Y2)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pearson3,"scipy.stats.pearsonr(X3['age'],Y3)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pearson4,"scipy.stats.pearsonr(X4['age'],Y4)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pearson5,"scipy.stats.pearsonr(X5['age'],Y5)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pearson6,"scipy.stats.pearsonr(X6['age'],Y6)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pearson7,"scipy.stats.pearsonr(X7['age'],Y7)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"chi2,pvalue,degrees,expected",scipy.stats.chi2_contingency(np.array(categ_sex),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"chi2,pvalue,degrees,expected",scipy.stats.chi2_contingency(np.array(categ_categ_age),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_train,sklearn.svm.SVR(gamma=0.1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_test,sklearn.svm.SVR(gamma=0.1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_small,sklearn.svm.SVR(gamma=0.1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_pca_train,sklearn.svm.SVR(gamma=0.1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_pca_test,sklearn.svm.SVR(gamma=0.1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_PCA_small,sklearn.svm.SVR(gamma=0.1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
slr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
slr1,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.15,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.make_pipeline(scaler,pca)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.make_pipeline(scaler,pca)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df1,"pandas.read_csv(r""C:\Users\dmoha\Downloads\hw5_treasuryyieldcurvedata.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse_OG_tr,"numpy.sqrt(mean_squared_error(y_train,y_pred_OG_tr)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse_OG,"numpy.sqrt(mean_squared_error(y_test,y_pred_OG)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse_PCA_tr,"numpy.sqrt(mean_squared_error(y_train,y_pred_PCA_tr)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse_PCA,"numpy.sqrt(mean_squared_error(y_test,y_pred_PCA)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse_og_svm_tr,"numpy.sqrt(mean_squared_error(y_train_OG_small,y_train_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse_og_svm_tst,"numpy.sqrt(mean_squared_error(y_test_OG_small,y_test_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse_PCA_svm_tr,"numpy.sqrt(mean_squared_error(y_train_PCA_small,y_train_PCA_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse_PCA_svm_tst,"numpy.sqrt(mean_squared_error(y_test_PCA_small,y_test_PCA_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(df[ticker]['prices']),CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(portfolio),CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_crypto,pandas.DataFrame(portfolio),CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
data[tiker],"pandas.read_csv(""data/{}.csv"".format(tiker)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
data[tiker],"pandas.read_csv(""data/{}.csv"".format(tiker)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
df.index,pandas.to_datetime(df.index),CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
RC,"numpy.multiply(MRC,w.T)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
sigma,"numpy.sqrt(calculate_portfolio_var(w,V)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
sig_p,"numpy.sqrt(calculate_portfolio_var(x,V)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,40,1000)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,40,1000)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
w,numpy.matrix(w),CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
w,numpy.matrix(w),CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
risk_target,"numpy.asmatrix(np.multiply(sig_p,x_t)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,collections.OrderedDict(),CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,collections.OrderedDict(),CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
perf,"zipline.run_algorithm(start=datetime.datetime(2015,1,17,0,0,0,0,pytz.utc)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,"datetime.datetime(2020,1,17,0,0,0,0,pytz.utc)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
perf,"zipline.run_algorithm(start=datetime.datetime(2015,1,17,0,0,0,0,pytz.utc)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,"datetime.datetime(2020,1,17,0,0,0,0,pytz.utc)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
perf,"zipline.run_algorithm(start=datetime.datetime(2015,1,17,0,0,0,0,pytz.utc)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,"datetime.datetime(2020,1,17,0,0,0,0,pytz.utc)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
perf,"zipline.run_algorithm(start=datetime.datetime(2015,1,17,0,0,0,0,pytz.utc)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,"datetime.datetime(2020,1,17,0,0,0,0,pytz.utc)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
perf,"zipline.run_algorithm(start=datetime.datetime(2015,8,6,0,0,0,0,pytz.utc)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,"datetime.datetime(2020,1,16,0,0,0,0,pytz.utc)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
perf,"zipline.run_algorithm(start=datetime.datetime(2015,8,6,0,0,0,0,pytz.utc)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,"datetime.datetime(2020,1,16,0,0,0,0,pytz.utc)",CLUSTER_14,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.arange(kclusters),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
Toronto_onehot,"pandas.get_dummies(Toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
coords,pandas.read_csv(r'Desktop/Geospatial_Coordinates.csv'),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
tables,pandas.read_html(url),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
kmeanModel,"sklearn.cluster.KMeans(n_clusters=k,n_init=30)",CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
dfgh,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,pandas.Series(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df0,pandas.Series([user_choice]*cnt),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df1,pandas.Series(A),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,"pandas.concat([df0,df1],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('party.csv',dtype='uint64')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
CS_new,"numpy.power(res2.root,2)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
CS_new,"numpy.power(demandAtMaxRevenue,2)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
Qs,"numpy.linspace(0,10,100)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
τ_candidates,"numpy.linspace(0,15,10000)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
zs,"numpy.linspace(0,10,100)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
res,"scipy.optimize.root_scalar(f,x0=7.5,bracket=(7,8)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
res2,"scipy.optimize.root_scalar(f2,x0=6.0,bracket=(5.5,7.0)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
res_candidate,"scipy.optimize.root_scalar(f_candidate,x0=5,bracket=(0,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
train['log_revenue'],numpy.log1p(train['revenue']),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_21,CLUSTER_0
train['log_budget'],numpy.log1p(train['budget']),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_21,CLUSTER_0
test['log_budget'],numpy.log1p(test['budget']),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_21,CLUSTER_0
train,pandas.read_csv('data/train.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_21,CLUSTER_0
test,pandas.read_csv('data/test.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_21,CLUSTER_0
train['release_date'],pandas.to_datetime(train['release_date']),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_21,CLUSTER_0
test['release_date'],pandas.to_datetime(test['release_date']),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_21,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,6)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_21,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,6)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_21,CLUSTER_0
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_21,CLUSTER_0
data,"pandas.read_sql(query,connection)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
p,"pandas.pivot_table(df,index=['algorithm'],values=v)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
p,"pandas.pivot_table(df,index=['algorithm'],columns=['process_model'],values='f1')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
p,"pandas.pivot_table(df,index=['algorithm'],columns=['p'],values='f1')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
evaluation,pandas.read_excel(str(fs.OUT_DIR/'evaluation.xlsx'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(data=df,x='process_model',y='f1',hue='algorithm',palette=microsoft_colors[:7],hue_order=hue_order,order=model_order)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(data=df,x='p',y='f1',hue='algorithm',palette=microsoft_colors[:7],hue_order=hue_order)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g0,seaborn.pointplot(data=df.query(f'algorithmin{str(ho),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g1,seaborn.pointplot(data=df.query(f'algorithmin{str(ho),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ad_data,pandas.read_csv('advertising.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logmodel,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.35)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
idx,"numpy.array([2*p,2*p+2])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xi[idx]+,"numpy.array([-dx,dx])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xi[idx]+,"numpy.array([-dy,dy])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
omega,"numpy.zeros((size,size)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xi,"numpy.zeros((size,1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
omega_inverse,numpy.linalg.inv(np.matrix(omega),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['Recency_Months_quartiles'],"pandas.qcut(df['Recency_Months'],4)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""googleplaystore.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df['LastUpdated'],"pandas.to_datetime(df['LastUpdated'],errors='coerce')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df['Month'],"pandas.to_datetime(df['LastUpdated'],format=""%Y%m"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
size,numpy.array([len(app_paid_sample),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
sd,numpy.array([app_paid_sample.std(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
var,numpy.array([app_paid_sample.var(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
size,numpy.array([len(cat_fam_parenting_sample),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
sd,numpy.array([cat_fam_parenting_sample.std(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
var,numpy.array([cat_fam_parenting_sample.var(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(25,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(25,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(25,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(25,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(25,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(25,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(25,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(25,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(25,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(df_r[['Category','Rating']],col=""Category"",aspect=2,col_wrap=4)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
sample_num,math.floor(len(app_free),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
sample_num,math.floor(len(cat_fam_parenting),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
sample_num,math.floor(len(cat_game_ent),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,1,figsize=(10,10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,3,figsize=(20,10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(4,5,figsize=(10,10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(row_cnt,5,figsize=(20,10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(4,5,figsize=(10,10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,3,figsize=(21,7)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,3,figsize=(9,3)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,1,figsize=(3,3)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,20)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xx,numpy.arange(40),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
positive_patches,"numpy.array([transform.resize(patch,window_size)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
positive_patches,"numpy.array([transform.resize(patch,window_size)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
patches,"numpy.array([transform.resize(patch,patch_size)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
patches,"numpy.array([transform.resize(patch,patch_size)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,numpy.array([feature.hog(im),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,numpy.array([feature.hog(im),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
patches_hog,numpy.array([feature.hog(patch),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
detected_faces_upper_left_corners,numpy.array(indices),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.array(indices),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.array(indices),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
patches_features,numpy.array([feature.hog(patch),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
patches,numpy.array(patches),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
detected_faces_upper_left_corners,numpy.array(indices),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train_images,numpy.zeros(X_train_images.shape[0]),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train,numpy.zeros(X_train.shape[0]),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train,numpy.zeros(X_train.shape[0]),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
composite_image,"numpy.zeros((rows,cols+cols//2,3)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labels,"numpy.where(labels[:,1]>prob_threshold,1,0)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labels,"numpy.where(labels>=prob_threshold,1,0)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
detected_faces_bboxes,"numpy.concatenate((detected_faces_bboxes,detected_faces_bboxes_lvl*(i+2)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
idxs,numpy.argsort(idxs),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
idxs,numpy.argsort(idxs),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xx1,"numpy.maximum(x1[i],x1[idxs[:last]])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
yy1,"numpy.maximum(y1[i],y1[idxs[:last]])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
w,"numpy.maximum(0,xx2-xx1+1)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h,"numpy.maximum(0,yy2-yy1+1)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xx1,"numpy.maximum(x1[i],x1[idxs[:last]])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
yy1,"numpy.maximum(y1[i],y1[idxs[:last]])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
w,"numpy.maximum(0,xx2-xx1+1)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h,"numpy.maximum(0,yy2-yy1+1)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xx2,"numpy.minimum(x2[i],x2[idxs[:last]])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
yy2,"numpy.minimum(y2[i],y2[idxs[:last]])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xx2,"numpy.minimum(x2[i],x2[idxs[:last]])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
yy2,"numpy.minimum(y2[i],y2[idxs[:last]])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
negative_patches,"numpy.vstack([extract_patches(im,500,scale)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
negative_patches,"numpy.vstack([extract_patches(im,500,scale)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
idxs,"numpy.delete(idxs,np.concatenate(([last],
np.where(overlap>overlapThresh)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
idxs,"numpy.delete(idxs,np.concatenate(([last],
np.where(overlap>overlapThresh)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
detected_faces_upper_left_corners,"numpy.append(detected_faces_upper_left_corners,np.expand_dims(detected_faces_upper_left_corners[:,0]+positive_patches[0].shape[0],1)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
detected_faces_upper_left_corners,"numpy.append(detected_faces_upper_left_corners,np.expand_dims(detected_faces_upper_left_corners[:,1]+positive_patches[0].shape[1],1)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
detected_faces_upper_left_corners,"numpy.append(detected_faces_upper_left_corners,np.expand_dims(detected_faces_upper_left_corners[:,0]+patch_size[0],1)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
detected_faces_upper_left_corners,"numpy.append(detected_faces_upper_left_corners,np.expand_dims(detected_faces_upper_left_corners[:,1]+patch_size[1],1)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
patches_features,"numpy.expand_dims(patches,3)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,"numpy.expand_dims(X_train,3)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_valid,"numpy.expand_dims(X_valid,3)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
faces,sklearn.datasets.fetch_lfw_people(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
faces,sklearn.datasets.fetch_lfw_people(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,sklearn.model_selection.GridSearchCV(LinearSVC(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.calibration.CalibratedClassifierCV(model_svc),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.calibration.CalibratedClassifierCV(model_svc),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X_train_images,y_train_images,test_size=0.20,random_state=42)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
SInteg,"numpy.cumsum(SNTS,axis=0)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,1,N)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
xnew,"numpy.linspace(0,1,int(fac*N)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
xA,"numpy.linspace(0,1,lA)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
f,"scipy.interpolate.interp1d(x,TS,kind='cubic')",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
fA,"scipy.interpolate.interp1d(xA,AS,kind='cubic')",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('data.csv',names=column_names)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_arr,Y_arr,test_size=0.05,shuffle=True,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
total_step,math.ceil(len(data_loader.dataset.caption_lengths),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
old_time,time.time(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
classes,"os.listdir(DATASET_DIR+""/ann/"")",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
image_id,random.choice(dataset.image_ids),CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
box2,"numpy.array([(0,0)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
box,numpy.zeros_like(approx),CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
chars2,numpy.stack(chars2),CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
ys,numpy.unique(classes),CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
"_,ax","matplotlib.pyplot.subplots(rows,cols,figsize=(size*cols,size*rows)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
U_had,"numpy.array([[1,1],[1,-1]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
U_cnot,"numpy.array([[1,0,0,0],[0,0,0,1],[0,0,1,0],[0,1,0,0]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
xtick_marks,numpy.arange(len(true_labels),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_4
ytick_marks,numpy.arange(len(pred_labels),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_4
images,"numpy.array(images,dtype=np.uint8)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_4
y_test_images,"numpy.zeros((1,len(os.listdir('training_data')",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_4
r,numpy.amax(result),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_4
resultArray,numpy.argsort(result),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_4
images,"numpy.multiply(images,1.0/255.0)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_4
true_labels,numpy.unique(y_true),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_4
pred_labels,numpy.unique(y_pred),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_4
train,"pandas.read_csv('train_log.csv',usecols=['Epoch','Train_accuracy','validation_accuracy'])",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_4
df,"pandas.read_csv(""train_log.csv"",delim_whitespace=True)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_4
cm_array,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_4
cbar,"matplotlib.pyplot.colorbar(fraction=0.046,pad=0.04)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_4
housing,pandas.read_csv('housing_data.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
figsize,"(13,9),label=""population"",c=""median_house_value"",cmap=matplotlib.pyplot.get_cmap(""jet"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
label,"'population',figsize=(13,9),c='median_house_value',cmap=matplotlib.pyplot.get_cmap('jet')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_set,test_set","sklearn.model_selection.train_test_split(housing,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
v,numpy.sqrt((datos['vx']),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
datos,"numpy.genfromtxt('Rayleigh.csv',delimiter="","",names=True)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ips_idxs,numpy.arange(len(y_test),CLUSTER_10,CLUSTER_7,CLUSTER_10,CLUSTER_0,CLUSTER_1
ips_idxs,numpy.arange(len(y_test),CLUSTER_10,CLUSTER_7,CLUSTER_10,CLUSTER_0,CLUSTER_1
ips_idxs,numpy.arange(len(y_test),CLUSTER_10,CLUSTER_7,CLUSTER_10,CLUSTER_0,CLUSTER_1
auc_ncf,"sklearn.metrics.roc_auc_score(y_test,test_pred)",CLUSTER_10,CLUSTER_7,CLUSTER_10,CLUSTER_0,CLUSTER_1
auc_ncf,"sklearn.metrics.roc_auc_score(y_test,test_pred)",CLUSTER_10,CLUSTER_7,CLUSTER_10,CLUSTER_0,CLUSTER_1
auc_ncfips,"sklearn.metrics.roc_auc_score(y_test,test_pred)",CLUSTER_10,CLUSTER_7,CLUSTER_10,CLUSTER_0,CLUSTER_1
auc_ncfsnips,"sklearn.metrics.roc_auc_score(y_test,test_pred)",CLUSTER_10,CLUSTER_7,CLUSTER_10,CLUSTER_0,CLUSTER_1
auc_mfdr,"sklearn.metrics.roc_auc_score(y_test,test_pred)",CLUSTER_10,CLUSTER_7,CLUSTER_10,CLUSTER_0,CLUSTER_1
elifCounter(string1),=collections.Counter(string2),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
elifCounter(string1),=collections.Counter(string2),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(dpi=100),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
img,numpy.array(img),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
img,numpy.array(img),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
img,numpy.array(img),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
img,numpy.array(img),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
img,numpy.array(img),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
img,numpy.array(img),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
img,numpy.array(img),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.y_true,numpy.zeros(len(frame_paths),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.y_score,numpy.zeros(len(frame_paths),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
diffs,"numpy.zeros(n_blocks,dtype=np.float32)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
rows,"numpy.vsplit(img,nrows)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
rows,"numpy.vsplit(img,nrows)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
rows,"numpy.vsplit(img,nrows)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
rows,"numpy.vsplit(img,nrows)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({
'th':th,
'pr':pr[:-1],
're':re[:-1]
})",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ap,"sklearn.metrics.average_precision_score(self.y_true,self.y_score)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ap,"sklearn.metrics.average_precision_score(self.y_true,self.y_score)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"pr,re,th","sklearn.metrics.precision_recall_curve(self.y_true,self.y_score)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"pr,re,th","sklearn.metrics.precision_recall_curve(self.y_true,self.y_score)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cos_x,numpy.cos(x),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sin_x,numpy.sin(x),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tan_x,numpy.tan(x),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(1,10,100)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
store,pandas.HDFStore(DATA_STORE),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
label_map,"pandas.Series(labels,beta.columns)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
gb,"pandas.concat([isl,probe_annotations],axis=1)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
probe_annotations,"pandas.read_csv(PATH,index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_blobs(n_samples=500,
n_features=2,
centers=5,
cluster_std=1,
center_box=(-10.0,10.0)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clusterer,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=10)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
sample_silhouette_values,"sklearn.metrics.silhouette_samples(X,cluster_labels)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
tok2idx,collections.defaultdict(lambda:0),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
order,numpy.arange(n_samples),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
lengths,"numpy.zeros(current_batch_size,dtype=np.int32)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.ones([current_batch_size,max_len_token],dtype=np.int32)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,"numpy.ones([current_batch_size,max_len_token],dtype=np.int32)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
t0,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
t_batch,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
t0,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
t_mini_batch,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
k_means_cluster_centers,"numpy.sort(k_means.cluster_centers_,axis=0)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
mbk_means_cluster_centers,"numpy.sort(mbk.cluster_centers_,axis=0)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
identic,numpy.logical_not(different),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,3)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
mbk,"sklearn.cluster.MiniBatchKMeans(init='k-means++',n_clusters=3,batch_size=batch_size,
n_init=10,max_no_improvement=10,verbose=0)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
k_means,"sklearn.cluster.KMeans(init='k-means++',n_clusters=3,n_init=10)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
CATEGORIES,"pandas.DataFrame(CATEGORIES_data,columns=['id','Category','Fraction','Description'])",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lemmas,pandas.DataFrame(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
CATEGORIES_df,"pandas.merge(CATEGORIES,grouped,on='id')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
CATEGORIES_df,"pandas.merge(CATEGORIES_df,lemmas,on='id')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,data_A,on='Lemma',how='left')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,data_B,on='Lemma',how='left')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,data_C,on='Lemma',how='left')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,data_D,on='Lemma',how='left')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,data_E,on='Lemma',how='left')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,data_F,on='Lemma',how='left')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,data_G,on='Lemma',how='left')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,data_H,on='Lemma',how='left')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,data_I,on='Lemma',how='left')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('results/tagtext.lemma.freq.txt',sep=""\t"",header=None)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_A,"pandas.read_csv('results/tagtext_A.lemma.freq.txt',sep=""\t"",header=None)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_B,"pandas.read_csv('results/tagtext_B.lemma.freq.txt',sep=""\t"",header=None)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_C,"pandas.read_csv('results/tagtext_C.lemma.freq.txt',sep=""\t"",header=None)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_D,"pandas.read_csv('results/tagtext_D.lemma.freq.txt',sep=""\t"",header=None)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_E,"pandas.read_csv('results/tagtext_E.lemma.freq.txt',sep=""\t"",header=None)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_F,"pandas.read_csv('results/tagtext_F.lemma.freq.txt',sep=""\t"",header=None)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_G,"pandas.read_csv('results/tagtext_G.lemma.freq.txt',sep=""\t"",header=None)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_H,"pandas.read_csv('results/tagtext_H.lemma.freq.txt',sep=""\t"",header=None)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_I,"pandas.read_csv('results/tagtext_I.lemma.freq.txt',sep=""\t"",header=None)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
bins,"numpy.arange(0,250,25)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
bins,"numpy.arange(0,250,25)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"_,bins,patches","matplotlib.pyplot.hist([np.clip(values_A,bins[0],bins[-1])",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"_,bins,patches","matplotlib.pyplot.hist([np.clip(values_A,bins[0],bins[-1])",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,5)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,5)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x0_batch,"numpy.array([[0,1],[2,3],[4,5]])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x1_batch,"numpy.array([[100,101],[102,103],[104,105]])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
dummy_feature_matrix,"numpy.array([[2.5,0.3,2.8,0.5],[1.,-1.,-1.,1]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dummy_coefficients,"numpy.array([1.,-1.,1.,1.])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
correct_scores,numpy.array([1.*1.+2.*3.+3.*(-1.),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
correct_predictions,numpy.array([1./(1+np.exp(-correct_scores[0]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dummy_feature_matrix,"numpy.array([[1.,2.,3.],[1.,-1.,-1]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dummy_coefficients,"numpy.array([1.,3.,-1.])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dummy_sentiment,"numpy.array([0,1])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
correct_indicators,"numpy.array([-1==+1,1==+1])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
correct_scores,numpy.array([1.*1.+2.*3.+3.*(-1.),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
correct_first_term,numpy.array([(correct_indicators[0]-1),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
correct_second_term,numpy.array([np.log(1.+np.exp(-correct_scores[0]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
coefficients,numpy.array(initial_coefficients),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
predictions,"numpy.array(list(map(lambdax:1ifx>0else0,scores)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
coefficients,"logistic_regression(feature_matrix,sentiment,initial_coefficients=numpy.zeros(194)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
num_mistakes,numpy.count_nonzero(predictions),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
product,"numpy.dot(feature_matrix,coefficients)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
derivative,"numpy.dot(errors,feature)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
lp,numpy.sum((indicator-1),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
mask,numpy.isinf(logexp),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
logexp,numpy.log(1.+np.exp(-scores),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
important_words,json.load(f),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
html_data,requests.get(UK_news_url),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'topic':article_topics,'title':article_titles,'content':article_contents})",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
predictions_df,"pandas.get_dummies(df,columns=['predictions'])",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
spectral,"sklearn.cluster.SpectralClustering(n_clusters=n_clusters,
eigen_solver='arpack',
affinity=""nearest_neighbors"",
n_neighbors=10)",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_to_analyse,"pandas.concat([fb_returns,ibm_returns,mmm_returns,amzn_returns],join='outer',axis=1)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fb,"pandas.read_csv('fb_2012-7-31_2017-6-30.csv',parse_dates=['Date'],index_col=['Date'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fb,"pandas.read_csv('fb_2012-7-31_2017-6-30.csv',usecols=['Date','AdjClose'],parse_dates=['Date'],index_col='Date',squeeze=True)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mmm,"pandas.read_csv('mmm_2012-7-31_2017-6-30.csv',usecols=['Date','AdjClose'],parse_dates=['Date'],index_col='Date',squeeze=True)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ibm,"pandas.read_csv('ibm_2012-7-31_2017-6-30.csv',usecols=['Date','AdjClose'],parse_dates=['Date'],index_col='Date',squeeze=True)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
amzn,"pandas.read_csv('amzn_2012-7-31_2017-6-30.csv',usecols=['Date','AdjClose'],parse_dates=['Date'],index_col='Date',squeeze=True)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
start,"datetime.datetime(2013,11,12)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
end,"datetime.datetime(2018,11,12)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
R,numpy.corrcoef(corr_plt),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
walk,os.walk(c_dir),CLUSTER_30,CLUSTER_11,CLUSTER_6,CLUSTER_0,CLUSTER_1
walk,os.walk(c_dir),CLUSTER_30,CLUSTER_11,CLUSTER_6,CLUSTER_0,CLUSTER_1
white_wine,"pandas.read_csv("".\DataSet\winequality-white.csv"",sep="";"",quotechar='""')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
labelEncoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.25,random_state=5)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.40,random_state=5)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=200),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=10),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=200),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=10),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"svc_fpr,svc_tpr,svc_th","sklearn.metrics.roc_curve(y_test,y_pred_svc)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"rf_fpr,rf_tpr,rf_th","sklearn.metrics.roc_curve(y_test,y_pred_rf)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"knn_fpr,knn_tpr,knn_th","sklearn.metrics.roc_curve(y_test,y_pred_knn)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"svc_fpr,svc_tpr,svc_th","sklearn.metrics.roc_curve(y_test,y_pred_svc)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"rf_fpr,rf_tpr,rf_th","sklearn.metrics.roc_curve(y_test,y_pred_rf)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"knn_fpr,knn_tpr,knn_th","sklearn.metrics.roc_curve(y_test,y_pred_knn)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"numpy.asarray(reshape(listit,onlyhigh)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
labs,numpy.asarray(raw),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
d,pandas.Series(d),CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
ts,pandas.concat(series),CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
runtime,"pandas.read_csv(environment.RUN_TIME_LOG,header=None,names=['start','stop','numProcessed','note'])",CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
s,"pandas.read_csv(path,squeeze=True)",CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
queries,"pandas.read_csv(query_log,header=None,names=['runtime'])",CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
query_timestamps,"pandas.read_csv(query_time_log,header=None,names=['runTimestamp'])",CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
requests,"pandas.read_csv(request_log,header=None,names=['runtime'])",CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
request_timestamps,"pandas.read_csv(request_time_log,header=None,names=['runTimestamp'])",CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""%s/tests/benchmarks/StringProcessingWorker.csv""%TEXT_TOOLS_PATH)",CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
d,pandas.read_pickle(pickle),CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
runtime.start,pandas.to_datetime(runtime.start),CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
runtime.stop,pandas.to_datetime(runtime.stop),CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
g,"seaborn.violinplot(x=""numThreads"",y=""tweetTime"",hue=""dataStructure"",data=data)",CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(index=ts,columns=columns)",CLUSTER_8,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
raw_data,"pandas.read_excel(odfs.open(file_name,'rb')",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
data_frame,"pandas.DataFrame(Data,columns=['Meanmonthlyandannualtemperatureforperiod1961-1999','Temperatures'])",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
r,"requests.get(PID,allow_redirects=False)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
r,"requests.get('https://datahub.egi.eu/api/v3/onezone/shares/%s'%share,
headers={'X-auth-token':os.environ['ONECLIENT_ACCESS_TOKEN'],
'Accept':'application/json'})",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
r,"requests.get('https://%s/api/v3/oneprovider/spaces/%s'%(os.environ['ONEPROVIDER_HOST'],space_id)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
clf,"sklearn.model_selection.GridSearchCV(model,parameters)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(mnist.data[data],mnist.target[data],train_size=0.7)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,sklearn.svm.SVC(kernel='linear'),CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,sklearn.svm.SVC(kernel=n),CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,sklearn.svm.SVC(kernel='precomputed'),CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(C=n,kernel='poly')",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(gamma=n,kernel='poly')",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,sklearn.svm.SVC(),CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
kernel_train,"numpy.dot(xtrain,xtrain.T)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
kernel_test,"numpy.dot(xtest,xtrain.T)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(ytest,ypredTest)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
error,"sklearn.metrics.zero_one_loss(ytest,ypredTest)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y,"numpy.array([0,1,2,2,1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
correct_scores,"numpy.asarray([
[-0.81233741,-1.27654624,-0.70335995],
[-0.17129677,-1.18803311,-0.47310444],
[-0.51590475,-1.01354314,-0.8504215],
[-0.15419291,-0.48629638,-0.52901952],
[-0.00618733,-0.12435261,-0.15226949]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
val_acc,numpy.mean(net.predict(X_val),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
acc_train,numpy.mean(y_train==y_train_pred),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
acc_val,numpy.mean(y_val==y_val_pred),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_acc,numpy.mean(best_net.predict(X_test),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
boston,sklearn.datasets.load_boston(),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(data=iris.data,columns=iris.feature_names)",CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
b_df,"pandas.DataFrame(data=boston.data,columns=boston.feature_names)",CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
response,requests.get(url),CLUSTER_23,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
array,numpy.zeros(len(chaves),CLUSTER_23,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
"defmvn_pdf(X,mu","numpy.array([[0,0]]),sig=numpy.array([[1,0.],[0.,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z0,"numpy.array([1,0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,"numpy.array(np.meshgrid(r,r)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,"numpy.array(np.meshgrid(r,r)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,"numpy.reshape(z,[z.shape[0]*z.shape[1],-1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,"numpy.reshape(z,[z.shape[0]*z.shape[1],-1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sqrt_det_2pi_sig,numpy.sqrt(2*np.pi*LA.det(sig),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r,"numpy.linspace(-3,3,20)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r,"numpy.linspace(-3,3,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sig_inv,numpy.linalg.inv(sig),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r,"numpy.linalg.norm(z-z0,axis=1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r,"numpy.linalg.norm(z-z0,axis=1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axn","matplotlib.pyplot.subplots(ncols=2,nrows=1,figsize=[12,5])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mondo_hie,"pandas.read_csv(""/Users/anuragv/Box/Projects/PMBB_GWAS_PheWAS/MONDO/mondo_parent_child_relationship.txt"",sep=""\t"")",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
mondo_icd_clean,"pandas.read_csv(""/Users/anuragv/Box/Projects/PMBB_GWAS_PheWAS/MONDO/icd_mondo_mapping_clean_num_removed_icd_str.csv"",sep="","")",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data_icd,"pandas.read_csv('/Users/anuragv/Box/Projects/PMBB_GWAS_PheWAS/MONDO/icd_code_mondo_label_pairwise.txt',
sep=""|"",nrows=100)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dist,numpy.linalg.norm(encoding-database[identity]),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_5,CLUSTER_1
dist,numpy.linalg.norm(encoding-db_enc),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_5,CLUSTER_1
feature_rsp,"requests.get(feature_url,headers={'Authorization':'Bearer'+token})",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
track_rsp,"requests.get(features['track_href'],headers={'Authorization':'Bearer'+token})",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
features_df,pandas.DataFrame(features_list),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
enriched_df,"pandas.merge(worst_song_df,features_df,how='left',on='Position')",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
worst_song_df,pandas.read_csv(WORST_SONG_FILE_NAME),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
residuals,pandas.DataFrame(results_ARIMA.resid),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_18,CLUSTER_0
residuals,pandas.DataFrame(results_ARIMA.resid),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_18,CLUSTER_0
residuals,pandas.DataFrame(results_ARIMA.resid),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_18,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.5)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_18,CLUSTER_0
mae_train,"sklearn.metrics.mean_absolute_error(Y_train,ptrain)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_18,CLUSTER_0
mae_test,"sklearn.metrics.mean_absolute_error(Y_test,ptest)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_18,CLUSTER_0
mape_train,numpy.mean(np.abs((Y_train-ptrain),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_18,CLUSTER_0
mape_test,numpy.mean(np.abs((Y_test-ptest),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_18,CLUSTER_0
predictions_ARIMA,numpy.exp(predictions_ARIMA_log),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_18,CLUSTER_0
logs,numpy.log(data),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_18,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_18,CLUSTER_0
a,"datetime.datetime.strptime('2017-07-01',format)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_18,CLUSTER_0
b,"datetime.datetime.strptime('2017-08-31',format)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_18,CLUSTER_0
sigx,"numpy.arange(-10,10)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sigy,"numpy.apply_along_axis(mySigmoid,0,sigx)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.arange(len(labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(len(labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(4,4,figsize=(20,24)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(subplot_kw=dict(aspect=""equal"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(15,6)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(3,1,figsize=(10,17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(3,1,figsize=(8,17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(18,8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(3,2,sharey=True,figsize=(14,16)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,4,figsize=(20,24)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,2,sharey=True,figsize=(12,12)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(3,2,figsize=(14,16)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(18,8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,3,sharey=True,sharex=True,figsize=(16,6)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pos_data,json.loads(pos_file.read(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
neg_data,json.loads(neg_file.read(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
indices,numpy.arange(data.shape[0]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
labels,numpy.array(labels),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
coefs,"numpy.asarray(values[1:],dtype='float32')",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
embedding_matrix,numpy.zeros((len(word_index),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
"sns.heatmap(corr,mask","numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
"sns.heatmap(corr,mask","np.zeros_like(corr,dtype=np.bool),cmap=seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
target,numpy.int32(label_id),CLUSTER_1,CLUSTER_1,CLUSTER_8,CLUSTER_0,CLUSTER_1
X_train,numpy.load('X_train.npy'),CLUSTER_1,CLUSTER_1,CLUSTER_8,CLUSTER_0,CLUSTER_1
y_train,numpy.load('y_train.npy'),CLUSTER_1,CLUSTER_1,CLUSTER_8,CLUSTER_0,CLUSTER_1
X_valid,numpy.load('X_valid.npy'),CLUSTER_1,CLUSTER_1,CLUSTER_8,CLUSTER_0,CLUSTER_1
y_valid,numpy.load('y_valid.npy'),CLUSTER_1,CLUSTER_1,CLUSTER_8,CLUSTER_0,CLUSTER_1
secrets[i],os.urandom(16),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
key,os.urandom(10),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
df_coords,"df_sbb.filter((col('OPERATING_DAY')==pandas.Timestamp(2019,1,18)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
a,math.sin(dlat/2),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"lat1,lon1",math.radians(y2),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"lat2,lon2",math.radians(y1),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
dfOneHot,"pandas.DataFrame(X,columns=[c+""_""+str(int(i)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,"pandas.concat([dataset,dfOneHot],axis=1)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
mergedDataset,"pandas.merge(dataset1,dataset2,on=['name','address'],how='left')",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_dataset,"pandas.read_csv(""merged_train.csv"",lineterminator='
datasetProcessValues=pandas.read_csv(""trainingPreprocessData.csv"",lineterminator='
other_valid=pandas.read_csv(""other_valid.csv"",sep=',',index_col=0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
personal_valid,"pandas.read_csv(""personal_valid.csv"",sep=',',index_col=0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
other_test,"pandas.read_csv(""other_test.csv"",sep=',',index_col=0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
personal_test,"pandas.read_csv(""personal_test.csv"",sep=',',index_col=0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_for_tree,"pandas.read_csv(""merged_train.csv"",lineterminator='
valid_for_tree=finalFunction(personal_valid,other_valid)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_for_tree,"pandas.read_csv(""merged_train.csv"",lineterminator='
valid_for_tree=finalFunction(personal_valid,other_valid)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset[column],numpy.log(dataset[column]),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestA,"sklearn.metrics.accuracy_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestA,"sklearn.metrics.accuracy_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestA,"sklearn.metrics.accuracy_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestA,"sklearn.metrics.accuracy_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestF,"sklearn.metrics.f1_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestF,"sklearn.metrics.f1_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestF,"sklearn.metrics.f1_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestF,"sklearn.metrics.f1_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestP,"sklearn.metrics.precision_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestP,"sklearn.metrics.precision_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestP,"sklearn.metrics.precision_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestP,"sklearn.metrics.precision_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestR,"sklearn.metrics.recall_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestR,"sklearn.metrics.recall_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestR,"sklearn.metrics.recall_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestR,"sklearn.metrics.recall_score(labelsValid,pred)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
splitted_pi,"re.split('[|\r\r\n]',text)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_mean,"sklearn.impute.SimpleImputer(missing_values=np.nan,strategy='mean')",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_mean,"sklearn.impute.SimpleImputer(missing_values=np.nan,strategy='median')",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
encoder,sklearn.preprocessing.OneHotEncoder(categories='auto'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls,sklearn.tree.DecisionTreeClassifier(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,sklearn.tree.DecisionTreeClassifier(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=x)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=4)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_leaf_nodes=x)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_leaf_nodes=14)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_leaf_nodes=14,max_depth=4)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_leaf_nodes=y,max_depth=x)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_leaf_nodes=14,max_depth=5)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',class_weight={0:zeroWeight,1:oneWeight})",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',class_weight={0:25,1:14})",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',class_weight={0:25,1:14},max_leaf_nodes=14,max_depth=5)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',class_weight={0:1,1:3},max_leaf_nodes=14,max_depth=5)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_leaf_nodes=14,max_depth=5,splitter=""best"")",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_leaf_nodes=14,max_depth=5,splitter=""random"")",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_leaf_nodes=14,max_depth=5,min_samples_split=3)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_leaf_nodes=14,max_depth=5,min_samples_leaf=2)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_leaf_nodes=14,max_depth=5)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls2,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_leaf_nodes=14,max_depth=5)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(cls2,data,labels,scoring=scoring,cv=10)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""data.csv"",header=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.20,random_state=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipe_lr,"sklearn.pipeline.Pipeline([('scl',StandardScaler()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
skf,"sklearn.model_selection.StratifiedKFold(n_splits=4,random_state=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
positive_counts,collections.Counter(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
negative_counts,collections.Counter(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
total_counts,collections.Counter(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
pos_neg_ratios,collections.Counter(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
review_counter,collections.Counter(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
frequency_frequency,collections.Counter(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
positive_counts,collections.Counter(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
negative_counts,collections.Counter(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
total_counts,collections.Counter(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
pos_neg_ratios,collections.Counter(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
most_similar,collections.Counter(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
layer_0,numpy.zeros(10),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
layer_1,numpy.zeros(5),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
layer_1,numpy.zeros(5),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
self.layer_1,"numpy.zeros((1,hidden_nodes)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
self.layer_1,"numpy.zeros((1,hidden_nodes)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
most_similar[word],"numpy.dot(mlp_full.weights_0_1[mlp_full.word2index[word]],mlp_full.weights_0_1[mlp_full.word2index[focus]])",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"hist,edges","numpy.histogram(list(map(lambdax:x[1],pos_neg_ratios.most_common()",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"hist,edges","numpy.histogram(list(map(lambdax:x[1],frequency_frequency.most_common()",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=2,random_state=0)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stations,"pandas.DataFrame(
[[station_id,0,0,f'Station{station_id}']forstation_idinstations],
columns=['station_id','lat','lon','station_name',]
)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
paths,"pandas.DataFrame(footpaths,columns=['start_id','stop_id','time'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
connections,"pandas.DataFrame(
[
[0,0,'trip-id','zug','line-text',120,1,0,0],
],
columns=['start_id','start_time','trip_id','transport_type','line_text','stop_time','stop_id','delay_probability','delay_parameter']
)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
stations,"numpy.unique(connections[['start_id','stop_id']].values)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
auths,collections.defaultdict(lambda:collections.defaultdict(int),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
focus,collections.defaultdict(lambda:collections.defaultdict(lambda:collections.defaultdict(int),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
when,"datetime.datetime.fromtimestamp(float(bioc[""epoch""])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
when,"datetime.datetime.fromtimestamp(float(cran[""epoch""])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(np.random.rand(10,4)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
element1,"numpy.uint8(np.array([[0,255,0],
[255,255,255],
[0,255,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,"pandas.DataFrame([7,-2,5,-1,12],index=idx,columns=['Fcast'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
z,"pandas.DataFrame([7,-2,5,-1,12],index=idx,columns=['Fcast'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
idx,"pandas.date_range('1960-01-01',periods=5,freq='MS')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
idx,"pandas.date_range('1960-01-01',periods=5,freq='MS')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('../Data/airline_passengers.csv',index_col='Month',parse_dates=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df2,"pandas.read_csv('../Data/samples.csv',index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x,"numpy.arange(start,stop,step)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
V,"numpy.array([[-1],[0]])",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
y,numpy.zeros(x.size),CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
S,"numpy.dot(A.T,A)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
V,"numpy.dot(S,V)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
V,"numpy.dot(S,V)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
V,"numpy.dot(S,V)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
V,"numpy.dot(S,V)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
V,"numpy.dot(S,V)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
V,"numpy.dot(S,V)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
V,"numpy.dot(S,V)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
V,"numpy.dot(S,V)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
V,"numpy.dot(S,V)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
F1,"numpy.dot(A,E1)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
F2,"numpy.dot(A,E2)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
A,"numpy.column_stack((x1,x2)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
E,"numpy.column_stack((E1,E2)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
F,"numpy.column_stack((F1,F2)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
"evals,evecs",numpy.linalg.eigh(S),CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(7,4)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
"f,ax1","matplotlib.pyplot.subplots(1,1,sharey=True,figsize=(12,4)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
"f,ax1","matplotlib.pyplot.subplots(1,1,sharey=True,figsize=(12,4)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
"f,ax1","matplotlib.pyplot.subplots(1,1,sharey=True,figsize=(12,4)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
"f,ax1","matplotlib.pyplot.subplots(1,1,sharey=True,figsize=(12,4)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,sharey=True,figsize=(12,4)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
figure,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
statistics_df,"pandas.DataFrame({
'Mean':drug_regimen['TumorVolume(mm3)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
quartiles,pandas.DataFrame({'LowerQuartile':regimen_groupby['TumorVolume(mm3),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
regimen_df,"pandas.DataFrame({
'AverageTumorVolume(mm3)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
combined_data,"pandas.merge(mouse_metadata,
study_results,
on='MouseID')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mouse_timepoint,"pandas.merge(final_tumor,
combined_data,
on=['MouseID','Timepoint'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
quantitative_df,"pandas.merge(quartiles,
promising_treatments,
on='DrugRegimen')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mouse_metadata,pandas.read_csv(mouse_metadata),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
study_results,pandas.read_csv(study_results),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"slope,intercept,r,p,std_err","scipy.stats.linregress(weight,average_tumor_volume)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
correlation,"scipy.stats.pearsonr(weight,average_tumor_volume)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_axis,numpy.arange(len(r944),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,numpy.array(1),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,"numpy.array([1,2,3])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c,"numpy.array([[1,2,3]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
d,"numpy.array([[1],[2],[3]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
e,"numpy.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,2],[3,4]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,"numpy.array([[4,3],[2,1]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,2],[3,4],[5,6],[7,8]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.array((1,2,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c,"numpy.dot(a,b)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
vertices,"numpy.array([[(0,base_img.shape[0])",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_7
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_7
mask,numpy.zeros_like(img),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_7
canvas_img,numpy.copy(base_img),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_7
testImages,os.listdir(indir),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_7
one_personality,"pandas.DataFrame(one[""personality""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
two_personality,"pandas.DataFrame(two[""personality""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
three_personality,"pandas.DataFrame(three[""personality""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
four_personality,"pandas.DataFrame(four[""personality""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
five_personality,"pandas.DataFrame(five[""personality""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
six_personality,"pandas.DataFrame(six[""personality""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
seven_personality,"pandas.DataFrame(seven[""personality""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
one_full,pandas.DataFrame(one_depth),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
two_full,pandas.DataFrame(two_depth),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
three_full,pandas.DataFrame(three_depth),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
four_full,pandas.DataFrame(four_depth),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
five_full,pandas.DataFrame(five_depth),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
six_full,pandas.DataFrame(six_depth),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
seven_full,pandas.DataFrame(seven_depth),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
one,json.load(json_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
two,json.load(json_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
three,json.load(json_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
four,json.load(json_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
five,json.load(json_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
six,json.load(json_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
seven,json.load(json_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
length,"numpy.arange(0,len(values)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data.index,pandas.DatetimeIndex(quart),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.read_excel(""PS5.xlsx"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
quart,"pandas.to_datetime(data['time'],format='%Y/%d/%m/%h')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
CPI,numpy.asarray(data[['CPIAUCSL']]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
GDP,numpy.asarray(data[['GDPC1']]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
GDPP,numpy.asarray(data[['GDPPOT']]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ffr,numpy.asarray(data[['FEDFUNDS']]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
inflation,numpy.zeros((255),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
GDP_gap,numpy.zeros((255),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
i,numpy.zeros((255),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
difference,numpy.zeros((255),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pattern,re.compile('[\W_]+'),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cws,collections.Counter(ws),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
docnames,numpy.array(docnames),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
vocab,numpy.array(list(vocab),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,"numpy.empty(n_nonzero,dtype=np.intc)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
rows,"numpy.empty(n_nonzero,dtype=np.intc)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cols,"numpy.empty(n_nonzero,dtype=np.intc)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
doc_idx,numpy.where(docnames==docname),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
vocab_sorter,numpy.argsort(vocab),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
rows[ind:ind_end],"numpy.repeat(doc_idx,n_vals)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"uniq_indices,counts","numpy.unique(term_indices,return_counts=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dtm,"scipy.sparse.coo_matrix((data,(rows,cols)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
workload,"pandas.DataFrame({'DeploymentConsultant':depl_list,'WorkloadMonth':month_list})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
coeff_df,"pandas.DataFrame(regressor.coef_.T,X.columns,columns=['Coefficient'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predict_reg,"pandas.DataFrame(predict_reg,columns=['OverdueDaysPredict'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predict,"pandas.DataFrame(rf.predict_proba(df_test.drop(columns=['BillNumber','DeploymentID'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predict,"pandas.DataFrame(predict_array,columns=['OverdueDays'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.concat([testdf[['BillNumber','DeploymentID','BookingsAmount','OverdueDays',
'Seats','MRR','WorkloadDeployments','Package(group)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,"pandas.concat([traindf[['BillNumber','DeploymentID','BookingsAmount','DurationMonths','OverdueDays',
'Seats','MRR','WorkloadDeployments','Package(group)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
final,pandas.concat([df.reset_index(drop=True),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
final_pred,pandas.concat([df_test.reset_index(drop=True),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
final,pandas.concat([df_test.reset_index(drop=True),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df,package_durations,how='left',on=['Package(group)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df,workload,how='left',on=['DeploymentConsultant','WorkloadMonth'],sort=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df,dur_quantile95,how='left',on=['Package(group)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['BillDate'],pandas.to_datetime(df['BillDate']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['BecamePaidDay'],pandas.to_datetime(df['BecamePaidDay']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['StartDate'],pandas.to_datetime(df['StartDate']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['EndDate'],pandas.to_datetime(df['EndDate']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['Today'],pandas.to_datetime(date.today(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['DurationDays'],pandas.to_datetime(df['EndDate']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['Age(Months)'],"numpy.where(df['BecamePaidDay']==""None"",0,(df['BillDate']-df['BecamePaidDay'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['DaysfromToday'],numpy.where(pd.isnull(pd.to_datetime(df['Today']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['OverdueDays'],numpy.where(pd.isnull(df['DurationDays']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['DurationOverall'],numpy.where(pd.isnull(df['DurationDays']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['FullStartDate'],numpy.where(df['StartDate'].notnull(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['DR'],"numpy.where((df['ProjectStatus'].isin(['InProgress','New','Started','OnHold'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
final_pred['FullStartDate'],numpy.where(final_pred['StartDate'].notnull(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(300,600,50)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0,600,50)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['Overdue'],"numpy.select(conditions,choices,default='F')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"inputs_train,inputs_test,expected_output_train,expected_output_test","sklearn.model_selection.train_test_split(data_inputs,expected_output,test_size=0.1,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"inputs_train,inputs_test,expected_output_train,expected_output_test","sklearn.model_selection.train_test_split(data_inputs,expected_output,test_size=0.1,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
base_model,"sklearn.ensemble.RandomForestClassifier(n_estimators=10,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,min_samples_split=10,max_features='sqrt',
min_samples_leaf=5,max_depth=30,bootstrap=True,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
date,datetime.date.replace(day=1),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
date,datetime.date.replace(day=1),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
palette,"seaborn.xkcd_palette(['darkblue','gold','orange'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
palette,"seaborn.xkcd_palette(['darkblue','gold','orange'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(test_labels,predictions)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(expected_output_test.iloc[:,0],rf.predict(inputs_test.drop(columns=['BillNumber','DeploymentID'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,sklearn.metrics.r2_score(np.array(expected_output_train),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(np.array(expected_output_test.iloc[:,0])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_random,"sklearn.model_selection.RandomizedSearchCV(estimator=rf,param_distributions=random_grid,n_iter=100,cv=5,verbose=2,random_state=42,n_jobs=-1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(estimator=rf,param_grid=param_grid,
cv=5,n_jobs=-1,verbose=2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hero_winrate_df,pandas.DataFrame(total_winrates_array),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hero_raidant_winrate_df,pandas.DataFrame(radiant_winrates_array),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hero_dire_winrate_df,pandas.DataFrame(dire_winrates_array),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hero_pickrates_df,pandas.DataFrame(hero_pickrates_array),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hero_winrate_test_df,pandas.DataFrame(total_winrates_test_array),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hero_pickrates_test_df,pandas.DataFrame(hero_pickrates_test_array),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
radiant_dire_df,"pandas.concat([hero_dire_winrate_df,hero_raidant_winrate_df])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_data,"pandas.read_csv(""dota2Dataset/dota2Train.csv"")",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_data,"pandas.read_csv(""dota2Dataset/dota2Test.csv"")",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp_baseline,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(111,111,111,111,111,111)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp_baseline,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(222,222,222,222,222,222)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp_baseline,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(222,222,222,222,222,222)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp_baseline,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(111,111,111,111,111,111)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp_baseline,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(111,111,111,111,111,111)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp_baseline,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(222,222,222,222,222)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp_winrates_model,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(111,111,111,111,111,111)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp_winrate_model,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(111,111,111,111,111,111)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp_pickrates_model,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(111,111,111,111,111,111)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"(training_data_mlp_baseline,validation_data_mlp_baseline,training_target_mlp_baseline,validation_target_mlp_baseline)","sklearn.model_selection.train_test_split(mlp_baseline_data,target_mlp,test_size=.15)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"(training_data_mlp_winrates,validation_data_mlp_winrates,training_target_mlp_winrates,validation_target_mlp_winrates)","sklearn.model_selection.train_test_split(mlp_winrates,target_mlp,test_size=.15)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"(training_data_mlp_winrate,validation_data_mlp_winrate,training_target_mlp_winrate,validation_target_mlp_winrate)","sklearn.model_selection.train_test_split(mlp_winrate,target_mlp,test_size=.15)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"(training_data_mlp_pickrates,validation_data_mlp_pickrates,training_target_mlp_pickrates,validation_target_mlp_pickrates)","sklearn.model_selection.train_test_split(mlp_pickrates,target_mlp,test_size=.15)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(np.random.randn(5,4)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(np.random.randn(50,4)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"pandas.Series(['a','a','b','c',np.NaN])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"pandas.Series(['a','a','b','c',np.NaN])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"pandas.Series([1,2,3,3,5])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"pandas.Series([1,2,3,3,5,1])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,pandas.Series(np.random.np.random.randn(5),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,pandas.Series(np.random.randn(1000),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
bins,"pandas.cut(dist,5)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
agebins,"pandas.cut(ages,ranges)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
agebins,"pandas.cut(ages,ranges,labels=labels)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
qbin,"pandas.qcut(dist,5)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
qbin,"pandas.qcut(dist,quantiles)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sp500,"pandas.read_csv(""Data/sp500.csv"",
index_col='Symbol',
usecols=[0,2,3,7])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
omh,"pandas.read_csv(""Data/omh.csv"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
words,"re.sub(r'[^\w\s]','',text)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
ham_freq,pandas.Series(ham_words),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
spam_freq,pandas.Series(spam_words),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
all_freq,pandas.Series(all_words),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
labels,pandas.concat([df.label.value_counts(),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('./spam_clean.csv'),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
"ticks,_",matplotlib.pyplot.yticks(),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
_,"matplotlib.pyplot.yticks(ticks,labels)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
df,"pandas.concat(frames,axis=0,ignore_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.get_dummies(df,columns=['status'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
acc_make,pandas.read_csv('brendan_k_data/acc_make.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
acc_miss_left,pandas.read_csv('brendan_k_data/acc_miss_left.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
acc_miss_long,pandas.read_csv('brendan_k_data/acc_miss_long.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
acc_miss_right,pandas.read_csv('brendan_k_data/acc_miss_right.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
acc_miss_short,pandas.read_csv('brendan_k_data/acc_miss_short.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
gyr_make,pandas.read_csv('brendan_k_data/gyr_make.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
gyr_miss_left,pandas.read_csv('brendan_k_data/gyr_miss_left.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
gyr_miss_long,pandas.read_csv('brendan_k_data/gyr_miss_long.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
gyr_miss_right,pandas.read_csv('brendan_k_data/gyr_miss_right.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
gyr_miss_short,pandas.read_csv('brendan_k_data/gyr_miss_short.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,numpy.array(model.layers[0].get_weights(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,pandas.DataFrame(data),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_df,pandas.read_csv('CommentsApril2017.csv'),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
meta_data,"pandas.read_csv(""meta_data_pietro.csv"")",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train_df,Y,test_size=0.1,random_state=42)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
result1,"re.match('fast',s)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result2,"re.match('campus',s)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result3,"re.search('fast',s)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result4,"re.search('campus',s)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result8,"re.sub('slow','fast',s2)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result7,"re.split('c',s1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result5,"re.findall('fast',s)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result6,"re.findall('fighting',s)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('\d',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('\D',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('\w',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('\W',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('\s',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('\S',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('[0-9]',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('[a-z]',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('[a-zA-Z]',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('[012345]',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('[0-5]',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('[234789]',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('[2-47-9]',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('[bcde]',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('[bc-e]',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('[b-e]',pt)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('a.b',s)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('a?b',s)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('a[0-4]?b',s)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('ab*c',s)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('ab+c',s)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,"re.findall('ab{1,3}c',s)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,re.findall('([0-9]+),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
tfidf_matrix,pandas.DataFrame(euclid_dist),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
predictive_matrix,pandas.DataFrame(predictive),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
social,"pandas.read_csv('../socialmeasures/pmidf.csv',index_col='index')",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
crosses,"pandas.read_csv(filepath,sep='\t')",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
vector,numpy.array([float(x),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
colors,"numpy.linspace(0,1,7)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
colors,"numpy.linspace(0,1,7)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
scaler,"sklearn.manifold.MDS(metric=True,dissimilarity='precomputed')",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
profits,pandas.DataFrame(profits.sum(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
losses,pandas.DataFrame(losses.sum(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(r'S:\Code\School\WGU_DataAnalyst_NanoDegree\01-IntroductiontoDataScience\tmdb-movies.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['release_date'],pandas.to_datetime(df['release_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(25,15)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(ncols=2,figsize=(15,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(nrows=2,figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x='genre',y='Num_Movies',data=losses,ax=axs[0])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gr,"seaborn.barplot(x='genre',y='Num_Movies',data=profits,ax=axs[1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.heatmap(vis_data,annot=True,fmt=""d"",linewidths=.5,ax=ax)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gt,"seaborn.lineplot(x=""release_year"",y=""revenue_adj"",data=movie_data,ax=axs[1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.regplot(x=""release_year"",y=""revenue_adj"",data=movie_data,ax=axs[0])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlb,sklearn.preprocessing.MultiLabelBinarizer(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ll_a,"numpy.array([],dtype=int)",CLUSTER_23,CLUSTER_4,CLUSTER_11,CLUSTER_0,CLUSTER_1
rl_a,"numpy.array([],dtype=int)",CLUSTER_23,CLUSTER_4,CLUSTER_11,CLUSTER_0,CLUSTER_1
vertices,"numpy.array([[(x_l_b,y_max)",CLUSTER_23,CLUSTER_4,CLUSTER_11,CLUSTER_0,CLUSTER_1
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_23,CLUSTER_4,CLUSTER_11,CLUSTER_0,CLUSTER_1
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_23,CLUSTER_4,CLUSTER_11,CLUSTER_0,CLUSTER_1
mask,numpy.zeros_like(img),CLUSTER_23,CLUSTER_4,CLUSTER_11,CLUSTER_0,CLUSTER_1
color_edges,"numpy.dstack((edges,edges,edges)",CLUSTER_23,CLUSTER_4,CLUSTER_11,CLUSTER_0,CLUSTER_1
color_edges,"numpy.dstack((edges,edges,edges)",CLUSTER_23,CLUSTER_4,CLUSTER_11,CLUSTER_0,CLUSTER_1
image,numpy.flipud(image),CLUSTER_23,CLUSTER_4,CLUSTER_11,CLUSTER_0,CLUSTER_1
peq_l,"numpy.polyfit(ll_x,ll_y,1,0)",CLUSTER_23,CLUSTER_4,CLUSTER_11,CLUSTER_0,CLUSTER_1
peq_r,"numpy.polyfit(rl_x,rl_y,1,0)",CLUSTER_23,CLUSTER_4,CLUSTER_11,CLUSTER_0,CLUSTER_1
toronto_df,"pandas.DataFrame({""PostalCode"":postalCodeList,
""Borough"":boroughList,
""Neighborhood"":neighborhoodList})",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,"pandas.concat([toronto_df_grouped,df],axis=1,sort=False)",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_df_new2,"pandas.merge(left=df,right=toronto_df_grouped,left_on='PostalCode',right_on='PostalCode')",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_df_new2,"pandas.merge(left=df,right=toronto_df_grouped,left_on='PostalCode',right_on='PostalCode')",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(csv_path),CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,requests.get('https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M'),CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
app_df,pandas.DataFrame(app_train),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
app_train,pandas.read_csv(f_app_train),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
I,"numpy.array([93,137,208,320,442,546,630,678,691,675,634,571,477,
390,329,247,184,134,108,90])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Q,numpy.empty(20),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.expand_dims(x,axis=0)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,"pandas.read_csv('/Users/daniel/Dropbox/multichroic/one_light.csv',header=7,delimiter=',')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_test,"pandas.DataFrame(columns=['id','user_id','item_id','rating'])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
submission,"pandas.DataFrame({
'id':np.arange(target_user_items.shape[0])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
rating_pred_,pandas.Series(test.rating_pred),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
users_common,"pandas.merge(users_item1,users_item2,on='user_id')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
users_common,"pandas.merge(users_item1,users_item2,on='user_id')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
data_reduced,"pandas.merge(data_train,a,on='user_id')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
df_test_batch,"pandas.read_csv(""batches/train_IBCF_test/""+filename)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
target_user_items,pandas.read_csv(PATH_DATA+'target_user_items.csv'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
batches,"numpy.arange(batch_size,df_test.shape[0]+1,batch_size)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
den,numpy.sqrt(users_common['rating_x'].dot(users_common['rating_x']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
PATH,os.getcwd(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
corr,"scipy.stats.pearsonr(users_common['rating_x'],users_common['rating_y'])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
obj,pandas.Series(list('cadaabbcc'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.DataFrame({'Uu1':[1,3,4,3,4],
'Qu2':[2,3,1,2,3],
'Qu3':[1,5,2,4,4]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x_train,numpy.array(x_train),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,numpy.array(x),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x_train,numpy.array(x_train),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,numpy.array(x),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
y_train,numpy.zeros(x_train.shape[0]),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
y_train,numpy.zeros(x_train.shape[0]),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dfObj,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
member_names_df,pandas.DataFrame(index=member_names.keys(),CLUSTER_8,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(x=""member_name"",y=""p"",data=speaking_time)",CLUSTER_8,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
y_train_gau,numpy.array(df_train['Prediction']),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
"y_train_all,input_data_train_all,ids_train_all",numpy.array(df_train_all['Prediction']),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
tx_train_all,numpy.array(input_data_train_all),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
"y_train_final,input_data_train_final,ids_train_final",numpy.array(prediction['Prediction']),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
tx_train_final,numpy.array(input_data_train_final),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
counts[column_name],numpy.sum(check.astype('int'),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
counts[column_name],numpy.sum(check.astype('int'),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
lambdas,"numpy.logspace(-10,-5,15)",CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
df_train_all[column_name][df_train_all[column_name],=-999.0]=numpy.median(df_train_all[column_name]),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
df_test_all[column_name][df_test_all[column_name],=-999.0]=numpy.median(df_test_all[column_name]),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
check['Prediction'],pandas.Categorical(check['Prediction']),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
old_file,pandas.read_csv('trial_ridge_polynomial_newdata_cleaning.csv'),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
new_file,pandas.read_csv('trial_ridge_polynomial_newdata_cleaning2.csv'),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
original_file,pandas.read_csv('trial1_72.csv'),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
original_file_nooutliers_polynomial,pandas.read_csv('trial_ridge_polynomial_newdata_cleaning3.csv'),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
original_file_outliers_polynomial,pandas.read_csv('trial_ridge_polynomial_newdata_cleaning3_withoutliers'),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
original_file_polynomial,pandas.read_csv('trial_ridge_polynomial_alldata'),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
gau_file,pandas.read_csv('trial_ridge_polynomial_gau'),CLUSTER_14,CLUSTER_3,CLUSTER_7,CLUSTER_9,CLUSTER_0
data,"pandas.read_csv('gtd_clean.csv',encoding='latin1',low_memory=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
targetLabelEncoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
dv,sklearn.feature_extraction.DictVectorizer(sparse=False),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=200),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_trainp,X_testp,Y_trainp,Y_testp","sklearn.model_selection.train_test_split(reducedFeatures,target,test_size=0.30)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_traint,X_testt,Y_traint,Y_testt","sklearn.model_selection.train_test_split(reducedSVDFeatures,target,test_size=0.30)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
svd,sklearn.decomposition.TruncatedSVD(n_components=200),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X_trainp,Y_trainp)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X_traint,Y_traint)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=5,max_depth=4,min_samples_split=2)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=5,max_depth=4,min_samples_split=2)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('./medium_posts.csv.zip',sep='\t')",CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
df['published'],pandas.to_datetime(df['published']),CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
"train_df2['y'],lambda_prophet",scipy.stats.boxcox(train_df2['y']),CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
topic_dists,numpy.zeros([len(sentence_stream),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sr_str,pandas.DataFrame([s.split('to'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2['full_desc'],pandas.DataFrame(full_desc),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
topic_dists,"pandas.DataFrame(topic_dists,columns=['topic'+str(a)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_feat,"pandas.DataFrame(pca.components_,columns=topic_dists.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
d2vec,pandas.DataFrame([d2vmodel.infer_vector(s.words),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,sr_str],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2,"pandas.concat([all_jobs,df],axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_vec,"pandas.concat([X,d2vec,df2.years_exp,cat_vec],axis=1,ignore_index=True,join_axes=[X.index])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Xm,"pandas.concat([X,d2vec,df2.years_exp],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cat_vec,pandas.get_dummies(df2.is_category),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('items_avidhya.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
stop_words,"pandas.read_csv('./stopwords.csv',names=['stop'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,seaborn.pairplot(data=df2[df2.avg_salary<3*np.std(df2.avg_salary),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"re.sub(u'\u2013','-',a)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"re.sub('\xe2\x80\x93','-',x)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ya,re.findall(r'([0-9]+),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
m,"re.findall(r'[\$0-9]+[0-9\,\.\$-]*[a-zA-z\.]*',df2.description.iloc[i])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=0.9,random_state=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_proj,df2.avg_salary,train_size=0.75,random_state=8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"Xa_train,Xa_test,ya_train,ya_test","sklearn.model_selection.train_test_split(all_vec,y,train_size=0.7,random_state=8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"Xm_train,Xm_test,ym_train,ym_test","sklearn.model_selection.train_test_split(Xm,ym,train_size=0.8,random_state=8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"Xms_train,Xms_test,yms_train,yms_test","sklearn.model_selection.train_test_split(Xm,lead_labels,train_size=0.7,random_state=8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xg_gs,"sklearn.model_selection.GridSearchCV(xg_clf,xg_params,cv=5,scoring=scorer,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_gs,"sklearn.model_selection.GridSearchCV(svm_clf,svm_params,cv=5,scoring=scorer,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfgs,sklearn.model_selection.GridSearchCV(RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svcgs,sklearn.model_selection.GridSearchCV(svm.LinearSVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_gs,"sklearn.model_selection.GridSearchCV(svm_clf,svm_params,cv=5,scoring=scorer,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorer,"sklearn.metrics.make_scorer(fbeta_score,beta=0.5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorer,"sklearn.metrics.make_scorer(fbeta_score,beta=0.5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorer,"sklearn.metrics.make_scorer(fbeta_score,beta=0.5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
log,"sklearn.linear_model.LogisticRegression(solver='newton-cg',multi_class='multinomial')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sal_lgcv,"sklearn.linear_model.LogisticRegressionCV(Cs=100,penalty='l2',solver='newton-cg',multi_class='multinomial')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorelist,"sklearn.model_selection.cross_val_score(gnb,X,y,cv=cv_val,scoring=scoring,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorelist,"sklearn.model_selection.cross_val_score(dtree,X,y,cv=cv_val,scoring=scoring,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorelist,"sklearn.model_selection.cross_val_score(svm2,X,y,cv=cv_val,scoring=scoring,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorelist,"sklearn.model_selection.cross_val_score(xg,X,y,cv=cv_val,scoring=scoring,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorelist,"sklearn.model_selection.cross_val_score(lr,X,y,cv=cv_val,scoring=scoring,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorelist,"sklearn.model_selection.cross_val_score(rf,X,y,cv=cv_val,scoring=scoring,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorelist,"sklearn.model_selection.cross_val_score(ada,X,y,cv=cv_val,scoring=scoring,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorelist,"sklearn.model_selection.cross_val_score(lr,X,df2.avg_salary,cv=5,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorelist,"sklearn.model_selection.cross_val_score(gnb,X,y,cv=cv_val,scoring=scoring,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorelist,"sklearn.model_selection.cross_val_score(knn,X,y,cv=cv_val,scoring=scoring,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorelist,"sklearn.model_selection.cross_val_score(log,X,y,cv=cv_val,scoring=scoring,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorelist,"sklearn.model_selection.cross_val_score(rf,X,y,cv=cv_val,scoring=scoring,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm2,sklearn.svm.SVC(random_state=8),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_clf,sklearn.svm.SVC(random_state=8),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_clf,sklearn.svm.SVC(random_state=8),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(max_depth=3,random_state=8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ada,sklearn.ensemble.AdaBoostClassifier(n_estimators=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=10),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=10),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"plt.contourf(x,y,Z,50,alpha","0.5,cmap=matplotlib.pyplot.get_cmap('jet')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-200,-100,1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.arange(-5,5,0.1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,numpy.zeros((len(x),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(""imdb_trends_new.csv"",index_col=0)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
data.index,pandas.to_datetime(data.index),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
thresholds,"numpy.arange(low-step,high+step,step)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
cm,"numpy.array([[TN,FN],[FP,TP]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tpr_arr,numpy.array(V),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fpr_arr,numpy.array(D),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
matrix,"numpy.array([[TN,FN],[FP,TP]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
proba,numpy.array(thresholds),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
actual,numpy.array(y_act_int),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
y_dash,"numpy.array([1ifj>=ielse0forjindf.iloc[:,1]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
auc,"numpy.trapz(tpr_arr,fpr_arr)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(val['file']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('5_c.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""5_d.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
directory,os.listdir('../../../Dataset/train'),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_5,CLUSTER_11
tmask,numpy.array(mask.variables['tmask']),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
tlons,numpy.array(ref.variables['nav_lon']),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
tlats,numpy.array(ref.variables['nav_lat']),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
depth,numpy.array(ref.variables['deptht']),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
"dmn_riv[i,:,:]",numpy.array(monthly.variables['dmnriv']),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
"dmn_sed[i,:,:]",numpy.array(monthly.variables['dmnsed']),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
"dmn_atm[i,:,:]",numpy.array(monthly.variables['dmnatm']),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
"dmn_ice[i,:,:]",numpy.array(monthly.variables['dmnice']),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
"dmn_red[i,:,:,:]",numpy.array(monthly.variables['dmnred']),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
"dmn_oxi[i,:,:,:]",numpy.array(monthly.variables['dmnoxi']),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
e1t_base,numpy.array(mask.variables['e1t']),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
e2t_base,numpy.array(mask.variables['e2t']),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
e3t,numpy.array(mask.variables['e3t_0']),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
tmask_full,"numpy.empty((12,50,imax-imin,jmax-jmin)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
dmn_riv,"numpy.empty((12,imax-imin,jmax-jmin)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
dmn_sed,"numpy.empty((12,imax-imin,jmax-jmin)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
dmn_atm,"numpy.empty((12,imax-imin,jmax-jmin)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
dmn_ice,"numpy.empty((12,imax-imin,jmax-jmin)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
dmn_red,"numpy.empty((12,50,imax-imin,jmax-jmin)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
dmn_oxi,"numpy.empty((12,50,imax-imin,jmax-jmin)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
red_depth,"numpy.empty((50,1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
oxi_depth,"numpy.empty((50,1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
red_imp,"numpy.empty(red[month,0,:,:].shape)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
oxi_imp,"numpy.empty(oxi[month,0,:,:].shape)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
riv_ave,"numpy.sum(np.divide(riv,area)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
sed_ave,"numpy.sum(np.divide(sed,area)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
atm_ave,"numpy.sum(np.divide(atm,area)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
ice_ave,"numpy.sum(np.divide(ice,area)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
red_ave,"numpy.sum(np.divide(red,area)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
oxi_ave,"numpy.sum(np.divide(oxi,area)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
ts_riv,"numpy.sum(riv,axis=(1,2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
ts_sed,"numpy.sum(sed,axis=(1,2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
ts_atm,"numpy.sum(atm,axis=(1,2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
ts_ice,"numpy.sum(ice,axis=(1,2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
ts_red,"numpy.sum(red_int,axis=(1,2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
ts_oxi,"numpy.sum(oxi_int,axis=(1,2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
total_balance,"numpy.sum(flux_balance,axis=(1,2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
ind,"numpy.unravel_index(np.argmax(riv_plot,axis=None)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
average_balance,"numpy.average(flux_balance,axis=(1,2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
e1t,"numpy.tile(e1t_base,(50,1,1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
e2t,"numpy.tile(e2t_base,(50,1,1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
land_mask,"numpy.ma.masked_where(cond,tmask[0,:,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
dmn_riv,"numpy.ma.masked_where((tmask_full[:,0,:,:]<0.1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
dmn_sed,"numpy.ma.masked_where((tmask_full[:,0,:,:]<0.1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
dmn_atm,"numpy.ma.masked_where((tmask_full[:,0,:,:]<0.1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
dmn_ice,"numpy.ma.masked_where((tmask_full[:,0,:,:]<0.1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
dmn_red,numpy.ma.masked_where((tmask_full<0.1),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
dmn_oxi,numpy.ma.masked_where((tmask_full<0.1),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
riv_imp,"numpy.ma.masked_where((riv[month,:,:]<sed[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
riv_imp,"numpy.ma.masked_where((riv_imp[:,:]<atm[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
riv_imp,"numpy.ma.masked_where((riv_imp[:,:]<ice[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
sed_imp,"numpy.ma.masked_where((sed[month,:,:]<riv[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
sed_imp,"numpy.ma.masked_where((sed_imp[:,:]<atm[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
sed_imp,"numpy.ma.masked_where((sed_imp[:,:]<ice[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
ice_imp,"numpy.ma.masked_where((ice[month,:,:]<sed[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
ice_imp,"numpy.ma.masked_where((ice_imp[:,:]<atm[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
ice_imp,"numpy.ma.masked_where((ice_imp[:,:]<riv[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
atm_imp,"numpy.ma.masked_where((atm[month,:,:]<sed[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
atm_imp,"numpy.ma.masked_where((atm_imp[:,:]<riv[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
atm_imp,"numpy.ma.masked_where((atm_imp[:,:]<ice[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
riv_imp,"numpy.ma.masked_where((riv_imp[:,:]<red[month,0,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
riv_imp,"numpy.ma.masked_where((riv_imp[:,:]<oxi[month,0,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
sed_imp,"numpy.ma.masked_where((sed_imp[:,:]<red[month,0,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
sed_imp,"numpy.ma.masked_where((sed_imp[:,:]<oxi[month,0,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
oxi_imp,"numpy.ma.masked_where((oxi[month,0,:,:]<sed[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
oxi_imp,"numpy.ma.masked_where((oxi_imp[:,:]<atm[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
oxi_imp,"numpy.ma.masked_where((oxi_imp[:,:]<ice[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
oxi_imp,"numpy.ma.masked_where((oxi_imp[:,:]<red[month,0,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
oxi_imp,"numpy.ma.masked_where((oxi_imp[:,:]<riv[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
red_imp,"numpy.ma.masked_where((red[month,0,:,:]<sed[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
red_imp,"numpy.ma.masked_where((red_imp[:,:]<atm[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
red_imp,"numpy.ma.masked_where((red_imp[:,:]<ice[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
red_imp,"numpy.ma.masked_where((red_imp[:,:]<oxi[month,0,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
red_imp,"numpy.ma.masked_where((red_imp[:,:]<riv[month,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
ice_imp,"numpy.ma.masked_where((ice_imp[:,:]<red[month,0,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
ice_imp,"numpy.ma.masked_where((ice_imp[:,:]<oxi[month,0,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
atm_imp,"numpy.ma.masked_where((atm_imp[:,:]<red[month,0,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
atm_imp,"numpy.ma.masked_where((atm_imp[:,:]<oxi[month,0,:,:])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(4,6)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,4)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(9,5)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(10,5)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(9,5)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
default_points,"numpy.array(
[
[0,0],
[a*np.sqrt(3)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
gkf,sklearn.model_selection.GroupKFold(n_splits=5),CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
timestamp,datetime.datetime.utcnow(),CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
t,time.time(),CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
t,time.time(),CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
t,time.time(),CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
t,time.time(),CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
dataset,pandas.DataFrame(dataset),CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
areas,numpy.array(tpr_thresholds[1:]),CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
self.y_true,"numpy.array([0,1])",CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
self.y_pred,"numpy.array([0.5,0.5])",CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
x,"numpy.concatenate([fpr[mask],x_padding])",CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
y,"numpy.concatenate([tpr[mask],[y_max]*len(x_padding)",CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
normalization,"numpy.dot(areas,weights)",CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
x_padding,"numpy.linspace(fpr[mask][-1],1,100)",CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
self.y_true,"numpy.hstack((self.y_true,y_true)",CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
self.y_pred,"numpy.hstack((self.y_pred,y_pred)",CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
score,"sklearn.metrics.auc(x,y)",CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_true,y_valid,pos_label=1)",CLUSTER_12,CLUSTER_0,CLUSTER_11,CLUSTER_20,CLUSTER_8
r,json.load(outfile),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
x_t,"numpy.asarray([integrate.odeint(lorenz_deriv,x0i,t)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,max_time,int(250*max_time)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(results._data['eval']),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(results._data['train']),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
m1,random.random(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
m2,random.random(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,random.random(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
testData,"pandas.DataFrame(testData,columns=data.columns)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
predictions,"pandas.concat([testData['Name'],pd.Series(predY,name='PredictedClass')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('06_vertebrate.csv',header='infer')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=3)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=depth),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
dot_data,"sklearn.tree.export_graphviz(clf,feature_names=X.columns,class_names=['mammals','non-mammals'],filled=True,
out_file=None)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
trainAcc[index],"sklearn.metrics.accuracy_score(Y_train,Y_predTrain)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
testAcc[index],"sklearn.metrics.accuracy_score(Y_test,Y_predTest)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
trainAcc,numpy.zeros(len(maxdepths),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
testAcc,numpy.zeros(len(maxdepths),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"numpy.concatenate((X,np.random.multivariate_normal(mean2,cov,int(N/6)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"numpy.concatenate((X,np.random.multivariate_normal(mean3,cov,int(N/6)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"numpy.concatenate((X,20*np.random.rand(int(N/2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
Y,numpy.concatenate((np.ones(int(N/2),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.8,random_state=1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=k,metric='minkowski',p=2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(C=param),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(C=param,kernel='linear')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(C=param,kernel='rbf',gamma='auto')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.AdaBoostClassifier(DecisionTreeClassifier(max_depth=maxdepth),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.BaggingClassifier(DecisionTreeClassifier(max_depth=maxdepth),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=numBaseClassifiers),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
self,"re.sub(r""İ"",""i"",self)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
self,"re.sub(r""I"",""ı"",self)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
self,"re.sub(r""Ç"",""ç"",self)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
self,"re.sub(r""Ş"",""ş"",self)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
self,"re.sub(r""Ü"",""ü"",self)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
self,"re.sub(r""Ğ"",""ğ"",self)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
desc,"re.sub('\s+','',desc)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
title,"re.sub('\s+','',title)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
a0,"numpy.zeros((m,n_a)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c0,"numpy.zeros((m,n_a)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x_initializer,"numpy.zeros((1,1,78)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a_initializer,"numpy.zeros((1,n_a)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c_initializer,"numpy.zeros((1,n_a)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
indices,"numpy.argmax(pred,axis=-1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
country_count,pandas.DataFrame(ufa_df['Nationality'].value_counts(),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ufa_df,"pandas.merge(ufa_df,country_count,on=""Nationality"")",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nhl_df,"pandas.read_csv(""nhlstats.csv"",encoding='ISO-8859-1',error_bad_lines=False,)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
chart1,"seaborn.barplot(x=""CountryCode"",y=""CapHit"",data=ufa_df,ci=0)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_withweather,"pandas.merge(df,weather,how='???',on=['???','???','???','???'])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_withairport,pandas.merge(???),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('/data/nycflights13/flights.csv.gz'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
weather,pandas.read_csv('/data/nycflights13/weather.csv.gz'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
airports,pandas.read_csv('/data/nycflights13/airports.csv.gz'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
all_df,"pandas.read_csv(""data2.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_Features,test_Features,train_Label,test_Label","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
training_accuracy,numpy.mean(y_train==y_train_pred),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
validation_accuracy,numpy.mean(y_val==y_val_pred),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
grad_difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
_WORD_SPLIT,"re.compile(b""([.,!?\""':;)",CLUSTER_30,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(4,figsize=(20,20)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(4,figsize=(20,20)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=2,figsize=(10,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pos,numpy.arange(len(people),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dataSetProv,pandas.DataFrame(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
tempo,"pandas.date_range(dataInicial,dataFinal)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataSet,"pandas.read_csv(""https://github.com/Natalnet/GCiD/raw/master/Codes/Data/curitibadiario.csv"",
skiprows=16,sep=';')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"dataSet[""Data""]","pandas.to_datetime(dataSet[""Data""],format=""%d/%m/%Y"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,y_train",numpy.array(x_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_train,numpy.nan_to_num(x_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train,numpy.nan_to_num(y_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mms,"sklearn.preprocessing.MinMaxScaler(feature_range=(-1,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2_fit_model_df,pandas.DataFrame(df2_fit_model),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_merged,"pandas.merge(df3,df2_fit_model_df,how='left',left_on='srch_destination_id',right_on='srch_destination_id')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df1,pandas.read_csv('train3.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2,pandas.read_csv('destinations1.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df1[""srch_ci""]","pandas.to_datetime(df1[""srch_ci""],errors='coerce')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df1[""srch_co""]","pandas.to_datetime(df1[""srch_co""],errors='coerce')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df1[""date_time""]","pandas.to_datetime(df1[""date_time""],errors='coerce')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
p,sklearn.decomposition.PCA(n_components=20),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(df_merged1,y,test_size=.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dt1,"sklearn.ensemble.RandomForestClassifier(criterion='entropy',random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(20,8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(20,8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfe,"sklearn.feature_selection.RFE(logreg,4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_stump,"sklearn.tree.DecisionTreeClassifier(max_features=None,max_leaf_nodes=j)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bstlfy,"sklearn.ensemble.AdaBoostClassifier(base_estimator=clf_stump,n_estimators=i)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
arange,numpy.arange(len(final_output_data['teff']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
up_to_rgb_tip,numpy.arange(most_luminous_index[0]),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
iraf_matched,numpy.array(iraf_matched),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
opt_parms,"numpy.array([0.,0.,0.])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
mc_dist,numpy.array(final_output_data['r_est']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
logg_mean,"numpy.array([np.nanmean(mc_logg[:,x])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
logg_std,"numpy.array([np.nanstd(mc_logg[:,x])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
abundances_in_mode,"numpy.array([(sme_data['MODE'][0,it])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(iraf_data['tmass_id']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_abundances[each_key],numpy.array(iraf_data['tmass_id']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data[each_key.upper(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_abundances[each_key],numpy.array(sme_data[each_key.upper(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(iraf_data[each_key]),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array([sme_data['FIELD'][x][:-5]forxinrange(len(sme_data['FIELD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['wg4_pipeline'],numpy.array(['lbol'forxinrange(len(sme_data['FIELD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array([sme_data['FIELD'][x][:-5]forxinrange(len(sme_data['FIELD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['wg4_pipeline'],numpy.array(['seis'forxinrange(len(sme_data['FIELD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data['FIELD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['wg4_pipeline'],numpy.array(['free'forxinrange(len(sme_data['FIELD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data[each_key.upper(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array([np.NaNforxinrange(len(sme_data['FIELD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['e_'+each_key],numpy.array([np.NaNforxinrange(len(sme_data['FIELD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data['BA_VRAD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data['LI_VRAD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data['SI_VRAD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data['BC_K']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data['FEH']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_abundances[each_key],numpy.array(sme_data['FEH']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data['E_FEH']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_abundances[each_key],numpy.array(sme_data['E_FEH']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data['C_FEH']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_abundances[each_key],numpy.array(sme_data['C_FEH']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data['C_'+each_key[6:].upper(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data['S'+each_key[5:].upper(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],"numpy.array(sme_data['SFEH'][:,0])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],"numpy.array(sme_data['SVSINI'][:,0])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['fe_h'],"numpy.array(sme_data['A_ABUND'][:,1]-abundance_zeropoints['A_Fe'][0])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['e_fe_h'],"numpy.array(sme_data['E_ABUND'][:,1])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['cov_e_fe_h'],"numpy.array(sme_data['C_ABUND'][:,1])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['flag_fe_h'],"numpy.array(sme_data['AFLAG'][:,1])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_abundances['fe_h'],"numpy.array(sme_data['A_ABUND'][:,1]-abundance_zeropoints['A_Fe'][0])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_abundances['e_fe_h'],"numpy.array(sme_data['E_ABUND'][:,1])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_abundances['cov_e_fe_h'],"numpy.array(sme_data['C_ABUND'][:,1])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_abundances['flag_fe_h'],"numpy.array(sme_data['AFLAG'][:,1])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data['VSINI']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['e_'+each_key],numpy.array(sme_data['E_VSINI']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['cov_e_'+each_key],numpy.array(sme_data['C_VSINI']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(sme_data['VEL']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['e_'+each_key],numpy.array(sme_data['E_VEL']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['cov_e_'+each_key],numpy.array(sme_data['C_VEL']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array(iraf_data['radial_velocity']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['e_'+each_key],numpy.array(iraf_data['radial_velocity_error']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],"numpy.array(sme_data['CHI'][:,0])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
rjce_ak,numpy.array(0.918*(iraf_data['h_m']-iraf_data['w2mpro']-0.08),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
tmass_adjusted,numpy.array(iraf_data['ph_qual_tmass']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
wise_adjusted,numpy.array(iraf_data['ph_qual_wise']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
h_m_qual,numpy.array([tmass_adjusted[x][1]=='A'forxinrange(len(tmass_adjusted),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
w2_qual,numpy.array([wise_adjusted[x][1]=='A'forxinrange(len(wise_adjusted),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_abundances[each_key],"numpy.array(sme_data['A_ABUND'][:,element_in_sme_data])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],"numpy.array(sme_data['A_ABUND'][:,element_in_sme_data])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['flux_'+each_key],"numpy.array(sme_data['LINEFLUX'][:,element_in_sme_data])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['chi_'+each_key],"numpy.array(sme_data['CHI'][:,element_in_sme_data])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[element+'_fe'],"numpy.array(

sme_data['A_ABUND'][:,element_in_sme_data]-abundance_zeropoints[each_key][0]
-(final_output_abundances['A_Fe']-abundance_zeropoints['A_Fe'][0])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[element+'_fe'],"numpy.array(

sme_data['A_ABUND'][:,element_in_sme_data]-abundance_zeropoints[each_key][0]
-(7.45+final_output_data['fe_h_atmo']-abundance_zeropoints['A_Fe'][0])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['cov_e_'+element],"numpy.array(sme_data['C_ABUND'][:,element_in_sme_data])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['flag_'+element],"numpy.array(sme_data['AFLAG'][:,element_in_sme_data])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_abundances['flux_'+each_key],"numpy.array(sme_data['LINEFLUX'][:,element_in_sme_data])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_abundances['chi_'+each_key],"numpy.array(sme_data['CHI'][:,element_in_sme_data])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data[each_key],numpy.array([np.NaNforxinrange(len(sme_data['FIELD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
useful_line_bitmask,numpy.array(useful_line_bitmask),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
useful_line_measurements,numpy.array(useful_line_measurements),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
useful_line_uncertainties,numpy.array(useful_line_uncertainties),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
useful_line_bitmask,numpy.array(useful_line_bitmask),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
useful_line_measurements,numpy.array(useful_line_measurements),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
useful_line_uncertainties,numpy.array(useful_line_uncertainties),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
"(final_output_data[each_element+'_fe'],final_output_data['e_'+each_element+'_fe'],final_output_data['nr_'+each_element+'_fe'],final_output_data['flag_'+each_element+'_fe'])","numpy.array([combine_line_measurements_for_element(each_element,final_output_data,final_output_abundances,data_index)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
identified_binary,numpy.array(identified_binary_lower&identified_binary_upper),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
sme_idl_bitmask,"numpy.array([get_bin(x,10)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
red_bitmask,"numpy.array([get_bin(x,10)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
old_bitmask,"numpy.array([get_bin(x,10)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['Coolest_MS'],"numpy.array([3000,4500,4.00,5.25])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['Cool_MS'],"numpy.array([4500,5500,4.00,5.25])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['Warm_MS'],"numpy.array([5500,6600,3.50,5.25])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['Hot_MS'],"numpy.array([6600,8000,3.50,5.25])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['Hot_Lum1'],"numpy.array([5500,6600,-0.50,3.50])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['Hot_Lum2'],"numpy.array([6600,8000,-0.50,3.50])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['Subgiants'],"numpy.array([4250,5500,3.50,4.00])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['RGB_tip'],"numpy.array([4250,5500,3.00,3.50])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['1st_RC'],"numpy.array([4250,5500,2.20,2.60])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['RGB_L1'],"numpy.array([4250,5500,-0.5,2.20])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['RGB_L2'],"numpy.array([4000,4250,-0.5,2.20])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['RGB_L3'],"numpy.array([3750,4000,-0.5,2.20])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['RGB_L4'],"numpy.array([3000,3750,-0.5,2.20])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['Bump'],"numpy.array([4250,4900,2.60,3.00])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['2nd_RC'],"numpy.array([4900,5500,2.60,3.00])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
subgroups['PMS'],"numpy.array([3000,4250,2.20,4.00])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
product_list,numpy.array(product_list),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['nr_'+each_key],numpy.zeros(len(sme_data['FIELD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['flag_'+each_key],numpy.zeros(len(sme_data['FIELD']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
is_photometric_binary,numpy.zeros(len(final_output_data['fe_h']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
bitmask_sp,numpy.zeros(len(final_output_data['sobject_id']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
bitmask_element,numpy.zeros(len(final_output_data['sobject_id']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
match,numpy.where(each==all_iraf_data['sobject_id']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
bad_ebv,numpy.where(0.36*iraf_data['ebv']>3*rjce_ak),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
nearby,numpy.where(iraf_data['r_est']<=100.),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
element_in_sme_data,numpy.where(element==abundances_in_mode),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
element_in_sme_data,numpy.where('K7699'==abundances_in_mode),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
element_in_sme_data,numpy.where('Ca5862'==abundances_in_mode),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
element_in_sme_data,numpy.where('Cu5782'==abundances_in_mode),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
element_in_sme_data,numpy.where('Ba5854'==abundances_in_mode),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
upper_limit,numpy.where(np.min(useful_line_measurements),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
rgb_tip,"numpy.where(
(isos[each_iso_index].data[-1]['logG'][:-1]<2)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
most_luminous_index,numpy.where(isos[0].data[-1]['logG']==np.min(isos[0].data[-1]['logG']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
cutoff_isochrone,"numpy.concatenate(([
np.array([[10**isos[0].data[-1]['logTeff'][0]-1000,
isos[0].data[-1]['logG'][0]]])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
bad_rjce,numpy.isnan(iraf_data['h_m']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
new_error,"numpy.sqrt(

(scaling[each_key][0]*final_output_data['cov_e_'+each_key]+scaling[each_key][1])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
cutoff_isochrone,numpy.loadtxt('../input/MP_cutoff_isochrone.txt'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
tsne_binary,"numpy.loadtxt('../input/tSNE/tsne_binaries.txt',dtype=np.int)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
tsne_emission,"numpy.loadtxt('../input/tSNE/tsne_emission.txt',dtype=np.int)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
tsne_reduction,"numpy.loadtxt('../input/tSNE/tsne_reduction_issues.txt',dtype=np.int)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
opt_parms,numpy.load('../validation/repeat_observations/reference_uncertainties/repeats_'+each_key+'.npy'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
opt_parms,numpy.load('../validation/repeat_observations/reference_uncertainties/repeats_'+each_key[2:]+'.npy'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
isos,numpy.load('VAC_ages/Parsec_isochrones.npy'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
isos,"numpy.load('VAC_ages/Parsec_isochrones.npy',fix_imports=True,allow_pickle=True,encoding='latin1')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
isos,numpy.load('VAC_ages/Parsec_isochrones.npy'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data['cov_e_'+each_key[2:]],"numpy.nanmax([

final_output_data['cov_e_'+each_key[2:]],

(
snr_sigma_func(snr_in,*opt_parms)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
binary_identification_function,"scipy.interpolate.interp1d(
isos[each_iso_index].data[-1]['logG'][:rgb_tip],
10**isos[each_iso_index].data[-1]['logTeff'][:rgb_tip],
bounds_error=False,
fill_value=(10**isos[each_iso_index].data[-1]['logTeff'][rgb_tip],10**isos[each_iso_index].data[-1]['logTeff'][0])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
cutoff_isochrone_function,"scipy.interpolate.interp1d(cutoff_isochrone[:,1],cutoff_isochrone[:,0])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
uncertainty_accuracy,collections.OrderedDict(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_data,collections.OrderedDict(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
final_output_abundances,collections.OrderedDict(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
converter,collections.OrderedDict(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
output_pandas,"pandas.DataFrame(final_output_data,columns=final_output_data.keys()",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
output_a_pandas,"pandas.DataFrame(final_output_abundances,columns=final_output_abundances.keys()",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0
response,requests.get('https://www.eltiempo.com/deportes'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
Z,numpy.reshape(kernel(coords),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,"numpy.linspace(18,95,num=78)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Y,"numpy.linspace(1,7,num=7)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
coords,numpy.vstack([item.ravel(),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
bq_data,"numpy.loadtxt('./data/BQmat_orig.txt',delimiter=',')",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data_df,pandas.DataFrame(data_list),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,"pandas.concat([CONSTANT,X1,X2,X1*X2],axis=1)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
BIDEN,pandas.read_csv('./data/biden.csv'),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
kernel,"scipy.stats.gaussian_kde(data_df.T,bw_method=bandwidth)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
platform_sales,"pandas.DataFrame({'Platform':platforms,'Sales':total_sales})",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
platform_genre_sales,pandas.DataFrame({'Platform':platforms}),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
publisher_sales,"pandas.DataFrame({'Genre':genres,'Sales':publisher_genre_sales})",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('data/vgsales.csv',index_col='Rank')",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
category_train,numpy.array(category_train),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
category_test,numpy.array(category_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
subcategory_train,numpy.array(subcategory_train),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
subcategory_test,numpy.array(subcategory_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
state_enc_train,numpy.array(state_enc_train),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
state_enc_test,numpy.array(state_enc_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
grade_enc_train,numpy.array(grade_enc_train),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
grade_enc_test,numpy.array(grade_enc_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
prefix_enc_train,numpy.array(prefix_enc_train),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
prefix_enc_test,numpy.array(prefix_enc_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
embedding,numpy.array([float(val),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
embedding_matrix,"numpy.zeros((vocab_size,300)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
embedding_matrix_idf,"numpy.zeros((vocab_size_idf,300)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
remain_train,"numpy.stack((price_standardized,previouspro_standardized_train)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
remain_test,"numpy.stack((price_standardized_test,previouspro_standardized_test)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
project_data,pandas.DataFrame(lst_ran),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
"""""""df2_train","pandas.DataFrame(idf_essay_train,columns=[""train_essay""])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
df2_test,"pandas.DataFrame(idf_essay_test,columns=[""test_essay""])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
final,"pandas.read_csv(""lstm_preprocessed_data.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
df2_train,"pandas.read_csv(""lstm_model2_train.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
df2_test,"pandas.read_csv(""lstm_model2_test.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
"project_data_train,project_data_test,y_train,y_test","sklearn.model_selection.train_test_split(project_data,project_data[""project_is_approved""],test_size=0.2,stratify=project_data[""project_is_approved""],random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
price_scalar,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
price_scalar,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
previouspro_scalar,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
previouspro_scalar,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
concat_train,"scipy.sparse.hstack((categories_one_hot,sub_categories_one_hot,school_state_one_hot,gra_cat_one_hot,tea_pre_one_hot,remain_train)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
concat_test,"scipy.sparse.hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_one_hot_test,gra_cat_one_hot_test,tea_pre_one_hot_test,remain_test)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
random_num,random.sample(range(100),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lim,matplotlib.pyplot.axis(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_blobs(n_samples=100,n_features=2,centers=2,random_state=2,cluster_std=1.5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.fetch_20newsgroups(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"sklearn.datasets.fetch_20newsgroups(subset='train',categories=categories)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"sklearn.datasets.fetch_20newsgroups(subset='test',categories=categories)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.pipeline.make_pipeline(TfidfVectorizer(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mat,"sklearn.metrics.confusion_matrix(test.target,labels)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
qp_email,pandas.DataFrame(data=palavras),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
qp_ham_email,pandas.DataFrame(data=palavras_ham),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
qp_spam_email,pandas.DataFrame(data=palavras_spam),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
qp_spam_email,pandas.DataFrame(data=palavras_spam),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
qp_ham_email,pandas.DataFrame(data=palavras_ham),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
teste,"pandas.concat([teste_email,teste[""Class""]],axis=1)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
train_email_limpo,"pandas.concat([train_email,train[""Class""]],axis=1)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
teste_10000,"pandas.concat([teste_email_10000,teste_10000[""Class""]],axis=1)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
train_email_limpo_10000,"pandas.concat([train_email_10000,train[""Class""]],axis=1)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
dados,pandas.read_excel('spamham2019(1),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
heights,"numpy.array([189,170,189,163,183,171,185,168,173,183,173,173,175,178,183,193,178,173
,174,183,183,168,170,178,182,180,183,178,182,188,175,179,183,193,182,183
,177,185,188,188,182,185])",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
coefs,"pandas.Series(ridge.coef_,index=X_train.columns)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
coefs,"pandas.Series(lasso.coef_,index=X_train.columns)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
coefs,"pandas.Series(elasticNet.coef_,index=X_train.columns)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.concat([train_num,train_cat],axis=1)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_coefs,pandas.concat([coefs.sort_values(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_coefs,pandas.concat([coefs.sort_values(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_coefs,pandas.concat([coefs.sort_values(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_cat,pandas.get_dummies(train_cat),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""../input/train.csv"")",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.SalePrice,numpy.log1p(train.SalePrice),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_num[skewed_features],numpy.log1p(train_num[skewed_features]),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""OverallQual-Sq""]","numpy.sqrt(train[""OverallQual""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""AllSF-Sq""]","numpy.sqrt(train[""AllSF""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""AllFlrsSF-Sq""]","numpy.sqrt(train[""AllFlrsSF""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""GrLivArea-Sq""]","numpy.sqrt(train[""GrLivArea""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""SimplOverallQual-Sq""]","numpy.sqrt(train[""SimplOverallQual""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""ExterQual-Sq""]","numpy.sqrt(train[""ExterQual""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""GarageCars-Sq""]","numpy.sqrt(train[""GarageCars""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""TotalBath-Sq""]","numpy.sqrt(train[""TotalBath""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""KitchenQual-Sq""]","numpy.sqrt(train[""KitchenQual""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""GarageScore-Sq""]","numpy.sqrt(train[""GarageScore""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(-cross_val_score(model,X_train,y_train,scoring=scorer,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(-cross_val_score(model,X_test,y_test,scoring=scorer,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train,y,test_size=0.3,random_state=0)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
stdSc,sklearn.preprocessing.StandardScaler(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,"sklearn.linear_model.RidgeCV(alphas=[0.01,0.03,0.06,0.1,0.3,0.6,1,3,6,10,30,60])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,"sklearn.linear_model.RidgeCV(alphas=[alpha*.6,alpha*.65,alpha*.7,alpha*.75,alpha*.8,alpha*.85,
alpha*.9,alpha*.95,alpha,alpha*1.05,alpha*1.1,alpha*1.15,
alpha*1.25,alpha*1.3,alpha*1.35,alpha*1.4],
cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,"sklearn.linear_model.LassoCV(alphas=[0.0001,0.0003,0.0006,0.001,0.003,0.006,0.01,0.03,0.06,0.1,
0.3,0.6,1],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,"sklearn.linear_model.LassoCV(alphas=[alpha*.6,alpha*.65,alpha*.7,alpha*.75,alpha*.8,
alpha*.85,alpha*.9,alpha*.95,alpha,alpha*1.05,
alpha*1.1,alpha*1.15,alpha*1.25,alpha*1.3,alpha*1.35,
alpha*1.4],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elasticNet,"sklearn.linear_model.ElasticNetCV(l1_ratio=[0.1,0.3,0.5,0.6,0.7,0.8,0.85,0.9,0.95,1],
alphas=[0.0001,0.0003,0.0006,0.001,0.003,0.006,
0.01,0.03,0.06,0.1,0.3,0.6,1,3,6],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elasticNet,"sklearn.linear_model.ElasticNetCV(l1_ratio=[ratio*.85,ratio*.9,ratio*.95,ratio,ratio*1.05,ratio*1.1,ratio*1.15],
alphas=[0.0001,0.0003,0.0006,0.001,0.003,0.006,0.01,0.03,0.06,0.1,0.3,0.6,1,3,6],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elasticNet,"sklearn.linear_model.ElasticNetCV(l1_ratio=ratio,
alphas=[alpha*.6,alpha*.65,alpha*.7,alpha*.75,alpha*.8,alpha*.85,alpha*.9,
alpha*.95,alpha,alpha*1.05,alpha*1.1,alpha*1.15,alpha*1.25,alpha*1.3,
alpha*1.35,alpha*1.4],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorer,"sklearn.metrics.make_scorer(mean_squared_error,greater_is_better=False)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(data,labels,test_size=0.25,random_state=42)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(data2,labels2,test_size=0.25,random_state=42)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
N,"numpy.arange(0,EPOCHS)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
N,"numpy.arange(0,EPOCHS)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
data,"numpy.array(data,dtype='f')",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
data2,"numpy.array(data2,dtype='f')",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
image,"numpy.expand_dims(image,axis=0)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
image,"numpy.expand_dims(image,axis=0)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
g.data,"pandas.DataFrame(np.vstack((shrinkage_array[1,:],z_score_array[1,:])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
samples,pandas.concat(samples),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('../../orig_golf_data.txt',sep='\s+')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
tri,"seaborn.PairGrid(pd.DataFrame(np.vstack((fit['a'],fit['b'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
tri,"seaborn.PairGrid(pd.DataFrame(np.vstack((fit_samp['a'],fit_samp['b'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
g,"seaborn.PairGrid(pd.DataFrame(np.vstack((shrinkage_array[0,:],z_score_array[0,:])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
tri,"seaborn.PairGrid(pd.DataFrame(np.vstack((fit_obs['a'],fit_obs['b'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
cmap,"seaborn.color_palette(""colorblind"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
cm,"seaborn.diverging_palette(220,20,as_cmap=True)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.arange(-5,5,0.5)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.arange(-5,5,0.5)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"g.map_diag(plt.hist,color","'blue',alpha=0.5,bins=numpy.arange(0,5,0.1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"g.map_diag(plt.hist,color","'red',alpha=0.5,bins=numpy.arange(0,5,0.1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
a_cal,numpy.empty(n_samp),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
b_cal,numpy.empty(n_samp),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
z_score_array,"numpy.empty((2,n_samp)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
shrinkage_array,"numpy.empty((2,n_samp)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pval,numpy.empty_like(obs_data),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
a_cal[s],numpy.sum(fit_tmp['a']<fit['a'][s]),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
b_cal[s],numpy.sum(fit_tmp['b']<fit['b'][s]),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ind,"numpy.sum(fit_obs['y_pred'],axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
error,numpy.sqrt(p*(1-p),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"Y,X","numpy.histogram(fit_obs['y_pred'][:,0]/data['n'].values[0],25,normed=1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_3,CLUSTER_8,CLUSTER_5,CLUSTER_0
a,matplotlib.pyplot.plot(t['y'].tolist(),CLUSTER_29,CLUSTER_3,CLUSTER_8,CLUSTER_5,CLUSTER_0
b,matplotlib.pyplot.plot(t['pred'].tolist(),CLUSTER_29,CLUSTER_3,CLUSTER_8,CLUSTER_5,CLUSTER_0
small_y2,"numpy.argmax(small_y,axis=1)",CLUSTER_29,CLUSTER_3,CLUSTER_8,CLUSTER_5,CLUSTER_0
pred,"numpy.argmax(pred,axis=1)",CLUSTER_29,CLUSTER_3,CLUSTER_8,CLUSTER_5,CLUSTER_0
t,"pandas.DataFrame({'pred':pred,'y':y.flatten()",CLUSTER_29,CLUSTER_3,CLUSTER_8,CLUSTER_5,CLUSTER_0
dummies,pandas.get_dummies(df[name]),CLUSTER_29,CLUSTER_3,CLUSTER_8,CLUSTER_5,CLUSTER_0
dummies,pandas.get_dummies(df[target]),CLUSTER_29,CLUSTER_3,CLUSTER_8,CLUSTER_5,CLUSTER_0
r,"requests.post(""https://api.heatonresearch.com/assignment-submit"",
headers={'x-api-key':key},json={'csv':base64.b64encode(data.to_csv(index=False)",CLUSTER_29,CLUSTER_3,CLUSTER_8,CLUSTER_5,CLUSTER_0
start_time,time.time(),CLUSTER_29,CLUSTER_3,CLUSTER_8,CLUSTER_5,CLUSTER_0
elapsed_time,time.time(),CLUSTER_29,CLUSTER_3,CLUSTER_8,CLUSTER_5,CLUSTER_0
score,"sklearn.metrics.accuracy_score(small_y2,pred)",CLUSTER_29,CLUSTER_3,CLUSTER_8,CLUSTER_5,CLUSTER_0
words_pool,pandas.DataFrame(columns=columns),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
matrix,"pandas.DataFrame(columns=columns_m,index=index_m)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cross,"pandas.crosstab(words_pool.words,words_pool.author)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_texts,pandas.read_csv('../../data/spooky_writer_train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('../../data/spooky_writer_test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sample_sub,pandas.read_csv('../../data/spooky_writer_sample_submission.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_prob,"pandas.read_csv(""test_prob.txt"",header=None,sep=""|:"",names=[""x"",""EAP"",""x"",""MWS"",""x"",""HPL""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bench,"pandas.read_csv(""benchmark_submission.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
words,"re.findall('\w{3,}',df[""text""].iloc[t].lower()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train,valid","sklearn.model_selection.train_test_split(train_texts,random_state=13)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"eap,hpl,mws","matplotlib.pyplot.bar(np.arange(1,4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_pagamentos,pandas.DataFrame(pagamentos),CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_lotacao_presente,pandas.DataFrame(funcionarios),CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_lotacoes,"pandas.DataFrame(lista,columns=['DataFim','DataInicio','IdUA','NomeFuncionario','NomeUA'])",CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
servidores_gabinetes,"pandas.merge(df_pagamentos,gabinetes,left_on='nome_func',right_on='NomeFuncionario')",CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
nomes_naoencontrados,"pandas.merge(df_pagamentos,
gabinetes,
left_on='nome_func',
right_on='NomeFuncionario',
how='outer',
indicator=True)",CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
nomes_naoencontrados,"pandas.merge(df_pagamentos,
gabinetes_presente,
left_on='nome_func',
right_on='nome_func',
how='outer',
indicator=True)",CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
servidores_gabinetes_julho,"pandas.merge(julho_pagamentos,gabinetes_presente,left_on='nome_func',right_on='nome_func')",CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
nomes_naoencontrados,"pandas.merge(julho_pagamentos,
gabinetes_presente.drop_duplicates('nome_func')",CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_pagamentos,"pandas.read_excel('resultados/pagamentos_servidores.xlsx',sheet_name='Sheet1')",CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
gabinetes_presente,"pandas.read_excel('resultados/lotacao_servidores_atual_gabinetes.xlsx',sheet_name='Sheet1')",CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_lotacoes,"pandas.read_excel('resultados/lotacao_servidores_historico.xlsx',sheet_name='Sheet1')",CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_lotacoes['DataFim'],pandas.to_datetime(df_lotacoes['DataFim']),CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_lotacoes['DataInicio'],pandas.to_datetime(df_lotacoes['DataInicio']),CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
jsonString,json.dumps(xmltodict.parse(xmlString),CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
dados_json,json.load(arquivo_json),CLUSTER_1,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,"pandas.read_csv('../output_{}/survieinfo_{}.csv'.format(m,j)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,"pandas.read_csv('/home/ccorbi/Work/Beagle/training/vae/METABRIC_n10/output_{}/survieinfo_{}.csv'.format(m,j)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('/home/kimlab2/ccorbi/training/vae/METABRIC_n5/output_{}/survieinfo_{}.csv'.format(query,epoch)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=2,ncols=1,figsize=(8,12)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.loadtxt('../output_{}/latent_{}.csv'.format(m,j)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.loadtxt('/home/ccorbi/Work/Beagle/training/vae/METABRIC_n10/output_{}/latent_{}.csv'.format(m,j)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_embedded,sklearn.manifold.TSNE(n_components=2),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_embedded,sklearn.manifold.TSNE(n_components=2),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
topics_df,pandas.DataFrame(topics),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
df_train,pandas.DataFrame(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_train,pandas.DataFrame(X_train['embed'].tolist(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_train,"pandas.DataFrame(X_reduced,columns=range(0,50)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
df_test,pandas.DataFrame(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_test,pandas.DataFrame(X_test['embed'].tolist(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_test,"pandas.DataFrame(X_test_reduced,columns=range(0,50)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
output,"pandas.DataFrame(data={""y_train"":y_train.sort_index()",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
output,"pandas.DataFrame(data={""y_test"":y_train.sort_index()",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
output,"pandas.DataFrame(data={""y_test"":y_test,""Y_predict"":Y_test_perdict})",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp,"pandas.read_csv(""encodedDCinboxResource/""+i)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp,"pandas.read_csv(""encodedDCinboxResource/""+i)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
dirs,os.listdir(path),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_reduced,"sklearn.decomposition.TruncatedSVD(n_components=50,random_state=0)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_test_reduced,"sklearn.decomposition.TruncatedSVD(n_components=50,random_state=0)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(pipeline,
X=X_train.sort_index()",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.make_pipeline(
StandardScaler()",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pval_plur,numpy.array(pval_plur),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
qpii,numpy.array(qpii),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
expr_level,"numpy.ones((n_analytes,n_samples*n_replicates)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
,"numpy.cumsum(1-df.iloc[:,0])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
regulated,"numpy.repeat(template,n_replicates,axis=1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
template,"numpy.hstack((np.zeros((n_analytes,1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
expr_df,"pandas.DataFrame(expression,columns=sample_names,index=analyte_names)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
label_df,"pandas.DataFrame(template,columns=[i+1foriinrange(n_samples)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'q':q[:,1],'labs':data_labels.iloc[:,1]})",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_excel(""MSB-12-901-s009.xlsx"",skiprows=list(range(6)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
corr,pandas.DataFrame(app_train.corr(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
app_train,pandas.read_csv(f_app_train),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
results,"numpy.zeros((x_test.shape[0],10)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
predicted_right,numpy.count_nonzero(results==True),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
predicted_wrong,numpy.count_nonzero(results==False),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
results,"numpy.argmax(results,axis=-1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x_train,x_val,y_train,y_val","sklearn.model_selection.train_test_split(x_train,y_train,test_size=0.05)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
wb_arr,numpy.array(_wb_arr),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
Ann_wb_arr,numpy.array(_Ann_wb_arr),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,axs","matplotlib.pyplot.subplots(4,4,figsize=(18,18)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
gray,numpy.float32(gray_flat_chess),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
gray,numpy.float32(gray_real_chess),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
corners,numpy.int0(corners),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
corners,numpy.int0(corners),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
esd_tc,"pandas.crosstab(esd_df.Ticket_Category,columns='count')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
esd_et,"pandas.crosstab(esd_df.Error_type,columns='count')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
esd_ed,"pandas.crosstab(esd_df.Error_detail,columns='count')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
esd_r,"pandas.crosstab(esd_df.Resolution,columns='count')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
esd_dc,"pandas.crosstab(esd_df.Doc_type,columns='count')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
table,"pandas.crosstab(esd_df.Doc_type,esd_df.Resolution)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
table,"pandas.crosstab(esd_df.Error_type,esd_df.Resolution)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
table,"pandas.crosstab(esd_df.Error_detail,esd_df.Resolution)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_new,"pandas.read_csv(new1,delimiter=',',engine='python')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_extra,"pandas.read_csv(extra,delimiter=',',engine='python')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
esd_extra,"pandas.read_csv(path,delimiter=',',engine='python')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
esd_df,"pandas.read_csv(path,delimiter=',',engine='python')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
esd_df,"pandas.read_csv(path,delimiter=',',engine='python')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_new,"pandas.read_csv(""innovators.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
esd_df,"pandas.read_csv(path,delimiter=',',engine='python')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(importances),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf1,"sklearn.ensemble.RandomForestClassifier(criterion='entropy',n_estimators=100,max_features=3,oob_score=True,bootstrap=True,n_jobs=-1,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_gridcv,"sklearn.model_selection.GridSearchCV(estimator=rf1,cv=5,param_grid=params,scoring='accuracy')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ac,"sklearn.metrics.accuracy_score(y_test,y_predrf)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mcc,"sklearn.metrics.matthews_corrcoef(y_test,rf1_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mc,"sklearn.metrics.matthews_corrcoef(y_test,y_predrf)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_predrf)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(source_well,columns=['SourceWell'])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(1,figsize=(8,8)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
mydict,collections.defaultdict(list),CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
wind,"pandas.read_csv(datafile,sep="""",names=column_names,
parse_dates=date_spec,keep_date_col=True,index_col=False)",CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
wind['new_date'],pandas.to_datetime(wind.date_time),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
wind['date_time'],pandas.to_datetime(wind.date_time),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
p,pandas.to_datetime('1984/4'),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_train,numpy.load('X_train_100d.npy'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y_train,numpy.load('y_train.npy'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_test,numpy.load('X_test_100d.npy'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y_test,numpy.load('y_test.npy'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
template,"numpy.array(r_points+l_points,np.uint8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
template,"numpy.array(cv2.merge((zero_channel,template,zero_channel)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
output,"numpy.array(cv2.merge((warped,warped,warped)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
output,numpy.zeros_like(img_ref),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
l_points,numpy.zeros_like(warped),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r_points,numpy.zeros_like(warped),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
zero_channel,numpy.zeros_like(template),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
warpage,"numpy.dstack((warped,warped,warped)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
poly_features,"pandas.DataFrame(poly_features,
columns=poly_transformer.get_feature_names(['EXT_SOURCE_1','EXT_SOURCE_2',
'EXT_SOURCE_3','DAYS_BIRTH'])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
poly_features_test,"pandas.DataFrame(poly_features_test,
columns=poly_transformer.get_feature_names(['EXT_SOURCE_1','EXT_SOURCE_2',
'EXT_SOURCE_3','DAYS_BIRTH'])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
preds,"pandas.DataFrame({""SK_ID_CURR"":test_id,""TARGET"":testxg_pred})",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
feat_imp,pandas.Series(model_cv.get_fscore(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
mis_val_table,"pandas.concat([mis_val,mis_val_percent],axis=1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_1,"pandas.concat([train_data_poly,test_poly],axis=0)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_data,pandas.get_dummies(train_data),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test,pandas.get_dummies(test),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_data,"pandas.read_csv(""../input/application_train.csv"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('../input//application_test.csv'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
poly_transformer,sklearn.preprocessing.PolynomialFeatures(degree=3),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
Classifier,sklearn.linear_model.LogisticRegression(C=0.0001),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"train_X,test_X,train_y,test_y","sklearn.model_selection.train_test_split(train,train_target,test_size=0.25)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"Xtrain,Xval,ytrain,yval","sklearn.model_selection.train_test_split(train_data_poly,train_target,test_size=0.2,
random_state=1982)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(test_y,ypred)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cv_score,"sklearn.model_selection.cross_val_score(Classifier,train,train_target,cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
grocerydf,"pandas.DataFrame({
""GroceryStore"":name_list,
""Address"":address_list,
""City"":city_list
})",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
sanandf,"pandas.DataFrame({
""GroceryStore"":naminglist,
""Address"":addressing,
""City"":cities
})",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,requests.get(url),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
responses,requests.get(sananurl),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
counter,collections.defaultdict(int),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
counter,collections.Counter(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c1,collections.Counter('ablewasIereIsawelba'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c2,collections.Counter(my_list),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c2,"collections.Counter(a=1,b=10)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c3,"collections.Counter({'a':1,'b':10})",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
word_count,collections.Counter(words),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c1,collections.Counter('abba'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c1,collections.Counter(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c1,"collections.Counter(a=1,b=2,c=3)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c2,"collections.Counter(b=1,c=2,d=3)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c1,"collections.Counter(a=1,b=2,c=3)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c2,"collections.Counter(b=1,c=2,d=3)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c1,collections.Counter('aabbccddee'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c1,collections.Counter('aabbcc'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c2,collections.Counter('abc'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c1,"collections.Counter(a=5,b=1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c2,"collections.Counter(a=1,b=10)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
c1,"collections.Counter(a=10,b=-10)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
sold_counter,collections.Counter(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
refund_counter,collections.Counter(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
order_counter,collections.Counter(chain.from_iterable(repeat(*order),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
words,"re.split('\W',sentence)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('timestamp.csv',encoding='utf8')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df['Date'],"pandas.to_datetime(df['Timestamp'],unit='s')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"f,ax","matplotlib.pyplot.subplots(2,1,figsize=(8,8)",CLUSTER_26,CLUSTER_0,CLUSTER_11,CLUSTER_30,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(2,2,figsize=(8,8)",CLUSTER_26,CLUSTER_0,CLUSTER_11,CLUSTER_30,CLUSTER_8
points,numpy.array([(int(p[0]),CLUSTER_26,CLUSTER_0,CLUSTER_11,CLUSTER_30,CLUSTER_8
mask,"numpy.full((height,width,bitness//8)",CLUSTER_26,CLUSTER_0,CLUSTER_11,CLUSTER_30,CLUSTER_8
mask,"numpy.full((height,width,bitness//8)",CLUSTER_26,CLUSTER_0,CLUSTER_11,CLUSTER_30,CLUSTER_8
lst,numpy.arange(data_num),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
l,numpy.array([]),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
bn,"numpy.zeros([1000,10])",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
l,"numpy.vstack((l==0,l==1,l==2,l==3)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
l,"numpy.append(l,a)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
iris,sklearn.datasets.load_iris(),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
X,"pandas.DataFrame(iris.data,columns=['sepallength','sepalwidth','petallength','petalwidth'])",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
y,"pandas.DataFrame(iris.target,columns=['class'])",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
cov,"numpy.dot(std_data.T,std_data)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_2D,"numpy.dot(std_data,eig_vecs)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_2D_with_labels,"numpy.hstack((data_2D,labels)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_2D_df,"pandas.DataFrame(data_2D_with_labels,columns=['Principal_f1','Principal_f2','class'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_data,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"eig_vals,eig_vecs","scipy.linalg.eigh(cov,subset_by_index=[782,783])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"v[""dW""+str(l+1)]",numpy.zeros((parameters['W'+str(l+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"v[""db""+str(l+1)]",numpy.zeros((parameters['b'+str(l+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"v[""dW""+str(l+1)]","numpy.zeros((parameters[""W""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"v[""db""+str(l+1)]","numpy.zeros((parameters[""b""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"s[""dW""+str(l+1)]","numpy.zeros((parameters[""W""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"s[""db""+str(l+1)]","numpy.zeros((parameters[""b""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
num_complete_minibatches,math.floor(m/mini_batch_size),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,math.floor(m/mini_batch_size),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
rmse,math.sqrt(np.mean((evaldata[offset+PRIMELEN:offset+PRIMELEN+RMSELEN]-results[:RMSELEN]),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
Yin,numpy.array(prime_data[:-N_FORWARD]),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
H_,"numpy.zeros([batchsize,RNN_CELLSIZE*N_LAYERS])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
H,"numpy.zeros([1,RNN_CELLSIZE*N_LAYERS])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
Yout,"numpy.zeros([1,N_FORWARD,2])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
plt.ylim(ymax,numpy.amax(losses[1:]),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
Yin,"numpy.reshape(Yin,[1,data_len,2])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
Yout,"numpy.expand_dims(prime_data[-N_FORWARD:],axis=0)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
training,"pandas.read_csv(path_to_data+'training_set.csv',sep=',',header=0)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_17,CLUSTER_0
training_info,"pandas.read_csv(
path_to_data+'training_info.csv',sep=',',parse_dates=True,header=0)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_17,CLUSTER_0
test,"pandas.read_csv(path_to_data+'test_set.csv',sep=',',header=0)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_17,CLUSTER_0
test_info,"pandas.read_csv(path_to_data+'test_info.csv',
sep=',',parse_dates=True,header=0)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_17,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,axes",matplotlib.pyplot.subplots(nrows=2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"minimize(fun,x0=numpy.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"minimize(fun,x0=numpy.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"minimize(fun,x0=numpy.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"minimize(fun,x0=numpy.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"minimize(fun,x0=numpy.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"minimize(fun,x0=numpy.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"minimize(fun,x0=numpy.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"minimize(fun,x0=numpy.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
getmin,"partial(minimize,fun=fun,x0=numpy.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x0,"numpy.array([0.2,0.2])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
params,numpy.array(args),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
poly,numpy.array([orthoHermite(0),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
params,numpy.array(args),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
poly,numpy.array([orthoHermite(n),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"params,_","curve_fit(p,x_data,y_data,p0=numpy.ones((4,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"params,_","curve_fit(p,x_data,y_data,p0=numpy.ones(10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"params,_","curve_fit(p,x_data,y_data,p0=numpy.ones(n)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"params,_","curve_fit(p,x,y,p0=numpy.ones(12)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,numpy.linspace(1.1*sample.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-5,5,100)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-5,5,100)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-np.pi,np.pi,50)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x_grid,"numpy.linspace(-2,2,50)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y_grid,"numpy.linspace(-1,3,50)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-5,5,200)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x_data,"numpy.linspace(-5,5,num=100)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-1,1,15)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-1,1,200)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-3,3,200)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-1,1,15)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-1,1,200)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-1,1,15)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x_grid,"numpy.linspace(-1,1,200)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"[x,y]","numpy.meshgrid(x_grid,y_grid)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
beta,numpy.linalg.pinv(P.T@P),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
beta,numpy.linalg.pinv(P.T@P),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
l,"scipy.stats.logistic(loc=mu,scale=s)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x_root,"scipy.optimize.bisect(fun,-5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x_root,"scipy.optimize.brentq(fun,-5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x_fixed,"scipy.optimize.fixed_point(np.cos,-np.pi)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(fun,np.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(fun,x0=np.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(fun,x0=np.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(fun,x0=np.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(fun,x0=np.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(fun,x0=np.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(fun,x0=np.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(fun,x0=np.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(fun,x0=np.array([-1,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(rosenbrock,x0,
method='trust-constr',
jac=rosenbrock_der,
hess=rosenbrock_hess,
constraints=[lin_cons,nlin_cons_full],
options={'verbose':1})",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
difference,"scipy.optimize.check_grad(fun,dfun,x0=[-3,1])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
lin_cons,"scipy.optimize.LinearConstraint(A,[-1,-0.1,-1,1],[0.5,0.3,1,1])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
nlin_cons,"scipy.optimize.NonlinearConstraint(nl_cons,[-np.inf],[1])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
nlin_cons_full,"scipy.optimize.NonlinearConstraint(nl_cons,[-np.inf],[1],
jac=nl_cons_der,
hess=nl_cons_hess)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"res,_","scipy.integrate.quad(np.sin,0,np.pi)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"res,_","scipy.integrate.quad(np.sin,0,2*np.pi)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"res,_",scipy.integrate.quad(lambdax:np.exp(-x),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"res,_","scipy.integrate.quad(norm.pdf,-np.inf,np.inf)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"res,_",scipy.integrate.quad(lambdax:w(x),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"res,_",scipy.integrate.quad(lambdax:w(x),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"res,_",scipy.integrate.quad(lambdax:orthoHermite(2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"res,_",scipy.integrate.quad(lambdax:orthoHermite(3),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"params,_","scipy.optimize.curve_fit(p,x_data,y_data,p0=np.ones((4,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"params,_","scipy.optimize.curve_fit(p,x_data,y_data,p0=np.ones(10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"params,_","scipy.optimize.curve_fit(p,x_data,y_data,p0=np.ones(n)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"params,_","scipy.optimize.curve_fit(p,x,y,p0=np.ones(12)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"(knots,coef,degree)","scipy.interpolate.splrep(x,y,k=3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fun,"scipy.interpolate.interp1d(x,y,kind=kind)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fun,"scipy.interpolate.interp1d(x,y,kind=kind)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
app_train,pandas.read_csv(f_app),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-10,10,500)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-10,10,500)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y,numpy.sinc(n*x),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y,numpy.sinc(float(n),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(""Pokemon.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
index,numpy.arange(groups),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"m,b","numpy.polyfit(x,y,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"m,b","numpy.polyfit(x,y,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"m,b","numpy.polyfit(x,y,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gen_1,"matplotlib.pyplot.bar(index,gen1_means,bar_width,
alpha=opacity,
color='R',
label='Generation1')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gen_2,"matplotlib.pyplot.bar(index+bar_width,gen2_means,bar_width,
alpha=opacity,
color='orange',
label='Generation2')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gen_3,matplotlib.pyplot.bar(index+(bar_width*2),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gen_4,matplotlib.pyplot.bar(index+(bar_width*3),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gen_5,matplotlib.pyplot.bar(index+(bar_width*4),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gen_6,matplotlib.pyplot.bar(index+(bar_width*5),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
result1,"re.search('Mega',row['Name'])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
result2,"re.search('Primal',row['Name'])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,axes1","matplotlib.pyplot.subplots(5,5,figsize=(7,7)",CLUSTER_2,CLUSTER_6,CLUSTER_9,CLUSTER_0,CLUSTER_1
d,"numpy.arange(10,20,2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
e,numpy.arange(12),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,numpy.arange(4),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
A,"numpy.arange(2,14)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
A,"numpy.arange(3,15)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
A,"numpy.arange(3,15)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
A,numpy.arange(12),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,numpy.arange(4),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
array,"numpy.array([[1,2,3],[2,3,4]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,"numpy.array([2,23,4],dtype=np.float)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,"numpy.array([10,20,30,40])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
A,"numpy.array([1,1,1])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
B,"numpy.array([2,2,2])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
A,"numpy.array([1,1,1])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
B,"numpy.array([2,2,2])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,"numpy.zeros((3,4)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
E1,"numpy.concatenate((A,B,B,A)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
E2,"numpy.concatenate((A,B,B,A)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
d,"numpy.dot(a,b)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c,"numpy.ones((3,4)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
f,"numpy.linspace(1,10,20)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
D,"numpy.hstack((A,B)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
D,"numpy.hstack((A,B)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
C,"numpy.vstack((A,B)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
C,"numpy.vstack((A,B)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
D,"numpy.array_split(A,3,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
B,"numpy.split(A,2,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
C,"numpy.split(A,3,axis=0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
F,"numpy.hsplit(A,2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
E,"numpy.vsplit(A,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c1,"numpy.array([[1,2],[2,4]])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
mu,"numpy.array([0,0])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
w,"numpy.reshape(w,(1,28,28,512)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
reconstructed,numpy.squeeze(reconstructed),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
reconstructed,numpy.squeeze(reconstructed),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
reconstructed,numpy.squeeze(reconstructed),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
v,"numpy.transpose(content,(3,0,1,2)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
style_r,"numpy.transpose(style,(3,0,1,2)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
cs_r,numpy.transpose(cs),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
c2,numpy.eye(2),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
"fix,ax","matplotlib.pyplot.subplots(figsize=(15,15)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
"fix,ax","matplotlib.pyplot.subplots(figsize=(15,15)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
pv,"pandas.pivot_table(data=flight,columns='year',index='month',values='passengers')",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tips,seaborn.load_dataset('tips'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
flight,seaborn.load_dataset('flights'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nonzeroy,numpy.array(nonzero[0]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
nonzerox,numpy.array(nonzero[1]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
heat,"numpy.zeros_like(draw_image[:,:,0])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
heat,"numpy.zeros_like(draw_image[:,:,0])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
heat_clip,"numpy.clip(heat,0,255)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
heat_clip,"numpy.clip(heat,0,255)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
draw_image,numpy.copy(image),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
draw_image,numpy.copy(image),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
hw_new,numpy.copy(hot_windows),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
hw_old,numpy.copy(hot_windows_list[i]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"xx,yy",numpy.meshgrid(np.arange(result.shape[3]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
df_raw,pandas.DataFrame(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
index,"pandas.Index(sm.tsa.datetools.dates_from_range('1976Q1','2013Q4')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_stata(""callreports_final.dta"",chunksize=100000,preserve_dtypes=True)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
alpha_seq,"numpy.arange(0,1.5,0.1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
n_min_seq,"numpy.arange(1,13,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
n_min_seq,"numpy.arange(5,51,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
T,numpy.arange(x.shape[1]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Y,"numpy.array(np.abs(np.dot(X,beta)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
z,"numpy.array(z,dtype=np.int64)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
count,"numpy.zeros([m,m])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
z,"numpy.zeros((B,50)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
z,"numpy.zeros((B,600)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y_bar,numpy.mean(y),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
count,numpy.bincount(y),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
feature_importance,"pandas.DataFrame(x,y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
TSMC_NEWS,"pandas.read_csv(""/Users/liaoshousan/Desktop/大四上/R語言與資料科學導論/project-sam19980822/src/data/做好所有預處理的新聞/TSMC_NEWS.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
TSMC_PRICE,"pandas.read_csv(""/Users/liaoshousan/Desktop/大四上/R語言與資料科學導論/project-sam19980822/src/data/做好所有預處理的股價/TSMC_Stock.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(C2,annot=True,cmap='Blues')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
C2,"sklearn.metrics.confusion_matrix(y_true,y_pred,labels=[-1,0,1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""bird_mammal_dino_reptile.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
idx,numpy.where(y==i),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(body_mass_min-0.05,body_mass_max+0.05,50)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=plt.cm.RdYlBu)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
edges,collections.defaultdict(list),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dot_data,"sklearn.tree.export_graphviz(clf,class_names=data_class_names,filled=True,feature_names=data_feature_names,
rounded=True,out_file=None,max_depth=5.5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df,"pandas.concat((test_text_df,test_label_df)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
train_df,pandas.read_csv('../data/nlp/toxic-comments/train.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
test_text_df,pandas.read_csv('../data/nlp/toxic-comments/test.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
test_label_df,pandas.read_csv('../data/nlp/toxic-comments/test_labels.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
keep_mask,numpy.logical_not(ignored_mask.values),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pivot_qs,"numpy.array((1,)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
merged_array,numpy.zeros(left_sub_array.shape[0]+right_sub_array.shape[0]),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
rt0,"numpy.zeros((5,21)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
rt0_5,"numpy.zeros((5,21)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
rt1,"numpy.zeros((5,21)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
intervals_array,"numpy.empty((0,1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
unsorted_hs,"numpy.concatenate((max_heapify(temp_array,0)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dict1[j],"numpy.sort(np.random.randint(0,high=i,size=i)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dict0[j],"numpy.flip(np.sort(np.random.randint(0,high=i,size=i)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
intervals_array,"numpy.append(intervals_array,int(i)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
"L_sub_array,R_sub_array","numpy.array_split(ary=unsorted_ms,indices_or_sections=2)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
submission,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_train,"pandas.read_csv(""../transdata/train_impute_v2.csv"",header=0,index_col=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_test,"pandas.read_csv(""../transdata/test_impute_v2.csv"",header=0,index_col=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
oof_train,"numpy.zeros((ntrain,)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
oof_test,"numpy.zeros((ntest,)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
oof_test_skf,"numpy.empty((NFOLDS,ntest)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_train,"numpy.concatenate((xg_oof_train,et_oof_train,rf_oof_train,cb_oof_train)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_test,"numpy.concatenate((xg_oof_test,et_oof_test,rf_oof_test,cb_oof_test)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
logistic_regression,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=NFOLDS,shuffle=True,random_state=SEED)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sel,"sklearn.feature_selection.SelectKBest(mutual_info_classif,k=64)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
f,numpy.fft.fft2(norm_image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fshift,numpy.fft.fftshift(f),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,(ax1,ax2,ax3,ax4)","matplotlib.pyplot.subplots(1,4,figsize=(20,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
prediction_dates,"pandas.date_range(last_date,periods=num_prediction+1)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
dataframe,pandas.read_csv('covid_19_india-6.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
dataframe['Date'],"pandas.to_datetime(dataframe['Date'],format='%d/%m/%y')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
dataset,numpy.array(data),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
prediction_list,"numpy.append(prediction_list,out)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
count,numpy.array([1foriinrange(N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
count,numpy.array([1foriinrange(N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
a,"numpy.matrix(np.random.rand(2,4)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
b,"numpy.matrix(np.random.rand(4,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
testfiles,os.listdir(TEST_PATH),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
out,"numpy.array(['id','flower_class'])",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
tof,numpy.argmax(pred),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
out,"numpy.vstack((out,[filename,tof])",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x,"numpy.expand_dims(x,axis=0)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
"Xtrain,Xtest,ytrain,ytest","sklearn.model_selection.train_test_split(data.data,y,train_size=.8,stratify=y)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
image1,"numpy.array(image1,dtype=np.float64)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
image1,"numpy.array(image1,dtype=np.uint8)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
X_train,numpy.array(images),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
y_train,numpy.array(angles),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
X_train,numpy.array(images),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
y_train,numpy.array(angles),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
Trans_M,"numpy.float32([[1,0,tr_x],[0,1,tr_y]])",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
"train_samples,validation_samples","sklearn.model_selection.train_test_split(samples,test_size=0.2)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
train_y,"numpy.concatenate((x_vars_new.iloc[:,0].values.reshape((train_y.shape[0],1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_X,numpy.load('train_X.npy'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_y,numpy.load('train_y.npy'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_X,numpy.load('test_X.npy'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
target_ncodpers,pandas.DataFrame(target.ncodpers),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_X,"pandas.DataFrame(train_X,index=x_vars.index,columns=x_vars.columns)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_y,"pandas.DataFrame(train_y,index=target.index,columns=target.columns)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_X,"pandas.DataFrame(test_X,index=x_vars_test.index,columns=x_vars_test.columns)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_hdf('../input/train_ver3.hdf','train_ver3')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_hdf('../input/test_ver3.hdf','test_ver3')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
save_size,math.floor(np.sqrt(images.shape[0]),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
image,numpy.array(image),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
files,numpy.array(files),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
images_in_square,"numpy.reshape(images[:save_size*save_size],
(save_size,save_size,images.shape[1],
images.shape[2],images.shape[3])",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
images_in_square,"numpy.squeeze(images_in_square,4)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
files,"numpy.expand_dims(files,0)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
start_time,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
df,pandas.DataFrame(response.json(),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
big_data,"pandas.concat([tra_x,tst_data])",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
big_data2,"pandas.concat([tra_x,tst_data],copy=False)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
big_data,"pandas.read_hdf('raw_data/big.hdf',key='train')",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
tra_data,"pandas.read_table('raw_data/train.txt',header=None)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
tst_data,"pandas.read_table('raw_data/test.txt',header=None)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
tra_data,"pandas.read_table('raw_data/train.txt',header=None)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
l,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
s,sklearn.preprocessing.StandardScaler(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.concat([popWhite,popBlack],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,popHispanic],axis=1,)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2,"pandas.concat([eduWhite,eduBlack],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2,"pandas.concat([df2,eduHispanic],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_07,"pandas.concat([df_07,poprace_07],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_07,"pandas.concat([df_07,edurace_07],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_08,"pandas.concat([df_08,poprace_08],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_08,"pandas.concat([df_08,edurace_08],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_09,"pandas.concat([df_09,poprace_09],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_09,"pandas.concat([df_09,edurace_09],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_10,"pandas.concat([df_10,poprace_10],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_10,"pandas.concat([df_10,edurace_10],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
income_rent,"pandas.read_csv(""income_and_rent.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
transportation,"pandas.read_csv(""transportation.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
popAsian,"pandas.read_csv(""populationAsian.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
popBlack,"pandas.read_csv(""populationBlack.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
popWhite,"pandas.read_csv(""populationWhite.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
popHispanic,"pandas.read_csv(""populationHispanic.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
eduAsian,"pandas.read_csv(""educationAsian.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
eduBlack,"pandas.read_csv(""educationBlack.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
eduWhite,"pandas.read_csv(""educationWhite.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
eduHispanic,"pandas.read_csv(""educationHispanic.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=[9,7])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=[9,7])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=[9,7])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=[9,7])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=[9,7])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clusters_3,sklearn.cluster.KMeans(n_clusters=3),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clusters_4,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clusters_3,sklearn.cluster.KMeans(n_clusters=3),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clusters_3,sklearn.cluster.KMeans(n_clusters=3),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clusters_4,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clusters_3,sklearn.cluster.KMeans(n_clusters=3),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clusters_4,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clusters_3,sklearn.cluster.KMeans(n_clusters=3),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clusters_4,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaled_data,"sklearn.preprocessing.scale(df_07.ix[:,1:])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaled_data08,"sklearn.preprocessing.scale(df_08.ix[:,1:])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaled_data09,"sklearn.preprocessing.scale(df_09.ix[:,1:])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaled_data10,"sklearn.preprocessing.scale(df_10.ix[:,1:])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
topic_words,numpy.array(vocab),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
vector_temp,"numpy.zeros((20,)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
vector_temp,"numpy.zeros((1,20)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.page_vector,"numpy.zeros((20,)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
sum,"numpy.zeros((20,)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.page_vector,"numpy.zeros((20,)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,2)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,2)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=0)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
mr_lim,json.load(f),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
boxoffice,json.load(f),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
correct_out,"numpy.array([[1.49834967,1.70660132,1.91485297],
[3.25553199,3.5141327,3.77273342]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
correct_out,"numpy.array([[0.,0.,0.,0.,],
[0.,0.,0.04545455,0.13636364,],
[0.22727273,0.31818182,0.40909091,0.5,]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
correct_scores,"numpy.asarray(
[[11.53165108,12.2917344,13.05181771,13.81190102,14.57198434,15.33206765,16.09215096],
[12.05769098,12.74614105,13.43459113,14.1230412,14.81149128,15.49994135,16.18839143],
[12.58373087,13.20054771,13.81736455,14.43418138,15.05099822,15.66781506,16.2846319]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y,"numpy.asarray([0,5,1])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[0.1406,0.20738947,0.27417895,0.34096842,0.40775789],
[0.47454737,0.54133684,0.60812632,0.67491579,0.74170526],
[0.80849474,0.87528421,0.94207368,1.00886316,1.07565263],
[1.14244211,1.20923158,1.27602105,1.34281053,1.4096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_velocity,"numpy.asarray([
[0.5406,0.55475789,0.56891579,0.58307368,0.59723158],
[0.61138947,0.62554737,0.63970526,0.65386316,0.66802105],
[0.68217895,0.69633684,0.71049474,0.72465263,0.73881053],
[0.75296842,0.76712632,0.78128421,0.79544211,0.8096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.39223849,-0.34037513,-0.28849239,-0.23659121,-0.18467247],
[-0.132737,-0.08078555,-0.02881884,0.02316247,0.07515774],
[0.12716641,0.17918792,0.23122175,0.28326742,0.33532447],
[0.38739248,0.43947102,0.49155973,0.54365823,0.59576619]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_cache,"numpy.asarray([
[0.5976,0.6126277,0.6277108,0.64284931,0.65804321],
[0.67329252,0.68859723,0.70395734,0.71937285,0.73484377],
[0.75037008,0.7659518,0.78158892,0.79728144,0.81302936],
[0.82883269,0.84469141,0.86060554,0.87657507,0.8926]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.40094747,-0.34836187,-0.29577703,-0.24319299,-0.19060977],
[-0.1380274,-0.08544591,-0.03286534,0.01971428,0.0722929],
[0.1248705,0.17744702,0.23002243,0.28259667,0.33516969],
[0.38774145,0.44031188,0.49288093,0.54544852,0.59801459]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_v,"numpy.asarray([
[0.69966,0.68908382,0.67851319,0.66794809,0.65738853,],
[0.64683452,0.63628604,0.6257431,0.61520571,0.60467385,],
[0.59414753,0.58362676,0.57311152,0.56260183,0.55209767,],
[0.54159906,0.53110598,0.52061845,0.51013645,0.49966,]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_m,"numpy.asarray([
[0.48,0.49947368,0.51894737,0.53842105,0.55789474],
[0.57736842,0.59684211,0.61631579,0.63578947,0.65526316],
[0.67473684,0.69421053,0.71368421,0.73315789,0.75263158],
[0.77210526,0.79157895,0.81105263,0.83052632,0.85]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_test_pred,numpy.argmax(best_model.loss(data['X_test']),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_val_pred,numpy.argmax(best_model.loss(data['X_val']),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-0.1,0.5,num=input_size)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.2,0.3,num=weight_size)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
b,"numpy.linspace(-0.3,0.1,num=output_dim)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-0.5,0.5,num=12)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['W1'],"numpy.linspace(-0.7,0.3,num=D*H)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['b1'],"numpy.linspace(-0.1,0.9,num=H)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['W2'],"numpy.linspace(-0.3,0.4,num=H*C)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['b2'],"numpy.linspace(-0.9,0.1,num=C)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X,"numpy.linspace(-5.5,4.5,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
cache,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
m,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.7,0.5,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,numpy.zeros(features.shape[1]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
w1,numpy.zeros(features.shape[1]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
w1,numpy.zeros(features.shape[1]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
w,numpy.zeros(X.shape[1]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.dot(X[i],w)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
u,"numpy.dot(X[i],w1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.dot(X[i],w)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc,numpy.sum((predictions==labels),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc,numpy.sum((predictions==labels),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,10,10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,10,10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('datasets/breast-cancer-wisconsin.csv',header=None)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,sklearn.model_selection.KFold(n_splits=10),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,sklearn.model_selection.KFold(n_splits=10),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
spl,re.findall(r'^(.*),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
pattern,re.compile(r'^[^aeiouAEIOU]+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
pattern_all,re.compile(r'[a-zA-Z]+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
pattern_all,re.compile(r'[a-zA-Z]+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
pattern_A,re.compile(r'^[A-Z]+|^qu'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
bs_replicates,numpy.empty(size),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
mean_both,numpy.mean(data.call),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
diff_std,numpy.sqrt((w_std**2),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
conf_interval,"numpy.percentile(bs_replicates,[2.5,97.5])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(list(zip(linkCompanyName,linkCompanyUrl,linkTexts,linkUrls)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
new_df,pandas.DataFrame(new_rows),CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
x,"pandas.DataFrame([low.shape[0],high.shape[0],bio.shape[0],norm.shape[0]])",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
final,pandas.DataFrame(toomuch),CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
df,"pandas.DataFrame(list(zip(linkTexts,linkUrls)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
df_food_comparison,pandas.concat(frames),CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
df_brands,"pandas.concat([df_kraft,df_wrigley,df_coca,df_pepsi,df_kelloggs,df_mars,df_unilever,df_johnson,df_procter,df_nestle])",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
df_food_clean_ch,"pandas.merge(df_food_clean_ch,df_brands,left_on='meta_brand',right_on='brand_name',how='left')",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
mod_pivot,"pandas.pivot_table(top_5_creators,index=top_5_creators['mod_datetime'],columns='creator',aggfunc=len,fill_value=0)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
df_food,"pandas.read_csv(data_path+'en.openfoodfacts.org.products.csv',sep=""\t"",low_memory=False)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
df_food_kili_web_comp,"pandas.read_csv(data_path+'en.openfoodfacts.org.products.kiliweb.299820.csv',sep=""\t"",low_memory=False)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
df_food_usda_ndb_import_comp,"pandas.read_csv(data_path+'en.openfoodfacts.org.products.usda-ndb-import.169861.csv',sep=""\t"",low_memory=False)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
df_food_openfood_ch_comp,"pandas.read_csv(data_path+'en.openfoodfacts.org.products.openfood-ch-import.11459.csv',sep=""\t"",low_memory=False)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
df_food_others_comp,"pandas.read_csv(data_path+'en.openfoodfacts.org.products.others.200428.csv',sep=""\t"",low_memory=False)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
df_countries,"pandas.read_csv(data_path+'countries_list.csv',sep="";"",low_memory=False,skiprows=0)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
df_food_clean_ch,"pandas.read_csv(data_path+'en.openfoodfacts.org.products.clean_ch.csv',sep=""\t"",low_memory=False,skiprows=0)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
categories,pandas.read_csv('./brands.csv'),CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
observation,"numpy.array([(channels[2],channels[1],channels[0])",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
transform,matplotlib.pyplot.gca(),CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,1,figsize=(15,15)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,1,figsize=(15,15)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(nrows=top.shape[0],ncols=1,figsize=(15,4.5*top.shape[0])",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,45)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
g,"seaborn.PairGrid(nutrition,size=4)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
g,"seaborn.PairGrid(reduced,size=4)",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
g,"seaborn.barplot(df_plot,df_plot.index,orient='h',palette=""Blues_d"")",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
g,"seaborn.barplot(dd,dd.index,orient='h',palette=""Blues_d"")",CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
current_palette,seaborn.color_palette(n_colors=10),CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
current_palette,seaborn.color_palette(n_colors=top.shape[0]),CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
geo_json_data,json.load(open(data_path+'country.json'),CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
r,requests.get(company_url),CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
r,requests.get('https://en.wikipedia.org/wiki/List_of_food_companies'),CLUSTER_24,CLUSTER_9,CLUSTER_3,CLUSTER_32,CLUSTER_0
i_merged.id_01,numpy.log(-i_merged.id_01+1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
i_merged.id_02,numpy.log(i_merged.id_02),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(rs.rand(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
save,pandas.read_csv('identity_merged.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
i_merged,pandas.read_csv('identity_merged.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
transaction_c,pandas.read_csv('train_combined.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
id_c,pandas.read_csv('identity_first.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
region,pandas.read_csv('region.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree_clf,sklearn.tree.DecisionTreeClassifier(max_depth=10),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gs,"sklearn.model_selection.GridSearchCV(estimator=rf,param_grid=param_grid,
cv=5,n_jobs=-1,verbose=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""academy_awards.csv"",encoding=""ISO-8859-1"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
y_posts,numpy.concatenate((np.zeros(len(filtered_male_posts),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
df1,pandas.DataFrame(x.todense(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
df2,pandas.DataFrame(x.todense(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
df3,pandas.DataFrame(x.todense(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
X_train2_df,"pandas.DataFrame(X_train2,columns=list(range(1815)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
tempdf,"pandas.concat([df1,df2],axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
final_df,"pandas.concat([tempdf,df3],axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
dataframe,pandas.DataFrame(columns=(['content_or_not']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
dataframe,pandas.DataFrame(columns=(['content_or_not']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
dataframe,pandas.DataFrame(columns=(['content_or_not']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
c,requests.get(str(obj),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
A,"numpy.empty((1,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
A,"numpy.empty((1,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
A,"numpy.empty((1,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
indices,numpy.argsort(vectorizer.idf_),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
index_array,numpy.argsort(logreg.coef_),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
Y,numpy.ravel(Y),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
Y,numpy.ravel(Y),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
Y,numpy.ravel(Y),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
Y,numpy.ravel(Y),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
tmp_,"numpy.copy(logreg.coef_[:,:].flatten()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
tmp_,"numpy.copy(logreg.coef_[:,:].flatten()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
g,"numpy.maximum(f,0)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-xmax,xmax,N)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
counter,collections.Counter(data_loader.dataset.caption_lengths),CLUSTER_6,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
