varible_name,method,"AffinityPropagation(damping=0.999, random_state=0)","AgglomerativeClustering(metric='euclidean', n_clusters=13)","KMeans(n_clusters=13, n_init='auto', random_state=0)",MeanShift(bandwidth=2.3),"SpectralClustering(assign_labels='discretize', n_clusters=13, random_state=0)"
rightDegMin,"numpy.array([-90,-90,-150,0,-90,-90,-90])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
rightDegMax,"numpy.array([90,70,150,120,90,90,90])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
efP,"numpy.asarray([efP.x,efP.y,efP.z])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
efE,numpy.asarray(efE),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
jointAngles,numpy.zeros(len(cAngles),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
J_plus,"numpy.zeros((num_parameters,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
J_minus,"numpy.zeros((num_parameters,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
gradapprox,"numpy.zeros((num_parameters,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Z1,"numpy.dot(W1,X)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Z2,"numpy.dot(W2,A1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Z3,"numpy.dot(W3,A2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
logprobs,numpy.multiply(-np.log(A3),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
submission,"pandas.DataFrame({'Id':Id,
'SalePrice':predictions})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
housing,pandas.read_csv(path+'train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
housing_test,pandas.read_csv(path+'test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sample_submission,pandas.read_csv(path+'sample_submission.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_rmsle,"numpy.sqrt(mean_squared_log_error(y_train_poly,y_pred_train)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
valid_rmsle,"numpy.sqrt(mean_squared_log_error(y_valid_poly,y_pred_valid)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X,y,
random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_poly,X_valid_poly,y_train_poly,y_valid_poly","sklearn.model_selection.train_test_split(X_poly,y,
random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
polyreg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
polyreg_lasso,sklearn.linear_model.Lasso(alpha=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.Lasso(alpha=alpha),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
polyreg_ridge,sklearn.linear_model.Ridge(alpha=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.Ridge(alpha=alpha),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
polyreg_elasticnet,sklearn.linear_model.ElasticNet(alpha=200),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.ElasticNet(alpha=alpha),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.ElasticNet(alpha=2000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
new_data,"pandas.DataFrame(index=range(0,len(ibkr_data)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
cfg_data,"pandas.read_sql_query('select*fromcfg_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
ms_data,"pandas.read_sql_query('select*fromms_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
cme_data,"pandas.read_sql_query('select*fromcme_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
jpm_data,"pandas.read_sql_query('select*fromjpm_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
gs_data,"pandas.read_sql_query('select*fromgs_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
pypl_data,"pandas.read_sql_query('select*frompypl_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
td_data,"pandas.read_sql_query('select*fromtd_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
brk_data,"pandas.read_sql_query('select*frombrk_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
usb_data,"pandas.read_sql_query('select*fromusb_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
ibkr_data,"pandas.read_sql_query('select*fromibkr_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
axp_data,"pandas.read_sql_query('select*fromaxp_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
tech_data,"pandas.read_sql_query('select*fromtech_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
spx_data,"pandas.read_sql_query('select*fromspx_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
dow_data,"pandas.read_sql_query('select*fromdow_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
nasdaq_data,"pandas.read_sql_query('select*fromnasdaq_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
vix_data,"pandas.read_sql_query('select*fromvix_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
ibkr_data['Date'],"pandas.to_datetime(ibkr_data.Date,format='%Y-%m-%d')",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
"x_train,y_train",numpy.array(x_train),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
X_test,numpy.array(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
all_mid_data,"numpy.concatenate([train_data,test_data],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
x_train,"numpy.reshape(x_train,(x_train.shape[0],x_train.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
X_test,"numpy.reshape(X_test,(X_test.shape[0],X_test.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
rms,numpy.sqrt(np.mean(np.power((valid-closing_price),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
currentdir,os.getcwd(),CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
form_raw,"pandas.read_excel(in_path+'FormAdmission.xls',
usecols=[2,3,11],
converters={'form_number':str})",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
student_raw,"pandas.read_excel(in_path+'Student.xls',
usecols=[0,7,15,18])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
major_raw,"pandas.read_excel(in_path+'Major.xls',
usecols=[0,1,7],
converters={'major_code':str})",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
gender_raw,"pandas.read_excel(in_path+'Gender.xls',
usecols=[1,3,4])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
school_raw,"pandas.read_excel(in_path+'SchoolMaster.xls',
usecols=[0,4,10,13])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
curriculum_raw,"pandas.read_excel(in_path+'Curriculum.xls',
usecols=[0,3])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
x,"numpy.linspace(-1,5,num=30)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.plot(x,f(x)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
counties_scaled,pandas.DataFrame(scaler.fit_transform(clean_counties_df.astype(float),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,pandas.DataFrame(pca_model_params['s'].asnumpy(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
v,pandas.DataFrame(pca_model_params['v'].asnumpy(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
comps,"pandas.DataFrame(list(zip(v_1,features_list)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
counties_transformed,pandas.DataFrame(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cluster_df,pandas.DataFrame(cluster_labels),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cluster_centroids,pandas.DataFrame(kmeans_model_params[0].asnumpy(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
counties_df,"pandas.read_csv(data_stream,header=0,delimiter="","")",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
v_1,numpy.squeeze(v_1_row.values),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
exp_variance,"numpy.square(s.iloc[start_idx:,:])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.hist(clean_counties_df[column_name],bins=n_bins)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.hist(clean_counties_df[column_name],bins=n_bins)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.hist(cluster_labels,bins=8,range=(-0.5,7.5)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplots(figsize=(6,3)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplots(figsize=(6,3)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplots(figsize=(6,3)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(data=sorted_weight_data,
x=""weights"",
y=""features"",
palette=""Blues_d"")",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(cluster_centroids.T,cmap='YlGnBu')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
text,"re.sub('<[^>]*>','',text)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
text,"re.sub('[\W]+','',text.lower()",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
emoticons,re.findall('(?::|;|=),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
x,"numpy.arange(-5.0,5.0,0.1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-5.0,5.0,0.1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-5.0,5.0,0.1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([-1,1,2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([-1.0,1.0,2.0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
X,"numpy.array([1,2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
W,"numpy.array([[1,3,5],[2,4,6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
X,"numpy.array([1.0,0.5])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
W1,"numpy.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
B1,"numpy.array([0.1,0.2,0.3])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
W2,"numpy.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
B2,"numpy.array([0.1,0.2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
W3,"numpy.array([[0.1,0.3],[0.2,0.4]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
B3,"numpy.array([0.1,0.2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['W1'],"numpy.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['b1'],"numpy.array([0.1,0.2,0.3])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['W2'],"numpy.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['b2'],"numpy.array([0.1,0.2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['W3'],"numpy.array([[0.1,0.3],[0.2,0.4]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['b3'],"numpy.array([0.1,0.2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([1.0,0.5])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([0.3,2.9,4.0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([1010,1000,990])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([1010,1000,990])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([0.3,2.9,4.0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([1,2,3,4,5])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([[0.1,0.8,0.1],[0.3,0.1,0.6],[0.2,0.5,0.3],[0.8,0.1,0.1]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,"numpy.array([1,2,1,0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
t,"numpy.array([1,2,0,0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
Y,"numpy.dot(X,W)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
A1,"numpy.dot(X,W1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
A2,"numpy.dot(Z1,W2)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
A3,"numpy.dot(Z2,W3)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a1,"numpy.dot(x,W1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a2,"numpy.dot(z1,W2)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a3,"numpy.dot(z2,W3)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a1,"numpy.dot(x,W1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a2,"numpy.dot(z1,W2)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a3,"numpy.dot(z2,W3)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
p,numpy.argmax(y),CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
p,"numpy.argmax(y_batch,axis=1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,"numpy.argmax(x,axis=1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
accuracy_cnt+,numpy.sum(p==t[i:i+batch_size]),CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,numpy.exp(a),CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,numpy.exp(a-c),CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-5.0,5.0,100)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
pts,"numpy.array([[10,50],[400,50],[90,200],[50,500]],np.int32)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image_bw,"numpy.zeros((512,512)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_train,numpy.array(images_data),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
im,"numpy.expand_dims(im,axis=0)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
rnd_idx,"random.sample(rnd_idx,len(rnd_idx)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
t1,time.time(),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
t2,time.time(),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
qHash,sklearn.preprocessing.normalize(qHash),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
queryHash,sklearn.preprocessing.normalize(queryHash),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
error_df_test,"pandas.DataFrame({'Reconstruction_error':mse,
'True_class':test['cc_onset']})",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pred_y_test,pandas.DataFrame(pred_y_test),CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
actual_pred,"pandas.merge(test2,error_df_test,how='left',on=['index'])",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('/Users/yaredhurisa/GoogleDrive/Probabilityofconflict/indicators/eth_cc_final_dataset_1_month_lag.csv'),CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mse,"numpy.mean(np.power(df_test_x_rescaled-test_x_predictions,2)",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
conf_matrix,"sklearn.metrics.confusion_matrix(error_df_test.True_class,pred_y_test)",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
roc_auc,"sklearn.metrics.auc(false_pos_rate,true_pos_rate,)",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"false_pos_rate,true_pos_rate,thresholds","sklearn.metrics.roc_curve(error_df_test.True_class,error_df_test.Reconstruction_error)",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xs,"numpy.arange(0,1,step=0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
final_one_hot_df,"pandas.get_dummies(final_df,columns=['product_category_name_english','order_purchase_year_month','customer_state'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
orders_df,pandas.read_csv('data/olist_orders_dataset.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
order_items_df,pandas.read_csv('data/olist_order_items_dataset.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
products_df,pandas.read_csv('data/olist_products_dataset.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
product_cat_name_df,pandas.read_csv('data/product_category_name_translation.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
customers_df,pandas.read_csv('data/olist_customers_dataset.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
orders_df['order_purchase_timestamp'],"pandas.to_datetime(orders_df['order_purchase_timestamp'],format=""%Y-%m-%d%H:%M:%S"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x_train,"pandas.DataFrame(x_train_np,index=indexs_train,columns=x_train.columns)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
x_test,"pandas.DataFrame(x_test_np,index=indexs_test,columns=x_test.columns)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_pred,"pandas.DataFrame(y_pred,columns=y_test.columns.values)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_pred,"pandas.DataFrame(y_pred,columns=y_test.columns.values)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_pred,"pandas.DataFrame(y_pred,columns=y_test.columns.values)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
score_df,"pandas.DataFrame({'knn':score_knn,
'tree':score_tree,
'rf':score_rf,
'unweightedlogistic':score_unweighted_log,
'weightedlogistic':score_weighted_log,
'lda':score_lda,
'qda':score_qda,
'weightedsvm':score_svm},index=['f1_score'])",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
x_test,"pandas.read_csv('x_test.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
x_train,"pandas.read_csv('x_train.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_test,"pandas.read_csv('y_test.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_train,"pandas.read_csv('y_train.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
score+,"sklearn.metrics.f1_score(genre_real[genre_real.columns.values[i]],genre_predict[genre_predict.columns.values[i]])",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
score,"sklearn.metrics.f1_score(y_predict,y_true)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
unweighted_logistic,sklearn.linear_model.LogisticRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
weighted_logistic,sklearn.linear_model.LogisticRegression(class_weight='balanced'),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
weighted_logistic,"sklearn.linear_model.LogisticRegression(class_weight='balanced',C=10**i)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
weighted_logistic,"sklearn.linear_model.LogisticRegression(class_weight='balanced',C=C_best)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
svm,"sklearn.svm.SVC(C=5,class_weight='balanced')",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
train,pandas.read_csv('/Users/datascientistenthusiat/Desktop/DATASCIENCEPROJECT/SalingPricePredictions/train.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('/Users/datascientistenthusiat/Desktop/DATASCIENCEPROJECT/SalingPricePredictions/test.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,numpy.zeros(num_agents),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
scores,numpy.zeros(num_agents),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
actions,"numpy.clip(actions,-1,1)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
start,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
end,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
experiences,"random.sample(self.memory,k=self.batch_size)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.seed,random.seed(random_seed),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.seed,random.seed(seed),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.seed,random.seed(seed),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.experience,"collections.namedtuple(""Experience"",field_names=[""state"",""action"",""reward"",""next_state"",""done""])",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.memory,collections.deque(maxlen=buffer_size),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
scores_deque,collections.deque(maxlen=print_every),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
df,"pandas.read_csv(""new_data.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf1,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",random_state=95825)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=C,random_state=95825)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf2,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=best_C,random_state=95825)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf3,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf4,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=grid.best_params_)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
param_values,"numpy.arange(5,90,5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cross_val_score,numpy.mean(nums),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cross_val_score,numpy.mean(nums),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cross_val_score,numpy.mean(nums),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cross_val_score,numpy.mean(nums),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
param_values,"numpy.logspace(-4,2,10)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
param_values,"numpy.linspace(0.04,1,num=20)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_validate(clf,X_train,y_train,cv=num_folds,return_train_score=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_validate(clf,X_train,y_train,cv=num_folds,return_train_score=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_validate(clf,X_train,y_train,cv=num_folds,return_train_score=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_validate(knn_model,X_train,y_train,cv=num_folds,return_train_score=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.BaggingClassifier(base_estimator=clf3,n_estimators=num_trees,max_features=m,random_state=95828)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model_new,"sklearn.ensemble.BaggingClassifier(base_estimator=clf4,n_estimators=num_trees,max_features=m,random_state=95828)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(model,param_grid,cv=5,scoring='accuracy')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
LogReg,"sklearn.linear_model.LogisticRegression(penalty='l1',C=1e10)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(penalty='l1',C=C)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
LogReg_regularized,"sklearn.linear_model.LogisticRegression(penalty='l1',C=best_C,)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
k_fold,sklearn.model_selection.KFold(num_folds),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
k_fold,sklearn.model_selection.KFold(num_folds),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
k_fold,sklearn.model_selection.KFold(num_folds),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.LinearSVC(C=C),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_SVM,sklearn.svm.LinearSVC(C=C),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
knn_model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=C),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_KNN,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_1,"numpy.arange(-np.pi,np.pi,1E-2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_1d,"numpy.array([1,2,3,4])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_2d,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_3d,"numpy.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
my_array_2d,"numpy.array([[],[]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
my_array_3d,"numpy.array([[[],[]]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_3d,"numpy.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12.0]]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_2d,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_3d,"numpy.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_2d,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.reshape(range(1,13)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.reshape(range(1,13)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
B,"numpy.reshape(range(1,13)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
C,"numpy.reshape(range(1,17)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-np.pi,np.pi,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,1,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(0,1,3)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xgrid,numpy.linspace(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"x,y","numpy.meshgrid(x,y,indexing='xy')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
p,numpy.poly1d(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,numpy.polyfit(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sample,math.log(random.math.lognormal(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(1,figsize=(10,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(2,figsize=(10,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
html_doc,requests.get(url),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
html_doc,requests.get(url_main_list[i]),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
html_doc,"requests.get(url_list[i],headers=header)",CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
doc,requests.get(url),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
tmp,requests.get(reply_url_list[i]),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
tmp1,"re.sub('[a-zA-Z/]','',cate[i].get('href')",CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
cate,pandas.DataFrame(),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
content_table,pandas.DataFrame(tmp_dict),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
comment_table,pandas.DataFrame(tmp_dict),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
reply_table,pandas.DataFrame(tmp_dict),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
start,datetime.datetime.now(),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
end,datetime.datetime.now(),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
tmp,json.loads(doc),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
tmp,json.loads(tmp),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
username,"os.getenv('AZUREML_DSVM_USERNAME',default='<my_username>')",CLUSTER_29,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_1
address,"os.getenv('AZUREML_DSVM_ADDRESS',default='<ip_address_or_fqdn>')",CLUSTER_29,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_1
training_data,sklearn.datasets.load_diabetes(),CLUSTER_29,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_1
res_df,"pandas.DataFrame({'Features':feat,'Importance':feat_imp})",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(DIR+'/OnlineNewsPopularity.csv'),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(50,50)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_scaled,y,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,sklearn.preprocessing.StandardScaler(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_train_histogram,numpy.array(x_train_histogram),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
x_test_histogram,numpy.array(x_test_histogram),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
x_train_hog,numpy.array([hog(x),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
x_test_hog,numpy.array([hog(x),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
bins,numpy.int32(bin_n*ang/(2*np.pi),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
hist,numpy.hstack(hists),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
current_seq,"numpy.roll(current_seq,-1,1)",CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_seq,"numpy.full((1,sequence_length)",CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
word_counts,collections.Counter(text),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
gd_df,"pandas.DataFrame(columns=['m_current','c_current','cost'])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
gdm_df,"pandas.DataFrame(columns=['Bets','cost'])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
housing,"pandas.concat([housing,status],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
status,"pandas.get_dummies(housing['furnishingstatus'],drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
housing,pandas.read_csv('Housing.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,numpy.array(X),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,numpy.array(y),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,numpy.array(X),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,numpy.array(y),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,"numpy.array([[-1,-1],[-2,-1],[1,1],[2,1]])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
Y,"numpy.array([1,1,2,2])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(X.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
theta,"numpy.matrix(np.array([0,0,0])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.SGDClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
auto,pandas.read_csv('auto_mpg.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.array([auto_disp,auto_weight])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.array([auto_mpg]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_disp,numpy.mean(auto_disp),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(auto_disp,\
auto_mpg,\
test_size=0.2,\
random_state=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,\
y,\
test_size=0.2,\
random_state=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,numpy.genfromtxt('data.dat'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dateString,"time.strftime(""Y%YM%mD%d"")",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
timeString,"time.strftime(""UTC%H:%M"")",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
file_df,pandas.read_csv(file),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
stress,"k.stress_vals(p=numpy.arange(1,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress2,"k.stress_vals(p=numpy.arange(1,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress,"k.stress_vals(p=numpy.arange(1,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress2,"k.stress_vals(p=numpy.arange(1,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress,"k.stress_vals(p=numpy.arange(1,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress,"k.stress_vals(p=numpy.arange(1,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D_inf,"numpy.zeros((n,n)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D,numpy.sqrt(noisy_dist_mat_kde),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"D_inf[i,j]","numpy.linalg.norm(X[i,:]-X[j,:])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D_9,sklearn.metrics.pairwise_distances(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D_s,sklearn.metrics.pairwise_distances(rw_obj.stations),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D_c,sklearn.metrics.pairwise_distances(base_config),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D,sklearn.metrics.pairwise_distances(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lm,"scipy.stats.linregress(x,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"defa(x,y",time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
cm_df,"pandas.DataFrame(
cm,index=[""Actual0"",""Actual1""],columns=[""Predicted0"",""Predicted1""]
)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
df_loans,pandas.read_csv(file_path),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=78)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train2,X_test2,y_train2,y_test2","sklearn.model_selection.train_test_split(X,y,random_state=78,train_size=0.80)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
cm,"sklearn.metrics.confusion_matrix(y_test,predictions)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
acc_score,"sklearn.metrics.accuracy_score(y_test,predictions)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('TUGAS3_AOK.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(20,20)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,numpy.arange(salient_not_cars_train_x.shape[0]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
mean_values,numpy.array(mean_values),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
not_cars,numpy.where(y_train!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
not_cars,numpy.where(y_test!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_not_cars,numpy.where(y_train!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_not_cars,numpy.where(y_train!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_cars,numpy.where(y_train==1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_not_cars,numpy.where(y_test!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_not_cars,numpy.where(y_test!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
salient_not_cars_train_x,"numpy.concatenate((x_train,fragmented_saliency,fragmented_saliency_not_cars_x_train)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
salient_not_cars_train_y,"numpy.concatenate((y_train,fragmented_saliency_y_train,not_cars_y_train)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
car_train,"numpy.concatenate((x_train,fragmented_saliency)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
combined_y_train,"numpy.concatenate((y_train,fragmented_saliency_y_train)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
fragmented_saliency_y_train,"numpy.ones((fragmented_saliency.shape[0],1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
ref,"numpy.ones((32,32,3)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices,"numpy.argpartition(flat,-n)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
exp,"numpy.clip(exp/np.percentile(exp,99.5)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
exp,"numpy.clip(exp/np.percentile(exp,99.99)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
exp,"numpy.clip(exp/np.percentile(exp,99.99)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x,"numpy.clip(x,0,1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x,"numpy.clip(x,0,255)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
actual_labels,numpy.copy(y_train),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
img,numpy.copy(x_train[ind]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
img,numpy.copy(not_cars_x_train[ind]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
threshold,"numpy.percentile(exp,95)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
threshold,"numpy.percentile(exp,95)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x_train,"numpy.delete(x_train,not_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
y_train,"numpy.delete(y_train,not_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x_test,"numpy.delete(x_test,not_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
y_test,"numpy.delete(y_test,not_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
rows_to_delete,"numpy.delete(indices_not_cars,np.s_[0:4500],axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x_train,"numpy.delete(x_train,rows_to_delete,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
y_train,"numpy.delete(y_train,rows_to_delete,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
not_cars_x_train,"numpy.delete(x_train,indices_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
not_cars_y_train,"numpy.delete(y_train,indices_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
ref,"numpy.expand_dims(ref,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
df,"pandas.DataFrame(
{'Tokens':CDS,
'SES':SES,
})",CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
p,"seaborn.boxplot(y='Tokens',x='SES',
data=df,
width=0.5,
palette=""YlOrBr"")",CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
txts,"os.listdir("".\Data3"")",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
df1,"pandas.melt(NDCI_raw,id_vars=['system:time_start'],var_name='Lake',value_name='Reflectance')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df2,"pandas.melt(rgb_raw,id_vars=['system:time_start'],var_name='Lake',value_name='Reflectance')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df3,"pandas.melt(nirSWIR_raw,id_vars=['system:time_start'],var_name='Lake',value_name='Reflectance')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df4,"pandas.melt(blueGreen_raw,id_vars=['system:time_start'],var_name='Lake',value_name='Reflectance')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
NDCI_raw,"pandas.read_csv('NDCI.csv',low_memory=False)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rgb_raw,"pandas.read_csv('rgb.csv',low_memory=False)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
blueGreen_raw,"pandas.read_csv('blueGreen.csv',low_memory=False)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
nirSWIR_raw,"pandas.read_csv('nirSWIR.csv',low_memory=False)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,2)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,2)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(len(data.columns),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(len(data.columns),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
source,requests.get(url),CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(data,columns=['Postcode','Borough','Neighbourhood'])",CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df3,"pandas.merge(df2,lat_lon,on='Postcode')",CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
lat_lon,pandas.read_csv('https://cocl.us/Geospatial_data'),CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(k),CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2['Neighbourhood'],"numpy.where(df2['Neighbourhood']=='Notassigned',df2['Borough'],df2['Neighbourhood'])",CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=k,random_state=0)",CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
Day_cos,pandas.DataFrame(columns=['Day_x']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Day_sin,pandas.DataFrame(columns=['Day_y']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
D_cos,pandas.DataFrame([np.cos((day-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
D_sin,pandas.DataFrame([np.sin((day-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_3,"pandas.concat([data_3,Month_cos,Month_sin],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_3,"pandas.concat([data_3,Day_cos,Day_sin],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_3,"pandas.concat([data_3,High_3,High_2,High_1,Low_3,Low_2,Low_1],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('./CU_weather_data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
label_High,numpy.array(data_3['HighTemperature']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_High,"numpy.array(data_3[['Precipitation','Snowfall','Month_x','Month_y','Day_x','Day_y','High_3','High_2','High_1']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
label_Low,numpy.array(data_3['LowTemperature']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_Low,"numpy.array(data_3[['Precipitation','Snowfall','Month_x','Month_y','Day_x','Day_y','Low_3','Low_2','Low_1']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Month_cos,numpy.cos((data_3.Month-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Month_sin,numpy.sin((data_3.Month-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
RF,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,random_state=6)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pandas,"pandas.read_table(""swissmetro.dat"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
pixcrd,"numpy.array([r[""ra""],r[""dec""],])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.zeros(nstar),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.zeros(nstar),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
flux,numpy.zeros(nstar),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
indmax,numpy.argmax(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean,numpy.mean(data),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sigma,numpy.std(data),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"y[i],x[i]","numpy.unravel_index(indmax,image.shape)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
median,numpy.median(data),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_X,"numpy.asarray([3.3,4.4,5.5,6.71,6.93,4.168,9.779,6.182,7.59,2.167,7.042,10.791,5.313,7.997,5.654,9.27,3.1])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_y,"numpy.asarray([1.7,2.76,2.09,3.19,1.694,1.573,3.366,2.596,2.53,1.221,2.827,3.465,1.65,2.904,2.42,2.94,1.3])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_X,"numpy.asarray([6.83,4.668,8.9,7.91,5.7,8.7,3.1,2.1])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_y,"numpy.asarray([1.84,2.273,3.2,2.831,2.92,3.24,1.35,1.03])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
k2,pandas.DataFrame(k2),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
classifier,sklearn.naive_bayes.GaussianNB(),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,y_predicted)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(y_test,y_predicted,average='weighted')",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
precision,"sklearn.metrics.precision_score(y_test,y_predicted,average='weighted')",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_predicted,average='weighted')",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
training_set,pandas.read_csv('/home/ryad/Bureau/Project-EDF-Lab-master/Google_Stock_Price_Train.csv'),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
action_set,numpy.arange(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
loss_approx,numpy.zeros(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
regret,numpy.zeros(T),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
somme,numpy.zeros(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p,numpy.ones(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X_train,"numpy.around(training_set[:1257,0],decimals=d)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
H,numpy.eye(N),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
L,numpy.eye(N),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
K,numpy.eye(N),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p[j],math.exp(-learning_rate*loss_approx[j]),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
learning_rate,math.sqrt(8*math.log(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_3,"pandas.concat([df_1,isomerase,ligase])",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
df3,"pandas.merge(df1,df2,on=['structureId','macromoleculeType','residueCount'])",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
df1,pandas.read_csv('pdb_data_no_dups.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
df2,pandas.read_csv('pdb_data_seq.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
isomerase,pandas.read_csv('uniprot-isomerase.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
ligase,pandas.read_csv('uniprot-ligase.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(actual,predictions)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
video,"numpy.array([10.5,5.2,3.25,7.0])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
u,"numpy.array([2,5])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
v,"numpy.array([3,1])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([1,2,8])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
b,"numpy.array([5,6,3])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
t1,"numpy.array([2,0.25])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
t2,"numpy.array([2.5,3.5])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
t3,"numpy.array([1,2])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
A,"numpy.array([
[10,20,30],
[40,50,60]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
D,"numpy.array([
[1,2,3],
[4,5,6],
[7,8,9],
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
B,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
C,"numpy.array([[100,200,300],[400,500,600]])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
D,"numpy.array([
[2,3,5,7],
[11,13,17,19],
[23,29,31,37]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F,"numpy.array([
[5,2],
[4,1],
[9,3]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
G,"numpy.array([
[8,7,4,2,5],
[2,5,1,0,5],
[9,11,17,21,0],
[0,1,0,1,2]])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
u_row,numpy.array([u]),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
P,"numpy.array([
[3.0,4.0,1.0,4.6],
[0.2,3.5,2.0,0.5]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
H,"numpy.array([
[0.5,-0.2,0.2,-0.1],
[0.4,0.4,1.5,0.6]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
H2,"numpy.array([
[-0.5,-0.5,-0.5,-0.5],
[0.4,0.4,0.4,0.4]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
U,"numpy.array([[1,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
U_30,numpy.array([[np.cos(angle30),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
V,"numpy.array([
[np.cos(angle30)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_shear,"numpy.array([
[1,1.5],
[0,1]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
Square,"numpy.array([
[0,0,1,1],
[0,1,1,0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_squeeze,"numpy.array([
[1.4,0],
[0,1/1.4]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_reflect,"numpy.array([
[1,0],
[0,-1]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_inv_shear,"numpy.array([
[1,-1.5],
[0,1]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_project,"numpy.array([
[1,0],
[0,0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_project_30,"numpy.array([
[np.cos(angle30)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_involution,"numpy.array([
[0,-2],
[-1/2,0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
M,"numpy.array([
[1,2,3],
[4,5,6],
[7,8,0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_scale,"numpy.array([
[0.5,0],
[0,0.5]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
D,"numpy.array([
[100,200,300],
[10,20,30],
[1,2,3],
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
S,numpy.diag(S_diag),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
subplot3d,"matplotlib.pyplot.subplot(111,projection='3d')",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
subplot3d,"matplotlib.pyplot.subplot(111,projection='3d')",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"eigenvalues,eigenvectors",numpy.linalg.eig(F_squeeze),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"eigenvalues2,eigenvectors2",numpy.linalg.eig(F_shear),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_inv_shear,numpy.linalg.inv(F_shear),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
LA.inv(F_shear.dot(F_squeeze)),=numpy.linalg.inv(F_squeeze),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
radius,numpy.linalg.norm(u),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"U,S_diag,V_T",numpy.linalg.svd(F_shear),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
df_obj1,"pandas.DataFrame({""x"":np.random.randn(500)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_obj2,"pandas.DataFrame({""x"":np.random.randn(500)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
dataset,"seaborn.load_dataset(""tips"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
exercise,seaborn.load_dataset('exercise'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pi,numpy.ndarray(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
circle1,"matplotlib.pyplot.Circle((0,0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
movies,pandas.read_csv('movies_clean.csv'),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
reviews,pandas.read_csv('reviews_clean.csv'),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
movie_content,"numpy.array(movies.iloc[:,4:])",CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
similar_movies,"numpy.array(movies.iloc[similar_idxs,]['movie'])",CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
movies_temp,numpy.array(reviews_temp['movie_id']),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
movie_names,numpy.array(get_movie_names(movies_temp),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
movie_idx,numpy.where(movies['movie_id']==movie_id),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
similar_idxs,numpy.where(dot_prod_movies[movie_idx]==np.max(dot_prod_movies[movie_idx]),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
users_who_need_recs,"numpy.setdiff1d(users,users_with_all_recs)",CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_recs,"numpy.setdiff1d(rec_movies,movie_names)",CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
users,numpy.unique(reviews['user_id']),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
recs,collections.defaultdict(set),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
opdf,pandas.DataFrame(output),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
trainingData,pandas.read_csv('training.csv'),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
testingData,pandas.read_csv('testing.csv'),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-5,5,N)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
xfit,"numpy.linspace(-5,5,30)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"theta_best,theta_cov","scipy.optimize.curve_fit(model,x,y,sigma=dy)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.arange(1,T+1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
w,"numpy.arange(start,end)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tau,"numpy.arange(0,T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
xi,"numpy.array([3.5,3.4,3.2,3.3,3.4,3.3,3.4,4.1,3.8,4.0,4.0,4.4,4.2,4.1,3.9,3.9,4.7,5.6,5.1,4.5,4.0,3.4,3.4,3.0])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
c,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.array(sol['x']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.array(sol['x']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.array(sol['x']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.array(sol['x']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A1,"numpy.zeros((1*W,3*W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A2,"numpy.zeros((1*W,3*W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A3,"numpy.zeros((1*W,3*W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b4,numpy.zeros(3*W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
c,numpy.zeros(3*W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,numpy.zeros(W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
rhc,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"numpy.zeros((W,W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
afhc,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"numpy.zeros((W,W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
arhc,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_RHC,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
f_RHC,numpy.zeros(end-start),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_AFHC,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
f_AFHC,numpy.zeros(end-start),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_ARHC,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
f_ARHC,numpy.zeros(end-start),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_OPT,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,"numpy.concatenate((A1,A2)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,"numpy.concatenate((A,A3)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,"numpy.concatenate((A,A4)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"numpy.roll(s,-1,axis=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"numpy.roll(s,-1,axis=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b2,numpy.ones(W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b3,numpy.ones(W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
c,"numpy.sum(np.multiply(xi+sigma,np.maximum(demand-solar+x,0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_RHC,"numpy.vstack([x_RHC,rhc])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_AFHC,"numpy.vstack([x_AFHC,afhc])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_ARHC,"numpy.vstack([x_ARHC,arhc])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
solar_extend,"numpy.append(solar,np.zeros(T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
demand_extend,"numpy.append(demand,np.zeros(T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
xi_extend,"numpy.append(xi,np.zeros(T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b1,"numpy.append(solar_extend[t-1:],solar_extend[:t+W-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,"numpy.append(b1,b2)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,"numpy.append(b,b3)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,"numpy.append(b,b4)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_rhc,"numpy.append(s0,rhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_rhc,"numpy.append(s0,rhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_afhc,"numpy.append(s0,afhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_afhc,"numpy.append(s0,afhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_arhc,"numpy.append(s0,arhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_arhc,"numpy.append(s0,arhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_rhc,"numpy.append(s0,rhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_afhc,"numpy.append(s0,afhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_arhc,"numpy.append(s0,arhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_opt,"numpy.append(s0,x_OPT[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
xi,"numpy.tile(xi,T//len(xi)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('processeddata.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
real_df,pandas.DataFrame(real_pred),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
see_final_results,"pandas.DataFrame({'text':text,'content_id':content_ids,'subject':subjects,'sentiment_value':sentiment_values,'sentiment_word':sentiment_words})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
test,pandas.read_csv('../../../data/df_sen_sub/test_public.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,pandas.read_csv('../../../data/df_sen_sub/submit_example.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
tf_df,pandas.DataFrame(tf_df.toarray(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
tf_df,pandas.DataFrame(tf_df.toarray(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
X_pca_df,"pandas.DataFrame(X_pca,columns=['PCA%i'%iforiinrange(n_features)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
neighbors_df,"pandas.DataFrame({'neighbor_id':articles_idx,\
'similarity':eucl_dist_series})",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
similar_result,pandas.Series(similar_result),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
neighbors_df,pandas.Series(similarity),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"neighbors_df[""num_interactions""]",pandas.Series(num_interactions),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
eucl_dist_series,"pandas.Series(eucl_dist_list,index=articles_idx)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_content_new,"pandas.concat([df_cont,tf_df],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_content_new,"pandas.concat([df_cont,tf_df],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_content_new,"pandas.concat([df_cont,X_pca_df],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df,pandas.read_csv('data/user-item-interactions.csv'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_content,pandas.read_csv('data/articles_community.csv'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
user_item_matrix,pandas.read_pickle('user_item_matrix.p'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
num_latent_feats,"numpy.arange(10,700+10,20)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
num_latent_feats,"numpy.arange(10,570+10,20)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
articles_idx,numpy.array(df_cont['article_id']),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
article_pca,"numpy.array(df_cont[df_cont['article_id']==article_id].iloc[:,1:])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
neigh_pca,numpy.array(col[1:]),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
rec_articles_ids,numpy.array(neighbors_df.index.values),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
similar_result[user],"numpy.dot(user_item.loc[user_id],user_item.loc[user])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
similarity[user],"numpy.dot(user_item.loc[user_id],user_item.loc[user])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
user_item_est,"numpy.around(np.dot(np.dot(u_new,s_new)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
user_item_pred,"numpy.around(np.dot(np.dot(u_train_new,s_train_new)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
err,numpy.sum(numpy.sum(np.abs(diffs),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
test_err,numpy.sum(numpy.sum(np.abs(test_diffs),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
train_err,numpy.sum(numpy.sum(np.abs(train_diffs),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
diffs,"numpy.subtract(user_item_matrix,user_item_est)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
test_diffs,"numpy.subtract(user_item_true_test,user_item_pred_test)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
train_diffs,"numpy.subtract(user_item_train,user_item_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"s_new,u_new,vt_new",numpy.diag(s[:k]),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"s_train_new,u_train_new,vt_train_new",numpy.diag(s_train[:k]),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
eucl_dist,numpy.linalg.norm(article_pca-neigh_pca),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"u,s,vt",numpy.linalg.svd(user_item_matrix),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"u_train,s_train,vt_train",numpy.linalg.svd(user_item_train),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=n_features),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
text,"re.sub(r""[^a-zA-Z0-9]"","""",text.lower()",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
balance_data,"pandas.read_csv(
'https://archive.ics.uci.edu/ml/machine-learning-databases/balance-scale/balance-scale.data',
sep=',',header=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3,random_state=100)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_gini,"sklearn.tree.DecisionTreeClassifier(criterion=""gini"",random_state=100,max_depth=3,min_samples_leaf=5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_entropy,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",random_state=100,max_depth=3,min_samples_leaf=5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
binned_weighted_statistic,"scipy.stats.binned_statistic_dd(x,y*weights,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_weights,"scipy.stats.binned_statistic_dd(x,1.0*weights,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_y,"scipy.stats.binned_statistic_dd(z,y,bins=[my_bins],statistic=mean)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_x,"scipy.stats.binned_statistic_dd(z,x,bins=[my_bins],statistic=mean)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_e,"scipy.stats.binned_statistic_dd(z,energy,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
reg,"sklearn.linear_model.TheilSenRegressor(fit_intercept=False,n_subsamples=10,)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
x,"numpy.arange(-10,10)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[1],"numpy.array([0,0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[2],"numpy.array([-2,1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[3],"numpy.array([2,1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[4],"numpy.array([-3,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[5],"numpy.array([-1,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[6],"numpy.array([1,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[7],"numpy.array([3,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(1),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[1],"numpy.array([0,0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[2],"numpy.array([-2,1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[3],"numpy.array([2,1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[4],"numpy.array([-3,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[5],"numpy.array([-1,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[6],"numpy.array([1,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[7],"numpy.array([3,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.read_excel('/home/subhani007/Desktop/MLAssignment/boston.xls'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cost,math.sqrt(cost),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta,numpy.asarray(theta),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta1,numpy.asarray(theta1),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta2,numpy.asarray(theta2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta3,numpy.asarray(theta3),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta4,numpy.asarray(theta4),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
temp,"numpy.zeros(14,int)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta,"numpy.zeros(x1_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta1,"numpy.zeros(x2_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta2,"numpy.zeros(x2_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta3,"numpy.zeros(x4_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta4,"numpy.zeros(x5_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mul,"numpy.matmul(theta_transpose,x)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
toSum,"numpy.matmul(sub,np.transpose(x)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mul,"numpy.matmul(theta_transpose,x)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sigma,numpy.sum(sq),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_transpose,numpy.transpose(y),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta_transpose,numpy.transpose(theta),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cost,numpy.transpose(cost),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta_transpose,numpy.transpose(theta),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_transpose,numpy.transpose(y),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1Trans,numpy.transpose(x1_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x2Trans,numpy.transpose(x2_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x3Trans,numpy.transpose(x3_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x4Trans,numpy.transpose(x4_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x5Trans,numpy.transpose(x5_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sq,"numpy.power(sub,2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub,"numpy.subtract(mul,y_transpose)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub,"numpy.subtract(mul,y_transpose)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_scaled,sklearn.preprocessing.scale(x),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_scaled,sklearn.preprocessing.scale(y),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"submission.iloc[:,1]",numpy.floor(np.expm1(blend_models_predict(X_sub),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"submission.iloc[:,1]",numpy.floor((0.25*numpy.floor(np.expm1(blend_models_predict(X_sub),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""SalePrice""]","numpy.log1p(train[""SalePrice""])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(-cross_val_score(model,X,y,scoring=""neg_mean_squared_error"",cv=kfolds)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,numpy.corrcoef(train[cols].values.T),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combine,"pandas.concat((train,test)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combine,pandas.get_dummies(combine),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/Housing_Prices_train.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/Housing_Prices_test.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,"pandas.read_csv(""https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/sample_submission_kaggle.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub_1,pandas.read_csv('https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/masum_rumia-detailed-regression-guide-with-house-pricing%20submission.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub_2,pandas.read_csv('https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/serigne_stacked-regressions-top-4-on-leaderboard_submission.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub_3,pandas.read_csv('https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/jesucristo1-house-prices-solution-top-1_new_submission.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hm,"seaborn.heatmap(cm,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10},yticklabels=cols.values,xticklabels=cols.values)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combine[feature],"scipy.special.boxcox1p(combine[feature],boxcox_normmax(combine[feature]+1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lbl,sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ENet,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kfolds,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bikeAllYears,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
bikeAllYears,"pandas.concat(\
[readYearlyData(os.path.join(csvFilePath,file)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
bikeDF['AgeBins'],"pandas.cut(bikeDF.age,bins=age_bins,labels=age_labels)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
bikeDF['HrBins'],"pandas.cut(bikeDF.start_hour,bins=hrs_bins,labels=hrs_labels)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
bikeDF,"pandas.read_csv(csvFile,low_memory=False,header=0,
names=[""tripduration"",""starttime"",""stoptime"",""startstationid"",""startstationname"",
""startstationlatitude"",""startstationlongitude"",""endstationid"",""endstationname"",
""endstationlatitude"",""endstationlongitude"",""bikeid"",""usertype"",""birthyear"",""gender""
])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
city_wx_data_df,pandas.DataFrame(city_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
city_wx,requests.get(city_url),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
r,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
start,datetime.date.today(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
iso_8601_dt,"datetime.datetime.strptime(iso_8601,'%Y-%m-%dT%H:%M:%S%f')",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
comparison,"pandas.DataFrame([results_sent,recall_scores_sent,results_fin,recall_scores_fin,delta_accu,delta_recall],columns=names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_feat,"pandas.DataFrame([model.feature_importances_],columns=features)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_feat,"pandas.DataFrame([model.feature_importances_],columns=features)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
aggregated,pandas.read_json('aggregated_sentiment.json'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=num_folds,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=kfold,scoring=scoring)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_rf,sklearn.ensemble.RandomForestClassifier(n_estimators=1000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_rf,sklearn.ensemble.RandomForestClassifier(n_estimators=1000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(test_y,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
image,numpy.array(tiles[i].image),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
trimap,numpy.array(mtiles[i].image),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
bmask,"numpy.array(amask,dtype=bool)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
kernel,"numpy.ones((1,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
kernel,"numpy.ones((1,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
kernel,"numpy.ones((1,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
cutout,"numpy.clip(cutout*255,0,255)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
cutout,"numpy.clip(cutout*255,0,255)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
alpha,"numpy.clip(x,0.0,1.0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
alpha,"numpy.clip(x,0.0,1.0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
orig_2,numpy.uint8(orig_2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
mask,numpy.uint8(mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
C,scipy.sparse.diags(c),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
C,scipy.sparse.diags(c),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
start_time,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
insurance,"pandas.read_csv('insurance.csv',delimiter=',')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
age_first_Quartile,"numpy.percentile(insurance.age,[25])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
age_third_Quartile,"numpy.percentile(insurance.age,[75])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bmi_first_Quartile,"numpy.percentile(insurance.bmi,[25])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bmi_third_Quartile,"numpy.percentile(insurance.bmi,[75])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
children_first_Quartile,"numpy.percentile(insurance.children,[25])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
children_third_Quartile,"numpy.percentile(insurance.children,[75])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
charges_first_Quartile,"numpy.percentile(insurance.charges,[25])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
charges_third_Quartile,"numpy.percentile(insurance.charges,[75])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.countplot(x=""sex"",data=insur)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.arange(data.shape[0]),CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
embeddings_index[word],"numpy.asarray(values[1:],dtype='float32')",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
pred_adv,"numpy.argmax(y_pred_adv,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
real_adv,"numpy.argmax(y_val,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
pr,"numpy.argmax(prediction_ar,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
x,numpy.arange(len(x),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.arange(len(x),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Bj,numpy.array(y1),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Sh,numpy.array(y2),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Bj,numpy.array(y1),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Sh,numpy.array(y2),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
emails_available,"os.listdir(""/home/allan/Desktop/enron_fraud_detection/text_operations/emails_by_address"")",CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
emails_available,"os.listdir(""/home/allan/Desktop/enron_fraud_detection/text_operations/emails_by_address"")",CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
emails_available,"os.listdir(""/home/allan/Desktop/enron_fraud_detection/text_operations/emails_by_address"")",CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
emails_available,"os.listdir(""/home/allan/Desktop/enron_fraud_detection/text_operations/emails_by_address"")",CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
keep_index_v2,numpy.array(((numpy.array(usage),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
keep_words,numpy.array(words),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
person_index,numpy.array(numpy.array(numpy.array(numpy.array(detective_people_list),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
keep_words,numpy.array(qualitative_words),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
p_values,numpy.zeros(len(words),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
p_index,numpy.where(np.array(np.array(detective_people_list),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
cbar,matplotlib.pyplot.colorbar(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cbar,"matplotlib.pyplot.colorbar(im,ax=ax[1],cax=cax,shrink=1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cbar,"matplotlib.pyplot.colorbar(im,ax=ax[3],cax=cax,shrink=1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cont,"matplotlib.pyplot.contour(
np.arange(ydeg+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(2,2,figsize=(12,7)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(2,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(2,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
l,"numpy.arange(5,ydeg+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.array(map.y),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mu,numpy.array([np.mean(x[l**2:(l+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
R,numpy.array([[np.cos(ang),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
R,numpy.array([[np.cos(ang),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
theta,numpy.array(theta),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
R,numpy.array([[np.cos(ang),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
img_rot,"numpy.zeros((9,res,res)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
img_starry,"numpy.zeros((9,res,res)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
error,numpy.zeros((len(Nalpha),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t0,numpy.zeros(ydeg+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tD,numpy.zeros(ydeg+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tN0,numpy.zeros(ydeg+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tND,numpy.zeros(ydeg+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
L,"numpy.concatenate(
[np.ones(2*l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
new_lon,numpy.empty_like(lon),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
new_lon,numpy.empty_like(lon),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
img_rot,numpy.zeros_like(img),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux_num,numpy.zeros_like(theta),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux_num,numpy.zeros_like(theta),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
lnlike,numpy.zeros_like(alpha_arr),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux,numpy.ones_like(time),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
wta,numpy.ones(map.Ny),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
error,numpy.std(flux_starry_0-flux_num_0),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux_num[k],numpy.sum(z[z>0]*img.flat[z>0]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux_num[k],numpy.sum(z[z>0]*img.flat[z>0]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,numpy.cos(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
z,numpy.cos(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,numpy.cos(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
z,numpy.cos(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
like,numpy.exp(lnlike-np.max(lnlike),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
logerror,numpy.log10(error),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.sin(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.sin(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
time,"numpy.linspace(0,30,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Nalpha,"numpy.linspace(0,1,25)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
theta,"numpy.linspace(0,360.0,npts)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,10.0,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
alpha_arr,"numpy.linspace(0.01,0.03,300)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tstart,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tstart,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tstart,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tstart,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
func,"scipy.interpolate.interp1d(lon[i],img[i],fill_value=""extrapolate"")",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
true_prob,pandas.Series(true_prob),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
counts,"pandas.concat([counts,true_prob],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
churn_df,pandas.read_csv('data/churn.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
counts,pandas.value_counts(pred_churn),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.array(y),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_prob,numpy.zeros([len(y),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
true_prob[prob],numpy.mean(is_churn[pred_churn==prob]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
baseline,numpy.mean(is_churn),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
class_names,numpy.unique(y),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"numpy.array([[0,0],
[0,1],
[1,0],
[1,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([0,1,1,0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.array([[0,0],
[0,1],
[0,-1],
[0.5,1],
[0.5,-1],
[1,1],
[1,-1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([[0,1],
[0,1],
[0,1],
[-1,1],
[1,1],
[0,-1],
[0,-1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.concatenate((ones.T,X)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,numpy.concatenate((np.ones(1),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dot_value,"numpy.dot(a[l],self.weights[l])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ones,numpy.atleast_2d(np.ones(X.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
layer,numpy.atleast_2d(a[i]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
delta,numpy.atleast_2d(deltas[i]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ones,numpy.atleast_2d(np.ones(x.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
books,"pandas.read_csv('books.csv',encoding='latin-1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(
in_femto_sec(-100)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
k,"numpy.linspace(
in_electron_volt(15.35)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(fpath),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"df[""ymd""]","pandas.to_datetime(df[""ymd""])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
grid_cv,"sklearn.model_selection.GridSearchCV(estimator=svc,param_grid=prama_dic)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
grid_cv,"sklearn.model_selection.GridSearchCV(logistic,param_dic)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
grid_cv,"sklearn.model_selection.GridSearchCV(logistic,param_dic)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
target,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
svc,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
logistic,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
logistic,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train,target,test_size=0.2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,target,test_size=0.2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x_data,"numpy.linspace(0.0,10.0,1000000)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
my_data,"pandas.concat([pd.DataFrame(data=x_data,columns=['XData'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_eval,y_train,y_eval","sklearn.model_selection.train_test_split(x_data,y_true,test_size=0.3,random_state=101)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(file_name),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.arange(1,len(x)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.sort(df['alcohol']),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.catplot(x=""class"",y=""survived"",hue=""sex"",data=titanic,
height=6,kind=""bar"",palette=""muted"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df['alcohol'],bins=20)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
titanic,"seaborn.load_dataset(""titanic"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,"matplotlib.pyplot.plot(x,y,marker='.',linestyle='none')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,"matplotlib.pyplot.title(""AlcoholContent"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel('AlcoholPercentage'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel('PercentofAlcoholinWine'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylabel('Count'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylabel('ECDF'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
CITI,pandas.read_csv('citi_df_sum.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
NY_STATION,pandas.read_csv('http://web.mta.info/developers/data/nyct/subway/Stations.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
TURNSTILE,pandas.read_csv('turnstile/cleaned_turnstile_daily.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,20)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('../data/events.csv',low_memory=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df['timestamp'],pandas.to_datetime(df['timestamp']),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
grouped['days_elapsed'],pandas.to_datetime('2018-06-01'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
income,"pandas.Series(np.where(income_raw=="">50K"",1,0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
features,pandas.get_dummies(features_raw),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""census.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['f_train'],"sklearn.metrics.fbeta_score(y_train.values[:300],predictions_train,beta=0.5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['f_test'],"sklearn.metrics.fbeta_score(y_test,predictions_test,beta=0.5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['acc_train'],"sklearn.metrics.accuracy_score(y_train.values[:300],predictions_train)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['acc_test'],"sklearn.metrics.accuracy_score(y_test,predictions_test)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_A,sklearn.naive_bayes.GaussianNB(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_B,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_C,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scorer,"sklearn.metrics.make_scorer(fbeta_score,beta=0.5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
neg_mask,"numpy.array(Image.open(""../../images/neg.jpg"")",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pos_mask,"numpy.array(Image.open(""../../images/pos.jpg"")",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
neutral_mask,"numpy.array(Image.open(""../../images/neutral.jpg"")",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mss_df,pandas.read_pickle(save_load_path+'/mss_df.pkl'),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_c,numpy.corrcoef(x_s.T),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.load_iris(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_s,"sklearn.preprocessing.scale(x,with_mean=True,with_std=True,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"eig_val,r_eig_vec",scipy.linalg.eig(x_c),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
