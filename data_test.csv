varible_name,method,"AffinityPropagation(damping=0.999, random_state=0)","AgglomerativeClustering(metric='euclidean', n_clusters=13)","KMeans(n_clusters=13, n_init='auto', random_state=0)",MeanShift(bandwidth=2.3),"SpectralClustering(assign_labels='discretize', n_clusters=13, random_state=0)"
test_acc,numpy.mean(all_test_acc_val),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
self._labels,numpy.hstack(all_labels),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
self._data,numpy.vstack(all_data),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
au_1062bio,pandas.DataFrame(list(collection.find(),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
principalDf,pandas.DataFrame(data=principalComponents),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
au_1062bio_feature,"pandas.concat([au_1062bio_feature,noise1])",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
au_1062bio,"pandas.merge(au_1062bio_feature,au_1062bio_score,on='_id')",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
Epsilon,"numpy.arange(Begin_Range,End_Range,Interval_Size)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
"y_true,y_pred",numpy.array(y_true),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
var,"numpy.cumsum(np.round(pca.explained_variance_ratio_,decimals=3)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
ssres,numpy.sum(np.square(y_true-y_pred),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
sstot,numpy.sum(np.square(y_true-np.mean(y_pred),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
f_test,numpy.var(y_test),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
tsne,"sklearn.manifold.TSNE(perplexity=1,n_components=2,init='pca',n_iter=250)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(au_1062bio_x,au_1062bio_y,test_size=0.3)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(au_1062bio_x,au_1062bio_y,test_size=0.3)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
clf,sklearn.svm.SVR(),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
mlp,"sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(2,)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
pca,sklearn.decomposition.PCA(n_components=9),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
pca,sklearn.decomposition.PCA(n_components=14),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
regr,"sklearn.ensemble.RandomForestRegressor(max_depth=5,random_state=0)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
rmse,"math.sqrt(mean_squared_error(y_test,y_pred)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
training_loss,"math.sqrt(mean_squared_error(y_train,y_validate)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
AUC,"scipy.integrate.simps(Accuracy,Epsilon)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(18,8)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
df_1,pandas.DataFrame(columns=b),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(your_local_path+""attachment_Grocery.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,numpy.unique(a),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bet_number,"random.randint(0,36)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
bet,"random.randint(10,p.capital)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
spin,"random.randint(0,36)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
food_review_total,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
df_food_review,pandas.DataFrame(food_review_join),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_info_total,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_info_total,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_info,pandas.DataFrame(food_info),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_review_total,"pandas.concat([food_review_total,food_review])",CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_info_total,"pandas.concat([food_info_total,food_info])",CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_review_merge,"pandas.merge(df_food_review,food_info_total,how='inner',left_on=['country','label'],right_on=['country','001_상호명'])",CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_review,"pandas.read_csv(path,encoding=""UTF-8"")",CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_info,"pandas.read_csv(path,encoding=""UTF-8"")",CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
countries,os.listdir(),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
countries,os.listdir(),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
cities,os.listdir(),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
emoji_pattern,"re.compile(""[""
u""\U0001F600-\U0001F64F""
u""\U0001F300-\U0001F5FF""
u""\U0001F680-\U0001F6FF""
u""\U0001F1E0-\U0001F1FF""
""]+"",flags=re.UNICODE)",CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
image_copy,numpy.copy(image),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
key_pts_copy,numpy.copy(key_pts),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
key_pts_frame,pandas.read_csv('data/training_frames_keypoints.csv'),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
self.key_pts_frame,pandas.read_csv(csv_file),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,num_to_display,i+1)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,3,i+1)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
map_reverse_n,pandas.Series(np.zeros(len(index_n),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
map_reverse,"pandas.concat([map_reverse_p,map_reverse_n])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train,pandas.read_csv(path+'train_cleaned_final.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test,pandas.read_csv(path+'test_cleaned_final.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=K,shuffle=True,random_state=233)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
district_summary_df,"pandas.DataFrame(
[{""TotalSchools"":school_count,
""TotalStudents"":student_count,
""TotalBudget"":total_budget,
""AverageMathScore"":average_math_score,
""AverageReadingScore"":average_reading_score,
""%PassingMath"":passing_math_percentage,
""%PassingReading"":passing_reading_percentage,
""%OverallPassing"":overall_passing_percentage}])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(per_school_types),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
per_school_summary_df,"pandas.DataFrame({
""SchoolType"":per_school_types,
""TotalStudents"":per_school_counts,
""TotalSchoolBudget"":per_school_budget,
""PerStudentBudget"":per_school_capita,
""AverageMathScore"":per_school_math,
""AverageReadingScore"":per_school_reading,
""%PassingMath"":per_school_passing_math,
""%PassingReading"":per_school_passing_reading,
""%OverallPassing"":per_overall_passing_percentage})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
math_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_math_scores,
""10th"":tenth_grade_math_scores,
""11th"":eleventh_grade_math_scores,
""12th"":twelfth_grade_math_scores})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
reading_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_reading_scores,
""10th"":tenth_grade_reading_scores,
""11th"":eleventh_grade_reading_scores,
""12th"":twelfth_grade_reading_scores})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
spending_summary_df,"pandas.DataFrame({
""AverageMathScore"":spending_math_scores,
""AverageReadingScore"":spending_reading_scores,
""%PassingMath"":spending_passing_math,
""%PassingReading"":spending_passing_reading,
""%OverallPassing"":overall_passing_spending})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
size_summary_df,"pandas.DataFrame({
""AverageMathScore"":size_math_scores,
""AverageReadingScore"":size_reading_scores,
""%PassingMath"":size_passing_math,
""%PassingReading"":size_passing_reading,
""%OverallPassing"":size_overall_passing})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
type_summary_df,"pandas.DataFrame({
""AverageMathScore"":type_math_scores,
""AverageReadingScore"":type_reading_scores,
""%PassingMath"":type_passing_math,
""%PassingReading"":type_passing_reading,
""%OverallPassing"":type_overall_passing})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"per_school_summary_df[""SpendingRanges(PerStudent)""]","pandas.cut(per_school_capita,spending_bins,labels=group_names)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"per_school_summary_df[""SchoolSize""]","pandas.cut(per_school_summary_df[""TotalStudents""],size_bins,labels=group_names)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_data_complete_df,"pandas.merge(student_data_df,school_data_df,on=[""school_name"",""school_name""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_data_df,pandas.read_csv(school_data_to_load),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
student_data_df,pandas.read_csv(student_data_to_load),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
english_words_counter,collections.Counter([wordforsentenceinenglish_sentencesforwordinsentence.split(),CLUSTER_10,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
french_words_counter,collections.Counter([wordforsentenceinfrench_sentencesforwordinsentence.split(),CLUSTER_10,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
sentences,"numpy.array([sentence[0],x[0]])",CLUSTER_10,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
"v[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"v[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"v[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"v[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"s[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"s[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
num_complete_minibatches,math.floor(m/mini_batch_size),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
trained_image,numpy.array(trained_image),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
trained_label,numpy.array(trained_label),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
im,numpy.array((trained_image),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
self.all_weights,"numpy.frombuffer(binary,dtype='float32')",CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
self.label,numpy.argmax(self.classes),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
class_sort,numpy.argsort([-box.classes[c]forboxinboxes]),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
size,numpy.prod(norm_layer.get_weights(),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
data,matplotlib.pyplot.imread(filename),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
image,"numpy.expand_dims(image,0)",CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
cwd,os.getcwd(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
data1,"pandas.read_csv('occupancy_data\datatest.txt',header=0,index_col=1,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data2,"pandas.read_csv('occupancy_data\datatraining.txt',header=0,index_col=1,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data3,"pandas.read_csv('occupancy_data\datatest2.txt',header=0,index_col=1,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data1,"pandas.read_csv('occupancy_data\datatest.txt',header=0,index_col=1,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data2,"pandas.read_csv('occupancy_data\datatraining.txt',header=0,index_col=1,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data3,"pandas.read_csv('occupancy_data\datatest2.txt',header=0,index_col=1,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('occupancy_data/combined.csv',header=0,index_col=0,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('occupancy_data/combined.csv',header=0,index_col=0,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('occupancy_data/combined.csv',header=0,index_col=0,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data,"pandas.concat([data1,data2,data3])",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(testy,yhat)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(testy,yhat)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(testy,yhat)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"trainX,testX,trainy,testy","sklearn.model_selection.train_test_split(X,y,test_size=0.3,shuffle=False,random_state=1)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"trainX,testX,trainy,testy","sklearn.model_selection.train_test_split(X,y,test_size=0.3,shuffle=False,random_state=1)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"trainX,testX,trainy,testy","sklearn.model_selection.train_test_split(X,y,test_size=0.3,shuffle=False,random_state=1)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
self.trees,"numpy.zeros(self.size,dtype=bool)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
self.fires,numpy.zeros((self.size),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
self.trees,"numpy.zeros(self.size,dtype=bool)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
self.fires,numpy.zeros((self.size),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fires,"numpy.zeros((self.size[0]+2,self.size[1]+2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
start,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(portfolio),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
small_df,pandas.concat(dfs[s]forsinstocks),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
returns,"numpy.dot(weights,returns_monthly.loc[date])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
max_sharpe[date],numpy.argmax(sharpe_ratio[date]),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
weights/,numpy.sum(weights),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
mask,"numpy.where(numpy.logical_and(x>=0.5,x<=1.0)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
u0,numpy.ones(nx),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0.0,L,num=nx)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
projection,sklearn.manifold.TSNE(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=3),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask_img,numpy.array(Image.open('./data/clover.jpg'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df_clean,pandas.DataFrame(index=df.index),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
features,pandas.DataFrame(index=df_clean.index),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""features_selecionadas(comlabels)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df_clean[""date""]","pandas.to_datetime(date_clean[0]+""/""+date_clean[1]+""/""+date_clean[2],format=""%d/%m/%Y"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(10,10)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mdl,"sklearn.tree.DecisionTreeClassifier(random_state=0,max_depth=2,class_weight=""balanced"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mismP,numpy.array([]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismQ,numpy.array([]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismP,numpy.array([]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismQ,numpy.array([]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
Y,"numpy.zeros([NN,NN],dtype=complex)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tii,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tjj,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tij,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
H,"numpy.zeros((NN,NN)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
N,"numpy.zeros((NN,NN)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
M,"numpy.zeros((NN,NN)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
L,"numpy.zeros((NN,NN)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
Y,"numpy.zeros([NN,NN],dtype=complex)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tii,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tjj,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tij,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tij,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B_line,"numpy.zeros([NN,NN])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B_2line,"numpy.zeros([NN,NN])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
P_Calc,numpy.zeros_like(P_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
Q_Calc,numpy.zeros_like(Q_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
DP,numpy.zeros_like(P_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
DQ,numpy.zeros_like(Q_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
P_Calc,numpy.zeros_like(P_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
DP,numpy.zeros_like(P_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
Q_Calc,numpy.zeros_like(Q_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
DQ,numpy.zeros_like(Q_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
DV,"numpy.dot(J,DS)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
d_theta,"numpy.dot(B_line_inv,DP)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dV,"numpy.dot(B_2line_inv,DQ)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
J1,"numpy.hstack((H,N)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
J2,"numpy.hstack((M,L)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B,numpy.imag(Y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
b,numpy.imag(ykm),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B,numpy.imag(Y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
b,numpy.imag(ykm),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
b,numpy.imag(ykm),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
G,numpy.real(Y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
g,numpy.real(ykm),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
G,numpy.real(Y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
g,numpy.real(ykm),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
g,numpy.real(ykm),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismQ,"numpy.append(mismQ,maxDQ)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismP,"numpy.append(mismP,maxDP)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismP,"numpy.append(mismP,maxDP)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismQ,"numpy.append(mismQ,maxDQ)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
data_branches,"numpy.loadtxt(branch_txt,skiprows=2)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
node_data,"numpy.loadtxt(node_txt,skiprows=3)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
node2_data,"numpy.loadtxt(node2_txt,skiprows=1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
J,"numpy.linalg.inv(np.vstack((J1,J2)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B_line_inv,numpy.linalg.inv(B_line),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B_2line_inv,numpy.linalg.inv(B_2line),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
total_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
total_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df,pd.DataFrame(X_TSNE,index=X.index,columns=['TSNE_0','TSNE_1'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,pd.DataFrame(distance_from_centroids,index=X.index,columns=['Cluster1','Cluster2','Cluster3','Cluster4','Cluster5','Cluster6','Cluster7','Cluster8'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ss,pandas.concat([pd.DataFrame(precision),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reloaded_df,"pandas.concat([reloaded_df_normal,reloaded_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
opt_param,pandas.concat([pd.DataFrame(precision),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
opt_param,pandas.concat([pd.DataFrame(precision),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
opt_param,pandas.concat([pd.DataFrame(precision),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../input/creditcard.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reloaded_df,pandas.read_csv('../input/creditcard.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(random_state=0,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=key,random_state=0,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=16,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=16,max_depth=key,random_state=0,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=16,max_features=key,random_state=0,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=16,max_features=14,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=16,max_features=14,random_state=3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(reloaded_X,reloaded_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_TSNE,sklearn.manifold.TSNE(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
big_mat1,"numpy.ones((10000,1000)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
big_mat2,"numpy.ones((10000,1000)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
features,numpy.array(features),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
batch_x,numpy.array(train_x[start:end]),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
batch_y,numpy.array(train_y[start:end]),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
frame1,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.imshow(output_weight.reshape([2,20]),cmap",matplotlib.pyplot.get_cmap('seismic'),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'recording_periods.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'ventilator_settings.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'ventilator_settings_selected.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'ventilator_settings_2.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'ventilator_modes.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'ventilator_modes_selected.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_settings.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_settings_2.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_states.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s%s'%(DIR_WRITE,recording,'_alarm_events.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_stats.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_stats_cum_rec.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'total_alarm_list.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'total_alarm_list_numbers.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_stats_cum_al.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_stats_cum_total.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'long_alarms.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'frequent_alarms.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'Table_1.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
vent_settings_2[recording],pandas.concat(frmes),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarm_settings_2[recording],pandas.concat(frmes),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
durations,pandas.concat(durations),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
durations,pandas.concat(durations),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
all_durations,pandas.concat(all_durations),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
slow_measurements[recording],"pandas.concat([slow_measurements[recording],
vent_settings_2[recording],alarm_settings_2[recording]],axis=0,join='outer')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
clinical_details,pandas.read_excel('%s/data_grabber_patient_data_combined.xlsx'%CWD),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
delta,numpy.array([(alarm.Date_Time[i]-alarm.Date_Time[i-1]),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stamp,"numpy.array([alarm.index[i-1]
foriinrange(1,length)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"n,bins,patches","matplotlib.pyplot.hist(all_durations,bins=range(0,60)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"n,bins,patches","matplotlib.pyplot.hist(all_durations,bins=range(0,600)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"n,bins,patches","matplotlib.pyplot.hist(all_durations,bins=range(0,50000,60)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"n,bins,patches","matplotlib.pyplot.hist(all_durations,bins=range(0,60)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
flist,"os.listdir('%s/%s'%(DIR_READ,recording)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
flist,"os.listdir('%s/%s'%(DIR_READ,recording)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
flist,"os.listdir('%s/%s'%(DIR_READ,recording)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
flist,"os.listdir('%s/%s'%(DIR_READ,recording)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
flist,"os.listdir('%s/%s'%(DIR_READ,recording)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
numbered,pandas.Series(np.zeros(len(alarm_state),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
numbered,pandas.Series(np.zeros(len(alarm_state),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
numbered,pandas.Series(np.zeros(len(alarm_state),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
numbered,pandas.Series(np.zeros(len(alarm_state),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
recording_times_frame,"pandas.DataFrame([recording_duration,recording_duration_hours,recording_duration_seconds],
index=['days','hours','seconds'])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarm_t,"pandas.DataFrame(data,columns=['time_went_off','duration_seconds'])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
frame,"pandas.DataFrame([data],columns=['numberofevents','numberofeventper24h',
'meanduration(s)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarm_stats_cum_rec,"pandas.DataFrame([total_alarm_number_recordings,
total_alarm_number_recordings_24H,
mean_alarm_duration_recordings,
median_alarm_duration_recordings,
sd_alarm_duration_recordings,
mad_alarm_duration_recordings,
min_alarm_duration_recordings,
pc25_alarm_duration_recordings,
pc75_alarm_duration_recordings,
max_alarm_duration_recordings],
index=['count','countper24h','meanduration(sec)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarm_stats_cum_al,"pandas.DataFrame([total_alarm_number_alarms,
total_alarm_number_alarms_24H,
cum_alarm_duration_alarms,
cum_alarm_duration_alarms_24H,
mean_alarm_duration_alarms,
median_alarm_duration_alarms,
sd_alarm_duration_alarms,
mad_alarm_duration_alarms,
min_alarm_duration_alarms,
pc25_alarm_duration_alarms,
pc75_alarm_duration_alarms,
max_alarm_duration_alarms],
index=['count','countper24h','totalalarmduration(sec)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarm_stats_cum_total,"pandas.DataFrame([total_count,total_count_24H,
mean_duration_total,median_duration_total,
sd_duration_total,mad_duration_total,min_duration_total,
pc25_duration_total,pc75_duration_total,max_duration_total],

columns=['allalarmsinallrecordings'],
index=['totalalarmevents','totalalarmeventsper24hours',
'meanalarmduration(sec)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarms_over_1_hour,"pandas.DataFrame(sorted(alarms_over_1_hour,key=lambdax:x[2],reverse=True)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarms_over_10_min,"pandas.DataFrame(sorted(alarms_over_10_min,key=lambdax:x[2],reverse=True)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarms_over_1_min,"pandas.DataFrame(sorted(alarms_over_1_min,key=lambdax:x[2],reverse=True)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
vent_modes_all,pandas.DataFrame([vent_modes_all]),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
recording_duration_hours_all,pandas.DataFrame([recording_duration_hours]),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
total_recording_time,datetime.timedelta(0),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('fuel_ferc1.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.DataFrame(X,columns=['x','y'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
random_df,"pandas.DataFrame({1:random_bar1,
2:random_bar2})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,pandas.read_csv('./Iris.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['dist'],numpy.sqrt(data['x']**2+data['y']**2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,4,figsize=(17,7)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(17,5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,4,figsize=(17,5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,4,figsize=(17,7)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,4,figsize=(17,7)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,4,figsize=(17,7)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,4,figsize=(17,7)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,4,figsize=(17,7)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(3,4,figsize=(17,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(3,4,figsize=(17,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,seaborn.clustermap(iris.drop(columns='Species'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,seaborn.clustermap(iris.drop(columns='Species'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.clustermap(iris_norm.drop(columns=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm',
'Species'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.clustermap(iris_norm2.drop(columns=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm',
'Species'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_circles(n_samples=n_samples,factor=.5,
noise=.05)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris_norm[col+'_z'],scipy.stats.zscore(iris_norm[col]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(15,4)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,3)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""data.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['DATE'],pandas.to_datetime(data['DATE']),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_json(movies),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
X_std,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_std_test,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
sklearn_pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
sklearn_pca,sklearn.decomposition.PCA(n_components=d),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=d),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
counts,numpy.array(sorted(Counter(y_train),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
classes,numpy.unique(y_train),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.model_selection.cross_val_score(clf,Xred_pca,y)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.model_selection.cross_val_score(clf,Xred_lda,y)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('https://raw.githubusercontent.com/aczepielik/KRKtram/master/reports/report_07-23.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,sklearn.tree.DecisionTreeRegressor(max_depth=10),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.RandomForestRegressor(max_depth=10,n_estimators=50,n_jobs=8)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=3,scoring='neg_mean_absolute_error')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=3,scoring='neg_mean_absolute_error')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"ox,oy","random.randint(0,max_jitter)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
X_fooling_np,numpy.asarray(X_fooling_np),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
diff,"numpy.asarray(deprocess(X_fooling-X_pre,should_rescale=False)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
diff,numpy.asarray(deprocess(10*(X_fooling-X_pre),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
X_grid,numpy.arange(min(X),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_grid,numpy.arange(min(X),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_grid,numpy.arange(min(X),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(mean_squared_error(y,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(mean_squared_error(y,y_pred2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(mean_squared_error(y,y_pred2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(mean_squared_error(y,y_pred2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('C:/Users/aksha/Desktop/ai/datasets/Position_Salaries.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg_2,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg_2,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg_2,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly_reg,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly_reg,sklearn.preprocessing.PolynomialFeatures(degree=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly_reg,sklearn.preprocessing.PolynomialFeatures(degree=4),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"re.sub('not.*?bad','good',s,flags=re.DOTALL)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
A,math.ceil(len(a),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
B,math.ceil(len(b),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df_l,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_r,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_l,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_r,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_l,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_r,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_l,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_r,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_l,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_r,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_l,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_r,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(15,7)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(15,7)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(15,7)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(15,7)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(15,7)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(15,7)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
range_arrays,"numpy.arange(0,10,2)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
a1,"numpy.array([1,2,3])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
a2,"numpy.array([[1,2.2,5.3],[7.4,5,3]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
a3,"numpy.array([[[1,2,3],
[4,5,6],
[7,8,9]],
[[10,11,12],
[13,14,15],
[16,17,18]]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sample_array,"numpy.array([1,2,3])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
high_var_arr,"numpy.array([1,100,200,3000,5000,6000])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
low_var_arr,"numpy.array([2,4,6,8,10])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
zeros,"numpy.zeros((2,3)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ones,"numpy.ones((2,3)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ones,numpy.ones(3),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(a2),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
budget_chungus,"pandas.merge(budget_df,title_df,on='movie_name',how='left')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
budget_df,pandas.read_csv('../.csv/.unzipped-data/tn.movie_budgets.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
title_df,pandas.read_csv('./unzipped-data/imdb.title.basics.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
budget_df['release_date'],"pandas.to_datetime(budget_df['release_date'],format='%b%d,%Y')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
images,numpy.array(images),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
imageTest,numpy.array(imagesTest),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
sample,numpy.array(sample),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
tr_finite,"

matplotlib.pyplot.plot(tr_simple.times()",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('data1.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('D:\PGDBA\Competitions\EXL-Acumen/Acumen_2019_Input.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
submit,pandas.read_csv('D:\PGDBA\Competitions\EXL-Acumen\submit.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
fold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=1994)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=0.20,random_state=1994,stratify=y)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,numpy.array(data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
target,numpy.array(target),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(wine.data,columns=wine.feature_names)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
target,"pandas.DataFrame(wine.target,columns=['TARGET'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([data,target],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(data,target,test_size=0.2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
wine,sklearn.datasets.load_wine(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
class_names,"os.listdir(""../../feature/feature_mfcc/"")",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
files,"os.listdir(""../../feature/feature_mfcc/""+class_names[i])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
val_class_names,"os.listdir(""../../feature/feature_mfcc_validation/"")",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
val_files,"os.listdir(""../../feature/feature_mfcc_validation/""+val_class_names[i])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
X_TF_train,numpy.array(X_TF),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
y_TF_train,numpy.array(y_TF),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
X_TF_pred,numpy.array(X_TF_pred),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
y_TF_pred,numpy.array(y_TF_pred),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
mean_tpr,numpy.zeros_like(all_fpr),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
tempX,"numpy.expand_dims(tempX,axis=0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
tempX,"numpy.expand_dims(tempX,axis=0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
all_fpr,"numpy.unique(np.concatenate([fpr[i]foriinrange(0,len(class_names)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
x,"numpy.load(""../../feature/feature_mfcc/""+class_names[i]+""/""+files[j])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
array,"numpy.load(""../../feature/feature_mfcc/""+cname+""/""+fname)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
array,"numpy.load(""../../feature/feature_mfcc_validation/""+cname+""/""+fname)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
"X_TF_train,X_TF_test,y_TF_train,y_TF_test","sklearn.model_selection.train_test_split(X_TF_train,y_TF_train,test_size=0.30,random_state=42,stratify=y_TF_train)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.LinearSVC(random_state=0,tol=1e-5)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.LinearSVC(random_state=0,tol=1e-5)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
"fpr[i],tpr[i],_","sklearn.metrics.roc_curve(y_TF_test_encoded[:,i],y_TF_score[:,i])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
"fpr[""micro""],tpr[""micro""],_",sklearn.metrics.roc_curve(y_TF_test_encoded.ravel(),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
roc_auc[i],"sklearn.metrics.auc(fpr[i],tpr[i])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
"roc_auc[""micro""]","sklearn.metrics.auc(fpr[""micro""],tpr[""micro""])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
"roc_auc[""macro""]","sklearn.metrics.auc(fpr[""macro""],tpr[""macro""])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
gbrt,sklearn.ensemble.GradientBoostingClassifier(random_state=0),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
figsize,"numpy.array([8*n_change,4])",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
axes,numpy.array([axes]),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
figsize,"numpy.array([8,4.5])",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,n_change,figsize=figsize,dpi=150,sharey=True)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.1,random_state=0)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
a,"numpy.array([[1,2,3],[5,6,7]])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
x,"numpy.array([[1,2],[3,4]])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
y,"numpy.array([[5,6],[7,8]])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
plot_tokens,"pandas.DataFrame(plot_tokens,columns=v.get_feature_names()",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.concat([movies_list,pd.get_dummies(movies_list.genre,prefix='genre')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.concat([movies_list,pd.get_dummies(movies_list.mpaa,prefix='rated')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.concat([movies_list,plot_tokens],axis=1)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
actors,"pandas.merge(actors,actor_ratings,on='actor_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
directors_list,"pandas.merge(directors_list,director_ratings,on='director_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
writers_list,"pandas.merge(writers_list,writer_ratings,on='writer_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,actors,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,directors_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,writers_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,budget_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,genres_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,gross_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,mpaa_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,plot_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,votes_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,"pandas.merge(movies_list,movie_ratings,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.pivot_table(movies_list,
index='movie_id',
values='avg_actor_rating',
aggfunc=np.mean)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.pivot_table(movies_list,
index=['movie_id','avg_actor_rating'],
values='avg_director_rating',
aggfunc=np.mean)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.pivot_table(movies_list,
index=['movie_id','avg_actor_rating','avg_director_rating'],
values='avg_writer_rating',
aggfunc=np.mean)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.pivot_table(movies_list,
index=['movie_id','avg_actor_rating',
'avg_director_rating','avg_writer_rating',
'budget'
],
aggfunc=np.sum)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gross_list,"pandas.pivot_table(gross_list,index='movie_id',values='gross',aggfunc=np.sum)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
plot_list,"pandas.pivot_table(plot_list,index='movie_id',values='plot',aggfunc=lambdax:''.join(x)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
actor_ratings,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
actors,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
director_ratings,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
writer_ratings,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
budget_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
directors_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
writers_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
genres_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gross_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mpaa_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
plot_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
votes_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movie_ratings,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
actor_ratings,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
actors,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
director_ratings,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
writer_ratings,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
budget_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
directors_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
writers_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
genres_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gross_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mpaa_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
plot_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
votes_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movie_ratings,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(importances),CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(importances),CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
std,"numpy.std([tree.feature_importances_fortreeinrf.estimators_],axis=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
std,"numpy.std([tree.feature_importances_fortreeinet.estimators_],axis=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,dummy_variable_1],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,dummy_variable_2],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df['horsepower-binned'],"pandas.cut(df['horsepower'],bins,labels=group_names,include_lowest=True)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dummy_variable_1,"pandas.get_dummies(df[""fuel-type""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dummy_variable_2,pandas.get_dummies(df['aspiration']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(filename,names=headers)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(min(df[""horsepower""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(importances),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
summary,"pandas.DataFrame(df.dtypes,columns=['dtypes'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfscores,pandas.DataFrame(fit.scores_),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfcolumns,pandas.DataFrame(X.columns),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feat_importances,"pandas.Series(model.feature_importances_,index=X.columns)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
featureScores,"pandas.concat([dfcolumns,dfscores],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_raw,"pandas.get_dummies(df_raw,columns=col,
drop_first=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_raw,pandas.read_excel('No-Churn_Telecom_Europe_renamed.xlsx'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_raw,"pandas.read_sql(query,conn)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestfeatures,"sklearn.feature_selection.SelectKBest(score_func=chi2,k=10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.ExtraTreesClassifier(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtree,"sklearn.tree.DecisionTreeClassifier(

class_weight=""balanced"",
min_weight_fraction_leaf=0.01
)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.10,random_state=123,stratify=y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data,"pandas.read_csv(""inp_data.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
node_data,"pandas.read_csv(""inp_other.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
edge_data,"pandas.read_csv(""inp_distance_data.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
branch_data,"pandas.read_csv(""inp_loc.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
missing_data,"pandas.read_csv(""inp_missing_information.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data,"pandas.read_csv(""inp_outlier.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
missing_data['date'],pandas.to_datetime(missing_data['date']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data['date'],pandas.to_datetime(dirty_data.date),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data['date'],pandas.to_datetime(dirty_data['date']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['date'],pandas.to_datetime(outlier_data['date']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data['time'],pandas.to_timedelta(dirty_data['time'].str.strip(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ifdirty_data['time'][i]>,datetime.timedelta(hours=8),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
anddirty_data['time'][i]<,datetime.timedelta(hours=12),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
anddirty_data['time'][i]<,datetime.timedelta(hours=16),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
anddirty_data['time'][i]<,datetime.timedelta(hours=20),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm_ns,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm_tp,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm_bk,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.array(break_eqs[5:9],dtype=float)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"numpy.array(break_sol[5:9],dtype=float)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.array(lunch_eqs[0:5],dtype=float)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"numpy.array(lunch_sol[0:5],dtype=float)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.array(dinner_eqs[5:9],dtype=float)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"numpy.array(dinner_sol[5:9],dtype=float)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
index,numpy.where(break_prices==price),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
index,numpy.where(lunch_prices==price),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
index,numpy.where(dinner_prices==price),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['residual'][i],numpy.absolute(((outlier_data['delivery_fee'][i]*2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['residual'][i],numpy.absolute((outlier_data['delivery_fee'][i]-predictions_ns[count_ns]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['residual'][i],numpy.absolute(((outlier_data['delivery_fee'][i]*2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['residual'][i],numpy.absolute((outlier_data['delivery_fee'][i]-predictions_tp[count_tp]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['residual'][i],numpy.absolute(((outlier_data['delivery_fee'][i]*2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['residual'][i],numpy.absolute((outlier_data['delivery_fee'][i]-predictions_bk[count_bk]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q1,"numpy.percentile(ns.residual,25)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q3,"numpy.percentile(ns.residual,75)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q1,"numpy.percentile(tp.residual,25)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q3,"numpy.percentile(tp.residual,75)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q1,"numpy.percentile(bk.residual,25)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q3,"numpy.percentile(bk.residual,75)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
break_prices,"numpy.linalg.solve(a,b)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lunch_prices,"numpy.linalg.solve(a,b)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dinner_prices,"numpy.linalg.solve(a,b)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data['order_items'][i],"re.sub(outter,break_menu[index],dirty_data['order_items'][i])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data['order_items'][i],"re.sub(outter,lunch_menu[index],dirty_data['order_items'][i])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data['order_items'][i],"re.sub(outter,dinner_menu[index],dirty_data['order_items'][i])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
max_sims,collections.Counter(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
max_sims,collections.Counter(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
max_sims,collections.Counter(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ll_dist_matrix,"pandas.DataFrame(ll_dists,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pmi_dist_matrix,"pandas.DataFrame(pmi_dists,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
raw_dist_matrix,"pandas.DataFrame(raw_dists,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_ll_dist_matrix,"pandas.DataFrame(pca_dists_ll,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_pmi_dist_matrix,"pandas.DataFrame(pca_dists_pmi,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_raw_dist_matrix,"pandas.DataFrame(pca_dists_raw,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
jacc_dist,"pandas.DataFrame(jacc_dist_pair,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ratio_raw_dist,"pandas.DataFrame(ratio_raw_pair,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,6)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
r,requests.get('https://api.github.com/events'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
r,requests.get('https://cat-fact.herokuapp.com/facts'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"return(100.0*np.sum(np.argmax(predictions,1)","=numpy.argmax(labels,1)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
trainX,"numpy.linspace(-1,1,101)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([0,1,2,2,1])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
correct_scores,"numpy.asarray([
[-0.81233741,-1.27654624,-0.70335995],
[-0.17129677,-1.18803311,-0.47310444],
[-0.51590475,-1.01354314,-0.8504215],
[-0.15419291,-0.48629638,-0.52901952],
[-0.00618733,-0.12435261,-0.15226949]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
channel_states,"numpy.zeros(proxy.number_of_channels,dtype=int)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
channel_states,"numpy.zeros(proxy.number_of_channels,dtype=int)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
v_gnd,numpy.mean(df_volts),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
v_abs_mean,numpy.mean(v_abs),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
v_filtered_mean,numpy.mean(v_abs[v_abs<filter_th]),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_volts,"pandas.DataFrame({'volts':
self.analog_reads_simple(11,n_samples)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_capacitances,"pandas.DataFrame([proxy.measure_capacitance(n_samples=n_samples,
amplitude=methods)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s_channel_states,"pandas.Series(N*[1],index=range(N)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s_channel_states,"pandas.Series(actuated_channels_count*[1],
index=range(actuated_channels_count)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(10,4)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""train.csv"",parse_dates=[""date""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv('test.csv',parse_dates=['date'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,pandas.read_csv('sample_submission.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(nrows=3,ncols=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(nrows=3,ncols=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.RandomForestRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_data,"pandas.read_csv(path+'used_car_train_20200313.csv',sep='')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
test_data,"pandas.read_csv(path+'used_car_testA_20200313.csv',sep='')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(14,14)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
response_data,requests.get(url),CLUSTER_27,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,requests.get(query_url),CLUSTER_27,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(data_dict),CLUSTER_27,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
ind,numpy.arange(N),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
X_train,numpy.array(flattened),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
y_train,numpy.array(y_train),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
"h,w",numpy.array(img_resized),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
X_test,numpy.array(flattened),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
y_test,numpy.array(y_test),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
labels,"numpy.fromfile(f,dtype=np.uint8)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
everything,"numpy.fromfile(f,dtype=np.uint8)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
pred,numpy.argmax(cnn1.predict(X_test_temp),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat,numpy.argmax(cnn1.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
pred,numpy.argmax(cnn2.predict(X_test_temp),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat,numpy.argmax(cnn2.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat,numpy.argmax(cnn1.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat,numpy.argmax(cnn2.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat,numpy.argmax(cnn1.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat,numpy.argmax(cnn2.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat_cnn,numpy.argmax(cnn.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat_mlp,numpy.argmax(mlp.predict(X_test),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
images,"numpy.reshape(everything,(-1,3,96,96)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
images,"numpy.transpose(images,(0,3,2,1)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
error,numpy.var(mean_fpr),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
error,numpy.var(mean_fpr),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
mean_fpr,"numpy.linspace(0,1,100)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
x_train_up,"numpy.stack(x_train_up,axis=0)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
x_test_up,"numpy.stack(x_test_up,axis=0)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
X_train_cnn,"numpy.expand_dims(X_train.reshape((-1,img_wh,img_wh)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
X_test_cnn,"numpy.expand_dims(X_test.reshape((-1,img_wh,img_wh)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
classes,numpy.unique(y_train),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,
pred[:,int(j)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,
pred_mlp[:,int(j)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
roc_auc+,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
roc_auc+,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
skf,"sklearn.model_selection.StratifiedKFold(n_splits=4,shuffle=True,random_state=64)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
skf,"sklearn.model_selection.StratifiedKFold(n_splits=4,shuffle=True,random_state=64)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
t,time.localtime(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
cf_a,numpy.array(cf),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
add_cf,"numpy.array([10,20,-10,30,10,-5])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,numpy.array(l),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([50,100,120,150,200,300])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([50,100,120,150,200,300])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf_add,"numpy.array([10,20,5,-10,20,10])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([-200,20,50,70,100,50])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
n,"numpy.array([0,1,2,3,4,5])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([100,10,20,50,30,25])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf1,"numpy.array([100,10,20,50,30,25])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf1,"numpy.array([100,10,20,50,30,25])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf1,"numpy.array([100,10,20,50,30,25])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([100,10,20,50,30,25])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([-200,20,50,70,100,50])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([-200,20,50,70,100,50])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([-200,20,50,70,100,50])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([-200,20,50,70,100,50])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.sin(x),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-10,10,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(10,5)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.5)",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
dummy,sklearn.dummy.DummyClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X,y",numpy.array(songs),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
embedding_matrix,"numpy.zeros((max_words,word_vec_size)",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(data={'fruit':[""banana"",""apple"",""banana"",""apple"",""banana"",""apple"",""banana"",
""apple"",""apple"",""apple"",""banana"",""banana"",""apple"",""banana"",],
'tasty':[""yes"",""no"",""yes"",""yes"",""yes"",""yes"",""yes"",
""yes"",""yes"",""yes"",""yes"",""no"",""no"",""no""],
'size':[""large"",""large"",""large"",""small"",""large"",""large"",""large"",
""small"",""large"",""large"",""large"",""large"",""small"",""small""]})",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(raw_data,columns=['D','I','G','L','S'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(np.random.randint(0,4,size=(5000,2)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(np.random.randint(0,3,size=(2500,8)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""https://serv.cusp.nyu.edu/classes/ML_2016_Spring/ML_2017/NYC_taxi_sample.csv"",index_col=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
qtable,"numpy.zeros((state_size,action_size)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
action,"numpy.argmax(qtable[state,:])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
action,"numpy.argmax(qtable[state,:])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,matplotlib.pyplot.figure(i),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(6,8)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
fig,"matplotlib.pyplot.figure(i,figsize=(16,5)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
fig,"matplotlib.pyplot.figure(i,figsize=(16,5)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
cmap,"seaborn.cubehelix_palette(light=1,as_cmap=True)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
cmap,"seaborn.cubehelix_palette(light=1,as_cmap=True)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
cmap,"seaborn.cubehelix_palette(light=1,as_cmap=True)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmi,math.log((pxy+0.0001),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmi,math.log(pxy/(px*py),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmi,math.log((pxy+0.0001),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmi,math.log(pxy/(px*py),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
reviewDf,pandas.DataFrame(pdlist),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
freqReviewDf,pandas.DataFrame(freqReview),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
freqReviewDf,pandas.DataFrame(freqReview),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
miScoredf,pandas.DataFrame(miScore),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmidf,pandas.DataFrame(pmilist),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmidf,pandas.DataFrame(pmilist),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmiposlist,pandas.DataFrame(pmiposlist),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmineglist,pandas.DataFrame(pmineglist),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
hotelDfRaw,"pandas.read_csv('reviews.csv',header=None)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
bins,"numpy.linspace(-1,1,100)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
counter,collections.Counter(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
tempCounter,collections.Counter([word.lower(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
counter,collections.Counter(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
counter,collections.Counter(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
c_pos,collections.Counter(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
c_neg,collections.Counter(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
tempCounter,"collections.Counter(flatten([word
forword
inget_terms(chunker.parse(pos_tag(re.findall(r'\w+',reviews[i])",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
tiny_image,"numpy.array([[0,20,30,150,120],
[200,200,250,70,3],
[50,180,85,40,90],
[240,100,50,255,10],
[30,0,75,190,220]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tiny_image,"numpy.array([[0,200,200,200,0],
[0,0,200,0,0],
[0,200,0,200,0],
[0,200,200,200,0],
[0,200,200,200,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
max_val,numpy.amax(gray_image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
min_val,numpy.amin(gray_image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
extras,numpy.ones((image.shape),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
T,"numpy.float32([[1,0,quater_width],[0,1,quater_height]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x_values,"numpy.linspace(0,1,100)",CLUSTER_1,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dataframe1,pandas.read_csv(fullpath),CLUSTER_1,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(""nst-est2017-alldata.csv"")",CLUSTER_1,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dataframe,pandas.read_csv(fullpath),CLUSTER_1,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
training_data_len,math.ceil(len(dataset),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,y_train",numpy.array(x_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_test,numpy.array(x_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,numpy.array(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_train,"numpy.reshape(x_train,(x_train.shape[0],x_train.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_test,"numpy.reshape(x_test,(x_test.shape[0],x_test.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,"numpy.reshape(X_test,(X_test.shape[0],X_test.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,numpy.sqrt(np.mean(((predictions-y_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"get_history(symbol=symbol,start=datetime.date(2010,1,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"get_history(symbol=symbol,start=date(2010,1,1),end=datetime.date.today()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(link,sep='\t')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_json,pandas.read_json('./data/world-heritage-unesco-list.json'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"x,y",numpy.array(x),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
padding,"numpy.zeros((for_predict.shape[0],dataset.shape[1]-1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.reshape(y,(y.shape[0],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
for_predict,"numpy.reshape(for_predict,(1,for_predict.shape[0],for_predict.shape[1])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
predictions_scaled,"numpy.append(padding,predictions_scaled,axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,pandas.read_csv('dataset.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"dataset.iloc[i,4]","datetime.datetime.strptime(dataset.iloc[i,4],'%m/%d/%Y')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=test_size,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"math.sqrt(mean_squared_error(predictions,actual_values)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labels,pandas.DataFrame(iris.target),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.DataFrame(iris.data),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predict,pandas.DataFrame(model.fit_predict(feature),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predict,pandas.DataFrame(pipeline.fit_predict(feature),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([data,labels],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r,"pandas.concat([feature,predict],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r,"pandas.concat([feature,predict],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ct,"pandas.crosstab(data['labels'],r['predict'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ct,"pandas.crosstab(data['labels'],r['predict'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.cluster.DBSCAN(eps=0.3,min_samples=6)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,model=sklearn.cluster.DBSCAN(min_samples=6),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.make_pipeline(scaler,model)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(4,3)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(4,3)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(4,3)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(4,3)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(4,3)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(5,4)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(5,4)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.zeros((xsize,ysize,len(InterpDepth)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.zeros((xsize,ysize,len(Depth)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.zeros((xsize,ysize,len(Depth)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.zeros((xsize,len(yvec)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
grid_zeros,"numpy.zeros((xsize,ysize,len(Depth)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
grid_zeros,"numpy.zeros((xsize,ysize,len(Depth)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dt,numpy.dtype('>f8'),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.fromfile(filen,dt)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
zi,"numpy.concatenate((np.arange(5,260,5)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tracer[:,:,kk]","numpy.ones((xsize,ysize)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tracer[:,:,kk]","numpy.ones((xsize,ysize)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tracer[:,:,kk]","numpy.ones((xsize,ysize)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tracer[:,:,kk]","numpy.ones((xsize,ysize)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.ones((xsize,ysize,len(Depth)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer_rsh,"numpy.reshape(tracer,(nx,ny,len(zi)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.expand_dims(numpy.expand_dims(C1d,0)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.expand_dims(numpy.expand_dims(C1d,0)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.sin(np.arange(0,SEQ_LEN)",CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
cb,matplotlib.pyplot.colorbar(),CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
f,"matplotlib.pyplot.figure(figsize=(19,15)",CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
df1,pandas.read_csv('./Data/journeys.csv'),CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
df2,pandas.read_csv('./Data/stations.csv'),CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
text,"re.sub(r""[^a-zA-Z0-9]"","""",text.lower()",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
predictions,numpy.array([]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
test_data,numpy.array([numpy.array([len_test]+test_data_int),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
predictions,"numpy.append(predictions,predictor.predict(array)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
split_array,"numpy.array_split(data,int(data.shape[0]/float(rows)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
test_X,pandas.concat([pd.DataFrame(test_X_len),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
train_sample,"pandas.read_csv(os.path.join(data_dir,'train.csv')",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
positive_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
negative_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
total_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
pos_neg_ratios,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
review_counter,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
frequency_frequency,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
positive_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
negative_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
total_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
pos_neg_ratios,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
layer_0,numpy.zeros(10),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
layer_1,numpy.zeros(5),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_1,"numpy.zeros((1,hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_1,"numpy.zeros((1,hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
"hist,edges","numpy.histogram(list(map(lambdax:x[1],pos_neg_ratios.most_common()",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
"hist,edges","numpy.histogram(list(map(lambdax:x[1],frequency_frequency.most_common()",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
state_town,"pandas.DataFrame(state_town,columns=['State','RegionName'])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
university_town,"pandas.merge(housing_data,university_towns_data,how='inner',left_on=['State','RegionName'],right_on=['State','RegionName'])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('data/City_Zhvi_AllHomes.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,"pandas.read_excel('data/gdplev.xls',skiprows=220,usecols=[4,6],header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,"pandas.read_excel('data/gdplev.xls',skiprows=220,usecols=[4,6],header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,"pandas.read_excel('data/gdplev.xls',skiprows=220,usecols=[4,6],header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,"pandas.read_fwf('data/university_towns.txt',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
pred_proba_df,"pandas.DataFrame({
'true':test_data.classes,
'pred_prob':y_pred_class.flatten()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('../data/annotation/test_annotation.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv('../data/annotation/train_annotation.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pred_arg_class,"numpy.argmax(y_pred_class,axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(test_data.classes,y_pred_class)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
report,"sklearn.metrics.classification_report(test_data.classes,y_pred_class)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_text,"numpy.array([[int(re.sub(r""\n"","""",sent)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
x_text,numpy.array(list(vocab_processor.fit_transform(all_examples),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
x_text,numpy.array(x_text),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
featureVec,"numpy.zeros((num_features,)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
featureVec,"numpy.add(featureVec,model[word])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
featureVec,"numpy.divide(featureVec,nwords)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
time_str,datetime.datetime.now(),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
time_str,datetime.datetime.now(),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""[^A-Za-zа-яА-Я0-9()",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\'s"",""\'s"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\'ve"",""\'ve"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""n\'t"",""n\'t"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\'re"",""\'re"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\'d"",""\'d"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\'ll"",""\'ll"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r"","","","",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""!"",""!"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\("",""\("",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\?"",""\?"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\s{2,}"","""",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
merged,"pandas.merge(begins,ends[['tripid','dayofservice','routeid','end']],on=['tripid','dayofservice','routeid'])",CLUSTER_27,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
routes,"json.loads(open('/home/student/dbanalysis/dbanalysis/resources/trimmed_routes.json','r')",CLUSTER_27,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_27,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
human_files,"numpy.array(glob(""/data/lfw/*/*"")",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
dog_files,"numpy.array(glob(""/data/dog_images/*/*/*"")",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
correct+,numpy.sum(np.squeeze(pred.eq(target.data.view_as(pred),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
hih,numpy.average([face_detector(img),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
hid,numpy.average([face_detector(img),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
dih,numpy.average([dog_detector(img),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
did,numpy.average([dog_detector(img),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
df,pandas.read_csv('train.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
gradient,"numpy.zeros((m,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
w,"numpy.zeros((m,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
init_w,"numpy.zeros((5,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
totalError,"numpy.dot(res.T,res)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
totalError,"numpy.dot(res.T,res)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
m,"numpy.size(w_current,0)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
gradient,"numpy.sum(np.multiply(res,X)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
points,"numpy.genfromtxt(""sample_treino.csv"",delimiter="","",skip_header=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
encoded_labels,numpy.array([1iflabel=='positive'else0forlabelinlabels_split]),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
encoded_labels,numpy.array([encoded_labels[ii]foriiinnon_zero_idx]),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
"features[i,-len(row):]",numpy.array(row),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
features,numpy.zeros((len(reviews_ints),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
correct,numpy.squeeze(correct_tensor.numpy(),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
num_correct+,numpy.sum(correct),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
counts,collections.Counter(words),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
review_lens,collections.Counter([len(x),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
common_systems[item],pandas.DataFrame(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
common_systems[item],pandas.DataFrame(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
common_systems[item],pandas.DataFrame(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
oqmd_data,"pandas.read_csv('../data/oqmd_all.data',delim_whitespace=True)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
elem_re,re.compile('[A-Z][a-z]?'),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
splot,"matplotlib.pyplot.subplot(2,1,1+index)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
t0,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elapsed_time,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
core_samples_mask,"numpy.zeros_like(db.labels_,dtype=bool)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
angle,numpy.arctan(u[1]/u[0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labels_unique,numpy.unique(labels),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,pandas.read_csv('./big_table.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sd,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_red,sklearn.manifold.SpectralEmbedding(n_components=2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Hclustering_10,"sklearn.cluster.AgglomerativeClustering(n_clusters=10,
affinity=""euclidean"",linkage=""ward"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Hclustering_4,"sklearn.cluster.AgglomerativeClustering(n_clusters=4,
affinity=""euclidean"",linkage=""ward"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.cluster.AgglomerativeClustering(linkage=linkage_method,
connectivity=connectivity,
n_clusters=n_clusters)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn_graph,"sklearn.neighbors.kneighbors_graph(X_green,30,include_self=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ms,"sklearn.cluster.MeanShift(bandwidth=bandwidth,bin_seeding=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bandwidth,"sklearn.cluster.estimate_bandwidth(X_green,quantile=0.2,n_samples=500)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=0.3,min_samples=10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
birch,sklearn.cluster.Birch(n_clusters=n_clusters),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dpgmm,"sklearn.mixture.BayesianGaussianMixture(n_components=5,
covariance_type='full')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gmm,"sklearn.mixture.GaussianMixture(n_components=5,covariance_type='full')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"v,w",scipy.linalg.eigh(covar),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_titanic,pandas.read_csv('titanic-data-6.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
graph_1,"seaborn.barplot(x='Pclass',y='Survived',data=df_titanic)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
graph_2,"seaborn.barplot(x='Sex',y='Survived',data=df_titanic)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
graph_3,"seaborn.barplot(x='Faixa',y='Survived',data=df_titanic)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
graph_6,"seaborn.pointplot(x='Pclass',y='Survived',hue='Embarked',data=df_titanic)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df1,pandas.DataFrame(scaler.fit_transform(df1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data1,pandas.DataFrame(scaler.fit_transform(data1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resultols,"pandas.DataFrame(resultols,columns=[""Actual"",""Predicted""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.get_dummies(df),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""C:\\Users\\Neel\\Desktop\\GreyatomCodes\\PracticeDatasets\\gapminder.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""C:\\Users\\Neel\\Desktop\\GreyatomCodes\\PracticeDatasets\\gapminder.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.arange(3,12)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.arange(3,12)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,math.sqrt(mse),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmseL,math.sqrt(mseL),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmseLO,math.sqrt(mseLO),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmseRFE,math.sqrt(mseRFE),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knnc,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linregols,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linregrfe,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rL2,"sklearn.metrics.r2_score(yL_test,yL_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rLO2,"sklearn.metrics.r2_score(yLO_test,yLO_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rRFE2,"sklearn.metrics.r2_score(yRFE_test,yRFE_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mae,"sklearn.metrics.mean_absolute_error(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
maeL,"sklearn.metrics.mean_absolute_error(yL_test,yL_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
maeLO,"sklearn.metrics.mean_absolute_error(yLO_test,yLO_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
maeRFE,"sklearn.metrics.mean_absolute_error(yRFE_test,yRFE_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mse,"sklearn.metrics.mean_squared_error(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mseL,"sklearn.metrics.mean_squared_error(yL_test,yL_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mseLO,"sklearn.metrics.mean_squared_error(yLO_test,yLO_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mseRFE,"sklearn.metrics.mean_squared_error(yRFE_test,yRFE_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfe,"sklearn.feature_selection.RFE(model,4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(np.random.randn(6,4)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame({'A':1.,
'B':pd.Timestamp('20130102')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df3,"pandas.DataFrame([{'A':1,'B':2},{'C':3}])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,pandas.Series(l),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,"pandas.Series(l,index=daty)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,pandas.Series(np.random.randn(5),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
daty,"pandas.date_range('20170101',periods=6)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
training_array,numpy.array(training_array),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
testing_array,numpy.array(testing_array),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.array(y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.array(y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_pl_array,numpy.asarray(X_train['fuso']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_pw_array,numpy.asarray(X_train['strep']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_pl_array,numpy.asarray(X_test['fuso']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_pw_array,numpy.asarray(X_test['strep']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
confuse,"pandas.DataFrame(confusion_matrix(y_test,prediction)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('gum_disease_data.txt',sep='\t',index_col=False,low_memory=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cmap,"seaborn.diverging_palette(20,220,n=200)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(
corr,
vmin=-1,vmax=1,center=0,
cmap=sns.diverging_palette(20,220,n=200)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df.iloc[:,~df.columns.isin(['status','id'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df.iloc[:,~df.columns.isin(['status','id'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_gini,"sklearn.tree.DecisionTreeClassifier(criterion=""gini"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dot_data,"sklearn.tree.export_graphviz(clf_gini,out_file=None,
feature_names=X_train.columns
)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svc_clf,sklearn.svm.SVC(gamma='auto'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lsvc_clf,"sklearn.svm.LinearSVC(random_state=0,tol=1e-5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test_pred,numpy.asarray(lr.predict(X_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_cv_err,"numpy.mean(train_cv_err,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_cv_err,"numpy.mean(test_cv_err,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr,X,y,cv","5,train_sizes=numpy.linspace(.1,1.0,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scoring_df,"pandas.DataFrame({'prediction':X_test_pred,'actual':y_test})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
features,"pandas.concat([congress_df.iloc[:,1:10],congress_df.iloc[:,11:]],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
congress_df,"pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/voting-records/house-votes-84.data',
header=None)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
congress_df,"pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/voting-records/house-votes-84.data',
header=None)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
movie_df,pandas.read_csv('2013_movies.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
survival_df,pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/haberman/haberman.data'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
movie_df['ReleaseDate'],pandas.to_datetime(movie_df['ReleaseDate']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,target,test_size=.30,random_state=4444)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k[0]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,knn.predict(X_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_acc,"sklearn.metrics.accuracy_score(y_test,lr.predict(X_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,knn.predict(X_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dem_acc,"sklearn.metrics.accuracy_score(target,simple_predictor(features,'democrat')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rep_acc,"sklearn.metrics.accuracy_score(target,simple_predictor(features,'republican')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(y_test,model.predict(X_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"m,train_cv_err,test_cv_err","sklearn.model_selection.learning_curve(model[1],features,target)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
lr,X,y,cv=5,train_sizes=np.linspace(.1,1.0,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cvs,"sklearn.model_selection.cross_val_score(model,features,target,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.model_selection.cross_val_score(knn,X,y,scoring='accuracy',cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1,"numpy.array([points[:,0].min()",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
top_region,"numpy.array([np.random.normal(10,2,n_pts)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
bottom_region,"numpy.array([np.random.normal(5,2,n_pts)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y,numpy.array([np.zeros(n_pts),CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
point,"numpy.array([[x,y]])",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
point,"numpy.array([[x,y]])",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
bias,numpy.ones(n_pts),CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x_span,"numpy.linspace(min(X[:,0])",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y_span,"numpy.linspace(min(X[:,1])",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x_span,"numpy.linspace(min(X[:,0])",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y_span,"numpy.linspace(min(X[:,1])",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
all_points,"numpy.vstack((top_region,bottom_region)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
line_parameters,numpy.matrix([np.zeros(3),CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(x_span,y_span)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(x_span,y_span)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
ln,"matplotlib.pyplot.plot(x1,x2)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"_,ax","matplotlib.pyplot.subplots(figsize=(4,4)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_blobs(n_samples=n_pts,random_state=123,
centers=centers,cluster_std=0.4)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_circles(n_samples=n_pts,random_state=123
,noise=0.1,factor=0.2)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
C,"numpy.empty((m,q)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
C,"numpy.empty((m,q)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
count,collections.Counter(num),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
csv_df,"pandas.read_csv('dataset5.csv',
sep=',',
header=0,
parse_dates=True,
encoding='ISO-8859-1')",CLUSTER_1,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
count,collections.defaultdict(int),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
unigram_counts,collections.defaultdict(int),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
unigram_probs,collections.defaultdict(float),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
self._count_table[history],collections.defaultdict(int),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
self._prob_table[history],collections.defaultdict(float),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
self._count_table[history],collections.defaultdict(lambda:self._alpha),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
self._prob_table[history],collections.defaultdict(float),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
sentence_probability_sum+,numpy.log(word_probability),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
prob_sum+,numpy.log(p),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
prob_sum+,numpy.log(p),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
new_pval,pandas.Series(index=remaining_features),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_pval,pandas.Series(index=remaining_features),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,"pandas.read_csv('./dataset/winequality_red.csv',encoding='utf_8_sig')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(dataset,label,test_size=0.3,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Lasso,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Linear,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Ridge,sklearn.linear_model.Ridge(alpha=0.1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(7,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
type_of_accommodation,"pandas.DataFrame(a,columns=['type_of_accommodation0','type_of_accommodation1'])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
type_of_house,"pandas.DataFrame(a,columns=['type_of_house0','type_of_house1','type_of_house2',
'type_of_house3','type_of_house4','type_of_house5',
'type_of_house6','type_of_house7',])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
repair,"pandas.DataFrame(a,columns=['repair0','repair1','repair2',
'repair3','repair4','repair5'])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
district,"pandas.DataFrame(a,columns=['district0','district1','district2','district3','district4','district5',
'district6','district7','district8','district9','district10','district11',
'district12','district13'])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
rooms_data,pandas.read_csv('rooms.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
rooms_data,pandas.read_csv('rooms_onehot.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
one,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
expected_next_w,"numpy.asarray([
[0.1406,0.20738947,0.27417895,0.34096842,0.40775789],
[0.47454737,0.54133684,0.60812632,0.67491579,0.74170526],
[0.80849474,0.87528421,0.94207368,1.00886316,1.07565263],
[1.14244211,1.20923158,1.27602105,1.34281053,1.4096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_velocity,"numpy.asarray([
[0.5406,0.55475789,0.56891579,0.58307368,0.59723158],
[0.61138947,0.62554737,0.63970526,0.65386316,0.66802105],
[0.68217895,0.69633684,0.71049474,0.72465263,0.73881053],
[0.75296842,0.76712632,0.78128421,0.79544211,0.8096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[0.08714,0.15246105,0.21778211,0.28310316,0.34842421],
[0.41374526,0.47906632,0.54438737,0.60970842,0.67502947],
[0.74035053,0.80567158,0.87099263,0.93631368,1.00163474],
[1.06695579,1.13227684,1.19759789,1.26291895,1.32824]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_velocity,"numpy.asarray([
[0.5406,0.55475789,0.56891579,0.58307368,0.59723158],
[0.61138947,0.62554737,0.63970526,0.65386316,0.66802105],
[0.68217895,0.69633684,0.71049474,0.72465263,0.73881053],
[0.75296842,0.76712632,0.78128421,0.79544211,0.8096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.39223849,-0.34037513,-0.28849239,-0.23659121,-0.18467247],
[-0.132737,-0.08078555,-0.02881884,0.02316247,0.07515774],
[0.12716641,0.17918792,0.23122175,0.28326742,0.33532447],
[0.38739248,0.43947102,0.49155973,0.54365823,0.59576619]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_cache,"numpy.asarray([
[0.5976,0.6126277,0.6277108,0.64284931,0.65804321],
[0.67329252,0.68859723,0.70395734,0.71937285,0.73484377],
[0.75037008,0.7659518,0.78158892,0.79728144,0.81302936],
[0.82883269,0.84469141,0.86060554,0.87657507,0.8926]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.40094747,-0.34836187,-0.29577703,-0.24319299,-0.19060977],
[-0.1380274,-0.08544591,-0.03286534,0.01971428,0.0722929],
[0.1248705,0.17744702,0.23002243,0.28259667,0.33516969],
[0.38774145,0.44031188,0.49288093,0.54544852,0.59801459]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_a,"numpy.asarray([
[0.69966,0.68908382,0.67851319,0.66794809,0.65738853,],
[0.64683452,0.63628604,0.6257431,0.61520571,0.60467385,],
[0.59414753,0.58362676,0.57311152,0.56260183,0.55209767,],
[0.54159906,0.53110598,0.52061845,0.51013645,0.49966,]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_v,"numpy.asarray([
[0.48,0.49947368,0.51894737,0.53842105,0.55789474],
[0.57736842,0.59684211,0.61631579,0.63578947,0.65526316],
[0.67473684,0.69421053,0.71368421,0.73315789,0.75263158],
[0.77210526,0.79157895,0.81105263,0.83052632,0.85]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_test_pred,numpy.argmax(model.loss(data['X_test']),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_val_pred,numpy.argmax(model.loss(data['X_val']),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
a,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
a,"numpy.linspace(0.7,0.5,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
matrixPD,pandas.DataFrame(data=np.matlib.zeros((len(userToTree),CLUSTER_5,CLUSTER_9,CLUSTER_9,CLUSTER_9,CLUSTER_0
csv_data,pandas.read_csv('trade_new.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_9,CLUSTER_9,CLUSTER_0
finshDeque,collections.deque(),CLUSTER_5,CLUSTER_9,CLUSTER_9,CLUSTER_9,CLUSTER_0
waitingDeque,collections.deque(),CLUSTER_5,CLUSTER_9,CLUSTER_9,CLUSTER_9,CLUSTER_0
f,numpy.cos(t),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
t,"numpy.linspace(0,10,51)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
filenames,os.listdir(dirpath),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
filenames,os.listdir(dirpath),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
dtobj,"datetime.datetime.strptime(dtstr,""%Y-%m-%d_%H-%M-%S"")",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
dtobj,"datetime.datetime.strptime(dtstr,""%Y-%m-%d_%H-%M-%S"")",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
utc,datetime.datetime.utcfromtimestamp(mtime),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
utc,datetime.datetime.utcfromtimestamp(0.0),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
dt,datetime.datetime.utcfromtimestamp(t),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(d,dtype={'ctime':'float64','data':'object'})",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
x,random.randrange(self.width),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,random.randrange(self.height),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,random.randrange(self.width),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,random.randrange(self.height),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,random.randrange(self.width),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,random.randrange(self.height),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,random.randrange(self.width),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,random.randrange(self.height),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,random.randrange(self.width),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,random.randrange(self.height),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
rewards,"numpy.array([reward_mean_mb,reward_mean_dual,reward_mean_mf])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
times,"numpy.array([times_mean_mb,times_mean_dual,times_mean_mf])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
steps,"numpy.array([steps_mean_mb,steps_mean_dual,steps_mean_mf])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
environment,"numpy.zeros((2,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mb_heat_env,numpy.zeros((numpy.shape(mb_internal_environment),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mf_heat_env,numpy.zeros((numpy.shape(mb_internal_environment),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
map_heat,numpy.zeros((numpy.shape(mb_internal_environment),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mb_internal_environment,"numpy.zeros((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
stay_percentage,"numpy.zeros((trials,len(change_list)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mb_internal_environment,"numpy.zeros((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mb_internal_environment,"numpy.zeros((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
environment,"numpy.zeros((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mb_internal_environment,"numpy.zeros((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
environment,"numpy.zeros((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mb_internal_environment,"numpy.zeros((10,10)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
environment,"numpy.ones((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
environment,"numpy.ones((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
environment,"numpy.ones((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
cumm_sum,numpy.cumsum(softmax_scores),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
average_value,numpy.mean(numpy.array(value_list),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
stay_percentage[i][k],numpy.mean(dual_result[4]),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
reward_mean_dual,numpy.mean(numpy.array(reward_dual),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
reward_mean_mb,numpy.mean(numpy.array(reward_mb),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
reward_mean_mf,numpy.mean(numpy.array(reward_mf),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
times_mean_dual,numpy.mean(numpy.array(times_dual),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
times_mean_mb,numpy.mean(numpy.array(times_mb),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
times_mean_mf,numpy.mean(numpy.array(times_mf),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
steps_mean_dual,numpy.mean(steps_dual),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
steps_mean_mb,numpy.mean(steps_mb),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
steps_mean_mf,numpy.mean(steps_mf),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_pos,"numpy.add(pos,numpy.array(i)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_pos,"numpy.add(pos,action)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_pos,"numpy.add(pos,random.choice(get_legal_actions(pos)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
next_pos,numpy.add(numpy.array(pos),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
next_pos,numpy.add(numpy.array(pos),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
next_pos,numpy.add(numpy.array(pos),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
scoreMatExp,numpy.exp(numpy.asarray(values),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
stay_percentage_mean,"numpy.nanmean(stay_percentage,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
goal_start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
response_time_start,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
response_time_end,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
response_time_start,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
response_time_end,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
goal_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
goal_start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
goal_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
goal_start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
goal_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"mb_line,",matplotlib.pyplot.plot(numpy.arange(iterations),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"mf_line,",matplotlib.pyplot.plot(numpy.arange(iterations),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"reward_line,",matplotlib.pyplot.plot(numpy.arange(iterations),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
timeperrewardmb_plot,"matplotlib.pyplot.plot(numpy.arange(0,50)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
timeperrewardmf_plot,"matplotlib.pyplot.plot(numpy.arange(0,50)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
timeperrewarddual_plot,"matplotlib.pyplot.plot(numpy.arange(0,50)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"stepsmf_plot,","matplotlib.pyplot.plot(numpy.arange(0,50)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"stepsdual_plot,","matplotlib.pyplot.plot(numpy.arange(0,50)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"stepsmb_plot,","matplotlib.pyplot.plot(numpy.arange(0,50)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"reward_plot,","matplotlib.pyplot.plot(numpy.arange(0,3)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
merge,"pandas.merge(persons_advertised,a,on='person',how='left')",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
events,"pandas.read_csv('events.csv',low_memory=False)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
events['timestamp'],"pandas.to_datetime(events['timestamp'],errors='coerce',format='%Y-%m-%d')",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=campaigns_sources.event,y=campaigns_sources.campaign_source[:10],palette=sns.color_palette(""husl"",8)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=ads_compra.event,y=ads_compra.ads_marca)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"sns.barplot(x=campaigns_sources.event,y=campaigns_sources.campaign_source[:10],palette=seaborn.color_palette(""husl"",8)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
ratio,numpy.where(grid.mask&acc.astype(bool),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"hist,bin_edges",numpy.histogram(dists[mask].ravel(),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar0,"matplotlib.pyplot.colorbar(im0,ax=ax[0])",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,"matplotlib.pyplot.colorbar(im1,ax=ax[1])",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(12.7,4.8)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(boston_data.data,columns=boston_data.feature_names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,"pandas.DataFrame(ada.feature_importances_,df.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,"pandas.DataFrame(forest.feature_importances_,df.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,"pandas.DataFrame(tree.feature_importances_,df.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston_data,sklearn.datasets.load_boston(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,sklearn.tree.DecisionTreeRegressor(max_depth=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,
test_size=0.3,
random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest,"sklearn.ensemble.RandomForestRegressor(n_estimators=500,criterion='mse',
random_state=42,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ada,sklearn.ensemble.AdaBoostRegressor(DecisionTreeRegressor(max_depth=4),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(10,3)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(15,4)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
line,"numpy.linspace(-3,3,1000)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(cancer.data,cancer.target,stratify=cancer.target,random_state=66)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n_neighbors),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n_neighbors),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
reg,sklearn.neighbors.KNeighborsRegressor(n_neighbors=3),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
reg,sklearn.neighbors.KNeighborsRegressor(n_neighbors=n_neighbors),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
features,numpy.array(hfile.get('features'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
labels,numpy.array(hfile.get('labels'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
features,numpy.array(hfile.get('features'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
labels,numpy.array(hfile.get('labels'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
acc,numpy.average(y_hat==y_validation),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(
C=1.0/reg,
multi_class='multinomial',
solver='lbfgs',
random_state=1)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_validation,y_train,y_validation","sklearn.model_selection.train_test_split(features,labels,
test_size=0.1,
shuffle=True,
stratify=labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_validation,y_train,y_validation","sklearn.model_selection.train_test_split(features,labels,
test_size=0.1,
shuffle=True,
stratify=labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rundata,pandas.DataFrame(metricslist),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
zeros,numpy.zeros(int((1.0-prob_bug),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ones,numpy.ones(int(prob_bug*10),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
vals,"numpy.append(ones,zeros)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'first_draw':first_draws,
'second_draw':second_draws})",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
islansX,numpy.array(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
myIslands,"numpy.array([200,400,500,1000,1300,1800,2000,2400,2800,3500,4000,4900])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
agg_data,"pandas.DataFrame(columns=['curation_task_id','customer_id_x','resolution','started_at',
'product_id','attribute_name','attribute_id','Total_NAs',
'curation_tasks_count','customer_id_y','bucket_name','product_name',
'active','external_id','image_url','family_friendly'])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
agg_data,"pandas.merge(temp_na,temp_products,on='product_id')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
active_client,"pandas.read_sql(active_client_query,conn)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
rel_client,"pandas.read_sql(rel_query,conn)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
grp,"pandas.DataFrame(target.groupby(['group_id','surface'])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df,pandas.DataFrame(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
full,"pandas.concat([tt_treino,tt_teste])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
treino,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/X_treino.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
teste,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/X_teste.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
target,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/y_treino.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
sub,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/sample_submission.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
tt_treino,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/X_treino.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
tt_teste,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/X_teste.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
tt_y_treino,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/y_treino.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
ss,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/sample_submission.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,numpy.array(x),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,numpy.array(x),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,numpy.array(x),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
previsao,"numpy.zeros((teste.shape[0],9)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
real,numpy.zeros((treino.shape[0]),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
closest_i,numpy.argmin(dist_list),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
closest_rev,numpy.argmin(dist_list),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
tmp,"numpy.argmin(sq_dist(data[i,-1,:4],data[:,0,:4])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
closest_i,numpy.argsort(dist_list),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
closest_rev,numpy.argsort(dist_list),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
tmp,"numpy.argsort(sq_dist(data[i,-1,:4],data[:,0,:4])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,numpy.sort(x),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
ans,numpy.heaviside((xn-xn_i1),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,"numpy.append(x[-1],x)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,"numpy.append(x,x[1])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,"numpy.append(x[-1],x)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,"numpy.append(x,x[1])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,"numpy.append(x[-1],x)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,"numpy.append(x,x[1])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
grafico,"seaborn.heatmap(piv,linewidths=.1,linecolor='black',annot=True,cmap=""YlGnBu"")",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
Y,math.asin(t2),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
X,"math.atan2(t0,t1)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
Z,"math.atan2(t3,t4)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
folds,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=2019)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,n_jobs=-1)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(26,8)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(a,b,figsize=(17,9)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(a,b,figsize=(16,24)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
cat_list,"pandas.get_dummies(hr[var],prefix=var)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
hr,pandas.read_csv('data/employee_data.csv'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0,
stratify=y)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
estimator,"sklearn.tree.DecisionTreeClassifier(random_state=0,
criterion=crit,
splitter=split,
max_depth=depth,
min_samples_split=min_split,
min_samples_leaf=min_leaf)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
dt,"sklearn.tree.DecisionTreeClassifier(class_weight=None,criterion='gini',max_depth=2,
max_features=None,max_leaf_nodes=None,
min_impurity_decrease=0.0,min_impurity_split=None,
min_samples_leaf=1,min_samples_split=2,
min_weight_fraction_leaf=0.0,presort=False,random_state=0,
splitter='best')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
estimator,"sklearn.ensemble.RandomForestClassifier(random_state=1,
criterion=crit,
bootstrap=bootstrap,
n_estimators=forests,
max_depth=depth,
min_samples_split=min_split,
min_samples_leaf=min_leaf,
n_jobs=-1,
verbose=False)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(bootstrap='True',class_weight=None,criterion='gini',
max_depth=3,max_features='auto',max_leaf_nodes=None,
min_impurity_decrease=0.0,min_impurity_split=None,
min_samples_leaf=1,min_samples_split=2,
min_weight_fraction_leaf=0.0,n_estimators=100,n_jobs=-1,
oob_score=False,random_state=1,verbose=False,
warm_start=False)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
logit,"sklearn.linear_model.LogisticRegressionCV(random_state=1,n_jobs=-1,max_iter=500,
cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
force.index,pandas.DatetimeIndex(dates),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dates,pandas.read_pickle('/Volumes/data/Theo/projects/Budyko_vic/timecode.pcl'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
files,pandas.read_pickle('/Volumes/data/Theo/projects/Budyko_vic/forcing_fluxes_filenames_lat_lon_index.df'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dates,pandas.read_pickle('/Volumes/data/Theo/projects/Budyko_vic/timecode.pcl'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
files,pandas.read_pickle('./forcing_fluxes_filenames_lat_lon_index.df'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
force,"pandas.read_table(fr,sep='',names=forcing_columns)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
titanic,pandas.read_csv('train.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
mask,numpy.zeros_like(train.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,numpy.zeros_like(train.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask2,numpy.zeros_like(train[selected_feats].corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_nulls,pandas.DataFrame(data=train.isnull(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_nulls,pandas.DataFrame(data=test.isnull(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
num_corr,pandas.DataFrame(train.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_metrics,"pandas.DataFrame(data=[lr_score_train,
lr_score_test,
lr_rmse_train,
lr_rmse_test],

index=[""R\u00b2Score(Train)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_metrics,"pandas.DataFrame(data=[ridge_score_train,
ridge_score_test,
ridge_rmse_train,
ridge_rmse_test],

index=['R\u00b2Score(Train)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_metrics,"pandas.DataFrame(data=[lasso_score_train,
lasso_score_test,
lasso_rmse_train,
lasso_rmse_test],

index=['R\u00b2Score(Train)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_coefs,"pandas.DataFrame({'Features':X_train.columns,'Coefficient':optimised_lasso.coef_})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kaggle_submission,"pandas.DataFrame({'Id':test['Id'].values,
'SalePrice':kaggle_predictions})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_mszoning,"pandas.concat([outliers_mszoning_rl,
outliers_mszoning_rm])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_neighborhood,"pandas.concat([outliers_neighborhood_edwards,
outliers_neighborhood_gilbert,
outliers_neighborhood_names])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_condition2,pandas.concat([outliers_condition2_normal]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_masvnrtype,"pandas.concat([outliers_masvnrtype_brkface,
outliers_masvnrtype_none])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_kitchenqual,"pandas.concat([outliers_kitchenqual_gd,
outliers_kitchenqual_ta])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_salecondition,"pandas.concat([outliers_salecondition_abnorml,
outliers_salecondition_normal])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_overallqual,"pandas.concat([outliers_overallqual_4,
outliers_overallqual_7])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_garagecars,"pandas.concat([outliers_garagecars_1,
outliers_garagecars_2])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_fullbath,"pandas.concat([outliers_fullbath_0,
outliers_fullbath_1,
outliers_fullbath_2])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_totrmsabvgrd,"pandas.concat([outliers_totrmsabvgrd_5,
outliers_totrmsabvgrd_6,
outliers_totrmsabvgrd_7,
outliers_totrmsabvgrd_8])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_cat,"pandas.concat([outliers_mszoning,
outliers_neighborhood,
outliers_condition2,
outliers_masvnrtype,
outliers_exterqual,
outliers_bsmtqual,
outliers_centralair,
outliers_kitchenqual,
outliers_saletype,
outliers_salecondition,
outliers_overallqual,
outliers_garagecars,
outliers_totrmsabvgrd,
outliers_fullbath])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combined_encoded,"pandas.get_dummies(pd.concat([train_ord_encoded,test_ord_encoded],keys=['Train','Test'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('./datasets/train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('./datasets/test.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,6)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=4,ncols=3,figsize=(13,13)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=rows,ncols=cols,figsize=(cols*4,rows*3)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,seaborn.heatmap(train.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=708)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_score_train,"sklearn.model_selection.cross_val_score(lr,X_train_sc,y_train,cv=kf_lr)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_score_test,"sklearn.model_selection.cross_val_score(lr,X_test_sc,y_test,cv=kf_lr)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_score_train,"sklearn.model_selection.cross_val_score(optimised_ridge,X_train_sc,y_train,cv=kf_ridge)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_score_test,"sklearn.model_selection.cross_val_score(optimised_ridge,X_test_sc,y_test,cv=kf_ridge)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_score_train,"sklearn.model_selection.cross_val_score(optimised_lasso,X_train_sc,y_train,cv=kf_lasso)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_score_test,"sklearn.model_selection.cross_val_score(optimised_lasso,X_test_sc,y_test,cv=kf_lasso)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf_lr,"sklearn.model_selection.KFold(n_splits=5,
shuffle=True,
random_state=708)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf_ridge,"sklearn.model_selection.KFold(n_splits=5,
shuffle=True,
random_state=708)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf_lasso,"sklearn.model_selection.KFold(n_splits=5,
shuffle=True,
random_state=708)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,sklearn.linear_model.RidgeCV(cv=kf_ridge),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
optimised_ridge,sklearn.linear_model.Ridge(alpha=optimal_alpha_ridge),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.linear_model.LassoCV(cv=kf_lasso),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
optimised_lasso,sklearn.linear_model.Lasso(alpha=optimal_alpha_lasso),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_rmse_train,"sklearn.metrics.mean_squared_error(y_true=y_train,y_pred=lr.predict(X_train_sc)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_rmse_test,"sklearn.metrics.mean_squared_error(y_true=y_test,y_pred=lr.predict(X_test_sc)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_rmse_train,"sklearn.metrics.mean_squared_error(y_true=y_train,y_pred=optimised_ridge.predict(X_train_sc)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_rmse_test,"sklearn.metrics.mean_squared_error(y_true=y_test,y_pred=optimised_ridge.predict(X_test_sc)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_rmse_train,"sklearn.metrics.mean_squared_error(y_true=y_train,y_pred=optimised_lasso.predict(X_train_sc)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_rmse_test,"sklearn.metrics.mean_squared_error(y_true=y_test,y_pred=optimised_lasso.predict(X_test_sc)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
t0,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ca_zips,pandas.read_pickle('../data/interim/ca-zip-w-city-ts.pickle'),CLUSTER_8,CLUSTER_3,CLUSTER_9,CLUSTER_9,CLUSTER_0
fig,"matplotlib.pyplot.figure(1,figsize=(20,40)",CLUSTER_8,CLUSTER_3,CLUSTER_9,CLUSTER_9,CLUSTER_0
now,datetime.datetime.now(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
now,datetime.datetime.now(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
now,datetime.datetime.now(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x,"numpy.loadtxt(folder_path+""/""+t+""/iterations"")",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,"numpy.loadtxt(folder_path+""/""+t+""/refinements"")",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.loadtxt(folder_path+""/""+t+""/time"")",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,"numpy.loadtxt(folder_path+""/""+t+""/refinements"")",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
covar_matrix,"numpy.matmul(sample_data.T,sample_data)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_coordinates,"numpy.matmul(vectors,sample_data.T)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cum_var_explained,numpy.cumsum(percentage_var_explained),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_coordinates,"numpy.vstack((new_coordinates,labels)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_data,"numpy.vstack((pca_data.T,labels)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_data,"numpy.vstack((tsne_data.T,labels_1000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_data,"numpy.vstack((tsne_data.T,labels_1000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_data,"numpy.vstack((tsne_data.T,labels_1000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_data,"numpy.vstack((tsne_data.T,labels_1000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe,"pandas.DataFrame(data=new_coordinates,columns=(""1st_principal"",""2nd_principal"",""label"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_df,"pandas.DataFrame(data=pca_data,columns=(""1st_principal"",""2nd_principal"",""label"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_df,"pandas.DataFrame(data=tsne_data,columns=(""Dim_1"",""Dim_2"",""label"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_df,"pandas.DataFrame(data=tsne_data,columns=(""Dim_1"",""Dim_2"",""label"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_df,"pandas.DataFrame(data=tsne_data,columns=(""Dim_1"",""Dim_2"",""label"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_df,"pandas.DataFrame(data=tsne_data,columns=(""Dim_1"",""Dim_2"",""label"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
d0,pandas.read_csv('./mnist_train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
standardized_data,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"values,vectors","scipy.linalg.eigh(covar_matrix,eigvals=(782,783)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.manifold.TSNE(n_components=2,random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.manifold.TSNE(n_components=2,random_state=0,perplexity=50)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.manifold.TSNE(n_components=2,random_state=0,perplexity=50,n_iter=5000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.manifold.TSNE(n_components=2,random_state=0,perplexity=2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.subplot(111,aspect='equal')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,numpy.array(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
loc,numpy.mean(squared_errors),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
tree_rmse,numpy.sqrt(tree_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
tree_rmse_scores,numpy.sqrt(-scores),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_rmse_scores,numpy.sqrt(-lin_scores),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_rmse,numpy.sqrt(forest_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_rmse_scores,numpy.sqrt(-forest_scores),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
svm_rmse,numpy.sqrt(svm_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
final_rmse,numpy.sqrt(final_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rmse,numpy.sqrt(-negative_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rmse,numpy.sqrt(-negative_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
tick_values,numpy.linspace(prices.min(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cbar,matplotlib.pyplot.colorbar(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
c,"""median_house_value"",cmap=matplotlib.pyplot.get_cmap(""jet"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
c,"""median_house_value"",cmap=matplotlib.pyplot.get_cmap(""jet"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cmap,"matplotlib.pyplot.get_cmap(""jet"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
compare_props,"pandas.DataFrame({
""Overall"":income_cat_proportions(housing)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
housing_tr,"pandas.DataFrame(X,columns=housing_num.columns,
index=housing.index)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
housing_tr,"pandas.DataFrame(X,columns=housing_num.columns,
index=housing_num.index)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
housing_extra_attribs,"pandas.DataFrame(
housing_extra_attribs,
columns=list(housing.columns)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"housing[""income_cat""]","pandas.cut(housing[""median_income""],
bins=[0.,1.5,3.0,4.5,6.,np.inf],
labels=[1,2,3,4,5])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"train_set,test_set","sklearn.model_selection.train_test_split(housing,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"train_set,test_set","sklearn.model_selection.train_test_split(housing,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
imputer,"sklearn.impute.SimpleImputer(strategy=""median"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ordinal_encoder,sklearn.preprocessing.OrdinalEncoder(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cat_encoder,sklearn.preprocessing.OneHotEncoder(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cat_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
attr_adder,"sklearn.preprocessing.FunctionTransformer(add_extra_features,validate=False,
kw_args={""add_bedrooms_per_room"":False})",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
num_pipeline,"sklearn.pipeline.Pipeline([
('imputer',SimpleImputer(strategy=""median"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
old_num_pipeline,"sklearn.pipeline.Pipeline([
('selector',OldDataFrameSelector(num_attribs)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
old_cat_pipeline,"sklearn.pipeline.Pipeline([
('selector',OldDataFrameSelector(cat_attribs)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
full_pipeline_with_predictor,"sklearn.pipeline.Pipeline([
(""preparation"",full_pipeline)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
preparation_and_feature_selection_pipeline,"sklearn.pipeline.Pipeline([
('preparation',full_pipeline)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
prepare_select_and_predict_pipeline,"sklearn.pipeline.Pipeline([
('preparation',full_pipeline)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
full_pipeline,"sklearn.compose.ColumnTransformer([
(""num"",num_pipeline,num_attribs)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
old_full_pipeline,"sklearn.pipeline.FeatureUnion(transformer_list=[
(""num_pipeline"",old_num_pipeline)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
tree_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
svm_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
final_mse,"sklearn.metrics.mean_squared_error(y_test,final_predictions)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_mae,"sklearn.metrics.mean_absolute_error(housing_labels,housing_predictions)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
tree_reg,sklearn.tree.DecisionTreeRegressor(random_state=42),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(tree_reg,housing_prepared,housing_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_scores,"sklearn.model_selection.cross_val_score(lin_reg,housing_prepared,housing_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_scores,"sklearn.model_selection.cross_val_score(forest_reg,housing_prepared,housing_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(lin_reg,housing_prepared,housing_labels,scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_reg,"sklearn.ensemble.RandomForestRegressor(n_estimators=10,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_reg,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_reg,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
svm_reg,"sklearn.svm.SVR(kernel=""linear"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
svm_reg,sklearn.svm.SVR(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
svm_reg,sklearn.svm.SVR(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(forest_reg,param_grid,cv=5,
scoring='neg_mean_squared_error',return_train_score=True)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(svm_reg,param_grid,cv=5,scoring='neg_mean_squared_error',verbose=2,n_jobs=4)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
grid_search_prep,"sklearn.model_selection.GridSearchCV(prepare_select_and_predict_pipeline,param_grid,cv=5,
scoring='neg_mean_squared_error',verbose=2,n_jobs=4)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rnd_search,"sklearn.model_selection.RandomizedSearchCV(forest_reg,param_distributions=param_distribs,
n_iter=10,cv=5,scoring='neg_mean_squared_error',random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rnd_search,"sklearn.model_selection.RandomizedSearchCV(svm_reg,param_distributions=param_distribs,
n_iter=50,cv=5,scoring='neg_mean_squared_error',
verbose=2,n_jobs=4,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scale,scipy.stats.sem(squared_errors),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
geom_distrib,scipy.stats.geom(0.5),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
expon_distrib,scipy.stats.expon(scale=1),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
expon_distrib,scipy.stats.expon(scale=1.),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
reciprocal_distrib,"scipy.stats.reciprocal(20,200000)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
sampled_token_index,"numpy.argmax(output_tokens[:,-1,:],axis=-1)",CLUSTER_16,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_4
data,"pandas.read_csv(
path_to_file,sep='\t',header=None,names=['english','spanish'])",CLUSTER_16,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_4
splits,"sklearn.model_selection.train_test_split(
input_tensor,target_tensor,test_size=TEST_PROP,random_state=SEED)",CLUSTER_16,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_4
z,"numpy.arange(-10,10,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(10**10,10**11,10**9)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-10,10,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-10,10,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sig,numpy.diff(sigmoid(z),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.hist(word_occurrences,bins=50)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(2,1,figsize=(12,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ts[3000:3100],"numpy.sin(np.arange(3000,3100)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
boo,numpy.ndarray.tolist(boo),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
namelist,numpy.array(os.listdir(tmp),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
exit,numpy.array([pforpinresifp!=True]),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
simdata,"numpy.array([[0.01,0.0145,0.0109],[0.03,0.0368,0.0291],[0.05,0.083695,0.0476],[0.1,0.1589,0.0909],[1,0.6365,0.5],[100,0.997,0.99]])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
st,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
predicted_labels,numpy.asarray(predicted_labels),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
distance_matrix,numpy.matrix(helper.find_distance_matrix(unique_rows),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
importances,"pandas.Series(model.feature_importances_,X_train_encoded.columns)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
table,"pandas.crosstab(assembly_component_types['tube_assembly_id'],
assembly_component_types['component_type_id'])",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
components,pandas.read_csv(SOURCE+'components.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
materials,pandas.read_csv(SOURCE+'bill_of_materials.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
components,pandas.read_csv(SOURCE+'components.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(path),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
comp_threaded,pandas.read_csv(SOURCE+'comp_threaded.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
tube,pandas.read_csv(SOURCE+'tube.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
trainval,pandas.read_csv(SOURCE+'train_set.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv(SOURCE+'test_set.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X['quote_date'],"pandas.to_datetime(X['quote_date'],infer_datetime_format=True)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_tube_assemblies,val_tube_assemblies","sklearn.model_selection.train_test_split(
trainval_tube_assemblies,random_state=42)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train_log,numpy.log1p(y_train),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_val_log,numpy.log1p(y_val),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
datetimes_full,"pandas.concat((datetimes_10_nov,datetimes_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
targets_full,"pandas.concat((targets_10_nov,targets_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
data_full,"pandas.concat((data_10_nov,data_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
savgol_full,"pandas.concat((lsavgol_10_nov,lsavgol_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
butter_full,"pandas.concat((butterworth_10_nov,butterworth_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_full,"pandas.concat((stats_10_nov,stats_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
savgol_stats_full,"pandas.concat((savgol_stats_10_nov,savgol_stats_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
butter_stats_full,"pandas.concat((butter_stats_10_nov,butter_stats_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
start,"pandas.to_datetime(""2018-11-1003:36:10"")",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
end,"pandas.to_datetime(""2018-11-1003:40:37"")",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
start,"pandas.to_datetime(""2019-01-2906:12:04"")",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
end,"pandas.to_datetime(""2019-01-2906:15:37"")",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
rdf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=123)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hist,"matplotlib.pyplot.hist(x,bins=30,normed=True)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(12,4)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.arange(-3,8)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
species,numpy.array([d.decode('ascii'),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
logprobs,numpy.array([model.score_samples(X),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
Z,"numpy.full(land_mask.shape[0],-9999.0)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.classes_,numpy.sort(np.unique(y),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
Z[land_mask],numpy.exp(kde.score_samples(xy),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
result,numpy.exp(logprobs+self.logpriors_),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
xy,numpy.radians(xy[land_mask]),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(-5,10,10)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_d,"numpy.linspace(-4,8,2000)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_d,"numpy.linspace(-4,8,1000)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
levels,"numpy.linspace(0,Z.max()",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
latlon,"numpy.vstack([data.train['ddlat'],
data.train['ddlong']])",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
xy,numpy.vstack([Y.ravel(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(xgrid[::5],ygrid[::5][::-1])",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
kde,"sklearn.neighbors.KernelDensity(bandwidth=1.0,kernel='gaussian')",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
kde,"sklearn.neighbors.KernelDensity(bandwidth=0.03,metric='haversine')",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
grid,sklearn.model_selection.GridSearchCV(KernelDensity(kernel='gaussian'),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
grid,sklearn.model_selection.GridSearchCV(KDEClassifier(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
cv,sklearn.model_selection.LeaveOneOut(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.fetch_species_distributions(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
digits,sklearn.datasets.load_digits(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
circle,"matplotlib.pyplot.Circle((self.x,self.y)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
line,"matplotlib.pyplot.Line2D((neuron1.x-x_adjustment,neuron2.x+x_adjustment)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
angle,math.atan((neuron2.x-neuron1.x),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tick_marks,numpy.arange(len(classes),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
conf_mat_df,"pandas.DataFrame([list(pd.Series([tn,fp,fn,tp])",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_X_train,"pandas.read_csv(""../../../Data/male_patients/starting_ratio_1/X_train.csv"",index_col=0)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_y_train,"pandas.read_csv(""../../../Data/male_patients/starting_ratio_1/y_train.csv"",index_col=0)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_X_val,"pandas.read_csv(""../../../Data/male_patients/X_val.csv"",index_col=0)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_y_val,"pandas.read_csv(""../../../Data/male_patients/y_val.csv"",index_col=0)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
std_patients,"pandas.read_csv('../../../Data/male_patients/standardized_patients.csv',index_col=0)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
actual_score,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
actual_score,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
actual_score,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
actual_score,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val['Class'].values,predictions,pos_label=1)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val['Class'].values,predictions,pos_label=1)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val['Class'].values,predictions,pos_label=1)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val['Class'].values,predictions,pos_label=1)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val,predictions)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
conf_mat,"sklearn.metrics.confusion_matrix(df_y_val['Class'].values,predictions)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(i,)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(i,j,)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(best_i_sl,)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(best_i_twol,best_j_twol)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(best_i_sl,)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(best_i_twol,best_j_twol)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df1,pandas.DataFrame(data1),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df2,pandas.DataFrame(data2),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df1,"pandas.concat([df1,g],axis=1)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data1,pandas.read_csv('movielens/movies.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data2,pandas.read_csv('movielens/ratings.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
xs,"numpy.linspace(20,160,100)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
conf_int,"numpy.percentile(sample_means,[5,95])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
weight,"scipy.stats.lognorm(0.23,0,70.8)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
female_weight,"scipy.stats.lognorm(0.23,0,70.8)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
male_weight,"scipy.stats.lognorm(0.20,0,87.3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
clustered,pandas.concat([most_rated_movies_1k.reset_index(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg_ratings,"pandas.concat([user_2_unrated_movies,cluster.mean()",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ratings_title,"pandas.merge(ratings,movies[['movieId','title']],on='movieId')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
user_movie_ratings,"pandas.pivot_table(ratings_title,index='userId',columns='title',values='rating')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
user_movie_ratings,"pandas.pivot_table(ratings_title,index='userId',columns='title',values='rating')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
movies,pandas.read_csv('ml-latest-small/movies.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ratings,pandas.read_csv('ml-latest-small/ratings.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,6)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xticks,numpy.arange(min(possible_k_values),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
yticks,numpy.arange(round(min(errors_per_k),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sparse_ratings,scipy.sparse.csr_matrix(pd.SparseDataFrame(most_rated_movies_1k),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
full,"pandas.read_csv('data/cardio_train.csv',sep=';')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=train.cholesterol.nunique()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=train.gluc.nunique()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=train.smoke.nunique()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(1,3,figsize=(16,6)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train,test","sklearn.model_selection.train_test_split(full,test_size=0.33,random_state=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
originl_data,"pandas.DataFrame(dict([(k,pd.Series(v)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
final_data,"pandas.DataFrame(originl_data.values.T,index=originl_data.columns,columns=col)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df22,pandas.read_csv('paynet_data_deidentified_22.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df23,pandas.read_csv('paynet_data_deidentified_23.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df24,pandas.read_csv('paynet_data_deidentified_24.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df25,pandas.read_csv('paynet_data_deidentified_25.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df26,pandas.read_csv('paynet_data_deidentified_26.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df27,pandas.read_csv('paynet_data_deidentified_27.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df28,pandas.read_csv('paynet_data_deidentified_28.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df29,pandas.read_csv('paynet_data_deidentified_29.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dfff,pandas.read_csv('CalendarYearofeachcompany.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('CalendarYearofeachcompany.csv',index_col=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('PostComputationData.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
index,numpy.arange(len(year_list),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
index,numpy.arange(len(year_list),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(1,10,1000)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
pred_x,"numpy.append(pred_x,12)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
pred_x,"numpy.append(pred_x,14)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(30,30)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xgb_pred,numpy.expm1(model_xgb.predict(X_for_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lgb_pred,numpy.expm1(model_lgb.predict(X_for_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_pred,numpy.expm1(lasso.predict(X_for_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pred4,numpy.expm1(averaged_models.predict(X_for_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df_train[""SalePrice""]","numpy.log1p(df_train[""SalePrice""])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_all[skewed_feats],numpy.log1p(df_all[skewed_feats]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"numpy.sqrt(-cross_val_score(model,X,y,scoring=""neg_mean_squared_error"",cv=cv)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(mean_squared_error(y,y_train_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predictions,"numpy.column_stack([
model.predict(X)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
solution,"pandas.DataFrame({""id"":df_test.Id,""SalePrice"":ensemble})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
solution,"pandas.DataFrame({""id"":df_test.Id,""SalePrice"":pred4})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_all,"pandas.concat((df_train.loc[:,'MSSubClass':'SaleCondition'],df_test.loc[:,'MSSubClass':'SaleCondition'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_all,pandas.get_dummies(df_all),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv('train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('test.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=1111)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=500,max_depth=10,random_state=1234)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
GBoost,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=3000,learning_rate=0.05,
max_depth=4,max_features='sqrt',
min_samples_leaf=15,min_samples_split=10,
loss='huber',random_state=5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
KRR,"sklearn.kernel_ridge.KernelRidge(alpha=0.6,kernel='polynomial',degree=2,coef0=2.5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ENet,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mention_type,numpy.array(mention_features['mention_type']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_position,numpy.array(mention_features['mention_position']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_dist,numpy.array(features[2]['mention_distance']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
s_dist,numpy.array(features[3]['sentence_distance']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
overlap,numpy.array(features[4]['overlap']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
speaker,numpy.array(features[5]['speaker']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
head_match,numpy.array(features[6]['head_match']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_exact_match,numpy.array(features[7]['mention_exact_match']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_partial_match,numpy.array(features[8]['mention_partial_match']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
d,numpy.zeros((10),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
vec,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
sum,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_contain,"numpy.zeros((1,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_p_w1,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_p_w2,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_n_w1,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_n_w2,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_p_w_a,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_n_w_a,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
features,"numpy.concatenate((first_w,last_w,mention_p_w1,mention_p_w2,mention_p_w_a,\
mention_n_w1,mention_n_w2,mention_n_w_a,mention_s_a,mention_length,\
mention_type,mention_position,mention_contain,doc_avg)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
pair_features,"numpy.concatenate((mention_dist,s_dist,overlap,speaker,head_match,\
mention_exact_match,mention_partial_match)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
con,"numpy.concatenate((f_input[0],f_input[1],f_input[2],f_input[3],f_input[4])",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_contain,"numpy.ones((1,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
input_dev,numpy.load('/home/vishesh/TUM/Thesis/Coreference-Resolution/data/processed/ffnn_input_dev.npy'),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
output_dev,numpy.load('/home/vishesh/TUM/Thesis/Coreference-Resolution/data/processed/ffnn_output_dev.npy'),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
sentenceEnders,"re.compile(r""""""

(?:
(?<=[.!?])",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
"c_all,_",model.encoder(i=numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
"x_decod,score",model.decoder(i=numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
"x_decod,score",model.decoder(i=numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
"_,score",model.decoder(i=numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
model(i,numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
log_probs,model(i=numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
model(i,numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
model.conditional(i,numpy.array(idx_all[0:1]),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
a,[model.conditional(i=numpy.array(idx_all[0:1]),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
a,[model.conditional(i=numpy.array(idx_all[0:1]),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
scores_sampmodel,[model.conditional(i=numpy.array(idx_all[0:1]),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
cc,numpy.array(cc),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
rank,numpy.array(len(scores_all[0]),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
testdata_numpy,"numpy.fromfile(""examples/mnist/data/binarized_mnist_test.amat"",dtype=np.int16)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
a,numpy.where(M.testlabels==charSamp),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
a,numpy.where(M.testlabels!=charSamp),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
idx_all,numpy.concatenate((idx_sample.reshape(1),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
score_all,numpy.concatenate(score_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
score_all,numpy.concatenate(score_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
score_all,numpy.concatenate(score_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
idx_all,numpy.concatenate((idx_sample.reshape(1),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
a,numpy.concatenate([aa.detach(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
idx_all,numpy.concatenate((idx_sample.reshape(1),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
idx_all,numpy.concatenate((idx_sample.reshape(1),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
starttime,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
ARTICLE_LIST,pandas.DataFrame(),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
excel,pandas.ExcelWriter('SinMoonGo.xlsx'),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
ARTICLE_LIST,pandas.concat(df_list),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""Datasets/FuelConsumption.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.asanyarray(train[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.asanyarray(train[['CO2EMISSIONS']]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.asanyarray(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.asanyarray(test[['CO2EMISSIONS']]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
positive_counts,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
negative_counts,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
total_counts,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pos_neg_ratios,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
t1,"numpy.arange(0.0,5.0,0.1)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t2,"numpy.arange(0.0,5.0,0.02)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.arange(1,11)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t,"numpy.arange(0.0,5.0,0.01)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.arange(1,11)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.arange(1,11)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
s,numpy.cos(2*np.pi*t),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xvals,"numpy.linspace(1.0,5.0,50)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
yvals,"numpy.linspace(1,100,50)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"(n,bins)","numpy.histogram(v,bins=50,normed=True)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"n,bins,patches","matplotlib.pyplot.hist(x,50,normed=1,facecolor='g',alpha=0.75)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"line,","matplotlib.pyplot.plot(t,s,lw=2)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.where((df[""DE_low""]<=dec)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,"numpy.where((df[""DE_low""]<=dec)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('data/data.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Z,numpy.sin(X**2+Y**2),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Z,numpy.sin(X**2+Y**2),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Z,numpy.sin(X**2+Y**2),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l,"numpy.linspace(0,L+1,L//2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h,"numpy.linspace(0,H+1,H//2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l,"numpy.linspace(0,L+1,L//2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h,"numpy.linspace(0,H+1,H//2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l,"numpy.linspace(0,L+1,L//2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h,"numpy.linspace(0,H+1,H//2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(l,h)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(l,h)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(l,h)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('data/All_swordfish_DST_timeseries_BC_export.txt',sep="","")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['Date'],"pandas.to_datetime(data['PSDate_Time'],format=""%m/%d/%Y%H:%M:%S"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['Date'],pandas.to_datetime(dates),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,"pandas.concat([df,res],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ssid_df,"pandas.concat([ssid_df,HF_dummies,Day_dummies],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Day_dummies,"pandas.get_dummies(ssid_df.Day,prefix='Day',drop_first=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
HF_dummies,"pandas.get_dummies(ssid_df.HourFrame,prefix='HF',drop_first=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ssid_df,"pandas.merge(left=ssid_df,right=JPIDL,how='left',left_on='JourneyPatternID',right_on='JourneyPatternID')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,pandas.read_csv('Route_XXXX_travel_time_csvs/Route_084X_travel_time.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('Route_XXXX_travel_time_csvs/Route_%s_travel_time.csv'%r),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
JPIDL,pandas.read_csv('JPID_Length.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
find_lb,pandas.read_csv('use_speed_and_distance_get_outlier_bound.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ssid_df['SchoolHoliday'],"numpy.where(ssid_df['TimeFrame'].isin(['2013-01-01','2013-01-02','2013-01-03','2013-01-04','2013-01-05','2013-01-06'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(dtr.feature_importances_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(abr.feature_importances_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(gbr.feature_importances_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(rfr.feature_importances_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
selector,sklearn.feature_selection.VarianceThreshold(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_mae,"sklearn.metrics.mean_absolute_error(y_train,lr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_mae,"sklearn.metrics.mean_absolute_error(y_test,lr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin_mae,"sklearn.metrics.mean_absolute_error(y_train,svr_lin_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin_mae,"sklearn.metrics.mean_absolute_error(y_test,svr_lin_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin_mae,"sklearn.metrics.mean_absolute_error(y_train,svr_lin_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin_mae,"sklearn.metrics.mean_absolute_error(yn_test,svrn_lin_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly_mae,"sklearn.metrics.mean_absolute_error(y_train,svr_poly_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly_mae,"sklearn.metrics.mean_absolute_error(y_test,svr_poly_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly_mae,"sklearn.metrics.mean_absolute_error(yn_train,svrn_poly_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly_mae,"sklearn.metrics.mean_absolute_error(yn_test,svrn_poly_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf_mae,"sklearn.metrics.mean_absolute_error(y_train,svr_rbf_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf_mae,"sklearn.metrics.mean_absolute_error(y_test,svr_rbf_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf_mae,"sklearn.metrics.mean_absolute_error(yn_train,svrn_rbf_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf_mae,"sklearn.metrics.mean_absolute_error(yn_test,svrn_rbf_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtr_mae,"sklearn.metrics.mean_absolute_error(y_train,dtr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtr_mae,"sklearn.metrics.mean_absolute_error(y_test,dtr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
abr_mae,"sklearn.metrics.mean_absolute_error(y_train,abr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
abr_mae,"sklearn.metrics.mean_absolute_error(y_test,abr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_mae,"sklearn.metrics.mean_absolute_error(y_train,gbr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_mae,"sklearn.metrics.mean_absolute_error(y_test,gbr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_mae,"sklearn.metrics.mean_absolute_error(y_train,rfr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_mae,"sklearn.metrics.mean_absolute_error(y_test,rfr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_mae,"sklearn.metrics.mean_absolute_error(y,rfr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_mdae,"sklearn.metrics.median_absolute_error(y_train,lr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_mdae,"sklearn.metrics.median_absolute_error(y_test,lr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin_mdae,"sklearn.metrics.median_absolute_error(y_train,svr_lin_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin_mdae,"sklearn.metrics.median_absolute_error(y_test,svr_lin_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin_mdae,"sklearn.metrics.median_absolute_error(y_train,svr_lin_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin_mdae,"sklearn.metrics.median_absolute_error(yn_test,svrn_lin_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly_mdae,"sklearn.metrics.median_absolute_error(y_train,svr_poly_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly_mdae,"sklearn.metrics.median_absolute_error(y_test,svr_poly_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly_mdae,"sklearn.metrics.median_absolute_error(yn_train,svrn_poly_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly_mdae,"sklearn.metrics.median_absolute_error(yn_test,svrn_poly_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf_mdae,"sklearn.metrics.median_absolute_error(y_train,svr_rbf_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf_mdae,"sklearn.metrics.median_absolute_error(y_test,svr_rbf_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf_mdae,"sklearn.metrics.median_absolute_error(yn_train,svrn_rbf_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf_mdae,"sklearn.metrics.median_absolute_error(yn_test,svrn_rbf_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtr_mdae,"sklearn.metrics.median_absolute_error(y_train,dtr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtr_mdae,"sklearn.metrics.median_absolute_error(y_test,dtr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
abr_mdae,"sklearn.metrics.median_absolute_error(y_train,abr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
abr_mdae,"sklearn.metrics.median_absolute_error(y_test,abr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_mdae,"sklearn.metrics.median_absolute_error(y_train,gbr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_mdae,"sklearn.metrics.median_absolute_error(y_test,gbr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_mdae,"sklearn.metrics.median_absolute_error(y_train,rfr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_mdae,"sklearn.metrics.median_absolute_error(y_test,rfr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_mdae,"sklearn.metrics.median_absolute_error(y,rfr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_rsq,"sklearn.metrics.r2_score(y_train,lr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_rsq,"sklearn.metrics.r2_score(y_test,lr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin_rsq,"sklearn.metrics.r2_score(y_train,svr_lin_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin_rsq,"sklearn.metrics.r2_score(y_test,svr_lin_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin_rsq,"sklearn.metrics.r2_score(yn_train,svrn_lin_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin_rsq,"sklearn.metrics.r2_score(yn_test,svrn_lin_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly_rsq,"sklearn.metrics.r2_score(y_train,svr_poly_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly_rsq,"sklearn.metrics.r2_score(y_test,svr_poly_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly_rsq,"sklearn.metrics.r2_score(yn_train,svrn_poly_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly_rsq,"sklearn.metrics.r2_score(yn_test,svrn_poly_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf_rsq,"sklearn.metrics.r2_score(y_train,svr_rbf_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf_rsq,"sklearn.metrics.r2_score(y_test,svr_rbf_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf_rsq,"sklearn.metrics.r2_score(yn_train,svrn_rbf_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf_rsq,"sklearn.metrics.r2_score(yn_test,svrn_rbf_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtr_rsq,"sklearn.metrics.r2_score(y_train,dtr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtr_rsq,"sklearn.metrics.r2_score(y_test,dtr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
abr_rsq,"sklearn.metrics.r2_score(y_train,abr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
abr_rsq,"sklearn.metrics.r2_score(y_test,abr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_rsq,"sklearn.metrics.r2_score(y_train,gbr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_rsq,"sklearn.metrics.r2_score(y_test,gbr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_rsq,"sklearn.metrics.r2_score(y_train,rfr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_rsq,"sklearn.metrics.r2_score(y_test,rfr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_rsq,"sklearn.metrics.r2_score(y,rfr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin,sklearn.svm.SVR(kernel='linear'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin,sklearn.svm.SVR(kernel='linear'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly,sklearn.svm.SVR(kernel='poly'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly,sklearn.svm.SVR(kernel='poly'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf,sklearn.svm.SVR(kernel='rbf'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf,sklearn.svm.SVR(kernel='rbf'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=38)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"Xn_train,Xn_test,yn_train,yn_test","sklearn.model_selection.train_test_split(X_norm,y_norm,test_size=0.3,random_state=38)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
features,"pandas.concat([df.genres.str.get_dummies(sep=""|"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(path),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['release_date'],pandas.to_datetime(df['release_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
max_abs_scaler,sklearn.preprocessing.MaxAbsScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nn_model,"sklearn.neighbors.NearestNeighbors(n_neighbors=5,algorithm='auto')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.log(ns),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.log(bests),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
window,numpy.hamming(seg_length),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
df_feat,"pandas.DataFrame(scaled_features,columns=data.columns[:-1])",CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('bank_note_data.csv'),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc,sklearn.ensemble.RandomForestClassifier(n_estimators=200),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
affair,pandas.read_csv('../assets/datasets/Fair.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Filter.img,numpy.array(img),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
U,"numpy.zeros((numAp,Filter.imgSize.lin,Filter.imgSize.col)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
C,"numpy.zeros((size.A.lin+central*2,size.A.col+central*2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
D,numpy.zeros(A.shape),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
g,numpy.exp(-(x**2+y**2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
D,numpy.uint8(D),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
value,math.ceil((soma),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
central,math.floor((Filter.kernelSize/2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.asarray(image,dtype='float32')",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.expand_dims(x,axis=0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(""creditcard.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=.5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.IsolationForest(max_samples=len(X_train),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.IsolationForest(contamination=percent_fraud,max_samples=len(X_train)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
A,"numpy.array([[1,2,3],[4,5,6],[7,8,9]])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
npdiff,"numpy.array([0,2,5,9,14])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
ave_inflammation,"numpy.mean(data,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B,"numpy.hstack([A,A])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
C,"numpy.vstack([A,A])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
data,"numpy.loadtxt(fname='data/inflammation-01.csv',delimiter=',')",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(10.0,3.0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
image,matplotlib.pyplot.imshow(data),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
ave_plot,matplotlib.pyplot.plot(ave_inflammation),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
max_plot,"matplotlib.pyplot.plot(np.max(data,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
min_plot,"matplotlib.pyplot.plot(np.min(data,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'x':X_reduced[:,0],'y':X_reduced[:,1],'label':y_data})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,"pandas.read_csv('UCI_HAR_dataset/train/X_train.txt',delim_whitespace=True,header=None,names=features)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train['subject'],"pandas.read_csv('UCI_HAR_dataset/train/subject_train.txt',header=None,squeeze=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train,"pandas.read_csv('UCI_HAR_dataset/train/y_train.txt',names=['Activity'],squeeze=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,"pandas.read_csv('UCI_HAR_dataset/test/X_test.txt',delim_whitespace=True,header=None,names=features)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test['subject'],"pandas.read_csv('UCI_HAR_dataset/test/subject_test.txt',header=None,squeeze=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_test,"pandas.read_csv('UCI_HAR_dataset/test/y_test.txt',names=['Activity'],squeeze=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
facetgrid,"seaborn.FacetGrid(train,hue='ActivityName',size=6,aspect=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_reduced,"sklearn.manifold.TSNE(verbose=2,perplexity=perplexity)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combined_score_df,pandas.DataFrame({'combined_score':combined_score}),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
passed_df,pandas.DataFrame({'passed':passed}),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('StudentsPerformance.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
temp,pandas.read_csv('http://roycekimmons.com/system/generate_data.php?dataset=exams&n=1000'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,"numpy.arange(start=0,stop=100,step=5)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,numpy.arange(iter),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
features,numpy.zeros((len(numeric_data),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['math_pass'],"numpy.where(data['mathscore']<60,'F','P')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['reading_pass'],"numpy.where(data['readingscore']<60,'F','P')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['writing_pass'],"numpy.where(data['writingscore']<60,'F','P')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,10,1000)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
numeric_data,"numpy.delete(numeric_data,1,1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
numeric_data,"numpy.delete(numeric_data,4,1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
numeric_data,"numpy.delete(numeric_data,4,1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
numeric_data,"numpy.delete(numeric_data,4,1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
numeric_data,"numpy.append(numeric_data,features,1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
p,"seaborn.countplot(y='parentallevelofeducation',data=data,hue='math_pass')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
p,"seaborn.countplot(y='parentallevelofeducation',data=data,hue='reading_pass')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
p,"seaborn.countplot(y='parentallevelofeducation',data=data,hue='writing_pass')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(ncols=3,figsize=(18,12)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(solver='lbfgs'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model2,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tuned,"sklearn.linear_model.LogisticRegression(C=0.10000000000000001,penalty='l1',solver='saga')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=0)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=42)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=0)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(model2,param_grid,cv=5,scoring='accuracy',)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rF,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=6,
random_state=0)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_tuned,"sklearn.ensemble.RandomForestClassifier(n_estimators=400,
min_samples_split=5,
min_samples_leaf=1,
max_features='sqrt',
max_depth=30,
bootstrap=True)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,predictions_test,sample_weight=None)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr2,tpr2,thresholds","sklearn.metrics.roc_curve(y_test,predictions_test,sample_weight=None)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr3,tpr3,thresholds","sklearn.metrics.roc_curve(y_test,predictions_test,sample_weight=None)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr4,tpr4,thresholds","sklearn.metrics.roc_curve(y_test,predictions_test,sample_weight=None)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_random,"sklearn.model_selection.RandomizedSearchCV(estimator=rf,param_distributions=random_grid,n_iter=100,cv=3,verbose=2,random_state=42,n_jobs=-1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=6),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=5),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=6),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=8),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=depth),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
reviews,json.load(f),CLUSTER_27,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
c,collections.Counter(),CLUSTER_27,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
scoreList,numpy.array(scoreList),CLUSTER_27,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
labels,numpy.array(labels),CLUSTER_27,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
likelihood[word][clss],numpy.log(word_count[word]/len(word_list),CLUSTER_27,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
likelihood[word][clss],numpy.log((word_cnt+smoothing),CLUSTER_27,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
Y,numpy.array([1ifi>=7else0foriiny_df]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""./data/winequality-white.csv"",sep=';')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_rf,"sklearn.svm.SVC(kernel='rbf',gamma=0.7,C=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(m,x_train_res,y_train_res,cv=5,scoring='accuracy')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(m,x_train,y_train,cv=5,scoring='accuracy')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_training,X_test,Y_training,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=20)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_val,Y_train,Y_val","sklearn.model_selection.train_test_split(X_training,Y_training,test_size=0.2,random_state=20)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,sklearn.model_selection.KFold(n_splits=5),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(X),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test_under,"pandas.concat([df_class_0_under,df_class_1],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test_over,"pandas.concat([df_class_0,df_class_1_over],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv('train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
conf_mat,"sklearn.metrics.confusion_matrix(y_true=y_test,y_pred=y_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_classification(n_classes=2,class_sep=1.5,weights=[0.9,0.1],n_informative=3,n_redundant=1,flip_y=0,n_features=20,n_clusters_per_class=1,n_samples=100,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Z,"numpy.zeros((m,n_H,n_W,n_C)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.zeros((m,n_H,n_W,n_C)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dA_prev,"numpy.zeros((m,n_H_prev,n_W_prev,n_C_prev)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dW,"numpy.zeros((f,f,n_C_prev,n_C)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
db,"numpy.zeros((1,1,1,n_C)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dA_prev,numpy.zeros(A_prev.shape),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,numpy.ones(shape),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"A[i,h,w,c]",numpy.mean(a_prev_slice),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,numpy.sum(s),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"dA_prev[i,vert_start:vert_end,horiz_start:horiz_end,c]+","numpy.multiply(mask,dA[i,h,w,c])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_pad,"numpy.pad(X,((0,0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axarr","matplotlib.pyplot.subplots(1,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data_batch,"numpy.array(
[get_image(sample_file,width,height,mode)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
losses,numpy.array(losses),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
sample_values,"numpy.array([[0.701*564,0.299*564],[0.0305*409,0.965*409]])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
s,"json.load(open(os.getenv(""PUI2015"")",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('Wine.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X1,X2","numpy.meshgrid(np.arange(start=X_set[:,0].min()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X1,X2","numpy.meshgrid(np.arange(start=X_set[:,0].min()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=123)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lda,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(n_components=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.linear_model.LogisticRegression(random_state=0),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
V_forward_array,numpy.array([vls(t),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
V_reverse_array,numpy.array([vlsr(t),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
v_n,"numpy.array([root(kirchoff,x0=v0,args=(v1[i],v2[i],V[i],jphoto)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
tt,"numpy.linspace(0,1,timesteps,dtype=np.float64)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
q_forward,"scipy.integrate.odeint(param_memdiode,Qstart,tt,args=(vls,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
q_reverse,"scipy.integrate.odeint(param_memdiode,q_forward[timesteps-1],tt,args=(vlsr,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
us_weather,"pandas.DataFrame({
""city"":[""newyork"",""chicago"",""orland""],
""temperature"":[21,14,35],
""humidity"":[68,65,75]
})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
india_weather,"pandas.DataFrame({
""city"":[""tamilnadu"",""mumbai"",""delhi""],
""temperature"":[32,31,28],
""humidity"":[66,64,72]
})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
temperature_df,"pandas.DataFrame({
""city"":[""mumbai"",""delhi"",""banglore""],
""temperature"":[32,31,28]
},index=[0,1,2])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
windspeed_df,"pandas.DataFrame({
""city"":[""delhi"",""mumbai""],
""windspeed"":[21,14]
},index=[1,0])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,"pandas.Series([""Humid"",""Dry"",""Rain""],name=""event"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.concat([india_weather,us_weather],ignore_index=True)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.concat([india_weather,us_weather],keys=[""india"",""us""])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.concat([temperature_df,windspeed_df],axis=1)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.concat([temperature_df,s],axis=1)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
categorical_sample_points,"numpy.arange(0,10)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
tiled_images,"numpy.concatenate(image_rows,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
continuous_sample_points,"numpy.linspace(-1.0,1.0,10)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
start_time,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
start_time,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
start_time,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
conjuntoEscalado,"pandas.DataFrame(conjuntoEscalado,columns=columnas)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resultados,"pandas.DataFrame(columns=[""Transformación"",""SSE"",""MAE"",""MSE"",""RMSE""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoEscalado,pandas.DataFrame(escalador.fit_transform(conjuntoDatos),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoPredicho,"pandas.DataFrame(X_test,columns=columnas[0:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoPredicho,pandas.DataFrame(escalador.inverse_transform(conjuntoPredicho),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoNormal,pandas.DataFrame(escalador.inverse_transform(conjuntoNormal),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
neuronas,"pandas.DataFrame(columns=['Neuronas','ECM'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoPredicho,"pandas.DataFrame(X_test,columns=columnas[0:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoPredicho,pandas.DataFrame(escalador.inverse_transform(conjuntoPredicho),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoNormal,pandas.DataFrame(escalador.inverse_transform(conjuntoNormal),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
neuronas2Capas,"pandas.DataFrame(columns=['Neuronascapa1','Neuronascapa2','ECM'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoPredicho,"pandas.DataFrame(X_test,columns=columnas[0:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoPredicho,pandas.DataFrame(escalador.inverse_transform(conjuntoPredicho),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoNormal,pandas.DataFrame(escalador.inverse_transform(conjuntoNormal),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoDatos,pandas.read_csv('./Datos/diabetes.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
escalador,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
seleccionVariables,"sklearn.feature_selection.RFECV(estimador,step=1,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimador,"sklearn.linear_model.SGDRegressor(max_iter=1000,tol=1e-3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(modelo.drop(['Y'],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(conjuntoDatos.drop(['Y'],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resultadosValidacion,"sklearn.model_selection.cross_val_score(lm,X_train,y_train,cv=10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resultadosValidacionRn,"sklearn.model_selection.cross_val_score(m,X_train,y_train,cv=10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ECM,"sklearn.metrics.mean_squared_error(conjuntoNormal['Y'],conjuntoPredicho['Y'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ECM,"sklearn.metrics.mean_squared_error(conjuntoNormal['Y'],conjuntoPredicho['Y'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
escalador,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
m,"sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(8,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
m,"sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(numeroNeuronas,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
m,"sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(numeroNeuronasC1,numeroNeuronasC2,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
frm,"pandas.read_csv(""multiTimeline.csv"",header=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xi,numpy.arange(100),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xi,"numpy.array([0,x.max()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
yi,"numpy.array([np.polyval(c,s)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sigma,numpy.std(diff),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.pipeline.Pipeline([('poly',PolynomialFeatures(degree=4)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"|python-c""importjson;importsys;response",json.load(sys.stdin),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.arange(-5,5,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y,"numpy.arange(-5,5,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(X,Y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
batch_rewards,numpy.zeros(num_cpu),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_7
indxes,numpy.squeeze(np.argwhere(done),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_7
total_rewards+,numpy.sum(batch_rewards[indxes]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_7
self.train_stats,collections.defaultdict(list),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_7
levels,numpy.arange(np.min(z),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.n,numpy.array([np.count_nonzero(1+numpy.array(np.where(self.y==self.y[i]),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
In,"numpy.ones((n,n)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"xx1,xx2","numpy.meshgrid(np.arange(x1_min,x1_max,resolution)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
input_data,"pandas.DataFrame(dict({'x':X[:,0],'y':X[:,1],'target':y})",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
feature_data,"pandas.DataFrame(dict({'x':X_transformed[:,0],'y':X_transformed[:,1],'target':y})",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(dict({'x':X[:,0],'y':X[:,1],'target':y})",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
dat,pandas.DataFrame(dat),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
dat,"pandas.DataFrame({'x':X_train_reduced.T[0],'y':X_train_reduced.T[1],'variable':y_train})",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.scale(X),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,"numpy.asarray(X,dtype='float64')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y,"numpy.asarray(Y,dtype='float64')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
newX,"numpy.zeros((X.shape[0],9)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
theta,numpy.dot(numpy.dot(np.linalg.inv(numpy.dot(np.transpose(xTemp),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y_est,"numpy.dot(xTemp,theta)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
newTheta,numpy.dot(numpy.dot(np.linalg.inv(numpy.dot(np.transpose(newX),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
newY_est,"numpy.dot(newX,newTheta)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"m0,c0","numpy.linalg.lstsq(xTemp,Y)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"m1,c1","numpy.linalg.lstsq(xTemp,Y_est)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"m2,c2","numpy.linalg.lstsq(xTemp,newY_est)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax1,"matplotlib.pyplot.subplot(1,3,1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax2,"matplotlib.pyplot.subplot(1,3,2,sharey=ax1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax3,"matplotlib.pyplot.subplot(1,3,3,sharey=ax2)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
TP,numpy.sum(income),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.sum(income),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,numpy.sum(income),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
precision,numpy.sum(income),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
features_log_transformed,pandas.DataFrame(data=features_raw),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
features_log_minmax_transform,pandas.DataFrame(data=features_log_transformed),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
features_final,pandas.get_dummies(features_log_minmax_transform),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""census.csv"")",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features_final,
income,
test_size=0.2,
random_state=0)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
results['f_train'],"sklearn.metrics.fbeta_score(y_train[:300],predictions_train[:300],0.5)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
results['f_test'],"sklearn.metrics.fbeta_score(y_test,predictions_test,0.5)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
results['acc_train'],"sklearn.metrics.accuracy_score(y_train[:300],predictions_train[:300])",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
results['acc_test'],"sklearn.metrics.accuracy_score(y_test,predictions_test)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_C,"sklearn.ensemble.AdaBoostClassifier(n_estimators=50,learning_rate=1,random_state=0)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.AdaBoostClassifier(random_state=0),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.AdaBoostClassifier(random_state=0),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_A,sklearn.naive_bayes.GaussianNB(),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_B,sklearn.tree.DecisionTreeClassifier(random_state=10),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorer,"sklearn.metrics.make_scorer(fbeta_score,beta=0.5)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_obj,"sklearn.model_selection.GridSearchCV(clf,param_grid=parameters,scoring=scorer)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cb,"matplotlib.pyplot.colorbar(im,ax=ax1,cax=cax)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
im,matplotlib.pyplot.imshow(np.log10(h2+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
line,"matplotlib.pyplot.plot(epoch,loss,label='Trainingloss')",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
ax1,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,axArray","matplotlib.pyplot.subplots(H,N,figsize=(dim_Largeur,dim_Hauteur)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
XLIM,matplotlib.pyplot.xlim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
XLIM,matplotlib.pyplot.xlim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
YLIM,matplotlib.pyplot.ylim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
YLIM,matplotlib.pyplot.ylim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
epoch,"numpy.arange(hist_Nepoch,dtype=np.int)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
N_filters,numpy.array(convolutions),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_2,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean_2,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_2,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_3,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean_3,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_3,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
bin_true,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
eps_mean,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
eps_std,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
u_mean,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
u_std,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
id_,numpy.where(h_id==i+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
id_,numpy.where(h_id==i+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
id_,numpy.where(h_id==i+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s3,numpy.where((utils.zcen(residual_bins),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s2,numpy.where((utils.zcen(residual_bins),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s1,numpy.where((utils.zcen(residual_bins),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
convolutions,numpy.squeeze(convout1_f(inputLC),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_std,numpy.std(residual),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
loss,numpy.log10(history.all(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
val_loss,numpy.log10(history.all(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std[i],numpy.sqrt(((RESIDUAL[id_]-mean[i]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_2[i],numpy.sqrt(((RESIDUAL[id_]-mean_2[i]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_3[i],numpy.sqrt(((RAND_RESIDUAL[id_]-mean_3[i]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
bin_VALUE_TRUE,"numpy.linspace(pmin,pmax,Nbin)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
bin_VALUE_TRUE,numpy.linspace(VALUE_TRUE.min(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_bins,"numpy.linspace(MIN,MAX,Nbin)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_avg,numpy.average(residual),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
h_id,"numpy.digitize(VALUE_TRUE,xh1)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
h_id,"numpy.digitize(VALUE_PRED,bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
h_id,"numpy.digitize(RAND_TRUE,bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median[i],numpy.median(RESIDUAL[id_]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_2[i],numpy.median(RESIDUAL[id_]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_3[i],numpy.median(RAND_RESIDUAL[id_]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_med,numpy.median(residual),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s3,"numpy.append(x_s3[0]-1,x_s3)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s3,"numpy.append(x_s3,x_s3[-1]+1,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s2,"numpy.append(x_s2[0]-1,x_s2)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s2,"numpy.append(x_s2,x_s2[-1]+1,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s1,"numpy.append(x_s1[0]-1,x_s1)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s1,"numpy.append(x_s1,x_s1[-1]+1,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h2,yh2,xh2","numpy.histogram2d(VALUE_PRED,VALUE_TRUE,bins=[bin_VALUE_TRUE,bin_VALUE_TRUE])",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
history,numpy.load(history_file),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h1,xh1","numpy.histogram(VALUE_TRUE,bins=bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_weight,xh_weight","numpy.histogram(VALUE_TRUE,bins=bin_VALUE_TRUE,weights=RESIDUAL)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h3,xh3","numpy.histogram(VALUE_PRED,bins=bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_weight,xh_weight","numpy.histogram(VALUE_PRED,bins=bin_VALUE_TRUE,weights=RESIDUAL)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h4,xh4","numpy.histogram(RAND_TRUE,bins=bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_weight,xh_weight","numpy.histogram(RAND_TRUE,bins=bin_VALUE_TRUE,weights=RAND_RESIDUAL)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_residual,x_h","numpy.histogram(residual,bins=residual_bins)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
movement,numpy.loadtxt(realign_file),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
plot_realign_parameters,matplotlib.pyplot.tight_layout(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
b,numpy.zeros(Nx*Ny),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,numpy.zeros(Nx*Ny),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ys,"numpy.linalg.solve(A,b)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
book_ratings,"pandas.merge(users_with_ratings_above_200,books,on='ISBN')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
ratings,"pandas.read_csv(r'Data/BX-Book-Ratings.csv',encoding='latin-1')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
books,"pandas.read_csv(r'Data/BX-Books.csv',error_bad_lines=False,encoding='latin-1')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
users,"pandas.read_csv(r'Data/BX-Users.csv',sep=';',encoding='latin-1')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
popular_books_matrix,scipy.sparse.csr_matrix(popular_books.values),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
model_knn,"sklearn.neighbors.NearestNeighbors(metric='cosine',algorithm='brute')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sns.set(context,"""notebook"",style=""white"",palette=seaborn.color_palette(""RdBu"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Xdata,"numpy.concatenate((X,Xval)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
argmax_fs,numpy.argmax(fs),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
argmax_fs,numpy.argmax(fs),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
epsilon,numpy.linspace(np.min(pval),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
epsilon,numpy.linspace(np.min(pval),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cov,numpy.cov(X.T),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cov,numpy.cov(X.T),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cov,numpy.cov(X.T),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cov,numpy.cov(Xdata.T),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pos,"numpy.dstack((x,y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pos,"numpy.dstack((x,y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(X,columns=['Latency','Throughput'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(X,columns=['Latency','Throughput'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(Xtest,columns=['Latency','Throughput'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mat,scipy.io.loadmat('./data/ex8data1.mat'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mat,scipy.io.loadmat('./data/ex8data2.mat'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
multi_normal,"scipy.stats.multivariate_normal(mu,cov)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
multi_normal,"scipy.stats.multivariate_normal(mu,cov)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
multi_normal,"scipy.stats.multivariate_normal(mu,cov)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
multi_normal,"scipy.stats.multivariate_normal(mu,cov)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sim[i],"numpy.inner(vec[i],vote.transpose()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
vec,"numpy.ones((1004,3026)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sim,"numpy.ones((1004,)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sim,"numpy.ones((1004,)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
M,numpy.argmax(sim),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,"pandas.concat((X,X_dummy)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,"pandas.concat((X,X_dummy)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,"pandas.concat((X,X_dummy)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
trainset,"pandas.read_csv(""IMDBMovieData.csv"",encoding='latin-1')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
trainset,"pandas.read_csv(""IMDBMovieData.csv"",encoding='latin-1')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
header,"pandas.read_csv(""testing.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
trainset,"pandas.read_csv(""IMDBMovieData.csv"",encoding='latin-1')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""testing.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
trainset,"pandas.read_csv(""IMDBMovieData.csv"",encoding='latin-1')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
s1w,"re.findall('\w+',s1.lower()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
s2w,"re.findall('\w+',s2.lower()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
tab,"pandas.read_csv('../../data/heston_dor.csv',sep=',')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,numpy.zeros(5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,numpy.zeros(5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features_dataset,labels_dataset,test_size=0.15,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scale1,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
arr1,numpy.asarray(arr1),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
arr2,numpy.asarray(arr2),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,numpy.full(len(news_A_clean['class']),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
news_A,"pandas.read_csv(data_path,delimiter=',')",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
news_B,"pandas.read_csv(data_path,delimiter=',')",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cfsmt,"sklearn.metrics.confusion_matrix(y,mnb.predict(X)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cfsmt,"sklearn.metrics.confusion_matrix(y3,mnb.predict(X3)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cfsmt,"sklearn.metrics.confusion_matrix(y3,rf_prediction)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cfsmt,"sklearn.metrics.confusion_matrix(y3,mnb.predict(X3)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cfsmt,"sklearn.metrics.confusion_matrix(y3,dt.predict(X3)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cfsmt,"sklearn.metrics.confusion_matrix(y3,rf.predict(X3)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"seaborn.heatmap(normie,vmin=0.,vmax=1)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"seaborn.heatmap(normie,vmin=0.,vmax=1)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
c,"seaborn.heatmap(normie,vmin=0.,vmax=1)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.stripplot(news_A['class'],news_A['w31_steve'],jitter=True,alpha=0.5)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnb2,sklearn.naive_bayes.MultinomialNB(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
dt,sklearn.tree.DecisionTreeClassifier(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
dt,sklearn.tree.DecisionTreeClassifier(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(n_estimators=50),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.arange(-3,3,0.05)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.arange(-6,6,0.05)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
path_y,"numpy.arange(-6,6,0.05)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
path_x,numpy.zeros(path_y.size),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"x,y","numpy.meshgrid(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"path_x,path_y","numpy.meshgrid(path_x,path_y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
all_company_names,pandas.concat([registry['company_name'].dropna(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
indptr,"numpy.zeros(M+1,dtype=idx_dtype)",CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
indices,"numpy.zeros(nnz_max,dtype=idx_dtype)",CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"numpy.zeros(nnz_max,dtype=A.dtype)",CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
similairity,numpy.zeros(nr_matches),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
left_side,"numpy.empty([nr_matches],dtype=object)",CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
right_side,"numpy.empty([nr_matches],dtype=object)",CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
string,"re.sub(r'[,-./]|\sBD',r'',string)",CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"w,b,X,Y","numpy.array([[1.],[2.]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
w,"numpy.array([[0.1124579],[0.23106775]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
X,"numpy.array([[1.,-1.1,-3.2],[1.2,2.,0.1]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
Y_prediction,"numpy.zeros((1,m)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
cost,numpy.squeeze(cost),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
costs,numpy.squeeze(d['costs']),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
legend,"matplotlib.pyplot.legend(loc='uppercenter',shadow=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
x,numpy.cos(u),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,numpy.cos(v),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.sin(u),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
u,"numpy.linspace(0,2*np.pi,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0,np.pi,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
verbs_class,"pandas.merge(vt,bun_verbs,on=u""動詞"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
bun_verbs,"pandas.read_csv(u""D:/研究/データ/bunruidb/bunruidb.txt"",encoding='shift-jis',header=None)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
verb_thesaurus,"pandas.read_csv(u""D:/vthesaurus_ver3.csv"",encoding=""utf-8"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
log_price,numpy.log(data_cleaned['Price']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_with_dummies,"pandas.get_dummies(data_no_multicollinearity,drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
raw_data,pandas.read_csv('1.04.Real-lifeexample.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,sharey=True,figsize=(15,3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,sharey=True,figsize=(15,3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ifnp.argmax(result),=numpy.argmax(Y_validate[x]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
Y,pandas.get_dummies(data['sentiment']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('data/imdb_master.csv',header=0,names=['id','split','review','sentiment','file'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.4,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
X_df,pandas.DataFrame(X_speech.toarray(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
X_df,pandas.DataFrame(X_speech.toarray(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
Eng_df,pandas.DataFrame(fin_speech.toarray(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
Eng_df,pandas.DataFrame(fin_speech.toarray(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
horizontal_stack,"pandas.concat([X_df,df_v2],axis=1)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
horizontal_stack,"pandas.concat([X_df,df_v2],axis=1)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
horizontal_stack,"pandas.concat([Eng_df,fin_df],axis=1)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
horizontal_stack,"pandas.concat([Eng_df,fin_df],axis=1)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
confusion_matrix,"pandas.crosstab(y_test,y_predicted1,rownames=['Actual'],colnames=['Predicted'],margins=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
confusion_matrix,"pandas.crosstab(y_test,y_predicted,rownames=['Actual'],colnames=['Predicted'],margins=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
confusion_matrix,"pandas.crosstab(y_test,y_predicted1,rownames=['Actual'],colnames=['Predicted'],margins=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
confusion_matrix,"pandas.crosstab(y_test,y_predicted,rownames=['Actual'],colnames=['Predicted'],margins=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
confusion_matrix,"pandas.crosstab(y_test,y_predicted,rownames=['Actual'],colnames=['Predicted'],margins=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_merge,"pandas.merge(df,df_eng,on=""Speech"")",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
data,pandas.read_csv('/content/text_vid.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_eng,pandas.read_csv('/content/text_trans.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
letters_only,"re.sub(""[^a-zA-Z]"","""",tags_rem)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
letters_only,"re.sub(""[^a-zA-Z]"","""",tags_rem)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
log_reg,sklearn.linear_model.LogisticRegression(max_iter=100000000),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
log_reg,sklearn.linear_model.LogisticRegression(max_iter=100000000),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
log_reg,sklearn.linear_model.LogisticRegression(max_iter=100000000),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
log_reg,sklearn.linear_model.LogisticRegression(max_iter=100000000),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(random_state=0),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(random_state=0),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,
bootstrap=True,
max_features='sqrt')",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
model,"sklearn.ensemble.RandomForestClassifier(bootstrap=True,
max_features='sqrt',n_estimators=160,max_depth=8,min_samples_split=4,min_samples_leaf=7)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
model,"sklearn.ensemble.RandomForestClassifier(bootstrap=True,
max_features='sqrt',n_estimators=160,max_depth=8,min_samples_split=4,min_samples_leaf=7)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
model,"sklearn.ensemble.RandomForestClassifier(bootstrap=True,
max_features='sqrt',n_estimators=160,max_depth=8,min_samples_split=4,min_samples_leaf=7)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
b,collections.Counter(a),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
b,collections.Counter(a),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
b,collections.Counter(a),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
b,collections.Counter(a),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
b,collections.Counter(a),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
b,collections.Counter(a),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
clf,"sklearn.svm.SVC(kernel='linear',probability=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
source,requests.get(url),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
toronto,pandas.DataFrame(columns=column_names),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(csv_path),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
j,json.load(f),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
d['time'],datetime.datetime.fromtimestamp(d['time']),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"df3[['control','treatment']]",pandas.get_dummies(df['group']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df5[['CA','US']]",pandas.get_dummies(df5['country']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('ab_data.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df4,pandas.read_csv('countries.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p_diffs,numpy.array(p_diffs),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mcdon,"pandas.read_csv('mcdonalds.csv',index_col='Date',parse_dates=True)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tokens,numpy.asarray([tokens]),CLUSTER_10,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
casing,numpy.asarray([casing]),CLUSTER_10,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
labels,"numpy.expand_dims([labels],-1)",CLUSTER_10,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_10,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
cat,"numpy.zeros([25,13],dtype=dtype)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dtype,"numpy.dtype([('ra',float)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
ngood,numpy.sum(good2),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pndist,numpy.sqrt((df['pmra']-medpmra),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
medpmra,numpy.median(df['pmra'][good1]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
medpmdec,numpy.median(df['pmdec'][good1]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
medplx,numpy.median(df['parallax'][good2]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
test,"numpy.arange(-4,4,0.2)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_regression(n_samples=100,
n_features=1,
noise=20,
random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
TP,numpy.sum(income),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
TP,numpy.sum(income),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
features_log_transformed,pandas.DataFrame(data=features_raw),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
features_log_minmax_transform,pandas.DataFrame(data=features_log_transformed),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results_clf_A,"pandas.DataFrame(results[""RandomForestClassifier""])",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results_clf_B,"pandas.DataFrame(results[""GaussianNB""])",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results_clf_C,"pandas.DataFrame(results[""LogisticRegression""])",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
features_final,pandas.get_dummies(features_log_minmax_transform),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""census.csv"")",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features_final,
income,
test_size=0.2,
random_state=0)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['f_train'],"sklearn.metrics.fbeta_score(y_train[:300],predictions_train,beta)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['f_test'],"sklearn.metrics.fbeta_score(y_test,predictions_test,beta)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['acc_train'],"sklearn.metrics.accuracy_score(y_train[:300],predictions_train)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['acc_test'],"sklearn.metrics.accuracy_score(y_test,predictions_test)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_A,sklearn.ensemble.RandomForestClassifier(random_state=111),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.RandomForestClassifier(random_state=111),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_B,sklearn.naive_bayes.GaussianNB(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_C,sklearn.linear_model.LogisticRegression(random_state=111),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(random_state=111),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
grid_obj,"sklearn.model_selection.GridSearchCV(estimator=clf,param_grid=parameters,scoring=scorer,cv=5)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
scorer,"sklearn.metrics.make_scorer(fbeta_score,beta=0.5)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
yvals,"numpy.arange(250,1000+dyp,dyp)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
zmap,numpy.array(da.values.copy(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pts,"numpy.empty((nmaps,len(yvals)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dd,numpy.where(np.abs(z-zt),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"(nmaps,ysize,xsize)",numpy.shape(da.values),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dmap,"numpy.diff(smap,n=1,axis=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dx,numpy.median(np.diff(x),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(da.coords['Alongshore'],da.coords['Cross-shore'].values)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
md,numpy.nanmin(np.abs(z-zt),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_MHHW,"numpy.nanmean(pts[0:13,:,6],axis=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_3m,"numpy.nanmean(pts[0:13,:,5],axis=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
std_MHHW,"numpy.nanstd(pts[0:13,:,6],axis=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
std_3m,"numpy.nanstd(pts[0:13,:,5],axis=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,7)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,1,figsize=(7,5)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
labels,"numpy.array([1,2,3,0,2,1])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
toss,"random.randint(0,1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
CityID,"pandas.DataFrame(df,columns=['CityID'])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.load_iris(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.GridSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.GridSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.GridSearchCV(MultinomialNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(MultinomialNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(MultinomialNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
data,"sklearn.datasets.fetch_20newsgroups_vectorized(subset='all',remove=('headers','footers','quotes')",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
data,sklearn.datasets.load_wine(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
filenames,os.listdir('data/arabian_nights'),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
filenames,os.listdir('data/arabian_nights'),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
filenames,os.listdir('data/arabian_nights'),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
whitespace,re.compile(r'\s+'),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
cnt,collections.Counter(tokens),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
cnt,collections.Counter(),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(data_path+'taxi_data1.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
Linear,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
GDBT,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
frame_data,matplotlib.pyplot.gcf(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
frame_res,matplotlib.pyplot.gcf(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
frame_data,matplotlib.pyplot.gcf(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
frame_res,matplotlib.pyplot.gcf(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
"Nevt,*_","matplotlib.pyplot.hist2d(X,Y,(XYbins,XYbins)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
lims,matplotlib.pyplot.xlim(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
lims,matplotlib.pyplot.xlim(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
r,requests.get(f_url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(data,columns=['AUTHOR','TEXT','RATING'])",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
current_date,"datetime.datetime.strptime(row[0],""%Y-%m-%d"")",CLUSTER_30,CLUSTER_5,CLUSTER_1,CLUSTER_0,CLUSTER_1
pop_data,json.load(f),CLUSTER_30,CLUSTER_5,CLUSTER_1,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.axes(projection='3d',elev=50,azim=-50)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.axes(projection='3d',elev=50,azim=-50)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(8,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(8,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(func,x0=x0,method='Newton-CG',
jac=True,tol=1e-20,callback=print)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(func,x0=x0,method='Newton-CG',
jac=True,tol=1e-20,callback=make_scipy.optimize.minimize_cb(path_)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
X,numpy.array(ct.fit_transform(X),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
dataset,pandas.read_csv('./sample_data/Data.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
imputer,"sklearn.impute.SimpleImputer(missing_values=np.nan,strategy='mean')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
labelencoder_y,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ct,"sklearn.compose.ColumnTransformer([('encoder',OneHotEncoder()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sc_y,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
arr,numpy.arange(25),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.arange(0,10)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.arange(0,11)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.arange(0,11)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.arange(10,81,2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
matarr,"numpy.arange(3,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,numpy.arange(9),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,numpy.arange(25),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
ind,numpy.arange(top_n_predictions),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
table,numpy.array([((i/255.0),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
X_ext,"numpy.empty([0,X.shape[1],X.shape[2],X.shape[3]],dtype=X.dtype)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_ext,"numpy.empty([0],dtype=y.dtype)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
X_extended,"numpy.empty([0,X_train.shape[1],X_train.shape[2],X_train.shape[3]],dtype=X_train.dtype)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_extended,"numpy.empty([0],dtype=y_train.dtype)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
gray_img,"numpy.empty([size,shape[0],shape[1]],dtype=img.dtype)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
same_samples,numpy.where(y_train==i),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
samples_in_class,numpy.bincount(y_train),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
X_train,"numpy.append(X_train,np.array(new_train_data)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_train,"numpy.append(y_train,np.array(new_lable_data)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
X_ext,"numpy.append(X_ext,np.expand_dims(image2,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_ext,"numpy.append(y_ext,np.full((1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
X_ext,"numpy.append(X_ext,np.expand_dims(image3,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_ext,"numpy.append(y_ext,np.full((1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
X_train,"numpy.append(X_train,X_extended,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_train,"numpy.append(y_train,y_extended,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
"classes_names,classes_counts","numpy.unique(y_train,return_counts=True)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
signnames,"numpy.genfromtxt('traffic-signs-data/signnames.csv',dtype=str,delimiter=',',skip_header=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
loss_plot,matplotlib.pyplot.subplot(211),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
acc_plot,matplotlib.pyplot.subplot(212),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
"fig,axies","matplotlib.pyplot.subplots(nrows=n_samples,ncols=2)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
train_sale,pandas.read_csv('data/train_sales_data.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_search,pandas.read_csv('data/train_search_data.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_usr,pandas.read_csv('data/train_user_reply_data.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
triangle,"numpy.array([[(49,h)",CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mask,numpy.zeros_like(img),CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
line_img,numpy.zeros_like(original_img),CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
line_img,numpy.zeros_like(original_img),CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
kernel,"numpy.ones((5,5)",CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
kernel,"numpy.ones((5,5)",CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
left_line_avg,"numpy.mean(left_line,axis=0)",CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
right_line_avg,"numpy.mean(right_line,axis=0)",CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v,numpy.median(image),CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"slope,intercept,r_value,p_value,std_err","scipy.stats.linregress(x,y)",CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.graph,collections.defaultdict(set),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
xy,"numpy.loadtxt('../data/data-03-diabetes.csv',delimiter=',',dtype=np.float32)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
tips,seaborn.load_dataset('tips'),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
covid,pandas.read_csv(R'Z:\Ahsan\Downloads\785492_1361825_bundle_archive/covid.csv'),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
test,pandas.read_csv(R'Z:\Ahsan\Downloads\785492_1361825_bundle_archive\test_set.csv'),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
train,pandas.read_csv(R'Z:\Ahsan\Downloads\785492_1361825_bundle_archive\training_set.csv'),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,axs0",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,axs1",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,axs3",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
train3,"numpy.array(train2,np.int32)",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
test2,"numpy.array(test2,np.int32)",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
predictions,numpy.array(predictions),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
summaryDataFrame,"pandas.DataFrame({""NumberofUniqueItems"":[numberUniqueItems],
""AveragePrice"":[averagePurchaseCost],
""NumberofPurchases"":[totalPurchases],
""TotalRevenue"":[totalRevenue]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
genderSummary,"pandas.DataFrame({
""Gender"":[""Male"",""Female"",""Other/Non-Disclosed""],
""NumberofPlayers"":[malePlayers,femalePlayers,otherPlayers],
""PercentofPlayers"":[malePercent,femalePercent,otherPercent]
})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
genderPurchaseSummary,"pandas.DataFrame({
""Gender"":[""Male"",""Female"",""Other/Non-Disclosed""],
""PurchaseCount"":[malePurchaseCount,femalePurchaseCount,otherPurchaseCount],
""AveragePurchasePrice"":[malePurchaseAveragePrice,femalePurchaseAveragePrice,otherPurchaseAveragePrice],
""TotalPurchaseValue"":[malePurchaseAmount,femalePurchaseAmount,otherPurchaseAmount],
""AvgTotalPurchaseperPerson"":[maleAveragePerPerson,femaleAveragePerPerson,otherAveragePerPerson]
})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ageDataFrame,"pandas.DataFrame({
""Age"":binLabels,
""Count"":ageList,
""Percent"":agePercent
})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"uniqueDataFrame[""AgeGroup""]","pandas.cut(uniqueDataFrame[""Age""],bins,labels=binLabels)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"purchaseData[""AgeGroup""]","pandas.cut(purchaseData[""Age""],bins,labels=binLabels)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
purchaseData,pandas.read_csv(file_to_load),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
score_array,numpy.vstack(scorelist),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig4,"matplotlib.pyplot.figure(figsize=[12,8])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig5,"matplotlib.pyplot.figure(figsize=[15,8])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(pca_lin_est,X_train_pca[:,:use_pcs],y_train,cv=5)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.model_selection.cross_val_score(linreg_est,X_train_k,y_train_sm,cv=kf)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gs_rf,"sklearn.model_selection.GridSearchCV(rf,parameters)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gs_gbr,"sklearn.model_selection.GridSearchCV(gbr,parameters)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_sm,X_valid,y_train_sm,y_valid","sklearn.model_selection.train_test_split(X_train,y_train,test_size=150,random_state=7)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=3,shuffle=True,random_state=7)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fullpca,"sklearn.decomposition.PCA(n_components=0.9,svd_solver='full')",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
simple_est,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_lin_est,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg_est,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg_est,sklearn.linear_model.LinearRegression(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_pca_est,"sklearn.linear_model.Ridge(alpha=best_alpha,fit_intercept=True)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_pca_est,"sklearn.linear_model.RidgeCV(alphas=alphas,fit_intercept=True,cv=5)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_feat_est,"sklearn.linear_model.RidgeCV(alphas=alphas,fit_intercept=True,cv=5)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elnet_est,"sklearn.linear_model.ElasticNetCV(l1_ratio=ratios,alphas=alphas,fit_intercept=True,cv=5)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elnet_est,"sklearn.linear_model.ElasticNet(l1_ratio=best_ratio,alpha=best_alpha,fit_intercept=True)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2train,"sklearn.metrics.r2_score(y_train,y_hat_train)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2test,"sklearn.metrics.r2_score(y_test,y_hat_test)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_est,"sklearn.ensemble.GradientBoostingRegressor(max_depth=4,n_estimators=100)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=64,max_features='sqrt',random_state=7)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_est,"sklearn.ensemble.RandomForestRegressor(n_estimators=512,max_features='sqrt',max_depth=7)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"pcc,_","scipy.stats.pearsonr(y_hat,y)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"pcc,_","scipy.stats.pearsonr(y_test,y_hat_test)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('wine_qual_EDA.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
cbar,matplotlib.pyplot.colorbar(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
I_XT_array,"numpy.array(extract_array(data,'local_IXT')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
I_TY_array,"numpy.array(extract_array(data,'local_ITY')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.squeeze(np.array(data_array['informationError']),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t0,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t1,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_imgs,numpy.array(cov_train_imgs+pne_train_imgs),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
train_labels,numpy.array(cov_train_num*[1]+pne_train_num*[0]),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
test_imgs,numpy.array(cov_test_imgs+pne_test_imgs),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
test_labels,numpy.array(cov_test_num*[1]+pne_test_num*[0]),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
train_acc,"np.mean(numpy.argmax(train_labels,axis=1)==numpy.argmax(train_labels_pred,axis=1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
test_acc,"np.mean(numpy.argmax(test_labels,axis=1)==numpy.argmax(test_labels_pred,axis=1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
train_acc,"numpy.mean(np.argmax(train_labels,axis=1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
test_acc,"numpy.mean(np.argmax(test_labels,axis=1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
df2['ab_page'],pandas.get_dummies(df['group']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"joined_df[['CA','UK','US']]",pandas.get_dummies(joined_df['country']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('ab_data.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
countries,pandas.read_csv('countries.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
both_cancer,"pandas.concat([fem_cancer_df,male_cancer_df],axis=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
master_data,"pandas.merge(both_cancer,new_gdp,on=['CountryCode'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
female_df,pandas.read_csv('Resources/ghe2016_deaths_country_fmle.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
male_df,pandas.read_csv('Resources/ghe2016_deaths_country_mle.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
gdp_df,pandas.read_csv('Resources/world_gdp.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
palabras,re.compile(patron),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
url,"re.compile(r""^(https?:\/\/)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
patron,"re.compile(r""[\w.%+-]+@[\w.-]+\.[a-zA-Z]{2,6}"")",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
fecha,re.compile(r'^(0?[1-9]|[12][0-9]|3[01]),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
a_list,numpy.array(a_list),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.array(data),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num,"random.randint(0,no_attr-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df4,"pandas.DataFrame([df4[""CountryName""],df4[""2012""]])",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df_1,"pandas.read_csv(os.getenv(""PUIDATA"")",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df2,"pandas.read_csv(os.getenv(""PUIDATA"")",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df3,"pandas.read_csv(os.getenv(""PUIDATA"")",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df4,"pandas.read_csv(os.getenv(""PUIDATA"")",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
yerr,numpy.sqrt(y*1.0),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
yerr,numpy.sqrt(y*1.0),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
yerr,numpy.sqrt(y*1.0),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
yerr,numpy.sqrt(y*1.0),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ind,numpy.array(x),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ind,numpy.array(x),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ind,numpy.array(x),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ind,numpy.array(x),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"numpy.repeat(d[...,np.newaxis],3,-1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ylabel,"'Truelabel',xticklabels=numpy.unique(trueClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
yticklabels,numpy.unique(trueClassName),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ylabel,"'Truelabel',xticklabels=numpy.unique(trueClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
yticklabels,numpy.unique(trueClassName),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ylabel,"'Truelabel',xticklabels=numpy.unique(trueClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
yticklabels,numpy.unique(trueClassName),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ylabel,"'Truelabel',xticklabels=numpy.unique(trueClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
yticklabels,numpy.unique(trueClassName),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(trueClassName,predClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(trueClassName,predClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(trueClassName,predClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(trueClassName,predClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cl,"sklearn.metrics.classification_report(trueClassName,predClassName,output_dict=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cl,"sklearn.metrics.classification_report(trueClassName,predClassName,output_dict=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
hist_df,pandas.DataFrame(history.history),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(times),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(cl),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(cm),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(cm),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(list(zip(validImgId,trueClassName,predClassName,predProbabilityAll)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(cl),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(cm),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(cm),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(list(zip(validImgId,trueClassName,predClassName,predProbabilityAll)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.epoch_time_start,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.get_dummies(train,columns=['gender','age','ever_married','work_type','Residence_type','avg_glucose_level','bmi','smoking_status'],drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.get_dummies(test,columns=['gender','age','ever_married','work_type','Residence_type','avg_glucose_level','bmi','smoking_status'],drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sample,pandas.read_csv('sample_submission.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.age,"np.digitize(train.age,bins=numpy.arange(start=train.age.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test.age,"np.digitize(test.age,bins=numpy.arange(start=test.age.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.avg_glucose_level,"np.digitize(train.avg_glucose_level,bins=numpy.arange(start=train.avg_glucose_level.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test.avg_glucose_level,"np.digitize(test.avg_glucose_level,bins=numpy.arange(start=test.avg_glucose_level.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.bmi,"np.digitize(train.bmi,bins=numpy.arange(start=train.bmi.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test.bmi,"np.digitize(test.bmi,bins=numpy.arange(start=test.bmi.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,"numpy.array([100,125,150])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
state,numpy.array(list(range(10),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.age,"numpy.digitize(train.age,bins=np.arange(start=train.age.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test.age,"numpy.digitize(test.age,bins=np.arange(start=test.age.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.avg_glucose_level,"numpy.digitize(train.avg_glucose_level,bins=np.arange(start=train.avg_glucose_level.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test.avg_glucose_level,"numpy.digitize(test.avg_glucose_level,bins=np.arange(start=test.avg_glucose_level.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.bmi,"numpy.digitize(train.bmi,bins=np.arange(start=train.bmi.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test.bmi,"numpy.digitize(test.bmi,bins=np.arange(start=test.bmi.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(random_state=123),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bbc,BalancedBaggingClassifier(base_estimator=sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=123)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg_score,"sklearn.model_selection.cross_val_score(logreg,X_train,y_train,cv=10,scoring='roc_auc')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bagc_score,"sklearn.model_selection.cross_val_score(bagc,X_train,y_train,cv=10,scoring='roc_auc')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bbc_score,"sklearn.model_selection.cross_val_score(bbc,X_train,y_train,cv=10,scoring='roc_auc')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
abc_score,"sklearn.model_selection.cross_val_score(abc,X_train,y_train,cv=10,scoring='roc_auc')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xgb_score,"sklearn.model_selection.cross_val_score(xgb,X_train,y_train,cv=10,scoring='roc_auc')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bagc,sklearn.ensemble.BaggingClassifier(LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(bagc,params,cv=10,scoring='roc_auc')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
abc,sklearn.ensemble.AdaBoostClassifier(LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
iris,sklearn.datasets.load_iris(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
MSE,"sklearn.metrics.mean_squared_error(y_test,y_pred)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
clf,sklearn.tree.DecisionTreeClassifier(max_depth=3),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
clf,sklearn.tree.DecisionTreeRegressor(max_depth=3),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(iris.data,iris.target,test_size=0.25,random_state=4)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(boston.data,boston.target,test_size=0.2,random_state=4)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'key1':[4,5,3,np.nan,2],
'key2':[1,2,np.nan,4,5],
'key3':[1,2,3,'j','k']},
index=['a','b','c','d','e'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'key1':np.arange(10),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'key1':list('asdcbvasd'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'key1':list('abcdef'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(np.random.randn(3,2)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(np.random.randn(3,2)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'key1':['a,b,c','1,2,3',[':,.,']],
'key2':['a-b-c','1-2-3',[':-.-']]})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'key1':list('abcdef'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df1,"pandas.DataFrame({'key':['K0','K1','K2','K3'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame({'key':['K0','K1','K2','K3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df3,"pandas.DataFrame({'key1':['K0','K0','K1','K2'],
'key2':['K0','K1','K0','K1'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df4,"pandas.DataFrame({'key1':['K0','K1','K1','K2'],
'key2':['K0','K0','K0','K0'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df1,pandas.DataFrame({'lkey':list('bbacaab'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,pandas.DataFrame({'rkey':list('abd'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df1,pandas.DataFrame({'key':list('abcdfeg'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame({'date2':range(100,105)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df1,pandas.DataFrame({'key':list('bbacaab'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,pandas.DataFrame({'key':list('abd'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
left,"pandas.DataFrame({'A':['A0','A1','A2'],
'B':['B0','B1','B2']},
index=['K0','K1','K2'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
right,"pandas.DataFrame({'C':['C0','C2','C3'],
'D':['D0','D2','D3']},
index=['K0','K2','K3'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df1,pandas.DataFrame({'key':list('bbacaab'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,pandas.DataFrame({'key':list('abd'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
left,"pandas.DataFrame({'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3'],
'key':['K0','K1','K0','K1']})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
right,"pandas.DataFrame({'C':['C0','C1'],
'D':['D0','D1']},
index=['K0','K1'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df1,"pandas.DataFrame([[np.nan,3.,5.],[-4.6,np.nan,np.nan],[np.nan,7.,np.nan]])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame([[-42.6,np.nan,-8.2],[-5.,1.6,4]],index=[1,2])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'key1':['a','a',3,4,5],
'key2':['a','a','b','b','c']})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'A':['foo','bar','foo','bar','foo','bar','foo','foo'],
'B':['one','one','two','three','two','two','one','three'],
'C':np.random.randn(8)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'X':['A','B','A','B'],'Y':[1,4,3,2]})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'A':['foo','bar','foo','bar','foo','bar','foo','foo'],
'B':['one','one','two','three','two','two','one','three'],
'C':np.random.randn(8)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'data1':np.random.rand(2),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(np.arange(16),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(np.arange(16),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'a':[1,1,2,2],
'b':np.random.rand(4)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'data1':np.random.rand(5),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'data1':np.random.rand(5),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'date':rng,
'key':list('abcdabcda')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'A':[1,2,2,2,2],
'B':[3,3,4,4,4],
'C':[1,1,np.nan,1,1]})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,pandas.Series(list('asdvasdcfgg'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series(np.arange(10,15)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series(['A','b','C','bbhello','123',np.nan,'hj'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series(['A','b','bbhello','123',np.nan])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series(['jack','jill','jesse','frank'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series(['a,b,c','1,2,3',['a,,,c'],np.nan])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series(['A','b','C','bbhello','123',np.nan,'hj'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s1,"pandas.Series([1,2,3])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s2,"pandas.Series([2,3,4])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s3,"pandas.Series([1,2,3],index=['a','c','h'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s4,"pandas.Series([2,3,4],index=['b','e','d'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s5,"pandas.Series([1,2,3],index=['a','b','c'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s6,"pandas.Series([2,3,4],index=['b','c','d'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series([1,1,1,1,2,2,2,3,4,5,5,5,5])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,pandas.Series(list('ascaazsd'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,pandas.Series(mapping),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series([1,2,3,10,20,30],index=[1,2,3,1,2,3])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
sre,"pandas.concat([s5,s6],keys=['one','two'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
sre,"pandas.concat([s5,s6],axis=1,keys=['one','two'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
x1,"pandas.merge(df1,df2,on='key',how='outer')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
x2,"pandas.merge(df1,df2,on='key',sort=True,how='outer')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
data2,"pandas.read_csv('data2.csv',engine='python')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
data3,"pandas.read_excel('地市级党委书记数据库（2000-10）.xlsx',sheetname='中国人民共和国地市级党委书记数据库（2000-10）',header=0)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
data1,"pandas.read_table('data1.txt',delimiter=',',header=0,index_col=1)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
rng,pandas.to_datetime(date),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
coins_name,"pandas.DataFrame(crypto_df['CoinName'],index=crypto_df.index)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
pcs_df,"pandas.DataFrame(principals,columns=[""PC1"",""PC2"",""PC3""],index=crypto_df.index)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
elbow_df,pandas.DataFrame(elbow),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
new_df,"pandas.DataFrame(data,columns=[""TotalCoinSupply"",""TotalCoinsMined""],
index=clustered_df.index)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
clustered_df,"pandas.concat([crypto_df,pcs_df],axis=1,sort=False)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"pandas.get_dummies(data=crypto_df,columns=['Algorithm','ProofType'])",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
crypto_df,"pandas.read_csv(file_path,index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,sklearn.preprocessing.StandardScaler(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
mm_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
principals,sklearn.decomposition.PCA(n_components=3),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
km,"sklearn.cluster.KMeans(n_clusters=i,random_state=0)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
model,"sklearn.cluster.KMeans(n_clusters=4,random_state=0)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
im,"numpy.expand_dims(im,axis=0)",CLUSTER_2,CLUSTER_11,CLUSTER_11,CLUSTER_11,CLUSTER_9
data,json.load(fp),CLUSTER_2,CLUSTER_11,CLUSTER_11,CLUSTER_11,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=78)",CLUSTER_29,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_29,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
enc,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_29,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
encode_df,pandas.DataFrame(enc.fit_transform(attrition_df[attrition_cat]),CLUSTER_29,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
attrition_df,pandas.read_csv('HR-Employee-Attrition.csv'),CLUSTER_29,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
rf_feature_importance,"pandas.DataFrame(clf.feature_importances_,
index=data_prepared_df.columns,
columns=['importance'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([data_2018,data_2019])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_2018,"pandas.read_csv(""../data/dataset_2018_with_negatives.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_2019,"pandas.read_csv(""../data/dataset_2019_with_negatives.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,'day_of_year']",pandas.to_datetime(X[self.datime_column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,'day_of_week']",pandas.to_datetime(X[self.datime_column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,'month']",pandas.to_datetime(X[self.datime_column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,'hour']",pandas.to_datetime(X[self.datime_column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df[f'{column}_cos'],numpy.cos((df[column]-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df[f'{column}_cos'],numpy.cos((df[column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,f'{self.column}_cos']",numpy.cos((X[self.column]-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,f'{self.column}_cos']",numpy.cos((X[self.column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df[f'{column}_sin'],numpy.sin((df[column]-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df[f'{column}_sin'],numpy.sin((df[column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,f'{self.column}_sin']",numpy.sin((X[self.column]-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,f'{self.column}_sin']",numpy.sin((X[self.column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax1,"seaborn.heatmap(cnf_mx,cmap='Blues',annot=True,fmt=""d"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax2,"seaborn.heatmap(norm_cnf_mx,cmap='Blues',annot=True,fmt="".4%"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax3,"matplotlib.pyplot.plot(fpr,tpr,label=f""{model_name},auc={round(auc,4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax3,"matplotlib.pyplot.plot([0,1],[0,1],color='darkorange',lw=2,linestyle='--')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(gs[0,0])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(gs[0,1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(gs[1,:])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test_val,y_train,y_test_val","sklearn.model_selection.train_test_split(data_prepared,labels,test_size=0.33,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_test,X_val,y_test,y_val","sklearn.model_selection.train_test_split(X_test_val,y_test_val,test_size=0.33,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test_val,y_train,y_test_val","sklearn.model_selection.train_test_split(data_prepared,labels,test_size=0.33,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_test,X_val,y_test,y_val","sklearn.model_selection.train_test_split(X_test_val,y_test_val,test_size=0.33,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cnf_mx,"sklearn.metrics.confusion_matrix(y_test,y_pred,labels=labels)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,y_pred_proba)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
auc,"sklearn.metrics.roc_auc_score(y_test,y_pred_proba)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='roc_auc',n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=150,max_leaf_nodes=50,min_samples_leaf=200,max_features=10,n_jobs=-1,criterion='entropy')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest_clf,"sklearn.ensemble.RandomForestClassifier(random_state=42,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest_clf,"sklearn.ensemble.RandomForestClassifier(random_state=42,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline_preprocess,"sklearn.pipeline.Pipeline([
('select_cols',FeatureSelector(cols_to_keep)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
full_pipeline,"sklearn.pipeline.Pipeline([
('preprocess',pipeline_preprocess)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(forest_clf,param_grid,cv=3,
scoring=['f1','roc_auc'],refit='f1',
return_train_score=True,verbose=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(forest_clf,param_grid,cv=3,
scoring=['f1','roc_auc'],refit='f1',
return_train_score=True,verbose=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_denc_onehot,"pandas.get_dummies(toronto_denc_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_toronto,"pandas.merge(dfC,df_geo_coor,how='left',left_on='PostalCode',right_on='PostalCode')",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_geo_coor,"pandas.read_csv(""./Geospatial_Coordinates.csv"")",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
website_text,requests.get('https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M'),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
image_df,pandas.read_csv(CSV_DIR+BLOB_CSV),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
df,"pandas.read_csv('../data/gapminder.tsv',sep='\t')",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-3.0,3.0,delta)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,"numpy.arange(-2.0,2.0,delta)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A,"numpy.array([x,np.ones(n)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
d,numpy.sqrt(a**2+b**2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,2*np.pi,50)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
a,"numpy.linspace(0,1,15)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0.0,1.0,n)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,30,100)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
result,"numpy.linalg.lstsq(A,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
CS,"matplotlib.pyplot.contour(X,Y,Z)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"ax.plot_surface(x,y,z,rstride","1,cstride=1,cmap=matplotlib.pyplot.get_cmap('jet')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"f,axes","matplotlib.pyplot.subplots(2,1,sharex=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
img,scipy.misc.face(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
current_dir,os.getcwd(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
cm,"sklearn.metrics.confusion_matrix(expected_labels,our_labels)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
ids,numpy.array([int(f[8:f.find('.'),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
correct,numpy.where(our_labels==expected_labels),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
incorrect,numpy.where(our_labels!=expected_labels),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
correct_cats,numpy.where((our_labels==0),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
correct_dogs,numpy.where((our_labels==1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
incorrect_cats,numpy.where((our_labels==0),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
incorrect_dogs,numpy.where((our_labels==1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
most_correct_cats,numpy.argsort(our_predictions[correct_cats]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
most_correct_dogs,numpy.argsort(our_predictions[correct_dogs]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
most_incorrect_cats,numpy.argsort(our_predictions[incorrect_cats]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
most_incorrect_dogs,numpy.argsort(our_predictions[incorrect_dogs]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
most_uncertain,numpy.argsort(np.abs(our_predictions-0.5),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
subm,"numpy.stack([ids,isdog],axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
test_agent.Q,"numpy.array([[[[[.5,0.],[0.,0.]],[[0.,0.],[0.,0.]]],[[[0.,0.],[0.,0.]],[[0.,0.],[0.,0.]]]],[[[[0.,0.],[0.,0.]],[[0.,0.],[0.,0.]]],[[[0.,0.],[0.,0.]],[[0.,0.],[.1,.2]]]]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_neg,"pandas.read_csv('negative.csv',sep=';',header=-1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_pos,"pandas.read_csv('positive.csv',sep=';',header=-1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df,"pandas.read_csv(path,sep='\t')",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
words_count,collections.defaultdict(lambda:0),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
report,"sklearn.metrics.classification_report(y_test,y_hat)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
report,"sklearn.metrics.classification_report(y_test,y_hat)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
diabetes_X,"numpy.array([[1],[2],[3]])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
diabetes_y_train,"numpy.array([3,2,4])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
diabetes_y_test,"numpy.array([3,2,4])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
array,"numpy.array(df[""平均功率""])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
array,numpy.array(df[str1]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,numpy.array(X),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,numpy.array(y),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
T,numpy.array(predict_data),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
S_train,"numpy.zeros((X.shape[0],len(self.base_models)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
S_predict,"numpy.zeros((T.shape[0],len(self.base_models)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
S_predict_i,"numpy.zeros((T.shape[0],self.n_splits)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clean_X,"numpy.concatenate([clean_X_train,clean_X_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clean_y,"numpy.concatenate([clean_y_train,clean_y_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
all_X_train,"numpy.concatenate([X_train,X_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
all_y_train,"numpy.concatenate([y_train,y_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
avg_mse,numpy.average(-nmse),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
avg_score,numpy.average(scores),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
res,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_result,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
bad_index,pandas.Int64Index(list(bad_index1),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
all_data,"pandas.concat([train_data,test_data],axis=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_data,pandas.read_csv('./data/public.train.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_data,pandas.read_csv('./data/public.test.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=123)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
forest1,"sklearn.ensemble.RandomForestRegressor(n_estimators=740,max_features='sqrt',random_state=7,n_jobs=12)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
forest2,"sklearn.ensemble.RandomForestRegressor(n_estimators=730,max_features='sqrt',random_state=9,n_jobs=12)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
forest3,"sklearn.ensemble.RandomForestRegressor(n_estimators=745,max_features='sqrt',random_state=11,n_jobs=12)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gbdt1,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=1060,max_depth=5,max_features='log2',random_state=789,learning_rate=0.08)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gbdt2,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=1100,max_depth=5,max_features='log2',random_state=123,learning_rate=0.08)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gbdt3,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=1090,max_depth=5,max_features='log2',random_state=1999,learning_rate=0.08)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sm,sklearn.feature_selection.SelectFromModel(GradientBoostingRegressor(random_state=2),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
stacking_model,"sklearn.svm.SVR(C=100,gamma=0.01,epsilon=0.01)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
stacking_model2,"sklearn.svm.SVR(C=100,gamma=0.01,epsilon=0.01)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
polynm,"sklearn.preprocessing.PolynomialFeatures(degree=2,interaction_only=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""../Bike-Sharing-Dataset-hour_new.csv"")",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
chose_data2['rating'],"numpy.where(chose_data2['rating']>3,1,0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
raw_data,pandas.read_csv('https://tf-assets-prod.s3.amazonaws.com/tf-curric/data-science/epi_r.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,seaborn.heatmap(chose_data.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,seaborn.heatmap(chose_data3.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr,sklearn.svm.SVR(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm,sklearn.svm.SVC(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm2,sklearn.svm.SVC(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,"pandas.read_csv('D:\pandas\pandas_work\ipython\LTC_Data_Test\LTC_v1.0_data_7_26_1.csv',sep=',')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
axHisX,"matplotlib.pyplot.bar(left=indx5_y,height=indx5_x,color='r',label='Mote_5')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
axHisX,"matplotlib.pyplot.bar(left=indx6_y,height=indx6_x,color='g',label='Mote_6')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
axHisX,"matplotlib.pyplot.bar(left=indx7_y,height=indx7_x,color='b',label='Mote_7')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
X,"pandas.concat([X,states],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
states,"pandas.get_dummies(X['State'],drop_first=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('Salary_data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('startups.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('Salary_Data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('Social_Network_Ads.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
linear_model,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
multiple_model,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly_lin,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"sklearn.metrics.r2_score(y_pred,y_test)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.arange(0,11)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.arange(0,11)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly_reg,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
logistic_model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
out,"pandas.DataFrame(scaled,index=df.index,columns=df.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cookies,pandas.read_csv('data/cookies_dummies.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tick_marks,numpy.arange(len(classNames),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(3,3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=nei),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=nei),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=nei),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(random_state=0,solver='lbfgs',C=k,
multi_class='multinomial')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(random_state=0,solver='lbfgs',C=k,
multi_class='multinomial')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ks_model,"sklearn.linear_model.LogisticRegression(solver='lbfgs',max_iter=200)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=k,max_depth=2,
random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm,sklearn.svm.SVC(gamma=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tr,"sklearn.tree.DecisionTreeClassifier(random_state=0,max_depth=k)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_pred,y_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,Y,test_size=0.2,shuffle=True,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaled,"sklearn.preprocessing.MinMaxScaler(feature_range=(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,sklearn.ensemble.RandomForestRegressor(max_depth=depth),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,sklearn.ensemble.RandomForestRegressor(max_depth=depth),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
auc,"sklearn.metrics.roc_auc_score(y_test,y_pred_proba)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,y_pred_proba)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dist,numpy.linalg.norm(database[identity]-encoding),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_5,CLUSTER_1
dist,numpy.linalg.norm(db_enc-encoding),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_5,CLUSTER_1
a,numpy.arange(12),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.arange(5),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.arange(3),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,numpy.arange(5),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.arange(10),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ar,"numpy.array([0,1,2,3,4,5,6,7,8,9])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
c,"numpy.array([[0,1,2],[3,4,5]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
d,"numpy.array([[[1,2,3,4],
[5,6,7,8],
[9,10,11,12]],
[[11,12,13,14],
[15,16,17,18],
[19,20,21,22]]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([1,2,3],dtype='f')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([1,2,3],dtype='U')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
A,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([[0,1,2],[3,4,5]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([[0,1,2,3],[4,5,6,7]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([0,1,2,3,4,5,6,7,8,9])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
idx,"numpy.array([True,False,True,False,True,False,True,False,True,False])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([11,22,33,44,55,66,77,88,99])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
idx,"numpy.array([0,2,4,6,8])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([11,22,33,44,55,66,77,88,99])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
idx,"numpy.array([0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([0,2,4,6,8])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b,"numpy.array([-1,-1,-1,-1,-1])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([[1,1],[2,2]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([1,2,3,2])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b,"numpy.array([2,2,3,2])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
c,"numpy.array([6,4,4,5])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([18,5,10,23,19,-8,10,0,0,5,2,15,8,
2,5,4,15,-1,4,-7,-24,7,9,-6,23,-13])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([1,2,3,4])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b,"numpy.array([10,2,3,40])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([[1],[2],[3]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.array([[4],[5],[6]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([1,2,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.array([4,5,6])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
A,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
B,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([[0,1,2],[3,4,5]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([[4,3,5,7],
[1,12,11,9],
[2,15,1,14]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([42,38,12,25])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array(['a','b','b','c','a'])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,numpy.zeros(5),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b,"numpy.zeros((2,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
c,"numpy.zeros((5,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
d,"numpy.zeros(5,dtype=""U4"")",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.zeros((100,100)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a2,"numpy.zeros((2,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b2,"numpy.zeros((3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
c2,"numpy.zeros((3,4)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.empty((4,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
e,"numpy.zeros_like(d,dtype='f')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b,"numpy.ones_like(a,dtype='f')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
innerproduct,"numpy.dot(x.T,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
result,"numpy.dot(x,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
C,"numpy.dot(A,B)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.ones((2,3,4)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a1,"numpy.ones((3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a1,"numpy.ones((2,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b1,"numpy.ones((2,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
c1,"numpy.ones((3,4)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
matrix2,numpy.identity(3),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
j,numpy.argsort(a),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
d,"numpy.stack([c1,c2],axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
e,"numpy.stack([c1,c2],axis=1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
f,"numpy.stack([c1,c2],axis=2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(x,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
matrix1,"numpy.diag([1,5,9])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
matrix3,numpy.eye(3),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"index,count","numpy.unique(a,return_counts=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mask,numpy.zeros_like(data.corr(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('african_crises.csv',sep="","")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,1,figsize=(10,10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,3,sharex='col',sharey='row',figsize=(15,5)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sorted_index,"numpy.argsort(X[:,d])",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
"x0,x1","numpy.meshgrid(
np.linspace(axis[0],axis[1],int((axis[1]-axis[0])",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
dt_clf,"sklearn.tree.DecisionTreeClassifier(max_depth=2,criterion='entropy',random_state=42)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
counter,collections.Counter(y),CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(r'C:\Users\acerpc\OneDrive\Desktop\Placement_Data_Full_Class.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=100)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
preprocessor,"sklearn.compose.ColumnTransformer(transformers=[('num',numerical_transformer,numerical_col)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.pipeline.Pipeline([
('preprocessor',preprocessor)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
numerical_transformer,sklearn.pipeline.make_pipeline(SimpleImputer(strategy='median'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
categorical_transformer,sklearn.pipeline.make_pipeline(SimpleImputer(strategy='most_frequent'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(clf,param_grid,cv=10,scoring='accuracy',n_jobs=-1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(grid,X_test,y_test,cv=5,scoring='f1',n_jobs=-1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
feature,"numpy.array([
[-500.5],
[-100.1],
[0],
[100.1],
[900.9]
])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
feature,"numpy.array([
[-1000.1],
[-200.2],
[500.5],
[600.6],
[9000.9]
])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
features,"numpy.array([
[0.5,0.5],
[1.1,3.4],
[1.5,20.2],
[1.63,34.4],
[10.9,3.3]
])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
features,"numpy.array([
[1.1,11.1],
[2.2,22.2],
[3.3,33.3],
[np.nan,55]
])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
minmax_scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
robust_scaler,sklearn.preprocessing.RobustScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
normalizer,"sklearn.preprocessing.Normalizer(norm=""l2"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
features_l1_norm,"sklearn.preprocessing.Normalizer(norm=""l1"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(features,columns=[""feature_1"",""feature_2""])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(features,columns=[""feature_1"",""feature_2""])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"features,_","sklearn.datasets.make_blobs(n_samples=50,
n_features=2,
centers=3,
random_state=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"features,_","sklearn.datasets.make_blobs(n_samples=1000,
n_features=2,
random_state=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clusterer,"sklearn.cluster.KMeans(3,random_state=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv('combined_df_v1.csv',encoding='utf-8')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
labels,numpy.array(data['label']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
features,numpy.array(data),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mean,numpy.mean(data['wpp']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
std,numpy.std(data['wpp']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"train_features,test_features,train_labels,test_labels","sklearn.model_selection.train_test_split(features,labels,test_size=0.25,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_jobs=2,random_state=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
losses,numpy.array(losses),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
img,numpy.squeeze(images[0]),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(3,3)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(figsize=(7,7)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(figsize=(7,12)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
positive_windows,numpy.array(positive_windows),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
negative_windows,numpy.array(negative_windows),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
data,"numpy.zeros((n,2500)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
data,"numpy.zeros((n,2500)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
data,"numpy.zeros((n,10000)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
is_negative,"numpy.ones((w,)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
data,numpy.load('handwriting_datasets/npy/1.npy'),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
t,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
t,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
t,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
filenames,os.listdir(path),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
regions_label,json.load(f),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
diabetes_df,pandas.read_csv('diabetes.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.33,random_state=3)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=200,max_depth=140,max_features='sqrt')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc_cv_score,"sklearn.model_selection.cross_val_score(rfc,X,Y,cv=10,scoring=""roc_auc"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc_cv_score,"sklearn.model_selection.cross_val_score(rfc,X,Y,cv=10,scoring='roc_auc')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc_random,"sklearn.model_selection.RandomizedSearchCV(estimator=rfc,param_distributions=random_grid,n_iter=100,cv=3,verbose=2,random_state=2,n_jobs=-1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
concatenated_df,"pandas.concat(df_from_each_file,ignore_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(f,encoding=""ISO-8859-1"")",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
cwd_dir_name,os.getcwd(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
dir_name,os.getcwd(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,figsize=(9,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,figsize=(9,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_img,"numpy.array([1ifxin[0,13,26]else0forxinrange(27)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_img,numpy.eye(4),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(title),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
imgplot,"matplotlib.pyplot.imshow(train_dataset[1],'gray')",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
imgplot,"matplotlib.pyplot.imshow(train_dataset[1],'gray')",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
imgplot,"matplotlib.pyplot.imshow(train_dataset[5],'gray')",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
dataset,"numpy.ndarray(
shape=(max_num_images,image_size,image_size)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
labels,numpy.ndarray(shape=(max_num_images),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
images,"numpy.reshape(train_dataset[:5000],[train_dataset[:5000].shape[0],28*28])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
test_images,"numpy.reshape(test_dataset,[test_dataset.shape[0],28*28])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
statinfo,os.stat(filename),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
statinfo,os.stat(pickle_file),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(test_labels,y_predict)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
gd,pandas.read_csv('Glassdoor_DS.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
temp,"pandas.merge(gdf_pop_area,totales,left_on='CVEGEO',right_on='CVEGEO')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
hex_bins,"pandas.merge(hex_bins,hex_temp,right_index=True,left_on=f'hex_id_{res}',how='left')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
submission,"pandas.DataFrame({""Loan_ID"":loan_id,
""Loan_Status"":prediction})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ct,"pandas.crosstab(train[""Education""],train[""Loan_Status""],margins=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""/home/pushpendra/Documents/career/ML/Dataset/loan_train.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""/home/pushpendra/Documents/career/ML/Dataset/loan_test.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.LogisticRegression(penalty=""l1"",C=0.1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.tree.DecisionTreeClassifier(max_depth=10,min_samples_leaf=100,max_features='sqrt')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc_train,"sklearn.metrics.accuracy_score(train[dependent_variable],predict_train)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
qpo_width,"numpy.array([1.0/100.0,1.0/300.0,1.0/200.0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
qpo_cent,"numpy.array([1.0/5.0,1.0/25.0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ma_coefs,"numpy.array([1.0,4.5,1.25,0.0,0.0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t,numpy.zeros(ny),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t[0:90],numpy.cumsum(dt[0:90]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
frequencies,"numpy.logspace(-4.0,0.0,200)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lag,"numpy.linspace(0.0,300.0,300)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ar_coefs,numpy.poly(ar_roots),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.genfromtxt('LC_G_15818.dat'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df,pd.get_dummies(df[i])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""train.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
n_jobs,"1,train_sizes=numpy.linspace(.1,1.0,5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
amenities_all,"numpy.unique(np.concatenate(df['amenities'].map(lambdax:x.split("","")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.ExtraTreesRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,"sklearn.feature_selection.SelectFromModel(clf,prefit=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gs_knn,"sklearn.model_selection.GridSearchCV(estimator=KNeighborsRegressor(p=2,
metric='minkowski')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gs_knn,"GridSearchCV(estimator=sklearn.neighbors.KNeighborsRegressor(p=2,
metric='minkowski')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
k,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submit,"pandas.DataFrame({'id':test['id'],'sales':y_pred_new1})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
agg.columns,pandas.Index(['_&_'.join(columns),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_test,"pandas.concat([train,test],axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.get_dummies(df,drop_first=True,columns=columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df,agg,how='left',on=columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(path+'train.csv',parse_dates=[0],nrows=None)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(path+'test.csv',parse_dates=[1],nrows=None)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pred_new1,numpy.exp(y_pred_new),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_test['sales_log'],numpy.log(train_test['sales']+1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(14,6)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=seed)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""./titanic_train.csv"",index_col=""PassengerId"")",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""./titanic_test.csv"",index_col=""PassengerId"")",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
train2,"pandas.read_csv(""./bike_train.csv"",parse_dates=[""datetime""])",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
"figure,((ax1,ax2,ax3),(ax4,ax5,ax6))","matplotlib.pyplot.subplots(nrows=2,ncols=3)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
g,"seaborn.kdeplot(train[""Age""][(train[""Survived""]==0)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
g,"seaborn.kdeplot(train[""Age""][(train[""Survived""]==1)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
g,"seaborn.kdeplot(train[""Age""][(train[""Survived""]==0)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
g,"seaborn.kdeplot(train[""Age""][(train[""Survived""]==1)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
edate,pandas.Timestamp(df['EDATE'][0]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.get_dummies(df),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""datasets/organics.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df['DOB'],"pandas.to_datetime(df['DOB'],format=dateformat)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_mat,y,test_size=0.3,stratify=y,random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.GridSearchCV(param_grid=params,estimator=MLPClassifier(random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.GridSearchCV(param_grid=params,estimator=MLPClassifier(random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.GridSearchCV(param_grid=params,estimator=MLPClassifier(random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,sklearn.neural_network.MLPClassifier(random_state=rs),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,"sklearn.neural_network.MLPClassifier(max_iter=100,random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,"sklearn.neural_network.MLPClassifier(max_iter=80,random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv,"GridSearchCV(param_grid=params,estimator=sklearn.neural_network.MLPClassifier(random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv,"GridSearchCV(param_grid=params,estimator=sklearn.neural_network.MLPClassifier(random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv,"GridSearchCV(param_grid=params,estimator=sklearn.neural_network.MLPClassifier(random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gss,pandas.read_csv('originalgss.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sd,numpy.sqrt(sum_of_difference2/N),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
session,requests.Session(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
response,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
response_json,"requests.post(f'https://{endpoint}/rules?key={key}',
data=json.dumps(rule_params)",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,json.dumps(rule_params),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
mydir,os.getcwd(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
mydir,os.getcwd(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
mydir,os.getcwd(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
timeEdited,"time.strftime(""%Y-%m-%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
rd,random.randrange(train_images.shape[0]-5),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_9,CLUSTER_7
error_idx,numpy.where(y_test_pca!=predictions),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('..\..\RandomForest\RandomForest2\mnist_My.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"pl.scatter(X_data_pca[:,0],X_data_pca[:,1],c","y_data,cmap=matplotlib.pyplot.get_cmap('nipy_spectral',10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(nrows=4,ncols=5,figsize=(15,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
startTime,datetime.datetime.now(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
startTime,datetime.datetime.now(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm,sklearn.svm.SVC(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svmpca,"sklearn.svm.SVC(kernel='linear',gamma=0.1,C=0.1,probability=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train_pca,y_test_pca","sklearn.model_selection.train_test_split(X_data,y_data,test_size=0.98,random_state=0,
stratify=y_data,shuffle=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_cv,"sklearn.model_selection.RandomizedSearchCV(svm,param_dist,scoring='accuracy',cv=kfold)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predictions,"sklearn.model_selection.cross_val_predict(svmpca,X_train_pca,y_train_pca,cv=3)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(0.95),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=154),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=3,random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
idxs,numpy.flatnonzero(y_train==y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
train_acc,numpy.mean(y_train==y_train_pred),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
val_acc,numpy.mean(y_val==y_val_pred),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
"boston[""CRIM""]","numpy.where(boston[""CRIM""]<0.038195,0.038195,boston[""CRIM""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"boston[""CRIM""]","numpy.where(boston[""CRIM""]>10.753,10.753,boston[""CRIM""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"avengers[""age""]","numpy.where(avengers[""age""]==9999,2500,avengers[""age""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df[""Fare""]","numpy.where(df[""Fare""]>65.6344,65,df[""Fare""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['Fare'],"numpy.where(df['Fare']>66,mean,df['Fare'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pct_missing,numpy.mean(df[col].isnull(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"q1,q3","numpy.percentile(df['Fare'],[25,75])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"q1,q3","numpy.percentile(datacolumn,[25,75])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DC,"pandas.DataFrame({""name"":['Alfred','Batman','Catwoman'],
""toy"":[np.nan,'Batmobile','Bullwhip'],
""born"":[pd.NaT,pd.Timestamp(""1940-04-25"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston,"pandas.DataFrame(boston_dataset.data,columns=boston_dataset.feature_names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
avengers,"pandas.DataFrame({""name"":['Iron_Man','Hawkeye','Thor'],
""skill"":['Rich','Archery','God'],
""age"":[42,38,9999]})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
food,"pandas.DataFrame({
'brand':['YumYum','YumYum','Indomie','Indomie','Indomie'],
'style':['cup','cup','cup','pack','pack'],
'rating':[4,4,3.5,15,5]
})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DC2,"pandas.DataFrame({""name"":['Alfred','Batman','Catwoman'],
""toy"":['12','Batmobile','Bullwhip']})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
NLP,pandas.DataFrame({'City':['NewYork(City),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
missing_data,"pandas.concat([total,percent],axis=1,keys=['Total','Percent'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fg,"seaborn.FacetGrid(df,hue=""Sex"",aspect=3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fg,"seaborn.FacetGrid(df,aspect=3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.boxplot(x=boston[""CRIM""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.boxplot(x=boston[""CRIM""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=""Fare"",y=""Age"",hue='Embarked',data=df)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston_dataset,sklearn.datasets.load_boston(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pos,"re.search('\(.*',City_name)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.returns,"pandas.DataFrame({
'stocks':self.stock_data['Close'].rolling(window=2,center=False)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
portfolios,"pandas.DataFrame({
'buy_and_hold':self.buy_and_hold(testing_indexes)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
portfolio_values,"pandas.DataFrame({
'buy_and_hold':self.evaluate(portfolios.buy_and_hold)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
factors,"pandas.DataFrame({'action':0,'reward':0,'state':0},index=training_indexes)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
testing,"pandas.DataFrame({'action':0,'state':0},index=testing_indexes)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
data,"pandas.DataFrame(data,columns=['Opentime','Open','High','Low','Close','Volume','Closetime','Quotevolume','Numtrades','btcbuys','coinbuys','ignore'])",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
fs_df,pandas.DataFrame(files),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
out,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
date_int,"pandas.DataFrame({""Date"":[d.strftime('%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
port,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
curr_port,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
positions,pandas.DataFrame(index=signals.index),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
all_ports,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
curr_port_hist,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
port_hist,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
prices,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
bt_returns,"pandas.DataFrame(returns,columns=['return'])",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
all_ports,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
curr_port_hist,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
bw_freq,pandas.concat(bw_freq),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
out,"pandas.concat([out,data],axis=0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
curr_port,"pandas.concat([curr_port,curr])",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
port,"pandas.concat([port,curr_port])",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
curr,pandas.read_csv(loc+i),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
fs,pandas.read_csv(freq_loc),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
T,"numpy.zeros((3,3,3)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
R,"numpy.zeros((3,3)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""p>2""]","numpy.where(signals[coin]>signals[""2""],1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""p>1""]","numpy.where(signals[coin]>signals[""1""],1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""p>-1""]","numpy.where(signals[coin]>signals[""-1""],1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""p>-2""]","numpy.where(signals[coin]>signals[""-2""],1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
signals['short'],"numpy.where(signals[coin]<signals[""stop""],-1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
signals['short2'],"numpy.where(signals[coin]<signals[""stop2""],-1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""p>2""]","numpy.where(signals[coin]>signals[""2""],1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""p>1""]","numpy.where(signals[coin]>signals[""1""],1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""short""]","numpy.where(signals[coin]<signals[""-1""],-1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""positions""]","numpy.where(signals[""positions""]==signals[""ss""],0.0,1.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
prices['returns'],numpy.log(prices[coin]/prices[coin].shift(1),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
action,"random.randint(-1,1)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
state_idx,"random.randint(0,2)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
action_idx,"random.randint(0,2)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
v,datetime.datetime.fromtimestamp(int(v),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
v,datetime.datetime.fromtimestamp(int(v),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
p,"datetime.datetime.strptime(p,'%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
n,"datetime.datetime.strptime(n,'%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
st,"datetime.datetime.strptime(d,'%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
end,"datetime.datetime.strptime(lastn[c+1],'%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
st,"datetime.datetime.strptime(d,'%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
end,"datetime.datetime.strptime(p_dates[c+1],'%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
epoch,datetime.datetime.utcfromtimestamp(0),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"plt.imshow(x_train[random_num],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.imshow(x_train[random_num],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.imshow(x_train[random_num],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.imshow(x_train[random_num],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.imshow(x_train[random_num],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.imshow(x_train[random_num],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,pandas.read_html('http://space-facts.com/mars/'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
K,"numpy.arange(0,Nk,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
K2,"numpy.arange(0,Nk2,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Rk,"numpy.zeros((Nk,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
qrows,"numpy.concatenate([np.arange(0,10,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
autocovs2,"numpy.correlate(Qp,Qp,mode='full')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
R,"numpy.corrcoef(Qtm1,Qt)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
R,"numpy.corrcoef(Qtmk,Qt)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
R,"numpy.corrcoef(Qtmk,Qt)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_pickle('MFBoiseDischarge_WY2001-2017.pkl'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
response,requests.get(target_url),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
response,requests.get(first_link),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
response,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(arrange_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
img,numpy.array(img),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
a,numpy.zeros(10),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
rnd_choice,"random.choice([0,1])",CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_ter,sklearn.decomposition.KernelPCA(kernel='rbf'),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
X_bis,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.asarray(im),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.asarray(img_pil),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
weekdays_spending_df,pandas.DataFrame(weekdays_spending),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
weekdays_spending_df,pandas.DataFrame(weekdays_spending),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays,pandas.DataFrame(df_date_twenty),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays,pandas.DataFrame(df_date_twenty),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays_up,pandas.DataFrame(df_date_twenty_up),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays_up,pandas.DataFrame(df_date_twenty_up),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays_up,pandas.DataFrame(df_date_twenty_up),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays_up,pandas.DataFrame(df_date_twenty_up),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays_up,pandas.DataFrame(df_date_twenty_up),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays_up,pandas.DataFrame(df_date_twenty_up),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_thirty_weekdays,pandas.DataFrame(df_date_thirty),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_raw,"pandas.read_csv(r""Card_Spanding_cl5.csv"",engine=""python"",encoding='utf-8-sig')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
summary,"pandas.DataFrame(columns=[""City""],data=city)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
raw_data,"pandas.read_csv(""../Dataset/stores.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(20,5)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
displacement_field,"numpy.zeros((width,height,2)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
vector_field,"numpy.zeros((width,height,2)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
trial_mouse_data,"pandas.merge(clin_trial_data,mouse_drug_data,how='left',on='MouseID')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clin_trial_data,"pandas.read_csv(""raw_data/clinicaltrial_data.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mouse_drug_data,"pandas.read_csv(""raw_data/mouse_drug_data.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x,y,palette=colors)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start_time,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
start,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
df,pandas.DataFrame(data=d),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'type':['FirstDeliveryPromo','LapsedCustomerPromo','MonthlySubscription','PercentageDiscount','no_promo'],'av_dollar_per_order':[778.360000,1059.150000,836.657064,743.980000,809.572466]})",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df2,"pandas.DataFrame({'type':['FirstDeliveryPromo','LapsedCustomerPromo','MonthlySubscription','PercentageDiscount','no_promo'],'av_rev_per_order':[769.601193,0,1166.043670,763.562000,861.854900]})",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
orders_prom,"pandas.merge(orders,promo_codes,left_on='id',right_on='order_id',how='left')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
orders_prom_stores,"pandas.merge(orders_prom,stores,left_on='store_id',right_on='id',how='left')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
orders_prom_stores_prod,"pandas.merge(sub_df,products,left_on='id',right_on='store_id',how='left')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
orders,"pandas.read_csv(""orders.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
order_items,"pandas.read_csv(""order_items.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
promo_codes,"pandas.read_csv(""promo_codes.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
restaurants,"pandas.read_csv(""restaurants.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
categories,"pandas.read_csv(""categories.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
categories_products,"pandas.read_csv(""categories_products.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
products,"pandas.read_csv(""products.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
stores,"pandas.read_csv(""stores.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
invoices,"pandas.read_csv(""invoices.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
invoice_items,"pandas.read_csv(""invoice_items.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
orders.created_at,pandas.to_datetime(orders.created_at),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
color,seaborn.color_palette(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
weights,numpy.zeros(features.shape[1]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
scores,"numpy.dot(features,weights)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
scores,"numpy.dot(features,weights)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
gradient,"numpy.dot(features.T,output_error_signal)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
intercept,"numpy.ones((features.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ll,numpy.sum(target*scores-np.log(1+np.exp(scores),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
simulated_labels,numpy.hstack((np.zeros(num_observations),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features,"numpy.hstack((intercept,features)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
simulated_separableish_features,"numpy.vstack((x1,x2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
flattened,pandas.DataFrame(min_max_pivot.to_records(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
flattened,pandas.DataFrame(min_max_pivot.to_records(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
flattened,pandas.DataFrame(min_max_pivot.to_records(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
feature_index,pandas.Index(explore_features),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
coeff_pivot,"pandas.pivot_table(new_df,index=['name','value','index'],columns=None,margins=False,values='abs_value')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
min_max_pivot,"pandas.pivot_table(new_df,index=['name'],values=['value'],aggfunc=[np.min,np.max])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
coeff_pivot,"pandas.pivot_table(new_df,index=['name','value','index'],columns=None,margins=False,values='abs_value')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
min_max_pivot,"pandas.pivot_table(new_df,index=['name'],values=['value'],aggfunc=[np.min,np.max])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
coeff_pivot,"pandas.pivot_table(new_df,index=['name','value','index'],columns=None,margins=False,values='abs_value')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
min_max_pivot,"pandas.pivot_table(new_df,index=['name'],values=['value'],aggfunc=[np.min,np.max])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
demographics['registr_dt'],pandas.to_datetime(demographics['registr_dt']),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
now,pandas.to_datetime('today'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
hist_series,numpy.array(demographics[feature].astype('string'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
spread,"numpy.logspace(-1,4,num=20)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
counts,collections.Counter(hist_series),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
calib,numpy.array(line[:-1].split(''),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
CALIB,"numpy.array([[F,0,W/2,EXT[0]],[0,F,H/2,EXT[1]],
[0,0,1,EXT[2]]],dtype=np.float32)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
depth,"numpy.array([location[2]],dtype=np.float32)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
pt_2d,numpy.array([(bbox[0]+bbox[2]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
ct,numpy.array(ct),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
r,numpy.array(vertexes),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
R,"numpy.array([[c,0,s],[0,1,0],[-s,0,c]],dtype=np.float32)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
corners,"numpy.array([x_corners,y_corners,z_corners],dtype=np.float32)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
R,"numpy.array([[c,0,s],[0,1,0],[-s,0,c]],dtype=np.float32)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
orientation_3d,"numpy.array([[0,dim[2]],[0,0],[0,0]],dtype=np.float32)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
vc,numpy.zeros(18),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
pts_3d_homo,"numpy.concatenate(
[pts_3d,np.ones((pts_3d.shape[0],1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
corners_3d,"numpy.dot(R,corners)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
pts_2d,"numpy.dot(P,pts_3d_homo.transpose(1,0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
orientation_3d,"numpy.dot(R,orientation_3d)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
"c,s",numpy.cos(rotation_y),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
"c,s",numpy.cos(rotation_y),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
sanca,"pandas.read_csv('gera_serie_SC.txt',sep=';')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sampa,"pandas.read_csv('gera_serie_SP.txt',sep=';')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sanca['Data'],pandas.to_datetime(sanca['Data']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sampa['Data'],pandas.to_datetime(sampa['Data']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,7)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,7)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(18,10)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Counts_np,numpy.array(Counts),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"plt.scatter(np.array(X),np.array(Y),c",numpy.array(New_labels),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Counts,numpy.zeros(len(Centers),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('checkins.csv',engine='python')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clustering,sklearn.cluster.MeanShift(bandwidth=0.1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train_augmented,numpy.array(X_train_augmented),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_train_augmented,numpy.array(y_train_augmented),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
X,numpy.array(ham_emails+spam_emails),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y,numpy.array([0]*len(ham_emails),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
image,"numpy.concatenate(row_images,axis=0)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
X_train_expanded,numpy.concatenate(X_train_expanded),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_train_expanded,numpy.concatenate(y_train_expanded),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
shifted_images,"numpy.apply_along_axis(shift_digit,axis=1,arr=X_train,dx=dx,dy=dy)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
mnist,"sklearn.datasets.fetch_openml('mnist_784',version=1)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
sgd_clf,"sklearn.linear_model.SGDClassifier(max_iter=1000,tol=1e-3,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
svm_scores,"sklearn.model_selection.cross_val_score(svm_clf,X_train,y_train,cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
forest_scores,"sklearn.model_selection.cross_val_score(forest_clf,X_train,y_train,cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
score,"sklearn.model_selection.cross_val_score(log_clf,X_train_transformed,y_train,cv=3,verbose=3)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
skfolds,"sklearn.model_selection.StratifiedKFold(n_splits=3,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_train_pred,"sklearn.model_selection.cross_val_predict(sgd_clf,X_train,y_train_5,cv=3)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_scores,"sklearn.model_selection.cross_val_predict(sgd_clf,X_train,y_train_5,cv=3,
method=""decision_function"")",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_probas_forest,"sklearn.model_selection.cross_val_predict(forest_clf,X_train,y_train_5,cv=3,
method=""predict_proba"")",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_train_pred_forest,"sklearn.model_selection.cross_val_predict(forest_clf,X_train,y_train_5,cv=3)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_train_pred,"sklearn.model_selection.cross_val_predict(sgd_clf,X_train_scaled,y_train,cv=3)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_train_knn_pred,"sklearn.model_selection.cross_val_predict(knn_clf,X_train,y_multilabel,cv=3)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_probas_dmy,"sklearn.model_selection.cross_val_predict(dmy_clf,X_train,y_train_5,cv=3,method=""predict_proba"")",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
conf_mx,"sklearn.metrics.confusion_matrix(y_train,y_train_pred)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
"precisions,recalls,thresholds","sklearn.metrics.precision_recall_curve(y_train_5,y_scores)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_train_5,y_scores)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
"fpr_forest,tpr_forest,thresholds_forest","sklearn.metrics.roc_curve(y_train_5,y_scores_forest)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
"fprr,tprr,thresholdsr","sklearn.metrics.roc_curve(y_train_5,y_scores_dmy)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
forest_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
forest_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
svm_clf,"sklearn.svm.SVC(gamma=""auto"",random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
svm_clf,"sklearn.svm.SVC(gamma=""auto"")",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
ovr_clf,"sklearn.multiclass.OneVsRestClassifier(SVC(gamma=""auto"",random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
knn_clf,"sklearn.neighbors.KNeighborsClassifier(weights='distance',n_neighbors=4)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(**grid_search.best_params_),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
dmy_clf,sklearn.dummy.DummyClassifier(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(knn_clf,param_grid,cv=5,verbose=3)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
self.most_frequent_,pandas.Series([X[c].value_counts(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
num_pipeline,"sklearn.pipeline.Pipeline([
(""select_numeric"",DataFrameSelector([""Age"",""SibSp"",""Parch"",""Fare""])",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
cat_pipeline,"sklearn.pipeline.Pipeline([
(""select_cat"",DataFrameSelector([""Pclass"",""Sex"",""Embarked""])",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
preprocess_pipeline,"sklearn.pipeline.Pipeline([
(""email_to_wordcount"",EmailToWordCounterTransformer()",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
preprocess_pipeline,"sklearn.pipeline.FeatureUnion(transformer_list=[
(""num_pipeline"",num_pipeline)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
structures,collections.Counter(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
word_counts,collections.Counter(text.split(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
stemmed_word_counts,collections.Counter(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
total_count,collections.Counter(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
text,"re.sub('<head.*?>.*?</head>','',html,flags=re.M|re.S|re.I)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
text,"re.sub('<a\s.*?>','HYPERLINK',text,flags=re.M|re.S|re.I)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
text,"re.sub('<.*?>','',text,flags=re.M|re.S)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
text,re.sub(r'(\s*\n),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
text,re.sub(r'\d+(?:\.\d*(?:[eE]\d+),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
text,"re.sub(r'\W+','',text,flags=re.M)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
log_clf,"sklearn.linear_model.LogisticRegression(solver=""lbfgs"",random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
log_clf,"sklearn.linear_model.LogisticRegression(solver=""lbfgs"",random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
data,"pandas.read_sql('''
SELECT
system_id,record_type,file_date,bus_id
FROMapc_raw_datapoints
GROUPBYsystem_id,record_type,bus_id,file_date''',
DB_ENGINE)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
export_df,"pandas.read_sql_query('''
SELECT
raw_record
FROM
apc_raw_datapoints
WHERE
file_date=TO_DATE(:file_date,'YYYY-MM-DD')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
game_logs,pandas.read_csv('data/retrograde_gamelog.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mlb_elo,"pandas.read_csv('data/mlb_final.csv',\
low_memory=False,index_col=[0])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
rg_codes,"pandas.read_csv('data/rg_codes_by_team.csv',index_col=[0])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
game_logs['date'],"pandas.to_datetime(game_logs['date'],format='%Y%m%d')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mlb_elo['date'],"pandas.to_datetime(mlb_elo['date'],format='%Y-%m-%d')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
states_df,"pandas.DataFrame(states,index=state_id,columns=['states'])",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
species,"pandas.DataFrame(index=[1,2,3,4],columns=['tree1','tree2','tree3','tree4','tree5'])",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
regions,"pandas.read_csv('State_Region.csv',index_col=0)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
people,pandas.DataFrame(people_dict),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
d2,"pandas.DataFrame(
people_dict,
columns=[""birthyear"",""weight"",""height""],
index=[""bob"",""alice"",""eugene""]
)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
d3,"pandas.DataFrame(
values,
columns=[""birthyear"",""children"",""hobby"",""weight""],
index=[""alice"",""bob"",""charles""]
)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
d3,"pandas.DataFrame(
masked_array,
columns=[""birthyear"",""children"",""hobby"",""weight""],
index=[""alice"",""bob"",""charles""]
)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
d4,"pandas.DataFrame(
d3,
columns=[""hobby"",""children""],
index=[""alice"",""bob""]
)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
people,"pandas.DataFrame({
""birthyear"":{""alice"":1985,""bob"":1984,""charles"":1992},
""hobby"":{""alice"":""Biking"",""bob"":""Dancing""},
""weight"":{""alice"":68,""bob"":83,""charles"":112},
""children"":{""bob"":3,""charles"":0}
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
d5,"pandas.DataFrame(
{
(""public"",""birthyear"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
grades,"pandas.DataFrame(grades_array,columns=[""sep"",""oct"",""nov""],index=[""alice"",""bob"",""charles"",""darwin""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
bonus_points,"pandas.DataFrame(bonus_array,columns=[""oct"",""nov"",""dec""],index=[""bob"",""colin"",""darwin"",""charles""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
large_df,"pandas.DataFrame(much_data,columns=list(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
my_df,"pandas.DataFrame(
[[""Biking"",68.5,1985,np.nan],[""Dancing"",83.1,1984,3]],
columns=[""hobby"",""weight"",""birthyear"",""children""],
index=[""alice"",""bob""]
)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
city_loc,"pandas.DataFrame(
[
[""CA"",""SanFrancisco"",37.781334,-122.416728],
[""NY"",""NewYork"",40.705649,-74.008344],
[""FL"",""Miami"",25.791100,-80.320733],
[""OH"",""Cleveland"",41.473508,-81.739791],
[""UT"",""SaltLakeCity"",40.755851,-111.896657]
],columns=[""state"",""city"",""lat"",""lng""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
city_pop,"pandas.DataFrame(
[
[808976,""SanFrancisco"",""California""],
[8363710,""NewYork"",""New-York""],
[413201,""Miami"",""Florida""],
[2242193,""Houston"",""Texas""]
],index=[3,4,5,6],columns=[""population"",""city"",""state""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"pandas.Series([2,-1,3,5])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s2,"pandas.Series([68,83,112,68],index=[""alice"",""bob"",""charles"",""darwin""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
surprise,"pandas.Series([1000,1001,1002,1003])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s3,pandas.Series(weights),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s4,"pandas.Series(weights,index=[""colin"",""alice""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s5,"pandas.Series([1000,1000,1000,1000])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
meaning,"pandas.Series(42,[""life"",""universe"",""everything""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s6,"pandas.Series([83,68],index=[""bob"",""alice""],name=""weights"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s7,"pandas.Series(temperatures,name=""Temperature"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_series,"pandas.Series(temperatures,dates)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
quarterly_revenue,"pandas.Series([300,320,290,390,320,360,310,410],index=quarters)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"people[""pets""]","pandas.Series({""bob"":0,""charles"":5,""eugene"":1})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
result_concat,"pandas.concat([city_loc,city_pop])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dates,"pandas.date_range('2016/10/295:30pm',periods=12,freq='H')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
all_cities,"pandas.merge(left=city_loc,right=city_pop,on=""city"",how=""outer"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
quarters,"pandas.period_range('2016Q1',periods=8,freq='Q')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
months_2016,"pandas.period_range(""2016"",periods=12,freq=""M"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
my_df_loaded,"pandas.read_csv(""my_df.csv"",index_col=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
us_cities,"pandas.read_csv(csv_url,index_col=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
grades_array,"numpy.array([[8,8,9],[10,9,9],[4,8,2],[9,10,10]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
bonus_array,"numpy.array([[0,np.nan,2],[np.nan,1,0],[0,1,0],[3,3,0]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
much_data,"numpy.fromfunction(lambdax,y:(x+y*y)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
masked_array,"numpy.ma.asarray(values,dtype=np.object)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(filename,sep='\t')",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv('data/test.tsv',sep='\t')",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
result_vector,numpy.zeros(dict_size),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
non_zero_elements_count,numpy.count_nonzero(row),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
text,"re.sub(REPLACE_BY_SPACE_RE,"""",text)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
text,"re.sub(BAD_SYMBOLS_RE,"""",text)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
REPLACE_BY_SPACE_RE,re.compile('[/(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
BAD_SYMBOLS_RE,"re.compile('[^0-9a-z
STOPWORDS=set(stopwords.words('english')",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
tags_counts,collections.Counter(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
words_counts,collections.Counter(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mlb,sklearn.preprocessing.MultiLabelBinarizer(classes=sorted(tags_counts.keys(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ovr,sklearn.multiclass.OneVsRestClassifier(lr),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(penalty=regl,C=C)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
combined,"pandas.concat((train_df,test_df)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combined['Age_band'],"pandas.cut(combined['Age'],5)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df,pandas.read_csv('../data/train.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df,pandas.read_csv('../data/test.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"seaborn.FacetGrid(train_df,row='Pclass',col='Sex')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/04_Apply/Students_Alcohol_Consumption/student-mat.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig1,"matplotlib.pyplot.figure(figsize=(5,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig2,"matplotlib.pyplot.figure(figsize=(5,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
maximum_price,numpy.amax(wine['quality']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
minimum_price,numpy.amin(wine['quality']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_price,numpy.mean(wine['quality']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_price,numpy.std(wine['quality']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
median_price,numpy.median(wine['quality']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=8),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(wine_attributes,wine_value,test_size=0.25)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_conf_matrix,"sklearn.metrics.confusion_matrix(y_test,lr_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_acc_score,"sklearn.metrics.accuracy_score(y_test,lr_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_feat,"pandas.DataFrame(scaled_features,columns=data.columns[:-1])",CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('bank_note_data.csv'),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc,sklearn.ensemble.RandomForestClassifier(n_estimators=200),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
boundaries,"numpy.array([[0,sim_param.x_length],[0,sim_param.y_length]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
placement_rsrc_range,"numpy.array([[2,3],[8,16],[2,5]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
placement_rsrc_range,"numpy.array([[1,1],[0.5,1],[0.5,1]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
placement_rsrc_range,"numpy.array([[1,2],[2,4],[1,2]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
weak_range,"numpy.array([[4,8],[1000,1500],[4,16]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
strong_range,"numpy.array([[50,100],[100000,150000],[300,600]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
rsrc_cost,"numpy.array([0.03,0.01,0.05])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
"servers_l3.append(Server(boundaries,level","3,rand_locs=False,locs=numpy.array([200,200])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
lv_minmax,"numpy.array(([[500,1000],[10000,20000],[30000,50000]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
link_costs,"numpy.array([1,1,1])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
locs,"numpy.zeros((sim_param.time_steps,2*num_users)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
locs,"numpy.zeros((sim_param.time_steps,num_users)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
locs,"numpy.zeros((sim_param.time_steps,2*num_svr)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
locs,"numpy.zeros((sim_param.time_steps,2*num_svr)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
Z,numpy.sum(s),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
train,pandas.read_csv('data/gender_classification.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
groups,collections.defaultdict(list),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
district_summary,"pandas.DataFrame({""TotalSchools"":[total_schools],""TotalStudents"":[total_students],
""TotalBudget"":[total_budget],""AverageMathScore"":[average_math],
""AverageReadingScore"":[average_reading],""%PassingMath"":[percent_passing_math],
""%PassingReading"":[percent_passing_reading],""%OverallPassing"":[overall_passing]

})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_summary,"pandas.DataFrame({""SchoolType"":school_names,
""TotalStudents"":students_counts,
""TotalSchoolBudget"":school_budget,
""PerStudentBudget"":budget_per_student,
""AverageMathScore"":school_math,
""AverageReadingScore"":school_reading,
""%PassingMath"":math_percentage,
""%PassingReading"":reading_percentage,
""%OverallPassing"":overall_passing_rate
})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
math_by_grade,"pandas.DataFrame({'9th':math_ninth,
'10th':math_tenth,
'11th':math_eleventh,
'12th':math_twelveth,

})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
reading_by_grade,"pandas.DataFrame({'9th':reading_ninth,
'10th':reading_tenth,
'11th':reading_eleventh,
'12th':reading_twelveth,

})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"school_summary[""SpendingRanges""]","pandas.cut(per_school_capita,bins,labels=bin_names)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_data_complete,"pandas.merge(student_data,school_data,how=""left"",on=[""school_name"",""school_name""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_data,pandas.read_csv(school_data_to_load),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
student_data,pandas.read_csv(student_data_to_load),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ds,collections.defaultdict(int),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
dp,collections.defaultdict(int),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
dp,collections.defaultdict(int),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
self._q,collections.deque(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,"numpy.array([y,x])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,"numpy.array([y,x1,x2])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.transpose(data),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.transpose(data),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
missingValuesDf,"pandas.DataFrame({'ColumnName':df.columns,
'Percentofdatamissing':percentMissing})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
missingValuesDf,"pandas.DataFrame({'ColumnName':df.columns,
'Percentofdatamissing':percentMissing})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train_pred_final,"pandas.DataFrame({'Convert':y_train.values,'Convert_Prob':y_train_pred})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cutoff_df,"pandas.DataFrame(columns=['prob','accuracy','sensi','speci'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,dummyVariables],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,converted],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummyVariables,"pandas.get_dummies(df[['LeadOrigin','LeadSource','LastActivity','LastNotableActivity']],drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
leadsData,"pandas.read_csv(""Data/Leads.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
corrmat,numpy.corrcoef(df_num.transpose(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfe,"sklearn.feature_selection.RFE(logreg,15)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
confusion,"sklearn.metrics.confusion_matrix(y_train_pred_final.Convert,y_train_pred_final.predicted)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm1,"sklearn.metrics.confusion_matrix(y_train_pred_final.Convert,y_train_pred_final[i])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
confusion2,"sklearn.metrics.confusion_matrix(y_train_pred_final.Convert,y_train_pred_final.final_predicted)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
auc_score,"sklearn.metrics.roc_auc_score(actual,probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(actual,probs,
drop_intermediate=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_train_pred_final.Convert,y_train_pred_final.Convert_Prob,drop_intermediate=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"p,r,thresholds","sklearn.metrics.precision_recall_curve(y_train_pred_final.Convert,y_train_pred_final.Convert_Prob)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame([[1.,6.5,3.],[1.,NA,NA],
[NA,NA,NA],[NA,6.5,3.]])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(np.random.randn(7,3)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(np.random.randn(6,3)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.DataFrame({'k1':['one','two']*3+['two'],'k2':[1,1,2,3,3,4,4]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.DataFrame({'food':['bacon','pulledpork','bacon',
'Pastrami','cornedbeef','Bacon',
'pastrami','honeyham','novalox'],
'ounces':[4,3,12,6,7.5,8,3,5,6]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.DataFrame(np.arange(12),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.DataFrame(np.random.randn(1000,4)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(np.arange(5*4),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'key':['b','b','a','c','a','b'],
'datal':range(6)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dummies,"pandas.DataFrame(zero_matrix,columns=genres)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
string_data,"pandas.Series(['aardvark','artichoke',np.nan,'avocado'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.Series([1,NA,3.5,NA,7])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.Series([1.,NA,3.5,NA,7])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.Series([1.,-999.,2.,-999.,-1000.,3.])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
choices,"pandas.Series([5,7,-1,6,4])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.Series(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
cats,"pandas.cut(ages,bins)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dummies,"pandas.get_dummies(df['key'],prefix='key')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
cats,"pandas.qcut(data,4)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
movies,"pandas.read_table('datasets/movielens/movies.dat',
sep=""::"",
header=None,names=mnames)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
genres,pandas.unique(all_genres),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
zero_matrix,numpy.zeros((len(movies),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data[np.abs(data)>3],numpy.sign(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
regex,re.compile('\s+'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
X_,"numpy.zeros([X.shape[0],28,28,3],np.uint8)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
mnist_train,"numpy.concatenate([mnist_train,mnist_train,mnist_train],3)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
mnist_test,"numpy.concatenate([mnist_test,mnist_test,mnist_test],3)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
Q3_cum,"numpy.concatenate([Q3_cum,np.expand_dims(Q3_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
Q4_cum,"numpy.concatenate([Q4_cum,np.expand_dims(Q4_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta3_cum,"numpy.concatenate([eta3_cum,np.expand_dims(eta3_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta4_cum,"numpy.concatenate([eta4_cum,np.expand_dims(eta4_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
coeffs,numpy.ones(len(hyps),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta3_np,"numpy.mean(g3_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta4_np,"numpy.mean(g3_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
Q3_mean,"numpy.mean(Q3_cum,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
Q4_mean,"numpy.mean(Q4_cum,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta3_mean,"numpy.mean(eta3_cum,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta4_mean,"numpy.mean(eta4_cum,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
"xmean,xvar","numpy.mean(X,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
val,"numpy.squeeze(
sign*np.matmul(beta,np.matmul((Q+eps*np.eye(Q.shape[0])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
total_train,"numpy.vstack([mnist_train,mnistm_train])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
total_test,"numpy.vstack([mnist_test,mnistm_test])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
total_train_domain,"numpy.vstack([np.tile([1.,0.],[ntrain,1])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
total_test_domain,"numpy.vstack([np.tile([1.,0.],[ntest,1])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
pixel_mean,"numpy.vstack([mnist_train,mnistm_train])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
comb_imgs,"numpy.vstack([source_test_img[:num_test],target_test_img[:num_test]])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
comb_labels,"numpy.vstack([source_test_label[:num_test],target_test_label[:num_test]])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
comb_domain,"numpy.vstack([np.tile([1.,0.],[num_test,1])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
Q3_cum,"numpy.expand_dims(Q3_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
Q4_cum,"numpy.expand_dims(Q4_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta3_cum,"numpy.expand_dims(eta3_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta4_cum,"numpy.expand_dims(eta4_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
res,"scipy.optimize.minimize(opt_obj,beta,
args=(Q,1.0,eps)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
tsne,"sklearn.manifold.TSNE(perplexity=30,n_components=2,init='pca',n_iter=3000)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
ax,matplotlib.pyplot.subplot(111),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
df,"pandas.DataFrame(np.random.normal(50,20,1000)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(np.random.gamma(5,.5,1000)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame([coll.find_one(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../data/yellow_tripdata_2017-01_subset10000rows.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_sql(sql,con=db,index_col='id')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df.tpep_pickup_datetime,pandas.to_datetime(df.tpep_pickup_datetime),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df.tpep_dropoff_datetime,pandas.to_datetime(df.tpep_dropoff_datetime),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"matplotlib.pyplot.legend(['trip_duration','tip_amount'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"matplotlib.pyplot.legend(['trip_duration','tip_amount'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel(''),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel(''),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.boxplot(df.measure,ax=ax[1])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.measure,ax=ax[0])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.measure_zscore,ax=ax[0])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,seaborn.distplot(df[df.measure_zscore<3*df.measure_zscore.std(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.measure,ax=ax[0])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,seaborn.distplot(df.measure.apply(np.sqrt),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df[keep_idx].measure,ax=ax[2])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.trip_duration,ax=ax[0])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.tip_amount,ax=ax[1])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.trip_duration,ax=ax[2])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.tip_amount,ax=ax[2])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,seaborn.distplot(zscore(df.trip_duration),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,seaborn.distplot(zscore(df.tip_amount),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
st,datetime.datetime.now(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
st,datetime.datetime.now(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
infix_re,re.compile(r'''[-~]'''),CLUSTER_30,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
wine_std,pandas.DataFrame(scale(wine),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mydata,"pandas.DataFrame(mydata[0],columns=[""X"",""Y""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(X,columns=['x1','x2'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
wine,"pandas.read_csv(myfile,sep="";"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clusterer,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=int(k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sample_silhouette_values,"sklearn.metrics.silhouette_samples(X,cluster_labels)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Ks,"numpy.linspace(2,15,14)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cluster_model,"sklearn.cluster.AgglomerativeClustering(n_clusters=n_clusters,affinity='euclidean',linkage='ward')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
hclust,"sklearn.cluster.AgglomerativeClustering(n_clusters=s,affinity='euclidean',linkage='ward')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mydata,"sklearn.datasets.make_moons(n_samples=2000,noise=0.05)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=0.2,min_samples=10,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=0.3,min_samples=10,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=0.3,min_samples=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,"pandas.read_csv(url,names=names)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
"X_train,X_validation,Y_train,Y_validation","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=1)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_val_score(model,X_train,Y_train,cv=kfold,scoring='accuracy')",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
kfold,sklearn.model_selection.StratifiedKFold(n_splits=10),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
model,sklearn.svm.SVC(gamma='auto'),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
sigma,numpy.arange(sig_max),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sigma_arr,numpy.arange(sig_max),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
powers,numpy.arange(5),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
f,"numpy.zeros((num_gen+1,num_reps,num_demes)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
eqF_arr,"numpy.zeros((sig_max,num_demes)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sfs,numpy.zeros(n+1),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sfs,numpy.zeros(tuple([n+1]),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sfs_arr,"numpy.zeros((sig_max,j+1)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p,"numpy.clip(a=p,a_min=0,a_max=1)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg_sfs,"numpy.mean(sfs,axis=(2,3)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg_sfs,"numpy.mean(sfs,axis=(2,3)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg_F1,"numpy.mean(F1,axis=2)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg_F2,"numpy.mean(F2,axis=2)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg_F,"numpy.mean(gaussian_filter1d(f,sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
f[0],"numpy.repeat(numpy.repeat(p0,num_reps)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
eq_F,"scipy.ndimage.gaussian_filter1d(eq_f,sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
eqF_arr[s],"scipy.ndimage.gaussian_filter1d(eq_f_single,sigma=sigma[s],mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F,"scipy.ndimage.gaussian_filter1d(f,sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F,"scipy.ndimage.gaussian_filter1d(f,sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F,"scipy.ndimage.gaussian_filter1d(f,sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F,"scipy.ndimage.gaussian_filter1d(f,sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F,"scipy.ndimage.gaussian_filter1d(f[-1],sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F1,"scipy.ndimage.gaussian_filter1d(f,sigma=1,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F2,"scipy.ndimage.gaussian_filter1d(f,sigma=2,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sfs[i],"scipy.special.binom(n,i)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
encoder,sklearn.preprocessing.LabelBinarizer(),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
summary_df,"pandas.DataFrame({""BestBitcoinOpen"":[bitcoin_open],
""BestBitcoinClose"":[bitcoin_close],
""TotalBitcoinVolume"":str(bitcoin_volume)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
crypto_df,"pandas.merge(bitcoin_df,dash_df,on=""Date"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
alternative_merge,"pandas.merge(
bitcoin_df,dash_df,on=""Date"",suffixes=(""_Bitcoin"",""_Dash"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
bitcoin_df,pandas.read_csv(bitcoin_csv),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dash_df,pandas.read_csv(dash_csv),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
indices,numpy.arange(len(X),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
ones,numpy.where(y==1),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
zeros,numpy.where(y==0),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
order,"numpy.argsort(X[:,0])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_classification(n_samples=NUM_SAMPLES,
n_features=NUM_FEATURES,
n_informative=NUM_FEATURES,
n_redundant=0,
n_classes=2,
n_clusters_per_class=1,
class_sep=0.75,
random_state=54312)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
df.review_count.hist(bins,"numpy.arange(0,40000,400)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([1,2,3,4,5])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
b,"numpy.array([1,2,3,4,5])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""all.csv"",header=None,
names=[""rating"",'review_count','isbn','booktype','author_url','year','genre_urls','dir','rating_count','name'],
)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
inputs,"numpy.array([[0.5,-0.2,0.1]])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
targets,numpy.array([[0.4]]),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_w_i_h,"numpy.array([[0.1,-0.2],
[0.4,0.5],
[-0.3,0.2]])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_w_h_o,"numpy.array([[0.3],
[-0.1]])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
rides,pandas.read_csv(data_path),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(rides.ix[test_data.index]['dteday']),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylim(),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
currentAxis,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
currentAxis,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
response,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
new_df,"pandas.DataFrame({
""KeywordUsed"":df['kw'],
""Page"":df['page_nbr'],
""Year"":df['formatted_year'],
""Month"":df['formatted_month'],
""Title"":df['article_title'],
""Date"":df['formatted_date'],
""URL"":df['web_url'],

})",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
"new_df[""MonthGroup""]","pandas.cut(
new_df['Month'],bins,labels=group_labels)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
ausbeer,"pandas.read_csv(""ausbeer.csv"")",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
measles,"pandas.read_csv(""measles.csv"",parse_dates=['month'])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
elec,"pandas.read_csv(""elec.csv"",parse_dates=['month'])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
lags,"numpy.arange(1,9,1)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
numerator,numpy.sum((y_ts[lag:]-mean_y),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
denom,"numpy.sum(np.power(y_ts-mean_y,2)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,12)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(4,3,
figsize=(12,12)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(5,3,
figsize=(12,12)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(5,3,
figsize=(12,12)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('Data/taxi_data.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X,"numpy.array(data[['LON','LAT']],dtype='float64')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
no_outliers,numpy.array([(counter+2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
no_outliers,numpy.array([(counter+2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
class_predictions,numpy.load('Data/sample_clusters.npy'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
class_predictions,numpy.load('Data/sample_clusters_improved.npy'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
cols,"random.sample(cols,n)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
model,"sklearn.cluster.KMeans(n_clusters=k,random_state=17,n_init=1,max_iter=x)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
model,"sklearn.cluster.KMeans(n_clusters=k,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
model,"sklearn.cluster.KMeans(n_clusters=k,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
model,"sklearn.cluster.DBSCAN(eps=0.01,min_samples=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
curr_silhouette,"sklearn.metrics.silhouette_score(X,class_predictions)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"X_blob,_","sklearn.datasets.make_blobs(n_samples=1000,centers=10,
cluster_std=0.5,random_state=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"X_blob,_","sklearn.datasets.make_blobs(n_samples=1000,centers=50,
cluster_std=1,random_state=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
data_dict,collections.defaultdict(dict),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
popup,"re.sub(r'[^a-zA-Z]+','',row['NAME'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
popup,"re.sub(r'[^a-zA-Z]+','',row['NAME'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,numpy.ravel(r*np.sin(theta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.ravel(r*np.cos(theta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.ravel(r*np.cos(theta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.ravel(r*np.sin(theta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,numpy.ravel(w*np.sin(phi),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
yline,numpy.cos(zline),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ydata,numpy.cos(zdata),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xline,numpy.sin(zline),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xdata,numpy.sin(zdata),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
zline,"numpy.linspace(0,15,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-6,6,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(-6,6,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r,"numpy.linspace(0,6,20)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
theta,"numpy.linspace(-0.9*np.pi,0.8*np.pi,40)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
theta,"numpy.linspace(0,2*np.pi,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.25,0.25,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"r,theta","numpy.meshgrid(r,theta)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"w,theta","numpy.meshgrid(w,theta)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df_bergbahnen,pandas.read_excel('dataprojects/Projections/data/bergbahnen3D.xlsx'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
DATADIR,"os.getenv(""DATADIR"")",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
spreaddb['Spread'][i],"re.sub(""½"","".5"",spread)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
res,"requests.get(url,'html.parser')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
res,"requests.get(url,'html.parser')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db['Odds'],numpy.zeros(len(db['Team']),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db['Line'],numpy.zeros(len(db['Team']),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db['Cover'],numpy.zeros(len(db['Team']),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db['Cover'],numpy.zeros(len(db['Team']),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
moneydb,pandas.DataFrame(),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
spreaddb,pandas.DataFrame(),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
moneydb,"pandas.concat([moneydb,MLdb])",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
spreaddb,"pandas.concat([spreaddb,spreads])",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db,pandas.read_csv(f'{name}.csv'),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cwd,os.getcwd(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
piecewise_fits,"pandas.merge(piecewise_fits[col_order],poly_fits[merge_cols],
on='unit_id',how='left')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
piecewise_fits,pandas.read_csv(piecewise_fits),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
poly_fits,pandas.read_csv(poly_fits),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
samples,"pandas.DataFrame(data.loc[indices],columns=data.keys()",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
reduced_data,"pandas.DataFrame(reduced_data,columns=['Dimension1','Dimension2'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
true_centers,pandas.DataFrame(np.round(true_centers),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(""customers.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,numpy.array(result),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
seq,"numpy.array(list(seq[0,1:,0])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
padding,numpy.ones(len(trainPredict),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,"numpy.reshape(X_train,(X_train.shape[0],X_train.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,"numpy.reshape(X_test,(X_test.shape[0],X_test.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X2frames,"numpy.reshape(X2frames,(X2frames.shape[0],X2frames.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
S2,numpy.cos(signal_range),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
init_seq,"numpy.cos(np.linspace(0,5,X_test.shape[1])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
init_seq,"numpy.cos(np.linspace(0,2,X_test.shape[1])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
init_seq,"numpy.cos(np.linspace(3,5,X_test.shape[1])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
signal_range,"numpy.linspace(0,10*np.pi,num=n_samples,dtype=np.float32)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
signal_range,"numpy.linspace(0,10*np.pi,num=200,dtype=np.float32)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
init_seq,"numpy.linspace(0,1,X_test.shape[1])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(
numpy.random.randint(0,100,size=(100,4)",CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
df,"pandas.concat(pool.map(func,df_split)",CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
df_split,"numpy.array_split(df,num_partitions)",CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
covid,pandas.read_excel('covid-19.xlsx'),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
covid_rus,pandas.read_excel('covid_Rus_09.08-16.08.xlsx'),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
sns_plot,"seaborn.pairplot(
covid_rus[['New_cases','Recovered_in_a_day','Dead_in_a_day']])",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
life4,"pandas.concat([life2,life3])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
life,"pandas.read_csv('/Users/marslast/Dropbox/Transfer/Teaching/DATA201/Datasets/LifeExpectancy.csv',skiprows=4,index_col=0,header=[0])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
X,"numpy.array(data_train.iloc[:,1:])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,"numpy.array(data_test.iloc[:,1:])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
correct,numpy.nonzero(predicted_classes==y_true),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
incorrect,numpy.nonzero(predicted_classes!=y_true),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_train,pandas.read_csv('../input/fashionmnist/fashion-mnist_train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_test,pandas.read_csv('../input/fashionmnist/fashion-mnist_test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=101)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF,"pandas.read_csv('temp_single_cell.txt',sep='\t',header=None)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_01'],"numpy.log2(singleCellDF.iloc[:,15:41].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_02'],"numpy.log2(singleCellDF.iloc[:,41:97].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_03'],"numpy.log2(singleCellDF.iloc[:,97:134].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_03LN'],"numpy.log2(singleCellDF.iloc[:,134:189].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_04'],"numpy.log2(singleCellDF.iloc[:,189:248].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_05'],"numpy.log2(singleCellDF.iloc[:,248:325].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_06'],"numpy.log2(singleCellDF.iloc[:,325:350].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_07'],"numpy.log2(singleCellDF.iloc[:,350:401].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_07LN'],"numpy.log2(singleCellDF.iloc[:,401:454].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_08'],"numpy.log2(singleCellDF.iloc[:,454:477].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_09'],"numpy.log2(singleCellDF.iloc[:,477:537].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_10'],"numpy.log2(singleCellDF.iloc[:,537:553].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_11'],"numpy.log2(singleCellDF.iloc[:,553:564].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(state_towns,columns=['State','RegionName'])",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
hdata2,"pandas.DataFrame(hdata[['State','RegionName']])",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,pandas.ExcelFile('gdplev.xls'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
gdplev,pandas.ExcelFile('gdplev.xls'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
gdplev,pandas.ExcelFile('gdplev.xls'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
unitowns_hdata,"pandas.merge(hdata,unitowns,how='inner',on=['State','RegionName'])",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
hdata2,"pandas.merge(hdata,unitowns_hdata,how='outer',on=['State','RegionName',bottom,bstart,'ratio'])",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
hdata,pandas.read_csv('City_Zhvi_AllHomes.csv'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
gdp['GDP'],pandas.to_numeric(gdp['GDP']),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"t,p",scipy.stats.ttest_ind(ut['ratio'].dropna(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
res1,pandas.DataFrame(data=logreg.predict_proba(test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res2,pandas.DataFrame(data=model2.predict_proba(test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('train_processed.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('test_set.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(20,20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataMat,"numpy.matrix([[1.,2.1],[2.,1.1],[1.3,1.],[1.,1.],[2.,1.],])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
retArray,numpy.ones((shape(dataMatrix),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"m,n",numpy.shape(dataMatrix),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
m,numpy.shape(datMat),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
m,numpy.shape(dataMatrix),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
D,"numpy.mat(ones((5,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dataMatrix,numpy.mat(datMat),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
labelMat,numpy.mat(classLabels),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
numSteps,"10.0;bestStump={};bestClasEst=numpy.mat(zeros((m,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
errArr,"numpy.mat(ones((m,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
D,"numpy.mat(ones((m,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
aggClassEst,"numpy.mat(zeros((m,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
aggError,multiply(sign(aggClassEst)!=numpy.mat(classLabels),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
condaF,sign(aggClassEst)!=numpy.mat(classLabels),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dataMatrix,numpy.mat(datToClass),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
aggClassEst,"numpy.mat(zeros((m,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x1,numpy.arange(3),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x2,numpy.arange(3),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
X,"numpy.linspace(0,1,1000)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,"matplotlib.pyplot.plot(X,Y,'-')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
expon,numpy.multiply(-1*alpha*mat(classLabels),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
D,"numpy.multiply(D,exp(expon)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
aggError,numpy.multiply(sign(aggClassEst),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
condaF,numpy.sign(aggClassEst),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
self.tree,scipy.spatial.KDTree(data),CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
pts,"numpy.array([latitude,longitude])",CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
adult,"pandas.read_csv(""https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"")",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
count_dict,collections.defaultdict(int),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
counter,"collections.Counter([1,2,2,2,3,3,5])",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,"json.loads(""""""
{""foo"":12,
""bar"":[1,2,5]}"""""")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
candidates,numpy.flatnonzero(results['rank_test_score']==i),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
wine,sklearn.datasets.load_wine(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
mse,"sklearn.metrics.mean_squared_error(y,y_pred)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(xgb_model,X,y,scoring=""neg_mean_squared_error"",cv=5)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
kfold,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=42)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
search,"sklearn.model_selection.RandomizedSearchCV(xgb_model,param_distributions=params,random_state=42,iid=False,
n_iter=200,cv=3,verbose=1,n_jobs=1,return_train_score=True)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
end,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
start,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
valid_examples,numpy.array(random.sample(range(valid_window),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
valid_examples,"numpy.append(valid_examples,
random.sample(range(1000,1000+valid_window)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
frequencies,collections.Counter(int_words),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(14,14)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
tsne,sklearn.manifold.TSNE(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
internship,"pandas.read_csv(""Internship.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
student,"pandas.read_csv(""Student.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
X,"numpy.array(np.meshgrid(aX0,aX1,indexing='ij')",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
bc,"bc_concave_rotated;grad=numpy.array(np.gradient(solution,bc.gridscale)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
bc,"bc_ball;grad=numpy.array(np.gradient(solution,bc.gridscale)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
e,numpy.array(((np.cos(thetas),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
axes,numpy.full((dim),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
nD,numpy.prod(D.shape[2:]),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"a,b,c","numpy.sort(np.maximum(0.,d2u)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"c,s",numpy.cos(np.pi/6),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
pos_bad,"numpy.logical_or(pos_bad,delta<=0)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
pos_bad,"numpy.logical_or(pos_bad,np.any(v<0,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
pos_inf,numpy.logical_or.reduce(d2u==np.inf),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
result,"numpy.maximum(result,res)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
aX0,"numpy.linspace(-1,1,n)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
mus,"numpy.linspace(0,0.5,n,endpoint=False)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
thetas,"numpy.linspace(0,np.pi,n,endpoint=False)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
aX,"numpy.linspace(-1,1,n)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
mus,"numpy.expand_dims(mus,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
thetas,"numpy.expand_dims(thetas,axis=1)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
SB,"numpy.take_along_axis(SB,np.broadcast_to(oracle,SB.shape[:2]+(1,)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
SB,"numpy.take_along_axis(SB,np.broadcast_to(oracle,SB.shape[:2]+(1,)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
prcp_df,"pandas.DataFrame(prcp_query,columns=['date','prcp'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
stations_df,"pandas.DataFrame(stations_query,columns=['station','prcp'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tobs_df,"pandas.DataFrame(tobs_query,columns=['tobs'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
calc_temps_df,"pandas.DataFrame(calc_temps_d,columns=['tmin','tavg','tmax'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
query_date,"datetime.date(2017,8,23)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
query_date,"datetime.date(2017,8,23)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
start_date,"datetime.date(2017,2,28)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
end_date,"datetime.date(2017,3,5)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
start_date,"datetime.date(2017,2,28)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
end_date,"datetime.date(2017,3,5)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
replace_by_space_re,re.compile('[/(),CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
bad_symbols_re,"re.compile('[^0-9a-z
stopwords_set=set(stopwords.words('english')",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
embeddings[l[0]],"numpy.array(l[1:],dtype=np.float32)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
result,numpy.zeros(dim),CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
tag_vectors,"numpy.zeros((count,embeddings_dim)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
X,"numpy.concatenate([dialogue_df['text'].values,stackoverflow_df['title'].values])",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
dialogue_df,"pandas.read_csv('dialogues.tsv',sep='\t')",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
stackoverflow_df,"pandas.read_csv('tagged_posts.tsv',sep='\t')",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
posts_df,"pandas.read_csv('tagged_posts.tsv',sep='\t')",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.1,random_state=0)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
intent_recognizer,"sklearn.linear_model.LogisticRegression(random_state=0,C=5)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
test_accuracy,"sklearn.metrics.accuracy_score(y_test,y_test_pred)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
test_accuracy,"sklearn.metrics.accuracy_score(y_test,y_test_pred)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
tag_classifier,"sklearn.multiclass.OneVsRestClassifier(LogisticRegression(C=5,random_state=0)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
minyear,datetime.datetime.now(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
out,"scipy.stats.linregress(_papers,_citations)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
papers,"pandas.DataFrame(data=0,index=authors_list,columns=range(datetime.now()",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
citations,"pandas.DataFrame(data=0,index=authors_list,columns=range(datetime.now()",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
eps_vals,"numpy.logspace(-2,2,200)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
vectorizer,"sklearn.pipeline.make_pipeline(hasher,TfidfTransformer()",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.MiniBatchKMeans(n_clusters=5,init='k-means++',n_init=1,
init_size=1000,batch_size=5)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=eps,min_samples=2)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=use_eps,min_samples=2)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
country_data,pandas.DataFrame({'CountryName':np.array(Countries_2012_Dataset),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
life_exp_data,pandas.DataFrame({'CountryCode':np.array(Country_Code),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
merged_data,"pandas.merge(left=data,right=country_data,how='inner',on=""CountryCode"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
merged_data,"pandas.merge(left=merged_data,right=life_exp_data,how='inner',on='CountryCode')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""Demographic-Data.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vis1,"seaborn.lmplot(data=data,x='BirthRate',y='InternetUsers',fit_reg=False,hue='IncomeGroup',height=10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vis2,"seaborn.lmplot(data=merged_data,x='BirthRate',y='InternetUsers',fit_reg=False,hue='CountryRegion',size=10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vis3,"seaborn.lmplot(data=merged_data,x='BirthRate',y='LifeExp1960',fit_reg=False,hue='CountryRegion',size=10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vis3,"seaborn.lmplot(data=merged_data,x='BirthRate',y='LifeExp2013',fit_reg=False,hue='CountryRegion',size=10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(titanic,col=""sex"")",CLUSTER_8,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_1
g,"seaborn.JointGrid(x=""fare"",y=""age"",data=titanic)",CLUSTER_8,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_1
titanic,seaborn.load_dataset('titanic'),CLUSTER_8,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_1
intervalsDF,"pandas.DataFrame(columns=['meanSpeed','sdSpeed','maxAccelX','maxAccelY','maxAccelZ',
'maxGyroX','maxGyroY','maxGyroZ','minAccelX','minAccelY',
'minAccelZ','minGyroX','minGyroY','minGyroZ','meanAccelX',
'meanAccelY','meanAccelZ','meanGyroX','meanGyroY','meanGyroZ',
'sdAccelX','sdAccelY','sdAccelZ','sdGyroX','sdGyroY',
'sdGyroZ','pothole'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
intervalsDF,"pandas.DataFrame(columns=['meanSpeed','sdSpeed','maxAccelX','maxAccelY','maxAccelZ',
'maxGyroX','maxGyroY','maxGyroZ','minAccelX','minAccelY',
'minAccelZ','minGyroX','minGyroY','minGyroZ','meanAccelX',
'meanAccelY','meanAccelZ','meanGyroX','meanGyroY','meanGyroZ',
'sdAccelX','sdAccelY','sdAccelZ','sdGyroX','sdGyroY',
'sdGyroZ','condition'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
allTripsDF,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_reduced,"pandas.DataFrame(X_reduced,columns=['V0','V1','V2'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
allTripsDF,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sensorsDF,pandas.read_csv(sensorsFilePath),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
potholesDF,pandas.read_csv(potholesFilePath),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sensorsDF,pandas.read_csv(sensorsFilePath),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tripDF,pandas.read_csv(tripFilePath),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tripDF,pandas.read_csv(tripFilePath),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
selectedTradeoffIndex,numpy.intersect1d(np.where(precision>=0.70),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.dummy.DummyClassifier(strategy='most_frequent'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(C=c),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(C=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(C=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(C=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(C=c),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(C=50),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=n,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=50,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.GradientBoostingClassifier(max_depth=d,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.GradientBoostingClassifier(max_depth=4,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=4),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"precision,recall,thresholds","sklearn.metrics.precision_recall_curve(y_test,y_scores)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_metrics,"pandas.DataFrame(columns=['ARI_Louvain','ARI_kmeans','ARI_HC',
'AMI_Louvain','AMI_kmeans','AMI_HC',
'Homogeneity_Louvain','Homogeneity_kmeans','Homogeneity_HC'])",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
adata.obs['kmeans'],"pandas.Series(kmeans.labels_,index=adata.obs.index)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
adata.obs['hc'],"pandas.Series(hc.labels_,index=adata.obs.index)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
metadata,"pandas.read_csv('../../input/metadata.tsv',sep='\t',index_col=0)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=num_clusters,random_state=2019)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
hc,sklearn.cluster.AgglomerativeClustering(n_clusters=num_clusters),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,([ax0,ax1],[ax2,ax3],[ax4,ax5])","matplotlib.pyplot.subplots(nrows=3,ncols=2,figsize=(14,24)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig2,([ax0,ax1],[ax2,ax3],[ax4,ax5])","matplotlib.pyplot.subplots(nrows=3,ncols=2,figsize=(14,24)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=3,ncols=2,figsize=(14,18)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=4,ncols=2,figsize=(14,24)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(14,14)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(14,8)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(14,14)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=5,ncols=2,figsize=(14,26)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=2,figsize=(14,14)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=5,ncols=2,figsize=(14,26)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,([ax0,ax1],[ax2,ax3],[ax4,ax5])","matplotlib.pyplot.subplots(nrows=3,ncols=2,figsize=(14,22)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig2,([ax0,ax1],[ax2,ax3],[ax4,ax5])","matplotlib.pyplot.subplots(nrows=3,ncols=2,figsize=(14,22)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
temptarr,numpy.arange(gridtnpts[iir-1]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
temprarr,numpy.arange(gridrnpts[iir-1]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tempsarr,numpy.arange(gridsnpts[iir-1]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
id0,numpy.arange(NewEOS.ND),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cbar,"fig.colorbar(im1,cax=cax,ticks=numpy.arange(13)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tvapfo,numpy.arange(46),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cbar,"fig.colorbar(im1,cax=cax,ticks=numpy.arange(13)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
asi_rhot,"numpy.array([3739.79122056,3335.90237636,4691.02371542,4088.40354767,4347.15217391,4681.1865942])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
foliqup,"numpy.asarray([1.644,0.886,4.08,2.59,3.41,4.43])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
foliqus,"numpy.asarray([5.38,4.,9.14,7.1,8.47,9.95])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
asi_gamma_sig_low,"numpy.asarray([0.,0.25715384,0.14948592,0.5898531,0.36154228,0.45607297,0.58790934])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
asi_gamma_sig_high,"numpy.asarray([0.,0.37855329,0.19525818,1.09577441,0.6137275,0.78965792,1.08676142])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
NewEOS.MDQ,"numpy.zeros((NewEOS.NT,NewEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
NewEOS.onebar.T,numpy.zeros(NewEOS.NT),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
NewEOS.onebar.S,numpy.zeros(NewEOS.NT),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
NewEOS.onebar.rho,numpy.zeros(NewEOS.NT),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.P,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.T,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.U,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.A,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.cs,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.cv,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.KPA,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.MDQ,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tt,numpy.zeros(7),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.radius,numpy.zeros(self.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.density,numpy.zeros(self.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.pwavevel,numpy.zeros(self.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.swavevel,numpy.zeros(self.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.pressure,numpy.zeros(self.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.temperature,numpy.zeros(self.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
PREM.pressure,numpy.zeros(PREM.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ixindarr,numpy.zeros(len(ixtemparr),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
indexT0REF,numpy.where(abs(T0REF-gridtarr),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
indexT0REF,numpy.where((gridtarr-T0REF),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
indexR0REF,numpy.where(abs(R0REF-gridrarr),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
indexR0REF,numpy.where((gridrarr-R0REF),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
it0,numpy.where(NewEOS.T>=NewEOS.T0REF),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp,"numpy.where(NewEOS.P[itt,:]<0.)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp,"numpy.where(NewEOS.S[itt,:]<0.)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ind,"numpy.where((ForsteriteEOS.S[:,i]>0)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
iT0REF,numpy.where(NewEOS.T==T0REF),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
igood,numpy.where(BM_pressure<48.),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
igood,numpy.where(BM_pressure_low<48.),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
igood,numpy.where(BM_pressure_high<48.),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
igood,numpy.where((BM_pressure>25.),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
igood,numpy.where((BM_pressure>25.),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
indlow,numpy.where(rhoarr<=NewEOS.R0REF),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
indhigh,numpy.where(rhoarr>=NewEOS.R0REF),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp,"numpy.where(NewEOS.P[itt,:]<0.)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp,"numpy.where(NewEOS.P[itt,:]*1.e30<=2.)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridtarr,"numpy.concatenate((gridtarr,temptarr)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridtarr,"numpy.concatenate((gridtarr[0:indexT0REF[0]],[T0REF],gridtarr[indexT0REF[0]::])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridrarr,"numpy.concatenate((gridrarr,temprarr)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridrarr,"numpy.concatenate((gridrarr[0:indexR0REF[0]],[R0REF],gridrarr[indexR0REF[0]::])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridsarr,"numpy.concatenate((gridsarr,tempsarr)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
PREM_dr,"numpy.roll(PREM.radius,-1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.P[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.U[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.S[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.A[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.cs[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.cv[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.KPA[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.MDQ[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.P[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.U[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.S[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.A[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.cs[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.cv[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.MDQ[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.S[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.U[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.MDQ[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pvapfonagahara,numpy.exp(169.-543.e3/(8.314*(tvapfo),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
temptarr,"numpy.power(10.,np.log10(gridtvals[iir-1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
temprarr,"numpy.power(10.,np.log10(gridrvals[iir-1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tempsarr,"numpy.power(10.,np.log10(gridsvals[iir-1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tillearr,"numpy.power(10.,np.arange(600)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Zfit_up,numpy.sqrt((Zfit_p),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
LowHugDat_up,numpy.sqrt((LowHugDat_p),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridtarr,"numpy.delete(gridtarr,indexzero)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridrarr,"numpy.delete(gridrarr,indexzero)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tillearr,"numpy.append(0.,tillearr)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mantle.pressure,"numpy.append(mantle.pressure,interpfunction(Smantle)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mantle.temperature,"numpy.append(mantle.temperature,interpfunction(Smantle)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
asi_rho,"numpy.append([2597.],asi_rhot)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
asi_gamma,"numpy.append([0.396],asi_gammat)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
NewEOS.onebar.S[iit],"numpy.interp(1.E-4,NewEOS.P[iit,id0],NewEOS.S[iit,id0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
NewEOS.onebar.rho[iit],"numpy.interp(1.E-4,NewEOS.P[iit,id0],NewEOS.rho[id0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
uniqkarr,numpy.unique(NewEOS.KPA),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
SR_rho,"numpy.loadtxt(fileZdata,delimiter=',',skiprows=1,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
SR_rho_e,"numpy.loadtxt(fileZdata,delimiter=',',skiprows=1,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
SR_gamma,"numpy.loadtxt(fileZdata,delimiter=',',skiprows=1,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
SR_gamma_e,"numpy.loadtxt(fileZdata,delimiter=',',skiprows=1,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_r1,"numpy.loadtxt(fileQMDHUGdata,skiprows=3,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_cv,"numpy.loadtxt(fileQMDHUGdata,skiprows=3,usecols=[5])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_grun,"numpy.loadtxt(fileQMDHUGdata,skiprows=3,usecols=[4])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_up,"numpy.loadtxt(fileQMDHUGdata,skiprows=3,usecols=[6])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_us,"numpy.loadtxt(fileQMDHUGdata,skiprows=3,usecols=[7])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_r,"numpy.loadtxt(fileQMDHUGdata,skiprows=2,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_e,"numpy.loadtxt(fileQMDHUGdata,skiprows=2,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_p,"numpy.loadtxt(fileQMDHUGdata,skiprows=2,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_t,"numpy.loadtxt(fileQMDHUGdata,skiprows=2,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Zdat_all,"numpy.loadtxt(zhugoniotfile,skiprows=2,usecols=[4,5,6,7,8,9,10,11])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ZTdat_all,"numpy.loadtxt(zhugoniotfile,skiprows=3,usecols=[0,1,2,3,4,5,6,7],delimiter=',')",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DU1,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DUe1,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DR1,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[4])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DRe1,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[5])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DT1,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DTe1,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D1P,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[6])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D1Pe,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[7])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DU2,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DUe2,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DR2,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[4])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DRe2,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[5])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DT2,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DTe2,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D2P,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[6])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D2Pe,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[7])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DU3,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DUe3,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DR3,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[4])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DRe3,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[5])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DT3,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DTe3,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D3P,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[6])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D3Pe,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[7])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DU4,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DUe4,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DR4,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[4])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DRe4,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[5])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DT4,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DTe4,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D4P,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[6])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D4Pe,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[7])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
PREM.radius,"numpy.loadtxt(PREM_filename,delimiter=',',skiprows=2,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
PREM.density,"numpy.loadtxt(PREM_filename,delimiter=',',skiprows=2,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
PREM.pwavevel,"numpy.loadtxt(PREM_filename,delimiter=',',skiprows=2,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
PREM.swavevel,"numpy.loadtxt(PREM_filename,delimiter=',',skiprows=2,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,pall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,eall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,tall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,call1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,cvall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,aall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,kall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,mdqall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
interpfunction,"scipy.interpolate.interp1d(ForsteriteEOS.S[ind,i],ForsteriteEOS.P[ind,i])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
interpfunction,"scipy.interpolate.interp1d(ForsteriteEOS.S[ind,i],ForsteriteEOS.T[ind])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Gilletdatarr,"pandas.read_csv(Gilletfile,skiprows=1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Mosenfelderdatarr,"pandas.read_csv(Mosenfelderfile,skiprows=1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
zhugfitarr,"pandas.read_csv(zhugoniotfile,skiprows=1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lowhugdatarr,"pandas.read_csv(lowhugoniotfile,skiprows=1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
peridotitesolidusdatarr,"pandas.read_csv(peridotitefile,skiprows=1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
peridotiteliquidusdatarr,"pandas.read_csv(peridotitefile,skiprows=1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
corners_square,numpy.array(corners_square),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
perturbed_corners_square,numpy.array(perturbed_corners_square),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
input,"numpy.zeros((patch_size,patch_size,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
H_ba,numpy.linalg.inv(H_ab),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
top_left_x,"random.randint(perturbation_max,IMG_WIDTH-patch_size-perturbation_max)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
top_left_y,"random.randint(perturbation_max,IMG_HEIGHT-patch_size-perturbation_max)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(tbody,columns=thead)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(tbody,columns=thead)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(tbody,columns=thead)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(tbody,columns=thead)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(tbody,columns=thead)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
full_2016_df,pandas.read_csv('../data/full_2016.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
full_2017_df,pandas.read_csv('../data/full_2017.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
full_2018_df,pandas.read_csv('../data/full_2018.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
full_2019_df,pandas.read_csv('../data/full_2019.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
half_2016_df,pandas.read_csv('../data/half_2016.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
half_2017_df,pandas.read_csv('../data/half_2017.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
half_2018_df,pandas.read_csv('../data/half_2018.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
half_2019_df,pandas.read_csv('../data/half_2019.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
not_main_countries_df,"pandas.DataFrame(not_main_countries_df,columns=['other_country'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
not_main_drive_licenses_df,"pandas.DataFrame(not_main_drive_licenses_df,columns=['other_drive_licenses'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
languages,"pandas.concat([t,speak_other_languages,ln],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_new,"pandas.concat([df[a],languages,df[b]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
program_summary,"pandas.concat([prog,pn],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
DF,"pandas.concat([df.iloc[:,0:index],program_summary,df.iloc[:,index:]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
country_df,"pandas.concat([country_df,not_main_countries_df],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
frequency_of_country,pandas.concat([pd.DataFrame(country_df.sum(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
DF_last,"pandas.concat([df.iloc[:,0:index],country_df,df.iloc[:,index:]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
DF_medical,"pandas.concat([df.iloc[:,0:index],medical_issue_df,df.iloc[:,index:]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
DF_frequency,"pandas.concat([df.iloc[:,0:index],frequency_df,df.iloc[:,index:]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
drive_licenses_df,"pandas.concat([drive_licenses_df,not_main_drive_licenses_df],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
DF_drive_licenses,"pandas.concat([df.iloc[:,0:index],drive_licenses_df,df.iloc[:,index:]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
DF_military_df,"pandas.concat([df.iloc[:,0:index],military_df,df.iloc[:,index:]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('chen_shalev_labeld_row_data.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ibl,"numpy.clip(cv2.resize(ibl,(w,h)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
img,matplotlib.pyplot.imread(f),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
ibl,matplotlib.pyplot.imread(ibl_files[i]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
ibl_np,matplotlib.pyplot.imread(test_ibl_file),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
im,"matplotlib.pyplot.imshow(ori,animated=True,cmap='gray')",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
im,"matplotlib.pyplot.imshow(img,cmap='gray')",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
im,"matplotlib.pyplot.imshow(img,animated=True)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
x_train,numpy.array(x_train),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_train,numpy.array(y_train),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
x_test,numpy.array(x_test),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_test,numpy.array(y_test),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
x_test,numpy.array(x_test),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
x_train,numpy.array(x_train),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_train,"numpy.reshape(y_train,[y_train.shape[0],1])",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_test,"numpy.reshape(y_test,[y_test.shape[0],1])",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
diabetes,pandas.read_csv('diabetes.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(importances),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
random_search,"sklearn.model_selection.RandomizedSearchCV(clf_rf,param_distributions=param_dist)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ada_search,"sklearn.model_selection.RandomizedSearchCV(clf_ada,param_distributions=param_dist)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svc_search,"sklearn.model_selection.RandomizedSearchCV(clf_svc,param_distributions=param_dist)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_ada,sklearn.ensemble.AdaBoostClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_svc,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
afd,"datetime.date(today.year,4,1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
today,datetime.date.today(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
today,datetime.date.today(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
today,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
now,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
now,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
now,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
t,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
t,datetime.datetime.time(datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
dones,numpy.array([1iftelse0fortinenv_info.local_done]),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
agent_scores,numpy.zeros(n_agent),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
score,numpy.mean(agent_scores),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
scores_deque,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
time_start,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
dataset,"pandas.DataFrame({
'Appearance':['Good','Good','Great','Ah','Ah','Ah','Great','Good','Good','Ah','Good','Great','Great','Ah'],
'Income':['Low','Low','Low','Good','Great','Great','Great','Good','Great','Good','Good','Good','Low','Good'],
'Age':['Older','Older','Older','Older','Younger','Younger','Younger','Older','Younger','Younger','Younger','Older','Younger','Older'],
'Profession':['Steady','Unstable','Steady','Steady','Steady','Unstable','Unstable','Steady','Steady','Steady','Unstable','Unstable','Steady','Unstable'],
'Is_soninlaw_Welcome':['N','N','Y','Y','Y','N','Y','N','Y','Y','Y','Y','Y','N']
}
)",CLUSTER_5,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_0
weise_values,"numpy.array([31096.192,43297.502,8514.558,49.333,49.333,8811.960,348.675,0,357.898,0,0.0414,471.364,471.364,471.364])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(0,4.14,7)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,Plotlist","matplotlib.pyplot.subplots(2,1,figsize=(15,20)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,Plotlist","matplotlib.pyplot.subplots(4,1,figsize=(10,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,Plotlist","matplotlib.pyplot.subplots(4,1,figsize=(10,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,Plotlist","matplotlib.pyplot.subplots(4,1,figsize=(10,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
bitInfo,"pandas.read_csv(""/Users/wzjbatman/Downloads/Bitfinex_BTCEUR_trades_2018_02_02.csv"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"dataFrame[""fisher_Transform""]",numpy.arctanh(df_norm),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
arr,"numpy.arange(0,10)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame([observed]),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
observed,"pandas.Series([220,55,25],index=[""omnivores"",""carnivores"",""herbivores""])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('https://data.cityofnewyork.us/api/views/rvih-nhyn/rows.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
X_cd,"numpy.concatenate((train_cat,train_dog)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
y_cd,numpy.concatenate((np.zeros((5000),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
c_data,numpy.load('cats_photos.npy'),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
d_data,numpy.load('dogs_photos.npy'),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
t_data,numpy.load('test_photos.npy'),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
"plt.imshow(timages[i],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
start,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
elapsed,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
start2,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
elapsed2,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
start3,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
elapsed3,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
start4,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
elapsed4,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
startt,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
elapsedt,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
"Xcd_train,Xcd_test,ycd_train,ycd_test","
sklearn.model_selection.train_test_split(X_cd,y_cd,test_size=0.20,
shuffle=True,random_state=42)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
tor_df,"pandas.DataFrame({""PostalCode"":postalCode,""Borough"":borough,""Neighborhood"":neighborhood})",CLUSTER_27,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(columns=column_names),CLUSTER_27,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,requests.get('https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M'),CLUSTER_27,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_11
df,pandas.read_csv('./survey_results_public.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm_model,sklearn.linear_model.LinearRegression(normalize=True),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.30,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
n1,math.sqrt(n),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'Actual':y_test.flatten(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(r'C:\Users\ansul\Desktop\Project\final.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,math.sqrt(cost),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_x,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.w_,numpy.zeros(1+X.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-10,10,500)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x1_plot,"numpy.linspace(4,8,1000)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'col1':[1,2,3,np.nan],
'col2':[np.nan,555,666,444],
'col3':['abc','def','ghi','xyz']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
temp_range,numpy.arange(self.window_size),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.array(filtered_df),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,numpy.array(df['label']),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,"numpy.array(df.drop(['label'],1)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,numpy.array(df['label']),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
new_prices,"numpy.cumsum(prices,axis=0)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg,"numpy.divide(new_prices[:self.window_size],prefix_divisor[:length])",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
new_prices[:temp_window_size],"numpy.divide(new_prices[:self.window_size],prefix_divisor[:length])",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
prefix_divisor,"numpy.hstack((temp_range,temp_range,temp_range,temp_range)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
filtered_df,pandas.DataFrame(data=lpf.filter(df.values),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.scale(X),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.scale(X),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(n_jobs=-1),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,12)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
next_date,datetime.datetime.fromtimestamp(next_unix),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"b,a","scipy.signal.butter(self.order,self.cutoff)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
o,"scipy.signal.lfilter(b,a,o)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
c,"scipy.signal.lfilter(b,a,c)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"scipy.signal.lfilter(b,a,h)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
l,"scipy.signal.lfilter(b,a,l)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
point_data_raw,json.load(point_file),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
row_df,pandas.DataFrame(data=row_info),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(df_data),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
df_min_time_per_image_index,pandas.DataFrame(df_mean_time_per_image.idxmin(axis=1),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
plot(mean,"df_memory,std=pandas.DataFrame()",CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
df_data[lib],pandas.Series(index=df_ideal.columns),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
result,pandas.concat(dfs),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
batch_size,"numpy.int64(point_data_raw['choices']['env'].get('CK_CAFFE_BATCH_SIZE',-1)",CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
mask,numpy.zeros_like(old_frame),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df_returns,pandas.read_pickle('returns'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_close,pandas.read_pickle('close'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_high,pandas.read_pickle('high'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_low,pandas.read_pickle('low'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_volume,pandas.read_pickle('volume'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_open,pandas.read_pickle('open'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_returns,pandas.read_pickle('returns'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_RSI,pandas.read_pickle('RSI'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_MACD,pandas.read_pickle('MACD'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_CCI,pandas.read_pickle('CCI'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_CMO,pandas.read_pickle('CMO'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_ATR,pandas.read_pickle('ATR'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_BOP,pandas.read_pickle('BOP'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_MFI,pandas.read_pickle('MFI'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_ADOSC,pandas.read_pickle('ADOSC'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_BETA,pandas.read_pickle('BETA'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_close,pandas.read_pickle('close'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_high,pandas.read_pickle('high'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_low,pandas.read_pickle('low'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_volume,pandas.read_pickle('volume'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_open,pandas.read_pickle('open'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.read_excel(""dosie.xls"")",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_names,numpy.array(train_names),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_authors,numpy.array(train_authors),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
trainX,"numpy.hstack((train_names,train_authors[:,None])",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
testX,"numpy.hstack((test_names,np.array(test_authors)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
thisX,"numpy.hstack((re_name,np.array([author])",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
all_X,"numpy.vstack((trainX,testX)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
all_Y,numpy.vstack((np.array(trainY),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
token_counts,collections.Counter(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
tfl_response_json,json.loads(station.tfl_response),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
tfl_response_json,json.loads(station.tfl_response),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
mainline_df,pandas.DataFrame(pd.Series(mainline_stations),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
all_legs,pandas.DataFrame(all_legs),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
all_stations,"pandas.read_sql(sql,conn)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
simple_treedisplay,"pandas.DataFrame(tree_amount.groupby(""neighborhood"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
simple_waterdisplay,"pandas.DataFrame(water_amount.groupby(""neighborhood"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
largesimplefire,pandas.DataFrame(fire_incidents.groupby('neighborhood'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
FWT1,"pandas.DataFrame({'Neighborhood':['BrightonHeights','PerryNorth','PointBreeze',
'Bloomfield','HighlandPark','SquirrelHillSouth'],
'WaterFeatures':[6,7,7,8,11,14],
'Trees':[910,1007,1316,1436,2941,5073],
'FireIncidents':[105,83,57,120,54,178]})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
FWT,"pandas.DataFrame({'Neighborhood':['BrightonHeights','PerryNorth','PointBreeze',
'Bloomfield','HighlandPark','SquirrelHillSouth'],
'WaterFeatures/10':[60,70,70,80,110,140],
'Treesx10':[91.0,100.7,131.6,143.6,294.1,507.3],
'FireIncidents':[105,83,57,120,54,178]})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
HPD,"pandas.DataFrame({'Amount':[110,294.1,54]},
index=['WaterFeatures','Trees','FireIncidents'],
)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
waterandtree,"pandas.merge(simple_treedisplay,simple_waterdisplay,on='neighborhood')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fireWaterTree,"pandas.merge(waterandtree,largesimplefire,on='neighborhood')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
waterfeatures,"pandas.read_csv(""https://data.wprdc.org/datastore/dump/513290a6-2bac-4e41-8029-354cbda6a7b7"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fire_incidents,"pandas.read_csv(""https://data.wprdc.org/datastore/dump/8d76ac6b-5ae8-4428-82a4-043130d17b02"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pgh_trees,"pandas.read_csv(""https://data.wprdc.org/datastore/dump/1515a93c-73e3-4425-9b35-1cd11b2196da"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sali,numpy.array(lji),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.read_sql_query(""SELECT*fromsongs"",con)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
non_offer_trans,"pandas.DataFrame({'month_num':month_col,'per_id':per_id_col,'offer_id':offer_id_col})",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
no_offer_df,"pandas.DataFrame([[10,'no_offer']],columns=['offer_id','offer_type'])",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
no_offer_df,"pandas.DataFrame([[0,30,0,10,0,0,\
0,0,0,0,\
0,0,0,\
0,0,0,0,\
0,0,0,0,1
]],columns=['difficulty','duration','reward','offer_id','email','mobile',\
'social','web','offer_type_bogo','offer_type_discount',\
'offer_type_informational','offer_id_0','offer_id_1',\
'offer_id_2','offer_id_3','offer_id_4','offer_id_5',\
'offer_id_6','offer_id_7','offer_id_8','offer_id_9','offer_id_10'])",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.concat([monthly_transactions,monthly_failed_offers],axis=0)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.concat([monthly_data,no_offer_no_trans],axis=0)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
portfolio_enc,"pandas.concat([portfolio.drop(var,axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
portfolio_enc,"pandas.concat([portfolio_enc,\
pd.get_dummies(portfolio_enc[var],\
prefix=var,prefix_sep='_',drop_first=False)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
profile_enc,"pandas.concat([profile,\
pd.get_dummies(profile[var],\
prefix=var,prefix_sep='_',drop_first=False)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
transcript_offer,"pandas.merge(transcript_offer,portfolio,how='left',on='offer_id')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_offers,"pandas.merge(transcript_offer_received,transcript_offer_viewed,on=['per_id','offer_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_offers,"pandas.merge(all_offers,transcript_offer_completed,on=['per_id','offer_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
succ_tried_offers,"pandas.merge(succ_tried_offers,transcript_trans,on='per_id',how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_offers,"pandas.merge(all_offers,succ_tried_offers_summary,on=['time_received','per_id','offer_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
transactions_labeled,"pandas.merge(transcript_trans,offer_transactions,on=['time_spent','per_id','amt_spent'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
non_offer_trans,"pandas.merge(non_offer_trans,monthly_transactions,on=['month_num','per_id','offer_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_offers_summary_check,"pandas.merge(all_offers_summary,diff_months_df,on=['per_id','offer_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.merge(monthly_data,offer_cost,on='offer_id',how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.merge(monthly_data,offer_type_df,on='offer_id',how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.merge(monthly_data,monthly_data_subset[feature_subset],on=['month_num','per_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df,df_copy,on=['month_num','per_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.merge(monthly_data,profile_enc,on='per_id',how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.merge(monthly_data,portfolio_enc,on='offer_id',how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
profile,pandas.read_csv('new_profile.csv'),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
portfolio,"pandas.read_json('data/portfolio.json',orient='records',lines=True)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
transcript,"pandas.read_json('data/transcript.json',orient='records',lines=True)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
start_of_month,"numpy.arange(0,721,30)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
end_of_month,"numpy.arange(29,750,30)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
person_seen_so_far,numpy.array([]),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
month_col,numpy.array([]),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
per_id_col,numpy.array([]),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
offer_id_col,numpy.array([]),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
has_profit,numpy.zeros(monthly_data.shape[0]),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
person_seen,numpy.sort(person_seen),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
person_seen_so_far,numpy.sort(person_seen_so_far),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
person_seen_so_far,"numpy.append(person_seen_so_far,person_seen)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
per_id_col,"numpy.append(per_id_col,person_seen_so_far)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
month_col,"numpy.append(month_col,np.repeat(np.array(month_num)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
offer_id_col,"numpy.append(offer_id_col,np.repeat(np.array(10)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
person_seen_so_far,numpy.unique(person_seen_so_far),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
person_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
offer_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('LS2014Electors.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
log_price,numpy.log(data_cleaned['Price']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_with_dummies,"pandas.get_dummies(data_no_multicollinearity,drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_with_dummies_new,pandas.get_dummies(data_no_multicollinearity),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
raw_data,pandas.read_csv('1.04.Real-lifeexample.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,sharey=True,figsize=(15,3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,sharey=True,figsize=(15,3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l,os.listdir(folder_selected),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr,numpy.asarray(enc_image),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r1,numpy.asarray(r1),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r2,numpy.asarray(r2),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_i1,numpy.asarray(img),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r1,numpy.asarray(r1),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r2,numpy.asarray(r2),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r1,numpy.asarray(r1),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r2,numpy.asarray(r2),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r3,numpy.asarray(r3),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_arr,"numpy.ones([rows,col])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_arr,"numpy.ones([rows,col])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_image,"numpy.zeros([height,width])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_arr,"numpy.zeros([rows,col])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
share,"numpy.zeros([rows,col])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
share,"numpy.zeros([col,rows])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
share,"numpy.zeros([rows,col])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
start,time.time(),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
start1,time.time(),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
end1,time.time(),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
start2,time.time(),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
end2,time.time(),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
end,time.time(),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
X_batch,"numpy.concatenate((X_values,gradients,cycle,cycle_value)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_batch,"numpy.concatenate((points,gradients,cycle,cycle_value)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_batch,"numpy.concatenate((points,gradients,cycle,cycle_value)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
grad,numpy.cos(x_reshaped),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_batch,numpy.sin(X_values),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
actual,numpy.sin(points),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
actual,numpy.sin(points),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
grid,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
Hepbb,pandas.read_csv(wuenic),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
split_index,numpy.arange(train_label.shape[0]),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_id,"numpy.array(list(map(lambdax:str(x,encoding=""utf-8"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"final_result.loc[:,'prob']",numpy.array(list(map(lambdax:float(x.strip('[]'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,"pandas.DataFrame([test_id,preds1],index=['id','pred'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,"pandas.DataFrame([test_id,preds2],index=['id','pred'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,"pandas.DataFrame([test_id,preds3],index=['id','pred'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,"pandas.DataFrame([test_id,preds4],index=['id','pred'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,"pandas.DataFrame([test_id,preds],index=['id','pred'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
final_result,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
content_matrix,"pandas.read_csv('data/word2vec/content_matrix.csv',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
title_matrix,"pandas.read_csv('data/word2vec/title_matrix.csv',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result_RCNN,"pandas.read_csv('model_results/RCNN_prob.csv',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result_CNNK2,"pandas.read_csv('model_results/CNNK2_prob.csv',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result_CNN512,"pandas.read_csv('model_results/CNN512_prob.csv',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result_RNN,"pandas.read_csv('model_results/RNN_prob.csv',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
bins,"numpy.arange(0,df.height.max()",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('./data/pokemon.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
log_sp500,numpy.log(sp500),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ex_r,"pandas.DataFrame(comb[""TB3MS""].values-comb[""INFLATION""].values,index=comb.index)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
comb,"pandas.concat([dspic,pcec],axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gr2,"pandas.concat([gr,gr.shift(1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
comb,"pandas.concat([inf,tb],axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
comb3,"pandas.concat([gr2,ex_r],axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
comb,"pandas.concat(lags,axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dspic,"pandas.read_csv(""./data/DSPIC96.csv"",index_col=0,parse_dates=True)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pcec,"pandas.read_csv(""./data/PCEC96.csv"",index_col=0,parse_dates=True)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cpi,"pandas.read_csv(""./data/CPIAUCSL.csv"",index_col=0,parse_dates=True)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tb,"pandas.read_csv(""./data/TB3MS.csv"",index_col=0,parse_dates=True)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500,"pandas.read_csv(""./data/SP500.csv"",index_col=0,parse_dates=True)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(2,2,i)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=10),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=50),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=50),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_tsne,"pandas.DataFrame(tsne_results,columns=['comp1','comp2'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_tsne,"pandas.DataFrame(tsne_results,columns=['comp1','comp2'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=2,verbose=1,perplexity=50,n_iter=500,learning_rate=10000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=2,verbose=1,perplexity=50,n_iter=500,learning_rate=10000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=10,n_init=50,n_jobs=-1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans_model,"sklearn.cluster.KMeans(n_clusters=5,n_init=50,n_jobs=-1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Pknonlin,numpy.zeros((len(k),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
P_2h_gg_avgz,numpy.zeros(len(k),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
logxi_2d,numpy.zeros((len(rp),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
twoh_Pgg_klong,numpy.exp(interp_in_k(np.log(kvec_FT),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
r_2d,numpy.sqrt(rp[ri]**2+Pi[pi]**2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
kvec_FT,"numpy.logspace(logkmin,logkmax,kpts)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
k,numpy.logspace(np.log10(kvec_FT[0]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
rp,"numpy.logspace(-2,2,20)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Pi,"numpy.logspace(-5,np.log10(80.)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
z,"numpy.linspace(pa.zLmin,pa.zLmax,100)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
savePgg,"numpy.column_stack((kvec_FT,twoh_Pgg_klong)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"(r,xi_tot)","numpy.loadtxt('./txtfiles/halofit_xi/xi_2h_SDSS_lens_nonlin_fixhunits.txt',unpack=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
P_2h_gg_avgz[ki],"scipy.integrate.simps(dNdz*Pkgg[ki,:],z)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
interp_in_k,scipy.interpolate.interp1d(np.log(k),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
interp_xi,scipy.interpolate.interp1d(np.log(r),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ratings,pandas.DataFrame(df.groupby('title'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ratings['numofratings'],pandas.DataFrame(df.groupby('title'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
corr_starwars,"pandas.DataFrame(similar_to_starwars,columns=['Correlation'])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
corr_liarliar,"pandas.DataFrame(similar_to_liarliar,columns=['Correlation'])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df,movie_titles,on='item_id')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('u.data',sep='\t',names=column_names)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
movie_titles,"pandas.read_csv(""Movie_Id_Titles"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(1169),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(20),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
var1,"numpy.cumsum(np.round(pca.explained_variance_ratio_,decimals=4)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""selected_malignant.txt"",sep='\t',header=None)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clb,matplotlib.pyplot.colorbar(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clb,matplotlib.pyplot.colorbar(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne,sklearn.manifold.TSNE(n_components=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
km,sklearn.cluster.KMeans(n_clusters=n),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=1169),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=8),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.scale(data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
news,"sklearn.datasets.fetch_20newsgroups(subset=""train"")",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(bolsa,bolsay)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
a0,"numpy.zeros((m,n_a)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c0,"numpy.zeros((m,n_a)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x_initializer,"numpy.zeros((1,1,78)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a_initializer,"numpy.zeros((1,n_a)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c_initializer,"numpy.zeros((1,n_a)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
indices,"numpy.argmax(pred,axis=-1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
positive_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
negative_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
total_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
pos_neg_ratios,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
review_counter,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
layer_0,numpy.zeros(10),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
layer_1,numpy.zeros(5),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
source,requests.get(List_url),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(columns=column_names),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_merge,"pandas.merge(df,temp_df,on='Postalcode')",CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
a1,pandas.read_csv('/Users/jegaveerpandianrajendran/Desktop/deliveries.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
review_data,json.loads(line),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
review_data,json.loads(line),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
string,"re.sub(r""([.!?,'/()",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
string,"re.sub(r""([.!?,'/()",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
string,"re.sub(r""([.!?,'/()",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
order,numpy.argsort(np.array(label),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
idxs,numpy.flatnonzero(y_train==y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.array([1,2,3,4,5,6])",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.array([3,6,9,12,15,18])",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([[1,2,3,4,5,6]])",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.array([3,6,9,12,15,18])",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"pandas.read_excel(r""C:\Users\LENOVO\Downloads\AirQualityUCI\AirQualityUCI.xlsx"")",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"slope,interception,r_value,p_value,std_error","scipy.stats.linregress(x,y)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
idxs,numpy.where((y_test!=cls),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean_feat,"numpy.mean(X_train_feats,axis=0,keepdims=True)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_acc,numpy.mean(y_train==y_train_pred),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
val_acc,numpy.mean(y_val==y_val_pred),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
std_feat,"numpy.std(X_train_feats,axis=0,keepdims=True)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_feats,"numpy.hstack([X_train_feats,np.ones((X_train_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_val_feats,"numpy.hstack([X_val_feats,np.ones((X_val_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test_feats,"numpy.hstack([X_test_feats,np.ones((X_test_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
diet_info,numpy.zeros((len(data),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
diet_info,"pandas.DataFrame(diet_info,columns=diet_names)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('./data/nlp_finalproj_data_withids.csv'),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('canned|fresh|cooked|dried|dry|ground|refrigerated|light|ready-to-use','',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('lettuc[^0-9]+','lettuc',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+salt','salt',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+basil|basil[^0-9]+','basil',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+bacon|bacon[^0-9]+','bacon',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+thyme|thyme[^0-9]+','thyme',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+cilantro|cilantro[^0-9]+','cilantro',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+parsley|parsley[^0-9]+','parsley',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+cinnamon|cinnamon[^0-9]+','cinnamon',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('cream[^0-9]+chees|creamchees[^0-9]+','creamchees',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+parmesan[^0-9]+','parmesanchees',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+peanutbutt','peanutbutt',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+chilipepper','chilipepp',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+nectar','nectar',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+tofu','tofu',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+tomato','tomato',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+bellpepp','bellpepp',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('eggrollwra[^0-9]+','eggrollwrap',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
numberonly,"re.sub('*\'|\{|\}|\*""|[a-z|A-Z]|:','',n)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ns,"re.split(r',',numberonly)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
le_igd,sklearn.preprocessing.LabelEncoder(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
le_methods,sklearn.preprocessing.LabelEncoder(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
le_diets,sklearn.preprocessing.LabelEncoder(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_range,"numpy.arange(11,22)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_range,"numpy.arange(10,0,-1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_range,"numpy.arange(11,22)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_range,"numpy.arange(10,0,-1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pi,"numpy.zeros((2,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,"numpy.empty((10,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,"numpy.empty((10,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,"numpy.empty((10,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,"numpy.empty((10,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
bj.sa_value[last_value_a],numpy.mean(ret_states_a[last_value_a]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
player_sum,numpy.sum(card_choice_player),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
player_sum,numpy.sum(card_choice_player),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dealer_sum,numpy.sum(card_choice_dealer),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
player_sum,numpy.sum(card_choice_player),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dealer_sum,numpy.sum(card_choice_dealer),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dealer_sum,numpy.sum(card_choice_dealer),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(11,2,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(12,21,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(11,2,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(12,21,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(12,21,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(2,11,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(12,21,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(2,11,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x_range,y_range)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x_range,y_range)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cbar,"matplotlib.pyplot.colorbar(surf,ticks=[0,1],cax=cax)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cbar,"matplotlib.pyplot.colorbar(surf,ticks=[0,1],cax=cax)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
surf,"ax.imshow(Z,cmap=matplotlib.pyplot.get_cmap('Pastel2',2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
surf,"ax.imshow(Z,cmap=matplotlib.pyplot.get_cmap('Pastel2',2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
monthly_df,"pandas.DataFrame(
dict((column_name+""_""+period,survey_scenario.simulation.calculate_add(column_name,period)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
undecompsed_revdisp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df1,pandas.DataFrame({'revdisp_mensuel_annuel':revdisp_oy.sum(1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['irpp_annuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
decote_monthly,"pandas.Series(survey_scenario.simulation.calculate_add(""decote_gain_fiscal_mensuel_times_12"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
decote_annual,pandas.Series(survey_scenario.simulation.calculate_add('decote_gain_fiscal'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp,"pandas.Series(survey_scenario.simulation.calculate_add('revdisp_mensuel_annuel','2009')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp,"pandas.Series(survey_scenario.simulation.calculate_add('revdisp_mensuel_annuel','2009')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation[filtr_near0].hist(bins,"70000,weights=pandas.Series(weight_foyers)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
decote_monthly,"pandas.Series(survey_scenario.simulation.calculate_add(""decote_mensuel_times_12"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
decote_annual,"pandas.Series(survey_scenario.simulation.calculate_add(""decote"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
poids,pandas.Series(weight_foyers),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_zero,pandas.Series(lambda_compensation==0),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_ir_m_rsa_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel_rsa_mensuel','2009')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_c_ir,"pandas.Series(survey_scenario.simulation.calculate_add('utility_compensated_ir_mensuel','2009')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_ir_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel','2009')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_ir_a,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_annuel','2009')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
weight_menages,pandas.Series(weight_menages),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
hist1,"((u_ir_m-u_ir_a))[((u_ir_m-u_ir_a))!=0].hist(bins=7000,figsize=(25,12),weights=pandas.Series(weight_menages)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
hist2,"((u_c_ir-u_ir_a))[((u_c_ir-u_ir_a))!=0].hist(bins=7000,figsize=(25,12),weights=pandas.Series(weight_menages)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
outliers,pandas.Series(np.abs(((u_ir_m-u_ir_a),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_decote_different,pandas.Series(np.abs(decote-decote_mensuel),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
irpp_mensuel,"pandas.Series(survey_scenario.simulation.calculate(""irpp_mensuel"",'2009-{}'.format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
to_change,pandas.Series(marginal_rate),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
to_change,"pandas.Series(rates.marginal_rate(irpp_test_case,rbg_test_case)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
monetary_gain_ir,pandas.Series(monetary_gain_ir),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
diff_in_income,"pandas.Series(
np.abs(survey_scenario.simulation.calculate(""revdisp_mensuel_annuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_money_gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_annuelle+,"pandas.Series(
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_annuelle+,"pandas.Series(
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_annuelle+,"pandas.Series(a
`
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_ir_mensuel_rsa_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
passage_a_la_retraite,pandas.Series(is_retired),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['revdisp_mensuel_annuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('revdisp_mensuel_annuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""rev_trav_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""salaire_imposable"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""pen_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""psoc_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""ppe"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""impo_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""retraite_imposable"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax2,matplotlib.pyplot.twinx(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
a,"numpy.array([1,2,3])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,"numpy.array([True,True,False])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
array,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
below_collection_thrshld,"numpy.zeros(weight_foyers.shape[0],dtype=bool)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_money_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean_gain,numpy.zeros(1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean_gain,numpy.zeros(1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean_gain,numpy.zeros(1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean_gain,numpy.zeros(1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
monetary_gain_ir_rsa,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
c,numpy.zeros(1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_retired,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_inactive,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_retired,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_inactive,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_retire_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
target_array,numpy.empty(entity.count),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
target_array,numpy.empty(entity.count),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
target_array,numpy.empty(simulation.persons.count),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
target_array,numpy.empty(simulation.persons.count),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
has_decote_difference,numpy.ones(59874),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir+,"numpy.mean(
(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain+,"numpy.mean(
pd.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir+,"numpy.mean(
(survey_scenario.simulation.calculate(""utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain+,"numpy.mean(
pd.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
asset_vols,numpy.sqrt(Sigma.diagonal(),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
vl_vals,"numpy.linspace(minvol,maxretvol,NPOINTS)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
Sigma,numpy.cov(df.transpose(),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
longrun_data,"pandas.DataFrame({'year':list(range(1928,2020)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
ret_df,pandas.DataFrame(enumerate(results_dict.keys(),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
download_df,"pandas.read_excel('http://www.stern.nyu.edu/~adamodar/pc/datasets/histretSP.xls',
sheet_name=data_sheet,
skiprows=skiprows,
skipfooter=skipfooter)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
my_cmap,"seaborn.diverging_palette(10,220,sep=80,n=50)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
ad_data,pandas.read_csv('advertising.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logModel,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hawaii_measurements,"pandas.read_csv(""hawaii_measurements.csv"")",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
hawaii_stations,"pandas.read_csv(""hawaii_stations.csv"")",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
keep_idx,numpy.array(keep_idx),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
pred_cost_train,numpy.zeros(nb_epochs),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
err_train,numpy.zeros(nb_epochs),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
cost_dev,numpy.zeros(nb_epochs),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
err_dev,numpy.zeros(nb_epochs),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
test_predictions,"numpy.zeros((10000,10)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
all_preds,numpy.zeros((len(x_dev),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
all_sample_preds,numpy.zeros((len(x_dev),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
correct_preds,numpy.zeros((len(x_dev),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
lim_idxs,"numpy.where(np.logical_and(weight_vector>=symlim,weight_vector<=symlim)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
x_dev,numpy.concatenate(x_dev),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
y_dev,numpy.concatenate(y_dev),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ims,numpy.concatenate(ims),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ims,numpy.concatenate(ims),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
y,numpy.ones(ims.shape[0]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
y,numpy.ones(ims.shape[0]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
e_x,numpy.exp(x-np.max(x),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
e_x,numpy.exp(x-np.max(x),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
x_rot,"numpy.expand_dims(ndim.interpolation.rotate(x[0,:,:],angle,reshape=False,cval=-0.42421296)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ims,"numpy.expand_dims(ims,axis=1)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
x_rot,"numpy.expand_dims(ndim.interpolation.rotate(x[0,:,:],angle,reshape=False,cval=-0.42421296)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ims,"numpy.expand_dims(ims,axis=1)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(steps,8)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
fig,matplotlib.pyplot.figure(dpi=100),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
lgd,"matplotlib.pyplot.legend(['testerror','trainerror'],markerscale=marker,prop={'size':textsize,'weight':'normal'})",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
lgd,"matplotlib.pyplot.legend(['testerror','trainerror'],markerscale=marker,prop={'size':textsize,'weight':'normal'})",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
lgd,"matplotlib.pyplot.legend(['testerror','trainerror'],markerscale=marker,prop={'size':textsize,'weight':'normal'})",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
lgd,"matplotlib.pyplot.legend(['testerror','trainerror'],markerscale=marker,prop={'size':textsize,'weight':'normal'})",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
lgd,"matplotlib.pyplot.legend(['correctclass','posteriorpredictiveentropy'],loc='upperright',
prop={'size':15,'weight':'normal'},bbox_to_anchor=(1.4,1)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ax0,"matplotlib.pyplot.subplot2grid((3,steps-1)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
"fig2,ax2",matplotlib.pyplot.subplots(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
"fig2,ax2",matplotlib.pyplot.subplots(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
tic0,time.time(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
tic,time.time(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
toc,time.time(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
toc0,time.time(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
df,pandas.read_csv('ETH_1h.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('ETH_1h.csv',parse_dates=['Date'],date_parser=d_parser)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df['Date'],pandas.to_datetime(df['Date']),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df['Date'],"pandas.to_datetime(df['Date'],format='%Y-%m-%d%I-%p')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
filt,(df['Date']>=pandas.to_datetime('2019-01-01'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
self.images,"numpy.load(""./image-colorization/gray_scale.npy"")",CLUSTER_21,CLUSTER_7,CLUSTER_4,CLUSTER_28,CLUSTER_8
data,"numpy.load(""./image-colorization/gray_scale.npy"")",CLUSTER_21,CLUSTER_7,CLUSTER_4,CLUSTER_28,CLUSTER_8
historical_stock_prices_df,"pandas.read_csv(""historical_stock_prices.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
historical_stocks_df,"pandas.read_csv(""historical_stocks.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
series1,"numpy.array(stocks[stocks[""ticker""]==companies[i]][""adj_close""])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dist_array,numpy.zeros((len(companies),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dist_array,numpy.zeros((len(remaining_companies),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
counts,numpy.zeros(model.children_.shape[0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linkage_matrix,"numpy.column_stack([model.children_,model.distances_,
counts])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,seaborn.heatmap(dist_array),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
normed_dist_matrix,"sklearn.preprocessing.normalize(dist_array,axis=1,norm='l2')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.cluster.AgglomerativeClustering(affinity='precomputed',n_clusters=2,linkage='complete')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_2,"sklearn.cluster.AgglomerativeClustering(affinity='precomputed',n_clusters=None,distance_threshold=0,linkage='complete')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_3,"sklearn.cluster.AgglomerativeClustering(affinity='precomputed',n_clusters=None,distance_threshold=0.03,linkage='complete')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehot_encoder,sklearn.feature_extraction.DictVectorizer(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
x,"numpy.array([[155,70]])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,3],
[4,9]])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
distances,"numpy.array([2,1,7,6,9])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X_test,"numpy.array([
[168,65],
[180,96],
[160,52],
[169,67],
[178,64],
[172,59]
])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
nearest_neighbor_genders,"numpy.take(y_train,nearest_neighbor_indices)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
distances,numpy.sqrt(np.sum((X_train-x),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
lb,sklearn.preprocessing.LabelBinarizer(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=K),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
scale_col,pandas.DataFrame(StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
minmax_col,pandas.DataFrame(MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfModel,"pandas.DataFrame(columns=['cross-score','cross-train','rsq_train','rsq_test','subt_rsq','mae_test','mse_test','rmse_test','mape_test'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfScale,"pandas.concat([df_dms,scale_col],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfMinMax,"pandas.concat([df_dms,minmax_col],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_dummy,pandas.read_csv('forex_dummy.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_pca1,pandas.read_csv('forex_pca_1.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_pca2,pandas.read_csv('forex_pca_2.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.20,shuffle=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(os.path.join('..','datasets','zillow-03-start.csv')",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
figure,matplotlib.pyplot.figure(),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgrid,"numpy.arange(v2_lims[0],v2_lims[1]+dstep,dstep)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ygrid,"numpy.arange(v3_lims[0],v3_lims[1]+dstep,dstep)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
keys,numpy.array(ztable_full.keys(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v2_ref,numpy.array(v2_vals),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v3_ref,numpy.array(v3_vals),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v2_lims,numpy.array(v2v3_limits[mod]['V2']),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v3_lims,numpy.array(v2v3_limits[mod]['V3']),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
extent,numpy.array([xgrid.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
pts,"numpy.array([Y[ind_nan],X[ind_nan]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
pts,"numpy.array([Y[ind_nan],X[ind_nan]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
extent,numpy.array([xgrid.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
zube,numpy.array(zcube),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ind_nrc,numpy.where(ind_nrc),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
xind_good,numpy.where(num_nans_cols<nrows),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
yind_good,numpy.where(num_nans_rows<ncols),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
xind_good,numpy.where((np.abs(col_diff),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
yind_good,numpy.where((np.abs(row_diff),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ind_nan,numpy.isnan(zgrid),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ind_nan,numpy.isnan(zgrid),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
nan_mask,numpy.isnan(zgrid2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
nan_mask,numpy.isnan(zgrid2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(xgrid,ygrid)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(xgrid,ygrid)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"zmin,zmax",numpy.nanmin(zgrid),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(8,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(8,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
zgrid,"scipy.interpolate.griddata((v2,v3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
func,"scipy.interpolate.RegularGridInterpolator((ygrid2,xgrid2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
func,"scipy.interpolate.RegularGridInterpolator((ygrid2,xgrid2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
zgrid,"scipy.ndimage.rotate(zgrid,rot_ang,reshape=False,order=1,cval=np.nan)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
zgrid,"scipy.ndimage.rotate(zgrid,-rot_ang,reshape=False,order=1,cval=np.nan)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
reviews,pandas.read_csv(yelp_review),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
text_counts,reviews['labels'],test_size=0.3,random_state=123)",CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
text_tf,reviews[""labels""],test_size=0.2,random_state=123)",CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('housing.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
russian_movies['month_released'],pandas.DatetimeIndex(russian_movies['date_published']),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
russian_movies['day_released'],pandas.DatetimeIndex(russian_movies['date_published']),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('data\IMDbmovies.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
clf,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
missing_data,"pandas.concat([total,percent],axis=1,keys=['Total','Percent'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""bill_authentication.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=seed)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_results,numpy.array([]),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
all_results,numpy.array([]),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
l,"numpy.array(['car','goat'])",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
all_results,"numpy.append(all_results,result)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
all_results,"numpy.append(all_results,result)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
results,"pandas.DataFrame(columns=['train_participants','test_participants','accuracy','auc','precision_0','precision_1','recall_0','recall_1','f1_0','f1_1'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_data,"pandas.concat(train_data,ignore_index=True,sort=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_data,"pandas.concat(test_data,ignore_index=True,sort=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data5,pandas.read_csv(p5_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data7,pandas.read_csv(p7_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data9,pandas.read_csv(p9_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data11,pandas.read_csv(p11_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data12,pandas.read_csv(p12_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data17,pandas.read_csv(p17_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data18,pandas.read_csv(p18_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
max_val,numpy.nanmax(X_train[c]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
min_val,numpy.nanmin(X_train[c]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mean,numpy.nanmean(X_train[c]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
std,numpy.nanstd(X_train[c]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"split_train,split_test,bogus1,bogus2","sklearn.model_selection.train_test_split(split,bogus,test_size=split_size,shuffle=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,bogus1,y_train,bogus2","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.0,shuffle=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,bogus1,y_train,bogus2","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.0,shuffle=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,bogus1,y_train,bogus2","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.0,shuffle=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,bogus1,y_train,bogus2","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.0,shuffle=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,bogus1,y_train,bogus2","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.0,shuffle=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
auc,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(y_test,pred,average=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
precision,"sklearn.metrics.precision_score(y_test,pred,average=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,pred,average=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.BaggingClassifier(MLPClassifier(hidden_layer_sizes=(1024,512,256,64,16)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y_mean,numpy.mean(y_train),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
output,pandas.DataFrame({'id':test['ID'].astype(np.int32),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('../input/train.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('../input/test.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
lbl,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=n_comp,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ica,"sklearn.decomposition.FastICA(n_components=n_comp,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data_frame,"pandas.DataFrame(rows,columns=frame_columns)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
reviews,"pandas.read_csv(""../input/wine-reviews/winemag-data-130k-v2.csv"",index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
observations,numpy.array(observations),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(450,550,100)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,numpy.linspace(observations.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x_range,numpy.linspace(observations_a.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
histogram_data,"matplotlib.pyplot.hist(observations,bins=histogram_bins)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
histogram_data,"matplotlib.pyplot.hist([observations_a,observations_b],
bins=histogram_bins,color=['b','r'])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
result,"random.choice(['H','T'])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
result,"pandas.read_sql_query(""SELECT*fromeducativas"",connection)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"w,b,X,Y","numpy.array([[1],[2]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
w,"numpy.zeros((dim,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
Y_prediction,"numpy.zeros((1,m)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
cost,numpy.squeeze(cost),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
costs,numpy.squeeze(d['costs']),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
legend,"matplotlib.pyplot.legend(loc='uppercenter',shadow=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
df,"pandas.DataFrame(np.random.randn(6,4)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df2,"pandas.DataFrame({'A':1.,
'B':pd.Timestamp('20181220')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(np.random.randn(1000,4)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"pandas.Series([1,3,5,np.nan,6,8])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ts,pandas.Series(np.random.randn(len(rng),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ts,pandas.Series(np.random.randn(len(prng),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ts,pandas.Series(np.random.randn(1000),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dates,"pandas.date_range('20181220',periods=6)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
rng,"pandas.date_range('20/12/201800:00',periods=5,freq='D')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ts,"pd.Series(np.random.randn(1000),index=pandas.date_range('1/1/2000',periods=1000)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
prng,"pandas.period_range('1990Q1','2000Q4',freq='Q-NOV')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(res,columns=[""PostalCode"",""Borough"",""Neighborhood""])",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_venues_onehot,"pandas.get_dummies(toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_postcode_gis_merge,"pandas.merge(postcode_df,df,on='PostalCode')",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
postcode_df,pandas.read_csv('http://cocl.us/Geospatial_data'),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
html_doc,requests.get(url),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
compare_props,"pandas.DataFrame({
""Overall"":income_cat_proportions(housing)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
housing_tr,"pandas.DataFrame(X,columns=housing_num.columns)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
housing_extra_attribs,"pandas.DataFrame(
housing_extra_attribs,
columns=list(housing.columns)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
housing,"pandas.read_csv(""housing.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
loc,numpy.mean(squared_errors),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"housing[""income_cat""]","numpy.ceil(housing[""median_income""]/1.5)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
tree_rmse,numpy.sqrt(tree_mse),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
tree_rmse_scores,numpy.sqrt(-scores),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lin_rmse_scores,numpy.sqrt(-lin_scores),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_rmse,numpy.sqrt(forest_mse),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_rmse_scores,numpy.sqrt(-forest_scores),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
final_rmse,numpy.sqrt(final_mse),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
c,"""median_house_value"",cmap=matplotlib.pyplot.get_cmap(""jet"")",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"train_set,test_set","sklearn.model_selection.train_test_split(housing,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"train_set,test_set","sklearn.model_selection.train_test_split(housing,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
ordinal_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
cat_encoder,sklearn.preprocessing.OneHotEncoder(categories='auto'),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lab_encoder,sklearn.preprocessing.LabelBinarizer(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
attr_adder,"sklearn.preprocessing.FunctionTransformer(add_extra_features,validate=False,
kw_args={""add_bedrooms_per_room"":False})",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
num_pipeline,"sklearn.pipeline.Pipeline([
('imputer',Imputer(strategy=""median"")",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
full_pipeline,"sklearn.compose.ColumnTransformer([
(""num"",num_pipeline,num_attribs)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lin_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
tree_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
final_mse,"sklearn.metrics.mean_squared_error(y_test,final_predictions)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lin_mae,"sklearn.metrics.mean_absolute_error(housing_labels,housing_predictions)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
tree_reg,sklearn.tree.DecisionTreeRegressor(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(tree_reg,housing_prepared,housing_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lin_scores,"sklearn.model_selection.cross_val_score(lin_reg,housing_prepared,housing_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_scores,"sklearn.model_selection.cross_val_score(forest_reg,housing_prepared,housing_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_reg,"sklearn.ensemble.RandomForestRegressor(n_estimators=10,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_reg,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_reg,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(forest_reg,param_grid,cv=5,scoring='neg_mean_squared_error',return_train_score=True)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
rnd_search,"sklearn.model_selection.RandomizedSearchCV(forest_reg,param_distributions=param_distribs,
n_iter=10,cv=5,scoring='neg_mean_squared_error',random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
scale,scipy.stats.sem(squared_errors),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
predicted_label,"numpy.argmax(np_probabilities[i,:])",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_7
ys,numpy.sin(xs),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_7
injTable,numpy.array(f['/Cameras/LSTCAM/injTable']),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
pixel_pos,numpy.array(f['/Cameras/LSTCAM/pixelsPosition']),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
pix2,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
en,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
alt,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
az,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
x,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
y,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
pix,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
pix2,"numpy.append(pix2,test_dataset_2[i]['image'])",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
en,"numpy.append(en,test_dataset_2[i]['labels'][0])",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
x,"numpy.append(x,test_dataset_2[i]['labels'][1])",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
y,"numpy.append(y,test_dataset_2[i]['labels'][2])",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
alt,"numpy.append(alt,test_dataset_2[i]['labels'][3])",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
az,"numpy.append(az,test_dataset_2[i]['labels'][4])",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
pix,"numpy.append(pix,test_dataset[i]['image'][0].numpy()",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
cm,matplotlib.pyplot.get_cmap('viridis'),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
titanic,seaborn.load_dataset('titanic'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.tree.DecisionTreeClassifier(max_depth=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.tree.DecisionTreeClassifier(max_depth=2,criterion='entropy')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfc,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
housing['income_cat'],numpy.ceil(housing['median_income']/1.5),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=test_ratio,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('https://data.world/raghu543/credit-card-fraud-data/workspace/file?filename=creditcard.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,numpy.arange(x1.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
x,y=numpy.arange(N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
mu,"numpy.mean(x,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
sigma,"numpy.std(x,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
y,numpy.exp(-t**2/2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
sigma,numpy.sqrt(m2-mu*mu),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
t,"numpy.meshgrid(x,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
"density,edges","numpy.histogramdd(d,bins=[N,N])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kurtosis,scipy.stats.kurtosis(x),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
skew,scipy.stats.skew(x),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
fig,matplotlib.pyplot.figure(facecolor='w'),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
"y1,x1,dummy","matplotlib.pyplot.hist(d,bins=50,normed=True,color='g',alpha=0.75)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
df,pandas.read_csv(DATA_PATTERN),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
cov,numpy.mean((ref-refMu),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
gaussianKernel,numpy.exp(-(np.square(m/M),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
outR,numpy.exp(idct2(outRSpectrum),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
outG,numpy.exp(idct2(outGSpectrum),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
outB,numpy.exp(idct2(outBSpectrum),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
outR,"numpy.fmin(np.fmax(outR,0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
outG,"numpy.fmin(np.fmax(outG,0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
outB,"numpy.fmin(np.fmax(outB,0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
corr,"numpy.corrcoef(ref,out)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
"n,m",numpy.meshgrid(np.arange(N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
data,"pandas.read_csv(""breast_cancer.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc,sklearn.ensemble.RandomForestClassifier(n_jobs=1),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
roc,"sklearn.metrics.roc_auc_score(y_test,best_rfc.predict_proba(X_test)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,best_rfc.predict(X_test)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,best_rfc.predict_proba(X_test)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
dframe,pandas.read_csv('lec25.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dframe,"pandas.read_csv('lec25.csv',header=None)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dframe,"pandas.read_table('lec25.csv',sep=',',header=None)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
image,"numpy.reshape(mnist['train_data'],(60000,28*28)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
image_test,"numpy.reshape(mnist['test_data'],(10000,28*28)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"[N,features]",numpy.shape(image),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mx.symbol.random_normal(loc,"0,scale=1,shape=numpy.shape(logvar.get_internals()",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,(ax1,ax2,ax3,ax4)","matplotlib.pyplot.subplots(1,4,sharex='col',sharey='row',figsize=(12,3)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,((ax1,ax2,ax3,ax4))","matplotlib.pyplot.subplots(1,4,sharex='col',sharey='row',figsize=(12,3)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,((ax1,ax2,ax3,ax4))","matplotlib.pyplot.subplots(1,4,sharex='col',sharey='row',figsize=(12,3)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,((ax0,ax1,ax2,ax3,ax4,ax5))","matplotlib.pyplot.subplots(1,6,sharex='col',sharey='row',figsize=(12,2.5)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
L,numpy.arange(len(Y),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
xr,"numpy.arange(x_min,x_max,h)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
yr,"numpy.arange(y_min,y_max,h)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
Z2,numpy.arange(len(xr),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,h)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(C=1e5),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(path,header=None,names=['Fires','Thefts'])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
path,os.getcwd(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
points,"numpy.arange(-5,5,0.01)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.array([1,2,3,4])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
condition,"numpy.array([True,True,False,False])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,"numpy.array([[1,2,3],[4,5,6],[7,8,9]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
bool_arr,"numpy.array([True,False,True])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
countries,"numpy.array(['France','Germany','USA','Russia','USA','Mexico','Germany'])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
answer2,"numpy.where(condition,A,B)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"dx,dy","numpy.meshgrid(points,points)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R0,"numpy.array([X0,Y0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X1,Y1","numpy.array([numpy.asarray(numpy.matmul(A,r0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R1,"numpy.array([X1,Y1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R0,"numpy.array([X0,Y0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X1,Y1","numpy.array([numpy.asarray(numpy.matmul(A,r0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R1,"numpy.array([X1,Y1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X1,Y1","numpy.array([numpy.asarray(numpy.matmul(A,r0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R1,"numpy.array([X1,Y1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a_11,numpy.cos(omega*dt),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a_11,numpy.cos(omega*dt),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a_11,numpy.cosh(l*dt),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a_12,numpy.sin(omega*dt),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a_12,numpy.sin(omega*dt),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a_12,numpy.sinh(l*dt),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.matrix([
[a_11,a_12],
[a_21,a_22]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A_hat_mean,"numpy.matrix([[0,0],[0,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A_hat,"numpy.matrix([
[x1*x0,x1*y0],
[y1*x0,y1*y0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.matrix([
[a_11,a_12],
[a_21,a_22]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A_hat_mean,"numpy.matrix([[0,0],[0,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A_hat,"numpy.matrix([
[x1*x0,x1*y0],
[y1*x0,y1*y0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.matrix([
[a_11,a_12],
[a_21,a_22]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A_hat_mean,"numpy.matrix([[0,0],[0,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A_hat,"numpy.matrix([
[x1*x0,x1*y0],
[y1*x0,y1*y0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
abscisa,"numpy.arange(1,n+1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_1,numpy.zeros(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_2,numpy.zeros(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_1,numpy.zeros(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_2,numpy.zeros(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
f_1,numpy.zeros(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
f_2,numpy.zeros(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
error_1,numpy.log(np.abs(k1-x_sol_1),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
error_2,numpy.log(np.abs(k2-x_sol_2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
error_1,numpy.log(np.abs(k1-x_sol_1),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
error_2,numpy.log(np.abs(k2-x_sol_2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
train_acc,numpy.mean(model.predict(X_train),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
val_acc,numpy.mean(model.predict(X_val),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
grad_difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,numpy.asarray(v),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x_tilde,numpy.zeros(m),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
b,numpy.zeros(m),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
rho,numpy.where(u>(sv-b),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
exp_return,"numpy.dot(algo.b_t,x_tilde)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
algo.b_t,numpy.ones(algo.m),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
sv,numpy.cumsum(u),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
u,numpy.sort(v),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
results,pandas.read_pickle('results.pickle'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
re_repeat,re.compile(r'Repeat_[0-9_]*b'),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
re_block8,re.compile(r'Block8_[A-Za-z]'),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
weight_arr,"numpy.load(os.path.join(npy_weights_dir,weight_file)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
train_df,"pandas.read_csv(""train.csv"",dtype={""Age"":np.float64},)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
avgerage_fare,pandas.DataFrame([fare_not_survived.mean(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_fare,pandas.DataFrame([fare_not_survived.std(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axis1","matplotlib.pyplot.subplots(1,1,figsize=(18,4)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
facet,"seaborn.FacetGrid(train_df,hue=""Survived"",aspect=4)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,numpy.arange(10),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
t0,time.time(),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_influ,pandas.DataFrame(pd.Series(influ_dict),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_auc,pandas.DataFrame(pd.Series(auc_dict),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
CV,"pandas.DataFrame({'index':np.arange(0,len(X)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
prediction,"pandas.DataFrame({'predicted_label':label,
'predicted_proba':proba})",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('ads_train.csv'),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('ads_test.csv'),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(22,14)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(13,6)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(13,6)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(13,6)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(13,6)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(13,6)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(13,6)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
tree,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=5)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
dt,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=5,max_features='auto')",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(train.y_buy.values,train[col])",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(label,preds)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
auc_dict[col],"sklearn.metrics.auc(fpr,tpr)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"precision,recall,_","sklearn.metrics.precision_recall_curve(label,preds)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(label,preds>0.5)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
skf,"sklearn.model_selection.StratifiedKFold(n_splits=10,random_state=124)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=124)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"CV.loc[val_i,'test_cv_score']","sklearn.linear_model.LogisticRegression(solver='liblinear',max_iter=150,C=0.01)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"CV.loc[val_i,'log_cv_score']","sklearn.linear_model.LogisticRegression(solver='liblinear',max_iter=150,C=0.01)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=8)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
gbs,"sklearn.model_selection.RandomizedSearchCV(
estimator=LGBMClassifier(metric='None',n_estimators=100)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
q_values,"numpy.zeros((num_states,num_states,num_actions)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
enc,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
imputer,sklearn.impute.SimpleImputer(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
model.startprob_,"numpy.array([0.3,0.4,0.3])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
model.transmat_,"numpy.array([[0.2,0.6,0.2],
[0.4,0.0,0.6],
[0.1,0.2,0.7]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
model.emissionprob_,"numpy.array([[0.2,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1],
[0.1,0.1,0.1,0.1,0.2,0.1,0.1,0.1,0.1],
[0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.2]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.atleast_2d([0,1,2,3])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(denselist,columns=feature_names)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df,"pandas.DataFrame(denselist,columns=feature_names)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
full_df,"pandas.concat([fake_info_df,true_info_df])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
contents,"numpy.asarray(open(path+filename,'r')",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
contents,"numpy.append(contents,[filename.replace('-meta','')",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
true_file_list,os.listdir('dataset/dataset_full_/True/'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
fake_file_list,os.listdir('dataset/dataset_full_/Fake/'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
random_forest_model,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,x_test,Y_train,y_test","sklearn.model_selection.train_test_split(random_forest_df.drop(['label'],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,x_test,Y_train,y_test","sklearn.model_selection.train_test_split(k_means_df.drop(['label'],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,x_test,Y_train,y_test","sklearn.model_selection.train_test_split(gauss_nb_df.drop(['label'],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,x_test,Y_train,y_test","sklearn.model_selection.train_test_split(tree_df.drop(['label'],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,x_test,Y_train,y_test","sklearn.model_selection.train_test_split(tree_df.drop(['label'],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(y_test.values,y_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(y_test.values,y_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(y_test.values,y_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(y_test.values,y_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(y_test.values,y_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
k_means,"sklearn.cluster.KMeans(n_clusters=2,random_state=42)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
decision_tree,sklearn.tree.DecisionTreeClassifier(random_state=42),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
logistic_reg_clf,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_ex,pandas.DataFrame(number),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_num,"pandas.DataFrame({""test_num"":test_num})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_ans,"pandas.DataFrame({""ans"":data[3:]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_num,"pandas.DataFrame({""test_num"":test_num})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_date,"pandas.DataFrame({""testDate"":date})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_qt,pandas.DataFrame(info),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_info,"pandas.DataFrame({""userID"":ID,""first"":first,""last"":last})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_num,"pandas.DataFrame(test_num,columns=[""test_num""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_date,"pandas.DataFrame(date,columns=[""testDate""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_info,pandas.DataFrame(tmp),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_ex,pandas.DataFrame(number),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_num,"pandas.DataFrame({""test_num"":test_num})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_date,"pandas.DataFrame({""testDate"":date})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_qt,pandas.DataFrame(info),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_info,pandas.DataFrame(tmp),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_ex,pandas.DataFrame(number),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_date,"pandas.DataFrame({""testDate"":date})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_qt,pandas.DataFrame(info),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_info,"pandas.DataFrame({""userID"":ID,""first"":first,""last"":last})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_ans,"pandas.concat([test_num,test_ans],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test,"pandas.concat([test_num,test_date,test_info,test_qt],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_sample,"pandas.concat([df_sample,test],axis=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test,"pandas.concat([test_num,test_date,test_info],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_sample,"pandas.concat([df_sample,test],axis=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test,"pandas.concat([test_num,test_date,test_info,test_qt],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_ex,"pandas.concat([df_ex,test],axis=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test,"pandas.concat([test_date,test_info,test_qt],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_ex,"pandas.concat([df_ex,test],axis=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
qt_col,"pandas.read_csv(""qt_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_sample,"pandas.read_csv(""sample_dataset_form.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(path,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(file,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_sample,"pandas.read_csv(""sample_dataset_form.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col_sample,"pandas.read_csv(""sample_dataset_form_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(file,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(file,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_sample,"pandas.read_csv(""sample_dataset_form.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col_sample,"pandas.read_csv(""sample_dataset_form_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
standard_col,"pandas.read_csv(""standard_sat_data_col.csv"",index_col=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(file,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
standard_col,"pandas.read_csv(""standard_sat_data_col.csv"",index_col=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
qt_col,"pandas.read_csv(""qt_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(file,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
standard_col,"pandas.read_csv(""standard_sat_data_col.csv"",index_col=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(""1/test_score_by_test_id_report_1.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(file,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,"pandas.read_csv(""test_info_testNum_1.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_number,"numpy.arange(1,115)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
number,numpy.arange(len(col),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_number,"numpy.arange(1,408)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_number,"numpy.arange(1,5)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
number,numpy.arange(len(col),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_number,"numpy.arange(1,32)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
number,numpy.arange(len(col),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
can_enter,numpy.logical_and(dv.get_ts('up_limit'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
can_exit,numpy.logical_and(dv.get_ts('down_limit'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
slope_df,"pandas.DataFrame({name:-ta.LINEARREG_SLOPE(value.values,param)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
self.w_,numpy.zeros(1+X.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse_val,numpy.sqrt(mean_of_differences_squared),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,numpy.corrcoef(df[cols].values.T),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('./housing.data',sep=""\s+"",names=columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hm,"seaborn.heatmap(cm,
cbar=True,
annot=True,
square=True,
fmt='.2f',
annot_kws={'size':15},
yticklabels=cols,
xticklabels=cols)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_std,y_std,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_x,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_y,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.SGDRegressor(eta0=0.0001,n_iter=20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
im_list,numpy.asarray(im),CLUSTER_2,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.expand_dims(x,axis=0)",CLUSTER_2,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(""acled_social_iso3_labeled.csv"",index_col=0)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_new,pandas.read_csv(fname),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
locs,"numpy.arange(0.,len(labels)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
fig,"seaborn.lineplot(x='EVENT_DATE_MONTH',y='Battles',data=df_Ang,color='blue')",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
fig,"seaborn.lineplot(x='EVENT_DATE_MONTH',y='Battles',data=df_norm,color='red')",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
c,"matplotlib.pyplot.colorbar(img,ax=ax,fraction=0.046,pad=0.04,label='$\mathcal{C}_{ij}/\sqrt{\mathcal{C}_{ii}\mathcal{C}_{jj}}$')",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
cbytick_obj,"matplotlib.pyplot.getp(c.ax.axes,'yticklabels')",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,"numpy.zeros([count,window])",CLUSTER_12,CLUSTER_7,CLUSTER_5,CLUSTER_22,CLUSTER_8
Y,"numpy.zeros([count,m])",CLUSTER_12,CLUSTER_7,CLUSTER_5,CLUSTER_22,CLUSTER_8
x,"numpy.fromfile(f,dtype=np.float32)",CLUSTER_12,CLUSTER_7,CLUSTER_5,CLUSTER_22,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('auto.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.asarray(table_train.rows[(i-1),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,numpy.asarray(table_test.rows[(i-1),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_rep,numpy.zeros(((table_train.num_columns-2),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_dem,numpy.zeros(((table_train.num_columns-2),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Y_train,numpy.zeros((len(X_train),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Y_test,numpy.zeros((len(X_test),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_train,"numpy.empty((table_train.num_rows,16)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_test,"numpy.empty((table_test.num_rows,16)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Labels,"numpy.argmax(Y_train,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Labels,"numpy.argmax(Y_test,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
train_label,numpy.asarray(train_label),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
coefs,"pandas.Series(ridge.coef_,index=X_train.columns)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
coefs,"pandas.Series(lasso.coef_,index=X_train.columns)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
coefs,"pandas.Series(elasticNet.coef_,index=X_train.columns)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.concat([train_num,train_cat],axis=1)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_coefs,pandas.concat([coefs.sort_values(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_coefs,pandas.concat([coefs.sort_values(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_coefs,pandas.concat([coefs.sort_values(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_cat,pandas.get_dummies(train_cat),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""../dat/train.csv"")",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.SalePrice,numpy.log1p(train.SalePrice),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_num[skewed_features],numpy.log1p(train_num[skewed_features]),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""OverallQual-Sq""]","numpy.sqrt(train[""OverallQual""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""AllSF-Sq""]","numpy.sqrt(train[""AllSF""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""AllFlrsSF-Sq""]","numpy.sqrt(train[""AllFlrsSF""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""GrLivArea-Sq""]","numpy.sqrt(train[""GrLivArea""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""SimplOverallQual-Sq""]","numpy.sqrt(train[""SimplOverallQual""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""ExterQual-Sq""]","numpy.sqrt(train[""ExterQual""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""GarageCars-Sq""]","numpy.sqrt(train[""GarageCars""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""TotalBath-Sq""]","numpy.sqrt(train[""TotalBath""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""KitchenQual-Sq""]","numpy.sqrt(train[""KitchenQual""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""GarageScore-Sq""]","numpy.sqrt(train[""GarageScore""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(-cross_val_score(model,X_train,y_train,scoring=scorer,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(-cross_val_score(model,X_test,y_test,scoring=scorer,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train,y,test_size=0.3,random_state=0)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
stdSc,sklearn.preprocessing.StandardScaler(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,"sklearn.linear_model.RidgeCV(alphas=[0.01,0.03,0.06,0.1,0.3,0.6,1,3,6,10,30,60])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,"sklearn.linear_model.RidgeCV(alphas=[alpha*.6,alpha*.65,alpha*.7,alpha*.75,alpha*.8,alpha*.85,
alpha*.9,alpha*.95,alpha,alpha*1.05,alpha*1.1,alpha*1.15,
alpha*1.25,alpha*1.3,alpha*1.35,alpha*1.4],
cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,"sklearn.linear_model.LassoCV(alphas=[0.0001,0.0003,0.0006,0.001,0.003,0.006,0.01,0.03,0.06,0.1,
0.3,0.6,1],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,"sklearn.linear_model.LassoCV(alphas=[alpha*.6,alpha*.65,alpha*.7,alpha*.75,alpha*.8,
alpha*.85,alpha*.9,alpha*.95,alpha,alpha*1.05,
alpha*1.1,alpha*1.15,alpha*1.25,alpha*1.3,alpha*1.35,
alpha*1.4],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elasticNet,"sklearn.linear_model.ElasticNetCV(l1_ratio=[0.1,0.3,0.5,0.6,0.7,0.8,0.85,0.9,0.95,1],
alphas=[0.0001,0.0003,0.0006,0.001,0.003,0.006,
0.01,0.03,0.06,0.1,0.3,0.6,1,3,6],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elasticNet,"sklearn.linear_model.ElasticNetCV(l1_ratio=[ratio*.85,ratio*.9,ratio*.95,ratio,ratio*1.05,ratio*1.1,ratio*1.15],
alphas=[0.0001,0.0003,0.0006,0.001,0.003,0.006,0.01,0.03,0.06,0.1,0.3,0.6,1,3,6],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elasticNet,"sklearn.linear_model.ElasticNetCV(l1_ratio=ratio,
alphas=[alpha*.6,alpha*.65,alpha*.7,alpha*.75,alpha*.8,alpha*.85,alpha*.9,
alpha*.95,alpha,alpha*1.05,alpha*1.1,alpha*1.15,alpha*1.25,alpha*1.3,
alpha*1.35,alpha*1.4],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorer,"sklearn.metrics.make_scorer(mean_squared_error,greater_is_better=False)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
c,"train_set[""SibSp""],cmap=matplotlib.pyplot.get_cmap(""jet"")",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,7)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
rects1,"matplotlib.pyplot.bar(index,e_mate,bar_width,color='red',label='Mate')",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
rects2,"matplotlib.pyplot.bar(index+bar_width,e_crom,bar_width,color='blue',label='Cromada')",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,((a1,a2),(a3,a4),(a5,a6),(a7,a8))","matplotlib.pyplot.subplots(4,2)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
index,numpy.arange(8),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
e_mate,numpy.array(suma_error_mate),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
e_crom,numpy.array(suma_error_cromada),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
referencia_data,numpy.loadtxt(ref),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
files,os.listdir('.'),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
onehot_labels,"numpy.array([[0,1]ifielse[1,0]foriinlabels])",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
labels,numpy.zeros(total_files),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
"img_train,img_test,label_train,label_test","sklearn.model_selection.train_test_split(image_paths,onehot_labels,random_state=42,shuffle=True)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
r,requests.get('http://www.plszh.ch/plsFeed/rss'),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get('https://www.watson.ch'),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get(url),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(outtweets,columns=['Tweets','Date'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
new_df,pandas.DataFrame([]),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(a,columns=['actor_id','actor_name','gender','movie_id','actor_id','characters'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(data,columns=['date','tweet'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
a,numpy.asarray(row),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,"pandas.merge(click,unclick,how='outer',on=['assemble','assemble'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_df,"pandas.read_csv('..\data\oppo_train_valt_est_csv\oppo_round1_test_A_20180929.csv',encoding='UTF-8')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_df,"pandas.read_csv('..\data\oppo_train_valt_est_csv\oppo_round1_train_20180929.csv',encoding='UTF-8')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
vali_df,"pandas.read_csv('..\data\oppo_train_valt_est_csv\oppo_round1_vali_20180929.csv',encoding='UTF-8')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
locs,numpy.where(train_df['prefix']=='汽车\t'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
files,os.listdir(data_dir),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
array,"pandas.read_hdf(os.path.join(data_dir,files[0])",CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
df_centers,"pandas.DataFrame(data,columns=demos_reduced.columns)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_hdf(path,key='panel')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_demos,"pandas.read_hdf(path,key='demos')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.KMeans(n_clusters=6,n_jobs=-1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
store,pandas.HDFStore('/Users/ryanriopelle/Documents/DSE/DSE220/yogurt.h5'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
img_pil_np,numpy.array(img_pil),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
mape,numpy.mean(np.abs(pred-actual),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
me,numpy.mean(pred-actual),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
mae,numpy.mean(np.abs(pred-actual),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
mpe,numpy.mean((pred-actual),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
pred_oil_pirce,pandas.concat([pd.DataFrame(newp),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
act_pred,pandas.concat([pd.DataFrame(forecast_df.sarima_oilprice.values),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('dataset/iron_oilmonthly.csv',parse_dates=['date'])",CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
forecast_df,pandas.read_csv('dataset/oil_forecast_data.csv'),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
x,numpy.array(column),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfTrain,pandas.DataFrame(dfTrain),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfTrain,"pandas.read_csv(""E:\Downlload\BlackFridayTrain.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(20,9)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.30,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_sel_model,"sklearn.feature_selection.SelectFromModel(Lasso(alpha=0.005,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,max_depth=7,min_samples_split=4,min_samples_leaf=2,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
candidates,numpy.flatnonzero(results['rank_test_score']==i),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_score_mean,"numpy.mean(training_score,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
val_score_mean,"numpy.mean(val_score,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_score_std,"numpy.std(training_score,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
val_score_std,"numpy.std(val_score,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
n_jobs,"None,train_sizes=numpy.linspace(.1,1.0,5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
digits,sklearn.datasets.load_digits(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(digits.data,digits.target,stratify=digits.target,random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"training_score,val_score","sklearn.model_selection.validation_curve(MLPClassifier(max_iter=5000,activation='tanh',random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.ShuffleSplit(n_splits=100,test_size=0.2,random_state=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(mlp,param_grid=param_grid,cv=5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp,sklearn.neural_network.MLPClassifier(random_state=0),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp_final,"sklearn.neural_network.MLPClassifier(max_iter=1000,activation='tanh',random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(max_iter=5000,random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
a,numpy.array(oneword_per),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
last,"numpy.concatenate((last,current)",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
current,"numpy.multiply(oneword_per[i],twoword_per[i])",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
last,"numpy.multiply(values1,values1)",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
last,"numpy.multiply(values1,values1)",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
clf,"sklearn.svm.SVC(kernel=""rbf"")",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
chromosome_state_x,random.choice(chromosome_states),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
pos,"random.choice(range(1,CHROMOSOME_SIZE-1)",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
pos,"random.choice(range(8,CHROMOSOME_SIZE-1)",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
chromosome_state,random.choice(chromosome_states),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
pos,random.choice(range(len(chromosome_state),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
B,"scipy.linalg.solve(A,C)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"freq,power","scipy.signal.periodogram(resp,1.0/(t[1]-t[0])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"freq2,power2","scipy.signal.periodogram(B,1.0/(t[1]-t[0])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,"pandas.read_csv(""out.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
demo_df,pandas.read_csv('Demographics_Data'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
engagement_by_account,collections.defaultdict(list),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
grouped_data,collections.defaultdict(list),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
"fig1,ax1",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
dataframe,"pandas.DataFrame(features,columns=[
""BCG"",
""HB<7HARI"",
""DPT-HB-HiB(1)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
csv_data,"pandas.read_csv(
'imunisasi.csv',usecols=[1,2,3,4,5,6,7],
names=[
""Provinsi"",
""BCG"",
""HB<7HARI"",
""DPT-HB-HiB(1)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
province_data,"pandas.read_csv(
'imunisasi.csv',usecols=[0],
names=[
""Provinsi"",
],header=0
)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"features,_","sklearn.datasets.make_blobs(n_samples=50,
n_features=2,
centers=3,
random_state=1)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
clusterer,"sklearn.cluster.KMeans(4,random_state=0)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
time_df,"pandas.DataFrame(time_data,columns=column_labels)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
ts,"pandas.Timestamp(row.ts,unit='ms')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.read_json(filepath,lines=True)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.read_json(filepath,lines=True)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.read_json(filepath,lines=True)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data_y1,"pandas.read_csv('C:/Users/Vijay/Desktop/Sem2/bigdataproject/DataAnalysis/crime_by_offese/crime_by_ofns_year1.csv',header=None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_y2,"pandas.read_csv('C:/Users/Vijay/Desktop/Sem2/bigdataproject/DataAnalysis/crime_by_offese/crime_by_ofns_year2.csv',header=None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_y3,"pandas.read_csv('C:/Users/Vijay/Desktop/Sem2/bigdataproject/DataAnalysis/crime_by_offese/crime_by_ofns_year3.csv',header=None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_y4,"pandas.read_csv('C:/Users/Vijay/Desktop/Sem2/bigdataproject/DataAnalysis/crime_by_offese/crime_by_ofns_year4.csv',header=None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_y5,"pandas.read_csv('C:/Users/Vijay/Desktop/Sem2/bigdataproject/DataAnalysis/crime_by_offese/crime_by_ofns_year5.csv',header=None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
oversample,"pandas.concat([X2_train,y2_train],axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X2_train,pandas.concat(lst),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('BinDF2',header=0,index_col=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=10,random_state=7)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=10,random_state=123)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(clf,X1_train,y1_train,cv=kfold,scoring=scoring)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(clf1,X2_train,y2_train,cv=kfold,scoring=scoring)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X1_train,X1_test,y1_train,y1_test","sklearn.model_selection.train_test_split(predictors_y1,y1,test_size=0.2,random_state=123)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X2_train,X2_test,y2_train,y2_test","sklearn.model_selection.train_test_split(predictors_y2,y2,test_size=0.2,random_state=123)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
confusion_matrix_y1,"sklearn.metrics.confusion_matrix(y1_test,y1_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
confusion_matrix_y2,"sklearn.metrics.confusion_matrix(y2_test,y2_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_roc_auc,"sklearn.metrics.roc_auc_score(y1_test,y1_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf1_roc_auc,"sklearn.metrics.roc_auc_score(y2_test,y2_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf1,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_ax,numpy.array([item[0]foritemincounts]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
freqs,numpy.array([item[1]foritemincounts]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
words,numpy.array(vectorizer.get_feature_names(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,"numpy.zeros(critics.shape[0],dtype=np.bool)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ind,numpy.argsort(probs),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bad_rotten,numpy.argsort(prob[y==0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bad_fresh,numpy.argsort(prob[y==1]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sorted_doc_freqs,numpy.sort(word_doc_freq['DocFreq']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.eye(xtest.shape[1]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(facecolor='white',figsize=(20,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel('NumberofDocuments'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylabel('CDFofWordFreq.'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xvar,"pandas.DataFrame(xvar,columns=vectorizer.get_feature_names()",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
critics,pandas.read_csv('./critics.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,y_train,X_test,y_test","sklearn.model_selection.train_test_split(X,y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(X,y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"_,itest",sklearn.model_selection.train_test_split(range(critics.shape[0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.naive_bayes.MultinomialNB(alpha=alpha),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(alpha=best_alpha),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
counts,collections.Counter(sorted_doc_freqs),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.total_rewards,"numpy.zeros(num_actions,dtype=np.longdouble)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
self.total_counts,"numpy.zeros(num_actions,dtype=np.longdouble)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_action,numpy.argmax(current_averages),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_action,numpy.argmax(current_averages),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_action,numpy.argmax(current_averages),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_averages,"numpy.divide(self.total_rewards,self.total_counts,where=self.total_counts>0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_averages,"numpy.divide(self.total_rewards,self.total_counts,where=self.total_counts>0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_averages,numpy.divide(self.total_rewards+np.sqrt(np.log(self.round),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
figTSNE,"matplotlib.pyplot.figure(figsize=(32,24)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
ax1,"matplotlib.pyplot.subplot(G[1:numclusters_plot,0:numclusters_plot])",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(G[0,ind])",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
Z_embedding_tree,"scipy.spatial.cKDTree(Z_tsne,compact_nodes=True)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
greyc_U,"numpy.array([0.5,0.5,0.5,0.5])",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
YnxG_allNME,"numpy.asarray([nxGdatafeatures['lesion_id'].values,
nxGdatafeatures['roi_id'].values,
nxGdatafeatures['classNME'].values,
nxGdatafeatures['nme_dist'].values,
nxGdatafeatures['nme_int'].values])",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
YnxG_allNME,"numpy.asarray([nxGdatafeatures['roi_id'].values,
nxGdatafeatures['classNME'].values,
nxGdatafeatures['nme_dist'].values,
nxGdatafeatures['nme_int'].values])",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
y_dec,numpy.asarray(y_dec),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
pbestacci,"numpy.zeros((zbestacci.shape[0],dec_model['num_centers'])",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
combX_allNME,"numpy.concatenate((nxGdiscfeatures,normdynamic.as_matrix()",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
dataZspace_wmu,"numpy.concatenate((zbestacci,pbestacci)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
Zspace_mu,numpy.concatenate((dec_args['dec_mubestacci'].asnumpy(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
dataZspace_wmu,"numpy.concatenate((dataZspace_wmu,Zspace_mu)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
allNMEs_dynamic,"pandas.read_csv(os.path.join(NME_nxgraphs,'dyn_roi_records_allNMEs_descStats.csv')",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
allNMEs_morphology,"pandas.read_csv(os.path.join(NME_nxgraphs,'morpho_roi_records_allNMEs_descStats.csv')",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
allNMEs_texture,"pandas.read_csv(os.path.join(NME_nxgraphs,'text_roi_records_allNMEs_descStats.csv')",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
allNMEs_stage1,"pandas.read_csv(os.path.join(NME_nxgraphs,'stage1_roi_records_allNMEs_descStats.csv')",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=2,perplexity=15,learning_rate=125,
init='pca',random_state=0,verbose=2,method='exact')",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
df['SPARQLendpoint'],pandas.Series(list_se),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('LODAtlas_geourls_wSparqlEndpoint-copia.csv',encoding='latin-1',sep='@')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
request_SE,"requests.get(url,headers=headers,data=payload)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,"requests.request(""GET"",url,headers=headers,data=payload)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df3,pandas.read_csv('df3'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
f,matplotlib.pyplot.figure(),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_30,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_30,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_30,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
XX,numpy.array([X.ravel(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
XX,numpy.array([X.ravel(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mu_true,"numpy.asanyarray(
[[0.2,0.5],
[1.2,0.5],
[2.0,0.5]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sigma_true,"numpy.asanyarray(
[[[0.1,0.085],[0.085,0.1]],
[[0.1,-0.085],[-0.085,0.1]],
[[0.1,0.085],[0.085,0.1]]
])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sigma,"numpy.asanyarray(
[[[0.1,0],[0,0.1]],
[[0.1,0],[0,0.1]],
[[0.1,0],[0,0.1]]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp,numpy.asanyarray(data[i]-mu[k]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mu_true,"numpy.asanyarray(
[[0.2,0.5],
[1.2,0.5],
[2.0,0.5]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sigma_true,"numpy.asanyarray(
[[[0.1,0.085],[0.085,0.1]],
[[0.1,-0.085],[-0.085,0.1]],
[[0.1,0.085],[0.085,0.1]]
])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood,numpy.zeros((np.sum(n),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pi,numpy.zeros(K),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp_mu,"numpy.zeros((K,D)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp_sigma,"numpy.zeros((K,D,D)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp_sigma[k],"numpy.zeros((D,D)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Z,"numpy.sum(np.asanyarray(calc_prob_gmm(XX,mu,sigma,pi,K)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
N,numpy.sum(n),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
prev_sum_log_likelihood,numpy.sum(np.log(prev_likelihood),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sum_log_likelihood,numpy.sum(np.log(likelihood),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Z,"numpy.sum(np.asanyarray(calc_prob_gmm(XX,mu_true,sigma_true,np.array(n)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(np.linspace(min_x,max_x)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(np.linspace(min_x,max_x)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
CS,"matplotlib.pyplot.contour(X,Y,Z,alpha=0.2,zorder=-100)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
CS,"matplotlib.pyplot.contour(X,Y,Z,alpha=1,zorder=-100,linewidths=0.7,levels=levels)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
count,collections.Counter(),CLUSTER_1,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
regex,"re.compile('[^a-zA-Z,]')",CLUSTER_1,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
cv,"sklearn.model_selection.KFold(10,shuffle=True)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
cv,sklearn.model_selection.KFold(10),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
model,sklearn.linear_model.LinearRegression(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
model,sklearn.linear_model.LinearRegression(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
scores[i],"sklearn.metrics.r2_score(y_test,y_pred)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
dfts,"pandas.DataFrame(data,columns=['frame','timestamp','lat','lon'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dfgps,"pandas.read_csv(gpslogpath,parse_dates=['time'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
timestamp,pandas.to_datetime(timestamp),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
createDate,"datetime.datetime.strptime(createDate,'%Y:%m:%d%H:%M:%S')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,numpy.arange(kclusters),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(A,columns=['Postcode'])",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_onehot,"pandas.get_dummies(toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
geo,pandas.read_csv('./Geospatial_Coordinates.csv'),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
b1,"numpy.zeros((n_h,1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
b2,"numpy.zeros((n_y,1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Z1,"numpy.dot(W1,X)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Z2,"numpy.dot(W2,A1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
dZ1,"numpy.dot(W2.T,dZ2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
shape_X,numpy.shape(X),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
shape_Y,numpy.shape(Y),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
n_x,numpy.shape(X),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
n_y,numpy.shape(Y),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
cost,numpy.squeeze(cost),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
logprobs,numpy.multiply(np.log(A2),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
A1,numpy.tanh(Z1),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegressionCV(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
filepath,os.getcwd(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
X,"numpy.zeros((n,224,224,3)",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_5,CLUSTER_9
y,"numpy.zeros((n,1)",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_5,CLUSTER_9
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_5,CLUSTER_9
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
table,pandas.read_html(f'https://www.numbeo.com/quality-of-life/in/{city}'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
table,pandas.read_html(f'https://www.numbeo.com/quality-of-life/in/{city}'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
table,pandas.read_html(f'https://www.numbeo.com/quality-of-life/in/{city}'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
bern,pandas.read_html(f'https://www.numbeo.com/quality-of-life/in/Bern'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
correct_out,"numpy.array([[1.49834967,1.70660132,1.91485297],
[3.25553199,3.5141327,3.77273342]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
correct_out,"numpy.array([[0.,0.,0.,0.,],
[0.,0.,0.04545455,0.13636364,],
[0.22727273,0.31818182,0.40909091,0.5,]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
correct_scores,"numpy.asarray(
[[11.53165108,12.2917344,13.05181771,13.81190102,14.57198434,15.33206765,16.09215096],
[12.05769098,12.74614105,13.43459113,14.1230412,14.81149128,15.49994135,16.18839143],
[12.58373087,13.20054771,13.81736455,14.43418138,15.05099822,15.66781506,16.2846319]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y,"numpy.asarray([0,5,1])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[0.1406,0.20738947,0.27417895,0.34096842,0.40775789],
[0.47454737,0.54133684,0.60812632,0.67491579,0.74170526],
[0.80849474,0.87528421,0.94207368,1.00886316,1.07565263],
[1.14244211,1.20923158,1.27602105,1.34281053,1.4096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_velocity,"numpy.asarray([
[0.5406,0.55475789,0.56891579,0.58307368,0.59723158],
[0.61138947,0.62554737,0.63970526,0.65386316,0.66802105],
[0.68217895,0.69633684,0.71049474,0.72465263,0.73881053],
[0.75296842,0.76712632,0.78128421,0.79544211,0.8096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.39223849,-0.34037513,-0.28849239,-0.23659121,-0.18467247],
[-0.132737,-0.08078555,-0.02881884,0.02316247,0.07515774],
[0.12716641,0.17918792,0.23122175,0.28326742,0.33532447],
[0.38739248,0.43947102,0.49155973,0.54365823,0.59576619]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_cache,"numpy.asarray([
[0.5976,0.6126277,0.6277108,0.64284931,0.65804321],
[0.67329252,0.68859723,0.70395734,0.71937285,0.73484377],
[0.75037008,0.7659518,0.78158892,0.79728144,0.81302936],
[0.82883269,0.84469141,0.86060554,0.87657507,0.8926]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.40094747,-0.34836187,-0.29577703,-0.24319299,-0.19060977],
[-0.1380274,-0.08544591,-0.03286534,0.01971428,0.0722929],
[0.1248705,0.17744702,0.23002243,0.28259667,0.33516969],
[0.38774145,0.44031188,0.49288093,0.54544852,0.59801459]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_v,"numpy.asarray([
[0.69966,0.68908382,0.67851319,0.66794809,0.65738853,],
[0.64683452,0.63628604,0.6257431,0.61520571,0.60467385,],
[0.59414753,0.58362676,0.57311152,0.56260183,0.55209767,],
[0.54159906,0.53110598,0.52061845,0.51013645,0.49966,]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_m,"numpy.asarray([
[0.48,0.49947368,0.51894737,0.53842105,0.55789474],
[0.57736842,0.59684211,0.61631579,0.63578947,0.65526316],
[0.67473684,0.69421053,0.71368421,0.73315789,0.75263158],
[0.77210526,0.79157895,0.81105263,0.83052632,0.85]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_test_pred,numpy.argmax(best_model.loss(data['X_test']),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_val_pred,numpy.argmax(best_model.loss(data['X_val']),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-0.1,0.5,num=input_size)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.2,0.3,num=weight_size)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
b,"numpy.linspace(-0.3,0.1,num=output_dim)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-0.5,0.5,num=12)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['W1'],"numpy.linspace(-0.7,0.3,num=D*H)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['b1'],"numpy.linspace(-0.1,0.9,num=H)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['W2'],"numpy.linspace(-0.3,0.4,num=H*C)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['b2'],"numpy.linspace(-0.9,0.1,num=C)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X,"numpy.linspace(-5.5,4.5,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
cache,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
m,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.7,0.5,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
r,"random.randint(0,mnist.test.num_examples-1)",CLUSTER_2,CLUSTER_11,CLUSTER_1,CLUSTER_0,CLUSTER_1
df,pandas.read_excel('http://cdn.sundog-soft.com/Udemy/DataScience/cars.xls'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
bins,"numpy.arange(0,50000,10000)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
installs,"pandas.read_csv(r'C:\Users\Matias\Documents\UBA\Datos\installs.csv.gzip',compression='gzip')",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
installs['created'],pandas.to_datetime(installs['created']),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
news,requests.get(url),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame({'news':text_list}),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,df_temp])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.read_table(csv_path,sep=',')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
csv_path,"os.getenv(""HOME"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
csv_path,"os.getenv(""HOME"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(text_data,df['code'],random_state=0)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ds,pandas.read_csv('Ads_CTR_Optimisation.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
random_beta,"random.betavariate(no_of_rewards_1[i]+1,no_of_rewards_0[i]+1)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
raw_data,numpy.fromstring(f.read(n*28*28),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
labels,numpy.fromstring(f.read(n),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
f,"matplotlib.pyplot.figure(figsize=(16,9)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-5,5,.1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.arange(0,50,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.arange(0,40,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.arange(1,100,.1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x1,"numpy.arange(.0001,4,.0001)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x2,"numpy.arange(-5,4,.1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
vlog,numpy.vectorize(math.log),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
vlog,numpy.vectorize(math.log),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
ds,"numpy.loadtxt(""pima-indians-diabetes.data"",delimiter="","")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A_np,"numpy.array([[0,1,2,3,4],[5,6,7,8,9]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
movie,"pandas.read_csv('./data/movie.csv',index_col='movie_title')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
movie,pandas.read_csv('data/movie.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
movie,pandas.read_csv('data/movie.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
movie,pandas.read_csv('data/movie.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dataset,"sklearn.datasets.fetch_20newsgroups(subset='all',categories=None,
shuffle=True,random_state=42)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
true_k,numpy.unique(labels),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
t0,time.time(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
km,"sklearn.cluster.KMeans(n_clusters=true_k,init='k-means++',max_iter=100,n_init=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
bt_df,pandas.DataFrame(bt_rs['beta_cntrd']),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
bt_sm,pandas.DataFrame(bt_rs['beta_sum_dat']),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pcoeff,pandas.DataFrame(pscdata[1]['pcoeff']),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pscdata,json.load(f_obj),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pscdata,json.load(f_obj),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_blobs(n_samples=150,
n_features=2,
centers=3,
cluster_std=0.5,
shuffle=True,
random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(8,3)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.KMeans(n_clusters=3,
init='random',
n_init=10,
max_iter=300,
tol=1e-04,
random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.KMeans(n_clusters=i,
init='k-means++',
n_init=10,
max_iter=300,
random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.KMeans(n_clusters=3,init='k-means++',n_init=10,max_iter=300,tol=1e-04,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.KMeans(n_clusters=2,
init='random',
n_init=10,
max_iter=300,
tol=1e-04,
random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.KMeans(n_clusters=2,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
silhouette_avg,numpy.mean(silhouette_vals),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
silhouette_avg,numpy.mean(silhouette_vals),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
cluster_labels,numpy.unique(y_km),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
cluster_labels,numpy.unique(y_km),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
silhouette_vals,"sklearn.metrics.silhouette_samples(X,y_km,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
silhouette_vals,"sklearn.metrics.silhouette_samples(X,y_km,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(X,columns=variables,index=labels)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
row_dist,"pandas.DataFrame(squareform(pdist(df,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
ac,"sklearn.cluster.AgglomerativeClustering(n_clusters=2,affinity='euclidean',linkage='complete')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
ac,"sklearn.cluster.AgglomerativeClustering(n_clusters=2,affinity='euclidean',linkage='complete')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_moons(n_samples=200,noise=0.05,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=0.2,min_samples=5,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
purchasing_analysis_total_df,"pandas.DataFrame({""NumberofUniqueItems"":[num_of_unique_items],
""AveragePrice"":[average_purchase_price],
""NumberofPurchases"":[total_num_of_purchases],
""TotalRevenue"":[total_revenue]})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
gender_demographics_df,"pandas.DataFrame({""Gender"":[""Male"",""Female"",""Other/Non-Disclosed""],
""TotalCount"":[count_of_males,count_of_females,count_of_other],
""PercentOfPlayers"":[percent_of_males,percent_of_females,percent_of_other]})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
purchasing_analisis_df_by_gender_summary_df,"pandas.DataFrame({""PurchaseCount"":purchase_count,""AveragePurchasePrice"":average_purchase_value,
""TotalPurchaseValue"":total_purchase_value,""AverageTotalPurchaseperPerson"":average_total_purchase_per_person})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
age_demographics_summary_df,"pandas.DataFrame({""TotalCount"":total_age_count,""PercentageofPlavers"":age_percentage})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
top_spenders_summary_df,"pandas.DataFrame({""TotalPurchaseValue"":total_purchase_by_spender,
""PurchaseCount"":purchase_count_by_spender,
""AveragePurchasePrice"":average_purchase_by_spender,
})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
grouped_by_popular_items_summary_df,"pandas.DataFrame({""PurchaseCount"":purchase_count_by_popular_item,
""ItemPrice"":item_price_by_popular_item,
""TotalPurchaseValue"":total_purchase_value_by_popular_item,
})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"pymoli_df[""age_group""]","pandas.cut(pymoli_df[""Age""],age_bins,labels=group_names)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
pymoli_df,pandas.read_csv(csv_path),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
nfl_frame['Stadium'],numpy.arange(5),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
city_frame,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
series1,"pandas.Series([3,6,9,12])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ww2_casualities,"pandas.Series([8700000,4300000,3000000,2100000,400000],
index=['USSR','Germany','China','Japan','USA'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ww2_series,pandas.Series(ww2_dict),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
series2,"pandas.Series(ww2_dict,index=countries)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
stadiums,"pandas.Series([""Levi'sStadium"",""AT&TStadium""],index=[4,0])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
nfl_frame,pandas.read_clipboard(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
schedF,pandas.DataFrame(newSchedules),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
weekDf,pandas.DataFrame(newWeeks),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ratingDf,pandas.DataFrame(newRatings),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
TNR,pandas.DataFrame(TNR),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ratingDf,pandas.DataFrame(newRatings),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
TNR_2016,pandas.DataFrame(TNR_2016),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_2016,pandas.concat(list_file),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_2016,pandas.concat(list_all_week),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_2017,pandas.read_csv(path),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(name),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_2016_week8,pandas.read_csv(path),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newSchedules,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newWeeks,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean,"numpy.mean(df_each_week[""SchedulePacing""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean,"numpy.mean(df_each_week[""SchedulePacing""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newSchedules,"numpy.append(newSchedules,int(schedulesKey[string])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newSchedules,"numpy.append(newSchedules,None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newWeeks,"numpy.append(newWeeks,int(string[-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""Promoter"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""Passive"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""Detractor"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""NaN"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
npsScores,"numpy.append(npsScores,nps*100)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pacing_ave,"numpy.append(pacing_ave,mean)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""Promoter"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""Passive"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""Detractor"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""NaN"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
npsScores,"numpy.append(npsScores,nps*100)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pacing_ave,"numpy.append(pacing_ave,mean)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fullData,pandas.DataFrame(),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
percentile_df,"pandas.DataFrame(
{'5thPercentile':percentiles[0],
'25thPercentile':percentiles[1],
'Median':percentiles[2],
'75thPercentile':percentiles[3],
'95thPercentile':percentiles[4],
'Mean':np.mean(prediction,axis=0)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
fullData,"pandas.concat([fullData,pd.read_csv('PMU{0}_event{1}.csv'.format(i,event)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y_t,"numpy.zeros((num_points,horizon+order)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"y_t[:,i]","numpy.sum(y_t[:,i-order:i]*rho,axis=1)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
percentiles,"numpy.percentile(prediction,[2.5,25,50,75,97.5],axis=0)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"y_t[:,0:order]","numpy.tile(y_initial,(num_points,1)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(15,9)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(15,9)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,pandas.DataFrame([labels]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe,pandas.read_csv('edlich-kmeans-A0.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_data,"numpy.linspace(0.0,10.0,1000000)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
my_data,"pandas.concat([pd.DataFrame(data=x_data,columns=['XData'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_eval,y_train,y_eval","sklearn.model_selection.train_test_split(x_data,y_true,test_size=0.3,random_state=101)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nfl_frame['Stadium'],numpy.arange(5),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
nfl_frame,pandas.read_clipboard(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
stadiums,"pandas.Series([""Levi'sStadium"",""ATTStadium""],index=[4,0])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
city_frame,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
lr_model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
self.z,"numpy.dot(X,self.W1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
self.z3,"numpy.dot(self.z2,self.W2)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
Boston,pandas.read_csv('C:/Users/Sk@softech/Desktop/mlDataSet/Boston.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
table,pandas.read_html(url_facts),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
response,requests.get(url_facts),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
mars_weather,re.compile(r'sol'),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
target,"numpy.array([target],dtype=np.long)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
img,numpy.moveaxis((image_batch[j].numpy(),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
img,numpy.moveaxis((data[k].numpy(),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
images,"numpy.pad(images,pad,""constant"",constant_values=0)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
images,"numpy.pad(images,pad,""constant"",constant_values=0)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
start_time,time.time(),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
end_time,time.time(),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
kernel1,"numpy.ones((3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel1,"numpy.ones((3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel1,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((7,7)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel1,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((7,7)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel1,"numpy.ones((3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel1,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((9,9)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel1,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((11,11)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
response,"requests.request(""GET"",url,headers=headers,params=querystring)",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,"requests.request(""POST"",url,data=payload,headers=headers)",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,"requests.request(""GET"",url,params=payload,headers=headers)",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
stuff,json.load(open('resale.json'),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,json.load(open(filepath),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pd_all,pandas.concat(all_data.values(),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pd_all,"pandas.read_csv('hdb_resale_may18.csv',index_col=0)",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.read_html(table_str),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,pandas.read_json(data),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pd_all.month,pandas.to_datetime(pd_all.month),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pd_gl['year'],pandas.to_datetime(pd_gl.month),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pd_all['resale_price'],"pandas.to_numeric(pd_all['resale_price'].str.replace('[^\d.]','')",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pd_gl['remaining_lease'],"pandas.to_numeric(pd_gl['remaining_lease'].str.replace('[^\d.]','')",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"code,name","re.split('\s+',n.get('value')",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
iqr,"numpy.subtract(*np.percentile(df_gl_2018.resale_price,[75,25])",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
nyc_schools,"pandas.merge(quality,teacher,on='DBN')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
nyc_schools_ela,"pandas.merge(nyc_schools.drop('StudentAchievementRating',
axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
nyc_schools_math,"pandas.merge(nyc_schools.drop('StudentAchievementRating',
axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
quality,"pandas.read_excel('Data/2018_school_quality.xlsx',header=1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
teacher,pandas.read_excel('Data/teacher.xlsx'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ela,"pandas.read_excel(""Data/NYCDOE_2018/school-ela-results-2018.xlsx"",
header=None)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
math,"pandas.read_excel(""Data/NYCDOE_2018/school-math-results-2018.xlsx"",
header=None)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,15)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,25)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,25)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
matrix1,"numpy.array([[1,1],[2,2],[3,3]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_10
matrix2,"numpy.array([[0],[0],[0]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_10
vector1D,"numpy.array([1,1])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_10
vector2D,"numpy.array([[1],[1]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_10
a_prev,"numpy.zeros((n_a,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_10
V,numpy.zeros(env.nS),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
q,numpy.zeros(env.nA),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Q,"numpy.zeros([env.nS,env.nA])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
policy,"numpy.zeros([env.nS,env.nA])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
V,numpy.zeros(env.nS),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
policy,"numpy.zeros([env.nS,env.nA])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
V,numpy.zeros(env.nS),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
best_a,numpy.argwhere(q==np.max(q),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
random_policy,"numpy.ones([env.nS,env.nA])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
policy,"numpy.ones([env.nS,env.nA])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
policy[s],numpy.sum([np.eye(env.nA),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
obj,numpy.array(correlation_map),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""total.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(5,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(6,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.PairGrid(gp,hue=""variety"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.jointplot(x=""max_price"",y=""modal_price"",data=gp,kind=""reg"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.jointplot(x=""min_price"",y=""max_price"",data=gp,kind=""reg"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""data/ner_dataset.csv"",encoding=""latin1"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pred,sklearn.model_selection.cross_val_predict(estimator=MemoryTagger(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pred,sklearn.model_selection.cross_val_predict(RandomForestClassifier(n_estimators=20),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pred,"sklearn.model_selection.cross_val_predict(Pipeline([(""feature_map"",FeatureTransformer()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
report,"sklearn.metrics.classification_report(y_pred=pred,y_true=tags)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
report,"sklearn.metrics.classification_report(y_pred=pred,y_true=tags)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
report,"sklearn.metrics.classification_report(y_pred=pred,y_true=tags)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
self.tag_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
self.pos_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ROOT_DIR,os.getcwd(),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
current_path,os.getcwd(),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
image,"numpy.zeros((batch_size,IMAGE_WIDTH,IMAGE_HEIGHT,NUM_CHANEELS)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
label,"numpy.zeros((batch_size,TOTAL_TAGS)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
targets,numpy.zeros(17),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
targets,numpy.zeros(17),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
training_data,pandas.DataFrame(),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
validation_data,pandas.DataFrame(),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
validation_data,"pandas.concat(validation_frame,axis=0,join='outer',ignore_index=False)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
training_data,"pandas.concat(training_frame,axis=0,join='outer',ignore_index=False)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
label_pd,pandas.read_csv(TRAIN_LABELS_CSV_PATH),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
train,pandas.read_csv(TRAINING_DATA_CSV),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
train,pandas.read_csv(TRAINING_DATA_CSV),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
validation,pandas.read_csv(VALIDATION_DATA_CSV),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
ventas_falsas,pandas.DataFrame(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler2,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
idx,"numpy.arange(0,self.get_size()",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
image,"numpy.array(Image.open('{0}/{1}'.format(image_folder,image_name)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
images,numpy.array(images),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
mask,"numpy.array([bernoulli.rvs(1-dropout,size=64*64)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
mask,"numpy.array([bernoulli.rvs(1-opt,size=64*64)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
accepted_x,"numpy.array([xvfor(c,xv)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
q_U,"numpy.array([xvifcelseyvfor(c,xv,yv)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
pos,"numpy.concatenate((q,np.array([proposed_U])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
neg,"numpy.concatenate((current_q,np.array([current_U])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
mask,"numpy.ones([datasize,64,64])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
mask,"numpy.ones([datasize,64,64])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
mask,"numpy.repeat(mask,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
current_K,numpy.sum(np.square(current_p),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
proposed_K,numpy.sum(np.square(p),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
x,"numpy.expand_dims(x,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
qx,"multivariate_normal.pdf(x,mean=[0]*self.dim,cov=numpy.eye(self.dim)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
qx,"multivariate_normal.pdf(x,mean=[0]*self.dim,cov=numpy.eye(self.dim)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
image,"numpy.pad(image,((2,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
self.data,numpy.load(npy),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(col*2.5,row*2.5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
self.history,collections.defaultdict(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
"popt,pcov","scipy.optimize.curve_fit(gaussian,my_bins[:-1][45:123],IvsFEE_average[45:123],p0=[914,5,1])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
"popt,pcov","scipy.optimize.curve_fit(gaussian_gmd,my_bins[:-1][45:123],I0vsFEE_average[45:123],p0=[914,5,.0014])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
"popt,pcov","scipy.optimize.curve_fit(gaussian,energy[fee_mask],y[fee_mask],p0=[914,5,1])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
"popt,pcov","scipy.optimize.curve_fit(gaussian_gmd,energy[fee_mask],x[fee_mask],p0=[914,5,.0014])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
"popt,pcov","scipy.optimize.curve_fit(gaussian,energy[fee_mask],y[fee_mask],p0=[914,5,1])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
"popt,pcov","scipy.optimize.curve_fit(gaussian_gmd,energy[fee_mask],x[fee_mask],p0=[914,5,.0014])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_weighted_statistic,"scipy.stats.binned_statistic_dd(x,y*weights,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_weights,"scipy.stats.binned_statistic_dd(x,1.0*weights,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
IvsFEE_average,"scipy.stats.binned_statistic_dd(energy,y,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
I0vsFEE_average,"scipy.stats.binned_statistic_dd(energy,x,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
my_hist,"scipy.stats.binned_statistic_dd(x,y,bins=[arange(0,0.0014,0.0001)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
my_hist_linear,"scipy.stats.binned_statistic_dd(x,y_corrected,bins=[x_linear],statistic=median)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
my_hist,"scipy.stats.binned_statistic_dd(x,y,bins=[arange(0,0.0014,0.0001)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
my_signal,"scipy.stats.binned_statistic_dd(z,y_corrected,bins=[my_bins],statistic=median)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
pump_probe_trace,"scipy.stats.binned_statistic_dd(z,nan_to_num(y_corrected/x)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
ransac,sklearn.linear_model.RANSACRegressor(),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
ransac,sklearn.linear_model.RANSACRegressor(max_trials=1000),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
estimator,sklearn.linear_model.TheilSenRegressor(),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
f,"scipy.interpolate.interp1d(edf_j[0],edf_j[1],kind='nearest',bounds_error=False,fill_value=(0,1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
f,"scipy.interpolate.interp1d(edf_j[0],edf_j[1],kind='nearest',bounds_error=False,fill_value=(0,1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
ica,"sklearn.decomposition.FastICA(n_components=n_components,max_iter=100000)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
ica,sklearn.decomposition.FastICA(n_components=5),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
pca,sklearn.decomposition.PCA(n_components=6),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
train_set_x_orig,"numpy.array(train_dataset[""train_set_x""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
train_set_y_orig,"numpy.array(train_dataset[""train_set_y""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
test_set_x_orig,"numpy.array(test_dataset[""test_set_x""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
test_set_y_orig,"numpy.array(test_dataset[""test_set_y""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
classes,"numpy.array(test_dataset[""list_classes""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
temp,"numpy.array([image_list,label_list])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
temp_image,numpy.array(imageio.imread(image_list[i]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
Train_label[i],numpy.array(label_list[i]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
temp_image,numpy.array(imageio.imread(image_list[i+68-len(image_list),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
Test_label[i+68-len(image_list)],numpy.array(label_list[i]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
T_X,numpy.array(Train_dataset['train_set_x'][:]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
T_y,numpy.array(Train_dataset['train_set_y'][:]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
train_set_x_orig,"numpy.array(train_dataset[""train_set_x""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
train_set_y_orig,"numpy.array(train_dataset[""train_set_y""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
a,"numpy.array([[1,2,3,4],[4,3,2,1]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
b,"numpy.array([[1,2,2,2],[3,4,2,1]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
p,"numpy.zeros((1,m)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
image_list,"numpy.hstack((Dog,NotDog)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
label_list,"numpy.hstack((label_Dog,label_NotDog)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
sessions_,numpy.array([result[0]forresultinparallel_results]),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
segments_,numpy.array([result[1]forresultinparallel_results]),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scores_bayes_evt,numpy.array([float(result[3]),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scores_bayes_shuffled_evt,numpy.array([result[4].squeeze(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scores_bayes_percentile_evt,numpy.array([float(result[5]),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
bdries,"numpy.cumsum(np.insert(bdries_,0,0)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
session,numpy.unique(sessions_[bdries[nn]:bdries[nn+1]]),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
segment,numpy.unique(segments_[bdries[nn]:bdries[nn+1]]),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,10,100)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,"numpy.array([10,20,30])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(randn(5,4)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'A':[1,2,np.nan],
'B':[5,np.nan,np.nan],
'C':[1,2,3]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df1,"pandas.DataFrame({'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']},
index=[0,1,2,3])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame({'A':['A4','A5','A6','A7'],
'B':['B4','B5','B6','B7'],
'C':['C4','C5','C6','C7'],
'D':['D4','D5','D6','D7']},
index=[4,5,6,7])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df3,"pandas.DataFrame({'A':['A8','A9','A10','A11'],
'B':['B8','B9','B10','B11'],
'C':['C8','C9','C10','C11'],
'D':['D8','D9','D10','D11']},
index=[8,9,10,11])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
left,"pandas.DataFrame({'key':['K0','K1','K2','K3'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
right,"pandas.DataFrame({'key':['K0','K1','K2','K3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
left,"pandas.DataFrame({'key1':['K0','K0','K1','K2'],
'key2':['K0','K1','K0','K1'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
right,"pandas.DataFrame({'key1':['K0','K1','K1','K2'],
'key2':['K0','K0','K0','K0'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
left,"pandas.DataFrame({'A':['A0','A1','A2'],
'B':['B0','B1','B2']},
index=['K0','K1','K2'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
right,"pandas.DataFrame({'C':['C0','C2','C3'],
'D':['D0','D2','D3']},
index=['K0','K2','K3'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ser1,"pandas.Series([1,2,3,4],index=['USA','Germany','USSR','Japan'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ser2,"pandas.Series([1,2,5,4],index=['USA','Germany','Italy','Japan'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('example'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_excel('Excel_Sample.xlsx',sheet_name='Sheet1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
us,"pandas.DataFrame(top10events.groupby(['kind','application_id'])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
us,"pandas.DataFrame(top10events.groupby(['kind','advertiser_id'])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
us,"pandas.DataFrame(top10apps.groupby(['application_id','advertiser_id'])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clicksAndEvents,"pandas.merge(clicks,events,on='ref_hash',how='inner')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
piv,"pandas.pivot_table(us,values='cant',columns='application_id',index='kind')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
piv,"pandas.pivot_table(us,values='cant',columns='advertiser_id',index='kind')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
piv,"pandas.pivot_table(us,values='cant',columns='advertiser_id',index='application_id')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
events,"pandas.read_csv('events.csv.gzip',compression='gzip',
dtype={
'device_countrycode':'category',
'device_city':'category',
'ref_type':'category',
'application_id':'uint16',
'device_os_version':'category',
'device_brand':'category',
'device_model':'category',
'session_user_agent':'category',
'trans_id':'category',
'user_agent':'category',
'carrier':'category',
'device_os':'category',
'device_os_version':'category',
'device_language':'category',
'connection_type':'category',
'wifi':'category'
})",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clicks,"pandas.read_csv('clicks.csv.gzip',compression='gzip')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"events.loc[:,'date']","pandas.to_datetime(events['date'],errors='coerce')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"clicks.loc[:,'created']","pandas.to_datetime(clicks['created'],errors='coerce')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
f,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
f,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
f,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fg,"seaborn.FacetGrid(data=top10apps,hue='application_id',height=15)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rul,pandas.DataFrame(train_df.groupby('id'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
norm_train_df,pandas.DataFrame(min_max_scaler.fit_transform(train_df[cols_normalize]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
norm_test_df,pandas.DataFrame(min_max_scaler.transform(test_df[cols_normalize]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rul,pandas.DataFrame(test_df.groupby('id'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results_df,"pandas.DataFrame([[scores_test[1]],],
columns=['MSE'],
index=['LSTM'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df,"pandas.read_csv('data/train_01.txt',sep="""",header=None)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df,"pandas.read_csv('data/test_01.txt',sep="""",header=None)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
truth_df,"pandas.read_csv('data/truth_01.txt',sep="""",header=None)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
seq_array_test_last,numpy.asarray(seq_array_test_last),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df['label1'],"numpy.where(train_df['RUL']<=w1,1,0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df['label1'],"numpy.where(test_df['RUL']<=w1,1,0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
seq_array,numpy.concatenate(list(seq_gen),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
label_array,numpy.concatenate(label_gen),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
digits,sklearn.datasets.load_digits(),CLUSTER_6,CLUSTER_7,CLUSTER_1,CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_6,CLUSTER_7,CLUSTER_1,CLUSTER_0,CLUSTER_8
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.3)",CLUSTER_6,CLUSTER_7,CLUSTER_1,CLUSTER_0,CLUSTER_8
a,numpy.ones(5),CLUSTER_6,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('adultcencus.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nbayes,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_df,"pandas.DataFrame({""PostalCode"":postalCodeList,
""Borough"":boroughList,
""Neighborhood"":neighborhoodList})",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df,pandas.DataFrame(columns=column_names),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,requests.get('https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M'),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q,"numpy.zeros([env.observation_space.n,env.action_space.n])",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
base,"numpy.zeros((1,n)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
action,"numpy.argmax(Q[s,:]+np.random.rand(1,env.action_space.n)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.array([[144,0,11,55],
[22,66,12,76],
[56,12,55,90]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c,"numpy.dot(a,b)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
C,"numpy.arange(0.01,50.0,0.5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
C,"numpy.arange(0.01,50.0,0.5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores1,numpy.array(scores1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores2,numpy.array(scores2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
means,numpy.zeros(numeric_data.shape[1]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nan_id,numpy.argwhere(np.isnan(X_num_float['A14'].values),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
correction,numpy.amax(to_sum[indices]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,"numpy.nonzero(~numeric_data.iloc[:,j].isnull()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train_zeros,"numpy.hstack((X_train_real_zeros,X_train_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test_zeros,"numpy.hstack((X_test_real_zeros,X_test_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train_mean,"numpy.hstack((X_train_real_mean,X_train_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test_mean,"numpy.hstack((X_test_real_mean,X_test_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train_zeros_scaled,"numpy.hstack((X_train_real_zeros_scaled,X_train_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test_zeros_scaled,"numpy.hstack((X_test_real_zeros_scaled,X_test_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test_mean_scaled,"numpy.hstack((X_test_real_mean_scaled,X_test_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
XX,"numpy.vstack((X_train_mean_scaled,X_test_mean_scaled)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr1,tpr1,_","sklearn.metrics.roc_curve(y_test,opt2_z.predict_proba(X_test_zeros)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr2,tpr2,_","sklearn.metrics.roc_curve(y_test,opt2_m.predict_proba(X_test_mean)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr3,tpr3,_","sklearn.metrics.roc_curve(y_test,opt2_zs.predict_proba(X_test_zeros_scaled)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr4,tpr4,_","sklearn.metrics.roc_curve(y_test,opt2_ms.predict_proba(X_test_mean_scaled)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr1,tpr1,_","sklearn.metrics.roc_curve(y_test,opt1_z.predict_proba(X_test_zeros)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr2,tpr2,_","sklearn.metrics.roc_curve(y_test,opt1_m.predict_proba(X_test_mean)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr3,tpr3,_","sklearn.metrics.roc_curve(y_test,opt1_zs.predict_proba(X_test_zeros_scaled)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr4,tpr4,_","sklearn.metrics.roc_curve(y_test,opt1_ms.predict_proba(X_test_mean_scaled)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_axis,numpy.arange(len(pyber_ride_df),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_axis,numpy.arange(len(pyber_ride_df),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pyber_ride_df,"pandas.read_csv(""Resources/PyBer_ride_data.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
im,"numpy.zeros(shape=(row,col)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
im1,"numpy.zeros(shape=(row,184)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
im2,"numpy.zeros(shape=(row,184)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
record,pandas.read_csv('draftkings-contest-entry-history.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
positive_counts,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
negative_counts,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
total_counts,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pos_neg_ratios,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
train_mu,"numpy.mean(x_train,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
train_std,"numpy.std(x_train,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
df_feat,"pandas.DataFrame(scaled_features,columns=df.columns[:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('KNN_Project_Data'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_features,df['TARGETCLASS'],
test_size=0.30)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=30),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sent_topics_df,pandas.DataFrame(),CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sent_topics_sorteddf_mallet,pandas.DataFrame(),CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
contents,pandas.Series(texts),CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_all,"pandas.concat([df_guar_h1,df_nyt_h1,df_bbc_h1,df_usat_h1])",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_all,"pandas.concat([df_guar_co,df_nyt_co,df_bbc_co,df_usat_co])",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sent_topics_df,"pandas.concat([sent_topics_df,contents],axis=1)",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sent_topics_sorteddf_mallet,"pandas.concat([sent_topics_sorteddf_mallet,
grp.sort_values(['Perc_Contribution'],ascending=[0])",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_dominant_topics,"pandas.concat([topic_num_keywords,topic_counts,topic_contribution],axis=1)",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_guar_h1,"pandas.read_csv(""guardian_h1n1_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_bbc_h1,"pandas.read_csv(""BBCNews_h1n1_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_nyt_h1,"pandas.read_csv(""nytimes_h1n1_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_guar_co,"pandas.read_csv(""guardian_covid_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_bbc_co,"pandas.read_csv(""BBCNews_covid_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_nyt_co,"pandas.read_csv(""nytimes_covid_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_usat_co,"pandas.read_csv(""usatoday_covid_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df2014,pandas.DataFrame(file),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
file,"pandas.read_csv(os.path.join("".."","".."",""Data"",""Raw"",""America_Health_Rankings"",""2014-Annual.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
ds,sklearn.datasets.load_diabetes(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,numpy.hstack((np.ones((len(ds.data),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X_skl,"numpy.hstack((ds.data,np.ones((len(ds.data)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
w,numpy.linalg.inv(X.T@X),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
reg,sklearn.linear_model.LinearRegression(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
ds,sklearn.datasets.load_iris(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.subplot(2,n,i+1)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.subplot(2,n,i+1+n)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
train,"pandas.read_csv(""data/bike/train.csv"",parse_dates=[""datetime""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""data/bike/test.csv"",parse_dates=[""datetime""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submit,"pandas.read_csv(""data/bike/sampleSubmission.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,((ax1,ax2,ax3),(ax4,ax5,ax6))","matplotlib.pyplot.subplots(nrows=2,ncols=3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,(ax1,ax2)","matplotlib.pyplot.subplots(nrows=1,ncols=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,ax3","matplotlib.pyplot.subplots(nrows=1,ncols=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,ax1","matplotlib.pyplot.subplots(nrows=1,ncols=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,ax2","matplotlib.pyplot.subplots(nrows=1,ncols=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(nrows=3,ncols=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predict,numpy.array(predict),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
actual,numpy.array(actual),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predictions,numpy.exp(predictions),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train,numpy.log(y_train+1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,numpy.sqrt(mean_difference),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
difference,numpy.square(difference),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmsle_scorer,sklearn.metrics.make_scorer(rmsle),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=n_estimators,
max_depth=max_depth,
max_features=max_features,
random_state=37)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=3000,
max_depth=83,
max_features=0.851358,
random_state=37)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.model_selection.cross_val_score(model,X_train,y_train,
cv=20,scoring=rmsle_scorer)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ratings_count,pandas.DataFrame(E_Ratings_df.groupby(['prod_id']),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
popular_recco,pandas.concat([popular_recco.set_index('prod_id'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
popular_recco,pandas.concat([popular_recco.set_index('prod_id'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
E_Ratings,"pandas.read_csv(""ratings_Electronics.csv"",names=['user_id','prod_id','rating','timestamp'])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_data,test_data","sklearn.model_selection.train_test_split(E_Ratings_df,test_size=0.30,random_state=0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"trainset,testset","sklearn.model_selection.train_test_split(data_t,test_size=.3)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
MSE,"sklearn.metrics.mean_squared_error(pred_df['true_ratings'],pred_df['predicted_ratings'])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
top_n,collections.defaultdict(list),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_all,pandas.DataFrame(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
y,pandas.DataFrame(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
importance_frame,pandas.DataFrame({'Importance':list(importances.values(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
tmp_df,pandas.DataFrame({'User_ID':df.reset_index(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
vw_df,pandas.DataFrame({'User_ID':df.reset_index(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
tmp_df,pandas.DataFrame({'User_ID':df.reset_index(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
full_train_df,"pandas.read_csv(TRN_FILE,index_col=0)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_df,pandas.read_csv(TST_FILE),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(SUBS+f),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_preds,pandas.read_csv(PATH+'dai-raw.txt'),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
c,numpy.array(df_all_final.columns),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('../data/train.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cit,pandas.DataFrame(cities),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
city_coords,"pandas.merge(cit,l,on=l.index)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
merged,"pandas.merge(lr,city_coords,on='location')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('final.csv',index_col=0)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
index,numpy.arange(14),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0.5,2.5,50)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0.5,2.5,50)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0.5,6.5,25)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(10,35,50)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(10,90,30)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
g,"seaborn.JointGrid(x='price',y='ppc',data=price_cup)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ppc_group,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ppc_all,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
out,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bag,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bout,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
classfig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
img,matplotlib.pyplot.imread('./charts/map.png'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"classfig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(20,20)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""./004UPDATED-NLP-COURSE/UPDATED_NLP_COURSE/TextFiles/moviereviews.tsv"",sep=""\t"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
text_clf,"sklearn.pipeline.Pipeline([(""tfidf"",TfidfVectorizer()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model_errors,pandas.DataFrame(errors_dict),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
deposites,"pandas.read_excel(""DataSet.xlsx"",nrows=96)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg_rmse_scores,numpy.sqrt(-lin_reg_scores),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_errors,"numpy.subtract(y_predictions,y_labels)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
named_features_pipeline,"sklearn.pipeline.Pipeline([
('attribs_adder',AttribsAdder()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_final_pipeline,"sklearn.pipeline.Pipeline([
('attribs_adder',AttribsAdder()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_final_pipeline,"sklearn.pipeline.Pipeline([
('rowsdeleter',RowsDeleter()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_mse,"sklearn.metrics.mean_squared_error(test_y_predictions,test_y_prepared)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg_scores,"sklearn.model_selection.cross_val_score(lin_reg,test_X_prepared,test_y_prepared,scoring=""neg_mean_squared_error"",cv=2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
means,pandas.Series(means),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
stds,pandas.Series(stds),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""presidential_polls.csv"",
parse_dates=[""forecastdate"",""startdate"",""enddate""])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,(ax,ax2)","matplotlib.pyplot.subplots(1,2,gridspec_kw={'width_ratios':[5,1],'hspace':0})",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
A,"numpy.array([1,0,1,0,1,0],dtype=bool)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
B,"numpy.array([1,1,1,0,1,1],dtubre5y311egvcfcdjyhntjtyhbbjh6tygrfedcvrgg,7xnu8yhcvfgchchchchchchchchchchchchchchchchchchchchchchchchchch6yb)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
cb,"matplotlib.pyplot.colorbar(im,ax=ax1,cax=cax)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
im,matplotlib.pyplot.imshow(np.log10(h2+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
line,"matplotlib.pyplot.plot(epoch,loss,label='Trainingloss')",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
ax1,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,axArray","matplotlib.pyplot.subplots(H,N,figsize=(dim_Largeur,dim_Hauteur)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
XLIM,matplotlib.pyplot.xlim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
XLIM,matplotlib.pyplot.xlim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
YLIM,matplotlib.pyplot.ylim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
YLIM,matplotlib.pyplot.ylim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
epoch,"numpy.arange(hist_Nepoch,dtype=np.int)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
N_filters,numpy.array(convolutions),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_2,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean_2,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_2,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_3,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean_3,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_3,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
bin_true,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
eps_mean,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
eps_std,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
u_mean,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
u_std,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
id_,numpy.where(h_id==i+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
id_,numpy.where(h_id==i+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
id_,numpy.where(h_id==i+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s3,numpy.where((utils.zcen(residual_bins),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s2,numpy.where((utils.zcen(residual_bins),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s1,numpy.where((utils.zcen(residual_bins),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
convolutions,numpy.squeeze(convout1_f(inputLC),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_std,numpy.std(residual),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
loss,numpy.log10(history.all(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
val_loss,numpy.log10(history.all(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std[i],numpy.sqrt(((RESIDUAL[id_]-mean[i]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_2[i],numpy.sqrt(((RESIDUAL[id_]-mean_2[i]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_3[i],numpy.sqrt(((RAND_RESIDUAL[id_]-mean_3[i]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
bin_VALUE_TRUE,"numpy.linspace(pmin,pmax,Nbin)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
bin_VALUE_TRUE,numpy.linspace(VALUE_TRUE.min(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_bins,"numpy.linspace(MIN,MAX,Nbin)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_avg,numpy.average(residual),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
h_id,"numpy.digitize(VALUE_TRUE,xh1)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
h_id,"numpy.digitize(VALUE_PRED,bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
h_id,"numpy.digitize(RAND_TRUE,bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median[i],numpy.median(RESIDUAL[id_]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_2[i],numpy.median(RESIDUAL[id_]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_3[i],numpy.median(RAND_RESIDUAL[id_]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_med,numpy.median(residual),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s3,"numpy.append(x_s3[0]-1,x_s3)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s3,"numpy.append(x_s3,x_s3[-1]+1,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s2,"numpy.append(x_s2[0]-1,x_s2)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s2,"numpy.append(x_s2,x_s2[-1]+1,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s1,"numpy.append(x_s1[0]-1,x_s1)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s1,"numpy.append(x_s1,x_s1[-1]+1,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h2,yh2,xh2","numpy.histogram2d(VALUE_PRED,VALUE_TRUE,bins=[bin_VALUE_TRUE,bin_VALUE_TRUE])",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
history,numpy.load(history_file),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h1,xh1","numpy.histogram(VALUE_TRUE,bins=bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_weight,xh_weight","numpy.histogram(VALUE_TRUE,bins=bin_VALUE_TRUE,weights=RESIDUAL)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h3,xh3","numpy.histogram(VALUE_PRED,bins=bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_weight,xh_weight","numpy.histogram(VALUE_PRED,bins=bin_VALUE_TRUE,weights=RESIDUAL)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h4,xh4","numpy.histogram(RAND_TRUE,bins=bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_weight,xh_weight","numpy.histogram(RAND_TRUE,bins=bin_VALUE_TRUE,weights=RAND_RESIDUAL)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_residual,x_h","numpy.histogram(residual,bins=residual_bins)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.bar(a,b,facecolor=""red"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
drug_results,"pandas.DataFrame({'Drug':drug_results['Drug'],
'Timepoint':drug_results['Timepoint'],
'TumorVolume(mm3)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
drug_tumor_sum,pandas.DataFrame(drug_results_mean.mean(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
drug_tumor_sem,pandas.DataFrame(drug_results),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tumor_growth_df,"pandas.DataFrame(tumor_growth.loc[45,:])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
drug_results,"pandas.merge(mouse_drug,clinical_trial,on=['MouseID'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mouse_drug,"pandas.read_csv(""mouse_drug_data.csv"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
clinical_trial,"pandas.read_csv(""clinicaltrial_data.csv"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.concat(area_amp,axis=1,sort=False)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_sh_nz,"pandas.concat(area_sh_nz,axis=1,sort=False)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_dict,"pandas.read_csv('./dataset/pisadict2012.csv',encoding='cp1252')",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_iod,pandas.read_csv('./dataset/pisa_iod.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_ch_top25,pandas.read_csv('./dataset/pisa_ch_top25.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_nz_top25,pandas.read_csv('./dataset/pisa_nz_top25.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_ch,pandas.read_csv('./dataset/pisa_china.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_nz,pandas.read_csv('./dataset/pisa_nz.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(121),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(131),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(132),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(133),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(ncols=3,nrows=len(categoric_vars_anxiety)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(ncols=3,nrows=len(categoric_vars_behaviour)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
default_color,seaborn.color_palette(),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.array(accuracy),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"numpy.zeros((2,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
prec,"numpy.zeros((2,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fscore,"numpy.zeros((2,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummyvars,pandas.get_dummies(df[catvars]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""german_credit.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model1,sklearn.tree.DecisionTreeClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model2,"sklearn.tree.DecisionTreeClassifier(max_depth=4,criterion='entropy',random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(Ytest,Y_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(Ytest,Y_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc1,"sklearn.metrics.accuracy_score(y_test,ypred1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc2,"sklearn.metrics.accuracy_score(y_test,ypred2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cr,"sklearn.metrics.classification_report(y_test,ypred1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,ypred1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm2,"sklearn.metrics.confusion_matrix(y_test,ypred2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(Ytest,Y_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(Ytest,Y_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(Ytest,Y_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.50,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(new_df,y,test_size=0.70,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(y_pred,y_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.axes(xlim=(-1,2)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
ax,"matplotlib.pyplot.axes(xlim=(-1,2)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
ax,"matplotlib.pyplot.axes(xlim=(-100,101)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
ax,"matplotlib.pyplot.axes(xlim=(-1,2)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
ax,"matplotlib.pyplot.axes(xlim=(-2,3)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(10,12)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
z,numpy.array([pos[i]*coeffs[i]foriinrange(np.size(coeffs),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
p,"numpy.array([[0.35217129,-0.33455179]])",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
a,"numpy.array([[1,1],[2,2],[3,3]])",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.p_sharing,numpy.array([self.p_coopforiinrange(self.n_resident),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.pos,"numpy.array(list(zip(p,q)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.pos,"numpy.array(list(zip(x,y)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
q_sharing,numpy.array([self.qforiinrange(self.n_mutants),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
pos,numpy.array([self.pos[i]foriinself.parents]),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
clusters,numpy.array([list(i),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
sharing,numpy.array([iforiininfo_sharing_clusters]),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
coeffs,"numpy.array([0.06224283,0.05782395,0.05797724,0.06180964,0.06311181,0.05930722,
0.05888618,0.06648056,0.0625458,-0.44981479])",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
pos,"numpy.array([numpy.array([-0.47824739,0.02844751])",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
z,numpy.array([pos[i]*coeffs[i]foriinrange(np.size(coeffs),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
moves,numpy.asarray([[(p2-p1),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
neighbors,numpy.asarray([int(j),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.pos,numpy.asarray(self.pos),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
silhouettes,numpy.empty(0),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.pos,"numpy.concatenate((self.pos,np.array(list(zip(x,y)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.pos,"numpy.concatenate(self.pos,loc)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
k_best,numpy.argmax(silhouettes),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.payoffs,numpy.arctan(average_sharing),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
dm,numpy.exp(squareform(pdist(self.pos),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.p_sharing,"numpy.append(self.p_sharing,q_sharing)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
silhouettes,"numpy.append(silhouettes,silhouette_avg)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
"unique_elements,counts_elements","numpy.unique(labels,return_counts=True)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
r,random.random(),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
clusterer,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=10)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
df,pandas.read_csv(data_path),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df[att],"pandas.to_numeric(df[att],downcast='float')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
text,"re.sub(r""[^a-zA-Z0-9]"","""",text.lower()",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
val_X,pandas.DataFrame(train_X[:10000]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
train_X,pandas.DataFrame(train_X[10000:]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
val_y,pandas.DataFrame(train_y[:10000]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
train_y,pandas.DataFrame(train_y[10000:]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
new_val_X,pandas.DataFrame(new_XV[:10000]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
new_train_X,pandas.DataFrame(new_XV[10000:]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
new_val_y,pandas.DataFrame(new_Y[:10000]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
new_train_y,pandas.DataFrame(new_Y[10000:]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
predictions,"pandas.read_csv(os.path.join(data_dir,'test.csv.out')",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
predictions,"pandas.read_csv(os.path.join(data_dir,'new_data.csv.out')",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
predictions,"pandas.read_csv(os.path.join(data_dir,'new_data.csv.out')",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
predictions,"pandas.read_csv(os.path.join(data_dir,'test.csv.out')",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
model,"sklearn.decomposition.NMF(n_components=num_topics,init='nndsvd')",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
xtfidf_norm,"sklearn.preprocessing.normalize(x_tfidf,norm='l1',axis=1)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,json.load(f),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
horizontal_filter,"numpy.ones((3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
face_x,"numpy.expand_dims(face_x,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
output,"scipy.signal.convolve2d(line_img,horizontal_filter,mode='valid')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
output,"scipy.signal.convolve2d(diag_img,diagonal_filter,mode='valid')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
X,"numpy.zeros((30,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
distances,numpy.zeros((len(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
connections,numpy.zeros((len(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mins,numpy.zeros(connections_count),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
argmin_s,numpy.zeros(connections_count),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
probabilities,numpy.zeros((len(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
actives_neuron,numpy.zeros(len(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
actives_neuron,numpy.zeros(len(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
probabilities_n,"numpy.multiply(probabilities.T,actives_neuron)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
distances[i][j],numpy.linalg.norm(X[i]-X[j]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
connections_count,"random.randint(1,len(X)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mapbox_token,"os.getenv(""mapbox"")",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
joined_df,"pandas.concat([avg_price_neighborhood,df_neighborhood_locations],axis=1,sort=True)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
sfo_data,"pandas.read_csv(file_path,index_col=""year"")",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
df_neighborhood_locations,pandas.read_csv(file_path),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
tick_marks,numpy.arange(len(classes),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_normalized,pandas.get_dummies(condensed_normalized),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
non_normal_dummies,pandas.get_dummies(adult_income),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
adult_income,"pandas.read_csv('/Users/flatironschool/Downloads/adult.data',header=None)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"data_train,data_test,target_train,target_test","sklearn.model_selection.train_test_split(x,y,
test_size=0.25,random_state=123)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"data_train,data_test,target_train,target_test","sklearn.model_selection.train_test_split(x,y,test_size=0.25,random_state=123)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(x='Income',y='Capital_Gain',data=adult_income)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(x='Income',y='Capital_Loss',data=adult_income)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(x='Income',y='Age',data=adult_income)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(x='Income',y='Age',data=adult_income)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_test,for_1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_accuracy,"sklearn.metrics.accuracy_score(target_train,training_preds)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_accuracy,"sklearn.metrics.accuracy_score(target_test,test_preds)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_accuracy,"sklearn.metrics.accuracy_score(data_train,training_preds)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_accuracy,"sklearn.metrics.accuracy_score(y_test,test_preds)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_clf,"sklearn.model_selection.GridSearchCV(clf,param_grid,scoring='accuracy',cv=None,n_jobs=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sourceSeqLengths,numpy.zeros(batchSize),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
targetSeqLengths,numpy.zeros(batchSize),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
batchInputs,"numpy.zeros((batchSize,maxLength[0],nFeatures)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
batchTargetIn,"numpy.zeros((batchSize,maxLength[1])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
batchTargetOut,"numpy.zeros((batchSize,maxLength[1])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
"batchInputs[batchI,:,:]","numpy.pad(inputList[i],((0,padSecs)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
"batchTargetIn[batchI,:]","numpy.pad(targetInList[i],(0,padSecs)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
"batchTargetOut[batchI,:]","numpy.pad(targetOutList[i],(0,padSecs)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
res,numpy.sqrt(a**2+b**2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x_axis,"numpy.concatenate([alphas,zoom_alphas])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores,"numpy.concatenate([test_scores,np.mean(regr.cv_values_,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_concat,"numpy.concatenate([X_sel_train,X_train_extra],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_concat,"numpy.concatenate([y_sel_train,y_train_extra],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_axis,"numpy.concatenate([alphas,zoom_alphas])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores,"numpy.concatenate([test_scores,np.mean(regr.cv_values_,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_axis,"numpy.concatenate([alphas,zoom_alphas])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores,"numpy.concatenate([test_scores,np.mean(regr.cv_values_,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_idx,numpy.argmin(test_scores),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_idx,numpy.argmin(test_scores),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_idx,numpy.argmin(test_scores),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sortidx,numpy.argsort(x_axis),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sortidx,numpy.argsort(x_axis),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sortidx,numpy.argsort(x_axis),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores,"numpy.mean(regr.cv_values_,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores,"numpy.mean(regr.cv_values_,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores,"numpy.mean(regr.cv_values_,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"results[""PCAexplainedvariance""]",numpy.sum(pca.explained_variance_ratio_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"results[""PCAexplainedvariance""]",numpy.sum(pca.explained_variance_ratio_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"results[""Datapoints""]",numpy.sum(mask),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"results[""PCAexplainedvariance""]",numpy.sum(pca.explained_variance_ratio_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_sel,numpy.log(y_sel),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_sel,numpy.log(y_sel),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train_extra,numpy.log(y_train_extra),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.log(y_all[mask]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
alphas,"numpy.logspace(6,-6,20)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
zoom_alphas,numpy.logspace(np.log10(alphas[best_idx-1]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
alphas,"numpy.logspace(6,-6,20)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
zoom_alphas,numpy.logspace(np.log10(alphas[best_idx-1]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
alphas,"numpy.logspace(6,-6,20)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
zoom_alphas,numpy.logspace(np.log10(alphas[best_idx-1]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,pandas.DataFrame(collector),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_hdf(""Datasets/PubChemDF_new.h5"",""data"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.linear_model.RidgeCV(alphas=alphas,store_cv_values=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.linear_model.RidgeCV(alphas=zoom_alphas,store_cv_values=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.linear_model.RidgeCV(alphas=alphas,store_cv_values=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.linear_model.RidgeCV(alphas=zoom_alphas,store_cv_values=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.linear_model.RidgeCV(alphas=alphas,store_cv_values=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.linear_model.RidgeCV(alphas=zoom_alphas,store_cv_values=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
vt,sklearn.feature_selection.VarianceThreshold(0.01),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
vt,sklearn.feature_selection.VarianceThreshold(0.01),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
vt,sklearn.feature_selection.VarianceThreshold(0.01),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_red,y_sel,test_size=0.25,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_sel_train,X_sel_test,y_sel_train,y_sel_test","sklearn.model_selection.train_test_split(X_sel,y_sel,test_size=0.25,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_red,y,test_size=0.1,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=250),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=250),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=250),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,5)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.concat((train_df,test_df)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.concat((train_df,test_df)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
family_survived,"pandas.crosstab(df[df.Survived!=-888].FamilySize,df[df.Survived!=-888].Survived)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.get_dummies(df,columns=['Deck','Pclass','Title','Fare_Bin','Embarked','AgeState'])",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df['Fare_Bin'],"pandas.qcut(df.Fare,4,labels=['very_low','low','high','very_high'])",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_df,"pandas.read_csv(train_file_path,index_col='PassengerId')",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_df,"pandas.read_csv(test_file_path,index_col='PassengerId')",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_df,"pandas.read_csv(train_file_path,index_col='PassengerId')",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_df,"pandas.read_csv(test_file_path,index_col='PassengerId')",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_df,pandas.read_csv(write_train_path),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_df,pandas.read_csv(write_test_path),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df['AgeState'],"numpy.where(df['Age']>=18,'Adult','Child')",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df['IsMother'],numpy.where(((df.Sex=='female'),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df['IsMale'],"numpy.where(df.Sex=='male',1,0)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
LogFare,numpy.log(df.Fare+1.0),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(14,3)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"f,ax_arr","matplotlib.pyplot.subplots(3,2,figsize=(14,7)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(10,3)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(10,3)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'years':[2001,
2002,
2003,
2004,
2005,
2006,
2007,
2008,
2009,
2010,
2011,
2012,
2013,
2014,
2015,
2016,
2017,
2018,
2019,
2020,
2021,
2022,
2023,
],
'y':[3.75,
3.95,
2.34,
4.05,
3.82,
4.10,
2.42,
2.89,
4.95,
3.68,
2.15,
3.64,
2.85,
4.92,
4.85,
3.78,
3.61,
3.92,
2.57,
3.22,
4.16,
3.72,
2.20
],'x1':[20.99,
22.71,
16.18,
21.29,
21.00,
20.14,
18.43,
19.55,
24.71,
21.67,
17.14,
18.22,
18.78,
24.88,
25.05,
21.89,
21.16,
22.00,
17.83,
19.16,
22.50,
19.68,
15.89
],'x2':[6.26,
7.27,
5.85,
7.07,
6.66,
7.02,
6.27,
5.84,
8.20,
7.31,
4.67,
6.96,
6.21,
7.44,
7.75,
6.13,
6.79,
7.42,
6.60,
5.53,
7.57,
6.18,
5.14
],'x3':[-0.03,
-0.24,
-0.12,
-0.09,
0.34,
0.11,
-0.46,
-0.39,
-0.21,
0.16,
-0.07,
0.10,
-0.36,
0.09,
-0.34,
-0.10,
-0.19,
0.04,
0.09,
0.24,
-0.45,
0.17,
-0.20
]})",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_data,"numpy.array(list(np.loadtxt(""train3.csv"",delimiter="","")",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
train_labels,"numpy.array(list(np.loadtxt(""train_label1.csv"",delimiter="","")",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
eval_data,"numpy.array(list(np.loadtxt(""eval3.csv"",delimiter="","")",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
eval_labels,"numpy.array(list(np.loadtxt(""eval_label1.csv"",delimiter="","")",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
test_data,"numpy.array(list(np.loadtxt(""test.csv"",delimiter="","")",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
test_labels,"numpy.array(list(np.loadtxt(""test_label1.csv"",delimiter="","")",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
global_spend,pandas.DataFrame(data=df2),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('MilitaryExpenditure.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
region,pandas.read_csv('MilitaryExpenditure.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
death_row,"pandas.read_csv('TexasLastStatement.csv',encoding=""ISO-8859-1"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
box,matplotlib.pyplot.boxplot(global_spend['Global_Spend']),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
M,"numpy.vstack([mfcc,mfcc_delta,mfcc_delta2])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"f,(ax1,ax2,ax3)",matplotlib.pyplot.subplots(3),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
client_request_token,"time.strftime(""%Y-%m-%d-%H-%M-%S"",gmtime()",CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
response,"robomaker.create_simulation_job(clientRequestToken=time.strftime(""%Y-%m-%d-%H-%M-%S"",gmtime()",CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
df,pandas.DataFrame(data['metrics']),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
df,pandas.DataFrame(data['metrics']),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
data,json.load(fp),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
data,json.load(fp),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
dataSet3,pandas.DataFrame(main_dict),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('/home/jose/Downloads/python-ml-course/datasets/titanic/titanic3.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
globalPath,"pandas.read_csv(os.path.join(mainPath,filepath_body)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data2,"pandas.read_csv(os.path.join(mainPath,filepath_Customer)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data2_header,"pandas.read_csv(os.path.join(mainPath,filepath_columns)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data2_Customer,"pandas.read_csv(os.path.join(mainPath,filepath)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
dataFrame4,"pandas.read_csv(outfile,sep='\t')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
medals_data,pandas.read_csv(medals_url),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
indsM,numpy.arange(h*w),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
B,numpy.asarray(initImg),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
V,"numpy.zeros((h1*w1,k)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
ans,"numpy.zeros((h+pad*2,w+pad*2,c)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
fcfc,"numpy.dot(fc,fc.T)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
fsfs,"numpy.dot(fs,fs.T)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
img,"numpy.clip(V,0,1.0)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
win_mu,"numpy.mean(winI,axis=2,keepdims=True)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
nz_indsRow,"numpy.repeat(win_inds,win_size)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
B,"numpy.reshape(B,(h1*w1,k)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
content_t,numpy.transpose(np.squeeze(content),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
style_t,numpy.transpose(np.squeeze(style),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
Ds,numpy.sqrt(np.diag(ws[:k_s]+eps),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
dd,"numpy.sqrt(np.power(dd,-1)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
win_var,"numpy.einsum('...ji,...jk->...ik',winI,winI)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
X,"numpy.einsum('...ij,...jk->...ik',winI-win_mu,inv)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
blended,"numpy.expand_dims(np.transpose(blended,(1,2,0)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
nz_indsCol,"numpy.tile(win_inds,win_size)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
Dc,numpy.diag((wc[:k_c]+eps),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
"ans[:,:,i]","numpy.pad(arr[:,:,i],pad_width=(pad,pad)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
inv,numpy.linalg.inv(win_var+(eps/win_size),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
"Ec,wc,_",numpy.linalg.svd(fcfc),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
"Es,ws,_",numpy.linalg.svd(fsfs),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
L,"scipy.sparse.coo_matrix((nz_indsVal,(nz_indsRow,nz_indsCol)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
D,"scipy.sparse.csc_matrix((dd,(np.arange(0,w1*h1)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
A,scipy.sparse.identity(w1*h1),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
df,"pandas.read_csv(""baseline_results.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,5)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
index,numpy.arange(len(headers),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
im,"numpy.zeros((l,l)",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
inp,"numpy.clip(inp,0,1)",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
ax,"matplotlib.pyplot.subplot(num_images//2,2,images_so_far)",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
since,time.time(),CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
time_elapsed,time.time(),CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
feature_dataframe,"pandas.DataFrame({'features':cols,
'RandomForestfeatureimportances':rf_features,
'ExtraTreesfeatureimportances':et_features,
'AdaBoostfeatureimportances':ada_features,
'GradientBoostfeatureimportances':gb_features
})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
base_predictions_train,pandas.DataFrame({'RandomForest':rf_oof_train.ravel(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
StackingSubmission,"pandas.DataFrame({'PassengerId':PassengerId,
'Survived':predictions})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['CategoricalAge'],"pandas.cut(train['Age'],5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['CategoricalFare'],"pandas.qcut(train['Fare'],4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('data/train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('data/test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
oof_train,"numpy.zeros((ntrain,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
oof_test,"numpy.zeros((ntest,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
oof_test_skf,"numpy.empty((NSPLITS,ntest)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_train,"numpy.concatenate((et_oof_train,rf_oof_train,ada_oof_train,gb_oof_train,svc_oof_train)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_test,"numpy.concatenate((et_oof_test,rf_oof_test,ada_oof_test,gb_oof_test,svc_oof_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
title_search,re.search('([A-Za-z]+),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.pairplot(train[[u'Survived',u'Pclass',u'Sex',u'Age',u'Parch',u'Fare',u'Embarked',
u'FamilySize',u'Title']],hue='Survived',palette='seismic',size=1.2,diag_kind='kde',diag_kws=dict(shade=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=NSPLITS,random_state=SEED)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data=stud),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_sql_query(""Select*fromstudmarks"",con)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
stud,"pandas.read_sql_query(""Select*fromstudentmarks"",con)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
res,"pandas.read_sql_query(sql,con)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.arange(0,1e6,2,dtype=np.int)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(-5,5.01,.01)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
y,"numpy.arange(-5,5.01,.01)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,10,.1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x4,"numpy.arange(-2,2,.05)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,10,.1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,10,.1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,10,.1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X,"numpy.arange(1,10,.05)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,1000,50)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X,"numpy.arange(0,1,.005)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X,"numpy.arange(-1,1,.005)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
arr3,"numpy.array([[[1,2],[3,4]],[[5,6],[7,8]]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
a,"numpy.array([[0,1],[2,3]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
b,"numpy.array([[4,5],[6,7]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
canales,"numpy.array(['web','web','movil','tienda','tienda'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
canales,"numpy.array(['web','web','movil','tienda','tienda'],dtype=np.object)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
a,"numpy.array([1.4,4.5,6.7])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
datos,"numpy.array([[1,2,3,4,5],[5,6,7,6,5]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
hijos,"numpy.array([1,2,3,4,5,2,4,7,6,1,1,1,1,1,2,2,])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
a,"numpy.array([[1,2],[3,4]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
valores,"numpy.array([1,2,3,4,6,9,11,3,2])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
valores,"numpy.array([1,2,3,4,6,9,11,3,11])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
y_2,"numpy.array([x_+np.random.normal(0,x_/2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df['visitas'],"numpy.array([100,200,50])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
Y,"numpy.array([x+np.random.normal(0,x/5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
weights,"numpy.array([.5,.4,.1])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ceros,"numpy.zeros((5,5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
unos,numpy.ones(100),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
y,numpy.sin(x),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
z,numpy.sqrt(xs**2+ys**2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"xs,ys","numpy.meshgrid(x,y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
diag,numpy.eye(10000),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"values,count","numpy.unique(hijos,return_counts=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
arrays_c,numpy.load('arrays_c.npz'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df1,pandas.DataFrame(np.arange(12.),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df2,pandas.DataFrame(np.arange(20.),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,"pandas.DataFrame(np.hstack([X,y.reshape(-1,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame(dataframe),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,"pandas.DataFrame({'key1':['a','a','b','b','a'],
'key2':['one','two','one','two','one'],
'data1':np.random.randn(5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df_ventas,"pandas.DataFrame({'ventas':ts_ventas}

df_ventas['workday']=df_ventas.index.weekday<5
pd.date_range('2012-04-01',periods=20)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame({'y':y}),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame({'y':y}),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,"pandas.Series([1,2,3,4,5])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,"pandas.Series(['A','B','A','A','C','B'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
v,"pandas.Series([3,2,1],index=['A','B','C'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,"pandas.Series({'A':1,'B':2,'C':np.nan})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ss,"pandas.Series({'A':1,'B':2,'C':3})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,pandas.Series(range(4),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,"pandas.Series([7,-5,7,4,2,0,4])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ts,pandas.Series(np.random.randn(6),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ts_ventas,"pandas.Series(ventas,index=pd.date_range('2019-1-1',periods=len(ventas)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ts_ventas,"pd.Series(ventas,index=pandas.date_range('2019-1-1',periods=len(ventas)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
data,"pandas.read_csv('/home/ainhoa/Master/krakenEUR.csv.gz',header=None,names=['ts','price','volume'],index_col='ts')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
last_data.index,"pandas.to_datetime(last_data.index,unit='s')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"X,y","sklearn.datasets.make_circles(factor=.3,noise=.08)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,"datetime.datetime(2019,1,11)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
now,datetime.datetime.now(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
answerdf,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
traindf,"pandas.read_csv('train.csv',index_col=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
testdf,pandas.read_csv('test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(rfr,X,y,cv=10,scoring='r2')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsc,"sklearn.model_selection.GridSearchCV(
estimator=RandomForestRegressor()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.ensemble.RandomForestRegressor(max_depth=6,n_estimators=50,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.ensemble.RandomForestRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr,"sklearn.ensemble.RandomForestRegressor(max_depth=best_params[""max_depth""],n_estimators=best_params[""n_estimators""],random_state=False,verbose=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
areas,pandas.read_csv('./state-areas.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
abbrevs,pandas.read_csv('./state-abbrevs.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pop,pandas.read_csv('./state-population.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pop_density,pandas.DataFrame(pop_density),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,numpy.asarray(data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_array,numpy.asarray(new_data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,numpy.transpose(data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_json('students.json'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=validation_size,random_state=seed)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=10,random_state=7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_val_score(model,X_train,Y_train,cv=kfold,scoring=scoring)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,pandas.read_csv('D:/Datasets/HAM10000_metadata(Mel),CLUSTER_22,CLUSTER_3,CLUSTER_8,CLUSTER_0,CLUSTER_0
X,numpy.array(image_list),CLUSTER_22,CLUSTER_3,CLUSTER_8,CLUSTER_0,CLUSTER_0
data,"numpy.asarray(img,dtype=""int32"")",CLUSTER_22,CLUSTER_3,CLUSTER_8,CLUSTER_0,CLUSTER_0
"X_train,X_validation,Y_train,Y_validation","sklearn.model_selection.train_test_split(X[:Y.shape[0]],Y,test_size=.2,random_state=5)",CLUSTER_22,CLUSTER_3,CLUSTER_8,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df_train,df_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv(data_path+'titanic_test.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mask_gt,"numpy.zeros((100,100)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mask,"numpy.zeros((100,100)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X,"numpy.concatenate((X1,X2,X3,X4)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
true_positive,numpy.asarray([0]*(NUM_TARGETS+2),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
false_positive,numpy.asarray([0]*(NUM_TARGETS+2),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
false_negative,numpy.asarray([0]*(NUM_TARGETS+2),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
onehot,numpy.zeros(len(FEATURES[-1]),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
onehot,numpy.zeros(len(FEATURES[tag_index]),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
onehot,numpy.zeros(NUM_TARGETS),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
onehot,numpy.zeros(5),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
confusion_matrix,"numpy.zeros((NUM_TARGETS,NUM_TARGETS)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
TARGET_LOCATION[target],numpy.argmax(onehot),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
target,"numpy.argmax(target,2)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
prediction,"numpy.argmax(prediction,2)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
target,"numpy.reshape(target,(-1,MAX_SENTENCE_LENGTH,NUM_TARGETS)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
prediction,"numpy.reshape(prediction,(-1,MAX_SENTENCE_LENGTH,NUM_TARGETS)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
temp,"numpy.append(temp,word_vectors[word_and_features[0]])",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
temp,"numpy.append(temp,get_feature_vector(feature,index)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
temp,"numpy.append(temp,cap_feature(word_and_features[0])",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
df_cm,"pandas.DataFrame(confusion_matrix,
index=row_labels,
columns=col_labels)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
confusion,"seaborn.heatmap(df_cm,annot=True)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
city_data_df,pandas.DataFrame(all_cities_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
response,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
schema,collections.OrderedDict(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
women_degrees,pandas.read_csv('percent-bachelors-degrees-women-usa.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(18,3)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(24,18)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
real_fake,"pandas.concat([real_news,fake_news])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
fake,pandas.read_csv('./data/fake.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
real,pandas.read_csv('./data/real.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
real_fake['content'],numpy.where(pd.notnull(real_fake['content']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
logit,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
raw_confirmed_df,pandas.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
raw_recovered_df,pandas.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv'),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
raw_death_df,pandas.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv'),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
xc,pandas.to_datetime(xc),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
xd,pandas.to_datetime(xd),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
xr,pandas.to_datetime(xr),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
grad_hat,"scipy.signal.savgol_filter(grad,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
ratio_hat,"scipy.signal.savgol_filter(ratio,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
death_vals_hat,"scipy.signal.savgol_filter(death_vals,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
recovered_vals_hat,"scipy.signal.savgol_filter(recovered_vals,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
confirmed_grad_hat,"scipy.signal.savgol_filter(confirmed_grad,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(22,12)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.subplot(2,2,1)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=90,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
data_test['Country_Holand-Netherlands'],"numpy.zeros([data_test.shape[0],1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rows,numpy.ceil(float(data_train.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
out,pandas.DataFrame(dic),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
out,"pandas.concat([out,pd.get_dummies(out[feature_list])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_train,"pandas.concat([data_train,pd.get_dummies(data_train['Workclass'],
prefix=""Workclass"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_test,"pandas.concat([data_test,pd.get_dummies(data_test['Workclass'],prefix=""Workclass"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_train,"pandas.read_csv('../data/adult_train.csv',sep=';')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_test,"pandas.read_csv('../data/adult_test.csv',sep=';')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train['Поедет'],sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
locally_best_tree,"sklearn.model_selection.GridSearchCV(tree,tree_params,cv=5,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
locally_best_forest,"sklearn.model_selection.GridSearchCV(rf,forest_params,cv=5,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=3,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,"sklearn.tree.DecisionTreeClassifier(max_depth=3,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,sklearn.tree.DecisionTreeClassifier(random_state=17),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tuned_tree,"sklearn.tree.DecisionTreeClassifier(max_depth=9,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,n_jobs=-1,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accur,"sklearn.metrics.accuracy_score(y_test,tree_predictions)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(y_test,tuned_tree_predictions)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
ward,sklearn.cluster.AgglomerativeClustering(n_clusters=3),CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
complete,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage='complete')",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
avg,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage='average')",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
ward,sklearn.cluster.AgglomerativeClustering(n_clusters=3),CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
complete,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage=""complete"")",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
avg,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage=""average"")",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
ward_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,ward_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
complete_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,complete_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
avg_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,avg_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
ward_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,ward_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
complete_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,complete_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
avg_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,avg_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
normalized_X,sklearn.preprocessing.normalize(iris.data),CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,y_train",numpy.array(X_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gru_pred,"numpy.array(gru_predictions[:,:n_pred])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gru_pred,"numpy.repeat(gru_pred,val_gap,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,"numpy.reshape(X_train,(X_train.shape[0],n_input,n_features)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
current_batch,"numpy.append(current_batch[:,1:],[dummy.reshape(1,-1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_data,pandas.DataFrame(test_data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_data,pandas.DataFrame(train_data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
final_gru_predictions,pandas.DataFrame(gru_pred),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_df,"pandas.concat([new_df,df])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_df_test,"pandas.concat([new_df_test,df_test])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe,"pandas.concat([dataframe,test_building],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_df,"pandas.get_dummies(new_df,columns=one_hot)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_df_test,"pandas.get_dummies(new_df_test,columns=one_hot)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe,pandas.read_csv('csv_files/intermediate_files/building_'+str(index_reader),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_building,pandas.read_csv('csv_files/intermediate_files/building_'+str(index_reader),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_for_index,pandas.read_csv('./test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['timestamp'],"pandas.to_datetime(train['timestamp'],infer_datetime_format=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test['timestamp'],"pandas.to_datetime(test['timestamp'],infer_datetime_format=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe['timestamp'],"pandas.to_datetime(dataframe['timestamp'],infer_datetime_format=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_org,"pandas.read_csv(""data/covid_data_original.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_bar,"pandas.read_csv('flavors_of_cacao.csv',
sep=',',header=0,names=['company','bar_name','ref','rew_date','percent','company_loc','rate','bean_dtype','bean_orig'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('./data/SO_EOMMetrics_ext.csv'),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['BusinessMonth'],pandas.to_datetime(df['BusinessMonth']),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('sample_s2.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_set,sklearn.datasets.load_files('Imdblite/train/'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
test,sklearn.datasets.load_files('Imdblite/test/'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
clf,sklearn.svm.LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
clf,sklearn.svm.LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
scores,sklearn.model_selection.cross_val_score(LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
scores2,sklearn.model_selection.cross_val_score(LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
scores3,sklearn.model_selection.cross_val_score(LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
dataset,pandas.read_csv(r'C:\Users\Sunshine\Downloads\Compressed\Machine-Learning-A-Z-New\MachineLearningA-ZNew\Part1-DataPreprocessing\Data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
labelencoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
labelencoder_y,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[0]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
C_range,"numpy.logspace(2,14,13)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gamma_range,"numpy.logspace(-15,-3,13)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_images_df,"pandas.DataFrame(
train_images.reshape(
(train_images.shape[0],
train_images.shape[1]*train_images.shape[2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_labels_df,pandas.DataFrame(train_labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_images_df,"pandas.DataFrame(
test_images.reshape((test_images.shape[0],
test_images.shape[1]*test_images.shape[2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_labels_df,pandas.DataFrame(test_labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""./input/train.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""./input/test.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(
train_images_df,train_labels_df,test_size=0.25,random_state=40)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rbf_clf,"sklearn.svm.SVC(C=10,kernel='rbf',gamma='scale',decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_clf,"sklearn.svm.SVC(C=10,kernel='linear',decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly_clf,"sklearn.svm.SVC(C=10,kernel='poly',decision_function_shape='ovr')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_clf,"sklearn.svm.SVC(C=10,kernel='rbf',decision_function_shape='ovr')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
normalized_rbf_clf,"sklearn.svm.SVC(C=10,kernel='rbf',decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
normalized_rbf_clf,"sklearn.svm.SVC(C=10,kernel='rbf',gamma='scale',decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(C=C,gamma=gamma)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_rbf_clf,"sklearn.svm.SVC(C=10,kernel='rbf',gamma=1e-07,decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linear_clf,sklearn.svm.LinearSVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=0.9,whiten=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=5,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,sklearn.model_selection.GridSearchCV(SVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,numpy.zeros_like(train.corr(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.ret,"pandas.DataFrame(columns=['times','precision','recall'])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
percentage,"pandas.DataFrame(round(df.loc[:,features].value_counts(dropna=False,normalize=True)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_data,"pandas.concat([train,test],ignore_index=False)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_data,"pandas.concat([with_N,without_N],axis=0)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(filename,delimiter='\t')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('../L2/titanic/train.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('../L2/titanic/test.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax1,"seaborn.boxplot(x=""Embarked"",y=""Fare"",hue=""Pclass"",data=train,ax=ax[0])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax2,"seaborn.boxplot(x=""Embarked"",y=""Fare"",hue=""Pclass"",data=test,ax=ax[1])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr,"sklearn.ensemble.RandomForestRegressor(n_estimators=1500,n_jobs=-1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
action,numpy.argmax(actions),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_7
self.l_tq_squared_error,collections.deque(maxlen=1000),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_7
Cust_summary,pandas.DataFrame(),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
Cust_data,pandas.read_csv('Cust_data.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
Cust_Demo,pandas.read_csv('Cust_Demo.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dataframe,pandas.DataFrame(arrayData),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
normalized_X,sklearn.preprocessing.normalize(X),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
standardized_X,sklearn.preprocessing.scale(X),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(standardized_X,y,test_size=0.20)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(9,1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(shuffle=True,random_state=seed)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(pipeline,normalized_X,y,cv=kfold,pre_dispatch='5')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pix_pos,numpy.array([iforiinrange(765),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
peak_pos,"numpy.array(argrelextrema(avgcol_starlamp,np.greater,order=28)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
wl,"numpy.array([6266.49,6304.79,6334.43,6382.99,6402.25,6506.53,6532.88,6598.95,6678.28,6717.04,6929.47])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
pix_pos,numpy.array([iforiinrange(765),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
wl,"numpy.array([6266.49,6304.79,6334.43,6382,6506.53,6598.95,6678.28,6717.04,6929.47])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
avgcol_starlamp,"numpy.mean(cut50,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
avgcol_starlamp,"numpy.mean(cut50,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
LnRg,numpy.poly1d(fit),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
LnRg,numpy.poly1d(fit),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fit,"numpy.polyfit(peak_pos,wl,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fit,"numpy.polyfit([48,187,388,719],[6266.49,6402.25,6598.95,6929.47],2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
DF_CD,pandas.DataFrame(cleaned_data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
alleduatt,pandas.read_csv('files/AllEduAttainment.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
schoollevel,pandas.read_csv('files/2016_PSSA_School_Level_Perfomance_Results.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
pssa,pandas.read_csv(filename),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
x_t,"numpy.asarray([integrate.odeint(lorenz_deriv,x0i,t)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,max_time,int(250*max_time)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.zeros((len(t),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,20,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
r,"scipy.integrate.ode(f_np,jac_np)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"line1,","matplotlib.pyplot.plot([],[],'bo')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"line2,","matplotlib.pyplot.plot([],[],'ro')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(7,7)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df_train,df_test])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv(data_path+'titanic_test.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_fixed['Fare'],numpy.log1p(df_fixed['Fare']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_fixed['Fare'],scipy.stats.boxcox(df_fixed['Fare']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
col,"pandas.cut(col,bin_num,right=True,include_lowest=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dum,"pandas.get_dummies(col,dummy_na=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_full,"pandas.read_csv('../data/LoanStats2014.csv',skiprows=1,skipfooter=2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['mo_earliest_credit'],pandas.to_datetime('2014-12-01'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['term'],pandas.to_numeric(df['term']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['int_rate'],pandas.to_numeric(df['int_rate']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['emp_length'],pandas.to_numeric(df['emp_length']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['revol_util'],pandas.to_numeric(df['revol_util']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_features='sqrt',n_jobs=-1,class_weight='balanced')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gc,"sklearn.model_selection.GridSearchCV(gbc,gbc_params,n_jobs=-1,scoring='roc_auc',verbose=5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbc,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'From_To':['LoNDon_paris','MAdrid_miLAN','londON_StockhOlm','Budapest_PaRis','Brussels_londOn'],
'FlightNumber':[10045,np.nan,10065,np.nan,10085],
'RecentDelays':[[23,47],[],[24,43,87],[13],[67,32]],
'Airline':['KLM(!)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_df,pandas.read_csv('train.csv'),CLUSTER_15,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_0
valid_df,pandas.read_csv('test.csv'),CLUSTER_15,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_0
vv,"numpy.array([1e8,1.5e8,2e8])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
boost,"numpy.zeros((4,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_2,"numpy.dot(b1,X_1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_1,numpy.reshape([rnd_xn(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
beta_norm,numpy.linalg.norm(beta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lgs_total,pandas.DataFrame(columns=idx),CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
samples,pandas.DataFrame(),CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
titanic_types,"pandas.DataFrame(data=titanic.dtypes,index=titanic.columns,columns=['dtype'])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
g,"pandas.concat(read_files('\\ebola\\guinea_data\\',['Date'])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
l,"pandas.concat(read_files('\\ebola\\liberia_data\\',['Date'])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
sl,"pandas.concat(read_files('\\ebola\\sl_data\\',['date'])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.concat([lgs_total,sl_deaths])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
agecalc,"pandas.concat([titles,titanic.age],axis=1)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"cut,bins","pandas.cut(titanic.age,age_range,right=False,retbins=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"cut,bins","pandas.cut(titanic_filled.age,age_range,right=False,retbins=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,g_new,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,g_deaths,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,l_new,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,l_deaths,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,sl_new,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,sl_deaths,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
samples,"pandas.merge(samples,mid,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"cut,bins","pandas.qcut(passengers_survived_groups.age,2,labels=['youngerthanmedian','olderthanmedian'],retbins=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"cut,bins","pandas.qcut(passengers_survived_groups.age,2,labels=['youngerthanmedian','olderthanmedian'],retbins=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(DATA_FOLDER+dirname+filename,header=0,parse_dates=date_col)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
metadata,"pandas.read_excel(DATA_FOLDER+'\\microbiome\\metadata.xls',sheetname='Sheet1',index_col='BARCODE')",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
mid,"pandas.read_excel(DATA_FOLDER+'\\microbiome\\'+index+'.xls',sheetname='Sheet1',header=None,index_col=0)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
titanic,"pandas.read_excel(DATA_FOLDER+'\\titanic.xls',sheetname='titanic')",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
age_range,"numpy.arange(0,age_limit,10,dtype=np.int64)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
age_range,"numpy.arange(0,age_limit,10,dtype=np.int64)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
path,os.getcwd(),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
path,os.getcwd(),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
d,numpy.array(data),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
admitted,"numpy.array([[sample[0],sample[1]]forsampleindifsample[2]==1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
notAdmitted,"numpy.array([[sample[0],sample[1]]forsampleindifsample[2]==0])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dR,numpy.array(dataR),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
accepted,"numpy.array([[s[0],s[1]]forsindRifs[2]==1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
rejected,"numpy.array([[s[0],s[1]]forsindRifs[2]==0])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(X.shape[1]),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
g,"numpy.sum(g,axis=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
L,"numpy.linspace(-10,10,50)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(min(X[:,1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.column_stack((np.ones((X.shape[0]),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('ex2data1.txt'
,header=None
,names=['exam1','exam2','admission'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dataR,"pandas.read_csv('ex2data2.txt',header=None,names=['test1','test2','Acceptance'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
result,"scipy.optimize.fmin_tnc(func=computeCostJ,x0=theta,fprime=gradient,args=(X,y)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
A_raw,numpy.array([(125/(4+c*0.25),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
b,numpy.array([np.float64(N),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
norms,"numpy.array(norms,dtype=np.float64)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
b,numpy.array([n*i+mforiinrange(n),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A,"numpy.array([
[(i+j)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
L,numpy.zeros(A.shape),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A_inv,numpy.dot(np.linalg.inv(L.T),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
comp,numpy.argsort(norms),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
bs,"numpy.repeat(b,n)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"L[i,i]","numpy.sqrt(A[i,i]-np.dot(L[i],L[i])",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
diag,numpy.diag([eps]*n),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cond,"numpy.linalg.norm(A,ord=np.inf)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linalg.solve(A,b)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,"numpy.linalg.solve(L,b)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linalg.solve(L.T,y)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"LU,p",scipy.linalg.lu_factor(A),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
score,numpy.array(lst),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv('creditcard.csv',delimiter=',')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
train,pandas.get_dummies(train),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.get_dummies(test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""Dataset/Train.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""Dataset/Test.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_x,validation_x,train_y,validation_y","sklearn.model_selection.train_test_split(train,label,test_size=0.28,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model2,sklearn.svm.SVR(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model1,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model3,sklearn.linear_model.Ridge(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.Ridge(alpha=i,fit_intercept=j,solver=k)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
selected_model,"sklearn.linear_model.Ridge(alpha=10000,copy_X=True,fit_intercept=True,max_iter=None,
normalize=False,random_state=None,solver='sag',tol=0.001)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model4,sklearn.linear_model.Lasso(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.Lasso(alpha=i,fit_intercept=j,selection=k)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
means,"numpy.concatenate((stat['mean_cond1'],stat['mean_cond2'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
variances,"numpy.concatenate((stat['var_cond1'],stat['var_cond2'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
both_conds,"numpy.concatenate((data['cond1'][i],data['cond2'][i])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lambda_0,numpy.mean(two_all),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lambda_x,numpy.mean(two_x),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lambda_y,numpy.mean(two_y),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stat['mean'+'_'+cond],"numpy.mean(data[cond],axis=1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lambda_0,numpy.mean(both_conds),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood_0,"numpy.prod(poisson.pmf(two_all,lambda_0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood_a,"numpy.prod(poisson.pmf(two_x,lambda_x)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood_0,"numpy.prod(poisson.pmf(both_conds,lambda_0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood_a,"numpy.prod(poisson.pmf(data['cond1'][i],
lambda_cond1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stat['var'+'_'+cond],"numpy.var(data[cond],axis=1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
two,"pandas.read_csv(""q2_set_1.tsv"",sep='\t',index_col=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
three_1,"pandas.read_csv(""q3_set_1.tsv"",sep='\t')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
three_2,"pandas.read_csv(""q3_set_2.tsv"",sep='\t')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
confidence_interval,pandas.Series(boot_mean_diff),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
yearly,pandas.read_csv('datasets/yearly_deaths_by_clinic.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
monthly,"pandas.read_csv(""datasets/monthly_deaths.csv"",parse_dates=['date'])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
handwashing_start,pandas.to_datetime('1847-06-01'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean_diff,numpy.mean(after_proportion),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ebola_parsed,"pandas.concat([ebola_long,variable_split],axis=1)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi,"pandas.concat([taxi1,taxi2,taxi3,taxi4,taxi5])",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi_loop_concat,pandas.concat(list_taxi_df),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
pew_long,"pandas.melt(pew,id_vars='religion')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
pew_long,"pandas.melt(pew,id_vars='religion',var_name='income',value_name='count')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
billboard_long,"pandas.melt(
billboard,
id_vars=['year','artist','track','time','date.entered'],
var_name='week',
value_name='rating'
)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
ebola_long,"pandas.melt(ebola,id_vars=['Date','Day'])",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
weather_melt,"pandas.melt(weather,id_vars=['id','year','month','element'],var_name='day',value_name='temp')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
billboard_long,"pandas.melt(billboard,id_vars=['year','artist','track','time','date.entered'],var_name='week',value_name='rating')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
pew,pandas.read_csv('../data/pew.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
billboard,pandas.read_csv('../data/billboard.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
ebola,pandas.read_csv('../data/country_timeseries.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
weather,pandas.read_csv('../data/weather.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
billboard,pandas.read_csv('../data/billboard.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi1,pandas.read_csv(nyc_taxi_data[0]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi2,pandas.read_csv(nyc_taxi_data[1]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi3,pandas.read_csv(nyc_taxi_data[2]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi4,pandas.read_csv(nyc_taxi_data[3]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi5,pandas.read_csv(nyc_taxi_data[4]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(csv_filename),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(file),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_x,numpy.array(train_X.drawing.tolist(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
validation_x,numpy.array(validation_X.drawing.tolist(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
Class_perform,"numpy.zeros([num_classes,2])",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
Class_Acc,numpy.zeros([num_classes]),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
Country_perform,"numpy.zeros([num_countries,2])",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
Country_Acc,numpy.zeros([num_countries]),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
display_samples,pandas.DataFrame(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
train_data,pandas.DataFrame(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
cat,"pandas.read_csv('../input/train_simplified/cat.csv',nrows=10)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
temp,"pandas.read_csv(os.path.join(path_train,filename)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
temp,"pandas.read_csv(os.path.join(path_train,filename)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
"fig,axs","matplotlib.pyplot.subplots(nrows=figrows,ncols=figcols,sharex=True,sharey=True,figsize=(16,10)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
"fig1,ax_acc",matplotlib.pyplot.subplots(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
"fig2,ax_loss",matplotlib.pyplot.subplots(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
country_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
"train_X,validation_X,train_y,validation_y","sklearn.model_selection.train_test_split(train_data,label,test_size=0.2,random_state=13)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
df_temp,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df_train,df_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.concat([df[:train_num],train_Y],axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.concat([df[:train_num],train_Y],axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,mean_df,on=c,how='left')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,mean_df,on=c,how='left')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv(data_path+'house_test.csv.gz'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp[c],sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp[c],sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(3,3)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(num_grids,num_grids)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(num_grids,num_grids)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
tick_marks,numpy.arange(num_classes),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
cls_pred,"numpy.zeros(shape=num_test,dtype=np.int)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
data.test.cls,"numpy.argmax(data.test.labels,axis=1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_true=cls_true,
y_pred=cls_pred)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
start_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
end_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
num_grids,math.ceil(math.sqrt(num_filters),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
num_grids,math.ceil(math.sqrt(num_filters),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
true_points,numpy.where(upper_lines[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
true_points,numpy.where(lower_lines[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
kernel,"numpy.ones((7,7)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sorted_objects,"numpy.argsort(stats[:,-1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
upper_lines,"numpy.append(upper_lines,upper_line)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lower_lines,"numpy.append(lower_lines,lower_line)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
line,"numpy.polyfit(true_points[1],h-true_points[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
line,"numpy.polyfit(true_points[1],h-true_points[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
upper_degrees,math.degrees(math.atan(line[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lower_degrees,math.degrees(math.atan(line[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo2})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.concat([X_train,y_train],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,pandas.read_csv('./Data/X_test_clean.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,pandas.read_csv('./Data/X_train_clean.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train,pandas.read_csv('./Data/y_train_clean.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('./Data/test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_Lasso_sc7.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_Ridge_Sc3.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_KNN1_Sc.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_Gamma5.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_ENet_sc2.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_ENet_sc2.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_Linear2.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_model,"sklearn.linear_model.LassoCV(alphas=l_alphas,cv=kf)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_model,"sklearn.linear_model.RidgeCV(alphas=r_alphas,cv=kf)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enet_model,"sklearn.linear_model.ElasticNetCV(alphas=enet_alphas,l1_ratio=enet_ratio,cv=kf)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enet_model,"sklearn.linear_model.ElasticNetCV(alphas=enet_alphas,l1_ratio=enet_ratio,cv=20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=1,p=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cleo2,numpy.concatenate(cleo),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l_alphas,"numpy.logspace(2.7,3.05,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r_alphas,"numpy.logspace(2.8,2.95,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enet_alphas,"numpy.logspace(-1,0.03,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enet_alphas,"numpy.logspace(-2,0.03,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
words,numpy.array(vectorizer.get_feature_names(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,"numpy.zeros(critics.shape[0],dtype=np.bool)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ind,numpy.argsort(probs),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bad_rotten,numpy.argsort(prob[y==0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bad_fresh,numpy.argsort(prob[y==1]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cumulative,numpy.cumsum(values),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.eye(xtest.shape[1]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"values,base","numpy.histogram(DocFreq,bins=DocFreq.max()",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
critics,pandas.read_csv('./critics.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train,test","sklearn.model_selection.train_test_split(critics[[""quote"",""fresh""]],test_size=0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"itrain,itest",sklearn.model_selection.train_test_split(range(critics.shape[0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(alpha=alpha),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(alpha=best_alpha),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_best,"sklearn.model_selection.GridSearchCV(estimator=clf,param_grid=params_for_opt,scoring=scoring,cv=cv)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_accuracy,"sklearn.metrics.accuracy_score(y_train,y_train_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_accuracy,"sklearn.metrics.accuracy_score(y_test,y_test_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_auc,"sklearn.metrics.auc(fpr1,tpr1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_f1,"sklearn.metrics.f1_score(y_train,y_train_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_f1,"sklearn.metrics.f1_score(y_test,y_test_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_train,y_train_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr1,tpr1,thresholds1","sklearn.metrics.roc_curve(y_test,y_test_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Xt_new,"sklearn.feature_selection.SelectKBest(chi2,k=nkbest)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,"numpy.array(
[
1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9
]
)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y_train,"numpy.array(
[
2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18
])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_val,"numpy.array(
[
1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9
])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y_val,"numpy.array(
[
2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18
])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test,"numpy.array([
1,2,3,4,5,6,7,8,9
])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y_test,"numpy.array([
[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]

])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.read_excel('../1.xlsx',header=None,index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
a,"pandas.read_excel('../1.xlsx',header=None,index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
b,"pandas.read_excel('../1.xlsx',header=None,index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
sleep,"pandas.read_csv('com.samsung.shealth.sleep.201908141922.csv',header=1)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
sleep2,"pandas.read_csv('com.samsung.shealth.sleep_data.201908141922.csv',header=1)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
files,os.listdir(os.curdir),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
train_kmm,numpy.array(df_new_3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_kmm,numpy.array(df_new),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
encoded_dim,numpy.shape(train_encoded),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
encoded_dim,numpy.shape(train_encoded),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
k_means_labels_unique,numpy.unique(k_means_labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
k_means_labels_unique,numpy.unique(k_means_labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_label,"pandas.DataFrame({'mean':test_encoded[:,0],'std':test_encoded[:,1],'label':testlabel})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_new,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_new,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(save_path+'train_FD001_3_p20_.txt',header=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
k_means,"sklearn.cluster.KMeans(init='k-means++',n_clusters=n_num,n_init=10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
k_means,"sklearn.cluster.KMeans(init='k-means++',n_clusters=n_num,n_init=10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.DataFrame(columns=files),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
test,pandas.DataFrame(columns=files),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
oof,"pandas.DataFrame({'encounter_id':train['encounter_id'],'hospital_death':oof_preds})",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'encounter_id':test['encounter_id'],'hospital_death':preds_test})",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_,pandas.read_csv('../raw/training.csv'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
predictions,pandas.read_csv(f'../oof_preds/{file}'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
predictions,pandas.read_csv(f'../submissions/{file}'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
lbl,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
df_new,"pandas.concat((df_0,df_1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('diabetes.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2[feature],numpy.where((df2['Outcome']==1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2[feature],numpy.where((df2['Outcome']==0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
GaussNB,sklearn.naive_bayes.GaussianNB(priors=None),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MultiNB,sklearn.naive_bayes.MultinomialNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feature_matrix,df2['Outcome'],random_state=1,test_size=0.2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"Xn_train,Xn_test,yn_train,yn_test","sklearn.model_selection.train_test_split(df_new[df_new.columns[:-1]],df_new['Outcome'],random_state=17,test_size=0.2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.Pipeline([('scaler',StandardScaler()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline2,"sklearn.pipeline.Pipeline([('scaler',StandardScaler()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline_nb,"sklearn.pipeline.Pipeline([('clf',GaussianNB(priors=[0.651,0.349])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline_nb1,"sklearn.pipeline.Pipeline([('clf',GaussianNB()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,"pandas.DataFrame({
""PassengerId"":df_test[""PassengerId""],
""Survived"":pred
})",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
df_train,"pandas.read_csv(""../input/train.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
df_test,"pandas.read_csv(""../input/test.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([
(""column_extractor"",ColumnExtractor(feature_columns)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
self.min_max_scalar,sklearn.preprocessing.MinMaxScaler(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
close,"pandas.DataFrame(dbi[""AdjClose""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"pandas.DataFrame(close[""AdjClose""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"pandas.DataFrame(close[""7daysout""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
comb,pandas.DataFrame(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
holdout_X,"pandas.DataFrame(holdout[""AdjClose""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"comb[""y_test""]",pandas.Series(y_test.tolist(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"comb[""y_pred""]",pandas.Series(y_pred.tolist(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dbi,"pandas.read_csv(""DBI.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
holdout.index,pandas.to_datetime(holdout.index),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.2,random_state=23)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr,sklearn.svm.SVR(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfn,"pandas.DataFrame(df,columns=col_n)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
percent,pandas.Series(round(total/len(df),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,onehot_encoding_fuel],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,onehot_encoding_type],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,onehot_encoding_door_structure],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehot_encoding_fuel,"pandas.get_dummies(df['heat_fuel'],prefix='heat_fuel')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehot_encoding_type,"pandas.get_dummies(df['heat_type'],prefix='heat_type')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehot_encoding_door_structure,"pandas.get_dummies(df['front_door_structure'],prefix='front_door_structure')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""trainPrice.csv"",decimal=',')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['exclusive_use_area'],pandas.to_numeric(df['exclusive_use_area']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['total_parking_capacity_in_site'],pandas.to_numeric(df['total_parking_capacity_in_site']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['supply_area'],pandas.to_numeric(df['supply_area']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['room_count'],pandas.to_numeric(df['room_count']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['bathroom_count'],pandas.to_numeric(df['bathroom_count']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(data.data,columns=data.feature_names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
target,"pandas.DataFrame(data.target,columns=[""MEDV""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.load_boston(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
t,"numpy.arange(0,5,0.2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_pos,numpy.arange(len(objects),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.arange(5),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"df[""PRICE""]",numpy.array(boston.target),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(boston.data,columns=boston.feature_names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_scaled,pandas.DataFrame(self.scaler.transform(X[self.columns]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
strains_2,pandas.get_dummies(C046_H1117_1['Strains']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
C046_H1117,pandas.read_excel(r'C:\ZL\Googledrivesyn\Research\manuscriptwriting\Harvestingefficiency\Harvestingreport\Harvestingpaper\Data\Pythonregressionanalysis\datacombine\C046+H1117_clean_reggression.xlsx'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
target,"numpy.where(C046_H1117_processed['Harvest_efficiency']>60,1,0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.mean_,numpy.mean(X[self.columns]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
summary_table['Coefficient'],numpy.transpose(reg.coef_),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.var_,numpy.var(X[self.columns]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
summary_table['Odds_ratio'],numpy.exp(summary_table.Coefficient),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.scaler,"sklearn.preprocessing.StandardScaler(copy,with_mean,with_std)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_inputs,target,
test_size=0.2,random_state=20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1,"numpy.linspace(0,66,700)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ima,pandas.read_excel('/Users/cyano/Desktop/tsi_fui.xlsx'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"popt,pcov","scipy.optimize.curve_fit(func,x,y)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
encoded,"numpy.array([vocab_to_int[c]forcintext],dtype=np.int32)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,"numpy.zeros(x.shape,dtype=x.dtype)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.zeros((1,1)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
p,numpy.squeeze(preds),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
image_id,random.choice(dataset.image_ids),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
ixs,numpy.arange(len(keep),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
roi_class_names,numpy.array(dataset.class_names),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
det_mask_specific,"numpy.array([mrcnn[""masks""][0,i,:,:,c]
fori,cinenumerate(det_class_ids)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
det_masks,"numpy.array([utils.unmold_mask(m,det_boxes[i],image.shape)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
positive_anchor_ix,numpy.where(target_rpn_match[:]==1),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
negative_anchor_ix,numpy.where(target_rpn_match[:]==-1),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
neutral_anchor_ix,numpy.where(target_rpn_match[:]==0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
det_count,numpy.where(det_class_ids==0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
roi_positive_ixs,numpy.where(roi_class_ids>0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[ixs]>0,2,1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[roi_positive_ixs][ids]>0,1,0)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
keep,numpy.where(roi_class_ids>0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
ixs,numpy.where(pre_nms_class_ids==class_id),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[keep][ixs]>0,1,0)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
det_count,numpy.where(det_class_ids==0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
roi_class_ids,"numpy.argmax(mrcnn[""probs""][0],axis=1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
sorted_anchor_ids,"numpy.argsort(rpn['rpn_class'][:,:,1].flatten()",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
proposals,"numpy.around(mrcnn[""proposals""][0]*np.array([h,w,h,w])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
keep,"numpy.intersect1d(keep,np.where(roi_scores>=config.DETECTION_MIN_CONFIDENCE)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
keep,"numpy.intersect1d(keep,nms_keep)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
nms_keep,"numpy.union1d(nms_keep,class_keep)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,0],50)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,1],50)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,2],50)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,3],50)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.imshow(modellib.unmold_image(activations[""input_image""][0],config)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
"_,ax","matplotlib.pyplot.subplots(rows,cols,figsize=(size*cols,size*rows)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
x,"numpy.linspace(0,1,num=1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
players,"pandas.DataFrame(players,columns=['player'])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
result,"pandas.merge(points,games_played,left_index=True,right_index=True)",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(path),CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data['date'],"pandas.to_datetime(data['date'],format='%Y-%m-%d')",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
path,os.getcwd(),CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ax,"seaborn.lineplot(x=""date"",
y=""points"",
hue=""player"",
data=df,
dashes=True)",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_train,pandas.DataFrame(scaler.transform(X_train),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
X_test,pandas.DataFrame(scaler.transform(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('Data/winequality-red.csv',sep=';')",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=SEED)",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
c,collections.Counter(item),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
c,collections.Counter(data),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
a,"numpy.array([1,2,3])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
b,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([1,2])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([1.0,2.0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([1,2],dtype=np.int64)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2],[3,4]],dtype=np.float64)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([[5,6],[7,8]],dtype=np.float64)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2],[3,4]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([[5,6],[7,8]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v,"numpy.array([9,10])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
w,"numpy.array([11,12])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2],[3,4]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v,"numpy.array([1,0,1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
	image,numpy.asarray(bytearray(resp.read(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,"numpy.zeros((2,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.empty_like(x),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
b,"numpy.ones((1,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
c,"numpy.full((2,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,"numpy.sum(npimg/3,axis=-1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
kernel,"numpy.float32([[-1,0,1],[-1,0,1],[-1,0,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
d,numpy.eye(2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
response,requests.get('https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRZpTmijaNOH6MmycM_eiPKcEl5mVvbwl7a8YKVGpEEMIanDcSt'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"y_true,y_pred",numpy.array(y_true),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
y_pred,numpy.array(y_pred),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
temp,numpy.zeros(len(p),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
temp,numpy.zeros(len(p),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
weather_labels_value,numpy.transpose(np.float32(labels_df[weather_labels].values),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
labels_df,pandas.read_csv(PLANET_KAGGLE_LABEL_CSV),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
arr,numpy.arange(100),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
ar,"numpy.array([45,6,78,9.6,20,45],dtype='int32')",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
array2,"numpy.array([[1,3,5.9,7],[2,4,6,8]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
array3,"numpy.array([[1,3,5],[2,4,6]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,"numpy.array([[2,41,13],[16,17,18]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
zerod,"numpy.zeros((4,6)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'product_name':product_names_df,'product_brand':product_brands_df,'actual_price':actual_prices_df,'selling_price':selling_prices_df,'product_link':product_links_df})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
html,"requests.get(url,headers=headers_std)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
y,"numpy.array([0,1,2,2,1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
correct_scores,"numpy.asarray([
[-0.81233741,-1.27654624,-0.70335995],
[-0.17129677,-1.18803311,-0.47310444],
[-0.51590475,-1.01354314,-0.8504215],
[-0.15419291,-0.48629638,-0.52901952],
[-0.00618733,-0.12435261,-0.15226949]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
M_test_ans,"numpy.array(
[[0.,0.,0.,1.,0.,0.,0.,0.,1.,0.,],
[0.,0.,0.,1.,0.,0.,0.,0.,0.,1.,],
[0.,0.,0.,0.,0.,0.,1.,0.,0.,1.,],
[1.,1.,0.,0.,0.,0.,0.,0.,0.,0.,],
[0.,0.,0.,0.,0.,0.,0.,0.,1.,1.,],
[0.,0.,0.,0.,0.,0.,0.,1.,1.,0.,],
[0.,0.,1.,0.,0.,0.,0.,1.,0.,0.,],
[0.,0.,0.,0.,0.,1.,1.,0.,0.,0.,],
[1.,0.,0.,0.,1.,1.,0.,0.,0.,1.,],
[0.,1.,1.,0.,1.,0.,0.,0.,1.,0.,]]
)",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
M_reduced_plot_test,"numpy.array([[1,1],[-1,-1],[1,-1],[-1,1],[0,0]])",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
M,"numpy.zeros((num_words,num_words)",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
M,numpy.stack(M),CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
M_lengths,"numpy.linalg.norm(M_reduced_co_occurrence,axis=1)",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
svd,"sklearn.decomposition.TruncatedSVD(n_components=2,n_iter=n_iters,random_state=42)",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
elifnotcollections.Counter(self.indep_coords),=collections.Counter(other.indep_coords),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
elifnotcollections.Counter(self.indep_coords),=collections.Counter(other.indep_coords),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ifnotcollections.Counter(_ham1.indep_coords),=collections.Counter(_ham2.indep_coords),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
elifnotcollections.Counter(_op1.indep_coords),=collections.Counter(_op2.indep_coords),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_inputs,numpy.array(pos_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_inputs,numpy.array(neg_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_inputs,numpy.array(pos_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_inputs,numpy.array(neg_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_inputs,numpy.array(test_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
g,"numpy.array([[1,2,3,4,None]])",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
h,"numpy.array([0,1,0,1,0])",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp_features,numpy.zeros(no_of_features_considered),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_labels,numpy.zeros(len(neg_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_labels,numpy.zeros(len(neg_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_full,"numpy.concatenate((pos_inputs,pos_labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_full,"numpy.concatenate((neg_inputs,neg_labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
all_,"numpy.concatenate((pos_full_upsampled,neg_full_upsampled)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_full,"numpy.concatenate((pos_inputs,pos_labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_full,"numpy.concatenate((neg_inputs,neg_labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
all_,"numpy.concatenate((pos_full_upsampled,neg_full_upsampled)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_labels,numpy.ones(len(pos_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_labels,numpy.ones(len(pos_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_labels,numpy.ones(len(test_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp_df,"pandas.read_csv(""/Users/adithyabandi/Desktop/""+token+""_token.txt"",sep="""")",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
tf,math.log(1+count),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
idf,math.log(72/len(temp_array),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
l,sklearn.linear_model.LogisticRegression(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sgd_clf,sklearn.linear_model.SGDClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sgd_clf,sklearn.linear_model.SGDClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sgd_clf,sklearn.linear_model.SGDClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.ensemble.GradientBoostingClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.ensemble.GradientBoostingClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.ensemble.GradientBoostingClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sv_clf,sklearn.svm.SVC(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sv_clf,"sklearn.svm.SVC(kernel=""rbf"",random_state=42)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sv_clf,"sklearn.svm.SVC(kernel=""rbf"",random_state=42)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
lsv_clf,sklearn.svm.LinearSVC(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
lsv_clf,sklearn.svm.LinearSVC(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
lsv_clf,sklearn.svm.LinearSVC(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
acc_score,"sklearn.metrics.accuracy_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
acc_score,"sklearn.metrics.accuracy_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
acc_score,"sklearn.metrics.accuracy_score(test_labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
prec_score,"sklearn.metrics.precision_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
prec_score,"sklearn.metrics.precision_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
prec_score,"sklearn.metrics.precision_score(test_labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rec_score,"sklearn.metrics.recall_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rec_score,"sklearn.metrics.recall_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rec_score,"sklearn.metrics.recall_score(test_labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(test_labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
re_tag,re.compile(r'<[^>]+>'),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
results_prediction,"pandas.read_csv(param[""prediction_path""],sep="";"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
results_prediction,"pandas.read_csv(param[""prediction_path""],sep="";"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
results_prediction,"pandas.read_csv(param[""prediction_path""],sep="";"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
original_sensor_data,"pandas.read_csv(param[""data""][""path""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,requests.get('https://api.spotify.com/v1/search?query=80s&type=playlist'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
response,requests.get('https://api.spotify.com/v1/search?query=biggie&type=playlist'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
biggie_response,requests.get('https://api.spotify.com/v1/search?query=biggie&type=artist'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
response,"requests.get(""https://api.spotify.com/v1/artists/1RpIWJHxLsDE8YfFcRaBKw/top-tracks?country=US"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.zeros(4,dtype=int)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,"numpy.zeros(4,dtype={'names':('name','age','weight')",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X,"numpy.zeros(1,dtype=tp)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
tp,"numpy.dtype([('id','i8')",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('Absenteeism_at_work6.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,pandas.read_csv('df_14.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
colormap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
colormap3,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
colormap4,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labelencoder_X_1,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labelencoder_X_2,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mimic_data,"pandas.read_csv(""/content/drive/MyDrive/app/text_binary.csv"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
re_newlines,re.compile('\\\\n'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
re_letters,re.compile('[^A-Za-z0-9]'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
re_spaces,re.compile('\s+'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
enc,"numpy.array([vocab2index.get(w,vocab2index[""UNK""])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
word_vecs[word],numpy.array([float(val),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
W,"numpy.zeros((V,emb_size)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
W[0],"numpy.zeros(emb_size,dtype='float32')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
counts,collections.Counter(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"pandas.DataFrame(data,columns=feature_names)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,"pandas.DataFrame(target,columns=['price'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,pandas.Series(df['Class']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../creditcard.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=100,stratify=y)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
reg,"sklearn.ensemble.RandomForestRegressor(max_depth=12,n_estimators=1000,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,GridSearchCV(estimator=sklearn.ensemble.RandomForestClassifier(random_state=100),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.model_selection.GridSearchCV(estimator=RandomForestClassifier(random_state=100),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
AUC,"sklearn.metrics.roc_auc_score(y_test,y_pred_proba)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
all_anomalies,pandas.DataFrame(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
codes,pandas.Series(codelist),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
unique_dates,pandas.Series(dates),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
all_anomalies,"pandas.concat([all_anomalies,anomalies(meter)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
electric,"pandas.read_csv(""FullEletricInterval042016.csv"")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
weather,pandas.read_csv('weather_prepared_final.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
propertyCode,"pandas.read_excel(""SIMS_Property_List_4-6-2016_Revised.xlsx"")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
electric['Datetime'],pandas.to_datetime(electric['Date']+''+electric['StartTime']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
weather.DATE,pandas.to_datetime(weather.DATE),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
weekend,pandas.to_datetime(date),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(electric_day.ix[meter].index),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,pandas.to_datetime('2015-01-01'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,pandas.to_datetime('2016-04-10'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(electric_day.ix[meter].index),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,pandas.to_datetime('2015-01-01'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,pandas.to_datetime('2016-04-10'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
weekend,pandas.to_datetime(date),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(electric_total.index),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(electric_total.index),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,pandas.to_datetime('2015-01-01'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,pandas.to_datetime('2016-04-10'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"defsingle_building_meters_overlay(code,start","pandas.to_datetime('2014-04-1123:30:00'),end=pandas.to_datetime('2016-04-1023:30:00')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"_,ax","matplotlib.pyplot.subplots(rows,cols,figsize=(size*cols,size*rows)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(len(layers),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
result,pandas.DataFrame([[(num_one+num_three),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
final_result_food,pandas.DataFrame(np.zeros((len(state),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
final_result_activity,pandas.DataFrame(np.zeros((len(state),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
state_data,"pandas.read_csv('../data/state.csv',index_col=[0],header=None,usecols=[0,1,2])",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(file_name,header=None)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(file_name,header=None)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
o_data,"pandas.read_csv(from_csv,header=None,names=['id','state','tweet','food','activity','target'],
index_col=['id'])",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
"plt.errorbar(np.array(mean_list),x,xerr",numpy.array(error_list),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
"m,se",numpy.mean(a),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
years,numpy.arange(len(oil),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
oil,numpy.log(oil.DCOILWTICO.as_matrix(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
snp,numpy.log(snp.as_matrix(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.concat([oil,snp],axis=1,sort=True)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
snp,pandas.read_csv('./data/SNP.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
oil,pandas.read_csv('./data/OIL.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.read_csv('temp.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('lab1.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,numpy.sin(time_steps),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.sin(time_steps),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
time_steps,"numpy.linspace(0,np.pi,seq_length+1)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
time_steps,"numpy.linspace(0,np.pi,seq_length)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('Explor_uscecchini28.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test_nm,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"false_positive_rate,recall,thresholds","sklearn.metrics.roc_curve(y_test_nm,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self._table,"numpy.zeros((bins**observation_space.shape[0],action_space.n)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
self._learning_rates,"numpy.ones(
(bins**observation_space.shape[0],action_space.n)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_train,"numpy.asarray(df[['x1','x2']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_test,"numpy.asarray(dft[['x1','x2']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(x1min,x1max,100)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.linspace(x2min,x2max,100)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(x,y)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_all,"pandas.concat([df,dft])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('../dataset/knnClassify3c.csv',delimiter=';')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dft,"pandas.read_csv('../dataset/knnClassify3c-test.csv',delimiter=';')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.AdaBoostClassifier(classifier,n_estimators=n_estimators,algorithm='SAMME')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,cross_val_score(estimator=sklearn.ensemble.AdaBoostClassifier(DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=maxdepth),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,cross_val_score(estimator=sklearn.tree.DecisionTreeClassifier(max_depth=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.tree.DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.tree.DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,sklearn.model_selection.cross_val_score(estimator=DecisionTreeClassifier(max_depth=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,sklearn.model_selection.cross_val_score(estimator=BaggingClassifier(DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,sklearn.model_selection.cross_val_score(estimator=RandomForestClassifier(n_estimators=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,sklearn.model_selection.cross_val_score(estimator=AdaBoostClassifier(DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=cMap,alpha=.7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=cMap,alpha=.7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=cMap,alpha=.7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=cMap,alpha=.7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,4,figsize=(20,5)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(2,3,figsize=(20,8)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(3,4,figsize=(16,8)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(3,4,figsize=(16,8)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
nonzeroy,numpy.array(nonzero[0]),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
nonzerox,numpy.array(nonzero[1]),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
hist_features,"numpy.concatenate((channel1_hist[0],channel2_hist[0],channel3_hist[0])",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
heat,"numpy.zeros_like(img[:,:,0])",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
heat,"numpy.zeros_like(img[:,:,0])",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
heatmap,"numpy.clip(heat,0,255)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
heatmap,"numpy.clip(heat,0,255)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
hog_features,numpy.ravel(hog_features),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
y,numpy.hstack((np.ones(len(car_features),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
hog_features,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
X,"numpy.vstack((car_features,notcar_features)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
imcopy,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
else:feature_image,numpy.copy(image),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
else:feature_image,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
imcopy,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
draw_image,numpy.copy(image),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
draw_img,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
img_copy,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
channel1_hist,"numpy.histogram(img[:,:,0],bins=nbins,range=bins_range)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
channel2_hist,"numpy.histogram(img[:,:,1],bins=nbins,range=bins_range)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
channel3_hist,"numpy.histogram(img[:,:,2],bins=nbins,range=bins_range)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t2,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t2,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
svc,sklearn.svm.LinearSVC(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fruits,pandas.read_table('fruit_data_with_colors.txt'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=1-s)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results_race,pandas.DataFrame({'prediction':model.predict(X),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.get_dummies(df,columns=['race','c_charge_degree'])",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
raw_df,pandas.read_csv('compas-data/compas-scores-two-years.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
y_train,numpy.ravel(y_train),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X_train,X_held_out,y_train,y_held_out,indices_train,indices_test","sklearn.model_selection.train_test_split(
X,
df[target],
df.index,
test_size=held_out_size,
random_state=random_state)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=n_splits,
random_state=random_state)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lik_model,"scipy.optimize.minimize(lik,parameters,method='L-BFGS-B')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.read_table(text),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(url),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
jHistory,numpy.empty(num_inters),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,"numpy.empty((100,100)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"numpy.concatenate((np.ones((m,1)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
delta,"numpy.dot(X.T,sigmoid(numpy.dot(X,theta)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(30.0,100.0,num=100)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
statinfo,os.stat(filepath),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
data_dict,"pandas.DataFrame({'Dtype':dtype,
'No.ofuniqueitems':unique_items,
'Description':[""Reviewer'suniqueidentificationnumber"",
""Nameofthedrugthatisreviewed"",
""Conditionthatisbeingtreatedwiththedrug"",
""Textofthereview"",
""Drugratingonascaleof1(worst)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
s,"pandas.DataFrame({'No.ofreviews':significant_drugs.values,
'drugName':significant_drugs.index.get_level_values(1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
p,"pandas.merge(s,final_df,how='inner',left_on=['condition','drugName'],right_on=['condition','drugName'])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df,pandas.read_csv(file),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
final_df['date'],pandas.to_datetime(final_df['date']),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
nopunc,"re.sub(r'[^a-zA-z]','',sentence)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3,random_state=101)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
g,"seaborn.barplot(conditions.index,conditions,palette=""BuGn_r"")",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
nb,sklearn.naive_bayes.BernoulliNB(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
svc,"sklearn.svm.SVC(gamma='scale',probability=True)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
svc,"sklearn.svm.SVC(C=10,cache_size=200,class_weight=None,coef0=0.0,
decision_function_shape='ovr',degree=3,gamma=0.01,kernel='rbf',
max_iter=-1,probability=True,random_state=None,shrinking=True,
tol=0.001,verbose=False)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
d_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
forest,sklearn.ensemble.RandomForestClassifier(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
grid,sklearn.model_selection.GridSearchCV(SVC(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
accuracies_mean,numpy.array([np.mean(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
accuracies_std,numpy.array([np.std(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_cycle,"numpy.concatenate([xfori,xinenumerate(X_train_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_cycle,"numpy.concatenate([yfori,yinenumerate(y_train_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
idxs,numpy.flatnonzero(y_train==y),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_pred==val_y),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_folds,"numpy.array_split(X_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_folds,"numpy.array_split(y_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_one,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_two,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
trained_data,"pandas.concat([deng_features_df,deng_labels_df],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
deng_features_df,"pandas.read_csv(""./data/dengue_features_train.csv"",sep="","",index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
deng_labels_df,"pandas.read_csv(""./data/dengue_labels_train.csv"",sep="","",index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
deng_features_test_df,"pandas.read_csv(""./data/dengue_features_test.csv"",sep="","",index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,"pandas.read_csv(""./data/submission_format.csv"",
index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
trained_data['week_start_date'],pandas.to_datetime(trained_data['week_start_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission.total_cases,"numpy.concatenate([predictions_sj,predictions_iq])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sj_corr_heat,seaborn.heatmap(sj_corr),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iq_corr_heat,seaborn.heatmap(iq_corr),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lassoreg,"sklearn.linear_model.Lasso(alpha=alpha,normalize=True,max_iter=1e5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mae,"sklearn.metrics.mean_absolute_error(valid_labels,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.get_dummies(train),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.get_dummies(test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
white,pandas.get_dummies(white),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
red,"pandas.read_excel(""/Users/sagarjoshi/Desktop/Project/WineQualityDataset/winequality-red.xlsx"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
white,"pd.red=pandas.read_excel(""/Users/sagarjoshi/Desktop/Project/WineQualityDataset/winequality-white.xlsx"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lreg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logregW,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
missing_data,pandas.DataFrame({'MissingRatio':data_na}),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'Id':ids,'SalePrice':np.expm1(linear_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'Id':ids,'SalePrice':np.expm1(gdbt_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'Id':ids,'SalePrice':np.expm1(rf_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'Id':ids,'SalePrice':np.expm1(blending_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df_train,df_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.get_dummies(df),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv(data_path+'house_test.csv.gz'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
linear,"sklearn.linear_model.LinearRegression(normalize=False,fit_intercept=True,copy_X=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gdbt,"sklearn.ensemble.GradientBoostingRegressor(tol=0.1,subsample=0.37,n_estimators=200,max_features=20,
max_depth=6,learning_rate=0.03)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
lbl,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=300,min_samples_split=9,min_samples_leaf=10,
max_features='sqrt',max_depth=8,bootstrap=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
Nt1t0,numpy.array(psi),CLUSTER_23,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_1
Ntw,numpy.zeros(len(parent_model.topic_names),CLUSTER_23,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_1
indexes_child,"numpy.argmax(psi_bayes,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_1
data,json.load(f),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,json.load(f),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,json.load(f),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
context_lengths,numpy.array(context_lengths),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
l1_par_range,numpy.sqrt(2*3.0/(DIM_USER+DIM_L1),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
l2_par_range,numpy.sqrt(2*3.0/(DIM_L1+DIM_L2),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,numpy.load(f),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,numpy.load(f),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,numpy.load(f),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,numpy.load(f),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
car,matplotlib.pyplot.imread(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
car,matplotlib.pyplot.imread(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
car,matplotlib.pyplot.imread(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
car,matplotlib.pyplot.imread(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_right,numpy.array(y_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y2_correct,numpy.array(y_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('creditcard.csv',low_memory=False)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=10),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,sklearn.preprocessing.scale(X2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
average_length,numpy.mean([len(x),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,numpy.sin(f1*t*np.pi),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0.,5.,500)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.,5.,500)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
hilbert,numpy.imag(sig.hilbert(y),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
p_test,"numpy.array([0.2,0.2,0.2,0.4])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
q_test,"numpy.array([0.3,0.3,0.1,0.3])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ba_deg_distr,"numpy.array([.1,.4,.3,0,.2])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
adjacency,numpy.load('../data/fma_metadata/adjacency.npy'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
app_train,pandas.get_dummies(app_train),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
app_test,pandas.get_dummies(app_test),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
app_train,pandas.read_csv(f_app_train),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
app_test,pandas.read_csv(f_app_test),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
log_reg,"sklearn.linear_model.LogisticRegression(C=0.0001,solver='liblinear')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
index,"numpy.arange(1,predicted_labels.shape[0]+1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sites_dict_df,pandas.DataFrame(list(site_dict.keys(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predicted_df,"pandas.DataFrame(predicted_labels,
index=np.arange(1,predicted_labels.shape[0]+1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
full_df,"pandas.concat([train_df.drop('target',axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df,"pandas.read_csv('../../data/train_sessions.csv',
index_col='session_id')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df,"pandas.read_csv('../../data/test_sessions.csv',
index_col='session_id')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
full_sites_sparse,"scipy.sparse.csr_matrix(([1]*sites_flatten.shape[0],
sites_flatten,
range(0,sites_flatten.shape[0]+10,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
img_model,"numpy.reshape(img_gray,(1,96,96,1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
img_copy,numpy.copy(img),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
img_copy_1,numpy.copy(img),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
jewels,os.listdir('jewels'),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
models,os.listdir('models'),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
words_matrix,"pandas.DataFrame(words_dict,range(len(sentences)",CLUSTER_1,CLUSTER_1,CLUSTER_9,CLUSTER_0,CLUSTER_1
unique_uid,"pandas.concat([unique_uid,df_part],ignore_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df,df_part],ignore_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_part,"pandas.merge(left=df_part,right=unique_uid,how='left',on='uid')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
unique_uid,"pandas.read_csv(file,sep=';',compression='gzip',usecols=[0],skiprows=0,nrows=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_part,"pandas.read_csv(file,sep=';',usecols=[0],
skiprows=1+i*for_loop[1],nrows=for_loop[1],names=['uid'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
unique_uid,pandas.read_csv('unique_uid.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_part,"pandas.read_csv(file,sep=';',
skiprows=1+i*for_loop[1],nrows=for_loop[1],names=['uid','action','level','event_time'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('clear_df_0.csv',usecols=[1,2,3,4])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_part,pandas.read_csv('clear_df_'+str(i),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
xfit,"numpy.linspace(-1,3.5)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
xfit,"numpy.linspace(-1,3.5)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(xlim[0],xlim[1],30)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.linspace(ylim[0],ylim[1],30)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
xy,numpy.vstack([X.ravel(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"Y,X","numpy.meshgrid(y,x)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,3)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,3)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
svc,"sklearn.svm.SVC(kernel='linear',class_weight='balanced')",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
faces,sklearn.datasets.fetch_lfw_people(min_faces_per_person=60),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=150,whiten=True,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.pipeline.make_pipeline(pca,svc)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"Xtrain,Xtest,ytrain,ytest","sklearn.model_selection.train_test_split(faces.data,faces.target,
random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(model,param_grid)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
mat,"sklearn.metrics.confusion_matrix(ytest,yfit)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,json.loads(open(DATA),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,json.loads(open(DATA),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,json.loads(open(DATA),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,json.loads(open(DATA),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
similarity_matrix,"numpy.zeros((n_articles,n_articles)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
hm,"seaborn.heatmap(corrmat,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10})",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
hm,"seaborn.heatmap(corrmat,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10})",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Length,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Diameter,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Height,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Whole_weight,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Shucked_weight,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Viscera_weight,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Shell_weight,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Shell_weight,y=abalone_data.Rings,hue=abalone_data.Sex)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data_I.Shell_weight,y=abalone_data_I.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
abalone_data,"pandas.read_csv(""abalone.original.csv"",header=None,names=['Sex','Length','Diameter','Height','Whole_weight','Shucked_weight','Viscera_weight','Shell_weight','Rings'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
results,numpy.zeros((len(sequences),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
shap_test,"pandas.DataFrame(data=shap_values,index=X_test.index,columns=X_test.columns)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
foo,"pandas.DataFrame({c:df.loc[X_test.index,c],
'shap':agg_shap_test[c]})",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
dummy_df,pandas.get_dummies(df),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../data/auto_clean.csv'),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=0.5,test_size=0.5)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.RandomForestRegressor(n_estimators=100),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
idxs,numpy.flatnonzero(y_train==y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
training_accuracy,numpy.mean(y_pred_train==y_train),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
validation_accuracy,numpy.mean(y_pred_val==y_val),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X,"numpy.array([[-2,-1],[-2,1],[2,-1],[2,1],[-1,-1],[-1,1],[1,-1],[1,1]])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,"numpy.array([-1,-1,-1,-1,1,1,1,1])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,numpy.log(X),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-2,2,500)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x_grid,numpy.linspace(X.min(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x_grid,numpy.linspace(X.min(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x_grid,numpy.linspace(X.min(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"xx1,xx2","numpy.meshgrid(np.arange(X[:,0].min()",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('california.dat'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=rows,ncols=columns,figsize=(15,4)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
abd,"sklearn.ensemble.AdaBoostClassifier(algorithm='SAMME',n_estimators=5,base_estimator=DecisionTreeClassifier(max_depth=1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
abd,"AdaBoostClassifier(algorithm='SAMME',n_estimators=5,base_estimator=sklearn.tree.DecisionTreeClassifier(max_depth=1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
gbr,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=10,learning_rate=0.3)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
gbr,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=10,learning_rate=0.3)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
gbr,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=10,learning_rate=0.3)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df,df_ans.values,test_size=0.3,random_state=13)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train,"pandas.DataFrame(list(zip(csv_data['text'][:mid],csv_data['sentiment'][:mid])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test,"pandas.DataFrame(list(zip(csv_data['text'][mid+1:],csv_data['sentiment'][mid+1:])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_freq,pandas.DataFrame(list(zip(freq_word.keys(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
csv_data,pandas.read_csv('GOP_REL_ONLY.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
hits,numpy.sum(res==y_test),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_train,numpy.matrix(padded_tweets),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_test,numpy.matrix(padded_tweets),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
thisplot,matplotlib.pyplot.bar(range(10),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
_,matplotlib.pyplot.xticks(range(10),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
train,pandas.read_csv('../input/train.csv'),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
test,pandas.read_csv('../input/test.csv'),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
predicted_label,numpy.argmax(predictions_array),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
predicted_label,numpy.argmax(predictions_array),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
old_windowed_buf,numpy.zeros(windowsize),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
beat_sequence,"numpy.zeros(numberofbeats,dtype=int)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.zeros((numberofbeats*step,)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frame_sizes,numpy.zeros(numberofbeats),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frame_temp2,"numpy.zeros([steps_in[n],])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
pitch,numpy.zeros(numberofbeats),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
outw,"numpy.empty(0,dtype=np.int16)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.empty(0,dtype=np.int16)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.empty(0,dtype=np.int16)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.empty(0,dtype=np.int16)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
clusters[str(i)],numpy.flatnonzero(labels==i),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
pitch[0],"numpy.argmax(np.mean(X[5:,:],axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
pitch[n],"numpy.argmax(np.mean(X_temp[5:,:],axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data[len(data)-end_size:len(data)]*,"numpy.linspace(1,0,end_size)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data[:end_size]*,"numpy.linspace(1,0,end_size)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps,numpy.diff(onset_array),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps,numpy.diff(onset_sample_array1),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps_in,numpy.diff(frame_input),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps_out,numpy.diff(frame_output),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps,numpy.diff(onset_array),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
buf,"numpy.append(buf,np.zeros(windowsize-len(buf)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
outw,"numpy.append(outw,np.int16(output*32767.0)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"numpy.append(X,X_temp.reshape(numberofrows,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frames,"numpy.append(onset_samples,[data.shape[0]])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frames,"numpy.append([0],frames)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"numpy.append(X,X_temp.reshape(numberofrows,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.append(data_new,data02[onset_sample_array[beat_sequence[n]]:onset_sample_array[beat_sequence[n]+1]])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.append(data_new,temp_frame)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.append(data_new,frame_temp)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"numpy.append(X,X_temp.reshape(numberofrows,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data,"numpy.pad(data,(0,end_size-len(data)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
temp_frame,"numpy.pad(temp_frame,(0,steps[n]-len(temp_frame)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frames,numpy.unique(frames),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
buf,numpy.fft.irfft(freqs),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"sklearn.preprocessing.normalize(X,axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"sklearn.preprocessing.normalize(X,axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"sklearn.preprocessing.normalize(X,axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
verts,"numpy.append(verts,[0,0])",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
pts,"numpy.column_stack((xrData.clon,xrData.clat,xrData.isel(height=0,time=0)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
verts,"numpy.column_stack((xrData.clon_bnds.stack(z=('vertices','ncells')",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
n,"numpy.column_stack((n1,n2,n3)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
pts,"numpy.column_stack((xrData.clon,xrData.clat,xrData.isel(height=0,time=0)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
verts,"numpy.column_stack((xrData.clon_bnds.stack(z=('vertices','ncells')",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
n,"numpy.column_stack((n1,n2,n3,xrData.isel(height=0,time=0)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
verts,"pandas.DataFrame(pts*3,columns=['x','y','z'])",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
tris,"pandas.DataFrame(n,columns=['v0','v1','v2'])",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
verts,"pandas.DataFrame(verts,columns=['x','y'])",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
tris,"pandas.DataFrame(n,columns=['v0','v1','v2','TR_stn'],dtype=np.int64)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
r,"requests.get(project[0],auth=(ghuser,token)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
obj,json.loads(r.text),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
projects,collections.defaultdict(set),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
existing_projects,collections.defaultdict(list),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
error_occurences[lang],collections.defaultdict(list),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
normalized_error_codes,collections.defaultdict(lambda:collections.defaultdict(dict),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
plot_signifs,collections.defaultdict(dict),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
Project,"collections.namedtuple('Project',['url','name'])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
target_signif[bg_lang],collections.OrderedDict(sorted(target_signif[bg_lang].items(),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
twosample_results,"scipy.stats.mannwhitneyu(bg_data,target_data)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
fig,matplotlib.pyplot.gcf(),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
existing_projects[TARGET_LANGUAGE],"random.sample(existing_projects[TARGET_LANGUAGE],100)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
w,pandas.DataFrame(pd.Series(wiki_links),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
geo_props,pandas.Series(row),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
fares,"pandas.read_csv('http://web.mta.info/developers/data/nyct/fares/fares_181215.csv',skiprows=2)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
w,pandas.read_csv('wiki_links.csv'),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
page,"requests.get(""https://www.google.com/search?q=""+search_string+'station')",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
page,requests.get(x['wiki']),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
buffer,collections.deque(maxlen=span),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
batch,"numpy.ndarray(shape=(batch_size,skip_window*2)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
labels,"numpy.ndarray(shape=(batch_size,1)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
valid_examples,numpy.array(random.sample(range(valid_window),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
valid_examples,numpy.array(random.sample(range(valid_window),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
statinfo,os.stat(filename),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
tsne,"sklearn.manifold.TSNE(perplexity=30,n_components=2,init='pca',n_iter=5000,method='exact')",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
tsne,"sklearn.manifold.TSNE(perplexity=30,n_components=2,init='pca',n_iter=5000,method='exact')",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
df,"pandas.DataFrame(dict(carat=carat,price=price,color=color)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\iris.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data1,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\titanic.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data3,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\boston_house_price.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\iris.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
loc,"numpy.arange(0,max(label)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta,"numpy.arange(0.,2.,1./180.)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
z,numpy.cos(r),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r,numpy.sqrt(x**2+y**2),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-2,2,60)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.linspace(-2,2,60)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x,y","numpy.meshgrid(x,y)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fit,"numpy.polyfit(x,y,1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cb,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
img,matplotlib.pyplot.imread(r'D:\Desktop_bkp_on_2ndFeb\Snaps\Newfolder\DSC_8210.jpg'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,seaborn.load_dataset('iris'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,seaborn.load_dataset('iris'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_imp,"pandas.DataFrame(rfc.feature_importances_,index=X_train.columns,
columns=['importance'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_imp,"pandas.DataFrame(ada.feature_importances_,index=X_train.columns,
columns=['importance'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df,"pandas.get_dummies(train_df,prefix_sep='_',drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df,"pandas.read_csv(""fake_job_postings.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfc,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=16)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.ShuffleSplit(n_splits=100,test_size=0.3,random_state=16)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(rfc,X_train,y_train,cv=cv)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(ada,X_train,y_train,cv=cv)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ada,"sklearn.ensemble.AdaBoostClassifier(n_estimators=num_trees,random_state=16)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dockless_data_df,pandas.read_csv(csv_filepath),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
time,"datetime.datetime.strptime(input_time,""%m/%d/%Y%I:%M:%S%p"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
tips,seaborn.load_dataset('tips'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
duration,time.time(),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
losses,numpy.asarray(losses),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
naive_classifier,"sklearn.naive_bayes.MultinomialNB(fit_prior=False,alpha=0.01)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.concat(frames),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_3,pandas.read_csv('../../data/qald-3-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_4,pandas.read_csv('../../data/qald-4-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_5,pandas.read_csv('../../data/qald-5-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_6,pandas.read_csv('../../data/qald-6-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_7,pandas.read_csv('../../data/qald-7-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_8,pandas.read_csv('../../data/qald-8-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_9,pandas.read_csv('../../data/qald-9-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv(""../""+d)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv(""../""+d)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv(""../""+d)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
words,pandas.DataFrame(data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,"pandas.cut(non_sw_values,BIN_COUNT,labels=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_wide,"pandas.pivot_table(
data,
values=list(value_funcs.keys()",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_wide['target'],"pandas.pivot_table(
data,
values=['target'],
index=['destination_id','occurrence','source_id','position',
'word_position'],
columns=['feature']
)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_wide,"pandas.pivot_table(
data[data.target],
values='pca_value',
index=['cluster_id','destination_id','occurrence',
'position'],
columns=['feature']
)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(data=data[data['feature']
.map(lambdaf:finfeatures)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svalues,numpy.array(sorted(finite_values),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
is_stopword,numpy.array([(lemmainstopwords),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
heights,numpy.zeros(bin_count),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h0s,numpy.zeros(bin_count),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
heights,numpy.zeros(BIN_COUNT),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h0s,numpy.zeros(BIN_COUNT),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
heights,numpy.zeros(BIN_COUNT),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h0s,numpy.zeros(BIN_COUNT),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ours,numpy.where(svalues==value),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins_different,numpy.where(differences),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins_different+,numpy.ones_like(bins_different),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
are_different,numpy.any(differences),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
are_different,numpy.any(differences),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(2,1,figsize=(8,8)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,"sklearn.linear_model.LogisticRegression(penalty='l2',class_weight='balanced',
fit_intercept=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly,"sklearn.preprocessing.PolynomialFeatures(degree=2,interaction_only=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components='mle'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
numFigs,math.ceil(math.sqrt(f),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
Entry,"collections.namedtuple('Entry',['value','cluster'])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
TEntry,"collections.namedtuple('TEntry',['value','topic'])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
files,os.listdir(dataDir),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
unescaped,"re.sub(r'[\^]','',re.sub(r'[\\]','',t)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
df_merged,"pandas.merge(df_emp,df_fixed)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""data/company_data.csv"",encoding=""iso-8859-1"",sep=""\t"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_emp,"pandas.read_csv(""data/employees.csv"",sep=""\t"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_merged[""log_Employees""]","numpy.log10(df_merged[""Employees""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_merged[""log_Revenue""]","numpy.log10(df_merged[""Revenue""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_merged[""log_Assets""]","numpy.log10(df_merged[""Assets""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_merged[""log_MarketCap""]","numpy.log10(df_merged[""MarketCap""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"(osm,osr),(slope,intercept,r)","scipy.stats.probplot(x,dist='norm',plot=None)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.arange(1000),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
y,numpy.zeros(200),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
y_index_0,numpy.where(y==0),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
y_index_1,numpy.where(y==1),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"x_train,y_train","numpy.concatenate([train_data_y_1,train_data_y_0])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"x_test,y_test","numpy.concatenate([test_data_y_1,test_data_y_0])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"train_data_y_0,test_data_y_0,train_label_y_0,test_label_y_0","sklearn.model_selection.train_test_split(X[y_index_0],y[y_index_0],test_size=10)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"train_data_y_1,test_data_y_1,train_label_y_1,test_label_y_1","sklearn.model_selection.train_test_split(X[y_index_1],y[y_index_1],test_size=10)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
tm_len_df,pandas.DataFrame(tm_len_list),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
get_tm_loc,pandas.DataFrame(get_tm_loc),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
positive_tm_set,"pandas.concat([pos_tm_prt,positive_pred_tm],sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
negative_tm_set,"pandas.concat([neg_tm_prt,negative_pred_tm],sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_tmd_length_final,"pandas.concat([pos_tmd_length,pos_tmd_len],axis=0,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
neg_tmd_length_final,"pandas.concat([neg_tmd_length,neg_tmd_len],axis=0,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
tm_locations,"pandas.concat([tm_proteins,get_tm_loc],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
all_pos_tms,"pandas.concat([tm_locations,pred_pos_tmd],sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
all_neg_tms,"pandas.concat([tm_locations,pred_neg_tmd],sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_tm_merged,"pandas.concat([all_pos_tms,pos_set_ASA],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_tm_calc_dist,"pandas.concat([pos_tm_merged,pos_tm_ptms],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
neg_tm_merged,"pandas.concat([all_neg_tms,neg_set_ASA],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
neg_tm_calc_dist,"pandas.concat([neg_tm_merged,neg_tm_ptms],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
positive_set_tm_features,"pandas.concat(pos_tm_feature_list,axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
negative_set_tm_features,"pandas.concat(neg_tm_feature_list,axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
positive_set,"pandas.read_csv(""data/positive_set_density_for_tm.csv"",index_col='uniprot_id')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
negative_set,"pandas.read_csv(""data/negative_set_density_for_tm.csv"",index_col='uniprot_id')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
tm_proteins,"pandas.read_csv(""data/Raw_datasets/TM_proteins.csv"",index_col='Entry')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_pred_tm,"pandas.read_csv(""data/prediction_results/pos_predicted_tms.csv"",index_col='uniprot_id')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
neg_pred_tm,"pandas.read_csv(""data/prediction_results/neg_predicted_tms.csv"",index_col='uniprot_id')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
parsed_lines,"re.findall('\s([0-9]{1,4})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
split_array,"numpy.asarray(arr,dtype=int)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
split_array,"numpy.asarray(arr,dtype=int)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
t1,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
t1,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lst,"random.choices(range(1,max_num+1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lst,"random.choices(range(1,max_num+1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lst,"random.choices(range(1,max_num+1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lst,"random.choices(range(1,max_num+1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
tick_marks,numpy.arange(len(classes),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_acc,numpy.zeros((Ks-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_acc,numpy.zeros((Ks-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_acc,numpy.zeros((Dpth-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_acc,numpy.zeros((Dpth-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_acc[n-1],numpy.std(yhat==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_acc[n-1],numpy.std(yhat==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,numpy.linspace(df.Principal.min(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,numpy.linspace(df.age.min(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,numpy.linspace(df.dayofweek.min(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Feature,"pandas.concat([Feature,pd.get_dummies(df['education'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_Feature,"pandas.concat([test_Feature,pd.get_dummies(test_df['education'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('loan_train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df,pandas.read_csv('loan_test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['due_date'],pandas.to_datetime(df['due_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['effective_date'],pandas.to_datetime(df['effective_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df['due_date'],pandas.to_datetime(test_df['due_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df['effective_date'],pandas.to_datetime(test_df['effective_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_X,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
KNCmodel,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
KNCmodel,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,yhat)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,yhat)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DTCmodel,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=n)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DTCmodel,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
out,"sklearn.tree.export_graphviz(DTCmodel,feature_names=featureNames,out_file=dot_data,class_names=['PAIDOFF','COLLECTION'],filled=True,special_characters=True,rotate=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
SVMmodel,"sklearn.svm.SVC(kernel='rbf',gamma='scale')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
SVMmodel_matrix,"sklearn.metrics.confusion_matrix(y_test,yhat,labels=[0,1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LRmodel_matrix,"sklearn.metrics.confusion_matrix(y_test,yhat,labels=[0,1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LRmodel,sklearn.linear_model.LogisticRegression(C=0.01),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
KNCF1,"sklearn.metrics.f1_score(test_y,KNCmodel.predict(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DTCF1,"sklearn.metrics.f1_score(test_y,DTCmodel.predict(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
SVMF1,"sklearn.metrics.f1_score(test_y,SVMmodel.predict(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LRF1,"sklearn.metrics.f1_score(test_y,LRmodel.predict(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LRLL,"sklearn.metrics.log_loss(test_y,LRmodel.predict_proba(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
foo,"numpy.array([1,2,3,4])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
foo2,"numpy.array([[1,2,3,4],
[5,6,7,8]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
value,"numpy.dot(a.T,a)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
matrix,"numpy.dot(a,a.T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
exp_a,numpy.exp(a),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame([{'age':34,'name':'tasos'},
{'age':43,'name':'georgia'}])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
foo,"pandas.Series([34,'tasos'])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
foo,"pandas.Series({'age':34,'name':'tasos'})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ts,pandas.Timestamp('2016Jul110:00:00'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dt,"pandas.date_range('2016Jul110:00:00',periods=10,freq='D')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dt,"pandas.date_range('2016Jul110:00:00','2016Jul1010:00:00',freq='D')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.read_table('path',
sep=',',
header=None,
names=['col1','col2'],
index='col1'
skiprows=12,
skipfooter=12,
usecols=[0,4]
nrows=12)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
accuracies_mean,numpy.array([np.mean(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
accuracies_std,numpy.array([np.std(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_fold,"numpy.concatenate(np.delete(X_train_folds,i,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_fold,"numpy.concatenate(np.delete(y_train_folds,i,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
idxs,numpy.flatnonzero(y_train==y),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_validation),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_folds,"numpy.hsplit(y_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_folds,"numpy.vsplit(X_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_one,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_two,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r,numpy.exp(-(X**2),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xfit,"numpy.linspace(-1,3.5)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xfit,"numpy.linspace(-1,3.5)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(xlim[0],xlim[1],30)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.linspace(ylim[0],ylim[1],30)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xy,numpy.vstack([X.ravel(),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"Y,X","numpy.meshgrid(y,x)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(projection='3d'),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(3,5)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(4,6)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(kernel='rbf',C=1E6)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=C)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
svc,"sklearn.svm.SVC(kernel='rbf',class_weight='balanced')",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
faces,sklearn.datasets.fetch_lfw_people(min_faces_per_person=60),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.pipeline.make_pipeline(pca,svc)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mat,"sklearn.metrics.confusion_matrix(ytest,yfit)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""thanksgiving.csv"",encoding=""Latin-1"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get(url),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(chapter_characters),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(r'pan.csv'),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
characters,collections.defaultdict(int),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
a,"numpy.array([1,2,3.4])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,"numpy.array([3,6,4])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
g,numpy.exp(a),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
script_folder,os.getcwd(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
const_subscription_id,"os.getenv(""SUBSCRIPTION_ID"",default=""<yoursubscriptionidhere>"")",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
workspace_name,"os.getenv(""WORKSPACE_NAME"",default=""customer-churn"")",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
resource_group_name,"os.getenv(""RESOURCE_GROUP_NAME"",default=""amls-rg"")",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
create_new_rg,"os.getenv(""CREATE_NEW_RG"",default=True)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
location_name,"os.getenv(""LOCATION_NAME"",default=""eastus"")",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
idxs,numpy.where((y_test!=cls),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean_feat,"numpy.mean(X_train_feats,axis=0,keepdims=True)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
std_feat,"numpy.std(X_train_feats,axis=0,keepdims=True)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_feats,"numpy.hstack([X_train_feats,np.ones((X_train_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_val_feats,"numpy.hstack([X_val_feats,np.ones((X_val_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test_feats,"numpy.hstack([X_test_feats,np.ones((X_test_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
testacc,"numpy.loadtxt(""LBFGS_minibatch_fcNN_testacc.txt"")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
trainacc,"numpy.loadtxt(""LBFGS_minibatch_fcNN_trainacc.txt"")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
testloss,"numpy.loadtxt(""LBFGS_minibatch_fcNN_testloss.txt"")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
trainloss,"numpy.loadtxt(""LBFGS_minibatch_fcNN_trainloss.txt"")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(venue_details,columns=column_names)",CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(venue_details,columns=column_names)",CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
new_york_data,pandas.DataFrame(columns=column_names),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
indian_rest_ny,pandas.DataFrame(columns=column_names),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
indian_rest_stats_ny,pandas.DataFrame(columns=column_names),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
ny_neighborhood_stats,"pandas.merge(ny_neighborhood_stats,new_york_data,on='Neighborhood')",CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
indian_rest_stats_ny_csv,pandas.read_csv('indian_rest_stats_ny.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
resp,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
fruits,pandas.read_table('fruit_data_with_colors.txt'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_set,"numpy.array(training_set,dtype='int')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_set,"numpy.array(test_set,dtype='int')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ratings,numpy.zeros(nb_movies),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
movies,"pandas.read_csv('./Boltzmann_Machines/ml-1m/movies.dat',sep='::',
header=None,engine='python',encoding='latin-1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
users,"pandas.read_csv('./Boltzmann_Machines/ml-1m/users.dat',sep='::',
header=None,engine='python',encoding='latin-1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ratings,"pandas.read_csv('./Boltzmann_Machines/ml-1m/ratings.dat',sep='::',
header=None,engine='python',encoding='latin-1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
training_set,"pandas.read_csv('./Boltzmann_Machines/ml-100k/u1.base',delimiter='\t')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_set,"pandas.read_csv('./Boltzmann_Machines/ml-100k/u1.test',delimiter='\t')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
z,"numpy.array([z_at_value(Planck15.luminosity_distance,dist*u.Mpc)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tweets,"pandas.read_table(tweet_database_file_name,delimiter='\t',header=0)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
timestamps,numpy.array(timestamps),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
retweets,"numpy.array(tweets_after_candidacy['retweet_count'],dtype=float)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
favorites,"numpy.array(tweets_after_candidacy['favorite_count'],dtype=float)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
xavg,numpy.zeros(x.shape),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
yavg,numpy.zeros(y.shape),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
sorted_idx,numpy.argsort(x),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.sin(x),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,2*np.pi,10)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
xvals,"numpy.linspace(0,2*np.pi,50)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
yinterp,"numpy.interp(xvals,x,y)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,"numpy.zeros(labels.shape,dtype=np.uint8)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
"rr,cc",numpy.where(labels==i),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
"image[:,:,c]","numpy.where(
mask==1,
ccolor,
image[:,:,c]
)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
uniques,numpy.unique(labels),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
label,numpy.load(label_dir),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
P,"numpy.array([0.05,1,0.45])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
C_in,"numpy.array([10,148,103])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
C_out,"numpy.array([142,5,4])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([1,2,3])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.array([4,5,6])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
numerator,numpy.sum([P*C_out]),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
denominator,numpy.sum(P*C_in),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
numerator,numpy.sum(P*C_out),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
inter_spike_intervals,numpy.diff(spike_times),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(url,index_col=0)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"spike_indices,spike_amplitudes","scipy.signal.find_peaks(df['response'],height=0)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,"pandas.merge(X,y,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,"pandas.merge(X,y,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_cat_train_with_y_appmon,"pandas.merge(X_cat_train,model_data_final[['y','appmon']]\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_cat_oot_with_y_appmon,"pandas.merge(X_cat_OOT,data_OOT[['y','score_mon']]\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_XGBExp,"pandas.merge(data_OOT,data_OOT_XGBExp_p_score\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_XGBRandom,"pandas.merge(data_OOT,data_OOT_XGBRandom_p_score\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_XGBGrid,"pandas.merge(data_OOT,data_OOT_XGBGrid_p_score\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_XGBHyperopt,"pandas.merge(data_OOT,data_OOT_XGBHyperopt_p_score\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_final_xgboost_yzd_yyq_with_y,"pandas.merge(data_OOT_final_xgboost_yzd_yyq\
,data_OOT[['y']],left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
summary,"pandas.read_excel(os.path.join(Result_path,'all_variables_summary.xlsx')",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgb_importance_Exp,pandas.read_excel(Result_path+'/demo_xgbXGBExp模型变量重要性排序.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgb_importance_Grid,pandas.read_excel(Result_path+'/demo_xgbXGBGrid模型变量重要性排序.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgb_importance_Random,pandas.read_excel(Result_path+'/demo_xgbXGBRandom模型变量重要性排序.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgb_importance_Hyperopt,pandas.read_excel(Result_path+'/demo_xgbXGBHyperopt模型变量重要性排序.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
model_data_final['y'],"numpy.where(model_data_final.d_y_hismaxdpd>=30,1,0)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT['y'],"numpy.where(data_OOT.d_y_hismaxdpd>=30,1,0)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
"train_apply,test_apply","sklearn.model_selection.train_test_split(model_data_final.index,test_size=0.30,random_state=43)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
df,"pandas.read_csv(os.path.join('..','..','07','datasets','zillow-07-start.csv')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(os.path.join('..','datasets','advertising.csv')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(os.path.join('..','..','07','datasets','zillow-07-start.csv')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
q_table,"numpy.zeros([env.observation_space_n,env.action_space_n])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
action,numpy.argmax(q_table[stateid]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
end_time,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
r,"random.randint(1,100)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
resultado,"numpy.zeros((columnas2,renglones1)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
resultado,"numpy.zeros((columnas2,renglones1)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
columnas1,"numpy.size(matriz1,1)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
columnas2,"numpy.size(matriz2,1)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
renglones1,"numpy.size(matriz1,0)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
renglones2,"numpy.size(matriz2,0)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
lY,numpy.ceil(renglones1/2),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
lX,numpy.ceil(columnas2/2),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
tiempoInicio,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
tiempoInicio,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
cm_data,"pandas.DataFrame(cm,index=classNames,
columns=classNames)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
filtered_data,"pandas.read_sql_query(""""""SELECT*FROMReviewsWHEREScore!=3"""""",con)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
display,"pandas.read_sql_query(""""""
SELECTUserId,ProductId,ProfileName,Time,Score,Text,COUNT(*)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
display,"pandas.read_sql_query(""""""
SELECT*
FROMReviews
WHEREScore!=3ANDUserId=""AR5J8UI46CURR""
ORDERBYProductID
"""""",con)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
display,"pandas.read_sql_query(""""""
SELECT*
FROMReviews
WHEREScore!=3ANDId=44737ORId=64422
ORDERBYProductID
"""""",con)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_vec,numpy.zeros(50),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_vec,numpy.zeros(50),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
cm,"sklearn.metrics.confusion_matrix(actual_labels,predict_labels)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"fpr,tpr,threshold","sklearn.metrics.roc_curve(y_train,prob_train[:,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"fpr,tpr,threshold","sklearn.metrics.roc_curve(y_cv,prob_cv[:,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"fpr_train,tpr_train,threshold","sklearn.metrics.roc_curve(y_train,prob_train[:,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"fpr_test,tpr_test,threshold","sklearn.metrics.roc_curve(y_test,prob_test[:,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_BF_BOW,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_BF_TF_IDF,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_BF_AVG_W2V,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_BF_TF_IDF_W2V,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_KDT_BOW,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_KDT_TF_IDF,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_KDT_AVG_W2V,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_KDT_TF_IDF_W2V,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_0,"re.sub(r""http\S+"","""",sent_0)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_1000,"re.sub(r""http\S+"","""",sent_1000)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_150,"re.sub(r""http\S+"","""",sent_1500)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_4900,"re.sub(r""http\S+"","""",sent_4900)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""won't"",""willnot"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""can\'t"",""cannot"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""n\'t"",""not"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'re"",""are"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'s"",""is"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'d"",""would"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'ll"",""will"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'t"",""not"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'ve"",""have"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'m"",""am"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_0,"re.sub(""\S*\d\S*"","""",sent_0)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_1500,"re.sub('[^A-Za-z0-9]+','',sent_1500)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sentance,"re.sub(r""http\S+"","""",sentance)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sentance,"re.sub(""\S*\d\S*"","""",sentance)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sentance,"re.sub('[^A-Za-z]+','',sentance)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"data_train_BF,data_test_BF,scores_train_BF,scores_test_BF","sklearn.model_selection.train_test_split(data_BF,scores_BF,test_size=0.2,random_state=1)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"data_train_BF,data_cv_BF,scores_train_BF,scores_cv_BF","sklearn.model_selection.train_test_split(data_train_BF,scores_train_BF,test_size=0.25,random_state=1)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"data_train_KDT,data_test_KDT,scores_train_KDT,scores_test_KDT","sklearn.model_selection.train_test_split(data_KDT,scores_KDT,test_size=0.2,random_state=1)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"data_train_KDT,data_cv_KDT,scores_train_KDT,scores_cv_KDT","sklearn.model_selection.train_test_split(data_train_KDT,scores_train_KDT,test_size=0.25,random_state=1)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
knn,"sklearn.neighbors.KNeighborsClassifier(algorithm=alg,n_neighbors=k)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
knn,"sklearn.neighbors.KNeighborsClassifier(algorithm=alg,n_neighbors=optimal_k)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
response,"requests.get(image_path,stream=True)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
summary,"pandas.concat([gp,ar],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('../data/gp_grid_parkslope.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data['DATETIME'],pandas.to_datetime(data['DATETIME']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
return_volatility_1,"numpy.std(returnAll.ix[:,:,'Log_Return1'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
return_volatility_2,"numpy.std(returnAll.ix[:,:,'Log_Return2'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dat.Share[index2],numpy.floor(dat.Position[index1]*(1-percent),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tempYear,pandas.DatetimeIndex(dictYears[yr]),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dateRange,pandas.DatetimeIndex(dateRange),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../ETF.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
date,pandas.to_datetime(df.Ticket),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
im,numpy.array(im),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
prediction,"numpy.argmax(logits,1)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
self.trees,"numpy.zeros(self.size,dtype=bool)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.fires,numpy.zeros((self.size),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fires,"numpy.zeros((self.size[0]+2,self.size[1]+2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
PopulationTaxes,numpy.zeros((N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
l_vec,numpy.empty(N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
c_vec,numpy.empty(N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
w_vec,"numpy.linspace(0.5,1.5,N)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
sol_case3,"scipy.optimize.minimize(
value_of_choice_tax,initial_guess,method='Nelder-Mead',args=(PopulationWage,e,v,m)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
solution,"scipy.optimize.minimize_scalar(labor_supply,method='bounded',\
bounds=(0,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,4)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
"fig,(axes_technical,axes_volume,axes_macd,axes_ohlc)","matplotlib.pyplot.subplots(4,1,figsize=(16,16)",CLUSTER_8,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
Dataset,"collections.namedtuple('Dataset','exchangedf')",CLUSTER_8,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start_date,"datetime.datetime(2017,11,1)",CLUSTER_8,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
end_date,"datetime.datetime(2017,12,31)",CLUSTER_8,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
news_time,time.mktime(news_time),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,time.mktime(news_time),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
three_oclock,time.mktime(three_oclock),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
five_oclock,time.mktime(five_oclock),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,time.mktime(news_time),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,time.mktime(news_time),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
today,"time.strftime(""%Y/%m/%d"",time.localtime()",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,"time.strptime(news_time,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,"time.strptime(news_time,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
three_oclock,"time.strptime(three_oclock,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
five_oclock,"time.strptime(five_oclock,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,"time.strptime(news_time,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,"time.strptime(news_time,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
now,time.time(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
now,datetime.datetime.now(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
delta,datetime.timedelta(days=3),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
leftDegMin,"numpy.array([-90,-90,-150,0,-90,-90,-90])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
leftDegMax,"numpy.array([90,70,150,120,90,90,90])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
rightDegMin,"numpy.array([-90,-90,-150,0,-90,-90,-90])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
rightDegMax,"numpy.array([90,70,150,120,90,90,90])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
efP,"numpy.asarray([efP.x,efP.y,efP.z])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
efE,numpy.asarray(efE),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
jointAngles,numpy.zeros(len(cAngles),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
J_plus,"numpy.zeros((num_parameters,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
J_minus,"numpy.zeros((num_parameters,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
gradapprox,"numpy.zeros((num_parameters,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Z1,"numpy.dot(W1,X)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Z2,"numpy.dot(W2,A1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Z3,"numpy.dot(W3,A2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
logprobs,numpy.multiply(-np.log(A3),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
submission,"pandas.DataFrame({'Id':Id,
'SalePrice':predictions})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
housing,pandas.read_csv(path+'train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
housing_test,pandas.read_csv(path+'test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sample_submission,pandas.read_csv(path+'sample_submission.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_rmsle,"numpy.sqrt(mean_squared_log_error(y_train_poly,y_pred_train)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
valid_rmsle,"numpy.sqrt(mean_squared_log_error(y_valid_poly,y_pred_valid)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X,y,
random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_poly,X_valid_poly,y_train_poly,y_valid_poly","sklearn.model_selection.train_test_split(X_poly,y,
random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
polyreg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
polyreg_lasso,sklearn.linear_model.Lasso(alpha=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.Lasso(alpha=alpha),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
polyreg_ridge,sklearn.linear_model.Ridge(alpha=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.Ridge(alpha=alpha),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
polyreg_elasticnet,sklearn.linear_model.ElasticNet(alpha=200),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.ElasticNet(alpha=alpha),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.ElasticNet(alpha=2000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
new_data,"pandas.DataFrame(index=range(0,len(ibkr_data)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
cfg_data,"pandas.read_sql_query('select*fromcfg_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
ms_data,"pandas.read_sql_query('select*fromms_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
cme_data,"pandas.read_sql_query('select*fromcme_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
jpm_data,"pandas.read_sql_query('select*fromjpm_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
gs_data,"pandas.read_sql_query('select*fromgs_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
pypl_data,"pandas.read_sql_query('select*frompypl_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
td_data,"pandas.read_sql_query('select*fromtd_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
brk_data,"pandas.read_sql_query('select*frombrk_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
usb_data,"pandas.read_sql_query('select*fromusb_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
ibkr_data,"pandas.read_sql_query('select*fromibkr_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
axp_data,"pandas.read_sql_query('select*fromaxp_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
tech_data,"pandas.read_sql_query('select*fromtech_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
spx_data,"pandas.read_sql_query('select*fromspx_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
dow_data,"pandas.read_sql_query('select*fromdow_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
nasdaq_data,"pandas.read_sql_query('select*fromnasdaq_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
vix_data,"pandas.read_sql_query('select*fromvix_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
ibkr_data['Date'],"pandas.to_datetime(ibkr_data.Date,format='%Y-%m-%d')",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
"x_train,y_train",numpy.array(x_train),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
X_test,numpy.array(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
all_mid_data,"numpy.concatenate([train_data,test_data],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
x_train,"numpy.reshape(x_train,(x_train.shape[0],x_train.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
X_test,"numpy.reshape(X_test,(X_test.shape[0],X_test.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
rms,numpy.sqrt(np.mean(np.power((valid-closing_price),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
currentdir,os.getcwd(),CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
form_raw,"pandas.read_excel(in_path+'FormAdmission.xls',
usecols=[2,3,11],
converters={'form_number':str})",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
student_raw,"pandas.read_excel(in_path+'Student.xls',
usecols=[0,7,15,18])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
major_raw,"pandas.read_excel(in_path+'Major.xls',
usecols=[0,1,7],
converters={'major_code':str})",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
gender_raw,"pandas.read_excel(in_path+'Gender.xls',
usecols=[1,3,4])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
school_raw,"pandas.read_excel(in_path+'SchoolMaster.xls',
usecols=[0,4,10,13])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
curriculum_raw,"pandas.read_excel(in_path+'Curriculum.xls',
usecols=[0,3])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
x,"numpy.linspace(-1,5,num=30)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.plot(x,f(x)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
counties_scaled,pandas.DataFrame(scaler.fit_transform(clean_counties_df.astype(float),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,pandas.DataFrame(pca_model_params['s'].asnumpy(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
v,pandas.DataFrame(pca_model_params['v'].asnumpy(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
comps,"pandas.DataFrame(list(zip(v_1,features_list)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
counties_transformed,pandas.DataFrame(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cluster_df,pandas.DataFrame(cluster_labels),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cluster_centroids,pandas.DataFrame(kmeans_model_params[0].asnumpy(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
counties_df,"pandas.read_csv(data_stream,header=0,delimiter="","")",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
v_1,numpy.squeeze(v_1_row.values),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
exp_variance,"numpy.square(s.iloc[start_idx:,:])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.hist(clean_counties_df[column_name],bins=n_bins)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.hist(clean_counties_df[column_name],bins=n_bins)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.hist(cluster_labels,bins=8,range=(-0.5,7.5)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplots(figsize=(6,3)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplots(figsize=(6,3)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplots(figsize=(6,3)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(data=sorted_weight_data,
x=""weights"",
y=""features"",
palette=""Blues_d"")",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(cluster_centroids.T,cmap='YlGnBu')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
text,"re.sub('<[^>]*>','',text)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
text,"re.sub('[\W]+','',text.lower()",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
emoticons,re.findall('(?::|;|=),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
x,"numpy.arange(-5.0,5.0,0.1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-5.0,5.0,0.1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-5.0,5.0,0.1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([-1,1,2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([-1.0,1.0,2.0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
X,"numpy.array([1,2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
W,"numpy.array([[1,3,5],[2,4,6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
X,"numpy.array([1.0,0.5])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
W1,"numpy.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
B1,"numpy.array([0.1,0.2,0.3])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
W2,"numpy.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
B2,"numpy.array([0.1,0.2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
W3,"numpy.array([[0.1,0.3],[0.2,0.4]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
B3,"numpy.array([0.1,0.2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['W1'],"numpy.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['b1'],"numpy.array([0.1,0.2,0.3])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['W2'],"numpy.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['b2'],"numpy.array([0.1,0.2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['W3'],"numpy.array([[0.1,0.3],[0.2,0.4]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['b3'],"numpy.array([0.1,0.2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([1.0,0.5])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([0.3,2.9,4.0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([1010,1000,990])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([1010,1000,990])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([0.3,2.9,4.0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([1,2,3,4,5])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([[0.1,0.8,0.1],[0.3,0.1,0.6],[0.2,0.5,0.3],[0.8,0.1,0.1]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,"numpy.array([1,2,1,0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
t,"numpy.array([1,2,0,0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
Y,"numpy.dot(X,W)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
A1,"numpy.dot(X,W1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
A2,"numpy.dot(Z1,W2)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
A3,"numpy.dot(Z2,W3)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a1,"numpy.dot(x,W1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a2,"numpy.dot(z1,W2)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a3,"numpy.dot(z2,W3)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a1,"numpy.dot(x,W1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a2,"numpy.dot(z1,W2)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a3,"numpy.dot(z2,W3)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
p,numpy.argmax(y),CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
p,"numpy.argmax(y_batch,axis=1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,"numpy.argmax(x,axis=1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
accuracy_cnt+,numpy.sum(p==t[i:i+batch_size]),CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,numpy.exp(a),CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,numpy.exp(a-c),CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-5.0,5.0,100)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
pts,"numpy.array([[10,50],[400,50],[90,200],[50,500]],np.int32)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image_bw,"numpy.zeros((512,512)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_train,numpy.array(images_data),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
im,"numpy.expand_dims(im,axis=0)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
rnd_idx,"random.sample(rnd_idx,len(rnd_idx)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
t1,time.time(),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
t2,time.time(),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
qHash,sklearn.preprocessing.normalize(qHash),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
queryHash,sklearn.preprocessing.normalize(queryHash),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
error_df_test,"pandas.DataFrame({'Reconstruction_error':mse,
'True_class':test['cc_onset']})",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pred_y_test,pandas.DataFrame(pred_y_test),CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
actual_pred,"pandas.merge(test2,error_df_test,how='left',on=['index'])",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('/Users/yaredhurisa/GoogleDrive/Probabilityofconflict/indicators/eth_cc_final_dataset_1_month_lag.csv'),CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mse,"numpy.mean(np.power(df_test_x_rescaled-test_x_predictions,2)",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
conf_matrix,"sklearn.metrics.confusion_matrix(error_df_test.True_class,pred_y_test)",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
roc_auc,"sklearn.metrics.auc(false_pos_rate,true_pos_rate,)",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"false_pos_rate,true_pos_rate,thresholds","sklearn.metrics.roc_curve(error_df_test.True_class,error_df_test.Reconstruction_error)",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xs,"numpy.arange(0,1,step=0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
final_one_hot_df,"pandas.get_dummies(final_df,columns=['product_category_name_english','order_purchase_year_month','customer_state'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
orders_df,pandas.read_csv('data/olist_orders_dataset.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
order_items_df,pandas.read_csv('data/olist_order_items_dataset.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
products_df,pandas.read_csv('data/olist_products_dataset.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
product_cat_name_df,pandas.read_csv('data/product_category_name_translation.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
customers_df,pandas.read_csv('data/olist_customers_dataset.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
orders_df['order_purchase_timestamp'],"pandas.to_datetime(orders_df['order_purchase_timestamp'],format=""%Y-%m-%d%H:%M:%S"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x_train,"pandas.DataFrame(x_train_np,index=indexs_train,columns=x_train.columns)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
x_test,"pandas.DataFrame(x_test_np,index=indexs_test,columns=x_test.columns)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_pred,"pandas.DataFrame(y_pred,columns=y_test.columns.values)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_pred,"pandas.DataFrame(y_pred,columns=y_test.columns.values)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_pred,"pandas.DataFrame(y_pred,columns=y_test.columns.values)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
score_df,"pandas.DataFrame({'knn':score_knn,
'tree':score_tree,
'rf':score_rf,
'unweightedlogistic':score_unweighted_log,
'weightedlogistic':score_weighted_log,
'lda':score_lda,
'qda':score_qda,
'weightedsvm':score_svm},index=['f1_score'])",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
x_test,"pandas.read_csv('x_test.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
x_train,"pandas.read_csv('x_train.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_test,"pandas.read_csv('y_test.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_train,"pandas.read_csv('y_train.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
score+,"sklearn.metrics.f1_score(genre_real[genre_real.columns.values[i]],genre_predict[genre_predict.columns.values[i]])",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
score,"sklearn.metrics.f1_score(y_predict,y_true)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
unweighted_logistic,sklearn.linear_model.LogisticRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
weighted_logistic,sklearn.linear_model.LogisticRegression(class_weight='balanced'),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
weighted_logistic,"sklearn.linear_model.LogisticRegression(class_weight='balanced',C=10**i)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
weighted_logistic,"sklearn.linear_model.LogisticRegression(class_weight='balanced',C=C_best)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
svm,"sklearn.svm.SVC(C=5,class_weight='balanced')",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
train,pandas.read_csv('/Users/datascientistenthusiat/Desktop/DATASCIENCEPROJECT/SalingPricePredictions/train.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('/Users/datascientistenthusiat/Desktop/DATASCIENCEPROJECT/SalingPricePredictions/test.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,numpy.zeros(num_agents),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
scores,numpy.zeros(num_agents),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
actions,"numpy.clip(actions,-1,1)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
start,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
end,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
experiences,"random.sample(self.memory,k=self.batch_size)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.seed,random.seed(random_seed),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.seed,random.seed(seed),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.seed,random.seed(seed),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.experience,"collections.namedtuple(""Experience"",field_names=[""state"",""action"",""reward"",""next_state"",""done""])",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.memory,collections.deque(maxlen=buffer_size),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
scores_deque,collections.deque(maxlen=print_every),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
df,"pandas.read_csv(""new_data.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf1,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",random_state=95825)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=C,random_state=95825)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf2,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=best_C,random_state=95825)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf3,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf4,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=grid.best_params_)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
param_values,"numpy.arange(5,90,5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cross_val_score,numpy.mean(nums),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cross_val_score,numpy.mean(nums),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cross_val_score,numpy.mean(nums),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cross_val_score,numpy.mean(nums),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
param_values,"numpy.logspace(-4,2,10)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
param_values,"numpy.linspace(0.04,1,num=20)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_validate(clf,X_train,y_train,cv=num_folds,return_train_score=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_validate(clf,X_train,y_train,cv=num_folds,return_train_score=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_validate(clf,X_train,y_train,cv=num_folds,return_train_score=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_validate(knn_model,X_train,y_train,cv=num_folds,return_train_score=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.BaggingClassifier(base_estimator=clf3,n_estimators=num_trees,max_features=m,random_state=95828)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model_new,"sklearn.ensemble.BaggingClassifier(base_estimator=clf4,n_estimators=num_trees,max_features=m,random_state=95828)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(model,param_grid,cv=5,scoring='accuracy')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
LogReg,"sklearn.linear_model.LogisticRegression(penalty='l1',C=1e10)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(penalty='l1',C=C)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
LogReg_regularized,"sklearn.linear_model.LogisticRegression(penalty='l1',C=best_C,)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
k_fold,sklearn.model_selection.KFold(num_folds),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
k_fold,sklearn.model_selection.KFold(num_folds),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
k_fold,sklearn.model_selection.KFold(num_folds),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.LinearSVC(C=C),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_SVM,sklearn.svm.LinearSVC(C=C),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
knn_model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=C),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_KNN,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_1,"numpy.arange(-np.pi,np.pi,1E-2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_1d,"numpy.array([1,2,3,4])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_2d,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_3d,"numpy.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
my_array_2d,"numpy.array([[],[]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
my_array_3d,"numpy.array([[[],[]]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_3d,"numpy.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12.0]]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_2d,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_3d,"numpy.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_2d,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.reshape(range(1,13)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.reshape(range(1,13)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
B,"numpy.reshape(range(1,13)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
C,"numpy.reshape(range(1,17)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-np.pi,np.pi,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,1,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(0,1,3)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xgrid,numpy.linspace(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"x,y","numpy.meshgrid(x,y,indexing='xy')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
p,numpy.poly1d(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,numpy.polyfit(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sample,math.log(random.math.lognormal(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(1,figsize=(10,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(2,figsize=(10,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
html_doc,requests.get(url),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
html_doc,requests.get(url_main_list[i]),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
html_doc,"requests.get(url_list[i],headers=header)",CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
doc,requests.get(url),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
tmp,requests.get(reply_url_list[i]),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
tmp1,"re.sub('[a-zA-Z/]','',cate[i].get('href')",CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
cate,pandas.DataFrame(),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
content_table,pandas.DataFrame(tmp_dict),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
comment_table,pandas.DataFrame(tmp_dict),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
reply_table,pandas.DataFrame(tmp_dict),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
start,datetime.datetime.now(),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
end,datetime.datetime.now(),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
tmp,json.loads(doc),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
tmp,json.loads(tmp),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
username,"os.getenv('AZUREML_DSVM_USERNAME',default='<my_username>')",CLUSTER_29,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_1
address,"os.getenv('AZUREML_DSVM_ADDRESS',default='<ip_address_or_fqdn>')",CLUSTER_29,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_1
training_data,sklearn.datasets.load_diabetes(),CLUSTER_29,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_1
res_df,"pandas.DataFrame({'Features':feat,'Importance':feat_imp})",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(DIR+'/OnlineNewsPopularity.csv'),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(50,50)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_scaled,y,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,sklearn.preprocessing.StandardScaler(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_train_histogram,numpy.array(x_train_histogram),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
x_test_histogram,numpy.array(x_test_histogram),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
x_train_hog,numpy.array([hog(x),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
x_test_hog,numpy.array([hog(x),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
bins,numpy.int32(bin_n*ang/(2*np.pi),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
hist,numpy.hstack(hists),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
current_seq,"numpy.roll(current_seq,-1,1)",CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_seq,"numpy.full((1,sequence_length)",CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
word_counts,collections.Counter(text),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
gd_df,"pandas.DataFrame(columns=['m_current','c_current','cost'])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
gdm_df,"pandas.DataFrame(columns=['Bets','cost'])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
housing,"pandas.concat([housing,status],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
status,"pandas.get_dummies(housing['furnishingstatus'],drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
housing,pandas.read_csv('Housing.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,numpy.array(X),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,numpy.array(y),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,numpy.array(X),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,numpy.array(y),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,"numpy.array([[-1,-1],[-2,-1],[1,1],[2,1]])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
Y,"numpy.array([1,1,2,2])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(X.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
theta,"numpy.matrix(np.array([0,0,0])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.SGDClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
auto,pandas.read_csv('auto_mpg.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.array([auto_disp,auto_weight])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.array([auto_mpg]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_disp,numpy.mean(auto_disp),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(auto_disp,\
auto_mpg,\
test_size=0.2,\
random_state=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,\
y,\
test_size=0.2,\
random_state=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,numpy.genfromtxt('data.dat'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dateString,"time.strftime(""Y%YM%mD%d"")",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
timeString,"time.strftime(""UTC%H:%M"")",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
file_df,pandas.read_csv(file),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
stress,"k.stress_vals(p=numpy.arange(1,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress2,"k.stress_vals(p=numpy.arange(1,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress,"k.stress_vals(p=numpy.arange(1,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress2,"k.stress_vals(p=numpy.arange(1,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress,"k.stress_vals(p=numpy.arange(1,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress,"k.stress_vals(p=numpy.arange(1,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D_inf,"numpy.zeros((n,n)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D,numpy.sqrt(noisy_dist_mat_kde),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"D_inf[i,j]","numpy.linalg.norm(X[i,:]-X[j,:])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D_9,sklearn.metrics.pairwise_distances(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D_s,sklearn.metrics.pairwise_distances(rw_obj.stations),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D_c,sklearn.metrics.pairwise_distances(base_config),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D,sklearn.metrics.pairwise_distances(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lm,"scipy.stats.linregress(x,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"defa(x,y",time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
cm_df,"pandas.DataFrame(
cm,index=[""Actual0"",""Actual1""],columns=[""Predicted0"",""Predicted1""]
)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
df_loans,pandas.read_csv(file_path),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=78)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train2,X_test2,y_train2,y_test2","sklearn.model_selection.train_test_split(X,y,random_state=78,train_size=0.80)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
cm,"sklearn.metrics.confusion_matrix(y_test,predictions)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
acc_score,"sklearn.metrics.accuracy_score(y_test,predictions)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('TUGAS3_AOK.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(20,20)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,numpy.arange(salient_not_cars_train_x.shape[0]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
mean_values,numpy.array(mean_values),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
not_cars,numpy.where(y_train!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
not_cars,numpy.where(y_test!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_not_cars,numpy.where(y_train!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_not_cars,numpy.where(y_train!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_cars,numpy.where(y_train==1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_not_cars,numpy.where(y_test!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_not_cars,numpy.where(y_test!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
salient_not_cars_train_x,"numpy.concatenate((x_train,fragmented_saliency,fragmented_saliency_not_cars_x_train)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
salient_not_cars_train_y,"numpy.concatenate((y_train,fragmented_saliency_y_train,not_cars_y_train)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
car_train,"numpy.concatenate((x_train,fragmented_saliency)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
combined_y_train,"numpy.concatenate((y_train,fragmented_saliency_y_train)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
fragmented_saliency_y_train,"numpy.ones((fragmented_saliency.shape[0],1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
ref,"numpy.ones((32,32,3)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices,"numpy.argpartition(flat,-n)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
exp,"numpy.clip(exp/np.percentile(exp,99.5)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
exp,"numpy.clip(exp/np.percentile(exp,99.99)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
exp,"numpy.clip(exp/np.percentile(exp,99.99)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x,"numpy.clip(x,0,1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x,"numpy.clip(x,0,255)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
actual_labels,numpy.copy(y_train),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
img,numpy.copy(x_train[ind]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
img,numpy.copy(not_cars_x_train[ind]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
threshold,"numpy.percentile(exp,95)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
threshold,"numpy.percentile(exp,95)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x_train,"numpy.delete(x_train,not_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
y_train,"numpy.delete(y_train,not_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x_test,"numpy.delete(x_test,not_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
y_test,"numpy.delete(y_test,not_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
rows_to_delete,"numpy.delete(indices_not_cars,np.s_[0:4500],axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x_train,"numpy.delete(x_train,rows_to_delete,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
y_train,"numpy.delete(y_train,rows_to_delete,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
not_cars_x_train,"numpy.delete(x_train,indices_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
not_cars_y_train,"numpy.delete(y_train,indices_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
ref,"numpy.expand_dims(ref,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
df,"pandas.DataFrame(
{'Tokens':CDS,
'SES':SES,
})",CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
p,"seaborn.boxplot(y='Tokens',x='SES',
data=df,
width=0.5,
palette=""YlOrBr"")",CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
txts,"os.listdir("".\Data3"")",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
df1,"pandas.melt(NDCI_raw,id_vars=['system:time_start'],var_name='Lake',value_name='Reflectance')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df2,"pandas.melt(rgb_raw,id_vars=['system:time_start'],var_name='Lake',value_name='Reflectance')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df3,"pandas.melt(nirSWIR_raw,id_vars=['system:time_start'],var_name='Lake',value_name='Reflectance')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df4,"pandas.melt(blueGreen_raw,id_vars=['system:time_start'],var_name='Lake',value_name='Reflectance')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
NDCI_raw,"pandas.read_csv('NDCI.csv',low_memory=False)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rgb_raw,"pandas.read_csv('rgb.csv',low_memory=False)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
blueGreen_raw,"pandas.read_csv('blueGreen.csv',low_memory=False)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
nirSWIR_raw,"pandas.read_csv('nirSWIR.csv',low_memory=False)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,2)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,2)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(len(data.columns),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(len(data.columns),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
source,requests.get(url),CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(data,columns=['Postcode','Borough','Neighbourhood'])",CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df3,"pandas.merge(df2,lat_lon,on='Postcode')",CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
lat_lon,pandas.read_csv('https://cocl.us/Geospatial_data'),CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(k),CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2['Neighbourhood'],"numpy.where(df2['Neighbourhood']=='Notassigned',df2['Borough'],df2['Neighbourhood'])",CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=k,random_state=0)",CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
Day_cos,pandas.DataFrame(columns=['Day_x']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Day_sin,pandas.DataFrame(columns=['Day_y']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
D_cos,pandas.DataFrame([np.cos((day-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
D_sin,pandas.DataFrame([np.sin((day-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_3,"pandas.concat([data_3,Month_cos,Month_sin],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_3,"pandas.concat([data_3,Day_cos,Day_sin],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_3,"pandas.concat([data_3,High_3,High_2,High_1,Low_3,Low_2,Low_1],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('./CU_weather_data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
label_High,numpy.array(data_3['HighTemperature']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_High,"numpy.array(data_3[['Precipitation','Snowfall','Month_x','Month_y','Day_x','Day_y','High_3','High_2','High_1']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
label_Low,numpy.array(data_3['LowTemperature']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_Low,"numpy.array(data_3[['Precipitation','Snowfall','Month_x','Month_y','Day_x','Day_y','Low_3','Low_2','Low_1']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Month_cos,numpy.cos((data_3.Month-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Month_sin,numpy.sin((data_3.Month-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
RF,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,random_state=6)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pandas,"pandas.read_table(""swissmetro.dat"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
pixcrd,"numpy.array([r[""ra""],r[""dec""],])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.zeros(nstar),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.zeros(nstar),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
flux,numpy.zeros(nstar),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
indmax,numpy.argmax(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean,numpy.mean(data),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sigma,numpy.std(data),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"y[i],x[i]","numpy.unravel_index(indmax,image.shape)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
median,numpy.median(data),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_X,"numpy.asarray([3.3,4.4,5.5,6.71,6.93,4.168,9.779,6.182,7.59,2.167,7.042,10.791,5.313,7.997,5.654,9.27,3.1])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_y,"numpy.asarray([1.7,2.76,2.09,3.19,1.694,1.573,3.366,2.596,2.53,1.221,2.827,3.465,1.65,2.904,2.42,2.94,1.3])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_X,"numpy.asarray([6.83,4.668,8.9,7.91,5.7,8.7,3.1,2.1])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_y,"numpy.asarray([1.84,2.273,3.2,2.831,2.92,3.24,1.35,1.03])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
k2,pandas.DataFrame(k2),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
classifier,sklearn.naive_bayes.GaussianNB(),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,y_predicted)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(y_test,y_predicted,average='weighted')",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
precision,"sklearn.metrics.precision_score(y_test,y_predicted,average='weighted')",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_predicted,average='weighted')",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
training_set,pandas.read_csv('/home/ryad/Bureau/Project-EDF-Lab-master/Google_Stock_Price_Train.csv'),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
action_set,numpy.arange(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
loss_approx,numpy.zeros(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
regret,numpy.zeros(T),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
somme,numpy.zeros(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p,numpy.ones(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X_train,"numpy.around(training_set[:1257,0],decimals=d)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
H,numpy.eye(N),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
L,numpy.eye(N),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
K,numpy.eye(N),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p[j],math.exp(-learning_rate*loss_approx[j]),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
learning_rate,math.sqrt(8*math.log(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_3,"pandas.concat([df_1,isomerase,ligase])",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
df3,"pandas.merge(df1,df2,on=['structureId','macromoleculeType','residueCount'])",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
df1,pandas.read_csv('pdb_data_no_dups.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
df2,pandas.read_csv('pdb_data_seq.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
isomerase,pandas.read_csv('uniprot-isomerase.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
ligase,pandas.read_csv('uniprot-ligase.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(actual,predictions)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
video,"numpy.array([10.5,5.2,3.25,7.0])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
u,"numpy.array([2,5])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
v,"numpy.array([3,1])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([1,2,8])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
b,"numpy.array([5,6,3])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
t1,"numpy.array([2,0.25])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
t2,"numpy.array([2.5,3.5])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
t3,"numpy.array([1,2])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
A,"numpy.array([
[10,20,30],
[40,50,60]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
D,"numpy.array([
[1,2,3],
[4,5,6],
[7,8,9],
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
B,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
C,"numpy.array([[100,200,300],[400,500,600]])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
D,"numpy.array([
[2,3,5,7],
[11,13,17,19],
[23,29,31,37]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F,"numpy.array([
[5,2],
[4,1],
[9,3]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
G,"numpy.array([
[8,7,4,2,5],
[2,5,1,0,5],
[9,11,17,21,0],
[0,1,0,1,2]])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
u_row,numpy.array([u]),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
P,"numpy.array([
[3.0,4.0,1.0,4.6],
[0.2,3.5,2.0,0.5]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
H,"numpy.array([
[0.5,-0.2,0.2,-0.1],
[0.4,0.4,1.5,0.6]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
H2,"numpy.array([
[-0.5,-0.5,-0.5,-0.5],
[0.4,0.4,0.4,0.4]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
U,"numpy.array([[1,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
U_30,numpy.array([[np.cos(angle30),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
V,"numpy.array([
[np.cos(angle30)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_shear,"numpy.array([
[1,1.5],
[0,1]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
Square,"numpy.array([
[0,0,1,1],
[0,1,1,0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_squeeze,"numpy.array([
[1.4,0],
[0,1/1.4]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_reflect,"numpy.array([
[1,0],
[0,-1]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_inv_shear,"numpy.array([
[1,-1.5],
[0,1]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_project,"numpy.array([
[1,0],
[0,0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_project_30,"numpy.array([
[np.cos(angle30)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_involution,"numpy.array([
[0,-2],
[-1/2,0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
M,"numpy.array([
[1,2,3],
[4,5,6],
[7,8,0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_scale,"numpy.array([
[0.5,0],
[0,0.5]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
D,"numpy.array([
[100,200,300],
[10,20,30],
[1,2,3],
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
S,numpy.diag(S_diag),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
subplot3d,"matplotlib.pyplot.subplot(111,projection='3d')",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
subplot3d,"matplotlib.pyplot.subplot(111,projection='3d')",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"eigenvalues,eigenvectors",numpy.linalg.eig(F_squeeze),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"eigenvalues2,eigenvectors2",numpy.linalg.eig(F_shear),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_inv_shear,numpy.linalg.inv(F_shear),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
LA.inv(F_shear.dot(F_squeeze)),=numpy.linalg.inv(F_squeeze),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
radius,numpy.linalg.norm(u),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"U,S_diag,V_T",numpy.linalg.svd(F_shear),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
df_obj1,"pandas.DataFrame({""x"":np.random.randn(500)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_obj2,"pandas.DataFrame({""x"":np.random.randn(500)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
dataset,"seaborn.load_dataset(""tips"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
exercise,seaborn.load_dataset('exercise'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pi,numpy.ndarray(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
circle1,"matplotlib.pyplot.Circle((0,0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
movies,pandas.read_csv('movies_clean.csv'),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
reviews,pandas.read_csv('reviews_clean.csv'),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
movie_content,"numpy.array(movies.iloc[:,4:])",CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
similar_movies,"numpy.array(movies.iloc[similar_idxs,]['movie'])",CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
movies_temp,numpy.array(reviews_temp['movie_id']),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
movie_names,numpy.array(get_movie_names(movies_temp),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
movie_idx,numpy.where(movies['movie_id']==movie_id),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
similar_idxs,numpy.where(dot_prod_movies[movie_idx]==np.max(dot_prod_movies[movie_idx]),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
users_who_need_recs,"numpy.setdiff1d(users,users_with_all_recs)",CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_recs,"numpy.setdiff1d(rec_movies,movie_names)",CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
users,numpy.unique(reviews['user_id']),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
recs,collections.defaultdict(set),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
opdf,pandas.DataFrame(output),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
trainingData,pandas.read_csv('training.csv'),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
testingData,pandas.read_csv('testing.csv'),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-5,5,N)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
xfit,"numpy.linspace(-5,5,30)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"theta_best,theta_cov","scipy.optimize.curve_fit(model,x,y,sigma=dy)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.arange(1,T+1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
w,"numpy.arange(start,end)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tau,"numpy.arange(0,T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
xi,"numpy.array([3.5,3.4,3.2,3.3,3.4,3.3,3.4,4.1,3.8,4.0,4.0,4.4,4.2,4.1,3.9,3.9,4.7,5.6,5.1,4.5,4.0,3.4,3.4,3.0])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
c,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.array(sol['x']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.array(sol['x']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.array(sol['x']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.array(sol['x']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A1,"numpy.zeros((1*W,3*W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A2,"numpy.zeros((1*W,3*W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A3,"numpy.zeros((1*W,3*W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b4,numpy.zeros(3*W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
c,numpy.zeros(3*W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,numpy.zeros(W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
rhc,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"numpy.zeros((W,W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
afhc,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"numpy.zeros((W,W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
arhc,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_RHC,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
f_RHC,numpy.zeros(end-start),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_AFHC,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
f_AFHC,numpy.zeros(end-start),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_ARHC,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
f_ARHC,numpy.zeros(end-start),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_OPT,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,"numpy.concatenate((A1,A2)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,"numpy.concatenate((A,A3)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,"numpy.concatenate((A,A4)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"numpy.roll(s,-1,axis=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"numpy.roll(s,-1,axis=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b2,numpy.ones(W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b3,numpy.ones(W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
c,"numpy.sum(np.multiply(xi+sigma,np.maximum(demand-solar+x,0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_RHC,"numpy.vstack([x_RHC,rhc])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_AFHC,"numpy.vstack([x_AFHC,afhc])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_ARHC,"numpy.vstack([x_ARHC,arhc])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
solar_extend,"numpy.append(solar,np.zeros(T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
demand_extend,"numpy.append(demand,np.zeros(T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
xi_extend,"numpy.append(xi,np.zeros(T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b1,"numpy.append(solar_extend[t-1:],solar_extend[:t+W-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,"numpy.append(b1,b2)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,"numpy.append(b,b3)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,"numpy.append(b,b4)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_rhc,"numpy.append(s0,rhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_rhc,"numpy.append(s0,rhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_afhc,"numpy.append(s0,afhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_afhc,"numpy.append(s0,afhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_arhc,"numpy.append(s0,arhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_arhc,"numpy.append(s0,arhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_rhc,"numpy.append(s0,rhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_afhc,"numpy.append(s0,afhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_arhc,"numpy.append(s0,arhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_opt,"numpy.append(s0,x_OPT[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
xi,"numpy.tile(xi,T//len(xi)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('processeddata.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
real_df,pandas.DataFrame(real_pred),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
see_final_results,"pandas.DataFrame({'text':text,'content_id':content_ids,'subject':subjects,'sentiment_value':sentiment_values,'sentiment_word':sentiment_words})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
test,pandas.read_csv('../../../data/df_sen_sub/test_public.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,pandas.read_csv('../../../data/df_sen_sub/submit_example.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
tf_df,pandas.DataFrame(tf_df.toarray(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
tf_df,pandas.DataFrame(tf_df.toarray(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
X_pca_df,"pandas.DataFrame(X_pca,columns=['PCA%i'%iforiinrange(n_features)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
neighbors_df,"pandas.DataFrame({'neighbor_id':articles_idx,\
'similarity':eucl_dist_series})",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
similar_result,pandas.Series(similar_result),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
neighbors_df,pandas.Series(similarity),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"neighbors_df[""num_interactions""]",pandas.Series(num_interactions),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
eucl_dist_series,"pandas.Series(eucl_dist_list,index=articles_idx)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_content_new,"pandas.concat([df_cont,tf_df],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_content_new,"pandas.concat([df_cont,tf_df],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_content_new,"pandas.concat([df_cont,X_pca_df],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df,pandas.read_csv('data/user-item-interactions.csv'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_content,pandas.read_csv('data/articles_community.csv'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
user_item_matrix,pandas.read_pickle('user_item_matrix.p'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
num_latent_feats,"numpy.arange(10,700+10,20)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
num_latent_feats,"numpy.arange(10,570+10,20)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
articles_idx,numpy.array(df_cont['article_id']),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
article_pca,"numpy.array(df_cont[df_cont['article_id']==article_id].iloc[:,1:])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
neigh_pca,numpy.array(col[1:]),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
rec_articles_ids,numpy.array(neighbors_df.index.values),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
similar_result[user],"numpy.dot(user_item.loc[user_id],user_item.loc[user])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
similarity[user],"numpy.dot(user_item.loc[user_id],user_item.loc[user])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
user_item_est,"numpy.around(np.dot(np.dot(u_new,s_new)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
user_item_pred,"numpy.around(np.dot(np.dot(u_train_new,s_train_new)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
err,numpy.sum(numpy.sum(np.abs(diffs),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
test_err,numpy.sum(numpy.sum(np.abs(test_diffs),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
train_err,numpy.sum(numpy.sum(np.abs(train_diffs),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
diffs,"numpy.subtract(user_item_matrix,user_item_est)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
test_diffs,"numpy.subtract(user_item_true_test,user_item_pred_test)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
train_diffs,"numpy.subtract(user_item_train,user_item_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"s_new,u_new,vt_new",numpy.diag(s[:k]),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"s_train_new,u_train_new,vt_train_new",numpy.diag(s_train[:k]),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
eucl_dist,numpy.linalg.norm(article_pca-neigh_pca),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"u,s,vt",numpy.linalg.svd(user_item_matrix),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"u_train,s_train,vt_train",numpy.linalg.svd(user_item_train),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=n_features),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
text,"re.sub(r""[^a-zA-Z0-9]"","""",text.lower()",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
balance_data,"pandas.read_csv(
'https://archive.ics.uci.edu/ml/machine-learning-databases/balance-scale/balance-scale.data',
sep=',',header=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3,random_state=100)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_gini,"sklearn.tree.DecisionTreeClassifier(criterion=""gini"",random_state=100,max_depth=3,min_samples_leaf=5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_entropy,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",random_state=100,max_depth=3,min_samples_leaf=5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
binned_weighted_statistic,"scipy.stats.binned_statistic_dd(x,y*weights,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_weights,"scipy.stats.binned_statistic_dd(x,1.0*weights,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_y,"scipy.stats.binned_statistic_dd(z,y,bins=[my_bins],statistic=mean)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_x,"scipy.stats.binned_statistic_dd(z,x,bins=[my_bins],statistic=mean)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_e,"scipy.stats.binned_statistic_dd(z,energy,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
reg,"sklearn.linear_model.TheilSenRegressor(fit_intercept=False,n_subsamples=10,)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
x,"numpy.arange(-10,10)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[1],"numpy.array([0,0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[2],"numpy.array([-2,1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[3],"numpy.array([2,1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[4],"numpy.array([-3,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[5],"numpy.array([-1,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[6],"numpy.array([1,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[7],"numpy.array([3,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(1),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[1],"numpy.array([0,0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[2],"numpy.array([-2,1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[3],"numpy.array([2,1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[4],"numpy.array([-3,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[5],"numpy.array([-1,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[6],"numpy.array([1,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[7],"numpy.array([3,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.read_excel('/home/subhani007/Desktop/MLAssignment/boston.xls'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cost,math.sqrt(cost),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta,numpy.asarray(theta),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta1,numpy.asarray(theta1),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta2,numpy.asarray(theta2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta3,numpy.asarray(theta3),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta4,numpy.asarray(theta4),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
temp,"numpy.zeros(14,int)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta,"numpy.zeros(x1_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta1,"numpy.zeros(x2_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta2,"numpy.zeros(x2_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta3,"numpy.zeros(x4_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta4,"numpy.zeros(x5_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mul,"numpy.matmul(theta_transpose,x)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
toSum,"numpy.matmul(sub,np.transpose(x)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mul,"numpy.matmul(theta_transpose,x)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sigma,numpy.sum(sq),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_transpose,numpy.transpose(y),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta_transpose,numpy.transpose(theta),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cost,numpy.transpose(cost),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta_transpose,numpy.transpose(theta),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_transpose,numpy.transpose(y),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1Trans,numpy.transpose(x1_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x2Trans,numpy.transpose(x2_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x3Trans,numpy.transpose(x3_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x4Trans,numpy.transpose(x4_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x5Trans,numpy.transpose(x5_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sq,"numpy.power(sub,2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub,"numpy.subtract(mul,y_transpose)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub,"numpy.subtract(mul,y_transpose)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_scaled,sklearn.preprocessing.scale(x),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_scaled,sklearn.preprocessing.scale(y),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"submission.iloc[:,1]",numpy.floor(np.expm1(blend_models_predict(X_sub),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"submission.iloc[:,1]",numpy.floor((0.25*numpy.floor(np.expm1(blend_models_predict(X_sub),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""SalePrice""]","numpy.log1p(train[""SalePrice""])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(-cross_val_score(model,X,y,scoring=""neg_mean_squared_error"",cv=kfolds)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,numpy.corrcoef(train[cols].values.T),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combine,"pandas.concat((train,test)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combine,pandas.get_dummies(combine),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/Housing_Prices_train.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/Housing_Prices_test.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,"pandas.read_csv(""https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/sample_submission_kaggle.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub_1,pandas.read_csv('https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/masum_rumia-detailed-regression-guide-with-house-pricing%20submission.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub_2,pandas.read_csv('https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/serigne_stacked-regressions-top-4-on-leaderboard_submission.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub_3,pandas.read_csv('https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/jesucristo1-house-prices-solution-top-1_new_submission.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hm,"seaborn.heatmap(cm,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10},yticklabels=cols.values,xticklabels=cols.values)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combine[feature],"scipy.special.boxcox1p(combine[feature],boxcox_normmax(combine[feature]+1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lbl,sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ENet,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kfolds,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bikeAllYears,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
bikeAllYears,"pandas.concat(\
[readYearlyData(os.path.join(csvFilePath,file)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
bikeDF['AgeBins'],"pandas.cut(bikeDF.age,bins=age_bins,labels=age_labels)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
bikeDF['HrBins'],"pandas.cut(bikeDF.start_hour,bins=hrs_bins,labels=hrs_labels)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
bikeDF,"pandas.read_csv(csvFile,low_memory=False,header=0,
names=[""tripduration"",""starttime"",""stoptime"",""startstationid"",""startstationname"",
""startstationlatitude"",""startstationlongitude"",""endstationid"",""endstationname"",
""endstationlatitude"",""endstationlongitude"",""bikeid"",""usertype"",""birthyear"",""gender""
])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
city_wx_data_df,pandas.DataFrame(city_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
city_wx,requests.get(city_url),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
r,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
start,datetime.date.today(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
iso_8601_dt,"datetime.datetime.strptime(iso_8601,'%Y-%m-%dT%H:%M:%S%f')",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
comparison,"pandas.DataFrame([results_sent,recall_scores_sent,results_fin,recall_scores_fin,delta_accu,delta_recall],columns=names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_feat,"pandas.DataFrame([model.feature_importances_],columns=features)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_feat,"pandas.DataFrame([model.feature_importances_],columns=features)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
aggregated,pandas.read_json('aggregated_sentiment.json'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=num_folds,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=kfold,scoring=scoring)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_rf,sklearn.ensemble.RandomForestClassifier(n_estimators=1000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_rf,sklearn.ensemble.RandomForestClassifier(n_estimators=1000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(test_y,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
image,numpy.array(tiles[i].image),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
trimap,numpy.array(mtiles[i].image),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
bmask,"numpy.array(amask,dtype=bool)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
kernel,"numpy.ones((1,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
kernel,"numpy.ones((1,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
kernel,"numpy.ones((1,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
cutout,"numpy.clip(cutout*255,0,255)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
cutout,"numpy.clip(cutout*255,0,255)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
alpha,"numpy.clip(x,0.0,1.0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
alpha,"numpy.clip(x,0.0,1.0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
orig_2,numpy.uint8(orig_2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
mask,numpy.uint8(mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
C,scipy.sparse.diags(c),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
C,scipy.sparse.diags(c),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
start_time,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
insurance,"pandas.read_csv('insurance.csv',delimiter=',')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
age_first_Quartile,"numpy.percentile(insurance.age,[25])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
age_third_Quartile,"numpy.percentile(insurance.age,[75])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bmi_first_Quartile,"numpy.percentile(insurance.bmi,[25])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bmi_third_Quartile,"numpy.percentile(insurance.bmi,[75])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
children_first_Quartile,"numpy.percentile(insurance.children,[25])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
children_third_Quartile,"numpy.percentile(insurance.children,[75])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
charges_first_Quartile,"numpy.percentile(insurance.charges,[25])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
charges_third_Quartile,"numpy.percentile(insurance.charges,[75])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.countplot(x=""sex"",data=insur)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.arange(data.shape[0]),CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
embeddings_index[word],"numpy.asarray(values[1:],dtype='float32')",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
pred_adv,"numpy.argmax(y_pred_adv,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
real_adv,"numpy.argmax(y_val,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
pr,"numpy.argmax(prediction_ar,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
x,numpy.arange(len(x),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.arange(len(x),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Bj,numpy.array(y1),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Sh,numpy.array(y2),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Bj,numpy.array(y1),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Sh,numpy.array(y2),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
emails_available,"os.listdir(""/home/allan/Desktop/enron_fraud_detection/text_operations/emails_by_address"")",CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
emails_available,"os.listdir(""/home/allan/Desktop/enron_fraud_detection/text_operations/emails_by_address"")",CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
emails_available,"os.listdir(""/home/allan/Desktop/enron_fraud_detection/text_operations/emails_by_address"")",CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
emails_available,"os.listdir(""/home/allan/Desktop/enron_fraud_detection/text_operations/emails_by_address"")",CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
keep_index_v2,numpy.array(((numpy.array(usage),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
keep_words,numpy.array(words),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
person_index,numpy.array(numpy.array(numpy.array(numpy.array(detective_people_list),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
keep_words,numpy.array(qualitative_words),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
p_values,numpy.zeros(len(words),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
p_index,numpy.where(np.array(np.array(detective_people_list),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
cbar,matplotlib.pyplot.colorbar(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cbar,"matplotlib.pyplot.colorbar(im,ax=ax[1],cax=cax,shrink=1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cbar,"matplotlib.pyplot.colorbar(im,ax=ax[3],cax=cax,shrink=1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cont,"matplotlib.pyplot.contour(
np.arange(ydeg+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(2,2,figsize=(12,7)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(2,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(2,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
l,"numpy.arange(5,ydeg+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.array(map.y),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mu,numpy.array([np.mean(x[l**2:(l+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
R,numpy.array([[np.cos(ang),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
R,numpy.array([[np.cos(ang),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
theta,numpy.array(theta),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
R,numpy.array([[np.cos(ang),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
img_rot,"numpy.zeros((9,res,res)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
img_starry,"numpy.zeros((9,res,res)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
error,numpy.zeros((len(Nalpha),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t0,numpy.zeros(ydeg+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tD,numpy.zeros(ydeg+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tN0,numpy.zeros(ydeg+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tND,numpy.zeros(ydeg+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
L,"numpy.concatenate(
[np.ones(2*l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
new_lon,numpy.empty_like(lon),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
new_lon,numpy.empty_like(lon),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
img_rot,numpy.zeros_like(img),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux_num,numpy.zeros_like(theta),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux_num,numpy.zeros_like(theta),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
lnlike,numpy.zeros_like(alpha_arr),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux,numpy.ones_like(time),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
wta,numpy.ones(map.Ny),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
error,numpy.std(flux_starry_0-flux_num_0),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux_num[k],numpy.sum(z[z>0]*img.flat[z>0]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux_num[k],numpy.sum(z[z>0]*img.flat[z>0]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,numpy.cos(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
z,numpy.cos(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,numpy.cos(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
z,numpy.cos(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
like,numpy.exp(lnlike-np.max(lnlike),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
logerror,numpy.log10(error),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.sin(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.sin(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
time,"numpy.linspace(0,30,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Nalpha,"numpy.linspace(0,1,25)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
theta,"numpy.linspace(0,360.0,npts)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,10.0,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
alpha_arr,"numpy.linspace(0.01,0.03,300)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tstart,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tstart,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tstart,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tstart,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
func,"scipy.interpolate.interp1d(lon[i],img[i],fill_value=""extrapolate"")",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
true_prob,pandas.Series(true_prob),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
counts,"pandas.concat([counts,true_prob],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
churn_df,pandas.read_csv('data/churn.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
counts,pandas.value_counts(pred_churn),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.array(y),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_prob,numpy.zeros([len(y),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
true_prob[prob],numpy.mean(is_churn[pred_churn==prob]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
baseline,numpy.mean(is_churn),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
class_names,numpy.unique(y),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"numpy.array([[0,0],
[0,1],
[1,0],
[1,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([0,1,1,0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.array([[0,0],
[0,1],
[0,-1],
[0.5,1],
[0.5,-1],
[1,1],
[1,-1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([[0,1],
[0,1],
[0,1],
[-1,1],
[1,1],
[0,-1],
[0,-1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.concatenate((ones.T,X)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,numpy.concatenate((np.ones(1),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dot_value,"numpy.dot(a[l],self.weights[l])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ones,numpy.atleast_2d(np.ones(X.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
layer,numpy.atleast_2d(a[i]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
delta,numpy.atleast_2d(deltas[i]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ones,numpy.atleast_2d(np.ones(x.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
books,"pandas.read_csv('books.csv',encoding='latin-1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(
in_femto_sec(-100)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
k,"numpy.linspace(
in_electron_volt(15.35)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(fpath),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"df[""ymd""]","pandas.to_datetime(df[""ymd""])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
grid_cv,"sklearn.model_selection.GridSearchCV(estimator=svc,param_grid=prama_dic)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
grid_cv,"sklearn.model_selection.GridSearchCV(logistic,param_dic)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
grid_cv,"sklearn.model_selection.GridSearchCV(logistic,param_dic)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
target,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
svc,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
logistic,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
logistic,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train,target,test_size=0.2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,target,test_size=0.2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x_data,"numpy.linspace(0.0,10.0,1000000)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
my_data,"pandas.concat([pd.DataFrame(data=x_data,columns=['XData'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_eval,y_train,y_eval","sklearn.model_selection.train_test_split(x_data,y_true,test_size=0.3,random_state=101)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(file_name),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.arange(1,len(x)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.sort(df['alcohol']),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.catplot(x=""class"",y=""survived"",hue=""sex"",data=titanic,
height=6,kind=""bar"",palette=""muted"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df['alcohol'],bins=20)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
titanic,"seaborn.load_dataset(""titanic"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,"matplotlib.pyplot.plot(x,y,marker='.',linestyle='none')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,"matplotlib.pyplot.title(""AlcoholContent"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel('AlcoholPercentage'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel('PercentofAlcoholinWine'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylabel('Count'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylabel('ECDF'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
CITI,pandas.read_csv('citi_df_sum.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
NY_STATION,pandas.read_csv('http://web.mta.info/developers/data/nyct/subway/Stations.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
TURNSTILE,pandas.read_csv('turnstile/cleaned_turnstile_daily.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,20)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('../data/events.csv',low_memory=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df['timestamp'],pandas.to_datetime(df['timestamp']),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
grouped['days_elapsed'],pandas.to_datetime('2018-06-01'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
income,"pandas.Series(np.where(income_raw=="">50K"",1,0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
features,pandas.get_dummies(features_raw),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""census.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['f_train'],"sklearn.metrics.fbeta_score(y_train.values[:300],predictions_train,beta=0.5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['f_test'],"sklearn.metrics.fbeta_score(y_test,predictions_test,beta=0.5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['acc_train'],"sklearn.metrics.accuracy_score(y_train.values[:300],predictions_train)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['acc_test'],"sklearn.metrics.accuracy_score(y_test,predictions_test)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_A,sklearn.naive_bayes.GaussianNB(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_B,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_C,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scorer,"sklearn.metrics.make_scorer(fbeta_score,beta=0.5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
neg_mask,"numpy.array(Image.open(""../../images/neg.jpg"")",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pos_mask,"numpy.array(Image.open(""../../images/pos.jpg"")",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
neutral_mask,"numpy.array(Image.open(""../../images/neutral.jpg"")",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mss_df,pandas.read_pickle(save_load_path+'/mss_df.pkl'),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_c,numpy.corrcoef(x_s.T),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.load_iris(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_s,"sklearn.preprocessing.scale(x,with_mean=True,with_std=True,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"eig_val,r_eig_vec",scipy.linalg.eig(x_c),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
