varible_name,method,"AgglomerativeClustering(metric='euclidean', n_clusters=13)","KMeans(n_clusters=13, n_init='auto', random_state=0)"
data2,"numpy.insert(data2,2,1,axis=1)",CLUSTER_1,CLUSTER_10
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
Z1,"numpy.dot(W1,X)",CLUSTER_5,CLUSTER_9
Z2,"numpy.dot(W2,A1)",CLUSTER_5,CLUSTER_9
Z3,"numpy.dot(W3,A2)",CLUSTER_5,CLUSTER_9
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
data,pandas.DataFrame(np.arange(16),CLUSTER_1,CLUSTER_3
frame,"pandas.DataFrame(np.random.randn(4,3)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({'col1':['A','A','B',np.nan,'D','C'],'col2':[2,1,9,8,7,4],'col3':[0,1,9,4,2,3],})",CLUSTER_1,CLUSTER_3
df1,"pandas.DataFrame({'key1':['foo','bar','baz','foo'],'data1':list(np.arange(1,5)",CLUSTER_1,CLUSTER_3
df2,"pandas.DataFrame({'key1':['foo','bar','qux','bar'],'data2':list(np.arange(5,9)",CLUSTER_1,CLUSTER_3
left1,"pandas.DataFrame({'key':['a','c','b','c'],'value1':[1,2,3,4],'value2':[4,5,6,7]},index=['a','b','c','e'])",CLUSTER_1,CLUSTER_3
right1,"pandas.DataFrame([[7,8],[9,10],[11,12],[13,14]],index=['b','c','d','a'],columns=['value3','value4'])",CLUSTER_1,CLUSTER_3
df1,"pandas.DataFrame([['a',1],['b',2]],index=[0,4],columns=['letter1','number'])",CLUSTER_1,CLUSTER_3
df2,"pandas.DataFrame([['c',3],['d',4]],columns=['number','letter'])",CLUSTER_1,CLUSTER_3
df1,"pandas.DataFrame({'a':[1,np.nan,5.,np.nan],'b':[np.nan,2,np.nan,6],'c':list(np.arange(2,18,4)",CLUSTER_1,CLUSTER_3
df2,"pandas.DataFrame({'a':[5,4,np.nan,3,7],'b':[np.nan,3,4,6,8]})",CLUSTER_1,CLUSTER_3
data,pandas.DataFrame(np.arange(6),CLUSTER_1,CLUSTER_3
df1,"pandas.DataFrame(np.arange(1,13)",CLUSTER_1,CLUSTER_3
df2,"pandas.DataFrame(np.arange(1,21)",CLUSTER_1,CLUSTER_3
frame,"pandas.DataFrame(np.arange(1,13)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame([[1.4,np.nan],[7.1,-4.5],[np.nan,np.nan],[0.75,-1.3]],index=list('abcd')",CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(np.arange(20),CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({""id"":[1001,1002,1003,1004,1005,1006],
""date"":pd.date_range('20130102',periods=6)",CLUSTER_1,CLUSTER_3
df1,"pandas.DataFrame({""id"":[1001,1002,1003,1004,1005,1006,1007,1008],
""gender"":['male','female','male','female','male','female','male','female'],
""pay"":['Y','N','Y','Y','N','Y','N','Y',],
""m-point"":[10,12,20,40,40,40,30,20]})",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({""id"":[1001,1002,1003,1004,1005,1006],
""date"":pd.date_range('20130102',periods=6)",CLUSTER_1,CLUSTER_3
df1,"pandas.DataFrame({""id"":[1001,1002,1003,1004,1005,1006,1007,1008],
""gender"":['male','female','male','female','male','female','male','female'],
""pay"":['Y','N','Y','Y','N','Y','N','Y',],
""m-point"":[10,12,20,40,40,40,30,20]})",CLUSTER_1,CLUSTER_3
series,"pandas.Series(range(1,4)",CLUSTER_1,CLUSTER_3
df['one'],pandas.Series(list('abdd'),CLUSTER_1,CLUSTER_3
df['sex'],"pandas.Series([1,0,0,0])",CLUSTER_1,CLUSTER_3
aaa,"pandas.concat([df1,df2],sort=True,axis=1)",CLUSTER_1,CLUSTER_3
labels,"pandas.cut(fec_mrbo.contb_receipt_amt,bins)",CLUSTER_1,CLUSTER_3
df_inner,"pandas.merge(df,df1,how='inner')",CLUSTER_1,CLUSTER_3
df_inner,"pandas.merge(df,df1,how='inner')",CLUSTER_1,CLUSTER_3
tips,pandas.read_csv('data/tips.csv'),CLUSTER_1,CLUSTER_3
fec,pandas.read_csv('data/2012FederalElectoralCommission.csv'),CLUSTER_1,CLUSTER_3
bins,"numpy.array([0,1,10,100,1000,10000,100000,1000000,10000000])",CLUSTER_1,CLUSTER_3
cl,pandas.read_csv('cleaned_demo3.csv'),CLUSTER_7,CLUSTER_5
type_label,"numpy.where(cl['Class_ASD']=='YES',0,1)",CLUSTER_7,CLUSTER_5
xx,"numpy.linspace(-1,2)",CLUSTER_7,CLUSTER_5
model,sklearn.svm.SVC(kernel='linear'),CLUSTER_7,CLUSTER_5
X,"np.append(arr=numpy.ones((50,1)",CLUSTER_5,CLUSTER_5
X,"numpy.append(arr=np.ones((50,1)",CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('50_Startups.csv'),CLUSTER_5,CLUSTER_5
labelEncoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[3]),CLUSTER_5,CLUSTER_5
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
sc_y,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
expdata_sc,"pandas.read_csv('data/mon_data/expdata_sc.csv',sep=';')",CLUSTER_8,CLUSTER_3
expdata_dnz,"pandas.read_csv('data/mon_data/expdata_dnz.csv',sep=';')",CLUSTER_8,CLUSTER_3
df_prozorro,"pandas.read_csv('data/TrainingProZorroForSchoolProject20162019.csv',sep=';',low_memory=False)",CLUSTER_8,CLUSTER_3
boundaries,"numpy.array([[0,sim_param.x_length],[0,sim_param.y_length]])",CLUSTER_3,CLUSTER_6
placement_rsrc_range,"numpy.array([[2,3],[8,16],[2,5]])",CLUSTER_3,CLUSTER_6
placement_rsrc_range,"numpy.array([[1,1],[0.5,1],[0.5,1]])",CLUSTER_3,CLUSTER_6
placement_rsrc_range,"numpy.array([[1,2],[2,4],[1,2]])",CLUSTER_3,CLUSTER_6
weak_range,"numpy.array([[4,8],[1000,1500],[4,16]])",CLUSTER_3,CLUSTER_6
strong_range,"numpy.array([[50,100],[100000,150000],[300,600]])",CLUSTER_3,CLUSTER_6
rsrc_cost,"numpy.array([0.03,0.01,0.05])",CLUSTER_3,CLUSTER_6
"servers_l3.append(Server(boundaries,level","3,rand_locs=False,locs=numpy.array([200,200])",CLUSTER_3,CLUSTER_6
lv_minmax,"numpy.array(([[500,1000],[10000,20000],[30000,50000]])",CLUSTER_3,CLUSTER_6
link_costs,"numpy.array([0.05,0.02,0.01])",CLUSTER_3,CLUSTER_6
temp_usr_dict[p],numpy.zeros(time_steps),CLUSTER_3,CLUSTER_6
exp_service,numpy.zeros((len(ILP_prob.servers),CLUSTER_3,CLUSTER_6
service_thruput,numpy.zeros(self.prob.links.distances.shape),CLUSTER_3,CLUSTER_6
num_switch,"numpy.sum(numpy.sum(service_path,axis=1)",CLUSTER_3,CLUSTER_6
num_dist,"numpy.sum(numpy.sum(latency_dists,axis=1)",CLUSTER_3,CLUSTER_6
expected_sbw,"numpy.multiply(service_bw,avg_link)",CLUSTER_3,CLUSTER_6
latency_dists,"numpy.multiply(service_path,server_distances)",CLUSTER_3,CLUSTER_6
num,re.sub(r'diverg.*\),CLUSTER_0,CLUSTER_1
algUtl,"re.sub(r'diverg.*\(',r'',arq)",CLUSTER_0,CLUSTER_1
algUtl,re.sub(r'\),CLUSTER_0,CLUSTER_1
conj_treino,pandas.DataFrame(columns=pc_vetores.columns.values),CLUSTER_0,CLUSTER_1
conj_treino,pandas.DataFrame(columns=pc_vetores.columns.values),CLUSTER_0,CLUSTER_1
conj_descart,pandas.DataFrame(columns=pc_vetores.columns.values),CLUSTER_0,CLUSTER_1
pc_vetores,"pandas.concat([duplicata,pc_vetores],axis=1,ignore_index=False)",CLUSTER_0,CLUSTER_1
geral,"pandas.concat([pc_vetores,conj_treino])",CLUSTER_0,CLUSTER_1
estatisticas,"pandas.read_csv(estat,index_col=['algoritmosUtilizados','etapa','permutacao'],sep=';')",CLUSTER_0,CLUSTER_1
pc,"pandas.read_csv(pc,sep=';',index_col=['elemento1','elemento2'])",CLUSTER_0,CLUSTER_1
"exc_type,exc_obj,exc_tb",sys.exc_info(),CLUSTER_0,CLUSTER_1
"exc_type,exc_obj,exc_tb",sys.exc_info(),CLUSTER_0,CLUSTER_1
"exc_type,exc_obj,exc_tb",sys.exc_info(),CLUSTER_0,CLUSTER_1
"exc_type,exc_obj,exc_tb",sys.exc_info(),CLUSTER_0,CLUSTER_1
"exc_type,exc_obj,exc_tb",sys.exc_info(),CLUSTER_0,CLUSTER_1
cv_results,"sklearn.model_selection.cross_val_score(modelo,X_train,y_train,cv=kfold,scoring='f1')",CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(XtoClass,ytoClass,test_size=0.20,random_state=seed)",CLUSTER_0,CLUSTER_1
modelo,sklearn.tree.DecisionTreeClassifier(random_state=seed),CLUSTER_0,CLUSTER_1
modelo,sklearn.svm.SVC(random_state=seed),CLUSTER_0,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=seed)",CLUSTER_0,CLUSTER_1
kfold,"sklearn.model_selection.KFold(n_splits=2,random_state=seed)",CLUSTER_0,CLUSTER_1
kfold,"sklearn.model_selection.KFold(n_splits=5,random_state=seed)",CLUSTER_0,CLUSTER_1
kfold,sklearn.model_selection.KFold(random_state=seed),CLUSTER_0,CLUSTER_1
kfold,"sklearn.model_selection.KFold(n_splits=2,random_state=seed)",CLUSTER_0,CLUSTER_1
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
all_times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
target_times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
detrended_mem_pot,"detrend(eval(key),type='linear',bp=numpy.arange(smoothing_step,
len(eval(key)",CLUSTER_4,CLUSTER_11
detrended_mem_pot,"detrend(eval(key),type='linear',bp=numpy.arange(smoothing_step,
len(eval(key)",CLUSTER_4,CLUSTER_11
detrended_mem_pot,numpy.convolve(smoothing_filter/smoothing_filter.sum(),CLUSTER_4,CLUSTER_11
smoothing_filter,numpy.ones((int(2/.001),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['flash_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['intraRF_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['linesRF_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['flash_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['intraRF_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['linesRF_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['flash_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['intraRF_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['linesRF_v']-time_us),CLUSTER_4,CLUSTER_11
scaling_factor,numpy.mean(np.diff(times[params[0]]),CLUSTER_4,CLUSTER_11
scaling_factor,numpy.mean(np.diff(times[params[0]]),CLUSTER_4,CLUSTER_11
scaling_factor,numpy.mean(np.diff(times[params[0]]),CLUSTER_4,CLUSTER_11
boxes_time,"numpy.linspace(0,500.015,boxes_len)",CLUSTER_4,CLUSTER_11
lines_time,"numpy.linspace(0,)",CLUSTER_4,CLUSTER_11
time_intraRF_v,"numpy.linspace(times['intraRF_v'][0],times['intraRF_v'][1],len(intraRF_v)",CLUSTER_4,CLUSTER_11
time_boxes,"numpy.linspace(times['boxes'][0],times['boxes'][1],boxes.shape[0])",CLUSTER_4,CLUSTER_11
target_times[key],"numpy.linspace(0,minimum_times[key],int(minimum_times[key]/sampling_rate)",CLUSTER_4,CLUSTER_11
times[params[0]],numpy.linspace(float(params[1]),CLUSTER_4,CLUSTER_11
times[params[0]],numpy.linspace(float(params[-2]),CLUSTER_4,CLUSTER_11
times[params[0]],numpy.linspace(float(params[-2]),CLUSTER_4,CLUSTER_11
times[params[0]],numpy.linspace(float(params[1]),CLUSTER_4,CLUSTER_11
times[params[0]],numpy.linspace(float(params[-2]),CLUSTER_4,CLUSTER_11
times[params[0]],numpy.linspace(float(params[1]),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['linesRF_v'][key]forkeyinsorted_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['intraRF_v'][key]forkeyinsorted_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['flash_v'][key]forkeyinsorted_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['linesRF_v'][key]forkeyinsorted_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['intraRF_v'][key]forkeyinsorted_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['flash_v'][key]forkeyinsorted_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['linesRF_v'][key]forkeyinlate_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['intraRF_v'][key]forkeyinlate_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['flash_v'][key]forkeyinlate_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['linesRF_v'][key]forkeyinlate_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['intraRF_v'][key]forkeyinlate_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['flash_v'][key]forkeyinlate_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['linesRF_v'][key]forkeyinearly_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['intraRF_v'][key]forkeyinearly_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['flash_v'][key]forkeyinearly_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['linesRF_v'][key]forkeyinearly_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['intraRF_v'][key]forkeyinearly_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['flash_v'][key]forkeyinearly_2012_expts),CLUSTER_4,CLUSTER_11
boxes,"numpy.loadtxt(h_file+'/'+'boxes.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
intraRF_v,"numpy.loadtxt(h_file+'/'+'intraRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
lines,"numpy.loadtxt(h_file+'/'+'lines.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
intraRF,"numpy.loadtxt(h_file+'/intraRF.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
linesRF,"numpy.loadtxt(h_file+'/linesRF.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flash,"numpy.loadtxt(h_file+'/flash.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
intraRF_v,"numpy.loadtxt(h_file+'/intraRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
linesRF_v,"numpy.loadtxt(h_file+'/linesRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flash_v,"numpy.loadtxt(h_file+'/flash_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
boxes,"numpy.loadtxt(h_file+'/boxes.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
lines,"numpy.loadtxt(h_file+'/lines.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flashStim,"numpy.loadtxt(h_file+'/flashStim.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
boxes,"numpy.loadtxt(h_file+'/boxes.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
lines,"numpy.loadtxt(h_file+'/lines.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flashStim,"numpy.loadtxt(h_file+'/flashStim.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
intraRF,"numpy.loadtxt(h_file+'/intraRF.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
linesRF,"numpy.loadtxt(h_file+'/linesRF.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flash,"numpy.loadtxt(h_file+'/flash.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
intraRF_v,"numpy.loadtxt(h_file+'/intraRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
linesRF_v,"numpy.loadtxt(h_file+'/linesRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flash_v,"numpy.loadtxt(h_file+'/flash_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
boxes,"numpy.loadtxt(h_file+'/boxes.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
lines,"numpy.loadtxt(h_file+'/lines.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flashStim,"numpy.loadtxt(h_file+'/flashStim.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
intraRF_v,"numpy.loadtxt(h_file+'/intraRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
linesRF_v,"numpy.loadtxt(h_file+'/linesRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flash_v,"numpy.loadtxt(h_file+'/flash_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
mem_pot_interp,"scipy.interpolate.interp1d(times[key],eval(key)",CLUSTER_4,CLUSTER_11
detrended_interp,"scipy.interpolate.interp1d(times[key],detrended_mem_pot,kind='linear',bounds_error=False,
fill_value='extrapolate')",CLUSTER_4,CLUSTER_11
mem_pot_interp,"scipy.interpolate.interp1d(times[key],eval(key)",CLUSTER_4,CLUSTER_11
detrended_interp,"scipy.interpolate.interp1d(times[key],detrended_mem_pot,kind='linear',bounds_error=False,
fill_value='extrapolate')",CLUSTER_4,CLUSTER_11
mem_pot_interp,"scipy.interpolate.interp1d(times[key],eval(key)",CLUSTER_4,CLUSTER_11
detrended_interp,"scipy.interpolate.interp1d(times[key],detrended_mem_pot,kind='linear',bounds_error=False,
fill_value='extrapolate')",CLUSTER_4,CLUSTER_11
detrended_mem_pot,scipy.signal.detrend(eval(key),CLUSTER_4,CLUSTER_11
detrended_mem_pot,scipy.signal.detrend(eval(key),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.gcf(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.gcf(),CLUSTER_4,CLUSTER_11
dfGender,"pandas.DataFrame(data=gender_onehot_encoded,columns=['F','M'])",CLUSTER_7,CLUSTER_5
dfAge,"pandas.DataFrame(data=age_onehot_encoded,columns=ageColumns)",CLUSTER_7,CLUSTER_5
dfOccupation,"pandas.DataFrame(data=occupation_onehot_encoded,columns=occupationColumns)",CLUSTER_7,CLUSTER_5
dfCityCat,"pandas.DataFrame(data=city_cat_onehot_encoded,columns=City_Cat_Columns)",CLUSTER_7,CLUSTER_5
NumPurchByAgeDf,pandas.DataFrame(NumPurchByAge),CLUSTER_7,CLUSTER_5
AvgPurchByAgeDf,pandas.DataFrame(AvgPurchByAge),CLUSTER_7,CLUSTER_5
TotalPurchByIDDf,pandas.DataFrame(TotalPurchByID),CLUSTER_7,CLUSTER_5
df2,"pandas.concat([df,dfGender,dfAge,dfOccupation,dfCityCat],axis=1,join='inner')",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('train1.csv'),CLUSTER_7,CLUSTER_5
values,numpy.array(data),CLUSTER_7,CLUSTER_5
gender,numpy.array(df['Gender']),CLUSTER_7,CLUSTER_5
ageArray,numpy.array(df['Age']),CLUSTER_7,CLUSTER_5
occupationArray,numpy.array(df['Occupation']),CLUSTER_7,CLUSTER_5
city_catArray,numpy.array(df['City_Category']),CLUSTER_7,CLUSTER_5
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_7,CLUSTER_5
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_7,CLUSTER_5
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_7,CLUSTER_5
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_7,CLUSTER_5
city_cat_onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(x=x,y=y,data=NumPurchByAgeDf)",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(x=x1,y=y1,data=AvgPurchByAgeDf)",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(x=x2,y=y2,data=TotalPurchByIDDf)",CLUSTER_7,CLUSTER_5
summary_table,"pandas.DataFrame({""MeanTumorVolume"":means,
""MedianTumorVolume"":medians,
""TumorVolumeVariance"":variances,
""TumorVolumeStd.Dev."":sds,
""TumorVolumeStd.Err."":sems})",CLUSTER_1,CLUSTER_9
combined_results,"pandas.merge(mouse_metadata,study_results,how=""left"",on=""MouseID"")",CLUSTER_1,CLUSTER_9
mouse_metadata,pandas.read_csv(mouse_metadata_path),CLUSTER_1,CLUSTER_9
study_results,pandas.read_csv(study_results_path),CLUSTER_1,CLUSTER_9
model,scipy.stats.linregress(capomulin_average['Weight(g),CLUSTER_1,CLUSTER_9
b1,"numpy.zeros((n_h,1)",CLUSTER_1,CLUSTER_10
b2,"numpy.zeros((n_y,1)",CLUSTER_1,CLUSTER_10
parameters['b'+str(l)],"numpy.zeros((layer_dims[l],1)",CLUSTER_1,CLUSTER_10
Z,"numpy.dot(W,A)",CLUSTER_1,CLUSTER_10
dA_prev,"numpy.dot(W.T,dZ)",CLUSTER_1,CLUSTER_10
cost,numpy.squeeze(cost),CLUSTER_1,CLUSTER_10
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_6,CLUSTER_10
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_6,CLUSTER_10
response,requests.get(img_path),CLUSTER_6,CLUSTER_10
df,"pandas.DataFrame(data_cleaned_stem,columns=['text','label','conf0','conf1','conf2'])",CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(dir_in+dataset_name+'.csv',encoding=""ISO-8859-1"")",CLUSTER_0,CLUSTER_1
idx_neg,numpy.where(df.label.values==0),CLUSTER_0,CLUSTER_1
idx_pos,numpy.where(df.label.values==1),CLUSTER_0,CLUSTER_1
idx_nut,numpy.where(df.label.values==2),CLUSTER_0,CLUSTER_1
idx_neg,numpy.where(df.label.values==0),CLUSTER_0,CLUSTER_1
idx_pos,numpy.where(df.label.values==1),CLUSTER_0,CLUSTER_1
idx_nut,numpy.where(df.label.values==2),CLUSTER_0,CLUSTER_1
test_indx,"numpy.concatenate((test_idx_neg,test_idx_pos,test_idx_nut)",CLUSTER_0,CLUSTER_1
val_indx,"numpy.concatenate((val_idx_neg,val_idx_pos,val_idx_nut)",CLUSTER_0,CLUSTER_1
tick_marks,numpy.arange(len(classes),CLUSTER_4,CLUSTER_0
X_train,"numpy.array(X_train_orig,dtype=np.float32)",CLUSTER_4,CLUSTER_0
X_test,"numpy.array(X_test_orig,dtype=np.float32)",CLUSTER_4,CLUSTER_0
Y_train,"numpy.array(Y_train_orig,dtype=np.float32)",CLUSTER_4,CLUSTER_0
Y_test,"numpy.array(Y_test_orig,dtype=np.float32)",CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(5,10,figsize=(15,6)",CLUSTER_4,CLUSTER_0
"(X_traing,X_val,Y_traing,Y_val)","sklearn.model_selection.train_test_split(X_train,Y_train,test_size=0.25,random_state=42,stratify=Y_train)",CLUSTER_4,CLUSTER_0
index,"random.randint(0,len(X_train_orig)",CLUSTER_4,CLUSTER_0
confm,"sklearn.metrics.confusion_matrix(Y_val_int,y_pred_int)",CLUSTER_4,CLUSTER_0
confm,"sklearn.metrics.confusion_matrix(y_test_int,y_pred_test_int)",CLUSTER_4,CLUSTER_0
f1,"sklearn.metrics.f1_score(Y_val_int,y_pred_int,average='weighted')",CLUSTER_4,CLUSTER_0
f1,"sklearn.metrics.f1_score(y_test_int,y_pred_test_int,average='weighted')",CLUSTER_4,CLUSTER_0
Re,"sklearn.metrics.recall_score(Y_val_int,y_pred_int,average='weighted')",CLUSTER_4,CLUSTER_0
Re,"sklearn.metrics.recall_score(y_test_int,y_pred_test_int,average='weighted')",CLUSTER_4,CLUSTER_0
plot_df,pandas.DataFrame(),CLUSTER_7,CLUSTER_3
fandango_score_comp,pandas.read_csv('fandango_score_comparison.csv'),CLUSTER_7,CLUSTER_3
movie_ratings,pandas.read_csv('movie_ratings_16_17.csv'),CLUSTER_7,CLUSTER_3
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,random_state=49)",CLUSTER_4,CLUSTER_11
"X,y","sklearn.datasets.make_moons(n_samples=500,noise=0.30,random_state=42)",CLUSTER_4,CLUSTER_11
rnd_clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_11
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,max_leaf_nodes=16,n_jobs=-1,random_state=42)",CLUSTER_4,CLUSTER_11
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,n_jobs=-1,random_state=42)",CLUSTER_4,CLUSTER_11
rnd_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_4,CLUSTER_11
voting_clf,"sklearn.ensemble.VotingClassifier(
estimators=[('lr',log_clf)",CLUSTER_4,CLUSTER_11
log_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_11
svm_clf,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_11
svm_clf,"sklearn.svm.SVC(kernel=""rbf"",C=0.05,random_state=42)",CLUSTER_4,CLUSTER_11
bag_clf,"sklearn.ensemble.BaggingClassifier(
DecisionTreeClassifier()",CLUSTER_4,CLUSTER_11
bag_clf,"sklearn.ensemble.BaggingClassifier(
DecisionTreeClassifier(random_state=42)",CLUSTER_4,CLUSTER_11
bag_clf,"sklearn.ensemble.BaggingClassifier(
DecisionTreeClassifier(splitter=""random"",max_leaf_nodes=16,random_state=42)",CLUSTER_4,CLUSTER_11
tree_clf,sklearn.tree.DecisionTreeClassifier(random_state=42),CLUSTER_4,CLUSTER_11
X_new,numpy.array([[0.8]]),CLUSTER_4,CLUSTER_11
sample_weights,numpy.ones(m),CLUSTER_4,CLUSTER_11
bst_n_estimators,numpy.argmin(errors),CLUSTER_4,CLUSTER_11
x1s,"numpy.linspace(axes[0],axes[1],100)",CLUSTER_4,CLUSTER_11
x2s,"numpy.linspace(axes[2],axes[3],100)",CLUSTER_4,CLUSTER_11
x1,"numpy.linspace(axes[0],axes[1],500)",CLUSTER_4,CLUSTER_11
"x1,x2","numpy.meshgrid(x1s,x2s)",CLUSTER_4,CLUSTER_11
iris,sklearn.datasets.load_iris(),CLUSTER_4,CLUSTER_11
ada_clf,"sklearn.ensemble.AdaBoostClassifier(
DecisionTreeClassifier(max_depth=1)",CLUSTER_4,CLUSTER_11
tree_reg1,"sklearn.tree.DecisionTreeRegressor(max_depth=2,random_state=42)",CLUSTER_4,CLUSTER_11
tree_reg2,"sklearn.tree.DecisionTreeRegressor(max_depth=2,random_state=42)",CLUSTER_4,CLUSTER_11
tree_reg3,"sklearn.tree.DecisionTreeRegressor(max_depth=2,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=3,learning_rate=1.0,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt_underfit,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=3,learning_rate=0.1,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt_slow,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=200,learning_rate=0.1,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=120,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt_best,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=bst_n_estimators,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,warm_start=True,random_state=42)",CLUSTER_4,CLUSTER_11
val_error,"sklearn.metrics.mean_squared_error(y_val,y_pred)",CLUSTER_4,CLUSTER_11
dataset,"pandas.read_csv('dataset/dataset-normalizado.csv',header=0)",CLUSTER_7,CLUSTER_3
confusion,"
pandas.DataFrame(confusion,
columns=['predicted_home_win','predicted_home_loss'],
index=['predicted_home_win','predicted_home_loss'])",CLUSTER_7,CLUSTER_5
coef_df,"pandas.DataFrame({'coef':best_lr.coef_[0],
'feature':X.columns,
'abs_coef':np.abs(best_lr.coef_[0])",CLUSTER_7,CLUSTER_5
data,pandas.read_csv('./datasets/basketball_data.csv'),CLUSTER_7,CLUSTER_5
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
knn,"
sklearn.model_selection.cross_val_score()",CLUSTER_7,CLUSTER_5
lr,"
sklearn.model_selection.cross_val_score()",CLUSTER_7,CLUSTER_5
knn_gridsearch,sklearn.model_selection.GridSearchCV(KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
lr_gridsearch,sklearn.model_selection.GridSearchCV(),CLUSTER_7,CLUSTER_5
actionindex,"numpy.zeros(self.num_actions,dtype=np.int)",CLUSTER_3,CLUSTER_6
feature,numpy.concatenate([actionindex[i]*stateforiinself.actions]),CLUSTER_3,CLUSTER_6
pic_arr,numpy.asarray(pic),CLUSTER_1,CLUSTER_10
iris,pandas.read_csv('../data/iris.csv'),CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(X),CLUSTER_5,CLUSTER_1
df,"pandas.concat(rows,axis=1)",CLUSTER_5,CLUSTER_1
candidates,numpy.flatnonzero(results['rank_test_score']==i),CLUSTER_5,CLUSTER_1
all_scores,numpy.hstack(scores),CLUSTER_5,CLUSTER_1
dataset,sklearn.datasets.load_breast_cancer(),CLUSTER_5,CLUSTER_1
clf,"sklearn.linear_model.LogisticRegression(solver='lbfgs',max_iter=1000,penalty='none')",CLUSTER_5,CLUSTER_1
clf,"sklearn.linear_model.LogisticRegression(solver='lbfgs',max_iter=1000,penalty='l2')",CLUSTER_5,CLUSTER_1
clf,"sklearn.linear_model.LogisticRegression(solver='lbfgs',max_iter=1000,penalty='l2',class_weight='balanced')",CLUSTER_5,CLUSTER_1
res,"sklearn.metrics.confusion_matrix(y_train,yp_train)",CLUSTER_5,CLUSTER_1
res2,"sklearn.metrics.confusion_matrix(y_test,yp_test)",CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=2)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('clf',clf)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('clf',clf)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_1
clf,sklearn.svm.SVC(gamma='auto'),CLUSTER_5,CLUSTER_1
svc,"sklearn.svm.SVC(gamma=""scale"")",CLUSTER_5,CLUSTER_1
clf,"sklearn.svm.SVC(kernel='linear',C=100,gamma='auto')",CLUSTER_5,CLUSTER_1
clf,"sklearn.model_selection.GridSearchCV(svc,param_grid,cv=5,verbose=0)",CLUSTER_5,CLUSTER_1
gs,"sklearn.model_selection.GridSearchCV(model,params,cv=cv,n_jobs=n_jobs,
verbose=verbose,scoring=scoring,refit=refit,
return_train_score=True)",CLUSTER_5,CLUSTER_1
graph_data,json.load(json_file),CLUSTER_12,CLUSTER_12
solution,json.load(json_file),CLUSTER_12,CLUSTER_12
features,"pandas.read_csv(""../Resources/features.csv"")",CLUSTER_11,CLUSTER_5
"np.where(features[""Unemployment""].values>",numpy.finfo(np.float64),CLUSTER_11,CLUSTER_5
"train_WM,test_WM","sklearn.model_selection.train_test_split(features,test_size=0.3,random_state=42)",CLUSTER_11,CLUSTER_5
"train_features,test_features","sklearn.model_selection.train_test_split(features,test_size=0.3,random_state=42

print(train_features.shape,test_features.shape)",CLUSTER_11,CLUSTER_5
features_Linear,sklearn.linear_model.LinearRegression(normalize=True),CLUSTER_11,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_6,CLUSTER_10
filter_vals,"numpy.array([[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1]])",CLUSTER_6,CLUSTER_10
filters,"numpy.array([filter_1,filter_2,filter_3,filter_4])",CLUSTER_6,CLUSTER_10
x,"numpy.expand_dims(x,axis=0)",CLUSTER_12,CLUSTER_10
data,"pandas.DataFrame(data={""menu"":1,""id"":idd,""name"":name,""businessCategory"":businessCategory,""category"":category,""desc"":desc,
""microReview"":microReview,""tags"":tags,""options"":options,""totalReviewCount"":totalReviewCount,
""roadAddr"":roadAddr,""commonAddr"":commonAddr,""addr"":addr,""phone"":phone,""x"":x,""y"":y,
""imageSrc"":imageSrc},columns=col)",CLUSTER_9,CLUSTER_12
r_list,json.loads(r_list),CLUSTER_9,CLUSTER_12
unique_vals,numpy.unique(raw_data[column]),CLUSTER_7,CLUSTER_5
Coeff_df,"pandas.DataFrame(Coeff,columns=[X2.columns])",CLUSTER_7,CLUSTER_5
new_raw_data,"pandas.get_dummies(raw_data,columns=['Promo','Day_Name'])",CLUSTER_7,CLUSTER_5
raw_data,pandas.read_csv(r'C:\Users\chest\OneDrive\Desktop\Marketing\dataset\MarketingRawData.csv'),CLUSTER_7,CLUSTER_5
g,"seaborn.boxplot(x='Day_Name',y='Revenue',data=raw_data,hue='Promo',palette=pal)",CLUSTER_7,CLUSTER_5
g,"seaborn.heatmap(hm,annot=True,annot_kws={'size':40})",CLUSTER_7,CLUSTER_5
g,"seaborn.lmplot(x='MarketingSpend',y='Revenue',data=raw_data,col='Day_Name',col_wrap=3,height=5,
scatter_kws={'color':'green'},ci=False)",CLUSTER_7,CLUSTER_5
g,seaborn.pairplot(raw_data),CLUSTER_7,CLUSTER_5
g,"seaborn.pairplot(raw_data[['Visitors','Revenue','MarketingSpend','Promo']],hue='Promo',height=5)",CLUSTER_7,CLUSTER_5
g,"seaborn.pairplot(raw_data[['Visitors','Revenue','MarketingSpend','Day_Name']],hue='Day_Name',height=5)",CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_7,CLUSTER_5
dt,"sklearn.tree.DecisionTreeClassifier(random_state=15,criterion='entropy',max_depth=10)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=0.80,test_size=0.2,random_state=15)",CLUSTER_7,CLUSTER_5
parkinson_data,"pandas.read_csv(""Parkinson-disease-data-updated"")",CLUSTER_5,CLUSTER_5
indices,numpy.argsort(etc.feature_importances_),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(scled_features,labels,test_size=0.3)",CLUSTER_5,CLUSTER_5
etc,sklearn.ensemble.ExtraTreesClassifier(n_estimators=300),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_5
new_knn,"sklearn.neighbors.KNeighborsClassifier(algorithm='auto',leaf_size=30,metric='minkowski',
metric_params=None,n_jobs=1,n_neighbors=3,p=1,
weights='uniform')",CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
lr_tuned,"sklearn.linear_model.LogisticRegression(C=1000,penalty='l2')",CLUSTER_5,CLUSTER_5
dtc,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_5
rfc,sklearn.ensemble.RandomForestClassifier(n_estimators=350),CLUSTER_5,CLUSTER_5
sub_train,pandas.DataFrame(app_train['WEEKDAY_APPR_PROCESS_START']),CLUSTER_8,CLUSTER_11
dummy_sub_train,"pandas.get_dummies(sub_train[""WEEKDAY_APPR_PROCESS_START""])",CLUSTER_8,CLUSTER_11
app_train,pandas.read_csv(f_app_train),CLUSTER_8,CLUSTER_11
data,"numpy.array([1,3,5,2,3,7,8,4,10,0,6,7,3,0,3,0,5,7,10,1,4,9,3])",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame([[10,20,30,40],[7,14,21,28],[55,15,8,12],
[15,14,1,8],[7,1,1,8],[5,4,9,2]],
columns=['Apple','Orange','Banana','Pear'],
index=['Basket1','Basket2','Basket3','Basket4',
'Basket5','Basket6'])",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('titanic.csv'),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('titanic.csv'),CLUSTER_1,CLUSTER_3
means,pandas.DataFrame(returns.tail(30),CLUSTER_7,CLUSTER_3
std,pandas.DataFrame(returns.tail(30),CLUSTER_7,CLUSTER_3
df,"pandas.concat(data,sort=True)",CLUSTER_7,CLUSTER_3
ratios,"pandas.concat([means,std],axis=1)",CLUSTER_7,CLUSTER_3
companies,pandas.read_csv(path),CLUSTER_7,CLUSTER_3
chart,"seaborn.barplot(data=df,x=x,y=y)",CLUSTER_7,CLUSTER_3
cmap,"seaborn.diverging_palette(6,255,as_cmap=True)",CLUSTER_7,CLUSTER_3
chart,"seaborn.heatmap(corr,mask=mask,cmap=cmap,center=0,linewidths=.5,annot=True,fmt='.2f')",CLUSTER_7,CLUSTER_3
weights,numpy.array(np.random.random(5),CLUSTER_7,CLUSTER_3
all_weights,"numpy.zeros((num_ports,len(pivot2.columns)",CLUSTER_7,CLUSTER_3
ret_arr,numpy.zeros(num_ports),CLUSTER_7,CLUSTER_3
vol_arr,numpy.zeros(num_ports),CLUSTER_7,CLUSTER_3
sharpe_arr,numpy.zeros(num_ports),CLUSTER_7,CLUSTER_3
mask,"numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_7,CLUSTER_3
ret_arr[x],numpy.sum((log_ret.mean(),CLUSTER_7,CLUSTER_3
log_ret,numpy.log(pivot2/pivot2.shift(1),CLUSTER_7,CLUSTER_3
vol_arr[x],"numpy.sqrt(np.dot(weights.T,np.dot(log_ret.cov()",CLUSTER_7,CLUSTER_3
df_sample,pandas.DataFrame(df),CLUSTER_5,CLUSTER_1
df,"pandas.read_csv(file_name,encoding='ANSI')",CLUSTER_5,CLUSTER_1
data,"numpy.array(df.iloc[:,0])",CLUSTER_5,CLUSTER_1
target,"numpy.array(df.iloc[:,1])",CLUSTER_5,CLUSTER_1
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(clf,arr[n:],target[n:],cv=5)",CLUSTER_5,CLUSTER_1
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_1
clf_pf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_1
dataset,"pandas.DataFrame({
'sma_60':sma_60,
'sma_20':sma_20,
'sma_5':sma_5,
'k':k,
'd':d,
'rsi':rsi
})",CLUSTER_7,CLUSTER_5
dataset_scaled,"pandas.DataFrame(dataset_scaled,columns=dataset.columns,index=dataset.index)",CLUSTER_7,CLUSTER_5
exp_y,"pandas.Series(exp_y,index=train_x.index)",CLUSTER_7,CLUSTER_5
exp_test_y,"pandas.Series(exp_test_y,index=test_x.index)",CLUSTER_7,CLUSTER_5
predict_df,"pandas.Series(predict,index=inputX.index)",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv('2317.TW.csv',index_col='Date')",CLUSTER_7,CLUSTER_5
"precisions,recalls,thresholds","sklearn.metrics.precision_recall_curve(test_y,exp_test_y)",CLUSTER_7,CLUSTER_5
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
white_bgd,"numpy.full((bgd_h,bgd_w,3)",CLUSTER_4,CLUSTER_7
max_index,numpy.argmax(areas),CLUSTER_4,CLUSTER_7
obj_index,"random.randint(0,len(obj_names_lst)",CLUSTER_4,CLUSTER_7
obj_x,"random.randint(0,bgd_w-obj_w-1)",CLUSTER_4,CLUSTER_7
obj_y,"random.randint(0,bgd_h-obj_h-1)",CLUSTER_4,CLUSTER_7
train_csv,pandas.read_csv('./data/train.csv'),CLUSTER_7,CLUSTER_8
test_csv,pandas.read_csv('./data/test.csv'),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(20,4)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
Mscaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
labels,"pandas.read_csv('datasets/labels.csv',index_col=0)",CLUSTER_5,CLUSTER_5
X,numpy.array(image_list),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(1),CLUSTER_5,CLUSTER_5
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
"x_interim,x_eval,y_interim,y_eval","sklearn.model_selection.train_test_split(X,
y,
test_size=0.2,
random_state=52)",CLUSTER_5,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_interim,
y_interim,
test_size=0.4,
random_state=52)",CLUSTER_5,CLUSTER_5
freq,collections.defaultdict(int),CLUSTER_10,CLUSTER_4
df,pandas.DataFrame(data=d),CLUSTER_8,CLUSTER_3
new_df,pandas.DataFrame(data=new_df),CLUSTER_8,CLUSTER_3
data,"pandas.read_csv('movies.txt',sep="""",header=None)",CLUSTER_8,CLUSTER_3
movie,pandas.read_fwf('movies.txt'),CLUSTER_8,CLUSTER_3
df,"pandas.read_table('movies.txt',header=None)",CLUSTER_8,CLUSTER_3
wordset,numpy.genfromtxt(fname='temp.txt'),CLUSTER_8,CLUSTER_3
content,json.load(fin),CLUSTER_8,CLUSTER_3
summary_table,"pandas.DataFrame({""VehicleMake"":count_cars
})",CLUSTER_1,CLUSTER_3
motor_vehicle_df,"pandas.read_csv(file,encoding=""ISO-8859-1"")",CLUSTER_1,CLUSTER_3
state_count_df,"pandas.read_csv(state,encoding=""ISO-8859-1"")",CLUSTER_1,CLUSTER_3
x_axis,numpy.arange(len(edit_table),CLUSTER_1,CLUSTER_3
x_axis,numpy.arange(len(df1),CLUSTER_1,CLUSTER_3
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_5,CLUSTER_10
grid,"sklearn.model_selection.GridSearchCV(knn,param_grid,cv=10,scoring='accuracy')",CLUSTER_5,CLUSTER_10
classifier,"sklearn.ensemble.RandomForestClassifier(oob_score=True,n_estimators=20,max_depth=5)",CLUSTER_5,CLUSTER_10
data,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_10
self.graph,collections.defaultdict(list),CLUSTER_0,CLUSTER_10
self.graph,collections.defaultdict(list),CLUSTER_0,CLUSTER_10
self.graph,collections.defaultdict(list),CLUSTER_0,CLUSTER_10
start3,time.time(),CLUSTER_0,CLUSTER_10
end3,time.time(),CLUSTER_0,CLUSTER_10
start3,time.time(),CLUSTER_0,CLUSTER_10
end3,time.time(),CLUSTER_0,CLUSTER_10
start1,time.time(),CLUSTER_0,CLUSTER_10
end1,time.time(),CLUSTER_0,CLUSTER_10
start2,time.time(),CLUSTER_0,CLUSTER_10
end2,time.time(),CLUSTER_0,CLUSTER_10
index,numpy.arange(len(label),CLUSTER_0,CLUSTER_10
lower_green,"numpy.array([hmin,s,v])",CLUSTER_1,CLUSTER_10
upper_green,"numpy.array([hmax,255,255])",CLUSTER_1,CLUSTER_10
img,"numpy.zeros((300,512,3)",CLUSTER_1,CLUSTER_10
hsv,"numpy.zeros((300,512,3)",CLUSTER_1,CLUSTER_10
hminsv,"numpy.zeros((100,200,3)",CLUSTER_1,CLUSTER_10
hmaxsv,"numpy.zeros((100,200,3)",CLUSTER_1,CLUSTER_10
row_indices,numpy.arange(4),CLUSTER_12,CLUSTER_9
col_indices,numpy.arange(4),CLUSTER_12,CLUSTER_9
x,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_12,CLUSTER_9
X_new,"numpy.array([[5,2.9,1,0.2]])",CLUSTER_12,CLUSTER_9
data,numpy.ones(4),CLUSTER_12,CLUSTER_9
y,numpy.sin(x),CLUSTER_12,CLUSTER_9
x,"numpy.linspace(-10,10,100)",CLUSTER_12,CLUSTER_9
eye,numpy.eye(4),CLUSTER_12,CLUSTER_9
eye_coo,"scipy.sparse.coo_matrix((data,(row_indices,col_indices)",CLUSTER_12,CLUSTER_9
sparse_matrix,scipy.sparse.csr_matrix(eye),CLUSTER_12,CLUSTER_9
data_pandas,pandas.DataFrame(data),CLUSTER_12,CLUSTER_9
iris_dataframe,"pandas.DataFrame(X_train,columns=iris_dataset.feature_names)",CLUSTER_12,CLUSTER_9
iris_dataset,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
iris_dataset['data'],iris_dataset['target'],random_state=0)",CLUSTER_12,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
iris_dataset['data'],iris_dataset['target'],random_state=0)",CLUSTER_12,CLUSTER_9
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_12,CLUSTER_9
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_12,CLUSTER_9
sub_train,pandas.DataFrame(app_train['WEEKDAY_APPR_PROCESS_START']),CLUSTER_5,CLUSTER_1
app_train,pandas.get_dummies(app_train),CLUSTER_5,CLUSTER_1
app_test,pandas.get_dummies(app_test),CLUSTER_5,CLUSTER_1
app_train,pandas.read_csv(f_app_train),CLUSTER_5,CLUSTER_1
app_test,pandas.read_csv(f_app_test),CLUSTER_5,CLUSTER_1
app_train,pandas.read_csv(f_app_train),CLUSTER_5,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
ax,"matplotlib.pyplot.subplot(1,batch_size,i+1)",CLUSTER_6,CLUSTER_10
image,"numpy.transpose(image,(1,2,0)",CLUSTER_6,CLUSTER_10
measurements_df,"pandas.read_csv(""clean_hawaii_measurements.csv"")",CLUSTER_8,CLUSTER_3
stations,"pandas.read_csv(""clean_hawaii_stations.csv"")",CLUSTER_8,CLUSTER_3
pixels,numpy.asarray(image),CLUSTER_4,CLUSTER_11
pima,"pandas.read_csv(""diabetes.csv"")",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=0)",CLUSTER_8,CLUSTER_1
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
d,"datetime.date(2010,10,4)",CLUSTER_10,CLUSTER_12
d,"datetime.date(2010,10,4)",CLUSTER_10,CLUSTER_12
d2,"datetime.datetime(2020,1,3)",CLUSTER_10,CLUSTER_12
testcases_files,os.listdir(testcases_path),CLUSTER_4,CLUSTER_7
testcases_files,os.listdir(testcases_path),CLUSTER_4,CLUSTER_7
testcases_files,os.listdir(testcases_path),CLUSTER_4,CLUSTER_7
pred_df,pandas.DataFrame(pred_dict),CLUSTER_4,CLUSTER_7
pred_df,pandas.DataFrame(pred_dict),CLUSTER_4,CLUSTER_7
pred_df,pandas.DataFrame(pred_dict),CLUSTER_4,CLUSTER_7
df_essay,"pandas.read_csv(testing_path,engine='python')",CLUSTER_4,CLUSTER_7
df_essay,"pandas.read_csv(testing_path,engine='python')",CLUSTER_4,CLUSTER_7
df_essay,"pandas.read_csv(testing_path,engine='python')",CLUSTER_4,CLUSTER_7
preds,numpy.clip(np.round(preds),CLUSTER_4,CLUSTER_7
preds,numpy.clip(np.round(preds),CLUSTER_4,CLUSTER_7
preds,numpy.clip(np.round(preds),CLUSTER_4,CLUSTER_7
preds,numpy.clip(np.round(preds),CLUSTER_4,CLUSTER_7
preds,numpy.clip(np.round(preds),CLUSTER_4,CLUSTER_7
preds,numpy.clip(np.round(preds),CLUSTER_4,CLUSTER_7
test_preds,"numpy.append(test_preds,predsF)",CLUSTER_4,CLUSTER_7
test_preds,"numpy.append(test_preds,preds2[ite])",CLUSTER_4,CLUSTER_7
test_preds,"numpy.append(test_preds,predsF)",CLUSTER_4,CLUSTER_7
test_preds,"numpy.append(test_preds,preds2[ite])",CLUSTER_4,CLUSTER_7
test_preds,"numpy.append(test_preds,predsF)",CLUSTER_4,CLUSTER_7
test_preds,"numpy.append(test_preds,preds2[ite])",CLUSTER_4,CLUSTER_7
freqs,pandas.Series(train_seqs),CLUSTER_0,CLUSTER_5
df,pandas.read_csv('complaints-balanced.csv'),CLUSTER_0,CLUSTER_5
sss,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,
test_size=0.3,
random_state=0)",CLUSTER_0,CLUSTER_5
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_0,CLUSTER_5
tick_marks,numpy.arange(len(my_tags),CLUSTER_0,CLUSTER_5
embedding_matrix,"numpy.zeros((vocab_size,embedding_dim)",CLUSTER_0,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(target,predictions,labels=my_tags)",CLUSTER_0,CLUSTER_5
heatmap,"pandas.pivot_table(data,values='e',index='weekday',columns='hour',aggfunc='count')",CLUSTER_7,CLUSTER_3
data,pandas.read_csv('data/911.csv'),CLUSTER_7,CLUSTER_3
data['timeStamp'],pandas.to_datetime(data['timeStamp']),CLUSTER_7,CLUSTER_3
df,"pandas.read_csv(""conversational_data.csv"",usecols=['text','replies__text'])",CLUSTER_0,CLUSTER_5
REPLACE_BY_SPACE_RE,re.compile('[/(),CLUSTER_0,CLUSTER_5
BAD_SYMBOLS_RE,"re.compile('[^0-9a-z
STOPWORDS=set(stopwords.words('english')",CLUSTER_0,CLUSTER_5
start,time.time(),CLUSTER_4,CLUSTER_7
"fig,axs","matplotlib.pyplot.subplots(2,2,figsize=(10,10)",CLUSTER_4,CLUSTER_7
"fig,axs","matplotlib.pyplot.subplots(2,2,figsize=(10,10)",CLUSTER_4,CLUSTER_7
fake,"numpy.zeros((BATCH_SIZE,16,16,1)",CLUSTER_4,CLUSTER_7
valid,"numpy.ones((BATCH_SIZE,16,16,1)",CLUSTER_4,CLUSTER_7
twitter_count,"pandas.DataFrame(twitter_count['tweet_counts'],
columns=['tweet_id','retweet_count','favorite_count'])",CLUSTER_9,CLUSTER_2
counts_s,"pandas.Series(counts_df['counts'].values,index=counts_df['stages'],name='')",CLUSTER_9,CLUSTER_2
twitter_archive_clean,"pandas.melt(twitter_archive_clean,
id_vars=['tweet_id','in_reply_to_status_id','in_reply_to_user_id','timestamp','source',
'text','retweeted_status_id','retweeted_status_user_id',
'retweeted_status_timestamp','expanded_urls','rating_numerator',
'rating_denominator','name'],
value_vars=['doggo','floofer','pupper','puppo','no_stage'],
var_name='category',value_name='stage')",CLUSTER_9,CLUSTER_2
twitter_archive_clean,"pandas.merge(twitter_archive_clean,twitter_count_clean,
on=['tweet_id'],how='left')",CLUSTER_9,CLUSTER_2
twitter_archive_master,"pandas.merge(twitter_archive_clean,predictions_clean,
on=['tweet_id'],how='left')",CLUSTER_9,CLUSTER_2
twitter_archive,"pandas.read_csv('twitter-archive-enhanced.csv',encoding='utf-8')",CLUSTER_9,CLUSTER_2
predictions,"pandas.read_csv('image-predictions.tsv',sep='\t')",CLUSTER_9,CLUSTER_2
twitter_archive_master,"pandas.read_csv('twitter_archive_master.csv',encoding='utf-8')",CLUSTER_9,CLUSTER_2
twitter_archive_clean.timestamp,pandas.to_datetime(twitter_archive_clean.timestamp),CLUSTER_9,CLUSTER_2
twitter_archive_clean.retweeted_status_timestamp,pandas.to_datetime(twitter_archive_clean.retweeted_status_timestamp),CLUSTER_9,CLUSTER_2
n,numpy.arange(len(dog_stages),CLUSTER_9,CLUSTER_2
twitter_count,json.load(file),CLUSTER_9,CLUSTER_2
df,"pandas.read_csv(r'LION_PressureTags_2017_04_24_to_2017_08_07.csv',sep='\t',usecols=['last_active_time','UARegPilotPes','UARegRdbakPes','pod_pilot_pres_podtrans','pod_supply_pres_podtrans','upper_ann_open_current','upper_ann_close_current','pod_2_adj','pod_1_adj','Active'])",CLUSTER_1,CLUSTER_3
df['last_active_time'],pandas.to_datetime(df['last_active_time']),CLUSTER_1,CLUSTER_3
df_temp['UARegPilotPes_adj'],"numpy.where(df_temp['Active']==1,df_temp['UARegPilotPes']-df_temp['pod_1_adj'],df_temp['UARegPilotPes']-df_temp['pod_2_adj'])",CLUSTER_1,CLUSTER_3
df_temp['UARegRdbakPes_adj'],"numpy.where(df_temp['Active']==1,df_temp['UARegRdbakPes']-df_temp['pod_1_adj'],df_temp['UARegRdbakPes']-df_temp['pod_2_adj'])",CLUSTER_1,CLUSTER_3
df_temp['pod_pilot_pres_podtrans_adj'],"numpy.where(df_temp['Active']==1,df_temp['pod_pilot_pres_podtrans']-df_temp['pod_1_adj'],df_temp['pod_pilot_pres_podtrans']-df_temp['pod_2_adj'])",CLUSTER_1,CLUSTER_3
df_temp['pod_supply_pres_podtrans_adj'],"numpy.where(df_temp['Active']==1,df_temp['pod_supply_pres_podtrans']-df_temp['pod_1_adj'],df_temp['pod_supply_pres_podtrans']-df_temp['pod_2_adj'])",CLUSTER_1,CLUSTER_3
multa1,"pandas.read_csv('multas/201806_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
set18,"pandas.read_csv('multas/201809_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
oct18,"pandas.read_csv('multas/201810_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
nov18,"pandas.read_csv('multas/201811_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
dic18,"pandas.read_csv('multas/201812_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
ene19,"pandas.read_csv('multas/201901_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
feb19,"pandas.read_csv('multas/201902_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
mar19,"pandas.read_csv('multas/201903_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
abr19,"pandas.read_csv('multas/201904_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
may19,"pandas.read_csv('multas/201905_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
jun19,"pandas.read_csv('multas/201906_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
jul19,"pandas.read_csv('multas/201907_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
ago19,"pandas.read_csv('multas/201908_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
multa1,"pandas.read_csv('multas/201806_detalle.csv',sep=';',encoding='iso-8859-1',header=0)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('multasS18A19.csv',keep_default_na=False,na_values=[""""])",CLUSTER_8,CLUSTER_3
park_gu,pandas.DataFrame(park_daejeon['구군'].value_counts(),CLUSTER_1,CLUSTER_3
park_gu_normalize,pandas.DataFrame(park_daejeon['구군'].value_counts(normalize=True),CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(""C:/Users/joyh1/Desktop/DSC/Inflearn강의자료/데이터분석/data/전국도시공원표준데이터.csv"",encoding='euc-kr')",CLUSTER_1,CLUSTER_3
scores_window,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
count_by_tags,collections.defaultdict(int),CLUSTER_11,CLUSTER_12
tags_by_date,collections.defaultdict(list),CLUSTER_11,CLUSTER_12
date_tag,collections.defaultdict(list),CLUSTER_11,CLUSTER_12
date_tag_republican,collections.defaultdict(list),CLUSTER_11,CLUSTER_12
date_tag_democrats,collections.defaultdict(list),CLUSTER_11,CLUSTER_12
tags,collections.defaultdict(list),CLUSTER_11,CLUSTER_12
tags_by_count,collections.defaultdict(int),CLUSTER_11,CLUSTER_12
date_in_type,"datetime.datetime(date_in_type[0],date_in_type[1],date_in_type[2])",CLUSTER_11,CLUSTER_12
df_date_tag,pandas.DataFrame(taggis),CLUSTER_11,CLUSTER_12
df,"pandas.DataFrame(predictions,columns=['uid','iid','rui','est','details'])",CLUSTER_8,CLUSTER_3
product_info,pandas.read_csv('../data/CatfoodProductInfo.csv'),CLUSTER_8,CLUSTER_3
reviews,pandas.read_csv('../data/CatfoodReviewsInfo.csv'),CLUSTER_8,CLUSTER_3
xm,numpy.mean(x_ex),CLUSTER_1,CLUSTER_10
xm,numpy.mean(x),CLUSTER_1,CLUSTER_10
xs,"numpy.std(x_ex,ddof=1)",CLUSTER_1,CLUSTER_10
xs,"numpy.std(x,ddof=1)",CLUSTER_1,CLUSTER_10
comp,numpy.transpose(np.asarray(d18O_all),CLUSTER_1,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(7,1,figsize=(8,11)",CLUSTER_1,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(7,1,figsize=(8,11)",CLUSTER_1,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(7,1,figsize=(8,11)",CLUSTER_1,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(7,1,figsize=(8,11)",CLUSTER_1,CLUSTER_10
df_labels,pandas.read_csv('labels.csv'),CLUSTER_6,CLUSTER_11
df3,"pandas.merge(df2,lat_lon,how='left',left_on='Postalcode',right_on='PostalCode')",CLUSTER_9,CLUSTER_2
lat_lon,pandas.read_csv('http://cocl.us/Geospatial_data'),CLUSTER_9,CLUSTER_2
df_s,pandas.read_html(tab),CLUSTER_9,CLUSTER_2
x,numpy.arange(k),CLUSTER_9,CLUSTER_2
df2['Neighborhood'],"numpy.where(df2['Neighborhood']=='Notassigned',df2['Borough'],df2['Neighborhood'])",CLUSTER_9,CLUSTER_2
source,requests.get('https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M'),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=k,random_state=0)",CLUSTER_9,CLUSTER_2
stat_summary_df,"pandas.DataFrame({'mean':mean_tum_vol,
'median':median_tum_vol,
'variance':var_tum_vol,
'standarddeviation':[std_tum_vol],
'SEM':sem_tum_vol})",CLUSTER_5,CLUSTER_9
mouse_metadata_df,pandas.read_csv(mouse_metadata),CLUSTER_5,CLUSTER_9
study_results_df,pandas.read_csv(study_results),CLUSTER_5,CLUSTER_9
tum_vol_array,numpy.array(avg_tum_vol),CLUSTER_5,CLUSTER_9
weight_array,numpy.array(avg_weight),CLUSTER_5,CLUSTER_9
v,"numpy.minimum(a,b)",CLUSTER_5,CLUSTER_9
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
train_img,numpy.array([ImportImage(img),CLUSTER_4,CLUSTER_0
predicted_args,numpy.argsort(y),CLUSTER_4,CLUSTER_0
predicted_args,numpy.argsort(y),CLUSTER_4,CLUSTER_0
predicted_args,numpy.argsort(y),CLUSTER_4,CLUSTER_0
predicted_args,numpy.argsort(y),CLUSTER_4,CLUSTER_0
train_data,"numpy.load(open('bottleneck_features_train.npy','rb')",CLUSTER_4,CLUSTER_0
train_data,"numpy.load(open(working_path+'/bottleneck_features_train.npy','rb')",CLUSTER_4,CLUSTER_0
train_data,"numpy.load(open('/Users/freefrog/Studing/DataScience/bottleneck_features_train.npy','rb')",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(working_path+""/inputs/train.csv"")",CLUSTER_4,CLUSTER_0
self.ohe,sklearn.preprocessing.OneHotEncoder(),CLUSTER_4,CLUSTER_0
self.le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_0
r,requests.get(url),CLUSTER_10,CLUSTER_12
r2,requests.get(url2),CLUSTER_10,CLUSTER_12
individualUrlText,requests.get('https://www.ptt.cc'+d.find('a'),CLUSTER_10,CLUSTER_12
individualUrlText,requests.get('https://www.ptt.cc'+d.find('a'),CLUSTER_10,CLUSTER_12
r,requests.get(url),CLUSTER_10,CLUSTER_12
individualUrlText,requests.get('https://www.ptt.cc'+d.find('a'),CLUSTER_10,CLUSTER_12
z,"numpy.arange(0,1.5,0.1)",CLUSTER_1,CLUSTER_10
l,"numpy.arange(-0.5,1.5,0.1)",CLUSTER_1,CLUSTER_10
p,"numpy.arange(-2,2,0.1)",CLUSTER_1,CLUSTER_10
q,"numpy.arange(-2,2,0.1)",CLUSTER_1,CLUSTER_10
p,"numpy.arange(-2,2,0.1)",CLUSTER_1,CLUSTER_10
q,"numpy.arange(-2,2,0.1)",CLUSTER_1,CLUSTER_10
p,"numpy.arange(-2,2,0.1)",CLUSTER_1,CLUSTER_10
q,"numpy.arange(-2,2,0.1)",CLUSTER_1,CLUSTER_10
data,numpy.asarray(data),CLUSTER_1,CLUSTER_10
data,numpy.asarray(data),CLUSTER_1,CLUSTER_10
data_vis,numpy.asarray(data_vis),CLUSTER_1,CLUSTER_10
w,numpy.zeros(len(X[1]),CLUSTER_1,CLUSTER_10
P,"numpy.inner(W_csv1,num)",CLUSTER_1,CLUSTER_10
P,"numpy.inner(W_csv2,num)",CLUSTER_1,CLUSTER_10
P,"numpy.inner(W_csv3,num)",CLUSTER_1,CLUSTER_10
F6,"numpy.cos(X_csv2[:,1:3])",CLUSTER_1,CLUSTER_10
F2,"numpy.multiply(X_csv2[:,1],X_csv2[:,2])",CLUSTER_1,CLUSTER_10
F7,"numpy.multiply(Xv[:,1],Xv[:,2])",CLUSTER_1,CLUSTER_10
F4,"numpy.multiply(X_csv3[:,1],X_csv3[:,2])",CLUSTER_1,CLUSTER_10
F6,"numpy.multiply(Xv[:,1],Xv[:,2])",CLUSTER_1,CLUSTER_10
F5,"numpy.sin(X_csv2[:,1:3])",CLUSTER_1,CLUSTER_10
F_csv1,"numpy.square(X_csv1[:,1:3])",CLUSTER_1,CLUSTER_10
F3,"numpy.square(X_csv2[:,1:3])",CLUSTER_1,CLUSTER_10
F8,"numpy.square(Xv[:,1:3])",CLUSTER_1,CLUSTER_10
F3,"numpy.square(X_csv3[:,1:3])",CLUSTER_1,CLUSTER_10
F5,"numpy.square(Xv[:,1:3])",CLUSTER_1,CLUSTER_10
F_csv2,"numpy.hstack((F2,F3)",CLUSTER_1,CLUSTER_10
F9,"numpy.hstack((F7,F8)",CLUSTER_1,CLUSTER_10
F5,"numpy.hstack((F3,F4)",CLUSTER_1,CLUSTER_10
F7,"numpy.hstack((F5,F6)",CLUSTER_1,CLUSTER_10
"P,Q","numpy.meshgrid(p,q)",CLUSTER_1,CLUSTER_10
"P,Q","numpy.meshgrid(p,q)",CLUSTER_1,CLUSTER_10
"P,Q","numpy.meshgrid(p,q)",CLUSTER_1,CLUSTER_10
X,"numpy.insert(X,0,1,axis=1)",CLUSTER_1,CLUSTER_10
X,"numpy.insert(X,0,1,axis=1)",CLUSTER_1,CLUSTER_10
X,"numpy.insert(X,0,1,axis=1)",CLUSTER_1,CLUSTER_10
X,"numpy.insert(X,0,1,axis=1)",CLUSTER_1,CLUSTER_10
X_csv1,"numpy.insert(X_csv1,0,1,axis=1)",CLUSTER_1,CLUSTER_10
Xv,"numpy.insert(Xv,0,1,axis=1)",CLUSTER_1,CLUSTER_10
X_csv2,"numpy.insert(X_csv2,0,1,axis=1)",CLUSTER_1,CLUSTER_10
X_csv3,"numpy.insert(X_csv3,0,1,axis=1)",CLUSTER_1,CLUSTER_10
Xf_csv1,"numpy.append(X_csv1,F_csv1,axis=1)",CLUSTER_1,CLUSTER_10
Xv_1,"numpy.append(Xv,np.square(Xv[:,1:3])",CLUSTER_1,CLUSTER_10
Xf_csv2,"numpy.append(X_csv2,F_csv2,axis=1)",CLUSTER_1,CLUSTER_10
Xv_2,"numpy.append(Xv,F9,axis=1)",CLUSTER_1,CLUSTER_10
Xf_csv3,"numpy.append(X_csv3,F5,axis=1)",CLUSTER_1,CLUSTER_10
Xv_3,"numpy.append(Xv,F7,axis=1)",CLUSTER_1,CLUSTER_10
data_csv1,"numpy.genfromtxt('csv1.csv',delimiter=',')",CLUSTER_1,CLUSTER_10
data_csv2,"numpy.genfromtxt('csv2.csv',delimiter=',')",CLUSTER_1,CLUSTER_10
data_csv3,"numpy.genfromtxt('csv3.csv',delimiter=',')",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
y,"re.findall(""."",x)",CLUSTER_4,CLUSTER_11
y,"re.findall(""e+"",""sandeeeeeep"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""e*"","""")",CLUSTER_4,CLUSTER_11
y,"re.findall(""e+"","""")",CLUSTER_4,CLUSTER_11
y,"re.findall("".+"",""thisisanything"")",CLUSTER_4,CLUSTER_11
y,"re.findall("".*"","""")",CLUSTER_4,CLUSTER_11
y,"re.findall("".*"",""thisissomething"")",CLUSTER_4,CLUSTER_11
y,"re.findall("".+"",""thisissomething......."")",CLUSTER_4,CLUSTER_11
y,"re.findall(""\.+"",""thisissomething......."")",CLUSTER_4,CLUSTER_11
y,"re.findall(""this.+is"",""thisisgreatandthisisokay"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""this.+?is"",""thisisgreatandthisisokay"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""this.*?is"",""thisisgreatandthisisokay"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th.?s"",""thisisgreatandthisisokaythusths"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""thi?s"",""thisisgreatandthisisokaythusthsthiis"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""thi*s"",""thisisgreatandthisisokaythusthsthiis"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""thi{0,}s"",""thisisgreatandthisisokaythusthsthiis"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th.*s"",""thisisgreatandthisisokaythusthsthiis"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th.*?s"",""thisisgreatandthisisokaythusthsthiis"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th[iu]s"",""thisisgreatandthisisokaythusthsthiisthatthanthiusthise"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th[aiu][tsn]"",""thisisgreatandthisisokaythusthsthiisthatthanthiusthaiutsn"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th[aiu][aiu]"",""thisisgreatandthisisokaythusthsthiisthatthanthiusthaiutsn"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th[a-z]t"",""thisisgreatandthisisokaythusthsthiisthatthanthiusthaiutsn"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""a[0-9]"",""thiusthaiutsna1anda2anda3andaza10aa1"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""a[0-9][0-9][0-9]"",""thiusthaiutsna1anda222anda3andaza10aa1"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""a[0-9]{3}"",""thiusthaiutsna1anda222anda3andaza10aa1"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""a[0-9]{2,3}"",""thiusthaiutsna1anda222anda3andaza10aa1"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""a[0-9]{2,4}"",""thiusthaiutsna1anda222anda3andaza10aa1a8921"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""a{2,4}[0-9]"",""thiusthaiutsna1anda222anda3andaza10aa1a8921"")",CLUSTER_4,CLUSTER_11
y,"re.findall('[0-9]+',x)",CLUSTER_4,CLUSTER_11
y,"re.findall(""[0-9]+"",""thisisavalidnumber:12345and5.4"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""-?[0-9]+"",""thisisavalidnumber:12345and5.4,-10"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""[0-9]+.[0-9]+"",""thisisavalidnumber:12345and5.4,0000000.0000003x5"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""[0-9]+\.[0-9]+"",""thisisavalidnumber:12345and5.4,0000000.0000003x5"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""^[^aeiou][aeiou]"",""wearelookingforconsonentfollowedbyvowel."")",CLUSTER_4,CLUSTER_11
y,"re.findall(""[0-9]$"",""thisis123and456"")",CLUSTER_4,CLUSTER_11
x,"re.findall(""\\\\.+"",s)",CLUSTER_4,CLUSTER_11
y,"re.findall('[0-9]+',x)",CLUSTER_4,CLUSTER_11
y,"re.findall('[0-9]+',x)",CLUSTER_4,CLUSTER_11
y,"re.findall('[AEIOU]+',x)",CLUSTER_4,CLUSTER_11
y,"re.findall(""[^aeiou][aeiou]"",""wearelookingforconsonentfollowedbyvowel."")",CLUSTER_4,CLUSTER_11
y,"re.findall(""\S\s\S"",""wearelookingforconsonentfollowedbyvowel."")",CLUSTER_4,CLUSTER_11
y,"re.findall(""[ADM]?"","""")",CLUSTER_4,CLUSTER_11
y,"re.findall('^F.+:',x)",CLUSTER_4,CLUSTER_11
y,"re.findall('^F.+?:',x)",CLUSTER_4,CLUSTER_11
y,"re.findall(""[a-z]+@[a-z]+\.com"",
""myemailaddressisreachus@cloudxlab.comandnotreachus@cloudxlab,reachus@@cloudxlababc@abc.org"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""[a-z]+@[a-z]+.com"",
""myemailaddressisreachus@cloudxlab_com"")",CLUSTER_4,CLUSTER_11
stuff,re.findall('^X-DSPAM-Confidence:([0-9.]+),CLUSTER_4,CLUSTER_11
y,"re.findall('\S+@\S+',x)",CLUSTER_4,CLUSTER_11
y,re.findall('^From:.*?(\S+@\S+),CLUSTER_4,CLUSTER_11
y,re.findall('@([^]*),CLUSTER_4,CLUSTER_11
y,re.findall('^From.*@([^]*),CLUSTER_4,CLUSTER_11
stuff,re.findall('^X-DSPAM-Confidence:([0-9.]+),CLUSTER_4,CLUSTER_11
y,"re.findall('\$[0-9.]+',x)",CLUSTER_4,CLUSTER_11
C,"numpy.zeros((A.shape[0],B.shape[1])",CLUSTER_4,CLUSTER_11
res,numpy.array(observation),CLUSTER_6,CLUSTER_6
mean_reward,numpy.mean(total_rewards[-100:]),CLUSTER_6,CLUSTER_6
ts,time.time(),CLUSTER_6,CLUSTER_6
ts,time.time(),CLUSTER_6,CLUSTER_6
self.buffer,collections.deque(maxlen=capacity),CLUSTER_6,CLUSTER_6
Experience,"collections.namedtuple('Experience',field_names=['state','action','reward','done','new_state'])",CLUSTER_6,CLUSTER_6
"fig,ax","matplotlib.pyplot.subplots(2,4,figsize=(20,10)",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('../data/iris.csv'),CLUSTER_7,CLUSTER_5
df,pandas.read_csv('../data/diabetes.csv'),CLUSTER_7,CLUSTER_5
y_test_class,"numpy.argmax(y_test,axis=1)",CLUSTER_7,CLUSTER_5
y_pred_class,"numpy.argmax(y_pred,axis=1)",CLUSTER_7,CLUSTER_5
y_test_class,"numpy.argmax(y_test,axis=1)",CLUSTER_7,CLUSTER_5
y_pred_class,"numpy.argmax(y_pred,axis=1)",CLUSTER_7,CLUSTER_5
hticks,"numpy.linspace(amin,amax,101)",CLUSTER_7,CLUSTER_5
vticks,"numpy.linspace(bmin,bmax,101)",CLUSTER_7,CLUSTER_5
"aa,bb","numpy.meshgrid(hticks,vticks)",CLUSTER_7,CLUSTER_5
"X,y","sklearn.datasets.make_moons(n_samples=1000,noise=0.1,random_state=0)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,
test_size=0.3,
random_state=42)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X.values,y_cat,
test_size=0.2)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y_cat,test_size=0.2,random_state=22)",CLUSTER_7,CLUSTER_5
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
l2_penalty_values,"numpy.logspace(-4,10,num=10)",CLUSTER_3,CLUSTER_10
avgSeqQ,numpy.array([ord(x),CLUSTER_4,CLUSTER_11
axes,numpy.ravel(axes),CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(4,3,figsize=(20,15)",CLUSTER_4,CLUSTER_11
g,"seaborn.FacetGrid(melted,row='name',col='variable',hue='variable',sharex=False,sharey=False,size=3,aspect=1.5,margin_titles=True)",CLUSTER_4,CLUSTER_11
g,"seaborn.FacetGrid(melted,row='name',col='variable',hue='variable',sharex=False,sharey=False,size=3,aspect=1.5,margin_titles=True)",CLUSTER_4,CLUSTER_11
sampleTable,"pandas.DataFrame(rows,columns=['sampleID','sex','tissue','runID','date','processID','sizeBin','subreads','num_subreads','roi1','num_roi1','ccs2','num_ccs2'])",CLUSTER_4,CLUSTER_11
dd,"pandas.concat([roi,ccs],axis=1)",CLUSTER_4,CLUSTER_11
melted,"pandas.melt(dfRoi,id_vars=['name'],value_vars=['LENGTH','MEAN_QVAL','MEAN_SCORE','NUM_PASSES'])",CLUSTER_4,CLUSTER_11
melted,"pandas.melt(dfCcs,id_vars=['name'],value_vars=['LENGTH','MEAN_QVAL','MEAN_SCORE','NUM_PASSES'])",CLUSTER_4,CLUSTER_11
df,"pandas.read_csv(os.path.join(data_dir,'{0}/roi1/{0}_roi1_stats.txt'.format(fn)",CLUSTER_4,CLUSTER_11
df,"pandas.read_csv(os.path.join(data_dir,'{0}/ccs2/{0}_ccs2_stats.txt'.format(fn)",CLUSTER_4,CLUSTER_11
scores_df,"pandas.DataFrame({'RandomForest':[myGS.best_score_],'XGBoost':[myXGB_GS.best_score_],
'AdaBoost':[myAda_GS.best_score_],'SVM':[mySVM_GS.best_score_]})",CLUSTER_5,CLUSTER_5
raw_data,"pandas.read_csv('/Users/iMotz/Propulsion/Machine_learning/data_sets/data_challange',sep=';',index_col=0)",CLUSTER_5,CLUSTER_5
raw_y,"pandas.read_csv('/Users/iMotz/Propulsion/Machine_learning/data_sets/target_challange',sep=';',index_col=0)",CLUSTER_5,CLUSTER_5
X_test,"pandas.read_csv('/Users/iMotz/Propulsion/Machine_learning/data_sets/data_validation.csv',sep=';',index_col=0)",CLUSTER_5,CLUSTER_5
myGS,"sklearn.model_selection.GridSearchCV(estimator=pipe_1,param_distributions=grid_params_pipe_1_better,
scoring='accuracy',cv=3,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
myXGB_GS,"sklearn.model_selection.GridSearchCV(estimator=pipe_2,param_grid=grid_params_pipe_2_better,
scoring='accuracy',cv=5,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
myAda_GS,"sklearn.model_selection.GridSearchCV(estimator=pipe_3,param_grid=grid_params_pipe_3_better,
scoring='accuracy',cv=3,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
mySVM_GS,"sklearn.model_selection.GridSearchCV(estimator=pipe_4,param_grid=grid_params_pipe_4_better,
scoring='accuracy',cv=6,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
myRS,"sklearn.model_selection.RandomizedSearchCV(estimator=pipe_1,param_distributions=grid_params_pipe_1,
scoring='accuracy',cv=3,n_iter=20,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
myXGB_RS,"sklearn.model_selection.RandomizedSearchCV(estimator=pipe_2,param_distributions=grid_params_pipe_2,
scoring='accuracy',cv=3,n_iter=20,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
myAda_RS,"sklearn.model_selection.RandomizedSearchCV(estimator=pipe_3,param_distributions=grid_params_pipe_3,
scoring='accuracy',cv=3,n_iter=20,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
mySVM_RS,"sklearn.model_selection.RandomizedSearchCV(estimator=pipe_4,param_distributions=grid_params_pipe_4,
scoring='accuracy',cv=3,n_iter=20,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
pipe_1,"sklearn.pipeline.Pipeline([('scl',skpp.StandardScaler()",CLUSTER_5,CLUSTER_5
pipe_2,"sklearn.pipeline.Pipeline([('scl',skpp.StandardScaler()",CLUSTER_5,CLUSTER_5
pipe_3,"sklearn.pipeline.Pipeline([('scl',skpp.StandardScaler()",CLUSTER_5,CLUSTER_5
pipe_4,"sklearn.pipeline.Pipeline([('scl',skpp.StandardScaler()",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(7,5)",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(7,5)",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(7,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(7,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(7,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(7,5)",CLUSTER_7,CLUSTER_9
mean_delay,numpy.mean(delay),CLUSTER_7,CLUSTER_9
acceptance_criterion,numpy.exp(proposal_loglike-current_loglike),CLUSTER_7,CLUSTER_9
minute_range,"numpy.linspace(0,40,200)",CLUSTER_7,CLUSTER_9
proposal_xrange,numpy.linspace(np.min(data),CLUSTER_7,CLUSTER_9
proposal_xrange,numpy.linspace(np.min(data),CLUSTER_7,CLUSTER_9
x_range,"numpy.linspace(0,40,200)",CLUSTER_7,CLUSTER_9
air,pandas.read_csv('/Users/kiefer/github-repos/DSI-SF-2/datasets/airport/airport_operations.csv'),CLUSTER_7,CLUSTER_9
ax,"seaborn.distplot(delay,bins=40,ax=ax)",CLUSTER_7,CLUSTER_9
ax,"seaborn.distplot(data,bins=40,ax=ax)",CLUSTER_7,CLUSTER_9
ax,"seaborn.distplot(data,bins=40,ax=ax)",CLUSTER_7,CLUSTER_9
prior_pdf,"scipy.stats.norm(delay_belief_mean,delay_belief_std)",CLUSTER_7,CLUSTER_9
distribution,"scipy.stats.norm(proposed_mean,proposed_std)",CLUSTER_7,CLUSTER_9
proposal_pdf,"scipy.stats.norm(proposed_mean,proposed_std)",CLUSTER_7,CLUSTER_9
prop_dist,"scipy.stats.norm(proposal_distribution_mean,proposal_distribution_std)",CLUSTER_7,CLUSTER_9
old_pdf,"scipy.stats.norm(old_mean,old_std)",CLUSTER_7,CLUSTER_9
new_pdf,"scipy.stats.norm(new_mean,new_std)",CLUSTER_7,CLUSTER_9
distribution,"scipy.stats.norm(prior_mean,prior_std)",CLUSTER_7,CLUSTER_9
prior_pdf,"scipy.stats.norm(prior_mean,prior_std)",CLUSTER_7,CLUSTER_9
proposed_p,"scipy.stats.norm(prior_mean,prior_std)",CLUSTER_7,CLUSTER_9
df,"pandas.DataFrame(randn(5,4)",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(6,2)",CLUSTER_8,CLUSTER_3
n,"random.randint(2,16)",CLUSTER_10,CLUSTER_4
t,"random.randint(1,1000)",CLUSTER_10,CLUSTER_4
m,"random.randint(2,100)",CLUSTER_10,CLUSTER_4
p,"random.randint(1,m)",CLUSTER_10,CLUSTER_4
x,numpy.array(pageSpeeds),CLUSTER_5,CLUSTER_10
y,numpy.array(purchaseAmount),CLUSTER_5,CLUSTER_10
xp,"numpy.linspace(0,7,100)",CLUSTER_5,CLUSTER_10
p4,"numpy.poly1d(np.polyfit(x,y,4)",CLUSTER_5,CLUSTER_10
r2,"sklearn.metrics.r2_score(y,p4(x)",CLUSTER_5,CLUSTER_10
dt,"datetime.datetime.strptime(stime,'%Y-%m-%dT%H:%M:%S')",CLUSTER_10,CLUSTER_12
combined_data,"pandas.merge(census_data,zip_data,on=""CityState"",how=""inner"")",CLUSTER_8,CLUSTER_4
census_data,"pandas.read_sql(""SELECT*FROMCensus_Data"",conn)",CLUSTER_8,CLUSTER_4
zip_data,"pandas.read_sql(""SELECT*FROMZip_Census"",conn)",CLUSTER_8,CLUSTER_4
df_predicted,"pandas.DataFrame({'date':dates_to_predict,\
'predictions':pd.Series(predictions.reshape(-1)",CLUSTER_5,CLUSTER_5
dates_to_predict,pandas.Series([pd.Timestamp.today(),CLUSTER_5,CLUSTER_5
dates_to_predict,pandas.Series([pd.Timestamp.today(),CLUSTER_5,CLUSTER_5
df_ctr_cum,pandas.read_csv('df_ctr_cum.csv'),CLUSTER_5,CLUSTER_5
X,"pandas.to_numeric(pd.to_datetime(df_ctr_cum.loc[df_ctr_cum['category']=='case'].iloc[-n_days:][str_date],format='%Y/%m/%d')",CLUSTER_5,CLUSTER_5
X,"pandas.to_numeric(\
pd.to_datetime(df.loc[df['category']==class_to_predict].iloc[-n_days:][str_date],\
format='%Y/%m/%d')",CLUSTER_5,CLUSTER_5
predictions,numpy.exp(lr.predict(pd.to_numeric(pd.Series(dates_to_predict),CLUSTER_5,CLUSTER_5
predictions,numpy.exp(lr.predict(pd.to_numeric(pd.Series(dates_to_predict),CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
learning_rate,"numpy.arange(0.01,0.5,0.02)",CLUSTER_7,CLUSTER_8
subsample,"numpy.arange(0.2,1.,0.2)",CLUSTER_7,CLUSTER_8
colsample_bytree,"numpy.arange(0.2,1.2,0.2)",CLUSTER_7,CLUSTER_8
gamma,"numpy.arange(0.001,0.1,0.02)",CLUSTER_7,CLUSTER_8
min_child_weight,"numpy.arange(0.5,2.0,0.2)",CLUSTER_7,CLUSTER_8
"y_true,y_pred",numpy.array(y_true),CLUSTER_7,CLUSTER_8
num_coeff_bigger,numpy.sum(abs(linridge.coef_),CLUSTER_7,CLUSTER_8
y_pred,numpy.floor(np.expm1(y_pred),CLUSTER_7,CLUSTER_8
data_ser,pandas.Series(data_for_pred.index.unique(),CLUSTER_7,CLUSTER_8
data_for_pred.index,pandas.Series(data_for_pred.index),CLUSTER_7,CLUSTER_8
data_ser,pandas.Series(sorted(new_data['pre_date'].unique(),CLUSTER_7,CLUSTER_8
data_ser_val,pandas.Series(sorted(train['pre_date'].unique(),CLUSTER_7,CLUSTER_8
data,pandas.get_dummies(data),CLUSTER_7,CLUSTER_8
data,pandas.read_csv('DF_File_sample.csv'),CLUSTER_7,CLUSTER_8
data,pandas.read_csv('DF_File_sample.csv'),CLUSTER_7,CLUSTER_8
data_with_LE,pandas.read_csv('DF_File_sample.csv'),CLUSTER_7,CLUSTER_8
pred,results.get_prediction(start=pandas.to_datetime('2015-01-01'),CLUSTER_7,CLUSTER_8
"X_train_LE,X_test_LE,y_train_LE,y_test_LE","sklearn.model_selection.train_test_split(train_LE.loc[:,train_LE.columns!='Sales'],train_LE['Sales'],test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_8
accuracies,"sklearn.model_selection.cross_val_score(estimator=xgb_model,X=X_train,y=y_train,cv=10)",CLUSTER_7,CLUSTER_8
"norm_stats,p_norm",scipy.stats.normaltest(df_test[target]),CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(estimator=xgb_model,
param_grid=parameters,
scoring='neg_mean_squared_error',
cv=5,
n_jobs=-1)",CLUSTER_7,CLUSTER_8
linridge,sklearn.linear_model.Ridge(alpha=20.0),CLUSTER_7,CLUSTER_8
linridge,sklearn.linear_model.Ridge(alpha=this_alpha),CLUSTER_7,CLUSTER_8
linridge,sklearn.linear_model.Ridge(alpha=0),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
linlasso,"sklearn.linear_model.Lasso(alpha,max_iter=10000)",CLUSTER_7,CLUSTER_8
linlasso_LE,"sklearn.linear_model.Lasso(alpha,max_iter=10000)",CLUSTER_7,CLUSTER_8
linlasso_LE,"sklearn.linear_model.Lasso(alpha,max_iter=10000)",CLUSTER_7,CLUSTER_8
svr,"sklearn.svm.SVR(kernel='linear',C=C,epsilon=0.6)",CLUSTER_7,CLUSTER_8
tl3,"pandas.merge(tl,afinn)",CLUSTER_4,CLUSTER_11
tl3,"pandas.merge(tl,afinn)",CLUSTER_4,CLUSTER_11
afinn,"pandas.read_csv(""AFINN-111.txt"",sep='\t',names=['token','valence'])",CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
rootDir,os.getcwd(),CLUSTER_4,CLUSTER_11
y_pos,numpy.arange(len(x),CLUSTER_4,CLUSTER_11
predictions,numpy.zeros((len(Xtests),CLUSTER_1,CLUSTER_9
predictions,numpy.zeros((len(Xtests),CLUSTER_1,CLUSTER_9
predictions,numpy.zeros((len(Xtests),CLUSTER_1,CLUSTER_9
mew_t,"numpy.dot(Ktm,Kinv)",CLUSTER_1,CLUSTER_9
mew_t,"numpy.dot(Ktm,Kinv)",CLUSTER_1,CLUSTER_9
mew_t,"numpy.dot(Ktm,Kinv)",CLUSTER_1,CLUSTER_9
K,"numpy.ones((N,M)",CLUSTER_1,CLUSTER_9
"x,y",numpy.exp(2*np.pi*1j*x/365.),CLUSTER_1,CLUSTER_9
Kinv,"scipy.linalg.pinv(np.dot(Kmn,Knm)",CLUSTER_1,CLUSTER_9
Kinv,"scipy.linalg.pinv(np.dot(Kmn,Knm)",CLUSTER_1,CLUSTER_9
Kinv,"scipy.linalg.pinv(np.dot(Kmn,Knm)",CLUSTER_1,CLUSTER_9
prediction,"pandas.DataFrame(columns=['Id','Sales'])",CLUSTER_1,CLUSTER_9
prediction,"pandas.DataFrame(columns=['Id','Sales'])",CLUSTER_1,CLUSTER_9
prediction,"pandas.DataFrame(columns=['Id','Sales'])",CLUSTER_1,CLUSTER_9
rossman['School'],pandas.Series(np.ones(N),CLUSTER_1,CLUSTER_9
rossman,pandas.read_csv(datafile),CLUSTER_1,CLUSTER_9
rossman['Date'],pandas.to_datetime(rossman['Date']),CLUSTER_1,CLUSTER_9
start,time.time(),CLUSTER_1,CLUSTER_9
start,time.time(),CLUSTER_1,CLUSTER_9
start,time.time(),CLUSTER_1,CLUSTER_9
"scores.hist('Midterm1',group","'Mentored',bins=numpy.arange(0,41,5)",CLUSTER_3,CLUSTER_6
"scores_with_improvements.hist(""Improvement"",bins","numpy.arange(-30,31,5)",CLUSTER_3,CLUSTER_6
neighbors,"numpy.arange(0,10)",CLUSTER_7,CLUSTER_8
models,"pandas.DataFrame({
'Models':['RandomForestClassifier','DecisionTreeClassifier','SupportVectorMachine',
'K-NearNeighbors','LogisticModel','GausianNB','GradientBoosting'],
'Score':[RFCCV,DTREECV,SVCCV,KNNCV,LOGCV,GAUSIAN,GBKCV]})",CLUSTER_7,CLUSTER_8
y,"pandas.get_dummies(bank_model['y'],columns=['y'],prefix=['y'],drop_first=True)",CLUSTER_7,CLUSTER_8
bank_model,pandas.read_csv('/Users/kanchansingh/gitproject/Bank_propensity_model/clean_data.csv'),CLUSTER_7,CLUSTER_8
"fig,ax_arr","matplotlib.pyplot.subplots(nrows=2,ncols=3,figsize=(20,15)",CLUSTER_7,CLUSTER_8
"fig,(ax1,ax2,ax3,ax4,ax5)","matplotlib.pyplot.subplots(nrows=2,ncols=3,figsize=(15,4)",CLUSTER_7,CLUSTER_8
"fig,ax_arr","matplotlib.pyplot.subplots(nrows=2,ncols=3,figsize=(20,15)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feat,label,test_size=0.3,random_state=103)",CLUSTER_7,CLUSTER_8
"X_trainK,X_testK,y_trainK,y_testK","sklearn.model_selection.train_test_split(feat,label,test_size=0.2,random_state=101)",CLUSTER_7,CLUSTER_8
k_fold,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=0)",CLUSTER_7,CLUSTER_8
accuracy,"sklearn.metrics.accuracy_score(y_test,predictions)",CLUSTER_7,CLUSTER_8
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
logmodel,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
kfold,"sklearn.model_selection.KFold(n_splits=5,random_state=123)",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(knn,X_trainK,y_trainK,cv=kfold,scoring='accuracy')",CLUSTER_7,CLUSTER_8
knn,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=k_value,weights='uniform',p=2,metric='euclidean')",CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=22),CLUSTER_7,CLUSTER_8
svc,sklearn.svm.SVC(kernel='sigmoid'),CLUSTER_7,CLUSTER_8
dtree,sklearn.tree.DecisionTreeClassifier(criterion='gini'),CLUSTER_7,CLUSTER_8
rfc,sklearn.ensemble.RandomForestClassifier(n_estimators=200),CLUSTER_7,CLUSTER_8
gaussiannb,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
gbk,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_7,CLUSTER_8
roc_auclog,"sklearn.metrics.auc(fprlog,tprlog)",CLUSTER_7,CLUSTER_8
roc_auclog,"sklearn.metrics.auc(fprlog,tprlog)",CLUSTER_7,CLUSTER_8
roc_aucrfc,"sklearn.metrics.auc(fprrfc,tprrfc)",CLUSTER_7,CLUSTER_8
"fprlog,tprlog,thresholdlog","sklearn.metrics.roc_curve(y_test,preds)",CLUSTER_7,CLUSTER_8
"fprlog,tprlog,thresholdlog","sklearn.metrics.roc_curve(y_test,preds)",CLUSTER_7,CLUSTER_8
"fprrfc,tprrfc,thresholdrfc","sklearn.metrics.roc_curve(y_test,preds)",CLUSTER_7,CLUSTER_8
"print('rmsetest3:%s'%(rmse([2,2,2],[1,1,0])",=numpy.sqrt(2.0),CLUSTER_3,CLUSTER_6
prediction,"numpy.average(valueList,weights=similarityList)",CLUSTER_3,CLUSTER_6
manualPrediction,"numpy.average(historyData[1],weights=historyData[4])",CLUSTER_3,CLUSTER_6
data,json.load(data_file),CLUSTER_3,CLUSTER_6
text,"pandas.concat([train_sentence,test_sentence])",CLUSTER_5,CLUSTER_1
train,pandas.read_csv(PATH+'cleaned_train.csv'),CLUSTER_5,CLUSTER_1
test,pandas.read_csv(PATH+'cleaned_test.csv'),CLUSTER_5,CLUSTER_1
submission,pandas.read_csv(path+'sample_train.csv'),CLUSTER_5,CLUSTER_1
submission,pandas.read_csv(path+'sample_submission.csv'),CLUSTER_5,CLUSTER_1
preds,"numpy.zeros((test.shape[0],len(label_cols)",CLUSTER_5,CLUSTER_1
preds_train,"numpy.zeros((train.shape[0],len(label_cols)",CLUSTER_5,CLUSTER_1
r,"numpy.log(pr(1,y.values,train_features[0])",CLUSTER_5,CLUSTER_1
train_tfidf,"scipy.sparse.hstack((train_char,train_phrase)",CLUSTER_5,CLUSTER_1
test_tfidf,"scipy.sparse.hstack((test_char,test_phrase)",CLUSTER_5,CLUSTER_1
scale,"numpy.arange(5,0,-1)",CLUSTER_7,CLUSTER_8
scale,"numpy.arange(5,0,-1)",CLUSTER_7,CLUSTER_8
pos,numpy.arange(sorted_idx.shape[0]),CLUSTER_7,CLUSTER_8
idx,numpy.where(dataframe[col].isnull(),CLUSTER_7,CLUSTER_8
mask,numpy.zeros_like(corr),CLUSTER_7,CLUSTER_8
sorted_idx,numpy.argsort(feature_importance),CLUSTER_7,CLUSTER_8
y,numpy.exp(y_test),CLUSTER_7,CLUSTER_8
dataframe[col],numpy.log(dataframe[col]),CLUSTER_7,CLUSTER_8
X_train_scale,pandas.DataFrame(scaler.transform(X_train),CLUSTER_7,CLUSTER_8
X_test_scale,pandas.DataFrame(scaler.transform(X_test),CLUSTER_7,CLUSTER_8
df_category_joint,"pandas.concat([df_category,df_category_test])",CLUSTER_7,CLUSTER_8
total_diag,"pandas.concat([train_diag,test_diag])",CLUSTER_7,CLUSTER_8
df_dummies,"pandas.get_dummies(df_category,columns=cat_variables)",CLUSTER_7,CLUSTER_8
df_dummies_test,"pandas.get_dummies(df_category_test,columns=cat_variables)",CLUSTER_7,CLUSTER_8
df_dummies_joint,"pandas.get_dummies(df_category_joint,columns=cat_variables,drop_first=True)",CLUSTER_7,CLUSTER_8
realestate,pandas.read_csv('RealEstate/train.csv'),CLUSTER_7,CLUSTER_8
realestate_test,pandas.read_csv('RealEstate/test.csv'),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
model_rf1,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,max_depth=15)",CLUSTER_7,CLUSTER_8
model_rf2,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(y=feat,x=featimp)",CLUSTER_7,CLUSTER_8
ax,"seaborn.heatmap(corr,mask=mask,vmax=.9,square=True,annot=False)",CLUSTER_7,CLUSTER_8
ax,"seaborn.jointplot(X_test['OverallQual'],y,kind=""hex"",stat_func=kendalltau,color=""
plt.xlabel('RelativeImportance')",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(10,15)",CLUSTER_7,CLUSTER_8
income,"pandas.read_csv('https://github.com/albahnsen/PracticalMachineLearningClass/raw/master/datasets/income.csv.zip',index_col=0)",CLUSTER_5,CLUSTER_5
data,pandas.read_csv('https://github.com/ghuiber/churn/raw/master/data/churn.csv'),CLUSTER_5,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
linreg3,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
linreg5,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
linreg2,"sklearn.linear_model.SGDRegressor(max_iter=30000,tol=None)",CLUSTER_5,CLUSTER_5
linreg4,"sklearn.linear_model.SGDRegressor(max_iter=30000,tol=None)",CLUSTER_5,CLUSTER_5
linreg6,"sklearn.linear_model.SGDRegressor(max_iter=30000,tol=None)",CLUSTER_5,CLUSTER_5
"X_train,X_validation,Y_train,Y_validation","sklearn.model_selection.train_test_split(X,Y,test_size=validation_size,random_state=seed)",CLUSTER_5,CLUSTER_5
logreg,"sklearn.linear_model.LogisticRegression(solver='liblinear',C=1e9)",CLUSTER_5,CLUSTER_5
data_ML_train,"pandas.DataFrame(train_split,columns=data_ML.columns)",CLUSTER_12,CLUSTER_1
data_ML_test,"pandas.DataFrame(test_split,columns=data_ML.columns)",CLUSTER_12,CLUSTER_1
data,pandas.read_csv('h1b_kaggle.csv'),CLUSTER_12,CLUSTER_1
lr_model,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='newton-cg')",CLUSTER_12,CLUSTER_1
lr_model_200,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='newton-cg',max_iter=200)",CLUSTER_12,CLUSTER_1
"train_split,test_split","sklearn.model_selection.train_test_split(data_ML,train_size=0.80,random_state=1)",CLUSTER_12,CLUSTER_1
HWeather_df,pandas.read_csv(path1),CLUSTER_8,CLUSTER_4
HStation_df,pandas.read_csv(path2),CLUSTER_8,CLUSTER_4
path,os.getcwd(),CLUSTER_9,CLUSTER_2
SP100_tickers,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
symbol_data,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
df_Flat_pct_change,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
news_df,"pandas.DataFrame(news_data,columns=['searchedkeyword','title','link'])",CLUSTER_9,CLUSTER_2
dataframe[col],"pandas.Series([round(val,2)",CLUSTER_9,CLUSTER_2
dataframe[col],"pandas.Series([""{0:.2f}%"".format(val*100)",CLUSTER_9,CLUSTER_2
single_table,"pandas.concat([symbol,symbol_data],axis=0,ignore_index=True)",CLUSTER_9,CLUSTER_2
website_url,"requests.get(""https://en.wikipedia.org/wiki/S%26P_100"")",CLUSTER_9,CLUSTER_2
resp,requests.get(url),CLUSTER_9,CLUSTER_2
df,"pandas.DataFrame({'ID':[1,2,3,4],
'customerName':['Tom','Harry','Meagan','Nancy'],
'Age':[20,25,34,45]})",CLUSTER_8,CLUSTER_4
ufo,pandas.read_csv(filepath),CLUSTER_8,CLUSTER_4
CS,"matplotlib.pyplot.contour(xgrid,ygrid,vv.asnumpy()",CLUSTER_1,CLUSTER_10
xgrid,"numpy.arange(-3,3,0.02)",CLUSTER_1,CLUSTER_10
ygrid,"numpy.arange(-3,3,0.02)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(xgrid,ygrid)",CLUSTER_1,CLUSTER_10
pivote,"random.randint(1,long_cromosoma-1)",CLUSTER_10,CLUSTER_4
pivote,"random.randint(0,long_cromosoma-1)",CLUSTER_10,CLUSTER_4
nuevo_valor,"random.randint(0,1)",CLUSTER_10,CLUSTER_4
padre,"random.sample(seleccion_final,2)",CLUSTER_10,CLUSTER_4
train,"pandas.read_csv(""Train.csv"")",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(""Test.csv"")",CLUSTER_7,CLUSTER_8
sample,"pandas.read_csv(""sample_submission.csv"")",CLUSTER_7,CLUSTER_8
train['date_time'],"pandas.to_datetime(train['date_time'],format=""%Y-%m-%d%H:%M:%S"")",CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(figsize=a4_dims),CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(figsize=a4_dims),CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(figsize=a4_dims),CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(figsize=a4_dims),CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(figsize=a4_dims),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(24,24)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(24,24)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(24,24)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(24,24)",CLUSTER_7,CLUSTER_8
href_df,pandas.DataFrame(np.array(href),CLUSTER_9,CLUSTER_2
dataset,pandas.read_csv('./href_list.csv'),CLUSTER_9,CLUSTER_2
href_df['title'],numpy.array(title),CLUSTER_9,CLUSTER_2
predictions,numpy.array(model.predict(testX),CLUSTER_2,CLUSTER_7
test_accuracy,"numpy.mean(predictions==actual,axis=0)",CLUSTER_2,CLUSTER_7
df,pandas.read_csv('indiadata.csv'),CLUSTER_5,CLUSTER_5
score,"numpy.sqrt(-cross_val_score(mlp,X_train,
y_train,
cv=5,scoring='neg_mean_squared_error')",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
mlp,"sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(nhn,)",CLUSTER_5,CLUSTER_5
a,"numpy.array([[0.84062117,0.48006452,0.7876326,0.77109654],
[0.44409793,0.09014516,0.81835917,0.87645456],
[0.7066597,0.09610873,0.41247947,0.57433389],
[0.29960807,0.42315023,0.34452557,0.4751035],
[0.17003563,0.46843998,0.92796258,0.69814654],
[0.41290051,0.19561071,0.16284783,0.97016248],
[0.71725408,0.87702738,0.31244595,0.76615487],
[0.20754036,0.57871812,0.07214068,0.40356048],
[0.12149553,0.53222417,0.9976855,0.12536346],
[0.80930099,0.50962849,0.94555126,0.33364763]])",CLUSTER_8,CLUSTER_11
b,"numpy.array([[[0.55867166,0.06210792,0.08147297],
[0.82579068,0.91512478,0.06833034]],

[[0.05440634,0.65857693,0.30296619],
[0.06769833,0.96031863,0.51293743]],

[[0.09143215,0.71893382,0.45850679],
[0.58256464,0.59005654,0.56266457]],

[[0.71600294,0.87392666,0.11434044],
[0.8694668,0.65669313,0.10708681]],

[[0.07529684,0.46470767,0.47984544],
[0.65368638,0.14901286,0.23760688]]])",CLUSTER_8,CLUSTER_11
neighborhoods,pandas.DataFrame(columns=column_names),CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
total_coffee,pandas.DataFrame(toronto_coffee['Neighborhood'].value_counts(),CLUSTER_9,CLUSTER_2
total_coffee_nyc,pandas.DataFrame(nyc_coffee['Neighborhood'].value_counts(),CLUSTER_9,CLUSTER_2
toronto,"pandas.merge(boroughs,coordinates,on='PostalCode')",CLUSTER_9,CLUSTER_2
neighborhood_data,"pandas.merge(neighborhood_data,toronto,on='Neighbourhood')",CLUSTER_9,CLUSTER_2
master_toronto,"pandas.merge(neighborhood_data,total_coffee,on='Neighbourhood',how='outer')",CLUSTER_9,CLUSTER_2
master_nyc,"pandas.merge(nyc_data,total_coffee_nyc,on='Neighborhood',how='outer')",CLUSTER_9,CLUSTER_2
coordinates,pandas.read_csv('Geospatial_Coordinates.csv'),CLUSTER_9,CLUSTER_2
url,"pandas.read_csv(""nyc_demographics"")",CLUSTER_9,CLUSTER_2
df_list,pandas.read_html(url),CLUSTER_9,CLUSTER_2
df_list,pandas.read_html(url),CLUSTER_9,CLUSTER_2
newyork_data,json.load(json_data),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
local_dir,os.getenv('TMPDIR'),CLUSTER_4,CLUSTER_11
T,"numpy.arange(0,len(SSU.time)",CLUSTER_4,CLUSTER_11
lat_edges,"numpy.arange(vb1['min'],vb1['max']+vb1['d']*.1,vb1['d'])",CLUSTER_4,CLUSTER_11
f_edges,"numpy.arange(vb2['min'],vb2['max']+vb2['d']*.1,vb2['d'])",CLUSTER_4,CLUSTER_11
"h,lbins","dask.array.histogram(i,bins=numpy.arange(-.5,(vb1['imax']+1)",CLUSTER_4,CLUSTER_11
"hnorm,lbins","dask.array.histogram(i,bins=numpy.arange(-.5,(vb1['imax']+1)",CLUSTER_4,CLUSTER_11
lat_edges,"numpy.arange(vb1['min'],vb1['max']+vb1['d']*.1,vb1['d'])",CLUSTER_4,CLUSTER_11
f_edges,"numpy.arange(vb2['min'],vb2['max']+vb2['d']*.1,vb2['d'])",CLUSTER_4,CLUSTER_11
"h,lbins","dask.array.histogram(i,bins=numpy.arange(-.5,(vb1['imax']+1)",CLUSTER_4,CLUSTER_11
"hnorm,lbins","dask.array.histogram(i,bins=numpy.arange(-.5,(vb1['imax']+1)",CLUSTER_4,CLUSTER_11
lat_edges,"numpy.arange(vb1['min'],vb1['max']+vb1['d']*.1,vb1['d'])",CLUSTER_4,CLUSTER_11
f_edges,"numpy.arange(vb2['min'],vb2['max']+vb2['d']*.1,vb2['d'])",CLUSTER_4,CLUSTER_11
"h,lbins","dask.array.histogram(i,bins=numpy.arange(-.5,(vb1['imax']+1)",CLUSTER_4,CLUSTER_11
"hnorm,lbins","dask.array.histogram(i,bins=numpy.arange(-.5,(vb1['imax']+1)",CLUSTER_4,CLUSTER_11
cax,numpy.log10(E/8.64),CLUSTER_4,CLUSTER_11
cax,numpy.log10(E/8.64),CLUSTER_4,CLUSTER_11
cax,numpy.log10(E/8.64),CLUSTER_4,CLUSTER_11
cax,"numpy.log10(ds_1['E_all'].isel(i=slice(2500,4320)",CLUSTER_4,CLUSTER_11
cax,numpy.log10(ds['E_all']),CLUSTER_4,CLUSTER_11
cax,numpy.log10(eta),CLUSTER_4,CLUSTER_11
cax,numpy.log10(eta),CLUSTER_4,CLUSTER_11
i1,numpy.maximum(np.rint((v1-b1['min']),CLUSTER_4,CLUSTER_11
i2,numpy.maximum(np.rint((v2-b2['min']),CLUSTER_4,CLUSTER_11
i1,numpy.maximum(np.rint((v1-b1['min']),CLUSTER_4,CLUSTER_11
i2,numpy.maximum(np.rint((v2-b2['min']),CLUSTER_4,CLUSTER_11
i1,numpy.maximum(np.rint((v1-b1['min']),CLUSTER_4,CLUSTER_11
i2,numpy.maximum(np.rint((v2-b2['min']),CLUSTER_4,CLUSTER_11
i1,"numpy.minimum(i1,b1['imax'])",CLUSTER_4,CLUSTER_11
i2,"numpy.minimum(i2,b2['imax'])",CLUSTER_4,CLUSTER_11
i1,"numpy.minimum(i1,b1['imax'])",CLUSTER_4,CLUSTER_11
i2,"numpy.minimum(i2,b2['imax'])",CLUSTER_4,CLUSTER_11
i1,"numpy.minimum(i1,b1['imax'])",CLUSTER_4,CLUSTER_11
i2,"numpy.minimum(i2,b2['imax'])",CLUSTER_4,CLUSTER_11
E_uv,numpy.real(E_uv),CLUSTER_4,CLUSTER_11
E_all,numpy.real(E_all),CLUSTER_4,CLUSTER_11
E_sdiurnal,numpy.real(E_sdiurnal),CLUSTER_4,CLUSTER_11
E_diurnal,numpy.real(E_diurnal),CLUSTER_4,CLUSTER_11
E_low,numpy.real(E_low),CLUSTER_4,CLUSTER_11
E_f,numpy.real(E_f),CLUSTER_4,CLUSTER_11
E_f,numpy.real(E_f),CLUSTER_4,CLUSTER_11
E_all,numpy.real(E_all),CLUSTER_4,CLUSTER_11
E_sdiurnal,numpy.real(E_sdiurnal),CLUSTER_4,CLUSTER_11
E_diurnal,numpy.real(E_diurnal),CLUSTER_4,CLUSTER_11
E_low,numpy.real(E_low),CLUSTER_4,CLUSTER_11
E_f,numpy.real(E_f),CLUSTER_4,CLUSTER_11
E_all,numpy.real(E_all),CLUSTER_4,CLUSTER_11
E_sdiurnal,numpy.real(E_sdiurnal),CLUSTER_4,CLUSTER_11
E_diurnal,numpy.real(E_diurnal),CLUSTER_4,CLUSTER_11
E_low,numpy.real(E_low),CLUSTER_4,CLUSTER_11
window,numpy.hanning(nfft),CLUSTER_4,CLUSTER_11
upper_diags,"scipy.sparse.diags([d1,d2],[1,c])",CLUSTER_6,CLUSTER_11
upper_diags,"scipy.sparse.diags([d1,d2,d3,d4],[1,c-1,c,c+1])",CLUSTER_6,CLUSTER_11
a,numpy.array([25.0]),CLUSTER_6,CLUSTER_11
b,numpy.array([.05]),CLUSTER_6,CLUSTER_11
y,numpy.array([25.0]),CLUSTER_6,CLUSTER_11
ds,numpy.array(dummy),CLUSTER_6,CLUSTER_11
d,numpy.array(new_d),CLUSTER_6,CLUSTER_11
A_pair,numpy.asarray(np.where(A.toarray(),CLUSTER_6,CLUSTER_11
A_pair,numpy.asarray(np.where(A.toarray(),CLUSTER_6,CLUSTER_11
dummy,"numpy.zeros(shape=(3,T1.shape[-1],T1.shape[-2])",CLUSTER_6,CLUSTER_11
d2,numpy.ones(c*(r-1),CLUSTER_6,CLUSTER_11
d3,numpy.ones(c*(r-1),CLUSTER_6,CLUSTER_11
pixel_indices,"numpy.reshape(pixel_indices,(width,width)",CLUSTER_6,CLUSTER_11
pixel_indices,"numpy.reshape(pixel_indices,(width,width)",CLUSTER_6,CLUSTER_11
d2,"numpy.append([0],d1[:c*(r-1)",CLUSTER_6,CLUSTER_11
d1,numpy.tile(np.append(np.ones(c-1),CLUSTER_6,CLUSTER_11
d1,numpy.tile(np.append(np.ones(c-1),CLUSTER_6,CLUSTER_11
tstart,time.time(),CLUSTER_6,CLUSTER_11
tstart,time.time(),CLUSTER_6,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(8,8)",CLUSTER_6,CLUSTER_11
view_log,"pandas.read_json(json_file,lines=True)",CLUSTER_8,CLUSTER_4
view_song,"pandas.read_json(song_file,orient='columns',lines=True)",CLUSTER_8,CLUSTER_4
x,json.load(f),CLUSTER_8,CLUSTER_4
x1,"numpy.array([1,2,1])",CLUSTER_4,CLUSTER_11
x2,"numpy.array([0,4,-1])",CLUSTER_4,CLUSTER_11
idx,numpy.argsort(model['w']),CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join(RESOURCES_FOLDER,'ex6data1.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join(RESOURCES_FOLDER,'ex6data2.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join(RESOURCES_FOLDER,'ex6data3.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join(RESOURCES_FOLDER,'spamTrain.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join(RESOURCES_FOLDER,'spamTest.mat')",CLUSTER_4,CLUSTER_11
x,"numpy.expand_dims(img,axis=0)",CLUSTER_2,CLUSTER_7
x,"numpy.expand_dims(img2,axis=0)",CLUSTER_2,CLUSTER_7
"[t,p]","scipy.stats.ttest_1samp(datasetA,42)",CLUSTER_1,CLUSTER_9
"[t,p]","scipy.stats.ttest_ind(datasetA,datasetB)",CLUSTER_1,CLUSTER_9
"[t,p]","scipy.stats.ttest_rel(dataset2,dataset3)",CLUSTER_1,CLUSTER_9
cov,"numpy.array([[1,0.8],[0.8,1]])",CLUSTER_7,CLUSTER_9
cov,"numpy.array([[0,0.8],[0.8,0]],dtype=np.float64)",CLUSTER_7,CLUSTER_9
x,"numpy.linspace(xlim[0],xlim[1],100)",CLUSTER_7,CLUSTER_9
y,"scipy.stats.norm(advifit.means['mu'],advifit.stds['mu'])",CLUSTER_7,CLUSTER_9
ax,"seaborn.distplot(trace['mu'],label='NUTS')",CLUSTER_7,CLUSTER_9
a,numpy.arange(12),CLUSTER_3,CLUSTER_6
a,numpy.arange(12),CLUSTER_3,CLUSTER_6
a,numpy.arange(48),CLUSTER_3,CLUSTER_6
a,numpy.arange(10),CLUSTER_3,CLUSTER_6
b,numpy.arange(16),CLUSTER_3,CLUSTER_6
c,numpy.arange(30),CLUSTER_3,CLUSTER_6
a,numpy.arange(12),CLUSTER_3,CLUSTER_6
b,numpy.arange(16),CLUSTER_3,CLUSTER_6
a,numpy.arange(100000),CLUSTER_3,CLUSTER_6
a,"numpy.array([11,22,33,44,55,66,77,88,99])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1.1,2.2,3.3])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1+2j,2+3j])",CLUSTER_3,CLUSTER_6
a,"numpy.array((1,2,3)",CLUSTER_3,CLUSTER_6
a,"numpy.array([[2,4],[6,8],[10,12]])",CLUSTER_3,CLUSTER_6
b,"numpy.array([[[1,2],[3,4]],
[[5,6],[7,8]],
[[9,10],[11,12]]])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
b,"numpy.array([[1,1],[0,0]])",CLUSTER_3,CLUSTER_6
c,"numpy.array([[1],[2],[3]])",CLUSTER_3,CLUSTER_6
y2,numpy.cos(x),CLUSTER_3,CLUSTER_6
y1,numpy.sin(x),CLUSTER_3,CLUSTER_6
x,"numpy.linspace(0,2*np.pi,10)",CLUSTER_3,CLUSTER_6
a,numpy.load('example_1.npy'),CLUSTER_3,CLUSTER_6
ex_2,numpy.load('example_2.npz'),CLUSTER_3,CLUSTER_6
ex_2,numpy.load('example_2.npz'),CLUSTER_3,CLUSTER_6
ex_3,numpy.load('example_3.npz'),CLUSTER_3,CLUSTER_6
R,numpy.sum((x-np.mean(x),CLUSTER_1,CLUSTER_10
A,"numpy.vstack([x,np.ones(len(x)",CLUSTER_1,CLUSTER_10
"a1,b1","numpy.linalg.lstsq(A,y)",CLUSTER_1,CLUSTER_10
"n,bins,pathes","matplotlib.pyplot.hist(x,num_bins)",CLUSTER_1,CLUSTER_10
X_train_augmented,numpy.array(X_train_augmented),CLUSTER_0,CLUSTER_11
y_train_augmented,numpy.array(y_train_augmented),CLUSTER_0,CLUSTER_11
X,numpy.array(ham_emails+spam_emails),CLUSTER_0,CLUSTER_11
y,numpy.array([0]*len(ham_emails),CLUSTER_0,CLUSTER_11
image,"numpy.concatenate(row_images,axis=0)",CLUSTER_0,CLUSTER_11
X_train_expanded,numpy.concatenate(X_train_expanded),CLUSTER_0,CLUSTER_11
y_train_expanded,numpy.concatenate(y_train_expanded),CLUSTER_0,CLUSTER_11
shifted_images,"numpy.apply_along_axis(shift_digit,axis=1,arr=X_train,dx=dx,dy=dy)",CLUSTER_0,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_0,CLUSTER_11
sgd_clf,"sklearn.linear_model.SGDClassifier(max_iter=5,random_state=42)",CLUSTER_0,CLUSTER_11
svm_scores,"sklearn.model_selection.cross_val_score(svm_clf,X_train,y_train,cv=10)",CLUSTER_0,CLUSTER_11
forest_scores,"sklearn.model_selection.cross_val_score(forest_clf,X_train,y_train,cv=10)",CLUSTER_0,CLUSTER_11
score,"sklearn.model_selection.cross_val_score(log_clf,X_train_transformed,y_train,cv=3,verbose=3)",CLUSTER_0,CLUSTER_11
skfolds,"sklearn.model_selection.StratifiedKFold(n_splits=3,random_state=42)",CLUSTER_0,CLUSTER_11
y_train_pred,"sklearn.model_selection.cross_val_predict(sgd_clf,X_train,y_train_5,cv=3)",CLUSTER_0,CLUSTER_11
y_scores,"sklearn.model_selection.cross_val_predict(sgd_clf,X_train,y_train_5,cv=3,
method=""decision_function"")",CLUSTER_0,CLUSTER_11
y_probas_forest,"sklearn.model_selection.cross_val_predict(forest_clf,X_train,y_train_5,cv=3,
method=""predict_proba"")",CLUSTER_0,CLUSTER_11
y_train_pred_forest,"sklearn.model_selection.cross_val_predict(forest_clf,X_train,y_train_5,cv=3)",CLUSTER_0,CLUSTER_11
y_train_pred,"sklearn.model_selection.cross_val_predict(sgd_clf,X_train_scaled,y_train,cv=3)",CLUSTER_0,CLUSTER_11
y_train_knn_pred,"sklearn.model_selection.cross_val_predict(knn_clf,X_train,y_multilabel,cv=3,n_jobs=-1)",CLUSTER_0,CLUSTER_11
y_probas_dmy,"sklearn.model_selection.cross_val_predict(dmy_clf,X_train,y_train_5,cv=3,method=""predict_proba"")",CLUSTER_0,CLUSTER_11
conf_mx,"sklearn.metrics.confusion_matrix(y_train,y_train_pred)",CLUSTER_0,CLUSTER_11
"precisions,recalls,thresholds","sklearn.metrics.precision_recall_curve(y_train_5,y_scores)",CLUSTER_0,CLUSTER_11
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_train_5,y_scores)",CLUSTER_0,CLUSTER_11
"fpr_forest,tpr_forest,thresholds_forest","sklearn.metrics.roc_curve(y_train_5,y_scores_forest)",CLUSTER_0,CLUSTER_11
"fprr,tprr,thresholdsr","sklearn.metrics.roc_curve(y_train_5,y_scores_dmy)",CLUSTER_0,CLUSTER_11
forest_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_0,CLUSTER_11
forest_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_0,CLUSTER_11
ovo_clf,"sklearn.multiclass.OneVsOneClassifier(SGDClassifier(max_iter=5,random_state=42)",CLUSTER_0,CLUSTER_11
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_0,CLUSTER_11
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_11
knn_clf,"sklearn.neighbors.KNeighborsClassifier(n_jobs=-1,weights='distance',n_neighbors=4)",CLUSTER_0,CLUSTER_11
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_11
knn_clf,sklearn.neighbors.KNeighborsClassifier(**grid_search.best_params_),CLUSTER_0,CLUSTER_11
dmy_clf,sklearn.dummy.DummyClassifier(),CLUSTER_0,CLUSTER_11
grid_search,"sklearn.model_selection.GridSearchCV(knn_clf,param_grid,cv=5,verbose=3,n_jobs=-1)",CLUSTER_0,CLUSTER_11
self.most_frequent_,pandas.Series([X[c].value_counts(),CLUSTER_0,CLUSTER_11
num_pipeline,"sklearn.pipeline.Pipeline([
(""select_numeric"",DataFrameSelector([""Age"",""SibSp"",""Parch"",""Fare""])",CLUSTER_0,CLUSTER_11
cat_pipeline,"sklearn.pipeline.Pipeline([
(""select_cat"",DataFrameSelector([""Pclass"",""Sex"",""Embarked""])",CLUSTER_0,CLUSTER_11
preprocess_pipeline,"sklearn.pipeline.Pipeline([
(""email_to_wordcount"",EmailToWordCounterTransformer()",CLUSTER_0,CLUSTER_11
preprocess_pipeline,"sklearn.pipeline.FeatureUnion(transformer_list=[
(""num_pipeline"",num_pipeline)",CLUSTER_0,CLUSTER_11
svm_clf,sklearn.svm.SVC(),CLUSTER_0,CLUSTER_11
structures,collections.Counter(),CLUSTER_0,CLUSTER_11
word_counts,collections.Counter(text.split(),CLUSTER_0,CLUSTER_11
stemmed_word_counts,collections.Counter(),CLUSTER_0,CLUSTER_11
total_count,collections.Counter(),CLUSTER_0,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_0,CLUSTER_11
text,"re.sub('<head.*?>.*?</head>','',html,flags=re.M|re.S|re.I)",CLUSTER_0,CLUSTER_11
text,"re.sub('<a\s.*?>','HYPERLINK',text,flags=re.M|re.S|re.I)",CLUSTER_0,CLUSTER_11
text,"re.sub('<.*?>','',text,flags=re.M|re.S)",CLUSTER_0,CLUSTER_11
text,re.sub(r'(\s*\n),CLUSTER_0,CLUSTER_11
text,re.sub(r'\d+(?:\.\d*(?:[eE]\d+),CLUSTER_0,CLUSTER_11
text,"re.sub(r'\W+','',text,flags=re.M)",CLUSTER_0,CLUSTER_11
log_clf,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_0,CLUSTER_11
log_clf,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_0,CLUSTER_11
arr_1,numpy.array(temp),CLUSTER_1,CLUSTER_10
arr,numpy.asarray(image),CLUSTER_1,CLUSTER_10
arr,numpy.asarray(image),CLUSTER_1,CLUSTER_10
final_arr_1,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_2,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_3,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_4,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_5,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_6,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_7,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_8,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_9,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_1,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_2,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_3,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_4,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_5,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
temp,"numpy.append(final_arr_1,final_arr_2)",CLUSTER_1,CLUSTER_10
temp_1,"numpy.append(temp,final_arr_3)",CLUSTER_1,CLUSTER_10
temp_2,"numpy.append(temp_1,final_arr_4)",CLUSTER_1,CLUSTER_10
temp_3,"numpy.append(temp_2,final_arr_5)",CLUSTER_1,CLUSTER_10
temp_4,"numpy.append(temp_3,final_arr_6)",CLUSTER_1,CLUSTER_10
temp_5,"numpy.append(temp_4,final_arr_7)",CLUSTER_1,CLUSTER_10
temp_6,"numpy.append(temp_5,final_arr_8)",CLUSTER_1,CLUSTER_10
final_result,"numpy.append(temp_6,final_arr_9)",CLUSTER_1,CLUSTER_10
temp,"numpy.append(final_arr_1,final_arr_2)",CLUSTER_1,CLUSTER_10
temp_1,"numpy.append(temp,final_arr_3)",CLUSTER_1,CLUSTER_10
temp_2,"numpy.append(temp_1,final_arr_4)",CLUSTER_1,CLUSTER_10
final_result,"numpy.append(temp_2,final_arr_5)",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_10
img,"matplotlib.pyplot.imread(""X.png"")",CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_7
data,"pandas.read_csv('ADHD.txt',sep='',header=0)",CLUSTER_8,CLUSTER_9
all_volume,"pandas.concat([sh02_volume,sh03_volume],axis=0,ignore_index=True)",CLUSTER_8,CLUSTER_4
datas,pandas.read_excel(path),CLUSTER_8,CLUSTER_4
sh02,pandas.read_excel('/Users/zhangzhen/Desktop/000002日线数据.xlsx'),CLUSTER_8,CLUSTER_4
sh03,pandas.read_excel('/Users/zhangzhen/Desktop/000003日线数据.xlsx'),CLUSTER_8,CLUSTER_4
parameters['W'+str(l)],"numpy.zeros((layers_dims[l],layers_dims[l-1])",CLUSTER_5,CLUSTER_10
parameters['b'+str(l)],"numpy.zeros((layers_dims[l],1)",CLUSTER_5,CLUSTER_10
parameters['b'+str(l)],"numpy.zeros((layers_dims[l],1)",CLUSTER_5,CLUSTER_10
parameters['b'+str(l)],"numpy.zeros((layers_dims[l],1)",CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_10
df,"pandas.DataFrame(np.random.randn(4,3)",CLUSTER_8,CLUSTER_3
data,"pandas.read_csv('data/ex5.csv',na_values=[1])",CLUSTER_8,CLUSTER_3
randomNum,"random.randint(0,55000)",CLUSTER_2,CLUSTER_7
real_image_batch,"numpy.reshape(real_image_batch[0],[batch_size,28,28,1])",CLUSTER_2,CLUSTER_7
"plt.imshow(image,cmap",matplotlib.pyplot.get_cmap('gray_r'),CLUSTER_2,CLUSTER_7
a,"pandas.merge(t,f,how='left',left_on='beer_id',right_on='id')",CLUSTER_8,CLUSTER_3
t,"pandas.read_json('../data/reviews.json',orient='records')",CLUSTER_8,CLUSTER_3
f,"pandas.read_json('../data/beer-info.json',orient='records')",CLUSTER_8,CLUSTER_3
f.date,pandas.to_datetime(f.date.apply(lambdav:v.split(''),CLUSTER_8,CLUSTER_3
df,pandas.read_csv('creditcard.csv'),CLUSTER_8,CLUSTER_11
X_grid,numpy.arange(min(X_train),CLUSTER_5,CLUSTER_5
test,numpy.array([5.06]),CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(cols*5,rows*5)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(cols*5,rows*5)",CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('data.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
regressor,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,random_state=0,)",CLUSTER_5,CLUSTER_5
lasso,sklearn.linear_model.Lasso(),CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
rr,sklearn.linear_model.Ridge(),CLUSTER_5,CLUSTER_5
mlpr,"sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(5,3)",CLUSTER_5,CLUSTER_5
data,"numpy.array(df.iloc[:100,:])",CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(iris.data,columns=iris.feature_names)",CLUSTER_5,CLUSTER_5
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_5,CLUSTER_5
exponent,"math.exp(-(math.pow(x-mean,2)",CLUSTER_5,CLUSTER_5
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_5
fu,"numpy.array([[9,0,0,6,4,3,5,7,8,6,5],
[0,0,0,8,10,0,8,5,6,2,0],
[8,0,5,7,4,0,5,7,8,8,5],
[5,2,0,4,10,0,9,5,0,0,0],
[0,0,2,5,7,0,0,9,0,4,0],
[2,3,0,0,0,7,9,0,5,0,3],
[5,0,3,8,8,0,0,7,0,2,4],
[8,7,0,6,5,4,0,8,0,10,0],
[0,0,2,5,10,0,0,0,9,0,3]])",CLUSTER_1,CLUSTER_3
U,"numpy.zeros((R.shape[0],d)",CLUSTER_1,CLUSTER_3
V,"numpy.zeros((d,R.shape[1])",CLUSTER_1,CLUSTER_3
r_cap,"numpy.zeros((R.shape[0],R.shape[1])",CLUSTER_1,CLUSTER_3
"r_cap[i,j]","numpy.dot(A[i,:],B[:,j])",CLUSTER_1,CLUSTER_3
R,"pandas.DataFrame(fu,u,f)",CLUSTER_1,CLUSTER_3
R_cap,"pandas.DataFrame(r_cap,u,f)",CLUSTER_1,CLUSTER_3
labels_np,numpy.array(labels),CLUSTER_5,CLUSTER_5
target_values_np,numpy.array(target_values_list),CLUSTER_5,CLUSTER_5
img_matricies_np,numpy.asarray(img_matricies_list),CLUSTER_5,CLUSTER_5
test_img_matricies_np,numpy.asarray(test_img_matricies_list),CLUSTER_5,CLUSTER_5
test_individual_img_matrix_np,"numpy.asarray(get_imgMatrix_from_id(test_individual_id,image_dir=""../data/preprocessed_data/Test"")",CLUSTER_5,CLUSTER_5
test_not_processes_img_matrix_np,"numpy.asarray(get_imgMatrix_from_id(test_individual_id,image_dir=""../data/included/Test"",filetype="".jpg"")",CLUSTER_5,CLUSTER_5
labels_df,"pandas.DataFrame(labels_np,columns=list(""B"")",CLUSTER_5,CLUSTER_5
train,"pandas.read_csv(""../data/included/labels.csv"")",CLUSTER_5,CLUSTER_5
test,"pandas.read_csv(""../data/included/test_id.csv"")",CLUSTER_5,CLUSTER_5
clf,"sklearn.linear_model.SGDClassifier(loss=""log"",penalty=""l2"",max_iter=1000,tol=None)",CLUSTER_5,CLUSTER_5
arr,"numpy.array([10,20,30])",CLUSTER_8,CLUSTER_3
ser1,"pandas.Series([1,2,3,4],index=['USA','Germany','USSR','Japan'])",CLUSTER_8,CLUSTER_3
ser2,"pandas.Series([1,2,5,4],index=['USA','Germany','Italy','Japan'])",CLUSTER_8,CLUSTER_3
sigma,numpy.sqrt(n*.5*(1-.5),CLUSTER_1,CLUSTER_9
sigma,numpy.sqrt(n*.5*(1-.5),CLUSTER_1,CLUSTER_9
page,requests.get(hrefdoximity),CLUSTER_9,CLUSTER_2
page,requests.get(hrefhealthgrades),CLUSTER_9,CLUSTER_2
page,requests.get(hrefhealthgrades),CLUSTER_9,CLUSTER_2
page,requests.get(hrefhealthgrades),CLUSTER_9,CLUSTER_2
page,requests.get(hrefhealthgrades),CLUSTER_9,CLUSTER_2
page,requests.get(hreftruepeoplesearch),CLUSTER_9,CLUSTER_2
page,requests.get(hreftruepeoplesearch),CLUSTER_9,CLUSTER_2
page,requests.get(hreftruepeoplesearch),CLUSTER_9,CLUSTER_2
page,requests.get(hreftruepeoplesearch),CLUSTER_9,CLUSTER_2
leadstable,"pandas.read_csv('indiananames.csv',header=None)",CLUSTER_9,CLUSTER_2
delimetedname,"re.split('',str(item)",CLUSTER_9,CLUSTER_2
train_data,pandas.read_csv('train_groups.csv'),CLUSTER_5,CLUSTER_5
train_data,pandas.read_csv('test_groups.csv'),CLUSTER_5,CLUSTER_5
x_axis,numpy.arange(length//N),CLUSTER_5,CLUSTER_5
x_axis,numpy.arange(length//N),CLUSTER_5,CLUSTER_5
y_batch,numpy.array(y_batch),CLUSTER_5,CLUSTER_5
a,"numpy.array([np.dot(X_batch[i],self.weights)",CLUSTER_5,CLUSTER_5
self.weights,"numpy.array([random.uniform(-1/k,1/k)",CLUSTER_5,CLUSTER_5
C1,"numpy.array([[0.,-0.8],[1.5,0.8]])",CLUSTER_5,CLUSTER_5
C2,"numpy.array([[1.,-0.7],[2.,0.7]])",CLUSTER_5,CLUSTER_5
X_train,numpy.array(X_train),CLUSTER_5,CLUSTER_5
y_train,numpy.array(y_train),CLUSTER_5,CLUSTER_5
groups_train,numpy.array(groups_train),CLUSTER_5,CLUSTER_5
X_test,numpy.array(X_test),CLUSTER_5,CLUSTER_5
groups_train,numpy.array(groups_train),CLUSTER_5,CLUSTER_5
X_batch,"numpy.zeros((batch_size,X.shape[1])",CLUSTER_5,CLUSTER_5
y_batch,numpy.zeros((batch_size),CLUSTER_5,CLUSTER_5
loss_grad,numpy.zeros((len(self.weights),CLUSTER_5,CLUSTER_5
X,"numpy.concatenate((X,list_added)",CLUSTER_5,CLUSTER_5
loss_grad,"numpy.dot(sigmoid(numpy.dot(X_batch,self.weights)",CLUSTER_5,CLUSTER_5
gauss1,"numpy.dot(np.random.randn(200,2)",CLUSTER_5,CLUSTER_5
gauss2,"numpy.dot(np.random.randn(200,2)",CLUSTER_5,CLUSTER_5
loss,"numpy.sum([(y_batch[i]-
np.dot(X_batch[i],self.weights)",CLUSTER_5,CLUSTER_5
loss+,numpy.sum(self.weights**2),CLUSTER_5,CLUSTER_5
loss+,numpy.sum(self.weights**2),CLUSTER_5,CLUSTER_5
loss_grad,numpy.sum([(a[i]-y_batch[i]),CLUSTER_5,CLUSTER_5
x,"numpy.linspace(-5,8,num=2)",CLUSTER_5,CLUSTER_5
X,"numpy.vstack([gauss1,gauss2])",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.1,stratify=y)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_5,CLUSTER_5
"X,y","sklearn.datasets.make_classification(n_samples=100000,n_features=10,
n_informative=4,n_redundant=0,
random_state=123,class_sep=1.0,
n_clusters_per_class=1)",CLUSTER_5,CLUSTER_5
df,pandas.DataFrame(list(client.lookups['aggregated_franchise_spend'].find({'extracted_date':extracted_date}),CLUSTER_11,CLUSTER_12
gf,pandas.DataFrame(index=list(set(df.companyname),CLUSTER_11,CLUSTER_12
amount_corr_df,pandas.DataFrame(index=gf.index),CLUSTER_11,CLUSTER_12
amount_corr_df,pandas.DataFrame(index=gf.index),CLUSTER_11,CLUSTER_12
inds,numpy.where(df[amount_col].notnull(),CLUSTER_11,CLUSTER_12
inds,numpy.where(df[amount_col].notnull(),CLUSTER_11,CLUSTER_12
amount_corr_df[amount_next+'_corr'],"numpy.log(gf[amount_next].div(gf[amount_now],axis=0)",CLUSTER_11,CLUSTER_12
C,numpy.corrcoef(df.values),CLUSTER_11,CLUSTER_12
correlation,"pandas.DataFrame([top15['Citabledocumentsperperson'],top15['EnergySupplyperCapita']])",CLUSTER_1,CLUSTER_3
cut,"pandas.cut(top15[""%Renewable""],5,labels=False)",CLUSTER_1,CLUSTER_3
GDP,"pandas.read_csv(world_bank_gdp_csv_location,skiprows=4)",CLUSTER_1,CLUSTER_3
energy,"pandas.read_excel(energy_xls_location,sheetname='Energy',header=None,skiprows=18,skip_footer=38)",CLUSTER_1,CLUSTER_3
ScimEn,pandas.read_excel(scim_location),CLUSTER_1,CLUSTER_3
auths,json.load(json_yahoo_file),CLUSTER_11,CLUSTER_12
ranges,pandas.read_csv('IPRangesOfInterest.csv'),CLUSTER_9,CLUSTER_2
scores,numpy.array(gr_dt01.cv_results_['mean_test_score']),CLUSTER_7,CLUSTER_8
scores,numpy.array(gr_dt02.cv_results_['mean_test_score']),CLUSTER_7,CLUSTER_8
scores,numpy.array(gr_rf01.cv_results_['mean_test_score']),CLUSTER_7,CLUSTER_8
scores,numpy.array(gr_rf02.cv_results_['mean_test_score']),CLUSTER_7,CLUSTER_8
mask,"numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_7,CLUSTER_8
diamond_data01,pandas.get_dummies(diamond_data),CLUSTER_7,CLUSTER_8
diamond_data02,pandas.get_dummies(diamond_data_f),CLUSTER_7,CLUSTER_8
diamond_data,"pandas.read_csv('./diamonds.csv',sep=',',decimal='.')",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_7,CLUSTER_8
"X_train01,X_test01,y_train01,y_test01","sklearn.model_selection.train_test_split(X01,y01,random_state=0,test_size=.3,shuffle=True)",CLUSTER_7,CLUSTER_8
"X_train02,X_test02,y_train02,y_test02","sklearn.model_selection.train_test_split(X02,y02,random_state=0,test_size=.3,shuffle=True)",CLUSTER_7,CLUSTER_8
lr01,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
lr02,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
treeModel,sklearn.tree.DecisionTreeRegressor(max_depth=maxDepthOptimo),CLUSTER_7,CLUSTER_8
treeModel,sklearn.tree.DecisionTreeRegressor(max_depth=maxDepthOptimo),CLUSTER_7,CLUSTER_8
gr_dt01,sklearn.model_selection.GridSearchCV(DecisionTreeRegressor(random_state=0),CLUSTER_7,CLUSTER_8
gr_dt02,sklearn.model_selection.GridSearchCV(DecisionTreeRegressor(random_state=0),CLUSTER_7,CLUSTER_8
gr_rf01,"sklearn.model_selection.GridSearchCV(RandomForestRegressor(random_state=0,n_estimators=100,max_features='sqrt')",CLUSTER_7,CLUSTER_8
gr_rf02,"sklearn.model_selection.GridSearchCV(RandomForestRegressor(random_state=0,n_estimators=100,max_features='sqrt')",CLUSTER_7,CLUSTER_8
grid,"sklearn.model_selection.GridSearchCV(GradientBoostingRegressor(random_state=0,max_depth=3)",CLUSTER_7,CLUSTER_8
rf_01,"sklearn.ensemble.RandomForestRegressor(max_depth=10,n_estimators=100,max_features='sqrt')",CLUSTER_7,CLUSTER_8
rf_02,"sklearn.ensemble.RandomForestRegressor(max_depth=10,n_estimators=100,max_features='sqrt')",CLUSTER_7,CLUSTER_8
bt,"sklearn.ensemble.GradientBoostingRegressor(random_state=0,max_depth=3,learning_rate=0.1,n_estimators=1500)",CLUSTER_7,CLUSTER_8
df,"pandas.merge(df_2015,df_2017,on='Country')",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(""./2017.csv"")",CLUSTER_7,CLUSTER_8
df_2015,"pandas.read_csv(""./2015.csv"")",CLUSTER_7,CLUSTER_8
df_2017,"pandas.read_csv(""./2017.csv"")",CLUSTER_7,CLUSTER_8
mask,"numpy.zeros_like(corrmat,dtype=np.bool)",CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(18,18)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
programmers,"pandas.read_csv('/Users/kamilw/Desktop/Moje/PythonLearing/Pandas_Udemy/course-files/StackOverflowDeveloperSurvey2018.csv',usecols=['ConvertedSalary'],squeeze=True,low_memory=False)",CLUSTER_8,CLUSTER_4
fortune500,"pandas.read_csv('/Users/kamilw/Desktop/Moje/PythonLearing/Pandas_Udemy/course-files/Fortune_500_2017.csv',usecols=['Title','Employees'],index_col=['Title'],squeeze=True)",CLUSTER_8,CLUSTER_4
riverdale,"pandas.DataFrame({'height':samp_series,
'actor':actor})",CLUSTER_8,CLUSTER_3
data,"pandas.Series([0.25,0.5,0.75,1.0])",CLUSTER_8,CLUSTER_3
data,"pandas.Series([0.25,0.5,0.75,1.0],
index=['a','b','c','d'])",CLUSTER_8,CLUSTER_3
samp_series,pandas.Series(samp_dict),CLUSTER_8,CLUSTER_3
actor,pandas.Series(actor_dict),CLUSTER_8,CLUSTER_3
titanic,pandas.read_csv(url),CLUSTER_8,CLUSTER_3
x0,"numpy.array([-8.0,8.0,27.0])",CLUSTER_1,CLUSTER_6
mis_np,numpy.array(mis),CLUSTER_1,CLUSTER_6
corr_np,numpy.array(corr),CLUSTER_1,CLUSTER_6
lagged,"numpy.roll(x,-tau)",CLUSTER_1,CLUSTER_6
data_lag1,"numpy.roll(x,-tau)",CLUSTER_1,CLUSTER_6
data_lag2,"numpy.roll(x,-2*tau)",CLUSTER_1,CLUSTER_6
t,"numpy.linspace(0,100,10000)",CLUSTER_1,CLUSTER_6
joint,"numpy.hstack((unlagged,lagged)",CLUSTER_1,CLUSTER_6
corr_,"numpy.corrcoef(np.array([x[:-tau],x[tau:]])",CLUSTER_1,CLUSTER_6
data,"scipy.integrate.odeint(lorentz_deriv,x0,t)",CLUSTER_1,CLUSTER_6
"U,Sig,Vh","scipy.linalg.svd(x_hank[:,:-1],False)",CLUSTER_1,CLUSTER_6
hank,"scipy.linalg.hankel(c=array[:nrows],r=array[nrows-1:])",CLUSTER_1,CLUSTER_6
hank,scipy.linalg.hankel(c=array[:nrows]),CLUSTER_1,CLUSTER_6
html_page,requests.get(url),CLUSTER_10,CLUSTER_12
html_page,requests.get(url),CLUSTER_10,CLUSTER_12
loan_data_target_train,pandas.DataFrame(loan_data_target_train),CLUSTER_5,CLUSTER_9
loan_data_target_train_2,pandas.DataFrame(loan_data_target_train_2),CLUSTER_5,CLUSTER_9
loan_data_target_test,pandas.DataFrame(loan_data_target_test),CLUSTER_5,CLUSTER_9
loan_data_target_test_2,pandas.DataFrame(loan_data_target_test_2),CLUSTER_5,CLUSTER_9
summary_table,"pandas.DataFrame(columns=['Featurename'],data=feature_name)",CLUSTER_5,CLUSTER_9
summary_table,"pandas.DataFrame(columns=['Featurename'],data=feature_name)",CLUSTER_5,CLUSTER_9
yhat_test_rf,pandas.DataFrame(yhat_test_rf),CLUSTER_5,CLUSTER_9
yhat_test_rf_2,pandas.DataFrame(yhat_test_rf_2),CLUSTER_5,CLUSTER_9
yhat_test_rf_imb,pandas.DataFrame(yhat_test_rf_imb),CLUSTER_5,CLUSTER_9
yhat_test_gbl,pandas.DataFrame(yhat_test_gbl),CLUSTER_5,CLUSTER_9
df_ref_cat,"pandas.DataFrame(ref_categories,columns=['FeatureName'])",CLUSTER_5,CLUSTER_9
mis_val_table,"pandas.concat([mis_valu,mis_val_percent],axis=1)",CLUSTER_5,CLUSTER_9
loan_data_dummies,"pandas.concat(loan_data_dummies,axis=1)",CLUSTER_5,CLUSTER_9
dataframe,"pandas.concat([dataframe,loan_data_dummies],axis=1)",CLUSTER_5,CLUSTER_9
df,"pandas.concat([df[discrete_variable_name],good_bad_variable_df],axis=1)",CLUSTER_5,CLUSTER_9
df,"pandas.concat([df.groupby(df.columns.values[0],as_index=False)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs,"pandas.concat([loan_data_targets_test_temp,pd.DataFrame(yhat_test_proba)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_rf,"pandas.concat([loan_data_target_test,yhat_test_rf.iloc[:,1]],axis=1)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_rf_2,"pandas.concat([loan_data_target_test_2,yhat_test_rf_2.iloc[:,1]],axis=1)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_rf_imb,"pandas.concat([loan_data_target_test,yhat_test_rf_imb.iloc[:,1]],axis=1)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_gbl,"pandas.concat([loan_data_target_test,yhat_test_gbl.iloc[:,1]],axis=1)",CLUSTER_5,CLUSTER_9
df_scorecard,"pandas.concat([summary_table,df_ref_cat])",CLUSTER_5,CLUSTER_9
df_cutoff,pandas.concat([pd.DataFrame(thresholds),CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor'],"pandas.cut(df_inputs_prepr['loan_amnt'],30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor'],"pandas.cut(df_inputs_prepr['annual_inc'],100)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_temp['annual_inc_factor'],"pandas.cut(df_inputs_prepr_temp['annual_inc'],20)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor_f'],"pandas.cut(df_inputs_prepr['int_rate_factor'],10)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor_f'],"pandas.cut(df_inputs_prepr['revol_util_factor'],30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc_t'],"pandas.cut(df_inputs_prepr['open_acc'],30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['zip_code_f'],"pandas.cut(df_inputs_prepr['zip_code_t'],5)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal_t'],"pandas.cut(df_inputs_prepr['tot_cur_bal'],300)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor'],"pandas.cut(df_inputs_prepr_t['loan_amnt'],30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor'],"pandas.cut(df_inputs_prepr_t['annual_inc'],100)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor_f'],"pandas.cut(df_inputs_prepr_t['int_rate_factor'],10)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor_f'],"pandas.cut(df_inputs_prepr_t['revol_util_factor'],30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc_t'],"pandas.cut(df_inputs_prepr_t['open_acc'],30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['zip_code_f'],"pandas.cut(df_inputs_prepr_t['zip_code_t'],5)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal_t'],"pandas.cut(df_inputs_prepr_t['tot_cur_bal'],300)",CLUSTER_5,CLUSTER_9
df_backup,"pandas.read_csv('/Users/fayadabbasi/Desktop/Python_Scripts/Galvanize/DSI/CreditRisk/merged.csv',skiprows=1,low_memory=False)",CLUSTER_5,CLUSTER_9
df[items],pandas.to_numeric(df[items]),CLUSTER_5,CLUSTER_9
dataframe[column+'_int'],pandas.to_numeric(dataframe[column+'_int']),CLUSTER_5,CLUSTER_9
dataframe[column+'_int'],pandas.to_numeric(dataframe[column+'_int']),CLUSTER_5,CLUSTER_9
dataframe[column+'_factor'],pandas.to_numeric(dataframe[column+'_factor']),CLUSTER_5,CLUSTER_9
dataframe[column+'_t'],pandas.to_numeric(dataframe[column+'_t']),CLUSTER_5,CLUSTER_9
x,"numpy.array(df_WoE.iloc[:,0].apply(str)",CLUSTER_5,CLUSTER_9
dataframe['good_bad'],"numpy.where(dataframe['loan_status'].isin(['ChargedOff','Default','Doesnotmeetthecreditpolicy.Status:FullyPaid','Doesnotmeetthecreditpolicy.Status:ChargedOff','Late(31-120days)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:1'],numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(1817),CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:2'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(1817,7084)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:3'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(7084,11034)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:4'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(11034,28150)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:5'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(28150,28160)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:6'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(28160,32100)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:7'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(32100,36050)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:8'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(36050,int(df_inputs_prepr['loan_amnt'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:1'],numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(7000),CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:2'],"numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(7000,42000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:3'],"numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(42000,70000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:4'],"numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(70000,100000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:5'],"numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(100000,112000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:6'],"numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(112000,126000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:7'],"numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(126000,int(df_inputs_prepr['annual_inc'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:1'],numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(8),CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:2'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(8,11)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:3'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(11,13)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:4'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(13,15)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:5'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(15,17)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:6'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(17,19)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:7'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(19,21)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:8'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(21,23)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:9'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(23,25)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:10'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(25,27)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:11'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(27,int(df_inputs_prepr['int_rate_factor'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:1'],numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(12),CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:2'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(12,24)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:3'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(24,36)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:4'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(36,48)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:5'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(48,60)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:6'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(60,72)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:7'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(72,84)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:8'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(84,96)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:9'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(96,int(df_inputs_prepr['revol_util_factor'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:1'],numpy.where((df_inputs_prepr['open_acc_t'].isin(range(3),CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:2'],"numpy.where((df_inputs_prepr['open_acc_t'].isin(range(3,6)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:3'],"numpy.where((df_inputs_prepr['open_acc_t'].isin(range(6,10)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:4'],"numpy.where((df_inputs_prepr['open_acc_t'].isin(range(10,15)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:5'],"numpy.where((df_inputs_prepr['open_acc_t'].isin(range(15,20)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:6'],"numpy.where((df_inputs_prepr['open_acc_t'].isin(range(20,30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:9'],"numpy.where((df_inputs_prepr['open_acc_t'].isin(range(30,int(df_inputs_prepr['open_acc'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr['zip_code:1'],numpy.where((df_inputs_prepr['zip_code_f'].isin(range(200),CLUSTER_5,CLUSTER_9
df_inputs_prepr['zip_code:2'],"numpy.where((df_inputs_prepr['zip_code_f'].isin(range(200,400)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['zip_code:3'],"numpy.where((df_inputs_prepr['zip_code_f'].isin(range(400,600)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['zip_code:4'],"numpy.where((df_inputs_prepr['zip_code_f'].isin(range(600,800)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['zip_code:5'],"numpy.where((df_inputs_prepr['zip_code_f'].isin(range(800,int(df_inputs_prepr['zip_code_t'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:1'],numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(30000),CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:2'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(30000,70000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:3'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(70000,120000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:4'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(120000,180000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:5'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(180000,250000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:6'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(250000,350000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:7'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(350000,500000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:8'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(500000,750000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:9'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(750000,int(df_inputs_prepr['tot_cur_bal'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:1'],numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(1817),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:2'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(1817,7084)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:3'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(7084,11034)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:4'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(11034,28150)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:5'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(28150,28160)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:6'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(28160,32100)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:7'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(32100,36050)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:8'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(36050,int(df_inputs_prepr_t['loan_amnt'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:1'],numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(7000),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:2'],"numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(7000,42000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:3'],"numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(42000,70000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:4'],"numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(70000,100000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:5'],"numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(100000,112000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:6'],"numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(112000,126000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:7'],"numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(126000,int(df_inputs_prepr_t['annual_inc'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:1'],numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(8),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:2'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(8,11)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:3'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(11,13)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:4'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(13,15)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:5'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(15,17)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:6'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(17,19)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:7'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(19,21)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:8'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(21,23)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:9'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(23,25)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:10'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(25,27)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:11'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(27,int(df_inputs_prepr_t['int_rate_factor'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:1'],numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(12),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:2'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(12,24)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:3'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(24,36)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:4'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(36,48)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:5'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(48,60)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:6'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(60,72)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:7'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(72,84)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:8'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(84,96)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:9'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(96,int(df_inputs_prepr_t['revol_util_factor'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:1'],numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(3),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:2'],"numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(3,6)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:3'],"numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(6,10)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:4'],"numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(10,15)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:5'],"numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(15,20)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:6'],"numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(20,30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:9'],"numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(30,int(df_inputs_prepr_t['open_acc'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['zip_code:1'],numpy.where((df_inputs_prepr_t['zip_code_f'].isin(range(200),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['zip_code:2'],"numpy.where((df_inputs_prepr_t['zip_code_f'].isin(range(200,400)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['zip_code:3'],"numpy.where((df_inputs_prepr_t['zip_code_f'].isin(range(400,600)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['zip_code:4'],"numpy.where((df_inputs_prepr_t['zip_code_f'].isin(range(600,800)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['zip_code:5'],"numpy.where((df_inputs_prepr_t['zip_code_f'].isin(range(800,int(df_inputs_prepr_t['zip_code_t'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:1'],numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(30000),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:2'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(30000,70000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:3'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(70000,120000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:4'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(120000,180000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:5'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(180000,250000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:6'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(250000,350000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:7'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(350000,500000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:8'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(500000,750000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:9'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(750000,int(df_inputs_prepr_t['tot_cur_bal'].max()",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs['yhat_test'],"numpy.where(df_actual_predicted_probs['yhat_test_proba']>tr,1,0)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_rf['yhat_test_proba_rf'],"numpy.where(df_actual_predicted_probs_rf['yhat_test_rf']>tr,1,0)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_rf_2['yhat_test_proba_rf_2'],"numpy.where(df_actual_predicted_probs_rf_2['yhat_test_rf_2']>tr,1,0)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_rf_imb['yhat_test_proba_rf_imb'],"numpy.where(df_actual_predicted_probs_rf_imb['yhat_test_rf_imb']>tr,1,0)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_gbl['yhat_test_proba_gbl'],"numpy.where(df_actual_predicted_probs_gbl['yhat_test_gbl']>tr,1,0)",CLUSTER_5,CLUSTER_9
summary_table['Coefficients'],numpy.transpose(reg.coef_),CLUSTER_5,CLUSTER_9
summary_table['Coefficients'],numpy.transpose(reg.coef_),CLUSTER_5,CLUSTER_9
yhat_proba_from_score,numpy.exp(sum_coef_from_score),CLUSTER_5,CLUSTER_9
df['WoE'],numpy.log(df['prop_n_good']/df['prop_n_bad']),CLUSTER_5,CLUSTER_9
reg,"sklearn.linear_model.LogisticRegression(class_weight={0:3,1:1})",CLUSTER_5,CLUSTER_9
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_actual_predicted_probs['loan_data_targets_test'],df_actual_predicted_probs['yhat_test_proba'])",CLUSTER_5,CLUSTER_9
"fpr_rf,tpr_rf,thresholds_rf","sklearn.metrics.roc_curve(df_actual_predicted_probs_rf['loan_data_targets_test'],df_actual_predicted_probs_rf['yhat_test_rf'])",CLUSTER_5,CLUSTER_9
"fpr_rf_imb,tpr_rf_imb,thresholds_rf_imb","sklearn.metrics.roc_curve(df_actual_predicted_probs_rf_imb['loan_data_targets_test'],df_actual_predicted_probs_rf_imb['yhat_test_rf_imb'])",CLUSTER_5,CLUSTER_9
"fpr_gbl,tpr_gbl,thresholds_gbl","sklearn.metrics.roc_curve(df_actual_predicted_probs_gbl['loan_data_targets_test'],df_actual_predicted_probs_gbl['yhat_test_gbl'])",CLUSTER_5,CLUSTER_9
auroc,"sklearn.metrics.roc_auc_score(df_actual_predicted_probs['loan_data_targets_test'],df_actual_predicted_probs['yhat_test_proba'])",CLUSTER_5,CLUSTER_9
auroc_rf,"sklearn.metrics.roc_auc_score(df_actual_predicted_probs_rf['loan_data_targets_test'],df_actual_predicted_probs_rf['yhat_test_rf'])",CLUSTER_5,CLUSTER_9
auroc_rf_imb,"sklearn.metrics.roc_auc_score(df_actual_predicted_probs_rf_imb['loan_data_targets_test'],df_actual_predicted_probs_rf_imb['yhat_test_rf_imb'])",CLUSTER_5,CLUSTER_9
auroc_gbl,"sklearn.metrics.roc_auc_score(df_actual_predicted_probs_gbl['loan_data_targets_test'],df_actual_predicted_probs_gbl['yhat_test_gbl'])",CLUSTER_5,CLUSTER_9
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=None,random_state=42,n_jobs=-1)",CLUSTER_5,CLUSTER_9
rf2,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=None,random_state=42,n_jobs=-1)",CLUSTER_5,CLUSTER_9
rf_imb,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=None,class_weight={0:10,1:1},random_state=42,n_jobs=-1)",CLUSTER_5,CLUSTER_9
gbl,"sklearn.ensemble.GradientBoostingClassifier(loss='deviance',learning_rate=0.001,n_estimators=300,subsample=1,min_samples_leaf=1,max_depth=2,random_state=42)",CLUSTER_5,CLUSTER_9
train_indicies,numpy.arange(Xd.shape[0]),CLUSTER_2,CLUSTER_7
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_2,CLUSTER_7
correct+,numpy.sum(corr),CLUSTER_2,CLUSTER_7
total_loss,numpy.sum(losses),CLUSTER_2,CLUSTER_7
u,"numpy.zeros((M,T)",CLUSTER_1,CLUSTER_10
W,"numpy.zeros((M,M)",CLUSTER_1,CLUSTER_10
S,"numpy.zeros((M,T)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,1000)",CLUSTER_1,CLUSTER_10
t,"numpy.linspace(t_start,t_end,T)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(A,B,M)",CLUSTER_1,CLUSTER_10
t,"numpy.arange(2013,2018,0.2)",CLUSTER_1,CLUSTER_3
t,"numpy.arange(2013,2018,0.2)",CLUSTER_1,CLUSTER_3
purchase_data,pandas.read_csv(file_to_load),CLUSTER_8,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_2,CLUSTER_10
df,pandas.read_csv('fe_workshop/dataset/LendingClub50000.csv'),CLUSTER_5,CLUSTER_1
ohe,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
recipes,json.load(f),CLUSTER_0,CLUSTER_5
tc_matrix,"pandas.DataFrame(data=numpy.zeros((model.num_topics,len(targets)",CLUSTER_0,CLUSTER_5
target_sums,"pandas.DataFrame(data=numpy.zeros((1,len(targets)",CLUSTER_0,CLUSTER_5
mean_coher,numpy.mean([c[1]forcincoher]),CLUSTER_0,CLUSTER_5
mean_coher2,numpy.mean([c[1]forcincoher2]),CLUSTER_0,CLUSTER_5
c,collections.Counter(np.hstack((words.values(),CLUSTER_0,CLUSTER_5
tokens,"re.findall('""(\d+)",CLUSTER_0,CLUSTER_5
rf_model,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_0,CLUSTER_5
tc_matrix,"pandas.DataFrame(data=np.zeros((model.num_topics,len(targets)",CLUSTER_0,CLUSTER_5
target_sums,"pandas.DataFrame(data=np.zeros((1,len(targets)",CLUSTER_0,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(2,5)",CLUSTER_2,CLUSTER_7
df[k],"pandas.DataFrame(params[k],columns=VARS)",CLUSTER_7,CLUSTER_5
df_all,pandas.DataFrame([]),CLUSTER_7,CLUSTER_5
df_all,"pandas.concat([df[('sig','em')",CLUSTER_7,CLUSTER_5
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=7)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
matrix_2l_4f_l2reg_train,"sklearn.metrics.confusion_matrix(Y_train,Y_predict_2l_4f_l2reg_train.round()",CLUSTER_7,CLUSTER_5
matrix_2l_4f_l2reg_test,"sklearn.metrics.confusion_matrix(Y_test,Y_predict_2l_4f_l2reg_test.round()",CLUSTER_7,CLUSTER_5
matrix_2l_4f_l2reg,"sklearn.metrics.confusion_matrix(Y,Y_predict_2l_4f_l2reg.round()",CLUSTER_7,CLUSTER_5
h2_sig,"matplotlib.pyplot.hist(df_all[df_all['label']==1][""model_2l_4f_l2reg_predicted""],
bins=np.linspace(0,1.0,20)",CLUSTER_7,CLUSTER_5
h2_bkg,"matplotlib.pyplot.hist(df_all[df_all['label']==0][""model_2l_4f_l2reg_predicted""],
bins=np.linspace(0,1.0,20)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,1,i+1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,2,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,2,2)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,1,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,3,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,3,2)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,3,3)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,3,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,3,2)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,3,3)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,1,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,1,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,2,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,2,2)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(4,4)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(15,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(3,1,figsize=(12,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,6)",CLUSTER_7,CLUSTER_5
"fpr_2l_4f_l2reg_train,tpr_2l_4f_l2reg_train,thresholds_2l_4f_l2reg_train","sklearn.metrics.roc_curve(Y_train,Y_predict_2l_4f_l2reg_train)",CLUSTER_7,CLUSTER_5
"fpr_2l_4f_l2reg_test,tpr_2l_4f_l2reg_test,thresholds_2l_4f_l2reg_test","sklearn.metrics.roc_curve(Y_test,Y_predict_2l_4f_l2reg_test)",CLUSTER_7,CLUSTER_5
"fpr_2l_4f_l2reg,tpr_2l_4f_l2reg,thresholds_2l_4f_l2reg","sklearn.metrics.roc_curve(Y,Y_predict_2l_4f_l2reg)",CLUSTER_7,CLUSTER_5
roc_auc_2l_4f_l2reg_train,"sklearn.metrics.auc(fpr_2l_4f_l2reg_train,tpr_2l_4f_l2reg_train)",CLUSTER_7,CLUSTER_5
roc_auc_2l_4f_l2reg_test,"sklearn.metrics.auc(fpr_2l_4f_l2reg_test,tpr_2l_4f_l2reg_test)",CLUSTER_7,CLUSTER_5
roc_auc_2l_4f_l2reg,"sklearn.metrics.auc(fpr_2l_4f_l2reg,tpr_2l_4f_l2reg)",CLUSTER_7,CLUSTER_5
x,"numpy.expand_dims(x,axis=0)",CLUSTER_4,CLUSTER_11
X,"numpy.load(""./XY_train/X.npy"")",CLUSTER_4,CLUSTER_11
Y,"numpy.load(""./XY_train/Y.npy"")",CLUSTER_4,CLUSTER_11
X_dev,"numpy.load(""./XY_dev/X_dev.npy"")",CLUSTER_4,CLUSTER_11
Y_dev,"numpy.load(""./XY_dev/Y_dev.npy"")",CLUSTER_4,CLUSTER_11
arry,"numpy.arange(0,50,5,dtype=""int32"")",CLUSTER_3,CLUSTER_6
array_list,numpy.array(liste),CLUSTER_3,CLUSTER_6
a,"numpy.array([2,4,5,12,54,9,0,23,67,45])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,6,5,1,2,9])",CLUSTER_3,CLUSTER_6
b,"numpy.array([2,4,5,9,6,5])",CLUSTER_3,CLUSTER_6
sonuc,"numpy.concatenate([list_of_array[0],list_of_array[2],list_of_array[2],list_of_array[3]])",CLUSTER_3,CLUSTER_6
sonuc_2,"numpy.concatenate([list_of_array[0],list_of_array[2],list_of_array[2],list_of_array[3]])",CLUSTER_3,CLUSTER_6
nerede,numpy.argsort(array1),CLUSTER_3,CLUSTER_6
array2,numpy.sort(array1),CLUSTER_3,CLUSTER_6
a,numpy.sum(matrs>20),CLUSTER_3,CLUSTER_6
k,numpy.sum(matrs<30),CLUSTER_3,CLUSTER_6
e,numpy.sum(matrs==33),CLUSTER_3,CLUSTER_6
array,"numpy.split(a,[2,5,7])",CLUSTER_3,CLUSTER_6
sizevals,"numpy.array([round(s,1)",CLUSTER_4,CLUSTER_8
corrmats[visual_area],"numpy.array([v.valuesfork,vintuningcorrs.items()",CLUSTER_4,CLUSTER_8
corrmats[visual_area],"numpy.array([v.valuesfork,vincondcorrs.items()",CLUSTER_4,CLUSTER_8
mask,"numpy.zeros_like(corr_matrix,dtype=np.bool)",CLUSTER_4,CLUSTER_8
weights,numpy.ones_like(acorrs),CLUSTER_4,CLUSTER_8
scores,"numpy.hstack([c1,c2,c3])",CLUSTER_4,CLUSTER_8
groups,numpy.hstack([['V1'for_inrange(len(c1),CLUSTER_4,CLUSTER_8
scores,"numpy.hstack([c1,c2,c3])",CLUSTER_4,CLUSTER_8
groups,numpy.hstack([['V1'for_inrange(len(c1),CLUSTER_4,CLUSTER_8
setnames,numpy.unique(['_'.join(s.split('_'),CLUSTER_4,CLUSTER_8
setnames,numpy.unique([s.split('_'),CLUSTER_4,CLUSTER_8
t,"pandas.DataFrame([[1,2,3],[4,5,6],[7,8,9]])",CLUSTER_4,CLUSTER_8
sdf.loc[sdf.morphlevel,"=-1,'size']=pandas.Series(sizevals,index=control_ixs)",CLUSTER_4,CLUSTER_8
meanr,pandas.concat([pd.Series(estats.gdf.get_group(roi),CLUSTER_4,CLUSTER_8
tdf,pandas.concat([pd.DataFrame(estats.gdf.get_group(roi),CLUSTER_4,CLUSTER_8
df,"pandas.concat(dflist,axis=0)",CLUSTER_4,CLUSTER_8
summary,pandas.concat(dsummary),CLUSTER_4,CLUSTER_8
meanr,pandas.concat([pd.Series(estats.gdf.get_group(roi),CLUSTER_4,CLUSTER_8
self.inputs,collections.deque(inp),CLUSTER_10,CLUSTER_4
y,numpy.array(df['Type']),CLUSTER_7,CLUSTER_5
X,numpy.array(df),CLUSTER_7,CLUSTER_5
df,pandas.read_csv('seeds.csv'),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=10),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(knn,X,y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(knn,X,y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(clf,X,y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(clf,X,y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(clf,X,y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_5
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=k),CLUSTER_7,CLUSTER_5
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=23),CLUSTER_7,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
result,"pandas.concat([dfu,dfb,dfr],axis=1,sort=False)",CLUSTER_7,CLUSTER_3
Ratingsdata,"pandas.read_csv('Books-dataset/BX-Book-Ratings.csv',encoding='Latin-1',header=None)",CLUSTER_7,CLUSTER_3
Booksdata,"pandas.read_csv('Books-dataset/BX-Books1.csv',encoding='Latin-1',header=None)",CLUSTER_7,CLUSTER_3
usersdata,"pandas.read_csv('Books-dataset/BX-Users2.csv',encoding='Latin=1',header=None)",CLUSTER_7,CLUSTER_3
dfr['Book-Rating'],pandas.to_numeric(dfr['Book-Rating']),CLUSTER_7,CLUSTER_3
books1['Year-Of-Publication'],pandas.to_numeric(books1['Year-Of-Publication']),CLUSTER_7,CLUSTER_3
users1['Age'],pandas.to_numeric(users1['Age']),CLUSTER_7,CLUSTER_3
train_df,pandas.read_csv('_Data/train.csv'),CLUSTER_5,CLUSTER_5
test_df,pandas.read_csv('_Data/test.csv'),CLUSTER_5,CLUSTER_5
train_meta,"numpy.concatenate(train_meta,axis=0)",CLUSTER_5,CLUSTER_5
trainy_meta,"numpy.concatenate(trainy_meta,axis=0)",CLUSTER_5,CLUSTER_5
C,"numpy.logspace(0,2,20)",CLUSTER_5,CLUSTER_5
"x0,x1","numpy.meshgrid(
np.linspace(-1,1,500)",CLUSTER_5,CLUSTER_5
"x0,x1","numpy.meshgrid(
np.linspace(-1,1,500)",CLUSTER_5,CLUSTER_5
"fig,axs",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_5
"fig,axs",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
knn_cls,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_5
knn_cls,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_5,CLUSTER_5
knn_cls,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_5,CLUSTER_5
svc_cls,"sklearn.svm.SVC(kernel=""poly"")",CLUSTER_5,CLUSTER_5
svc_cls,"sklearn.svm.SVC(kernel='poly',C=2,coef0=80,degree=3,probability=True)",CLUSTER_5,CLUSTER_5
kfolds,"sklearn.model_selection.KFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_5,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(knn_cls,knn_grid,cv=5,scoring='accuracy')",CLUSTER_5,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(svc_cls,svc_grid,cv=5,scoring='accuracy',n_jobs=4)",CLUSTER_5,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(log_cls,hyperparameters,cv=kfolds)",CLUSTER_5,CLUSTER_5
log_cls,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_3
targets,"numpy.array(targets_list,ndmin=2)",CLUSTER_1,CLUSTER_3
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_3
test_w_i_h,"numpy.array([[0.1,0.4,-0.3],
[-0.2,0.5,0.2]])",CLUSTER_1,CLUSTER_3
test_w_h_o,"numpy.array([[0.3,-0.1]])",CLUSTER_1,CLUSTER_3
hidden_errors,"numpy.dot(self.weights_hidden_to_output.T,output_errors)",CLUSTER_1,CLUSTER_3
self.hidden_inputs,"numpy.dot(self.weights_input_to_hidden,inputs)",CLUSTER_1,CLUSTER_3
self.final_inputs,"numpy.dot(self.weights_hidden_to_output,self.hidden_outputs)",CLUSTER_1,CLUSTER_3
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_1,CLUSTER_3
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_1,CLUSTER_3
rides,pandas.read_csv(data_path),CLUSTER_1,CLUSTER_3
dates,pandas.to_datetime(rides.ix[test_data.index]['dteday']),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_3
total_annual,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
us_holidays_df,"pandas.DataFrame([],columns=['ds','holiday'])",CLUSTER_7,CLUSTER_8
custom_holidays_df,"pandas.DataFrame([],columns=['ds','holiday'])",CLUSTER_7,CLUSTER_8
total_monthly_reset_index,pandas.DataFrame(total_monthly),CLUSTER_7,CLUSTER_8
us_holidays_df,"pandas.concat([us_holidays_df,custom_holidays_df],ignore_index=True)",CLUSTER_7,CLUSTER_8
df_sales_avg_holidays,"pandas.merge(df_sales_avg_holidays,us_holidays_df,on='ds')",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('../data/net_sales_total.csv'),CLUSTER_7,CLUSTER_8
weather_df,pandas.read_csv('../data/dark_sky_api.csv'),CLUSTER_7,CLUSTER_8
df['date'],pandas.to_datetime(df['date']),CLUSTER_7,CLUSTER_8
weather_df['time'],pandas.to_datetime(weather_df['time']),CLUSTER_7,CLUSTER_8
us_holidays_df['ds'],pandas.to_datetime(us_holidays_df['ds']),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(3,2,sharex=True)",CLUSTER_7,CLUSTER_8
ax,"seaborn.boxplot(data=y,orient=""h"")",CLUSTER_7,CLUSTER_8
ax,seaborn.boxplot(data=x),CLUSTER_7,CLUSTER_8
ax,seaborn.boxplot(data=z),CLUSTER_7,CLUSTER_8
ax,seaborn.boxplot(data=total_annual),CLUSTER_7,CLUSTER_8
"fordate,nameinsorted(holidays.US(years","numpy.arange(2015,2020+1)",CLUSTER_7,CLUSTER_8
ldates,numpy.array(ldates),CLUSTER_7,CLUSTER_8
lnames,numpy.array(lnames),CLUSTER_7,CLUSTER_8
ldates,numpy.array(ldates),CLUSTER_7,CLUSTER_8
lnames,numpy.array(lnames),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(ncols=6,nrows=2,figsize=(12,6)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(ncols=6,nrows=2,figsize=(12,6)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(ncols=4,nrows=2,figsize=(12,6)",CLUSTER_1,CLUSTER_10
X_train,numpy.zeros((len(X),CLUSTER_1,CLUSTER_10
X,numpy.concatenate((X),CLUSTER_1,CLUSTER_10
y,numpy.concatenate((y),CLUSTER_1,CLUSTER_10
X,numpy.sqrt(X),CLUSTER_1,CLUSTER_10
startprob,"numpy.array([0.5,0.3,0.2])",CLUSTER_1,CLUSTER_10
transmat,"numpy.array([[0.7,0.2,0.1],
[0.3,0.5,0.2],
[0.1,0.1,0.8]])",CLUSTER_1,CLUSTER_10
mus,"numpy.array([[0.0,0.0],
[9.0,10.0],
[11.0,-1.0]])",CLUSTER_1,CLUSTER_10
sigma,"numpy.transpose(sigma,[2,0,1])",CLUSTER_1,CLUSTER_10
sigma,"numpy.dstack([np.array([[1.0,0.9],[0.9,1.0]])",CLUSTER_1,CLUSTER_10
bdata,pandas.DataFrame(),CLUSTER_7,CLUSTER_5
X,"pandas.concat([x_train,x_test])",CLUSTER_7,CLUSTER_5
X,"pandas.concat([x_train,x_test])",CLUSTER_7,CLUSTER_5
Xn,pandas.get_dummies(X),CLUSTER_7,CLUSTER_5
Xn,pandas.get_dummies(X),CLUSTER_7,CLUSTER_5
train_data,"pandas.read_csv('../datasets/preprocessed/train.csv',sep=',')",CLUSTER_7,CLUSTER_5
test_data,"pandas.read_csv('../datasets/preprocessed/test.csv',sep=',')",CLUSTER_7,CLUSTER_5
epsilon,"sklearn.metrics.f1_score(y_test,pred,average='macro')",CLUSTER_7,CLUSTER_5
epsilon,"sklearn.metrics.f1_score(y_test,pred,average='macro')",CLUSTER_7,CLUSTER_5
epsilon,"sklearn.metrics.f1_score(y_test,pred,average='macro')",CLUSTER_7,CLUSTER_5
epsilon,"sklearn.metrics.f1_score(y_test,pred,average='macro')",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=10,scoring='f1_macro')",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=10,scoring='f1_macro')",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_7,CLUSTER_5
clf,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',min_samples_split=3,min_impurity_decrease=0.01)",CLUSTER_7,CLUSTER_5
clf,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',min_samples_split=clf.best_params_['min_samples_split'],min_impurity_decrease=clf.best_params_['min_impurity_decrease'])",CLUSTER_7,CLUSTER_5
clf,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',min_samples_split=clf.best_params_['min_samples_split'],min_impurity_decrease=clf.best_params_['min_impurity_decrease'])",CLUSTER_7,CLUSTER_5
clf,sklearn.model_selection.GridSearchCV(tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_7,CLUSTER_5
clf,sklearn.model_selection.GridSearchCV(tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_7,CLUSTER_5
x,numpy.arange(results.shape[0]),CLUSTER_7,CLUSTER_5
idx_between_quartiles,"numpy.logical_and(bad_wine_q1<X_train['alcohol'],X_train['alcohol']<good_wine_q3)",CLUSTER_7,CLUSTER_5
results,"pandas.DataFrame({'name':names,
'train_scores':train_scores,
'train_std':train_scores_std,
'test_scores':test_scores,
'test_std':test_scores_std,
'best_parameters':best_parameters,
'estimator':estimators},
columns=['name','train_scores','train_std',
'test_scores','test_std','best_parameters','estimator'])",CLUSTER_7,CLUSTER_5
test_df,pandas.DataFrame(X_test),CLUSTER_7,CLUSTER_5
results,"pandas.DataFrame({'name':names,
'train_scores':train_scores,
'train_std':train_scores_std,
'test_scores':test_scores,
'test_std':test_scores_std,
'best_parameters':best_parameters,
'estimator':estimators},
columns=['name','train_scores','train_std',
'test_scores','test_std','best_parameters','estimator'])",CLUSTER_7,CLUSTER_5
all_results,"pandas.concat([results,second_search])",CLUSTER_7,CLUSTER_5
wine,pandas.read_csv('Data/winequality-red.csv'),CLUSTER_7,CLUSTER_5
ax,"seaborn.countplot(data=wine,x='quality',palette='Greens_d')",CLUSTER_7,CLUSTER_5
ax,"seaborn.countplot(data=wine,x='good_wine',palette='Greens_d')",CLUSTER_7,CLUSTER_5
figure,"matplotlib.pyplot.figure(figsize=(10,6)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=0.7,random_state=42)",CLUSTER_7,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(model,
param_grid=param_grid,
n_jobs=-1,
cv=3,
refit=True,
verbose=1,
return_train_score=True)",CLUSTER_7,CLUSTER_5
grid_search_svm,"sklearn.model_selection.GridSearchCV(svm,
param_grid=param_grid,
scoring=make_scorer(accuracy_score)",CLUSTER_7,CLUSTER_5
grid_search_svm,"sklearn.model_selection.GridSearchCV(svm,
param_grid=param_grid,
scoring=make_scorer(accuracy_score)",CLUSTER_7,CLUSTER_5
cv_voting_clf,"sklearn.model_selection.GridSearchCV(voting_clf,
param_grid={},
scoring=make_scorer(accuracy_score)",CLUSTER_7,CLUSTER_5
model,"sklearn.svm.SVC(kernel='rbf',
probability=False,
cache_size=1024)",CLUSTER_7,CLUSTER_5
svm,"sklearn.svm.SVC(probability=False,
cache_size=2048)",CLUSTER_7,CLUSTER_5
svm,"sklearn.svm.SVC(probability=False,
cache_size=2048)",CLUSTER_7,CLUSTER_5
scoring,sklearn.metrics.make_scorer(accuracy_score),CLUSTER_7,CLUSTER_5
scoring,sklearn.metrics.make_scorer(accuracy_score),CLUSTER_7,CLUSTER_5
scoring,sklearn.metrics.make_scorer(accuracy_score),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline(steps=[
('scaler',scaler)",CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline(steps=[('scaler',scaler)",CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline(steps=[('scaler',scaler)",CLUSTER_7,CLUSTER_5
voting_clf,"sklearn.ensemble.VotingClassifier(clfs,voting='hard',n_jobs=-1)",CLUSTER_7,CLUSTER_5
size,numpy.array([len(sample_binomial_1),CLUSTER_12,CLUSTER_9
sd,numpy.array([sample_binomial_1.std(),CLUSTER_12,CLUSTER_9
size_normal,numpy.array([len(sample_normal_1),CLUSTER_12,CLUSTER_9
sd_normal,numpy.array([sample_normal_1.std(),CLUSTER_12,CLUSTER_9
df_2016,pandas.DataFrame(filtered_df[filtered_df['Year']==2016]),CLUSTER_11,CLUSTER_3
df_2017,pandas.DataFrame(filtered_df[filtered_df['Year']==2017]),CLUSTER_11,CLUSTER_3
df_2018,pandas.DataFrame(filtered_df[filtered_df['Year']==2018]),CLUSTER_11,CLUSTER_3
df_2019,pandas.DataFrame(filtered_df[filtered_df['Year']==2019]),CLUSTER_11,CLUSTER_3
df_merged,"pandas.concat([filtered_2016_df,filtered_2017_df,filtered_2018_df])",CLUSTER_11,CLUSTER_3
df,"pandas.read_csv(""C:/Users/omiku/DCU/DataManagementLab/Assignment/US_Accidents_May19/US_Accidents_May19.csv"")",CLUSTER_11,CLUSTER_3
df['Start_Time'],pandas.to_datetime(df.Start_Time),CLUSTER_11,CLUSTER_3
X_train,"pandas.read_csv('../data/X_train_trans.csv',index_col=0)",CLUSTER_7,CLUSTER_8
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_7,CLUSTER_8
knn2,sklearn.neighbors.KNeighborsClassifier(n_neighbors=7),CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_train,y_pred)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_train,y_pred2)",CLUSTER_7,CLUSTER_8
scores1,"sklearn.model_selection.cross_val_score(knn,X_train,y_train,cv=5,scoring='accuracy')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(knn,X_train,y_train,cv=5,scoring='precision')",CLUSTER_7,CLUSTER_8
scores2,"sklearn.model_selection.cross_val_score(knn2,X_train,y_train,cv=5,scoring='precision')",CLUSTER_7,CLUSTER_8
complete,"pandas.concat(frames,sort=True)",CLUSTER_7,CLUSTER_3
count_reg,"pandas.concat(frames2,axis=1,join='inner',sort=True)",CLUSTER_7,CLUSTER_3
veh_count_reg,"pandas.merge_ordered(count_county,region,on='County',fill_method=None,how='outer')",CLUSTER_7,CLUSTER_3
veh_count_reg,"pandas.merge_ordered(count_county,region_csv,on='County',fill_method=None,how='outer')",CLUSTER_7,CLUSTER_3
vehicle_reg,pandas.read_csv('Vehicle__Snowmobile__and_Boat_Registrations.csv'),CLUSTER_7,CLUSTER_3
charge_hub,pandas.read_csv('Electric_Vehicle_Charging_Stations_in_New_York.csv'),CLUSTER_7,CLUSTER_3
region_csv,pandas.read_csv('county_to_region1.csv'),CLUSTER_7,CLUSTER_3
region,pandas.read_excel(r'/Users/ceciliapershyn/CIS_512_Term_Project/county_to_region.xlsx'),CLUSTER_7,CLUSTER_3
ax,"seaborn.countplot(x=""Zip"",data=veh)",CLUSTER_7,CLUSTER_3
region,"pandas.DataFrame(region,columns=['Region_Code','Region','County'])",CLUSTER_7,CLUSTER_3
review_lens,collections.Counter([len(x),CLUSTER_2,CLUSTER_7
charge_value,numpy.exp(charge_value),CLUSTER_7,CLUSTER_8
df.charges,numpy.log1p(df.charges),CLUSTER_7,CLUSTER_8
model_table,"pandas.DataFrame(y_pred,y_test)",CLUSTER_7,CLUSTER_8
other_model,"pandas.DataFrame(r_score,model_str)",CLUSTER_7,CLUSTER_8
df['age_category'],"pandas.cut(df[""age""],cut_points,labels=labels)",CLUSTER_7,CLUSTER_8
"df[""bmi_cat""]","pandas.cut(df['bmi'],cut_points,labels=label_names)",CLUSTER_7,CLUSTER_8
df_smoker,"pandas.get_dummies(df_smoker,drop_first=True)",CLUSTER_7,CLUSTER_8
df_non_smoker,"pandas.get_dummies(df_non_smoker,drop_first=True)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('insurance.csv'),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_8
"f,(ax,ax2)","matplotlib.pyplot.subplots(2,1,figsize=(8,10)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_8
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,figsize=(8,8)",CLUSTER_7,CLUSTER_8
res,"scipy.stats.probplot(data[input],plot=ax3)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_7,CLUSTER_8
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
mcdon,"pandas.read_csv('mcdonalds.csv',index_col='Date',parse_dates=True)",CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_1,CLUSTER_3
bottom10mortality,pandas.DataFrame(data=definition),CLUSTER_8,CLUSTER_3
citypopulation,pandas.DataFrame(data=definition),CLUSTER_8,CLUSTER_3
results,"pandas.DataFrame(columns=['SSID','R-squared','MAPE','MdAPE','Row_Count','JPID_Count'])",CLUSTER_4,CLUSTER_5
ssid_df,"pandas.concat([ssid_df,Day_dummies],axis=1)",CLUSTER_4,CLUSTER_5
ssid_df,"pandas.concat([ssid_df,HF_dummies],axis=1)",CLUSTER_4,CLUSTER_5
results,"pandas.concat([results,temp],axis=0)",CLUSTER_4,CLUSTER_5
res,"pandas.concat([blank,temp],axis=0)",CLUSTER_4,CLUSTER_5
Day_dummies,"pandas.get_dummies(ssid_df.Day,prefix='Day',drop_first=True)",CLUSTER_4,CLUSTER_5
HF_dummies,"pandas.get_dummies(ssid_df.HourFrame,prefix='HF',drop_first=True)",CLUSTER_4,CLUSTER_5
stop_times,"pandas.merge(stop_times,stops,on='stop_id',how='inner')",CLUSTER_4,CLUSTER_5
ssid_df,"pandas.merge(left=ssid_df,right=JPIDL,how='left',left_on='JourneyPatternID',right_on='JourneyPatternID')",CLUSTER_4,CLUSTER_5
calendar,pandas.read_csv('./googletransitdbfeedp20121129-1547/calendar.txt'),CLUSTER_4,CLUSTER_5
routes,pandas.read_csv('./googletransitdbfeedp20121129-1547/routes.txt'),CLUSTER_4,CLUSTER_5
stops,pandas.read_csv('./googletransitdbfeedp20121129-1547/stops.txt'),CLUSTER_4,CLUSTER_5
trips,pandas.read_csv('./googletransitdbfeedp20121129-1547/trips.txt'),CLUSTER_4,CLUSTER_5
stop_times,pandas.read_csv('./googletransitdbfeedp20121129-1547/stop_times.txt'),CLUSTER_4,CLUSTER_5
JPIDL,pandas.read_csv('JPID_Length.csv'),CLUSTER_4,CLUSTER_5
allSSID,pandas.read_csv('allSSID.csv'),CLUSTER_4,CLUSTER_5
blank,pandas.read_csv('./Route_XXXX_travel_time_csvs/Blank_Route_travel_time.csv'),CLUSTER_4,CLUSTER_5
temp,pandas.read_csv(fn),CLUSTER_4,CLUSTER_5
trip_stops['pass_stop_id'],numpy.array(target_1),CLUSTER_4,CLUSTER_5
ssid_df['SchoolHoliday'],"numpy.where(ssid_df['TimeFrame'].isin(['2013-01-01','2013-01-02','2013-01-03','2013-01-04','2013-01-05','2013-01-06'])",CLUSTER_4,CLUSTER_5
gbr_mae,"sklearn.metrics.mean_absolute_error(y,gbr_pred)",CLUSTER_4,CLUSTER_5
gbr_mdae,"sklearn.metrics.median_absolute_error(y,gbr_pred)",CLUSTER_4,CLUSTER_5
gbr_rsq,"sklearn.metrics.r2_score(y,gbr_pred)",CLUSTER_4,CLUSTER_5
gbr,sklearn.svm.SVR(),CLUSTER_4,CLUSTER_5
pad_sources_batch,"numpy.array(pad_sentence_batch(sources_batch,source_pad_int)",CLUSTER_2,CLUSTER_7
pad_targets_batch,"numpy.array(pad_sentence_batch(targets_batch,target_pad_int)",CLUSTER_2,CLUSTER_7
target,"numpy.pad(
target,
[(0,0)",CLUSTER_2,CLUSTER_7
logits,"numpy.pad(
logits,
[(0,0)",CLUSTER_2,CLUSTER_7
conf_matr_df_train,"pandas.DataFrame(confusion_matrix(y_train,predict(y_train_pred,tr_thresholds,train_fpr,train_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_test,"pandas.DataFrame(confusion_matrix(y_test,predict(y_test_pred,tr_thresholds,test_fpr,test_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_train_1,"pandas.DataFrame(confusion_matrix(y_train,predict(y_train_pred,tr_thresholds,train_fpr,train_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_test_1,"pandas.DataFrame(confusion_matrix(y_test,predict(y_test_pred,tr_thresholds,test_fpr,test_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_train_2,"pandas.DataFrame(confusion_matrix(y_train,predict(y_train_pred,tr_thresholds,train_fpr,train_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_test_2,"pandas.DataFrame(confusion_matrix(y_test,predict(y_test_pred,tr_thresholds,test_fpr,test_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_train_3,"pandas.DataFrame(confusion_matrix(y_train,predict(y_train_pred,tr_thresholds,train_fpr,train_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_test_3,"pandas.DataFrame(confusion_matrix(y_test,predict(y_test_pred,tr_thresholds,test_fpr,test_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_train_4,"pandas.DataFrame(confusion_matrix(y_train,predict(y_train_pred,tr_thresholds,train_fpr,train_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_test_4,"pandas.DataFrame(confusion_matrix(y_test,predict(y_test_pred,tr_thresholds,test_fpr,test_fpr)",CLUSTER_0,CLUSTER_8
X_train,"pandas.merge(X_train,price_data,on='id',how='left')",CLUSTER_0,CLUSTER_8
X_test,"pandas.merge(X_test,price_data,on='id',how='left')",CLUSTER_0,CLUSTER_8
X_cv,"pandas.merge(X_cv,price_data,on='id',how='left')",CLUSTER_0,CLUSTER_8
project_data,"pandas.read_csv('train_data.csv',nrows=50000)",CLUSTER_0,CLUSTER_8
resource_data,pandas.read_csv('resources.csv'),CLUSTER_0,CLUSTER_8
project_data['Date'],pandas.to_datetime(project_data['project_submitted_datetime']),CLUSTER_0,CLUSTER_8
embedding,numpy.array([float(val),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
"train_fpr,train_tpr,tr_thresholds","sklearn.metrics.roc_curve(y_train,y_train_pred)",CLUSTER_0,CLUSTER_8
"test_fpr,test_tpr,te_thresholds","sklearn.metrics.roc_curve(y_test,y_test_pred)",CLUSTER_0,CLUSTER_8
"train_fpr,train_tpr,tr_thresholds","sklearn.metrics.roc_curve(y_train,y_train_pred)",CLUSTER_0,CLUSTER_8
"test_fpr,test_tpr,te_thresholds","sklearn.metrics.roc_curve(y_test,y_test_pred)",CLUSTER_0,CLUSTER_8
"train_fpr,train_tpr,tr_thresholds","sklearn.metrics.roc_curve(y_train,y_train_pred)",CLUSTER_0,CLUSTER_8
"test_fpr,test_tpr,te_thresholds","sklearn.metrics.roc_curve(y_test,y_test_pred)",CLUSTER_0,CLUSTER_8
"train_fpr,train_tpr,tr_thresholds","sklearn.metrics.roc_curve(y_train,y_train_pred)",CLUSTER_0,CLUSTER_8
"test_fpr,test_tpr,te_thresholds","sklearn.metrics.roc_curve(y_test,y_test_pred)",CLUSTER_0,CLUSTER_8
"train_fpr,train_tpr,tr_thresholds","sklearn.metrics.roc_curve(y_train,y_train_pred)",CLUSTER_0,CLUSTER_8
"test_fpr,test_tpr,te_thresholds","sklearn.metrics.roc_curve(y_test,y_test_pred)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""won't"",""willnot"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""can\'t"",""cannot"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""n\'t"",""not"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'re"",""are"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'s"",""is"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'d"",""would"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'ll"",""will"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'t"",""not"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'ve"",""have"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'m"",""am"",phrase)",CLUSTER_0,CLUSTER_8
sent,"re.sub('[^A-Za-z0-9]+','',sent)",CLUSTER_0,CLUSTER_8
sent,"re.sub('[^A-Za-z0-9]+','',sent)",CLUSTER_0,CLUSTER_8
sent,"re.sub('[^A-Za-z0-9]+','',sent)",CLUSTER_0,CLUSTER_8
sent,"re.sub('[^A-Za-z0-9]+','',sent)",CLUSTER_0,CLUSTER_8
title,"re.sub('[^A-Za-z0-9]+','',title)",CLUSTER_0,CLUSTER_8
title,"re.sub('[^A-Za-z0-9]+','',title)",CLUSTER_0,CLUSTER_8
title,"re.sub('[^A-Za-z0-9]+','',title)",CLUSTER_0,CLUSTER_8
my_counter,collections.Counter(),CLUSTER_0,CLUSTER_8
my_counter,collections.Counter(),CLUSTER_0,CLUSTER_8
my_counter,collections.Counter(),CLUSTER_0,CLUSTER_8
my_counter,collections.Counter(),CLUSTER_0,CLUSTER_8
my_counter,collections.Counter(),CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(project_data,project_data['project_is_approved'],test_size=0.33,stratify=project_data['project_is_approved'])",CLUSTER_0,CLUSTER_8
"X_train,X_cv,y_train,y_cv","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.33,stratify=y_train)",CLUSTER_0,CLUSTER_8
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_0,CLUSTER_8
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_0,CLUSTER_8
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_0,CLUSTER_8
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_0,CLUSTER_8
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_0,CLUSTER_8
X_tr,"scipy.sparse.hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,project_grade_categories_one_hot_train,teacher_prefix_categories_one_hot_train,price_train,quantity_train,prev_projects_train,title_word_count_train,essay_word_count_train,title_bow_train,text_bow_train)",CLUSTER_0,CLUSTER_8
X_te,"scipy.sparse.hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,project_grade_categories_one_hot_test,teacher_prefix_categories_one_hot_test,price_test,quantity_test,prev_projects_test,title_word_count_test,essay_word_count_test,title_bow_test,text_bow_test)",CLUSTER_0,CLUSTER_8
X_cr,"scipy.sparse.hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,project_grade_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,price_cv,quantity_cv,prev_projects_cv,title_word_count_cv,essay_word_count_cv,title_bow_cv,text_bow_cv)",CLUSTER_0,CLUSTER_8
X_tr,"scipy.sparse.hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,project_grade_categories_one_hot_train,teacher_prefix_categories_one_hot_train,price_train,quantity_train,prev_projects_train,title_word_count_train,essay_word_count_train,text_tfidf_train,title_tfidf_train)",CLUSTER_0,CLUSTER_8
X_te,"scipy.sparse.hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,project_grade_categories_one_hot_test,teacher_prefix_categories_one_hot_test,price_test,quantity_test,prev_projects_test,title_word_count_test,essay_word_count_test,text_tfidf_test,title_tfidf_test)",CLUSTER_0,CLUSTER_8
X_cr,"scipy.sparse.hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,project_grade_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,price_cv,quantity_cv,prev_projects_cv,title_word_count_cv,essay_word_count_cv,text_tfidf_cv,title_tfidf_cv)",CLUSTER_0,CLUSTER_8
X_tr,"scipy.sparse.hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,project_grade_categories_one_hot_train,teacher_prefix_categories_one_hot_train,price_train,quantity_train,prev_projects_train,title_word_count_train,essay_word_count_train,avg_w2v_vectors_train,avg_w2v_vectors_titles_train)",CLUSTER_0,CLUSTER_8
X_te,"scipy.sparse.hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,project_grade_categories_one_hot_test,teacher_prefix_categories_one_hot_test,price_test,quantity_test,prev_projects_test,title_word_count_test,essay_word_count_test,avg_w2v_vectors_test,avg_w2v_vectors_titles_test)",CLUSTER_0,CLUSTER_8
X_cr,"scipy.sparse.hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,project_grade_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,price_cv,quantity_cv,prev_projects_cv,title_word_count_cv,essay_word_count_cv,avg_w2v_vectors_cv,avg_w2v_vectors_titles_cv)",CLUSTER_0,CLUSTER_8
X_tr,"scipy.sparse.hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,project_grade_categories_one_hot_train,teacher_prefix_categories_one_hot_train,price_train,quantity_train,prev_projects_train,title_word_count_train,essay_word_count_train,tfidf_w2v_vectors_train,tfidf_w2v_vectors_titles_train)",CLUSTER_0,CLUSTER_8
X_te,"scipy.sparse.hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,project_grade_categories_one_hot_test,teacher_prefix_categories_one_hot_test,price_test,quantity_test,prev_projects_test,title_word_count_test,essay_word_count_test,tfidf_w2v_vectors_test,tfidf_w2v_vectors_titles_test)",CLUSTER_0,CLUSTER_8
X_cr,"scipy.sparse.hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,project_grade_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,price_cv,quantity_cv,prev_projects_cv,title_word_count_cv,essay_word_count_cv,tfidf_w2v_vectors_cv,tfidf_w2v_vectors_titles_cv)",CLUSTER_0,CLUSTER_8
X_tr,"scipy.sparse.hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,project_grade_categories_one_hot_train,teacher_prefix_categories_one_hot_train,price_train,quantity_train,prev_projects_train,title_word_count_train,essay_word_count_train,text_tfidf_train,title_tfidf_train)",CLUSTER_0,CLUSTER_8
X_te,"scipy.sparse.hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,project_grade_categories_one_hot_test,teacher_prefix_categories_one_hot_test,price_test,quantity_test,prev_projects_test,title_word_count_test,essay_word_count_test,text_tfidf_test,title_tfidf_test)",CLUSTER_0,CLUSTER_8
X_cr,"scipy.sparse.hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,project_grade_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,price_cv,quantity_cv,prev_projects_cv,title_word_count_cv,essay_word_count_cv,text_tfidf_cv,title_tfidf_cv)",CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=best_k_1),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=best_k_2),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=best_k_3),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=best_k_4),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=best_k_5),CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(neigh,parameters,cv=5,scoring='roc_auc')",CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(neigh,parameters,cv=5,scoring='roc_auc')",CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(neigh,parameters,cv=5,scoring='roc_auc')",CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(neigh,parameters,cv=5,scoring='roc_auc')",CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(neigh,parameters,cv=5,scoring='roc_auc')",CLUSTER_0,CLUSTER_8
X_tr_new,"sklearn.feature_selection.SelectKBest(chi2,k=2000)",CLUSTER_0,CLUSTER_8
X_te_new,"sklearn.feature_selection.SelectKBest(chi2,k=2000)",CLUSTER_0,CLUSTER_8
X_cr_new,"sklearn.feature_selection.SelectKBest(chi2,k=2000)",CLUSTER_0,CLUSTER_8
data,pandas.read_csv('../3-Data_Cleaning/movies_half.csv'),CLUSTER_1,CLUSTER_3
features,"numpy.zeros(shape=(sample_count,2048)",CLUSTER_4,CLUSTER_0
labels,"numpy.zeros(shape=(sample_count,label_count)",CLUSTER_4,CLUSTER_0
pca128,sklearn.decomposition.PCA(n_components=128),CLUSTER_4,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
clf128,"sklearn.svm.SVC(kernel='linear',probability=True)",CLUSTER_4,CLUSTER_0
y_enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
d,"pandas.concat([pd.read_csv(f,index_col=0,header=0)",CLUSTER_5,CLUSTER_5
index,numpy.arange(len(names),CLUSTER_5,CLUSTER_5
pos_seq,numpy.asarray(pos_seq),CLUSTER_5,CLUSTER_5
neg_seq,numpy.asarray(neg_seq),CLUSTER_5,CLUSTER_5
X_train,numpy.asarray(list(map(lambdax:X_enc.transform(x.astype('str'),CLUSTER_5,CLUSTER_5
X_test,numpy.asarray(list(map(lambdax:X_enc.transform(x.astype('str'),CLUSTER_5,CLUSTER_5
X_train,"numpy.concatenate((neg_seq[neg_train,:-1],pos_seq[pos_train,:-1])",CLUSTER_5,CLUSTER_5
y_train,"numpy.concatenate((neg_seq[neg_train,-1],pos_seq[pos_train,-1])",CLUSTER_5,CLUSTER_5
X_test,"numpy.concatenate((neg_seq[neg_test,:-1],pos_seq[pos_test,:-1])",CLUSTER_5,CLUSTER_5
y_test,"numpy.concatenate((neg_seq[neg_test,-1],pos_seq[pos_test,-1])",CLUSTER_5,CLUSTER_5
"names,occ","numpy.unique(d['class'].values,return_counts=True)",CLUSTER_5,CLUSTER_5
kfold,"sklearn.model_selection.KFold(n_splits=5,random_state=7)",CLUSTER_5,CLUSTER_5
X_enc,sklearn.preprocessing.LabelBinarizer(),CLUSTER_5,CLUSTER_5
OceanFraction,"numpy.array([0.,0.1,0.2,0.5,0.8,0.9,1.0,1.0,0.95,0.9,0.9,
0.85,0.8,0.75,0.75,0.8,0.8,0.75,0.75,0.75,0.75,
0.7,0.65,0.6,0.6,0.55,0.5,0.5,0.45,0.4,0.3,
0.35,0.5,0.8,0.9,1.0])",CLUSTER_4,CLUSTER_11
OceanFraction,"numpy.array([0.,0.1,0.2,0.5,0.8,0.9,1.0,1.0,0.95,0.9,0.9,
0.85,0.8,0.75,0.75,0.8,0.8,0.75,0.75,0.75,0.75,
0.7,0.65,0.6,0.6,0.55,0.5,0.5,0.45,0.4,0.3,
0.35,0.5,0.8,0.9,1.0])",CLUSTER_4,CLUSTER_11
OceanFraction,"numpy.array([0.,0.1,0.2,0.5,0.8,0.9,1.0,1.0,0.95,0.9,0.9,
0.85,0.8,0.75,0.75,0.8,0.8,0.75,0.75,0.75,0.75,
0.7,0.65,0.6,0.6,0.55,0.5,0.5,0.45,0.4,0.3,
0.35,0.5,0.8,0.9,1.0])",CLUSTER_4,CLUSTER_11
OceanFraction,"numpy.array([0.,0.1,0.2,0.5,0.8,0.9,1.0,1.0,0.95,0.9,0.9,
0.85,0.8,0.75,0.75,0.8,0.8,0.75,0.75,0.75,0.75,
0.7,0.65,0.6,0.6,0.55,0.5,0.5,0.45,0.4,0.3,
0.35,0.5,0.8,0.9,1.0])",CLUSTER_4,CLUSTER_11
OceanFraction,"numpy.array([0.,0.1,0.2,0.5,0.8,0.9,1.0,1.0,0.95,0.9,0.9,
0.85,0.8,0.75,0.75,0.8,0.8,0.75,0.75,0.75,0.75,
0.7,0.65,0.6,0.6,0.55,0.5,0.5,0.45,0.4,0.3,
0.35,0.5,0.8,0.9,1.0])",CLUSTER_4,CLUSTER_11
OceanFraction,"numpy.array([0.,0.1,0.2,0.5,0.8,0.9,1.0,1.0,0.95,0.9,0.9,
0.85,0.8,0.75,0.75,0.8,0.8,0.75,0.75,0.75,0.75,
0.7,0.65,0.6,0.6,0.55,0.5,0.5,0.45,0.4,0.3,
0.35,0.5,0.8,0.9,1.0])",CLUSTER_4,CLUSTER_11
CellFaceK,numpy.zeros(ny+1),CLUSTER_4,CLUSTER_11
Insolation,numpy.zeros(ny),CLUSTER_4,CLUSTER_11
MeridionalFlux,numpy.zeros(ny+1),CLUSTER_4,CLUSTER_11
OceanFraction,numpy.zeros(36),CLUSTER_4,CLUSTER_11
OceanFraction,numpy.ones(36),CLUSTER_4,CLUSTER_11
OceanFraction,numpy.ones(36),CLUSTER_4,CLUSTER_11
OceanFraction,numpy.ones(36),CLUSTER_4,CLUSTER_11
GlobalTemp,numpy.sum(SurfaceTemp*CellArea),CLUSTER_4,CLUSTER_11
CellArea,numpy.cos(Latitude*DegRad),CLUSTER_4,CLUSTER_11
CellFaceLength,numpy.cos(LatitudeFaces*DegRad),CLUSTER_4,CLUSTER_11
Latitude,"numpy.linspace(-87.5,87.5,ny)",CLUSTER_4,CLUSTER_11
LatitudeFaces,"numpy.linspace(-90,90,ny+1)",CLUSTER_4,CLUSTER_11
SPTemp,"numpy.append(SPTemp,SurfaceTemp[0])",CLUSTER_4,CLUSTER_11
EqTemp,"numpy.append(EqTemp,np.max(SurfaceTemp)",CLUSTER_4,CLUSTER_11
NPTemp,"numpy.append(NPTemp,SurfaceTemp[-1])",CLUSTER_4,CLUSTER_11
GlobalTemp,"numpy.append(GlobalTemp,np.sum(SurfaceTemp*CellArea)",CLUSTER_4,CLUSTER_11
Time,"numpy.append(Time,i*dt/SecsYr)",CLUSTER_4,CLUSTER_11
SurfaceTemp,numpy.load(InitTemp),CLUSTER_4,CLUSTER_11
dataset,pandas.read_csv('Churn_Modelling.csv'),CLUSTER_5,CLUSTER_5
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
labelencoder_X_1,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
labelencoder_X_2,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[1]),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
grid,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=param_grid)",CLUSTER_5,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_5,CLUSTER_5
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_5,CLUSTER_5
origin_dum_df,"pandas.DataFrame(origin_dummies,columns=lb.classes_)",CLUSTER_5,CLUSTER_5
origin_series,pandas.Series(origin),CLUSTER_5,CLUSTER_5
data,"pandas.concat([data,cyl_dummies,yr_dummies,orig_dummies],axis=1)",CLUSTER_5,CLUSTER_5
cyl_dummies,"pandas.get_dummies(data[""cylinders""],prefix=""cyl"")",CLUSTER_5,CLUSTER_5
yr_dummies,"pandas.get_dummies(data[""modelyear""],prefix=""yr"")",CLUSTER_5,CLUSTER_5
orig_dummies,"pandas.get_dummies(data[""origin""],prefix=""orig"")",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv(""auto-mpg.csv"")",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_5,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=4,figsize=(16,3)",CLUSTER_5,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=3,figsize=(12,3)",CLUSTER_5,CLUSTER_5
lb_make,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
lb,sklearn.preprocessing.LabelBinarizer(),CLUSTER_5,CLUSTER_5
_,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_1,CLUSTER_9
_,matplotlib.pyplot.legend(loc='best'),CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.legend(loc=(0.9,0.05)",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(t,sol[:,0],label='r_x')",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(t,sol[:,1],label='r_y')",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(t,np.sqrt(sol[:,0]**2.+sol[:,1]**2.)",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(t,np.sqrt(sol[:,0]**2.+sol[:,1]**2.)",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(t,np.sqrt(sol_non_rel[:,0]**2.+sol_non_rel[:,1]**2.)",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(sol_non_rel[:,0],sol_non_rel[:,1],c='C0',label='Newtonian')",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(sol[:,0],sol[:,1],c='C1',label='GR')",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.savefig('bh_binary_pn.png',dpi=200)",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.subplot(1,2,2)",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.suptitle(r'Relativepostitionblack-holebinary',fontsize=14)",CLUSTER_1,CLUSTER_9
_,matplotlib.pyplot.tight_layout(True),CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.ylabel(r'relative$r_y$',fontsize=16)",CLUSTER_1,CLUSTER_9
t,"numpy.linspace(0,5,int(1e4)",CLUSTER_1,CLUSTER_9
sol_non_rel,"scipy.integrate.odeint(relative_dynamics,y0,t,args=(Gm_val,c_squared_val*1e10,eta_val*0.+1.,)",CLUSTER_1,CLUSTER_9
X,"pandas.DataFrame(boston.data,
columns=boston.feature_names)",CLUSTER_7,CLUSTER_5
y,"pandas.DataFrame(boston.target,
columns=['MEDV'])",CLUSTER_7,CLUSTER_5
pred_df,"pandas.DataFrame(predicted,columns=['predicted'],index=Xchosen.index)",CLUSTER_7,CLUSTER_5
pred_df,"pandas.DataFrame(y_pred,columns=['predicted'],index=x.index)",CLUSTER_7,CLUSTER_5
fapd,"pandas.DataFrame(avg_mses,index=folds)",CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame(boston.data,columns=boston.feature_names)",CLUSTER_7,CLUSTER_5
df,"pandas.concat([Xchosen,y,pred_df],axis=1)",CLUSTER_7,CLUSTER_5
df,"pandas.concat([x,y_act,pred_df],axis=1)",CLUSTER_7,CLUSTER_5
iris,"pandas.read_csv(url,header=None,names=col_names)",CLUSTER_7,CLUSTER_5
boston,sklearn.datasets.load_boston(),CLUSTER_7,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(Xchosen,y,test_size=0.3,random_state=123)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(Xchosen,y,test_size=0.1,random_state=123)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=.7)",CLUSTER_7,CLUSTER_5
kf,sklearn.model_selection.KFold(n_splits=number_of_splits),CLUSTER_7,CLUSTER_5
neighbors,"numpy.arange(1,9)",CLUSTER_5,CLUSTER_5
df_feature,"pandas.DataFrame(X,columns=df_sales.columns.values)",CLUSTER_5,CLUSTER_5
df,"pandas.read_excel('master_dataset.xlsx',sheetname='Sheet1')",CLUSTER_5,CLUSTER_5
figure,"matplotlib.pyplot.figure(figsize=(27,9)",CLUSTER_5,CLUSTER_5
ax,matplotlib.pyplot.subplot(len(df_sales.values),CLUSTER_5,CLUSTER_5
ax,matplotlib.pyplot.subplot(len(df_sales.values),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=6),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=8),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=4),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=6),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=7),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=8),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,
random_state=21,stratify=y)",CLUSTER_5,CLUSTER_5
a,"numpy.arange(10,20,2)",CLUSTER_3,CLUSTER_6
a,numpy.arange(12),CLUSTER_3,CLUSTER_6
b,numpy.arange(4),CLUSTER_3,CLUSTER_6
b,numpy.arange(4),CLUSTER_3,CLUSTER_6
A,"numpy.arange(2,14)",CLUSTER_3,CLUSTER_6
A,"numpy.arange(3,15)",CLUSTER_3,CLUSTER_6
A,"numpy.arange(3,15)",CLUSTER_3,CLUSTER_6
A,numpy.arange(12),CLUSTER_3,CLUSTER_6
a,numpy.arange(4),CLUSTER_3,CLUSTER_6
array,"numpy.array([[1,2,3],
[2,3,4]])",CLUSTER_3,CLUSTER_6
array,"numpy.array([1,2,3],dtype=np.int)",CLUSTER_3,CLUSTER_6
array,"numpy.array([1,2,3],dtype=np.int32)",CLUSTER_3,CLUSTER_6
array,"numpy.array([1,2,3],dtype=np.float)",CLUSTER_3,CLUSTER_6
array,"numpy.array([1,2,3],dtype=np.float32)",CLUSTER_3,CLUSTER_6
a,"numpy.array([10,20,30,40])",CLUSTER_3,CLUSTER_6
a,"numpy.array([[1,1],
[0,1]])",CLUSTER_3,CLUSTER_6
A,"numpy.array([1,1,1])",CLUSTER_3,CLUSTER_6
B,"numpy.array([2,2,2])",CLUSTER_3,CLUSTER_6
matrix,"numpy.zeros((2,3)",CLUSTER_3,CLUSTER_6
matrix,"numpy.empty((2,2)",CLUSTER_3,CLUSTER_6
C,"numpy.concatenate((A,B,B,A)",CLUSTER_3,CLUSTER_6
c,"numpy.dot(a,b)",CLUSTER_3,CLUSTER_6
matrix,"numpy.ones((3,4)",CLUSTER_3,CLUSTER_6
a,"numpy.linspace(1,10,5)",CLUSTER_3,CLUSTER_6
a,"numpy.linspace(1,10,6)",CLUSTER_3,CLUSTER_6
c,numpy.copy(a),CLUSTER_3,CLUSTER_6
svm,"sklearn.svm.SVC(kernel='linear',C=1.0,random_state=0)",CLUSTER_10,CLUSTER_4
svm,"sklearn.svm.SVC(kernel='rbf',random_state=0,gamma=.1,C=10.)",CLUSTER_10,CLUSTER_4
svm,"sklearn.svm.SVC(kernel='rbf',random_state=0,gamma=.2,C=1.)",CLUSTER_10,CLUSTER_4
svm,"sklearn.svm.SVC(kernel='rbf',random_state=0,gamma=10,C=1.)",CLUSTER_10,CLUSTER_4
svm,sklearn.linear_model.SGDClassifier(loss='hinge'),CLUSTER_10,CLUSTER_4
df_totals.index,pandas.RangeIndex(len(df_totals.index),CLUSTER_4,CLUSTER_11
df_totals_head.index,pandas.RangeIndex(len(df_totals_head.index),CLUSTER_4,CLUSTER_11
df_totals_content.index,pandas.RangeIndex(len(df_totals_content.index),CLUSTER_4,CLUSTER_11
df_totals,"pandas.concat([df01,df02,df03,df04,df05,df06,df07,df08,df09,df10,
df11,df12,df13,df14,df15,df16,df17,df18,df19,df20],join=""inner"")",CLUSTER_4,CLUSTER_11
df_totals_head,"pandas.concat([df01_head,df02_head,df03_head,df04_head,df05_head,
df06_head,df07_head,df08_head,df09_head,df10_head,
df11_head,df12_head,df13_head,df14_head,df15_head,
df16_head,df17_head,df18_head,df19_head,df20_head],join=""inner"")",CLUSTER_4,CLUSTER_11
df_totals_content,"pandas.concat([df01_content,df02_content,df03_content,df04_content,df05_content,
df06_content,df07_content,df08_content,df09_content,df10_content,
df11_content,df12_content,df13_content,df14_content,df15_content,
df16_content,df17_content,df18_content,df19_content,df20_content],join=""inner"")",CLUSTER_4,CLUSTER_11
dirpath,os.getcwd(),CLUSTER_4,CLUSTER_11
weather_df,pandas.DataFrame(weather_data),CLUSTER_9,CLUSTER_9
response,requests.get(query_url),CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
cols,"numpy.delete(cols,[0,6,7,8,9,10,11])",CLUSTER_7,CLUSTER_8
cols,"numpy.delete(cols,-1)",CLUSTER_7,CLUSTER_8
my_data,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.6,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.6,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.6,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.6,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.6,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.6,random_state=0)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
clf_gini,"sklearn.tree.DecisionTreeClassifier(criterion=""gini"",random_state=0)",CLUSTER_7,CLUSTER_8
clf_entropy,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",random_state=0)",CLUSTER_7,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=80),CLUSTER_7,CLUSTER_8
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=7),CLUSTER_7,CLUSTER_8
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
svm,sklearn.svm.SVC(kernel='rbf'),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
fruits,pandas.read_table('fruit_data_with_colors.txt'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=1-s)",CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
v,"numpy.array([2,1])",CLUSTER_1,CLUSTER_10
v,"numpy.array([2,1])",CLUSTER_1,CLUSTER_10
s,"numpy.array([-3,2])",CLUSTER_1,CLUSTER_10
v,"numpy.array([2,1])",CLUSTER_1,CLUSTER_10
s,"numpy.array([-3,2])",CLUSTER_1,CLUSTER_10
v,"numpy.array([2,1])",CLUSTER_1,CLUSTER_10
s,"numpy.array([-3,2])",CLUSTER_1,CLUSTER_10
p,"numpy.array([2,3,1])",CLUSTER_1,CLUSTER_10
q,"numpy.array([1,2,-2])",CLUSTER_1,CLUSTER_10
d,"numpy.dot(v,s)",CLUSTER_1,CLUSTER_10
r,"numpy.cross(p,q)",CLUSTER_1,CLUSTER_10
vMag,numpy.linalg.norm(v),CLUSTER_1,CLUSTER_10
sMag,numpy.linalg.norm(s),CLUSTER_1,CLUSTER_10
theta,math.degrees(math.acos(cos),CLUSTER_1,CLUSTER_10
rr_plot_data,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
rt_plot_data,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
means,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
errs,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
"rr_plot_data_dict[algo+"":""+run]","pandas.read_csv(i,header=0,na_filter=False)",CLUSTER_4,CLUSTER_11
"rt_plot_data_dict[algo+"":""+run]","pandas.read_csv(i,header=0,na_filter=False)",CLUSTER_4,CLUSTER_11
preds,numpy.asarray(preds),CLUSTER_2,CLUSTER_6
exp_preds,numpy.exp(preds),CLUSTER_2,CLUSTER_6
preds,numpy.log(preds),CLUSTER_2,CLUSTER_6
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_5
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_5
mean_acc,numpy.zeros((Ks-1),CLUSTER_7,CLUSTER_5
std_acc,numpy.zeros((Ks-1),CLUSTER_7,CLUSTER_5
std_acc[n-1],numpy.std(predictions==y_test),CLUSTER_7,CLUSTER_5
bins,numpy.linspace(df.Principal.min(),CLUSTER_7,CLUSTER_5
bins,numpy.linspace(df.age.min(),CLUSTER_7,CLUSTER_5
bins,numpy.linspace(df.dayofweek.min(),CLUSTER_7,CLUSTER_5
Feature,"pandas.concat([Feature,pd.get_dummies(df['education'])",CLUSTER_7,CLUSTER_5
test_Feature,"pandas.concat([test_Feature,pd.get_dummies(test_df['education'])",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('loan_train.csv'),CLUSTER_7,CLUSTER_5
test_df,pandas.read_csv('loan_test.csv'),CLUSTER_7,CLUSTER_5
df['due_date'],pandas.to_datetime(df['due_date']),CLUSTER_7,CLUSTER_5
df['effective_date'],pandas.to_datetime(df['effective_date']),CLUSTER_7,CLUSTER_5
test_df['due_date'],pandas.to_datetime(test_df['due_date']),CLUSTER_7,CLUSTER_5
test_df['effective_date'],pandas.to_datetime(test_df['effective_date']),CLUSTER_7,CLUSTER_5
X,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
X_testset,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_7,CLUSTER_5
knn1,sklearn.neighbors.KNeighborsClassifier(n_neighbors=4),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n),CLUSTER_7,CLUSTER_5
knn2,sklearn.neighbors.KNeighborsClassifier(n_neighbors=9),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30,random_state=50)",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,predictions_svm1,labels=[""COLLECTION"",""PAIDOFF""])",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,predictions_lr,labels=[""COLLECTION"",""PAIDOFF""])",CLUSTER_7,CLUSTER_5
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,predictions)",CLUSTER_7,CLUSTER_5
dtree,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=4)",CLUSTER_7,CLUSTER_5
clf1,"sklearn.svm.SVC(kernel=""rbf"")",CLUSTER_7,CLUSTER_5
clf2,"sklearn.svm.SVC(kernel=""linear"")",CLUSTER_7,CLUSTER_5
clf3,"sklearn.svm.SVC(kernel=""poly"")",CLUSTER_7,CLUSTER_5
clf4,"sklearn.svm.SVC(kernel=""sigmoid"")",CLUSTER_7,CLUSTER_5
lr,"sklearn.linear_model.LogisticRegression(C=0.01,solver=""liblinear"")",CLUSTER_7,CLUSTER_5
result,"pandas.merge(data,data_text,on='ID',how='left')",CLUSTER_0,CLUSTER_8
data,pandas.read_csv('training/training_variants'),CLUSTER_0,CLUSTER_8
data_text,"pandas.read_csv(""training/training_text"",sep=""\|\|"",engine=""python"",names=[""ID"",""TEXT""],skiprows=1)",CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"'''fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
total_text,"re.sub('[^a-zA-Z0-9\n]','',total_text)",CLUSTER_0,CLUSTER_8
total_text,"re.sub('\s+','',total_text)",CLUSTER_0,CLUSTER_8
train_gene_feature_responseCoding,"numpy.array(get_gv_feature(alpha,""Gene"",train_df)",CLUSTER_0,CLUSTER_8
test_gene_feature_responseCoding,"numpy.array(get_gv_feature(alpha,""Gene"",test_df)",CLUSTER_0,CLUSTER_8
cv_gene_feature_responseCoding,"numpy.array(get_gv_feature(alpha,""Gene"",cv_df)",CLUSTER_0,CLUSTER_8
train_variation_feature_responseCoding,"numpy.array(get_gv_feature(alpha,""Variation"",train_df)",CLUSTER_0,CLUSTER_8
test_variation_feature_responseCoding,"numpy.array(get_gv_feature(alpha,""Variation"",test_df)",CLUSTER_0,CLUSTER_8
cv_variation_feature_responseCoding,"numpy.array(get_gv_feature(alpha,""Variation"",cv_df)",CLUSTER_0,CLUSTER_8
confuse_array,numpy.array(confuse_array),CLUSTER_0,CLUSTER_8
sorted_text_occur,numpy.array(list(sorted_text_fea_dict.values(),CLUSTER_0,CLUSTER_8
train_y,numpy.array(list(train_df['Class']),CLUSTER_0,CLUSTER_8
test_y,numpy.array(list(test_df['Class']),CLUSTER_0,CLUSTER_8
cv_y,numpy.array(list(cv_df['Class']),CLUSTER_0,CLUSTER_8
cv_predicted_y,"numpy.zeros((cv_data_len,9)",CLUSTER_0,CLUSTER_8
test_predicted_y,"numpy.zeros((test_data_len,9)",CLUSTER_0,CLUSTER_8
text_feature_responseCoding,"numpy.zeros((df.shape[0],9)",CLUSTER_0,CLUSTER_8
features,numpy.dot(np.array(alpha),CLUSTER_0,CLUSTER_8
features,numpy.dot(np.array(alpha),CLUSTER_0,CLUSTER_8
predicted_y,"numpy.argmax(test_predicted_y,axis=1)",CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
sorted_yi,numpy.argsort(-train_class_distribution.values),CLUSTER_0,CLUSTER_8
sorted_yi,numpy.argsort(-test_class_distribution.values),CLUSTER_0,CLUSTER_8
sorted_yi,numpy.argsort(-train_class_distribution.values),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.feature_importances_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.feature_importances_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.feature_importances_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.feature_importances_),CLUSTER_0,CLUSTER_8
c,numpy.cumsum(h),CLUSTER_0,CLUSTER_8
c,numpy.cumsum(h),CLUSTER_0,CLUSTER_8
train_gene_var_responseCoding,"numpy.hstack((train_gene_feature_responseCoding,train_variation_feature_responseCoding)",CLUSTER_0,CLUSTER_8
test_gene_var_responseCoding,"numpy.hstack((test_gene_feature_responseCoding,test_variation_feature_responseCoding)",CLUSTER_0,CLUSTER_8
cv_gene_var_responseCoding,"numpy.hstack((cv_gene_feature_responseCoding,cv_variation_feature_responseCoding)",CLUSTER_0,CLUSTER_8
train_x_responseCoding,"numpy.hstack((train_gene_var_responseCoding,train_text_feature_responseCoding)",CLUSTER_0,CLUSTER_8
test_x_responseCoding,"numpy.hstack((test_gene_var_responseCoding,test_text_feature_responseCoding)",CLUSTER_0,CLUSTER_8
cv_x_responseCoding,"numpy.hstack((cv_gene_var_responseCoding,cv_text_feature_responseCoding)",CLUSTER_0,CLUSTER_8
train_text_feature_onehotCoding,"sklearn.preprocessing.normalize(train_text_feature_onehotCoding,axis=0)",CLUSTER_0,CLUSTER_8
test_text_feature_onehotCoding,"sklearn.preprocessing.normalize(test_text_feature_onehotCoding,axis=0)",CLUSTER_0,CLUSTER_8
cv_text_feature_onehotCoding,"sklearn.preprocessing.normalize(cv_text_feature_onehotCoding,axis=0)",CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
C,"sklearn.metrics.confusion_matrix(test_y,predict_y)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=i,penalty='l2',loss='hinge',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=alpha[best_alpha],penalty='l2',loss='hinge',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='hinge',random_state=42,class_weight='balanced')",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='hinge',random_state=42)",CLUSTER_0,CLUSTER_8
clf1,"sklearn.linear_model.SGDClassifier(alpha=0.001,penalty='l2',loss='log',class_weight='balanced',random_state=0)",CLUSTER_0,CLUSTER_8
clf2,"sklearn.linear_model.SGDClassifier(alpha=1,penalty='l2',loss='hinge',class_weight='balanced',random_state=0)",CLUSTER_0,CLUSTER_8
train_gene_var_onehotCoding,"scipy.sparse.hstack((train_gene_feature_onehotCoding,train_variation_feature_onehotCoding)",CLUSTER_0,CLUSTER_8
test_gene_var_onehotCoding,"scipy.sparse.hstack((test_gene_feature_onehotCoding,test_variation_feature_onehotCoding)",CLUSTER_0,CLUSTER_8
cv_gene_var_onehotCoding,"scipy.sparse.hstack((cv_gene_feature_onehotCoding,cv_variation_feature_onehotCoding)",CLUSTER_0,CLUSTER_8
train_x_onehotCoding,"scipy.sparse.hstack((train_gene_var_onehotCoding,train_text_feature_onehotCoding)",CLUSTER_0,CLUSTER_8
test_x_onehotCoding,"scipy.sparse.hstack((test_gene_var_onehotCoding,test_text_feature_onehotCoding)",CLUSTER_0,CLUSTER_8
cv_x_onehotCoding,"scipy.sparse.hstack((cv_gene_var_onehotCoding,cv_text_feature_onehotCoding)",CLUSTER_0,CLUSTER_8
dictionary,collections.defaultdict(int),CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf1,"sklearn.calibration.CalibratedClassifierCV(clf1,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf2,"sklearn.calibration.CalibratedClassifierCV(clf2,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf3,"sklearn.calibration.CalibratedClassifierCV(clf3,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(alpha=i),CLUSTER_0,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(alpha=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(alpha=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf3,sklearn.naive_bayes.MultinomialNB(alpha=0.001),CLUSTER_0,CLUSTER_8
"X_train,test_df,y_train,y_test","sklearn.model_selection.train_test_split(result,y_true,stratify=y_true,test_size=0.2)",CLUSTER_0,CLUSTER_8
"train_df,cv_df,y_train,y_cv","sklearn.model_selection.train_test_split(X_train,y_train,stratify=y_train,test_size=0.2)",CLUSTER_0,CLUSTER_8
text_feature_responseCoding[row_index][i],math.exp(sum_prob/len(row['TEXT'].split(),CLUSTER_0,CLUSTER_8
sum_prob+,"math.log(((dict_list[i].get(word,0)",CLUSTER_0,CLUSTER_8
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=i,criterion='gini',max_depth=j,random_state=42,n_jobs=-1)",CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=alpha[int(best_alpha/2),CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=alpha[int(best_alpha/2),CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=alpha[int(best_alpha/2),CLUSTER_0,CLUSTER_8
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=i,criterion='gini',max_depth=j,random_state=42,n_jobs=-1)",CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=alpha[int(best_alpha/4),CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(max_depth=max_depth[int(best_alpha%4),CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=alpha[int(best_alpha/4),CLUSTER_0,CLUSTER_8
lr,sklearn.linear_model.LogisticRegression(C=i),CLUSTER_0,CLUSTER_8
lr,sklearn.linear_model.LogisticRegression(C=0.1),CLUSTER_0,CLUSTER_8
vclf,"sklearn.ensemble.VotingClassifier(estimators=[('lr',sig_clf1)",CLUSTER_0,CLUSTER_8
df,pandas.read_csv('data/train.csv'),CLUSTER_8,CLUSTER_4
df_test,pandas.read_csv('data/test.csv'),CLUSTER_8,CLUSTER_4
ms,"pandas.DataFrame(0,index=cont_reduced.columns,columns=metrics)",CLUSTER_7,CLUSTER_8
ms,"pandas.DataFrame(0,index=contingency.index,columns=metrics)",CLUSTER_7,CLUSTER_8
medians,"pandas.DataFrame(medians,columns=[name])",CLUSTER_7,CLUSTER_8
subtype_df,pandas.DataFrame([[subtype_data['pospredvalue'].median(),CLUSTER_7,CLUSTER_8
reference_sort,pandas.Index(reference_sort),CLUSTER_7,CLUSTER_8
tumor_data_gse18549,"pandas.read_csv('cup_project/external_validation/gse18549_sample_anns.csv',
header=0,index_col=0)",CLUSTER_7,CLUSTER_8
label_counts,pandas.value_counts(labels),CLUSTER_7,CLUSTER_8
y,numpy.arange(L),CLUSTER_7,CLUSTER_8
y,numpy.arange(L),CLUSTER_7,CLUSTER_8
axarr,numpy.array(axs),CLUSTER_7,CLUSTER_8
cont_reduced,"numpy.zeros((L,L)",CLUSTER_7,CLUSTER_8
sizes,numpy.ones(len(colors_x),CLUSTER_7,CLUSTER_8
sizes,numpy.ones(len(colors_x),CLUSTER_7,CLUSTER_8
sizes,numpy.ones(len(colors_x),CLUSTER_7,CLUSTER_8
sizes_group,numpy.ones(len(colors_group_x),CLUSTER_7,CLUSTER_8
sizes,numpy.ones(len(colors_x),CLUSTER_7,CLUSTER_8
sizes_group,numpy.ones(len(colors_group_x),CLUSTER_7,CLUSTER_8
sizes,numpy.ones(len(colors_x),CLUSTER_7,CLUSTER_8
sizes_group,numpy.ones(len(colors_group_x),CLUSTER_7,CLUSTER_8
desats,"numpy.repeat(jch_color,n,axis=0)",CLUSTER_7,CLUSTER_8
gs,"matplotlib.pyplot.GridSpec(5,3,hspace=0.7,wspace=0.7,right=0.98,left=0.24,top=1)",CLUSTER_7,CLUSTER_8
gs,"matplotlib.pyplot.GridSpec(2,3,width_ratios=[1,1,1],height_ratios=[1.5,1],
hspace=0.7,wspace=0.9)",CLUSTER_7,CLUSTER_8
gs,"matplotlib.pyplot.GridSpec(2,3,width_ratios=[1,1,1.3],height_ratios=[2,1],
hspace=0.4,wspace=0.9)",CLUSTER_7,CLUSTER_8
gs,"matplotlib.pyplot.GridSpec(2,3,width_ratios=[1.5,1,1],height_ratios=[1.5,1],
hspace=0.7,wspace=0.9)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(FIG_WIDTH_1COL,FIG_HEIGHT_MAX)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(FIG_WIDTH_2COL,6)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(FIG_WIDTH_2COL,7)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(FIG_WIDTH_2COL,6)",CLUSTER_7,CLUSTER_8
human_body,matplotlib.pyplot.imread('Human_body_silhouette.png'),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(FIG_WIDTH_1COL,4)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(2,2)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(3,3)",CLUSTER_7,CLUSTER_8
"fig,axarr","matplotlib.pyplot.subplots(2,1,figsize=(FIG_WIDTH_2COL,7)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(2,5)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(3,3)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(3,3)",CLUSTER_7,CLUSTER_8
user,pandas.read_csv('../data/csv/JData_User.csv'),CLUSTER_8,CLUSTER_4
product,pandas.read_csv('../data/csv/JData_Product.csv'),CLUSTER_8,CLUSTER_4
comment,pandas.read_csv('../data/csv/JData_Comment.csv'),CLUSTER_8,CLUSTER_4
res,collections.Counter(lista),CLUSTER_10,CLUSTER_4
res,collections.Counter(palavras),CLUSTER_10,CLUSTER_4
DFValPGs,pandas.DataFrame(valPGStats),CLUSTER_7,CLUSTER_8
SCDF,pandas.DataFrame(SCData),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('TheNBACSV/nbaNew.csv',delimiter=',',encoding=""utf-8-sig"")",CLUSTER_7,CLUSTER_8
X,numpy.array(x),CLUSTER_7,CLUSTER_8
df['PlayerSalary'],numpy.array(salaryCleaner(df['PlayerSalary']),CLUSTER_7,CLUSTER_8
df['TS%'],numpy.array(percentRemover(numpy.array(df['TS%']),CLUSTER_7,CLUSTER_8
df['ORB%'],numpy.array(percentRemover(numpy.array(df['ORB%']),CLUSTER_7,CLUSTER_8
df['DRB%'],numpy.array(percentRemover(numpy.array(df['DRB%']),CLUSTER_7,CLUSTER_8
df['TRB%'],numpy.array(percentRemover(numpy.array(df['TRB%']),CLUSTER_7,CLUSTER_8
df['AST%'],numpy.array(percentRemover(numpy.array(df['AST%']),CLUSTER_7,CLUSTER_8
df['STL%'],numpy.array(percentRemover(numpy.array(df['STL%']),CLUSTER_7,CLUSTER_8
df['BLK%'],numpy.array(percentRemover(numpy.array(df['BLK%']),CLUSTER_7,CLUSTER_8
df['TOV%'],numpy.array(percentRemover(numpy.array(df['TOV%']),CLUSTER_7,CLUSTER_8
df['USG%'],numpy.array(percentRemover(numpy.array(df['USG%']),CLUSTER_7,CLUSTER_8
df['FG%'],numpy.array(percentRemover(numpy.array(df['FG%']),CLUSTER_7,CLUSTER_8
df['3P%'],numpy.array(percentRemover(numpy.array(df['3P%']),CLUSTER_7,CLUSTER_8
df['2P%'],numpy.array(percentRemover(numpy.array(df['2P%']),CLUSTER_7,CLUSTER_8
df['eFG%'],numpy.array(percentRemover(numpy.array(df['eFG%']),CLUSTER_7,CLUSTER_8
df['FT%'],numpy.array(percentRemover(numpy.array(df['FT%']),CLUSTER_7,CLUSTER_8
df['FTr'],numpy.array(percentRemover(numpy.array(df['FTr']),CLUSTER_7,CLUSTER_8
SCSS,numpy.array(StephCurr['SeasonStart']),CLUSTER_7,CLUSTER_8
SCSal,numpy.array(StephCurr['PlayerSalary']),CLUSTER_7,CLUSTER_8
SC2PP,numpy.array(StephCurr['2P%']),CLUSTER_7,CLUSTER_8
SC3PP,numpy.array(StephCurr['3P%']),CLUSTER_7,CLUSTER_8
SCFtr,numpy.array(StephCurr['FTr']),CLUSTER_7,CLUSTER_8
SCEFG,numpy.array(StephCurr['eFG%']),CLUSTER_7,CLUSTER_8
SCASTP,numpy.array(StephCurr['AST%']),CLUSTER_7,CLUSTER_8
SCAST,numpy.array(StephCurr['AST']),CLUSTER_7,CLUSTER_8
meanSalary,"numpy.mean(AllPGStats['PlayerSalary'],axis=0)",CLUSTER_7,CLUSTER_8
stdSalary,"numpy.std(AllPGStats['PlayerSalary'],axis=0)",CLUSTER_7,CLUSTER_8
npMatrix,numpy.matrix(DFValPGs),CLUSTER_7,CLUSTER_8
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
"slope,intercept,r_value,p_value,std_err","scipy.stats.linregress(X,Y)",CLUSTER_7,CLUSTER_8
stats,"scipy.stats.linregress(X,Y)",CLUSTER_7,CLUSTER_8
stats,"scipy.stats.linregress(X,Y)",CLUSTER_7,CLUSTER_8
stats,"scipy.stats.linregress(X,Y)",CLUSTER_7,CLUSTER_8
stats,"scipy.stats.linregress(X,Y)",CLUSTER_7,CLUSTER_8
stats,"scipy.stats.linregress(X,Y)",CLUSTER_7,CLUSTER_8
a0,"numpy.zeros((m,n_a)",CLUSTER_12,CLUSTER_6
c0,"numpy.zeros((m,n_a)",CLUSTER_12,CLUSTER_6
x_initializer,"numpy.zeros((1,1,78)",CLUSTER_12,CLUSTER_6
a_initializer,"numpy.zeros((1,n_a)",CLUSTER_12,CLUSTER_6
c_initializer,"numpy.zeros((1,n_a)",CLUSTER_12,CLUSTER_6
indices,"numpy.argmax(pred,2)",CLUSTER_12,CLUSTER_6
y,numpy.array([aforainvp.y]),CLUSTER_4,CLUSTER_0
x,numpy.array([xforxinvp[special]]),CLUSTER_4,CLUSTER_0
yz,numpy.array([t[0]fortinz]),CLUSTER_4,CLUSTER_0
xz,numpy.array([t[1]fortinz]),CLUSTER_4,CLUSTER_0
f1b,"numpy.array([f1_score(yi,xpi,average='binary')",CLUSTER_4,CLUSTER_0
tv,"numpy.array(list(vp.iloc[:,offset+i].values)",CLUSTER_4,CLUSTER_0
scores,"numpy.array([f1_score(y,np.int32(tv>threshold)",CLUSTER_4,CLUSTER_0
y,numpy.array([yforyinvp.y]),CLUSTER_4,CLUSTER_0
tv,"numpy.array(list(vp.iloc[:,offset+i].values)",CLUSTER_4,CLUSTER_0
scores,"numpy.array([f1_score(y,np.int32(bestEnsemble>threshold)",CLUSTER_4,CLUSTER_0
order,numpy.array(fm),CLUSTER_4,CLUSTER_0
ioub,"numpy.array([iou_metric(m,np.int32(b>(t+0.1)",CLUSTER_4,CLUSTER_0
peps,"numpy.array([1e-12,0.00001,0.001,0.002,0.003,0.004,0.005,0.006,0.007,0.008,0.009,0.01])",CLUSTER_4,CLUSTER_0
ious,"numpy.array([iou_metric_batch(train_df.masks,np.int32(bestEnsemble>threshold_best)",CLUSTER_4,CLUSTER_0
ioub,numpy.array(ioub),CLUSTER_4,CLUSTER_0
ens_crf,numpy.array(ens_crf),CLUSTER_4,CLUSTER_0
m,"numpy.array(oof.loc[:,mcols])",CLUSTER_4,CLUSTER_0
m,"numpy.array(small.loc[:,mcols])",CLUSTER_4,CLUSTER_0
m,numpy.array([numpy.array(list(i),CLUSTER_4,CLUSTER_0
poof,"numpy.concatenate((poof,pooff)",CLUSTER_4,CLUSTER_0
yoof,"numpy.concatenate((yoof,yooff)",CLUSTER_4,CLUSTER_0
besta,numpy.argmax(scores),CLUSTER_4,CLUSTER_0
threshold_best_index,numpy.argmax(scores),CLUSTER_4,CLUSTER_0
threshold_best_index,numpy.argmax(ious),CLUSTER_4,CLUSTER_0
eps_best_index,numpy.argmax(ious),CLUSTER_4,CLUSTER_0
MAP,"numpy.argmax(Q,axis=0)",CLUSTER_4,CLUSTER_0
x,"numpy.clip(x,-20,20)",CLUSTER_4,CLUSTER_0
ymean,"numpy.mean(y,axis=0)",CLUSTER_4,CLUSTER_0
prop,"numpy.mean(pred[:,j])",CLUSTER_4,CLUSTER_0
ymean,"numpy.mean(y,axis=0)",CLUSTER_4,CLUSTER_0
cov,numpy.mean(e),CLUSTER_4,CLUSTER_0
ys,"numpy.sum(y,axis=1)",CLUSTER_4,CLUSTER_0
c_val,"numpy.sum(y,axis=0)",CLUSTER_4,CLUSTER_0
xps,"numpy.sum(xp,axis=1)",CLUSTER_4,CLUSTER_0
x1ps,"numpy.sum(x1p,axis=1)",CLUSTER_4,CLUSTER_0
xp,numpy.int32(x>t),CLUSTER_4,CLUSTER_0
x1p,numpy.int32(x1>t),CLUSTER_4,CLUSTER_0
ens,numpy.int32(bestEnsemble>threshold_best),CLUSTER_4,CLUSTER_0
thresholds,"numpy.linspace(5.0,-5.,1001)",CLUSTER_4,CLUSTER_0
thresholds,"numpy.linspace(0.1,0.9,1001)",CLUSTER_4,CLUSTER_0
r,numpy.corrcoef(f),CLUSTER_4,CLUSTER_0
"colors,labels","numpy.unique(annotated_label,return_inverse=True)",CLUSTER_4,CLUSTER_0
mdf,pandas.DataFrame({'Id':id}),CLUSTER_4,CLUSTER_0
d,"pandas.DataFrame(r,columns=mnames)",CLUSTER_4,CLUSTER_0
rez,pandas.DataFrame({'step':np.zeros(nstep),CLUSTER_4,CLUSTER_0
single,"pandas.DataFrame({'mod':np.repeat("""",nm)",CLUSTER_4,CLUSTER_0
md,pandas.DataFrame(m),CLUSTER_4,CLUSTER_0
ss,pandas.concat([s]*(d*d),CLUSTER_4,CLUSTER_0
ss,pandas.concat([s]*(d*d),CLUSTER_4,CLUSTER_0
f,"pandas.concat((sr,md)",CLUSTER_4,CLUSTER_0
df,pandas.read_csv(PATH_TO_TARGET),CLUSTER_4,CLUSTER_0
ss,pandas.read_csv(PATH_TO_SUB),CLUSTER_4,CLUSTER_0
btp,pandas.read_csv('btp.csv'),CLUSTER_4,CLUSTER_0
folds,pandas.read_csv('folds.csv'),CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,ni,figsize=(20,4)",CLUSTER_4,CLUSTER_0
pooff,scipy.special.expit(pooff),CLUSTER_4,CLUSTER_0
pooffx,scipy.special.expit(pooffx),CLUSTER_4,CLUSTER_0
tryScore,"sklearn.metrics.f1_score(y,np.int32(tryEnsemble>threshold)",CLUSTER_4,CLUSTER_0
ufo_sightings,"pandas.read_csv(""http://bit.ly/uforeports"")",CLUSTER_8,CLUSTER_4
mat,scipy.io.loadmat('hw3prob5.mat'),CLUSTER_1,CLUSTER_9
df_coordinates_school_teachers,"pandas.concat([df_prof_coordinates,df_schools_coordinates2],axis=0)",CLUSTER_8,CLUSTER_3
df_nonan,"pandas.read_csv(""df_nonan.csv"")",CLUSTER_8,CLUSTER_3
df_prof_coordinates,"pandas.read_csv(""prof_coordinates.csv"")",CLUSTER_8,CLUSTER_3
idxs,numpy.arange(N),CLUSTER_2,CLUSTER_7
x_np,numpy.arange(24),CLUSTER_2,CLUSTER_7
x_np,numpy.arange(12),CLUSTER_2,CLUSTER_7
X_train,"numpy.asarray(X_train,dtype=np.float32)",CLUSTER_2,CLUSTER_7
y_train,"numpy.asarray(y_train,dtype=np.int32)",CLUSTER_2,CLUSTER_7
X_test,"numpy.asarray(X_test,dtype=np.float32)",CLUSTER_2,CLUSTER_7
y_test,"numpy.asarray(y_test,dtype=np.int32)",CLUSTER_2,CLUSTER_7
x_np,"numpy.zeros((64,32,32,3)",CLUSTER_2,CLUSTER_7
x_np,"numpy.zeros((64,32,32,3)",CLUSTER_2,CLUSTER_7
"fan_in,fan_out",numpy.prod(shape[:3]),CLUSTER_2,CLUSTER_7
dataset,pandas.get_dummies(dataset),CLUSTER_5,CLUSTER_5
dataset,"pandas.read_csv('./Adult_Income.txt',delimiter=',',header=0)",CLUSTER_5,CLUSTER_5
df,pandas.DataFrame(df),CLUSTER_5,CLUSTER_5
dataf,"pandas.concat([train,test],axis=0,sort=False)",CLUSTER_5,CLUSTER_5
data_model,"pandas.concat([dataf_one_hot,dataf['Loan_ID'],dataf['Loan_Status'],dataf[data_column_Integer],dataf['Source']],axis=1)",CLUSTER_5,CLUSTER_5
data_model,"pandas.concat([data_model,X],axis=1)",CLUSTER_5,CLUSTER_5
dataf_one_hot,"pandas.get_dummies(dataf[data_column_category].drop(columns=['Loan_ID','Source','Loan_Status'])",CLUSTER_5,CLUSTER_5
train,"pandas.read_csv(""train_u6lujuX_CVtuZ9i.csv"")",CLUSTER_5,CLUSTER_5
test,"pandas.read_csv(""test_Y3wMUE5_7gLdaTN.csv"")",CLUSTER_5,CLUSTER_5
sample_submit,"pandas.read_csv(""Sample_Submission_ZAuTl8O_FK3zQHh.csv"")",CLUSTER_5,CLUSTER_5
gen,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
poly,"sklearn.preprocessing.PolynomialFeatures(degree=2,interaction_only=True,include_bias=False)",CLUSTER_5,CLUSTER_5
select,sklearn.feature_selection.SelectKBest(k=20),CLUSTER_5,CLUSTER_5
filtered_result4,pandas.read_csv('/Users/carolinerosefrensko/Downloads/data_wrangling_json/AirBNB_cleaned_dataChicagoprice2018-07-20.csv'),CLUSTER_7,CLUSTER_8
mean,numpy.mean(filtered_result4.price),CLUSTER_7,CLUSTER_8
error_mean,numpy.mean(residual_error),CLUSTER_7,CLUSTER_8
std,numpy.std(filtered_result4.price),CLUSTER_7,CLUSTER_8
error_sigma,numpy.std(residual_error),CLUSTER_7,CLUSTER_8
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_7,CLUSTER_8
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_7,CLUSTER_8
"n,bins,patches","matplotlib.pyplot.hist(residual_error,50,normed=1,facecolor='blue',alpha=0.75)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.20,random_state=42)",CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
lin_mse,"sklearn.metrics.mean_squared_error(y_train,y_pred_train)",CLUSTER_7,CLUSTER_8
lin_mse,"sklearn.metrics.mean_squared_error(y_test,y_pred_test)",CLUSTER_7,CLUSTER_8
lin_mae,"sklearn.metrics.mean_absolute_error(y_pred_train,y_train)",CLUSTER_7,CLUSTER_8
lin_mae,"sklearn.metrics.mean_absolute_error(y_pred_test,y_test)",CLUSTER_7,CLUSTER_8
_,scipy.stats.probplot((residual_error),CLUSTER_7,CLUSTER_8
merged,"pandas.merge(abbrev,popul,how='outer',left_on='abbreviation',right_on='state/region')",CLUSTER_8,CLUSTER_3
final,"pandas.merge(merged,area,on='state',how='left')",CLUSTER_8,CLUSTER_3
abbrev,"pandas.read_csv('/home/lukasz/Pobrane/data-USstates-master/state-abbrevs.csv',sep=',')",CLUSTER_8,CLUSTER_3
area,"pandas.read_csv('/home/lukasz/Pobrane/data-USstates-master/state-areas.csv',sep=',')",CLUSTER_8,CLUSTER_3
popul,"pandas.read_csv('/home/lukasz/Pobrane/data-USstates-master/state-population.csv',sep=',')",CLUSTER_8,CLUSTER_3
xgrid,"numpy.linspace(-3.5,3.5,40)",CLUSTER_1,CLUSTER_9
ygrid,"numpy.linspace(-6,6,40)",CLUSTER_1,CLUSTER_9
data,"numpy.vstack([x,y])",CLUSTER_1,CLUSTER_9
"Xgrid,Ygrid","numpy.meshgrid(xgrid,ygrid)",CLUSTER_1,CLUSTER_9
"counts,xedges,yedges","numpy.histogram2d(x,y,bins=30)",CLUSTER_1,CLUSTER_9
"counts,bin_edges","numpy.histogram(data,bins=5)",CLUSTER_1,CLUSTER_9
cb,matplotlib.pyplot.colorbar(),CLUSTER_1,CLUSTER_9
cb,matplotlib.pyplot.colorbar(label='countinbin'),CLUSTER_1,CLUSTER_9
cb,matplotlib.pyplot.colorbar(),CLUSTER_1,CLUSTER_9
kde,scipy.stats.gaussian_kde(data),CLUSTER_1,CLUSTER_9
"x1,x2","numpy.meshgrid(np.arange(start=x_set[:,0].min()",CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('Social_Network_Ads.csv'),CLUSTER_5,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.25,random_state=0)",CLUSTER_5,CLUSTER_5
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
classifier,sklearn.linear_model.LogisticRegression(random_state=0),CLUSTER_5,CLUSTER_5
valid_x,"numpy.arange(1,len(valid_curve)",CLUSTER_6,CLUSTER_11
df,"pandas.merge(df,features,on=['Store','Date','IsHoliday'],how='inner')",CLUSTER_8,CLUSTER_4
df,"pandas.merge(df,storesdata,on=['Store'],how='inner')",CLUSTER_8,CLUSTER_4
features,pandas.read_csv('../../data/features.csv'),CLUSTER_8,CLUSTER_4
storesdata,pandas.read_csv('../../data/stores.csv'),CLUSTER_8,CLUSTER_4
df.Date,pandas.to_datetime(df.Date),CLUSTER_8,CLUSTER_4
df['Year'],pandas.DatetimeIndex(df['Date']),CLUSTER_8,CLUSTER_4
df['Month'],pandas.DatetimeIndex(df['Date']),CLUSTER_8,CLUSTER_4
df['Day'],pandas.DatetimeIndex(df['Date']),CLUSTER_8,CLUSTER_4
coef,"pandas.DataFrame(lm.coef_,x.columns,columns=['Coefs'])",CLUSTER_7,CLUSTER_5
df1,pandas.read_csv(file),CLUSTER_7,CLUSTER_5
ax,"seaborn.scatterplot(y_test,predict)",CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
WorkingIndex,"numpy.full((10980,10980)",CLUSTER_4,CLUSTER_11
attributes_values,"numpy.full((N_Samples,5)",CLUSTER_4,CLUSTER_11
Full_labeled,"numpy.full((rows,cols)",CLUSTER_4,CLUSTER_11
"data[Band[i],Band[i2]]","numpy.full(index.shape,np.nan)",CLUSTER_4,CLUSTER_11
assertTX.shape[0],=numpy.sum(GlobalClassifIndex),CLUSTER_4,CLUSTER_11
x,"numpy.log(6000.0*X[:,:,1][labeled_Samples==i+1])",CLUSTER_4,CLUSTER_11
y,"numpy.log(6000.0*X[:,:,2][labeled_Samples==i+1])",CLUSTER_4,CLUSTER_11
I,"numpy.log(X[:,:,i][labeled_Samples==Sample_id])",CLUSTER_4,CLUSTER_11
J,"numpy.log(X[:,:,i2][labeled_Samples==Sample_id])",CLUSTER_4,CLUSTER_11
index,"numpy.logical_and(~ErMap[:,:,i],~ErMap[:,:,i2])",CLUSTER_4,CLUSTER_11
index,"numpy.logical_and(index,ClassifyIndex)",CLUSTER_4,CLUSTER_11
GlobalClassifIndex,"numpy.logical_and(np.sum(ErMap,axis=2)",CLUSTER_4,CLUSTER_11
TX,"numpy.stack(TX,axis=1)",CLUSTER_4,CLUSTER_11
buffer,"numpy.append(np.array(stats.linregress(x,y)",CLUSTER_4,CLUSTER_11
"data[Band[i],Band[i2]]","numpy.dstack((data[Band[i],Band[i2]],ErMap[:,:,i],ErMap[:,:,i2])",CLUSTER_4,CLUSTER_11
bands_data,numpy.dstack(bands_data),CLUSTER_4,CLUSTER_11
classes,numpy.unique(labeled_Samples),CLUSTER_4,CLUSTER_11
npzfile,numpy.load('../../../Poe/CompressedData/XData.npz'),CLUSTER_4,CLUSTER_11
"fig,axes",matplotlib.pyplot.subplots(int(np.ceil(N_Samples/2),CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(20,20)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(30,10)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(30,10)",CLUSTER_4,CLUSTER_11
S_train,"numpy.zeros((X.shape[0],len(self.base_models)",CLUSTER_11,CLUSTER_1
S_test,"numpy.zeros((T.shape[0],len(self.base_models)",CLUSTER_11,CLUSTER_1
S_test_i,"numpy.zeros((T.shape[0],len(folds)",CLUSTER_11,CLUSTER_1
all_data[skewed_feats],numpy.log1p(all_data[skewed_feats]),CLUSTER_11,CLUSTER_1
all_data,pandas.DataFrame(imp.fit_transform(all_data),CLUSTER_11,CLUSTER_1
all_data,pandas.DataFrame(imp.fit_transform(all_data),CLUSTER_11,CLUSTER_1
all_data,"pandas.concat((X_train,X_test)",CLUSTER_11,CLUSTER_1
all_data,"pandas.concat((X_train,X_test)",CLUSTER_11,CLUSTER_1
train,"pandas.read_csv('./input/train_further_additional_feature_filtered.csv',index_col=0)",CLUSTER_11,CLUSTER_1
y_train,"pandas.read_csv('./input/y_train_further_additional_feature_filtered.csv',index_col=0)",CLUSTER_11,CLUSTER_1
test,"pandas.read_csv('./input/test_further_additional_feature_filtered.csv',index_col=0)",CLUSTER_11,CLUSTER_1
macro,"pandas.read_csv('./input/macro.csv',parse_dates=['timestamp'])",CLUSTER_11,CLUSTER_1
id_test,pandas.read_csv('./input/test.csv'),CLUSTER_11,CLUSTER_1
now,datetime.datetime.now(),CLUSTER_11,CLUSTER_1
RMSLE,"sklearn.metrics.make_scorer(RMSLE_,greater_is_better=False)",CLUSTER_11,CLUSTER_1
RMSE,"sklearn.metrics.make_scorer(RMSE_,greater_is_better=False)",CLUSTER_11,CLUSTER_1
stacker,sklearn.linear_model.Ridge(),CLUSTER_11,CLUSTER_1
"housing[""income_cat""]","numpy.ceil(housing[""median_income""]/1.5)",CLUSTER_4,CLUSTER_11
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_4,CLUSTER_11
tree_rmse,numpy.sqrt(tree_mse),CLUSTER_4,CLUSTER_11
rmse_score,numpy.sqrt(-scores),CLUSTER_4,CLUSTER_11
lin_rmse_scores,numpy.sqrt(-lin_scores),CLUSTER_4,CLUSTER_11
forest_rmse_scores,numpy.sqrt(-forest_scores),CLUSTER_4,CLUSTER_11
final_rmse,numpy.sqrt(final_mse),CLUSTER_4,CLUSTER_11
housing_tr,"pandas.DataFrame(X,columns=housing_num.columns)",CLUSTER_4,CLUSTER_11
c,"""median_house_value"",cmap=matplotlib.pyplot.get_cmap(""jet"")",CLUSTER_4,CLUSTER_11
"train_set,test_set","sklearn.model_selection.train_test_split(housing,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_11
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_11
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_11
encoder,sklearn.preprocessing.OneHotEncoder(),CLUSTER_4,CLUSTER_11
encoder,sklearn.preprocessing.LabelBinarizer(),CLUSTER_4,CLUSTER_11
encoder,sklearn.preprocessing.LabelBinarizer(sparse_output=True),CLUSTER_4,CLUSTER_11
num_pipeline,"sklearn.pipeline.Pipeline([
('imputer',Imputer(strategy='median')",CLUSTER_4,CLUSTER_11
full_pipeline,"sklearn.compose.ColumnTransformer([
(""num"",num_pipeline,num_attribs)",CLUSTER_4,CLUSTER_11
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
lin_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_4,CLUSTER_11
tree_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_4,CLUSTER_11
final_mse,"sklearn.metrics.mean_squared_error(y_test,final_predictions)",CLUSTER_4,CLUSTER_11
tree_reg,sklearn.tree.DecisionTreeRegressor(),CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(tree_reg,housing_prepared,housing_labels,scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_4,CLUSTER_11
lin_scores,"sklearn.model_selection.cross_val_score(lin_reg,housing_prepared,housing_labels,scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_4,CLUSTER_11
forest_scores,"sklearn.model_selection.cross_val_score(forest_reg,housing_prepared,housing_labels,scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_4,CLUSTER_11
forest_reg,sklearn.ensemble.RandomForestRegressor(),CLUSTER_4,CLUSTER_11
forest_reg,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_4,CLUSTER_11
grid_search,"sklearn.model_selection.GridSearchCV(forest_reg,param_grid,cv=5,
scoring='neg_mean_squared_error',return_train_score=True)",CLUSTER_4,CLUSTER_11
fabric,"numpy.zeros((10,10)",CLUSTER_3,CLUSTER_6
summe,numpy.sum(fabric==square[0]),CLUSTER_3,CLUSTER_6
data,"numpy.arange(0,10,0.1)",CLUSTER_1,CLUSTER_10
a,pandas.DataFrame(np.arange(4*4),CLUSTER_8,CLUSTER_3
cv_results,pandas.DataFrame(model_cv.cv_results_),CLUSTER_7,CLUSTER_8
cv_results,pandas.DataFrame(model_cv.cv_results_),CLUSTER_7,CLUSTER_8
dataframe_to_export,pandas.DataFrame(data=d),CLUSTER_7,CLUSTER_8
dataframe_to_export,pandas.DataFrame(data=d),CLUSTER_7,CLUSTER_8
training_dataframe,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
testing_dataframe,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=4)",CLUSTER_7,CLUSTER_8
folds,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=4)",CLUSTER_7,CLUSTER_8
folds,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=4)",CLUSTER_7,CLUSTER_8
cv_results,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=folds,scoring='accuracy',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_results,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=folds,scoring='accuracy',n_jobs=-1)",CLUSTER_7,CLUSTER_8
model_cv,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=params,
scoring='accuracy',cv=folds,n_jobs=-1,
verbose=1,return_train_score=True)",CLUSTER_7,CLUSTER_8
model_cv,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=hyper_params,
scoring='accuracy',cv=folds,n_jobs=-1,
verbose=1,return_train_score=True)",CLUSTER_7,CLUSTER_8
X,sklearn.preprocessing.scale(X),CLUSTER_7,CLUSTER_8
testing_dataframe,sklearn.preprocessing.scale(testing_dataframe),CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(C=1,gamma='auto')",CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(C=1,gamma='auto')",CLUSTER_7,CLUSTER_8
model,sklearn.svm.SVC(gamma='auto'),CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(C=best_C,gamma='auto')",CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(C=1,gamma='auto',kernel='rbf')",CLUSTER_7,CLUSTER_8
modelkernel,"sklearn.svm.SVC(C=1,gamma='auto',kernel='rbf')",CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(kernel=""rbf"")",CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(C=best_hyperparams['C'],gamma=best_hyperparams['gamma'],kernel=""rbf"")",CLUSTER_7,CLUSTER_8
pdfs,numpy.exp(-s),CLUSTER_8,CLUSTER_9
pdfs,numpy.exp(-s),CLUSTER_8,CLUSTER_9
pdfs/,numpy.sqrt(2*numpy.pi),CLUSTER_8,CLUSTER_9
pdfs/,numpy.sqrt(2*numpy.pi),CLUSTER_8,CLUSTER_9
lh,"scipy.stats.norm(mean,sigma)",CLUSTER_8,CLUSTER_9
functions,collections.OrderedDict(),CLUSTER_8,CLUSTER_9
scores,"pandas.DataFrame(data=0,columns=functions.keys()",CLUSTER_8,CLUSTER_9
d_axis,"numpy.arange(0,1000)",CLUSTER_1,CLUSTER_3
n_bins,"numpy.arange(-1000,1001,50)",CLUSTER_1,CLUSTER_3
n_bins,"numpy.arange(0,1001,50)",CLUSTER_1,CLUSTER_3
n_bins,"numpy.arange(num_syn[0],num_syn[1]+2,max(1,np.round(0.1*np.diff(num_syn)",CLUSTER_1,CLUSTER_3
tgt_pos,"numpy.array([nrn_list.x[tgt],nrn_list.y[tgt],nrn_list.z[tgt]])",CLUSTER_1,CLUSTER_3
src_pos,"numpy.array([x_pos[src],y_pos[src],z_pos])",CLUSTER_1,CLUSTER_3
tgt_pos,"numpy.array([nrn_list.x[tgt],nrn_list.y[tgt],nrn_list.z[tgt]])",CLUSTER_1,CLUSTER_3
src_pos,"numpy.array([x_pos[src],y_pos[src],z_pos])",CLUSTER_1,CLUSTER_3
idx_E,numpy.where(nrn_list.type=='LIF_exc'),CLUSTER_1,CLUSTER_3
idx_I,numpy.where(nrn_list.type=='LIF_inh'),CLUSTER_1,CLUSTER_3
d,numpy.sqrt(np.sum((tgt_pos-src_pos),CLUSTER_1,CLUSTER_3
d,numpy.sqrt(np.sum((tgt_pos-src_pos),CLUSTER_1,CLUSTER_3
inp_list,"pandas.DataFrame(inp_dict,columns=['index','src_gid','src_vis_x','src_vis_y','presyn_type','N_syn'])",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(8,6)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(2,2,figsize=(8,6)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(8,6)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(8,6)",CLUSTER_1,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=10,sharex=True,sharey=True,figsize=(20,4)",CLUSTER_2,CLUSTER_7
fig,matplotlib.pyplot.figure(figsize=figsize),CLUSTER_6,CLUSTER_11
dttm,"time.strftime(""%Y%m%d-%H%M%S"")",CLUSTER_6,CLUSTER_11
class_count,collections.Counter(y_train),CLUSTER_5,CLUSTER_6
feature_count,collections.defaultdict(int),CLUSTER_5,CLUSTER_6
mnb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_5,CLUSTER_6
freq_khz,numpy.arange(spectrum.size),CLUSTER_4,CLUSTER_11
np_img,numpy.array(img),CLUSTER_4,CLUSTER_11
train_image_names,numpy.array(os.listdir(IMAGE_TRAIN_PATH),CLUSTER_4,CLUSTER_11
A,"numpy.array([
[1,2,3,4],
[5,6,7,8],
[9,0,1,2]
])",CLUSTER_4,CLUSTER_11
np_img,numpy.array(img),CLUSTER_4,CLUSTER_11
np_img,numpy.array(img),CLUSTER_4,CLUSTER_11
image_vector,numpy.array(image),CLUSTER_4,CLUSTER_11
sum_intensity,"numpy.zeros((28,28)",CLUSTER_4,CLUSTER_11
music,numpy.sin(2*np.pi*frequency*t),CLUSTER_4,CLUSTER_11
music,numpy.sin(2*np.pi*frequency*t),CLUSTER_4,CLUSTER_11
x,"numpy.linspace(-2*np.pi,2*np.pi,300)",CLUSTER_4,CLUSTER_11
t,"numpy.linspace(0,T,int(T*SR)",CLUSTER_4,CLUSTER_11
t,"numpy.linspace(0,T,int(T*sr)",CLUSTER_4,CLUSTER_11
t,"numpy.linspace(0,duration,int(duration*SR)",CLUSTER_4,CLUSTER_11
t,"numpy.linspace(0,duration,int(duration*SR)",CLUSTER_4,CLUSTER_11
X_train,"numpy.hstack((
np.vstack(train_data[""voice_vector""])",CLUSTER_4,CLUSTER_11
X_test,"numpy.hstack((
np.vstack(test_data[""voice_vector""])",CLUSTER_4,CLUSTER_11
composition,"numpy.hstack((
beep(a,0.500)",CLUSTER_4,CLUSTER_11
X_train,"numpy.vstack(train_data[""image_vector""].values)",CLUSTER_4,CLUSTER_11
X_test,"numpy.vstack(test_data[""image_vector""].values)",CLUSTER_4,CLUSTER_11
X_train,"numpy.vstack(train_data[""voice_vector""].values)",CLUSTER_4,CLUSTER_11
X_test,"numpy.vstack(test_data[""voice_vector""].values)",CLUSTER_4,CLUSTER_11
spectrum,numpy.fft.fft(signal),CLUSTER_4,CLUSTER_11
start_date,"datetime.datetime.strptime(""2019-09-24"",DATE_FORMAT)",CLUSTER_4,CLUSTER_11
"train_data,test_data","sklearn.model_selection.train_test_split(
dataset,test_size=0.2,random_state=42
)",CLUSTER_4,CLUSTER_11
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=150),CLUSTER_4,CLUSTER_11
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=150),CLUSTER_4,CLUSTER_11
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=150),CLUSTER_4,CLUSTER_11
conf_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_11
l,numpy.array(range(n),CLUSTER_6,CLUSTER_3
l,numpy.array(range(ntr),CLUSTER_6,CLUSTER_3
trainN,numpy.array(dfNewton['optimizationloss']),CLUSTER_6,CLUSTER_3
testN,numpy.array(dfNewton['testerror']),CLUSTER_6,CLUSTER_3
timeN,numpy.array(dfNewton['time']),CLUSTER_6,CLUSTER_3
passesN,numpy.array(dfNewton['conjugategradientsteps']),CLUSTER_6,CLUSTER_3
trainK,numpy.array(dfKatyusha['optimizationloss']),CLUSTER_6,CLUSTER_3
testK,numpy.array(dfKatyusha['testerror']),CLUSTER_6,CLUSTER_3
timeK,numpy.array(dfKatyusha['time']),CLUSTER_6,CLUSTER_3
passesK,numpy.array(dfKatyusha['numberofpasses']),CLUSTER_6,CLUSTER_3
trainN,numpy.array(dfNewton['optimizationloss']),CLUSTER_6,CLUSTER_3
testN,numpy.array(dfNewton['testerror']),CLUSTER_6,CLUSTER_3
timeN,numpy.array(dfNewton['time']),CLUSTER_6,CLUSTER_3
passesN,numpy.array(dfNewton['conjugategradientsteps']),CLUSTER_6,CLUSTER_3
trainK,numpy.array(dfKatyusha['optimizationloss']),CLUSTER_6,CLUSTER_3
testK,numpy.array(dfKatyusha['testerror']),CLUSTER_6,CLUSTER_3
timeK,numpy.array(dfKatyusha['time']),CLUSTER_6,CLUSTER_3
passesK,numpy.array(dfKatyusha['numberofpasses']),CLUSTER_6,CLUSTER_3
dfNewton,pandas.read_csv(path+titleNewton),CLUSTER_6,CLUSTER_3
dfKatyusha,pandas.read_csv(path+titleKatyusha),CLUSTER_6,CLUSTER_3
dfNewton,pandas.read_csv(path+titleNewton),CLUSTER_6,CLUSTER_3
dfKatyusha,pandas.read_csv(path+titleKatyusha),CLUSTER_6,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_3
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_3
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_3
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_3
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_3
now,time.time(),CLUSTER_6,CLUSTER_10
start,time.time(),CLUSTER_6,CLUSTER_10
m,math.floor(s/60),CLUSTER_6,CLUSTER_10
total_withdup,pandas.Series([]),CLUSTER_12,CLUSTER_3
to_append,pandas.Series([row]),CLUSTER_12,CLUSTER_3
swiss_unemp_data,"pandas.read_csv(swiss_unemp_path,encoding='utf_16')",CLUSTER_12,CLUSTER_3
swiss_unemp_data,"pandas.read_csv(swiss_unemp_path,encoding='utf_16')",CLUSTER_12,CLUSTER_3
swiss_unemp_age_data,"pandas.read_csv(swiss_unemp_age_path,encoding='utf_16')",CLUSTER_12,CLUSTER_3
unemp_data,"pandas.read_excel('lfsa_urgan.xls',skiprows=11,skip_footer=3)",CLUSTER_12,CLUSTER_3
x,"numpy.arange(52,step=2)",CLUSTER_12,CLUSTER_3
geo_json_eu,json.load(open('topojson/europe.topojson.json'),CLUSTER_12,CLUSTER_3
geo_json_swiss,json.load(open('topojson/ch-cantons.topojson.json'),CLUSTER_12,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(30,20)",CLUSTER_12,CLUSTER_3
FI_sp_DT,"pandas.DataFrame(regr_DT_sp.feature_importances_.T,columns=['Spec-DT'])",CLUSTER_7,CLUSTER_5
FI_sp_RF,"pandas.DataFrame(regr_RF_sp.feature_importances_.T,columns=['Spec-RF'])",CLUSTER_7,CLUSTER_5
FI_sp_RF2_dr,"pandas.DataFrame(model_RF2_dr_sp.feature_importances_.T,columns=['Spec-RF2_dr'])",CLUSTER_7,CLUSTER_5
FI_sp_RF2_di,"pandas.DataFrame(model_RF2_di_sp.feature_importances_.T,columns=['Spec-RF2_di'])",CLUSTER_7,CLUSTER_5
FI_sp_AB_dr,"pandas.DataFrame(model_AB_dr_sp.feature_importances_.T,columns=['Spec-AB_dr'])",CLUSTER_7,CLUSTER_5
FI_sp_AB_di,"pandas.DataFrame(model_AB_di_sp.feature_importances_.T,columns=['Spec-AB_di'])",CLUSTER_7,CLUSTER_5
FI_sp_GB_dr,"pandas.DataFrame(model_GB_dr_sp.feature_importances_.T,columns=['Spec-GB_dr'])",CLUSTER_7,CLUSTER_5
FI_sp_GB_di,"pandas.DataFrame(model_GB_di_sp.feature_importances_.T,columns=['Spec-GB_di'])",CLUSTER_7,CLUSTER_5
predictedPhases,"pandas.DataFrame(pred_phase_DT_sp,columns=['deltaI','deltaR','deltaIscore','deltaRscore'],index=['DecisionTreespecpoints'])",CLUSTER_7,CLUSTER_5
importance_DT_,"pandas.Series(regr_DT_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_DT_,"pandas.Series(regr_DT_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_RF_,"pandas.Series(model_RF_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_IRF_r,"pandas.Series(model_RF2_dr_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_IRF_i,"pandas.Series(model_RF2_di_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_ARF_r,"pandas.Series(model_AB_dr_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_ARF_i,"pandas.Series(model_AB_di_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_GRF_r,"pandas.Series(model_GB_dr_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_GRF_i,"pandas.Series(model_GB_di_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
tops,pandas.concat(tops_list),CLUSTER_7,CLUSTER_5
data1,"pandas.read_csv('Training_Data/Graphene/ES_AG_Spec_data_180729_sf_0.8993.csv',header=None)",CLUSTER_7,CLUSTER_5
exp_data_sp,"pandas.read_csv('Training_Data/Graphene/ES_AG_Exp_data.csv',header=None,names=['deltaI','deltaR']+energy_names+energy_names)",CLUSTER_7,CLUSTER_5
xp,"numpy.linspace(xmin,xmax,100)",CLUSTER_7,CLUSTER_5
pred_phase_DT_sp,numpy.append(regr_DT_sp.predict(exp_data_sp),CLUSTER_7,CLUSTER_5
pred_phase_DT_sp,"numpy.append(pred_phase_DT_sp,
r2_score(Y1_test['deltaR'],predictions_DT_sp[:,1])",CLUSTER_7,CLUSTER_5
p,numpy.poly1d(fit_temp),CLUSTER_7,CLUSTER_5
fit_temp,"numpy.polyfit(true,predicted,1)",CLUSTER_7,CLUSTER_5
RF_sp_di_r2score,"sklearn.metrics.r2_score(Y1_test['deltaI'],predictions_RF_sp[:,0])",CLUSTER_7,CLUSTER_5
RF_sp_dr_r2score,"sklearn.metrics.r2_score(Y1_test['deltaR'],predictions_RF_sp[:,1])",CLUSTER_7,CLUSTER_5
AB_sp_di_r2score,"sklearn.metrics.r2_score(Y1_test['deltaI'],predictions_AB_di_sp)",CLUSTER_7,CLUSTER_5
AB_sp_dr_r2score,"sklearn.metrics.r2_score(Y1_test['deltaR'],predictions_AB_dr_sp)",CLUSTER_7,CLUSTER_5
GB_sp_di_r2score,"sklearn.metrics.r2_score(Y1_test['deltaI'],predictions_GB_di_sp)",CLUSTER_7,CLUSTER_5
GB_sp_dr_r2score,"sklearn.metrics.r2_score(Y1_test['deltaR'],predictions_GB_dr_sp)",CLUSTER_7,CLUSTER_5
IRF_sp_di_r2score,"sklearn.metrics.r2_score(Y1_test['deltaI'],predictions_RF2_di_sp)",CLUSTER_7,CLUSTER_5
IRF_sp_dr_r2score,"sklearn.metrics.r2_score(Y1_test['deltaR'],predictions_RF2_dr_sp)",CLUSTER_7,CLUSTER_5
"X1_train,X1_test,Y1_train,Y1_test","sklearn.model_selection.train_test_split(X1,Y1,test_size=ts1,random_state=rs1)",CLUSTER_7,CLUSTER_5
"xmin,xmax",matplotlib.pyplot.xlim(),CLUSTER_7,CLUSTER_5
regr_DT_sp,"sklearn.tree.DecisionTreeRegressor(max_depth=60,min_samples_leaf=2,random_state=rs)",CLUSTER_7,CLUSTER_5
regr_RF_sp,"sklearn.ensemble.RandomForestRegressor(max_depth=40,n_estimators=30,random_state=rs)",CLUSTER_7,CLUSTER_5
regr_RF2_dr_sp,"sklearn.ensemble.RandomForestRegressor(max_depth=md,n_estimators=n,random_state=rs)",CLUSTER_7,CLUSTER_5
regr_RF2_di_sp,"sklearn.ensemble.RandomForestRegressor(max_depth=md,n_estimators=n,random_state=rs)",CLUSTER_7,CLUSTER_5
regr_AB_di_sp,sklearn.ensemble.AdaBoostRegressor(DecisionTreeRegressor(max_depth=md),CLUSTER_7,CLUSTER_5
regr_AB_dr_sp,sklearn.ensemble.AdaBoostRegressor(DecisionTreeRegressor(max_depth=md),CLUSTER_7,CLUSTER_5
regr_GB_di_sp,"sklearn.ensemble.GradientBoostingRegressor(max_depth=md,n_estimators=nest2,random_state=rng)",CLUSTER_7,CLUSTER_5
regr_GB_dr_sp,"sklearn.ensemble.GradientBoostingRegressor(max_depth=md,n_estimators=nest2,random_state=rng)",CLUSTER_7,CLUSTER_5
submission['Id'],"numpy.arange(1,submission.shape[0]+1)",CLUSTER_7,CLUSTER_8
submission,pandas.DataFrame(gbc.predict(test[high_feature10]),CLUSTER_7,CLUSTER_8
feats,"pandas.Series(data=gbc.feature_importances_,index=train.columns)",CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(dir_train,header=None)",CLUSTER_7,CLUSTER_8
trainLabels,"pandas.read_csv(dir_trainLabels,header=None)",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(dir_test,header=None)",CLUSTER_7,CLUSTER_8
gbc,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_7,CLUSTER_8
gbc,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(train_high_feature10,trainLabels,test_size=0.25,random_state=0)",CLUSTER_7,CLUSTER_8
confmat,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
twenty_train,"sklearn.datasets.fetch_20newsgroups(subset='train',categories=categories,shuffle=True,random_state=42)",CLUSTER_10,CLUSTER_4
twenty_test,"sklearn.datasets.fetch_20newsgroups(subset='test',categories=categories,shuffle=True,random_state=42)",CLUSTER_10,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=1)",CLUSTER_10,CLUSTER_4
nb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_10,CLUSTER_4
logreg,sklearn.linear_model.LogisticRegression(C=1e9),CLUSTER_10,CLUSTER_4
mnist,pandas.read_csv('train.csv'),CLUSTER_8,CLUSTER_7
test,pandas.read_csv('test.csv'),CLUSTER_8,CLUSTER_7
training_data,"numpy.zeros((160000,784)",CLUSTER_8,CLUSTER_7
training_labels,numpy.zeros(160000),CLUSTER_8,CLUSTER_7
labels_onehot,"numpy.zeros((160000,10)",CLUSTER_8,CLUSTER_7
Imageid,"numpy.linspace(1,10000,num=10000,dtype=int)",CLUSTER_8,CLUSTER_7
A,"random.randint(0,160000-batch_size-1)",CLUSTER_8,CLUSTER_7
movies,pandas.read_csv('datasets/movies_multilinear_reg.csv'),CLUSTER_5,CLUSTER_1
"train,test,train_bilheteria,test_bilheteria","sklearn.model_selection.train_test_split(filmes_independente,filmes_dependente)",CLUSTER_5,CLUSTER_1
"train,test,train_bilheteria,test_bilheteria","sklearn.model_selection.train_test_split(
filmes_independente,filmes_dependente,test_size=0.3)",CLUSTER_5,CLUSTER_1
modelo,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
modelo_30,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
bgr_image,"numpy.asarray(resized,dtype=np.float32)",CLUSTER_4,CLUSTER_11
hwc_format,"numpy.ascontiguousarray(np.rollaxis(bgr_image,2)",CLUSTER_4,CLUSTER_11
predicted_label,numpy.argmax(probs),CLUSTER_4,CLUSTER_11
stride,"numpy.multiply(stride1x1,stride3x3)",CLUSTER_4,CLUSTER_11
startTime,time.time(),CLUSTER_4,CLUSTER_11
endTime,time.time(),CLUSTER_4,CLUSTER_11
startTime,time.time(),CLUSTER_4,CLUSTER_11
endTime,time.time(),CLUSTER_4,CLUSTER_11
startTime,time.time(),CLUSTER_4,CLUSTER_11
endTime,time.time(),CLUSTER_4,CLUSTER_11
df,pandas.DataFrame(my_results),CLUSTER_4,CLUSTER_11
x,"numpy.arange(1,10,0.1)",CLUSTER_1,CLUSTER_10
ls,"numpy.arange(1,10,0.1)",CLUSTER_1,CLUSTER_10
y,numpy.sin(x),CLUSTER_1,CLUSTER_10
indexed,pandas.DataFrame(bow_new),CLUSTER_5,CLUSTER_1
index,pandas.DataFrame(index.sort_values(ascending=False),CLUSTER_5,CLUSTER_1
allData,pandas.DataFrame(data),CLUSTER_5,CLUSTER_1
innerProductresult,pandas.DataFrame((metadata2*value1),CLUSTER_5,CLUSTER_1
data,pandas.read_csv('keyword.csv'),CLUSTER_5,CLUSTER_1
metadata1,pandas.read_csv('metadata1.csv'),CLUSTER_5,CLUSTER_1
metadata2,pandas.read_csv('metadata2.csv'),CLUSTER_5,CLUSTER_1
metadata1,pandas.read_csv('metadata1.csv'),CLUSTER_5,CLUSTER_1
metadata2,pandas.read_csv('metadata2.csv'),CLUSTER_5,CLUSTER_1
idfDict[word],math.log10(N/float(val),CLUSTER_5,CLUSTER_1
x22,math.sqrt((result1**2),CLUSTER_5,CLUSTER_1
"corr,p_val","scipy.stats.spearmanr(cyl,am)",CLUSTER_7,CLUSTER_9
"corr,p_val","scipy.stats.spearmanr(cyl,vs)",CLUSTER_7,CLUSTER_9
"corr,p_val","scipy.stats.spearmanr(cyl,gear)",CLUSTER_7,CLUSTER_9
cars_tab,"pandas.crosstab(cyl,am)",CLUSTER_7,CLUSTER_9
cars,"pandas.read_csv(""mtcars.csv"")",CLUSTER_7,CLUSTER_9
df,"pandas.read_csv(""iris.csv"",index_col=0)",CLUSTER_7,CLUSTER_9
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighbourhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
downtown_onehot,"pandas.get_dummies(downtown_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
Toronto_pc,pandas.read_csv('Toronto_Postalcode.csv'),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
df,"pandas.read_csv('Tutorials/tuto4_table1.txt',sep="""")",CLUSTER_8,CLUSTER_4
df2,"pandas.read_csv('Tutorials/tuto4_table2.txt',sep="""")",CLUSTER_8,CLUSTER_4
ecom,"pandas.read_csv(""EcommercePurchases"")",CLUSTER_8,CLUSTER_4
df_all,pandas.DataFrame(alldata),CLUSTER_7,CLUSTER_8
alldata_hists,"pandas.DataFrame({""alldata:""+column:alldata[column],""alldata:log(""+column+""+1)",CLUSTER_7,CLUSTER_8
cv_ridge,"pandas.Series(cv_ridge,index=alphas)",CLUSTER_7,CLUSTER_8
series_lasso,"pandas.Series(cv_lasso,index=alphas)",CLUSTER_7,CLUSTER_8
series_knn,"pandas.Series(cv_knn,index=neighbors)",CLUSTER_7,CLUSTER_8
series_randomforest,"pandas.Series(cv_randomforest,index=trees)",CLUSTER_7,CLUSTER_8
alldata,"pandas.concat([alldata,alldata2014])",CLUSTER_7,CLUSTER_8
new_train_X,"pandas.concat([train_X,validation_X])",CLUSTER_7,CLUSTER_8
new_train_Y,"pandas.concat([train_Y,validation_Y])",CLUSTER_7,CLUSTER_8
alldata_feats,pandas.get_dummies(alldata_feats),CLUSTER_7,CLUSTER_8
alldata,"pandas.read_csv(""eleicoes_2006_a_2010.csv"")",CLUSTER_7,CLUSTER_8
alldata2014,"pandas.read_csv(""eleicoes_2014.csv"")",CLUSTER_7,CLUSTER_8
x_plot,numpy.array([i/200.0foriinrange(200),CLUSTER_7,CLUSTER_8
alldata_feats[skewed_feats],numpy.log1p(alldata_feats[skewed_feats]),CLUSTER_7,CLUSTER_8
rmse,"numpy.sqrt(-cross_val_score(model,train_X,train_y,scoring=""neg_mean_squared_error"",cv=5)",CLUSTER_7,CLUSTER_8
alphas,"numpy.linspace(10,100,50,endpoint=False)",CLUSTER_7,CLUSTER_8
y_pred,numpy.matrix(y_pred),CLUSTER_7,CLUSTER_8
linear,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
model_ridge,sklearn.linear_model.Ridge(alpha=8.0),CLUSTER_7,CLUSTER_8
model_ridge,sklearn.linear_model.Ridge(alpha=30.0),CLUSTER_7,CLUSTER_8
model_ridge,sklearn.linear_model.Ridge(alpha=8.0),CLUSTER_7,CLUSTER_8
model_lasso,sklearn.linear_model.Lasso(alpha=19.0),CLUSTER_7,CLUSTER_8
model_lasso,sklearn.linear_model.Lasso(alpha=50.0),CLUSTER_7,CLUSTER_8
model_lasso,sklearn.linear_model.Lasso(alpha=50.0),CLUSTER_7,CLUSTER_8
model_knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=21),CLUSTER_7,CLUSTER_8
model_knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=21),CLUSTER_7,CLUSTER_8
model_randomforest,sklearn.ensemble.RandomForestRegressor(n_estimators=70),CLUSTER_7,CLUSTER_8
model_randomforest,sklearn.ensemble.RandomForestRegressor(n_estimators=75),CLUSTER_7,CLUSTER_8
model_randomforest,sklearn.ensemble.RandomForestRegressor(n_estimators=75),CLUSTER_7,CLUSTER_8
ts2,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
ts3,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
ts_sax,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
dist_matrix,"pandas.DataFrame(0,index=ts.index,columns=ts.index)",CLUSTER_1,CLUSTER_3
raw_data,"pandas.read_csv('stock_data.csv',header=0)",CLUSTER_1,CLUSTER_3
arr1,numpy.array(ts_sax.loc[dist_matrix.index.values[i]]),CLUSTER_1,CLUSTER_3
arr2,numpy.array(ts_sax.loc[dist_matrix.columns.values[j]]),CLUSTER_1,CLUSTER_3
ttl_dist,"numpy.sum([ttl_dist,(sym_dic[int_to_sym_dic[a[i][k]]+int_to_sym_dic[b[k]]]**2)",CLUSTER_1,CLUSTER_3
sim,"numpy.append(sim,[s])",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(5,3,figsize=(15,15)",CLUSTER_1,CLUSTER_3
episode_history,numpy.array(episode_history),CLUSTER_2,CLUSTER_7
discounted_rewards,numpy.zeros_like(rewards),CLUSTER_2,CLUSTER_7
discounted_rewards-,numpy.mean(discounted_rewards),CLUSTER_2,CLUSTER_7
discounted_rewards/,numpy.std(discounted_rewards),CLUSTER_2,CLUSTER_7
dfdados,pandas.read_csv('USA_Housing.csv'),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
regre,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
avg_reward,numpy.mean(scores_window),CLUSTER_6,CLUSTER_10
scores_window,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
data,"pandas.DataFrame(full_reviews,columns=['Restaurant_Id','Review'])",CLUSTER_9,CLUSTER_2
response,"requests.get(url,headers=headers,params=url_params)",CLUSTER_9,CLUSTER_2
response,"requests.get(url,headers=headers,params=url_params)",CLUSTER_9,CLUSTER_2
source,requests.get(full_url),CLUSTER_9,CLUSTER_2
source,requests.get(full_url),CLUSTER_9,CLUSTER_2
df_coef_,"pandas.DataFrame(index=high_corr_cols,data={'coef':lasso_.coef_})",CLUSTER_5,CLUSTER_5
df_coef,pandas.DataFrame(index=pd.get_dummies(df_train),CLUSTER_5,CLUSTER_5
results_df,"pandas.DataFrame(index=df_test.index,data={'SalePrice':predictions})",CLUSTER_5,CLUSTER_5
df_temp_train,pandas.get_dummies(df_train),CLUSTER_5,CLUSTER_5
df_coef,pd.DataFrame(index=pandas.get_dummies(df_train),CLUSTER_5,CLUSTER_5
reg_cols,pandas.get_dummies(df_train),CLUSTER_5,CLUSTER_5
df_train,"pandas.read_csv(""DataSets/HousePricePrediction/train.csv"",index_col='Id')",CLUSTER_5,CLUSTER_5
df_test,"pandas.read_csv(""DataSets/HousePricePrediction/test.csv"",index_col='Id')",CLUSTER_5,CLUSTER_5
lin_reg_lot,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
lasso_,sklearn.linear_model.Lasso(max_iter=10000),CLUSTER_5,CLUSTER_5
lasso_reg,"sklearn.linear_model.Lasso(max_iter=10000,alpha=0.001)",CLUSTER_5,CLUSTER_5
lasso,sklearn.linear_model.Lasso(),CLUSTER_5,CLUSTER_5
lasso_fin,"sklearn.linear_model.Lasso(alpha=100,max_iter=50000)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df_temp_train[high_corr_cols],
df_temp_train[['SalePrice']])",CLUSTER_5,CLUSTER_5
scaler_,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
scaler_reg_X,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
scaler_reg_y,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
scaler_X,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
scaler_X_fin,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
clf,"sklearn.model_selection.GridSearchCV(lasso,params,cv=5)",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(os.getenv(""PUIDATA"")",CLUSTER_10,CLUSTER_4
df['date'],pandas.to_datetime(df['starttime']),CLUSTER_10,CLUSTER_4
str,"re.sub(r'[^\w]|_','',str)",CLUSTER_8,CLUSTER_4
str,"re.sub(""^\d+\s|\s\d+\s|\s\d+$"","""",str)",CLUSTER_8,CLUSTER_4
fo,pandas.read_excel('2017.xls'),CLUSTER_8,CLUSTER_4
x,"y=numpy.arange(-2.0,2.0,0.02)",CLUSTER_1,CLUSTER_10
zs,"numpy.array([fun(x,y)",CLUSTER_1,CLUSTER_10
r,"numpy.linspace(0,1.5,220)",CLUSTER_1,CLUSTER_10
p,"numpy.linspace(0,2*np.pi,220)",CLUSTER_1,CLUSTER_10
"R,P","numpy.meshgrid(r,p)",CLUSTER_1,CLUSTER_10
"X,Y","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
imgplot,matplotlib.pyplot.imshow(img),CLUSTER_1,CLUSTER_10
df,"pandas.read_table(""../../data/raw/TB_INTERACCIONES.tsv"",encoding=""latin-1"")",CLUSTER_8,CLUSTER_3
env,sklearn.covariance.EllipticEnvelope(contamination=.01),CLUSTER_5,CLUSTER_5
"features,col","sklearn.datasets.make_blobs(centers=1,cluster_std=.90)",CLUSTER_5,CLUSTER_5
boxes,numpy.array(rectsTypeA),CLUSTER_12,CLUSTER_11
xs,"numpy.asarray(plotx,dtype=np.int32)",CLUSTER_12,CLUSTER_11
ys,"numpy.asarray(ploty,dtype=np.int32)",CLUSTER_12,CLUSTER_11
blankStrip,"numpy.zeros((h-dead_y,w)",CLUSTER_12,CLUSTER_11
blankStrip,"numpy.zeros((hUs-dead_y,w)",CLUSTER_12,CLUSTER_11
remain,numpy.where(mask),CLUSTER_12,CLUSTER_11
deadzone_mask,"numpy.concatenate((deadzoneU,blankStrip)",CLUSTER_12,CLUSTER_11
deadzone_mask,"numpy.concatenate((deadzoneU,blankStrip)",CLUSTER_12,CLUSTER_11
stripsPu[0],"numpy.concatenate((dead_strip,rest_strip)",CLUSTER_12,CLUSTER_11
pUmap,"numpy.concatenate(stripsPu,axis=0)",CLUSTER_12,CLUSTER_11
stripsPv[0],"numpy.concatenate((top_strip,bot_strip)",CLUSTER_12,CLUSTER_11
stripsPv[1],"numpy.concatenate((top_strip,bot_strip)",CLUSTER_12,CLUSTER_11
newV,"numpy.concatenate(stripsPv,axis=1)",CLUSTER_12,CLUSTER_11
disp,numpy.zeros_like(vboat.img),CLUSTER_12,CLUSTER_11
borderb,"numpy.ones((1,w,3)",CLUSTER_12,CLUSTER_11
borders,"numpy.ones((h,1,3)",CLUSTER_12,CLUSTER_11
tK,"numpy.ones((3,2)",CLUSTER_12,CLUSTER_11
kernel,"numpy.ones((4,4)",CLUSTER_12,CLUSTER_11
idxs,numpy.argsort(y2),CLUSTER_12,CLUSTER_11
tmpMean,numpy.mean(tmp),CLUSTER_12,CLUSTER_11
summed,"numpy.sum(copy,axis=1)",CLUSTER_12,CLUSTER_11
total,numpy.sum(summed),CLUSTER_12,CLUSTER_11
b,2;d=numpy.ceil(nObs/float(b),CLUSTER_12,CLUSTER_11
plotx,"numpy.linspace(pxls[0,0],pxls[-1,0])",CLUSTER_12,CLUSTER_11
pts,"numpy.vstack(([xs],[ys])",CLUSTER_12,CLUSTER_11
tmp1,numpy.copy(pipe.vmap),CLUSTER_12,CLUSTER_11
tmp1,numpy.copy(pipe.vmap),CLUSTER_12,CLUSTER_11
tmp,numpy.copy(pipe.greyV),CLUSTER_12,CLUSTER_11
tmp2,numpy.copy(pipe.img),CLUSTER_12,CLUSTER_11
tmp2,numpy.copy(pipe.img),CLUSTER_12,CLUSTER_11
im,numpy.copy(pipe.img),CLUSTER_12,CLUSTER_11
raw_umap,numpy.copy(umap1),CLUSTER_12,CLUSTER_11
strips,numpy.copy(stripsU),CLUSTER_12,CLUSTER_11
black,numpy.copy(vmap),CLUSTER_12,CLUSTER_11
clone,numpy.copy(umap),CLUSTER_12,CLUSTER_11
disp,numpy.copy(img),CLUSTER_12,CLUSTER_11
tmp,numpy.copy(img),CLUSTER_12,CLUSTER_11
tImg,numpy.copy(vboat.img),CLUSTER_12,CLUSTER_11
tImg,numpy.copy(vboat.img),CLUSTER_12,CLUSTER_11
disp,numpy.copy(vboat.umap_processed),CLUSTER_12,CLUSTER_11
img,numpy.copy(vboat.img),CLUSTER_12,CLUSTER_11
disp,numpy.copy(vboat.img),CLUSTER_12,CLUSTER_11
mask,numpy.copy(disp),CLUSTER_12,CLUSTER_11
idxs,"numpy.delete(idxs,suppress)",CLUSTER_12,CLUSTER_11
fit,"numpy.poly1d(np.polyfit(pxls[:,0],pxls[:,1],2)",CLUSTER_12,CLUSTER_11
mask,"numpy.isin(non,supressed,invert=True)",CLUSTER_12,CLUSTER_11
rows,math.ceil(num_filters/cols),CLUSTER_4,CLUSTER_7
train_x,"numpy.ndarray((0,img_height*img_width*num_channels)",CLUSTER_4,CLUSTER_7
indices,numpy.arange(data_x.shape[0]),CLUSTER_4,CLUSTER_7
train_y,"numpy.array(train_y,dtype=np.int32)",CLUSTER_4,CLUSTER_7
test_y,"numpy.array(subset['labels'],dtype=np.int32)",CLUSTER_4,CLUSTER_7
shuffled_data_x,numpy.ascontiguousarray(data_x[indices]),CLUSTER_4,CLUSTER_7
shuffled_data_y,numpy.ascontiguousarray(data_y[indices]),CLUSTER_4,CLUSTER_7
img,"numpy.zeros([height,width,num_channels])",CLUSTER_4,CLUSTER_7
yp,"numpy.argmax(model_out,1)",CLUSTER_4,CLUSTER_7
yt,"numpy.argmax(y_batch,1)",CLUSTER_4,CLUSTER_7
yp,"numpy.argmax(cur_logits,1)",CLUSTER_4,CLUSTER_7
yt,"numpy.argmax(train_y_batch,1)",CLUSTER_4,CLUSTER_7
correct,"numpy.argmax(train_y_batch,1)",CLUSTER_4,CLUSTER_7
x_data,"numpy.linspace(1,num_points,num_points)",CLUSTER_4,CLUSTER_7
train_x,"numpy.vstack((train_x,subset['data'])",CLUSTER_4,CLUSTER_7
train_y,numpy.eye(10),CLUSTER_4,CLUSTER_7
test_y,numpy.eye(10),CLUSTER_4,CLUSTER_7
valid_y,numpy.eye(10),CLUSTER_4,CLUSTER_7
"fig,((ax1,ax2),(ax3,ax4))","matplotlib.pyplot.subplots(2,2,figsize=(16,8)",CLUSTER_4,CLUSTER_7
dataset,pandas.read_csv('C:/Users/Susan/Desktop/Salary_Data.csv'),CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
pad_sources_batch,"numpy.array(pad_sentence_batch(sources_batch,source_pad_int)",CLUSTER_2,CLUSTER_7
pad_targets_batch,"numpy.array(pad_sentence_batch(targets_batch,target_pad_int)",CLUSTER_2,CLUSTER_7
target,"numpy.pad(
target,
[(0,0)",CLUSTER_2,CLUSTER_7
logits,"numpy.pad(
logits,
[(0,0)",CLUSTER_2,CLUSTER_7
df,"pandas.read_csv(""../data/Advertising.csv"")",CLUSTER_8,CLUSTER_4
x,numpy.array(FarDefect[i]),CLUSTER_3,CLUSTER_6
centerMass,numpy.array(centerMass),CLUSTER_3,CLUSTER_6
dot,"numpy.dot(v1,v2)",CLUSTER_3,CLUSTER_6
kernel_square,"numpy.ones((11,11)",CLUSTER_3,CLUSTER_6
AverageDefectDistance,numpy.mean(sortedDefectsDistances[0:2]),CLUSTER_3,CLUSTER_6
angle,numpy.degrees(np.arccos(cos_angle),CLUSTER_3,CLUSTER_6
x_modulus,numpy.sqrt((v1*v1),CLUSTER_3,CLUSTER_6
y_modulus,numpy.sqrt((v2*v2),CLUSTER_3,CLUSTER_6
distance,"numpy.sqrt(np.power(x[0]-centerMass[0],2)",CLUSTER_3,CLUSTER_6
distance,"numpy.sqrt(np.power(fingers[i][0]-centerMass[0],2)",CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
dates,"numpy.linspace(1,inf.size,inf.size)",CLUSTER_1,CLUSTER_3
days,"numpy.linspace(1,fit.size,fit.size)",CLUSTER_1,CLUSTER_3
infections,pandas.read_csv('cases.csv'),CLUSTER_1,CLUSTER_3
x,"numpy.arange(0,2*np.pi,0.01)",CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
x,"numpy.arange(1,4)",CLUSTER_1,CLUSTER_10
y,"numpy.arange(10,15)",CLUSTER_1,CLUSTER_10
Z,numpy.sin(X),CLUSTER_1,CLUSTER_10
"X,Y","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_10
xyz_to_r,"numpy.array([0.41847,-0.15866,-0.082835],)",CLUSTER_1,CLUSTER_10
xyz_to_g,"numpy.array([-0.091169,0.25243,0.015708])",CLUSTER_1,CLUSTER_10
xyz_to_b,"numpy.array([0.00092090,-0.0025498,0.17860])",CLUSTER_1,CLUSTER_10
xyz_to_r,"numpy.array([3.2410,-1.5374,-0.4986])",CLUSTER_1,CLUSTER_10
xyz_to_g,"numpy.array([-0.9692,1.8760,0.0416])",CLUSTER_1,CLUSTER_10
xyz_to_b,"numpy.array([0.0556,-0.204,1.0570])",CLUSTER_1,CLUSTER_10
xyz_to_rgb,"numpy.array([[3.2406,-1.5372,-0.4986],[-0.9689,1.8758,0.0415],[0.0557,-0.204,1.0570]])",CLUSTER_1,CLUSTER_10
img,numpy.asarray(img),CLUSTER_1,CLUSTER_10
r,"numpy.dot(XYZ,xyz_to_r)",CLUSTER_1,CLUSTER_10
g,"numpy.dot(XYZ,xyz_to_g)",CLUSTER_1,CLUSTER_10
b,"numpy.dot(XYZ,xyz_to_b)",CLUSTER_1,CLUSTER_10
rgb_img,"numpy.dot(XYZ,xyz_to_rgb)",CLUSTER_1,CLUSTER_10
r,"numpy.dot(XYZ,xyz_to_r)",CLUSTER_1,CLUSTER_10
g,"numpy.dot(XYZ,xyz_to_g)",CLUSTER_1,CLUSTER_10
b,"numpy.dot(XYZ,xyz_to_b)",CLUSTER_1,CLUSTER_10
X,"numpy.sum(x*nhimg,axis=2)",CLUSTER_1,CLUSTER_10
Y,"numpy.sum(y*nhimg,axis=2)",CLUSTER_1,CLUSTER_10
Z,"numpy.sum(z*nhimg,axis=2)",CLUSTER_1,CLUSTER_10
XYZ,"numpy.stack([X,Y,Z],2)",CLUSTER_1,CLUSTER_10
rgb_img,"numpy.stack([r,g,b],axis=2)",CLUSTER_1,CLUSTER_10
rgb_img2,"numpy.stack([r,g,b],axis=2)",CLUSTER_1,CLUSTER_10
cmf,"numpy.loadtxt(""CIE1931-2deg-XYZ.csv"",delimiter="","")",CLUSTER_1,CLUSTER_10
sd_light_source,"numpy.loadtxt(""lamp_spectrum.csv"",skiprows=1,dtype=""float"")",CLUSTER_1,CLUSTER_10
sd_light_source,"numpy.loadtxt(""lamp_spectrum.csv"",skiprows=1,dtype=""float"")",CLUSTER_1,CLUSTER_10
xyz_to_rgb,numpy.linalg.inv(rgb_to_xyz),CLUSTER_1,CLUSTER_10
"baseball[""pay_category""]","pandas.cut(baseball[""Salary""],bins,labels=[""low"",""average"",""high""])",CLUSTER_7,CLUSTER_1
baseball,"pandas.read_csv(""../assets/data/hitters.csv"")",CLUSTER_7,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(baseball[[""AtBat"",""HmRun"",""Years"",""Assists"",""Errors""]],
baseball[""Salary""],
test_size=0.3,
random_state=42)",CLUSTER_7,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(dt,X_train,y_train,cv=10,scoring=""neg_mean_squared_error"")",CLUSTER_7,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(rf,X_train,y_train,cv=10,scoring=""neg_mean_squared_error"")",CLUSTER_7,CLUSTER_1
dt,sklearn.tree.DecisionTreeRegressor(min_samples_leaf=5),CLUSTER_7,CLUSTER_1
dt,"sklearn.tree.DecisionTreeRegressor(min_samples_leaf=5,max_depth=4)",CLUSTER_7,CLUSTER_1
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=11,min_samples_leaf=5)",CLUSTER_7,CLUSTER_1
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=11,min_samples_leaf=5)",CLUSTER_7,CLUSTER_1
grid,GridSearchCV(estimator=sklearn.ensemble.RandomForestRegressor(),CLUSTER_7,CLUSTER_1
rf_final,"sklearn.ensemble.RandomForestRegressor(max_depth=7,min_samples_leaf=10,n_estimators=9)",CLUSTER_7,CLUSTER_1
grid,sklearn.model_selection.GridSearchCV(estimator=RandomForestRegressor(),CLUSTER_7,CLUSTER_1
f_result,"pandas.DataFrame({'Model':Model,'AccuracyScore':score,'Cross_Val_Score':cvs,'ROC-AUC_Curve':rocscore})",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('Customer_Churn.csv'),CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,random_state=42,stratify=y)",CLUSTER_7,CLUSTER_8
sc,"sklearn.model_selection.cross_val_score(model,x,y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
knc,sklearn.neighbors.KNeighborsClassifier(n_neighbors=8),CLUSTER_7,CLUSTER_8
svc,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_8
dtc,sklearn.tree.DecisionTreeClassifier(random_state=6),CLUSTER_7,CLUSTER_8
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=200,random_state=42)",CLUSTER_7,CLUSTER_8
AS,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_7,CLUSTER_8
roc_auc,"sklearn.metrics.auc(false_positive_rate,true_positive_rate)",CLUSTER_7,CLUSTER_8
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_7,CLUSTER_8
nearbyVenues,"pandas.DataFrame([],columns=['Venue','VenueCategory','VenueLatitude','VenueLongitude','Neighborhood','NeighborhoodLatitude','NeighborhoodLongitude'])",CLUSTER_9,CLUSTER_2
df_initial,pandas.read_csv('restaurant_dataframe.csv'),CLUSTER_9,CLUSTER_2
resp,"requests.get(url=url,params=params)",CLUSTER_9,CLUSTER_2
data,json.loads(resp.text),CLUSTER_9,CLUSTER_2
start,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
features,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_10
pca,"sklearn.decomposition.PCA(n_components=0.99,whiten=True)",CLUSTER_5,CLUSTER_10
pca_nowhiten,sklearn.decomposition.PCA(n_components=0.99),CLUSTER_5,CLUSTER_10
pca,sklearn.decomposition.PCA(whiten=True),CLUSTER_5,CLUSTER_10
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
kpca,"sklearn.decomposition.KernelPCA(kernel='rbf',gamma=15,n_components=1)",CLUSTER_5,CLUSTER_10
"features,_","sklearn.datasets.make_circles(n_samples=100,random_state=1,noise=0.1,factor=0.1)",CLUSTER_5,CLUSTER_10
filename,os.fsdecode(os.fsencode((str(wd),CLUSTER_0,CLUSTER_11
filename,os.fsdecode(os.fsencode((str(wd),CLUSTER_0,CLUSTER_11
test_df_hypertension,"pandas.DataFrame({'filename':test_hypertension_indicator_filenames,'test_token':test_hypertension_indicator_tokens,'test_label':test_hypertension_indicator_labels})",CLUSTER_0,CLUSTER_11
gold_df_hypertension,"pandas.DataFrame({'filename':gold_hypertension_indicator_filenames,'gold_token':gold_hypertension_indicator_tokens,'gold_label':gold_hypertension_indicator_labels})",CLUSTER_0,CLUSTER_11
test_df,"pandas.DataFrame({'filename':test_filenames,'test_token':test_tokens,'test_label':test_labels})",CLUSTER_0,CLUSTER_11
gold_df,"pandas.DataFrame({'filename':gold_filenames,'gold_token':gold_tokens,'gold_label':gold_labels})",CLUSTER_0,CLUSTER_11
test_df_diabetes,"pandas.DataFrame({'filename':test_diabetes_indicator_filenames,'test_token':test_diabetes_indicator_tokens,'test_label':test_diabetes_indicator_labels})",CLUSTER_0,CLUSTER_11
gold_df_diabetes,"pandas.DataFrame({'filename':gold_diabetes_indicator_filenames,'gold_token':gold_diabetes_indicator_tokens,'gold_label':gold_diabetes_indicator_labels})",CLUSTER_0,CLUSTER_11
test_combined,"pandas.concat([tdf,bert_results['classLabel']],axis=1)",CLUSTER_0,CLUSTER_11
test_DI_combined,"pandas.concat([tdf,bert_DI_results['PredictedLabel']],axis=1)",CLUSTER_0,CLUSTER_11
test_hypertension_combined,"pandas.concat([tdf,bert_hypertension_results['PredictedLabel']],axis=1)",CLUSTER_0,CLUSTER_11
bert_results,"pandas.read_csv(file_path,sep='\t',header=None)",CLUSTER_0,CLUSTER_11
bert_DI_results,"pandas.read_csv(""bert_output_results/diabetes/test_results.tsv"",sep='\t',header=None)",CLUSTER_0,CLUSTER_11
bert_hypertension_results,"pandas.read_csv(""bert_output_results/hypertension/bert_run1_test_results.tsv"",sep='\t',header=None)",CLUSTER_0,CLUSTER_11
ntest,numpy.array(bert_hypertension_results),CLUSTER_0,CLUSTER_11
df,"pandas.read_csv(""BankNote_Authentication.csv"")",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=23,test_size=0.3)",CLUSTER_7,CLUSTER_5
classifier,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
Neighborhood_Good,"pandas.DataFrame(np.zeros((all_data.shape[0],1)",CLUSTER_5,CLUSTER_5
price_category,"pandas.DataFrame(np.zeros((all_data.shape[0],1)",CLUSTER_5,CLUSTER_5
reconstruct,"pandas.DataFrame(np.zeros((all_data.shape[0],1)",CLUSTER_5,CLUSTER_5
recon_after_buy,"pandas.DataFrame(np.zeros((all_data.shape[0],1)",CLUSTER_5,CLUSTER_5
build_eq_buy,"pandas.DataFrame(np.zeros((all_data.shape[0],1)",CLUSTER_5,CLUSTER_5
solution,"pandas.DataFrame({""id"":p,""SalePrice"":test.Id},columns=['SalePrice','id'])",CLUSTER_5,CLUSTER_5
pc,pandas.Series(np.zeros(train.shape[0]),CLUSTER_5,CLUSTER_5
coef,"pandas.Series(model_lasso.coef_,index=X_train.columns)",CLUSTER_5,CLUSTER_5
all_data,"pandas.concat((train.loc[:,'MSSubClass':'SaleCondition'],
test.loc[:,'MSSubClass':'SaleCondition'])",CLUSTER_5,CLUSTER_5
qu_list,"pandas.concat((overall_poor_qu,overall_good_qu,overall_poor_cond,overall_good_cond,exter_poor_qu,
exter_good_qu,exter_poor_cond,exter_good_cond,bsmt_poor_cond,bsmt_good_cond,garage_poor_qu,
garage_good_qu,garage_poor_cond,garage_good_cond,kitchen_poor_qu,kitchen_good_qu)",CLUSTER_5,CLUSTER_5
year_map,pandas.concat(pd.Series('YearGroup'+str(i+1),CLUSTER_5,CLUSTER_5
X,"pandas.concat((X,newer_dwelling,season,reconstruct,recon_after_buy,
qu_list,bad_heating,MasVnrType_Any,price_category,build_eq_buy)",CLUSTER_5,CLUSTER_5
XP,pandas.concat(poly(X),CLUSTER_5,CLUSTER_5
X,"pandas.concat((X,XP)",CLUSTER_5,CLUSTER_5
imp_coef,pandas.concat([coef.head(23),CLUSTER_5,CLUSTER_5
imp_coef,pandas.concat([coef.tail(23),CLUSTER_5,CLUSTER_5
X_t,"pandas.get_dummies(train.loc[:,columns_for_pc],sparse=True)",CLUSTER_5,CLUSTER_5
X_t,"pandas.get_dummies(all_data.loc[:,columns_for_pc],sparse=True)",CLUSTER_5,CLUSTER_5
X,pandas.get_dummies(all_data),CLUSTER_5,CLUSTER_5
train,"pandas.read_csv(""train.csv"")",CLUSTER_5,CLUSTER_5
test,"pandas.read_csv(""test.csv"")",CLUSTER_5,CLUSTER_5
outliers_id,"numpy.array([524,1299])",CLUSTER_5,CLUSTER_5
elas_preds,numpy.expm1(clf2.predict(xtrain),CLUSTER_5,CLUSTER_5
xgb_preds,numpy.expm1(clf3.predict(xtrain),CLUSTER_5,CLUSTER_5
resid,numpy.expm1(ytrain),CLUSTER_5,CLUSTER_5
elas_preds,numpy.expm1(clf2.predict(xtest),CLUSTER_5,CLUSTER_5
xgb_preds,numpy.expm1(clf3.predict(xtest),CLUSTER_5,CLUSTER_5
up_resid,numpy.expm1(ytrain),CLUSTER_5,CLUSTER_5
elas_preds,numpy.expm1(clf2.predict(X_test),CLUSTER_5,CLUSTER_5
xgb_preds,numpy.expm1(clf3.predict(X_test),CLUSTER_5,CLUSTER_5
"all_data.loc[:,t]","numpy.log1p(all_data.loc[:,t])",CLUSTER_5,CLUSTER_5
y,numpy.log1p(train.SalePrice),CLUSTER_5,CLUSTER_5
"all_data.loc[all_data['LotFrontage'].isnull(),'LotFrontage']","numpy.polyval(p,all_data.loc[all_data['LotFrontage'].isnull()",CLUSTER_5,CLUSTER_5
p_poly_val,"numpy.polyfit(train['OverallQual'],train['SalePrice'],3)",CLUSTER_5,CLUSTER_5
p,"numpy.polyfit(x[t],y[t],1)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(18,6)",CLUSTER_5,CLUSTER_5
model_lasso,"sklearn.linear_model.Lasso(alpha=3e-4,max_iter=50000)",CLUSTER_5,CLUSTER_5
clf,"sklearn.ensemble.RandomForestRegressor(n_estimators=300,n_jobs=-1,max_features=0.9,
max_depth=9,min_samples_split=25,min_samples_leaf=10,
random_state=36
)",CLUSTER_5,CLUSTER_5
svm,"sklearn.svm.SVC(C=100,gamma=0.0001,kernel='rbf')",CLUSTER_5,CLUSTER_5
scorer,"sklearn.metrics.make_scorer(mean_squared_error,False)",CLUSTER_5,CLUSTER_5
clf2,"sklearn.linear_model.ElasticNet(alpha=0.0005,l1_ratio=0.9)",CLUSTER_5,CLUSTER_5
stock_response,requests.get(url),CLUSTER_9,CLUSTER_2
response,requests.get(url),CLUSTER_9,CLUSTER_2
df,"pandas.DataFrame(response['dataset']['data'],columns=response['dataset']['column_names'])",CLUSTER_9,CLUSTER_2
processed_data,"pandas.get_dummies(data,columns=['rank'])",CLUSTER_1,CLUSTER_3
data,pandas.read_csv('student_data.csv'),CLUSTER_1,CLUSTER_3
X,"numpy.array(data[[""gre"",""gpa""]])",CLUSTER_1,CLUSTER_3
y,"numpy.array(data[""admit""])",CLUSTER_1,CLUSTER_3
X,numpy.array(processed_data),CLUSTER_1,CLUSTER_3
rotation_matrix,"numpy.array([[cosval,0,sinval],
[0,1,0],
[-sinval,0,cosval]])",CLUSTER_2,CLUSTER_7
rotated_data,"numpy.zeros(batch_data.shape,dtype=np.float32)",CLUSTER_2,CLUSTER_7
"rotated_data[k,...]","numpy.dot(shape_pc.reshape((-1,3)",CLUSTER_2,CLUSTER_7
jittered_data,"numpy.clip(sigma*np.random.randn(B,N,C)",CLUSTER_2,CLUSTER_7
cosval,numpy.cos(rotation_angle),CLUSTER_2,CLUSTER_7
sinval,numpy.sin(rotation_angle),CLUSTER_2,CLUSTER_7
train_points_r,numpy.load('data/train_features.npy'),CLUSTER_2,CLUSTER_7
train_labels_r,numpy.load('data/train_labels.npy'),CLUSTER_2,CLUSTER_7
test_points_r,numpy.load('data/test_features.npy'),CLUSTER_2,CLUSTER_7
test_labels_r,numpy.load('data/test_labels.npy'),CLUSTER_2,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_7
df,"pandas.DataFrame({""Publisher"":publishers,""Values"":values})",CLUSTER_4,CLUSTER_11
writer,"pandas.ExcelWriter(data_file,engine='xlsxwriter')",CLUSTER_4,CLUSTER_11
hybrid,pandas.Series([0]*len(graph_df),CLUSTER_4,CLUSTER_11
full_oa,"pandas.Series(graph_df[col,publisher,""FullOA""])",CLUSTER_4,CLUSTER_11
full_oa,pandas.Series([0]*len(graph_df),CLUSTER_4,CLUSTER_11
hybrid,pandas.Series([0]*len(graph_df),CLUSTER_4,CLUSTER_11
full_oa,pandas.Series([0]*len(graph_df),CLUSTER_4,CLUSTER_11
df,"pandas.concat([topdf,otherdf,totaldf])",CLUSTER_4,CLUSTER_11
master_df,pandas.concat(df_list),CLUSTER_4,CLUSTER_11
temp_df,"pandas.read_excel(os.path.join(folder,f)",CLUSTER_4,CLUSTER_11
bins,"numpy.arange(start,x.max()",CLUSTER_4,CLUSTER_11
mean,numpy.mean(a),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,8)",CLUSTER_4,CLUSTER_11
"fig,ax1","matplotlib.pyplot.subplots(figsize=(9,6.8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,6.8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6.8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,6.8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,6.8)",CLUSTER_4,CLUSTER_11
se,scipy.stats.sem(a),CLUSTER_4,CLUSTER_11
x,"numpy.linspace(-2.0,2.0,N)",CLUSTER_12,CLUSTER_10
y,"numpy.linspace(-1.0,1.0,N)",CLUSTER_12,CLUSTER_10
"X,Y","numpy.meshgrid(x,y)",CLUSTER_12,CLUSTER_10
covid19_pivoted_df_2,pandas.DataFrame(covid19_pivoted_df.to_records(),CLUSTER_11,CLUSTER_12
covid19_df,pandas.read_csv(covid19_path),CLUSTER_11,CLUSTER_12
self.x,numpy.arange(size),CLUSTER_1,CLUSTER_10
self.y,numpy.arange(size),CLUSTER_1,CLUSTER_10
self.cells,"numpy.zeros((size,size)",CLUSTER_1,CLUSTER_10
newcells,"numpy.zeros((self.size,self.size)",CLUSTER_1,CLUSTER_10
self.initTree,numpy.count_nonzero(self.cells==1),CLUSTER_1,CLUSTER_10
self.initEmpty,numpy.count_nonzero(self.cells==0),CLUSTER_1,CLUSTER_10
self.burnt,numpy.count_nonzero(newcells==3),CLUSTER_1,CLUSTER_10
self.plt,"matplotlib.pyplot.imshow(self.cells,interpolation='nearest',
origin='bottom',
vmin=Forest.states[""EMPTY""],
vmax=Forest.states[""BURNT""],
cmap=ff1)",CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
db,pandas.read_csv('data/tokyo.csv'),CLUSTER_12,CLUSTER_3
ri,numpy.arange(len(db),CLUSTER_12,CLUSTER_3
t1,time.time(),CLUSTER_1,CLUSTER_10
t2,time.time(),CLUSTER_1,CLUSTER_10
t3,time.time(),CLUSTER_1,CLUSTER_10
gamma,"numpy.asarray([1.0,2.0,3.0])",CLUSTER_1,CLUSTER_10
beta,"numpy.asarray([11.0,12.0,13.0])",CLUSTER_1,CLUSTER_10
gamma,"numpy.asarray([3.0,3.0,3.0])",CLUSTER_1,CLUSTER_10
beta,"numpy.asarray([5.0,5.0,5.0])",CLUSTER_1,CLUSTER_10
beta,"numpy.zeros((D3,)",CLUSTER_1,CLUSTER_10
beta,numpy.zeros(D3),CLUSTER_1,CLUSTER_10
dx,"numpy.zeros((N,D)",CLUSTER_1,CLUSTER_10
dd,"numpy.zeros(3,4)",CLUSTER_1,CLUSTER_10
self.params[bias_name],numpy.zeros(hidden_dims[0]),CLUSTER_1,CLUSTER_10
self.params[beta_name],numpy.zeros(hidden_dims[0]),CLUSTER_1,CLUSTER_10
self.params[beta_name],numpy.zeros(hidden_dims[0]),CLUSTER_1,CLUSTER_10
self.params[bias_name],numpy.zeros(hidden_dims[k]),CLUSTER_1,CLUSTER_10
self.params[beta_name],numpy.zeros(hidden_dims[k]),CLUSTER_1,CLUSTER_10
self.params[beta_name],numpy.zeros(hidden_dims[k]),CLUSTER_1,CLUSTER_10
self.params[bias_name],numpy.zeros(num_classes),CLUSTER_1,CLUSTER_10
beta,numpy.zeros(D3),CLUSTER_1,CLUSTER_10
cache,numpy.empty(len(cache_list),CLUSTER_1,CLUSTER_10
cache,numpy.empty(len(cache_list),CLUSTER_1,CLUSTER_10
cache,numpy.empty(len(cache_list),CLUSTER_1,CLUSTER_10
gamma,"numpy.ones((D3,)",CLUSTER_1,CLUSTER_10
gamma,numpy.ones(D3),CLUSTER_1,CLUSTER_10
self.params[gamma_name],numpy.ones(hidden_dims[0]),CLUSTER_1,CLUSTER_10
self.params[gamma_name],numpy.ones(hidden_dims[0]),CLUSTER_1,CLUSTER_10
self.params[gamma_name],numpy.ones(hidden_dims[k]),CLUSTER_1,CLUSTER_10
self.params[gamma_name],numpy.ones(hidden_dims[k]),CLUSTER_1,CLUSTER_10
gamma,numpy.ones(D3),CLUSTER_1,CLUSTER_10
sample_mean,"numpy.mean(x,axis=0)",CLUSTER_1,CLUSTER_10
sample_mean,"numpy.mean(x,axis=0)",CLUSTER_1,CLUSTER_10
sample_mean,"numpy.mean(x,axis=0)",CLUSTER_1,CLUSTER_10
input_temp,"numpy.reshape(X,(X.shape[0],-1)",CLUSTER_1,CLUSTER_10
sample_std,"numpy.std(x,axis=0)",CLUSTER_1,CLUSTER_10
sample_std,"numpy.std(x,axis=0)",CLUSTER_1,CLUSTER_10
sample_std,"numpy.std(x,axis=0)",CLUSTER_1,CLUSTER_10
dbeta,"numpy.sum(dout,axis=0)",CLUSTER_1,CLUSTER_10
dgamma,"numpy.sum(dout*x_hat,axis=0)",CLUSTER_1,CLUSTER_10
dbeta,"numpy.sum(dout,axis=0)",CLUSTER_1,CLUSTER_10
dgamma,"numpy.sum(dout*x_hat,axis=0)",CLUSTER_1,CLUSTER_10
di_var,"numpy.sum(dx_hat*x_mu,axis=0)",CLUSTER_1,CLUSTER_10
dbeta,"numpy.sum(dout,axis=0)",CLUSTER_1,CLUSTER_10
dgamma,"numpy.sum(dout*x_hat,axis=0)",CLUSTER_1,CLUSTER_10
di_var,"numpy.sum(dx_hat*x_mu,axis=0)",CLUSTER_1,CLUSTER_10
reg_loss,numpy.sum(W1*W1),CLUSTER_1,CLUSTER_10
reg_loss+,numpy.sum(W_temp*W_temp),CLUSTER_1,CLUSTER_10
reg_loss+,numpy.sum(W_temp*W_temp),CLUSTER_1,CLUSTER_10
num,"numpy.sum(exp_scores,axis=1)",CLUSTER_1,CLUSTER_10
dbeta,"numpy.sum(dout,axis=0)",CLUSTER_1,CLUSTER_10
dgamma,"numpy.sum(dout*x_hat,axis=0)",CLUSTER_1,CLUSTER_10
di_var,"numpy.sum(dx_hat*x_mu,axis=0)",CLUSTER_1,CLUSTER_10
exp_scores,numpy.exp(scores),CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
dx_hat,"numpy.multiply(dout,gamma)",CLUSTER_1,CLUSTER_10
dx_hat,"numpy.multiply(dout,gamma)",CLUSTER_1,CLUSTER_10
dx_mu_1,"numpy.multiply(dx_hat,i_var)",CLUSTER_1,CLUSTER_10
dx_hat,"numpy.multiply(dout,gamma)",CLUSTER_1,CLUSTER_10
dx_mu_1,"numpy.multiply(dx_hat,i_var)",CLUSTER_1,CLUSTER_10
dx_hat,"numpy.multiply(dout,gamma)",CLUSTER_1,CLUSTER_10
dx_mu_1,"numpy.multiply(dx_hat,i_var)",CLUSTER_1,CLUSTER_10
i_var,numpy.reciprocal(sqrt_var),CLUSTER_1,CLUSTER_10
i_var,numpy.reciprocal(sqrt_var),CLUSTER_1,CLUSTER_10
den,numpy.reciprocal(num),CLUSTER_1,CLUSTER_10
i_var,numpy.reciprocal(sqrt_var),CLUSTER_1,CLUSTER_10
R,numpy.sqrt(np.reciprocal((1.0/N),CLUSTER_1,CLUSTER_10
sqrt_var,numpy.sqrt(var+eps),CLUSTER_1,CLUSTER_10
sqrt_var,numpy.sqrt(var+eps),CLUSTER_1,CLUSTER_10
sqrt_var,numpy.sqrt(var+eps),CLUSTER_1,CLUSTER_10
weight_scales,"numpy.logspace(-4,-1,num=15)",CLUSTER_1,CLUSTER_10
cache['BN_cache'+'1'],numpy.copy(cache_BN),CLUSTER_1,CLUSTER_10
cache['BN_cache'+'1'],numpy.copy(cache_BN),CLUSTER_1,CLUSTER_10
h_relu,numpy.copy(h_b),CLUSTER_1,CLUSTER_10
cache['Input'+'1'],numpy.copy(input_temp),CLUSTER_1,CLUSTER_10
cache['Hidden'+'1'],numpy.copy(h_b),CLUSTER_1,CLUSTER_10
input_temp,numpy.copy(h_relu),CLUSTER_1,CLUSTER_10
cache['BN_cache'+str(k+1)],numpy.copy(cache_BN),CLUSTER_1,CLUSTER_10
cache['BN_cache'+str(k+1)],numpy.copy(cache_BN),CLUSTER_1,CLUSTER_10
h_relu,numpy.copy(h_b),CLUSTER_1,CLUSTER_10
cache['Input'+str(k+1)],numpy.copy(input_temp),CLUSTER_1,CLUSTER_10
cache['Hidden'+str(k+1)],numpy.copy(h_b),CLUSTER_1,CLUSTER_10
input_temp,numpy.copy(h_relu),CLUSTER_1,CLUSTER_10
cache['Input'+str(self.num_layers)],numpy.copy(input_temp),CLUSTER_1,CLUSTER_10
dy,numpy.copy(exp_scores),CLUSTER_1,CLUSTER_10
grads['W'+str(self.num_layers)],numpy.copy(np.true_divide(cache['Input'+str(self.num_layers),CLUSTER_1,CLUSTER_10
grads['b'+str(self.num_layers)],"numpy.copy(np.true_divide(np.sum(dy,axis=0)",CLUSTER_1,CLUSTER_10
grads['gamma'+str(k+1)],"numpy.copy(np.true_divide(dgamma,num_train)",CLUSTER_1,CLUSTER_10
grads['beta'+str(k+1)],"numpy.copy(np.true_divide(dbeta,num_train)",CLUSTER_1,CLUSTER_10
grads['gamma'+str(k+1)],"numpy.copy(np.true_divide(dgamma,num_train)",CLUSTER_1,CLUSTER_10
grads['beta'+str(k+1)],"numpy.copy(np.true_divide(dbeta,num_train)",CLUSTER_1,CLUSTER_10
grads['W'+str(k+1)],"numpy.copy(np.true_divide(dw,num_train)",CLUSTER_1,CLUSTER_10
grads['b'+str(k+1)],"numpy.copy(np.true_divide(db,num_train)",CLUSTER_1,CLUSTER_10
grads['gamma'+str(1)],"numpy.copy(np.true_divide(dgamma,num_train)",CLUSTER_1,CLUSTER_10
grads['beta'+str(1)],"numpy.copy(np.true_divide(dbeta,num_train)",CLUSTER_1,CLUSTER_10
grads['gamma'+str(1)],"numpy.copy(np.true_divide(dgamma,num_train)",CLUSTER_1,CLUSTER_10
grads['beta'+str(1)],"numpy.copy(np.true_divide(dbeta,num_train)",CLUSTER_1,CLUSTER_10
grads['W'+str(1)],"numpy.copy(np.true_divide(dw,num_train)",CLUSTER_1,CLUSTER_10
grads['b'+str(1)],"numpy.copy(np.true_divide(db,num_train)",CLUSTER_1,CLUSTER_10
bold_ho_pPHG_r,"numpy.array(bold_ho_r[:,roi_id])",CLUSTER_4,CLUSTER_8
bold_ho_SPL_r,"numpy.array(bold_ho_r[:,roi_id])",CLUSTER_4,CLUSTER_8
bold_ho_SPL_l,"numpy.array(bold_ho_l[:,roi_id])",CLUSTER_4,CLUSTER_8
all_corr,"numpy.zeros((num_voxels,1)",CLUSTER_4,CLUSTER_8
seed_corr,"numpy.zeros((num_voxels,1)",CLUSTER_4,CLUSTER_8
seed_corr_fishZ,numpy.arctanh(seed_corr),CLUSTER_4,CLUSTER_8
"all_corr[v,0]",numpy.corrcoef(bold_lPPA_r.flatten(),CLUSTER_4,CLUSTER_8
"seed_corr[v,0]",numpy.corrcoef(seedBold.flatten(),CLUSTER_4,CLUSTER_8
labels,numpy.unique(atlas_data),CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(11,10)",CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(11,10)",CLUSTER_4,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(2,2,figsize=(16,7)",CLUSTER_4,CLUSTER_8
atlas_pd,pandas.DataFrame(atlas),CLUSTER_4,CLUSTER_8
start_time,time.time(),CLUSTER_4,CLUSTER_8
end_time,time.time(),CLUSTER_4,CLUSTER_8
fig1,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
x,"numpy.arange(0,2*np.pi,0.01)",CLUSTER_3,CLUSTER_10
y,numpy.sin(x),CLUSTER_3,CLUSTER_10
x,"numpy.linspace(0,10,10000)",CLUSTER_3,CLUSTER_10
text.set(text,time.ctime(),CLUSTER_3,CLUSTER_10
data,"pandas.read_csv(""data/weight-height.csv"")",CLUSTER_1,CLUSTER_3
df,pandas.read_csv(input_path),CLUSTER_8,CLUSTER_3
train_data,pandas.read_csv('./training.csv'),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(target,sep="""")",CLUSTER_8,CLUSTER_11
df,"pandas.read_csv(target,sep="""")",CLUSTER_8,CLUSTER_11
tables,pandas.read_html(url),CLUSTER_9,CLUSTER_2
travel_df,pandas.read_excel(file_name),CLUSTER_8,CLUSTER_4
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_11,CLUSTER_3
predictions_ARIMA_diff,"pandas.Series(results_ARIMA.fittedvalues,copy=True)",CLUSTER_11,CLUSTER_3
predictions_ARIMA_log,"pandas.Series(ts_log.ix[0],index=ts_log.index)",CLUSTER_11,CLUSTER_3
data,pandas.read_csv('AirPassengers.csv'),CLUSTER_11,CLUSTER_3
data['Date'],"pandas.to_datetime(data['Month'],format='%Y-%m')",CLUSTER_11,CLUSTER_3
predictions_ARIMA,numpy.exp(predictions_ARIMA_log),CLUSTER_11,CLUSTER_3
ts_log,numpy.log(ts),CLUSTER_11,CLUSTER_3
X,"numpy.zeros((n,160,320,3)",CLUSTER_4,CLUSTER_0
X,"numpy.concatenate([X,X[:,::-1]],axis=0)",CLUSTER_4,CLUSTER_0
y,"numpy.concatenate([y,-y],axis=0)",CLUSTER_4,CLUSTER_0
df,pandas.read_csv('../record2/driving_log.csv'),CLUSTER_4,CLUSTER_0
a0,"numpy.zeros((m,n_a)",CLUSTER_12,CLUSTER_6
c0,"numpy.zeros((m,n_a)",CLUSTER_12,CLUSTER_6
x_initializer,"numpy.zeros((1,1,78)",CLUSTER_12,CLUSTER_6
a_initializer,"numpy.zeros((1,n_a)",CLUSTER_12,CLUSTER_6
c_initializer,"numpy.zeros((1,n_a)",CLUSTER_12,CLUSTER_6
indices,"numpy.argmax(pred,axis=2)",CLUSTER_12,CLUSTER_6
frame,"pandas.DataFrame({'col1':['A','B',np.NaN,'C','D'],
'col2':['F',np.NaN,'G','H','I']})",CLUSTER_8,CLUSTER_3
df1,"pandas.DataFrame({'key':['A','B','C','D'],
'value':np.random.randn(4)",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame({'key':['B','D','D','E'],
'value':np.random.randn(4)",CLUSTER_8,CLUSTER_3
city1,"pandas.DataFrame({'city':['Chicago','SanFrancisco','NewYorkCity'],
'rank':range(1,4)",CLUSTER_8,CLUSTER_3
city2,"pandas.DataFrame({'city':['Chicago','Boston','LosAngeles'],
'rank':[1,4,5]})",CLUSTER_8,CLUSTER_3
tips,pandas.read_csv(r'../data/tips.csv'),CLUSTER_8,CLUSTER_3
result,"pandas.read_sql(query,conn)",CLUSTER_8,CLUSTER_3
data,"pandas.read_csv(join(DATA,'data_norway_sixcol.csv')",CLUSTER_4,CLUSTER_11
app_train,pandas.get_dummies(app_train),CLUSTER_4,CLUSTER_5
app_test,pandas.get_dummies(app_test),CLUSTER_4,CLUSTER_5
app_train,pandas.read_csv(f_app_train),CLUSTER_4,CLUSTER_5
app_test,pandas.read_csv(f_app_test),CLUSTER_4,CLUSTER_5
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_5
lda_model,"sklearn.decomposition.LatentDirichletAllocation(n_components=50,learning_method='online',random_state=777,max_iter=1)",CLUSTER_10,CLUSTER_4
x_boolean,"scipy.sparse.csr_matrix((data,(row,col)",CLUSTER_10,CLUSTER_4
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(figsize=figsize),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(figsize=figsize),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(figsize=figsize),CLUSTER_4,CLUSTER_11
x_data,"numpy.linspace(0,10,10)",CLUSTER_2,CLUSTER_7
y_label,"numpy.linspace(0,10,10)",CLUSTER_2,CLUSTER_7
x_test,"numpy.linspace(-1,11,10)",CLUSTER_2,CLUSTER_7
weights,"numpy.array([0.5,0.5])",CLUSTER_1,CLUSTER_3
weights,"numpy.array([0.5,0.5])",CLUSTER_1,CLUSTER_3
pfolio_var,"numpy.dot(weights.T,numpy.dot(sec_returns.cov()",CLUSTER_1,CLUSTER_3
sec_returns,numpy.log(sec_data/sec_data.shift(1),CLUSTER_1,CLUSTER_3
sec_data,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
start,time.time(),CLUSTER_10,CLUSTER_12
end,time.time(),CLUSTER_10,CLUSTER_12
X_train_cvec,pandas.DataFrame(cvec.fit_transform(X_train['text']),CLUSTER_0,CLUSTER_11
X_test_cvec,pandas.DataFrame(cvec.transform(X_test['text']),CLUSTER_0,CLUSTER_11
X_train_tvec,pandas.DataFrame(tvec.fit_transform(X_train['text']),CLUSTER_0,CLUSTER_11
X_test_tvec,pandas.DataFrame(tvec.transform(X_test['text']),CLUSTER_0,CLUSTER_11
X_train_cvec,pandas.DataFrame(cvec.fit_transform(X_train['text']),CLUSTER_0,CLUSTER_11
X_test_cvec,pandas.DataFrame(cvec.transform(X_test['text']),CLUSTER_0,CLUSTER_11
X_train_tvec,pandas.DataFrame(tvec.fit_transform(X_train['text']),CLUSTER_0,CLUSTER_11
X_test_tvec,pandas.DataFrame(tvec.transform(X_test['text']),CLUSTER_0,CLUSTER_11
cm_df,"pandas.DataFrame(cm,columns=['predictneg','predictpos'],index=['actualneg','actualpos'])",CLUSTER_0,CLUSTER_11
X_train_cvec,pandas.DataFrame(cvec.fit_transform(X_train['text']),CLUSTER_0,CLUSTER_11
X_test_cvec,pandas.DataFrame(cvec.transform(X_test['text']),CLUSTER_0,CLUSTER_11
word_freq,"pandas.DataFrame({'word':features,'freq':list(visualizer.count(docs)",CLUSTER_0,CLUSTER_11
word_freq,"pandas.DataFrame({'word':features,'freq':list(visualizer.count(docs)",CLUSTER_0,CLUSTER_11
X_test['y_test'],"pandas.Series(y_test,index=X_test.index)",CLUSTER_0,CLUSTER_11
X_test['y_pred'],"pandas.Series(y_pred,index=X_test.index)",CLUSTER_0,CLUSTER_11
X_test['word_count'],"pandas.Series([len(re.findall(r'\w+',x)",CLUSTER_0,CLUSTER_11
df,"pandas.concat([df_eat,df_science])",CLUSTER_0,CLUSTER_11
df_eat,pandas.read_pickle('./data/eatcheap.pkl'),CLUSTER_0,CLUSTER_11
df_science,pandas.read_pickle('./data/science.pkl'),CLUSTER_0,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_11
svc,"sklearn.svm.SVC(kernel='rbf',C=40,gamma=.01)",CLUSTER_0,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42,stratify=y)",CLUSTER_0,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42,stratify=y)",CLUSTER_0,CLUSTER_11
gs,"sklearn.model_selection.GridSearchCV(pipe,param_grid=pipe_params,cv=3,return_train_score=True)",CLUSTER_0,CLUSTER_11
gs,"sklearn.model_selection.GridSearchCV(pipe2,param_grid=pipe_params,cv=3,return_train_score=True)",CLUSTER_0,CLUSTER_11
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_0,CLUSTER_11
lr,"sklearn.linear_model.LogisticRegression(solver='lbfgs',C=3)",CLUSTER_0,CLUSTER_11
lr,"sklearn.linear_model.LogisticRegression(solver='lbfgs',C=4)",CLUSTER_0,CLUSTER_11
nb,sklearn.naive_bayes.MultinomialNB(alpha=1),CLUSTER_0,CLUSTER_11
nb,sklearn.naive_bayes.MultinomialNB(alpha=.3),CLUSTER_0,CLUSTER_11
nb,sklearn.naive_bayes.BernoulliNB(alpha=0.03),CLUSTER_0,CLUSTER_11
nb,sklearn.naive_bayes.BernoulliNB(alpha=.03),CLUSTER_0,CLUSTER_11
pipe,"sklearn.pipeline.Pipeline([
('cvec',CountVectorizer()",CLUSTER_0,CLUSTER_11
pipe2,"sklearn.pipeline.Pipeline([
('tvec',TfidfVectorizer()",CLUSTER_0,CLUSTER_11
vif,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
a,pandas.DataFrame(data[cols].values),CLUSTER_7,CLUSTER_8
a,pandas.DataFrame(cat_cols_enc_y[cols].values),CLUSTER_7,CLUSTER_8
df_color,"pandas.concat([data['NetNewMoneyDetails-Color'],data['NetNewMoneyDetails-Identifier']],axis=1)",CLUSTER_7,CLUSTER_8
cat_cols_enc_y,"pandas.concat([cat_cols_enc,data['NetNewMoneyDetails-YTDNNM\n(March-2018)",CLUSTER_7,CLUSTER_8
df_new,"pandas.concat([num_cols,cat_cols_enc],axis=1)",CLUSTER_7,CLUSTER_8
df_color,"pandas.get_dummies(df_color,drop_first=True)",CLUSTER_7,CLUSTER_8
cat_cols_enc,"pandas.get_dummies(cat_cols,drop_first=True)",CLUSTER_7,CLUSTER_8
data,pandas.read_excel('FAAnalysis_Rocket.xlsx'),CLUSTER_7,CLUSTER_8
data['ClientAcquisitionDetails-YTD$1m+QNRs(March-2018)'],pandas.to_numeric(data['ClientAcquisitionDetails-YTD$1m+QNRs(March-2018),CLUSTER_7,CLUSTER_8
data['Wealth/FinancialPlanning-H/UHNWMHHPlanning%'],"pandas.to_numeric(data['Wealth/FinancialPlanning-H/UHNWMHHPlanning%'],errors='coerce')",CLUSTER_7,CLUSTER_8
data['Wealth/FinancialPlanning-TotalMHHs'],"pandas.to_numeric(data['Wealth/FinancialPlanning-TotalMHHs'],errors='coerce')",CLUSTER_7,CLUSTER_8
data['DigitalTools-%ofMHHsonOLS'],"pandas.to_numeric(data['DigitalTools-%ofMHHsonOLS'],errors='coerce')",CLUSTER_7,CLUSTER_8
data['ClientRetention-%ofAttritedMHHs(2017-PostSplit)'],pandas.to_numeric(data['ClientRetention-%ofAttritedMHHs(2017-PostSplit),CLUSTER_7,CLUSTER_8
data['NetNewMoneyDetails-FAComp.NNM2014'],"pandas.to_numeric(data['NetNewMoneyDetails-FAComp.NNM2014'],errors='coerce')",CLUSTER_7,CLUSTER_8
data['NetNewMoneyDetails-FAComp.NNM2015'],"pandas.to_numeric(data['NetNewMoneyDetails-FAComp.NNM2015'],errors='coerce')",CLUSTER_7,CLUSTER_8
data['NetNewMoneyDetails-FAComp.NNM2016'],"pandas.to_numeric(data['NetNewMoneyDetails-FAComp.NNM2016'],errors='coerce')",CLUSTER_7,CLUSTER_8
data['NetNewMoneyDetails-YTDNNM\n(March-2018)'],pandas.to_numeric(data['NetNewMoneyDetails-YTDNNM\n(March-2018),CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(14,6)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_7,CLUSTER_8
hm,"seaborn.heatmap(cm,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10},yticklabels=cols.values,xticklabels=cols.values)",CLUSTER_7,CLUSTER_8
hm,"seaborn.heatmap(cm,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10},yticklabels=cols.values,xticklabels=cols.values)",CLUSTER_7,CLUSTER_8
xx,"numpy.arange(0,n,0.01)",CLUSTER_4,CLUSTER_11
ix,"numpy.arange(0,n)",CLUSTER_4,CLUSTER_11
tceGrid,"numpy.zeros((NPeriod,NMes)",CLUSTER_4,CLUSTER_11
cellPeriod,"numpy.zeros((NPeriod,NMes)",CLUSTER_4,CLUSTER_11
cellMes,"numpy.zeros((NPeriod,NMes)",CLUSTER_4,CLUSTER_11
pcGrid,"numpy.zeros((NPeriod,NMes)",CLUSTER_4,CLUSTER_11
fpGrid,"numpy.zeros((NPeriod,NMes)",CLUSTER_4,CLUSTER_11
pcFrac,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
fpFrac,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
fitTheta,numpy.zeros(resultSize[0]),CLUSTER_4,CLUSTER_11
fitGrid,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
fitFrac,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
fitGrid,numpy.zeros([np.shape(tceGrid),CLUSTER_4,CLUSTER_11
fitFracMean,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
stdFrac,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
fitDiffNorm,numpy.zeros(fitDiff.shape),CLUSTER_4,CLUSTER_11
residuals,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
rateGrid,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
l,numpy.zeros(np.shape(samples),CLUSTER_4,CLUSTER_11
aicDist,numpy.zeros(np.shape(samples),CLUSTER_4,CLUSTER_11
lbnds,numpy.empty([np.shape(samples),CLUSTER_4,CLUSTER_11
ubnds,numpy.empty([np.shape(samples),CLUSTER_4,CLUSTER_11
spIndex,"numpy.where(np.all([
syntheticTrueFps['Rp']>rpMin,syntheticTrueFps['Rp']<rpMax,\
syntheticTrueFps['period']>periodMin,syntheticTrueFps['period']<periodMax],axis=0)",CLUSTER_4,CLUSTER_11
pointsInCell,"numpy.where(
(spSyntheticTrueFps['period']>cellPeriod[(p,m)",CLUSTER_4,CLUSTER_11
pointsInCell,"numpy.where(
(spSyntheticPcs['period']>cellPeriod[(p,m)",CLUSTER_4,CLUSTER_11
pointsInCell,"numpy.where(
(spSyntheticFps['period']>cellPeriod[(p,m)",CLUSTER_4,CLUSTER_11
mctIndex,"numpy.where(modelComparisonTable[""Model""].isin([model])",CLUSTER_4,CLUSTER_11
nData,numpy.ones(dataArray.shape),CLUSTER_4,CLUSTER_11
meanFit,"numpy.mean(fitGrid,2)",CLUSTER_4,CLUSTER_11
gridShape,numpy.shape(cellX),CLUSTER_4,CLUSTER_11
resultSize,numpy.shape(dataResult),CLUSTER_4,CLUSTER_11
stdFit,"numpy.std(fitGrid,2)",CLUSTER_4,CLUSTER_11
lpl,"numpy.sum(np.log(spec.comb(n,c)",CLUSTER_4,CLUSTER_11
da,numpy.transpose(dataArray),CLUSTER_4,CLUSTER_11
"modelComparisonTable[""AICRelativeProb""].iloc[i]","numpy.exp((minAic-modelComparisonTable[""medianMCMCAIC""].iloc[i])",CLUSTER_4,CLUSTER_11
"modelComparisonTable[""BayesFactor""].iloc[i]",numpy.exp(c2-c1),CLUSTER_4,CLUSTER_11
A,numpy.exp(c2-c1),CLUSTER_4,CLUSTER_11
sA,numpy.exp(c2-c1),CLUSTER_4,CLUSTER_11
i1,"numpy.double(modelComparisonTable[""IntegralPost""].iloc[modelToCompareIndex])",CLUSTER_4,CLUSTER_11
B,"numpy.double(modelComparisonTable[""IntegralPost""].iloc[modelToCompareIndex])",CLUSTER_4,CLUSTER_11
sB,"numpy.double(modelComparisonTable[""IntegralPostErr""].iloc[modelToCompareIndex])",CLUSTER_4,CLUSTER_11
f,"numpy.double(modelComparisonTable[""BayesFactor""].iloc[i])",CLUSTER_4,CLUSTER_11
tcePctiles,numpy.percentile(nTce[(rateFlat>0.9),CLUSTER_4,CLUSTER_11
regularizationOffset,numpy.median(l),CLUSTER_4,CLUSTER_11
cbh,"matplotlib.pyplot.colorbar(im,fraction=0.024*im_ratio,pad=0.02)",CLUSTER_4,CLUSTER_11
cbh,matplotlib.pyplot.colorbar(scf),CLUSTER_4,CLUSTER_11
fig,plt.figure(figsize=matplotlib.pyplot.figaspect(0.3),CLUSTER_4,CLUSTER_11
fig,plt.figure(figsize=matplotlib.pyplot.figaspect(0.3),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(figsize=plt.figaspect(0.3),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(figsize=plt.figaspect(0.3),CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
histVals,matplotlib.pyplot.hist(residualsFlat[(rateFlat>0.9),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_4,CLUSTER_11
modelComparisonTable,"pandas.DataFrame({""Model"":[""rotatedLogisticX0"",""rotatedLogisticX02"",""constant"",
""dualBrokenPowerLaw"",""gaussian"",""rotatedLogisticX0xlogisticY0"",
""rotatedLogisticX0+gaussian"",""rotatedLogisticY"",""rotatedLogisticYXLogisticY"",
""logisticY"",""rotatedLogisticYXFixedLogisticY""],
""medianMCMCAIC"":[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
""minMCMCAIC"":[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
""maxLikelihoodAIC"":[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
""MedianLogPost"":[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
""IntegralPost"":[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
""IntegralPostErr"":[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
""medianMCMCTheta"":[[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],
""maxLikelihoodTheta"":[[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],
""periodRange"":[[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],
""mesRange"":[[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]]},
columns=[""Model"",""BayesFactor"",""BayesFactorError"",""AICRelativeProb"",
""medianMCMCAIC"",""minMCMCAIC"",""maxLikelihoodAIC"",""IntegralPost"",
""IntegralPostErr"",""MedianLogPost"",""medianMCMCTheta"",
""maxLikelihoodTheta"",""periodRange"",""mesRange""])",CLUSTER_4,CLUSTER_11
kic,pandas.read_csv(starlist),CLUSTER_4,CLUSTER_11
modelComparisonTable,pandas.read_pickle(fname),CLUSTER_4,CLUSTER_11
tt,pandas.read_pickle(fname),CLUSTER_4,CLUSTER_11
result,"scipy.optimize.minimize(nll,initialPos,args=(tceData,model)",CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_7
a,numpy.arange(15),CLUSTER_4,CLUSTER_11
x,numpy.arange(9),CLUSTER_4,CLUSTER_11
i,"numpy.arange(10,30,5)",CLUSTER_4,CLUSTER_11
f,"numpy.arange(0,2,0.3)",CLUSTER_4,CLUSTER_11
a,numpy.arange(10),CLUSTER_4,CLUSTER_11
a,numpy.arange(24),CLUSTER_4,CLUSTER_11
x,numpy.arange(12),CLUSTER_4,CLUSTER_11
b,numpy.arange(4),CLUSTER_4,CLUSTER_11
a,numpy.arange(10),CLUSTER_4,CLUSTER_11
a,numpy.arange(12),CLUSTER_4,CLUSTER_11
a,numpy.arange(12),CLUSTER_4,CLUSTER_11
a,numpy.arange(5),CLUSTER_4,CLUSTER_11
a,numpy.arange(5),CLUSTER_4,CLUSTER_11
a,numpy.arange(5),CLUSTER_4,CLUSTER_11
a,numpy.arange(10),CLUSTER_4,CLUSTER_11
x,numpy.arange(9.),CLUSTER_4,CLUSTER_11
a,"numpy.arange(1,10)",CLUSTER_4,CLUSTER_11
x,"numpy.array([[0,1,2,3,4],
[5,6,7,8,9]],dtype=np.int32)",CLUSTER_4,CLUSTER_11
a,"numpy.array([20,30,40,50])",CLUSTER_4,CLUSTER_11
A,"numpy.array([[1,1],
[0,1]])",CLUSTER_4,CLUSTER_11
B,"numpy.array([[2,0],
[3,4]])",CLUSTER_4,CLUSTER_11
i,"numpy.array([1,1,3,8,5])",CLUSTER_4,CLUSTER_11
j,"numpy.array([[3,4],[9,7]])",CLUSTER_4,CLUSTER_11
i,"numpy.array([[0,1],
[1,2]])",CLUSTER_4,CLUSTER_11
j,"numpy.array([[2,1],
[3,3]])",CLUSTER_4,CLUSTER_11
x,"numpy.array([1,2,3,-1,5])",CLUSTER_4,CLUSTER_11
x,"numpy.array([[1,2],
[3,4]])",CLUSTER_4,CLUSTER_11
x,"numpy.array(['a','b','c'],dtype=object)",CLUSTER_4,CLUSTER_11
a,"numpy.array([[[1.,2.],
[3.,4.]],
[[1,3],
[3,5]]
])",CLUSTER_4,CLUSTER_11
a,"numpy.array([[3,1],
[1,2]])",CLUSTER_4,CLUSTER_11
b,"numpy.array([9,8])",CLUSTER_4,CLUSTER_11
a,"numpy.array([[[1,2],
[3,4]],

[[1,2],
[2,1]],

[[1,3],
[3,1]]])",CLUSTER_4,CLUSTER_11
a,"numpy.array([3,4])",CLUSTER_4,CLUSTER_11
z,"numpy.zeros((3,4)",CLUSTER_4,CLUSTER_11
e,"numpy.empty((2,3)",CLUSTER_4,CLUSTER_11
b,"numpy.fromfunction(f,(5,4)",CLUSTER_4,CLUSTER_11
o,"numpy.ones((2,3,4)",CLUSTER_4,CLUSTER_11
a,"numpy.floor(10*np.random.random((3,4)",CLUSTER_4,CLUSTER_11
a,"numpy.floor(10*np.random.random((2,2)",CLUSTER_4,CLUSTER_11
b,"numpy.floor(10*np.random.random((2,2)",CLUSTER_4,CLUSTER_11
xl,numpy.log(x),CLUSTER_4,CLUSTER_11
lgsp,"numpy.logspace(0.02,2,10)",CLUSTER_4,CLUSTER_11
x,"numpy.linspace(0,2*pi,5)",CLUSTER_4,CLUSTER_11
xs,"numpy.linspace(0.02,2,10)",CLUSTER_4,CLUSTER_11
abh,"numpy.hstack((a,b)",CLUSTER_4,CLUSTER_11
abv,"numpy.vstack((a,b)",CLUSTER_4,CLUSTER_11
hab,"numpy.hsplit(abh,2)",CLUSTER_4,CLUSTER_11
vab,"numpy.vsplit(abv,2)",CLUSTER_4,CLUSTER_11
x,"numpy.linalg.solve(a,b)",CLUSTER_4,CLUSTER_11
y,"numpy.ma.array([1,2,3],mask=[0,1,0])",CLUSTER_4,CLUSTER_11
mx,"numpy.ma.array(x,mask=mask)",CLUSTER_4,CLUSTER_11
y,"numpy.ma.array([[1,2,3],[4,5,6],[7,8,9]])",CLUSTER_4,CLUSTER_11
x,"numpy.ma.array([1,2,3],mask=[0,0,1])",CLUSTER_4,CLUSTER_11
x,"numpy.ma.array([1,2,3],mask=[0,0,1],hard_mask=True)",CLUSTER_4,CLUSTER_11
x,"numpy.ma.array([1,2,3],mask=[0,0,1])",CLUSTER_4,CLUSTER_11
x,"numpy.ma.array([1,2,3,4,5],mask=[0,1,0,0,1])",CLUSTER_4,CLUSTER_11
x,"numpy.ma.array([-1,1,0,2,3],mask=[0,0,0,0,1])",CLUSTER_4,CLUSTER_11
x,"numpy.ma.log([-1,0,1,2])",CLUSTER_4,CLUSTER_11
mx,"numpy.ma.masked_array(x,mask=[0,0,0,1,0])",CLUSTER_4,CLUSTER_11
z,"numpy.ma.masked_equal([1,2,3],2)",CLUSTER_4,CLUSTER_11
w,"numpy.ma.masked_less(np.arange(1,20)",CLUSTER_4,CLUSTER_11
y,"numpy.ma.masked_where(a**2<30,a)",CLUSTER_4,CLUSTER_11
"w,v","numpy.linalg.eig(np.diag((1,2,3)",CLUSTER_4,CLUSTER_11
"w,v","numpy.linalg.eig([[1,0,0],
[1,0,0],
[0,0,0]])",CLUSTER_4,CLUSTER_11
ainv,numpy.linalg.inv(a),CLUSTER_4,CLUSTER_11
"_,bins,_","matplotlib.pyplot.hist(s,30,normed=True)",CLUSTER_4,CLUSTER_11
_,matplotlib.pyplot.show(),CLUSTER_4,CLUSTER_11
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_4,CLUSTER_11
winning_df,pandas.DataFrame(winning_dict),CLUSTER_11,CLUSTER_3
new_date,"datetime.datetime.strptime(date,'%A,%B%d,%Y')",CLUSTER_11,CLUSTER_3
data,"pandas.read_csv(""Missing_Values_Handling/final_train.csv"")",CLUSTER_5,CLUSTER_1
d_test,"pandas.read_csv(""Missing_Values_Handling/final_test.csv"")",CLUSTER_5,CLUSTER_1
"xTrain,xValid,yTrain,yValid","sklearn.model_selection.train_test_split(X,Y,train_size=0.999,random_state=4)",CLUSTER_5,CLUSTER_1
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=12,max_features=7,max_depth=25,min_samples_split=3,min_samples_leaf=2,random_state=0)",CLUSTER_5,CLUSTER_1
pred,"numpy.array([1,2,3,4,5])",CLUSTER_6,CLUSTER_6
targ,"numpy.array([1,1,3,3,5])",CLUSTER_6,CLUSTER_6
x1,"numpy.ascontiguousarray(pred[:,0:2])",CLUSTER_6,CLUSTER_6
x2,"numpy.ascontiguousarray(targ[:,0:2])",CLUSTER_6,CLUSTER_6
df['children'],"numpy.array(df['children'],dtype='int32')",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('hotel_bookings.csv'),CLUSTER_7,CLUSTER_5
le1,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le2,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le3,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le4,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le5,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le6,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le7,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le8,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le11,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le22,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le44,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le55,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
df['previous_cancellations'],sklearn.preprocessing.minmax_scale(df['previous_cancellations']),CLUSTER_7,CLUSTER_5
df['days_in_waiting_list'],sklearn.preprocessing.minmax_scale(df['days_in_waiting_list']),CLUSTER_7,CLUSTER_5
df['adr'],sklearn.preprocessing.minmax_scale(df['days_in_waiting_list']),CLUSTER_7,CLUSTER_5
sc1,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df.drop(['is_canceled'],axis=1)",CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
actor_full_df,"pandas.merge(actor_df,actor_movies_df,left_index=True,right_index=True)",CLUSTER_1,CLUSTER_9
"sample_1,sample_2",numpy.array(sample_1),CLUSTER_1,CLUSTER_9
"sample_1,sample_2",numpy.array(sample_1),CLUSTER_1,CLUSTER_9
n_wins,numpy.sum(x>sample_2),CLUSTER_1,CLUSTER_9
n_wins,numpy.sum(x>sample_2),CLUSTER_1,CLUSTER_9
res,"scipy.stats.mannwhitneyu(not_tested_for_genre_df['popularity'],tested_for_genre_df['popularity'],alternative=""greater"")",CLUSTER_1,CLUSTER_9
res,"scipy.stats.mannwhitneyu(not_tested_for_genre_df['revenue'],tested_for_genre_df['revenue'],alternative=""greater"")",CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,figsize=(16,3)",CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,figsize=(16,3)",CLUSTER_1,CLUSTER_9
df,"pandas.concat([df,delta],axis=1)",CLUSTER_8,CLUSTER_1
ward,pandas.get_dummies(df['区']),CLUSTER_8,CLUSTER_1
df,"pandas.merge(df,ward,left_index=True,right_index=True)",CLUSTER_8,CLUSTER_1
df,"pandas.read_csv(""suumo_treated.csv"",sep='\t',encoding='utf-16',index_col=0)",CLUSTER_8,CLUSTER_1
df,"pandas.read_csv(""suumo_treated.csv"",sep='\t',encoding='utf-16',index_col=0)",CLUSTER_8,CLUSTER_1
neighbors,"numpy.arange(1,201,2)",CLUSTER_7,CLUSTER_5
target,numpy.hstack((np.zeros(len(class0),CLUSTER_7,CLUSTER_5
data,"numpy.vstack((class0,class1)",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=200),CLUSTER_7,CLUSTER_5
knn_uniform,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=k,weights='uniform')",CLUSTER_7,CLUSTER_5
knn_distance,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=k,weights='distance')",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""dataset_31_credit-g.csv"")",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=42)",CLUSTER_7,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=42)",CLUSTER_7,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=42)",CLUSTER_7,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=5,random_state=42,shuffle=True)",CLUSTER_7,CLUSTER_5
clf,"sklearn.model_selection.GridSearchCV(knn,params,cv=kf,scoring='accuracy')",CLUSTER_7,CLUSTER_5
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
X,"pandas.get_dummies(X,prefix=[columnforcolumninX.columnsifX[column].dtype==object],
drop_first=True)",CLUSTER_5,CLUSTER_5
crx_data,"pandas.read_csv('crx.data.txt',sep=',',header=None,na_values='?')",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.3,random_state=10)",CLUSTER_5,CLUSTER_5
"X_train1,X_train2,y_train1,y_train2","sklearn.model_selection.train_test_split(X_train,y_train,test_size=.5)",CLUSTER_5,CLUSTER_5
scaler_train,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
log_l2_clf,"sklearn.linear_model.SGDClassifier(loss='log',penalty='l2',alpha=0.035,max_iter=10*5,
n_jobs=4,random_state=0,learning_rate='optimal')",CLUSTER_5,CLUSTER_5
base_classifier,"sklearn.linear_model.SGDClassifier(loss='log',penalty='none',max_iter=10**5)",CLUSTER_5,CLUSTER_5
clf1,"sklearn.linear_model.SGDClassifier(loss='log',penalty='l2',alpha=0.035,max_iter=10000,random_state=100,n_jobs=4)",CLUSTER_5,CLUSTER_5
pasting,"sklearn.ensemble.BaggingClassifier(base_classifier,max_samples=.7,max_features=1.,bootstrap=False,
n_estimators=21,n_jobs=4,random_state=0)",CLUSTER_5,CLUSTER_5
bagging,"sklearn.ensemble.BaggingClassifier(base_classifier,max_samples=.7,max_features=1.,bootstrap=True,
n_estimators=21,n_jobs=4,random_state=0)",CLUSTER_5,CLUSTER_5
random_subspaces,"sklearn.ensemble.BaggingClassifier(base_classifier,max_samples=1.,max_features=.5,bootstrap=False,
n_estimators=21,n_jobs=4,random_state=0)",CLUSTER_5,CLUSTER_5
random_patches,"sklearn.ensemble.BaggingClassifier(base_classifier,max_samples=.7,max_features=.7,bootstrap=True,
n_estimators=21,n_jobs=4,random_state=0)",CLUSTER_5,CLUSTER_5
bagging_warm,"sklearn.ensemble.BaggingClassifier(base_classifier,max_samples=.7,max_features=1.,bootstrap=True,
n_estimators=11,n_jobs=4,random_state=0,warm_start=True)",CLUSTER_5,CLUSTER_5
random_forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=1000,criterion='gini',max_features='sqrt',
n_jobs=4,random_state=0,bootstrap=True,max_depth=10,
min_samples_split=30)",CLUSTER_5,CLUSTER_5
extra_trees,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=1000,criterion='gini',max_features='sqrt',
n_jobs=4,random_state=0,class_weight='balanced',bootstrap=True)",CLUSTER_5,CLUSTER_5
ada_boost,sklearn.ensemble.AdaBoostClassifier(DecisionTreeClassifier(max_depth=1),CLUSTER_5,CLUSTER_5
clf5,"sklearn.tree.DecisionTreeClassifier(criterion='gini',max_depth=7,max_features='sqrt',min_samples_split=23,
splitter='random',random_state=0)",CLUSTER_5,CLUSTER_5
gradient_boosting,"sklearn.ensemble.GradientBoostingClassifier(loss='deviance',learning_rate=.01,n_estimators=1000,
max_depth=1,subsample=.6,max_features=None,random_state=0)",CLUSTER_5,CLUSTER_5
voting,"sklearn.ensemble.VotingClassifier(estimators=[('log',clf1)",CLUSTER_5,CLUSTER_5
clf4,"sklearn.svm.SVC(C=0.87,kernel='sigmoid',probability=True,random_state=0)",CLUSTER_5,CLUSTER_5
clf2,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=48,weights='distance',n_jobs=4)",CLUSTER_5,CLUSTER_5
clf3,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_5
tick_marks,numpy.arange(len(classes),CLUSTER_4,CLUSTER_9
im,numpy.array(Image.open(TRAIN_PATH+sample['filename']),CLUSTER_4,CLUSTER_9
im,numpy.array(Image.open(TRAIN_PATH+sample['filename']),CLUSTER_4,CLUSTER_9
X,numpy.array(all_cuts),CLUSTER_4,CLUSTER_9
y,numpy.array([all_labels]),CLUSTER_4,CLUSTER_9
classes,numpy.unique(train_labels),CLUSTER_4,CLUSTER_9
train_ds,json.load(f),CLUSTER_4,CLUSTER_9
ts,time.time(),CLUSTER_4,CLUSTER_9
ts,time.time(),CLUSTER_4,CLUSTER_9
cm,"sklearn.metrics.confusion_matrix(test_labels,test_labels_pred)",CLUSTER_4,CLUSTER_9
cm,"sklearn.metrics.confusion_matrix(test_labels,test_labels_pred)",CLUSTER_4,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.33,random_state=37)",CLUSTER_7,CLUSTER_5
metrics,pandas.DataFrame(model.history.history),CLUSTER_7,CLUSTER_5
df,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_5
df,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_5
pic,"numpy.reshape(pic,(28,28)",CLUSTER_7,CLUSTER_5
X_train,"numpy.reshape(X_train,(28140,28,28,1)",CLUSTER_7,CLUSTER_5
X_test,"numpy.reshape(X_test,(13860,28,28,1)",CLUSTER_7,CLUSTER_5
y_train,"numpy.reshape(y_train,(-1,1)",CLUSTER_7,CLUSTER_5
y_test,"numpy.reshape(y_test,(-1,1)",CLUSTER_7,CLUSTER_5
x,"numpy.reshape(x,shape)",CLUSTER_7,CLUSTER_5
x,"numpy.reshape(x,shape)",CLUSTER_7,CLUSTER_5
frame2['debt'],numpy.arange(6.),CLUSTER_8,CLUSTER_3
frame2,"pandas.DataFrame(data,columns=['year','state','pop','debt'],
index=['one','two','three','four','five','six'])",CLUSTER_8,CLUSTER_3
frame3,pandas.DataFrame(pop),CLUSTER_8,CLUSTER_3
labels,pandas.Index(np.arange(3),CLUSTER_8,CLUSTER_3
dup_labels,"pandas.Index(['foo','foo','bar','bar'])",CLUSTER_8,CLUSTER_3
obj2,"pandas.Series([4,7,-5,3],index=['d','b','a','c'])",CLUSTER_8,CLUSTER_3
obj3,pandas.Series(sdata),CLUSTER_8,CLUSTER_3
obj4,"pandas.Series(sdata,index=states)",CLUSTER_8,CLUSTER_3
val,"pandas.Series([-1.2,-1.5,-1.7],index=['two','four','five'])",CLUSTER_8,CLUSTER_3
obj,pandas.Series(range(3),CLUSTER_8,CLUSTER_3
obj2,"pandas.Series([1.5,-2.5,0],index=labels)",CLUSTER_8,CLUSTER_3
obj,"pandas.Series([4,7,-5,3])",CLUSTER_8,CLUSTER_3
frame,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
x,"numpy.arange(-5.0,5.0,0.1)",CLUSTER_1,CLUSTER_10
x,"numpy.array([1.0,2.5,3.8])",CLUSTER_1,CLUSTER_10
x,"numpy.array([[1,2,3,4],[6,7,8,9],[11,12,13,14],[16,17,18,19]])",CLUSTER_1,CLUSTER_10
kernel,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_10
x,"numpy.array([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]])",CLUSTER_1,CLUSTER_10
kernel,"numpy.array([[5,5],[10,10]])",CLUSTER_1,CLUSTER_10
x,"numpy.array([[1,2,3,4],[6,7,8,9],[11,12,13,14],[16,17,18,19]])",CLUSTER_1,CLUSTER_10
x,"numpy.array([[1,2,3,4],[6,7,8,9],[11,12,13,14],[16,17,18,19]])",CLUSTER_1,CLUSTER_10
output,"numpy.zeros((column,row)",CLUSTER_1,CLUSTER_10
output,"numpy.zeros((column,row)",CLUSTER_1,CLUSTER_10
p_array,"numpy.zeros((a_h+2*padding,a_w+2*padding)",CLUSTER_1,CLUSTER_10
output,"numpy.zeros((column,row)",CLUSTER_1,CLUSTER_10
temp,"numpy.zeros((k_w,k_h)",CLUSTER_1,CLUSTER_10
output,"numpy.zeros((column,row)",CLUSTER_1,CLUSTER_10
temp,"numpy.zeros((k_w,k_h)",CLUSTER_1,CLUSTER_10
sum_exp_x,numpy.sum(exp_x),CLUSTER_1,CLUSTER_10
exp_x,numpy.exp(x-c),CLUSTER_1,CLUSTER_10
"output[i,j]",numpy.average(temp),CLUSTER_1,CLUSTER_10
dx,"numpy.array([
np.cos(x[2])",CLUSTER_4,CLUSTER_11
x,numpy.zeros(3),CLUSTER_4,CLUSTER_11
u,numpy.zeros(2),CLUSTER_4,CLUSTER_11
x[2],"numpy.arctan2(zflag[1][1],zflag[0][1])",CLUSTER_4,CLUSTER_11
u[1],"numpy.arctan2(thdot_v,u[0]**2/b)",CLUSTER_4,CLUSTER_11
T,"numpy.linspace(0,Tf,500)",CLUSTER_4,CLUSTER_11
factor,"math.log(256**3,2)",CLUSTER_5,CLUSTER_9
a,numpy.array(mat['A']),CLUSTER_5,CLUSTER_9
new_bird_arr,"numpy.reshape(new_bird.values,a.shape)",CLUSTER_5,CLUSTER_9
new_img,"numpy.reshape(new_colors.values,img_arr.shape)",CLUSTER_5,CLUSTER_9
aggl_img,"numpy.reshape(aggl_colors.values,img_arr.shape)",CLUSTER_5,CLUSTER_9
bird,"pandas.DataFrame(a.reshape(-1,3)",CLUSTER_5,CLUSTER_9
img_colors,"pandas.DataFrame(img_arr.reshape(-1,3)",CLUSTER_5,CLUSTER_9
aggl_clusters,pandas.Series(clustering.fit_predict(img_colors),CLUSTER_5,CLUSTER_9
mat,scipy.io.loadmat('bird_small.mat'),CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(15,5)",CLUSTER_5,CLUSTER_9
clustering,sklearn.cluster.AgglomerativeClustering(n_clusters=16),CLUSTER_5,CLUSTER_9
binw,numpy.ceil((np.max(S),CLUSTER_1,CLUSTER_10
future,"pandas.DataFrame(index=date_list,columns=salary2.columns)",CLUSTER_1,CLUSTER_9
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_1,CLUSTER_9
salary2,"pandas.concat([salary2,future])",CLUSTER_1,CLUSTER_9
salary,"pandas.read_csv('WAG_C_M.csv',';',index_col=['month'],parse_dates=['month'],dayfirst=True)",CLUSTER_1,CLUSTER_9
"salary['WAG_C_M_boxcox'],lmbda",scipy.stats.boxcox(salary.WAG_C_M),CLUSTER_1,CLUSTER_9
"salary['WAG_C_M_box'],lmbda",scipy.stats.boxcox(salary.WAG_C_M),CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_1,CLUSTER_9
orig,"matplotlib.pyplot.plot(timeseries,color='blue',label='Original')",CLUSTER_1,CLUSTER_9
mean,"matplotlib.pyplot.plot(rolmean,color='red',label='RollingMean')",CLUSTER_1,CLUSTER_9
std,"matplotlib.pyplot.plot(rolstd,color='black',label='RollingStd')",CLUSTER_1,CLUSTER_9
x,numpy.arange(10),CLUSTER_7,CLUSTER_8
x,numpy.arange(10),CLUSTER_7,CLUSTER_8
x,numpy.arange(10),CLUSTER_7,CLUSTER_8
x,"numpy.arange(-3.0,3.0,0.1)",CLUSTER_7,CLUSTER_8
y,"numpy.arange(-3.0,3.0,0.1)",CLUSTER_7,CLUSTER_8
v,numpy.array(v1),CLUSTER_7,CLUSTER_8
y,numpy.array([2*iforiinx]),CLUSTER_7,CLUSTER_8
y,numpy.array([3*iforiinx]),CLUSTER_7,CLUSTER_8
x,"numpy.array(range(0,10)",CLUSTER_7,CLUSTER_8
y,"numpy.array(range(10,20)",CLUSTER_7,CLUSTER_8
x_batch,numpy.array(list(zip(*batch),CLUSTER_7,CLUSTER_8
y_batch,numpy.array(list(zip(*batch),CLUSTER_7,CLUSTER_8
x,"numpy.array([2,-2])",CLUSTER_7,CLUSTER_8
x,"numpy.array([2,-2])",CLUSTER_7,CLUSTER_8
x2,numpy.array(range(len(trace),CLUSTER_7,CLUSTER_8
x3,numpy.array(range(len(trace2),CLUSTER_7,CLUSTER_8
x_train,"numpy.linspace(0,100,1000)",CLUSTER_7,CLUSTER_8
x_test,"numpy.linspace(100.01,110.01,50)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-1,5,100)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-10,20,100)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-10,20,100)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-10,20,100)",CLUSTER_7,CLUSTER_8
data,"numpy.vstack((x,y)",CLUSTER_7,CLUSTER_8
data,"numpy.vstack((x,y)",CLUSTER_7,CLUSTER_8
"X,Y","numpy.meshgrid(w,b)",CLUSTER_7,CLUSTER_8
"X,Y","numpy.meshgrid(x,y,indexing='ij')",CLUSTER_7,CLUSTER_8
w,random.random(),CLUSTER_7,CLUSTER_8
w,random.random(),CLUSTER_7,CLUSTER_8
w,random.random(),CLUSTER_7,CLUSTER_8
b,"

matplotlib.pyplot.figure(figsize=(4,4)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(5,4)",CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
source,"numpy.array(list(map(lambdax:to_categorical(x,num_classes=len(human_vocab)",CLUSTER_2,CLUSTER_10
s0,"numpy.zeros((m,n_s)",CLUSTER_2,CLUSTER_10
c0,"numpy.zeros((m,n_s)",CLUSTER_2,CLUSTER_10
prediction,"numpy.argmax(prediction,axis=-1)",CLUSTER_2,CLUSTER_10
x,numpy.array(img),CLUSTER_4,CLUSTER_11
x_data,numpy.array(x_data),CLUSTER_4,CLUSTER_11
y_data,numpy.array(y_data),CLUSTER_4,CLUSTER_11
multiarray_normalized,numpy.array(multiarray_normalized),CLUSTER_5,CLUSTER_9
correlacion,"numpy.corrcoef(factor_1.values[i:i+paso],factor_2.values[i:i+paso])",CLUSTER_5,CLUSTER_9
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_9
R,"numpy.array(((c,-s)",CLUSTER_7,CLUSTER_9
C,"numpy.array([[self.sigma[i,0]**2,0.],[0.,self.sigma[i,1]**2]])",CLUSTER_7,CLUSTER_9
v,numpy.array(cm.viridis.colors),CLUSTER_7,CLUSTER_9
g,numpy.array(cm.plasma.colors),CLUSTER_7,CLUSTER_9
angle,"numpy.array([-30.,0.])",CLUSTER_7,CLUSTER_9
prob_C,"numpy.array([0.6,0.4])",CLUSTER_7,CLUSTER_9
self.I,"numpy.zeros((self.nx,self.ny,3)",CLUSTER_7,CLUSTER_9
mu,"numpy.zeros((2,2)",CLUSTER_7,CLUSTER_9
sigma,"numpy.zeros((2,2)",CLUSTER_7,CLUSTER_9
indx,numpy.argwhere(self.masque),CLUSTER_7,CLUSTER_9
indx,numpy.argwhere(~self.masque),CLUSTER_7,CLUSTER_9
"c,s",numpy.cos(theta),CLUSTER_7,CLUSTER_9
theta,numpy.radians(self.angle[i]),CLUSTER_7,CLUSTER_9
"self.xx,self.yy","numpy.meshgrid(np.linspace(self.x_min,self.x_max,self.nx)",CLUSTER_7,CLUSTER_9
self.pos,"numpy.dstack((self.xx,self.yy)",CLUSTER_7,CLUSTER_9
cs,"matplotlib.pyplot.contour(self.xx,self.yy,self.masque,[0.5])",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(13,10)",CLUSTER_7,CLUSTER_9
self.modeles[i],"scipy.stats.multivariate_normal(self.mu[i,:],C)",CLUSTER_7,CLUSTER_9
df,"pandas.read_csv(""venezuela_explore_data.csv"")",CLUSTER_8,CLUSTER_4
word_counts,collections.Counter(tokens),CLUSTER_3,CLUSTER_6
word_counts,collections.Counter(tokens),CLUSTER_3,CLUSTER_6
ax,"matplotlib.pyplot.axes(xscale='log',yscale='log')",CLUSTER_5,CLUSTER_10
ax,matplotlib.pyplot.axes(),CLUSTER_5,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(5,5,figsize=(5,5)",CLUSTER_5,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(4,4,sharex=True,sharey=True)",CLUSTER_5,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_10
x,"numpy.linspace(0,3*np.pi,1000)",CLUSTER_5,CLUSTER_10
faces,sklearn.datasets.fetch_olivetti_faces(),CLUSTER_5,CLUSTER_10
x_train,"numpy.reshape(x_train,(x_train.shape[0],784)",CLUSTER_2,CLUSTER_7
x_test,"numpy.reshape(x_test,(x_test.shape[0],784)",CLUSTER_2,CLUSTER_7
ax,"matplotlib.pyplot.subplot(2,number,index+1)",CLUSTER_2,CLUSTER_7
ax,"matplotlib.pyplot.subplot(2,number,index+1+number)",CLUSTER_2,CLUSTER_7
df,pandas.read_csv('911.csv'),CLUSTER_7,CLUSTER_3
df['timeStamp'],pandas.to_datetime(df['timeStamp']),CLUSTER_7,CLUSTER_3
datetime,pandas.to_datetime(train_2016.transactiondate),CLUSTER_4,CLUSTER_5
token,"requests.request(""GET"",TOKEN_URL,headers=TOKEN_HEADERS)",CLUSTER_6,CLUSTER_6
current_seq,"numpy.roll(current_seq,-1,1)",CLUSTER_6,CLUSTER_6
current_seq,"numpy.full((1,sequence_length)",CLUSTER_6,CLUSTER_6
img,numpy.array(image.open('gal.png'),CLUSTER_12,CLUSTER_6
gray,"numpy.zeros((img.shape[0],img.shape[1])",CLUSTER_12,CLUSTER_6
medianBlur,"numpy.zeros((gray.shape[0]-kernel_size+1,gray.shape[1]-kernel_size+1)",CLUSTER_12,CLUSTER_6
medianBlur,"numpy.zeros((gray.shape[0]-kernel_size+1,gray.shape[1]-kernel_size+1)",CLUSTER_12,CLUSTER_6
paraphrases,pandas.read_csv('paraphrases.csv'),CLUSTER_0,CLUSTER_1
percent,"pandas.DataFrame(round(train.Embarked.value_counts(dropna=False,normalize=True)",CLUSTER_7,CLUSTER_8
total,pandas.DataFrame(train.Embarked.value_counts(dropna=False),CLUSTER_7,CLUSTER_8
all_data,"pandas.concat([train,test],ignore_index=False)",CLUSTER_7,CLUSTER_8
all_data,"pandas.concat([with_N,without_N],axis=0)",CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(""./input/train.csv"")",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(""./input/test.csv"")",CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x=""Sex"",
y=""Survived"",
data=train,
palette=pal,
linewidth=2)",CLUSTER_7,CLUSTER_8
ax1,"seaborn.boxplot(x=""Embarked"",y=""Fare"",hue=""Pclass"",data=train,ax=ax[0])",CLUSTER_7,CLUSTER_8
ax2,"seaborn.boxplot(x=""Embarked"",y=""Fare"",hue=""Pclass"",data=test,ax=ax[1])",CLUSTER_7,CLUSTER_8
ax,"seaborn.countplot(x=""Sex"",
hue=""Survived"",
data=train,
linewidth=2,
palette=pal
)",CLUSTER_7,CLUSTER_8
ax,"seaborn.kdeplot(train.Pclass[train.Survived==0],
color='gray',
shade=True,
label='notsurvived')",CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(train.loc[(train['Survived']==1),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(train.loc[(train['Survived']==0),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(train.loc[(train['Survived']==1),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(train.loc[(train['Survived']==0),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(train.loc[(train['Survived']==1),CLUSTER_7,CLUSTER_8
X,"pandas.DataFrame(scaled_df,columns=names)",CLUSTER_7,CLUSTER_8
X,"pandas.DataFrame(scaled_df,columns=names)",CLUSTER_7,CLUSTER_8
feat_importances,"pandas.Series(model.feature_importances_,index=X.columns)",CLUSTER_7,CLUSTER_8
feat_importances,"pandas.Series(model.feature_importances_,index=X.columns)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('C:/Users/spbro/OneDrive/Desktop/diabetes_data.csv'),CLUSTER_7,CLUSTER_8
"fig1,ax1","matplotlib.pyplot.subplots(1,2,figsize=(8,8)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(4,2,figsize=(10,10)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.ExtraTreesClassifier(),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.ExtraTreesClassifier(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.20,random_state=42)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.20,random_state=42)",CLUSTER_7,CLUSTER_8
kfold,"sklearn.model_selection.KFold(n_splits=10,random_state=123)",CLUSTER_7,CLUSTER_8
cv_result,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=kfold,scoring=""accuracy"")",CLUSTER_7,CLUSTER_8
model,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_8
final_model,"sklearn.svm.SVC(C=0.01,kernel='linear')",CLUSTER_7,CLUSTER_8
final_model,"sklearn.svm.SVC(C=0.1,kernel='linear')",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(estimator=model,
param_grid=paramaters,
scoring='accuracy',
cv=10,
n_jobs=-1)",CLUSTER_7,CLUSTER_8
cf,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
cf,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
report,"sklearn.metrics.classification_report(y_test,y_pred)",CLUSTER_7,CLUSTER_8
report,"sklearn.metrics.classification_report(y_test,y_pred)",CLUSTER_7,CLUSTER_8
ig_df,pandas.read_csv('dataset.csv'),CLUSTER_8,CLUSTER_4
images,"numpy.zeros((size_image[0],size_image[1],size_image[2],len(fileList)",CLUSTER_4,CLUSTER_11
labels,"numpy.zeros((size_image[0],size_image[1],len(fileList)",CLUSTER_4,CLUSTER_11
images_irm_test,"numpy.zeros((size_image[0],size_image[1],size_image[2],len(fileList)",CLUSTER_4,CLUSTER_11
labels_test,"numpy.zeros((size_image[0],size_image[1],len(fileList)",CLUSTER_4,CLUSTER_11
heat_map_normalize,numpy.zeros(heat_map.shape),CLUSTER_4,CLUSTER_11
accuaracy_depending_nbItterations,numpy.zeros(len(nets),CLUSTER_4,CLUSTER_11
accuaracy_depending_nbItterations[i]+,numpy.sum((label==label_predicted),CLUSTER_4,CLUSTER_11
e_x,numpy.exp(x-np.max(x),CLUSTER_4,CLUSTER_11
df['bedrooms_new_size'],pandas.concat(lista),CLUSTER_8,CLUSTER_4
df,pandas.read_csv(file),CLUSTER_8,CLUSTER_4
df,"pandas.read_csv(file,nrows=5)",CLUSTER_8,CLUSTER_4
chunk,"pandas.read_csv(file,chunksize=10000)",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv(file,sep=',',usecols=['date','price','bedrooms','bathrooms','zipcode'])",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv(file,sep=',',usecols=[0,1,2,3,4,16])",CLUSTER_8,CLUSTER_4
df,pandas.read_csv(file),CLUSTER_8,CLUSTER_4
df,"pandas.read_csv(file,usecols=lambdacol:colnotin['sqft_living','sqft_lot','floors'])",CLUSTER_8,CLUSTER_4
df,pandas.read_csv(titanic),CLUSTER_8,CLUSTER_4
df,"pandas.read_csv(titanic,dtype={'Embarked':'category','Survived':'category','Parch':'int32'})",CLUSTER_8,CLUSTER_4
this_mean,numpy.mean(new_pd_dict_columns['Total']),CLUSTER_12,CLUSTER_9
this_std,numpy.std(new_pd_dict_columns['Total']),CLUSTER_12,CLUSTER_9
first_quartile,"numpy.percentile(new_pd_dict_columns['Total'],25)",CLUSTER_12,CLUSTER_9
third_quartile,"numpy.percentile(new_pd_dict_columns['Total'],75)",CLUSTER_12,CLUSTER_9
new_pd_dict_columns,collections.defaultdict(list),CLUSTER_12,CLUSTER_9
new_pd_dict_columns,collections.defaultdict(list),CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_12,CLUSTER_9
norm_pvalue,scipy.stats.normaltest(new_pd_dict_columns[col]),CLUSTER_12,CLUSTER_9
col_skew,scipy.stats.skew(new_pd_dict_columns[col]),CLUSTER_12,CLUSTER_9
rewards,"numpy.array([agent.evaluate(weights,gamma,max_t)",CLUSTER_6,CLUSTER_10
best_weight,numpy.array(elite_weights),CLUSTER_6,CLUSTER_10
scores_deque,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
df,"pandas.DataFrame(np.random.randn(6,4)",CLUSTER_1,CLUSTER_3
df2,"pandas.DataFrame({'A':1.,
'B':pd.Timestamp('20130102')",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(10,4)",CLUSTER_1,CLUSTER_3
left,"pandas.DataFrame({'key':['foo','foo'],'lval':[1,2]})",CLUSTER_1,CLUSTER_3
right,"pandas.DataFrame({'key':['foo','foo'],'rval':[4,5]})",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(8,4)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({'A':['foo','bar','foo','bar',
'foo','bar','foo','foo'],
'B':['one','one','two','three',
'two','two','one','three'],
'C':np.random.randn(8)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(8,2)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({'A':['one','one','two','three']*3,
'B':['A','B','C']*4,
'C':['foo','foo','foo','bar','bar','bar']*2,
'D':np.random.randn(12)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({""id"":[1,2,3,4,5,6],""raw_grade"":['a','b','b','a','a','e']})",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(1000,4)",CLUSTER_1,CLUSTER_3
s,"pandas.Series([1,3,5,np.nan,6,8])",CLUSTER_1,CLUSTER_3
s1,"pandas.Series([1,2,3,4,5,6],index=pd.date_range('20130102',periods=6)",CLUSTER_1,CLUSTER_3
s,"pandas.Series([1,3,5,np.nan,6,8],index=dates)",CLUSTER_1,CLUSTER_3
s,"pandas.Series(np.random.randint(0,7,size=10)",CLUSTER_1,CLUSTER_3
s,"pandas.Series(['A','B','C','Aaba','Baca',np.nan,'CABA','dog','cat'])",CLUSTER_1,CLUSTER_3
ts,"pandas.Series(np.random.randint(0,500,len(rng)",CLUSTER_1,CLUSTER_3
ts,pandas.Series(np.random.randn(len(rng),CLUSTER_1,CLUSTER_3
ts,pandas.Series(np.random.randn(len(rng),CLUSTER_1,CLUSTER_3
ts,pandas.Series(np.random.randn(len(prng),CLUSTER_1,CLUSTER_3
ts,pandas.Series(np.random.randn(1000),CLUSTER_1,CLUSTER_3
dates,"pandas.date_range('20130101',periods=6)",CLUSTER_1,CLUSTER_3
s1,"pd.Series([1,2,3,4,5,6],index=pandas.date_range('20130102',periods=6)",CLUSTER_1,CLUSTER_3
rng,"pandas.date_range('1/1/2012',periods=100,freq='s')",CLUSTER_1,CLUSTER_3
rng,"pandas.date_range('3/6/201200:00',periods=5,freq='D')",CLUSTER_1,CLUSTER_3
rng,"pandas.date_range('1/1/2012',periods=5,freq='M')",CLUSTER_1,CLUSTER_3
ts,"pd.Series(np.random.randn(1000),index=pandas.date_range('1/1/2000',periods=1000)",CLUSTER_1,CLUSTER_3
prng,"pandas.period_range('1990Q1','2000Q4',freq='Q-NOV')",CLUSTER_1,CLUSTER_3
"df.loc[:,'D']",numpy.array([5]*len(df),CLUSTER_1,CLUSTER_3
response,requests.get(url),CLUSTER_9,CLUSTER_2
datadf,pandas.DataFrame(data),CLUSTER_9,CLUSTER_2
hikesdf,pandas.DataFrame(hikes),CLUSTER_9,CLUSTER_2
hikes,pandas.read_csv(csv_file),CLUSTER_9,CLUSTER_2
gene_nature_supplement,pandas.read_csv(gene_nature_supplement_file),CLUSTER_10,CLUSTER_4
probes_info,"pandas.read_csv(os.path.join(donor_path,'Probes.csv')",CLUSTER_10,CLUSTER_4
gene_expr,"pandas.read_csv(os.path.join(donor_path,'MicroarrayExpression.csv')",CLUSTER_10,CLUSTER_4
sample_info,"pandas.read_csv(os.path.join(donor_path,'SampleAnnot.csv')",CLUSTER_10,CLUSTER_4
p,"numpy.zeros((10**5,4)",CLUSTER_1,CLUSTER_3
x1234,"numpy.concatenate((x123,[x4])",CLUSTER_1,CLUSTER_3
z,numpy.sum(x1234),CLUSTER_1,CLUSTER_3
logwayspp,numpy.log(ways),CLUSTER_1,CLUSTER_3
p,pandas.DataFrame(data=d),CLUSTER_1,CLUSTER_3
y1,numpy.sin(6*t),CLUSTER_1,CLUSTER_10
y2,numpy.sin(6*t+2),CLUSTER_1,CLUSTER_10
y3,numpy.sin(6*t),CLUSTER_1,CLUSTER_10
t,"numpy.linspace(0,6,n_points)",CLUSTER_1,CLUSTER_10
input_pred,"numpy.linspace(6,10,100)",CLUSTER_1,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(4,1,sharex=False,figsize=(12,8)",CLUSTER_1,CLUSTER_10
corp_total,"pandas.merge(corp_info,corp_data,how='left',on='종목코드')",CLUSTER_8,CLUSTER_4
corp_info,"pandas.read_csv('corp.csv',header=0)",CLUSTER_8,CLUSTER_4
corp_result,pandas.read_excel('SAMPLE_2018.xlsx'),CLUSTER_8,CLUSTER_4
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
y_pred,"numpy.argmax(pred,axis=1)",CLUSTER_7,CLUSTER_8
temp_df,pandas.DataFrame(temp_dict),CLUSTER_7,CLUSTER_8
temp_df,"pandas.melt(temp_df,id_vars=['Performance'],value_vars=averages,
var_name='Metric',value_name=feature)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv(path),CLUSTER_7,CLUSTER_8
embedding_matrix,"pandas.read_pickle(""model/GloVe_matrix.pkl"")",CLUSTER_7,CLUSTER_8
"X_train,x_test,Y_train,y_test","sklearn.model_selection.train_test_split(data.clean_tweet,data.labels,test_size=0.33,random_state=42)",CLUSTER_7,CLUSTER_8
"x_train,x_val,y_train,y_val","sklearn.model_selection.train_test_split(X_train,Y_train,test_size=0.33,random_state=42)",CLUSTER_7,CLUSTER_8
cr,"sklearn.metrics.classification_report(y_test_onehot,y_pred_onehot,target_names=class_names,output_dict=True)",CLUSTER_7,CLUSTER_8
squares,numpy.square(dist),CLUSTER_7,CLUSTER_8
vardf,pandas.DataFrame(pca.explained_variance_),CLUSTER_7,CLUSTER_8
df,"pandas.merge(df_offers,df_transactions)",CLUSTER_7,CLUSTER_8
df,"pandas.merge(df_transactions,customer_clusters)",CLUSTER_7,CLUSTER_8
df,"pandas.merge(df_offers,df)",CLUSTER_7,CLUSTER_8
df_offers,"pandas.read_excel(""./WineKMC.xlsx"",sheetname=0)",CLUSTER_7,CLUSTER_8
df_transactions,"pandas.read_excel(""./WineKMC.xlsx"",sheetname=1)",CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_8
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
new_palette,seaborn.xkcd_palette(colors),CLUSTER_7,CLUSTER_8
K_means,"sklearn.cluster.KMeans(n_clusters=K,random_state=5)",CLUSTER_7,CLUSTER_8
K_means,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_7,CLUSTER_8
clusterer,"sklearn.cluster.KMeans(n_clusters=K,random_state=5)",CLUSTER_7,CLUSTER_8
K_means,"sklearn.cluster.KMeans(n_clusters=8,random_state=5)",CLUSTER_7,CLUSTER_8
K_means,"sklearn.cluster.KMeans(n_clusters=3,random_state=5)",CLUSTER_7,CLUSTER_8
sample_silhouette_values,"sklearn.metrics.silhouette_samples(x_cols,cluster_labels)",CLUSTER_7,CLUSTER_8
silhouette_avg,"sklearn.metrics.silhouette_score(x_cols,cluster_labels)",CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
af,sklearn.cluster.AffinityPropagation(damping=0.5),CLUSTER_7,CLUSTER_8
silhouette_score,"sklearn.metrics.silhouette_score(x_cols,labels,metric='sqeuclidean')",CLUSTER_7,CLUSTER_8
silhouette_score,"sklearn.metrics.silhouette_score(x_cols,labels,metric='sqeuclidean')",CLUSTER_7,CLUSTER_8
silhouette_score,"sklearn.metrics.silhouette_score(x_cols,labels,metric='sqeuclidean')",CLUSTER_7,CLUSTER_8
silhouette_score,"sklearn.metrics.silhouette_score(x_cols,labels,metric='sqeuclidean')",CLUSTER_7,CLUSTER_8
silhouette_score,"sklearn.metrics.silhouette_score(x_cols,labels,metric='sqeuclidean')",CLUSTER_7,CLUSTER_8
spectral,"sklearn.cluster.SpectralClustering(n_clusters=3,random_state=5)",CLUSTER_7,CLUSTER_8
agc,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage='ward')",CLUSTER_7,CLUSTER_8
agc,"sklearn.cluster.AgglomerativeClustering(n_clusters=8,linkage='ward')",CLUSTER_7,CLUSTER_8
dbscan,"sklearn.cluster.DBSCAN(min_samples=3,eps=1.4)",CLUSTER_7,CLUSTER_8
r,requests.get(url),CLUSTER_9,CLUSTER_2
r,requests.get(lyric_url),CLUSTER_9,CLUSTER_2
r,requests.get(song_detail),CLUSTER_9,CLUSTER_2
r,requests.get(music_url),CLUSTER_9,CLUSTER_2
content,requests.get(music),CLUSTER_9,CLUSTER_2
artists,requests.get(url),CLUSTER_9,CLUSTER_2
df_songs,pandas.DataFrame(songs_list),CLUSTER_9,CLUSTER_2
tables,pandas.read_html(mars_facts),CLUSTER_9,CLUSTER_2
mars_html,requests.get(mars_url),CLUSTER_9,CLUSTER_2
twitter_html,requests.get(twitter_url),CLUSTER_9,CLUSTER_2
y,"numpy.choose(y,[1,2,0])",CLUSTER_5,CLUSTER_10
fig,"matplotlib.pyplot.figure(fignum,figsize=(4,3)",CLUSTER_5,CLUSTER_10
fig,"matplotlib.pyplot.figure(fignum,figsize=(4,3)",CLUSTER_5,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
positive_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
negative_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
total_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
pos_neg_ratios,collections.Counter(),CLUSTER_12,CLUSTER_6
review_counter,collections.Counter(),CLUSTER_12,CLUSTER_6
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
layer_0,numpy.zeros(10),CLUSTER_12,CLUSTER_6
layer_1,numpy.zeros(5),CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
self.layer_1,"numpy.zeros((1,hidden_nodes)",CLUSTER_12,CLUSTER_6
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
mean_acc,numpy.zeros((Ks-1),CLUSTER_7,CLUSTER_5
std_acc,numpy.zeros((Ks-1),CLUSTER_7,CLUSTER_5
std_acc[n-1],numpy.std(yhat==y_test),CLUSTER_7,CLUSTER_5
bins,numpy.linspace(df.Principal.min(),CLUSTER_7,CLUSTER_5
bins,numpy.linspace(df.age.min(),CLUSTER_7,CLUSTER_5
bins,numpy.linspace(df.dayofweek.min(),CLUSTER_7,CLUSTER_5
out,"tree.export_graphviz(loanTree,feature_names=featureNames,out_file=dot_data,class_names=numpy.unique(y_train)",CLUSTER_7,CLUSTER_5
Feature,"pandas.concat([Feature,pd.get_dummies(df['education'])",CLUSTER_7,CLUSTER_5
Feature_test,"pandas.concat([Feature_test,pd.get_dummies(test_df['education'])",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('loan_train.csv'),CLUSTER_7,CLUSTER_5
test_df,pandas.read_csv('loan_test.csv'),CLUSTER_7,CLUSTER_5
df['due_date'],pandas.to_datetime(df['due_date']),CLUSTER_7,CLUSTER_5
df['effective_date'],pandas.to_datetime(df['effective_date']),CLUSTER_7,CLUSTER_5
test_df['due_date'],pandas.to_datetime(test_df['due_date']),CLUSTER_7,CLUSTER_5
test_df['effective_date'],pandas.to_datetime(test_df['effective_date']),CLUSTER_7,CLUSTER_5
X,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
X,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
test_X,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=4)",CLUSTER_7,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n),CLUSTER_7,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=7),CLUSTER_7,CLUSTER_5
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,yhat)",CLUSTER_7,CLUSTER_5
loanTree,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=4)",CLUSTER_7,CLUSTER_5
loanTree,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"")",CLUSTER_7,CLUSTER_5
out,"sklearn.tree.export_graphviz(loanTree,feature_names=featureNames,out_file=dot_data,class_names=np.unique(y_train)",CLUSTER_7,CLUSTER_5
clf,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_5
LR,sklearn.linear_model.LogisticRegression(C=0.01),CLUSTER_7,CLUSTER_5
LR,"sklearn.linear_model.LogisticRegression(C=0.01,solver='liblinear')",CLUSTER_7,CLUSTER_5
logloss_lg,"sklearn.metrics.log_loss(test_y,yhat_lg_prob)",CLUSTER_7,CLUSTER_5
f1_score_knn,"sklearn.metrics.f1_score(test_y,yhat_knn,average='weighted')",CLUSTER_7,CLUSTER_5
f1_score_dt,"sklearn.metrics.f1_score(test_y,yhat_dt,average='weighted')",CLUSTER_7,CLUSTER_5
f1_score_svm,"sklearn.metrics.f1_score(test_y,yhat_svm,average='weighted')",CLUSTER_7,CLUSTER_5
f1_score_lg,"sklearn.metrics.f1_score(test_y,yhat_lg,average='weighted')",CLUSTER_7,CLUSTER_5
ifprediction_result[i]!,numpy.argmax(data.test.labels[i]),CLUSTER_11,CLUSTER_0
ifprediction_result[j]!,numpy.argmax(labels[j]),CLUSTER_11,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_0
ax,"matplotlib.pyplot.subplot(5,5,1+i)",CLUSTER_11,CLUSTER_0
ax,"matplotlib.pyplot.subplot(5,5,1+i)",CLUSTER_11,CLUSTER_0
startTime,time.time(),CLUSTER_11,CLUSTER_0
duration,time.time(),CLUSTER_11,CLUSTER_0
response,requests.get(image_url),CLUSTER_12,CLUSTER_10
response,"requests.post(face_api_url,params=params,headers=headers,json={""url"":image_url})",CLUSTER_12,CLUSTER_10
response,"requests.post(face_api_url,params=params,headers=headers,json={""url"":image_url})",CLUSTER_12,CLUSTER_10
_,"matplotlib.pyplot.axis(""off"")",CLUSTER_12,CLUSTER_10
ax,"matplotlib.pyplot.imshow(image,alpha=0.6)",CLUSTER_12,CLUSTER_10
ax,"matplotlib.pyplot.imshow(image,alpha=0.6)",CLUSTER_12,CLUSTER_10
base_color,seaborn.color_palette('Paired'),CLUSTER_7,CLUSTER_8
X_batch,numpy.array(zero_seq_seed[-num_time_steps:]),CLUSTER_2,CLUSTER_7
X_batch,numpy.array(training_instance[-num_time_steps:]),CLUSTER_2,CLUSTER_7
self.y_true,numpy.sin(self.x_data),CLUSTER_2,CLUSTER_7
y_batch,numpy.sin(batch_ts),CLUSTER_2,CLUSTER_7
X_new,"numpy.sin(np.array(train_inst[:-1].reshape(-1,num_time_steps,num_inputs)",CLUSTER_2,CLUSTER_7
self.x_data,"numpy.linspace(xmin,xmax,num_points)",CLUSTER_2,CLUSTER_7
train_inst,"numpy.linspace(5,5+ts_data.resolution*(num_time_steps+1)",CLUSTER_2,CLUSTER_7
moon_phase_list,pandas.DataFrame(moon_phase_list),CLUSTER_8,CLUSTER_3
moons,pandas.read_csv('../assets/moon_phase_data/moon-phases-2007-UTC.csv'),CLUSTER_8,CLUSTER_3
new,pandas.read_csv(path),CLUSTER_8,CLUSTER_3
all_data,pandas.read_csv('../assets/03_df.csv'),CLUSTER_8,CLUSTER_3
tz_map,pandas.read_excel('../assets/timezone_map.xlsx'),CLUSTER_8,CLUSTER_3
moon_map['ts_date'],pandas.to_datetime(moon_map['ts_date']),CLUSTER_8,CLUSTER_3
df,pandas.read_csv('cleanedData.csv'),CLUSTER_11,CLUSTER_3
bday,"datetime.date(2000,9,12)",CLUSTER_10,CLUSTER_12
next_bday,"datetime.date(2020,9,12)",CLUSTER_10,CLUSTER_12
today,datetime.date.today(),CLUSTER_10,CLUSTER_12
datetime1,datetime.datetime.today(),CLUSTER_10,CLUSTER_12
datetime_today,datetime.datetime.today(),CLUSTER_10,CLUSTER_12
tdelta1,datetime.timedelta(days=1),CLUSTER_10,CLUSTER_12
tdelta2,datetime.timedelta(days=2),CLUSTER_10,CLUSTER_12
tdelta3,datetime.timedelta(days=3),CLUSTER_10,CLUSTER_12
pdf,"pandas.DataFrame([1,2,3,4,5],columns=[""ratings""])",CLUSTER_1,CLUSTER_3
maSeries,pandas.Series(movie_ages.values(),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
pattern,"re.compile(r""[^\d+]"")",CLUSTER_1,CLUSTER_3
pattern,"re.compile(r""\d{2}-\w{3}-\d{4}"")",CLUSTER_1,CLUSTER_3
pattern,"re.compile(r""\d{1,2}-\w{3}-\d{4}"")",CLUSTER_1,CLUSTER_3
it,"numpy.nditer([A,B,None])",CLUSTER_8,CLUSTER_9
Z+,numpy.arange(5),CLUSTER_8,CLUSTER_9
Z,numpy.arange(10),CLUSTER_8,CLUSTER_9
X,numpy.arange(8),CLUSTER_8,CLUSTER_9
Z,numpy.arange(100),CLUSTER_8,CLUSTER_9
Z,"numpy.arange(10,dtype=np.int32)",CLUSTER_8,CLUSTER_9
Z,numpy.arange(9),CLUSTER_8,CLUSTER_9
A,numpy.arange(3),CLUSTER_8,CLUSTER_9
B,numpy.arange(3),CLUSTER_8,CLUSTER_9
A,numpy.arange(25),CLUSTER_8,CLUSTER_9
Z,numpy.arange(20),CLUSTER_8,CLUSTER_9
Z,"numpy.arange(1,15,dtype=np.uint32)",CLUSTER_8,CLUSTER_9
Z,numpy.arange(10000),CLUSTER_8,CLUSTER_9
phi,"numpy.arange(0,10*np.pi,0.1)",CLUSTER_8,CLUSTER_9
Z,"numpy.array([1,2,3,4,5])",CLUSTER_8,CLUSTER_9
P,numpy.array(list(position),CLUSTER_8,CLUSTER_9
Rs,numpy.array(list(R.shape),CLUSTER_8,CLUSTER_9
Zs,numpy.array(list(Z.shape),CLUSTER_8,CLUSTER_9
R_stop,numpy.array(list(shape),CLUSTER_8,CLUSTER_9
Z,"numpy.array([(""Hello"",2.5,3)",CLUSTER_8,CLUSTER_9
I,"numpy.array([0,1,2,3,15,16,32,64,128])",CLUSTER_8,CLUSTER_9
obj,numpy.asarray(array),CLUSTER_8,CLUSTER_9
X,"numpy.asarray([[1.0,0.0,3.0,8.0],
[2.0,0.0,1.0,1.0],
[1.5,2.5,1.0,0.0]])",CLUSTER_8,CLUSTER_9
T,numpy.ascontiguousarray(Z),CLUSTER_8,CLUSTER_9
Z,"numpy.zeros((5,5)",CLUSTER_8,CLUSTER_9
Z,"numpy.zeros((5,5)",CLUSTER_8,CLUSTER_9
Z,"numpy.zeros(10,[('position',[('x',float,1)",CLUSTER_8,CLUSTER_9
Z,"numpy.zeros((n,n)",CLUSTER_8,CLUSTER_9
Z0,numpy.zeros(len(Z),CLUSTER_8,CLUSTER_9
R_start,numpy.zeros((len(shape),CLUSTER_8,CLUSTER_9
rows,"numpy.where(C.any((3,1)",CLUSTER_8,CLUSTER_9
r,numpy.zeros_like(x),CLUSTER_8,CLUSTER_9
F,"numpy.roll(faces.repeat(2,axis=1)",CLUSTER_8,CLUSTER_9
S,"numpy.tensordot(M,V,axes=[[0,2],[0,1]])",CLUSTER_8,CLUSTER_9
Z,numpy.fromiter(generate(),CLUSTER_8,CLUSTER_9
equal,"numpy.array_equal(A,B)",CLUSTER_8,CLUSTER_9
ix,"numpy.indices(shape,dtype=int)",CLUSTER_8,CLUSTER_9
Z,numpy.ones(10),CLUSTER_8,CLUSTER_9
A,"numpy.ones((5,5,3)",CLUSTER_8,CLUSTER_9
R,"numpy.ones(shape,dtype=Z.dtype)",CLUSTER_8,CLUSTER_9
M,"numpy.ones((p,n,n)",CLUSTER_8,CLUSTER_9
V,"numpy.ones((p,n,1)",CLUSTER_8,CLUSTER_9
Z,"numpy.ones((16,16)",CLUSTER_8,CLUSTER_9
equal,"numpy.allclose(A,B)",CLUSTER_8,CLUSTER_9
E,"numpy.all(Z[:,1:]==Z[:,:-1],axis=1)",CLUSTER_8,CLUSTER_9
ret,"numpy.cumsum(a,dtype=float)",CLUSTER_8,CLUSTER_9
r[1:],numpy.cumsum(dr),CLUSTER_8,CLUSTER_9
A,numpy.repeat(np.arange(len(C),CLUSTER_8,CLUSTER_9
F,"numpy.sort(F,axis=1)",CLUSTER_8,CLUSTER_9
rank,numpy.sum(S>1e-10),CLUSTER_8,CLUSTER_9
S,"numpy.add.reduceat(numpy.add.reduceat(Z,np.arange(0,Z.shape[0],k)",CLUSTER_8,CLUSTER_9
T,"numpy.arctan2(Y,X)",CLUSTER_8,CLUSTER_9
G,numpy.exp(-((D-mu),CLUSTER_8,CLUSTER_9
M,"numpy.logical_and.reduce(np.mod(X,1)",CLUSTER_8,CLUSTER_9
R_stop,"numpy.maximum(R_start,(R_stop-numpy.maximum(Z_stop-Zs,0)",CLUSTER_8,CLUSTER_9
R,numpy.sqrt(X**2+Y**2),CLUSTER_8,CLUSTER_9
D,numpy.sqrt((X-X.T),CLUSTER_8,CLUSTER_9
D,numpy.sqrt(X*X+Y*Y),CLUSTER_8,CLUSTER_9
Z,"numpy.linspace(0,1,11,endpoint=False)",CLUSTER_8,CLUSTER_9
r_int,"numpy.linspace(0,r.max()",CLUSTER_8,CLUSTER_9
"X,Y","numpy.atleast_2d(Z[:,0],Z[:,1])",CLUSTER_8,CLUSTER_9
confint,"numpy.percentile(means,[2.5,97.5])",CLUSTER_8,CLUSTER_9
Z+,"numpy.bincount(I,minlength=len(Z)",CLUSTER_8,CLUSTER_9
F,"numpy.bincount(I,X)",CLUSTER_8,CLUSTER_9
D_sums,"numpy.bincount(S,weights=D)",CLUSTER_8,CLUSTER_9
D_counts,numpy.bincount(S),CLUSTER_8,CLUSTER_9
C,"numpy.bincount([1,1,2,3,4,4,6])",CLUSTER_8,CLUSTER_9
"Z['x'],Z['y']","numpy.meshgrid(np.linspace(0,1,5)",CLUSTER_8,CLUSTER_9
"X,Y","numpy.meshgrid(np.linspace(-1,1,10)",CLUSTER_8,CLUSTER_9
x_int,"numpy.interp(r_int,r,x)",CLUSTER_8,CLUSTER_9
y_int,"numpy.interp(r_int,r,y)",CLUSTER_8,CLUSTER_9
G,numpy.unique(G),CLUSTER_8,CLUSTER_9
"_,idx","numpy.unique(T,return_index=True)",CLUSTER_8,CLUSTER_9
"U,S,V",numpy.linalg.svd(Z),CLUSTER_8,CLUSTER_9
y_pos,numpy.arange(len(tweets),CLUSTER_1,CLUSTER_3
y_pos,numpy.arange(len(tweets),CLUSTER_1,CLUSTER_3
y_pos,numpy.arange(len(tweets),CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(file,encoding='ISO-8859-1')",CLUSTER_1,CLUSTER_3
to,"datetime.datetime(2014,11,26)",CLUSTER_11,CLUSTER_10
tf,"datetime.datetime(2015,4,26)",CLUSTER_11,CLUSTER_10
u_bt_pred[site],numpy.zeros(len(times[site]),CLUSTER_11,CLUSTER_10
v_bt_pred[site],numpy.zeros(len(times[site]),CLUSTER_11,CLUSTER_10
u_bc_pred[site],numpy.zeros((len(times[site]),CLUSTER_11,CLUSTER_10
v_bc_pred[site],numpy.zeros((len(times[site]),CLUSTER_11,CLUSTER_10
adjphase,numpy.rad2deg(np.unwrap(np.deg2rad(baroclinic_ellipse[site][const][param]),CLUSTER_11,CLUSTER_10
df,"pandas.read_csv('./carats.csv',header=None)",CLUSTER_1,CLUSTER_3
df,"pandas.concat([fulltime_df,parttime_df])",CLUSTER_11,CLUSTER_9
df,"pandas.merge(df,name_match,how=""left"",left_on='company',right_on='IndeedCompany')",CLUSTER_11,CLUSTER_9
pay_desc_df,"pandas.merge(pay_df,df,how=""inner"",left_on='EmployerName',right_on='Human-VerifiedGPGMatch')",CLUSTER_11,CLUSTER_9
pay_df,pandas.read_csv('UKGenderPayGapData-2017to2018.csv'),CLUSTER_11,CLUSTER_9
name_match,pandas.read_csv('IndeedtoGPGCompanyName-indeed_companies_match.csv'),CLUSTER_11,CLUSTER_9
txt,json.loads(txt),CLUSTER_11,CLUSTER_9
cleantext,"re.sub(cleanr,'',raw_html)",CLUSTER_11,CLUSTER_9
cleanr,re.compile('<.*?>'),CLUSTER_11,CLUSTER_9
indexes,numpy.arange(train_dataset_info.shape[0]),CLUSTER_0,CLUSTER_0
names,"numpy.array(subcellular_location[['Enhanced','Supported','Approved','Uncertain']].values[j])",CLUSTER_0,CLUSTER_0
train_dataset_info,numpy.array(train_dataset_info),CLUSTER_0,CLUSTER_0
batch_labels,numpy.zeros((len(X_train_batch),CLUSTER_0,CLUSTER_0
steps_per_epoch,numpy.ceil(float(len(train_indexes),CLUSTER_0,CLUSTER_0
validation_steps,numpy.ceil(float(len(valid_indexes),CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(data_list,columns=['Id','Names','Target'])",CLUSTER_0,CLUSTER_0
subcellular_location,"pandas.read_csv('../input/external-data-for-protein-atlas/subcellular_location.tsv',sep=""\t"",index_col=None)",CLUSTER_0,CLUSTER_0
response,requests.get(url),CLUSTER_0,CLUSTER_0
response,requests.get(link),CLUSTER_0,CLUSTER_0
"train_indexes,valid_indexes","sklearn.model_selection.train_test_split(indexes,test_size=0.15,random_state=21)",CLUSTER_0,CLUSTER_0
world_bank_df,pandas.read_csv('data/WORLD_BANK.csv'),CLUSTER_1,CLUSTER_3
slid_df,pandas.read_csv('data/SLID.csv'),CLUSTER_1,CLUSTER_3
linear_fit,"numpy.polyfit(world_bank_df.gdp_capita,world_bank_df.c02,1)",CLUSTER_1,CLUSTER_3
quadratic_fit,"numpy.polyfit(world_bank_df.gdp_capita,world_bank_df.c02,2)",CLUSTER_1,CLUSTER_3
male_fit,"numpy.polyfit(slid_male.educ,slid_male.wage,1)",CLUSTER_1,CLUSTER_3
female_fit,"numpy.polyfit(slid_female.educ,slid_female.wage,1)",CLUSTER_1,CLUSTER_3
X,numpy.array(ct.fit_transform(X),CLUSTER_5,CLUSTER_5
ds,pandas.read_csv('../datasets/equake_clean.csv'),CLUSTER_5,CLUSTER_5
ct,"sklearn.compose.ColumnTransformer(transformers=[('encoder',OneHotEncoder()",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=0)",CLUSTER_5,CLUSTER_5
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
classifier,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',random_state=0)",CLUSTER_5,CLUSTER_5
EEG_df,pandas.read_csv('mergedTrialData.csv'),CLUSTER_7,CLUSTER_5
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,
test_size=test_size,
random_state=random_state)",CLUSTER_7,CLUSTER_5
rkfold,"sklearn.model_selection.RepeatedKFold(n_splits=7,n_repeats=3,random_state=42)",CLUSTER_7,CLUSTER_5
rkfold,"sklearn.model_selection.RepeatedKFold(n_splits=7,n_repeats=3,random_state=42)",CLUSTER_7,CLUSTER_5
grid,sklearn.model_selection.GridSearchCV(KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
grid,sklearn.model_selection.GridSearchCV(KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""/Users/manishanker.talusani/Statistics_ML_26Aug/kaggle/train.csv"")",CLUSTER_8,CLUSTER_1
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=1)",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_std,y,test_size=0.3,random_state=1)",CLUSTER_8,CLUSTER_1
clf_random_forest,sklearn.ensemble.RandomForestClassifier(n_estimators=170),CLUSTER_8,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_8,CLUSTER_1
clf_svm,sklearn.svm.SVC(C=5),CLUSTER_8,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_1,CLUSTER_9
bbox_transform,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_9
table,"pandas.DataFrame(data,columns=['lag',""AC"",""Q"",""Prob(>Q)",CLUSTER_1,CLUSTER_9
Data,"pandas.read_csv('data-1.csv',dayfirst=False,decimal=',',index_col=None,parse_dates=[0])",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
reqSession,requests.Session(),CLUSTER_10,CLUSTER_12
resApi,"requests.post(apiUrl,data=params,headers=headers(pageUrl)",CLUSTER_10,CLUSTER_12
res,"requests.post(apiUrl,data=params,headers=headers,cookies=userCookie,timeout=5)",CLUSTER_10,CLUSTER_12
df,pandas.DataFrame(columns=cols),CLUSTER_9,CLUSTER_2
df,pandas.read_csv('arizona.csv'),CLUSTER_9,CLUSTER_2
x_axis,numpy.arange(len(df),CLUSTER_1,CLUSTER_3
df,pandas.read_csv(path),CLUSTER_1,CLUSTER_3
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_3,CLUSTER_10
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_3,CLUSTER_10
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_3,CLUSTER_10
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_3,CLUSTER_10
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_3,CLUSTER_10
grad_difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
data_na,pandas.DataFrame(data_na.reset_index(),CLUSTER_1,CLUSTER_3
data,pandas.read_csv('titanic.csv'),CLUSTER_1,CLUSTER_3
data,pandas.read_csv('houseprice.csv'),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
x,"pandas.DataFrame(gdp_dataframe,columns=['date'])",CLUSTER_10,CLUSTER_4
gdp_change,"pandas.DataFrame(gdp_dataframe,columns=['change-current'])",CLUSTER_10,CLUSTER_4
unemployment,"pandas.DataFrame(unemploy_dataframe,columns=['unemployment'])",CLUSTER_10,CLUSTER_4
df_gdp,pandas.read_csv('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/projects/coursera_project/clean_gdp.csv'),CLUSTER_10,CLUSTER_4
df_unemployment,pandas.read_csv('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/projects/coursera_project/clean_unemployment.csv'),CLUSTER_10,CLUSTER_4
gdp_dataframe,pandas.read_csv(csv_path),CLUSTER_10,CLUSTER_4
gdp_dataframe,pandas.read_csv(csv_path),CLUSTER_10,CLUSTER_4
unemploy_dataframe,pandas.read_csv(csv_path),CLUSTER_10,CLUSTER_4
directory,os.getcwd(),CLUSTER_10,CLUSTER_4
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_5,CLUSTER_10
response,"requests.get(url,stream=True)",CLUSTER_9,CLUSTER_7
m,"re.match(r""url\((.*)",CLUSTER_9,CLUSTER_7
results,numpy.squeeze(results),CLUSTER_9,CLUSTER_7
n,numpy.sum(samples<=(logAmin+delta),CLUSTER_4,CLUSTER_11
TMAX,"numpy.ceil(max(U[:,-eps]*psr.toas/const.day)",CLUSTER_4,CLUSTER_11
TMIN,"numpy.floor(max(U[:,eps]*psr.toas/const.day)",CLUSTER_4,CLUSTER_11
tchunk,"numpy.linspace(TMIN,TMAX,41)",CLUSTER_4,CLUSTER_11
dA,"numpy.linspace(dAmin,dAmax,100)",CLUSTER_4,CLUSTER_11
xs,"numpy.linspace(-23,-9.5,100)",CLUSTER_4,CLUSTER_11
x0,numpy.hstack(p.sample(),CLUSTER_4,CLUSTER_11
ch_plt,"numpy.hstack([chain_bwm,chain_L.reshape(N,1)",CLUSTER_4,CLUSTER_11
cov,numpy.diag(np.ones(ndim),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(16,4)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(width,height)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(width,height)",CLUSTER_4,CLUSTER_11
chain_raw,"pandas.read_csv(rundir+'/chain_1.txt',
sep='\t',dtype=float,header=None)",CLUSTER_4,CLUSTER_11
y,"numpy.hstack([y_train,y_test])",CLUSTER_7,CLUSTER_5
X,"numpy.vstack([X_train,X_test])",CLUSTER_7,CLUSTER_5
n_classes,numpy.unique(y),CLUSTER_7,CLUSTER_5
X_train,"numpy.loadtxt(""samsung_train.txt"")",CLUSTER_7,CLUSTER_5
y_train,"numpy.loadtxt(""samsung_train_labels.txt"")",CLUSTER_7,CLUSTER_5
X_test,"numpy.loadtxt(""samsung_test.txt"")",CLUSTER_7,CLUSTER_5
y_test,"numpy.loadtxt(""samsung_test_labels.txt"")",CLUSTER_7,CLUSTER_5
tab,"pandas.crosstab(y,cluster_labels,margins=True)",CLUSTER_7,CLUSTER_5
tab,"pandas.crosstab(y_test,y_predicted,margins=True)",CLUSTER_7,CLUSTER_5
kmean,"sklearn.cluster.KMeans(n_clusters=n_classes,n_init=100,
random_state=42,n_jobs=1)",CLUSTER_7,CLUSTER_5
kmeans,"sklearn.cluster.KMeans(n_clusters=k,n_init=100,random_state=42,n_jobs=1)",CLUSTER_7,CLUSTER_5
ag,"sklearn.cluster.AgglomerativeClustering(n_clusters=n_classes,linkage='ward')",CLUSTER_7,CLUSTER_5
pca,"sklearn.decomposition.PCA(n_components=0.9,random_state=42)",CLUSTER_7,CLUSTER_5
pca,"sklearn.decomposition.PCA(n_components=0.9,random_state=42)",CLUSTER_7,CLUSTER_5
best_svc,"sklearn.model_selection.GridSearchCV(svc,svc_params,n_jobs=1,cv=3,verbose=1)",CLUSTER_7,CLUSTER_5
best_svc_pca,"sklearn.model_selection.GridSearchCV(svc,svc_params,n_jobs=1,cv=3,verbose=1)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
svc,sklearn.svm.LinearSVC(random_state=42),CLUSTER_7,CLUSTER_5
svc,sklearn.svm.LinearSVC(random_state=42),CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame({
""标题"":r.html.xpath('//div[@class=""news_title""]/a/@title')",CLUSTER_8,CLUSTER_4
数据,pandas.DataFrame(数据字典),CLUSTER_8,CLUSTER_4
数据,pandas.DataFrame(数据字典),CLUSTER_8,CLUSTER_4
数据,pandas.DataFrame(数据字典),CLUSTER_8,CLUSTER_4
数据,pandas.DataFrame(数据字典),CLUSTER_8,CLUSTER_4
df,pandas.DataFrame(outcomes),CLUSTER_8,CLUSTER_4
pattern,re.compile(r'abc'),CLUSTER_10,CLUSTER_4
p,re.compile(r'\d'),CLUSTER_10,CLUSTER_4
p,re.compile(r'\s'),CLUSTER_10,CLUSTER_4
pattern,re.compile('\d\d\d[.-]\d\d\d[-.]\d\d\d'),CLUSTER_10,CLUSTER_4
pattern,re.compile('[^b]at'),CLUSTER_10,CLUSTER_4
pattern,re.compile('\d{3}[.-]\d{3}[-.]\d{3}'),CLUSTER_10,CLUSTER_4
pattern,"re.compile(""M(r|s|rs)",CLUSTER_10,CLUSTER_4
pattern,re.compile('\w*@\w+\.\w+'),CLUSTER_10,CLUSTER_4
pattern,re.compile('[a-zA-Z0-9.-]+@[a-z-]+\.(com|edu|net),CLUSTER_10,CLUSTER_4
pattern,re.compile('https?://(www\.),CLUSTER_10,CLUSTER_4
pattern,re.compile('https?://(www\.),CLUSTER_10,CLUSTER_4
pattern,"re.compile(r'start',re.I)",CLUSTER_10,CLUSTER_4
arr,numpy.array(model.cv_results_['mean_test_score']),CLUSTER_5,CLUSTER_1
binc,numpy.bincount(target),CLUSTER_5,CLUSTER_1
dataf,pandas.read_csv('fraud_data.csv'),CLUSTER_5,CLUSTER_1
df,pandas.read_csv('fraud_data.csv'),CLUSTER_5,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
"precision,recall,thresholds","sklearn.metrics.precision_recall_curve(y_test,lr)",CLUSTER_5,CLUSTER_1
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,lr)",CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_5,CLUSTER_1
dclf,sklearn.dummy.DummyClassifier(strategy='most_frequent'),CLUSTER_5,CLUSTER_1
rs,"sklearn.metrics.recall_score(y_test,result)",CLUSTER_5,CLUSTER_1
svm,sklearn.svm.SVC(),CLUSTER_5,CLUSTER_1
svm,"sklearn.svm.SVC(gamma=1e-07,C=1e9)",CLUSTER_5,CLUSTER_1
cm,"sklearn.metrics.confusion_matrix(y_test,result)",CLUSTER_5,CLUSTER_1
model,"sklearn.model_selection.GridSearchCV(lr,param_grid=grid,scoring='recall')",CLUSTER_5,CLUSTER_1
src,numpy.float32(original_img_pts),CLUSTER_1,CLUSTER_10
dst,numpy.float32(destination_pts),CLUSTER_1,CLUSTER_10
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_1,CLUSTER_10
labels,numpy.array([xforxinrange(100),CLUSTER_2,CLUSTER_6
accuracies_mean,numpy.array([np.mean(v),CLUSTER_3,CLUSTER_10
accuracies_std,numpy.array([np.std(v),CLUSTER_3,CLUSTER_10
idxs,numpy.flatnonzero(y_train==y),CLUSTER_3,CLUSTER_10
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_train_temp,"numpy.reshape(X_train_temp,(num_train_temp,-1)",CLUSTER_3,CLUSTER_10
y_train_temp,"numpy.reshape(y_train_temp,(num_train_temp,-1)",CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_val_pred==y_val_temp),CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
X_train_temp,"numpy.delete(X_train_folds,i,0)",CLUSTER_3,CLUSTER_10
y_train_temp,"numpy.delete(y_train_folds,i,0)",CLUSTER_3,CLUSTER_10
acc_arr,"numpy.append(acc_arr,accuracy)",CLUSTER_3,CLUSTER_10
X_train_folds,"numpy.array_split(X_train,num_folds)",CLUSTER_3,CLUSTER_10
y_train_folds,"numpy.array_split(y_train,num_folds)",CLUSTER_3,CLUSTER_10
difference,"numpy.linalg.norm(dists-dists_one,ord='fro')",CLUSTER_3,CLUSTER_10
difference,"numpy.linalg.norm(dists-dists_two,ord='fro')",CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
aerial,"pandas.read_csv(""../TimeSeriesPredictionwithEDA/data/operations.csv"")",CLUSTER_7,CLUSTER_8
weather_station_location,"pandas.read_csv(""../TimeSeriesPredictionwithEDA/data/WeatherStationLocations.csv"")",CLUSTER_7,CLUSTER_8
weather,"pandas.read_csv(""../TimeSeriesPredictionwithEDA/data/SummaryofWeather.csv"")",CLUSTER_7,CLUSTER_8
"weather_bin[""Date""]","pandas.to_datetime(weather_bin[""Date""])",CLUSTER_7,CLUSTER_8
orig,"matplotlib.pyplot.plot(ts,color='red',label='Original')",CLUSTER_7,CLUSTER_8
mean,"matplotlib.pyplot.plot(rolmean,color='black',label='RollingMean')",CLUSTER_7,CLUSTER_8
std,"matplotlib.pyplot.plot(rolstd,color='green',label='RollingStd')",CLUSTER_7,CLUSTER_8
error,"sklearn.metrics.mean_squared_error(ts,forecast2)",CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(data=sensorTrain),CLUSTER_4,CLUSTER_11
prediction,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
blf,"sklearn.svm.SVC(kernel='linear',gamma='auto')",CLUSTER_4,CLUSTER_11
clf,"sklearn.svm.SVC(kernel='rbf',gamma=0.0001)",CLUSTER_4,CLUSTER_11
alf,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_4,CLUSTER_11
meteo,"pandas.DataFrame({""DATE"":meteo[""DATE""],
""TIME"":meteo[""TIME""],
""airT_Avg"":meteo[""airT_Avg""]})",CLUSTER_11,CLUSTER_3
soil,"pandas.DataFrame({""AÑO"":soil[""2Year_RTML""],
""DIA"":soil[""3Day_RTML""],
""HORA"":soil[""4Hour_Minute_RTML""],
""Tsuelo_10cm"":soil[""Tsuelo_10cm""],
""Tsuelo_20cm"":soil[""Tsuelo_20cm""],
""Tsuelo_40cm"":soil[""Tsuelo_40cm""],
""Tsuelo_85cm"":soil[""Tsuelo_85cm""]})",CLUSTER_11,CLUSTER_3
meteoDIA,"pandas.DataFrame({""FECHA"":meteoDIA[""DATE""],
""Tair_AvgDiaria"":meteoDIA[""Tair_AvgDiaria""],
""Tair_max"":meteoDIA[""Tair_max""],
""Tair_min"":meteoDIA[""Tair_min""]})",CLUSTER_11,CLUSTER_3
undia,"pandas.DataFrame({""HORA"":hora,
""Taire"":meteo1dia,
""Tsuelo_10cm"":soil1dia[""Tsuelo_10cm""],
""Tsuelo_20cm"":soil1dia[""Tsuelo_20cm""],
""Tsuelo_40cm"":soil1dia[""Tsuelo_40cm""],
""Tsuelo_85cm"":soil1dia[""Tsuelo_85cm""]})",CLUSTER_11,CLUSTER_3
MeteoEnero,"pandas.DataFrame({
""FECHA"":fecha,
""HORA"":hora,
""PROM"":promedios
})",CLUSTER_11,CLUSTER_3
meteo,"pandas.read_csv(""meteo-nogal-09.csv"",engine=""python"")",CLUSTER_11,CLUSTER_3
soil,"pandas.read_csv(""soil-nogal-09.csv"",engine=(""python"")",CLUSTER_11,CLUSTER_3
"meteo[""DATE""]","pandas.to_datetime(meteo[""DATE""],dayfirst=True)",CLUSTER_11,CLUSTER_3
solution,pandas.DataFrame(ss['Day.Index']),CLUSTER_7,CLUSTER_5
df,"pandas.concat([df,df_month],axis=1)",CLUSTER_7,CLUSTER_5
df,"pandas.concat([df,df_campaign],axis=1)",CLUSTER_7,CLUSTER_5
solution,"pandas.concat([solution,pd.DataFrame(predicted,columns=['Obtained.Leads'])",CLUSTER_7,CLUSTER_5
df_month,"pandas.get_dummies(df['Month'],prefix='month')",CLUSTER_7,CLUSTER_5
df_campaign,"pandas.get_dummies(df['Campaign'],prefix='campaign')",CLUSTER_7,CLUSTER_5
train,"pandas.read_csv('modified_train.csv',parse_dates=['Day.Index'],dayfirst=True)",CLUSTER_7,CLUSTER_5
test,"pandas.read_csv('modified_test.csv',parse_dates=['Day.Index'],dayfirst=True)",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv('modified_data.csv',parse_dates=['Day.Index'],dayfirst=True)",CLUSTER_7,CLUSTER_5
ss,pandas.read_csv('samplesubmission.csv'),CLUSTER_7,CLUSTER_5
xgb,pandas.read_csv(path+'solution1.csv'),CLUSTER_7,CLUSTER_5
Lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
population,"numpy.column_stack((height,weight)",CLUSTER_1,CLUSTER_10
_,matplotlib.pyplot.boxplot(height),CLUSTER_1,CLUSTER_10
_,matplotlib.pyplot.boxplot(weight),CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.grid(b=True,which='major',color='b',linestyle='-')",CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.grid(b=True,which='minor',color='r',linestyle='--')",CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.grid(b=True,which='major',color='b',linestyle='-')",CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.grid(b=True,which='minor',color='r',linestyle='--')",CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.hist(height,num_bins,facecolor='blue',alpha=0.5)",CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.hist(weight,num_bins,facecolor='blue',alpha=0.5)",CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.scatter(height,weight,alpha=0.5,edgecolors='blue')",CLUSTER_1,CLUSTER_10
_,matplotlib.pyplot.xlabel('cm'),CLUSTER_1,CLUSTER_10
_,matplotlib.pyplot.xlabel('kg'),CLUSTER_1,CLUSTER_10
_,matplotlib.pyplot.yscale('linear'),CLUSTER_1,CLUSTER_10
_,matplotlib.pyplot.yscale('linear'),CLUSTER_1,CLUSTER_10
img,"matplotlib.pyplot.imread(os.path.join(path,imgpath)",CLUSTER_2,CLUSTER_0
pred,numpy.argmax(model.predict(generator['val']),CLUSTER_2,CLUSTER_0
imgpath,os.listdir(path),CLUSTER_2,CLUSTER_0
"train_frame,test_frame","sklearn.model_selection.train_test_split(image_dataframe,test_size=0.15,random_state=911)",CLUSTER_2,CLUSTER_0
Features,numpy.unique(df['property_type']),CLUSTER_7,CLUSTER_3
Features_ft,numpy.unique(df_filtered['property_type']),CLUSTER_7,CLUSTER_3
p10,"numpy.nanpercentile(df_filtered.price_usd_per_m2,10)",CLUSTER_7,CLUSTER_3
p90,"numpy.nanpercentile(df_filtered.price_usd_per_m2,90)",CLUSTER_7,CLUSTER_3
table,"pandas.crosstab(df_filtered_barrio_not_match.barrio,df_filtered_barrio_not_match.barrio_publicado)",CLUSTER_7,CLUSTER_3
table,"pandas.pivot_table(df,values='price_usd_per_m2',index=['barrio'],aggfunc=np.mean)",CLUSTER_7,CLUSTER_3
table,"pandas.pivot_table(df,values='price_usd_per_m2',index=['barrio'],aggfunc=np.mean)",CLUSTER_7,CLUSTER_3
df,"pandas.read_csv('./dataset/datos_properati.csv',index_col='created_on',parse_dates=True)",CLUSTER_7,CLUSTER_3
g,seaborn.distplot(df_filtered[df_filtered.barrio.isin(barrios_baratos),CLUSTER_7,CLUSTER_3
g,seaborn.distplot(df_filtered[df_filtered.barrio.isin(barrios_baratos),CLUSTER_7,CLUSTER_3
g,seaborn.distplot(df_filtered[df_filtered.barrio.isin(barrios_baratos),CLUSTER_7,CLUSTER_3
top_ch,numpy.arange(len(net.chars),CLUSTER_6,CLUSTER_6
encoded,numpy.array([char2int[ch]forchintext]),CLUSTER_6,CLUSTER_6
test_seq,"numpy.array([[3,5,1]])",CLUSTER_6,CLUSTER_6
x,numpy.array([[net.char2int[char]]]),CLUSTER_6,CLUSTER_6
one_hot,numpy.zeros((np.multiply(*arr.shape),CLUSTER_6,CLUSTER_6
df,pandas.read_csv('iris.csv'),CLUSTER_5,CLUSTER_5
x1,"numpy.linspace(0.0,50.0,50)",CLUSTER_5,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=2,figsize=(10,7)",CLUSTER_5,CLUSTER_5
"train_X,test_X,train_y,test_y","sklearn.model_selection.train_test_split(features,label,test_size=0.2,random_state=33)",CLUSTER_5,CLUSTER_5
dfclass,pandas.read_csv(PATH/'train_classes.csv'),CLUSTER_6,CLUSTER_9
dfbb,pandas.read_csv(PATH/'train_bbs.csv'),CLUSTER_6,CLUSTER_9
lrs,"numpy.array([lr/100,lr/10,lr])",CLUSTER_6,CLUSTER_9
lrs,"numpy.array([lr/100,lr/10,lr])",CLUSTER_6,CLUSTER_9
c,numpy.argmax(y[i][4:]),CLUSTER_6,CLUSTER_9
bb,scipy.special.expit(y[i][:4]),CLUSTER_6,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,6)",CLUSTER_5,CLUSTER_9
results,"numpy.zeros((3,len(hs)",CLUSTER_5,CLUSTER_9
results,"numpy.zeros((3,len(hs)",CLUSTER_5,CLUSTER_9
mu,numpy.mean(data),CLUSTER_5,CLUSTER_9
train_matrix,"numpy.repeat([train],len(test)",CLUSTER_5,CLUSTER_9
m,numpy.hstack([np.zeros(67),CLUSTER_5,CLUSTER_9
data,"numpy.vstack([class1,class2])",CLUSTER_5,CLUSTER_9
res,"scipy.stats.cumfreq(i,100)",CLUSTER_5,CLUSTER_9
"train,test","sklearn.model_selection.train_test_split(image0,train_size=100)",CLUSTER_5,CLUSTER_9
x,"pandas.get_dummies(x,columns=['Pclass',""Sex"",""Embarked""])",CLUSTER_7,CLUSTER_5
df_test,"pandas.get_dummies(df_test,columns=['Pclass',""Sex"",""Embarked""])",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""train.csv"")",CLUSTER_7,CLUSTER_5
test,"pandas.read_csv(""test.csv"")",CLUSTER_7,CLUSTER_5
imputer,"sklearn.impute.SimpleImputer(missing_values=np.nan,strategy=""mean"")",CLUSTER_7,CLUSTER_5
imputer_test1,"sklearn.impute.SimpleImputer(missing_values=np.nan,strategy=""mean"")",CLUSTER_7,CLUSTER_5
imputer_test1,"sklearn.impute.SimpleImputer(missing_values=np.nan,strategy=""median"")",CLUSTER_7,CLUSTER_5
labelencoder_train1,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
labelencoder_train1,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
labelencoder_test1,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
labelencoder_test2,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler_test,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=17)",CLUSTER_7,CLUSTER_5
gcv_lgr,"sklearn.model_selection.GridSearchCV(lgr,lgr_params,n_jobs=-1,cv=10,verbose=1)",CLUSTER_7,CLUSTER_5
knn_gcv,"sklearn.model_selection.GridSearchCV(knn,knn_params,n_jobs=-1,cv=10,verbose=1)",CLUSTER_7,CLUSTER_5
rfc_gcv,"sklearn.model_selection.GridSearchCV(rfc,rfc_params,n_jobs=-1,cv=10,verbose=1)",CLUSTER_7,CLUSTER_5
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=42,n_jobs=-1)",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
lgr,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_5
logits,"numpy.linspace(-6,6,200)",CLUSTER_5,CLUSTER_5
X_train,"pandas.DataFrame(
dv.fit_transform(X_train.to_dict(orient='records')",CLUSTER_5,CLUSTER_5
X_test,"pandas.DataFrame(
dv.transform(X_test.to_dict(orient='records')",CLUSTER_5,CLUSTER_5
c,"pandas.DataFrame(
confusion_matrix(y_test,pred)",CLUSTER_5,CLUSTER_5
pltdf,"pandas.DataFrame({
'Class':y_test,
'pred':lr.predict_proba(X_test)",CLUSTER_5,CLUSTER_5
ax,"pandas.DataFrame({'probs':probs},index=logits)",CLUSTER_5,CLUSTER_5
ax,"pandas.DataFrame({'probs':probs},index=logits)",CLUSTER_5,CLUSTER_5
c,"pandas.DataFrame(
confusion_matrix(y_test,pred)",CLUSTER_5,CLUSTER_5
df,pandas.read_csv('abalone19.csv'),CLUSTER_5,CLUSTER_5
_,"matplotlib.pyplot.plot(fpr,tpr)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df[predictors],df[target],random_state=2)",CLUSTER_5,CLUSTER_5
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
dv,sklearn.feature_extraction.DictVectorizer(sparse=False),CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
"fpr,tpr,thresh","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_5,CLUSTER_5
"fpr,tpr,thresh","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_5,CLUSTER_5
"fpr,tpr,thresh","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_5,CLUSTER_5
"fpr,tpr,thresh","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_5,CLUSTER_5
"fpr,tpr,thresh","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_5,CLUSTER_5
"fpr,tpr,thresh","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_5,CLUSTER_5
standard_auc,"sklearn.metrics.roc_auc_score(y_test,pred)",CLUSTER_5,CLUSTER_5
poly_auc,"sklearn.metrics.roc_auc_score(y_test,pred)",CLUSTER_5,CLUSTER_5
rf_auc,"sklearn.metrics.roc_auc_score(y_test,pred)",CLUSTER_5,CLUSTER_5
poly,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_5,CLUSTER_5
poly,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_5,CLUSTER_5
lrcv,sklearn.linear_model.LogisticRegressionCV(scoring='roc_auc'),CLUSTER_5,CLUSTER_5
polylr,"sklearn.pipeline.Pipeline([('poly',poly)",CLUSTER_5,CLUSTER_5
gb,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_5,CLUSTER_5
item_table_df,pandas.DataFrame(item_table),CLUSTER_8,CLUSTER_4
movie_df,pandas.read_csv('dataset/movies.csv'),CLUSTER_8,CLUSTER_4
self.context,numpy.array(context),CLUSTER_3,CLUSTER_6
context,"numpy.array([[1,2],[4,5],[7,8]])",CLUSTER_3,CLUSTER_6
context,"numpy.array([[1,2],[4,5],[7,8]])",CLUSTER_3,CLUSTER_6
context,"numpy.array([[1,2],[4,5],[7,8]])",CLUSTER_3,CLUSTER_6
self.b,numpy.zeros(n_features),CLUSTER_3,CLUSTER_6
assert(lu.b,=numpy.zeros(n_features),CLUSTER_3,CLUSTER_6
assertselected_arm,=numpy.argmax(ucb_score),CLUSTER_3,CLUSTER_6
index,numpy.argmax(np.asarray(cosine_similarities),CLUSTER_11,CLUSTER_1
data,"pandas.read_csv(""C:/Users/JRF/Desktop/CGCB/Data/FAQ.csv"")",CLUSTER_11,CLUSTER_1
a,datetime.datetime.now(),CLUSTER_11,CLUSTER_1
b,datetime.datetime.now(),CLUSTER_11,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_11,CLUSTER_11
ax,matplotlib.pyplot.subplot(111),CLUSTER_11,CLUSTER_11
ax,matplotlib.pyplot.subplot(111),CLUSTER_11,CLUSTER_11
ax,matplotlib.pyplot.subplot(111),CLUSTER_11,CLUSTER_11
df,"pandas.DataFrame(data=log_df,columns=cols)",CLUSTER_11,CLUSTER_11
df,"pandas.DataFrame(data=log_df,columns=cols)",CLUSTER_11,CLUSTER_11
df,"pandas.DataFrame(data=log_df,columns=cols)",CLUSTER_11,CLUSTER_11
df['Date'],pandas.to_datetime(df['GAME_DATE']),CLUSTER_11,CLUSTER_11
df['Date'],pandas.to_datetime(df['GAME_DATE']),CLUSTER_11,CLUSTER_11
df['Date'],pandas.to_datetime(df['GAME_DATE']),CLUSTER_11,CLUSTER_11
label_date,"datetime.datetime(2018,4,12,0,0)",CLUSTER_11,CLUSTER_11
label_date,"datetime.datetime(2018,4,12,0,0)",CLUSTER_11,CLUSTER_11
label_date,"datetime.datetime(2018,4,12,0,0)",CLUSTER_11,CLUSTER_11
season_start,"datetime.datetime(2018,10,15,0,0)",CLUSTER_11,CLUSTER_11
nov,"datetime.datetime(2018,11,1,0,0)",CLUSTER_11,CLUSTER_11
nov_mid,"datetime.datetime(2018,11,15,0,0)",CLUSTER_11,CLUSTER_11
dec,"datetime.datetime(2018,12,1,0,0)",CLUSTER_11,CLUSTER_11
dec_mid,"datetime.datetime(2018,12,15,0,0)",CLUSTER_11,CLUSTER_11
jan,"datetime.datetime(2019,1,1,0,0)",CLUSTER_11,CLUSTER_11
jan_mid,"datetime.datetime(2019,1,12,0,0)",CLUSTER_11,CLUSTER_11
label_date,"datetime.datetime(2019,1,13,0,0)",CLUSTER_11,CLUSTER_11
season_start,"datetime.datetime(2018,10,15,0,0)",CLUSTER_11,CLUSTER_11
nov,"datetime.datetime(2018,11,1,0,0)",CLUSTER_11,CLUSTER_11
nov_mid,"datetime.datetime(2018,11,15,0,0)",CLUSTER_11,CLUSTER_11
dec,"datetime.datetime(2018,12,1,0,0)",CLUSTER_11,CLUSTER_11
dec_mid,"datetime.datetime(2018,12,15,0,0)",CLUSTER_11,CLUSTER_11
jan,"datetime.datetime(2019,1,1,0,0)",CLUSTER_11,CLUSTER_11
jan_mid,"datetime.datetime(2019,1,12,0,0)",CLUSTER_11,CLUSTER_11
label_date,"datetime.datetime(2019,1,14,0,0)",CLUSTER_11,CLUSTER_11
df,"pandas.DataFrame(randn(5,4)",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(6,2)",CLUSTER_8,CLUSTER_3
df,pandas.read_csv('time_data/walmart_stock.csv'),CLUSTER_1,CLUSTER_3
boston_dataset,sklearn.datasets.load_boston(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,
test_size=0.2,
random_state=10)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,
test_size=0.2,
random_state=10)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,
test_size=0.2,
random_state=10)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,
test_size=0.2,
random_state=10)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,
test_size=0.2,
random_state=10)",CLUSTER_7,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
data,"pandas.DataFrame(data=boston_dataset.data,columns=boston_dataset.feature_names)",CLUSTER_7,CLUSTER_5
org_coef,"pandas.DataFrame({'coef':results.params,'p-value':round(results.pvalues,3)",CLUSTER_7,CLUSTER_5
coef_minus_indus,"pandas.DataFrame({'coef':results.params,'p-value':round(results.pvalues,3)",CLUSTER_7,CLUSTER_5
reduced_coef,"pandas.DataFrame({'coef':results.params,'p-value':round(results.pvalues,3)",CLUSTER_7,CLUSTER_5
mask,numpy.zeros_like(data.corr(),CLUSTER_7,CLUSTER_5
y_log,numpy.log(data['price']),CLUSTER_7,CLUSTER_5
prices,numpy.log(data['price']),CLUSTER_7,CLUSTER_5
prices,numpy.log(data['price']),CLUSTER_7,CLUSTER_5
prices,numpy.log(data['price']),CLUSTER_7,CLUSTER_5
upper_bound,numpy.log(30),CLUSTER_7,CLUSTER_5
lower_bound,numpy.log(30),CLUSTER_7,CLUSTER_5
triangle_indices,numpy.triu_indices_from(mask),CLUSTER_7,CLUSTER_5
precipitation_data_df,pandas.DataFrame(precipitation_data),CLUSTER_1,CLUSTER_3
similarity,numpy.zeros(self.founders.shape[0]),CLUSTER_8,CLUSTER_3
self.sum_of_weights,numpy.sum(weights),CLUSTER_8,CLUSTER_3
founders,"pandas.read_csv(""data/cleaned_input_data.csv"",encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
output,"pandas.read_csv(""data/cleaned_output_data.csv"",encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
weight_df,"pandas.read_csv(""data/weights.csv"",encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
data,json.load(infile),CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('score.sc',header=0,sep='\s+')",CLUSTER_8,CLUSTER_3
recent_grads,pandas.read_csv('recent-grads.csv'),CLUSTER_8,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(5,12)",CLUSTER_8,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(5,12)",CLUSTER_8,CLUSTER_3
reordered,"numpy.zeros((n_nodes,n_nodes)",CLUSTER_5,CLUSTER_9
D_sqrt_inv,numpy.sqrt(np.linalg.inv(D),CLUSTER_5,CLUSTER_9
D_largest_sqrt_inv,numpy.sqrt(np.linalg.inv(D_largest),CLUSTER_5,CLUSTER_9
D,"numpy.diag(np.sum(adjacency,axis=0)",CLUSTER_5,CLUSTER_9
D_largest,"numpy.diag(np.sum(largest_adjacency,axis=0)",CLUSTER_5,CLUSTER_9
adjacency,numpy.load('../data/adj_matr.npy'),CLUSTER_5,CLUSTER_9
largest_adjacency,numpy.load('../data/largest_connected_component_adjacency.npy'),CLUSTER_5,CLUSTER_9
"(eigval,eigvect)",numpy.linalg.eigh(laplacian),CLUSTER_5,CLUSTER_9
laplacian_combinatorial_largest,scipy.sparse.csr_matrix(laplacian_combinatorial_largest),CLUSTER_5,CLUSTER_9
laplacian_normalized_largest,scipy.sparse.csr_matrix(laplacian_normalized_largest),CLUSTER_5,CLUSTER_9
kmeans,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_5,CLUSTER_9
kmeans_norm,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_5,CLUSTER_9
files,os.listdir(dir),CLUSTER_4,CLUSTER_11
time,numpy.array(time),CLUSTER_4,CLUSTER_11
spectra,numpy.array(spectra),CLUSTER_4,CLUSTER_11
spectra_errors,numpy.array(spectra_errors),CLUSTER_4,CLUSTER_11
new_errors,"numpy.array([np.std(spectra,axis=0)",CLUSTER_4,CLUSTER_11
alligned_profile,"numpy.mean(alligned_model,axis=0)",CLUSTER_4,CLUSTER_11
scale,numpy.sqrt(3.0),CLUSTER_4,CLUSTER_11
master_dat,numpy.loadtxt('sodium_spectrum.dat'),CLUSTER_4,CLUSTER_11
master_dat,numpy.loadtxt('sodium_spectrum.dat'),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(5,2,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(5,2,sharex=True)",CLUSTER_4,CLUSTER_11
dataFrame,pandas.read_csv(path),CLUSTER_8,CLUSTER_3
x,numpy.arange(N[-1]),CLUSTER_3,CLUSTER_10
x,numpy.arange(N[-1]),CLUSTER_3,CLUSTER_10
N,"numpy.arange(1,20)",CLUSTER_3,CLUSTER_10
x,numpy.sort(x),CLUSTER_3,CLUSTER_10
x,numpy.sort(x),CLUSTER_3,CLUSTER_10
start,time.time(),CLUSTER_6,CLUSTER_12
start,time.time(),CLUSTER_6,CLUSTER_12
"fig,ax","matplotlib.pyplot.subplots(1,figsize=(20,20)",CLUSTER_12,CLUSTER_3
data_tables_sources,pandas.DataFrame(data),CLUSTER_12,CLUSTER_3
ddeaths_by_county,pandas.DataFrame(hist_tornadoes.groupby(['county']),CLUSTER_12,CLUSTER_3
ideaths_by_county,pandas.DataFrame(hist_tornadoes.groupby(['county']),CLUSTER_12,CLUSTER_3
dinjuries_by_county,pandas.DataFrame(hist_tornadoes.groupby(['county']),CLUSTER_12,CLUSTER_3
iinjuries_by_county,pandas.DataFrame(hist_tornadoes.groupby(['county']),CLUSTER_12,CLUSTER_3
props_by_county,pandas.DataFrame(hist_tornadoes.groupby(['county']),CLUSTER_12,CLUSTER_3
crops_by_county,pandas.DataFrame(hist_tornadoes.groupby(['county']),CLUSTER_12,CLUSTER_3
tncensus2,"pandas.merge(socio,mob2,left_on='GEO_ID',right_on='GEO_ID',how='left')",CLUSTER_12,CLUSTER_3
both,"pandas.merge(history_tornadoes,len_magnitude_by_county,left_on='GeoID',right_on='GEOID',how='left')",CLUSTER_12,CLUSTER_3
final,"pandas.merge(both,tn_county_UTM,left_on='GeoID',right_on='GEOID',how='left')",CLUSTER_12,CLUSTER_3
socio,pandas.read_csv('ACSST5Y2018.S0601_data_with_overlays_2020-04-04T144327.csv'),CLUSTER_12,CLUSTER_3
mob2,pandas.read_csv('ACSST5Y2018.S1101_data_with_overlays_2020-04-04T143749.csv'),CLUSTER_12,CLUSTER_3
tor1,pandas.read_csv('C:\\Users\\caitl\\Documents\\Lehman\\Spring2020\\GEP662ProgrammingforGIS\\FinalProject\\Tornadoes\\1150_123190.csv'),CLUSTER_12,CLUSTER_3
tor2,pandas.read_csv('C:\\Users\\caitl\\Documents\\Lehman\\Spring2020\\GEP662ProgrammingforGIS\\FinalProject\\Tornadoes\\1191_123108.csv'),CLUSTER_12,CLUSTER_3
tor3,pandas.read_csv('C:\\Users\\caitl\\Documents\\Lehman\\Spring2020\\GEP662ProgrammingforGIS\\FinalProject\\Tornadoes\\1109_123119.csv'),CLUSTER_12,CLUSTER_3
history['inc-vul'],numpy.where(history['Med_inc']<=(incquant1),CLUSTER_12,CLUSTER_3
history['inc-vul'],numpy.where(history['Med_inc']>(incquant3),CLUSTER_12,CLUSTER_3
history['inc-vul'],numpy.where((history['Med_inc']>(incquant1),CLUSTER_12,CLUSTER_3
history['inc-vul'],numpy.where((history['Med_inc']>(incquant2),CLUSTER_12,CLUSTER_3
index,"numpy.arange(1,predicted_labels.shape[0]+1)",CLUSTER_7,CLUSTER_8
predicted_df,"pandas.DataFrame(predicted_labels,
index=np.arange(1,predicted_labels.shape[0]+1)",CLUSTER_7,CLUSTER_8
train_test_df,"pandas.concat([train_df,test_df],sort=False)",CLUSTER_7,CLUSTER_8
X_add,"pandas.get_dummies(X_add,columns=features_cat)",CLUSTER_7,CLUSTER_8
data,"pandas.get_dummies(data,columns=features_cat)",CLUSTER_7,CLUSTER_8
train_df,"pandas.read_csv(os.path.join(PATH_TO_DATA,'train_sessions.csv')",CLUSTER_7,CLUSTER_8
test_df,"pandas.read_csv(os.path.join(PATH_TO_DATA,'test_sessions.csv')",CLUSTER_7,CLUSTER_8
X_train,"scipy.sparse.hstack((X_train_sparse,X_add.values[:train_df.shape[0]])",CLUSTER_7,CLUSTER_8
X_test,"scipy.sparse.hstack((X_test_sparse,X_add.values[train_df.shape[0]:])",CLUSTER_7,CLUSTER_8
X_tf_idf_train,"scipy.sparse.hstack((X_tf_idf_train_sparse,X_add.values[:train_df.shape[0]])",CLUSTER_7,CLUSTER_8
X_tf_idf_test,"scipy.sparse.hstack((X_tf_idf_test_sparse,X_add.values[train_df.shape[0]:])",CLUSTER_7,CLUSTER_8
X_tf_idf_train,"scipy.sparse.hstack((X_tf_idf_train_sparse,data.values[:train_df.shape[0]])",CLUSTER_7,CLUSTER_8
X_tf_idf_test,"scipy.sparse.hstack((X_tf_idf_test_sparse,data.values[train_df.shape[0]:])",CLUSTER_7,CLUSTER_8
train_test_sparse,"scipy.sparse.csr_matrix((data,(row,column)",CLUSTER_7,CLUSTER_8
X_add[features_scale],sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
data[features_scale],sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
logit,"sklearn.linear_model.LogisticRegression(C=1,random_state=17)",CLUSTER_7,CLUSTER_8
cv_skf_scores,"sklearn.model_selection.cross_val_score(logit,X_train_sparse,y,cv=skf,scoring='roc_auc',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_time_scores,"sklearn.model_selection.cross_val_score(logit,X_train_sparse,y,cv=time_split,scoring='roc_auc',n_jobs=-1)",CLUSTER_7,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=3,shuffle=True,random_state=17)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_skf,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=skf)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_time,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=time_split)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_skf_new_fe,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=skf)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_time_new_fe,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=time_split)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_skf_new_fe_tf_idf,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=skf)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_time_new_fe_tf_idf,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=time_split)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_final,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=time_split)",CLUSTER_7,CLUSTER_8
time_split,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
del_w_input_hidden,numpy.zeros(weights_input_hidden.shape),CLUSTER_8,CLUSTER_3
del_w_hidden_output,numpy.zeros(weights_hidden_output.shape),CLUSTER_8,CLUSTER_3
hidden_input,"numpy.dot(x,del_w_input_hidden)",CLUSTER_8,CLUSTER_3
input_from_hidden_to_output,"numpy.dot(hidden_activations,del_w_hidden_output)",CLUSTER_8,CLUSTER_3
hidden_error,"numpy.dot(del_w_input_hidden,output_error)",CLUSTER_8,CLUSTER_3
loss,numpy.mean((out-targets),CLUSTER_8,CLUSTER_3
accuracy,numpy.mean(predictions==targets_test),CLUSTER_8,CLUSTER_3
data,"pandas.concat([admissions,pd.get_dummies(admissions['rank'],prefix='rank')",CLUSTER_8,CLUSTER_3
admissions,pandas.read_csv('binary.csv'),CLUSTER_8,CLUSTER_3
X_train,numpy.array(X_train),CLUSTER_4,CLUSTER_0
X_test,numpy.array(X_test),CLUSTER_4,CLUSTER_0
y_pred_classes,"numpy.argmax(y_pred,axis=1)",CLUSTER_4,CLUSTER_0
y_true,"numpy.argmax(y_val,axis=1)",CLUSTER_4,CLUSTER_0
y_pred_classes2,"numpy.argmax(y_pred2,axis=1)",CLUSTER_4,CLUSTER_0
y_true2,"numpy.argmax(Y_test,axis=1)",CLUSTER_4,CLUSTER_0
conf_mat,"sklearn.metrics.confusion_matrix(y_true,y_pred_classes)",CLUSTER_4,CLUSTER_0
conf_mat2,"sklearn.metrics.confusion_matrix(y_true2,y_pred_classes2)",CLUSTER_4,CLUSTER_0
"x_train,x_val,y_train,y_val","sklearn.model_selection.train_test_split(X_train,Y_train,
test_size=0.2,random_state=50)",CLUSTER_4,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(25,24)",CLUSTER_4,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(25,24)",CLUSTER_4,CLUSTER_0
data['readmit_dt'],numpy.zeros(data.shape[0]),CLUSTER_1,CLUSTER_3
data['next_readmit_dt'],numpy.zeros(data.shape[0]),CLUSTER_1,CLUSTER_3
data,"pandas.read_sql_query(query,con)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_1,CLUSTER_3
ld_all,"pandas.concat([ld_train,ld_test],axis=0)",CLUSTER_5,CLUSTER_1
ld_train,pandas.read_csv(train_file),CLUSTER_5,CLUSTER_1
ld_test,pandas.read_csv(test_file),CLUSTER_5,CLUSTER_1
ld_all[col],"pandas.to_numeric(ld_all[col],errors='coerce')",CLUSTER_5,CLUSTER_1
ld_all['Employment.Length'],"pandas.to_numeric(ld_all['Employment.Length'],errors='coerce')",CLUSTER_5,CLUSTER_1
ld_all['Employment.Length'],"numpy.where(ld_all['Employment.Length'].str[:2]=='10',10,ld_all['Employment.Length'])",CLUSTER_5,CLUSTER_1
ld_all['Employment.Length'],"numpy.where(ld_all['Employment.Length'].str[:0]=='<',0,ld_all['Employment.Length'])",CLUSTER_5,CLUSTER_1
lambdas,"numpy.linspace(1,100,100)",CLUSTER_5,CLUSTER_1
lambdas,"numpy.linspace(1,10,100)",CLUSTER_5,CLUSTER_1
"ld_train1,ld_train2","sklearn.model_selection.train_test_split(ld_train,test_size=0.2,random_state=2)",CLUSTER_5,CLUSTER_1
lm,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
model,sklearn.linear_model.Ridge(fit_intercept=True),CLUSTER_5,CLUSTER_1
model,sklearn.linear_model.Lasso(fit_intercept=True),CLUSTER_5,CLUSTER_1
grid_search,"sklearn.model_selection.GridSearchCV(model,param_grid=params,cv=10,scoring='neg_mean_absolute_error')",CLUSTER_5,CLUSTER_1
grid_search,"sklearn.model_selection.GridSearchCV(model,param_grid=params,cv=10,scoring='neg_mean_absolute_error')",CLUSTER_5,CLUSTER_1
row_indices,numpy.arange(4),CLUSTER_12,CLUSTER_9
col_indices,numpy.arange(4),CLUSTER_12,CLUSTER_9
x,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_12,CLUSTER_9
X_new,"numpy.array([[5,2.9,1,0.2]])",CLUSTER_12,CLUSTER_9
data,numpy.ones(4),CLUSTER_12,CLUSTER_9
y,numpy.sin(x),CLUSTER_12,CLUSTER_9
x,"numpy.linspace(-10,10,100)",CLUSTER_12,CLUSTER_9
eye,numpy.eye(4),CLUSTER_12,CLUSTER_9
eye_coo,"scipy.sparse.coo_matrix((data,(row_indices,col_indices)",CLUSTER_12,CLUSTER_9
sparse_matrix,scipy.sparse.csr_matrix(eye),CLUSTER_12,CLUSTER_9
data_pandas,pandas.DataFrame(data),CLUSTER_12,CLUSTER_9
iris_dataframe,"pandas.DataFrame(X_train,columns=iris_dataset.feature_names)",CLUSTER_12,CLUSTER_9
iris_dataset,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
iris_dataset['data'],iris_dataset['target'],random_state=0)",CLUSTER_12,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
iris_dataset['data'],iris_dataset['target'],random_state=0)",CLUSTER_12,CLUSTER_9
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_12,CLUSTER_9
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_12,CLUSTER_9
d,collections.defaultdict(int),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_10
resampled,"pandas.DataFrame(X_res,columns=X.columns)",CLUSTER_5,CLUSTER_0
df,"pandas.concat([data,labels],axis=1)",CLUSTER_5,CLUSTER_0
data,"pandas.read_csv(url_data,sep="""",names=names,header=None,dtype=None)",CLUSTER_5,CLUSTER_0
labels,"pandas.read_csv(url_classifications,sep="""",names=[""classification"",""date""],parse_dates=[""date""])",CLUSTER_5,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=5)",CLUSTER_5,CLUSTER_0
y,numpy.log(Y_triptime.tolist(),CLUSTER_5,CLUSTER_5
model,"sklearn.neural_network.MLPRegressor(early_stopping=True,alpha=0.1)",CLUSTER_5,CLUSTER_5
clf2,"sklearn.model_selection.GridSearchCV(model,param_grid,cv=2,scoring='neg_mean_squared_error',
n_jobs=-1)",CLUSTER_5,CLUSTER_5
"Xtrain,Xval,Ztrain,Zval","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
"Xcv,Xv,Zcv,Zv","sklearn.model_selection.train_test_split(Xval,Zval,test_size=0.5,random_state=1)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_5,CLUSTER_5
ax,seaborn.heatmap(heatmap_df),CLUSTER_0,CLUSTER_5
pareto,"pandas.DataFrame({'gb':gb[mask],
'cumu_sum':cumu_sum[cumu_sum<=0.8*gb.sum()",CLUSTER_0,CLUSTER_5
pareto,"pandas.DataFrame({'gb':gb[mask],
'cumu_sum':cumu_sum[cumu_sum<=0.8*gb.sum()",CLUSTER_0,CLUSTER_5
heatmap_df,"pandas.DataFrame(data=None,columns=top_n_volunteers,index=top_n_volunteers)",CLUSTER_0,CLUSTER_5
contin_tb,pandas.DataFrame(data=np.zeros((len(unique_vals),CLUSTER_0,CLUSTER_5
reliability_df,"pandas.concat((avg_kappa,num_clfs)",CLUSTER_0,CLUSTER_5
df,pandas.read_excel('mp_data.xlsx'),CLUSTER_0,CLUSTER_5
df['Class_Date'],pandas.to_datetime(pandas.to_datetime(df['Class_Date']),CLUSTER_0,CLUSTER_5
contin_tb,pd.DataFrame(data=numpy.zeros((len(unique_vals),CLUSTER_0,CLUSTER_5
cumu_sum,numpy.cumsum(gb),CLUSTER_0,CLUSTER_5
cumu_sum,numpy.cumsum(gb),CLUSTER_0,CLUSTER_5
agreements,numpy.trace(contin_tb),CLUSTER_0,CLUSTER_5
cohen_kappa,"sklearn.metrics.cohen_kappa_score(user_vector,other_user_vector)",CLUSTER_0,CLUSTER_5
word_vectors,"numpy.empty((0,100)",CLUSTER_5,CLUSTER_10
word_vectors,"numpy.append(word_vectors,np.array([model.wv[word]])",CLUSTER_5,CLUSTER_10
word_vectors,"numpy.append(word_vectors,np.array([model.wv[w]])",CLUSTER_5,CLUSTER_10
tsne,sklearn.manifold.TSNE(random_state=0),CLUSTER_5,CLUSTER_10
new_bias,"numpy.array([0.,0.,0.,1.,0.,0.,0.,0.])",CLUSTER_2,CLUSTER_7
start,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
elapsed,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
rnd_num,"random.randint(0,100)",CLUSTER_4,CLUSTER_7
counts,collections.Counter(words),CLUSTER_4,CLUSTER_7
val_content,json.load(f),CLUSTER_4,CLUSTER_7
train_content,json.load(f),CLUSTER_4,CLUSTER_7
perplexity,math.exp(sum_losses/sum_weights),CLUSTER_4,CLUSTER_7
input_feed_val,numpy.array([c.sentence[-1]forcinpartial_captions_list]),CLUSTER_4,CLUSTER_7
state_feed_val,numpy.array([c.stateforcinpartial_captions_list]),CLUSTER_4,CLUSTER_7
sum_losses+,numpy.sum(losses_val*weights_val),CLUSTER_4,CLUSTER_7
sum_weights+,numpy.sum(weights_val),CLUSTER_4,CLUSTER_7
ratings,pandas.DataFrame(df.groupby('title'),CLUSTER_7,CLUSTER_3
ratings['numofratings'],pandas.DataFrame(df.groupby('title'),CLUSTER_7,CLUSTER_3
corr_starwars,"pandas.DataFrame(similar_to_starwars,columns=['Correlation'])",CLUSTER_7,CLUSTER_3
corr_liarliar,"pandas.DataFrame(similar_to_liarliar,columns=['Correlation'])",CLUSTER_7,CLUSTER_3
df,"pandas.merge(df,movie_titles,on='item_id')",CLUSTER_7,CLUSTER_3
df,"pandas.read_csv('u.data',sep='\t',names=column_names)",CLUSTER_7,CLUSTER_3
movie_titles,"pandas.read_csv(""Movie_Id_Titles"")",CLUSTER_7,CLUSTER_3
fan_in,numpy.prod(shape[1:]),CLUSTER_6,CLUSTER_6
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
venue_id_recover,pandas.DataFrame(columns=venue_id_rcols),CLUSTER_9,CLUSTER_2
venue_DF,pandas.DataFrame(columns=venue_columns),CLUSTER_9,CLUSTER_2
venue_id_recover,pandas.DataFrame(columns=venue_id_rcols),CLUSTER_9,CLUSTER_2
singapore_town_venues,pandas.DataFrame(columns=venue_columns),CLUSTER_9,CLUSTER_2
town_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
singapore_town_venues,"pandas.concat([singapore_town_venues,tmp],ignore_index=True)",CLUSTER_9,CLUSTER_2
singapore_town_venues,"pandas.concat([singapore_food_venues,singapore_outdoor_venues_by_town,singapore_Nightlife_by_town],ignore_index=True)",CLUSTER_9,CLUSTER_2
sg_onehot,"pandas.get_dummies(singapore_town_venues[['category']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
sgp_median_rent_by_town_data,"pandas.read_csv(zf.open(""median-rent-by-town-and-flat-type.csv"")",CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=1)",CLUSTER_9,CLUSTER_2
lat,requests.get(url),CLUSTER_9,CLUSTER_2
lng,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
venID_result,requests.get(venID_URL),CLUSTER_9,CLUSTER_2
range_idxs,"numpy.array([range_idx],dtype=np.int32)",CLUSTER_3,CLUSTER_6
a_probs_each_model,"numpy.array([
weight*strat.get_a_probs(pub_obses=[pub_obs],
range_idxs=[range_idx],
legal_actions_lists=[legal_actions_list]
)",CLUSTER_3,CLUSTER_6
range_idxs,"numpy.array([range_idx],dtype=np.int32)",CLUSTER_3,CLUSTER_6
prob_a_each_model_each_timestep,"numpy.array(
[
model.get_a_probs(
pub_obses=H['pub_obs_batch'],
range_idxs=[range_idx]*H['len'],
legal_actions_lists=H['legal_action_list_batch'],
)",CLUSTER_3,CLUSTER_6
range_idxs,numpy.array(non_zero_hands),CLUSTER_3,CLUSTER_6
contrib_each_model,"numpy.zeros(
shape=(n_models,self.env_bldr.rules.RANGE_SIZE,self.env_bldr.N_ACTIONS)",CLUSTER_3,CLUSTER_6
reach_hist,"numpy.zeros(shape=(H['len'],self.env_bldr.rules.RANGE_SIZE)",CLUSTER_3,CLUSTER_6
reaches,numpy.empty(shape=(len(models),CLUSTER_3,CLUSTER_6
unif_rand_legal,"numpy.full(
shape=self.env_bldr.N_ACTIONS,
fill_value=1.0/len(legal_actions_list)",CLUSTER_3,CLUSTER_6
unif_rand_legal,"numpy.full(
shape=self.env_bldr.N_ACTIONS,
fill_value=1.0/len(legal_actions_list)",CLUSTER_3,CLUSTER_6
range_idxs,numpy.nonzero(reaches[m_i]),CLUSTER_3,CLUSTER_6
reaches[m_i],"numpy.prod(reach_hist,axis=0)",CLUSTER_3,CLUSTER_6
a_probs,"numpy.sum(a_probs_each_model,axis=0)",CLUSTER_3,CLUSTER_6
a_probs_sum,numpy.sum(a_probs),CLUSTER_3,CLUSTER_6
a_probs_sum,"numpy.expand_dims(np.sum(a_probs,axis=1)",CLUSTER_3,CLUSTER_6
a_probs_each_model*,"numpy.expand_dims(self._get_reach_for_each_model(
p_id_acting=p_id_acting,
range_idx=range_idx,
)",CLUSTER_3,CLUSTER_6
district_summary_df,"pandas.DataFrame(
[{""TotalSchools"":school_count,
""TotalStudents"":student_count,
""TotalBudget"":total_budget,
""AverageMathScore"":average_math_score,
""AverageReadingScore"":average_reading_score,
""%PassingMath"":passing_math_percentage,
""%PassingReading"":passing_reading_percentage,
""%OverallPassing"":overall_passing_percentage}])",CLUSTER_8,CLUSTER_11
df,pandas.DataFrame(per_school_types),CLUSTER_8,CLUSTER_11
per_school_summary_df,"pandas.DataFrame({
""SchoolType"":per_school_types,
""TotalStudents"":per_school_counts,
""TotalSchoolBudget"":per_school_budget,
""PerStudentBudget"":per_school_capita,
""AverageMathScore"":per_school_math,
""AverageReadingScore"":per_school_reading,
""%PassingMath"":per_school_passing_math,
""%PassingReading"":per_school_passing_reading,
""%OverallPassing"":per_overall_passing_percentage})",CLUSTER_8,CLUSTER_11
math_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_math_scores,
""10th"":tenth_grade_math_scores,
""11th"":eleventh_grade_math_scores,
""12th"":twelfth_grade_math_scores})",CLUSTER_8,CLUSTER_11
reading_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_reading_scores,
""10th"":tenth_grade_reading_scores,
""11th"":eleventh_grade_reading_scores,
""12th"":twelfth_grade_reading_scores})",CLUSTER_8,CLUSTER_11
spending_summary_df,"pandas.DataFrame({
""AverageMathScore"":spending_math_scores,
""AverageReadingScore"":spending_reading_scores,
""%PassingMath"":spending_passing_math,
""%PassingReading"":spending_passing_reading,
""%OverallPassing"":overall_passing_spending})",CLUSTER_8,CLUSTER_11
size_summary_df,"pandas.DataFrame({
""AverageMathScore"":size_math_scores,
""AverageReadingScore"":size_reading_scores,
""%PassingMath"":size_passing_math,
""%PassingReading"":size_passing_reading,
""%OverallPassing"":size_overall_passing})",CLUSTER_8,CLUSTER_11
type_summary_df,"pandas.DataFrame({
""AverageMathScore"":type_math_scores,
""AverageReadingScore"":type_reading_scores,
""%PassingMath"":type_passing_math,
""%PassingReading"":type_passing_reading,
""%OverallPassing"":type_overall_passing})",CLUSTER_8,CLUSTER_11
district_summary_df,"pandas.DataFrame(
[{""TotalSchools"":school_count,
""TotalStudents"":student_count,
""TotalBudget"":total_budget,
""AverageMathScore"":average_math_score,
""AverageReadingScore"":average_reading_score,
""%PassingMath"":passing_math_percentage,
""%PassingReading"":passing_reading_percentage,
""%OverallPassing"":overall_passing_percentage}])",CLUSTER_8,CLUSTER_11
clean_school_data_df,"pandas.DataFrame({
""SchoolType"":per_school_types,
""TotalStudents"":per_school_counts,
""TotalSchoolBudget"":per_school_budget,
""PerStudentBudget"":per_school_capita,
""AverageMathScore"":per_school_math,
""AverageReadingScore"":per_school_reading,
""%PassingMath"":per_school_passing_math,
""%PassingReading"":per_school_passing_reading,
""%OverallPassing"":per_overall_passing_percentage})",CLUSTER_8,CLUSTER_11
math_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_math_scores,
""10th"":tenth_grade_math_scores,
""11th"":eleventh_grade_math_scores,
""12th"":twelfth_grade_math_scores})",CLUSTER_8,CLUSTER_11
reading_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_reading_scores,
""10th"":tenth_grade_reading_scores,
""11th"":eleventh_grade_reading_scores,
""12th"":twelfth_grade_reading_scores})",CLUSTER_8,CLUSTER_11
size_summary_df,"pandas.DataFrame({
""AverageMathScore"":size_math_scores,
""AverageReadingScore"":size_reading_scores,
""%PassingMath"":size_passing_math,
""%PassingReading"":size_passing_reading,
""%OverallPassing"":size_overall_passing})",CLUSTER_8,CLUSTER_11
type_summary_df,"pandas.DataFrame({
""AverageMathScore"":type_math_scores,
""AverageReadingScore"":type_reading_scores,
""%PassingMath"":type_passing_math,
""%PassingReading"":type_passing_reading,
""%OverallPassing"":type_overall_passing})",CLUSTER_8,CLUSTER_11
"per_school_summary_df[""SpendingRanges(PerStudent)""]","pandas.cut(per_school_capita,spending_bins,labels=group_names)",CLUSTER_8,CLUSTER_11
"per_school_summary_df[""SchoolSize""]","pandas.cut(per_school_summary_df[""TotalStudents""],size_bins,labels=group_names)",CLUSTER_8,CLUSTER_11
school_data_complete_df,"pandas.merge(student_data_df,school_data_df,on=[""school_name"",""school_name""])",CLUSTER_8,CLUSTER_11
clean_school_data_df,"pandas.merge(student_data_df,school_data_df,on=[""school_name"",""school_name""])",CLUSTER_8,CLUSTER_11
clean_school_data_df,"pandas.merge(student_data_df,school_data_df,on=[""school_name"",""school_name""])",CLUSTER_8,CLUSTER_11
school_data_df,pandas.read_csv(school_data_to_load),CLUSTER_8,CLUSTER_11
student_data_df,pandas.read_csv(student_data_to_load),CLUSTER_8,CLUSTER_11
falsePositives,"numpy.arange(1.0,length+1,1.)",CLUSTER_4,CLUSTER_11
aDense,"numpy.array([0.,3.,0.,4.])",CLUSTER_4,CLUSTER_11
bDense,"numpy.array([0.,0.,0.,1.])",CLUSTER_4,CLUSTER_11
w,"numpy.array([0.4,3.1,-1.4,-.5])",CLUSTER_4,CLUSTER_11
labelsByWeight,"numpy.array([kfor(k,v)",CLUSTER_4,CLUSTER_11
logLoss,"numpy.array([[0.45808431,0.45808493,0.45809113,0.45815333,0.45879221,0.46556321],
[0.45188196,0.45188306,0.4518941,0.4520051,0.45316284,0.46396068],
[0.44886478,0.44886613,0.44887974,0.44902096,0.4505614,0.46371153],
[0.44706645,0.4470698,0.44708102,0.44724251,0.44905525,0.46366507],
[0.44588848,0.44589365,0.44590568,0.44606631,0.44807106,0.46365589],
[0.44508948,0.44509474,0.44510274,0.44525007,0.44738317,0.46365405]])",CLUSTER_4,CLUSTER_11
logLoss,numpy.array(logLoss),CLUSTER_4,CLUSTER_11
"x,y",numpy.log(x),CLUSTER_4,CLUSTER_11
image,"matplotlib.pyplot.imshow(logLoss,interpolation='nearest',aspect='auto',
cmap=colors)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=figsize,facecolor='white',edgecolor='white')",CLUSTER_4,CLUSTER_11
sparseFeatures,collections.defaultdict(float),CLUSTER_4,CLUSTER_11
media,numpy.mean(lista),CLUSTER_3,CLUSTER_6
desvio,numpy.std(lista),CLUSTER_3,CLUSTER_6
ax,"seaborn.barplot(x=lista,y=demoras_promedio_experimento)",CLUSTER_3,CLUSTER_6
ax,"seaborn.barplot(x=lista,y=demoras_promedio_experimento)",CLUSTER_3,CLUSTER_6
grafico,seaborn.distplot(demoras_promedio_experimento),CLUSTER_3,CLUSTER_6
b1,"numpy.zeros(shape=(n_h,1)",CLUSTER_5,CLUSTER_10
b2,"numpy.zeros(shape=(n_y,1)",CLUSTER_5,CLUSTER_10
Z1,"numpy.dot(W1,X)",CLUSTER_5,CLUSTER_10
Z2,"numpy.dot(W2,A1)",CLUSTER_5,CLUSTER_10
cost,numpy.squeeze(cost),CLUSTER_5,CLUSTER_10
logprobs,numpy.multiply(np.log(A2),CLUSTER_5,CLUSTER_10
dZ1,"numpy.multiply(np.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_10
A1,numpy.tanh(Z1),CLUSTER_5,CLUSTER_10
clf,sklearn.linear_model.LogisticRegressionCV(),CLUSTER_5,CLUSTER_10
MonSolIrradiation,"numpy.array([4.3,5.32,6.35,6.82,6.96,7.35,6.73,6.41,6.37,5.42,4.88,4.21])",CLUSTER_9,CLUSTER_9
DaylightHours,"numpy.array([10,11,12,13,14,15,15,14,12,11,10,9])",CLUSTER_9,CLUSTER_9
SunshineHours,"numpy.array([6.9,7.5,8.2,9.2,9.4,10.5,10.5,9.9,9.1,8,6.5,6.3])",CLUSTER_9,CLUSTER_9
unitsOn,numpy.array(status['On']),CLUSTER_9,CLUSTER_9
unitsOff,numpy.array(status['Off']),CLUSTER_9,CLUSTER_9
TimeOn,numpy.array(status['TimeOn']),CLUSTER_9,CLUSTER_9
TimeOff,numpy.array(status['TimeOff']),CLUSTER_9,CLUSTER_9
minDowntime,numpy.array(GenStack['minDowntime']),CLUSTER_9,CLUSTER_9
minRuntime,numpy.array(GenStack['minRuntime']),CLUSTER_9,CLUSTER_9
PMax,numpy.array(GenStack['PMax']),CLUSTER_9,CLUSTER_9
GenMix,numpy.zeros((len(GenStack),CLUSTER_9,CLUSTER_9
ShadowCost,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
Gaps,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
MaxGenVector,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
CostVector,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
ViolationsVector,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
HrSolarIrradiance,"numpy.zeros((periods,1)",CLUSTER_9,CLUSTER_9
SolarOutput,"numpy.zeros((periods,1)",CLUSTER_9,CLUSTER_9
SolarVector,"numpy.zeros((1,DaylightTime)",CLUSTER_9,CLUSTER_9
ViolationsVector,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
Load1,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
AvShadowCostVector,"numpy.zeros((1,len(SolarMWVector)",CLUSTER_9,CLUSTER_9
TotalLoadVector,"numpy.zeros((1,len(SolarMWVector)",CLUSTER_9,CLUSTER_9
caseNormRes,"numpy.zeros((1,cases)",CLUSTER_9,CLUSTER_9
AverageShadowCost,numpy.sum(CostVector),CLUSTER_9,CLUSTER_9
"TotalLoadVector[0,penetration]",numpy.sum(Load),CLUSTER_9,CLUSTER_9
status,pandas.DataFrame(np.zeros((len(GenStack),CLUSTER_9,CLUSTER_9
SolarOutputProfile,pandas.DataFrame(SolarOutput),CLUSTER_9,CLUSTER_9
status1,pandas.DataFrame(np.zeros((len(GenStack),CLUSTER_9,CLUSTER_9
profiles,"pandas.read_csv('Profiles.csv',sep="","")",CLUSTER_9,CLUSTER_9
GenStack,"pandas.read_csv('GenStack.csv',sep="","")",CLUSTER_9,CLUSTER_9
FuelPrices,"pandas.read_csv('FuelPrices.csv',sep="","")",CLUSTER_9,CLUSTER_9
w,pandas.DataFrame(),CLUSTER_11,CLUSTER_11
w_,"pandas.DataFrame(w_,index=range(w_.shape[0])",CLUSTER_11,CLUSTER_11
out,"pandas.DataFrame(columns=['adfStat','pVal','lags','nObs','95%conf','corr'])",CLUSTER_11,CLUSTER_11
trades,pandas.DataFrame(),CLUSTER_11,CLUSTER_11
trades,"pandas.DataFrame(columns=['Opening_Price','Closing_Price','Return','Type'])",CLUSTER_11,CLUSTER_11
trades,"pandas.DataFrame(columns=['Opening_Price','Closing_Price','Return','Type','BetSize'])",CLUSTER_11,CLUSTER_11
df,"pandas.concat(df,axis=1)",CLUSTER_11,CLUSTER_11
df,"pandas.read_excel('https://images.aqr.com/-/media/AQR/Documents/Insights/Data-Sets/Century-of-Factor-Premia-Monthly.xlsx',
header=18,nrows=1220)",CLUSTER_11,CLUSTER_11
df['Date'],pandas.to_datetime(df['Date']),CLUSTER_11,CLUSTER_11
w,numpy.array(w[::-1]),CLUSTER_11,CLUSTER_11
df_[loc],numpy.dot(w[-(iloc+1),CLUSTER_11,CLUSTER_11
w_,numpy.cumsum(abs(w),CLUSTER_11,CLUSTER_11
df1,numpy.log(df[['Close']]),CLUSTER_11,CLUSTER_11
start,"datetime.datetime(2000,11,30)",CLUSTER_11,CLUSTER_11
end,"datetime.datetime(2019,11,30)",CLUSTER_11,CLUSTER_11
rf,sklearn.ensemble.RandomForestClassifier(verbose=1),CLUSTER_11,CLUSTER_11
rf,sklearn.ensemble.RandomForestClassifier(verbose=1),CLUSTER_11,CLUSTER_11
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_11,CLUSTER_11
corr,"numpy.ma.corrcoef(ma.masked_invalid(df1.loc[df2.index,'Close'])",CLUSTER_11,CLUSTER_11
kf,sklearn.model_selection.KFold(n_splits=5),CLUSTER_11,CLUSTER_11
TP,numpy.sum(income),CLUSTER_12,CLUSTER_1
features_log_transformed,pandas.DataFrame(data=features_raw),CLUSTER_12,CLUSTER_1
features_log_minmax_transform,pandas.DataFrame(data=features_log_transformed),CLUSTER_12,CLUSTER_1
features_final,pandas.get_dummies(features_log_minmax_transform),CLUSTER_12,CLUSTER_1
data,"pandas.read_csv(""census.csv"")",CLUSTER_12,CLUSTER_1
start,time.time(),CLUSTER_12,CLUSTER_1
end,time.time(),CLUSTER_12,CLUSTER_1
start,time.time(),CLUSTER_12,CLUSTER_1
end,time.time(),CLUSTER_12,CLUSTER_1
scorer,"sklearn.metrics.make_scorer(fbeta_score,beta=0.5)",CLUSTER_12,CLUSTER_1
results['acc_train'],"sklearn.metrics.accuracy_score(y_train[:300],predictions_train)",CLUSTER_12,CLUSTER_1
results['acc_test'],"sklearn.metrics.accuracy_score(y_test,predictions_test)",CLUSTER_12,CLUSTER_1
results['f_train'],"sklearn.metrics.fbeta_score(y_train[:300],predictions_train,0.5)",CLUSTER_12,CLUSTER_1
results['f_test'],"sklearn.metrics.fbeta_score(y_test,predictions_test,0.5)",CLUSTER_12,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features_final,
income,
test_size=0.2,
random_state=0)",CLUSTER_12,CLUSTER_1
grid_obj,"sklearn.model_selection.GridSearchCV(clf_A,parameters,scoring=scorer)",CLUSTER_12,CLUSTER_1
learner,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_1
clf_A,sklearn.tree.DecisionTreeClassifier(random_state=2019),CLUSTER_12,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_12,CLUSTER_1
clf_B,sklearn.naive_bayes.MultinomialNB(),CLUSTER_12,CLUSTER_1
clf_C,sklearn.ensemble.RandomForestClassifier(random_state=2019),CLUSTER_12,CLUSTER_1
clf,sklearn.ensemble.RandomForestClassifier(random_state=2019),CLUSTER_12,CLUSTER_1
clf_A,sklearn.ensemble.RandomForestClassifier(),CLUSTER_12,CLUSTER_1
model,sklearn.ensemble.RandomForestClassifier(random_state=2019),CLUSTER_12,CLUSTER_1
ticks,"numpy.arange(0,15,1)",CLUSTER_4,CLUSTER_0
Y,numpy.arange(X.shape[0]),CLUSTER_4,CLUSTER_0
train_Y_,"numpy.array(numpy.where(train_Y=='N',1,0)",CLUSTER_4,CLUSTER_0
valid_Y_,"numpy.array(numpy.where(valid_Y=='N',1,0)",CLUSTER_4,CLUSTER_0
train_Y_TPS_,"numpy.array(numpy.where(train_Y_TPS['CLASS_PHASE']=='regS',1,0)",CLUSTER_4,CLUSTER_0
valid_Y_TPS_,"numpy.array(numpy.where(valid_Y_TPS['CLASS_PHASE']=='regS',1,0)",CLUSTER_4,CLUSTER_0
manual_Y_TPS_,"numpy.array(numpy.where(MTPS_data_norm[y_indices]=='regS',1,0)",CLUSTER_4,CLUSTER_0
train_Y_TP_,"numpy.array(numpy.where(train_Y_TP['CLASS_PHASE']=='regP',1,0)",CLUSTER_4,CLUSTER_0
valid_Y_TP_,"numpy.array(numpy.where(valid_Y_TP['CLASS_PHASE']=='regP',1,0)",CLUSTER_4,CLUSTER_0
Y_NPTS,numpy.zeros(X.shape[0]),CLUSTER_4,CLUSTER_0
Y_PTS,numpy.zeros(X.shape[0]),CLUSTER_4,CLUSTER_0
data_2017_Y,numpy.zeros(data_2017.shape[0]),CLUSTER_4,CLUSTER_0
data_2017_Y_wN,numpy.zeros(data_2017_wN.shape[0]),CLUSTER_4,CLUSTER_0
Y_pred,"numpy.argmax(Y_pred_,axis=1)",CLUSTER_4,CLUSTER_0
Y_pred,numpy.argmax(model.predict(train_X),CLUSTER_4,CLUSTER_0
Y_NPTS,numpy.argmax(model_NTPS.predict(X),CLUSTER_4,CLUSTER_0
Y_PTS,numpy.argmax(model_STP.predict(X_PTS),CLUSTER_4,CLUSTER_0
Y_PT,numpy.argmax(model_PT.predict(X_PT),CLUSTER_4,CLUSTER_0
Y_pred,numpy.reshape(numpy.argmax(model_TPS.predict(valid_X_TPS),CLUSTER_4,CLUSTER_0
Y_pred,numpy.reshape(numpy.argmax(model_TPS.predict(train_X_TPS),CLUSTER_4,CLUSTER_0
Y_pred,numpy.reshape(numpy.argmax(model_TP.predict(valid_X_TP),CLUSTER_4,CLUSTER_0
input,"numpy.reshape(numpy.array([1.000000,0.966347,0.977263,0.091495,0.986118,0.382480,-1.354475,-1.354475,0.300000,0.507750,0.066849,-0.539140,-0.183338,-0.152606,-0.613563])",CLUSTER_4,CLUSTER_0
TPS_data_norm['HMXMN'],numpy.log10(TPS_data['HMXMN']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HVRATP'],numpy.log10(TPS_data['HVRATP']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HVRAT'],numpy.log10(TPS_data['HVRAT']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HTOV1'],numpy.log10(TPS_data['HTOV1']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HTOV2'],numpy.log10(TPS_data['HTOV2']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HTOV3'],numpy.log10(TPS_data['HTOV3']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HTOV4'],numpy.log10(TPS_data['HTOV4']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HTOV5'],numpy.log10(TPS_data['HTOV5']),CLUSTER_4,CLUSTER_0
N_data_norm['HMXMN'],numpy.log10(N_data['HMXMN']),CLUSTER_4,CLUSTER_0
N_data_norm['HVRATP'],numpy.log10(N_data['HVRATP']),CLUSTER_4,CLUSTER_0
N_data_norm['HVRAT'],numpy.log10(N_data['HVRAT']),CLUSTER_4,CLUSTER_0
N_data_norm['HTOV1'],numpy.log10(N_data['HTOV1']),CLUSTER_4,CLUSTER_0
N_data_norm['HTOV2'],numpy.log10(N_data['HTOV2']),CLUSTER_4,CLUSTER_0
N_data_norm['HTOV3'],numpy.log10(N_data['HTOV3']),CLUSTER_4,CLUSTER_0
N_data_norm['HTOV4'],numpy.log10(N_data['HTOV4']),CLUSTER_4,CLUSTER_0
N_data_norm['HTOV5'],numpy.log10(N_data['HTOV5']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HMXMN'],numpy.log10(MTPS_data['HMXMN']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HVRATP'],numpy.log10(MTPS_data['HVRATP']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HVRAT'],numpy.log10(MTPS_data['HVRAT']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HTOV1'],numpy.log10(MTPS_data['HTOV1']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HTOV2'],numpy.log10(MTPS_data['HTOV2']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HTOV3'],numpy.log10(MTPS_data['HTOV3']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HTOV4'],numpy.log10(MTPS_data['HTOV4']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HTOV5'],numpy.log10(MTPS_data['HTOV5']),CLUSTER_4,CLUSTER_0
data_2017_norm['HMXMN'],numpy.log10(data_2017_X['HMXMN']),CLUSTER_4,CLUSTER_0
data_2017_norm['HVRATP'],numpy.log10(data_2017_X['HVRATP']),CLUSTER_4,CLUSTER_0
data_2017_norm['HVRAT'],numpy.log10(data_2017_X['HVRAT']),CLUSTER_4,CLUSTER_0
data_2017_norm['HTOV1'],numpy.log10(data_2017_X['HTOV1']),CLUSTER_4,CLUSTER_0
data_2017_norm['HTOV2'],numpy.log10(data_2017_X['HTOV2']),CLUSTER_4,CLUSTER_0
data_2017_norm['HTOV3'],numpy.log10(data_2017_X['HTOV3']),CLUSTER_4,CLUSTER_0
data_2017_norm['HTOV4'],numpy.log10(data_2017_X['HTOV4']),CLUSTER_4,CLUSTER_0
data_2017_norm['HTOV5'],numpy.log10(data_2017_X['HTOV5']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HMXMN'],numpy.log10(data_2017_X_wN['HMXMN']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HVRATP'],numpy.log10(data_2017_X_wN['HVRATP']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HVRAT'],numpy.log10(data_2017_X_wN['HVRAT']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HTOV1'],numpy.log10(data_2017_X_wN['HTOV1']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HTOV2'],numpy.log10(data_2017_X_wN['HTOV2']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HTOV3'],numpy.log10(data_2017_X_wN['HTOV3']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HTOV4'],numpy.log10(data_2017_X_wN['HTOV4']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HTOV5'],numpy.log10(data_2017_X_wN['HTOV5']),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
TPS_data,"pandas.concat([ssS,ssP,ssT])",CLUSTER_4,CLUSTER_0
train,"pandas.concat([TPS_train,N_train])",CLUSTER_4,CLUSTER_0
valid,"pandas.concat([TPS_valid,N_valid])",CLUSTER_4,CLUSTER_0
MTPS_data,"pandas.concat([mssS,mssP,mssT])",CLUSTER_4,CLUSTER_0
data_2017,"pandas.concat([df_P_2017,df_S_2017,df_T_2017])",CLUSTER_4,CLUSTER_0
data_2017_wN,"pandas.concat([df_P_2017,df_S_2017,df_T_2017,df_N_2017])",CLUSTER_4,CLUSTER_0
df_S_all,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_P_all,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_T_all,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_N_all,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_S_2017,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_P_2017,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_T_2017,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_N_2017,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
urz_eval,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
urz_eval,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(14,14)",CLUSTER_4,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_0
conf_mat,"sklearn.metrics.confusion_matrix(Y_pred,valid_Y_)",CLUSTER_4,CLUSTER_0
conf_mat,"sklearn.metrics.confusion_matrix(train_Y_,Y_pred)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(valid_Y_TPS_,Y_pred)",CLUSTER_4,CLUSTER_0
Ctr,"sklearn.metrics.confusion_matrix(train_Y_TPS_,Y_pred)",CLUSTER_4,CLUSTER_0
conf_mat,"sklearn.metrics.confusion_matrix(valid_Y_TP_,Y_pred)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(Y,valid_Y_GT)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(valid_pred_Y,valid_Y_GT)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(valid_TPS_iphase_Y,valid_TPS_truth_Y)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(valid_TPS_pred_Y,valid_TPS_truth_Y)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(data_2017_pred,data_2017_Y)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(data_2017_pred_wN,data_2017_Y_wN)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(Y,train_Y_GT)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(urz_eval['NCLS_IPHASE_DEV'],urz_eval['NCLS_PHASE_ODB'])",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(urz_eval['NCLS_IPHASE_ODB'],urz_eval['NCLS_PHASE_ODB'])",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(urz_eval['NCLS_IPHASE_DEV'],urz_eval['NCLS_PHASE_ODB'])",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(urz_eval['NCLS_IPHASE_ODB'],urz_eval['NCLS_PHASE_ODB'])",CLUSTER_4,CLUSTER_0
data,pandas.read_csv('../input/train.csv'),CLUSTER_7,CLUSTER_5
test,pandas.read_csv('../input/test.csv'),CLUSTER_7,CLUSTER_5
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
rfc,"sklearn.ensemble.RandomForestClassifier(n_jobs=-1,
random_state=42,
n_estimators=gs.best_params_['n_estimators'],
max_depth=gs.best_params_['max_depth'],
max_features=gs.best_params_['max_features'],
criterion=gs.best_params_['criterion'],
min_samples_leaf=gs.best_params_['min_samples_leaf'],
warm_start=gs.best_params_['warm_start'])",CLUSTER_7,CLUSTER_5
gs,"sklearn.model_selection.GridSearchCV(RandomForestClassifier(
n_jobs=-1,
random_state=42)",CLUSTER_7,CLUSTER_5
start,time.time(),CLUSTER_7,CLUSTER_5
reviews_train,"sklearn.datasets.load_files(""data/aclImdb/train/"")",CLUSTER_10,CLUSTER_4
reviews_test,"sklearn.datasets.load_files(""data/aclImdb/test/"")",CLUSTER_10,CLUSTER_4
scores,sklearn.model_selection.cross_val_score(LogisticRegression(),CLUSTER_10,CLUSTER_4
grid,sklearn.model_selection.GridSearchCV(LogisticRegression(),CLUSTER_10,CLUSTER_4
grid,sklearn.model_selection.GridSearchCV(LogisticRegression(),CLUSTER_10,CLUSTER_4
grid,sklearn.model_selection.GridSearchCV(LogisticRegression(),CLUSTER_10,CLUSTER_4
grid,"sklearn.model_selection.GridSearchCV(pipe,param_grid,cv=5)",CLUSTER_10,CLUSTER_4
grid,"sklearn.model_selection.GridSearchCV(pipe,param_grid,cv=5)",CLUSTER_10,CLUSTER_4
grid,sklearn.model_selection.GridSearchCV(LogisticRegression(),CLUSTER_10,CLUSTER_4
pipe,"sklearn.pipeline.make_pipeline(TfidfVectorizer(min_df=5,norm=None)",CLUSTER_10,CLUSTER_4
pipe,sklearn.pipeline.make_pipeline(TfidfVectorizer(min_df=5),CLUSTER_10,CLUSTER_4
regexp,re.compile('(?u),CLUSTER_10,CLUSTER_4
cv,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=5,test_size=0.99,
train_size=0.01,random_state=0)",CLUSTER_10,CLUSTER_4
lda,"sklearn.decomposition.LatentDirichletAllocation(n_topics=10,learning_method=""batch"",
max_iter=25,random_state=0)",CLUSTER_10,CLUSTER_4
lda100,"sklearn.decomposition.LatentDirichletAllocation(n_topics=100,learning_method=""batch"",
max_iter=25,random_state=0)",CLUSTER_10,CLUSTER_4
one_counts,collections.Counter(tokenizer.tokenize(one_star_text),CLUSTER_0,CLUSTER_3
two_counts,collections.Counter(tokenizer.tokenize(two_star_text),CLUSTER_0,CLUSTER_3
three_counts,collections.Counter(tokenizer.tokenize(three_star_text),CLUSTER_0,CLUSTER_3
four_counts,collections.Counter(tokenizer.tokenize(four_star_text),CLUSTER_0,CLUSTER_3
five_counts,collections.Counter(tokenizer.tokenize(five_star_text),CLUSTER_0,CLUSTER_3
df,pandas.DataFrame(DATA_DICT),CLUSTER_0,CLUSTER_3
sample,"random.sample(data,int(NUM_REVIEWS/10)",CLUSTER_0,CLUSTER_3
DATA_SAMPLE,"random.sample(data,SAMPLE_SIZE)",CLUSTER_0,CLUSTER_3
initial_centroids,"numpy.array([[3,3],[6,2],[8,5]])",CLUSTER_1,CLUSTER_9
initial_centroids,"numpy.array([[3,3],[6,2],[8,5]])",CLUSTER_1,CLUSTER_9
closest_centroids,"numpy.zeros((X.shape[0],1)",CLUSTER_1,CLUSTER_9
distance_matrix,"numpy.zeros((X.shape[0],initial_centroids.shape[0])",CLUSTER_1,CLUSTER_9
centroids,"numpy.zeros((K,n)",CLUSTER_1,CLUSTER_9
idx,"numpy.zeros((m,1)",CLUSTER_1,CLUSTER_9
initial_centroids,"numpy.zeros((K,X.shape[1])",CLUSTER_1,CLUSTER_9
cluster_i,numpy.where(idx.flatten(),CLUSTER_1,CLUSTER_9
closest_centroids,"numpy.argmin(distance_matrix,axis=1)",CLUSTER_1,CLUSTER_9
centroids[i],"numpy.mean(training_examples,axis=0)",CLUSTER_1,CLUSTER_9
"distance_matrix[:,i]","numpy.sqrt(np.sum(np.power(X-initial_centroids[i],2)",CLUSTER_1,CLUSTER_9
img,matplotlib.pyplot.imread('./data/bird_small.png'),CLUSTER_1,CLUSTER_9
data,scipy.io.loadmat('./data/ex7data2.mat'),CLUSTER_1,CLUSTER_9
img_test,scipy.io.loadmat('./data/bird_small.mat'),CLUSTER_1,CLUSTER_9
data,pandas.read_csv(filepath),CLUSTER_3,CLUSTER_6
orders,numpy.arange(8),CLUSTER_3,CLUSTER_6
order,numpy.arange(max_order+1),CLUSTER_3,CLUSTER_6
cv_loss,numpy.zeros(K),CLUSTER_3,CLUSTER_6
ind_loss,numpy.zeros(K),CLUSTER_3,CLUSTER_6
train_loss,numpy.zeros(K),CLUSTER_3,CLUSTER_6
loss,"numpy.zeros((max_order+1,3)",CLUSTER_3,CLUSTER_6
X,numpy.ones_like(x),CLUSTER_3,CLUSTER_6
testX,numpy.ones_like(testx),CLUSTER_3,CLUSTER_6
X,numpy.ones_like(x),CLUSTER_3,CLUSTER_6
testX,numpy.ones_like(testx),CLUSTER_3,CLUSTER_6
test_mean,"numpy.dot(testX,w)",CLUSTER_3,CLUSTER_6
w,"numpy.dot(np.linalg.inv(numpy.dot(X.T,X)",CLUSTER_3,CLUSTER_6
testmean,"numpy.dot(testX,w)",CLUSTER_3,CLUSTER_6
x,"numpy.sort((10*np.random.rand(100,1)",CLUSTER_3,CLUSTER_6
testx,"numpy.linspace(-5,5,100)",CLUSTER_3,CLUSTER_6
X,"numpy.hstack((X,x**i)",CLUSTER_3,CLUSTER_6
testX,"numpy.hstack((testX,testx**i)",CLUSTER_3,CLUSTER_6
X,"numpy.hstack((X,x**i)",CLUSTER_3,CLUSTER_6
testX,"numpy.hstack((testX,testx**i)",CLUSTER_3,CLUSTER_6
x,"numpy.delete(x,((x>0)",CLUSTER_3,CLUSTER_6
X_train,"numpy.delete(X,np.arange(a,b)",CLUSTER_3,CLUSTER_6
t_train,"numpy.delete(t,np.arange(a,b)",CLUSTER_3,CLUSTER_6
test_var,"numpy.diag(sig_sq*np.dot(np.dot(testX,np.linalg.inv(np.dot(X.T,X)",CLUSTER_3,CLUSTER_6
ax,"matplotlib.pyplot.axes(xticks=[],yticks=[])",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(2,5,figsize=(8,3)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_8
new_centers,numpy.array([X[labels==i].mean(0),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_7,CLUSTER_8
labels,"sklearn.cluster.KMeans(6,random_state=0)",CLUSTER_7,CLUSTER_8
labels,"sklearn.cluster.KMeans(2,random_state=0)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=0)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=0)",CLUSTER_7,CLUSTER_8
labels,"sklearn.metrics.pairwise_distances_argmin(X,centers)",CLUSTER_7,CLUSTER_8
"X,y","sklearn.datasets.make_moons(200,noise=.05,random_state=0)",CLUSTER_7,CLUSTER_8
model,"sklearn.cluster.SpectralClustering(n_clusters=2,affinity='nearest_neighbors',
assign_labels='kmeans')",CLUSTER_7,CLUSTER_8
digits,sklearn.datasets.load_digits(),CLUSTER_7,CLUSTER_8
labels[mask],scipy.stats.mode(digits.target[mask]),CLUSTER_7,CLUSTER_8
labels[mask],scipy.stats.mode(digits.target[mask]),CLUSTER_7,CLUSTER_8
mat,"sklearn.metrics.confusion_matrix(digits.target,labels)",CLUSTER_7,CLUSTER_8
tsne,"sklearn.manifold.TSNE(n_components=2,init='random',random_state=0)",CLUSTER_7,CLUSTER_8
china,"sklearn.datasets.load_sample_image(""china.jpg"")",CLUSTER_7,CLUSTER_8
kmeans,sklearn.cluster.MiniBatchKMeans(16),CLUSTER_7,CLUSTER_8
results,"pandas.DataFrame({
'Model':['SupportVectorMachines','KNN','LogisticRegression',
'RandomForest','NaiveBayes','Perceptron',
'StochasticGradientDecent',
'DecisionTree'],
'Score':[acc_linear_svc,acc_knn,acc_log,
acc_random_forest,acc_gaussian,acc_perceptron,
acc_sgd,acc_decision_tree]})",CLUSTER_7,CLUSTER_5
importances,"pandas.DataFrame({'feature':X_train.columns,'importance':np.round(random_forest.feature_importances_,3)",CLUSTER_7,CLUSTER_5
missing_data,"pandas.concat([total,percent_2],axis=1,keys=['Total','%'])",CLUSTER_7,CLUSTER_5
test_df,"pandas.read_csv(""titanic.csv"",sep='\t')",CLUSTER_7,CLUSTER_5
ax,seaborn.distplot(women[women['Survived']==1].Age.dropna(),CLUSTER_7,CLUSTER_5
ax,seaborn.distplot(women[women['Survived']==0].Age.dropna(),CLUSTER_7,CLUSTER_5
ax,seaborn.distplot(men[men['Survived']==1].Age.dropna(),CLUSTER_7,CLUSTER_5
ax,seaborn.distplot(men[men['Survived']==0].Age.dropna(),CLUSTER_7,CLUSTER_5
sgd,"sklearn.linear_model.SGDClassifier(max_iter=5,tol=None)",CLUSTER_7,CLUSTER_5
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_5
random_forest,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_7,CLUSTER_5
rf,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_7,CLUSTER_5
random_forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,oob_score=True)",CLUSTER_7,CLUSTER_5
random_forest,"sklearn.ensemble.RandomForestClassifier(criterion=""gini"",
min_samples_leaf=1,
min_samples_split=10,
n_estimators=100,
max_features='auto',
oob_score=True,
random_state=1,
n_jobs=-1)",CLUSTER_7,CLUSTER_5
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
perceptron,sklearn.linear_model.Perceptron(max_iter=5),CLUSTER_7,CLUSTER_5
decision_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_7,CLUSTER_5
linear_svc,sklearn.svm.LinearSVC(),CLUSTER_7,CLUSTER_5
gaussian,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_5
"train_df,post_test_df","sklearn.model_selection.train_test_split(
test_df,
test_size=0.7,
random_state=42)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.7,random_state=5,stratify=y)",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(rf,X_train,Y_train,cv=10,scoring=""accuracy"")",CLUSTER_7,CLUSTER_5
predictions,"sklearn.model_selection.cross_val_predict(random_forest,X_train,Y_train,cv=3)",CLUSTER_7,CLUSTER_5
"precision,recall,threshold","sklearn.metrics.precision_recall_curve(Y_train,y_scores)",CLUSTER_7,CLUSTER_5
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(Y_train,y_scores)",CLUSTER_7,CLUSTER_5
r_a_score,"sklearn.metrics.roc_auc_score(Y_train,y_scores)",CLUSTER_7,CLUSTER_5
xgb_random,"sklearn.model_selection.RandomizedSearchCV(param_distributions=gbm_param_grid,
estimator=gbm,scoring=""accuracy"",
verbose=1,n_iter=50,cv=4)",CLUSTER_7,CLUSTER_5
start,time.time(),CLUSTER_12,CLUSTER_7
stamp,time.time(),CLUSTER_12,CLUSTER_7
plus_dataframe1,pandas.DataFrame(columns=data_filter_freq_copy.columns),CLUSTER_4,CLUSTER_8
minus_dataframe1,pandas.DataFrame(columns=data_filter_freq_copy.columns),CLUSTER_4,CLUSTER_8
plus_dataframe2,pandas.DataFrame(columns=data_filter_freq_copy.columns),CLUSTER_4,CLUSTER_8
minus_dataframe2,pandas.DataFrame(columns=data_filter_freq_copy.columns),CLUSTER_4,CLUSTER_8
plus_dataframe2,pandas.DataFrame(columns=data_filter_freq_copy.columns),CLUSTER_4,CLUSTER_8
minus_dataframe2,pandas.DataFrame(columns=data_filter_freq_copy.columns),CLUSTER_4,CLUSTER_8
fitted_earning,pandas.DataFrame(columns=data_filter_freq_ori.columns),CLUSTER_4,CLUSTER_8
X_train,"pandas.DataFrame(columns=['긍정','부정'])",CLUSTER_4,CLUSTER_8
plus_dict1,pandas.Series([]),CLUSTER_4,CLUSTER_8
minus_dict1,pandas.Series([]),CLUSTER_4,CLUSTER_8
X_train,pandas.Series(),CLUSTER_4,CLUSTER_8
csv_file,"pandas.read_csv(abs_path,header=None)",CLUSTER_4,CLUSTER_8
earning_month_raw,pandas.read_excel('./data/코웨이수익률.xlsx'),CLUSTER_4,CLUSTER_8
data,pandas.read_parquet(path+file_name),CLUSTER_4,CLUSTER_8
file_name,os.listdir(path),CLUSTER_4,CLUSTER_8
y,numpy.array(earning_data_ori),CLUSTER_4,CLUSTER_8
y,numpy.array([labeling(label),CLUSTER_4,CLUSTER_8
y,numpy.array([labeling(label),CLUSTER_4,CLUSTER_8
y,"numpy.where(earning_data>=0,1,0)",CLUSTER_4,CLUSTER_8
y,"numpy.where(earning_data>0,1,0)",CLUSTER_4,CLUSTER_8
pos_score_dot_freq,"numpy.dot(plus_dict1[plus_pos],X_train_raw.iloc[train_idx,plus_idx])",CLUSTER_4,CLUSTER_8
minus_score_dot_freq,"numpy.dot(minus_dict1[minus_pos],X_train_raw.iloc[train_idx,minus_idx])",CLUSTER_4,CLUSTER_8
y,"numpy.delete(y,delete_index)",CLUSTER_4,CLUSTER_8
y,"numpy.delete(y,delete_index)",CLUSTER_4,CLUSTER_8
yesterday,"datetime.datetime(year=2017,month=6,day=8)",CLUSTER_4,CLUSTER_8
tag_dict,collections.Counter(),CLUSTER_4,CLUSTER_8
all_dict,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
precision_score_result,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict5[model_str],"sklearn.metrics.auc(fpr,tpr)",CLUSTER_4,CLUSTER_8
tmp_dict5[model_str],"sklearn.metrics.auc(fpr,tpr)",CLUSTER_4,CLUSTER_8
tmp_dict5[model_str],"sklearn.metrics.auc(fpr,tpr)",CLUSTER_4,CLUSTER_8
tmp_dict5[model_str],"sklearn.metrics.auc(fpr,tpr)",CLUSTER_4,CLUSTER_8
tmp_dict5[model_str],"sklearn.metrics.auc(fpr,tpr)",CLUSTER_4,CLUSTER_8
tmp_dict5[model_str],"sklearn.metrics.precision_score(y_test,pre)",CLUSTER_4,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,pre)",CLUSTER_4,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,pre)",CLUSTER_4,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,pre)",CLUSTER_4,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,pre)",CLUSTER_4,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,pre)",CLUSTER_4,CLUSTER_8
exmodel,"sklearn.ensemble.ExtraTreesClassifier(bootstrap=False,criterion='gini',max_depth=11,max_features=8,n_estimators=500,random_state=4000)",CLUSTER_4,CLUSTER_8
model,sklearn.model_selection.GridSearchCV(ExtraTreesClassifier(),CLUSTER_4,CLUSTER_8
model,sklearn.model_selection.GridSearchCV(ExtraTreesClassifier(),CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
"X_train_raw,X_test_raw","sklearn.model_selection.train_test_split(fitted_earning,test_size=test_ratio,shuffle=False)",CLUSTER_4,CLUSTER_8
"y_train,y_test","sklearn.model_selection.train_test_split(earning_data_ori,test_size=test_ratio,shuffle=False)",CLUSTER_4,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.33,shuffle=False)",CLUSTER_4,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.33,shuffle=False)",CLUSTER_4,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.33,shuffle=False)",CLUSTER_4,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.33,shuffle=False)",CLUSTER_4,CLUSTER_8
x,numpy.arange(100),CLUSTER_12,CLUSTER_3
x,numpy.arange(100),CLUSTER_12,CLUSTER_3
y_data,numpy.cumsum(np.random.randn(size),CLUSTER_12,CLUSTER_3
y_data_2,numpy.cumsum(np.random.randn(size),CLUSTER_12,CLUSTER_3
y_data_3,numpy.cumsum(np.random.randn(size),CLUSTER_12,CLUSTER_3
y,"numpy.cumsum(np.random.randn(2,100)",CLUSTER_12,CLUSTER_3
line.y,"numpy.cumsum(np.random.randn(2,100)",CLUSTER_12,CLUSTER_3
y,"numpy.cumsum(np.random.randn(2,100)",CLUSTER_12,CLUSTER_3
y_data,numpy.cumsum(np.random.randn(size),CLUSTER_12,CLUSTER_3
x,"numpy.linspace(0.0,10.0,size)",CLUSTER_12,CLUSTER_3
price_data,"pandas.DataFrame(np.cumsum(np.random.randn(150,2)",CLUSTER_12,CLUSTER_3
index,"pandas.date_range(start='01-01-2007',periods=150)",CLUSTER_12,CLUSTER_3
x,numpy.log10(plotdata['eta']),CLUSTER_7,CLUSTER_9
y,numpy.log10(plotdata['V']),CLUSTER_7,CLUSTER_9
xdata_var,numpy.log10(plotdataTMP['eta']),CLUSTER_7,CLUSTER_9
ydata_var,numpy.log10(plotdataTMP['V']),CLUSTER_7,CLUSTER_9
xdata_ax3,numpy.log10(plotdataTMP['flux']),CLUSTER_7,CLUSTER_9
ydata_ax1,numpy.log10(plotdataTMP['eta']),CLUSTER_7,CLUSTER_9
ydata_ax3,numpy.log10(plotdataTMP['V']),CLUSTER_7,CLUSTER_9
Xax3,numpy.log10(plotdataTMP['flux']),CLUSTER_7,CLUSTER_9
Yax1,numpy.log10(plotdata['eta']),CLUSTER_7,CLUSTER_9
Yax3,numpy.log10(plotdata['V']),CLUSTER_7,CLUSTER_9
plotdata,"pandas.DataFrame(data=plotdata,columns=['runcat','eta','V','maxFlx','avgFlx','freq','dpts','newSrc'])",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(1,figsize=(12,12)",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(1,figsize=(12,12)",CLUSTER_7,CLUSTER_9
motif_enrich_df,pandas.DataFrame(results),CLUSTER_7,CLUSTER_9
counts,pandas.DataFrame(records),CLUSTER_7,CLUSTER_9
motif_enrich_df,"pandas.concat([motif_enrich_df,counts],axis=1,sort=True)",CLUSTER_7,CLUSTER_9
dmr_bed_df,"pandas.read_csv(
f'/home/hanliu/project/mouse_rostral_brain/DMR/SubType/{dmr_type}Bed/{cluster}.{dmr_type}DMR.DMS2.bed',
header=None,
sep='\t',
index_col=-1,
names=['chrom','start','end','SubDMR'])",CLUSTER_7,CLUSTER_9
p,"numpy.zeros((np,3)",CLUSTER_3,CLUSTER_6
t,"numpy.zeros((nt,3)",CLUSTER_3,CLUSTER_6
"newMesh[""p""]","numpy.zeros((np,3)",CLUSTER_3,CLUSTER_6
v,"numpy.cross(b-a,c-a)",CLUSTER_3,CLUSTER_6
coefficients,numpy.zeros(25),CLUSTER_12,CLUSTER_9
ini_beta,numpy.zeros(30),CLUSTER_12,CLUSTER_9
ini_beta,numpy.zeros(30),CLUSTER_12,CLUSTER_9
rmse,numpy.sqrt(np.sum((predictions-observed),CLUSTER_12,CLUSTER_9
datatxt,numpy.loadtxt('data.txt'),CLUSTER_12,CLUSTER_9
MEDVtxt,numpy.loadtxt('MEDV.txt'),CLUSTER_12,CLUSTER_9
data,"pandas.DataFrame(datatxt,columns=[""CRIM"",""ZN"",""INDUS"",""CHAS"",""NOX"",""RM"",""AGE"",""DIS"",""RAD"",""TAX"",""PTRATIO"",""B"",""LSTAT""])",CLUSTER_12,CLUSTER_9
LR1,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_9
LR2,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_9
LR,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_9
kf,sklearn.model_selection.KFold(n_splits=25),CLUSTER_12,CLUSTER_9
kf,"sklearn.model_selection.KFold(n_splits=num_batch,shuffle=True)",CLUSTER_12,CLUSTER_9
start_time,time.time(),CLUSTER_12,CLUSTER_9
end_time,time.time(),CLUSTER_12,CLUSTER_9
start_time,time.time(),CLUSTER_12,CLUSTER_9
end_time,time.time(),CLUSTER_12,CLUSTER_9
start_time,time.time(),CLUSTER_12,CLUSTER_9
end_time,time.time(),CLUSTER_12,CLUSTER_9
start_time,time.time(),CLUSTER_12,CLUSTER_9
end_time,time.time(),CLUSTER_12,CLUSTER_9
"train,test","sklearn.model_selection.train_test_split(data,test_size=0.34)",CLUSTER_12,CLUSTER_9
"train,test","sklearn.model_selection.train_test_split(x_data,test_size=0.34,shuffle=True)",CLUSTER_12,CLUSTER_9
label,numpy.argmax(mnist.test.labels[i]),CLUSTER_2,CLUSTER_7
coefs,"numpy.asarray(values[1:],dtype='float32')",CLUSTER_4,CLUSTER_0
event_col,numpy.zeros((len(df_sum),CLUSTER_4,CLUSTER_0
late_event,numpy.zeros((len(df_sum),CLUSTER_4,CLUSTER_0
really_late_event,numpy.zeros((len(df_sum),CLUSTER_4,CLUSTER_0
embedding_matrix,"numpy.zeros((num_words,EMBEDDING_DIM)",CLUSTER_4,CLUSTER_0
event_feats,"numpy.concatenate([df_sum[""event_next_day""].as_matrix()",CLUSTER_4,CLUSTER_0
mae,numpy.mean(np.abs(predicted-trues),CLUSTER_4,CLUSTER_0
mse,numpy.mean((predicted-trues),CLUSTER_4,CLUSTER_0
mae,numpy.mean(np.abs(predicted-trues),CLUSTER_4,CLUSTER_0
mse,numpy.mean((predicted-trues),CLUSTER_4,CLUSTER_0
rae,numpy.sum(np.abs(predicted-trues),CLUSTER_4,CLUSTER_0
rae,numpy.sum(np.abs(predicted-trues),CLUSTER_4,CLUSTER_0
rmse,numpy.sqrt(np.mean((predicted-trues),CLUSTER_4,CLUSTER_0
rmse,numpy.sqrt(np.mean((predicted-trues),CLUSTER_4,CLUSTER_0
corr,"numpy.corrcoef(predicted,trues)",CLUSTER_4,CLUSTER_0
corr,"numpy.corrcoef(predicted,trues)",CLUSTER_4,CLUSTER_0
df_sum,"pandas.DataFrame(df.groupby(""date"")",CLUSTER_4,CLUSTER_0
"df_sum[""event_next_day""]","pandas.Series(df_sum[""event""])",CLUSTER_4,CLUSTER_0
"df_sum[""late_event_next_day""]","pandas.Series(df_sum[""late_event""])",CLUSTER_4,CLUSTER_0
"df_sum[""really_late_event_next_day""]","pandas.Series(df_sum[""really_late_event""])",CLUSTER_4,CLUSTER_0
"df_sum[""event_next_day_desc""]","pandas.Series(df_sum[""event_desc""])",CLUSTER_4,CLUSTER_0
preds,"pandas.Series(df_sum[""detrended""])",CLUSTER_4,CLUSTER_0
lags,"pandas.concat([pd.Series(df_sum[""detrended""])",CLUSTER_4,CLUSTER_0
lags_event_feats,"pandas.concat([pd.Series(df_sum[""event_next_day""])",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(""../central_park_weather.csv"")",CLUSTER_4,CLUSTER_0
events,"pandas.read_csv(""terminal5_events_preprocessed.tsv"",sep=""\t"")",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(""/home/fmpr/data/pickups_terminal_5_0.003.csv"")",CLUSTER_4,CLUSTER_0
events['start_time'],"pandas.to_datetime(events['start_time'],format='%Y-%m-%d%H:%M')",CLUSTER_4,CLUSTER_0
df_sum.index,"pandas.to_datetime(df_sum.index,format='%Y-%m-%d%H:%M')",CLUSTER_4,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
metadata,pandas.DataFrame(metadata),CLUSTER_4,CLUSTER_11
cross_results[dname],pandas.read_csv(cross_paths[dname]),CLUSTER_1,CLUSTER_3
lgd,matplotlib.pyplot.legend(),CLUSTER_1,CLUSTER_3
"f,axs","matplotlib.pyplot.subplots(1,len(m_datasets)",CLUSTER_1,CLUSTER_3
"f,axs","matplotlib.pyplot.subplots(1,len(m_datasets)",CLUSTER_1,CLUSTER_3
positive_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
negative_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
total_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
pos_neg_ratios,collections.Counter(),CLUSTER_12,CLUSTER_6
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_12,CLUSTER_6
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_12,CLUSTER_6
e,numpy.array(e.value),CLUSTER_3,CLUSTER_6
e,numpy.array(e.value),CLUSTER_3,CLUSTER_6
e,numpy.array(e.value),CLUSTER_3,CLUSTER_6
e_max,numpy.zeros(n),CLUSTER_3,CLUSTER_6
e_min,numpy.zeros(n),CLUSTER_3,CLUSTER_6
e_max,"numpy.maximum(e_max,e)",CLUSTER_3,CLUSTER_6
e_min,"numpy.minimum(e_min,e)",CLUSTER_3,CLUSTER_6
A,numpy.loadtxt('data/edge_incidence.txt'),CLUSTER_3,CLUSTER_6
f,numpy.loadtxt('data/node_flows.txt'),CLUSTER_3,CLUSTER_6
df,"pandas.concat([df_train,df_test])",CLUSTER_7,CLUSTER_8
df_train,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv(data_path+'titanic_test.csv'),CLUSTER_7,CLUSTER_8
df_fixed['Fare'],numpy.log1p(df_fixed['Fare']),CLUSTER_7,CLUSTER_8
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
df_fixed['Fare'],scipy.stats.boxcox(df_fixed['Fare']),CLUSTER_7,CLUSTER_8
titanic,seaborn.load_dataset('titanic'),CLUSTER_1,CLUSTER_10
df,pandas.read_parquet('../input/train_image_data_0.parquet'),CLUSTER_8,CLUSTER_4
p,"pandas.DataFrame([1,2,3,4,5],index=[11,22,33,44,55],columns=[""1""])",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame([[""Harshad"",20],[""kalpak"",20],[""mayur"",25]],columns=[""Name"",""Age""])",CLUSTER_8,CLUSTER_3
df1,"pandas.DataFrame([{""Name"":[""A"",""B"",""C"",""D""],""Age"":[20,21,25]}])",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame([{'Name':'Harshad','Age':20},{'Name':'Kalpak','Age':20},{}])",CLUSTER_8,CLUSTER_3
student,pandas.DataFrame(student),CLUSTER_8,CLUSTER_3
student1,"pandas.DataFrame(studlist,columns=index)",CLUSTER_8,CLUSTER_3
df1,"pandas.DataFrame({'rollno':[1,2,3,4,5],'name':['a1','a2','a3','a4','a5'],'Subject':['sub1','sub2','sub4','sub6','sub5']})",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame({'rollno':[1,2,3,4,5],'name':['b1','b2','b3','b4','b5'],'Subject':['sub2','sub4','sub3','sub6','sub5']})",CLUSTER_8,CLUSTER_3
df1,"pandas.DataFrame({'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']},
index=[0,1,2,3])",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame({'A':['A4','A5','A6','A7'],
'B':['B4','B5','B6','B7'],
'C':['C4','C5','C6','C7'],
'D':['D4','D5','D6','D7']},
index=[4,5,6,7])",CLUSTER_8,CLUSTER_3
df3,"pandas.DataFrame({'A':['A8','A9','A10','A11'],
'B':['B8','B9','B10','B11'],
'C':['C8','C9','C10','C11'],
'D':['D8','D9','D10','D11']},
index=[8,9,10,11])",CLUSTER_8,CLUSTER_3
left,"pandas.DataFrame({'Key':['K0','K1','K2','K3'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_8,CLUSTER_3
right,"pandas.DataFrame({'Key':['K0','K1','K2','K3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_8,CLUSTER_3
a,"pandas.Series([2,4,6,8,10])",CLUSTER_8,CLUSTER_3
b,"pandas.Series([2,4,6,8,10],index=[""a"",""b"",""c"",""d"",""e""])",CLUSTER_8,CLUSTER_3
d,"pandas.Series(5,index=[0,1,2,3,4])",CLUSTER_8,CLUSTER_3
s,"pandas.Series([1,2,3,4,5],index=[""a"",""b"",""c"",""d"",""e""])",CLUSTER_8,CLUSTER_3
a,"pandas.concat([df1,df2])",CLUSTER_8,CLUSTER_3
df3,"pandas.merge(df1,df2)",CLUSTER_8,CLUSTER_3
df3,"pandas.merge(df1,df2,on='Subject',how='inner')",CLUSTER_8,CLUSTER_3
df3,"pandas.merge(df1,df2,on='Subject',how='outer')",CLUSTER_8,CLUSTER_3
df3,"pandas.merge(df1,df2,on='Subject',how='left')",CLUSTER_8,CLUSTER_3
df4,"pandas.merge(df1,df2,on='Subject',how='right')",CLUSTER_8,CLUSTER_3
df5,"pandas.merge(df1,df2,on='Subject',how='right',sort='True')",CLUSTER_8,CLUSTER_3
A,"pandas.read_excel(""student.xlsx"",index_col=0)",CLUSTER_8,CLUSTER_3
b,"pandas.read_excel(""student.xlsx"",index_col=None,header=None)",CLUSTER_8,CLUSTER_3
arr,"numpy.array([2,4,6,8,10])",CLUSTER_8,CLUSTER_3
phiprime,"numpy.empty([M+1,M+1],float)",CLUSTER_3,CLUSTER_6
phi,"numpy.zeros([M+1,M+1],float)",CLUSTER_3,CLUSTER_6
rho,"numpy.zeros([M+1,M+1],float)",CLUSTER_3,CLUSTER_6
df,pandas.concat([df]+project_helper.generate_tb_sector(df[df['ticker']=='AAPL']['date']),CLUSTER_8,CLUSTER_9
df_original,"pandas.read_csv('../../data/project_2/eod-quotemedia.csv',parse_dates=['date'],index_col=False)",CLUSTER_8,CLUSTER_9
kmeans_,"sklearn.cluster.KMeans(n_clusters=6,random_state=42)",CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_10
end_time,time.time(),CLUSTER_5,CLUSTER_10
alphas,"numpy.arange(0,1,0.01)",CLUSTER_5,CLUSTER_10
er_stats_all,"pandas.read_csv(""Year-2018-EPSRating-stats.csv"")",CLUSTER_8,CLUSTER_3
windowCenters,"numpy.arange(-8,9)",CLUSTER_4,CLUSTER_11
xvals,"numpy.arange(-20,21)",CLUSTER_4,CLUSTER_11
windowCenters,"numpy.arange(-8,9)",CLUSTER_4,CLUSTER_11
xvals,"numpy.arange(-20,21)",CLUSTER_4,CLUSTER_11
X,"numpy.array(outData[['Frame','X']],dtype=np.float)",CLUSTER_4,CLUSTER_11
testMat,numpy.array([[ii+jjforjjinnp.arange(5),CLUSTER_4,CLUSTER_11
binVec,numpy.array(tempDat.X_Index+1),CLUSTER_4,CLUSTER_11
outVec,numpy.array(outEig[1]),CLUSTER_4,CLUSTER_11
X,"numpy.array(outData[['Frame','X']],dtype=np.float)",CLUSTER_4,CLUSTER_11
binVec,numpy.array(tempDat.X_Index+1),CLUSTER_4,CLUSTER_11
outVec,numpy.array(outEig[1]),CLUSTER_4,CLUSTER_11
X,"numpy.array(outData[['Frame','X']],dtype=np.float)",CLUSTER_4,CLUSTER_11
binVec,numpy.array(tempDat.X_Index+1),CLUSTER_4,CLUSTER_11
outVec,numpy.array(outEig[1]),CLUSTER_4,CLUSTER_11
winMins,numpy.array(windowMins),CLUSTER_4,CLUSTER_11
winMaxs,numpy.array(windowMaxs),CLUSTER_4,CLUSTER_11
binVec,numpy.array(tempDat.X_Index+1),CLUSTER_4,CLUSTER_11
outVec,numpy.array(outEig[1]),CLUSTER_4,CLUSTER_11
bVec,numpy.zeros(nedges),CLUSTER_4,CLUSTER_11
escapeMat,"numpy.zeros((nBins,nBins)",CLUSTER_4,CLUSTER_11
pCenters,numpy.zeros(len(windows),CLUSTER_4,CLUSTER_11
escapeRatios,numpy.zeros(len(windows),CLUSTER_4,CLUSTER_11
escapeMat,"numpy.zeros((nBins,nBins)",CLUSTER_4,CLUSTER_11
pCenters,numpy.zeros(len(windows),CLUSTER_4,CLUSTER_11
escapeRatios,numpy.zeros(len(windows),CLUSTER_4,CLUSTER_11
tempVals,numpy.zeros(len(parmValNames),CLUSTER_4,CLUSTER_11
escapeMat,"numpy.zeros((nBins,nBins)",CLUSTER_4,CLUSTER_11
pCenters,numpy.zeros(len(windows),CLUSTER_4,CLUSTER_11
escapeRatios,numpy.zeros(len(windows),CLUSTER_4,CLUSTER_11
escapeMat,"numpy.zeros((nBins,nBins)",CLUSTER_4,CLUSTER_11
"printzip(xvals,np.digitize(xvals,bins","numpy.concatenate([winMins,[winMaxs[-1]]])",CLUSTER_4,CLUSTER_11
"printzip(xvals,np.digitize(xvals,bins","numpy.concatenate([winMins,[winMaxs[-1]]])",CLUSTER_4,CLUSTER_11
datColNames,"numpy.concatenate([
['Frame'],
['MG%g'%iiMGforiiMGinnp.arange(6)",CLUSTER_4,CLUSTER_11
datColNames,"numpy.concatenate([
['Timestep'],
['MG%g'%iiMGforiiMGinnp.arange(6)",CLUSTER_4,CLUSTER_11
si,numpy.argsort(1-outEig[0]),CLUSTER_4,CLUSTER_11
si,numpy.argsort(1-outEig[0]),CLUSTER_4,CLUSTER_11
si,numpy.argsort(1-outEig[0]),CLUSTER_4,CLUSTER_11
si,numpy.argsort(1-outEig[0]),CLUSTER_4,CLUSTER_11
windowWidth,numpy.mean(winMaxs-winMins),CLUSTER_4,CLUSTER_11
testRows,"numpy.nonzero(np.sum(testMat,axis=1)",CLUSTER_4,CLUSTER_11
testNZinds,numpy.nonzero(testMat),CLUSTER_4,CLUSTER_11
x,numpy.nonzero(milestoneResults['Qmat']),CLUSTER_4,CLUSTER_11
y,numpy.nonzero(milestoneResults['Qmat']),CLUSTER_4,CLUSTER_11
windows,numpy.sort(simDataTable.Window.unique(),CLUSTER_4,CLUSTER_11
xbins,numpy.sort(simDataTable.X_Index.unique(),CLUSTER_4,CLUSTER_11
windows,numpy.sort(simDataTable.Window.unique(),CLUSTER_4,CLUSTER_11
xbins,numpy.sort(simDataTable.X_Index.unique(),CLUSTER_4,CLUSTER_11
dataFiles,numpy.sort(os.listdir(dataDir),CLUSTER_4,CLUSTER_11
windows,numpy.sort(simData.Window.unique(),CLUSTER_4,CLUSTER_11
xbins,numpy.sort(simData.X_Index.unique(),CLUSTER_4,CLUSTER_11
windows,numpy.sort(simData.Window.unique(),CLUSTER_4,CLUSTER_11
xbins,numpy.sort(simData.X_Index.unique(),CLUSTER_4,CLUSTER_11
cCount,numpy.sum(binC),CLUSTER_4,CLUSTER_11
cCount,numpy.sum(binC),CLUSTER_4,CLUSTER_11
cCount,numpy.sum(binC),CLUSTER_4,CLUSTER_11
cCount,numpy.sum(binC),CLUSTER_4,CLUSTER_11
Rmat,numpy.matrix(escapeMat),CLUSTER_4,CLUSTER_11
Dmat,"numpy.matrix(np.diag(1-np.sum(escapeMat,axis=1)",CLUSTER_4,CLUSTER_11
Rmat,numpy.matrix(escapeMat),CLUSTER_4,CLUSTER_11
Dmat,"numpy.matrix(np.diag(1-np.sum(escapeMat,axis=1)",CLUSTER_4,CLUSTER_11
Rmat,numpy.matrix(escapeMat),CLUSTER_4,CLUSTER_11
Dmat,"numpy.matrix(np.diag(1-np.sum(escapeMat,axis=1)",CLUSTER_4,CLUSTER_11
Rmat,numpy.matrix(escapeMat),CLUSTER_4,CLUSTER_11
Dmat,"numpy.matrix(np.diag(1-np.sum(escapeMat,axis=1)",CLUSTER_4,CLUSTER_11
tCounts,"numpy.unique(binT,return_counts=True)",CLUSTER_4,CLUSTER_11
tCounts,"numpy.unique(binT,return_counts=True)",CLUSTER_4,CLUSTER_11
tCounts,"numpy.unique(binT,return_counts=True)",CLUSTER_4,CLUSTER_11
tCounts,"numpy.unique(binT,return_counts=True)",CLUSTER_4,CLUSTER_11
outEig,numpy.linalg.eig(RDmat.T),CLUSTER_4,CLUSTER_11
outEig,numpy.linalg.eig(RDmat.T),CLUSTER_4,CLUSTER_11
outEig,numpy.linalg.eig(RDmat.T),CLUSTER_4,CLUSTER_11
outEig,numpy.linalg.eig(RDmat.T),CLUSTER_4,CLUSTER_11
parmData,pandas.DataFrame(parmData),CLUSTER_4,CLUSTER_11
mdTable,pandas.concat(mdDataTables),CLUSTER_4,CLUSTER_11
simDataTable,"pandas.read_csv(""Test_Simulation_Milestoning_Data.csv"")",CLUSTER_4,CLUSTER_11
simDataTable,"pandas.read_csv(""Test_Simulation_Milestoning_Data.lvd.csv"")",CLUSTER_4,CLUSTER_11
tempTable,"pandas.read_csv(dataDir+'/'+winFileName,delim_whitespace=True,
names=datColNames)",CLUSTER_4,CLUSTER_11
table_by_month,"pandas.DataFrame(table_by_month,index=['
table_by_month.to_csv(""/Users/sangwon/workspace/school/bithumb_bot/bithumb_bot/sangwon_code/table/overall_table_by_month.csv"",header=True,index=True,encoding='utf-8')",CLUSTER_1,CLUSTER_3
cumsum_df1,"pandas.concat([df1,sign_quantity_cumsum1,amount_cumsum1],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df2,"pandas.concat([df2,sign_quantity_cumsum2,amount_cumsum2],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df3,"pandas.concat([df3,sign_quantity_cumsum3,amount_cumsum3],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df4,"pandas.concat([df4,sign_quantity_cumsum4,amount_cumsum4],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df5,"pandas.concat([df5,sign_quantity_cumsum5,amount_cumsum5],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df6,"pandas.concat([df6,sign_quantity_cumsum6,amount_cumsum6],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df7,"pandas.concat([df7,sign_quantity_cumsum7,amount_cumsum7],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point1,"pandas.concat([cumsum_df_zero_point1,compare1],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point2,"pandas.concat([cumsum_df_zero_point2,compare2],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point3,"pandas.concat([cumsum_df_zero_point3,compare3],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point4,"pandas.concat([cumsum_df_zero_point4,compare4],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point5,"pandas.concat([cumsum_df_zero_point5,compare5],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point6,"pandas.concat([cumsum_df_zero_point6,compare6],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point7,"pandas.concat([cumsum_df_zero_point7,compare7],axis=1)",CLUSTER_1,CLUSTER_3
df1,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-01-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df2,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-02-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df3,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-03-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df4,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-04-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df5,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-05-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df6,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-06-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df7,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-07-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df1['timestamp'],"pandas.to_datetime(df1['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df2['timestamp'],"pandas.to_datetime(df2['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df3['timestamp'],"pandas.to_datetime(df3['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df4['timestamp'],"pandas.to_datetime(df4['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df5['timestamp'],"pandas.to_datetime(df5['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df6['timestamp'],"pandas.to_datetime(df6['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df7['timestamp'],"pandas.to_datetime(df7['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df_imp,"pandas.DataFrame(df2,columns=df1.columns)",CLUSTER_7,CLUSTER_5
cdf,"pandas.DataFrame(lm.coef_,X.columns,columns=['Coeff'])",CLUSTER_7,CLUSTER_5
df_all,"pandas.concat(df_,sort=False,axis=1)",CLUSTER_7,CLUSTER_5
df,"pandas.read_sql_query(""select*fromPlayer_Attributes"",conn)",CLUSTER_7,CLUSTER_5
df_cat['date'],pandas.to_datetime(df_cat.date),CLUSTER_7,CLUSTER_5
tree,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y)",CLUSTER_7,CLUSTER_5
imp,"sklearn.impute.SimpleImputer(missing_values='NaN',strategy='most_frequent')",CLUSTER_7,CLUSTER_5
impute,sklearn.impute.SimpleImputer(strategy='mean'),CLUSTER_7,CLUSTER_5
lb_en,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
bias,numpy.array([[1]*len(X),CLUSTER_12,CLUSTER_10
X,"numpy.array([[0,0],[0,1],[1,0],[1,1]])",CLUSTER_12,CLUSTER_10
X,"numpy.array([[0,0],[0,1],[1,0],[1,1]])",CLUSTER_12,CLUSTER_10
Y_1,"numpy.array([[0],[0],[0],[1]])",CLUSTER_12,CLUSTER_10
Y_2,"numpy.array([[0],[1],[1],[1]])",CLUSTER_12,CLUSTER_10
Y_3,"numpy.array([[1],[0],[0],[1]])",CLUSTER_12,CLUSTER_10
X,"numpy.array([[0,0],[0,1],[1,0],[1,1]])",CLUSTER_12,CLUSTER_10
Y_1,"numpy.array([[0],[0],[0],[1]])",CLUSTER_12,CLUSTER_10
Y_2,"numpy.array([[0],[1],[1],[1]])",CLUSTER_12,CLUSTER_10
Y_3,"numpy.array([[1],[0],[0],[1]])",CLUSTER_12,CLUSTER_10
Y,numpy.zeros((len(digits),CLUSTER_12,CLUSTER_10
digit_sample,"numpy.ones((8,8)",CLUSTER_12,CLUSTER_10
"returnnp.sum(np.argmax(A,axis","1)==numpy.argmax(Y,axis=1)",CLUSTER_12,CLUSTER_10
digits,"numpy.loadtxt('digits123.csv',delimiter=',',dtype=int)",CLUSTER_12,CLUSTER_10
clf,"sklearn.neural_network.MLPClassifier(solver='lbfgs',alpha=1e-5,hidden_layer_sizes=(8,)",CLUSTER_12,CLUSTER_10
jobs,"pandas.DataFrame({'title':title,
'company':company,
'location':location,
'salary':salary,
'summary':summary,
'link':link})",CLUSTER_9,CLUSTER_2
df,pandas.read_csv('./data/jobs.csv'),CLUSTER_9,CLUSTER_2
r,requests.get(url),CLUSTER_9,CLUSTER_2
r,requests.get(url),CLUSTER_9,CLUSTER_2
r,requests.get(url_pages),CLUSTER_9,CLUSTER_2
value,re.search('^£(\d+),CLUSTER_9,CLUSTER_2
kbdata,"pandas.read_csv(""/data/fjsdata/ctKngBase/kb.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
kbdata,"pandas.read_csv(""/data/fjsdata/ctKngBase/kb.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
trainset,"pandas.read_csv(""/data/fjsdata/ctKngBase/trainset.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
testset,"pandas.read_csv(""/data/fjsdata/ctKngBase/testset.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
kbdata,"pandas.read_csv(""/data/fjsdata/ctKngBase/kb.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
kbdata,"pandas.read_csv(""/data/fjsdata/ctKngBase/kb.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
kbdata,"pandas.read_csv(""/data/fjsdata/ctKngBase/kb.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
kbdata,"traindata=pandas.read_csv(""/data/fjsdata/ctKngBase/kb.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
testset,numpy.array(testset),CLUSTER_0,CLUSTER_1
testset,numpy.array(testset),CLUSTER_0,CLUSTER_1
R,"numpy.zeros((nCsr,nKe)",CLUSTER_0,CLUSTER_1
eR,"numpy.dot(P,Q)",CLUSTER_0,CLUSTER_1
nR,"numpy.dot(nP,nQ.T)",CLUSTER_0,CLUSTER_1
user_est_true,collections.defaultdict(list),CLUSTER_0,CLUSTER_1
user_est_true,collections.defaultdict(list),CLUSTER_0,CLUSTER_1
user_est_true,collections.defaultdict(list),CLUSTER_0,CLUSTER_1
user_est_true,collections.defaultdict(list),CLUSTER_0,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_0,CLUSTER_1
RMSE,"sklearn.metrics.mean_squared_error(test['num'],Y_test)",CLUSTER_0,CLUSTER_1
x,numpy.zeros(n),CLUSTER_1,CLUSTER_10
X,numpy.zeros(ntrials),CLUSTER_1,CLUSTER_10
sqrtdt,numpy.sqrt(dt),CLUSTER_1,CLUSTER_10
t,"numpy.linspace(0.,T,n)",CLUSTER_1,CLUSTER_10
bins,"numpy.linspace(-2.,14.,100)",CLUSTER_1,CLUSTER_10
"hist,_","numpy.histogram(X,bins=bins)",CLUSTER_1,CLUSTER_10
output,"pandas.DataFrame(data={""id"":test[""id""],""sentiment"":result})",CLUSTER_0,CLUSTER_1
train,"pandas.read_csv(""data/kaggle_nlp_labeledTrainData.tsv"",header=0,delimiter=""\t"",quoting=3)",CLUSTER_0,CLUSTER_1
test,"pandas.read_csv(""data/kaggle_nlp_testData.tsv"",header=0,delimiter=""\t"",quoting=3)",CLUSTER_0,CLUSTER_1
letters_only,"re.sub(""[^a-zA-Z]"",
"""",
example1.get_text()",CLUSTER_0,CLUSTER_1
letters_only,"re.sub(""[^a-zA-Z]"","""",review_text)",CLUSTER_0,CLUSTER_1
dist,"numpy.sum(train_data_features,axis=0)",CLUSTER_0,CLUSTER_1
forest,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame({'attributes':cols,'correlation':correlations})",CLUSTER_5,CLUSTER_5
df,"pandas.read_sql_query(""SELECT*FROMPlayer_Attributes"",cnx)",CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.gcf(),CLUSTER_5,CLUSTER_5
model,"sklearn.cluster.KMeans(init='k-means++',n_clusters=noOfClusters,n_init=20)",CLUSTER_5,CLUSTER_5
data,sklearn.preprocessing.scale(df_select),CLUSTER_5,CLUSTER_5
movies,pandas.read_csv('./train_data/tmdb_5000_movies.csv'),CLUSTER_5,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_4,CLUSTER_11
statinfo,os.stat(filename),CLUSTER_4,CLUSTER_11
datasetGray,numpy.ndarray([len(imgInfos),CLUSTER_4,CLUSTER_11
bboxes,numpy.zeros([len(imgInfos),CLUSTER_4,CLUSTER_11
validBoundingBoxes,"numpy.concatenate((extraBoundingBoxes[validIndex2,:],trainBoundingBoxes[validIndex,:])",CLUSTER_4,CLUSTER_11
trainBoundingBoxes_t,"numpy.concatenate((extraBoundingBoxes[trainIndex2,:],trainBoundingBoxes[trainIndex,:])",CLUSTER_4,CLUSTER_11
validLabels,"numpy.concatenate((extraLabels[validIndex2,:],trainLabels[validIndex,:])",CLUSTER_4,CLUSTER_11
trainLabels_t,"numpy.concatenate((extraLabels[trainIndex2,:],trainLabels[trainIndex,:])",CLUSTER_4,CLUSTER_11
validDatasetGray,"numpy.concatenate((extraDatasetGray[validIndex2,:,:,:],trainDatasetGray[validIndex,:,:,:])",CLUSTER_4,CLUSTER_11
trainDatasetGray_t,"numpy.concatenate((extraDatasetGray[trainIndex2,:,:,:],trainDatasetGray[trainIndex,:,:,:])",CLUSTER_4,CLUSTER_11
imGray,"numpy.dot(np.array(img,dtype='float32')",CLUSTER_4,CLUSTER_11
labels,numpy.ones([len(imgInfos),CLUSTER_4,CLUSTER_11
im_height,numpy.amax(top),CLUSTER_4,CLUSTER_11
im_width,numpy.amax(left),CLUSTER_4,CLUSTER_11
im_top,numpy.amin(top),CLUSTER_4,CLUSTER_11
im_left,numpy.amin(left),CLUSTER_4,CLUSTER_11
trainDatasetGray,"numpy.delete(trainDatasetGray,29929,axis=0)",CLUSTER_4,CLUSTER_11
trainBoundingBoxes,"numpy.delete(trainBoundingBoxes,29929,axis=0)",CLUSTER_4,CLUSTER_11
trainLabels,"numpy.delete(trainLabels,29929,axis=0)",CLUSTER_4,CLUSTER_11
scores_deque,collections.deque(maxlen=print_every),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
smiles_tasks_df,pandas.read_csv(raw_filename),CLUSTER_4,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=SEED)",CLUSTER_4,CLUSTER_0
ax,"seaborn.distplot(atom_num_dist,bins=28,kde=False)",CLUSTER_4,CLUSTER_0
start,time.time(),CLUSTER_10,CLUSTER_12
s,numpy.zeros(nt),CLUSTER_1,CLUSTER_9
a,numpy.zeros(nt),CLUSTER_1,CLUSTER_9
s,numpy.zeros(nt),CLUSTER_1,CLUSTER_9
a,numpy.zeros(nt),CLUSTER_1,CLUSTER_9
s,numpy.zeros(nt),CLUSTER_1,CLUSTER_9
a,numpy.zeros(nt),CLUSTER_1,CLUSTER_9
time,"numpy.linspace(0,total_time,num=nt)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
t1,time.perf_counter(),CLUSTER_10,CLUSTER_12
t2,time.perf_counter(),CLUSTER_10,CLUSTER_12
time,"numpy.arange(0,len(wave_data)",CLUSTER_2,CLUSTER_7
wave_data,"numpy.fromstring(str_data,dtype=np.short)",CLUSTER_2,CLUSTER_7
mse,numpy.mean(pow(abs(wave_data-decoded),CLUSTER_2,CLUSTER_7
policy_list,"numpy.array([[1.],[1.]])",CLUSTER_3,CLUSTER_6
agent.values,"numpy.array([0.,1.])",CLUSTER_3,CLUSTER_6
policy_list,numpy.array([[1.]]),CLUSTER_3,CLUSTER_6
agent.values,numpy.array([0.]),CLUSTER_3,CLUSTER_6
average_v,numpy.array(arr),CLUSTER_3,CLUSTER_6
self.values,"numpy.zeros((self.policy.shape[0],)",CLUSTER_3,CLUSTER_6
policy,"numpy.ones(shape=(env_info['grid_width']*env_info['grid_height'],4)",CLUSTER_3,CLUSTER_6
policy,"numpy.ones(shape=(env_info['grid_width']*env_info['grid_height'],4)",CLUSTER_3,CLUSTER_6
policy,"numpy.ones(shape=(env_info['grid_width']*env_info['grid_height'],4)",CLUSTER_3,CLUSTER_6
Ridge_results,pandas.DataFrame(ridge_cv.cv_results_),CLUSTER_7,CLUSTER_8
Lasso_results,pandas.DataFrame(lasso_cv.cv_results_),CLUSTER_7,CLUSTER_8
coef,"pandas.Series(lasso.coef_,index=X_train.columns)",CLUSTER_7,CLUSTER_8
data,"pandas.concat([data,data_categorical],axis=1)",CLUSTER_7,CLUSTER_8
main_coef,pandas.concat([coef.sort_values(),CLUSTER_7,CLUSTER_8
data_categorical,"pandas.get_dummies(data_categorical,drop_first=True)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
ax,"seaborn.boxplot(x=col,
y='SalePrice',
data=data)",CLUSTER_7,CLUSTER_8
ax,seaborn.distplot(data['SalePrice']),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
"df_train,df_test","sklearn.model_selection.train_test_split(data,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
ridge_cv,"sklearn.model_selection.GridSearchCV(estimator=ridge,
param_grid=params,
scoring='r2',
cv=folds,
return_train_score=True,
verbose=1)",CLUSTER_7,CLUSTER_8
lasso_cv,"sklearn.model_selection.GridSearchCV(estimator=lasso,
param_grid=params,
scoring='r2',
cv=folds,
return_train_score=True,
verbose=1)",CLUSTER_7,CLUSTER_8
ridge,sklearn.linear_model.Ridge(),CLUSTER_7,CLUSTER_8
ridge,sklearn.linear_model.Ridge(alpha=alpha),CLUSTER_7,CLUSTER_8
lasso,sklearn.linear_model.Lasso(),CLUSTER_7,CLUSTER_8
lasso,sklearn.linear_model.Lasso(alpha=alpha_val),CLUSTER_7,CLUSTER_8
n,numpy.arange(N),CLUSTER_1,CLUSTER_10
N,numpy.arange(200),CLUSTER_1,CLUSTER_10
Z,numpy.array(np.matrix(2*n+1),CLUSTER_1,CLUSTER_10
Qy_g,"numpy.zeros((z.size,N.size)",CLUSTER_1,CLUSTER_10
z,"numpy.linspace(-1.,0,300)",CLUSTER_1,CLUSTER_10
ax,"matplotlib.pyplot.axes(xlim=(Qy_g[:,-1].min()",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(7,7)",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_1,CLUSTER_10
X,"numpy.arange(-5,5,0.25)",CLUSTER_1,CLUSTER_10
Y,"numpy.arange(-5,5,0.25)",CLUSTER_1,CLUSTER_10
distance_to_center_line,"numpy.arange(0,1.8,0.2)",CLUSTER_1,CLUSTER_10
delta_headings,"numpy.arange(0,20,0.1)",CLUSTER_1,CLUSTER_10
rotations,"numpy.arange(-1,1,0.2)",CLUSTER_1,CLUSTER_10
current_speeds,"numpy.arange(0,10,0.5)",CLUSTER_1,CLUSTER_10
current_speeds,"numpy.arange(0,15,1)",CLUSTER_1,CLUSTER_10
delta_headings,"numpy.arange(0,1.5,0.1)",CLUSTER_1,CLUSTER_10
rotation_reward,numpy.ones_like(rotations),CLUSTER_1,CLUSTER_10
speed_reward,numpy.ones_like(current_speeds),CLUSTER_1,CLUSTER_10
Z,numpy.sin(R),CLUSTER_1,CLUSTER_10
R,numpy.sqrt(X**2+Y**2),CLUSTER_1,CLUSTER_10
"X,Y","numpy.meshgrid(X,Y)",CLUSTER_1,CLUSTER_10
"current_speeds,delta_headings","numpy.meshgrid(current_speeds,delta_headings)",CLUSTER_1,CLUSTER_10
data1,pandas.read_csv('mnist_train.csv'),CLUSTER_1,CLUSTER_3
data2,pandas.read_csv('mnist_test.csv'),CLUSTER_1,CLUSTER_3
a,"numpy.array([[1,2,3,4,5],[34,3,4,2,4],[4,5,6,7,8]])",CLUSTER_1,CLUSTER_3
value,numpy.array([x-mean_class[k]]),CLUSTER_1,CLUSTER_3
value,numpy.array([x-mean_class_ldamulti[k]]),CLUSTER_1,CLUSTER_3
value,numpy.array([x-mean_class[k]]),CLUSTER_1,CLUSTER_3
ans,"numpy.zeros((x.shape[1],x.shape[1])",CLUSTER_1,CLUSTER_3
first_term,numpy.zeros((10),CLUSTER_1,CLUSTER_3
third_term,numpy.zeros((10),CLUSTER_1,CLUSTER_3
preds,"numpy.zeros((5,1)",CLUSTER_1,CLUSTER_3
u,"numpy.zeros((10,784,784)",CLUSTER_1,CLUSTER_3
second_term,numpy.zeros((10),CLUSTER_1,CLUSTER_3
preds1,"numpy.zeros((5,1)",CLUSTER_1,CLUSTER_3
preds2,"numpy.zeros((5,1)",CLUSTER_1,CLUSTER_3
term,numpy.zeros((2),CLUSTER_1,CLUSTER_3
preds_b,"numpy.zeros((200,1)",CLUSTER_1,CLUSTER_3
third_term[k],numpy.log(size_train_class[k]/ytrain.shape[0]),CLUSTER_1,CLUSTER_3
second_term[k],numpy.log(size_train_class[k]/ytrain.shape[0]),CLUSTER_1,CLUSTER_3
term[k],numpy.log(size_train_class[k]/ytrain.shape[0]),CLUSTER_1,CLUSTER_3
xbar,"numpy.vstack(np.mean(x,axis=0)",CLUSTER_1,CLUSTER_3
labels1,"numpy.asfarray(data1.iloc[:,data1.columns=='label'])",CLUSTER_1,CLUSTER_3
images1,"numpy.asfarray(data1.iloc[:,data1.columns!='label'])",CLUSTER_1,CLUSTER_3
labels2,"numpy.asfarray(data2.loc[:,data2.columns=='label'])",CLUSTER_1,CLUSTER_3
images2,"numpy.asfarray(data2.loc[:,data2.columns!='label'])",CLUSTER_1,CLUSTER_3
b,numpy.cov(a.T),CLUSTER_1,CLUSTER_3
rand_index,"random.randint(1,9989)",CLUSTER_1,CLUSTER_3
rand_index,"random.randint(1,9989)",CLUSTER_1,CLUSTER_3
c,collections.Counter(),CLUSTER_1,CLUSTER_10
c_sites,collections.Counter(trajectory.site_labels(),CLUSTER_1,CLUSTER_10
c_sites,collections.Counter(trajectory.site_labels(),CLUSTER_1,CLUSTER_10
c,collections.Counter(),CLUSTER_1,CLUSTER_10
y,"numpy.zeros((102,1)",CLUSTER_1,CLUSTER_10
y,"numpy.zeros((102,1)",CLUSTER_1,CLUSTER_10
e,"numpy.zeros((102,1)",CLUSTER_1,CLUSTER_10
times,"numpy.linspace(0,100,num=101)",CLUSTER_1,CLUSTER_10
image,numpy.array(image_pil),CLUSTER_1,CLUSTER_10
image_bw,numpy.array(image_pil),CLUSTER_1,CLUSTER_10
cat_image,numpy.array(cat_pil),CLUSTER_1,CLUSTER_10
signal,numpy.sin(2*np.pi*f1*times),CLUSTER_12,CLUSTER_10
times,"numpy.linspace(0,3,100)",CLUSTER_12,CLUSTER_10
response,"requests.get(p_the_URL,headers=p_headers,params=p_params,auth=p_auth)",CLUSTER_10,CLUSTER_4
all_df,pandas.concat(df_list),CLUSTER_11,CLUSTER_12
all_df,pandas.concat(df_list),CLUSTER_11,CLUSTER_12
virus_df,pandas.read_csv(BASE_URL.format(day_label),CLUSTER_11,CLUSTER_12
virus_df,"pandas.read_csv(file,sep=',')",CLUSTER_11,CLUSTER_12
latlong_df,"pandas.read_csv(os.path.join(PROCESSED_DIR,'lat_long_table.csv')",CLUSTER_11,CLUSTER_12
virus_df,"pandas.read_csv(file,sep=',',parse_dates=['LastUpdate'])",CLUSTER_11,CLUSTER_12
START_DATE,"datetime.date(2020,1,22)",CLUSTER_11,CLUSTER_12
END_DATE,"datetime.date(2020,3,12)",CLUSTER_11,CLUSTER_12
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_5
print_table,"pandas.DataFrame(data=table,index=['first','second','third','fourth','fiveth'])",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv(""ORGANICS.csv"",encoding=""cp1251"",delimiter=',')",CLUSTER_7,CLUSTER_5
titanic,"pandas.read_csv(""titanic.csv"",encoding=""cp1251"",delimiter=',')",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv(""ORGANICS.csv"",encoding=""cp1251"",delimiter=',')",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3)",CLUSTER_7,CLUSTER_5
tree,"sklearn.tree.DecisionTreeClassifier(max_depth=4,random_state=0)",CLUSTER_7,CLUSTER_5
newTree,"sklearn.tree.DecisionTreeClassifier(max_depth=5,criterion='entropy')",CLUSTER_7,CLUSTER_5
tree_one,"sklearn.tree.DecisionTreeClassifier(max_depth=2,min_samples_leaf=4)",CLUSTER_7,CLUSTER_5
tree_two,"sklearn.tree.DecisionTreeClassifier(max_depth=4,min_samples_leaf=2)",CLUSTER_7,CLUSTER_5
tree_three,"sklearn.tree.DecisionTreeClassifier(max_depth=1,min_samples_leaf=5)",CLUSTER_7,CLUSTER_5
tree_four,"sklearn.tree.DecisionTreeClassifier(max_depth=5,min_samples_leaf=1)",CLUSTER_7,CLUSTER_5
tree_five,"sklearn.tree.DecisionTreeClassifier(max_depth=6,min_samples_leaf=6)",CLUSTER_7,CLUSTER_5
tree,"sklearn.tree.DecisionTreeClassifier(max_depth=4,min_samples_leaf=2)",CLUSTER_7,CLUSTER_5
le_one,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le_second,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
lr,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_7,CLUSTER_5
report,"sklearn.metrics.classification_report(y_test,lr.predict(X_test)",CLUSTER_7,CLUSTER_5
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,lr.predict_proba(X_test)",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,lr.predict(X_test)",CLUSTER_7,CLUSTER_5
r,requests.get(url),CLUSTER_0,CLUSTER_8
requested_page,requests.get(request_url),CLUSTER_0,CLUSTER_8
requested_page_1,requests.get(urls_to_scrape[category_articles_url]),CLUSTER_0,CLUSTER_8
requested_page_2,requests.get(tag_1['href']),CLUSTER_0,CLUSTER_8
match,re.compile('\.(pdf),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(couple_dist.ravel(),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(couple_dist.ravel(),CLUSTER_0,CLUSTER_8
datasetObj,pandas.DataFrame(),CLUSTER_0,CLUSTER_8
df_information,"pandas.DataFrame(
{'Category':[category],'Title':[str(title)",CLUSTER_0,CLUSTER_8
df,"pandas.DataFrame({'Datedepublication':data_propre['Date'][indices].values,
'Titre':data_propre['Title'][indices].values,
'Lien':data_propre['Lien'][indices].values,
""Similitudeeuclidienneavecl'articleinterrogé"":couple_dist[indices].ravel()",CLUSTER_0,CLUSTER_8
df,"pandas.DataFrame({'Datedepublication':data_propre['Date'][indices].values,
'Titre':data_propre['Title'][indices].values,
'Lien':data_propre['Lien'][indices].values,
""Similitudeeuclidienneavecl'articleinterrogé"":couple_dist[indices].ravel()",CLUSTER_0,CLUSTER_8
result_bayes,"pandas.DataFrame({'true_labels':y_test,'predicted_labels':predicted_bayes})",CLUSTER_0,CLUSTER_8
result_softmax,"pandas.DataFrame({'true_labels':y_test,'predicted_labels':predicted_nn})",CLUSTER_0,CLUSTER_8
result_svm,"pandas.DataFrame({'true_labels':y_test,'predicted_labels':predicted_svm})",CLUSTER_0,CLUSTER_8
merged,pandas.concat(list_content),CLUSTER_0,CLUSTER_8
data,"pandas.read_csv('train_data_recommendation.csv',sep="";"")",CLUSTER_0,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_train_tfidf,data_propre.Category,test_size=0.25,random_state=42)",CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_train_tfidf,data_propre.Category,test_size=0.25,random_state=42)",CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_train_tfidf,data_propre.Category,test_size=0.25,random_state=42)",CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_train_tfidf,data_propre.Category,test_size=0.25,random_state=42)",CLUSTER_0,CLUSTER_8
clf_neural,"sklearn.neural_network.MLPClassifier(solver='lbfgs',alpha=1e-5,hidden_layer_sizes=(15,)",CLUSTER_0,CLUSTER_8
clf_svm,sklearn.svm.LinearSVC(),CLUSTER_0,CLUSTER_8
couple_dist,"sklearn.metrics.pairwise_distances(headline_features,headline_features[row_index])",CLUSTER_0,CLUSTER_8
couple_dist,"sklearn.metrics.pairwise_distances(tfidf_headline_features,tfidf_headline_features[row_index])",CLUSTER_0,CLUSTER_8
df,"pandas.read_csv('../../data/medium_posts.csv.zip',sep='\t')",CLUSTER_7,CLUSTER_9
df['published'],pandas.to_datetime(df['published']),CLUSTER_7,CLUSTER_9
"train_df2['y'],lambda_prophet",scipy.stats.boxcox(train_df2['y']),CLUSTER_7,CLUSTER_9
y,"numpy.array([self.class_to_index_[label]
forlabeliny],dtype=np.int32)",CLUSTER_4,CLUSTER_7
class_indices,numpy.argmax(self.predict_proba(X),CLUSTER_4,CLUSTER_7
means,"numpy.mean(Z,axis=1)",CLUSTER_4,CLUSTER_7
stds,"numpy.std(Z,axis=1)",CLUSTER_4,CLUSTER_7
W,"np.random.normal(size=(100,100),scale=numpy.sqrt(1/100)",CLUSTER_4,CLUSTER_7
z,"numpy.linspace(-5,5,200)",CLUSTER_4,CLUSTER_7
hidden2_batches,"numpy.array_split(h2_cache[shuffled_idx],n_batches)",CLUSTER_4,CLUSTER_7
y_batches,"numpy.array_split(mnist.train.labels[shuffled_idx],n_batches)",CLUSTER_4,CLUSTER_7
self.classes_,numpy.unique(y),CLUSTER_4,CLUSTER_7
rnd_search,sklearn.model_selection.RandomizedSearchCV(DNNClassifier(random_state=42),CLUSTER_4,CLUSTER_7
rnd_search_bn,sklearn.model_selection.RandomizedSearchCV(DNNClassifier(random_state=42),CLUSTER_4,CLUSTER_7
rnd_search_dropout,sklearn.model_selection.RandomizedSearchCV(DNNClassifier(random_state=42),CLUSTER_4,CLUSTER_7
t0,time.time(),CLUSTER_4,CLUSTER_7
t1,time.time(),CLUSTER_4,CLUSTER_7
t0,time.time(),CLUSTER_4,CLUSTER_7
t1,time.time(),CLUSTER_4,CLUSTER_7
df_died,"pandas.DataFrame([df_survived['age_bucket'],1-df_survived['percentage']])",CLUSTER_1,CLUSTER_3
df_died,"pandas.DataFrame([df_survived['Sex'],1-df_survived['percentage']])",CLUSTER_1,CLUSTER_3
df,"pandas.concat([df_survived,df_died])",CLUSTER_1,CLUSTER_3
df,"pandas.concat([df_survived,df_died])",CLUSTER_1,CLUSTER_3
test_df,pandas.read_csv('/content/drive/MyDrive/Berlin/ReDI/P2-DataAnalyticswithPython/Berlin/WS2019/Titanic_study/titanic_dataset/test.csv'),CLUSTER_1,CLUSTER_3
train_df,pandas.read_csv('/content/drive/MyDrive/Berlin/ReDI/P2-DataAnalyticswithPython/Berlin/WS2019/train.csv'),CLUSTER_1,CLUSTER_3
gender_df,pandas.read_csv('/content/drive/MyDrive/Berlin/ReDI/P2-DataAnalyticswithPython/Berlin/WS2019/Titanic_study/titanic_dataset/gender_submission.csv'),CLUSTER_1,CLUSTER_3
index,numpy.arange(7),CLUSTER_1,CLUSTER_3
index,numpy.arange(2),CLUSTER_1,CLUSTER_3
list_below,numpy.zeros(7),CLUSTER_1,CLUSTER_3
list_below,numpy.zeros(2),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,7)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,2)",CLUSTER_1,CLUSTER_3
energy_array,numpy.asarray(energies[0]),CLUSTER_3,CLUSTER_6
en_bin_bound,numpy.mean(energies[prev_ind+amt-1:prev_ind+amt+1]),CLUSTER_3,CLUSTER_6
energies,"numpy.append(energies,energies[-1])",CLUSTER_3,CLUSTER_6
energy_array,"numpy.append(energy_array,en_bin_bound)",CLUSTER_3,CLUSTER_6
ec_table,numpy.loadtxt(ec_table_file),CLUSTER_3,CLUSTER_6
chan_bin_table,numpy.loadtxt(chan_bin_file),CLUSTER_3,CLUSTER_6
f_os,"os.popen(""file2.txt"",""w"")",CLUSTER_10,CLUSTER_4
f_os,"os.popen(""file2.txt"",""w"")",CLUSTER_10,CLUSTER_4
f_os,"os.popen(""file2.txt"",""w"")",CLUSTER_10,CLUSTER_4
temp,"pandas.merge(mean_df,mode_df,how='left',on=['SaleCondition'])",CLUSTER_5,CLUSTER_1
temp,"pandas.merge(temp,median_df,how='left',on=['SaleCondition'])",CLUSTER_5,CLUSTER_1
temp,"pandas.merge(temp,max_df,how='left',on=['SaleCondition'])",CLUSTER_5,CLUSTER_1
df,"pandas.merge(df,temp,how='left',on=['SaleCondition'])",CLUSTER_5,CLUSTER_1
df,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_5,CLUSTER_1
train_Y,numpy.log1p(df['SalePrice']),CLUSTER_5,CLUSTER_1
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
estimator,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame({'A':[""a"",""b"",""a"",""c"",""a""]})",CLUSTER_7,CLUSTER_3
loan_master,"pandas.read_csv(""loan.csv"",low_memory=False)",CLUSTER_7,CLUSTER_3
flu,"pandas.read_csv('flu.csv',index_col='Date',parse_dates=True)",CLUSTER_11,CLUSTER_12
start,"datetime.datetime(2004,1,1)",CLUSTER_11,CLUSTER_12
end,"datetime.datetime(2016,8,6)",CLUSTER_11,CLUSTER_12
"fig,axes","matplotlib.pyplot.subplots(1,11,figsize=(25,5)",CLUSTER_4,CLUSTER_7
start,time.time(),CLUSTER_9,CLUSTER_2
end,time.time(),CLUSTER_9,CLUSTER_2
eda_sorted_df['DayofWeek'],pandas.Series(day_of_week),CLUSTER_9,CLUSTER_2
eda_df,pandas.read_csv('first150.csv'),CLUSTER_9,CLUSTER_2
file_combined_df,pandas.read_csv('file_combined.csv'),CLUSTER_9,CLUSTER_2
unique_list_thread_title,numpy.unique(eda_sorted_df['thread_title']),CLUSTER_9,CLUSTER_2
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_9,CLUSTER_2
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_9,CLUSTER_2
x,"datetime.datetime.combine(datetime.date(2008,6,23)",CLUSTER_9,CLUSTER_2
datetime_object,datetime.datetime.now(),CLUSTER_9,CLUSTER_2
post_freq_2,"datetime.datetime.strptime(date,""%d-%m-%Y,%I:%M%p"")",CLUSTER_9,CLUSTER_2
a,"numpy.asarray([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,1]])",CLUSTER_2,CLUSTER_7
xmat,"numpy.zeros((x.shape[0],num_steps,feat_len)",CLUSTER_2,CLUSTER_7
ymat,"numpy.zeros((x.shape[0],feat_len)",CLUSTER_2,CLUSTER_7
y1_tf,"numpy.reshape(y,(batch_size,num_steps,1)",CLUSTER_2,CLUSTER_7
mnist,"scipy.io.loadmat(""./mnist/mnist-original.mat"")",CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=666)",CLUSTER_5,CLUSTER_9
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_9
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_9
pca,sklearn.decomposition.PCA(0.95),CLUSTER_5,CLUSTER_9
rf_clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_5,CLUSTER_9
df_merged,pandas.concat(frames),CLUSTER_7,CLUSTER_5
df_with_keys,"pandas.concat(frames,keys=keys)",CLUSTER_7,CLUSTER_5
df1,"pandas.read_csv(""Youtube01-Psy.csv"")",CLUSTER_7,CLUSTER_5
df2,"pandas.read_csv(""Youtube02-KatyPerry.csv"")",CLUSTER_7,CLUSTER_5
df3,"pandas.read_csv(""Youtube03-LMFAO.csv"")",CLUSTER_7,CLUSTER_5
df4,"pandas.read_csv(""Youtube04-Eminem.csv"")",CLUSTER_7,CLUSTER_5
df5,"pandas.read_csv(""Youtube05-Shakira.csv"")",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,df_y,test_size=0.33)",CLUSTER_7,CLUSTER_5
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_5
t_start,time.time(),CLUSTER_3,CLUSTER_6
"t2,aem2","nic.get_photon_data_arr(h5file,spots=numpy.arange(48)",CLUSTER_3,CLUSTER_6
d,numpy.diff(tx[:]),CLUSTER_3,CLUSTER_6
d,numpy.diff(tx[:]),CLUSTER_3,CLUSTER_6
xy_data,"collections.namedtuple(""xy_data"",""xyxuyu"")",CLUSTER_4,CLUSTER_11
reso_fit_data,"collections.namedtuple(""reso_fit_data"",""xyresidualsfR"")",CLUSTER_4,CLUSTER_11
_,"matplotlib.pyplot.plot([-100,100],[-100,100])",CLUSTER_7,CLUSTER_3
_,"matplotlib.pyplot.ylabel(""Count"")",CLUSTER_7,CLUSTER_3
hist,pandas.DataFrame(history.history),CLUSTER_7,CLUSTER_3
hist,pandas.DataFrame(history.history),CLUSTER_7,CLUSTER_3
raw_dataset,"pandas.read_csv(dataset_path,names=column_names,
na_values=""?"",comment='\t',
sep="""",skipinitialspace=True)",CLUSTER_7,CLUSTER_3
cur_w,"numpy.zeros([784,500],np.float32)",CLUSTER_2,CLUSTER_7
cur_vb,"numpy.zeros([784],np.float32)",CLUSTER_2,CLUSTER_7
cur_hb,"numpy.zeros([500],np.float32)",CLUSTER_2,CLUSTER_7
prv_w,"numpy.zeros([784,500],np.float32)",CLUSTER_2,CLUSTER_7
prv_vb,"numpy.zeros([784],np.float32)",CLUSTER_2,CLUSTER_7
prv_hb,"numpy.zeros([500],np.float32)",CLUSTER_2,CLUSTER_7
imgplot,matplotlib.pyplot.imshow(image),CLUSTER_2,CLUSTER_7
imgplot,matplotlib.pyplot.imshow(image),CLUSTER_2,CLUSTER_7
imgplot,matplotlib.pyplot.imshow(img),CLUSTER_2,CLUSTER_7
imgplot,matplotlib.pyplot.imshow(img),CLUSTER_2,CLUSTER_7
tick_marks,numpy.arange(len(classes),CLUSTER_4,CLUSTER_11
y,numpy.array(y),CLUSTER_4,CLUSTER_11
encoding,numpy.zeros((len(x),CLUSTER_4,CLUSTER_11
encoding,numpy.zeros((len(x),CLUSTER_4,CLUSTER_11
idx_others,numpy.where(y==0),CLUSTER_4,CLUSTER_11
"categories,category_counts","numpy.unique(y,return_counts=True)",CLUSTER_4,CLUSTER_11
"categories_train,category_counts_train","numpy.unique(y_train,return_counts=True)",CLUSTER_4,CLUSTER_11
"categories_t,category_counts_t","numpy.unique(test_y,return_counts=True)",CLUSTER_4,CLUSTER_11
x1_vec,numpy.load('../../dm_emb/deepmoji_train_x1.npy'),CLUSTER_4,CLUSTER_11
x2_vec,numpy.load('../../dm_emb/deepmoji_train_x2.npy'),CLUSTER_4,CLUSTER_11
x3_vec,numpy.load('../../dm_emb/deepmoji_train_x3.npy'),CLUSTER_4,CLUSTER_11
test_x1_vec,numpy.load('../../dm_emb/deepmoji_test_x1.npy'),CLUSTER_4,CLUSTER_11
test_x2_vec,numpy.load('../../dm_emb/deepmoji_test_x2.npy'),CLUSTER_4,CLUSTER_11
test_x3_vec,numpy.load('../../dm_emb/deepmoji_test_x3.npy'),CLUSTER_4,CLUSTER_11
data,"pandas.read_csv('../../deepmoji/data/train.txt',sep='\t')",CLUSTER_4,CLUSTER_11
test_data,"pandas.read_csv('../../deepmoji/data/test.txt',sep='\t')",CLUSTER_4,CLUSTER_11
vocabulary,json.load(f),CLUSTER_4,CLUSTER_11
vocabulary,json.load(f),CLUSTER_4,CLUSTER_11
mc_svm_ovo,"sklearn.svm.SVC(decision_function_shape='ovo',kernel='linear',C=100)",CLUSTER_4,CLUSTER_11
mc_svm_ovo,"sklearn.svm.SVC(decision_function_shape='ovo',kernel='linear',C=100)",CLUSTER_4,CLUSTER_11
mc_svm_ovr,"sklearn.svm.SVC(decision_function_shape='ovr',kernel='linear',C=100)",CLUSTER_4,CLUSTER_11
mc_svm_ovr,"sklearn.svm.SVC(decision_function_shape='ovr',kernel='linear',C=100)",CLUSTER_4,CLUSTER_11
LR,"sklearn.pipeline.Pipeline([('scaler',MinMaxScaler()",CLUSTER_4,CLUSTER_11
mc_nb,"sklearn.pipeline.Pipeline([('scaler',MinMaxScaler()",CLUSTER_4,CLUSTER_11
mc_nb,"sklearn.pipeline.Pipeline([('clf',MultinomialNB()",CLUSTER_4,CLUSTER_11
LR,sklearn.linear_model.LogisticRegression(random_state=0),CLUSTER_4,CLUSTER_11
LR,sklearn.linear_model.LogisticRegression(random_state=0),CLUSTER_4,CLUSTER_11
nml_models,pandas.DataFrame(nml_models),CLUSTER_5,CLUSTER_9
df,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
prop_r,"numpy.array([stats.pearsonr(X[i],df[col])",CLUSTER_5,CLUSTER_9
trans,numpy.sign(df[col]),CLUSTER_5,CLUSTER_9
dist,"numpy.apply_along_axis(euclidean,1,X,center)",CLUSTER_5,CLUSTER_9
dist,"numpy.apply_along_axis(euclidean,1,pca_centers,X_w_noise.ix[model][:-2])",CLUSTER_5,CLUSTER_9
labels,numpy.unique(cluster.labels_),CLUSTER_5,CLUSTER_9
labels,numpy.unique(cluster.labels_),CLUSTER_5,CLUSTER_9
x,"pandas.DataFrame(x,columns=prop_names)",CLUSTER_5,CLUSTER_9
principalDf,pandas.DataFrame(data=principalComponents),CLUSTER_5,CLUSTER_9
clusterer,sklearn.cluster.KMeans(n_clusters=n_clusters),CLUSTER_5,CLUSTER_9
cluster,"sklearn.cluster.KMeans(n_clusters=kmeans_n_clusters,random_state=1)",CLUSTER_5,CLUSTER_9
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_9
sample_silhouette_values,"sklearn.metrics.silhouette_samples(X,cluster_labels)",CLUSTER_5,CLUSTER_9
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels)",CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,10)",CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,10)",CLUSTER_5,CLUSTER_9
pca,"sklearn.decomposition.PCA(svd_solver='full',n_components=0.95)",CLUSTER_5,CLUSTER_9
X,numpy.array(column_original),CLUSTER_4,CLUSTER_11
y,numpy.array(column_repeated),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
linear_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
r2,"sklearn.metrics.r2_score(column_original,column_repeated)",CLUSTER_4,CLUSTER_11
r2,"sklearn.metrics.r2_score(y,y_pred)",CLUSTER_4,CLUSTER_11
df_back_rate,"pandas.DataFrame(result,columns=['promotion','back_rate'])",CLUSTER_7,CLUSTER_8
df_mean_gmv,"pandas.DataFrame(result,columns=['promotion','mean_gmv'])",CLUSTER_7,CLUSTER_8
df_result,"pandas.DataFrame(result,columns=['column','val','promotion_id','transaction_cnt','back_rate','mean_gmv'])",CLUSTER_7,CLUSTER_8
df_full_age,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_full_gender,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_full_member_duration_days,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_customer_transaction,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
feat_importances,"pandas.Series(rfr.feature_importances_,index=X_train.columns)",CLUSTER_7,CLUSTER_8
data,"pandas.get_dummies(data,columns=['gender','offer_type'])",CLUSTER_7,CLUSTER_8
df_transaction_with_profile,"pandas.merge(df_transaction,profile,how='left',on=['customer_id'])",CLUSTER_7,CLUSTER_8
df_full_age_with_portfolio,"pandas.merge(df_full_age,portfolio,how='left',on=['promotion_id'])",CLUSTER_7,CLUSTER_8
df_full_gender,"pandas.merge(df_full_gender,portfolio,how='left',on=['promotion_id'])",CLUSTER_7,CLUSTER_8
df_full_member_duration_days_with_portfolio,"pandas.merge(df_full_member_duration_days,portfolio,how='left',on=['promotion_id'])",CLUSTER_7,CLUSTER_8
df_all,"pandas.merge(df_received_info,profile,how='left',on=['customer_id'])",CLUSTER_7,CLUSTER_8
df_all,"pandas.merge(df_all,portfolio,how='left',on=['promotion_id'])",CLUSTER_7,CLUSTER_8
df_all,"pandas.merge(df_all,df_received_info,how='left',on=['customer_id','promotion_id'])",CLUSTER_7,CLUSTER_8
df_all,"pandas.merge(df_all,df_received_cnt,how='left',on=['customer_id','promotion_id'])",CLUSTER_7,CLUSTER_8
df_all,"pandas.merge(df_all,df_viewed_cnt,how='left',on=['customer_id','promotion_id'])",CLUSTER_7,CLUSTER_8
df_all,"pandas.merge(df_all,df_customer_transaction,how='left',on=['customer_id'])",CLUSTER_7,CLUSTER_8
portfolio,"pandas.read_json('data/portfolio.json',orient='records',lines=True)",CLUSTER_7,CLUSTER_8
profile,"pandas.read_json('data/profile.json',orient='records',lines=True)",CLUSTER_7,CLUSTER_8
transcript,"pandas.read_json('data/transcript.json',orient='records',lines=True)",CLUSTER_7,CLUSTER_8
profile['became_member_on'],pandas.to_datetime(profile['became_member_on']),CLUSTER_7,CLUSTER_8
profile['age'],"numpy.where(profile['age']==118,median_age,profile['age'])",CLUSTER_7,CLUSTER_8
y,numpy.expm1(y.get_label(),CLUSTER_7,CLUSTER_8
yhat,numpy.expm1(yhat),CLUSTER_7,CLUSTER_8
y_train_scaled,numpy.log1p(y_train),CLUSTER_7,CLUSTER_8
y_test_scaled,numpy.log1p(y_test),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_7,CLUSTER_8
g1,"seaborn.distplot(data['consumption_amount'],hist=True,label='skewness:{:.2f}'.format(data['consumption_amount'].skew()",CLUSTER_7,CLUSTER_8
g2,seaborn.distplot(np.log1p(data['consumption_amount']),CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""age"",y=""transaction_cnt"",
hue=""offer_type"",
data=df_full_age_with_portfolio)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""age"",y=""back_rate"",
hue=""offer_type"",
data=df_full_age_with_portfolio)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""age"",y=""mean_gmv"",
hue=""offer_type"",
data=df_full_age_with_portfolio)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""gender"",y=""transaction_cnt"",
hue=""offer_type"",
data=df_full_gender)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""gender"",y=""back_rate"",
hue=""offer_type"",
data=df_full_gender)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""gender"",y=""mean_gmv"",
hue=""offer_type"",
data=df_full_gender)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""member_duration_days"",y=""transaction_cnt"",
hue=""offer_type"",
data=df_full_member_duration_days_with_portfolio)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""member_duration_days"",y=""back_rate"",
hue=""offer_type"",
data=df_full_member_duration_days_with_portfolio)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""member_duration_days"",y=""mean_gmv"",
hue=""offer_type"",
data=df_full_member_duration_days_with_portfolio)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
rfr,sklearn.ensemble.RandomForestRegressor(n_estimators=15),CLUSTER_7,CLUSTER_8
score,sklearn.metrics.r2_score(np.expm1(y_test_scaled),CLUSTER_7,CLUSTER_8
score,sklearn.metrics.r2_score(np.expm1(y_test_scaled),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
table,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
ax,seaborn.PairGrid(stock_rets),CLUSTER_7,CLUSTER_8
ax,"seaborn.pairplot(stock_rets,diag_kind='hist')",CLUSTER_7,CLUSTER_8
d1,"datetime.datetime.strptime(start,""%Y-%m-%d"")",CLUSTER_7,CLUSTER_8
d2,"datetime.datetime.strptime(end,""%Y-%m-%d"")",CLUSTER_7,CLUSTER_8
m,sklearn.ensemble.RandomForestRegressor(n_jobs=-1),CLUSTER_12,CLUSTER_4
m,sklearn.ensemble.RandomForestRegressor(n_jobs=-1),CLUSTER_12,CLUSTER_4
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=2000,min_samples_leaf=1,max_features=0.3,n_jobs=-1,oob_score=True)",CLUSTER_12,CLUSTER_4
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=2000,max_features=0.3,n_jobs=-1,oob_score=True)",CLUSTER_12,CLUSTER_4
rforest,"sklearn.ensemble.RandomForestRegressor(n_estimators=2000,max_features=0.3,n_jobs=-1,oob_score=True)",CLUSTER_12,CLUSTER_4
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=10)",CLUSTER_12,CLUSTER_4
content_text,re.sub(r'\([^),CLUSTER_10,CLUSTER_4
tokens,"re.sub(r""[^a-z0-9]+"","""",string.lower()",CLUSTER_10,CLUSTER_4
curent_path,os.getcwd(),CLUSTER_10,CLUSTER_4
output,"pandas.concat([df,dfswap])",CLUSTER_7,CLUSTER_5
tourney_data,"pandas.merge(tourney_data,season_statistics_T1,on=['Season','T1_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
tourney_data,"pandas.merge(tourney_data,season_statistics_T2,on=['Season','T2_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
tourney_data,"pandas.merge(tourney_data,rank_T1,on=['Season','T1_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
tourney_data,"pandas.merge(tourney_data,rank_T2,on=['Season','T2_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
sub,"pandas.merge(sub,season_statistics_T1,on=['Season','T1_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
sub,"pandas.merge(sub,season_statistics_T2,on=['Season','T2_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
sub,"pandas.merge(sub,rank_T1,on=['Season','T1_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
sub,"pandas.merge(sub,rank_T2,on=['Season','T2_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
tourney_results,"pandas.read_csv(os.path.join(data_folder,sub_folder,'{}NCAATourneyDetailedResults.csv'.format(gender)",CLUSTER_7,CLUSTER_5
regular_results,"pandas.read_csv(os.path.join(data_folder,sub_folder,'{}RegularSeasonDetailedResults.csv'.format(gender)",CLUSTER_7,CLUSTER_5
rank,"pandas.read_csv(os.path.join(data_folder,sub_folder,'{}MasseyOrdinals.csv'.format(gender)",CLUSTER_7,CLUSTER_5
sub,"pandas.read_csv(os.path.join(data_folder,'{}SampleSubmissionStage{}_{}.csv'.format(gender,stage,year)",CLUSTER_7,CLUSTER_5
r,"numpy.where(y>0,0,1)",CLUSTER_7,CLUSTER_5
rmask,"numpy.where(y[mask]>0,0,1)",CLUSTER_7,CLUSTER_5
clf,"sklearn.linear_model.LogisticRegression(solver='liblinear',C=10000)",CLUSTER_7,CLUSTER_5
clf,"sklearn.linear_model.LogisticRegression(solver='liblinear',C=10000)",CLUSTER_7,CLUSTER_5
clf,"sklearn.linear_model.LogisticRegression(solver='liblinear',C=10000)",CLUSTER_7,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=cross_validation_fold,shuffle=True,random_state=42)",CLUSTER_7,CLUSTER_5
positive_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
negative_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
total_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
pos_neg_ratios,collections.Counter(),CLUSTER_12,CLUSTER_6
review_counter,collections.Counter(),CLUSTER_12,CLUSTER_6
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
layer_0,numpy.zeros(10),CLUSTER_12,CLUSTER_6
layer_1,numpy.zeros(5),CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
self.layer_1,"numpy.zeros((1,hidden_nodes)",CLUSTER_12,CLUSTER_6
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
boston_dataset,sklearn.datasets.load_boston(),CLUSTER_7,CLUSTER_5
boston_data,"pandas.DataFrame(boston_dataset.data,columns=boston_dataset.feature_names)",CLUSTER_7,CLUSTER_5
g,"seaborn.jointplot(""MEDV"",""LSTAT"",data=boston_data,xlim=(0,60)",CLUSTER_7,CLUSTER_5
g,"seaborn.stripplot(x=""CHAS"",y=""MEDV"",data=boston_data,jitter=True)",CLUSTER_7,CLUSTER_5
arr,"numpy.array([iforiinrange(1,20)",CLUSTER_7,CLUSTER_3
arr,numpy.array(my_list),CLUSTER_7,CLUSTER_3
a,"numpy.ones([2,2])",CLUSTER_7,CLUSTER_3
b,"numpy.ones([2,2])",CLUSTER_7,CLUSTER_3
x,"numpy.linspace(0,5,11)",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(5,4)",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame({'col1':[1,2,3,4],
'col2':[444,555,666,444],
'col3':['abc','def','ghi','xyz']})",CLUSTER_7,CLUSTER_3
tips,"seaborn.load_dataset(""tips"")",CLUSTER_7,CLUSTER_3
flights,"seaborn.load_dataset(""flights"")",CLUSTER_7,CLUSTER_3
train_set,"pandas.read_csv(""/Users/peterhoang/Downloads/Ubiqum/UJIndoorLoc/trainingData.csv"")",CLUSTER_7,CLUSTER_5
test_set,"pandas.read_csv(""/Users/peterhoang/Downloads/Ubiqum/UJIndoorLoc/validationData.csv"")",CLUSTER_7,CLUSTER_5
"train_set_copy.iloc[:,0:520]","numpy.where(train_set_copy.iloc[:,0:520]<=0,
train_set_copy.iloc[:,0:520]+105,
train_set_copy.iloc[:,0:520]-100)",CLUSTER_7,CLUSTER_5
"test_set_copy.iloc[:,0:520]","numpy.where(test_set_copy.iloc[:,0:520]<=0,
test_set_copy.iloc[:,0:520]+105,
test_set_copy.iloc[:,0:520]-100)",CLUSTER_7,CLUSTER_5
KNN_error,"math.sqrt(mean_squared_error(y_test,pred_K)",CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=5),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=i),CLUSTER_7,CLUSTER_5
KNN,sklearn.neighbors.KNeighborsRegressor(n_neighbors=K),CLUSTER_7,CLUSTER_5
KNN_r2,"sklearn.metrics.r2_score(y_test,pred_K)",CLUSTER_7,CLUSTER_5
dtree,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_5
rfc,sklearn.ensemble.RandomForestRegressor(n_estimators=200),CLUSTER_7,CLUSTER_5
svm,sklearn.svm.SVR(),CLUSTER_7,CLUSTER_5
MLP,sklearn.neural_network.MLPRegressor(),CLUSTER_7,CLUSTER_5
wheat,"pandas.read_csv(""./Datasets/wheat.data"")",CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
imagem_filtrada,"scipy.signal.correlate2d(nova_imagem,mascara,mode='same')",CLUSTER_1,CLUSTER_9
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
new_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_6,CLUSTER_11
count_labels,numpy.zeros((num_classes),CLUSTER_6,CLUSTER_11
"x,y",numpy.where(img==key),CLUSTER_6,CLUSTER_11
corr_arr,numpy.zeros_like(pred_arr),CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
iou,numpy.mean(np.sum(intersection),CLUSTER_6,CLUSTER_11
intersection,"numpy.bitwise_and(out_labels_np,gt_res_img)",CLUSTER_6,CLUSTER_11
union,"numpy.bitwise_or(out_labels_np,gt_res_img)",CLUSTER_6,CLUSTER_11
valid_keys,numpy.unique(img),CLUSTER_6,CLUSTER_11
un_labs,numpy.unique(gt_lab),CLUSTER_6,CLUSTER_11
startTime_for_tictoc,time.time(),CLUSTER_6,CLUSTER_11
X_train,"os.listdir(os.path.join(colpath,'train')",CLUSTER_6,CLUSTER_11
Y_train,"os.listdir(os.path.join(segpath,'train')",CLUSTER_6,CLUSTER_11
X_val,"os.listdir(os.path.join(colpath,'val')",CLUSTER_6,CLUSTER_11
Y_val,"os.listdir(os.path.join(segpath,'val')",CLUSTER_6,CLUSTER_11
X_test,"os.listdir(os.path.join(colpath,'test')",CLUSTER_6,CLUSTER_11
Y_test,"os.listdir(os.path.join(segpath,'test')",CLUSTER_6,CLUSTER_11
all_labels,os.listdir(dataPath),CLUSTER_6,CLUSTER_11
all_imgs,"os.listdir(os.path.join(root,orig_Dir)",CLUSTER_6,CLUSTER_11
all_test_imgs,"os.listdir(os.path.join(colpath,'test')",CLUSTER_6,CLUSTER_11
id_to_color_map,json.load(f),CLUSTER_6,CLUSTER_11
students,"numpy.array([1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0])",CLUSTER_1,CLUSTER_10
df,"pandas.read_excel(DATA_PATH+""rawdata/Послойноеописаниесфотографиями.xlsx"")",CLUSTER_4,CLUSTER_11
"sns.heatmap(corr,cmap","seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_11
"fig,axs","matplotlib.pyplot.subplots(y_len,x_len,figsize=(20,40)",CLUSTER_4,CLUSTER_11
"fig,axs","matplotlib.pyplot.subplots(y_len,x_len,figsize=(15,33)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(y_len,x_len,figsize=(2,80)",CLUSTER_4,CLUSTER_11
images_paths,os.listdir(IMAGES_PATH),CLUSTER_4,CLUSTER_11
label_vals,numpy.unique(example_labels),CLUSTER_4,CLUSTER_0
df_train,"pandas.read_csv(os.path.join(competition_name,'train_masks.csv')",CLUSTER_4,CLUSTER_0
df_Acc,"pandas.DataFrame([acc_train,acc_test])",CLUSTER_5,CLUSTER_5
dataframe,"pandas.read_csv(filename,header=-1)",CLUSTER_5,CLUSTER_5
err_t,"numpy.dot(D_t,indicator_1_0)",CLUSTER_5,CLUSTER_5
D_t,numpy.ones(n_train),CLUSTER_5,CLUSTER_5
D_t,"numpy.multiply(D_t,np.exp([-alpha_t*float(yhx_i)",CLUSTER_5,CLUSTER_5
"pred_train,pred_test",numpy.sign(pred_train),CLUSTER_5,CLUSTER_5
clf_tree,"sklearn.tree.DecisionTreeClassifier(max_depth=1,random_state=1)",CLUSTER_5,CLUSTER_5
"train_set,test_set","sklearn.model_selection.train_test_split(dataframe,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame({'X_train':X_train.shape[0],'X_valid':X_valid.shape[0],'X_test':X_test.shape[0]},index=['Taille'])",CLUSTER_4,CLUSTER_11
df2,pandas.DataFrame({'drama':str(int(data[0]*100),CLUSTER_4,CLUSTER_11
df3,pandas.DataFrame({'mystery':str(int(data[7]*100),CLUSTER_4,CLUSTER_11
df,"pandas.DataFrame(y_train,columns=list_genres)",CLUSTER_4,CLUSTER_11
indices,numpy.arange(len(results),CLUSTER_4,CLUSTER_11
scores,numpy.array(scores),CLUSTER_4,CLUSTER_11
y_pred,numpy.zeros(y_train.shape),CLUSTER_4,CLUSTER_11
y_pred,numpy.zeros(y_train.shape),CLUSTER_4,CLUSTER_11
"y_pred[:,i]",numpy.ones(y_pred.shape[0]),CLUSTER_4,CLUSTER_11
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_4,CLUSTER_11
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_4,CLUSTER_11
selected_features,"numpy.mean(selected_features,axis=0)",CLUSTER_4,CLUSTER_11
selected_features,"numpy.mean(selected_features,axis=0)",CLUSTER_4,CLUSTER_11
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_4,CLUSTER_11
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_4,CLUSTER_11
"train_sizes,train_scores,test_scores","learning_curve(clf,X_train,y_train,cv=5,scoring='f1_weighted',train_sizes=numpy.linspace(0.1,1.0,10)",CLUSTER_4,CLUSTER_11
t0,time.time(),CLUSTER_4,CLUSTER_11
test_time,time.time(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_4,CLUSTER_11
f1_micro,"sklearn.metrics.f1_score(y_train,y_pred,average=""micro"")",CLUSTER_4,CLUSTER_11
f1_macro,"sklearn.metrics.f1_score(y_train,y_pred,average=""macro"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_train,y_pred,average=""weighted"")",CLUSTER_4,CLUSTER_11
f1_samples,"sklearn.metrics.f1_score(y_train,y_pred,average=""samples"")",CLUSTER_4,CLUSTER_11
f1_micro,"sklearn.metrics.f1_score(y_train,y_pred,average=""micro"")",CLUSTER_4,CLUSTER_11
f1_macro,"sklearn.metrics.f1_score(y_train,y_pred,average=""macro"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_train,y_pred,average=""weighted"")",CLUSTER_4,CLUSTER_11
f1_samples,"sklearn.metrics.f1_score(y_train,y_pred,average=""samples"")",CLUSTER_4,CLUSTER_11
f1_micro,"sklearn.metrics.f1_score(y_valid,pred,average=""micro"")",CLUSTER_4,CLUSTER_11
f1_macro,"sklearn.metrics.f1_score(y_valid,pred,average=""macro"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_valid,pred,average=""weighted"")",CLUSTER_4,CLUSTER_11
f1_samples,"sklearn.metrics.f1_score(y_valid,pred,average=""samples"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_sub_test,y_pred,average=""binary"")",CLUSTER_4,CLUSTER_11
f1,"sklearn.metrics.f1_score(y_valid[:,i],pred,average=""binary"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_valid,pred,average=""weighted"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_valid,pred,average=""weighted"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_valid,pred,average=""weighted"")",CLUSTER_4,CLUSTER_11
clf,sklearn.naive_bayes.BernoulliNB(alpha=0.005),CLUSTER_4,CLUSTER_11
clf,sklearn.naive_bayes.BernoulliNB(alpha=0.005),CLUSTER_4,CLUSTER_11
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(clf,X_train,y_train,cv=5,scoring='f1_weighted',train_sizes=np.linspace(0.1,1.0,10)",CLUSTER_4,CLUSTER_11
selector,"sklearn.feature_selection.SelectKBest(chi2,k='all')",CLUSTER_4,CLUSTER_11
selector,"sklearn.feature_selection.SelectKBest(chi2,k='all')",CLUSTER_4,CLUSTER_11
x,numpy.arange(9),CLUSTER_7,CLUSTER_3
x,numpy.arange(5),CLUSTER_7,CLUSTER_3
x,"numpy.arange(1,6)",CLUSTER_7,CLUSTER_3
heights,numpy.array(data['height(cm),CLUSTER_7,CLUSTER_3
y,numpy.zeros(10),CLUSTER_7,CLUSTER_3
y,numpy.zeros(10),CLUSTER_7,CLUSTER_3
output,numpy.empty(len(values),CLUSTER_7,CLUSTER_3
z,numpy.empty(5),CLUSTER_7,CLUSTER_3
theta,"numpy.linspace(0,np.pi,3)",CLUSTER_7,CLUSTER_3
data,pandas.read_csv('president_heights.csv'),CLUSTER_7,CLUSTER_3
prediction,numpy.array(predictions),CLUSTER_4,CLUSTER_7
boxes_squeeze,numpy.squeeze(boxes),CLUSTER_4,CLUSTER_7
classes_squeeze,numpy.squeeze(classes),CLUSTER_4,CLUSTER_7
image,"numpy.true_divide(image,255)",CLUSTER_4,CLUSTER_7
image_np_expanded,"numpy.expand_dims(image_np,axis=0)",CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttimeall,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttimett,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtimett,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtimeall,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
df_feat,"pandas.DataFrame(cancer['data'],columns=cancer['feature_names'])",CLUSTER_4,CLUSTER_0
df_y,"pandas.DataFrame(y,columns=['Class'])",CLUSTER_4,CLUSTER_0
df_feat,"pandas.DataFrame(scaled_features,columns=df_feat.columns)",CLUSTER_4,CLUSTER_0
df,"pandas.concat([df_feat,df_y],axis=1)",CLUSTER_4,CLUSTER_0
x,numpy.arange(len(np.array(params[p]),CLUSTER_4,CLUSTER_0
train_labels,numpy.array(train_df.pop('Class'),CLUSTER_4,CLUSTER_0
val_labels,numpy.array(val_df.pop('Class'),CLUSTER_4,CLUSTER_0
test_labels,numpy.array(test_df.pop('Class'),CLUSTER_4,CLUSTER_0
train_features,numpy.array(train_df),CLUSTER_4,CLUSTER_0
val_features,numpy.array(val_df),CLUSTER_4,CLUSTER_0
test_features,numpy.array(test_df),CLUSTER_4,CLUSTER_0
testset,numpy.array(score),CLUSTER_4,CLUSTER_0
x,numpy.array(params[p]),CLUSTER_4,CLUSTER_0
y_1,numpy.array(means_train[best_index]),CLUSTER_4,CLUSTER_0
e_1,numpy.array(stds_train[best_index]),CLUSTER_4,CLUSTER_0
y_2,numpy.array(means_test[best_index]),CLUSTER_4,CLUSTER_0
e_2,numpy.array(stds_test[best_index]),CLUSTER_4,CLUSTER_0
y_3,numpy.array(testset[best_index]),CLUSTER_4,CLUSTER_0
testset,numpy.array(score),CLUSTER_4,CLUSTER_0
x,numpy.array(params[p]),CLUSTER_4,CLUSTER_0
y_1,numpy.array(means_train[best_index]),CLUSTER_4,CLUSTER_0
e_1,numpy.array(stds_train[best_index]),CLUSTER_4,CLUSTER_0
y_2,numpy.array(means_test[best_index]),CLUSTER_4,CLUSTER_0
e_2,numpy.array(stds_test[best_index]),CLUSTER_4,CLUSTER_0
y_3,numpy.array(testset[best_index]),CLUSTER_4,CLUSTER_0
testset,numpy.array(score),CLUSTER_4,CLUSTER_0
y_1,numpy.array(means_train[best_index]),CLUSTER_4,CLUSTER_0
e_1,numpy.array(stds_train[best_index]),CLUSTER_4,CLUSTER_0
y_2,numpy.array(means_test[best_index]),CLUSTER_4,CLUSTER_0
e_2,numpy.array(stds_test[best_index]),CLUSTER_4,CLUSTER_0
y_3,numpy.array(testset[best_index]),CLUSTER_4,CLUSTER_0
best_index,numpy.where(best_parms_mask),CLUSTER_4,CLUSTER_0
best_index,numpy.where(best_parms_mask),CLUSTER_4,CLUSTER_0
best_index,numpy.where(best_parms_mask),CLUSTER_4,CLUSTER_0
train_features,"numpy.clip(train_features,-5,5)",CLUSTER_4,CLUSTER_0
val_features,"numpy.clip(val_features,-5,5)",CLUSTER_4,CLUSTER_0
test_features,"numpy.clip(test_features,-5,5)",CLUSTER_4,CLUSTER_0
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_4,CLUSTER_0
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_4,CLUSTER_0
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_4,CLUSTER_0
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_4,CLUSTER_0
initial_bias,numpy.log([pos/neg]),CLUSTER_4,CLUSTER_0
n_jobs,"None,train_sizes=numpy.linspace(.1,1.0,5)",CLUSTER_4,CLUSTER_0
m,numpy.stack(masks[:i]+masks[i+1:]),CLUSTER_4,CLUSTER_0
m,numpy.stack(masks[:i]+masks[i+1:]),CLUSTER_4,CLUSTER_0
m,numpy.stack(masks[:i]+masks[i+1:]),CLUSTER_4,CLUSTER_0
"neg,pos",numpy.bincount(df['Class']),CLUSTER_4,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,len(params)",CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,len(params)",CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,len(params)",CLUSTER_4,CLUSTER_0
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_4,CLUSTER_0
"fn,tn,_","sklearn.metrics.roc_curve(labels,predictions)",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(labels,predictions>p)",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_train,pred_tr)",CLUSTER_4,CLUSTER_0
cm1,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_train,pred_knn_tr)",CLUSTER_4,CLUSTER_0
cm1,"sklearn.metrics.confusion_matrix(y_test,pred_knn_ts)",CLUSTER_4,CLUSTER_0
cm1,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(labels,predictions>p)",CLUSTER_4,CLUSTER_0
"train_df,test_df","sklearn.model_selection.train_test_split(df,test_size=0.2)",CLUSTER_4,CLUSTER_0
"train_df,val_df","sklearn.model_selection.train_test_split(df,test_size=0.2)",CLUSTER_4,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=1)",CLUSTER_4,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_4,CLUSTER_0
estimator,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_4,CLUSTER_0
knn,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=2,algorithm=paramtrs['algorithm'],metric=paramtrs['metric'])",CLUSTER_4,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_4,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_4,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_train,pred_tr)",CLUSTER_4,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_4,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_train,pred_knn_tr)",CLUSTER_4,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,pred_knn_ts)",CLUSTER_4,CLUSTER_0
grid_knn,"sklearn.model_selection.GridSearchCV(estimator,param_grid,cv=5,verbose=3,return_train_score=True)",CLUSTER_4,CLUSTER_0
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes)",CLUSTER_4,CLUSTER_0
a,"numpy.array([11,21,31,12,22,32,13,23,33])",CLUSTER_3,CLUSTER_6
i,"numpy.array([0,1])",CLUSTER_3,CLUSTER_6
weather_data,"pandas.DataFrame(data,index=cities)",CLUSTER_8,CLUSTER_3
weather_data,"pandas.DataFrame(data,index=cities,columns=column_names)",CLUSTER_8,CLUSTER_3
start,"datetime.datetime(2012,1,3,7,0,0,tzinfo=pytz.timezone('Europe/Moscow')",CLUSTER_11,CLUSTER_12
end,"datetime.datetime(2018,12,31,7,0,0,tzinfo=pytz.timezone('Europe/Moscow')",CLUSTER_11,CLUSTER_12
lefty,numpy.array(lefty),CLUSTER_12,CLUSTER_10
leftx,numpy.array(leftx),CLUSTER_12,CLUSTER_10
righty,numpy.array(righty),CLUSTER_12,CLUSTER_10
rightx,numpy.array(rightx),CLUSTER_12,CLUSTER_10
pts_left,"numpy.array([np.flipud(np.transpose(np.vstack([left_fitx,lefty])",CLUSTER_12,CLUSTER_10
pts_right,"numpy.array([np.transpose(np.vstack([right_fitx,righty])",CLUSTER_12,CLUSTER_10
lefty,numpy.array(lefty),CLUSTER_12,CLUSTER_10
leftx,numpy.array(leftx),CLUSTER_12,CLUSTER_10
righty,numpy.array(righty),CLUSTER_12,CLUSTER_10
rightx,numpy.array(rightx),CLUSTER_12,CLUSTER_10
pts_left,"numpy.array([np.flipud(np.transpose(np.vstack([Left.fitx,Left.Y])",CLUSTER_12,CLUSTER_10
pts_right,"numpy.array([np.transpose(np.vstack([right_fitx,Right.Y])",CLUSTER_12,CLUSTER_10
objp,"numpy.zeros((6*9,3)",CLUSTER_12,CLUSTER_10
x_idx,numpy.where((((left_peak-25),CLUSTER_12,CLUSTER_10
x_idx,numpy.where((((right_peak-25),CLUSTER_12,CLUSTER_10
x_idx,numpy.where((((xval-25),CLUSTER_12,CLUSTER_10
x_idx,numpy.where((((peak-25),CLUSTER_12,CLUSTER_10
s_binary,numpy.zeros_like(s_channel),CLUSTER_12,CLUSTER_10
b_binary,numpy.zeros_like(b_channel),CLUSTER_12,CLUSTER_10
l_binary,numpy.zeros_like(l_channel),CLUSTER_12,CLUSTER_10
combined_binary,numpy.zeros_like(s_binary),CLUSTER_12,CLUSTER_10
warp_zero,numpy.zeros_like(combined_binary),CLUSTER_12,CLUSTER_10
b_binary,numpy.zeros_like(b_channel),CLUSTER_12,CLUSTER_10
l_binary,numpy.zeros_like(l_channel),CLUSTER_12,CLUSTER_10
combined_binary,numpy.zeros_like(b_binary),CLUSTER_12,CLUSTER_10
warp_zero,numpy.zeros_like(combined_binary),CLUSTER_12,CLUSTER_10
left_peak,numpy.argmax(histogram[:640]),CLUSTER_12,CLUSTER_10
right_peak,numpy.argmax(histogram[640:]),CLUSTER_12,CLUSTER_10
peak,numpy.argmax(histogram[640:]),CLUSTER_12,CLUSTER_10
peak,numpy.argmax(histogram[:640]),CLUSTER_12,CLUSTER_10
lsort,numpy.argsort(lefty),CLUSTER_12,CLUSTER_10
rsort,numpy.argsort(righty),CLUSTER_12,CLUSTER_10
sorted_index,numpy.argsort(yvals),CLUSTER_12,CLUSTER_10
yval,"numpy.mean([i,j])",CLUSTER_12,CLUSTER_10
leftx_int,numpy.mean(Left.x_int),CLUSTER_12,CLUSTER_10
left_top,numpy.mean(Left.top),CLUSTER_12,CLUSTER_10
rightx_int,numpy.mean(Right.x_int),CLUSTER_12,CLUSTER_10
right_top,numpy.mean(Right.top),CLUSTER_12,CLUSTER_10
"x,y",numpy.nonzero(np.transpose(combined_binary),CLUSTER_12,CLUSTER_10
"x,y",numpy.nonzero(np.transpose(combined_binary),CLUSTER_12,CLUSTER_10
histogram,"numpy.sum(combined_binary[j:i,:],axis=0)",CLUSTER_12,CLUSTER_10
histogram,"numpy.sum(image[j:i,:],axis=0)",CLUSTER_12,CLUSTER_10
src,"numpy.float32([[490,482],[810,482],
[1250,720],[40,720]])",CLUSTER_12,CLUSTER_10
dst,"numpy.float32([[0,0],[1280,0],
[1250,720],[40,720]])",CLUSTER_12,CLUSTER_10
src,"numpy.float32([[490,482],[810,482],
[1250,720],[40,720]])",CLUSTER_12,CLUSTER_10
dst,"numpy.float32([[0,0],[1280,0],
[1250,720],[40,720]])",CLUSTER_12,CLUSTER_10
src,"numpy.float32([[490,482],[810,482],
[1250,720],[0,720]])",CLUSTER_12,CLUSTER_10
dst,"numpy.float32([[0,0],[1280,0],
[1250,720],[40,720]])",CLUSTER_12,CLUSTER_10
pts,"numpy.hstack((pts_left,pts_right)",CLUSTER_12,CLUSTER_10
pts,"numpy.hstack((pts_left,pts_right)",CLUSTER_12,CLUSTER_10
rightx,"numpy.append(rightx,rightx_int)",CLUSTER_12,CLUSTER_10
righty,"numpy.append(righty,720)",CLUSTER_12,CLUSTER_10
rightx,"numpy.append(rightx,right_fit[0]*0**2+right_fit[1]*0+right_fit[2])",CLUSTER_12,CLUSTER_10
righty,"numpy.append(righty,0)",CLUSTER_12,CLUSTER_10
leftx,"numpy.append(leftx,leftx_int)",CLUSTER_12,CLUSTER_10
lefty,"numpy.append(lefty,720)",CLUSTER_12,CLUSTER_10
leftx,"numpy.append(leftx,left_fit[0]*0**2+left_fit[1]*0+left_fit[2])",CLUSTER_12,CLUSTER_10
lefty,"numpy.append(lefty,0)",CLUSTER_12,CLUSTER_10
leftx,"numpy.append(leftx,leftx_int)",CLUSTER_12,CLUSTER_10
lefty,"numpy.append(lefty,720)",CLUSTER_12,CLUSTER_10
leftx,"numpy.append(leftx,left_top)",CLUSTER_12,CLUSTER_10
lefty,"numpy.append(lefty,0)",CLUSTER_12,CLUSTER_10
rightx,"numpy.append(rightx,rightx_int)",CLUSTER_12,CLUSTER_10
righty,"numpy.append(righty,720)",CLUSTER_12,CLUSTER_10
rightx,"numpy.append(rightx,right_top)",CLUSTER_12,CLUSTER_10
righty,"numpy.append(righty,0)",CLUSTER_12,CLUSTER_10
color_warp,"numpy.dstack((warp_zero,warp_zero,warp_zero)",CLUSTER_12,CLUSTER_10
color_warp,"numpy.dstack((warp_zero,warp_zero,warp_zero)",CLUSTER_12,CLUSTER_10
left_fit,"numpy.polyfit(lefty,leftx,2)",CLUSTER_12,CLUSTER_10
right_fit,"numpy.polyfit(righty,rightx,2)",CLUSTER_12,CLUSTER_10
left_fit,"numpy.polyfit(lefty,leftx,2)",CLUSTER_12,CLUSTER_10
right_fit,"numpy.polyfit(righty,rightx,2)",CLUSTER_12,CLUSTER_10
left_fit_cr,"numpy.polyfit(lefty*ym_per_pix,leftx*xm_per_pix,2)",CLUSTER_12,CLUSTER_10
right_fit_cr,"numpy.polyfit(righty*ym_per_pix,rightx*xm_per_pix,2)",CLUSTER_12,CLUSTER_10
fit_cr,"numpy.polyfit(yvals*ym_per_pix,xvals*xm_per_pix,2)",CLUSTER_12,CLUSTER_10
left_fit,"numpy.polyfit(lefty,leftx,2)",CLUSTER_12,CLUSTER_10
left_fit,"numpy.polyfit(lefty,leftx,2)",CLUSTER_12,CLUSTER_10
right_fit,"numpy.polyfit(righty,rightx,2)",CLUSTER_12,CLUSTER_10
right_fit,"numpy.polyfit(righty,rightx,2)",CLUSTER_12,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(8,4)",CLUSTER_12,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(9,6)",CLUSTER_12,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(9,6)",CLUSTER_12,CLUSTER_10
"f,((ax1,ax2,ax3),(ax4,ax5,ax6))","matplotlib.pyplot.subplots(2,3,sharey='col',sharex='row',figsize=(10,4)",CLUSTER_12,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(9,6)",CLUSTER_12,CLUSTER_10
self.x_int,collections.deque(maxlen=10),CLUSTER_12,CLUSTER_10
self.top,collections.deque(maxlen=10),CLUSTER_12,CLUSTER_10
self.fit0,collections.deque(maxlen=10),CLUSTER_12,CLUSTER_10
self.fit1,collections.deque(maxlen=10),CLUSTER_12,CLUSTER_10
self.fit2,collections.deque(maxlen=10),CLUSTER_12,CLUSTER_10
theta1,numpy.sum(x*(y-np.mean(y),CLUSTER_1,CLUSTER_10
theta1,numpy.sum(x*(y-np.mean(y),CLUSTER_1,CLUSTER_10
visualization.sel(features,f).plot(ax=matplotlib.pyplot.gca(),CLUSTER_3,CLUSTER_10
w,"numpy.arange(1,1000,.1)",CLUSTER_7,CLUSTER_3
fig,seaborn.PairGrid(fit_data),CLUSTER_7,CLUSTER_3
fit_data,"pandas.DataFrame(columns=['logMdust','Tdust','beta','logNpl','alpha','wturn'])",CLUSTER_7,CLUSTER_3
ax,"matplotlib.pyplot.axes(axisbg='
ax.set_axisbelow(True)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(11,4)",CLUSTER_1,CLUSTER_10
angulos_cero_noventa,"numpy.array((0,30,45,60,90)",CLUSTER_3,CLUSTER_6
image_id,random.choice(dataset.image_ids),CLUSTER_4,CLUSTER_7
ixs,numpy.arange(len(keep),CLUSTER_4,CLUSTER_7
roi_class_names,numpy.array(dataset.class_names),CLUSTER_4,CLUSTER_7
det_mask_specific,"numpy.array([mrcnn[""masks""][0,i,:,:,c]
fori,cinenumerate(det_class_ids)",CLUSTER_4,CLUSTER_7
det_masks,"numpy.array([utils.unmold_mask(m,det_boxes[i],image.shape)",CLUSTER_4,CLUSTER_7
positive_anchor_ix,numpy.where(target_rpn_match[:]==1),CLUSTER_4,CLUSTER_7
negative_anchor_ix,numpy.where(target_rpn_match[:]==-1),CLUSTER_4,CLUSTER_7
neutral_anchor_ix,numpy.where(target_rpn_match[:]==0),CLUSTER_4,CLUSTER_7
det_count,numpy.where(det_class_ids==0),CLUSTER_4,CLUSTER_7
roi_positive_ixs,numpy.where(roi_class_ids>0),CLUSTER_4,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[ixs]>0,2,1)",CLUSTER_4,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[roi_positive_ixs][ids]>0,1,0)",CLUSTER_4,CLUSTER_7
keep,numpy.where(roi_class_ids>0),CLUSTER_4,CLUSTER_7
ixs,numpy.where(pre_nms_class_ids==class_id),CLUSTER_4,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[keep][ixs]>0,1,0)",CLUSTER_4,CLUSTER_7
det_count,numpy.where(det_class_ids==0),CLUSTER_4,CLUSTER_7
roi_class_ids,"numpy.argmax(mrcnn[""probs""][0],axis=1)",CLUSTER_4,CLUSTER_7
sorted_anchor_ids,"numpy.argsort(rpn['rpn_class'][:,:,1].flatten()",CLUSTER_4,CLUSTER_7
proposals,"numpy.around(mrcnn[""proposals""][0]*np.array([h,w,h,w])",CLUSTER_4,CLUSTER_7
keep,"numpy.intersect1d(keep,np.where(roi_scores>=config.DETECTION_MIN_CONFIDENCE)",CLUSTER_4,CLUSTER_7
keep,"numpy.intersect1d(keep,nms_keep)",CLUSTER_4,CLUSTER_7
nms_keep,"numpy.union1d(nms_keep,class_keep)",CLUSTER_4,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,0],50)",CLUSTER_4,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,1],50)",CLUSTER_4,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,2],50)",CLUSTER_4,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,3],50)",CLUSTER_4,CLUSTER_7
_,"matplotlib.pyplot.imshow(modellib.unmold_image(activations[""input_image""][0],config)",CLUSTER_4,CLUSTER_7
"_,ax","matplotlib.pyplot.subplots(rows,cols,figsize=(size*cols,size*rows)",CLUSTER_4,CLUSTER_7
y_derivs,numpy.zeros(2),CLUSTER_1,CLUSTER_10
k1,numpy.zeros(nv),CLUSTER_1,CLUSTER_10
k2,numpy.zeros(nv),CLUSTER_1,CLUSTER_10
k3,numpy.zeros(nv),CLUSTER_1,CLUSTER_10
k4,numpy.zeros(nv),CLUSTER_1,CLUSTER_10
y_temp,numpy.zeros(nv),CLUSTER_1,CLUSTER_10
y_new,numpy.zeros((len(x),CLUSTER_1,CLUSTER_10
y_0,numpy.zeros(2),CLUSTER_1,CLUSTER_10
Delta,"numpy.full(nv,2*tol)",CLUSTER_1,CLUSTER_10
x,"numpy.full(1,a)",CLUSTER_1,CLUSTER_10
y,"numpy.full((1,nv)",CLUSTER_1,CLUSTER_10
Delta,numpy.fabs(y_2-y_11),CLUSTER_1,CLUSTER_10
h_new,numpy.fmin(h_step*(Delta.max(),CLUSTER_1,CLUSTER_10
xx,"numpy.linspace(0,2.0*np.pi,1000)",CLUSTER_1,CLUSTER_10
x,"numpy.append(x,xi)",CLUSTER_1,CLUSTER_10
df3,"pandas.DataFrame({""직급"":['사원','대리','과장','차장','부장','이사','상무','전무'],
'직급코드':['','D','K','C','B','E','S','J']})",CLUSTER_11,CLUSTER_12
df_sale,"pandas.DataFrame({""연봉"":[100,200,300,400,500,600,700,800],
'직급코드':['','D','K','C','B','E','S','J']})",CLUSTER_11,CLUSTER_12
df,"pandas.read_excel(excel_file,Sheet_name='Sheet1')",CLUSTER_11,CLUSTER_12
test_data,numpy.matrix(test_data['Lag2']),CLUSTER_7,CLUSTER_8
labels,pandas.DataFrame(data['Direction']),CLUSTER_7,CLUSTER_8
test_labels,pandas.DataFrame(test_data['Direction']),CLUSTER_7,CLUSTER_8
data,"pandas.read_csv('/Users/anthonydepalatis/Documents/School/EE379K/Lab5/Data/Weekly.csv',
usecols=['Year','Lag1','Lag2','Lag3','Lag4','Lag5','Volume','Today','Direction'])",CLUSTER_7,CLUSTER_8
clf1,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
clf2,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
confusion_matrix1,"sklearn.metrics.confusion_matrix(labels,clf1.predict(b_data)",CLUSTER_7,CLUSTER_8
confusion_matrix2,"sklearn.metrics.confusion_matrix(test_labels,clf2.predict(test_data)",CLUSTER_7,CLUSTER_8
confusion_matrix3,"sklearn.metrics.confusion_matrix(test_labels,clf3.predict(test_data)",CLUSTER_7,CLUSTER_8
confusion_matrix4,"sklearn.metrics.confusion_matrix(test_labels,clf4.predict(test_data)",CLUSTER_7,CLUSTER_8
confusion_matrix5,"sklearn.metrics.confusion_matrix(test_labels,clf5.predict(test_data)",CLUSTER_7,CLUSTER_8
confusion_matrix6,"sklearn.metrics.confusion_matrix(test_labels,clf6.predict(test_data)",CLUSTER_7,CLUSTER_8
confusion_matrix7,"sklearn.metrics.confusion_matrix(test_labels,clf7.predict(test_data)",CLUSTER_7,CLUSTER_8
lMs,"numpy.arange(9.0,11.0,0.1)",CLUSTER_1,CLUSTER_9
y0,"numpy.array([g.Mh,g.Mg,g.Ms,g.MZ])",CLUSTER_1,CLUSTER_9
zmaio,"numpy.array([0.07,2.2,3.5])",CLUSTER_1,CLUSTER_9
lM0,"numpy.array([11.8,12.38,12.76])",CLUSTER_1,CLUSTER_9
K0,"numpy.array([9.04,8.99,8.79])",CLUSTER_1,CLUSTER_9
Mhout,"numpy.zeros((Nm,Nz));Mgout=numpy.zeros((Nm,Nz)",CLUSTER_1,CLUSTER_9
Msout,"numpy.zeros((Nm,Nz));MZout=numpy.zeros((Nm,Nz)",CLUSTER_1,CLUSTER_9
lzg1,numpy.log10(1.0+zg),CLUSTER_1,CLUSTER_9
Mh,"numpy.power(10,lMh)",CLUSTER_1,CLUSTER_9
Mh,"numpy.power(10,lMh)",CLUSTER_1,CLUSTER_9
zg,"numpy.linspace(30.,0.,Nz)",CLUSTER_1,CLUSTER_9
lMh,"numpy.linspace(5.0,8.,Nm)",CLUSTER_1,CLUSTER_9
lMh,"numpy.linspace(5.0,8.,Nm)",CLUSTER_1,CLUSTER_9
lMsL,"numpy.linspace(5.5,9.5,100)",CLUSTER_1,CLUSTER_9
"lZLp,elZLp,lMsLp","numpy.loadtxt('data/lee06.txt',usecols=(1,3,4)",CLUSTER_1,CLUSTER_9
"lLVk,elLVk,lZk,elZk","numpy.loadtxt('data/kirby13_tab4.txt',usecols=(4,5,6,7)",CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(9,3)",CLUSTER_1,CLUSTER_9
lMhi,"scipy.interpolate.interp2d(lzg1,lMh,np.log10(np.maximum(Mmin,Mhout)",CLUSTER_1,CLUSTER_9
lMgi,"scipy.interpolate.interp2d(lzg1,lMh,np.log10(np.maximum(Mmin,Mgout)",CLUSTER_1,CLUSTER_9
lMsi,"scipy.interpolate.interp2d(lzg1,lMh,np.log10(np.maximum(Mmin,Msout)",CLUSTER_1,CLUSTER_9
lMZi,"scipy.interpolate.interp2d(lzg1,lMh,np.log10(np.maximum(Mmin,MZout)",CLUSTER_1,CLUSTER_9
Mout,"scipy.integrate.odeint(g.evolve,y0,t_output,rtol=1.e-5,mxstep=4000)",CLUSTER_1,CLUSTER_9
channels,"numpy.arange(vmin,vmax,delta)",CLUSTER_1,CLUSTER_9
image_12mm,"numpy.zeros([imsize_1,imsize_1])",CLUSTER_1,CLUSTER_9
"fig,axs","matplotlib.pyplot.subplots(3,3,sharey=True,figsize=(16,16)",CLUSTER_1,CLUSTER_9
y,"numpy.array([0,1,2,2,1])",CLUSTER_1,CLUSTER_10
correct_scores,"numpy.asarray([
[-0.81233741,-1.27654624,-0.70335995],
[-0.17129677,-1.18803311,-0.47310444],
[-0.51590475,-1.01354314,-0.8504215],
[-0.15419291,-0.48629638,-0.52901952],
[-0.00618733,-0.12435261,-0.15226949]])",CLUSTER_1,CLUSTER_10
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(0,10,100)",CLUSTER_12,CLUSTER_3
ts,pandas.Series(np.random.randn(1000),CLUSTER_12,CLUSTER_3
ts,"pd.Series(np.random.randn(1000),index=pandas.date_range('1/1/2020',periods=1000)",CLUSTER_12,CLUSTER_3
car_sales,pandas.read_csv('./source/car_sales.csv'),CLUSTER_12,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,((ax1,ax2),(ax3,ax4))","matplotlib.pyplot.subplots(nrows=2,
ncols=2,
figsize=(10,5)",CLUSTER_12,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(nrows=2,
ncols=2,
figsize=(10,5)",CLUSTER_12,CLUSTER_3
locsfill,"pandas.DataFrame(newframe,columns=['st','NAME','GEO_ID','lat','lng','api_name'])",CLUSTER_9,CLUSTER_2
df,pandas.read_csv('data/all_census_formated.csv'),CLUSTER_9,CLUSTER_2
df2,pandas.read_csv('data/mergeset.csv'),CLUSTER_9,CLUSTER_2
ll,pandas.read_csv('data/uscities.csv'),CLUSTER_9,CLUSTER_2
get,"requests.get(f""https://api.mapbox.com/geocoding/v5/mapbox.places/{url[1]}.json?types=place&country=US&access_token=pk.eyJ1IjoibWF0dGhld2xzZXNzaW9uc2FwaSIsImEiOiJjazU3NGdlZnEwMDRpM2RxYzRrdWxtajhlIn0.3KqQpLIuduwAfK8Pr8cO2A"")",CLUSTER_9,CLUSTER_2
t1,time.perf_counter(),CLUSTER_9,CLUSTER_2
t2,time.perf_counter(),CLUSTER_9,CLUSTER_2
t1,time.perf_counter(),CLUSTER_9,CLUSTER_2
t2,time.perf_counter(),CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(20,5)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_10
decoder,json.JSONDecoder(),CLUSTER_0,CLUSTER_11
start_time,time.time(),CLUSTER_0,CLUSTER_11
df_sub,pandas.DataFrame(df_workers.groupby('RecruitmentSource'),CLUSTER_7,CLUSTER_8
df_target['DateofBirth'],pandas.DataFrame(bir),CLUSTER_7,CLUSTER_8
df_p,pandas.DataFrame(X_p),CLUSTER_7,CLUSTER_8
dfloop,pandas.DataFrame(dfdict),CLUSTER_7,CLUSTER_8
active_p,pandas.DataFrame(df_active_p),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('hr_dataset.csv'),CLUSTER_7,CLUSTER_8
df_target['DateofTermination'],"pandas.to_datetime(df_target['DateofTermination'],infer_datetime_format=True)",CLUSTER_7,CLUSTER_8
birth,pandas.to_datetime(df_target['DOB']),CLUSTER_7,CLUSTER_8
df_target['DateofTermination'],pandas.to_datetime(df_target['DateofTermination']),CLUSTER_7,CLUSTER_8
df_target['DateofBirth'],pandas.to_datetime(df_target['DateofBirth']),CLUSTER_7,CLUSTER_8
hue,"df2['NumberofEmployees'],dodge=False,palette=numpy.array(pal[::-1])",CLUSTER_7,CLUSTER_8
manager_name,"numpy.unique(df2['ManagerName'],return_counts=True)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_p,y,random_state=42)",CLUSTER_7,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(models[m]['estimator'],models[m]['param'],cv=5,
scoring=score,
iid=False,
return_train_score=False,
n_jobs=2,
)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred,labels=labels)",CLUSTER_7,CLUSTER_8
categorical_transformer,"sklearn.preprocessing.OneHotEncoder(handle_unknown='ignore',sparse=False,dtype=transf_dtype)",CLUSTER_7,CLUSTER_8
categorical_transformer,"sklearn.preprocessing.OneHotEncoder(handle_unknown='ignore',sparse=False,dtype=transf_dtype)",CLUSTER_7,CLUSTER_8
preprocessor,"sklearn.compose.ColumnTransformer(transformers=[('cat',categorical_transformer,categorical)",CLUSTER_7,CLUSTER_8
preprocessor,"sklearn.compose.ColumnTransformer(transformers=[('cat',categorical_transformer,categorical)",CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x=""DiversityDesc"",y=""RecruitmentSource"",data=df_sub,\
hue='NumberofEmployees',dodge=False,palette=pal[::-1])",CLUSTER_7,CLUSTER_8
pal,seaborn.cubehelix_palette(len(avg_score['NumberofEmployees'].unique(),CLUSTER_7,CLUSTER_8
pal,seaborn.cubehelix_palette(len(df_sub['NumberofEmployees'].unique(),CLUSTER_7,CLUSTER_8
today,datetime.date.today(),CLUSTER_7,CLUSTER_8
ridge,sklearn.linear_model.Ridge(alpha=0.1),CLUSTER_7,CLUSTER_8
lasso,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(os.path.join(""data"",""news.csv"")",CLUSTER_9,CLUSTER_2
r,"requests.get(
""https://quotes.rest/qod.json"")",CLUSTER_9,CLUSTER_2
r,"requests.get(""https://news.ycombinator.com"")",CLUSTER_9,CLUSTER_2
text,"re.sub(r""[^a-zA-Z0-9]"","""",text)",CLUSTER_9,CLUSTER_2
text,"re.sub(r""[^a-zA-Z0-9]"","""",text.lower()",CLUSTER_9,CLUSTER_2
pattern,re.compile(r'<.*?>'),CLUSTER_9,CLUSTER_2
"coder_survey[""Age_bin_custom_range""]","pandas.cut(np.array(coder_survey[""Age""])",CLUSTER_1,CLUSTER_3
merged,"pandas.merge(pop,abbrevs,how='outer',left_on='state/region',right_on='abbreviation')",CLUSTER_1,CLUSTER_3
final,"pandas.merge(merged,areas,on=""state"",how=""left"")",CLUSTER_1,CLUSTER_3
pop,"pandas.read_csv(""C:\\Users\\34609\\Documents\\DataTB\\4.R\\TransPy2R\\state-population.csv"")",CLUSTER_1,CLUSTER_3
areas,"pandas.read_csv(""C:\\Users\\34609\\Documents\\DataTB\\4.R\\TransPy2R\\state-areas.csv"")",CLUSTER_1,CLUSTER_3
abbrevs,"pandas.read_csv(""C:\\Users\\34609\\Documents\\DataTB\\4.R\\TransPy2R\\state-abbrevs.csv"")",CLUSTER_1,CLUSTER_3
coder_survey,"pandas.read_csv(""C:\\Users\\34609\\Documents\\DataTB\\4.R\\TransPy2R\\fcc_2016_coder_survey_subset.csv"",encoding=""utf-8"")",CLUSTER_1,CLUSTER_3
"coder_survey[""Age_bin_round""]","numpy.array(np.floor(numpy.array(coder_survey[""Age""])",CLUSTER_1,CLUSTER_3
X,"numpy.array([[0,1,0,1],
[1,0,1,1],
[0,0,0,1],
[1,0,1,0]])",CLUSTER_4,CLUSTER_11
y,"numpy.array([0,1,0,1])",CLUSTER_4,CLUSTER_11
img,"numpy.array(Image.open(""output/tree.gv.png"")",CLUSTER_4,CLUSTER_11
y_named,"numpy.array([""blue"",""red""])",CLUSTER_4,CLUSTER_11
argmax_dec_func,numpy.argmax(logreg.decision_function(X_test),CLUSTER_4,CLUSTER_11
price_tree,numpy.exp(pred_tree),CLUSTER_4,CLUSTER_11
price_lr,numpy.exp(pred_lr),CLUSTER_4,CLUSTER_11
y_train,numpy.log(data_train.price),CLUSTER_4,CLUSTER_11
xx,"numpy.linspace(X_new[:,0].min()",CLUSTER_4,CLUSTER_11
yy,"numpy.linspace(X_new[:,1].min()",CLUSTER_4,CLUSTER_11
line,"numpy.linspace(-3,3,100)",CLUSTER_4,CLUSTER_11
X_new,"numpy.hstack([X,X[:,1:]**2])",CLUSTER_4,CLUSTER_11
"XX,YY","numpy.meshgrid(xx,yy)",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(scores_image,ax=axes.tolist()",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(scores_image,ax=axes.tolist()",CLUSTER_4,CLUSTER_11
figure,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
figure,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(12,4)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,4,figsize=(20,10)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(3,3,figsize=(15,10)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,4,figsize=(20,8)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,4,figsize=(20,8)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(13,5)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(13,5)",CLUSTER_4,CLUSTER_11
ram_prices,"pandas.read_csv(os.path.join(mglearn.datasets.DATA_PATH,
""ram_price.csv"")",CLUSTER_4,CLUSTER_11
"X,y","sklearn.datasets.make_moons(n_samples=100,noise=0.25,random_state=3)",CLUSTER_4,CLUSTER_11
"X,y","sklearn.datasets.make_moons(n_samples=100,noise=0.25,random_state=3)",CLUSTER_4,CLUSTER_11
"X,y","sklearn.datasets.make_moons(n_samples=100,noise=0.25,random_state=3)",CLUSTER_4,CLUSTER_11
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
cancer.data,cancer.target,stratify=cancer.target,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,stratify=y,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
cancer.data,cancer.target,random_state=0)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
cancer.data,cancer.target,random_state=0)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
cancer.data,cancer.target,random_state=0)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,stratify=y,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
cancer.data,cancer.target,random_state=0)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train_named,y_test_named,y_train,y_test","sklearn.model_selection.train_test_split(X,y_named,y,random_state=0)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(iris.data,iris.target,random_state=42)",CLUSTER_4,CLUSTER_11
tree,sklearn.tree.DecisionTreeClassifier(random_state=0),CLUSTER_4,CLUSTER_11
tree,"sklearn.tree.DecisionTreeClassifier(max_depth=4,random_state=0)",CLUSTER_4,CLUSTER_11
tree,sklearn.tree.DecisionTreeRegressor(),CLUSTER_4,CLUSTER_11
linear_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=7,random_state=2)",CLUSTER_4,CLUSTER_11
forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=0)",CLUSTER_4,CLUSTER_11
gbrt,sklearn.ensemble.GradientBoostingClassifier(random_state=0),CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingClassifier(random_state=0,max_depth=1)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingClassifier(random_state=0,learning_rate=0.01)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingClassifier(random_state=0,max_depth=1)",CLUSTER_4,CLUSTER_11
gbrt,sklearn.ensemble.GradientBoostingClassifier(random_state=0),CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.01,random_state=0)",CLUSTER_4,CLUSTER_11
linear_svm,sklearn.svm.LinearSVC(),CLUSTER_4,CLUSTER_11
linear_svm_3d,sklearn.svm.LinearSVC(),CLUSTER_4,CLUSTER_11
svm,"sklearn.svm.SVC(kernel=""rbf"",C=10,gamma=0.1)",CLUSTER_4,CLUSTER_11
svc,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_11
svc,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_11
svc,sklearn.svm.SVC(C=1000),CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(solver=""lbfgs"",random_state=0)",CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(solver=""lbfgs"",random_state=0,hidden_layer_sizes=[10])",CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(solver=""lbfgs"",random_state=0,hidden_layer_sizes=[10,10])",CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(solver=""lbfgs"",activation=""tanh"",
random_state=0,hidden_layer_sizes=[10,10])",CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,
hidden_layer_sizes=[n_hidden_nodes,n_hidden_nodes],
alpha=alpha)",CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(solver=""lbfgs"",random_state=i,
hidden_layer_sizes=[100,100])",CLUSTER_4,CLUSTER_11
mlp,sklearn.neural_network.MLPClassifier(random_state=42),CLUSTER_4,CLUSTER_11
mlp,sklearn.neural_network.MLPClassifier(random_state=0),CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(max_iter=1000,random_state=0)",CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(max_iter=1000,alpha=1,random_state=0)",CLUSTER_4,CLUSTER_11
"X,y","sklearn.datasets.make_circles(noise=0.25,factor=0.5,random_state=1)",CLUSTER_4,CLUSTER_11
iris,sklearn.datasets.load_iris(),CLUSTER_4,CLUSTER_11
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_11
norm_mean,numpy.mean(normal_dis),CLUSTER_1,CLUSTER_3
pois_mean,numpy.mean(poisson_dis),CLUSTER_1,CLUSTER_3
gam_mean,numpy.mean(gamma_dis),CLUSTER_1,CLUSTER_3
bin_mean,numpy.mean(binomial_dis),CLUSTER_1,CLUSTER_3
berno_mean,numpy.mean(bernoulli_dis),CLUSTER_1,CLUSTER_3
pare_mean,numpy.mean(pareto_dis),CLUSTER_1,CLUSTER_3
normal3_mean,numpy.mean(normal3),CLUSTER_1,CLUSTER_3
norm_std,numpy.std(normal_dis),CLUSTER_1,CLUSTER_3
pois_std,numpy.std(poisson_dis),CLUSTER_1,CLUSTER_3
gam_std,numpy.std(gamma_dis),CLUSTER_1,CLUSTER_3
bin_std,numpy.std(binomial_dis),CLUSTER_1,CLUSTER_3
berno_std,numpy.std(bernoulli_dis),CLUSTER_1,CLUSTER_3
pare_std,numpy.std(pareto_dis),CLUSTER_1,CLUSTER_3
normal3_std,numpy.std(normal3),CLUSTER_1,CLUSTER_3
r,"re.compile(""a.c"")",CLUSTER_10,CLUSTER_4
r,"re.compile(""ab."")",CLUSTER_10,CLUSTER_4
df,pandas.read_csv('final2.csv'),CLUSTER_4,CLUSTER_11
df2,pandas.read_csv('final.csv'),CLUSTER_4,CLUSTER_11
df1,"pandas.read_csv(""merge.csv"")",CLUSTER_4,CLUSTER_11
inv,random.choice(RawList),CLUSTER_11,CLUSTER_12
inv,random.choice(RawList),CLUSTER_11,CLUSTER_12
prize,pandas.DataFrame(list(D1.items(),CLUSTER_11,CLUSTER_12
prize,pandas.DataFrame(list(D1.items(),CLUSTER_11,CLUSTER_12
RawData,pandas.read_csv('槓龜王重複簽到人數_20200428_python.csv'),CLUSTER_11,CLUSTER_12
RawData,pandas.read_csv(EachFile),CLUSTER_11,CLUSTER_12
spl_1,re.search('Lottery_(\d*),CLUSTER_11,CLUSTER_12
date_today,datetime.datetime.today(),CLUSTER_11,CLUSTER_12
global_temp,pandas.read_csv('datasets/global_temperature.csv'),CLUSTER_1,CLUSTER_3
kmn,sklearn.cluster.KMeans(n_clusters=3),CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_5,CLUSTER_10
samochody,sklearn.datasets.fetch_openml('cars1'),CLUSTER_5,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(1,2)",CLUSTER_5,CLUSTER_10
demandFile,"pandas.read_csv(""Demand.csv"",header=None)",CLUSTER_8,CLUSTER_4
shiftTime,"pandas.read_csv(""shiftTime.csv"",header=None)",CLUSTER_8,CLUSTER_4
emploAttri,"pandas.read_csv(""managerRequest.csv"",header=0)",CLUSTER_8,CLUSTER_4
data,"pandas.read_csv(""train.csv"",na_values=""NaN"")",CLUSTER_7,CLUSTER_5
ax,"seaborn.countplot(x=""class"",data=titanic)",CLUSTER_7,CLUSTER_5
ax,"seaborn.distplot(data['BMI'],bins=50)",CLUSTER_7,CLUSTER_5
ax,seaborn.distplot(data['Employment_Info_1'].dropna(),CLUSTER_7,CLUSTER_5
ax,seaborn.distplot(data['Medical_History_32'].dropna(),CLUSTER_7,CLUSTER_5
titanic,"seaborn.load_dataset(""titanic"")",CLUSTER_7,CLUSTER_5
data_subset,"sklearn.preprocessing.scale(sdata[selected_features].drop(objects_with_nan,axis=0)",CLUSTER_7,CLUSTER_5
data_subset,"sklearn.preprocessing.scale(sdata[selected_features].drop(objects_with_nan,axis=0)",CLUSTER_7,CLUSTER_5
model,sklearn.manifold.TSNE(random_state=321),CLUSTER_7,CLUSTER_5
model2,sklearn.manifold.MDS(random_state=321),CLUSTER_7,CLUSTER_5
model3,"sklearn.manifold.MDS(random_state=321,metric='cosine',dissimilarity=""precomputed"")",CLUSTER_7,CLUSTER_5
svm_,"sklearn.svm.OneClassSVM(gamma=10,nu=0.01)",CLUSTER_7,CLUSTER_5
self.top100,pandas.DataFrame(),CLUSTER_12,CLUSTER_3
self.holding,pandas.DataFrame(),CLUSTER_12,CLUSTER_3
basket,pandas.DataFrame(),CLUSTER_12,CLUSTER_3
t,pandas.Timedelta('180days'),CLUSTER_12,CLUSTER_3
self.window,pandas.Timedelta('365days'),CLUSTER_12,CLUSTER_3
self.current_date,pandas.Timestamp('2016-12-3000:00:00'),CLUSTER_12,CLUSTER_3
self.top100,"pandas.merge(self.top100,self.holding,on=['firms'],suffixes=('_x','')",CLUSTER_12,CLUSTER_3
df,"pandas.read_csv(""SP500_out_2015-2018.csv"",encoding=""UTF-8"")",CLUSTER_12,CLUSTER_3
df.date,pandas.to_datetime(df.date),CLUSTER_12,CLUSTER_3
tf,time.time(),CLUSTER_6,CLUSTER_10
tf,time.time(),CLUSTER_6,CLUSTER_10
test_set1,"numpy.arange(L,R/2,dx)",CLUSTER_6,CLUSTER_10
test_set2,"numpy.arange(R/2,R,dx)",CLUSTER_6,CLUSTER_10
"bulk_set,surf_set","numpy.arange(L,R,h)",CLUSTER_6,CLUSTER_10
num,"numpy.arange(1,len(loss_bulk_record)",CLUSTER_6,CLUSTER_10
test_set,"numpy.concatenate((test_set1,test_set2)",CLUSTER_6,CLUSTER_10
yt,numpy.zeros_like(points),CLUSTER_6,CLUSTER_10
y_diff,numpy.zeros_like(points),CLUSTER_6,CLUSTER_10
ymu,numpy.zeros_like(points),CLUSTER_6,CLUSTER_10
ysig,numpy.zeros_like(points),CLUSTER_6,CLUSTER_10
u_h1,numpy.sum(dx*(vsq(ud1),CLUSTER_6,CLUSTER_10
u_l2,numpy.sum(dx*vsq(u1),CLUSTER_6,CLUSTER_10
sigma_h1,numpy.sum(dx*(vsq(sigma1),CLUSTER_6,CLUSTER_10
sigma_l2,numpy.sum(dx*vsq(sigma1),CLUSTER_6,CLUSTER_10
vsq,numpy.vectorize(sq),CLUSTER_6,CLUSTER_10
u1,numpy.vectorize(u_exact),CLUSTER_6,CLUSTER_10
ud1,numpy.vectorize(sigma_exact),CLUSTER_6,CLUSTER_10
u2,numpy.vectorize(u_exact),CLUSTER_6,CLUSTER_10
ud2,numpy.vectorize(sigma_exact),CLUSTER_6,CLUSTER_10
sigma1,numpy.vectorize(sigma_exact),CLUSTER_6,CLUSTER_10
sigma2,numpy.vectorize(sigma_exact),CLUSTER_6,CLUSTER_10
f_range,"numpy.arange(freq_h[n-1],freq_h[n+1],0.001)",CLUSTER_1,CLUSTER_9
f_range,"numpy.arange(freq_h[n-1],freq_h[n+1],0.001)",CLUSTER_1,CLUSTER_9
y,numpy.array(ddo['OP']['particles'][parameter1][0][0][0]*multi1),CLUSTER_1,CLUSTER_9
x,numpy.array(ddo['OP']['particles'][parameter2][0][0][0]*multi2),CLUSTER_1,CLUSTER_9
y,numpy.array(ddo['OP']['particles'][parameter1][0][0][0]*multi1),CLUSTER_1,CLUSTER_9
x,numpy.array(dpp_from_dE(ddo['OP']['particles'][parameter2][0][0][0]*multi2),CLUSTER_1,CLUSTER_9
dE,numpy.array(ddo['OP']['particles'][parameter2][0][0][0]*multi2),CLUSTER_1,CLUSTER_9
dpp,numpy.array(dpp_from_dE(ddo['OP']['particles'][parameter2][0][0][0]*multi2),CLUSTER_1,CLUSTER_9
y_fine,"numpy.array(range(0,30000)",CLUSTER_1,CLUSTER_9
y,"numpy.array(range(0,31)",CLUSTER_1,CLUSTER_9
x,numpy.array(ddo[key][parameter][0]*1E3),CLUSTER_1,CLUSTER_9
y_fine,"numpy.array(range(0,30000)",CLUSTER_1,CLUSTER_9
y,"numpy.array(range(0,31)",CLUSTER_1,CLUSTER_9
x,numpy.array(ddo[key][parameter][0]*1E3),CLUSTER_1,CLUSTER_9
y_fine,"numpy.array(range(0,30000)",CLUSTER_1,CLUSTER_9
y,"numpy.array(range(0,31)",CLUSTER_1,CLUSTER_9
x,numpy.array(ddo[key][parameter][0]*1E3),CLUSTER_1,CLUSTER_9
y_fine,"numpy.array(range(0,30000)",CLUSTER_1,CLUSTER_9
y,"numpy.array(range(0,31)",CLUSTER_1,CLUSTER_9
x,numpy.array(ddo[key][parameter][0]*1E3),CLUSTER_1,CLUSTER_9
s,numpy.ones(len(x),CLUSTER_1,CLUSTER_9
s,numpy.ones(len(x),CLUSTER_1,CLUSTER_9
n,numpy.argmax(ampl_h[4:]),CLUSTER_1,CLUSTER_9
n,numpy.argmax(ampl_h[4:]),CLUSTER_1,CLUSTER_9
correlation,numpy.mean(dE**2),CLUSTER_1,CLUSTER_9
mean_x,numpy.mean(x),CLUSTER_1,CLUSTER_9
mean_x,numpy.mean(x),CLUSTER_1,CLUSTER_9
mean_x,numpy.mean(x),CLUSTER_1,CLUSTER_9
mean_x,numpy.mean(x),CLUSTER_1,CLUSTER_9
dE_rms,numpy.sqrt((np.mean(dE**2),CLUSTER_1,CLUSTER_9
dpp_rms,numpy.sqrt((np.mean(dpp**2),CLUSTER_1,CLUSTER_9
dpp_pyorbit,numpy.sqrt(correlation),CLUSTER_1,CLUSTER_9
dps,"numpy.linspace(-2.5E-3,2.5E-3,num_sims)",CLUSTER_1,CLUSTER_9
dps,"numpy.linspace(-2.5E-3,2.5E-3,num_sims)",CLUSTER_1,CLUSTER_9
dps,"numpy.linspace(-2.5E-3,2.5E-3,num_sims)",CLUSTER_1,CLUSTER_9
dps,"numpy.linspace(-2.5E-3,2.5E-3,num_sims)",CLUSTER_1,CLUSTER_9
dps,"numpy.linspace(-2.5E-3,2.5E-3,num_sims)",CLUSTER_1,CLUSTER_9
hann,numpy.hanning(N_turns),CLUSTER_1,CLUSTER_9
hann,numpy.hanning(N_turns),CLUSTER_1,CLUSTER_9
freq_h,numpy.fft.rfftfreq(N_turns),CLUSTER_1,CLUSTER_9
freq_h,numpy.fft.rfftfreq(N_turns),CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(harmonic_fn,ddo[key]['turn'][0]+1,x,method='trf',bounds=((offset_min,amp_min,-np.inf,freq_min)",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(harmonic_fn,ddo[key]['turn'][0]+1,x,method='trf',bounds=((offset_min,amp_min,-np.inf,freq_min)",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(harmonic_fn,ddo[key]['turn'][0]+1,x,method='trf',bounds=((offset_min,amp_min,-np.inf,freq_min)",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(harmonic_fn,ddo[key]['turn'][0]+1,x,method='trf',bounds=((offset_min,amp_min,-np.inf,freq_min)",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(quadratic,freq_h[n-1:n+2],ampl_h[n-1:n+2])",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(quadratic,freq_h[n-1:n+2],ampl_h[n-1:n+2])",CLUSTER_1,CLUSTER_9
important_words,json.load(f),CLUSTER_3,CLUSTER_10
coefficients,numpy.array(initial_coefficients),CLUSTER_3,CLUSTER_10
sample_feature_matrix,"numpy.array([[1.,2.,-1.],[1.,0.,1.]])",CLUSTER_3,CLUSTER_10
sample_sentiment,"numpy.array([+1,-1])",CLUSTER_3,CLUSTER_10
coefficients,numpy.zeros(194),CLUSTER_3,CLUSTER_10
coefficients,numpy.zeros(194),CLUSTER_3,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_3,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_3,CLUSTER_10
log_likelihood_all_ma,numpy.convolve(np.array(log_likelihood_all),CLUSTER_3,CLUSTER_10
score,"numpy.dot(feature_matrix,coefficients)",CLUSTER_3,CLUSTER_10
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_3,CLUSTER_10
lp,numpy.sum((indicator-1),CLUSTER_3,CLUSTER_10
mask,numpy.isinf(logexp),CLUSTER_3,CLUSTER_10
logexp,numpy.log(1.+np.exp(-scores),CLUSTER_3,CLUSTER_10
sales,"pandas.read_csv('data/sales-feb-2015.csv',index_col='Date',parse_dates=True)",CLUSTER_8,CLUSTER_3
sp500,"pandas.read_csv('data/sp500.csv',parse_dates=True,index_col='Date')",CLUSTER_8,CLUSTER_3
r,numpy.zeros(Nj),CLUSTER_1,CLUSTER_10
points,"numpy.zeros((Nj,Ni,2)",CLUSTER_1,CLUSTER_10
alpha,"numpy.linspace(0.0,-2*np.pi,Ni)",CLUSTER_1,CLUSTER_10
P_freestream,"numpy.array([rho(293.15,101325.0)",CLUSTER_1,CLUSTER_10
vetor2,"numpy.arange(0.,4.5,.5)",CLUSTER_4,CLUSTER_11
x,"numpy.arange(1,10,0.25)",CLUSTER_4,CLUSTER_11
d,"numpy.arange(1,10)",CLUSTER_4,CLUSTER_11
b,numpy.arange(10),CLUSTER_4,CLUSTER_11
vetor1,"numpy.array([0,1,2,3,4,5,6,7,8])",CLUSTER_4,CLUSTER_11
c,"numpy.array([1+2j,3+4j,5+6*1j])",CLUSTER_4,CLUSTER_11
b,"numpy.array([True,False,False,True])",CLUSTER_4,CLUSTER_11
s,"numpy.array(['Python','R','Julia'])",CLUSTER_4,CLUSTER_11
matriz,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_4,CLUSTER_11
x,"numpy.array([1,2])",CLUSTER_4,CLUSTER_11
y,"numpy.array([1.0,2.0])",CLUSTER_4,CLUSTER_11
z,"numpy.array([1,2],dtype=np.float64)",CLUSTER_4,CLUSTER_11
matriz3,"numpy.array([[24,76],[35,89]],dtype=float)",CLUSTER_4,CLUSTER_11
A,"numpy.array([15,23,63,94,75])",CLUSTER_4,CLUSTER_11
a,"numpy.array([1,2,3,4])",CLUSTER_4,CLUSTER_11
b,"numpy.array([4,2,2,4])",CLUSTER_4,CLUSTER_11
a,"numpy.array([1.2,1.5,1.6,2.5,3.5,4.5])",CLUSTER_4,CLUSTER_11
B,"numpy.array([1,2,3,4])",CLUSTER_4,CLUSTER_11
v,"numpy.array([1,2,3])",CLUSTER_4,CLUSTER_11
w,"numpy.array([5,6])",CLUSTER_4,CLUSTER_11
matriz1,"numpy.ones((2,3)",CLUSTER_4,CLUSTER_11
b,numpy.around(a),CLUSTER_4,CLUSTER_11
matriz2,numpy.matrix(lista),CLUSTER_4,CLUSTER_11
r,numpy.copy(v),CLUSTER_4,CLUSTER_11
d,"numpy.diag(np.array([1,2,3,4])",CLUSTER_4,CLUSTER_11
a,numpy.diag(np.arange(3),CLUSTER_4,CLUSTER_11
z,numpy.eye(3),CLUSTER_4,CLUSTER_11
arquivo,"numpy.loadtxt(filename,delimiter=',',usecols=(0,1,2,3)",CLUSTER_4,CLUSTER_11
"var1,var2","numpy.loadtxt(filename,delimiter=',',usecols=(0,1)",CLUSTER_4,CLUSTER_11
positive_counts,collections.Counter(),CLUSTER_12,CLUSTER_10
negative_counts,collections.Counter(),CLUSTER_12,CLUSTER_10
total_counts,collections.Counter(),CLUSTER_12,CLUSTER_10
pos_neg_ratios,collections.Counter(),CLUSTER_12,CLUSTER_10
review_counter,collections.Counter(),CLUSTER_12,CLUSTER_10
frequency_frequency,collections.Counter(),CLUSTER_12,CLUSTER_10
most_similar,collections.Counter(),CLUSTER_12,CLUSTER_10
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_10
layer_0,numpy.zeros(10),CLUSTER_12,CLUSTER_10
layer_1,numpy.zeros(5),CLUSTER_12,CLUSTER_10
layer_1,numpy.zeros(5),CLUSTER_12,CLUSTER_10
most_similar[word],"numpy.dot(mlp_full.weights_0_1[mlp_full.word2index[word]],mlp_full.weights_0_1[mlp_full.word2index[focus]])",CLUSTER_12,CLUSTER_10
"hist,edges","numpy.histogram(list(map(lambdax:x[1],pos_neg_ratios.most_common()",CLUSTER_12,CLUSTER_10
"hist,edges","numpy.histogram(list(map(lambdax:x[1],frequency_frequency.most_common()",CLUSTER_12,CLUSTER_10
start,time.time(),CLUSTER_12,CLUSTER_10
start,time.time(),CLUSTER_12,CLUSTER_10
tsne,"sklearn.manifold.TSNE(n_components=2,random_state=0)",CLUSTER_12,CLUSTER_10
city_datadf,"pandas.DataFrame({'city':city,'city_type':city_type,'fare_data':fare_data,'ride_perdata':ride_perdata,'driver_perdata':driver_perdata})",CLUSTER_1,CLUSTER_3
Result_merge1,"pandas.merge(ride_df,city_df,on='city',how='outer')",CLUSTER_1,CLUSTER_3
city_df,pandas.read_csv(file_load1),CLUSTER_1,CLUSTER_3
ride_df,pandas.read_csv(file_load2),CLUSTER_1,CLUSTER_3
factors,numpy.mat(factors),CLUSTER_4,CLUSTER_11
riskfree,numpy.mat(riskfree),CLUSTER_4,CLUSTER_11
portfolios,numpy.mat(portfolios),CLUSTER_4,CLUSTER_11
S,"numpy.mat(cov(hstack((moments1,moments2)",CLUSTER_4,CLUSTER_11
G,"numpy.mat(zeros((N*K+N+K,N*K+N+K)",CLUSTER_4,CLUSTER_11
avgExcessReturns,"numpy.mean(excessReturns,0)",CLUSTER_4,CLUSTER_11
values,"numpy.mean(u[:,i])",CLUSTER_4,CLUSTER_11
X,"numpy.hstack((ones((T,1)",CLUSTER_4,CLUSTER_11
X,"numpy.hstack((ones((T,1)",CLUSTER_4,CLUSTER_11
c,"numpy.hstack((a,b)",CLUSTER_4,CLUSTER_11
moments1,"numpy.multiply(moments1,kron(ones((1,N)",CLUSTER_4,CLUSTER_11
s,numpy.sqrt(variances),CLUSTER_4,CLUSTER_11
"temp[:,1:]",numpy.diag(values.A1),CLUSTER_4,CLUSTER_11
variances,numpy.diag(vcv[(K+1),CLUSTER_4,CLUSTER_11
out,"numpy.linalg.lstsq(X,excessReturns)",CLUSTER_4,CLUSTER_11
out,"numpy.linalg.lstsq(beta.T,avgExcessReturns.T)",CLUSTER_4,CLUSTER_11
vcv,numpy.linalg.inv(G.T),CLUSTER_4,CLUSTER_11
data,pandas.read_csv('FamaFrench.csv'),CLUSTER_4,CLUSTER_11
df,pandas.read_csv('../datasets/UN.csv'),CLUSTER_8,CLUSTER_4
df1,"pandas.DataFrame({'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']},
index=[0,1,2,3])",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame({'A':['A4','A5','A6','A7'],
'B':['B4','B5','B6','B7'],
'C':['C4','C5','C6','C7'],
'D':['D4','D5','D6','D7']},
index=[4,5,6,7])",CLUSTER_8,CLUSTER_3
df3,"pandas.DataFrame({'A':['A8','A9','A10','A11'],
'B':['B8','B9','B10','B11'],
'C':['C8','C9','C10','C11'],
'D':['D8','D9','D10','D11']},
index=[8,9,10,11])",CLUSTER_8,CLUSTER_3
left,"pandas.DataFrame({'key':['K0','K1','K2','K3'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_8,CLUSTER_3
right,"pandas.DataFrame({'key':['K0','K1','K2','K3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_8,CLUSTER_3
left,"pandas.DataFrame({'key1':['K0','K0','K1','K2'],
'key2':['K0','K1','K0','K1'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_8,CLUSTER_3
right,"pandas.DataFrame({'key1':['K0','K1','K1','K3'],
'key2':['K0','K0','K0','K0'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_8,CLUSTER_3
left,"pandas.DataFrame({'A':['A0','A1','A2'],
'B':['B0','B1','B2']},
index=['K0','K1','K2'])",CLUSTER_8,CLUSTER_3
right,"pandas.DataFrame({'C':['C0','C1','C2'],
'D':['D0','D1','D2']},
index=['K0','K2','K3'])",CLUSTER_8,CLUSTER_3
df_nans,pandas.DataFrame(train.isnull(),CLUSTER_7,CLUSTER_3
df_nans,pandas.DataFrame(train.isnull(),CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data.query(""data_type=='train'"")",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data.query(""data_type=='train'"")",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data.query(""data_type=='train'"")",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data.query(""data_type=='train'"")",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data.query(""data_type=='train'"")",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data.query(""data_type=='train'"")",CLUSTER_7,CLUSTER_3
data,"pandas.concat([train,val,test],ignore_index=True)",CLUSTER_7,CLUSTER_3
train,"pandas.read_csv('dataset/train2.tsv',sep='\t',header=None,index_col=0,names=columns)",CLUSTER_7,CLUSTER_3
val,"pandas.read_csv('dataset/val2.tsv',sep='\t',header=None,index_col=0,names=columns)",CLUSTER_7,CLUSTER_3
test,"pandas.read_csv('dataset/test2.tsv',sep='\t',header=None,index_col=0,names=columns)",CLUSTER_7,CLUSTER_3
f,"matplotlib.pyplot.figure(figsize=(20,7)",CLUSTER_7,CLUSTER_3
f,"matplotlib.pyplot.figure(figsize=(20,7)",CLUSTER_7,CLUSTER_3
x,numpy.arange(16),CLUSTER_3,CLUSTER_6
ind,"numpy.array([[0,2],
[1,3]])",CLUSTER_3,CLUSTER_6
row,"numpy.array([0,1,2])",CLUSTER_3,CLUSTER_6
col,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
X_test,"numpy.arange(0.0,5.0,0.01)",CLUSTER_7,CLUSTER_8
"movie_data[""score""]","numpy.where(list(movie_data[""imdb_score""]>=7)",CLUSTER_7,CLUSTER_8
"movie_data[""score""]","numpy.where(list(movie_data[""imdb_score""]>=7)",CLUSTER_7,CLUSTER_8
X_reg,"numpy.sort(5*rng.rand(80,1)",CLUSTER_7,CLUSTER_8
y_reg,numpy.sin(X_reg),CLUSTER_7,CLUSTER_8
y_reg,numpy.sin(X_reg),CLUSTER_7,CLUSTER_8
X_reg,"numpy.linspace(0,6,100)",CLUSTER_7,CLUSTER_8
view_data,"pandas.DataFrame(node_data[node_data_to_view],columns=col_names)",CLUSTER_7,CLUSTER_8
ml_data,"pandas.concat([movie_data_cats,movie_data_num],axis=1)",CLUSTER_7,CLUSTER_8
movie_data,"pandas.read_csv(""movie_2.csv"")",CLUSTER_7,CLUSTER_8
movie_data,"pandas.read_csv(""movie_2.csv"")",CLUSTER_7,CLUSTER_8
encoder_dict[colname],sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.4,random_state=0)",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train)",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train)",CLUSTER_7,CLUSTER_8
testing_dataset,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_8
clf,"sklearn.tree.DecisionTreeClassifier(max_depth=max_depth,
min_samples_split=min_samples_split,
min_samples_leaf=min_samples_leaf,
criterion=criterion,
max_features=max_features,
random_state=0)",CLUSTER_7,CLUSTER_8
clf_all,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeClassifier(max_depth=i),CLUSTER_7,CLUSTER_8
clf,"AdaBoostClassifier(base_estimator=sklearn.tree.DecisionTreeClassifier(max_depth=d,criterion=criterion)",CLUSTER_7,CLUSTER_8
clf,"AdaBoostClassifier(base_estimator=sklearn.tree.DecisionTreeClassifier(max_depth=8,criterion=""gini"")",CLUSTER_7,CLUSTER_8
regr_1,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_7,CLUSTER_8
regr_2,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_7,CLUSTER_8
regr_3,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_8
reg_tree,sklearn.tree.DecisionTreeRegressor(max_depth=4),CLUSTER_7,CLUSTER_8
ada_tree,sklearn.ensemble.AdaBoostRegressor(DecisionTreeRegressor(max_depth=4),CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=d,criterion=criterion)",CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=8,criterion=""gini"")",CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=n,criterion=criterion,max_depth=d,n_jobs=1,random_state=None)",CLUSTER_7,CLUSTER_8
X,pandas.get_dummies(X),CLUSTER_7,CLUSTER_8
data,pandas.read_csv('summary.csv'),CLUSTER_7,CLUSTER_8
tables,"pandas.read_html(""metadata.htm"")",CLUSTER_7,CLUSTER_8
clf,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=3)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.15,random_state=123)",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('winequality-white.csv',delimiter=';')",CLUSTER_1,CLUSTER_3
digit_test_01,"pandas.DataFrame(test0[:,0:24].reshape(20000,576)",CLUSTER_7,CLUSTER_5
symbol_test_02,"pandas.DataFrame(test0[:,24:48].reshape(20000,576)",CLUSTER_7,CLUSTER_5
digit_test_03,"pandas.DataFrame(test0[:,48:72].reshape(20000,576)",CLUSTER_7,CLUSTER_5
symbol_test_04,"pandas.DataFrame(test0[:,72:96].reshape(20000,576)",CLUSTER_7,CLUSTER_5
digit_test_05,"pandas.DataFrame(test0[:,96:120].reshape(20000,576)",CLUSTER_7,CLUSTER_5
result_digit_1,"pandas.Series(result_digit_1,name=""label1"")",CLUSTER_7,CLUSTER_5
result_symbol_2,"pandas.Series(result_symbol_2,name=""label2"")",CLUSTER_7,CLUSTER_5
result_digit_3,"pandas.Series(result_digit_3,name=""label3"")",CLUSTER_7,CLUSTER_5
result_symbol_4,"pandas.Series(result_symbol_4,name=""label4"")",CLUSTER_7,CLUSTER_5
result_digit_5,"pandas.Series(result_digit_5,name=""label5"")",CLUSTER_7,CLUSTER_5
result,"pandas.Series(result,name=""label"")",CLUSTER_7,CLUSTER_5
Total_train,"pandas.concat([Y_train,train],axis=1)",CLUSTER_7,CLUSTER_5
digit_test,"pandas.concat([digit_test_01,digit_test_03,digit_test_05],axis=0)",CLUSTER_7,CLUSTER_5
symbol_test,"pandas.concat([symbol_test_02,symbol_test_04],axis=0)",CLUSTER_7,CLUSTER_5
output,"pandas.concat([result_digit_1,result_symbol_2,result_digit_3,result_symbol_4,result_digit_5],axis=1)",CLUSTER_7,CLUSTER_5
submission,pandas.concat([pd.Series(range(20000),CLUSTER_7,CLUSTER_5
train,"pandas.read_csv(""F:/Datasets_handwritten/train_data.csv"",index_col=0)",CLUSTER_7,CLUSTER_5
Y_train,"pandas.read_csv(""F:/Datasets_handwritten/train_labels.csv"",index_col=0)",CLUSTER_7,CLUSTER_5
test,"pandas.read_csv(""F:/Datasets_handwritten/test_data.csv"",index_col=0)",CLUSTER_7,CLUSTER_5
neighbors,"numpy.arange(1,11)",CLUSTER_7,CLUSTER_5
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_5
neighbors,"numpy.arange(1,11)",CLUSTER_7,CLUSTER_5
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_5
result,numpy.zeros(length),CLUSTER_7,CLUSTER_5
knn_pred_classes,"numpy.argmax(predict_labels,axis=1)",CLUSTER_7,CLUSTER_5
Y_digit_true,"numpy.argmax(Y_digit_test_PCs,axis=1)",CLUSTER_7,CLUSTER_5
knn_pred_classes_s,"numpy.argmax(s_predict_labels,axis=1)",CLUSTER_7,CLUSTER_5
Y_symbol_true,"numpy.argmax(Y_symbol_test_PCs,axis=1)",CLUSTER_7,CLUSTER_5
Y_digit_pred_classes,"numpy.argmax(Y_digit_pred,axis=1)",CLUSTER_7,CLUSTER_5
Y_digit_true,"numpy.argmax(Y_digit_val,axis=1)",CLUSTER_7,CLUSTER_5
Y_symbol_pred_classes,"numpy.argmax(Y_symbol_pred,axis=1)",CLUSTER_7,CLUSTER_5
Y_symbol_true,"numpy.argmax(Y_symbol_val,axis=1)",CLUSTER_7,CLUSTER_5
result_digit_1,"numpy.argmax(result_digit_1,axis=1)",CLUSTER_7,CLUSTER_5
result_symbol_2,"numpy.argmax(result_symbol_2,axis=1)",CLUSTER_7,CLUSTER_5
result_digit_3,"numpy.argmax(result_digit_3,axis=1)",CLUSTER_7,CLUSTER_5
result_symbol_4,"numpy.argmax(result_symbol_4,axis=1)",CLUSTER_7,CLUSTER_5
result_digit_5,"numpy.argmax(result_digit_5,axis=1)",CLUSTER_7,CLUSTER_5
digit_sorted_dela_errors,numpy.argsort(digit_delta_pred_true_errors),CLUSTER_7,CLUSTER_5
digit_true_prob_errors,"numpy.diagonal(np.take(Y_digit_pred_errors,Y_digit_true_errors,axis=1)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
"plt.imshow(grid_data,interpolation","""none"",cmap=matplotlib.pyplot.get_cmap('gray')",CLUSTER_7,CLUSTER_5
"plt.imshow(grid_data,interpolation","""none"",cmap=matplotlib.pyplot.get_cmap('gray')",CLUSTER_7,CLUSTER_5
"plt.imshow(grid_data,interpolation","""none"",cmap=matplotlib.pyplot.get_cmap('gray')",CLUSTER_7,CLUSTER_5
"plt.imshow(grid_data,interpolation","""none"",cmap=matplotlib.pyplot.get_cmap('gray')",CLUSTER_7,CLUSTER_5
"plt.imshow(digit_test_01.iloc[0].as_matrix().reshape(24,24),cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
"plt.imshow(symbol_test_02.iloc[0].as_matrix().reshape(24,24),cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
"plt.imshow(digit_test_03.iloc[0].as_matrix().reshape(24,24),cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
"plt.imshow(symbol_test_04.iloc[0].as_matrix().reshape(24,24),cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
"plt.imshow(digit_test_05.iloc[0].as_matrix().reshape(24,24),cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
cmap,matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
cmap,matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
cmap,matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
cmap,matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(2,1)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(2,1)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(nrows,ncols,sharex=True,sharey=True)",CLUSTER_7,CLUSTER_5
g,seaborn.countplot(Total_train['label']),CLUSTER_7,CLUSTER_5
g,seaborn.countplot(Y_symbol_train),CLUSTER_7,CLUSTER_5
"X_digit_train_PCs,X_digit_test_PCs,Y_digit_train_PCs,Y_digit_test_PCs","sklearn.model_selection.train_test_split(X_digit_train_PCs,Y_digit_train,test_size=0.25,random_state=random_seed)",CLUSTER_7,CLUSTER_5
"X_symbol_train_PCs,X_symbol_test_PCs,Y_symbol_train_PCs,Y_symbol_test_PCs","sklearn.model_selection.train_test_split(X_symbol_train_PCs,Y_symbol_train,test_size=0.25,random_state=random_seed)",CLUSTER_7,CLUSTER_5
"X_digit_train,X_digit_val,Y_digit_train,Y_digit_val","sklearn.model_selection.train_test_split(X_digit_train,Y_digit_train,test_size=0.1,random_state=random_seed)",CLUSTER_7,CLUSTER_5
"X_symbol_train,X_symbol_val,Y_symbol_train,Y_symbol_val","sklearn.model_selection.train_test_split(X_symbol_train,Y_symbol_train,test_size=0.1,random_state=random_seed)",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(knn,X_digit_train_PCs,Y_digit_train_PCs,cv=5,scoring='accuracy')",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(knn,X_symbol_train_PCs,Y_symbol_train_PCs,cv=5,scoring='accuracy')",CLUSTER_7,CLUSTER_5
confusion_mtx_d,"sklearn.metrics.confusion_matrix(Y_digit_true,knn_pred_classes)",CLUSTER_7,CLUSTER_5
confusion_mtx_s,"sklearn.metrics.confusion_matrix(Y_symbol_true,knn_pred_classes_s)",CLUSTER_7,CLUSTER_5
confusion_mtx_d,"sklearn.metrics.confusion_matrix(Y_digit_true,Y_digit_pred_classes)",CLUSTER_7,CLUSTER_5
confusion_mtx_s,"sklearn.metrics.confusion_matrix(Y_symbol_true,Y_symbol_pred_classes)",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(2),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(.90),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=60),CLUSTER_7,CLUSTER_5
S_PC_2,sklearn.decomposition.PCA(2),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(.90),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=50),CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.figure(figsize=(6,4)",CLUSTER_8,CLUSTER_3
payNum,"pandas.read_csv('part-00000',sep='\t',header=None,encoding='gbk')",CLUSTER_8,CLUSTER_3
mse,numpy.mean((lm.predict(test_X),CLUSTER_11,CLUSTER_5
mse,numpy.mean((lm.predict(test_X),CLUSTER_11,CLUSTER_5
ETF_X,pandas.DataFrame(x_tmp),CLUSTER_11,CLUSTER_5
ETF_X,pandas.DataFrame(x_tmp),CLUSTER_11,CLUSTER_5
ETF_train,pandas.read_csv(filename),CLUSTER_11,CLUSTER_5
ETF_train,pandas.read_csv(filename),CLUSTER_11,CLUSTER_5
ETF_train,pandas.read_csv(filename),CLUSTER_11,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_11,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_11,CLUSTER_5
point_1,"random.randint(0,len(chromosome_1)",CLUSTER_11,CLUSTER_5
point_2,"random.randint(0,len(chromosome_1)",CLUSTER_11,CLUSTER_5
point_1,"random.randint(0,len(chromosome_1)",CLUSTER_11,CLUSTER_5
point_2,"random.randint(0,len(chromosome_1)",CLUSTER_11,CLUSTER_5
point_1,"random.randint(0,len(chromosome)",CLUSTER_11,CLUSTER_5
point_2,"random.randint(0,len(chromosome)",CLUSTER_11,CLUSTER_5
point_1,"random.randint(0,len(chromosome)",CLUSTER_11,CLUSTER_5
point_2,"random.randint(0,len(chromosome)",CLUSTER_11,CLUSTER_5
r,"random.randint(0,len(y_pred)",CLUSTER_11,CLUSTER_5
random_rate,random.random(),CLUSTER_11,CLUSTER_5
random_rate,random.random(),CLUSTER_11,CLUSTER_5
Totalstarttime,datetime.datetime.now(),CLUSTER_11,CLUSTER_5
cost,numpy.squeeze(cost),CLUSTER_1,CLUSTER_10
data['category'],"pandas.Categorical(['a','b','a','a','b'],
categories=['a','b'])",CLUSTER_8,CLUSTER_3
data,"pandas.DataFrame({'x0':[1,2,3,4,5],
'x1':[0.01,-0.01,0.25,-4.1,0.],
'y':[-1.5,0.,3.6,1.3,-2.]})",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame(data.values,columns=['one','two','three'])",CLUSTER_8,CLUSTER_3
data,"pandas.DataFrame({'x0':[1,2,3,4,5],
'x1':[0.01,-0.01,0.25,-4.1,0.],
'y':[-1.5,0.,3.6,1.3,-2.]})",CLUSTER_8,CLUSTER_3
new_data,"pandas.DataFrame({'x0':[6,7,8,9],
'x1':[3.1,-0.5,0,2.3],
'y':[1,2,3,4]})",CLUSTER_8,CLUSTER_3
data,"pandas.DataFrame({
'key1':['a','a','b','b','a','b','a','b'],
'key2':[0,1,0,1,0,1,0,0],
'v1':[1,2,3,4,5,6,7,8],
'v2':[-1,0,2.5,-0.5,4.0,-1.2,0.2,-1.7]})",CLUSTER_8,CLUSTER_3
data,"pandas.DataFrame(X,columns=['col0','col1','col2'])",CLUSTER_8,CLUSTER_3
coef,pandas.Series(coef.squeeze(),CLUSTER_8,CLUSTER_3
dummies,"pandas.get_dummies(data.category,prefix='category')",CLUSTER_8,CLUSTER_3
y,"numpy.dot(X,beta)",CLUSTER_8,CLUSTER_3
"coef,resid,_,_","numpy.linalg.lstsq(X,y)",CLUSTER_8,CLUSTER_3
colormap,"numpy.array([
""
""
""
""
colormap=colormap[:n_topics]


top_3_words_lsa=get_top_n_words(3,lsa_keys,small_document_term_matrix,small_count_vectorizer)",CLUSTER_0,CLUSTER_5
word_vectors,"numpy.zeros((n_top_words,vectorized_headlines.shape[1])",CLUSTER_0,CLUSTER_5
temp_word_vector,"numpy.zeros((1,document_term_matrix.shape[1])",CLUSTER_0,CLUSTER_5
mean_article_in_that_topic,"numpy.mean(articles_in_that_topic,axis=0)",CLUSTER_0,CLUSTER_5
vectorized_total,"numpy.sum(vectorized_headlines,axis=0)",CLUSTER_0,CLUSTER_5
articles_in_that_topic,numpy.vstack(articles_in_that_topic),CLUSTER_0,CLUSTER_5
complete_topic_matrix,numpy.vstack(yearly_topic_matrices),CLUSTER_0,CLUSTER_5
word_indices,numpy.flip(np.argsort(vectorized_total),CLUSTER_0,CLUSTER_5
word_values,numpy.flip(np.sort(vectorized_total),CLUSTER_0,CLUSTER_5
top_n_word_indices,numpy.flip(np.argsort(temp_vector_sum),CLUSTER_0,CLUSTER_5
tagged_headlines,pandas.DataFrame({'tags':tagged_headlines}),CLUSTER_0,CLUSTER_5
yearly_topic_counts,pandas.DataFrame(np.array(yearly_counts),CLUSTER_0,CLUSTER_5
raw_data,"pandas.read_csv(datafile,parse_dates=[0],infer_datetime_format=True)",CLUSTER_0,CLUSTER_5
tagged_headlines,"pandas.read_csv('abcnews-pos-tagged.csv',index_col=0)",CLUSTER_0,CLUSTER_5
count_pairs,collections.Counter(keys),CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,8)",CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(18,8)",CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(18,8)",CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(3,figsize=(18,16)",CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,8)",CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,8)",CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(14,10)",CLUSTER_0,CLUSTER_5
lsa_model,sklearn.decomposition.TruncatedSVD(n_components=n_topics),CLUSTER_0,CLUSTER_5
tsne_lsa_model,"sklearn.manifold.TSNE(n_components=2,perplexity=50,learning_rate=100,
n_iter=2000,verbose=1,random_state=0,angle=0.75)",CLUSTER_0,CLUSTER_5
tsne_lda_model,"sklearn.manifold.TSNE(n_components=2,perplexity=50,learning_rate=100,
n_iter=2000,verbose=1,random_state=0,angle=0.75)",CLUSTER_0,CLUSTER_5
lda_model,"sklearn.decomposition.LatentDirichletAllocation(n_components=n_topics,learning_method='online',
random_state=0,verbose=0)",CLUSTER_0,CLUSTER_5
big_lda_model,"sklearn.decomposition.LatentDirichletAllocation(n_components=n_topics,learning_method='online',verbose=1)",CLUSTER_0,CLUSTER_5
res_work_column_bad,numpy.array(res_work['price']),CLUSTER_7,CLUSTER_5
res_work_id,numpy.array(res_work.index),CLUSTER_7,CLUSTER_5
res_work_column[i-100000],numpy.exp(best_RF_test[n]),CLUSTER_7,CLUSTER_5
train['price'],numpy.log(train['price']),CLUSTER_7,CLUSTER_5
train,"pandas.read_csv('Train.csv',index_col='id')",CLUSTER_7,CLUSTER_5
test,"pandas.read_csv('Test.csv',index_col='id')",CLUSTER_7,CLUSTER_5
res_work,"pandas.read_csv('result_work',index_col='id')",CLUSTER_7,CLUSTER_5
test_big,"pandas.read_csv('Test.csv',index_col='id')",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=1)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=1)",CLUSTER_7,CLUSTER_5
rf_regr,"sklearn.ensemble.RandomForestRegressor(n_estimators=500,n_jobs=-1)",CLUSTER_7,CLUSTER_5
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,n_jobs=-1)",CLUSTER_7,CLUSTER_5
dic_dfs[i],pandas.DataFrame(),CLUSTER_7,CLUSTER_5
ans,pandas.DataFrame(data=(res_work_column),CLUSTER_7,CLUSTER_5
res_work,"pandas.Series(index=res_work_id,data=res_work_column)",CLUSTER_7,CLUSTER_5
data1,"pandas.concat([train['price'],train[var]],axis=1)",CLUSTER_7,CLUSTER_5
data1,"pandas.concat([train['price'],train[var]],axis=1)",CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_7,CLUSTER_5
d,"numpy.arange(0,11,1)",CLUSTER_1,CLUSTER_3
b,numpy.arange(4),CLUSTER_1,CLUSTER_3
a,numpy.arange(10),CLUSTER_1,CLUSTER_3
a,"numpy.array([20,30,40,50])",CLUSTER_1,CLUSTER_3
a,numpy.zeros((3),CLUSTER_1,CLUSTER_3
b,"numpy.ones((2,3)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(6,4)",CLUSTER_1,CLUSTER_3
z,"pandas.DataFrame(index=df.index,columns=df.columns)",CLUSTER_1,CLUSTER_3
df2,"pandas.DataFrame({'A':1.0,
'B':pd.Timestamp('20170102')",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(10,4)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({'A':['foo','bar','foo','bar','foo','bar','foo','foo'],
'B':['one','one','two','three','two','two','one','three'],
'C':np.random.randn(8)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(100,4)",CLUSTER_1,CLUSTER_3
s1,"pandas.Series([1,2,3,4,5,6],index=pd.date_range('20170102',periods=6)",CLUSTER_1,CLUSTER_3
s,"pandas.Series(['A','B','C','Aaba','Baca',np.nan,'CABA','dog','cat'])",CLUSTER_1,CLUSTER_3
ts,"pandas.Series(np.random.randint(0,500,len(rng)",CLUSTER_1,CLUSTER_3
ts,pandas.Series(np.random.randn(points),CLUSTER_1,CLUSTER_3
dates,"pandas.date_range('20170101',periods=6)",CLUSTER_1,CLUSTER_3
s1,"pd.Series([1,2,3,4,5,6],index=pandas.date_range('20170102',periods=6)",CLUSTER_1,CLUSTER_3
rng,"pandas.date_range('1/1/2017',periods=100,freq='S')",CLUSTER_1,CLUSTER_3
ts,"pd.Series(np.random.randn(points),index=pandas.date_range(startdate,periods=points)",CLUSTER_1,CLUSTER_3
precision,"sklearn.metrics.precision_score(y_true,y_pred)",CLUSTER_5,CLUSTER_6
recall,"sklearn.metrics.recall_score(y_true,y_pred)",CLUSTER_5,CLUSTER_6
y,numpy.cos(x),CLUSTER_1,CLUSTER_10
z,numpy.sin(x),CLUSTER_1,CLUSTER_10
x,"numpy.linspace(0,10*numpy.pi,10**3)",CLUSTER_1,CLUSTER_10
t,"numpy.linspace(0,2,10**3)",CLUSTER_1,CLUSTER_10
df,pandas.DataFrame(columns=headers),CLUSTER_8,CLUSTER_4
df_append,"pandas.DataFrame(table,columns=headers)",CLUSTER_8,CLUSTER_4
df,"pandas.concat([df,df_append])",CLUSTER_8,CLUSTER_4
"fig,axes","matplotlib.pyplot.subplots(6,6,sharex=True,sharey=True,figsize=(5,5)",CLUSTER_4,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(figsize=figsize,nrows=nrows,ncols=ncols,
sharey=True,sharex=True)",CLUSTER_4,CLUSTER_7
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_7
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_7
idx,numpy.arange(len(dataset.train_x),CLUSTER_4,CLUSTER_7
losses,numpy.array(losses),CLUSTER_4,CLUSTER_7
losses,numpy.array(losses),CLUSTER_4,CLUSTER_7
self.train_x,"numpy.rollaxis(self.train_x,3)",CLUSTER_4,CLUSTER_7
self.valid_x,"numpy.rollaxis(self.valid_x,3)",CLUSTER_4,CLUSTER_7
self.test_x,"numpy.rollaxis(self.test_x,3)",CLUSTER_4,CLUSTER_7
trainset,scipy.io.loadmat(data_dir+'train_32x32.mat'),CLUSTER_4,CLUSTER_7
testset,scipy.io.loadmat(data_dir+'test_32x32.mat'),CLUSTER_4,CLUSTER_7
"x,y",random.random(),CLUSTER_8,CLUSTER_4
discounted,numpy.array([val*(gamma**i),CLUSTER_2,CLUSTER_10
observations,numpy.empty(0),CLUSTER_2,CLUSTER_10
rewards,numpy.empty(0),CLUSTER_2,CLUSTER_10
actions,numpy.empty(0),CLUSTER_2,CLUSTER_10
policies,numpy.empty(0),CLUSTER_2,CLUSTER_10
observations,numpy.empty(0),CLUSTER_2,CLUSTER_10
rewards,numpy.empty(0),CLUSTER_2,CLUSTER_10
actions,numpy.empty(0),CLUSTER_2,CLUSTER_10
policies,numpy.empty(0),CLUSTER_2,CLUSTER_10
action,numpy.argmax(model_p.predict(observation),CLUSTER_2,CLUSTER_10
y,numpy.argmax(y[0]),CLUSTER_2,CLUSTER_10
"output_next_state[:,0]","numpy.clip(output_next_state[:,0],-2.4,2.4)",CLUSTER_2,CLUSTER_10
"output_next_state[:,2]","numpy.clip(output_next_state[:,2],-0.4,0.4)",CLUSTER_2,CLUSTER_10
discounted-,numpy.mean(discounted),CLUSTER_2,CLUSTER_10
x,"numpy.reshape(observation,[1,dimen])",CLUSTER_2,CLUSTER_10
discounted/,numpy.std(discounted),CLUSTER_2,CLUSTER_10
x,"numpy.hstack([x,[[action]]])",CLUSTER_2,CLUSTER_10
policies,"numpy.vstack([policies,policy])",CLUSTER_2,CLUSTER_10
observations,"numpy.vstack([observations,observation])",CLUSTER_2,CLUSTER_10
actions,"numpy.vstack([actions,action])",CLUSTER_2,CLUSTER_10
rewards,"numpy.vstack([rewards,reward])",CLUSTER_2,CLUSTER_10
prio_ucdp_full['log_best'],numpy.log(prio_ucdp_full['best']+1),CLUSTER_1,CLUSTER_3
updated_years,pandas.concat(list_sub),CLUSTER_1,CLUSTER_3
prio_full_updated,"pandas.concat([prio_full,updated_years])",CLUSTER_1,CLUSTER_3
prio_full,"pandas.merge(prio_grid,prio_cshape_codes,how='inner',on=['gid'])",CLUSTER_1,CLUSTER_3
prio_ucdp_full,"pandas.merge(prio_full_updated,ucdp_lean_agg,how='outer',on=['gid','year'])",CLUSTER_1,CLUSTER_3
ucdp,"pandas.read_csv(""data/ged181-csv.zip"")",CLUSTER_1,CLUSTER_3
prio_cshape_codes,"pandas.read_csv(""data/PRIO-GRIDYearlyVariablesfor1989-2014-2019-02-12.csv"")",CLUSTER_1,CLUSTER_3
results,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
core_samples_mask,"numpy.zeros_like(db.labels_,dtype=bool)",CLUSTER_9,CLUSTER_2
shp['Radius'],numpy.sqrt(shp['Area']/np.pi),CLUSTER_9,CLUSTER_2
district_df,pandas.DataFrame(shp),CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
cat_df,pandas.DataFrame([itemforcat_listincat_listforitemincat_list]),CLUSTER_9,CLUSTER_2
categories,pandas.DataFrame(sp_venues.groupby(['Category']),CLUSTER_9,CLUSTER_2
districts,pandas.DataFrame(sp_venues.groupby(['District']),CLUSTER_9,CLUSTER_2
coord_df,pandas.DataFrame(coordinates),CLUSTER_9,CLUSTER_2
onehot,"pandas.get_dummies(sp_venues[['Category']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
onehot,"pandas.get_dummies(sp_venues[['Category']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
sp_venues_onehot,"pandas.merge(sp_venues,onehot,left_index=True,right_index=True)",CLUSTER_9,CLUSTER_2
nationalities,pandas.read_csv('https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/664133/CH_Nationality_List_20171130_v1.csv'),CLUSTER_9,CLUSTER_2
db,"sklearn.cluster.DBSCAN(eps=0.09,min_samples=5)",CLUSTER_9,CLUSTER_2
Clus_dataSet,sklearn.preprocessing.StandardScaler(),CLUSTER_9,CLUSTER_2
y_pred,pandas.Series(y_pred),CLUSTER_7,CLUSTER_5
y_pred,pandas.Series(y_pred),CLUSTER_7,CLUSTER_5
y_pred,pandas.Series(entr_model2.predict(X_test),CLUSTER_7,CLUSTER_5
y_pred,pandas.Series(gini_model2.predict(X_test),CLUSTER_7,CLUSTER_5
potential_buyers,pandas.Series(gini_model2.predict(new_X),CLUSTER_7,CLUSTER_5
potential_buyers2,pandas.Series(best_model.predict(new_X),CLUSTER_7,CLUSTER_5
X_train,pandas.get_dummies(X_train),CLUSTER_7,CLUSTER_5
X_test,pandas.get_dummies(X_test),CLUSTER_7,CLUSTER_5
new_X,pandas.get_dummies(new_X),CLUSTER_7,CLUSTER_5
coffeeData,pandas.read_csv('RRDinerCoffeeData.csv'),CLUSTER_7,CLUSTER_5
entr_model,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',random_state=246)",CLUSTER_7,CLUSTER_5
gini_model,"sklearn.tree.DecisionTreeClassifier(criterion='gini',random_state=246)",CLUSTER_7,CLUSTER_5
entr_model2,"sklearn.tree.DecisionTreeClassifier(max_depth=3,criterion='entropy',random_state=246)",CLUSTER_7,CLUSTER_5
gini_model2,"sklearn.tree.DecisionTreeClassifier(max_depth=3,criterion='gini',random_state=246)",CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(entr_model,
out_file=None,
feature_names=NOPrediction.columns,
class_names=entr_model.classes_,
filled=True)",CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(gini_model,
out_file=None,
feature_names=NOPrediction.columns,
class_names=gini_model.classes_,
filled=True)",CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(entr_model2,
out_file=None,
feature_names=NOPrediction.columns,
class_names=entr_model2.classes_,
filled=True)",CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(gini_model2,
out_file=None,
feature_names=NOPrediction.columns,
class_names=gini_model2.classes_,
filled=True)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=246)",CLUSTER_7,CLUSTER_5
rf_model,"sklearn.ensemble.RandomForestClassifier(max_depth=3,random_state=246)",CLUSTER_7,CLUSTER_5
gs_cv,"sklearn.model_selection.GridSearchCV(rf_model,param_grid=params,cv=5)",CLUSTER_7,CLUSTER_5
train,"pandas.read_csv(""train.csv"")",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(""test.csv"")",CLUSTER_7,CLUSTER_8
add,"pandas.read_csv(""published_land_price.csv"")",CLUSTER_7,CLUSTER_8
levels,"pandas.DataFrame({'Variable':var,'Levels':l,'Datatype':t})",CLUSTER_7,CLUSTER_8
imp,"pandas.DataFrame(
model.feature_importances_,
columns=['Importance'],
index=X.columns
)",CLUSTER_7,CLUSTER_8
test,"pandas.DataFrame({'id':wine_type,'type':test_Y})",CLUSTER_7,CLUSTER_8
quality,"pandas.get_dummies(data.quality,prefix='quality')",CLUSTER_7,CLUSTER_8
data,"pandas.read_csv(""winequalityN.csv"")",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_7,CLUSTER_8
"_,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_7,CLUSTER_8
facet,"seaborn.FacetGrid(df,hue=target,aspect=4,row=row,col=col)",CLUSTER_7,CLUSTER_8
facet,"seaborn.FacetGrid(df,row=row,col=col)",CLUSTER_7,CLUSTER_8
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_7,CLUSTER_8
_,"seaborn.heatmap(
corr,
cmap=cmap,
square=True,
cbar_kws={'shrink':.9},
ax=ax,
annot=True,
annot_kws={'fontsize':12}
)",CLUSTER_7,CLUSTER_8
tree,sklearn.tree.DecisionTreeClassifier(random_state=99),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
"train_X,test_X,train_y,test_y","sklearn.model_selection.train_test_split(X,y,train_size=.7)",CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
creditData[feature],pandas.Categorical(creditData[feature]),CLUSTER_7,CLUSTER_5
df_cm,"pandas.DataFrame(cm,index=[iforiin[""No"",""Yes""]],
columns=[iforiin[""No"",""Yes""]])",CLUSTER_7,CLUSTER_5
df_cm,"pandas.DataFrame(cm,index=[iforiin[""No"",""Yes""]],
columns=[iforiin[""No"",""Yes""]])",CLUSTER_7,CLUSTER_5
df_cm,"pandas.DataFrame(cm,index=[iforiin[""No"",""Yes""]],
columns=[iforiin[""No"",""Yes""]])",CLUSTER_7,CLUSTER_5
df_cm,"pandas.DataFrame(cm,index=[iforiin[""No"",""Yes""]],
columns=[iforiin[""No"",""Yes""]])",CLUSTER_7,CLUSTER_5
df_cm,"pandas.DataFrame(cm,index=[iforiin[""No"",""Yes""]],
columns=[iforiin[""No"",""Yes""]])",CLUSTER_7,CLUSTER_5
creditData,"pandas.get_dummies(creditData,columns=oneHotCols)",CLUSTER_7,CLUSTER_5
creditData,"pandas.read_csv(""credit.csv"")",CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_predict,labels=[0,1])",CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_predict,labels=[0,1])",CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_predict,labels=[0,1])",CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_predict,labels=[0,1])",CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_predict,labels=[0,1])",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.30,random_state=1)",CLUSTER_7,CLUSTER_5
dTree,"sklearn.tree.DecisionTreeClassifier(criterion='gini',random_state=1)",CLUSTER_7,CLUSTER_5
dTreeR,"sklearn.tree.DecisionTreeClassifier(criterion='gini',max_depth=3,random_state=1)",CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(dTree,out_file=Credit_Tree_File,feature_names=list(X_train)",CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(dTreeR,out_file=Credit_Tree_FileR,feature_names=list(X_train)",CLUSTER_7,CLUSTER_5
retCode,"os.system(""dot-Tpngcredit_tree.dot-ocredit_tree.png"")",CLUSTER_7,CLUSTER_5
retCode,"os.system(""dot-Tpngcredit_treeR.dot-ocredit_treeR.png"")",CLUSTER_7,CLUSTER_5
bgcl,"sklearn.ensemble.BaggingClassifier(base_estimator=dTree,n_estimators=50,random_state=1)",CLUSTER_7,CLUSTER_5
abcl,"sklearn.ensemble.AdaBoostClassifier(n_estimators=10,random_state=1)",CLUSTER_7,CLUSTER_5
gbcl,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=50,random_state=1)",CLUSTER_7,CLUSTER_5
rfcl,"sklearn.ensemble.RandomForestClassifier(n_estimators=50,random_state=1,max_features=12)",CLUSTER_7,CLUSTER_5
self.Qta,numpy.zeros(n),CLUSTER_1,CLUSTER_10
self.Ka,"numpy.zeros(n,dtype=int)",CLUSTER_1,CLUSTER_10
self.optimalHistory,numpy.zeros(max_t),CLUSTER_1,CLUSTER_10
self.rewardHistory,numpy.zeros(max_t),CLUSTER_1,CLUSTER_10
self.Qta,numpy.zeros(n),CLUSTER_1,CLUSTER_10
self.Ka,"numpy.zeros(n,dtype=int)",CLUSTER_1,CLUSTER_10
self.optimalHistory,numpy.zeros(max_t),CLUSTER_1,CLUSTER_10
self.rewardHistory,numpy.zeros(max_t),CLUSTER_1,CLUSTER_10
self.Qta,numpy.zeros(n),CLUSTER_1,CLUSTER_10
self.Ka,"numpy.zeros(n,dtype=int)",CLUSTER_1,CLUSTER_10
self.optimalHistory,numpy.zeros(max_t),CLUSTER_1,CLUSTER_10
self.rewardHistory,numpy.zeros(max_t),CLUSTER_1,CLUSTER_10
self.averageRewardHistory,numpy.zeros(self.max_t),CLUSTER_1,CLUSTER_10
self.averageOptimalHistory,numpy.zeros(self.max_t),CLUSTER_1,CLUSTER_10
probArray,numpy.exp(self.Qta/self.tau),CLUSTER_1,CLUSTER_10
probArray,numpy.exp(self.Qta/self.tau),CLUSTER_1,CLUSTER_10
probArray,"numpy.delete(probArray,greedyAction)",CLUSTER_1,CLUSTER_10
X_new,numpy.array([[0.8]]),CLUSTER_4,CLUSTER_11
sample_weights,numpy.ones(m),CLUSTER_4,CLUSTER_11
bst_n_estimators,numpy.argmin(errors),CLUSTER_4,CLUSTER_11
cumulative_heads_ratio,"numpy.cumsum(coin_tosses,axis=0)",CLUSTER_4,CLUSTER_11
x1s,"numpy.linspace(axes[0],axes[1],100)",CLUSTER_4,CLUSTER_11
x2s,"numpy.linspace(axes[2],axes[3],100)",CLUSTER_4,CLUSTER_11
x1,"numpy.linspace(axes[0],axes[1],500)",CLUSTER_4,CLUSTER_11
"x1,x2","numpy.meshgrid(x1s,x2s)",CLUSTER_4,CLUSTER_11
cbar,matplotlib.pyplot.colorbar(ticks=[rnd_clf.feature_importances_.min(),CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,random_state=49)",CLUSTER_4,CLUSTER_11
"X,y","sklearn.datasets.make_moons(n_samples=500,noise=0.30,random_state=42)",CLUSTER_4,CLUSTER_11
rnd_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_4,CLUSTER_11
rnd_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_4,CLUSTER_11
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,max_leaf_nodes=16,n_jobs=-1,random_state=42)",CLUSTER_4,CLUSTER_11
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,n_jobs=-1,random_state=42)",CLUSTER_4,CLUSTER_11
rnd_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_4,CLUSTER_11
voting_clf,"sklearn.ensemble.VotingClassifier(
estimators=[('lr',log_clf)",CLUSTER_4,CLUSTER_11
voting_clf,"sklearn.ensemble.VotingClassifier(
estimators=[('lr',log_clf)",CLUSTER_4,CLUSTER_11
log_clf,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_4,CLUSTER_11
log_clf,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_4,CLUSTER_11
svm_clf,sklearn.svm.SVC(random_state=42),CLUSTER_4,CLUSTER_11
svm_clf,"sklearn.svm.SVC(probability=True,random_state=42)",CLUSTER_4,CLUSTER_11
svm_clf,"sklearn.svm.SVC(kernel=""rbf"",C=0.05,random_state=42)",CLUSTER_4,CLUSTER_11
bag_clf,"sklearn.ensemble.BaggingClassifier(
DecisionTreeClassifier(random_state=42)",CLUSTER_4,CLUSTER_11
bag_clf,"sklearn.ensemble.BaggingClassifier(
DecisionTreeClassifier(splitter=""random"",max_leaf_nodes=16,random_state=42)",CLUSTER_4,CLUSTER_11
bag_clf,"sklearn.ensemble.BaggingClassifier(
DecisionTreeClassifier(random_state=42)",CLUSTER_4,CLUSTER_11
tree_clf,sklearn.tree.DecisionTreeClassifier(random_state=42),CLUSTER_4,CLUSTER_11
tree_clf,"sklearn.tree.DecisionTreeClassifier(max_leaf_nodes=16,random_state=42+i)",CLUSTER_4,CLUSTER_11
iris,sklearn.datasets.load_iris(),CLUSTER_4,CLUSTER_11
ada_clf,"sklearn.ensemble.AdaBoostClassifier(
DecisionTreeClassifier(max_depth=1)",CLUSTER_4,CLUSTER_11
tree_reg1,"sklearn.tree.DecisionTreeRegressor(max_depth=2,random_state=42)",CLUSTER_4,CLUSTER_11
tree_reg2,"sklearn.tree.DecisionTreeRegressor(max_depth=2,random_state=42)",CLUSTER_4,CLUSTER_11
tree_reg3,"sklearn.tree.DecisionTreeRegressor(max_depth=2,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=3,learning_rate=1.0,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt_slow,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=200,learning_rate=0.1,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=120,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt_best,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=bst_n_estimators,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,warm_start=True,random_state=42)",CLUSTER_4,CLUSTER_11
val_error,"sklearn.metrics.mean_squared_error(y_val,y_pred)",CLUSTER_4,CLUSTER_11
dataframe,scipy.io.loadmat('../../../Data_generation_base_case/Train_DataSyn1_time_clip.mat'),CLUSTER_2,CLUSTER_0
dataframe_facies,scipy.io.loadmat('../../../Data_generation_base_case/Train_FaciesMat.mat'),CLUSTER_2,CLUSTER_0
dataframe_porosity,scipy.io.loadmat('../../../Data_generation_base_case/Train_PhiMat.mat'),CLUSTER_2,CLUSTER_0
dataframe_vclay,scipy.io.loadmat('../../../Data_generation_base_case/Train_ClayMat.mat'),CLUSTER_2,CLUSTER_0
dataframe_Sw,scipy.io.loadmat('../../../Data_generation_base_case/Train_SwMat.mat'),CLUSTER_2,CLUSTER_0
"f,axarr","matplotlib.pyplot.subplots(1,8,sharey=True)",CLUSTER_2,CLUSTER_0
"f,axarr","matplotlib.pyplot.subplots(1,3,sharey=True)",CLUSTER_2,CLUSTER_0
"f,axarr","matplotlib.pyplot.subplots(1,3,sharey=True)",CLUSTER_2,CLUSTER_0
theta,"numpy.arange(thetaStart,thetaEnd+thetaInc,thetaInc)",CLUSTER_2,CLUSTER_0
time_upscaled,"numpy.arange(0,end_time,dt)",CLUSTER_2,CLUSTER_0
time,"numpy.zeros((Vp.shape[0],Vp.shape[1]+1)",CLUSTER_2,CLUSTER_0
Vp_time,"numpy.zeros((Vp.shape[0],time_upscaled.shape[0])",CLUSTER_2,CLUSTER_0
Vs_time,"numpy.zeros((Vs.shape[0],time_upscaled.shape[0])",CLUSTER_2,CLUSTER_0
RHOB_time,"numpy.zeros((RHOB.shape[0],time_upscaled.shape[0])",CLUSTER_2,CLUSTER_0
input11,"numpy.zeros([bs,nt,3],dtype=np.float32)",CLUSTER_2,CLUSTER_0
emodel,"numpy.concatenate((Vp_time,Vs_time,RHOB_time)",CLUSTER_2,CLUSTER_0
depth_diff,numpy.mean(np.diff(depth.T),CLUSTER_2,CLUSTER_0
Vp,"numpy.reshape(Vp,(Vp.shape[0]*Vp.shape[1],Vp.shape[2])",CLUSTER_2,CLUSTER_0
Vs,"numpy.reshape(Vs,(Vs.shape[0]*Vs.shape[1],Vs.shape[2])",CLUSTER_2,CLUSTER_0
RHOB,"numpy.reshape(RHOB,(RHOB.shape[0]*RHOB.shape[1],RHOB.shape[2])",CLUSTER_2,CLUSTER_0
facies,"numpy.reshape(facies,(facies.shape[0]*facies.shape[1],facies.shape[2])",CLUSTER_2,CLUSTER_0
porosity,"numpy.reshape(porosity,(porosity.shape[0]*porosity.shape[1],porosity.shape[2])",CLUSTER_2,CLUSTER_0
vclay,"numpy.reshape(vclay,(vclay.shape[0]*vclay.shape[1],vclay.shape[2])",CLUSTER_2,CLUSTER_0
Sw,"numpy.reshape(Sw,(Sw.shape[0]*Sw.shape[1],Sw.shape[2])",CLUSTER_2,CLUSTER_0
angle,"numpy.reshape(theta,[1,ntheta])",CLUSTER_2,CLUSTER_0
seis_sample,"numpy.squeeze(seis[sample_number,:,0])",CLUSTER_2,CLUSTER_0
seis_reshaped,"numpy.swapaxes(seis,1,2)",CLUSTER_2,CLUSTER_0
seis,"numpy.transpose(np.reshape(seis11,[-1,ntheta,nt])",CLUSTER_2,CLUSTER_0
t,"numpy.linspace(-T,T,n)",CLUSTER_2,CLUSTER_0
"Vp_time[i,:]","numpy.interp(time_upscaled,time[i,:],Vp[i,:])",CLUSTER_2,CLUSTER_0
"Vs_time[i,:]","numpy.interp(time_upscaled,time[i,:],Vs[i,:])",CLUSTER_2,CLUSTER_0
"RHOB_time[i,:]","numpy.interp(time_upscaled,time[i,:],RHOB[i,:])",CLUSTER_2,CLUSTER_0
X_train,"numpy.expand_dims(X_train,axis=3)",CLUSTER_2,CLUSTER_0
X_test,"numpy.expand_dims(X_test,axis=3)",CLUSTER_2,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(seis_reshaped_normalized,
emodel,test_size=0.2,random_state=1)",CLUSTER_2,CLUSTER_0
survival,"pandas.concat([dead],axis=1,keys=['Percentage'])",CLUSTER_8,CLUSTER_4
survival_wrt_class,"pandas.concat([class_sur,class_dead,class_tot,survival_wrt_class],axis=1,keys=['SurvivalCount','DeathCount','TotalCount','Percentage'])",CLUSTER_8,CLUSTER_4
survival_wrt_sex,"pandas.concat([sex_sur,sex_dead,sex_tot,survival_wrt_sex],axis=1,keys=['SurvivalCount','DeathCount','TotalCount','Percentage'])",CLUSTER_8,CLUSTER_4
sex_class_survival_rate,"pandas.concat([sex_class_survival,sex_class_dead,total_sex_class_count,sex_class_survival_rate],axis=1,keys=['SurvivalCount','DeathCount','TotalCount','Percentage'])",CLUSTER_8,CLUSTER_4
survival_wrt_age,"pandas.concat([age_sur,age_dead,age_tot,survival_wrt_age],axis=1,keys=['SurvivalCount','DeathCount','TotalCount','Percentage'])",CLUSTER_8,CLUSTER_4
survival_female_child,"pandas.concat([chi_fem_sur,chi_fem_dead,chi_fem_tot,survival_female_child],axis=1,keys=['SurvivalCount','DeathCount','TotalCount','Percentage'])",CLUSTER_8,CLUSTER_4
survival_wrt_family_size,"pandas.concat([family_sur,family_dead,family_tot,survival_wrt_family_size],axis=1,keys=['SurvivalCount','DeathCount','TotalCount','Percentage'])",CLUSTER_8,CLUSTER_4
titanic_df,pandas.read_csv('titanic_data.csv'),CLUSTER_8,CLUSTER_4
miarray,"numpy.array([
[1,2,3,5,7],
[4,3,2,1,0],
[12,43,32,54,98]
])",CLUSTER_8,CLUSTER_3
a1,"numpy.array([1,2,3])",CLUSTER_8,CLUSTER_3
a2,"numpy.array([1,2,3])",CLUSTER_8,CLUSTER_3
arr,"numpy.array([True,False,False,True])",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame([
[1,2,3,5,7],
[4,3,2,1,0],
[12,43,32,54,98]
])",CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(d),CLUSTER_8,CLUSTER_3
df1,"pandas.DataFrame(data,
columns=list('ABCD')",CLUSTER_8,CLUSTER_3
dfC,"pandas.DataFrame({'ID':[100,200,300,400],'Calidad':['Buena','Media','Mala','Regular']})",CLUSTER_8,CLUSTER_3
df4,pandas.DataFrame({'a':np.random.randn(1000),CLUSTER_8,CLUSTER_3
df5,"pandas.DataFrame(np.random.rand(50,4)",CLUSTER_8,CLUSTER_3
miserie,"pandas.Series([1,2,3])",CLUSTER_8,CLUSTER_3
s,"pandas.Series([1,2,np.nan,4])",CLUSTER_8,CLUSTER_3
dfAll,"pandas.concat([dfPersonas,dfMasPersonas])",CLUSTER_8,CLUSTER_3
index,"pandas.date_range('20130101',periods=40,freq='D')",CLUSTER_8,CLUSTER_3
cbDF,pandas.read_clipboard(),CLUSTER_8,CLUSTER_3
dfPersonas,"pandas.read_csv('data/Personas.csv',parse_dates=['FNac'])",CLUSTER_8,CLUSTER_3
dfMasPersonas,"pandas.read_csv('data/MasPersonas.csv',parse_dates=['FNac'])",CLUSTER_8,CLUSTER_3
movies,pandas.read_csv('http://bit.ly/imdbratings'),CLUSTER_8,CLUSTER_3
dfFNA,"pandas.read_csv('data/MasPersonas.csv',parse_dates=['FNac'])",CLUSTER_8,CLUSTER_3
df1,"pandas.read_csv(""http://pythonhow.com/data/income_data.csv"")",CLUSTER_8,CLUSTER_3
movies,"pandas.read_csv('http://bit.ly/imdbratings',dtype={'genre':'category'})",CLUSTER_8,CLUSTER_3
movies,pandas.read_csv('http://bit.ly/imdbratings'),CLUSTER_8,CLUSTER_3
movies,pandas.read_csv('http://bit.ly/imdbratings'),CLUSTER_8,CLUSTER_3
dfP,"pandas.read_excel('data/Personas.xlsx',sheet_name='Hoja1')",CLUSTER_8,CLUSTER_3
df.Col3,pandas.to_datetime(df.Col3),CLUSTER_8,CLUSTER_3
img_pred,numpy.squeeze(img_pred),CLUSTER_4,CLUSTER_0
binary,numpy.vectorize(binary),CLUSTER_4,CLUSTER_0
img_pred,"numpy.expand_dims(img_pred,axis=0)",CLUSTER_4,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_0
mat,"sklearn.metrics.confusion_matrix(Y_test,Y_pred)",CLUSTER_4,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
mu,"numpy.array([2,4])",CLUSTER_1,CLUSTER_10
sig,"numpy.array([[1,0],[0,4]])",CLUSTER_1,CLUSTER_10
y,"numpy.zeros(shape=(n,rep)",CLUSTER_1,CLUSTER_10
z,numpy.zeros(rep),CLUSTER_1,CLUSTER_10
x,"numpy.dot(W,x)",CLUSTER_1,CLUSTER_10
y,"numpy.dot(W,x)",CLUSTER_1,CLUSTER_10
x,"numpy.reshape(x,(n,1)",CLUSTER_1,CLUSTER_10
Y,numpy.exp(Y),CLUSTER_1,CLUSTER_10
y,numpy.sin(x),CLUSTER_1,CLUSTER_10
x,"numpy.linspace(start=-10,stop=10,num=n)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(start=-3,stop=3,num=n)",CLUSTER_1,CLUSTER_10
x,"numpy.insert(x,0,e,axis=1)",CLUSTER_1,CLUSTER_10
X,"numpy.insert(X,0,e,axis=1)",CLUSTER_1,CLUSTER_10
accu,new_IDs[i[0]]==numpy.asarray(y_pred[i[0]]),CLUSTER_4,CLUSTER_0
normalized_images,numpy.zeros((len(gray_images),CLUSTER_4,CLUSTER_0
y_pred,"numpy.zeros(num_examples,dtype=np.int32)",CLUSTER_4,CLUSTER_0
y_pred,"numpy.zeros((num_examples,top_k)",CLUSTER_4,CLUSTER_0
y_prob,"numpy.zeros((num_examples,top_k)",CLUSTER_4,CLUSTER_0
"hist,bins","numpy.histogram(dataset,bins=n_classes)",CLUSTER_4,CLUSTER_0
"_,axes","matplotlib.pyplot.subplots(nrows=nrows,ncols=ncols)",CLUSTER_4,CLUSTER_0
samples,"numpy.array(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p'])",CLUSTER_3,CLUSTER_6
labels,"numpy.array([0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1])",CLUSTER_3,CLUSTER_6
ints,"numpy.array([0,1,2,3,4,5])",CLUSTER_3,CLUSTER_6
data,"numpy.array([
	[0,0,0,0,14],
	[0,2,6,4,2],
	[0,0,3,5,6],
	[0,3,9,2,0],
	[2,2,8,1,1],
	[7,7,0,0,0],
	[3,2,6,3,0],
	[2,5,3,2,2],
	[6,5,2,1,0],
	[0,2,2,3,7]
])",CLUSTER_3,CLUSTER_6
df,"pandas.read_csv('../../data/wiki_machine_learning.csv',sep='')",CLUSTER_9,CLUSTER_11
df.date,pandas.to_datetime(df.date),CLUSTER_9,CLUSTER_11
json_1,json.load(f),CLUSTER_10,CLUSTER_12
called,pandas.read_csv(url),CLUSTER_8,CLUSTER_4
called.index,"pandas.to_datetime(called.index,infer_datetime_format=True)",CLUSTER_8,CLUSTER_4
r,numpy.exp(-(X**2),CLUSTER_7,CLUSTER_9
xfit,"numpy.linspace(-1,3.5)",CLUSTER_7,CLUSTER_9
xfit,"numpy.linspace(-1,3.5)",CLUSTER_7,CLUSTER_9
x,"numpy.linspace(xlim[0],xlim[1],30)",CLUSTER_7,CLUSTER_9
y,"numpy.linspace(ylim[0],ylim[1],30)",CLUSTER_7,CLUSTER_9
xy,numpy.vstack([X.ravel(),CLUSTER_7,CLUSTER_9
"Y,X","numpy.meshgrid(y,x)",CLUSTER_7,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
ax,matplotlib.pyplot.subplot(projection='3d'),CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(3,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(4,6)",CLUSTER_7,CLUSTER_9
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_7,CLUSTER_9
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_7,CLUSTER_9
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_7,CLUSTER_9
clf,"sklearn.svm.SVC(kernel='rbf',C=1E6)",CLUSTER_7,CLUSTER_9
model,"sklearn.svm.SVC(kernel='linear',C=C)",CLUSTER_7,CLUSTER_9
svc,"sklearn.svm.SVC(kernel='rbf',class_weight='balanced')",CLUSTER_7,CLUSTER_9
faces,sklearn.datasets.fetch_lfw_people(min_faces_per_person=60),CLUSTER_7,CLUSTER_9
model,"sklearn.pipeline.make_pipeline(pca,svc)",CLUSTER_7,CLUSTER_9
mat,"sklearn.metrics.confusion_matrix(ytest,yfit)",CLUSTER_7,CLUSTER_9
wine_reviews,"pandas.read_csv('winemag-data-130k-v2.csv',usecols=fields)",CLUSTER_7,CLUSTER_3
iris_data,pandas.read_csv('Iris(1),CLUSTER_7,CLUSTER_3
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_3
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_3
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x=""price"",y=""points"",data=wine_reviews)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x=""price"",y=""points"",hue=""country"",data=wine_reviews_filtradas)",CLUSTER_7,CLUSTER_3
data,"pandas.read_sql_query(query,mySql_connector)",CLUSTER_8,CLUSTER_4
messages,"pandas.read_csv('smsspamcollection/SMSSpamCollection',sep='\t',names=['label','message'])",CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer(analyzer=text_process)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=32)",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('totalLendsBTC.csv'),CLUSTER_8,CLUSTER_4
df2,pandas.read_csv('vwapHourlyBTCUSD.csv'),CLUSTER_8,CLUSTER_4
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
toronto_onehot,"pandas.get_dummies(toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
geocodes_df,pandas.read_csv('https://cocl.us/Geospatial_data'),CLUSTER_9,CLUSTER_2
data,"pandas.read_html(url,header=0,flavor='bs4')",CLUSTER_9,CLUSTER_2
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
df['Neighbourhood'],"numpy.where(df['Neighbourhood']=='Notassigned',df['Borough'],df['Neighbourhood'])",CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
spId_url,requests.get('https://static.api.nexon.co.kr/fifaonline4/latest/spid.json'),CLUSTER_9,CLUSTER_2
spposition_url,requests.get('https://static.api.nexon.co.kr/fifaonline4/latest/spposition.json'),CLUSTER_9,CLUSTER_2
spId,pandas.DataFrame(spId_parsed_data),CLUSTER_9,CLUSTER_2
spposition,pandas.DataFrame(spposition_parsed_data),CLUSTER_9,CLUSTER_2
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_1
df,"pandas.DataFrame(iris.data,columns=iris.feature_names)",CLUSTER_12,CLUSTER_1
dtree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_1
a,"numpy.array([1,2,1])",CLUSTER_12,CLUSTER_1
b,"numpy.array([2,2,2])",CLUSTER_12,CLUSTER_1
c,"numpy.array([[1,2,1],
[1,2,3]])",CLUSTER_12,CLUSTER_1
d,"numpy.array([[1,1,1],
[2,2,2],
[3,3,3]])",CLUSTER_12,CLUSTER_1
theta,math.radians(two_theta/2),CLUSTER_10,CLUSTER_4
theta,math.radians(two_thetas[hkl]/2),CLUSTER_10,CLUSTER_4
s,math.sin(theta),CLUSTER_10,CLUSTER_4
slist,"re.split('\.',os.path.basename(fname)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(8,4)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(10,4)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
t_main,numpy.arange(len(x),CLUSTER_1,CLUSTER_9
t,numpy.arange(len(x),CLUSTER_1,CLUSTER_9
t2,numpy.arange(samples),CLUSTER_1,CLUSTER_9
stress_am,"numpy.arange(1,20,4)",CLUSTER_1,CLUSTER_9
syllable_am,"numpy.arange(2,20,4)",CLUSTER_1,CLUSTER_9
phoneme_am,"numpy.arange(3,20,4)",CLUSTER_1,CLUSTER_9
stress_am,"numpy.arange(1,20,4)",CLUSTER_1,CLUSTER_9
syllable_am,"numpy.arange(2,20,4)",CLUSTER_1,CLUSTER_9
phoneme_am,"numpy.arange(3,20,4)",CLUSTER_1,CLUSTER_9
E,numpy.array(energy_all),CLUSTER_1,CLUSTER_9
ss,numpy.array(X_ma),CLUSTER_1,CLUSTER_9
ss,numpy.array(X_ma),CLUSTER_1,CLUSTER_9
arr,numpy.array(final),CLUSTER_1,CLUSTER_9
band,numpy.asarray(band),CLUSTER_1,CLUSTER_9
band,numpy.asarray(band),CLUSTER_1,CLUSTER_9
band,numpy.asarray(band),CLUSTER_1,CLUSTER_9
E_mean,"numpy.mean(E_re,2)",CLUSTER_1,CLUSTER_9
s_mean,"numpy.mean(ss,0)",CLUSTER_1,CLUSTER_9
s,numpy.mean(np.array([X_ma[i]**2foriinrange(len(X_ma),CLUSTER_1,CLUSTER_9
s,numpy.mean(np.array([X_ma[i]**2foriinrange(len(X_ma),CLUSTER_1,CLUSTER_9
s_mean,"numpy.mean(ss,0)",CLUSTER_1,CLUSTER_9
s,numpy.mean(np.array([X_ma[i]**2foriinrange(len(X_ma),CLUSTER_1,CLUSTER_9
stressAm,"numpy.mean(ss,axis=1)",CLUSTER_1,CLUSTER_9
syllableAM,"numpy.mean(ss,axis=1)",CLUSTER_1,CLUSTER_9
phonemeAM,"numpy.mean(ss,axis=1)",CLUSTER_1,CLUSTER_9
idx_band,"numpy.logical_and(freqs>=low,freqs<=high)",CLUSTER_1,CLUSTER_9
idx_band,"numpy.logical_and(freqs>=low,freqs<=high)",CLUSTER_1,CLUSTER_9
idx_band,"numpy.logical_and(freqs>=low,freqs<=high)",CLUSTER_1,CLUSTER_9
x,"numpy.linspace(1,7,7)",CLUSTER_1,CLUSTER_9
y,"numpy.linspace(1,6,6)",CLUSTER_1,CLUSTER_9
x,"numpy.linspace(1,6,6)",CLUSTER_1,CLUSTER_9
y,"numpy.linspace(5,1,5)",CLUSTER_1,CLUSTER_9
f1,"numpy.hstack((out1,out2)",CLUSTER_1,CLUSTER_9
ss,"numpy.vstack((vec,vec2,vec3,vec4,vec5)",CLUSTER_1,CLUSTER_9
ss,"numpy.vstack((vec,vec2,vec3,vec4,vec5)",CLUSTER_1,CLUSTER_9
ss,"numpy.vstack((vec,vec2,vec3,vec4,vec5)",CLUSTER_1,CLUSTER_9
output2,"numpy.vstack((stressAm,syllableAM,phonemeAM)",CLUSTER_1,CLUSTER_9
ss,"numpy.vstack((vec,vec2,vec3,vec4,vec5)",CLUSTER_1,CLUSTER_9
ss2,"numpy.vstack((vec,vec2,vec3,vec4,vec5)",CLUSTER_1,CLUSTER_9
al1,numpy.angle(hilbert(s1),CLUSTER_1,CLUSTER_9
al2,numpy.angle(hilbert(s2),CLUSTER_1,CLUSTER_9
al3,numpy.angle(hilbert(s3),CLUSTER_1,CLUSTER_9
x,"numpy.average(X_ma,axis=0)",CLUSTER_1,CLUSTER_9
"T,F","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_9
"T,F","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,[low,high],btype='band')",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,low,btype='low')",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,[low,high],btype='band')",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,low,btype='low')",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,[low,high],btype='band')",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,low,btype='low')",CLUSTER_1,CLUSTER_9
y,"scipy.signal.lfilter(b,a,data)",CLUSTER_1,CLUSTER_9
y,"scipy.signal.lfilter(b,a,data)",CLUSTER_1,CLUSTER_9
z,"scipy.signal.lfilter(b,a,amplitude_envelope)",CLUSTER_1,CLUSTER_9
y,"scipy.signal.lfilter(b,a,data)",CLUSTER_1,CLUSTER_9
x,scipy.stats.zscore(x),CLUSTER_1,CLUSTER_9
analytic_signal,scipy.signal.hilbert(y),CLUSTER_1,CLUSTER_9
analytic_signal,scipy.signal.hilbert(x),CLUSTER_1,CLUSTER_9
analytic_signal,scipy.signal.hilbert(signal),CLUSTER_1,CLUSTER_9
analytic_signal,scipy.signal.hilbert(y),CLUSTER_1,CLUSTER_9
energy,"numpy.array([
sum(abs(x[i:i+frame_length]**2)",CLUSTER_1,CLUSTER_9
energy,"numpy.array([
sum(abs(x[i:i+frame_length]**2)",CLUSTER_1,CLUSTER_9
"freqs,psd","scipy.signal.welch(data,sf,window='hamming',nfft=512,scaling='density',average='mean')",CLUSTER_1,CLUSTER_9
"freqs,psd","scipy.signal.welch(data,sf,window='hamming',nfft=512,scaling='density',average='mean')",CLUSTER_1,CLUSTER_9
"freqs,psd","scipy.signal.welch(data,sf,window='hamming',nfft=512,scaling='density',average='mean')",CLUSTER_1,CLUSTER_9
bp,"scipy.integrate.simps(psd[idx_band],dx=freq_res)",CLUSTER_1,CLUSTER_9
bp/,"scipy.integrate.simps(psd,dx=freq_res)",CLUSTER_1,CLUSTER_9
bp,"scipy.integrate.simps(psd[idx_band],dx=freq_res)",CLUSTER_1,CLUSTER_9
bp/,"scipy.integrate.simps(psd,dx=freq_res)",CLUSTER_1,CLUSTER_9
bp,"scipy.integrate.simps(psd[idx_band],dx=freq_res)",CLUSTER_1,CLUSTER_9
bp/,"scipy.integrate.simps(psd,dx=freq_res)",CLUSTER_1,CLUSTER_9
"f,t,Zxx","scipy.signal.stft(ep,fs,window='hamming',nperseg=nperseg,noverlap=noverlap)",CLUSTER_1,CLUSTER_9
pd_data,"pandas.DataFrame(f1,columns=['stress_r_native','syllable','phoneme','stress_r_cn','syllable','phoneme'])",CLUSTER_1,CLUSTER_9
pd_data,"pandas.DataFrame(ss,columns=['uk_s1','uk_s2','uk_s3','uk_s4','uk_s5'])",CLUSTER_1,CLUSTER_9
df,"pandas.DataFrame(data.data,columns=data.feature_names)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df[data.feature_names],df['target'],random_state=0,test_size=0.25)",CLUSTER_5,CLUSTER_5
data,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_5
clf,"sklearn.tree.DecisionTreeClassifier(max_depth=2,random_state=0)",CLUSTER_5,CLUSTER_5
clf,"sklearn.tree.DecisionTreeClassifier(max_depth=depth,random_state=0)",CLUSTER_5,CLUSTER_5
results_gw_frozen_SL,json.load(f),CLUSTER_0,CLUSTER_9
results_gw_finetune_SL,json.load(f),CLUSTER_0,CLUSTER_9
results_vqa_frozen,json.load(f),CLUSTER_0,CLUSTER_9
train,json.load(f),CLUSTER_0,CLUSTER_9
test,json.load(f),CLUSTER_0,CLUSTER_9
val,json.load(f),CLUSTER_0,CLUSTER_9
instances_val,json.load(in_file),CLUSTER_0,CLUSTER_9
instances_train,json.load(in_file),CLUSTER_0,CLUSTER_9
instances_all,collections.defaultdict(list),CLUSTER_0,CLUSTER_9
category_lookup,collections.defaultdict(lambda:collections.defaultdict(str),CLUSTER_0,CLUSTER_9
instances,collections.defaultdict(set),CLUSTER_0,CLUSTER_9
captions_per_changeid,collections.defaultdict(),CLUSTER_0,CLUSTER_9
captions_per_compound_id,collections.defaultdict(),CLUSTER_0,CLUSTER_9
length2captions,collections.defaultdict(list),CLUSTER_0,CLUSTER_9
caption_lengths_accs,collections.defaultdict(list),CLUSTER_0,CLUSTER_9
foil_positions_per_caption,collections.defaultdict(list),CLUSTER_0,CLUSTER_9
foil_caption_rel_pos,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
foil_caption_abs_pos,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
absolute_acc,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
relative_acc,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
supercategory_captions,collections.defaultdict(list),CLUSTER_0,CLUSTER_9
supercat_acc,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
obj_frequencies,collections.defaultdict(int),CLUSTER_0,CLUSTER_9
target_obj_per_caption,collections.defaultdict(str),CLUSTER_0,CLUSTER_9
obj_acc,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
target_sum,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
objs_in_image,collections.defaultdict(list),CLUSTER_0,CLUSTER_9
obj_count_acc,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
obj_norm,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
obj_area_acc,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
df,"pandas.DataFrame(caption_len_distribution,columns=['captionlen'])",CLUSTER_0,CLUSTER_9
df,"pandas.DataFrame(rel_pos_distribution,columns=['relativepos'])",CLUSTER_0,CLUSTER_9
df,"pandas.DataFrame(abs_pos_distribution,columns=['absolutepos'])",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_acc,list_obj_freq)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_acc,list_obj_freq)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_acc,list_obj_freq)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_acc,list_obj_freq)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_acc,list_obj_freq)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_acc,list_obj_freq)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
df,pandas.DataFrame(),CLUSTER_8,CLUSTER_3
gender,"pandas.DataFrame(index=ids,data=gender,columns=['gender_female'])",CLUSTER_8,CLUSTER_3
timesheet,"pandas.DataFrame(index=multiindex,columns=['hours'])",CLUSTER_8,CLUSTER_3
incidents,"pandas.DataFrame(
index=np.repeat(ids,repeats=np.random.randint(low=0,high=50,size=len(ids)",CLUSTER_8,CLUSTER_3
patrol_duty,"pandas.DataFrame(index=ids,columns=['start_date','end_date'])",CLUSTER_8,CLUSTER_3
date_range,"pandas.date_range(start='2014-01-01',end='2017-01-01',freq='W')",CLUSTER_8,CLUSTER_3
ids,numpy.arange(n),CLUSTER_8,CLUSTER_3
timedelts,"numpy.array(list(map(lambdax:pd.Timedelta(x,'d')",CLUSTER_8,CLUSTER_3
timedelts,"numpy.array(list(map(lambdax:pd.Timedelta(x,'d')",CLUSTER_8,CLUSTER_3
index,"numpy.repeat(ids,repeats=np.random.randint(low=0,high=50,size=len(ids)",CLUSTER_8,CLUSTER_3
data,"pandas.read_csv('thanksgiving.csv',encoding='Latin-1')",CLUSTER_8,CLUSTER_4
row_sz,numpy.array(row_sz);col_sz=numpy.array(col_sz),CLUSTER_6,CLUSTER_11
a,"numpy.asarray(df.iloc[:,0])",CLUSTER_6,CLUSTER_11
self.image_arr,"numpy.asarray(df.iloc[:,0])",CLUSTER_6,CLUSTER_11
self.label_arr,"numpy.asarray(df.iloc[:,1])",CLUSTER_6,CLUSTER_11
probs,numpy.mean(np.exp(log_preds),CLUSTER_6,CLUSTER_11
df,"pandas.DataFrame(classes,columns=['name','label'])",CLUSTER_6,CLUSTER_11
df_label,pandas.DataFrame(labels),CLUSTER_6,CLUSTER_11
new_labels,pandas.DataFrame(df_label[0][df['label']]),CLUSTER_6,CLUSTER_11
img,matplotlib.pyplot.imread(pic),CLUSTER_6,CLUSTER_11
since,time.time(),CLUSTER_6,CLUSTER_11
time_elapsed,time.time(),CLUSTER_6,CLUSTER_11
class_annos,scipy.io.loadmat(PATH/'devkit/cars_meta.mat'),CLUSTER_6,CLUSTER_11
train_annos,scipy.io.loadmat(PATH/'devkit/cars_train_annos.mat'),CLUSTER_6,CLUSTER_11
people,"pandas.DataFrame(np.array([jack,rose])",CLUSTER_7,CLUSTER_1
titanic,"pandas.read_csv(""ressources/data/titanic-1309-rows-biostatvanderbilt.csv"")",CLUSTER_7,CLUSTER_1
graph,"seaborn.catplot(x=""sex_is_male"",y=""survived"",hue=""pclass"",kind=""bar"",palette=""muted"",data=exploratory)",CLUSTER_7,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=67)",CLUSTER_7,CLUSTER_1
tr,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_1
dot_data,"sklearn.tree.export_graphviz(tr,out_file=None)",CLUSTER_7,CLUSTER_1
dot_file,"sklearn.tree.export_graphviz(tr,out_file=None,feature_names=X.columns,
class_names='Survived',filled=True,rounded=True)",CLUSTER_7,CLUSTER_1
self.num_boxes,"random.randrange(1,16)",CLUSTER_3,CLUSTER_10
x,"random.randrange(0,max_x)",CLUSTER_3,CLUSTER_10
y,"random.randrange(0,max_y)",CLUSTER_3,CLUSTER_10
"X_labeled[""Cluster""]",pandas.Categorical(labels),CLUSTER_7,CLUSTER_8
"X_labeled[""Anomaly""]",pandas.Categorical(labels),CLUSTER_7,CLUSTER_8
"X_labeled[""Cluster""]",pandas.Categorical(labels),CLUSTER_7,CLUSTER_8
X,"pandas.DataFrame(world_data[[""LIFE_LADDER"",""GDP_PER_PERSON"",""LIFE_EXPECTANCY"",""SOCIAL_SUPPORT""]])",CLUSTER_7,CLUSTER_8
cluster_data,"pandas.DataFrame(X_labeled.groupby(by=""Cluster"")",CLUSTER_7,CLUSTER_8
X,"pandas.DataFrame(world_data[[""LIFE_LADDER"",""GDP_PER_PERSON"",""SOCIAL_SUPPORT"",""SOCIAL_SUPPORT""]])",CLUSTER_7,CLUSTER_8
X,"pandas.DataFrame(world_data[[""LIFE_LADDER"",""GDP_PER_PERSON"",""LIFE_EXPECTANCY"",""FREEDOM_CHOICES"",""GENEROSITY"",""CORRUPTION"",""SOCIAL_SUPPORT""]])",CLUSTER_7,CLUSTER_8
cluster_data,"pandas.DataFrame(X_labeled.groupby(by=""Cluster"")",CLUSTER_7,CLUSTER_8
raw_data,"pandas.read_excel('Data.xlsx',sheet_name='Sheet1')",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(7,3,figsize=(18,30)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,1,figsize=(16,4)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(4,1,figsize=(16,24)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=num_clust,init=init_algo,n_init=5)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=num_clust,
init=init_algo,
n_init=20)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=num_clust,
init=init_algo,
n_init=20)",CLUSTER_7,CLUSTER_8
db,"sklearn.cluster.DBSCAN(eps=6,min_samples=6)",CLUSTER_7,CLUSTER_8
lof,"sklearn.neighbors.LocalOutlierFactor(n_neighbors=num_neighbors,contamination=cont_fraction)",CLUSTER_7,CLUSTER_8
x,numpy.arange(len(result1[1]),CLUSTER_3,CLUSTER_10
spins,numpy.array([]),CLUSTER_3,CLUSTER_10
spins,numpy.array([string_to_spin(e.rstrip(),CLUSTER_3,CLUSTER_10
j,"numpy.zeros((n,2)",CLUSTER_3,CLUSTER_10
h,numpy.zeros(n),CLUSTER_3,CLUSTER_10
h_new,numpy.zeros_like(h),CLUSTER_3,CLUSTER_10
hamiltonian+,"numpy.dot(h,spins)",CLUSTER_3,CLUSTER_10
h_new,numpy.copy(h),CLUSTER_3,CLUSTER_10
j_new,numpy.copy(j),CLUSTER_3,CLUSTER_10
j_new,numpy.copy(j),CLUSTER_3,CLUSTER_10
numerator,numpy.linalg.norm(flat_matrix(j),CLUSTER_3,CLUSTER_10
denominator,numpy.linalg.norm(flat_matrix(jp),CLUSTER_3,CLUSTER_10
output+,"math.log(1+data[mu,i]*math.tanh(float(h[i])",CLUSTER_3,CLUSTER_10
ax,matplotlib.pyplot.axes(),CLUSTER_3,CLUSTER_10
ax,matplotlib.pyplot.axes(),CLUSTER_3,CLUSTER_10
df,pandas.DataFrame(list(data),CLUSTER_9,CLUSTER_12
outer_salary,re.compile(self.salary_pattern),CLUSTER_9,CLUSTER_12
outer_salary,re.compile(self.salary_pattern),CLUSTER_9,CLUSTER_12
re_pattern_count,"re.compile(r""\s.*?(\d+\+)",CLUSTER_9,CLUSTER_12
re_pattern_label,"re.compile(r""\s.*?(jour|jours|heur|heurs|mois|an)",CLUSTER_9,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_9,CLUSTER_12
scaled_df,"pandas.DataFrame(scaled_df,columns=columns,index=Time)",CLUSTER_0,CLUSTER_0
stock_buy_df,"pandas.DataFrame(stocknums,index=['Day'+str(d)",CLUSTER_0,CLUSTER_0
stock_buy_df,"pandas.DataFrame(stocknums,index=['Day'+str(d)",CLUSTER_0,CLUSTER_0
asset_df,pandas.DataFrame(stock_buy_df['asset'].append(finaldays),CLUSTER_0,CLUSTER_0
finaldays,"pandas.Series([total+leftover]*5,index=index)",CLUSTER_0,CLUSTER_0
df,pandas.read_csv(fname),CLUSTER_0,CLUSTER_0
y_train,numpy.array(y_train),CLUSTER_0,CLUSTER_0
y_test,numpy.array(y_test),CLUSTER_0,CLUSTER_0
y_test,numpy.array(y_test),CLUSTER_0,CLUSTER_0
y_train,numpy.array(y_train),CLUSTER_0,CLUSTER_0
y_test,numpy.array(y_test),CLUSTER_0,CLUSTER_0
y_test,numpy.array(y_test),CLUSTER_0,CLUSTER_0
Sharpe_ratio,numpy.sqrt(252),CLUSTER_0,CLUSTER_0
stock_name,"re.findall(r'SH\d{6}',fname)",CLUSTER_0,CLUSTER_0
stock,re.findall(r'-(SH\d{6}),CLUSTER_0,CLUSTER_0
stock,re.findall(r'-(SH\d{6}),CLUSTER_0,CLUSTER_0
prev_days,collections.deque(maxlen=window),CLUSTER_0,CLUSTER_0
holdings,collections.deque(),CLUSTER_0,CLUSTER_0
holdings,collections.deque(),CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(-1.5,1)",CLUSTER_0,CLUSTER_0
f1_scores[stock],"sklearn.metrics.f1_score(y_test,ypred)",CLUSTER_0,CLUSTER_0
f1_scores[stock],"sklearn.metrics.f1_score(y_test,ypred)",CLUSTER_0,CLUSTER_0
stocks_model,ml_stocks_predictions(model=sklearn.ensemble.RandomForestClassifier(),CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(ncols=3,nrows=2,figsize=(12,14)",CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(ncols=3,nrows=2,figsize=(12,14)",CLUSTER_0,CLUSTER_0
index,"random.randint(0,len(X_train)",CLUSTER_0,CLUSTER_0
signnames,pandas.read_csv('./signnames.csv'),CLUSTER_0,CLUSTER_0
indexes,numpy.arange(len(labels),CLUSTER_0,CLUSTER_0
external_labels,"numpy.array([1,40,35,15,37,18])",CLUSTER_0,CLUSTER_0
traffic_signs,numpy.array(traffic_signs),CLUSTER_0,CLUSTER_0
X_train_Y,"numpy.empty(shape=(X_train.shape[0],X_train.shape[1],X_train.shape[2],1)",CLUSTER_0,CLUSTER_0
X_test_Y,"numpy.empty(shape=(X_test.shape[0],X_test.shape[1],X_test.shape[2],1)",CLUSTER_0,CLUSTER_0
X_valid_Y,"numpy.empty(shape=(X_valid.shape[0],X_valid.shape[1],X_valid.shape[2],1)",CLUSTER_0,CLUSTER_0
traffic_signs_test,"numpy.empty(shape=(traffic_signs.shape[0],traffic_signs.shape[1],traffic_signs.shape[2],1)",CLUSTER_0,CLUSTER_0
top5k,numpy.argsort(row),CLUSTER_0,CLUSTER_0
top5p,numpy.sort(row),CLUSTER_0,CLUSTER_0
predicted_proba,numpy.vstack(predict(traffic_signs_test),CLUSTER_0,CLUSTER_0
X_train_Y,"numpy.append(X_train_Y,np.expand_dims(agumented_img,axis=0)",CLUSTER_0,CLUSTER_0
y_train,"numpy.append(y_train,np.expand_dims(y_train[idx],axis=0)",CLUSTER_0,CLUSTER_0
class_counts,collections.Counter(y_train),CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
df2,pandas.DataFrame(c),CLUSTER_8,CLUSTER_4
test,"pandas.concat(d,axis=1)",CLUSTER_8,CLUSTER_4
hs,"numpy.arange(0,15,bw)",CLUSTER_7,CLUSTER_8
P,"numpy.array(raw_data_stack[['x','y','val']])",CLUSTER_7,CLUSTER_8
arr,"numpy.zeros((res,res)",CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
sqr_diff,pandas.DataFrame(np.asarray(sqr_diff),CLUSTER_7,CLUSTER_8
raw_data_stack,pandas.DataFrame(arr),CLUSTER_7,CLUSTER_8
raw_dist,pandas.DataFrame(squareform(pdist(raw_data_stack),CLUSTER_7,CLUSTER_8
sqr_diff_stack,pandas.DataFrame(sqr_diff),CLUSTER_7,CLUSTER_8
raw_dist_stack,pandas.DataFrame(raw_dist),CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(data,index=[1,2,3,'A'])",CLUSTER_7,CLUSTER_8
dist,"pandas.DataFrame(squareform(pdist(df.loc[[1,2,3],['x','y']])",CLUSTER_7,CLUSTER_8
col1s,"pandas.DataFrame({'L':[1,1,1]},index=[1,2,3])",CLUSTER_7,CLUSTER_8
A_inv,pandas.DataFrame(np.linalg.pinv(A),CLUSTER_7,CLUSTER_8
data,"pandas.DataFrame(squareform(pdist(df[['x','y']])",CLUSTER_7,CLUSTER_8
Adist,pandas.DataFrame({'A':data}),CLUSTER_7,CLUSTER_8
w,"pandas.DataFrame(np.dot(A_inv,b)",CLUSTER_7,CLUSTER_8
row1s,"pandas.Series([1,1,1,0],index=[1,2,3,'L'],name='L')",CLUSTER_7,CLUSTER_8
all_semi_data,"pandas.concat([raw_data_stack['val'],raw_dist_stack['Dist'],sqr_diff_stack['Sq_Diff']],axis=1)",CLUSTER_7,CLUSTER_8
A,"pandas.concat([A,col1s],axis=1)",CLUSTER_7,CLUSTER_8
all_semi_data['Dist_Bin'],"pandas.cut(all_semi_data['Dist'],bins=range(-1,res+4,2)",CLUSTER_7,CLUSTER_8
text,"numpy.array(""Doyouwantsomecafé?"".split()",CLUSTER_4,CLUSTER_0
theta_numpy,numpy.linalg.inv(X.T.dot(X),CLUSTER_4,CLUSTER_0
housing,sklearn.datasets.fetch_california_housing(),CLUSTER_4,CLUSTER_0
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
now,datetime.datetime.utcnow(),CLUSTER_4,CLUSTER_0
now,datetime.datetime.utcnow(),CLUSTER_4,CLUSTER_0
now,datetime.datetime.utcnow(),CLUSTER_4,CLUSTER_0
"X_moons,y_moons","sklearn.datasets.make_moons(m,noise=0.1,random_state=42)",CLUSTER_4,CLUSTER_0
learning_rate,"scipy.stats.reciprocal(0.0001,0.1)",CLUSTER_4,CLUSTER_0
x,numpy.array(trainX),CLUSTER_5,CLUSTER_10
y,numpy.array(trainY),CLUSTER_5,CLUSTER_10
testx,numpy.array(testX),CLUSTER_5,CLUSTER_10
testy,numpy.array(testY),CLUSTER_5,CLUSTER_10
xp,"numpy.linspace(0,7,100)",CLUSTER_5,CLUSTER_10
xp,"numpy.linspace(0,7,100)",CLUSTER_5,CLUSTER_10
p4,"numpy.poly1d(np.polyfit(x,y,8)",CLUSTER_5,CLUSTER_10
p4,"numpy.poly1d(np.polyfit(x,y,4)",CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.axes(),CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.axes(),CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.axes(),CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.axes(),CLUSTER_5,CLUSTER_10
r2,"sklearn.metrics.r2_score(testy,p4(testx)",CLUSTER_5,CLUSTER_10
r2,sklearn.metrics.r2_score(np.array(trainY),CLUSTER_5,CLUSTER_10
r2,"sklearn.metrics.r2_score(testy,p4(testx)",CLUSTER_5,CLUSTER_10
r2,sklearn.metrics.r2_score(np.array(trainY),CLUSTER_5,CLUSTER_10
t,"numpy.linspace(0,tmax,n)",CLUSTER_1,CLUSTER_9
y,"scipy.integrate.odeint(myModel,y0,t)",CLUSTER_1,CLUSTER_9
rewards,numpy.zeros(101),CLUSTER_1,CLUSTER_10
V,numpy.zeros(101),CLUSTER_1,CLUSTER_10
A,numpy.zeros(101),CLUSTER_1,CLUSTER_10
policy,numpy.zeros(100),CLUSTER_1,CLUSTER_10
best_action,numpy.argmax(A),CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.subplot(),CLUSTER_7,CLUSTER_8
df_class,"pandas.DataFrame([survived_class,dead_class])",CLUSTER_7,CLUSTER_8
df_sex,"pandas.DataFrame([Survived,Died])",CLUSTER_7,CLUSTER_8
df_embark,"pandas.DataFrame([survived_embark,dead_embark])",CLUSTER_7,CLUSTER_8
"X.iloc[:,1]",pandas.DataFrame(got),CLUSTER_7,CLUSTER_8
submission,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
X,"pandas.concat([X,Embarked],axis=1)",CLUSTER_7,CLUSTER_8
Embarked,"pandas.get_dummies(X.Embarked,prefix='Embarked')",CLUSTER_7,CLUSTER_8
dataset,"pandas.read_csv(""../input/train.csv"")",CLUSTER_7,CLUSTER_8
X_test,"pandas.read_csv(""../input/test.csv"")",CLUSTER_7,CLUSTER_8
labelEncoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
lr_classifier,"sklearn.linear_model.LogisticRegression(penalty='l2',random_state=0)",CLUSTER_7,CLUSTER_8
accuracies,"sklearn.model_selection.cross_val_score(estimator=lr_classifier,X=X,y=y,cv=10)",CLUSTER_7,CLUSTER_8
accuracies,"sklearn.model_selection.cross_val_score(estimator=classifier,X=X,y=y,cv=10)",CLUSTER_7,CLUSTER_8
accuracies,"sklearn.model_selection.cross_val_score(estimator=svm_classifier,X=X,y=y,cv=10)",CLUSTER_7,CLUSTER_8
accuracies,"sklearn.model_selection.cross_val_score(estimator=nb_classifier,X=X,y=y,cv=10)",CLUSTER_7,CLUSTER_8
accuracies,"sklearn.model_selection.cross_val_score(estimator=rnd_classifier,X=X,y=y,cv=10)",CLUSTER_7,CLUSTER_8
classifier,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=9,metric='minkowski',p=2)",CLUSTER_7,CLUSTER_8
svm_classifier,"sklearn.svm.SVC(kernel='rbf',random_state=0)",CLUSTER_7,CLUSTER_8
nb_classifier,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
rnd_classifier,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,criterion='entropy',random_state=0)",CLUSTER_7,CLUSTER_8
new_thrust,"random.gauss(450.,25.)",CLUSTER_3,CLUSTER_3
init_pose,"numpy.array([0.,0.,10.,0.,0.,0.])",CLUSTER_3,CLUSTER_3
init_velocities,"numpy.array([0.,0.,0.])",CLUSTER_3,CLUSTER_3
init_angle_velocities,"numpy.array([0.,0.,0.])",CLUSTER_3,CLUSTER_3
target_pos,"numpy.array([0.,0.,10.])",CLUSTER_3,CLUSTER_3
init_pose,"numpy.array([0.,0.,0.,0.,0.,0.])",CLUSTER_3,CLUSTER_3
target_pos,"numpy.array([0.,0.,20.])",CLUSTER_3,CLUSTER_3
"eps,rews",numpy.array(rewards_list),CLUSTER_3,CLUSTER_3
"eps,rews",numpy.array(rewards_list),CLUSTER_3,CLUSTER_3
cumsum,"numpy.cumsum(np.insert(x,0,0)",CLUSTER_3,CLUSTER_3
cumsum,"numpy.cumsum(np.insert(x,0,0)",CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
imgplot,matplotlib.pyplot.imshow(image.array_to_img(batch[0]),CLUSTER_2,CLUSTER_11
mnist,sklearn.datasets.fetch_openml('mnist_784'),CLUSTER_5,CLUSTER_10
mlp,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=50),CLUSTER_5,CLUSTER_10
mlp2,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(50,50)",CLUSTER_5,CLUSTER_10
mlp10,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=tuple([50]*10),CLUSTER_5,CLUSTER_10
mlp20,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=tuple([50]*20),CLUSTER_5,CLUSTER_10
mlp50,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=tuple([50]*50),CLUSTER_5,CLUSTER_10
mlp100,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=tuple([50]*100),CLUSTER_5,CLUSTER_10
mlp_B50,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple1),CLUSTER_5,CLUSTER_10
mlp_B20,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20ad,"sklearn.neural_network.MLPClassifier(solver='adam',hidden_layer_sizes=(tuple2)",CLUSTER_5,CLUSTER_10
mlp_20lb,"sklearn.neural_network.MLPClassifier(solver='lbfgs',hidden_layer_sizes=(tuple2)",CLUSTER_5,CLUSTER_10
mlp_20sgd,"sklearn.neural_network.MLPClassifier(solver='sgd',hidden_layer_sizes=(tuple2)",CLUSTER_5,CLUSTER_10
mlp_20id,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20log,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20tan,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20relu,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20_1,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20_2,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20_3,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20_4,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20_5,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20_6,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_best,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(mnist.data,mnist.target,train_size=0.7)",CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
time_best,time.time(),CLUSTER_5,CLUSTER_10
d,"numpy.arange(start=10,stop=20,step=2)",CLUSTER_3,CLUSTER_6
f,"numpy.arange(start=0,stop=1,step=0.3,dtype=float)",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3,4])",CLUSTER_3,CLUSTER_6
b,"numpy.array([1,2,3,4,5],dtype=float)",CLUSTER_3,CLUSTER_6
c,"numpy.array([True,False,True],dtype=bool)",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
b,"numpy.array([6,5,4])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,-3])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,-3])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,-3])",CLUSTER_3,CLUSTER_6
b,"numpy.array([-4,3,8])",CLUSTER_3,CLUSTER_6
a,"numpy.array([6,3,-5])",CLUSTER_3,CLUSTER_6
b,"numpy.array([-1,0,7])",CLUSTER_3,CLUSTER_6
d,"numpy.array([3,0,8,9,-10])",CLUSTER_3,CLUSTER_6
a,"numpy.array([6,3,-5])",CLUSTER_3,CLUSTER_6
b,"numpy.array([-1,0,7])",CLUSTER_3,CLUSTER_6
a,"numpy.array([0,5,-1])",CLUSTER_3,CLUSTER_6
b,"numpy.array([-4,9,3])",CLUSTER_3,CLUSTER_6
cos_angle,"numpy.dot(a,b)",CLUSTER_3,CLUSTER_6
ser,pandas.Series(randn(6),CLUSTER_8,CLUSTER_3
dframe2,pandas.DataFrame(np.arange(16),CLUSTER_8,CLUSTER_3
q_dict,collections.defaultdict(set),CLUSTER_0,CLUSTER_1
R,numpy.sum(shared_weights),CLUSTER_0,CLUSTER_1
R,numpy.sum(shared_weights),CLUSTER_0,CLUSTER_1
X,pandas.DataFrame(),CLUSTER_0,CLUSTER_1
train_qs,pandas.Series(df_train['question1'].tolist(),CLUSTER_0,CLUSTER_1
tfidf_txt,pandas.Series(train['question1'].tolist(),CLUSTER_0,CLUSTER_1
ques,"pandas.concat([df_train[['question1','question2']],\
df_test[['question1','question2']]],axis=0)",CLUSTER_0,CLUSTER_1
X_train,"pandas.concat((X_train,X_train_ab,train_leaky)",CLUSTER_0,CLUSTER_1
x_test,"pandas.concat((x_test,x_test_ab,test_leaky)",CLUSTER_0,CLUSTER_1
X_train,"pandas.concat((X_train,trn_features)",CLUSTER_0,CLUSTER_1
X_test,"pandas.concat((X_test,tst_features)",CLUSTER_0,CLUSTER_1
df_train,"pandas.read_csv('train_features.csv',encoding=""ISO-8859-1"")",CLUSTER_0,CLUSTER_1
df_train,pandas.read_csv('train.csv'),CLUSTER_0,CLUSTER_1
df_test,pandas.read_csv('test.csv'),CLUSTER_0,CLUSTER_1
df_test,"pandas.read_csv('test_features.csv',encoding=""ISO-8859-1"")",CLUSTER_0,CLUSTER_1
df_test,pandas.read_csv('test.csv'),CLUSTER_0,CLUSTER_1
trn_features,pandas.read_csv('X_train.csv'),CLUSTER_0,CLUSTER_1
train,pandas.read_csv('train.csv'),CLUSTER_0,CLUSTER_1
test,pandas.read_csv('test.csv'),CLUSTER_0,CLUSTER_1
X_train,pandas.read_csv('X_train.csv'),CLUSTER_0,CLUSTER_1
X_test,pandas.read_csv('X_test.csv'),CLUSTER_0,CLUSTER_1
counts,collections.Counter(words),CLUSTER_0,CLUSTER_1
train,pandas.read_csv('nlp_features_train.csv'),CLUSTER_0,CLUSTER_8
test,pandas.read_csv('nlp_features_test.csv'),CLUSTER_0,CLUSTER_8
cv,pandas.read_csv('nlp_features_cv.csv'),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
predicted_y,"numpy.zeros((test_len,2)",CLUSTER_0,CLUSTER_8
predicted_y,"numpy.argmax(predicted_y,axis=1)",CLUSTER_0,CLUSTER_8
predicted_y,"numpy.argmax(predict_y,axis=1)",CLUSTER_0,CLUSTER_8
predicted_y,"numpy.argmax(predict_y,axis=1)",CLUSTER_0,CLUSTER_8
predicted_y,"numpy.argmax(predict_y,axis=1)",CLUSTER_0,CLUSTER_8
C,"sklearn.metrics.confusion_matrix(test_y,predict_y)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha,penalty='l2',loss='log',random_state=43)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=best_alpha,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha,penalty='l1',loss='hinge',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=best_alpha,penalty='l2',loss='hinge',random_state=42)",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method='sigmoid')",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(xgb_clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,shuffle=True,random_state=1001)",CLUSTER_0,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(
clf,
param_distributions=params,
n_iter=5,
scoring='neg_log_loss',
n_jobs=-1,
cv=skf.split(X_train,y_train)",CLUSTER_0,CLUSTER_8
X_train,scipy.sparse.hstack(train_data),CLUSTER_0,CLUSTER_8
X_test,scipy.sparse.hstack(test_data),CLUSTER_0,CLUSTER_8
X_cv,scipy.sparse.hstack(cv_data),CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(C,annot=True,cmap=cmap,fmt="".3f"",xticklabels=labels,yticklabels=labels,annot_kws={""fontsize"":15})",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(B,annot=True,cmap=cmap,fmt="".3f"",xticklabels=labels,yticklabels=labels,annot_kws={""fontsize"":15})",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(A,annot=True,cmap=cmap,fmt="".3f"",xticklabels=labels,yticklabels=labels,annot_kws={""fontsize"":15})",CLUSTER_0,CLUSTER_8
cmap,"seaborn.light_palette(""blue"")",CLUSTER_0,CLUSTER_8
df,pandas.read_csv('../../assets/datasets/imdb_p6_sample.csv'),CLUSTER_5,CLUSTER_5
X['year'],sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
dt,sklearn.tree.DecisionTreeRegressor(),CLUSTER_5,CLUSTER_5
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
ab,sklearn.ensemble.AdaBoostRegressor(),CLUSTER_5,CLUSTER_5
gb,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_5,CLUSTER_5
user_book_matrix,"numpy.concatenate(user_book_matrix,axis=0)",CLUSTER_5,CLUSTER_1
user_book_matrix,"numpy.array_split(user_book_matrix,num_batches)",CLUSTER_5,CLUSTER_1
rating_scaled,"pandas.DataFrame(scaler.fit_transform(combined['Book-Rating'].values.reshape(-1,1)",CLUSTER_5,CLUSTER_1
pred_data,pandas.DataFrame(),CLUSTER_5,CLUSTER_1
book_rating,"pandas.merge(rating,book,on='ISBN')",CLUSTER_5,CLUSTER_1
user_rating,"pandas.merge(rating_count,book_rating,left_on='Book-Title',right_on='Book-Title',how='left')",CLUSTER_5,CLUSTER_1
rating,"pandas.read_csv('data/BX-Book-Ratings.csv',sep=';',error_bad_lines=False,encoding=""latin-1"")",CLUSTER_5,CLUSTER_1
user,"pandas.read_csv('data/BX-Users.csv',sep=';',error_bad_lines=False,encoding=""latin-1"")",CLUSTER_5,CLUSTER_1
book,"pandas.read_csv('data/BX-Books.csv',sep=';',error_bad_lines=False,encoding=""latin-1"")",CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
y,"numpy.array([3.,0.,5.,-2.,1.])",CLUSTER_1,CLUSTER_9
Y,"numpy.array([3.,0.,5.,-2.,-3.])",CLUSTER_1,CLUSTER_9
x,"numpy.array([3.,0.,5.,-2.,-2.])",CLUSTER_1,CLUSTER_9
an_array,numpy.array(data),CLUSTER_1,CLUSTER_9
vector,numpy.zeros(size**2),CLUSTER_1,CLUSTER_9
lijst,numpy.zeros(round((len(matrix),CLUSTER_1,CLUSTER_9
S,numpy.zeros(6*8),CLUSTER_1,CLUSTER_9
count_occupation,numpy.zeros(len(x),CLUSTER_1,CLUSTER_9
average_cluster_size,numpy.zeros(len(x),CLUSTER_1,CLUSTER_9
var_p,"numpy.linspace(0.1,0.5,10)",CLUSTER_1,CLUSTER_9
U,numpy.copy(matrix),CLUSTER_1,CLUSTER_9
cluster_sizes,numpy.copy(cluster_sizes_without_largest_one),CLUSTER_1,CLUSTER_9
var_p,"numpy.append(var_p,np.linspace(0.51,0.65,num=30)",CLUSTER_1,CLUSTER_9
var_p,"numpy.append(var_p,np.linspace(0.66,0.99,num=10)",CLUSTER_1,CLUSTER_9
toc,time.time(),CLUSTER_1,CLUSTER_9
tic,time.time(),CLUSTER_1,CLUSTER_9
toc,time.time(),CLUSTER_1,CLUSTER_9
tic,time.time(),CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(func,(var_beta-P_c)",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(func,(xdata)",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(func,xdata_tau,ydata_tau)",CLUSTER_1,CLUSTER_9
appearances,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
poses,pandas.DataFrame([[math.sqrt(r.pose[0]**2+r.pose[1]**2),CLUSTER_8,CLUSTER_4
y_test,numpy.asarray(y_test),CLUSTER_4,CLUSTER_0
y_pred,"numpy.argmax(y_pred_nn_output,axis=1)",CLUSTER_4,CLUSTER_0
wrong_mean,numpy.mean(y_wrong_nn_output),CLUSTER_4,CLUSTER_0
correct_mean,numpy.mean(y_correct_nn_output),CLUSTER_4,CLUSTER_0
sorted_correct,numpy.sort(y_correct_nn_output),CLUSTER_4,CLUSTER_0
sorted_wrong,numpy.sort(y_wrong_nn_output),CLUSTER_4,CLUSTER_0
y_correctly_masked_nn_output,"numpy.ma.array(np.amax(y_pred_nn_output,axis=1)",CLUSTER_4,CLUSTER_0
y_wrongfully_masked_nn_output,"numpy.ma.array(np.amax(y_pred_nn_output,axis=1)",CLUSTER_4,CLUSTER_0
"fpr_keras,tpr_keras,thresholds_keras","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_4,CLUSTER_0
allVac,"pandas.concat([BCG,DTP1,DTP3,HEPB3,HEPBB,HIB3,IPV1,MCV1,MCV2,PCV3,RCV1,ROTAC,YFV])",CLUSTER_8,CLUSTER_3
BCG,"pandas.read_csv('CSVs/vaccinations/BCG.csv',index_col=0)",CLUSTER_8,CLUSTER_3
DTP1,"pandas.read_csv('CSVs/vaccinations/DTP1.csv',index_col=0)",CLUSTER_8,CLUSTER_3
DTP3,"pandas.read_csv('CSVs/vaccinations/DTP3.csv',index_col=0)",CLUSTER_8,CLUSTER_3
HEPB3,"pandas.read_csv('CSVs/vaccinations/HEPB3.csv',index_col=0)",CLUSTER_8,CLUSTER_3
HEPBB,"pandas.read_csv('CSVs/vaccinations/HEPBB.csv',index_col=0)",CLUSTER_8,CLUSTER_3
HIB3,"pandas.read_csv('CSVs/vaccinations/HIB3.csv',index_col=0)",CLUSTER_8,CLUSTER_3
IPV1,"pandas.read_csv('CSVs/vaccinations/IPV1.csv',index_col=0)",CLUSTER_8,CLUSTER_3
MCV1,"pandas.read_csv('CSVs/vaccinations/MCV1.csv',index_col=0)",CLUSTER_8,CLUSTER_3
MCV2,"pandas.read_csv('CSVs/vaccinations/MCV2.csv',index_col=0)",CLUSTER_8,CLUSTER_3
PCV3,"pandas.read_csv('CSVs/vaccinations/PCV3.csv',index_col=0)",CLUSTER_8,CLUSTER_3
RCV1,"pandas.read_csv('CSVs/vaccinations/RCV1.csv',index_col=0)",CLUSTER_8,CLUSTER_3
ROTAC,"pandas.read_csv('CSVs/vaccinations/ROTAC.csv',index_col=0)",CLUSTER_8,CLUSTER_3
YFV,"pandas.read_csv('CSVs/vaccinations/YFV.csv',index_col=0)",CLUSTER_8,CLUSTER_3
coeffecients,"pandas.DataFrame(lm.coef_,X.columns)",CLUSTER_7,CLUSTER_5
customers,"pandas.read_csv(""EcommerceCustomers"")",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
meanPrice,numpy.mean([b.closeforbinbars]),CLUSTER_11,CLUSTER_3
stDev,"numpy.std(a=[b.closeforbinbars],ddof=0)",CLUSTER_11,CLUSTER_3
df1,"pandas.DataFrame(ts,columns=cols)",CLUSTER_11,CLUSTER_3
df_cboe,"pandas.read_excel(dls,header=12,
usecols=[0,2,3])",CLUSTER_11,CLUSTER_3
df_snp,"pandas.read_html(snpurl,header=0)",CLUSTER_11,CLUSTER_3
margin,pandas.to_numeric([w.initMarginChangeforwinwhatif]),CLUSTER_11,CLUSTER_3
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_9
targets,"numpy.array(targets_list,ndmin=2)",CLUSTER_1,CLUSTER_9
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_9
targets,numpy.zeros(output_nodes),CLUSTER_1,CLUSTER_9
hidden_inputs,"numpy.dot(self.wih,inputs)",CLUSTER_1,CLUSTER_9
final_inputs,"numpy.dot(self.who,hidden_outputs)",CLUSTER_1,CLUSTER_9
hidden_errors,"numpy.dot(self.who.T,output_errors)",CLUSTER_1,CLUSTER_9
hidden_inputs,"numpy.dot(self.wih,inputs)",CLUSTER_1,CLUSTER_9
final_inputs,"numpy.dot(self.who,hidden_outputs)",CLUSTER_1,CLUSTER_9
label,numpy.argmax(outputs),CLUSTER_1,CLUSTER_9
record,"numpy.append(label,img_data)",CLUSTER_1,CLUSTER_9
LagoonData,"numpy.full(bands_data.shape,np.nan,np.float)",CLUSTER_4,CLUSTER_11
"np.savez_compressed('../../CompressedData/SRXData',Ratios","SRX,FocusIndex=numpy.full((rows,cols)",CLUSTER_4,CLUSTER_11
"data[Band[i2],Band[i]]","numpy.divide(LagoonData[:,:,i2],LagoonData[:,:,i])",CLUSTER_4,CLUSTER_11
"LagoonData[ClassifyIndex,:]","numpy.log(n*LagoonData[ClassifyIndex,:])",CLUSTER_4,CLUSTER_11
SRX,"numpy.stack(RX,axis=2)",CLUSTER_4,CLUSTER_11
bands_data,numpy.dstack(bands_data),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(3,2,figsize=(20,10)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(3,2,figsize=(20,10)",CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_7
elapsed,time.time(),CLUSTER_4,CLUSTER_7
img,"numpy.array(img,dtype=np.uint8)",CLUSTER_4,CLUSTER_7
RED_MASK,numpy.array(PIL.Image.fromarray(np.load('data/stop_red_mask.npy'),CLUSTER_4,CLUSTER_7
WHITE_MASK,numpy.array(PIL.Image.fromarray(np.load('data/stop_white_mask.npy'),CLUSTER_4,CLUSTER_7
rot_matrix,"numpy.array(
[[math.cos(-rot)",CLUSTER_4,CLUSTER_7
patch_transformations,"numpy.zeros((model.batch_size_,8)",CLUSTER_4,CLUSTER_7
bg_imgs,"numpy.concatenate([noisy_imgs,white_imgs])",CLUSTER_4,CLUSTER_7
target_labels,numpy.zeros_like(scores),CLUSTER_4,CLUSTER_7
white_imgs,"numpy.ones((model.batch_size_/2,psize,psize,3)",CLUSTER_4,CLUSTER_7
"x_origin_shifted,y_origin_shifted","numpy.matmul(
xform_matrix,
np.array([x_origin,y_origin])",CLUSTER_4,CLUSTER_7
classes,"numpy.argmax(scores[:,:,1:],axis=2)",CLUSTER_4,CLUSTER_7
sorted_classes,"numpy.argsort(scores[:,1:],axis=1)",CLUSTER_4,CLUSTER_7
a,numpy.uint8(a),CLUSTER_4,CLUSTER_7
obj,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_6
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_6
inputs,numpy.asarray(inputs),CLUSTER_5,CLUSTER_6
targets,numpy.asarray(targets),CLUSTER_5,CLUSTER_6
acc,"sklearn.metrics.accuracy_score(ya,yp)",CLUSTER_5,CLUSTER_6
tmp,os.listdir(IMG_PATH),CLUSTER_4,CLUSTER_0
tmp2,os.listdir(IMG_PATH+d),CLUSTER_4,CLUSTER_0
tmp,os.listdir(IMG_PATH),CLUSTER_4,CLUSTER_0
tmp2,os.listdir(IMG_PATH+d),CLUSTER_4,CLUSTER_0
train,"numpy.array(train,np.float32)",CLUSTER_4,CLUSTER_0
test,"numpy.array(test,np.float32)",CLUSTER_4,CLUSTER_0
train_cls,"numpy.array(train_cls,np.int32)",CLUSTER_4,CLUSTER_0
test_cls,"numpy.array(test_cls,np.int32)",CLUSTER_4,CLUSTER_0
df_indicator,"pandas.read_csv('../data/population_data.csv',skiprows=4)",CLUSTER_8,CLUSTER_4
df_projects,"pandas.read_csv('../data/projects_data.csv',dtype=str)",CLUSTER_8,CLUSTER_4
df_projects['totalamt'],"pandas.to_numeric(df_projects['totalamt'].str.replace(',',"""")",CLUSTER_8,CLUSTER_4
bin_values,"numpy.arange(start=0,stop=n_limit,step=10)",CLUSTER_0,CLUSTER_2
bin_values,"numpy.arange(start=0,stop=50,step=1)",CLUSTER_0,CLUSTER_2
col,"numpy.where(r2c['guests']>10,'r','b')",CLUSTER_0,CLUSTER_2
col2,"numpy.where(full_dataset['guests']>10,'r','b')",CLUSTER_0,CLUSTER_2
"counts,bin_edges","numpy.histogram(x,bins=bin_values)",CLUSTER_0,CLUSTER_2
prop_type_table_1,pandas.DataFrame(nsw_extract['property_type'].unique(),CLUSTER_0,CLUSTER_2
council_1,pandas.DataFrame(geodata['council'].unique(),CLUSTER_0,CLUSTER_2
suburb_1,pandas.DataFrame(geodata['suburb'].unique(),CLUSTER_0,CLUSTER_2
book_1,pandas.read_csv('/Users/taj/GitHub/scraping/stayz_analysis/orange_large_month_summary.csv'),CLUSTER_0,CLUSTER_2
mth_book_1,pandas.read_csv('/Users/taj/GitHub/scraping/stayz_analysis/monthly_bookings.csv'),CLUSTER_0,CLUSTER_2
feat_1,pandas.read_csv('/Users/taj/GitHub/scraping/stayz/WebData/nsw_features/stayz_nsw_features_'+date_str+'.csv'),CLUSTER_0,CLUSTER_2
nsw_extract_1,pandas.read_json('/Users/taj/GitHub/scraping/stayz/WebData/nsw_extract/stayz_nsw_extract_'+date_str+'.json'),CLUSTER_0,CLUSTER_2
geodata_1,pandas.read_json('/Users/taj/GitHub/scraping/stayz/WebData/nsw_geocoded/stayz_geocoded_full.json'),CLUSTER_0,CLUSTER_2
cal_1,pandas.read_json('/Users/taj/GitHub/scraping/stayz/WebData/nsw_calendar/stayz_calendar_'+date_str+'.json'),CLUSTER_0,CLUSTER_2
calb_1,pandas.read_json('/Users/taj/GitHub/scraping/stayz/WebData/nsw_calendar/stayz_calendar_'+date_str+'.json'),CLUSTER_0,CLUSTER_2
date_str,datetime.datetime.now(),CLUSTER_0,CLUSTER_2
tt2,"re.sub('ui-state-disabled','',tt1)",CLUSTER_0,CLUSTER_2
f1,"matplotlib.pyplot.figure(num=None,figsize=(30,10)",CLUSTER_0,CLUSTER_2
f1,"matplotlib.pyplot.figure(num=None,figsize=(30,10)",CLUSTER_0,CLUSTER_2
frame1,matplotlib.pyplot.gca(),CLUSTER_0,CLUSTER_2
"fig,ax","matplotlib.pyplot.subplots(figsize=(size,size)",CLUSTER_0,CLUSTER_2
current,random.choice(list(g.nodes),CLUSTER_1,CLUSTER_9
current,random.choice(list(g.neighbors(current),CLUSTER_1,CLUSTER_9
current,random.choice(list(g.nodes),CLUSTER_1,CLUSTER_9
data,"sklearn.datasets.fetch_20newsgroups(subset='all',shuffle=True,
remove=('headers','footers','quotes')",CLUSTER_0,CLUSTER_5
scores_df,"pandas.DataFrame(columns=['train_accuracy','test_accuracy','fit_time'])",CLUSTER_0,CLUSTER_5
data_df,pandas.read_csv('clean_newsgroups.csv'),CLUSTER_0,CLUSTER_5
"train_corpus,test_corpus,train_label_nums,test_label_nums,train_label_names,test_label_names","sklearn.model_selection.train_test_split(
np.array(data_df['CleanArticle'])",CLUSTER_0,CLUSTER_5
scores,"sklearn.model_selection.cross_validate(model,tv_train_features,train_label_names,
scoring=('accuracy')",CLUSTER_0,CLUSTER_5
mnb,sklearn.naive_bayes.MultinomialNB(alpha=1),CLUSTER_0,CLUSTER_5
lr,"sklearn.linear_model.LogisticRegression(penalty='l2',max_iter=100,C=1,random_state=42)",CLUSTER_0,CLUSTER_5
svm,"sklearn.svm.LinearSVC(penalty='l2',C=1,random_state=42)",CLUSTER_0,CLUSTER_5
svm_sgd,"sklearn.linear_model.SGDClassifier(loss='hinge',penalty=""l2"",max_iter=5,random_state=42)",CLUSTER_0,CLUSTER_5
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=10,random_state=42)",CLUSTER_0,CLUSTER_5
gbc,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=10,random_state=42)",CLUSTER_0,CLUSTER_5
df,"pandas.read_csv('datasets/onlineretail.csv',header=0,encoding='unicode_escape')",CLUSTER_8,CLUSTER_4
df['InvoiceDate'],"pandas.to_datetime(df['InvoiceDate'],format='%d/%m/%Y%H:%M')",CLUSTER_8,CLUSTER_4
item_dict,collections.defaultdict(int),CLUSTER_8,CLUSTER_4
output_dict,collections.defaultdict(str),CLUSTER_8,CLUSTER_4
"left,right,sup,conf","re.search(pattern=r'([0-9\,]+)",CLUSTER_8,CLUSTER_4
df,pandas.DataFrame(index=time_index),CLUSTER_8,CLUSTER_4
time_index,"pandas.date_range('01/01/2010',periods=5,freq='M')",CLUSTER_8,CLUSTER_4
data,"pandas.read_csv('clean_bmart.csv',sep=',')",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3)",CLUSTER_5,CLUSTER_5
ley,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
model,"sklearn.svm.SVC(kernel='linear',C=1)",CLUSTER_5,CLUSTER_5
mlp,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(5),CLUSTER_5,CLUSTER_5
posteriori[class_num],math.log(class_[class_num][1]),CLUSTER_3,CLUSTER_6
posteriori[class_num]+,math.log(training[class_num][row][col][int(test_image[row][col]),CLUSTER_3,CLUSTER_6
training,"numpy.zeros(shape=(10,int(28/n)",CLUSTER_3,CLUSTER_6
answer,numpy.zeros(1000),CLUSTER_3,CLUSTER_6
test_image,numpy.zeros(shape=(int(28/n),CLUSTER_3,CLUSTER_6
posteriori,numpy.zeros(10),CLUSTER_3,CLUSTER_6
conf_matrix,"numpy.zeros(shape=(10,10)",CLUSTER_3,CLUSTER_6
answer[i],numpy.argmax(posteriori),CLUSTER_3,CLUSTER_6
conf_matrix,"numpy.around(conf_matrix,2)",CLUSTER_3,CLUSTER_6
K_test,"numpy.array([[gauss_kernel(gamma,xm,xn)",CLUSTER_1,CLUSTER_10
beta,numpy.matmul(np.linalg.inv(lam*np.eye(len(X),CLUSTER_1,CLUSTER_10
E,"numpy.mean(np.sign(np.matmul(K,beta)",CLUSTER_1,CLUSTER_10
Ut_sum,numpy.sum(Ut),CLUSTER_1,CLUSTER_10
err,numpy.sum([Ut[i]*(gt_best(X_train[i]),CLUSTER_1,CLUSTER_10
train_data,numpy.loadtxt('hw2_adaboost_train.txt'),CLUSTER_1,CLUSTER_10
test_data,numpy.loadtxt('hw2_adaboost_test.txt'),CLUSTER_1,CLUSTER_10
data,numpy.loadtxt('hw2_lssvm_all.txt'),CLUSTER_1,CLUSTER_10
response,requests.get(url),CLUSTER_10,CLUSTER_12
response,requests.get(url),CLUSTER_10,CLUSTER_12
x,"numpy.array([1,2,3])",CLUSTER_7,CLUSTER_3
df,pandas.DataFrame(Iris),CLUSTER_7,CLUSTER_3
Iris,pandas.read_csv('Iris.csv'),CLUSTER_7,CLUSTER_3
age_data['YEARS_BINNED'],"pandas.cut(age_data['YEARS_BIRTH'],bins=bin_cut)",CLUSTER_7,CLUSTER_8
app_train,pandas.read_csv(f_app),CLUSTER_7,CLUSTER_8
since,time.time(),CLUSTER_6,CLUSTER_11
time_elapsed,time.time(),CLUSTER_6,CLUSTER_11
train_frame,pandas.read_csv('./data/train.csv'),CLUSTER_6,CLUSTER_11
self.train_frame,pandas.read_csv(csv_file),CLUSTER_6,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_11
ax,"matplotlib.pyplot.subplot(1,4,i+1)",CLUSTER_6,CLUSTER_11
ax,"matplotlib.pyplot.subplot(num_images//2,2,images_so_far)",CLUSTER_6,CLUSTER_11
f,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_1,CLUSTER_10
action_data,"pandas.concat(action_data,ignore_index=True)",CLUSTER_8,CLUSTER_3
user_data,"pandas.merge(user_data,ad_backup2,on=""user_id"")",CLUSTER_8,CLUSTER_3
cleaned_action_data,"pandas.merge(action_data,ad_backup2,on=""user_id"")",CLUSTER_8,CLUSTER_3
product_data,"pandas.merge(product_data,comment_data,on=""sku_id"",how=""left"")",CLUSTER_8,CLUSTER_3
reader,"pandas.read_csv(f,iterator=True)",CLUSTER_8,CLUSTER_3
user_data,pandas.read_csv(user_file),CLUSTER_8,CLUSTER_3
product_data,pandas.read_csv(product_file),CLUSTER_8,CLUSTER_3
comment_data,pandas.read_csv(comment_file),CLUSTER_8,CLUSTER_3
behave_counter,"collections.Counter(group[""type""])",CLUSTER_8,CLUSTER_3
coefficients,numpy.array(initial_coefficients),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
score,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
derivative,"numpy.dot(errors,feature)",CLUSTER_1,CLUSTER_10
derivative,"numpy.dot(errors,feature)",CLUSTER_1,CLUSTER_10
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
lp,numpy.sum((indicator-1),CLUSTER_1,CLUSTER_10
apply_threshold,numpy.vectorize(lambdax:1.ifx>0else-1.),CLUSTER_1,CLUSTER_10
cmap_positive,matplotlib.pyplot.get_cmap('Reds'),CLUSTER_1,CLUSTER_10
cmap_negative,matplotlib.pyplot.get_cmap('Blues'),CLUSTER_1,CLUSTER_10
important_words,json.load(f),CLUSTER_1,CLUSTER_10
A,"numpy.zeros((m,n_H,n_W,n_C)",CLUSTER_1,CLUSTER_10
"A[i,h,w,c]",numpy.mean(a_prev_slice),CLUSTER_1,CLUSTER_10
X_pad,"numpy.pad(X,((0,0)",CLUSTER_1,CLUSTER_10
"fig,axarr","matplotlib.pyplot.subplots(1,2)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=[10,10])",CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
result,pandas.read_csv(path),CLUSTER_4,CLUSTER_11
index,numpy.arange(int(lgth/2),CLUSTER_4,CLUSTER_11
index,numpy.arange(int(lgth/2),CLUSTER_4,CLUSTER_11
fqy,"numpy.zeros([lgth,num_signal])",CLUSTER_4,CLUSTER_11
fqy,"numpy.zeros([lgth,num_signal])",CLUSTER_4,CLUSTER_11
f_data,"numpy.zeros([lgth,num_signal])",CLUSTER_4,CLUSTER_11
f_data,"numpy.zeros([lgth,num_signal])",CLUSTER_4,CLUSTER_11
f_data,"numpy.zeros([lgth,num_signal])",CLUSTER_4,CLUSTER_11
"f_data[:,idx]","scipy.signal.convolve(data.iloc[:,i],lpf,mode='same')",CLUSTER_4,CLUSTER_11
"f_data[:,i]","scipy.signal.convolve(data[:,i],lpf,mode='same')",CLUSTER_4,CLUSTER_11
lpf,"scipy.signal.firwin(f_size,cutoff,window='hamming')",CLUSTER_4,CLUSTER_11
lpf,"scipy.signal.firwin(f_size,cutoff,window='hamming')",CLUSTER_4,CLUSTER_11
"f_data[:,idx]","scipy.signal.medfilt(data.iloc[:,i],f_size)",CLUSTER_4,CLUSTER_11
directory,os.listdir(),CLUSTER_4,CLUSTER_11
host_idx,numpy.array(host_idx),CLUSTER_1,CLUSTER_9
logP,"numpy.log10(ceph.data[:,4])",CLUSTER_1,CLUSTER_9
like,"pm.Normal('likelihood',mu=mpred,sigma=numpy.sqrt(sig_int**2.+err**2)",CLUSTER_1,CLUSTER_9
res,"scipy.optimize.minimize(neg_log_like,(-2.,np.median(mobs)",CLUSTER_1,CLUSTER_9
citydata,"pandas.read_json(""geodata/cities.json"")",CLUSTER_8,CLUSTER_3
pts,numpy.asarray(shapes[idx].points),CLUSTER_8,CLUSTER_3
pts,"numpy.asarray(zip(a,b)",CLUSTER_8,CLUSTER_3
split_idx,numpy.where(d>.75),CLUSTER_8,CLUSTER_3
spl,numpy.where(d>1),CLUSTER_8,CLUSTER_3
d,numpy.sqrt(d),CLUSTER_8,CLUSTER_3
d,numpy.sqrt(d),CLUSTER_8,CLUSTER_3
a,numpy.append(np.cos(np.arange(100),CLUSTER_8,CLUSTER_3
b,numpy.append(np.sin(np.arange(100),CLUSTER_8,CLUSTER_3
"Fs,Qs",numpy.array(modes['Freq.(GHz),CLUSTER_12,CLUSTER_9
Fs_Hz,"numpy.array(Convert.toSI(Fs,'GHz')",CLUSTER_12,CLUSTER_9
"Fs,Qs",numpy.array(modes['Freq.(GHz),CLUSTER_12,CLUSTER_9
Fs_Hz,"numpy.array(Convert.toSI(Fs,'GHz')",CLUSTER_12,CLUSTER_9
f,matplotlib.pyplot.figure(figsize=figsize),CLUSTER_1,CLUSTER_9
ims,numpy.array(ims),CLUSTER_1,CLUSTER_9
image,numpy.expand_dims(ndimage.imread(image_path),CLUSTER_1,CLUSTER_9
raw_data,pandas.read_csv('../Bank-data.csv'),CLUSTER_7,CLUSTER_9
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
Z1,"numpy.dot(W1,X)",CLUSTER_5,CLUSTER_9
Z2,"numpy.dot(W2,A1)",CLUSTER_5,CLUSTER_9
Z3,"numpy.dot(W3,A2)",CLUSTER_5,CLUSTER_9
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_6
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=666)",CLUSTER_5,CLUSTER_6
knn_clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_5,CLUSTER_6
knn_clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_6
knn_clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=k,weights=method)",CLUSTER_5,CLUSTER_6
sk_knn_clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=4,weights=""distance"",p=1)",CLUSTER_5,CLUSTER_6
knn_clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=k,weights=""distance"",p=p)",CLUSTER_5,CLUSTER_6
start_time,time.time(),CLUSTER_6,CLUSTER_11
nhw_img,numpy.squeeze(nhwc_img.numpy(),CLUSTER_6,CLUSTER_11
nhwc_img,"numpy.transpose(features[0],axes=(1,2,0)",CLUSTER_6,CLUSTER_11
labels,os.listdir(train_audio_path),CLUSTER_4,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(14,8)",CLUSTER_4,CLUSTER_0
index,numpy.arange(len(labels),CLUSTER_4,CLUSTER_0
all_wave,numpy.array(all_wave),CLUSTER_4,CLUSTER_0
index,numpy.argmax(prob[0]),CLUSTER_4,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_0
"x_tr,x_val,y_tr,y_val",sklearn.model_selection.train_test_split(np.array(all_wave),CLUSTER_4,CLUSTER_0
index,"random.randint(0,len(x_val)",CLUSTER_4,CLUSTER_0
x,"numpy.array([[0,0],[0,1],[1,0],[1,1]])",CLUSTER_5,CLUSTER_5
y,"numpy.array([0,1,1,1])",CLUSTER_5,CLUSTER_5
deltaWeights,numpy.array([0]*training_inputs.shape[1]),CLUSTER_5,CLUSTER_5
training_inputs,"numpy.array([[0,0],[0,1],[1,0],[1,1]])",CLUSTER_5,CLUSTER_5
labels,"numpy.array([0,0,1,0])",CLUSTER_5,CLUSTER_5
labels,"numpy.array([0,1,0,0])",CLUSTER_5,CLUSTER_5
labels,"numpy.array([0,1,1,1])",CLUSTER_5,CLUSTER_5
input,"numpy.array([0,1])",CLUSTER_5,CLUSTER_5
train,"numpy.array([[0],[1]])",CLUSTER_5,CLUSTER_5
label,"numpy.array([1,0])",CLUSTER_5,CLUSTER_5
summation,"numpy.dot(self.weights[1:].T,inputs)",CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.Perceptron(),CLUSTER_5,CLUSTER_5
model1,sklearn.linear_model.Perceptron(2),CLUSTER_5,CLUSTER_5
model2,sklearn.linear_model.Perceptron(2),CLUSTER_5,CLUSTER_5
model3,sklearn.linear_model.Perceptron(2),CLUSTER_5,CLUSTER_5
model4,sklearn.linear_model.Perceptron(1),CLUSTER_5,CLUSTER_5
global_temp,pandas.read_csv('datasets/global_temperature.csv'),CLUSTER_1,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(10,4)",CLUSTER_6,CLUSTER_10
key_product_distribute,numpy.array(key_product_distribute),CLUSTER_4,CLUSTER_11
key_product_basic_info,"numpy.zeros([100,4])",CLUSTER_4,CLUSTER_11
key_product_distribute,"numpy.zeros([101,120])",CLUSTER_4,CLUSTER_11
delta_product,"numpy.zeros([100,119])",CLUSTER_4,CLUSTER_11
reduced_product_info,"numpy.zeros([100,2])",CLUSTER_4,CLUSTER_11
correlation_mat,"numpy.zeros([100,4])",CLUSTER_4,CLUSTER_11
train_data,numpy.zeros([len(train_set),CLUSTER_4,CLUSTER_11
train_label,numpy.zeros([len(train_label),CLUSTER_4,CLUSTER_11
valid_data,numpy.zeros([len(valid_set),CLUSTER_4,CLUSTER_11
valid_label,numpy.zeros([len(valid_set),CLUSTER_4,CLUSTER_11
train_data,numpy.zeros([len(train_set),CLUSTER_4,CLUSTER_11
train_label,numpy.zeros([len(train_label),CLUSTER_4,CLUSTER_11
valid_data,numpy.zeros([len(valid_set),CLUSTER_4,CLUSTER_11
valid_label,numpy.zeros([len(valid_set),CLUSTER_4,CLUSTER_11
key_product_distribute[100][i],"numpy.sum(key_product_distribute[:,i])",CLUSTER_4,CLUSTER_11
correlation_mat[i][3],numpy.sum(key_product_distribute[i][1:120]),CLUSTER_4,CLUSTER_11
buyer_file,numpy.loadtxt('buyer_basic_info.txt'),CLUSTER_4,CLUSTER_11
quantity_file,numpy.loadtxt('buyer_historical_category15_quantity.txt'),CLUSTER_4,CLUSTER_11
money_file,numpy.loadtxt('buyer_historical_category15_money.txt'),CLUSTER_4,CLUSTER_11
key_product,numpy.loadtxt('key_product_IDs.txt'),CLUSTER_4,CLUSTER_11
product_feature,numpy.loadtxt('product_features.txt'),CLUSTER_4,CLUSTER_11
trade_info,numpy.loadtxt('trade_info_training.txt'),CLUSTER_4,CLUSTER_11
product_distribute_set,numpy.loadtxt('product_distribution_training_set.txt'),CLUSTER_4,CLUSTER_11
key_product,numpy.loadtxt('key_product_distribute.txt'),CLUSTER_4,CLUSTER_11
product_info,numpy.loadtxt('reduced_product_info.txt'),CLUSTER_4,CLUSTER_11
key_product,numpy.loadtxt('key_product_distribute.txt'),CLUSTER_4,CLUSTER_11
product_info,numpy.loadtxt('reduced_product_info.txt'),CLUSTER_4,CLUSTER_11
product_info,json.load(f),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
orig,"matplotlib.pyplot.plot(timeseries,color='blue',label='Original')",CLUSTER_4,CLUSTER_11
mean,"matplotlib.pyplot.plot(rolmean,color='red',label='RollingMean')",CLUSTER_4,CLUSTER_11
std,"matplotlib.pyplot.plot(rolstd,color='black',label='RollingStd')",CLUSTER_4,CLUSTER_11
rolmean,pandas.Series(timeseries),CLUSTER_4,CLUSTER_11
rolstd,pandas.Series(timeseries),CLUSTER_4,CLUSTER_11
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_4,CLUSTER_11
data,"pandas.read_csv('key_product_distribute.txt',names=names,delim_whitespace=True,index_col='product_id')",CLUSTER_4,CLUSTER_11
rmse,"math.sqrt(mean_squared_error(inv_yHat,inv_y)",CLUSTER_5,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_5,CLUSTER_0
agg,"pandas.concat(cols,axis=1)",CLUSTER_5,CLUSTER_0
dataset,"pandas.read_csv(
'Machine_usage_groupby.csv')",CLUSTER_5,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_5,CLUSTER_0
data,"pandas.read_csv(""thanksgiving.csv"",encoding=""Latin-1"")",CLUSTER_8,CLUSTER_4
sub,"pandas.DataFrame({'serialnumber':test['serialnumber'],'cluster_number':pred})",CLUSTER_5,CLUSTER_1
dftrain,"pandas.get_dummies(dftrain,drop_first=True)",CLUSTER_5,CLUSTER_1
dftest,"pandas.get_dummies(test,drop_first=True)",CLUSTER_5,CLUSTER_1
train,pandas.read_csv('Yes_Bank_Train.csv'),CLUSTER_5,CLUSTER_1
test,pandas.read_csv('Yes_Bank_Test_int.csv'),CLUSTER_5,CLUSTER_1
sub,pandas.read_csv('sample_clusters.csv'),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=1994,shuffle=True)",CLUSTER_5,CLUSTER_1
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=400,max_features=20,max_depth=120,min_samples_split=3)",CLUSTER_5,CLUSTER_1
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(50,50,550,)",CLUSTER_5,CLUSTER_1
v[i+1],numpy.dot(np.transpose(w[i]),CLUSTER_3,CLUSTER_6
gw[i],"numpy.transpose(np.outer(g[i],v[i])",CLUSTER_3,CLUSTER_6
g[i],"numpy.multiply(np.dot(w[i+1],g[i+1])",CLUSTER_3,CLUSTER_6
f,numpy.vectorize(sigmoid),CLUSTER_3,CLUSTER_6
f,numpy.vectorize(sigmoid),CLUSTER_3,CLUSTER_6
df_lat,pandas.read_csv(csv_path),CLUSTER_9,CLUSTER_2
df,pandas.read_html(str(table),CLUSTER_9,CLUSTER_2
df['Neighbourhood'],"numpy.where(df['Neighbourhood']==""Notassigned"",df['Borough'],df['Neighbourhood'])",CLUSTER_9,CLUSTER_2
res,"requests.get(""https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M"")",CLUSTER_9,CLUSTER_2
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=TEST_SIZE,random_state=RANDOM_STATE)",CLUSTER_4,CLUSTER_0
samples,numpy.where(y_data==k),CLUSTER_4,CLUSTER_0
label,"numpy.argmax(y_data,axis=1)",CLUSTER_4,CLUSTER_0
ii,numpy.nonzero(y),CLUSTER_4,CLUSTER_0
y,numpy.bincount(y_data),CLUSTER_4,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(1,1,figsize=(12,4)",CLUSTER_4,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(5,8,figsize=(16,10)",CLUSTER_4,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(14,6)",CLUSTER_4,CLUSTER_0
g,"seaborn.countplot(y_data,order=classes)",CLUSTER_4,CLUSTER_0
X,"numpy.concatenate((Xtr,Xte)",CLUSTER_7,CLUSTER_8
Xtr,"numpy.concatenate((Xtrain,Xtest)",CLUSTER_7,CLUSTER_8
Xtr,"numpy.concatenate((Xtrain,Xtest)",CLUSTER_7,CLUSTER_8
P,numpy.zeros_like(X),CLUSTER_7,CLUSTER_8
mask,"numpy.ones(df.shape[0],dtype='int')",CLUSTER_7,CLUSTER_8
x,numpy.linspace(plt.xlim(),CLUSTER_7,CLUSTER_8
y,numpy.linspace(plt.ylim(),CLUSTER_7,CLUSTER_8
"xx,yy","numpy.meshgrid(np.linspace(x_min,x_max,100)",CLUSTER_7,CLUSTER_8
"Y,X","numpy.meshgrid(y,x)",CLUSTER_7,CLUSTER_8
cs2,"matplotlib.pyplot.contour(xx,yy,Z,cmap=ccolor,alpha=.6,axes=ax)",CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
dfhw,"pandas.read_csv(""https://dl.dropboxusercontent.com/u/75194/stats/data/01_heights_weights_genders.csv"")",CLUSTER_7,CLUSTER_8
"itrain,itest",sklearn.model_selection.train_test_split(xrange(df.shape[0]),CLUSTER_7,CLUSTER_8
clflog,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
clfsvm,"sklearn.svm.SVC(kernel=""linear"")",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(ytest,clf.predict_proba(xtest)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(ytest,clf.decision_function(xtest)",CLUSTER_7,CLUSTER_8
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_7,CLUSTER_8
cities_pd,"pandas.DataFrame(cities,columns=column_names)",CLUSTER_9,CLUSTER_2
"cities_pd[""MaxTemp""]","pandas.to_numeric(cities_pd[""MaxTemp""])",CLUSTER_9,CLUSTER_2
"cities_pd[""Lat""]","pandas.to_numeric(cities_pd[""Lat""])",CLUSTER_9,CLUSTER_2
"cities_pd[""Lng""]","pandas.to_numeric(cities_pd[""Lng""])",CLUSTER_9,CLUSTER_2
"cities_pd[""Cloudiness""]","pandas.to_numeric(cities_pd[""Cloudiness""])",CLUSTER_9,CLUSTER_2
"cities_pd[""Humidity""]","pandas.to_numeric(cities_pd[""Humidity""])",CLUSTER_9,CLUSTER_2
"cities_pd[""Windspeed""]","pandas.to_numeric(cities_pd[""Windspeed""])",CLUSTER_9,CLUSTER_2
clean,"re.sub(""[^a-zA-Z]"","""",raw)",CLUSTER_0,CLUSTER_5
tsne,"sklearn.manifold.TSNE(n_components=2,random_state=0)",CLUSTER_0,CLUSTER_5
points,"pandas.DataFrame(
[
(word,coords[0],coords[1])",CLUSTER_0,CLUSTER_5
df,"pandas.read_csv('CombinedData.csv',engine='python')",CLUSTER_0,CLUSTER_5
train_df,pandas.read_csv('data/train.csv'),CLUSTER_7,CLUSTER_8
test_df,pandas.read_csv('data/test.csv'),CLUSTER_7,CLUSTER_8
submission_binary,pandas.read_csv('data/sample_submission.csv'),CLUSTER_7,CLUSTER_8
test_label,pandas.read_csv('data/test_labels.csv'),CLUSTER_7,CLUSTER_8
submission_chains,pandas.read_csv('data/sample_submission.csv'),CLUSTER_7,CLUSTER_8
submission_combined,pandas.read_csv('data/sample_submission.csv'),CLUSTER_7,CLUSTER_8
text,"re.sub(r""what's"",""whatis"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""\'s"","""",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""\'ve"",""have"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""can't"",""cannot"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""n't"",""not"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""i'm"",""iam"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""\'d"",""would"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""\'ll"",""will"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""\'scuse"",""excuse"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub('\W','',text)",CLUSTER_7,CLUSTER_8
text,"re.sub('\s+','',text)",CLUSTER_7,CLUSTER_8
logreg,sklearn.linear_model.LogisticRegression(C=12.0),CLUSTER_7,CLUSTER_8
dataset,pandas.read_csv('Wine.csv'),CLUSTER_5,CLUSTER_5
"X1,X2","numpy.meshgrid(np.arange(start=X_set[:,0].min()",CLUSTER_5,CLUSTER_5
"X1,X2","numpy.meshgrid(np.arange(start=X_set[:,0].min()",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=0)",CLUSTER_5,CLUSTER_5
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_5,CLUSTER_5
classifier,sklearn.linear_model.LogisticRegression(random_state=0),CLUSTER_5,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_5,CLUSTER_5
out_np,numpy.clip(torch_to_np(out),CLUSTER_6,CLUSTER_11
d,numpy.sqrt((i-imsize//2),CLUSTER_6,CLUSTER_11
corresp,json.load(f),CLUSTER_6,CLUSTER_11
TestModels,pandas.DataFrame(),CLUSTER_11,CLUSTER_1
data,"pandas.concat((data,weekType)",CLUSTER_11,CLUSTER_1
data,"pandas.concat((data,day_of_week)",CLUSTER_11,CLUSTER_1
weekType,"pandas.get_dummies(data['weekType'],prefix='weekType')",CLUSTER_11,CLUSTER_1
day_of_week,"pandas.get_dummies(data['day_of_week'],prefix='day_of_week')",CLUSTER_11,CLUSTER_1
data,"pandas.read_csv('energydata_Transformation.csv',parse_dates=['date'])",CLUSTER_11,CLUSTER_1
"y_true,y_pred",numpy.array(y_true),CLUSTER_11,CLUSTER_1
tmp['RMSE_Test'],"numpy.sqrt(mean_squared_error(y_test,predictions)",CLUSTER_11,CLUSTER_1
tmp['RMSE_Train'],"numpy.sqrt(mean_squared_error(y_train,predictions_trn)",CLUSTER_11,CLUSTER_1
rmse,"numpy.sqrt(mean_squared_error(test_labels,predictions)",CLUSTER_11,CLUSTER_1
sel_model,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_11,CLUSTER_1
base_model,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_11,CLUSTER_1
sel_model,sklearn.ensemble.RandomForestRegressor(),CLUSTER_11,CLUSTER_1
random_search,"sklearn.model_selection.RandomizedSearchCV(sel_model,param_grid,n_iter=20,scoring=""r2"",cv=5,n_jobs=-1,verbose=2,random_state=42)",CLUSTER_11,CLUSTER_1
tmp['MAE_Test'],"sklearn.metrics.mean_absolute_error(y_test,predictions)",CLUSTER_11,CLUSTER_1
tmp['MAE_Train'],"sklearn.metrics.mean_absolute_error(y_train,predictions_trn)",CLUSTER_11,CLUSTER_1
mae,"sklearn.metrics.mean_absolute_error(test_labels,predictions)",CLUSTER_11,CLUSTER_1
tmp['MSE_Test'],"sklearn.metrics.mean_squared_error(y_test,predictions)",CLUSTER_11,CLUSTER_1
tmp['MSE_Train'],"sklearn.metrics.mean_squared_error(y_train,predictions_trn)",CLUSTER_11,CLUSTER_1
tmp['R2_Test'],"sklearn.metrics.r2_score(y_test,predictions)",CLUSTER_11,CLUSTER_1
tmp['R2_Train'],"sklearn.metrics.r2_score(y_train,predictions_trn)",CLUSTER_11,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_11,CLUSTER_1
ridgeReg,"sklearn.linear_model.Ridge(alpha=0.05,normalize=True)",CLUSTER_11,CLUSTER_1
LassoReg,"sklearn.linear_model.Lasso(alpha=0.005,normalize=True)",CLUSTER_11,CLUSTER_1
ElasticNetReg,"sklearn.linear_model.ElasticNet(alpha=0.001,normalize=True)",CLUSTER_11,CLUSTER_1
expected_next_h,"numpy.asarray([
[0.24635157,0.28610883,0.32240467,0.35525807,0.38474904],
[0.49223563,0.55611431,0.61507696,0.66844003,0.7159181],
[0.56735664,0.66310127,0.74419266,0.80889665,0.858299]])",CLUSTER_1,CLUSTER_10
expected_next_c,"numpy.asarray([
[0.32986176,0.39145139,0.451556,0.51014116,0.56717407],
[0.66382255,0.76674007,0.87195994,0.97902709,1.08751345],
[0.74192008,0.90592151,1.07717006,1.25120233,1.42395676]])",CLUSTER_1,CLUSTER_10
expected_h,"numpy.asarray([
[[0.01764008,0.01823233,0.01882671,0.0194232],
[0.11287491,0.12146228,0.13018446,0.13902939],
[0.31358768,0.33338627,0.35304453,0.37250975]],
[[0.45767879,0.4761092,0.4936887,0.51041945],
[0.6704845,0.69350089,0.71486014,0.7346449],
[0.81733511,0.83677871,0.85403753,0.86935314]]])",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,1.2,num=N*D)",CLUSTER_1,CLUSTER_10
prev_h,"numpy.linspace(-0.3,0.7,num=N*H)",CLUSTER_1,CLUSTER_10
prev_c,"numpy.linspace(-0.4,0.9,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-2.1,1.3,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.7,2.2,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.3,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,0.6,num=N*T*D)",CLUSTER_1,CLUSTER_10
h0,"numpy.linspace(-0.4,0.8,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-0.2,0.9,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.3,0.6,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.2,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
model.params[k],"numpy.linspace(-1.4,1.3,num=v.size)",CLUSTER_1,CLUSTER_10
features,"numpy.linspace(-0.5,1.7,num=N*D)",CLUSTER_1,CLUSTER_10
start_time,time.time(),CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
k_neighbors_classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=10),CLUSTER_3,CLUSTER_6
train_data,sklearn.preprocessing.scale(train_data),CLUSTER_3,CLUSTER_6
test_data,sklearn.preprocessing.scale(test_data),CLUSTER_3,CLUSTER_6
df,pandas.read_json(DATA),CLUSTER_4,CLUSTER_11
path_to_images,os.getcwd(),CLUSTER_4,CLUSTER_11
data,"pandas.read_csv(""academy_awards.csv"",encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_4
Labels,json.load(f),CLUSTER_10,CLUSTER_4
file_to_graph,json.load(file),CLUSTER_10,CLUSTER_4
all_the_nodes,json.load(data),CLUSTER_10,CLUSTER_4
relations_to_be_created,json.load(rel),CLUSTER_10,CLUSTER_4
X,"numpy.array([[3.,5.,8.],[4.,12.,15.]])",CLUSTER_3,CLUSTER_6
weights,"numpy.array([1.,4.,1.])",CLUSTER_3,CLUSTER_6
initial_weights,numpy.zeros(3),CLUSTER_3,CLUSTER_6
norms,"numpy.linalg.norm(X,axis=0)",CLUSTER_3,CLUSTER_6
new_word,"re.sub(r'[^\w\s]','',word)",CLUSTER_10,CLUSTER_4
x_final,pandas.DataFrame(),CLUSTER_11,CLUSTER_11
t_temp,pandas.DataFrame(),CLUSTER_11,CLUSTER_11
l,"pandas.merge(left=l,left_on=['timestamp_d'+str(d)",CLUSTER_11,CLUSTER_11
p,"pandas.read_pickle(""../pump_data_with_social.pkl"")",CLUSTER_11,CLUSTER_11
x,pandas.read_pickle(dir_prefix+filename),CLUSTER_11,CLUSTER_11
edited_cols,numpy.array(core+code_d+twitter_d+reddit_d+fb_d+market_d),CLUSTER_11,CLUSTER_11
social_features,numpy.array(code_d+twitter_d+reddit_d+fb_d+market_d),CLUSTER_11,CLUSTER_11
unique_cols,numpy.unique(edited_cols),CLUSTER_11,CLUSTER_11
np_array_1,"numpy.arange(1,50,3)",CLUSTER_9,CLUSTER_11
y2,numpy.asarray([g(i),CLUSTER_9,CLUSTER_11
y_3,numpy.zeros_like(x2),CLUSTER_9,CLUSTER_11
self.cosx,numpy.cos(x),CLUSTER_9,CLUSTER_11
self.sinx,numpy.sin(x),CLUSTER_9,CLUSTER_11
x_1,numpy.linspace(-2*(np.pi),CLUSTER_9,CLUSTER_11
x2,"numpy.linspace(-2*np.pi,2*np.pi,50)",CLUSTER_9,CLUSTER_11
f_vectorizado,numpy.vectorize(f),CLUSTER_9,CLUSTER_11
g1,numpy.vectorize(g),CLUSTER_9,CLUSTER_11
f22,numpy.vectorize(x.f2),CLUSTER_9,CLUSTER_11
sunspots,"numpy.loadtxt('sunspots.txt',dtype={'names':('año','numero')",CLUSTER_9,CLUSTER_11
sunspots,"numpy.loadtxt('sunspots.txt',dtype=[('year',int)",CLUSTER_9,CLUSTER_11
"year,number",numpy.loadtxt('sunspots2.txt'),CLUSTER_9,CLUSTER_11
data,numpy.load('sunspots.npy'),CLUSTER_9,CLUSTER_11
df,pandas.read_csv(file),CLUSTER_9,CLUSTER_11
tabulador,"pandas.read_excel('tabulador_pe2019.xls',header=9)",CLUSTER_9,CLUSTER_11
df_list,"pandas.read_html(html,header=1)",CLUSTER_9,CLUSTER_11
df_list,"pandas.read_html(html,header=1)",CLUSTER_9,CLUSTER_11
html,requests.get(url),CLUSTER_9,CLUSTER_11
html,requests.get(url),CLUSTER_9,CLUSTER_11
dec6,pandas.read_csv('datasets/coinmarketcap_06122017.csv'),CLUSTER_8,CLUSTER_3
current,"pandas.read_json(""https://api.coinmarketcap.com/v1/ticker/"")",CLUSTER_8,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(10,6)",CLUSTER_8,CLUSTER_3
mask,"numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_7,CLUSTER_5
"m,b","numpy.polyfit(x,y,1)",CLUSTER_7,CLUSTER_5
cols,"pandas.DataFrame([
[
func(df[acol],df[bcol])",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv(""data/water-treatment.data"",names=columns.keys()",CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(11,9)",CLUSTER_7,CLUSTER_5
columns,"collections.OrderedDict([
(""DAY"",""thedayofdatacollection"")",CLUSTER_7,CLUSTER_5
data,json.load(f),CLUSTER_4,CLUSTER_7
data,json.load(f),CLUSTER_4,CLUSTER_7
start_idx,"random.randint(0,len(img_test)",CLUSTER_4,CLUSTER_7
random_batch_idx,"random.randint(0,len(ds)",CLUSTER_4,CLUSTER_7
img_paths_sample,"random.sample(img_paths,nrows*ncols)",CLUSTER_4,CLUSTER_7
indices,numpy.arange(self.batch_size),CLUSTER_4,CLUSTER_7
xs,numpy.array(xs),CLUSTER_4,CLUSTER_7
ys,numpy.array(ys),CLUSTER_4,CLUSTER_7
batch_of_imgs,numpy.array(batch_of_imgs),CLUSTER_4,CLUSTER_7
batch_of_commands,numpy.array(batch_of_commands),CLUSTER_4,CLUSTER_7
batch_of_splines,numpy.array(batch_of_splines),CLUSTER_4,CLUSTER_7
all_zeros,numpy.zeros(len(COMMANDS),CLUSTER_4,CLUSTER_7
predicted_flatten_spline,numpy.squeeze(predicted_spline),CLUSTER_4,CLUSTER_7
input_img,"numpy.expand_dims(img,axis=0)",CLUSTER_4,CLUSTER_7
input_command,"numpy.expand_dims(command_onehot,axis=0)",CLUSTER_4,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(2,5,figsize=(45,20)",CLUSTER_4,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(nrows,ncols,figsize=(4*ncols,4*nrows)",CLUSTER_4,CLUSTER_7
Xvals,numpy.zeros(10002),CLUSTER_4,CLUSTER_11
Yvals,numpy.zeros(10002),CLUSTER_4,CLUSTER_11
MeanLoc,numpy.where(dataY==minn),CLUSTER_4,CLUSTER_11
whereL,numpy.where(L==LP),CLUSTER_4,CLUSTER_11
whereR,numpy.where(R==RP),CLUSTER_4,CLUSTER_11
Trigger,numpy.where(X==TriggerTime),CLUSTER_4,CLUSTER_11
Left,numpy.where(Xvals[0]==aaa),CLUSTER_4,CLUSTER_11
Right,numpy.where(Xvals[0]==aaa),CLUSTER_4,CLUSTER_11
ret,"numpy.cumsum(a,dtype=float)",CLUSTER_4,CLUSTER_11
baseline,numpy.mean(Y[0:Trigger]),CLUSTER_4,CLUSTER_11
aa,"numpy.loadtxt(files[5],skiprows=5,delimiter=',')",CLUSTER_4,CLUSTER_11
Hold,"numpy.loadtxt(files[q],skiprows=5,delimiter=',')",CLUSTER_4,CLUSTER_11
Hold,numpy.loadtxt(Datafiles[q]),CLUSTER_4,CLUSTER_11
folders,os.listdir(),CLUSTER_4,CLUSTER_11
"defdecode_stacked(document,pos","0,decoder=json.JSONDecoder()",CLUSTER_9,CLUSTER_3
NOT_WHITESPACE,re.compile(r'[^\s]'),CLUSTER_9,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(6,4)",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame({'A':1.,
'B':pd.Timestamp('20130102')",CLUSTER_8,CLUSTER_3
s,"pandas.Series([1,3,5,np.nan,6,8])",CLUSTER_8,CLUSTER_3
dates,"pandas.date_range('20180701',periods=6)",CLUSTER_8,CLUSTER_3
reviews,"pandas.read_csv(""data/ign.csv"")",CLUSTER_8,CLUSTER_3
x,pandas.DataFrame(crime2009),CLUSTER_5,CLUSTER_5
y,pandas.DataFrame(bachelor2009),CLUSTER_5,CLUSTER_5
df,pandas.read_csv('usa.csv'),CLUSTER_5,CLUSTER_5
my_3D_array,numpy.arange(70),CLUSTER_3,CLUSTER_6
left_mat,numpy.arange(6),CLUSTER_3,CLUSTER_6
right_mat,numpy.arange(15),CLUSTER_3,CLUSTER_6
my_vector,numpy.arange(5),CLUSTER_3,CLUSTER_6
my_2D_array,"numpy.ones(35,dtype='int_')",CLUSTER_3,CLUSTER_6
df,pandas.read_csv('2014_World_Power_Consumption'),CLUSTER_8,CLUSTER_4
usdf,pandas.read_csv('2012_Election_Data'),CLUSTER_8,CLUSTER_4
bm,"pandas.read_csv(""bigmac.csv"",parse_dates=[""Date""],index_col=[""Date"",""Country""])",CLUSTER_8,CLUSTER_4
w,"pandas.read_csv(""worldstats.csv"",index_col=[""country"",""year""])",CLUSTER_8,CLUSTER_4
sales,"pandas.read_csv(""salesmen.csv"",parse_dates=[""Date""])",CLUSTER_8,CLUSTER_4
foods,"pandas.read_csv(""foods.csv"")",CLUSTER_8,CLUSTER_4
sales,"pandas.read_csv(""quarters.csv"")",CLUSTER_8,CLUSTER_4
df_feat,"pandas.DataFrame(scaled_features,columns=df.columns[:-1])",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv('ClassifiedData',index_col=0)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,test_size=0.33,random_state=101)",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=37),CLUSTER_7,CLUSTER_5
X,"numpy.concatenate((X_dummy_features,X_numeric_imputed)",CLUSTER_5,CLUSTER_5
var_to_graph['multReg_linear'],numpy.mean((regr.predict(X_test),CLUSTER_5,CLUSTER_5
var_to_graph['multReg_poly'],numpy.mean((poly.predict(X_test),CLUSTER_5,CLUSTER_5
var_to_graph['multReg_ridge'],numpy.mean((regr.predict(X_test),CLUSTER_5,CLUSTER_5
X_dummy_features,"pandas.concat(X_dummy_features,axis=1)",CLUSTER_5,CLUSTER_5
temp_dummies,pandas.get_dummies(X_categorical[i]),CLUSTER_5,CLUSTER_5
sal['missingSalary'],pandas.isnull(sal['salary']),CLUSTER_5,CLUSTER_5
sal,pandas.read_csv('../Data/salaries_parent.csv'),CLUSTER_5,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
poly,sklearn.linear_model.LinearRegression(normalize=True),CLUSTER_5,CLUSTER_5
regr,sklearn.linear_model.Ridge(),CLUSTER_5,CLUSTER_5
poly,sklearn.preprocessing.PolynomialFeatures(2),CLUSTER_5,CLUSTER_5
scores_window,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
response,requests.get(url),CLUSTER_10,CLUSTER_12
cdf,"pandas.read_csv('College_Data',index_col=0)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_5
kmean,sklearn.cluster.KMeans(n_clusters=2),CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame([{'Name':'Chris','ItemPurchased':'Sponge','Cost':22.50},
{'Name':'Kevyn','ItemPurchased':'KittyLitter','Cost':2.50},
{'Name':'Filip','ItemPurchased':'Spoon','Cost':5.00}],
index=['Store1','Store1','Store2'])",CLUSTER_1,CLUSTER_3
staff_df,"pandas.DataFrame([{'Name':'Kelly','Role':'DirectorofHR'},
{'Name':'Sally','Role':'Courseliasion'},
{'Name':'James','Role':'Grader'}])",CLUSTER_1,CLUSTER_3
student_df,"pandas.DataFrame([{'Name':'James','School':'Business'},
{'Name':'Mike','School':'Law'},
{'Name':'Sally','School':'Engineering'}])",CLUSTER_1,CLUSTER_3
staff_df,"pandas.DataFrame([{'Name':'Kelly','Role':'DirectorofHR','Location':'StateStreet'},
{'Name':'Sally','Role':'Courseliasion','Location':'WashingtonAvenue'},
{'Name':'James','Role':'Grader','Location':'WashingtonAvenue'}])",CLUSTER_1,CLUSTER_3
student_df,"pandas.DataFrame([{'Name':'James','School':'Business','Location':'1024BilliardAvenue'},
{'Name':'Mike','School':'Law','Location':'FraternityHouse
{'Name':'Sally','School':'Engineering','Location':'512WilsonCrescent'}])",CLUSTER_1,CLUSTER_3
staff_df,"pandas.DataFrame([{'FirstName':'Kelly','LastName':'Desjardins','Role':'DirectorofHR'},
{'FirstName':'Sally','LastName':'Brooks','Role':'Courseliasion'},
{'FirstName':'James','LastName':'Wilde','Role':'Grader'}])",CLUSTER_1,CLUSTER_3
student_df,"pandas.DataFrame([{'FirstName':'James','LastName':'Hammond','School':'Business'},
{'FirstName':'Mike','LastName':'Smith','School':'Law'},
{'FirstName':'Sally','LastName':'Brooks','School':'Engineering'}])",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(['A+','A','A-','B+','B','B-','C+','C','C-','D+','D'],
index=['excellent','excellent','excellent','good','good','good','ok','ok','ok','poor','poor'])",CLUSTER_1,CLUSTER_3
ts3,"pandas.DataFrame(np.random.randint(10,100,(4,2)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({'Count1':100+np.random.randint(-5,10,9)",CLUSTER_1,CLUSTER_3
adf['Date'],"pandas.Series({0:'December1',2:'mid-May'})",CLUSTER_1,CLUSTER_3
t1,pandas.Series(list('abc'),CLUSTER_1,CLUSTER_3
t2,pandas.Series(list('def'),CLUSTER_1,CLUSTER_3
dates,"pandas.date_range('10-01-2016',periods=9,freq='2W-SUN')",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('census.csv'),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('census.csv'),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('census.csv'),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('census.csv'),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('cars.csv'),CLUSTER_1,CLUSTER_3
ts3.index,pandas.to_datetime(ts3.index),CLUSTER_1,CLUSTER_3
avg,numpy.average(df.where(df['STNAME']==state),CLUSTER_1,CLUSTER_3
avg,numpy.average(frame['CENSUS2010POP']),CLUSTER_1,CLUSTER_3
mars_facts,pandas.read_html(facts_url),CLUSTER_9,CLUSTER_2
dfProbs,"pandas.DataFrame(X_test,columns=data_red.columns)",CLUSTER_4,CLUSTER_8
dfProbs30,"pandas.DataFrame(X_test,columns=data30.columns)",CLUSTER_4,CLUSTER_8
preds,"pandas.Series(predictions,name='preds')",CLUSTER_4,CLUSTER_8
weights,"pandas.Series(svm_clf.coef_[0],index=data_svm.columns)",CLUSTER_4,CLUSTER_8
preds30,"pandas.Series(predictions30,name='preds')",CLUSTER_4,CLUSTER_8
weights,"pandas.Series(svm_clf.coef_[0],index=data_svm.columns)",CLUSTER_4,CLUSTER_8
dummies,pandas.get_dummies(bigFrame['final_result']),CLUSTER_4,CLUSTER_8
dummies_svm,pandas.get_dummies(bigFrame['final_result']),CLUSTER_4,CLUSTER_8
dummies,pandas.get_dummies(bigFrame[bigFrame.SumClicks30==0]['final_result']),CLUSTER_4,CLUSTER_8
dummies_svm,pandas.get_dummies(bigFrame[bigFrame.SumClicks30==0]['final_result']),CLUSTER_4,CLUSTER_8
bigFrame,"pandas.merge(this_vle2,that_Info,how='inner',right_index=True,left_index=True)",CLUSTER_4,CLUSTER_8
info,pandas.read_csv('studentInfo.csv'),CLUSTER_4,CLUSTER_8
vle,pandas.read_csv('studentVle.csv'),CLUSTER_4,CLUSTER_8
alphaBin_range,"numpy.arange(.1,1,.1)",CLUSTER_4,CLUSTER_8
alphaBin_range,"numpy.arange(.1,1,.1)",CLUSTER_4,CLUSTER_8
C,"numpy.arange(.1,4.7,.5)",CLUSTER_4,CLUSTER_8
alphaBin_range,"numpy.arange(.1,1,.1)",CLUSTER_4,CLUSTER_8
alphaBin_range,"numpy.arange(.1,1,.1)",CLUSTER_4,CLUSTER_8
C,"numpy.arange(.1,4.7,.5)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,recall,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,queue_rate,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(recall,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(xs,ys,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,recall,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,queue_rate,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(recall,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,recall,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,queue_rate,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(recall,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(p['thresholds'],p['precision'],color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(p['thresholds'],p['recall'],color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(p['thresholds'],p['queue_rate'],color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,recall,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,queue_rate,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(recall,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(xs,ys,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,recall,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,queue_rate,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(recall,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,recall,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,queue_rate,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(recall,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(p['thresholds'],p['precision'],color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(p['thresholds'],p['recall'],color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(p['thresholds'],p['queue_rate'],color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate','FTest')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('Precision-RecallCurve','')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('Precision-RecallCurve','')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('Precision-RecallCurve','')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate','FTest')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('Precision-RecallCurve','')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('Precision-RecallCurve','')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('Precision-RecallCurve','')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate')",CLUSTER_4,CLUSTER_8
startTmr,time.time(),CLUSTER_4,CLUSTER_8
startTmr,time.time(),CLUSTER_4,CLUSTER_8
startTmr,time.time(),CLUSTER_4,CLUSTER_8
startTmr,time.time(),CLUSTER_4,CLUSTER_8
"f_val,p_val","scipy.stats.f_oneway(SVM,NBB,NBG,KNN)",CLUSTER_4,CLUSTER_8
cv_object,"sklearn.model_selection.StratifiedShuffleSplit(test_size=0.2,n_splits=10)",CLUSTER_4,CLUSTER_8
cv_object,"sklearn.model_selection.StratifiedShuffleSplit(test_size=0.2,n_splits=10)",CLUSTER_4,CLUSTER_8
cv_object,"sklearn.model_selection.StratifiedShuffleSplit(test_size=0.2,n_splits=10)",CLUSTER_4,CLUSTER_8
cv_object,"sklearn.model_selection.StratifiedShuffleSplit(test_size=0.2,n_splits=10)",CLUSTER_4,CLUSTER_8
scl_obj,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_8
scl_obj,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_8
classify,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=n,
algorithm=algo,
weights='uniform',
metric='euclidean')",CLUSTER_4,CLUSTER_8
classifyK,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=trial,
algorithm=bClassify.algorithm,
weights='uniform',
metric='euclidean')",CLUSTER_4,CLUSTER_8
classify,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=n,
algorithm=algo,
weights='uniform',
metric='euclidean')",CLUSTER_4,CLUSTER_8
classifyK,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=trial,
algorithm=bClassify.algorithm,
weights='uniform',
metric='euclidean')",CLUSTER_4,CLUSTER_8
accuracy,"sklearn.metrics.accuracy_score(y_test,y_hat)",CLUSTER_4,CLUSTER_8
accuracy,"sklearn.metrics.accuracy_score(y_test,y_hat)",CLUSTER_4,CLUSTER_8
accuracyG30,"sklearn.metrics.accuracy_score(y_test,y_hat)",CLUSTER_4,CLUSTER_8
ber_acc,"sklearn.metrics.accuracy_score(y_test,y_hat)",CLUSTER_4,CLUSTER_8
classifyG,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_8
classifyG30,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_8
classify_ber,"sklearn.naive_bayes.BernoulliNB(alpha=i,binarize=i)",CLUSTER_4,CLUSTER_8
classify_ber,"sklearn.naive_bayes.BernoulliNB(alpha=i,binarize=i)",CLUSTER_4,CLUSTER_8
classify30_ber,"sklearn.naive_bayes.BernoulliNB(alpha=i,binarize=i)",CLUSTER_4,CLUSTER_8
classify_ber,"sklearn.naive_bayes.BernoulliNB(alpha=i,binarize=i)",CLUSTER_4,CLUSTER_8
svm_clf,"sklearn.svm.SVC(C=i,kernel=kernel,degree=3,gamma='auto')",CLUSTER_4,CLUSTER_8
svm_clf,"sklearn.svm.SVC(C=bi,kernel='linear',degree=3,gamma='auto')",CLUSTER_4,CLUSTER_8
svm_clf,"sklearn.svm.SVC(C=i,kernel=kernel,degree=3,gamma='auto')",CLUSTER_4,CLUSTER_8
svm_clf,"sklearn.svm.SVC(C=bi,kernel='linear',degree=3,gamma='auto')",CLUSTER_4,CLUSTER_8
returns_sum,collections.defaultdict(float),CLUSTER_1,CLUSTER_10
returns_count,collections.defaultdict(float),CLUSTER_1,CLUSTER_10
V,collections.defaultdict(float),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(15,5)",CLUSTER_1,CLUSTER_3
fig2,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig3,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_1,CLUSTER_3
solar_radiation,"pandas.read_csv(filename,skiprows=4,encoding='shift_jisx0213',usecols=[4])",CLUSTER_1,CLUSTER_3
TIME_AXIS,"numpy.arange(0,TIME_STEPS)",CLUSTER_1,CLUSTER_3
TIME_AXIS,"numpy.arange(0,TIME_STEPS)",CLUSTER_1,CLUSTER_3
_x,numpy.arange(no_of_dist_state),CLUSTER_1,CLUSTER_3
_y,numpy.arange(no_of_henergy_state),CLUSTER_1,CLUSTER_3
solar_energy,numpy.array([i*0.0165*1000000*0.15*1000/(60*60),CLUSTER_1,CLUSTER_3
state,"numpy.array([dist_state,henergy_state,day_state])",CLUSTER_1,CLUSTER_3
q,"numpy.zeros((no_of_dist_state,no_of_henergy_state,no_of_day_state,no_of_actions)",CLUSTER_1,CLUSTER_3
e,"numpy.zeros((no_of_dist_state,no_of_henergy_state,no_of_day_state,no_of_actions)",CLUSTER_1,CLUSTER_3
day_enp_rec,numpy.zeros(0),CLUSTER_1,CLUSTER_3
reward_rec,numpy.zeros(0),CLUSTER_1,CLUSTER_3
batt_rec,numpy.zeros(0),CLUSTER_1,CLUSTER_3
action_rec,numpy.zeros(0),CLUSTER_1,CLUSTER_3
dist_rec,numpy.zeros(0),CLUSTER_1,CLUSTER_3
qdata,"numpy.where(_qdata==q_init,0,_qdata)",CLUSTER_1,CLUSTER_3
greedy,"numpy.empty_like(q[:,:,0,0])",CLUSTER_1,CLUSTER_3
bottom,numpy.zeros_like(top),CLUSTER_1,CLUSTER_3
max_action,numpy.argmax(q_values),CLUSTER_1,CLUSTER_3
next_action,numpy.argmax(q_values),CLUSTER_1,CLUSTER_3
"greedy[i,j]","numpy.argmax(q[i,j,day_state:])",CLUSTER_1,CLUSTER_3
dist_state,"numpy.clip(dist_state,0,41)",CLUSTER_1,CLUSTER_3
tot_day_energy,"numpy.sum(senergy,axis=1)",CLUSTER_1,CLUSTER_3
henergy_state,numpy.ceil(henergy/500),CLUSTER_1,CLUSTER_3
temp,numpy.ceil(np.abs(dist/1000),CLUSTER_1,CLUSTER_3
get_day_state,numpy.vectorize(get_day_state),CLUSTER_1,CLUSTER_3
"_xx,_yy","numpy.meshgrid(_x,_y)",CLUSTER_1,CLUSTER_3
day_enp_rec,"numpy.append(day_enp_rec,next_dist)",CLUSTER_1,CLUSTER_3
reward_rec,"numpy.append(reward_rec,reward)",CLUSTER_1,CLUSTER_3
action_rec,"numpy.append(action_rec,action)",CLUSTER_1,CLUSTER_3
batt_rec,"numpy.append(batt_rec,batt)",CLUSTER_1,CLUSTER_3
dist_rec,"numpy.append(dist_rec,dist)",CLUSTER_1,CLUSTER_3
q,numpy.load(filename),CLUSTER_1,CLUSTER_3
eigvecs,numpy.array(eigvecs),CLUSTER_5,CLUSTER_10
eigvals,numpy.array(eigvals),CLUSTER_5,CLUSTER_10
reconstructions,numpy.asarray(reconstructions),CLUSTER_5,CLUSTER_10
loss,numpy.asarray(loss),CLUSTER_5,CLUSTER_10
times_mm0,numpy.asarray(times_mm0),CLUSTER_5,CLUSTER_10
times_mm1,numpy.asarray(times_mm1),CLUSTER_5,CLUSTER_10
times0,numpy.asarray(times0),CLUSTER_5,CLUSTER_10
times1,numpy.asarray(times1),CLUSTER_5,CLUSTER_10
x,"numpy.concatenate([actual[np.newaxis,:],reconstructions[:,image_idx]])",CLUSTER_5,CLUSTER_10
orders,numpy.argsort(-eigvals),CLUSTER_5,CLUSTER_10
std,"numpy.std(X,axis=0)",CLUSTER_5,CLUSTER_10
B,numpy.matrix(B),CLUSTER_5,CLUSTER_10
X,numpy.matrix(X),CLUSTER_5,CLUSTER_10
X_reconstruct,numpy.matrix(P),CLUSTER_5,CLUSTER_10
X,numpy.matrix(X),CLUSTER_5,CLUSTER_10
X_reconstruct,numpy.matrix(P),CLUSTER_5,CLUSTER_10
"eigvals,eigvecs",numpy.linalg.eigh(S),CLUSTER_5,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(20.,20.)",CLUSTER_5,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_10
app_train['CNT_CHILDREN_GROUP'],"pandas.cut(app_train['CNT_CHILDREN'].values,cut_rule,include_lowest=True)",CLUSTER_4,CLUSTER_11
app_train,pandas.read_csv(f_app),CLUSTER_4,CLUSTER_11
imgplot,matplotlib.pyplot.imshow(img),CLUSTER_7,CLUSTER_8
imgplot,matplotlib.pyplot.imshow(img),CLUSTER_7,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_7,CLUSTER_8
train_sizes,"numpy.arange(0.1,1,0.2)",CLUSTER_7,CLUSTER_8
train_sizes,"numpy.arange(0.1,1,0.2)",CLUSTER_7,CLUSTER_8
answ,"pd.DataFrame(data=numpy.vstack([y_pred_logit,y_pred_lg,train_df.loc[:idx_split,'bin_target'].values])",CLUSTER_7,CLUSTER_8
goes_events,pandas.DataFrame(goes_events),CLUSTER_7,CLUSTER_8
answ,"pandas.DataFrame(data=np.vstack([y_pred_logit,y_pred_lg,train_df.loc[:idx_split,'bin_target'].values])",CLUSTER_7,CLUSTER_8
target,"pandas.Series(full_df.index.map(lambdax:np.sum((x>big_events.start_time-np.timedelta64(horizont,'h')",CLUSTER_7,CLUSTER_8
prev_flux,pandas.Series(full_df.index.map(lambdax:goes_harp.loc[goes_harp.start_time<x].flux.sum(),CLUSTER_7,CLUSTER_8
full_df,"pandas.concat(df_list,axis=1)",CLUSTER_7,CLUSTER_8
train_df,"pandas.concat(df_list,ignore_index=True)",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
dates_to_show,pandas.date_range(pd.Timestamp(first_date),CLUSTER_7,CLUSTER_8
t_range,"pandas.date_range(first_date,last_date,freq=str(time_stamp)",CLUSTER_7,CLUSTER_8
goes_events,"pandas.read_csv(os.path.join(DATA_PATH,'goes_events_2010_2018.csv')",CLUSTER_7,CLUSTER_8
num_mapper,"pandas.read_csv(os.path.join(DATA_PATH,'all_harps_with_noaa_ars.txt')",CLUSTER_7,CLUSTER_8
num_mapper,"pandas.read_csv('http://jsoc.stanford.edu/doc/data/hmi/harpnum_to_noaa/all_harps_with_noaa_ars.txt',sep='')",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(os.path.join(DATA_PATH+'/keys_regions',str_query+'.csv')",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(os.path.join(DATA_PATH+'/keys_regions',str_query+'.csv')",CLUSTER_7,CLUSTER_8
train_df,"pandas.read_pickle(os.path.join(DATA_PATH,'solar_train.pkl')",CLUSTER_7,CLUSTER_8
first_date,pandas.to_datetime(first_date),CLUSTER_7,CLUSTER_8
harp_list,pandas.unique(goes_events.harp_number),CLUSTER_7,CLUSTER_8
g,"seaborn.FacetGrid(train_df,hue=""bin_target"",height=4)",CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=5),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=5),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=5),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=5),CLUSTER_7,CLUSTER_8
score,"sklearn.model_selection.cross_val_score(logit_pipe,train_part[key_cols],train_part['bin_target'],cv=tcv,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
score,"sklearn.model_selection.cross_val_score(rf,train_part[key_cols],train_part['bin_target'],cv=tcv,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
score,"sklearn.model_selection.cross_val_score(lg,train_part[key_cols],train_part['bin_target'],cv=tcv,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
score,"sklearn.model_selection.cross_val_score(logit_pipe,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],cv=tcv,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
score,"sklearn.model_selection.cross_val_score(logit_pipe,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],cv=tcv,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
score,"sklearn.model_selection.cross_val_score(logit_pipe,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],cv=tcv,scoring='roc_auc',n_jobs=-1)",CLUSTER_7,CLUSTER_8
gs,"sklearn.model_selection.GridSearchCV(logit_pipe,param_grid,cv=tcv,scoring='roc_auc',n_jobs=-1)",CLUSTER_7,CLUSTER_8
gs,"sklearn.model_selection.GridSearchCV(logit_pipe,param_grid,cv=tcv,scoring='roc_auc',n_jobs=-1)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(lg,n_jobs=-1,param_grid=param_dist,cv=tcv,scoring=""roc_auc"",verbose=5)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(lg,n_jobs=-1,param_grid=param_dist,cv=3,scoring=""roc_auc"",verbose=5)",CLUSTER_7,CLUSTER_8
logit_2lev,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('scaler',StandardScaler()",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=3,class_weight='balanced')",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,max_depth=3,class_weight='balanced')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(logit_pipe,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],
train_sizes=np.arange(0.1,1,0.2)",CLUSTER_7,CLUSTER_8
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(lg,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],
train_sizes=np.arange(0.1,1,0.2)",CLUSTER_7,CLUSTER_8
y_pred_logit,"sklearn.model_selection.cross_val_predict(logit_pipe,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],cv=3,method='predict_proba')",CLUSTER_7,CLUSTER_8
y_pred_lg,"sklearn.model_selection.cross_val_predict(lg,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],cv=3,method='predict_proba')",CLUSTER_7,CLUSTER_8
trY_sf,numpy.where((np.array(trY1_sf),CLUSTER_6,CLUSTER_0
best_loss,numpy.mean(losses),CLUSTER_6,CLUSTER_0
trData,"pandas.read_csv(root_dir+""trainset.csv"",sep=',')",CLUSTER_6,CLUSTER_0
teData,"pandas.read_csv(root_dir+""testset.csv"",sep=',')",CLUSTER_6,CLUSTER_0
idx_sf,"random.sample(range(0,spls)",CLUSTER_6,CLUSTER_0
tstart,time.time(),CLUSTER_6,CLUSTER_0
elapsed,time.time(),CLUSTER_6,CLUSTER_0
tstart,time.time(),CLUSTER_6,CLUSTER_0
elapsed,time.time(),CLUSTER_6,CLUSTER_0
X_test,"pandas.read_csv(""X_test.csv"")",CLUSTER_8,CLUSTER_1
y_test,"pandas.read_csv(""y_test.csv"")",CLUSTER_8,CLUSTER_1
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
housing_df,"pandas.concat([housing_df,pd.get_dummies(housing_df.kitchenqual,prefix='kitchenqual',drop_first=True)",CLUSTER_7,CLUSTER_5
housing_df,"pandas.concat([housing_df,pd.get_dummies(housing_df.exterqual,prefix='exterqual',drop_first=True)",CLUSTER_7,CLUSTER_5
housing_df,"pandas.concat([housing_df,pd.get_dummies(housing_df.mszoning,prefix='mszoning',drop_first=True)",CLUSTER_7,CLUSTER_5
housing_df,"pandas.read_sql_query('select*fromhouseprices',con=engine)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=17)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=17)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=17)",CLUSTER_7,CLUSTER_5
img,numpy.squeeze(images[0]),CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_6,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=10,sharex=True,sharey=True,figsize=(25,4)",CLUSTER_6,CLUSTER_10
X,pandas.concat(frames),CLUSTER_5,CLUSTER_1
trainData,"pandas.read_csv(trainFile,sep="","",header=0)",CLUSTER_5,CLUSTER_1
testData,"pandas.read_csv(testFile,sep="","",header=0)",CLUSTER_5,CLUSTER_1
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=nTrees,max_depth=max_depth,random_state=0,verbose=verbose,min_samples_leaf=min_node_size)",CLUSTER_5,CLUSTER_1
gbm_clf,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=nTrees,loss='deviance',learning_rate=learning_rate,max_depth=max_depth,\
min_samples_leaf=min_node_size)",CLUSTER_5,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(7,7)",CLUSTER_2,CLUSTER_7
fig,"matplotlib.pyplot.figure(figsize=(7,7)",CLUSTER_2,CLUSTER_7
data_train,"numpy.transpose([x_train,y_train])",CLUSTER_2,CLUSTER_7
data_valid,"numpy.transpose([x_valid,y_valid])",CLUSTER_2,CLUSTER_7
data_predicted,"numpy.transpose([x_predicted,y_predicted])",CLUSTER_2,CLUSTER_7
x,"numpy.linspace(-1.5,1.5,1000)",CLUSTER_2,CLUSTER_7
y,"numpy.linspace(-1.5,1.5,1000)",CLUSTER_2,CLUSTER_7
"x,y","numpy.meshgrid(x,y)",CLUSTER_2,CLUSTER_7
donations_count,"pandas.DataFrame(
df_donations.groupby(""DonorID"")",CLUSTER_7,CLUSTER_8
temp,pandas.DataFrame(df_merged.groupby(['SchoolState']),CLUSTER_7,CLUSTER_8
coefficients_linR,pandas.DataFrame(data),CLUSTER_7,CLUSTER_8
coefficients,pandas.DataFrame(data),CLUSTER_7,CLUSTER_8
dfscores,pandas.DataFrame(fit.scores_),CLUSTER_7,CLUSTER_8
dfcolumns,pandas.DataFrame(X_.columns),CLUSTER_7,CLUSTER_8
feat_importances,"pandas.Series(rfc.feature_importances_,index=X_.columns)",CLUSTER_7,CLUSTER_8
feat_importances,"pandas.Series(clf.feature_importances_,index=X_.columns)",CLUSTER_7,CLUSTER_8
importance_series,"pandas.Series(model_xgb.feature_importances_,\
index=X_.columns)",CLUSTER_7,CLUSTER_8
feat_importances,"pandas.Series(modelext.feature_importances_,index=X_.columns)",CLUSTER_7,CLUSTER_8
featureScores,"pandas.concat([dfcolumns,dfscores],axis=1)",CLUSTER_7,CLUSTER_8
new_df,"pandas.merge(grouped,fullyfunded,how='left',left_on=['DonationReceivedYear','DonationReceivedMonth'],right_on=['DonationReceivedYear','DonationReceivedMonth'])",CLUSTER_7,CLUSTER_8
df_donations,"pandas.read_csv(""Donations.csv"")",CLUSTER_7,CLUSTER_8
df_projects,"pandas.read_csv(""Projects.csv"")",CLUSTER_7,CLUSTER_8
df_schools,"pandas.read_csv(""Schools.csv"")",CLUSTER_7,CLUSTER_8
df_merged['DonationReceivedDate'],pandas.to_datetime(df_merged['DonationReceivedDate']),CLUSTER_7,CLUSTER_8
df_merged['ProjectPostedDate'],pandas.to_datetime(df_merged['ProjectPostedDate']),CLUSTER_7,CLUSTER_8
new['ProjectExpirationDate'],pandas.to_datetime(new['ProjectExpirationDate']),CLUSTER_7,CLUSTER_8
new['ProjectFullyFundedDate'],pandas.to_datetime(new['ProjectFullyFundedDate']),CLUSTER_7,CLUSTER_8
timestamp,pandas.to_datetime('now'),CLUSTER_7,CLUSTER_8
X_predict_ffexpired_sub['log_ProjectCost'],numpy.log10(X_predict_ffexpired_sub['ProjectCost']),CLUSTER_7,CLUSTER_8
X_predict_ffexpired_sub['log_DonationAmount'],numpy.log10(X_predict_ffexpired_sub['DonationAmount']),CLUSTER_7,CLUSTER_8
color,seaborn.color_palette(),CLUSTER_7,CLUSTER_8
color,seaborn.color_palette('viridis'),CLUSTER_7,CLUSTER_8
color,seaborn.color_palette('bright'),CLUSTER_7,CLUSTER_8
color,seaborn.color_palette('viridis'),CLUSTER_7,CLUSTER_8
g,seaborn.heatmap(X_sample[top_corr_features].corr(),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(13,8)",CLUSTER_7,CLUSTER_8
"lines,labels",matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
"lines2,labels2",matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
"fig1,ax1",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
kmeans,sklearn.cluster.KMeans(n_clusters=no_of_clusters),CLUSTER_7,CLUSTER_8
gmm,sklearn.mixture.GaussianMixture(n_components=numOfClusters),CLUSTER_7,CLUSTER_8
"xTrain,xTest,yTrain,yTest","sklearn.model_selection.train_test_split(x3,y3,test_size=0.25,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train_LR,X_test_LR,y_train_LR,y_test_LR","sklearn.model_selection.train_test_split(X_,y_,test_size=0.25,random_state=123)",CLUSTER_7,CLUSTER_8
"X_train_RFC,X_test_RFC,y_train_RFC,y_test_RFC","sklearn.model_selection.train_test_split(X_,y_,test_size=0.25)",CLUSTER_7,CLUSTER_8
"xTrain,xTest,yTrain,yTest","sklearn.model_selection.train_test_split(x,y,test_size=0.25,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train_vt,X_test_vt,y_train_vt,y_test_vt","sklearn.model_selection.train_test_split(X_,y_,test_size=0.25,random_state=123)",CLUSTER_7,CLUSTER_8
linearRegressor,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
auc_score,"sklearn.metrics.roc_auc_score(y_test,y_pred_prob)",CLUSTER_7,CLUSTER_8
clf,"sklearn.tree.DecisionTreeClassifier(max_depth=5,random_state=12)",CLUSTER_7,CLUSTER_8
accuracy_LR,"sklearn.metrics.accuracy_score(y_test_LR,y_pred_LR)",CLUSTER_7,CLUSTER_8
accuracy_RFC,"sklearn.metrics.accuracy_score(y_test_RFC,y_pred_RFC)",CLUSTER_7,CLUSTER_8
accuracy_DT,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_7,CLUSTER_8
accuracy_NB,"sklearn.metrics.accuracy_score(y_test,pred_gnb)",CLUSTER_7,CLUSTER_8
accuracy_svc,"sklearn.metrics.accuracy_score(y_test,y_pred_svc)",CLUSTER_7,CLUSTER_8
accuracy_knn,"sklearn.metrics.accuracy_score(y_test,y_pred_knn)",CLUSTER_7,CLUSTER_8
accuracy_VT,"sklearn.metrics.accuracy_score(y_test_vt,pred_vt)",CLUSTER_7,CLUSTER_8
mat_LR,"sklearn.metrics.confusion_matrix(y_test_LR,y_pred_LR)",CLUSTER_7,CLUSTER_8
mat_RFC,"sklearn.metrics.confusion_matrix(y_test_RFC,y_pred_RFC)",CLUSTER_7,CLUSTER_8
mat_dtree,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_7,CLUSTER_8
mat_gnb,"sklearn.metrics.confusion_matrix(y_test,pred_gnb)",CLUSTER_7,CLUSTER_8
mat_svc,"sklearn.metrics.confusion_matrix(y_test,y_pred_svc)",CLUSTER_7,CLUSTER_8
mat_knn,"sklearn.metrics.confusion_matrix(y_test,y_pred_knn)",CLUSTER_7,CLUSTER_8
mat_vt,"sklearn.metrics.confusion_matrix(y_test_vt,pred_vt)",CLUSTER_7,CLUSTER_8
cls_LR,"sklearn.metrics.classification_report(y_test_LR,y_pred_LR,target_names=ylabels)",CLUSTER_7,CLUSTER_8
cls_RFC,"sklearn.metrics.classification_report(y_test_RFC,y_pred_RFC,target_names=ylabels)",CLUSTER_7,CLUSTER_8
cls_dtree,"sklearn.metrics.classification_report(y_test,pred,target_names=ylabels)",CLUSTER_7,CLUSTER_8
cls_gnb,"sklearn.metrics.classification_report(y_test,pred_gnb,target_names=ylabels)",CLUSTER_7,CLUSTER_8
cls_svc,"sklearn.metrics.classification_report(y_test,y_pred_svc,target_names=ylabels)",CLUSTER_7,CLUSTER_8
cls_knn,"sklearn.metrics.classification_report(y_test,y_pred_knn,target_names=ylabels)",CLUSTER_7,CLUSTER_8
cls_vt,"sklearn.metrics.classification_report(y_test_vt,pred_vt,target_names=ylabels)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,y_pred_prob)",CLUSTER_7,CLUSTER_8
rfc,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_7,CLUSTER_8
log_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=7),CLUSTER_7,CLUSTER_8
lr,"sklearn.linear_model.LogisticRegression(C=10,penalty='l1')",CLUSTER_7,CLUSTER_8
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_7,CLUSTER_8
sl,"sklearn.metrics.silhouette_score(X_sample,labels)",CLUSTER_7,CLUSTER_8
modelext,sklearn.ensemble.ExtraTreesClassifier(),CLUSTER_7,CLUSTER_8
bestfeatures,"sklearn.feature_selection.SelectKBest(score_func=chi2,k=10)",CLUSTER_7,CLUSTER_8
svc,"sklearn.svm.SVC(kernel='linear',probability=True)",CLUSTER_7,CLUSTER_8
svm_clf,sklearn.svm.SVC(probability=True),CLUSTER_7,CLUSTER_8
rnd_clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
voting_clf,"sklearn.ensemble.VotingClassifier(estimators=[('lr',log_clf)",CLUSTER_7,CLUSTER_8
size,numpy.shape(data),CLUSTER_5,CLUSTER_5
raw_data,"numpy.genfromtxt(data_path,delimiter=',')",CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=10),CLUSTER_5,CLUSTER_5
pddata,pandas.DataFrame(data=X_train_pca),CLUSTER_5,CLUSTER_5
pddata,pandas.DataFrame(data=new_data),CLUSTER_5,CLUSTER_5
ticks,"numpy.arange(0,10,1)",CLUSTER_5,CLUSTER_5
ticks,"numpy.arange(0,10,1)",CLUSTER_5,CLUSTER_5
X_train,sklearn.preprocessing.scale(X_train),CLUSTER_5,CLUSTER_5
X_test,sklearn.preprocessing.scale(X_test),CLUSTER_5,CLUSTER_5
X_deploy,sklearn.preprocessing.scale(X_deploy),CLUSTER_5,CLUSTER_5
fs,sklearn.feature_selection.SelectKBest(k=10),CLUSTER_5,CLUSTER_5
clf_neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
clf_svm_linear,sklearn.svm.LinearSVC(C=20.0),CLUSTER_5,CLUSTER_5
clf_svm,"sklearn.svm.SVC(C=5.0,kernel='rbf')",CLUSTER_5,CLUSTER_5
clf_dt,sklearn.tree.DecisionTreeClassifier(min_samples_split=2),CLUSTER_5,CLUSTER_5
clf_dt_IG,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',min_samples_split=2)",CLUSTER_5,CLUSTER_5
clf_dt_BGKN,sklearn.ensemble.BaggingClassifier(KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
clf_dt_BGDT,"sklearn.ensemble.BaggingClassifier(DecisionTreeClassifier(criterion='entropy',min_samples_split=2)",CLUSTER_5,CLUSTER_5
clf_dt_RF,sklearn.ensemble.RandomForestClassifier(),CLUSTER_5,CLUSTER_5
clf_dt_AD,sklearn.ensemble.AdaBoostClassifier(),CLUSTER_5,CLUSTER_5
clf_NB,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_5
clf_dt_LDA,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(),CLUSTER_5,CLUSTER_5
clf_dt_QDA,sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis(),CLUSTER_5,CLUSTER_5
data,requests.get(page_URL),CLUSTER_9,CLUSTER_2
data,requests.get(URL_temp),CLUSTER_9,CLUSTER_2
regex,re.compile('[^a-zA-Z]'),CLUSTER_9,CLUSTER_2
df,"pandas.DataFrame({'Nomi':[elemento[0]forelementoincomplete_list],
'Genere':[elemento[1]forelementoincomplete_list],
'Recensioni':[elemento[2]forelementoincomplete_list],
'Voti':[elemento[3]forelementoincomplete_list],
'Scrittada':[elemento[4]forelementoincomplete_list]})",CLUSTER_9,CLUSTER_2
writer,"pandas.ExcelWriter('RISTORANTE_18.xlsx',engine='xlsxwriter')",CLUSTER_9,CLUSTER_2
partial_dataframe,"pandas.read_excel(""RISTORANTE_18.xlsx"")",CLUSTER_9,CLUSTER_2
n_cluster,"numpy.arange(10,20)",CLUSTER_5,CLUSTER_8
ind,numpy.arange(nb_examples),CLUSTER_5,CLUSTER_8
y,"numpy.arange(0,len(scores['mean'])",CLUSTER_5,CLUSTER_8
sil,numpy.array(silhouette_score_list),CLUSTER_5,CLUSTER_8
score,numpy.array(x),CLUSTER_5,CLUSTER_8
mean[i],numpy.mean(scores[i]),CLUSTER_5,CLUSTER_8
img,"numpy.reshape(images,(len(images)",CLUSTER_5,CLUSTER_8
std[i],numpy.std(scores[i]),CLUSTER_5,CLUSTER_8
d,"numpy.log(dist[:,k-1:k]/dist[:,0:k-1])",CLUSTER_5,CLUSTER_8
"points,labels",numpy.loadtxt('data/clustering.txt'),CLUSTER_5,CLUSTER_8
clf,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=0)",CLUSTER_5,CLUSTER_8
X,sklearn.datasets.fetch_20newsgroups_vectorized(),CLUSTER_5,CLUSTER_8
X,pandas.DataFrame(X),CLUSTER_5,CLUSTER_8
temp,"pandas.DataFrame({
""dim.reductionmethod"":list(methods.keys()",CLUSTER_5,CLUSTER_8
neighb,sklearn.neighbors.NearestNeighbors(n_neighbors=k+1),CLUSTER_5,CLUSTER_8
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_8
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_8
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_8
data,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_8
data,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_8
dataa,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_8
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_8
pca1,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_8
pca,sklearn.decomposition.PCA(item),CLUSTER_5,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_5,CLUSTER_8
pca,"sklearn.decomposition.PCA(n_components=60,random_state=0)",CLUSTER_5,CLUSTER_8
iso,"sklearn.manifold.Isomap(n_neighbors=5,n_components=3,eigen_solver='dense')",CLUSTER_5,CLUSTER_8
ica,sklearn.decomposition.FastICA(n_components=3),CLUSTER_5,CLUSTER_8
rkf,"sklearn.model_selection.RepeatedKFold(n_splits=5,n_repeats=3,random_state=0)",CLUSTER_5,CLUSTER_8
logreg,"sklearn.linear_model.LogisticRegression(solver='lbfgs',multi_class='multinomial')",CLUSTER_5,CLUSTER_8
"t1,val1","scipy.stats.ttest_ind(scores[0],scores[1])",CLUSTER_5,CLUSTER_8
"t2,val2","scipy.stats.ttest_ind(scores[2],scores[0])",CLUSTER_5,CLUSTER_8
clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=4,weights='distance',n_jobs=-1)",CLUSTER_5,CLUSTER_8
app_train,pandas.read_csv(f_app),CLUSTER_7,CLUSTER_8
k2,pandas.DataFrame(k2),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_5,CLUSTER_5
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=4),CLUSTER_5,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test,y_predicted)",CLUSTER_5,CLUSTER_5
f1,"sklearn.metrics.f1_score(y_test,y_predicted,average='weighted')",CLUSTER_5,CLUSTER_5
precision,"sklearn.metrics.precision_score(y_test,y_predicted,average='weighted')",CLUSTER_5,CLUSTER_5
recall,"sklearn.metrics.recall_score(y_test,y_predicted,average='weighted')",CLUSTER_5,CLUSTER_5
partial_train_data,"numpy.concatenate(
[train_data[:i*num_val_samples],
train_data[(i+1)",CLUSTER_2,CLUSTER_7
partial_train_targets,"numpy.concatenate(
[train_targets[:i*num_val_samples],
train_targets[(i+1)",CLUSTER_2,CLUSTER_7
partial_train_data,"numpy.concatenate(
[train_data[:i*num_val_samples],
train_data[(i+1)",CLUSTER_2,CLUSTER_7
partial_train_targets,"numpy.concatenate(
[train_targets[:i*num_val_samples],
train_targets[(i+1)",CLUSTER_2,CLUSTER_7
rf,numpy.array(Rf),CLUSTER_4,CLUSTER_11
ar,numpy.array(ar),CLUSTER_4,CLUSTER_11
br,numpy.array(br),CLUSTER_4,CLUSTER_11
relevance_train,"pandas.read_csv('relevance_train.csv',sep='\t')",CLUSTER_4,CLUSTER_11
relevance_test,pandas.read_csv('relevance_test.csv'),CLUSTER_4,CLUSTER_11
queries,"pandas.read_csv('queries.csv',index_col=""QueryId"")",CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
wwd,collections.defaultdict(lambda:0),CLUSTER_4,CLUSTER_11
wwq,collections.defaultdict(lambda:0),CLUSTER_4,CLUSTER_11
df_compart_bikes,pandas.read_csv('comp_bikes_mod.csv'),CLUSTER_7,CLUSTER_5
df_compart_bikes['dteday'],pandas.to_datetime(df_compart_bikes.dteday),CLUSTER_7,CLUSTER_5
reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
R_2,"sklearn.metrics.r2_score(saida_regressao,previsao)",CLUSTER_7,CLUSTER_5
R_2,"sklearn.metrics.r2_score(saida_regressao,previsao_arvore)",CLUSTER_7,CLUSTER_5
arvore_regressora,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(arvore_regressora,out_file=None)",CLUSTER_7,CLUSTER_5
b,"pandas.pivot(a,index='ROOM',columns='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot(a,index='ROOM',columns='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index='ROOM',columns='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index='ROOM',columns='MONTH',values='RENT',
aggfunc=np.mean)",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index='ROOM',columns='MONTH',values='RENT',
aggfunc=np.sum)",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index='ROOM',columns='MONTH',values='RENT',
aggfunc=np.sum,
margins=True,margins_name='TOTAL')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index=['ROOM','NAME'],columns='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,columns=['ROOM','NAME'],index='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
a,pandas.read_excel('house_rent_no_duplicate.xlsx'),CLUSTER_8,CLUSTER_3
a,pandas.read_excel('house_rent_duplicate.xlsx'),CLUSTER_8,CLUSTER_3
merged,"pandas.merge(df_f,df1_f,on=[""SQ_CANDIDATO"",'SG_PARTIDO',""NM_CANDIDATO""])",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv('Votos_Somados.csv',decimal=',')",CLUSTER_8,CLUSTER_4
df1,"pandas.read_csv('Despesas_Consolidadas.csv',decimal=',')",CLUSTER_8,CLUSTER_4
rmse,numpy.sqrt(np.mean(scores),CLUSTER_3,CLUSTER_6
X,numpy.load('data/X_white.npy'),CLUSTER_3,CLUSTER_6
y,numpy.load('data/y_white.npy'),CLUSTER_3,CLUSTER_6
end,time.perf_counter(),CLUSTER_3,CLUSTER_6
start,time.perf_counter(),CLUSTER_3,CLUSTER_6
start,time.perf_counter(),CLUSTER_3,CLUSTER_6
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,random_state=0)",CLUSTER_3,CLUSTER_6
rfr,"sklearn.ensemble.RandomForestRegressor(random_state=0,n_estimators=10)",CLUSTER_3,CLUSTER_6
rfr,"sklearn.ensemble.RandomForestRegressor(**bp,random_state=0)",CLUSTER_3,CLUSTER_6
grid,"sklearn.model_selection.GridSearchCV(rfr,params,cv=5,n_jobs=-1,
verbose=1)",CLUSTER_3,CLUSTER_6
dd1,"pandas.DataFrame(sd1.values,columns=['Activity','Start','End','Duration'])",CLUSTER_4,CLUSTER_11
dd2,"pandas.DataFrame(sd2.values,columns=['Activity','Start','End','Duration'])",CLUSTER_4,CLUSTER_11
data,"pandas.read_csv(fpath,sep=',',names=cols,skiprows=0)",CLUSTER_4,CLUSTER_11
augmented,json.load(fopen),CLUSTER_0,CLUSTER_7
name_to_variable,collections.OrderedDict(),CLUSTER_0,CLUSTER_7
assignment_map,collections.OrderedDict(),CLUSTER_0,CLUSTER_7
m,re.match('^(.*),CLUSTER_0,CLUSTER_7
string,re.sub('[^A-Za-z0-9\-\/(),CLUSTER_0,CLUSTER_7
string,"re.sub(r'[]+','',string)",CLUSTER_0,CLUSTER_7
vw_pred,numpy.loadtxt('vw_valid_10mln_pred1.csv'),CLUSTER_7,CLUSTER_8
test_labels,"numpy.loadtxt(os.path.join(PATH_TO_DATA,
'stackoverflow_10mln_test_labels.txt')",CLUSTER_7,CLUSTER_8
one_hot_example,pandas.DataFrame([{i:0foriinrange(10),CLUSTER_7,CLUSTER_8
encoded_categorical_columns,pandas.DataFrame(onehot_encoder.fit_transform(df[categorical_columns]),CLUSTER_7,CLUSTER_8
hashing_example,pandas.DataFrame([{i:0.0foriinrange(hash_space),CLUSTER_7,CLUSTER_8
mapped_education,pandas.Series(label_encoder.fit_transform(df['education']),CLUSTER_7,CLUSTER_8
data_demo,pandas.read_csv('../../data/weights_heights.csv'),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('../../data/bank_train.csv'),CLUSTER_7,CLUSTER_8
labels,"pandas.read_csv('../../data/bank_train_target.csv',header=None)",CLUSTER_7,CLUSTER_8
logit,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
auc,"sklearn.metrics.roc_auc_score(test_labels,test_prediction)",CLUSTER_7,CLUSTER_8
roc_curve,"sklearn.metrics.roc_curve(test_labels,test_prediction)",CLUSTER_7,CLUSTER_8
M,"sklearn.metrics.confusion_matrix(test_labels_mult,test_prediction_mult)",CLUSTER_7,CLUSTER_8
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
topic_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_7,CLUSTER_8
newsgroups,sklearn.datasets.fetch_20newsgroups('../../data/news_data'),CLUSTER_7,CLUSTER_8
reviews_train,"sklearn.datasets.load_files(os.path.join(path_to_movies,'train')",CLUSTER_7,CLUSTER_8
reviews_test,"sklearn.datasets.load_files(os.path.join(path_to_movies,'test')",CLUSTER_7,CLUSTER_8
ycols,pandas.DataFrame(),CLUSTER_5,CLUSTER_1
df,"pandas.read_csv(""https://docs.google.com/spreadsheets/d/1pmBtSw7v_tU_dIX1-4E8_Q7wC43fDs6LGDQzN49-ffk/export?format=csv"")",CLUSTER_5,CLUSTER_1
yarr,numpy.array(y),CLUSTER_5,CLUSTER_1
ycols['pitchType'],numpy.unique(dfnum['pitchType']),CLUSTER_5,CLUSTER_1
pca,sklearn.decomposition.PCA(n_components=8),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
r,random.random(),CLUSTER_5,CLUSTER_1
b,random.random(),CLUSTER_5,CLUSTER_1
g,random.random(),CLUSTER_5,CLUSTER_1
content,requests.get(URL+FILENAME),CLUSTER_6,CLUSTER_10
val_loss,"numpy.sum(np.multiply(losses,nums)",CLUSTER_6,CLUSTER_10
canvas,"numpy.empty((28*n,28*n)",CLUSTER_2,CLUSTER_7
x_axis,"numpy.linspace(-1,1,n)",CLUSTER_2,CLUSTER_7
y_axis,"numpy.linspace(-1,1,n)",CLUSTER_2,CLUSTER_7
results_list,os.listdir('/headless/ray_results/'+exp_name),CLUSTER_4,CLUSTER_11
x,numpy.arange(int(env.env_params.horizon),CLUSTER_4,CLUSTER_11
y,"numpy.arange(0,int(left_length)",CLUSTER_4,CLUSTER_11
vel_map_,numpy.zeros(int(left_length),CLUSTER_4,CLUSTER_11
v,numpy.mean(env.k.vehicle.get_speed(env.k.vehicle.get_ids(),CLUSTER_4,CLUSTER_11
vel_mean,"numpy.mean(vel_list,axis=0)",CLUSTER_4,CLUSTER_11
outflow_mean,"numpy.mean(outflow_list,axis=0)",CLUSTER_4,CLUSTER_11
vel_map_list,"numpy.vstack((vel_map_list,vel_map_)",CLUSTER_4,CLUSTER_11
"xx,yy","numpy.meshgrid(x,y)",CLUSTER_4,CLUSTER_11
vel_mean,numpy.load(data_path+'ppo_trained_'+str(num_trials),CLUSTER_4,CLUSTER_11
outflow_mean,numpy.load(data_path+'ppo_trained_'+str(num_trials),CLUSTER_4,CLUSTER_11
vel_map_mean,numpy.load(data_path+'ppo_trained_'+str(num_trials),CLUSTER_4,CLUSTER_11
human_vel_mean,numpy.load(data_path+'human_'+str(num_trials),CLUSTER_4,CLUSTER_11
human_outflow_mean,numpy.load(data_path+'human_'+str(num_trials),CLUSTER_4,CLUSTER_11
human_vel_map_mean,numpy.load(data_path+'human_'+str(num_trials),CLUSTER_4,CLUSTER_11
vel_map_mean,"numpy.nanmean(vel_map_lists,axis=0)",CLUSTER_4,CLUSTER_11
"vel_fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1)",CLUSTER_4,CLUSTER_11
"outflow_fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1)",CLUSTER_4,CLUSTER_11
"space_fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=1,figsize=(10,10)",CLUSTER_4,CLUSTER_11
df,pandas.DataFrame({'A':np.random.randn(365),CLUSTER_7,CLUSTER_3
v1,"pandas.Series(np.random.normal(0,10,1000)",CLUSTER_7,CLUSTER_3
v2,"pandas.Series(2*v1+np.random.normal(60,15,1000)",CLUSTER_7,CLUSTER_3
index,"pandas.date_range('1/1/2017',periods=365)",CLUSTER_7,CLUSTER_3
iris,pandas.read_csv('iris.csv'),CLUSTER_7,CLUSTER_3
iris,pandas.read_csv('iris.csv'),CLUSTER_7,CLUSTER_3
"plt.hist(v1,alpha","0.7,bins=numpy.arange(-50,150,5)",CLUSTER_7,CLUSTER_3
"plt.hist(v2,alpha","0.7,bins=numpy.arange(-50,150,5)",CLUSTER_7,CLUSTER_3
v3,"numpy.concatenate((v1,v2)",CLUSTER_7,CLUSTER_3
grid,"seaborn.jointplot(v1,v2,alpha=0.4)",CLUSTER_7,CLUSTER_3
current_time,"time.strftime(""%Y-%m-%d%H:%M:%S"",time.gmtime()",CLUSTER_8,CLUSTER_12
past,time.time(),CLUSTER_8,CLUSTER_12
present,time.time(),CLUSTER_8,CLUSTER_12
writer,"pandas.ExcelWriter('/'.join([PATH,new_file_name_regexp+'.xlsx'])",CLUSTER_8,CLUSTER_12
x,numpy.asarray(x),CLUSTER_2,CLUSTER_7
y_target,"numpy.zeros((1,2)",CLUSTER_2,CLUSTER_7
ifnp.argmax(y_target),=numpy.argmax(output_),CLUSTER_2,CLUSTER_7
truth,"numpy.concatenate(truth,axis=0)",CLUSTER_0,CLUSTER_5
svm_prediction,"numpy.concatenate(svm_prediction,axis=0)",CLUSTER_0,CLUSTER_5
truth,"numpy.concatenate(truth,axis=0)",CLUSTER_0,CLUSTER_5
svm_prediction,"numpy.concatenate(svm_prediction,axis=0)",CLUSTER_0,CLUSTER_5
truth,"numpy.concatenate(truth,axis=0)",CLUSTER_0,CLUSTER_5
svm_prediction,"numpy.concatenate(svm_prediction,axis=0)",CLUSTER_0,CLUSTER_5
test_results,numpy.sum(svm_prediction==truth),CLUSTER_0,CLUSTER_5
train_results,numpy.sum(Y_hat==Y),CLUSTER_0,CLUSTER_5
test_results,numpy.sum(svm_prediction==truth),CLUSTER_0,CLUSTER_5
train_results,numpy.sum(Y_hat==Y),CLUSTER_0,CLUSTER_5
test_results,numpy.sum(svm_prediction==truth),CLUSTER_0,CLUSTER_5
train_results,numpy.sum(Y_hat==Y),CLUSTER_0,CLUSTER_5
results,"pandas.DataFrame(columns=('name','accuracy')",CLUSTER_0,CLUSTER_5
results,"pandas.DataFrame(columns=('name','accuracy')",CLUSTER_0,CLUSTER_5
results,"pandas.DataFrame(columns=('name','accuracy')",CLUSTER_0,CLUSTER_5
svm_ct,"pandas.crosstab(best[1],best[0],margins=True)",CLUSTER_0,CLUSTER_5
svm,"sklearn.svm.SVC(C=C[c],kernel='linear')",CLUSTER_0,CLUSTER_5
svm,"sklearn.svm.SVC(C=C[c],kernel='poly',degree=degree[d],coef0=coef[r],gamma='auto')",CLUSTER_0,CLUSTER_5
svm,"sklearn.svm.SVC(C=C[c],kernel='rbf',gamma=gamma[g])",CLUSTER_0,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True)",CLUSTER_0,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True)",CLUSTER_0,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True)",CLUSTER_0,CLUSTER_5
"svm_fpr,svm_tpr,svm_thresholds","sklearn.metrics.roc_curve(best[0],best[1],pos_label=1)",CLUSTER_0,CLUSTER_5
roc_auc,"sklearn.metrics.auc(svm_fpr,svm_tpr)",CLUSTER_0,CLUSTER_5
axis,matplotlib.pyplot.gca(),CLUSTER_0,CLUSTER_5
trainAcc,"matplotlib.pyplot.plot(C,tracc,label=name+'-TrainingError',ls='dashed',linewidth=2)",CLUSTER_0,CLUSTER_5
testACC,"matplotlib.pyplot.plot(C,tstacc,label=name+'-TestingError',color=color,linewidth=2)",CLUSTER_0,CLUSTER_5
churn_df,"pandas.read_csv(""ChurnData.csv"")",CLUSTER_5,CLUSTER_9
tick_marks,numpy.arange(len(classes),CLUSTER_5,CLUSTER_9
X,"numpy.asarray(churn_df[['tenure','age','address','income','ed','employ','equip']])",CLUSTER_5,CLUSTER_9
y,numpy.asarray(churn_df['churn']),CLUSTER_5,CLUSTER_9
X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=4)",CLUSTER_5,CLUSTER_9
LR,"sklearn.linear_model.LogisticRegression(C=0.01,solver='liblinear')",CLUSTER_5,CLUSTER_9
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,yhat,labels=[1,0])",CLUSTER_5,CLUSTER_9
"x[...,0]","numpy.dot(x[...,:3],[0.299,0.587,0.114])",CLUSTER_5,CLUSTER_7
x,"numpy.delete(x,[1,2],3)",CLUSTER_5,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_7
index,"random.randint(0,len(X_train)",CLUSTER_5,CLUSTER_7
index,"random.randint(0,len(X_predict)",CLUSTER_5,CLUSTER_7
cnt,collections.Counter(list),CLUSTER_10,CLUSTER_4
cnt,"collections.Counter({1:3,2:4})",CLUSTER_10,CLUSTER_4
cnt,collections.Counter(list),CLUSTER_10,CLUSTER_4
cnt,"collections.Counter({1:3,2:4})",CLUSTER_10,CLUSTER_4
cnt,collections.Counter(list),CLUSTER_10,CLUSTER_4
favs,"collections.Counter(nameforname,colourincolours)",CLUSTER_10,CLUSTER_4
c,collections.Counter('Amazingtutorial!'),CLUSTER_10,CLUSTER_4
nums,collections.defaultdict(int),CLUSTER_10,CLUSTER_4
count,collections.defaultdict(int),CLUSTER_10,CLUSTER_4
od,collections.OrderedDict(),CLUSTER_10,CLUSTER_4
od,collections.OrderedDict(cnt.most_common(),CLUSTER_10,CLUSTER_4
colours,"collections.OrderedDict([(""Red"",198)",CLUSTER_10,CLUSTER_4
deq,collections.deque(list),CLUSTER_10,CLUSTER_4
deq,collections.deque(list),CLUSTER_10,CLUSTER_4
deq,collections.deque(list),CLUSTER_10,CLUSTER_4
d,collections.deque(),CLUSTER_10,CLUSTER_4
d,collections.deque(range(5),CLUSTER_10,CLUSTER_4
d,"collections.deque([0,1,2,3,5],maxlen=5)",CLUSTER_10,CLUSTER_4
d,"collections.deque([1,2,3,4,5])",CLUSTER_10,CLUSTER_4
Student,"collections.namedtuple('Student','fname,lname,age')",CLUSTER_10,CLUSTER_4
Animal,"collections.namedtuple(""Animals"",'nameagetype')",CLUSTER_10,CLUSTER_4
Animal,"collections.namedtuple('Animal','nameagetype')",CLUSTER_10,CLUSTER_4
Animal,"collections.namedtuple('Animal','nameagetype')",CLUSTER_10,CLUSTER_4
Animal,"collections.namedtuple('Animal','nameagetype')",CLUSTER_10,CLUSTER_4
chain_map,"collections.ChainMap(dict1,dict2)",CLUSTER_10,CLUSTER_4
chain_map,"collections.ChainMap(dict1,dict2)",CLUSTER_10,CLUSTER_4
df1['salesafterfirstdiff.'],numpy.log(df1['sales']),CLUSTER_5,CLUSTER_5
df1['salesafterseconddiff.'],numpy.log(df1['salesafterfirstdiff.']),CLUSTER_5,CLUSTER_5
df2['salesafterfirstdiff.'],numpy.log(df2['sales']),CLUSTER_5,CLUSTER_5
df2['salesafterseconddiff.'],numpy.log(df2['salesafterfirstdiff.']),CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""Amberville.csv"")",CLUSTER_5,CLUSTER_5
df1,"pandas.read_csv(""wood.csv"")",CLUSTER_5,CLUSTER_5
df2,"pandas.read_csv(""Mudramark.csv"")",CLUSTER_5,CLUSTER_5
df['week'],pandas.to_datetime(df['week']),CLUSTER_5,CLUSTER_5
df1['week'],pandas.to_datetime(df1['week']),CLUSTER_5,CLUSTER_5
df2['week'],pandas.to_datetime(df2['week']),CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(actual,farima)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(actual,farima)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(actual,farima)",CLUSTER_5,CLUSTER_5
mae,"sklearn.metrics.mean_absolute_error(actual,farima)",CLUSTER_5,CLUSTER_5
mae,"sklearn.metrics.mean_absolute_error(actual,farima)",CLUSTER_5,CLUSTER_5
mae,"sklearn.metrics.mean_absolute_error(actual,farima)",CLUSTER_5,CLUSTER_5
df,pandas.read_csv('911.csv'),CLUSTER_7,CLUSTER_3
df['timeStamp'],pandas.to_datetime(df['timeStamp']),CLUSTER_7,CLUSTER_3
"y_train,y_test)","sklearn.model_selection.train_test_split(X,y,
test_size=0.25,
random_state=1)",CLUSTER_5,CLUSTER_1
reg_2,sklearn.ensemble.RandomForestRegressor(random_state=1),CLUSTER_5,CLUSTER_1
reg_1,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
data,"pandas.read_csv(""diamonds.txt"",delimiter=""\t"")",CLUSTER_5,CLUSTER_1
city_data,"pandas.read_csv(""../output_data/cities.csv"")",CLUSTER_9,CLUSTER_2
response,requests.get(search_url),CLUSTER_9,CLUSTER_2
dataframe,"pandas.read_csv(name_f,sep=',',usecols=[1],engine='python',skipfooter=3)",CLUSTER_7,CLUSTER_9
tick_marks,numpy.arange(len(states),CLUSTER_7,CLUSTER_9
n_states,"numpy.arange(1,50)",CLUSTER_7,CLUSTER_9
r,"scipy.stats.norm(markov_model.means_[i],np.sqrt(markov_model.covars_[i,0])",CLUSTER_7,CLUSTER_9
X_output,"scipy.stats.norm(markov_model.means_[X_state],np.sqrt(markov_model.covars_[X_state][:,0])",CLUSTER_7,CLUSTER_9
data,"numpy.pad(data,padding,mode='constant',constant_values=1)",CLUSTER_4,CLUSTER_11
labels,"numpy.loadtxt(labels_file,str,delimiter='\t')",CLUSTER_4,CLUSTER_11
mu,numpy.load(caffe_root+'python/caffe/imagenet/ilsvrc_2012_mean.npy'),CLUSTER_4,CLUSTER_11
_,"matplotlib.pyplot.hist(feat.flat[feat.flat>0],bins=100)",CLUSTER_4,CLUSTER_11
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
sss,sklearn.linear_model.Perceptron(),CLUSTER_5,CLUSTER_10
classifier,sklearn.svm.SVC(),CLUSTER_5,CLUSTER_10
df,"pandas.read_csv('the-counted-2015.csv',encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
sbj_monthly_feats,"pandas.DataFrame(deathdates[['artistname','deathmonth']])",CLUSTER_11,CLUSTER_12
res,pandas.DataFrame(),CLUSTER_11,CLUSTER_12
ctrl_features,"pandas.DataFrame(ctrl_list,columns=['ctrl_name'])",CLUSTER_11,CLUSTER_12
res,pandas.concat([ctrl_features.reset_index(),CLUSTER_11,CLUSTER_12
sbj_reviews,pandas.read_csv(f_sbj_reviews),CLUSTER_11,CLUSTER_12
ctl_reviews,pandas.read_csv(f_ctl_reviews),CLUSTER_11,CLUSTER_12
sbj_reviews['reviewTime'],pandas.to_datetime(sbj_reviews['strReviewTime']),CLUSTER_11,CLUSTER_12
sbj_reviews['deathdate'],pandas.to_datetime(sbj_reviews['deathdate']),CLUSTER_11,CLUSTER_12
ctl_reviews['reviewTime'],pandas.to_datetime(ctl_reviews['strReviewTime']),CLUSTER_11,CLUSTER_12
diff,numpy.linalg.norm(np.array(feature),CLUSTER_11,CLUSTER_12
fig,"matplotlib.pyplot.figure(figsize=(30,10)",CLUSTER_6,CLUSTER_11
ax,"matplotlib.pyplot.subplot(1,batch_size,i+1)",CLUSTER_6,CLUSTER_11
img,numpy.squeeze(images[idx]),CLUSTER_6,CLUSTER_11
image,"numpy.transpose(image,(1,2,0)",CLUSTER_6,CLUSTER_11
x,"numpy.array([
[0,1,0.5,10],
[2,2.5,1,-8],
[4,0,5,6],
[15,1,2,3]],dtype=np.float32)",CLUSTER_2,CLUSTER_7
avg_temperature,"numpy.mean(data,axis=0)",CLUSTER_1,CLUSTER_10
data,"numpy.loadtxt(fname='data/weather-01.csv',delimiter=',')",CLUSTER_1,CLUSTER_10
image,matplotlib.pyplot.imshow(data),CLUSTER_1,CLUSTER_10
min_plot,matplotlib.pyplot.plot(min_temperature),CLUSTER_1,CLUSTER_10
max_plot,matplotlib.pyplot.plot(max_temperature),CLUSTER_1,CLUSTER_10
blank,"numpy.zeros((1,1)",CLUSTER_3,CLUSTER_6
blank,"numpy.zeros((1,1)",CLUSTER_3,CLUSTER_6
df_metrics,"pandas.DataFrame(columns=['ARI_Louvain','ARI_kmeans','ARI_HC',
'AMI_Louvain','AMI_kmeans','AMI_HC',
'Homogeneity_Louvain','Homogeneity_kmeans','Homogeneity_HC'])",CLUSTER_5,CLUSTER_1
adata.obs['kmeans'],"pandas.Series(kmeans.labels_,index=adata.obs.index)",CLUSTER_5,CLUSTER_1
adata.obs['hc'],"pandas.Series(hc.labels_,index=adata.obs.index)",CLUSTER_5,CLUSTER_1
metadata,"pandas.read_csv('./input/metadata.tsv',sep='\t',index_col=0)",CLUSTER_5,CLUSTER_1
kmeans,"sklearn.cluster.KMeans(n_clusters=num_clusters,random_state=2019)",CLUSTER_5,CLUSTER_1
hc,sklearn.cluster.AgglomerativeClustering(n_clusters=num_clusters),CLUSTER_5,CLUSTER_1
gross['release_year'],pandas.DatetimeIndex(gross['release_date']),CLUSTER_7,CLUSTER_1
genre_dummies,"pandas.get_dummies(gross['genre'],drop_first=True)",CLUSTER_7,CLUSTER_1
bs_dummies,pandas.get_dummies(bs_genre),CLUSTER_7,CLUSTER_1
gross,"pandas.read_csv('datasets/disney_movies_total_gross.csv',parse_dates=['release_date'])",CLUSTER_7,CLUSTER_1
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_1
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_1
inds,"numpy.arange(0,len(gross['genre'])",CLUSTER_7,CLUSTER_1
bs_action_reps,numpy.empty(size),CLUSTER_7,CLUSTER_1
bs_adventure_reps,numpy.empty(size),CLUSTER_7,CLUSTER_1
confidence_interval_action,"numpy.percentile(bs_action_reps,[2.5,97.5])",CLUSTER_7,CLUSTER_1
confidence_interval_adventure,"numpy.percentile(bs_adventure_reps,[2.5,97.5])",CLUSTER_7,CLUSTER_1
df_gini_income,"pandas.read_excel(""gini_income.xlsx"")",CLUSTER_12,CLUSTER_3
df_gini_expenditure,"pandas.read_excel(""gnini_expenditure.xls"")",CLUSTER_12,CLUSTER_3
df_gini_expenditure2,"pandas.read_excel(""gnini_expenditure.xls"",""เขตพื้นที่"")",CLUSTER_12,CLUSTER_3
gdp_percapita,"pandas.read_excel(""GDP_per_capita_thb.xlsx"")",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_12,CLUSTER_3
self.metric,"sklearn.metrics.roc_auc_score(self.y_true,self.y_score)",CLUSTER_10,CLUSTER_4
price,numpy.zeros(days),CLUSTER_11,CLUSTER_3
shock,numpy.zeros(days),CLUSTER_11,CLUSTER_3
drift,numpy.zeros(days),CLUSTER_11,CLUSTER_3
simulations,numpy.zeros(runs),CLUSTER_11,CLUSTER_3
q,"numpy.percentile(simulations,1)",CLUSTER_11,CLUSTER_3
returns_fig,seaborn.PairGrid(tech_rets.dropna(),CLUSTER_11,CLUSTER_3
returns_fig,seaborn.PairGrid(closing_df),CLUSTER_11,CLUSTER_3
start,"datetime.datetime(end.year-1,end.month,end.day)",CLUSTER_11,CLUSTER_3
end,datetime.datetime.now(),CLUSTER_11,CLUSTER_3
Y_A_06M,numpy.genfromtxt('Y_A_06M.txt'),CLUSTER_12,CLUSTER_10
Y_M_06M,numpy.genfromtxt('Y_M_06M.txt'),CLUSTER_12,CLUSTER_10
Y_D_06M,numpy.genfromtxt('Y_D_06M.txt'),CLUSTER_12,CLUSTER_10
ShR_06M,numpy.genfromtxt('ShR_06M.txt'),CLUSTER_12,CLUSTER_10
Y_A_12M,numpy.genfromtxt('Y_A_12M.txt'),CLUSTER_12,CLUSTER_10
Y_M_12M,numpy.genfromtxt('Y_M_12M.txt'),CLUSTER_12,CLUSTER_10
Y_D_12M,numpy.genfromtxt('Y_D_12M.txt'),CLUSTER_12,CLUSTER_10
ShR_12M,numpy.genfromtxt('ShR_12M.txt'),CLUSTER_12,CLUSTER_10
thresholds,numpy.arange(np.min(decision_score),CLUSTER_5,CLUSTER_10
y_predict,"numpy.array(decision_score>=threshold,dtype='int')",CLUSTER_5,CLUSTER_10
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=666)",CLUSTER_5,CLUSTER_10
log_reg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
"precisions,recalls,thresholds","sklearn.metrics.precision_recall_curve(y_test,decision_score)",CLUSTER_5,CLUSTER_10
iris,"pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data',names=['sepal_length','sepal_width','petal_length','petal_width','label'])",CLUSTER_8,CLUSTER_1
sel,sklearn.feature_selection.VarianceThreshold(threshold=.5),CLUSTER_8,CLUSTER_1
X_sb,"sklearn.feature_selection.SelectKBest(chi2,k=2)",CLUSTER_8,CLUSTER_1
X_sp,"sklearn.feature_selection.SelectPercentile(chi2,percentile=50)",CLUSTER_8,CLUSTER_1
X_sp,"sklearn.feature_selection.SelectPercentile(chi2,percentile=75)",CLUSTER_8,CLUSTER_1
clf,"sklearn.svm.LinearSVC(C=0.01,penalty=""l1"",dual=False)",CLUSTER_8,CLUSTER_1
model,"sklearn.feature_selection.SelectFromModel(clf,prefit=True)",CLUSTER_8,CLUSTER_1
r,"re.findall(val,data)",CLUSTER_10,CLUSTER_4
dir,"os.listdir(""2018"")",CLUSTER_10,CLUSTER_12
x,"numpy.arange(0.,30.0)",CLUSTER_3,CLUSTER_10
train_X,"numpy.float32(np.linspace(-1,1,100)",CLUSTER_2,CLUSTER_7
train_X,"numpy.linspace(-1,1,100)",CLUSTER_2,CLUSTER_7
json_parsed,json.loads(json_str),CLUSTER_10,CLUSTER_12
start_date,"datetime.datetime.strptime(START_DATE,'%Y-%m-%d')",CLUSTER_10,CLUSTER_12
end_date,"datetime.datetime.strptime(END_DATE,'%Y-%m-%d')",CLUSTER_10,CLUSTER_12
"defdatetime_gen_fn(start_date,end_date,delta",datetime.timedelta(days=1),CLUSTER_10,CLUSTER_12
epoch_list,numpy.arange(max_epoch+1),CLUSTER_3,CLUSTER_10
"f,axarr","matplotlib.pyplot.subplots(2,2,figsize=(15,10)",CLUSTER_3,CLUSTER_10
"f,axarr","matplotlib.pyplot.subplots(2,1,figsize=(15,10)",CLUSTER_3,CLUSTER_10
x,"numpy.expand_dims(x,axis=0)",CLUSTER_12,CLUSTER_9
twtr_auth,json.load(f),CLUSTER_9,CLUSTER_12
c,collections.Counter(item),CLUSTER_9,CLUSTER_12
c,collections.Counter(data),CLUSTER_9,CLUSTER_12
df,"pandas.DataFrame([[screen_name,tweet_ID,text]],columns=['screen_name','tweet_ID','text'])",CLUSTER_9,CLUSTER_12
df,"pandas.DataFrame(columns=['screen_name','tweet_ID','text'])",CLUSTER_9,CLUSTER_12
integration,"scipy.integrate.dblquad(f,0,2/4,p,q)",CLUSTER_1,CLUSTER_9
"a,b","scipy.integrate.quad(invexp,0,np.inf)",CLUSTER_1,CLUSTER_9
x,"numpy.arange(-10,10,0.1)",CLUSTER_1,CLUSTER_9
arr,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
arr,"numpy.array([[3,2],[6,4]])",CLUSTER_1,CLUSTER_9
arr,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
arr,"numpy.array([[3,2],[6,4]])",CLUSTER_1,CLUSTER_9
arr,numpy.array(),CLUSTER_1,CLUSTER_9
iarr,scipy.linalg.inv(arr),CLUSTER_1,CLUSTER_9
b,scipy.linalg.eigvals(a),CLUSTER_1,CLUSTER_9
ascent,scipy.misc.ascent(),CLUSTER_1,CLUSTER_9
panda,scipy.misc.face(),CLUSTER_1,CLUSTER_9
panda_rotate,"scipy.ndimage.rotate(panda,90)",CLUSTER_1,CLUSTER_9
panda_rotate,"scipy.ndimage.rotate(panda,120)",CLUSTER_1,CLUSTER_9
result,"scipy.ndimage.zoom(ascent,3.0)",CLUSTER_1,CLUSTER_9
result,"scipy.ndimage.zoom(ascent,5.0)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
"cap_handle,","matplotlib.pyplot.plot(tp_pivot['Capomulin'],color='red',marker='o',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle1,","matplotlib.pyplot.plot(tp_pivot['Capomulin'],color='red',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle,","matplotlib.pyplot.plot(tp_pivot['Infubinol'],color='blue',marker='^',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle1,","matplotlib.pyplot.plot(tp_pivot['Infubinol'],color='blue',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle,","matplotlib.pyplot.plot(tp_pivot['Ketapril'],color='green',marker='s',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle1,","matplotlib.pyplot.plot(tp_pivot['Ketapril'],color='green',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle,","matplotlib.pyplot.plot(tp_pivot['Placebo'],color='black',marker='D',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle1,","matplotlib.pyplot.plot(tp_pivot['Placebo'],color='black',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle_met,","matplotlib.pyplot.plot(met_pivot['Capomulin'],color='red',marker='o',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle1_met,","matplotlib.pyplot.plot(met_pivot['Capomulin'],color='red',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle_met,","matplotlib.pyplot.plot(met_pivot['Infubinol'],color='blue',marker='^',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle1_met,","matplotlib.pyplot.plot(met_pivot['Infubinol'],color='blue',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle_met,","matplotlib.pyplot.plot(met_pivot['Ketapril'],color='green',marker='s',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle1_met,","matplotlib.pyplot.plot(met_pivot['Ketapril'],color='green',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle_met,","matplotlib.pyplot.plot(met_pivot['Placebo'],color='black',marker='D',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle1_met,","matplotlib.pyplot.plot(met_pivot['Placebo'],color='black',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle_mouse,","matplotlib.pyplot.plot(mouse_pivot['Capomulin'],color='red',marker='o',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle1_mouse,","matplotlib.pyplot.plot(mouse_pivot['Capomulin'],color='red',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle_mouse,","matplotlib.pyplot.plot(mouse_pivot['Infubinol'],color='blue',marker='^',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle1_mouse,","matplotlib.pyplot.plot(mouse_pivot['Infubinol'],color='blue',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle_mouse,","matplotlib.pyplot.plot(mouse_pivot['Ketapril'],color='green',marker='s',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle1_mouse,","matplotlib.pyplot.plot(mouse_pivot['Ketapril'],color='green',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle_mouse,","matplotlib.pyplot.plot(mouse_pivot['Placebo'],color='black',marker='D',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle1_mouse,","matplotlib.pyplot.plot(mouse_pivot['Placebo'],color='black',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
gb_drug_timepoint_mean_df,pandas.DataFrame(gb_drug_timepoint_mean),CLUSTER_1,CLUSTER_3
tv3_sem_df,pandas.DataFrame(tv3_sem),CLUSTER_1,CLUSTER_3
met_sit_df,pandas.DataFrame(met_sit_ft),CLUSTER_1,CLUSTER_3
met_sit_sem_df,pandas.DataFrame(met_sit_ft_sem),CLUSTER_1,CLUSTER_3
mouse_count_df,pandas.DataFrame(mouse_count_ft),CLUSTER_1,CLUSTER_3
drug_perc_change,"pandas.DataFrame({""Drugs"":[""Capomulin"",""Infubinol"",""Ketapril"",""Placebo""],""PercentChanges"":[cap_perc_change,inf_perc_change,ket_perc_change,pla_perc_change]})",CLUSTER_1,CLUSTER_3
comb_data_df,"pandas.merge(ctd,mdd,on=""MouseID"",how=""outer"")",CLUSTER_1,CLUSTER_3
mdd,pandas.read_csv(mouse_drug_data_to_load),CLUSTER_1,CLUSTER_3
ctd,pandas.read_csv(clinical_trial_data_to_load),CLUSTER_1,CLUSTER_3
x_axis,numpy.arange(len(drugs_pt),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('cleaned_data.zip'),CLUSTER_1,CLUSTER_3
match_arr,numpy.array(match_df[j]),CLUSTER_7,CLUSTER_8
x_1,"numpy.linspace(f_l_1,f_r_1,1500)",CLUSTER_7,CLUSTER_8
x_2,"numpy.linspace(f_l_2,f_r_2,1500)",CLUSTER_7,CLUSTER_8
x_1_2,"numpy.linspace(f_l_1_2,f_r_1_2,1500)",CLUSTER_7,CLUSTER_8
x_test,"numpy.linspace(-9,-1,100)",CLUSTER_7,CLUSTER_8
m_x,numpy.linspace(m_mean-(5*m_std),CLUSTER_7,CLUSTER_8
nm_x,numpy.linspace(nm_mean-(5*nm_std),CLUSTER_7,CLUSTER_8
>>>x,"numpy.linspace(-2,2,num=20)",CLUSTER_7,CLUSTER_8
exp_energies,"numpy.loadtxt('EXPERIMENT_AME2016.dat',usecols=(3,4,5)",CLUSTER_7,CLUSTER_8
"hist,bins","numpy.histogram(bin_count,bins=i,density=True)",CLUSTER_7,CLUSTER_8
"histogram_1,bins_1","numpy.histogram(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
"histogram_2,bins_2","numpy.histogram(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
"histogram_1,bins_1","numpy.histogram(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
"histogram_2,bins_2","numpy.histogram(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
"histogram_1,bins_1","numpy.histogram(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
"histogram_2,bins_2","numpy.histogram(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
edges_1,"numpy.histogram_bin_edges(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
edges_2,"numpy.histogram_bin_edges(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
edges_1,"numpy.histogram_bin_edges(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
edges_2,"numpy.histogram_bin_edges(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
edges_1,"numpy.histogram_bin_edges(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
edges_2,"numpy.histogram_bin_edges(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
e_df,pandas.DataFrame(exp_energies),CLUSTER_7,CLUSTER_8
match_e_df,pandas.DataFrame(columns=e_df.columns),CLUSTER_7,CLUSTER_8
match_df,pandas.DataFrame(columns=df.columns),CLUSTER_7,CLUSTER_8
no_match_df,pandas.DataFrame(columns=df.columns),CLUSTER_7,CLUSTER_8
df_normalized,pandas.DataFrame(x_scaled),CLUSTER_7,CLUSTER_8
df1_normalized,pandas.DataFrame(df1_scaled),CLUSTER_7,CLUSTER_8
df2_normalized,pandas.DataFrame(df2_scaled),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('dme_LO.csv'),CLUSTER_7,CLUSTER_8
>>>y_int,"scipy.integrate.cumtrapz(y,x,initial=0)",CLUSTER_7,CLUSTER_8
y_int,"scipy.integrate.simps(b,a)",CLUSTER_7,CLUSTER_8
I_1,"scipy.integrate.quad(KDEpdf_1,f_l_1,f_r_1)",CLUSTER_7,CLUSTER_8
I_2,"scipy.integrate.quad(KDEpdf_2,f_l_2,f_r_2)",CLUSTER_7,CLUSTER_8
I_1_2,"scipy.integrate.quad(min_of_each,f_l_1_2,f_r_1_2)",CLUSTER_7,CLUSTER_8
m_pdf,"scipy.integrate.quad(pdf_func,-np.inf,np.inf,args=(m_mean,m_std)",CLUSTER_7,CLUSTER_8
nm_pdf,"scipy.integrate.quad(pdf_func,-np.inf,np.inf,args=(m_mean,m_std)",CLUSTER_7,CLUSTER_8
ovl,"scipy.integrate.quad(ovl_eq,-np.inf,np.inf,args=(m_mean,m_std,nm_mean,nm_std)",CLUSTER_7,CLUSTER_8
rv,scipy.stats.norm(),CLUSTER_7,CLUSTER_8
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
importances,"pandas.Series(rf.feature_importances_,X_train.columns)",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(file,parse_dates=True,keep_date_col=True,low_memory=False,nrows=4000000)",CLUSTER_7,CLUSTER_5
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y)",CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.make_pipeline(
ce.OrdinalEncoder()",CLUSTER_7,CLUSTER_5
processor,"sklearn.pipeline.make_pipeline(
ce.OrdinalEncoder()",CLUSTER_7,CLUSTER_5
transformers,"sklearn.pipeline.make_pipeline(
ce.OrdinalEncoder()",CLUSTER_7,CLUSTER_5
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=42,n_jobs=-1)",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""./train_downsampled.csv"")",CLUSTER_11,CLUSTER_5
df,"pandas.read_csv(""./feature_engineered_data_1.csv"",delimiter='\t')",CLUSTER_11,CLUSTER_5
arr,numpy.array([f_list]),CLUSTER_11,CLUSTER_5
stdev,numpy.std(arr),CLUSTER_11,CLUSTER_5
clf,"sklearn.svm.SVC(C=0.1,kernel='rbf')",CLUSTER_11,CLUSTER_5
clf,"sklearn.svm.SVC(C=1.0,kernel='linear')",CLUSTER_11,CLUSTER_5
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_11,CLUSTER_5
prfs_result,"sklearn.metrics.precision_recall_fscore_support(test_y,predict,average='binary')",CLUSTER_11,CLUSTER_5
prfs_result,"sklearn.metrics.precision_recall_fscore_support(test_y,predict,average='binary')",CLUSTER_11,CLUSTER_5
prfs_result,"sklearn.metrics.precision_recall_fscore_support(test_y.values,predict,average='binary')",CLUSTER_11,CLUSTER_5
start,time.time(),CLUSTER_11,CLUSTER_5
end,time.time(),CLUSTER_11,CLUSTER_5
start,time.time(),CLUSTER_11,CLUSTER_5
end,time.time(),CLUSTER_11,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_11,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_11,CLUSTER_5
glacier,"pandas.DataFrame(
{'name':'UpperGrindelwaldGlacier',
'lon':8.11933,
'lat':46.6143},index=['UGG'])",CLUSTER_8,CLUSTER_4
histalp,"pandas.DataFrame(
{'name':'HistAlpreferencelocation',
'lon':8.08333333333175,
'lat':46.58333333333195},index=['HISTALP'])",CLUSTER_8,CLUSTER_4
stations,"pandas.read_csv(path,index_col=0)",CLUSTER_8,CLUSTER_4
stations,"pandas.read_csv(path,index_col=0)",CLUSTER_8,CLUSTER_4
precip_avg_slf,"pandas.read_csv(path,index_col=0,squeeze=True,names=['yearly_precip'])",CLUSTER_8,CLUSTER_4
stations,"pandas.read_csv(path,index_col=0)",CLUSTER_8,CLUSTER_4
clients,numpy.transpose(client_data),CLUSTER_7,CLUSTER_5
minimum_price,pandas.Series(prices),CLUSTER_7,CLUSTER_5
data,pandas.read_csv('housing.csv'),CLUSTER_7,CLUSTER_5
score,"sklearn.metrics.r2_score(y_true,y_predict)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_5
scoring_fnc,sklearn.metrics.make_scorer(performance_metric),CLUSTER_7,CLUSTER_5
regressor,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_5
grid,"sklearn.model_selection.GridSearchCV(regressor,param_grid=params,scoring=scoring_fnc,cv=cv_sets)",CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(ncols=2),CLUSTER_7,CLUSTER_5
gmm,sklearn.mixture.BayesianGaussianMixture(n_components=2),CLUSTER_7,CLUSTER_5
gmm,sklearn.mixture.BayesianGaussianMixture(n_components=2),CLUSTER_7,CLUSTER_5
f_score,"sklearn.metrics.fbeta_score(real_edge,A.flatten()",CLUSTER_7,CLUSTER_5
f_score,"sklearn.metrics.fbeta_score(real_edge,A.flatten()",CLUSTER_7,CLUSTER_5
core_samples,"numpy.zeros_like(labels,dtype=bool)",CLUSTER_7,CLUSTER_5
core_samples,"numpy.zeros_like(labels,dtype=bool)",CLUSTER_7,CLUSTER_5
var1,"numpy.cumsum(np.round(pca.explained_variance_ratio_,decimals=4)",CLUSTER_7,CLUSTER_5
col,"numpy.linspace(0,1,len(unique_labels)",CLUSTER_7,CLUSTER_5
unique_labels,numpy.unique(labels),CLUSTER_7,CLUSTER_5
unique_labels,numpy.unique(labels),CLUSTER_7,CLUSTER_5
my_scaled_data_transformed_pd,pandas.DataFrame(my_scaled_data_transformed),CLUSTER_7,CLUSTER_5
DB_PCA_df,"pandas.DataFrame(DB_PCA,columns=[""ClusterLabel"",""Unlabelled"",""Blast"",""Healthy""])",CLUSTER_7,CLUSTER_5
DB_PCA_df,"pandas.DataFrame(DB_PCA,columns=[""ClusterLabel"",""Unlabelled"",""Blast"",""Healthy""])",CLUSTER_7,CLUSTER_5
my_scaled_data_transformed_pd_meta,"pandas.concat([my_scaled_data_transformed_pd,my_data[meta_headers]],axis=1)",CLUSTER_7,CLUSTER_5
DB_PCA_df_melted,"pandas.melt(DB_PCA_df,value_vars=[""Unlabelled"",""Blast"",""Healthy""],id_vars=""ClusterLabel"")",CLUSTER_7,CLUSTER_5
tsne_db_df_50_melted,"pandas.melt(tsne_db_df_50,value_vars=[""Unlabelled"",""Blast"",""Healthy""],id_vars=""ClusterLabel"")",CLUSTER_7,CLUSTER_5
DB_PCA_df_melted,"pandas.melt(DB_PCA_df,value_vars=[""Unlabelled"",""Blast"",""Healthy""],id_vars=""ClusterLabel"")",CLUSTER_7,CLUSTER_5
my_data,"pandas.read_csv(filename,index_col=0)",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(hue=""variable"",y=""value"",x=""ClusterLabel"",data=DB_PCA_df_melted,log='y')",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(hue=""variable"",y=""value"",x=""ClusterLabel"",data=tsne_db_df_50_melted,log='y')",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(hue=""variable"",y=""value"",x=""ClusterLabel"",data=DB_PCA_df_melted,log='y')",CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=5),CLUSTER_7,CLUSTER_5
my_scaled_data,sklearn.preprocessing.scale(my_data[my_data_data_headers]),CLUSTER_7,CLUSTER_5
dbsc,"sklearn.cluster.DBSCAN(eps=.6,min_samples=10)",CLUSTER_7,CLUSTER_5
dbsc,"sklearn.cluster.DBSCAN(eps=eps_,min_samples=10,algorithm=algo,metric=met)",CLUSTER_7,CLUSTER_5
rot,"numpy.linspace(0,np.pi/6)",CLUSTER_3,CLUSTER_6
rot,"numpy.linspace(0,np.pi)",CLUSTER_3,CLUSTER_6
ft_noise,numpy.load(MODEL+'_ft_noise.npy'),CLUSTER_3,CLUSTER_6
ft_l2_m,numpy.load(MODEL+'_ft_bim_l2_mcls_100k.npy'),CLUSTER_3,CLUSTER_6
ft_l2_t,numpy.load(MODEL+'_ft_bim_l2_one_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_l2_t_all,numpy.load(MODEL+'_ft_bim_l2_all_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_noise,numpy.load(MODEL+'_ft_noise.npy'),CLUSTER_3,CLUSTER_6
ft_inf,numpy.load(MODEL+'_ft_bim_inf_mcls.npy'),CLUSTER_3,CLUSTER_6
ft_inf_t,numpy.load(MODEL+'_ft_bim_inf_one_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_inf_t_all,numpy.load(MODEL+'_ft_bim_inf_all_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_adef_wd0_mcls,numpy.load(path_to_data+'wd_0e+00_adef_data_to_plot_fullbatch_mcls.npy'),CLUSTER_3,CLUSTER_6
ft_adef_wd1_mcls,numpy.load(path_to_data+'wd_1e-02_adef_data_to_plot_fullbatch_mcls.npy'),CLUSTER_3,CLUSTER_6
ft_adef_wd0_tgt,numpy.load(path_to_data+'wd_0e+00_adef_data_to_plot_fullbatch_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_adef_wd1_tgt,numpy.load(path_to_data+'wd_1e-02_adef_data_to_plot_fullbatch_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_rot_wd,"numpy.load(os.path.join(PATH,MODEL+""_ft_rot30_test.npy"")",CLUSTER_3,CLUSTER_6
ft_rot_no_wd,"numpy.load(os.path.join(PATH,MODEL+""_ft_rot30_test.npy"")",CLUSTER_3,CLUSTER_6
ft_rot_wd,"numpy.load(os.path.join(PATH,MODEL+""_ft_rot180_test.npy"")",CLUSTER_3,CLUSTER_6
ft_rot_no_wd,"numpy.load(os.path.join(PATH,MODEL+""_ft_rot180_test.npy"")",CLUSTER_3,CLUSTER_6
Y_test,numpy.vstack((np.arange(X_test.shape[0]),CLUSTER_5,CLUSTER_6
X_train,"numpy.genfromtxt('data/X_train.txt',delimiter=None)",CLUSTER_5,CLUSTER_6
Y_train,"numpy.genfromtxt('data/Y_train.txt',delimiter=None)",CLUSTER_5,CLUSTER_6
X_test,"numpy.genfromtxt('data/X_test.txt',delimiter=None)",CLUSTER_5,CLUSTER_6
expression,"pandas.DataFrame(scipy.io.mmread(data_path+""count.mtx"")",CLUSTER_5,CLUSTER_9
gene_dataset_name,"pandas.DataFrame(gene_names,columns=[""ENSG""])",CLUSTER_5,CLUSTER_9
raw_qc,"pandas.concat((raw_qc_8,raw_qc_4)",CLUSTER_5,CLUSTER_9
exp_data,"pandas.merge(exp_data_1,\
exp_data_2,how=""inner"",on=""GS"")",CLUSTER_5,CLUSTER_9
exp_data,"pandas.merge(exp_data,\
exp_data_3,how=""inner"",on=""GS"")",CLUSTER_5,CLUSTER_9
ordered_corres,"pandas.merge(gene_dataset_name,\
gene_correspondance,how=""inner"",on=""ENSG"",left_index=True)",CLUSTER_5,CLUSTER_9
micro_array_result,"pandas.merge(ordered_corres,exp_data,how=""inner"",on=""GS"",right_index=True)",CLUSTER_5,CLUSTER_9
exp_data_1,"pandas.read_csv(data_path+""gene_data/GSE8835_CD4_CD8.tab"",delimiter=""\t"")",CLUSTER_5,CLUSTER_9
exp_data_2,"pandas.read_csv(data_path+""gene_data/GSE29618_Bcells_mDC.tab"",delimiter=""\t"")",CLUSTER_5,CLUSTER_9
exp_data_3,"pandas.read_csv(data_path+""gene_data/GSE22886_Bcells_mDC.tab"",delimiter=""\t"")",CLUSTER_5,CLUSTER_9
gene_correspondance,"pandas.read_csv(data_path+""de/new_rownames.tab"",delimiter=""\t"")",CLUSTER_5,CLUSTER_9
design,"pandas.read_csv(data_path+""design.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
normalized_qc,"pandas.read_csv(data_path+""full_qc.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
barcodes,"pandas.read_csv(data_path+""barcodes.csv"",index_col=1)",CLUSTER_5,CLUSTER_9
batch,"pandas.read_csv(data_path+""batch.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
raw_qc_8,"pandas.read_csv(data_path+""molecule_qc_8k.txt"",index_col=0,sep=""\t"")",CLUSTER_5,CLUSTER_9
raw_qc_4,"pandas.read_csv(data_path+""molecule_qc_4k.txt"",index_col=0,sep=""\t"")",CLUSTER_5,CLUSTER_9
bio,"pandas.read_csv(data_path+""bio.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
micro_array_result,"pandas.read_csv(data_path+""de/gene_info.csv"")",CLUSTER_5,CLUSTER_9
gene_names,"numpy.array(pd.read_csv(data_path+""michael_gene_names.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
p,numpy.array(stats.p_adjust(FloatVector(p),CLUSTER_5,CLUSTER_9
p,numpy.array(stats.p_adjust(FloatVector(p),CLUSTER_5,CLUSTER_9
p,numpy.array(stats.p_adjust(FloatVector(p),CLUSTER_5,CLUSTER_9
score-,"numpy.mean(np.sum(data_test,axis=-1)",CLUSTER_5,CLUSTER_9
p_ZIFA,"numpy.exp(-zifa.params[""decay_coef""]*X_ZIFA_log**2)",CLUSTER_5,CLUSTER_9
data_train,numpy.log(1+X_train),CLUSTER_5,CLUSTER_9
data_test,numpy.log(1+X_test),CLUSTER_5,CLUSTER_9
plt.axhline(y,numpy.log10(0.05),CLUSTER_5,CLUSTER_9
plt.axhline(y,numpy.log10(0.05),CLUSTER_5,CLUSTER_9
de_expression,numpy.copy(expression.as_matrix(),CLUSTER_5,CLUSTER_9
list_clusters,"numpy.unique(bio[""x""])",CLUSTER_5,CLUSTER_9
"_,batch","numpy.unique(batch,return_inverse=True)",CLUSTER_5,CLUSTER_9
c_train,"numpy.loadtxt(data_path+""label_train"")",CLUSTER_5,CLUSTER_9
c_test,"numpy.loadtxt(data_path+""label_test"")",CLUSTER_5,CLUSTER_9
b_train,"numpy.loadtxt(data_path+""b_train"")",CLUSTER_5,CLUSTER_9
b_test,"numpy.loadtxt(data_path+""b_test"")",CLUSTER_5,CLUSTER_9
X_train,"numpy.load(data_path+""de/data_train.npy"")",CLUSTER_5,CLUSTER_9
X_test,"numpy.load(data_path+""de/data_test.npy"")",CLUSTER_5,CLUSTER_9
r_train,"numpy.load(data_path+""design_train.npy"")",CLUSTER_5,CLUSTER_9
r_test,"numpy.load(data_path+""design_test.npy"")",CLUSTER_5,CLUSTER_9
mean_MAGIC,"numpy.load(data_path+""imputation/X_zero_MAGIC.npy"")",CLUSTER_5,CLUSTER_9
r,"requests.get(""https://kr-geschaefte.zug.ch/gast/geschaefte?commit=Filtern&geschaeft_filter%5Babgeschlossen_bis%5D=&geschaeft_filter%5Babgeschlossen_von%5D=&geschaeft_filter%5Barten_refs%5D%5B%5D=&geschaeft_filter%5Beingereicht_bis%5D=&geschaeft_filter%5Beingereicht_von%5D=&geschaeft_filter%5Bfrist_bis%5D=&geschaeft_filter%5Bhistorische_staende_refs%5D%5B%5D=&geschaeft_filter%5Bkommissionen_refs%5D%5B%5D=&geschaeft_filter%5Bstaende_refs%5D%5B%5D=&geschaeft_filter%5Bstatus_ids%5D%5B%5D=haengig&geschaeft_filter%5Bstatus_ids%5D%5B%5D=abgeschlossen&geschaeft_filter%5Bstatus_ids%5D%5B%5D=&geschaeft_filter%5Btitel%5D=&geschaeft_filter%5Bzustaendig_refs%5D%5B%5D=&page=1&utf8=✓"")",CLUSTER_9,CLUSTER_2
r,requests.get(url+str(seite),CLUSTER_9,CLUSTER_2
rg,"requests.get(""https://kr-geschaefte.zug.ch/gast/geschaefte/1997"")",CLUSTER_9,CLUSTER_2
rg,requests.get(geschaeft),CLUSTER_9,CLUSTER_2
rp,requests.get(url_p),CLUSTER_9,CLUSTER_2
df_a,pandas.DataFrame(alle_seiten),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(alle_seiten),CLUSTER_9,CLUSTER_2
df_g,pandas.DataFrame(eingang_list),CLUSTER_9,CLUSTER_2
df_g,pandas.DataFrame(eingang_list),CLUSTER_9,CLUSTER_2
df_mit_dat,"pandas.merge(df_a,df_g,how=""left"",on=""GeschäftsNR"")",CLUSTER_9,CLUSTER_2
"df_g[""Einreichedatum""]","pandas.to_datetime(df_g[""Einreichedatum""],format='%d.%m.%Y')",CLUSTER_9,CLUSTER_2
df,"pandas.concat([steam_games,app_id],axis=1,sort=False)",CLUSTER_8,CLUSTER_3
steam_games,"pandas.read_csv('steam_games_all_fields.csv',index_col=1,delimiter='\t')",CLUSTER_8,CLUSTER_3
df['game_ID'],"pandas.to_numeric(df['game_ID'],downcast='signed')",CLUSTER_8,CLUSTER_3
df['number_of_review'],"pandas.to_numeric(df['number_of_review'],downcast='integer')",CLUSTER_8,CLUSTER_3
df['score'],pandas.to_numeric(df['score']),CLUSTER_8,CLUSTER_3
draw_korea_raw_stacked,pandas.DataFrame(draw_korea_raw.stack(),CLUSTER_9,CLUSTER_3
pop,"pandas.merge(pop,draw_korea,how='left',on=['ID'])",CLUSTER_9,CLUSTER_3
pop,"pandas.pivot_table(population,
index=['광역시도','시도'],
columns=['구분'],
values=['인구수','20-39세','65세이상'])",CLUSTER_9,CLUSTER_3
population,"pandas.read_excel('../data/05.population_raw_data.xlsx',header=1)",CLUSTER_9,CLUSTER_3
draw_korea_raw,"pandas.read_excel('../data/05.draw_korea_raw.xlsx',
encoding=""EUC-KR"")",CLUSTER_9,CLUSTER_3
masked_mapdata,numpy.ma.masked_where(np.isnan(mapdata),CLUSTER_9,CLUSTER_3
masked_mapdata,numpy.ma.masked_where(np.isnan(mapdata),CLUSTER_9,CLUSTER_3
masked_mapdata,numpy.ma.masked_where(np.isnan(mapdata),CLUSTER_9,CLUSTER_3
cb,"matplotlib.pyplot.colorbar(shrink=.1,aspect=10)",CLUSTER_9,CLUSTER_3
cb,"matplotlib.pyplot.colorbar(shrink=.1,aspect=10)",CLUSTER_9,CLUSTER_3
geo_str,"json.load(open(geo_path,encoding='utf-8')",CLUSTER_9,CLUSTER_3
boxplot,seaborn.boxplot(data=gpa),CLUSTER_4,CLUSTER_11
mergedGraph,"seaborn.relplot(x=""cs65"",y=""contributions"",
ci=None,kind=""line"",data=mergedDf,aspect=2)",CLUSTER_4,CLUSTER_11
gpa,"pandas.read_csv(""grades.csv"")",CLUSTER_4,CLUSTER_11
piazza,"pandas.read_csv(""piazza.csv"")",CLUSTER_4,CLUSTER_11
gpa,"pandas.read_csv(""grades.csv"")",CLUSTER_4,CLUSTER_11
mergedDf,"pandas.read_csv(""combinedGPAPiazza.csv"")",CLUSTER_4,CLUSTER_11
all_months_data,pandas.DataFrame(),CLUSTER_0,CLUSTER_11
all_months_data,"pandas.concat([df,all_months_data])",CLUSTER_0,CLUSTER_11
df,pandas.read_csv('./Sales_Data/Sales_August_2019.csv'),CLUSTER_0,CLUSTER_11
df,pandas.read_csv('./Sales_Data/'+file),CLUSTER_0,CLUSTER_11
df1,pandas.read_csv('complete_data.csv'),CLUSTER_0,CLUSTER_11
df2['OrderDate'],pandas.to_datetime(df2['OrderDate']),CLUSTER_0,CLUSTER_11
df2['QuantityOrdered'],pandas.to_numeric(df2['QuantityOrdered']),CLUSTER_0,CLUSTER_11
df2['PriceEach'],pandas.to_numeric(df2['PriceEach']),CLUSTER_0,CLUSTER_11
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_11
count,collections.Counter(),CLUSTER_0,CLUSTER_11
patch,matplotlib.pyplot.imshow(frames[0]),CLUSTER_12,CLUSTER_10
data_train,"pandas.read_csv('data/train.csv',dtype=int)",CLUSTER_5,CLUSTER_5
data_test,"pandas.read_csv('data/test.csv',dtype=int)",CLUSTER_5,CLUSTER_5
Tree_model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_5
Tree_models,"sklearn.tree.DecisionTreeClassifier(min_samples_leaf=5,max_depth=12)",CLUSTER_5,CLUSTER_5
tree_model,"sklearn.tree.DecisionTreeClassifier(max_depth=1,class_weight=""balanced"")",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=200,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=300,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=200,max_depth=20,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
conf_mx,sklearn.metrics.confusion_matrix(Tree_model.predict(X_train),CLUSTER_5,CLUSTER_5
conf_mx,sklearn.metrics.confusion_matrix(Tree_model.predict(X_train),CLUSTER_5,CLUSTER_5
gd_sr,"sklearn.model_selection.GridSearchCV(estimator=Tree_model,param_grid=grid_param,scoring='accuracy',cv=5,n_jobs=-1)",CLUSTER_5,CLUSTER_5
gd_sr_ada,"sklearn.model_selection.GridSearchCV(ada_clf,param_grid=param_grid,scoring='accuracy',cv=5,n_jobs=-1)",CLUSTER_5,CLUSTER_5
gd_sr,"sklearn.model_selection.GridSearchCV(estimator=rnd_clf,param_grid=grid_param,scoring='accuracy',cv=5,n_jobs=-1)",CLUSTER_5,CLUSTER_5
gd_sr,"sklearn.model_selection.GridSearchCV(estimator=et_clf,param_grid=grid_param,scoring='accuracy',cv=5,n_jobs=-1)",CLUSTER_5,CLUSTER_5
gb_clf,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=100,learning_rate=0.2,
max_depth=1,random_state=0)",CLUSTER_5,CLUSTER_5
ada_clf,sklearn.ensemble.AdaBoostClassifier(n_estimators=300),CLUSTER_5,CLUSTER_5
ada_clf,sklearn.ensemble.AdaBoostClassifier(base_estimator=tree_model),CLUSTER_5,CLUSTER_5
ada_clf,sklearn.ensemble.AdaBoostClassifier(DecisionTreeClassifier(max_depth=2),CLUSTER_5,CLUSTER_5
all_accuracies,"sklearn.model_selection.cross_val_score(estimator=x,X=X_train,y=y_train,cv=5)",CLUSTER_5,CLUSTER_5
all_accuracies1,"sklearn.model_selection.cross_val_score(estimator=Tree_model,X=X_train,y=y_train,cv=5)",CLUSTER_5,CLUSTER_5
all_accuracies,"sklearn.model_selection.cross_val_score(estimator=ada_clf,X=X_train,y=y_train,cv=5)",CLUSTER_5,CLUSTER_5
et_clf,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=100,max_depth=10,
min_samples_split=2,bootstrap=True,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
et_clf,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=100,max_depth=2,
min_samples_split=2,min_samples_leaf=5,bootstrap=True,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
et_clf,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=300,max_depth=2,
min_samples_split=2,min_samples_leaf=5,bootstrap=True,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
et_clf,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=200,max_depth=20,
min_samples_split=2,min_samples_leaf=5,bootstrap=True,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
coin,"random.randint(0,1)",CLUSTER_3,CLUSTER_10
frame_starts,"numpy.arange(0,num_beats-frame_length,frame_hop)",CLUSTER_4,CLUSTER_11
flat_features,"numpy.reshape(features,(features.shape[0],features.shape[1]*features.shape[2])",CLUSTER_4,CLUSTER_11
flattened_array,"numpy.reshape(framed_array,(framed_array.shape[0],framed_array.shape[1]*framed_array.shape[2])",CLUSTER_4,CLUSTER_11
fftm_patch,numpy.fft.fftshift(np.abs(np.fft.fft2(chroma_patch.transpose(),CLUSTER_4,CLUSTER_11
pca,"sklearn.decomposition.PCA(n_components=20,whiten=True,copy=True)",CLUSTER_4,CLUSTER_11
kd_tree,sklearn.neighbors.KDTree(match_chroma.all_features),CLUSTER_4,CLUSTER_11
face,numpy.asarray(face),CLUSTER_7,CLUSTER_3
faces,numpy.asarray(faces),CLUSTER_7,CLUSTER_3
emotion_label_arg,numpy.argmax(emotion_classifier.predict(gray_face),CLUSTER_7,CLUSTER_3
faces,"numpy.expand_dims(faces,-1)",CLUSTER_7,CLUSTER_3
gray_face,"numpy.expand_dims(gray_face,0)",CLUSTER_7,CLUSTER_3
gray_face,"numpy.expand_dims(gray_face,-1)",CLUSTER_7,CLUSTER_3
emotions,pandas.get_dummies(df['emotion']),CLUSTER_7,CLUSTER_3
df,"pandas.read_csv(""fer2013.csv"")",CLUSTER_7,CLUSTER_3
data,pandas.read_csv('logistic_features.csv'),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_4,CLUSTER_11
labels,numpy.append(np.ones((len(all_positive_tweets),CLUSTER_4,CLUSTER_11
feature,numpy.zeros(len(lexicon),CLUSTER_0,CLUSTER_5
count,collections.Counter(lexicon),CLUSTER_0,CLUSTER_5
dataset,pandas.read_csv('filtered_tweets.csv'),CLUSTER_0,CLUSTER_5
temp,"re.sub(r""[^A-Za-z]"","""",line)",CLUSTER_0,CLUSTER_5
model1,"sklearn.ensemble.RandomForestClassifier(max_depth=None,random_state=0)",CLUSTER_0,CLUSTER_5
model2,"sklearn.svm.LinearSVC(random_state=0,tol=1e-5,max_iter=10000)",CLUSTER_0,CLUSTER_5
model3,"sklearn.ensemble.AdaBoostClassifier(n_estimators=100,random_state=0)",CLUSTER_0,CLUSTER_5
model4,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=[64,256,64],activation='relu',learning_rate='adaptive')",CLUSTER_0,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(dataset,dataset.iloc[:,12],test_size=0.20,random_state=42)",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model1,test_features,y_test,
cmap=plt.cm.Blues,
normalize='true',
values_format='.2g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model1,test_features,y_test,
cmap=plt.cm.Blues,
normalize=None,
values_format='.5g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model2,test_features,y_test,
cmap=plt.cm.Blues,
normalize='true',
values_format='.2g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model2,test_features,y_test,
cmap=plt.cm.Blues,
normalize=None,
values_format='.5g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model3,test_features,y_test,
cmap=plt.cm.Blues,
normalize='true',
values_format='.2g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model3,test_features,y_test,
cmap=plt.cm.Blues,
normalize=None,
values_format='.5g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model4,test_features,y_test,
cmap=plt.cm.Blues,
normalize='true',
values_format='.2g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model4,test_features,y_test,
cmap=plt.cm.Blues,
normalize=None,
values_format='.5g')",CLUSTER_0,CLUSTER_5
fpd,"pandas.concat([flow[0],flow[1],flow[2]])",CLUSTER_1,CLUSTER_9
opd,"pandas.concat([occupancy[0],occupancy[1],occupancy[2]])",CLUSTER_1,CLUSTER_9
spd,"pandas.concat([speed[0],speed[1],speed[2]])",CLUSTER_1,CLUSTER_9
mvpd,"pandas.concat([fpd,spd,opd],axis=1)",CLUSTER_1,CLUSTER_9
resultdf,"pandas.concat([ndf,pdf])",CLUSTER_1,CLUSTER_9
x,"pandas.cut(pdf['chi2'],ws_range)",CLUSTER_1,CLUSTER_9
timestamp,"pandas.read_csv('timestamp.tsv',header=None,sep='\t')",CLUSTER_1,CLUSTER_9
flow,"pandas.read_csv('flow.tsv',header=None,sep='\t')",CLUSTER_1,CLUSTER_9
occupancy,"pandas.read_csv('occupancy.tsv',header=None,sep='\t')",CLUSTER_1,CLUSTER_9
speed,"pandas.read_csv('speed.tsv',header=None,sep='\t')",CLUSTER_1,CLUSTER_9
ws_range,"numpy.arange(0,27780+1,10)",CLUSTER_1,CLUSTER_9
petrol,pandas.read_csv('data/petrol_brent.csv'),CLUSTER_7,CLUSTER_3
petrol['Date'],"pandas.to_datetime(petrol['Date'],format='%d.%m.%Y')",CLUSTER_7,CLUSTER_3
petrol[col],pandas.to_numeric(petrol[col]),CLUSTER_7,CLUSTER_3
petrol['Vol'],pandas.to_numeric(petrol['Vol'].apply(volume_change),CLUSTER_7,CLUSTER_3
petrol['Var_%'],pandas.to_numeric(petrol['Var_%'].apply(var_reformatting),CLUSTER_7,CLUSTER_3
df,pandas.read_csv(csv_path),CLUSTER_6,CLUSTER_0
height,numpy.array(image_arr),CLUSTER_6,CLUSTER_0
width,numpy.array(image_arr),CLUSTER_6,CLUSTER_0
new_img,numpy.array(new_image),CLUSTER_6,CLUSTER_0
orig_img,numpy.array(image_arr),CLUSTER_6,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(16,8)",CLUSTER_6,CLUSTER_0
svc,"sklearn.svm.SVC(gamma=""scale"")",CLUSTER_7,CLUSTER_8
clf,"sklearn.svm.SVC(kernel=""linear"",C=10,gamma=0.001,)",CLUSTER_7,CLUSTER_8
grid_search,sklearn.model_selection.GridSearchCV(svm.SVC(kernel='rbf'),CLUSTER_7,CLUSTER_8
X_train,"pandas.read_csv(""/Users/fahad/project_repo/data/final/X_train.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
y_train,"pandas.read_csv(""/Users/fahad/project_repo/data/final/y_train.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
MSFT_10_X_test,"pandas.read_csv(""/Users/fahad/project_repo/data/final/MSFT/MSFT_10_X_test.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
MSFT_10_y_test,"pandas.read_csv(""/Users/fahad/project_repo/data/final/MSFT/MSFT_10_y_test.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
MSFT_14_X_test,"pandas.read_csv(""/Users/fahad/project_repo/data/final/MSFT/MSFT_14_X_test.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
MSFT_14_y_test,"pandas.read_csv(""/Users/fahad/project_repo/data/final/MSFT/MSFT_14_y_test.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_8
precision,"sklearn.metrics.precision_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
precision,"sklearn.metrics.precision_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
recall,"sklearn.metrics.recall_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
recall,"sklearn.metrics.recall_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
f1,"sklearn.metrics.f1_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
f1,"sklearn.metrics.f1_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
kappa,"sklearn.metrics.cohen_kappa_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
kappa,"sklearn.metrics.cohen_kappa_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
auc,"sklearn.metrics.roc_auc_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
auc,"sklearn.metrics.roc_auc_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
description,"pandas.DataFrame({'shape':[i.shapeforiinall_train],'columns':[i.columns.valuesforiinall_train]},\
index=names)",CLUSTER_4,CLUSTER_8
most_demanded_product_1,pandas.DataFrame(columns=['R'+str(i),CLUSTER_4,CLUSTER_8
d,pandas.DataFrame(columns=['D'+str(i),CLUSTER_4,CLUSTER_8
product_division1,"pandas.DataFrame({'Product_Name':product_name,'Total_Demand':total_demand})",CLUSTER_4,CLUSTER_8
product_division2,"pandas.DataFrame({'Product_Name':product_name2,'Total_Demand':total_demand2})",CLUSTER_4,CLUSTER_8
product_division3,"pandas.DataFrame({'Product_Name':product_name3,'Total_Demand':total_demand3})",CLUSTER_4,CLUSTER_8
final_Data,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
new_data,pandas.DataFrame({str(i),CLUSTER_4,CLUSTER_8
product_wise_capacity,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
new_data_1,pandas.DataFrame({str(i),CLUSTER_4,CLUSTER_8
most_demanded_product_1,"pandas.concat([most_demanded_product_1,d],axis=1)",CLUSTER_4,CLUSTER_8
final_Data,"pandas.concat([final_Data,new_data],axis=0)",CLUSTER_4,CLUSTER_8
product_wise_capacity,"pandas.concat([product_wise_capacity,new_data_1],axis=0)",CLUSTER_4,CLUSTER_8
product_division1,"pandas.concat([product_division1,final_Data],axis=1)",CLUSTER_4,CLUSTER_8
product_division2,"pandas.concat([product_division2,final_Data],axis=1)",CLUSTER_4,CLUSTER_8
product_division3,"pandas.concat([product_division3,final_Data],axis=1)",CLUSTER_4,CLUSTER_8
product_division1,"pandas.concat([product_division1,product_wise_capacity],axis=1)",CLUSTER_4,CLUSTER_8
product_division2,"pandas.concat([product_division2,product_wise_capacity],axis=1)",CLUSTER_4,CLUSTER_8
product_division3,"pandas.concat([product_division3,product_wise_capacity],axis=1)",CLUSTER_4,CLUSTER_8
test_ship_new,"pandas.concat([test_ship1a,test_ship1b,test_ship1c,test_ship2a,test_ship2b,test_ship2c,test_ship3a,test_ship3b,test_ship3c],axis=0)",CLUSTER_4,CLUSTER_8
sample_demand,"pandas.read_csv(os.path.join(sample_root,'demand_forecast.csv')",CLUSTER_4,CLUSTER_8
sample_ship,"pandas.read_csv(os.path.join(sample_root,'shipping_region.csv')",CLUSTER_4,CLUSTER_8
test_demand,"pandas.read_csv(os.path.join(test_root,'demand_forecast.csv')",CLUSTER_4,CLUSTER_8
test_seq,"pandas.read_csv(os.path.join(test_root,'manufacture_sequence.csv')",CLUSTER_4,CLUSTER_8
test_ship,"pandas.read_csv(os.path.join(test_root,'shipping_region.csv')",CLUSTER_4,CLUSTER_8
historical_demand,"pandas.read_csv(os.path.join(train_root,'historical_demand.csv')",CLUSTER_4,CLUSTER_8
production_cost,"pandas.read_csv(os.path.join(train_root,'production_cost.csv')",CLUSTER_4,CLUSTER_8
demand_price,"pandas.read_csv(os.path.join(train_root,'demand_price.csv')",CLUSTER_4,CLUSTER_8
fixed_cost,"pandas.read_csv(os.path.join(train_root,'fixed_cost.csv')",CLUSTER_4,CLUSTER_8
changeover_cost,"pandas.read_csv(os.path.join(train_root,'changeover_cost.csv')",CLUSTER_4,CLUSTER_8
delivery_cost,"pandas.read_csv(os.path.join(train_root,'delivery_cost.csv')",CLUSTER_4,CLUSTER_8
changeover_days,"pandas.read_csv(os.path.join(train_root,'changeover_days.csv')",CLUSTER_4,CLUSTER_8
production_capacity,"pandas.read_csv(os.path.join(train_root,'production_capacity.csv')",CLUSTER_4,CLUSTER_8
test_demand,pandas.read_csv('/home/yash/Desktop/sample_av/demand_forecast.csv'),CLUSTER_4,CLUSTER_8
manufacture_sequence_real,"pandas.read_csv('/home/yash/Downloads/manufacture_sequence2.csv',index_col=None)",CLUSTER_4,CLUSTER_8
total_production,"pandas.read_excel('/home/yash/Downloads/manufacture_sequence2_final.xlsx',sheetname=3)",CLUSTER_4,CLUSTER_8
test_ship_new['Shipping_to_region_quantity'],numpy.floor(test_ship_new['Shipping_to_region_quantity']),CLUSTER_4,CLUSTER_8
non_zero_capacity,numpy.unique(production_capacity.sort_values('Product'),CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_4,CLUSTER_8
start,time.time(),CLUSTER_4,CLUSTER_8
end,time.time(),CLUSTER_4,CLUSTER_8
courses_eng,pandas.read_csv('courses_eng.csv'),CLUSTER_0,CLUSTER_8
reviews_eng_courses,pandas.read_csv('reviews_eng_courses.csv'),CLUSTER_0,CLUSTER_8
regex,"re.compile(""['A-Za-z\-]+"")",CLUSTER_0,CLUSTER_8
"train,test","sklearn.model_selection.train_test_split(balanced,test_size=0.2,random_state=42)",CLUSTER_0,CLUSTER_8
logreg,"sklearn.linear_model.LogisticRegression(n_jobs=1,C=1e5)",CLUSTER_0,CLUSTER_8
cnt,collections.Counter(lemmata),CLUSTER_0,CLUSTER_8
"digits,target",sklearn.datasets.load_digits(return_X_y=True),CLUSTER_5,CLUSTER_10
predictions,numpy.zeros(target_sample.size),CLUSTER_5,CLUSTER_10
indices_of_class,"numpy.concatenate((indices_of_class1[:min_length],indices_of_class2[:min_length])",CLUSTER_5,CLUSTER_10
indices_of_class1,numpy.nonzero(target==class1),CLUSTER_5,CLUSTER_10
indices_of_class2,numpy.nonzero(target==class2),CLUSTER_5,CLUSTER_10
car_sales_filled_train,"pandas.DataFrame(filled_X_train,
columns=[""Make"",""Colour"",""Doors"",""Odometer(KM)",CLUSTER_5,CLUSTER_5
car_sales_filled_test,"pandas.DataFrame(filled_X_test,
columns=[""Make"",""Colour"",""Doors"",""Odometer(KM)",CLUSTER_5,CLUSTER_5
boston_df,"pandas.DataFrame(boston[""data""],columns=boston[""feature_names""])",CLUSTER_5,CLUSTER_5
"boston_df[""target""]","pandas.Series(boston[""target""])",CLUSTER_5,CLUSTER_5
dummies,"pandas.get_dummies(car_sales[[""Make"",""Colour"",""Doors""]])",CLUSTER_5,CLUSTER_5
heart_disease,"pandas.read_csv(""heart-disease.csv"")",CLUSTER_5,CLUSTER_5
car_sales,"pandas.read_csv(""car-sales-extended.csv"")",CLUSTER_5,CLUSTER_5
car_sales_missing,"pandas.read_csv(""car-sales-extended-missing-data.csv"")",CLUSTER_5,CLUSTER_5
car_sales_missing,"pandas.read_csv(""car-sales-extended-missing-data.csv"")",CLUSTER_5,CLUSTER_5
heart_disease,"pandas.read_csv(""heart-disease.csv"")",CLUSTER_5,CLUSTER_5
clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_5,CLUSTER_5
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=i),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(transformed_X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_5
model,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
model,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
one_hot,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
one_hot,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
one_hot,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
one_hot,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
transformer,"sklearn.compose.ColumnTransformer([(""one_hot"",one_hot,categorical_features)",CLUSTER_5,CLUSTER_5
transformer,"sklearn.compose.ColumnTransformer([(""one_hot"",one_hot,categorical_features)",CLUSTER_5,CLUSTER_5
transformer,"sklearn.compose.ColumnTransformer([(""one_hot"",one_hot,categorical_features)",CLUSTER_5,CLUSTER_5
imputer,"sklearn.compose.ColumnTransformer([
(""cat_imputer"",cat_imputer,cat_features)",CLUSTER_5,CLUSTER_5
transformer,"sklearn.compose.ColumnTransformer([(""one_hot"",one_hot,categorical_features)",CLUSTER_5,CLUSTER_5
cat_imputer,"sklearn.impute.SimpleImputer(strategy=""constant"",fill_value=""missing"")",CLUSTER_5,CLUSTER_5
door_imputer,"sklearn.impute.SimpleImputer(strategy=""constant"",fill_value=4)",CLUSTER_5,CLUSTER_5
num_imputer,"sklearn.impute.SimpleImputer(strategy=""mean"")",CLUSTER_5,CLUSTER_5
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.Ridge(),CLUSTER_5,CLUSTER_5
clf,sklearn.svm.LinearSVC(dual=False),CLUSTER_5,CLUSTER_5
relative_value,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
relative_value_by_countries,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
relative_value,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
relative_value_by_countries,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_train),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_train),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_train),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result,pandas.DataFrame(predictions),CLUSTER_4,CLUSTER_8
CATEGORICAL_VARIABLES,pandas.Series(X_full.columns[X_full.apply(lambdax:(type(x.iloc[0]),CLUSTER_4,CLUSTER_8
X_full,"pandas.concat([X,final_test])",CLUSTER_4,CLUSTER_8
X_full,"pandas.concat([X,final_test])",CLUSTER_4,CLUSTER_8
relative_value_by_countries,"pandas.concat([relative_value_by_countries,
relative_value_by_countries_columns],
axis=0)",CLUSTER_4,CLUSTER_8
relative_value_by_countries,"pandas.concat([relative_value_by_countries,
relative_value_by_countries_columns],
axis=0)",CLUSTER_4,CLUSTER_8
X_full,"pandas.get_dummies(X_full,columns=CATEGORICAL_VARIABLES,drop_first=True)",CLUSTER_4,CLUSTER_8
Y,"pandas.read_csv(PATH_DATA+""Y_train.csv"",sep="";"")",CLUSTER_4,CLUSTER_8
X,"pandas.read_csv(PATH_DATA+""Train.csv"",sep="";"")",CLUSTER_4,CLUSTER_8
final_test,"pandas.read_csv(PATH_DATA+""Test.csv"",sep="";"")",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH_lr,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
new_data,"pandas.DataFrame(data=data,columns=['Country','Year','Status',
'BMI','winsorized_Adult_Mortality',
'winsorized_Infant_Deaths','winsorized_Alcohol',
'winsorized_Percentage_Exp','winsorized_HepatitisB',
'winsorized_Under_Five_Deaths','winsorized_Polio',
'winsorized_Tot_Exp','winsorized_Diphtheria','winsorized_HIV',
'winsorized_GDP','winsorized_Population',
'winsorized_thinness_10_19_years','winsorized_thinness_5_9_years',
'winsorized_Income_Comp_Of_Resources','winsorized_Schooling',
'winsorized_Measles',
'winsorized_Life_Expectancy'])",CLUSTER_7,CLUSTER_8
Y,"pandas.DataFrame(data=new_data,columns=['Life_Expectancy'])",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('/content/drive/MyDrive/Smartbrige/LifeExpectancyData.csv'),CLUSTER_7,CLUSTER_8
data,pandas.read_csv(body),CLUSTER_7,CLUSTER_8
"q75,q25","numpy.percentile(data[variable],[75,25])",CLUSTER_7,CLUSTER_8
"q75,q25","numpy.percentile(variable,[75,25])",CLUSTER_7,CLUSTER_8
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_8
preprocessor,"sklearn.compose.ColumnTransformer(
transformers=[
('cat',categorical_transformer,categorical_features)",CLUSTER_7,CLUSTER_8
models,"collections.OrderedDict([
(""LinearRegression"",Pipeline([
('preprocessor',preprocessor)",CLUSTER_7,CLUSTER_8
scores,collections.OrderedDict(sorted(scores.items(),CLUSTER_7,CLUSTER_8
scores[name],sklearn.metrics.r2_score(model.predict(X_test),CLUSTER_7,CLUSTER_8
categorical_transformer,"sklearn.pipeline.Pipeline(steps=[
('onehot',OneHotEncoder(handle_unknown='ignore')",CLUSTER_7,CLUSTER_8
numeric_transformer,"sklearn.pipeline.Pipeline(steps=[
('imputer',SimpleImputer(strategy='median')",CLUSTER_7,CLUSTER_8
RFRegressor,"sklearn.pipeline.Pipeline([
('preprocessor',preprocessor)",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(ID,columns=['businessID'])",CLUSTER_9,CLUSTER_2
data_final,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
dataset,pandas.DataFrame([data]),CLUSTER_9,CLUSTER_2
data_final,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
dataset,pandas.DataFrame([data]),CLUSTER_9,CLUSTER_2
data_final,"pandas.concat([dataset,data_final],axis=0)",CLUSTER_9,CLUSTER_2
data_final,"pandas.concat([dataset,data_final],axis=0)",CLUSTER_9,CLUSTER_2
df,pandas.read_pickle('business_ID'),CLUSTER_9,CLUSTER_2
response,"requests.get(url,headers=headers,params=PARAMETERS)",CLUSTER_9,CLUSTER_2
res,"requests.get(url_rev,headers=headers)",CLUSTER_9,CLUSTER_2
res_new,"requests.get(url_rev,headers=headers)",CLUSTER_9,CLUSTER_2
df_bow_origin,pandas.DataFrame(bows[ori]),CLUSTER_0,CLUSTER_9
df_tfidf,pandas.DataFrame(model[bows[ori]]),CLUSTER_0,CLUSTER_9
sim_df,pandas.DataFrame(list(sims),CLUSTER_0,CLUSTER_9
important_words,json.load(f),CLUSTER_1,CLUSTER_10
coefficients,numpy.array(initial_coefficients),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
score,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
derivative,"numpy.dot(errors,feature)",CLUSTER_1,CLUSTER_10
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
lp,numpy.sum((indicator-1),CLUSTER_1,CLUSTER_10
apply_threshold,numpy.vectorize(lambdax:1.ifx>0else-1.),CLUSTER_1,CLUSTER_10
cmap_positive,matplotlib.pyplot.get_cmap('Reds'),CLUSTER_1,CLUSTER_10
cmap_negative,matplotlib.pyplot.get_cmap('Blues'),CLUSTER_1,CLUSTER_10
df,pandas.read_csv('../input/RegularSeasonDetailedResults.csv'),CLUSTER_4,CLUSTER_11
ax,"matplotlib.pyplot.subplot(111,polar=True)",CLUSTER_4,CLUSTER_11
state_zero,numpy.array([1ifi==0else0foriinrange(G.number_of_nodes(),CLUSTER_2,CLUSTER_10
state,"numpy.reshape(state,[1,num_states])",CLUSTER_2,CLUSTER_10
next_state,"numpy.reshape(next_state,[1,num_states])",CLUSTER_2,CLUSTER_10
df_accidentes,"pandas.read_csv(""X.csv"")",CLUSTER_7,CLUSTER_1
kmeans,sklearn.cluster.KMeans(n_clusters=2),CLUSTER_7,CLUSTER_1
app_train,pandas.read_csv(f_app),CLUSTER_8,CLUSTER_11
all_embs,numpy.stack(embeddings_index.values(),CLUSTER_0,CLUSTER_8
out_df,"pandas.DataFrame({""qid"":test_df[""qid""].values})",CLUSTER_0,CLUSTER_8
train_df,"pandas.read_csv(""../input/train.csv"")",CLUSTER_0,CLUSTER_8
test_df,"pandas.read_csv(""../input/test.csv"")",CLUSTER_0,CLUSTER_8
"train_df,val_df","sklearn.model_selection.train_test_split(train_df,test_size=0.08,random_state=2018)",CLUSTER_0,CLUSTER_8
state_value,"numpy.mean([self.get_qvalue(state,action)",CLUSTER_12,CLUSTER_11
df,pandas.read_csv('yelp800K.csv'),CLUSTER_0,CLUSTER_8
roc,numpy.array([]),CLUSTER_0,CLUSTER_8
roc,"numpy.append(roc,round(roc_auc_score(ytest,pred)",CLUSTER_0,CLUSTER_8
vocab,collections.Counter(),CLUSTER_0,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(sequences,labels,test_size=0.2,random_state=42)",CLUSTER_0,CLUSTER_8
"fpr,tpr,threshold","sklearn.metrics.roc_curve(ytest,pred)",CLUSTER_0,CLUSTER_8
lstm_score,"sklearn.metrics.f1_score(y_test,model_1.predict_classes(x_test)",CLUSTER_0,CLUSTER_8
BiLSTM_score,"sklearn.metrics.f1_score(y_test,model_2.predict_classes(x_test)",CLUSTER_0,CLUSTER_8
data,sklearn.datasets.load_files(path),CLUSTER_4,CLUSTER_0
dog_files,numpy.array(data['filenames']),CLUSTER_4,CLUSTER_0
human_files,"numpy.array(glob(""lfw/lfw/*/*"")",CLUSTER_4,CLUSTER_0
prediction,numpy.argmax(model.predict(img_tensor),CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(dog_breed_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(VGG16_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(xception_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
bottleneck_features,numpy.load('bottleneck_features/DogVGG16Data.npz'),CLUSTER_4,CLUSTER_0
bottleneck_features,numpy.load('bottleneck_features/DogXceptionData.npz'),CLUSTER_4,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,)",CLUSTER_4,CLUSTER_0
"X,y","sklearn.datasets.make_classification(
n_samples=10000,n_features=10,n_informative=5,n_redundant=5,
random_state=42)",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,test_size=0.3,random_state=42)",CLUSTER_8,CLUSTER_1
SVM_classifier,sklearn.svm.LinearSVC(),CLUSTER_8,CLUSTER_1
model,sklearn.svm.LinearSVC(),CLUSTER_8,CLUSTER_1
"fpr,tpr,tresh","sklearn.metrics.roc_curve(y_test,probs)",CLUSTER_8,CLUSTER_1
calibrated,"sklearn.calibration.CalibratedClassifierCV(model,method='sigmoid',cv=5)",CLUSTER_8,CLUSTER_1
"fraction,mean","sklearn.calibration.calibration_curve(y_test,probs,n_bins=20)",CLUSTER_8,CLUSTER_1
"fop,mpv","sklearn.calibration.calibration_curve(y_test,probs,n_bins=15,normalize=True)",CLUSTER_8,CLUSTER_1
df,pandas.read_csv(original_data),CLUSTER_8,CLUSTER_3
origin,pandas.read_csv(original_data),CLUSTER_8,CLUSTER_3
stolen,pandas.read_csv(output_file),CLUSTER_8,CLUSTER_3
origin,pandas.read_csv(original_data),CLUSTER_8,CLUSTER_3
origin,pandas.read_csv(original_data),CLUSTER_8,CLUSTER_3
df,"pandas.concat(dfs,axis=1,keys=keys)",CLUSTER_12,CLUSTER_11
df,"pandas.concat(dfs,axis=1,keys=keys)",CLUSTER_12,CLUSTER_11
df,"pandas.read_csv(path_csv,sep=r'\s+')",CLUSTER_12,CLUSTER_11
arr,"numpy.arange(1,60)",CLUSTER_1,CLUSTER_3
y_data,numpy.array([[0]]*20+[[1]]*20+[[2]]*20),CLUSTER_1,CLUSTER_3
batch_s,numpy.empty(shape),CLUSTER_1,CLUSTER_3
x_data_temp,"numpy.vstack((x_data_temp,x_data[i*50000:(i+1)",CLUSTER_1,CLUSTER_3
y_data_temp,"numpy.vstack((y_data_temp,y_data[i:i+1])",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccX_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccY_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccZ_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Cur_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Son_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Vol_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccX_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccY_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccZ_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Cur_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Son_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Vol_""+str(i)",CLUSTER_1,CLUSTER_3
data_all,"numpy.loadtxt(""data_all"",delimiter="","",dtype=np.float32,skiprows=1)",CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(data),CLUSTER_1,CLUSTER_3
evs,numpy.linalg.eigvals(a),CLUSTER_3,CLUSTER_6
cost,numpy.squeeze(cost),CLUSTER_1,CLUSTER_10
reviews,pandas.read_csv(fp),CLUSTER_0,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
reviews['final_review'],reviews['Rating'],test_size=0.25)",CLUSTER_0,CLUSTER_11
tag_map,collections.defaultdict(lambda:wn.NOUN),CLUSTER_0,CLUSTER_11
SVM,sklearn.svm.LinearSVC(),CLUSTER_0,CLUSTER_11
grid,"sklearn.model_selection.GridSearchCV(SVM,parameters,cv=3)",CLUSTER_0,CLUSTER_11
train,"numpy.array(train_df,dtype='float32')",CLUSTER_4,CLUSTER_0
test,"numpy.array(test_df,dtype='float32')",CLUSTER_4,CLUSTER_0
train_df,pandas.read_csv('../input/fashionmnist/fashion-mnist_train.csv'),CLUSTER_4,CLUSTER_0
test_df,pandas.read_csv('../input/fashionmnist/fashion-mnist_test.csv'),CLUSTER_4,CLUSTER_0
"X_train,X_validate,y_train,y_validate","sklearn.model_selection.train_test_split(x_train,y_train,test_size=0.2,random_state=5000)",CLUSTER_4,CLUSTER_0
preds,numpy.exp(preds),CLUSTER_5,CLUSTER_1
y_train,numpy.log1p(train['price']+1),CLUSTER_5,CLUSTER_1
train,pandas.read_table('../../dat/train.tsv'),CLUSTER_5,CLUSTER_1
test,pandas.read_table('../../dat/test.tsv'),CLUSTER_5,CLUSTER_1
cv,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=42)",CLUSTER_5,CLUSTER_1
model,"sklearn.linear_model.Ridge(
solver='auto',
fit_intercept=True,
alpha=0.5,
max_iter=100,
normalize=False,
tol=0.05)",CLUSTER_5,CLUSTER_1
vectorizer,"sklearn.pipeline.FeatureUnion([
('name',CountVectorizer(
ngram_range=(1,2)",CLUSTER_5,CLUSTER_1
vectorizer,"sklearn.pipeline.FeatureUnion([
('name',CountVectorizer(
ngram_range=(1,2)",CLUSTER_5,CLUSTER_1
dummies,"pandas.get_dummies(data_obj.Embarked,prefix=""Embarked"")",CLUSTER_7,CLUSTER_3
data,"pandas.read_csv(""https://raw.githubusercontent.com/HrantDavtyan/Data_Scraping/master/Week%202/Datasets/Titanic.csv"")",CLUSTER_7,CLUSTER_3
data_obj.Sex,"numpy.where(data_obj.Sex==""male"",1,0)",CLUSTER_7,CLUSTER_3
data_x,"numpy.arange(30,181,30)",CLUSTER_1,CLUSTER_10
control,"numpy.array([24,23.3,23.8,23.5,23.6,23.4])",CLUSTER_1,CLUSTER_10
col,"numpy.array([u'
labels=numpy.array([""5\u03BCg/ml"",""10\u03BCg/ml"",""15\u03BCg/ml"",
""20\u03BCg/ml"",""40\u03BCg/ml"",""50\u03BCg/ml"",""80\u03BCg/ml""])",CLUSTER_1,CLUSTER_10
data_y_corr,numpy.zeros(len(data_y),CLUSTER_1,CLUSTER_10
mean_x,numpy.mean(data_x),CLUSTER_1,CLUSTER_10
mean_y,numpy.mean(data_y),CLUSTER_1,CLUSTER_10
m,numpy.sum((data_y-mean_y),CLUSTER_1,CLUSTER_10
D_calc,numpy.sum((data_x-mean_x),CLUSTER_1,CLUSTER_10
sum_d2,numpy.sum((data_y-m*data_x-c),CLUSTER_1,CLUSTER_10
dm,numpy.sqrt(sum_d2/(D_calc*(n-2),CLUSTER_1,CLUSTER_10
dc,numpy.sqrt(((1/n),CLUSTER_1,CLUSTER_10
fit_x,numpy.linspace(np.min(data_x),CLUSTER_1,CLUSTER_10
"concentration,data_y","numpy.loadtxt(""ZnFeO_small_yellow.csv"",delimiter=';',unpack=True)",CLUSTER_1,CLUSTER_10
scaled_df,"pandas.DataFrame(scaled_df,columns=colnames)",CLUSTER_6,CLUSTER_5
scaled_df1,"pandas.DataFrame(scaled_df1,columns=colnames)",CLUSTER_6,CLUSTER_5
scaled_df2,"pandas.DataFrame(scaled_df2,columns=colnames)",CLUSTER_6,CLUSTER_5
train_df,"pandas.read_csv(os.path.join(DIR,'netflow_day-03.csv')",CLUSTER_6,CLUSTER_5
train_df,"pandas.read_csv(os.path.join(DIR,'netflow_day-03.csv')",CLUSTER_6,CLUSTER_5
"x_train,x_valid,y_train,y_valid","sklearn.model_selection.train_test_split(train_df.iloc[:100000],train_df.iloc[:100000],test_size=0.33,random_state=42)",CLUSTER_6,CLUSTER_5
"x_train,x_valid,y_train,y_valid","sklearn.model_selection.train_test_split(scaled_df1.iloc[:100000],scaled_df1.iloc[:100000],test_size=0.33,random_state=42)",CLUSTER_6,CLUSTER_5
"x_train,x_valid,y_train,y_valid","sklearn.model_selection.train_test_split(scaled_df1.iloc[:100000],scaled_df1.iloc[:100000],test_size=0.33,random_state=42)",CLUSTER_6,CLUSTER_5
loss_hist,numpy.zeros(epochs),CLUSTER_6,CLUSTER_5
val_loss_hist,numpy.zeros(epochs),CLUSTER_6,CLUSTER_5
val_loss,"numpy.sum(np.multiply(losses,nums)",CLUSTER_6,CLUSTER_5
val_loss,"numpy.sum(np.multiply(losses,nums)",CLUSTER_6,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_6,CLUSTER_5
scaler1,sklearn.preprocessing.MinMaxScaler(),CLUSTER_6,CLUSTER_5
scaler2,sklearn.preprocessing.RobustScaler(),CLUSTER_6,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_5
"fig,(ax1,ax2,ax3,ax4)","matplotlib.pyplot.subplots(ncols=4,figsize=(16,5)",CLUSTER_6,CLUSTER_5
normalised_df,"pandas.DataFrame(index=np.arange(1,13,1)",CLUSTER_1,CLUSTER_10
normalized_moviebyyear_df,pandas.DataFrame(),CLUSTER_1,CLUSTER_10
movies_df,pandas.read_csv('tmdb-movies.csv'),CLUSTER_1,CLUSTER_10
normalised_df,"pd.DataFrame(index=numpy.arange(1,13,1)",CLUSTER_1,CLUSTER_10
df,"pandas.read_csv(DATA_DIR/'stumbleupon.tsv',sep='\t')",CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(n_estimators=20),CLUSTER_7,CLUSTER_5
levels,numpy.arange(n_classes+1),CLUSTER_7,CLUSTER_5
fast_oscillation,numpy.sin(5*x),CLUSTER_7,CLUSTER_5
slow_oscillation,numpy.sin(0.5*x),CLUSTER_7,CLUSTER_5
xfit,"numpy.linspace(0,10,1000)",CLUSTER_7,CLUSTER_5
"xx,yy","numpy.meshgrid(np.linspace(*xlim,num=200)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_7,CLUSTER_5
"X,y","sklearn.datasets.make_blobs(n_samples=300,centers=4,
random_state=0,cluster_std=1.0)",CLUSTER_7,CLUSTER_5
tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
bag,"sklearn.ensemble.BaggingClassifier(tree,n_estimators=100,max_samples=0.8,
random_state=1)",CLUSTER_7,CLUSTER_5
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=0)",CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(n_estimators=1000),CLUSTER_7,CLUSTER_5
forest,sklearn.ensemble.RandomForestRegressor(200),CLUSTER_7,CLUSTER_5
digits,sklearn.datasets.load_digits(),CLUSTER_7,CLUSTER_5
mat,"sklearn.metrics.confusion_matrix(ytest,ypred)",CLUSTER_7,CLUSTER_5
"X,y",sklearn.datasets.make_classification(n_samples=80000),CLUSTER_5,CLUSTER_10
rt_lm,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
rf_lm,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
grd_lm,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
rf,"sklearn.ensemble.RandomForestClassifier(max_depth=3,n_estimators=n_estimator)",CLUSTER_5,CLUSTER_10
rf_enc,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_10
grd_enc,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.5)",CLUSTER_5,CLUSTER_10
"X_train,X_train_lr,y_train,y_train_lr","sklearn.model_selection.train_test_split(X_train,
y_train,
test_size=0.5)",CLUSTER_5,CLUSTER_10
"fpr_rt_lm,tpr_rt_lm,_","sklearn.metrics.roc_curve(y_test,y_pred_rt)",CLUSTER_5,CLUSTER_10
"fpr_rf_lm,tpr_rf_lm,_","sklearn.metrics.roc_curve(y_test,y_pred_rf_lm)",CLUSTER_5,CLUSTER_10
"fpr_grd_lm,tpr_grd_lm,_","sklearn.metrics.roc_curve(y_test,y_pred_grd_lm)",CLUSTER_5,CLUSTER_10
"fpr_grd,tpr_grd,_","sklearn.metrics.roc_curve(y_test,y_pred_grd)",CLUSTER_5,CLUSTER_10
"fpr_rf,tpr_rf,_","sklearn.metrics.roc_curve(y_test,y_pred_rf)",CLUSTER_5,CLUSTER_10
pipeline,"sklearn.pipeline.make_pipeline(rt,rt_lm)",CLUSTER_5,CLUSTER_10
stars,"pandas.qcut(res[(""mean_score"",""Score"")",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""happiness.csv"")",CLUSTER_8,CLUSTER_3
a,"numpy.eye(4,k=1)",CLUSTER_3,CLUSTER_6
t_train,numpy.eye(10),CLUSTER_2,CLUSTER_7
t_test,numpy.eye(10),CLUSTER_2,CLUSTER_7
brand_mean_price_mileage,"pandas.DataFrame(mean_mileage,columns=['mean_mileage'])",CLUSTER_8,CLUSTER_4
bmp_series,pandas.Series(brand_mean_price),CLUSTER_8,CLUSTER_4
mean_price,pandas.Series(brand_mean_price),CLUSTER_8,CLUSTER_4
mean_mileage,pandas.Series(brand_mean_mileage),CLUSTER_8,CLUSTER_4
autos,"pandas.read_csv(""autos.csv"",encoding=""Latin-1"")",CLUSTER_8,CLUSTER_4
roll,"random.randint(1,6)",CLUSTER_3,CLUSTER_10
x,"numpy.linspace(0,1,300)",CLUSTER_3,CLUSTER_10
"v[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"v[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
"v[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"v[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
"s[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"s[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
num_complete_minibatches,math.floor(m/mini_batch_size),CLUSTER_5,CLUSTER_9
rvotes,"re.compile(r'<ahref=""\/film\/.*\/votes\/"">\s*\d{1,2}\.\d{1,2}')",CLUSTER_9,CLUSTER_2
rrate,"re.compile(r'\d{1,2}\.\d{1,2}')",CLUSTER_9,CLUSTER_2
response,"requests.get(url,headers={'User-Afent':header})",CLUSTER_9,CLUSTER_2
df,"pandas.read_json('resources/News_Category_Dataset_v2.json',lines=True)",CLUSTER_5,CLUSTER_1
pipe,"sklearn.pipeline.Pipeline([(""cleaner"",predictors()",CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_5,CLUSTER_1
classifier,sklearn.linear_model.LogisticRegression(max_iter=4000),CLUSTER_5,CLUSTER_1
grid_search,"sklearn.model_selection.GridSearchCV(pipe,param_grid=new_grid,n_jobs=1,cv=3,verbose=3,refit=True)",CLUSTER_5,CLUSTER_1
tables,pandas.DataFrame(tables[1]),CLUSTER_9,CLUSTER_2
tables,pandas.read_html(url_facts),CLUSTER_9,CLUSTER_2
file_df,"pandas.DataFrame(data_list[1:],columns=data_list[0])",CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(25,10)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(25,10)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(25,10)",CLUSTER_4,CLUSTER_11
output_df,pandas.DataFrame(Income_dict.values(),CLUSTER_8,CLUSTER_1
Algo_input,"pandas.read_csv(""Algo_data_input.csv"")",CLUSTER_8,CLUSTER_1
wage_join,"pandas.to_numeric(''.join(map(str,living_wage_split)",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,target,random_state=42)",CLUSTER_8,CLUSTER_1
model,sklearn.svm.SVC(kernel='linear'),CLUSTER_8,CLUSTER_1
Q_optimal,"numpy.array(Q_optimal,dtype=np.float32)",CLUSTER_7,CLUSTER_8
next_actions,numpy.zeros([len(next_states),CLUSTER_7,CLUSTER_8
next_state_next_action,numpy.zeros([np.shape(next_states),CLUSTER_7,CLUSTER_8
best_actions,numpy.zeros([np.shape(train),CLUSTER_7,CLUSTER_8
Q_predicted,numpy.zeros([np.shape(train),CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='C',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='U',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='J',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='A',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
n_nodes_hl1,numpy.shape(train),CLUSTER_7,CLUSTER_8
n_nodes_hl2,numpy.shape(train),CLUSTER_7,CLUSTER_8
NUM_STATES,numpy.shape(train),CLUSTER_7,CLUSTER_8
NUM_DIM,numpy.shape(train),CLUSTER_7,CLUSTER_8
num_nodes,numpy.shape(train),CLUSTER_7,CLUSTER_8
next_actions,"numpy.delete(next_actions,-1,axis=1)",CLUSTER_7,CLUSTER_8
"train,test","sklearn.model_selection.train_test_split(df,test_size=0.5)",CLUSTER_7,CLUSTER_8
df[data[i]],pandas.Categorical((pd.factorize(df[data[i]]),CLUSTER_7,CLUSTER_8
train[rewards[i]],pandas.Categorical((pd.factorize(train[rewards[i]]),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(df),CLUSTER_7,CLUSTER_8
curr_state_current_action,"pandas.DataFrame(np.column_stack((current_states,train[actions])",CLUSTER_7,CLUSTER_8
next_state_next_action0,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,0])",CLUSTER_7,CLUSTER_8
next_state_next_action1,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,1])",CLUSTER_7,CLUSTER_8
next_state_next_action2,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,2])",CLUSTER_7,CLUSTER_8
next_state_next_action3,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,3])",CLUSTER_7,CLUSTER_8
next_state_next_action4,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,4])",CLUSTER_7,CLUSTER_8
next_state_next_action5,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,5])",CLUSTER_7,CLUSTER_8
next_state_next_action6,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,6])",CLUSTER_7,CLUSTER_8
med_age,pandas.DataFrame(),CLUSTER_7,CLUSTER_5
sub,"pandas.DataFrame({'PassengerId':PassengerId,'Survived':prediction})",CLUSTER_7,CLUSTER_5
train_df['Cabin'],pandas.Series([i[0]ifpd.notnull(i),CLUSTER_7,CLUSTER_5
test_df['Cabin'],pandas.Series([i[0]ifpd.notnull(i),CLUSTER_7,CLUSTER_5
dataset['AgeBin'],"pandas.cut(dataset['Age'],5,labels=[1,2,3,4,5])",CLUSTER_7,CLUSTER_5
train_df,"pandas.get_dummies(train_df,columns=['Sex','Embarked','Pclass','Title','AgeBin','FareBin','Cabin'],drop_first=True)",CLUSTER_7,CLUSTER_5
test_df,"pandas.get_dummies(test_df,columns=['Sex','Embarked','Pclass','Title','AgeBin','FareBin','Cabin'],drop_first=True)",CLUSTER_7,CLUSTER_5
dataset['FareBin'],"pandas.qcut(dataset['Fare'],4,labels=[1,2,3,4])",CLUSTER_7,CLUSTER_5
train_df,pandas.read_csv('../input/train.csv'),CLUSTER_7,CLUSTER_5
gen_df,pandas.read_csv('../input/gender_submission.csv'),CLUSTER_7,CLUSTER_5
test_df,pandas.read_csv('../input/test.csv'),CLUSTER_7,CLUSTER_5
ageplt,"seaborn.FacetGrid(train_df,hue='Survived',aspect=4)",CLUSTER_7,CLUSTER_5
fareplt,"seaborn.FacetGrid(train_df,hue='Survived',aspect=5)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.20,random_state=1)",CLUSTER_7,CLUSTER_5
rmodel,sklearn.ensemble.RandomForestClassifier(n_estimators=50),CLUSTER_7,CLUSTER_5
voting,"sklearn.ensemble.VotingClassifier(estimators=[('logi',logmodel)",CLUSTER_7,CLUSTER_5
amodel,sklearn.ensemble.AdaBoostClassifier(n_estimators=100),CLUSTER_7,CLUSTER_5
gmodel,sklearn.ensemble.GradientBoostingClassifier(n_estimators=100),CLUSTER_7,CLUSTER_5
logmodel,sklearn.linear_model.LogisticRegression(max_iter=100),CLUSTER_7,CLUSTER_5
modelsvc,"sklearn.svm.SVC(probability=True,gamma='auto')",CLUSTER_7,CLUSTER_5
dmodel,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
img,"numpy.empty([h,w,3])",CLUSTER_8,CLUSTER_3
GRAY_IM,"numpy.empty([h,w])",CLUSTER_8,CLUSTER_3
Matrix_TEST,numpy.load(filename_Matrix_TEST),CLUSTER_8,CLUSTER_3
classFrequencies,numpy.zeros(K),CLUSTER_1,CLUSTER_10
theta,"numpy.zeros((K,dim)",CLUSTER_1,CLUSTER_10
ordre,numpy.argsort(labels_for_final_accuracy_measurement),CLUSTER_1,CLUSTER_10
"affectations[:,i]/","numpy.sum(affectations[:,i])",CLUSTER_1,CLUSTER_10
LogLikelihood,"numpy.log(np.max(affectations,axis=0)",CLUSTER_1,CLUSTER_10
df,pandas.DataFrame(dict),CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(filedict),CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(filedict),CLUSTER_1,CLUSTER_3
obj,"pandas.Series([4,7,-5,3])",CLUSTER_1,CLUSTER_3
obj2,"pandas.Series([4,7,-5,3],index=['d','b','a','c'])",CLUSTER_1,CLUSTER_3
df,pandas.read_csv(filename),CLUSTER_1,CLUSTER_3
categorical_sample_points,"numpy.arange(0,10)",CLUSTER_4,CLUSTER_7
tiled_images,"numpy.concatenate(image_rows,axis=1)",CLUSTER_4,CLUSTER_7
continuous_sample_points,"numpy.linspace(-1.0,1.0,10)",CLUSTER_4,CLUSTER_7
start_time,time.time(),CLUSTER_4,CLUSTER_7
start_time,time.time(),CLUSTER_4,CLUSTER_7
start_time,time.time(),CLUSTER_4,CLUSTER_7
start_time,time.time(),CLUSTER_4,CLUSTER_7
X0,"numpy.array((1,2)",CLUSTER_1,CLUSTER_9
tspan,"numpy.array((0,40)",CLUSTER_1,CLUSTER_9
X0,"numpy.array([2,0])",CLUSTER_1,CLUSTER_9
tspan,"numpy.array([0,40])",CLUSTER_1,CLUSTER_9
X0,"numpy.array([2,0])",CLUSTER_1,CLUSTER_9
tspan,"numpy.array([0,40])",CLUSTER_1,CLUSTER_9
dt,numpy.zeros(len(te),CLUSTER_1,CLUSTER_9
"teval,h","numpy.linspace(*tspan,500,retstep=True)",CLUSTER_1,CLUSTER_9
"teval,h","numpy.linspace(*tspan,1500,retstep=True)",CLUSTER_1,CLUSTER_9
"teval,h","numpy.linspace(*tspan,1500,retstep=True)",CLUSTER_1,CLUSTER_9
periods,numpy.diff(sol.t_events[0]),CLUSTER_1,CLUSTER_9
periods,numpy.diff(sol.t_events[0]),CLUSTER_1,CLUSTER_9
periods,numpy.diff(sol.t_events[0]),CLUSTER_1,CLUSTER_9
d,numpy.diff(periods),CLUSTER_1,CLUSTER_9
periods,numpy.diff(sol.t_events[0]),CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,X0,max_step=h)",CLUSTER_1,CLUSTER_9
sol2,"scipy.integrate.solve_ivp(dXdt,tspan,sol.y[:,-1],max_step=h)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,X0,max_step=h,events=[max_x_event,min_x_event],
dense_output=True)",CLUSTER_1,CLUSTER_9
sol2,"scipy.integrate.solve_ivp(dXdt,tspan,X0,max_step=h,events=max_x_event)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,X0,max_step=h,events=max_x_event,dense_output=True)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,last_step,max_step=h,events=max_x_event,dense_output=True)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(ode,tspan,X0,max_step=h,events=max_x_event,dense_output=True)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,last_step,max_step=h,events=max_x_event,dense_output=True)",CLUSTER_1,CLUSTER_9
TitanicRawData,pandas.read_csv(url),CLUSTER_5,CLUSTER_1
TitanicRawData,pandas.read_csv(url),CLUSTER_5,CLUSTER_1
TitanicRawData,pandas.read_csv(url),CLUSTER_5,CLUSTER_1
TitanicRawData['age'].fillna(value,numpy.mean(TitanicRawData['age']),CLUSTER_5,CLUSTER_1
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
pvals,"sklearn.feature_selection.f_regression(X,y)",CLUSTER_5,CLUSTER_1
y_train,numpy.array(moviecomments['Y'][:5000]),CLUSTER_4,CLUSTER_1
y_test,numpy.array(moviecomments['Y'][5000:size]),CLUSTER_4,CLUSTER_1
y_last,numpy.array(moviecomments['Y'][size:]),CLUSTER_4,CLUSTER_1
naverdata,"pandas.read_csv(""/kaggle/input/dfc615k/ko_data.csv"",sep="","",encoding=""ms949"")",CLUSTER_4,CLUSTER_1
naversample,"pandas.read_csv(""/kaggle/input/dfc615k/ko_sample.csv"",sep="","",encoding=""ms949"")",CLUSTER_4,CLUSTER_1
moviecomments,"pandas.read_csv(""/kaggle/input/naverdata3/naverfile3.csv"",sep="","")",CLUSTER_4,CLUSTER_1
cm,sklearn.metrics.confusion_matrix([to_bool(x),CLUSTER_4,CLUSTER_1
"sns.heatmap(cm,cmap","seaborn.light_palette(
""navy"",as_cmap=True)",CLUSTER_4,CLUSTER_1
ground_truth_communities,"pandas.read_csv(base_dir+""email-Eu-core-department-labels.txt"",header=None,names=['node','community'],sep='\s+')",CLUSTER_12,CLUSTER_11
particles,"pandas.read_csv(base_dir+""eu.csv"")",CLUSTER_12,CLUSTER_11
persons,"pandas.read_csv(base_dir+""persons.csv"")",CLUSTER_12,CLUSTER_11
boston_df,pandas.read_csv('boston.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=0)",CLUSTER_5,CLUSTER_5
rl_model,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
li,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
li_pca,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
lscv,sklearn.linear_model.LassoCV(),CLUSTER_5,CLUSTER_5
models,"sklearn.feature_selection.SelectFromModel(lscv,prefit=True)",CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_5
df['Semester'],"numpy.where(df['Quarter'].isin([1,2])",CLUSTER_5,CLUSTER_5
df['Is_weekend'],"numpy.where(df['Dayofweek'].isin([5,6])",CLUSTER_5,CLUSTER_5
df['Is_weekday'],"numpy.where(df['Dayofweek'].isin([0,1,2,3,4])",CLUSTER_5,CLUSTER_5
sub['Vehicles'],numpy.expm1(pred),CLUSTER_5,CLUSTER_5
train['Vehicles'],numpy.log1p(train['Vehicles']),CLUSTER_5,CLUSTER_5
train,"pandas.get_dummies(train,columns=[col])",CLUSTER_5,CLUSTER_5
test,"pandas.get_dummies(test,columns=[col])",CLUSTER_5,CLUSTER_5
train,"pandas.read_csv('train_aWnotuB.csv',parse_dates=['DateTime'])",CLUSTER_5,CLUSTER_5
test,"pandas.read_csv('test_BdBKkAj_L87Nc3S.csv',parse_dates=['DateTime'])",CLUSTER_5,CLUSTER_5
sub,pandas.read_csv('sample_submission_KVKNmI7.csv'),CLUSTER_5,CLUSTER_5
df['Year'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Month'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Day'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Dayofweek'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['DayOfyear'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Week'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Quarter'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_month_start'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_month_end'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_quarter_start'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_quarter_end'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_year_start'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_year_end'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Hour'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
"train_features,test_features,train_labels,test_labels","sklearn.model_selection.train_test_split(X,y,test_size=0.2,shuffle=True)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=figsize)",CLUSTER_5,CLUSTER_5
POLmonthyearERC,"pandas.read_csv('queries_results/Poland/POL_USA/POL-USAmonthyeareventRCcountSUMaToneAVGaTonne.csv',header=0,sep='*,*',dtype={'EventRootCode':str})",CLUSTER_7,CLUSTER_3
eventcodes,"pandas.read_csv('cameo.csv',header=0,dtype=str,sep='*,*')",CLUSTER_7,CLUSTER_3
"POLmonthyearERC[""Time""]","pandas.to_datetime(POLmonthyearERC['MonthYear'],format='%Y%m')",CLUSTER_7,CLUSTER_3
g,"seaborn.barplot(s.EVENTDESCRIPTION,s.Count,palette='rainbow')",CLUSTER_7,CLUSTER_3
convert,"numpy.ndarray((image.shape[0],image.shape[1])",CLUSTER_4,CLUSTER_6
temperature_store_df,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_feat_imp,pandas.DataFrame(gb_regressor.feature_importances_),CLUSTER_7,CLUSTER_8
plot_df,"pandas.DataFrame([test_dates,plot_y_pred,plot_y_test])",CLUSTER_7,CLUSTER_8
eval_df,"pandas.DataFrame([[mlp_pred,gru_pred,gru_drop_pred,gru_stack_pred,gb_val_pred[0],y_val[0]]])",CLUSTER_7,CLUSTER_8
xmas_data_df,"pandas.get_dummies(data=xmas_data_df,columns=['next_week'],prefix='nw')",CLUSTER_7,CLUSTER_8
stores_df,"pandas.get_dummies(data=stores_df,columns=['Type'],prefix='type')",CLUSTER_7,CLUSTER_8
merged_df,"pandas.merge(xmas_data_df,features_df,on=['Store','Date'])",CLUSTER_7,CLUSTER_8
merged_all_df,"pandas.merge(merged_df,stores_df,on='Store')",CLUSTER_7,CLUSTER_8
data_df,pandas.read_csv('./data/train.csv'),CLUSTER_7,CLUSTER_8
features_df,pandas.read_csv('./data/features.csv'),CLUSTER_7,CLUSTER_8
stores_df,pandas.read_csv('./data/stores.csv'),CLUSTER_7,CLUSTER_8
cpi_df.index,pandas.to_datetime(cpi_df.index),CLUSTER_7,CLUSTER_8
data_df.Date,pandas.to_datetime(data_df.Date),CLUSTER_7,CLUSTER_8
features_df.Date,pandas.to_datetime(features_df.Date),CLUSTER_7,CLUSTER_8
plot_df.Date,pandas.to_datetime(plot_df.Date),CLUSTER_7,CLUSTER_8
data_rows,"numpy.arange(lookback,data_np.shape[0]-delay)",CLUSTER_7,CLUSTER_8
X_np,numpy.zeros((len(data_rows),CLUSTER_7,CLUSTER_8
y_np,numpy.zeros((len(data_rows),CLUSTER_7,CLUSTER_8
mask,"numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_7,CLUSTER_8
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_7,CLUSTER_8
date_cutoff,"datetime.date(2011,12,30)",CLUSTER_7,CLUSTER_8
date_start_windowing,"datetime.date(2011,11,25)",CLUSTER_7,CLUSTER_8
date_validation_week,"datetime.date(2011,12,23)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
y_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=0.7,test_size=0.3,random_state=1,shuffle=False)",CLUSTER_7,CLUSTER_8
gb_regressor,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=400,random_state=1)",CLUSTER_7,CLUSTER_8
gb_mae,"sklearn.metrics.mean_absolute_error(tree_dict['1_1']['y_test'],tree_dict['1_1']['y_pred'])",CLUSTER_7,CLUSTER_8
store,"pandas.HDFStore('../output/sra.h5',mode='r')",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_11
X_src,"numpy.zeros((1,1)",CLUSTER_5,CLUSTER_9
X,"numpy.concatenate((np.random.normal(0,1,int(0.3*N)",CLUSTER_5,CLUSTER_9
X,"numpy.concatenate((np.random.normal(0,1,int(0.3*N)",CLUSTER_5,CLUSTER_9
X_plot,"numpy.linspace(-5,10,1000)",CLUSTER_5,CLUSTER_9
bins,"numpy.linspace(-5,10,10)",CLUSTER_5,CLUSTER_9
X_plot,"numpy.linspace(-6,6,1000)",CLUSTER_5,CLUSTER_9
X_plot,"numpy.linspace(-5,10,1000)",CLUSTER_5,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(2,2,sharex=True,sharey=True)",CLUSTER_5,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(2,3,sharex=True,sharey=True)",CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
kde,"sklearn.neighbors.KernelDensity(kernel='tophat',bandwidth=0.75)",CLUSTER_5,CLUSTER_9
kde,"sklearn.neighbors.KernelDensity(kernel='gaussian',bandwidth=0.75)",CLUSTER_5,CLUSTER_9
log_dens,sklearn.neighbors.KernelDensity(kernel=kernel),CLUSTER_5,CLUSTER_9
kde,"sklearn.neighbors.KernelDensity(kernel=kernel,bandwidth=0.5)",CLUSTER_5,CLUSTER_9
ax,matplotlib.pyplot.axes(projection=ccrs.PlateCarree(),CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('Examples/australia/data/WellCoordinates_250km_grid.csv'),CLUSTER_1,CLUSTER_3
frame,pandas.read_csv(recordings+date+filename),CLUSTER_8,CLUSTER_3
train_loss,numpy.zeros(niter),CLUSTER_4,CLUSTER_6
scratch_train_loss,numpy.zeros(niter),CLUSTER_4,CLUSTER_6
response,requests.get(dataset_url),CLUSTER_5,CLUSTER_9
x,numpy.array(filtered_df[exp_var]),CLUSTER_5,CLUSTER_9
y,numpy.array(filtered_df[int_var]),CLUSTER_5,CLUSTER_9
df,"pandas.DataFrame(dataframe,index=dataframe[""Index""])",CLUSTER_5,CLUSTER_9
"rho,p","scipy.stats.pearsonr(df[exp_var],df[int_var])",CLUSTER_5,CLUSTER_9
"rho,_","scipy.stats.pearsonr(filtered_df[exp_var],filtered_df[int_var])",CLUSTER_5,CLUSTER_9
zscores,scipy.stats.zscore(unfiltered_df[int_var]),CLUSTER_5,CLUSTER_9
model,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
song_df,"pandas.merge(song_df_1,song_df_2.drop_duplicates(['song_id'])",CLUSTER_5,CLUSTER_1
song_df_2,pandas.read_csv(songs_metadata_file),CLUSTER_5,CLUSTER_1
song_df_1,"pandas.read_table(triplets_file,header=None)",CLUSTER_5,CLUSTER_1
"train_data,test_data","sklearn.model_selection.train_test_split(song_df,test_size=0.20,random_state=0)",CLUSTER_5,CLUSTER_1
drinks,pandas.read_csv(url),CLUSTER_8,CLUSTER_4
drinks,"pandas.read_csv(url,dtype={'beer_servings':float})",CLUSTER_8,CLUSTER_4
orders,pandas.read_table(url),CLUSTER_8,CLUSTER_4
aug_hist_df,pandas.DataFrame(history_of_augmented_model.history),CLUSTER_1,CLUSTER_3
nonaug_hist_df,pandas.DataFrame(history_of_nonaugmented_model.history),CLUSTER_1,CLUSTER_3
rescaled_images,numpy.array(rescaled_images),CLUSTER_4,CLUSTER_11
image,numpy.asarray(Image.open(image_path),CLUSTER_4,CLUSTER_11
x_train,numpy.concatenate(frames),CLUSTER_5,CLUSTER_1
y_train,numpy.concatenate(frame1),CLUSTER_5,CLUSTER_1
dataframe,pandas.read_csv(io.BytesIO(uploaded['sonar.csv']),CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(estimator,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
df_dd,"pandas.merge(dfa,dfb,on=""ID"")",CLUSTER_1,CLUSTER_3
dfb,"pandas.read_csv(""data/hypo_b.dat"",header=None,delim_whitespace=True,
names=[""ID"",""YY"",""MM"",""DD"",""HH"",""MI"",""SE"",""latb"",""lonb"",""c"",""d"",""e""])",CLUSTER_1,CLUSTER_3
dfa,"pandas.read_csv(""data/hypo_a.dat"",header=None,delim_whitespace=True,
names=[""ID"",""YY"",""MM"",""DD"",""HH"",""MI"",""SE"",""lata"",""lona"",""c"",""d"",""e""])",CLUSTER_1,CLUSTER_3
lon,"numpy.array(dfm[""lonb""])",CLUSTER_1,CLUSTER_3
lat,"numpy.array(dfm[""latb""])",CLUSTER_1,CLUSTER_3
lon,"numpy.array(df_dd[""lonb""])",CLUSTER_1,CLUSTER_3
lat,"numpy.array(df_dd[""latb""])",CLUSTER_1,CLUSTER_3
lon,"numpy.array(df_dd[""lona""])",CLUSTER_1,CLUSTER_3
lat,"numpy.array(df_dd[""lata""])",CLUSTER_1,CLUSTER_3
lon,numpy.array(df[col_lon]),CLUSTER_1,CLUSTER_3
lat,numpy.array(df[col_lat]),CLUSTER_1,CLUSTER_3
df_train,pandas.read_csv('../kaggle/train.csv'),CLUSTER_7,CLUSTER_3
df_test,pandas.read_csv('../kaggle/test.csv'),CLUSTER_7,CLUSTER_3
df_train['Date'],"pandas.to_datetime(df_train['Date'],format=
'%Y-%m-%d')",CLUSTER_7,CLUSTER_3
df_test['Date'],"pandas.to_datetime(df_test['Date'],format=
'%Y-%m-%d')",CLUSTER_7,CLUSTER_3
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(10,6)",CLUSTER_7,CLUSTER_5
data,"sklearn.datasets.make_blobs(n_samples=200,n_features=2,centers=4,cluster_std=1.8,random_state=101)",CLUSTER_7,CLUSTER_5
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame(np.random.randn(1000,2)",CLUSTER_1,CLUSTER_3
df1,"pandas.read_csv('df1',index_col=0)",CLUSTER_1,CLUSTER_3
df2,pandas.read_csv('df2'),CLUSTER_1,CLUSTER_3
birth,"random.randint(1900,2000)",CLUSTER_3,CLUSTER_10
death,"random.randint(birth,2000)",CLUSTER_3,CLUSTER_10
data,"pandas.DataFrame(data,columns=data_X_cols)",CLUSTER_5,CLUSTER_1
log,pandas.DataFrame(columns=log_cols),CLUSTER_5,CLUSTER_1
log_entry,"pandas.DataFrame([results],columns=log_cols)",CLUSTER_5,CLUSTER_1
log_entry,"pandas.DataFrame([results],columns=log_cols)",CLUSTER_5,CLUSTER_1
log_entry,"pandas.DataFrame([results1_2],columns=log_cols)",CLUSTER_5,CLUSTER_1
data,"pandas.read_csv(""creditcard.csv"")",CLUSTER_5,CLUSTER_1
prfs,"sklearn.metrics.precision_recall_fscore_support(Y_test,y_pred,labels=[0])",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([
('scaling',StandardScaler()",CLUSTER_5,CLUSTER_1
skfolds,"sklearn.model_selection.StratifiedKFold(n_splits=n,random_state=42)",CLUSTER_5,CLUSTER_1
start,datetime.datetime.now(),CLUSTER_5,CLUSTER_1
end,datetime.datetime.now(),CLUSTER_5,CLUSTER_1
df,pandas.read_csv('training_data_5.csv'),CLUSTER_1,CLUSTER_3
df_val,pandas.read_csv('validation_data_05.csv'),CLUSTER_1,CLUSTER_3
fig1,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig2,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig21,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig3,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig4,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig5,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig6,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig6,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig8,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig9,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig10,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig11,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig12,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig13,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig14,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig15,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig16,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig19,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig20,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig21,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
x_train,"numpy.concatenate([q_tmp,v_tmp,T_tmp],axis=1)",CLUSTER_1,CLUSTER_3
x_val,"numpy.concatenate([q_tmp,v_tmp,T_tmp],axis=1)",CLUSTER_1,CLUSTER_3
df,pandas.read_excel('Class_Bundle_Sample_File.xlsx'),CLUSTER_1,CLUSTER_3
start_time,time.time(),CLUSTER_1,CLUSTER_3
end_time,time.time(),CLUSTER_1,CLUSTER_3
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('gbm-data.csv'),CLUSTER_5,CLUSTER_5
model,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=learning_rate,n_estimators=250,verbose=True,random_state=241)",CLUSTER_5,CLUSTER_5
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=min_loss_index,random_state=241)",CLUSTER_5,CLUSTER_5
test_loss,"sklearn.metrics.log_loss(y_test,y_pred)",CLUSTER_5,CLUSTER_5
"(trainData,testData,trainLabels,testLabels)",sklearn.model_selection.train_test_split(np.array(mnist.data),CLUSTER_5,CLUSTER_10
"(trainData,valData,trainLabels,valLabels)","sklearn.model_selection.train_test_split(trainData,trainLabels,
test_size=0.1,random_state=84)",CLUSTER_5,CLUSTER_10
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_10
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=kVals[i]),CLUSTER_5,CLUSTER_10
mnist,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
imgdata,"numpy.array(image,dtype='float')",CLUSTER_5,CLUSTER_10
i,numpy.argmax(accuracies),CLUSTER_5,CLUSTER_10
dd,"pandas.DataFrame({""Predictions"":predictions,""Actual"":y_test})",CLUSTER_4,CLUSTER_1
data_df,"pandas.read_csv(
data,delimiter="","",skiprows=0,header=None)",CLUSTER_4,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,random_state=1,stratify=y)",CLUSTER_4,CLUSTER_1
dfp,pandas.read_csv('plate_id.csv'),CLUSTER_8,CLUSTER_4
dfs,pandas.read_csv('stock_concentration.csv'),CLUSTER_8,CLUSTER_4
df,pandas.DataFrame(),CLUSTER_0,CLUSTER_3
test,pandas.DataFrame(data=d),CLUSTER_0,CLUSTER_3
test,pandas.DataFrame(data=d),CLUSTER_0,CLUSTER_3
test,"pandas.DataFrame(d_values,columns=d_labels)",CLUSTER_0,CLUSTER_3
df,pandas.DataFrame(),CLUSTER_0,CLUSTER_3
test,"pandas.DataFrame(d_values,columns=d_labels)",CLUSTER_0,CLUSTER_3
orig_data,"pandas.read_csv('ratings_critics_review.csv',encoding='ISO-8859-1')",CLUSTER_0,CLUSTER_3
critic,"pandas.read_csv('Criticreviews.csv',encoding=""ISO-8859-1"")",CLUSTER_0,CLUSTER_3
movie_name,"numpy.repeat(movies_dict[i].replace('_','')",CLUSTER_0,CLUSTER_3
movie_name,"numpy.repeat(movies_dict[i].replace('_','')",CLUSTER_0,CLUSTER_3
words,"re.findall(r""\w+"",orig_data['top_critic'][i])",CLUSTER_0,CLUSTER_3
dtm_nmf,sklearn.preprocessing.Normalizer(copy=False),CLUSTER_5,CLUSTER_5
nmf_model,sklearn.decomposition.NMF(2),CLUSTER_5,CLUSTER_5
df,pandas.DataFrame(mat),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y)",CLUSTER_5,CLUSTER_5
fig1,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_5,CLUSTER_5
X,pandas.get_dummies(X),CLUSTER_5,CLUSTER_5
brain,pandas.read_csv('Resources/brain_categorical.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_5,CLUSTER_5
X_minmax,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
y_minmax,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
clusterer,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=10)",CLUSTER_5,CLUSTER_10
sample_silhouette_values,"sklearn.metrics.silhouette_samples(X,cluster_labels)",CLUSTER_5,CLUSTER_10
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels)",CLUSTER_5,CLUSTER_10
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_5,CLUSTER_10
dataset,"numpy.loadtxt(raw_data,delimiter="","")",CLUSTER_5,CLUSTER_10
data_consistency,"pandas.DataFrame(data_df.groupby(['IndicatorCode','Year'])",CLUSTER_8,CLUSTER_4
data_df,pandas.concat(data),CLUSTER_8,CLUSTER_4
data_df,pandas.concat(data),CLUSTER_8,CLUSTER_4
indicators_df,pandas.read_csv('indicators.csv'),CLUSTER_8,CLUSTER_4
self.theta_,numpy.linalg.inv(X_b.T.dot(X_b),CLUSTER_5,CLUSTER_5
self.theta_,numpy.linalg.pinv(X_b),CLUSTER_5,CLUSTER_5
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
lr_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
sgd,sklearn.linear_model.SGDRegressor(penalty=None),CLUSTER_5,CLUSTER_5
sgd_l2,"sklearn.linear_model.SGDRegressor(penalty=""l2"")",CLUSTER_5,CLUSTER_5
sgd_l1,"sklearn.linear_model.SGDRegressor(penalty=""l1"")",CLUSTER_5,CLUSTER_5
sgd_elastic_net,"sklearn.linear_model.SGDRegressor(penalty=""elasticnet"",l1_ratio=0.15)",CLUSTER_5,CLUSTER_5
housing,sklearn.datasets.fetch_california_housing(),CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(X,columns=housing[""feature_names""])",CLUSTER_5,CLUSTER_5
y_df,"pandas.DataFrame(np.c_[y_test,ann.predict(X_test)",CLUSTER_5,CLUSTER_5
y_df,"pandas.DataFrame(np.c_[y_test,y_pred],columns=[""y_actual"",""y_pred""])",CLUSTER_5,CLUSTER_5
pipe,"sklearn.pipeline.Pipeline([
(""std_scaler"",StandardScaler()",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(estimator=pipe,param_grid=param_grid,
scoring=""neg_mean_squared_error"",n_jobs=-1,cv=5)",CLUSTER_5,CLUSTER_5
grid_search,sklearn.model_selection.GridSearchCV(estimator=RandomForestRegressor(),CLUSTER_5,CLUSTER_5
grid_search,GridSearchCV(estimator=sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
nyc_crime_raw,"pandas.read_csv('NYC_Crime_2014.csv',header=4)",CLUSTER_7,CLUSTER_8
regression,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
regression,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_10
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_10
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_10
idx,numpy.arange(X.shape[0]),CLUSTER_12,CLUSTER_10
X_test,"numpy.arange(0.0,5.0,0.01)",CLUSTER_12,CLUSTER_10
X_test,"numpy.arange(-100.0,100.0,0.01)",CLUSTER_12,CLUSTER_10
y,numpy.array([np.pi*np.sin(X),CLUSTER_12,CLUSTER_10
idx,numpy.where(y==i),CLUSTER_12,CLUSTER_10
X,"numpy.sort(5*rng.rand(80,1)",CLUSTER_12,CLUSTER_10
X,"numpy.sort(200*rng.rand(100,1)",CLUSTER_12,CLUSTER_10
y,numpy.sin(X),CLUSTER_12,CLUSTER_10
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,plot_step)",CLUSTER_12,CLUSTER_10
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=plt.cm.Paired)",CLUSTER_12,CLUSTER_10
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_10
regr_1,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_12,CLUSTER_10
regr_2,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_12,CLUSTER_10
regr_1,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_12,CLUSTER_10
regr_2,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_12,CLUSTER_10
regr_3,sklearn.tree.DecisionTreeRegressor(max_depth=8),CLUSTER_12,CLUSTER_10
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,max_depth=4)",CLUSTER_3,CLUSTER_6
self.feature_indexes,"numpy.zeros(s,dtype=np.int32)",CLUSTER_3,CLUSTER_6
self.zero_fractions,"numpy.zeros(s,dtype=np.float64)",CLUSTER_3,CLUSTER_6
self.one_fractions,"numpy.zeros(s,dtype=np.float64)",CLUSTER_3,CLUSTER_6
self.pweights,"numpy.zeros(s,dtype=np.float64)",CLUSTER_3,CLUSTER_6
phi,numpy.zeros(X.shape[0]+1),CLUSTER_3,CLUSTER_6
x_missing,"numpy.zeros(X.shape[0],dtype=np.bool)",CLUSTER_3,CLUSTER_6
phi,"numpy.zeros((X.shape[0],X.shape[1]+1)",CLUSTER_3,CLUSTER_6
x_missing,"numpy.zeros(X.shape[1],dtype=np.bool)",CLUSTER_3,CLUSTER_6
x,numpy.ones(X.shape[1]),CLUSTER_3,CLUSTER_6
start,time.time(),CLUSTER_3,CLUSTER_6
start,time.time(),CLUSTER_3,CLUSTER_6
start,time.time(),CLUSTER_3,CLUSTER_6
vocab,numpy.array(vectorizer.get_feature_names(),CLUSTER_12,CLUSTER_6
clf,"sklearn.decomposition.NMF(n_components=10,random_state=1)",CLUSTER_12,CLUSTER_6
"U,s,V","sklearn.decomposition.randomized_svd(dtm,10)",CLUSTER_12,CLUSTER_6
response,requests.get(target_url),CLUSTER_9,CLUSTER_2
response,requests.get(first_link),CLUSTER_9,CLUSTER_2
response,requests.get(i),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(arrange_data),CLUSTER_9,CLUSTER_2
temp,pandas.DataFrame(),CLUSTER_4,CLUSTER_1
word_count,pandas.DataFrame({'word':tf_vectorizer.get_feature_names(),CLUSTER_4,CLUSTER_1
topic_dist,pandas.DataFrame(lda_tf.transform(tf),CLUSTER_4,CLUSTER_1
data,"pandas.read_json(file,lines=True)",CLUSTER_4,CLUSTER_1
lda_tf,"sklearn.decomposition.LatentDirichletAllocation(n_components=10,random_state=0)",CLUSTER_4,CLUSTER_1
lda2,"sklearn.decomposition.LatentDirichletAllocation(n_components=80,random_state=0)",CLUSTER_4,CLUSTER_1
lda3,"sklearn.decomposition.LatentDirichletAllocation(n_components=30,random_state=0)",CLUSTER_4,CLUSTER_1
A,"numpy.genfromtxt(CSVFile,delimiter=';')",CLUSTER_1,CLUSTER_9
"f,((ax1,ax2),(ax3,ax4))","matplotlib.pyplot.subplots(2,2,figsize=(15,5)",CLUSTER_1,CLUSTER_9
Games_Log,"pandas.read_csv(""game_log.csv"")",CLUSTER_8,CLUSTER_4
Park_Codes,"pandas.read_csv(""park_codes.csv"")",CLUSTER_8,CLUSTER_4
Person_Code,"pandas.read_csv(""person_codes.csv"")",CLUSTER_8,CLUSTER_4
Team_Codes,"pandas.read_csv(""team_codes.csv"")",CLUSTER_8,CLUSTER_4
Games_Log,"pandas.read_csv(""game_log.csv"")",CLUSTER_8,CLUSTER_4
Park_Codes,"pandas.read_csv(""park_codes.csv"")",CLUSTER_8,CLUSTER_4
Person_Code,"pandas.read_csv(""person_codes.csv"")",CLUSTER_8,CLUSTER_4
Team_Codes,"pandas.read_csv(""team_codes.csv"")",CLUSTER_8,CLUSTER_4
Appearance,"pandas.read_csv(""appearance_type.csv"")",CLUSTER_8,CLUSTER_4
X_train,"numpy.array(train_data['sqft_living'],dtype=pd.Series)",CLUSTER_7,CLUSTER_8
y_train,"numpy.array(train_data['price'],dtype=pd.Series)",CLUSTER_7,CLUSTER_8
X_test,"numpy.array(test_data['sqft_living'],dtype=pd.Series)",CLUSTER_7,CLUSTER_8
y_test,"numpy.array(test_data['price'],dtype=pd.Series)",CLUSTER_7,CLUSTER_8
evaluation,"pandas.DataFrame({'Model':[],
'Details':[],
'RootMeanSquaredError(RMSE)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('kc_house_data.csv'),CLUSTER_7,CLUSTER_8
"train_data,test_data","sklearn.model_selection.train_test_split(df,train_size=0.8,random_state=3)",CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(19,12.5)",CLUSTER_7,CLUSTER_8
Choc,pandas.read_csv('C:\\Users\\cocob\\Downloads\\flavors_of_cacao.csv'),CLUSTER_7,CLUSTER_8
bnb,sklearn.naive_bayes.BernoulliNB(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,target,test_size=0.2,random_state=20)",CLUSTER_7,CLUSTER_8
hotel_page,requests.get(direktlink_hotel),CLUSTER_9,CLUSTER_2
hotel_page,requests.get(directlink_hotel),CLUSTER_9,CLUSTER_2
df_all_countries,pandas.DataFrame(all_countries),CLUSTER_9,CLUSTER_2
df_all_countries_neu,pandas.DataFrame(all_countries_neu),CLUSTER_9,CLUSTER_2
df_all_hotels_country,pandas.DataFrame(all_hotels_country),CLUSTER_9,CLUSTER_2
df_all_hotels_country,pandas.DataFrame(all_hotels_country),CLUSTER_9,CLUSTER_2
df_hoteldetails,pandas.DataFrame(hoteldetails),CLUSTER_9,CLUSTER_2
df_hoteldetails,pandas.DataFrame(hoteldetails),CLUSTER_9,CLUSTER_2
df_hoteldetails,pandas.DataFrame(hoteldetails),CLUSTER_9,CLUSTER_2
df_median,pandas.DataFrame(median),CLUSTER_9,CLUSTER_2
df_dict_bewertung,pandas.DataFrame(bewertung),CLUSTER_9,CLUSTER_2
df_all_hotels_country_total,"pandas.concat([df1,df2],ignore_index=True)",CLUSTER_9,CLUSTER_2
df_details_alle_hotels_total,"pandas.concat([df_1,df_2,df_3],ignore_index=True)",CLUSTER_9,CLUSTER_2
df1,"pandas.read_csv(""Alle_Hotels_pro_Land_Österreich_bis_TC.csv"")",CLUSTER_9,CLUSTER_2
df2,"pandas.read_csv(""Alle_Hotels_pro_Land_Übersicht_Swasiland_bis_Gibraltar.csv"")",CLUSTER_9,CLUSTER_2
df,pandas.read_csv(path),CLUSTER_9,CLUSTER_2
df,pandas.read_csv(path),CLUSTER_9,CLUSTER_2
df,pandas.read_csv(path),CLUSTER_9,CLUSTER_2
df_1,pandas.read_csv('Details_alle_Hotels_total_Teil_1.csv'),CLUSTER_9,CLUSTER_2
df_2,pandas.read_csv('Details_alle_Hotels_total_Teil_2.csv'),CLUSTER_9,CLUSTER_2
df_3,pandas.read_csv('Details_alle_Hotels_total_Teil_3.csv'),CLUSTER_9,CLUSTER_2
df_total,pandas.read_csv(path_complete),CLUSTER_9,CLUSTER_2
WindowWidth,"numpy.array([128,256,512,1024,2048,4096])",CLUSTER_11,CLUSTER_11
startIndex,numpy.array([]),CLUSTER_11,CLUSTER_11
goalIndex,numpy.array([]),CLUSTER_11,CLUSTER_11
t,numpy.array([]),CLUSTER_11,CLUSTER_11
Output,numpy.array(PdArray[0]),CLUSTER_11,CLUSTER_11
TrimArray,numpy.array([]),CLUSTER_11,CLUSTER_11
index,numpy.where(Output[0]==36290413),CLUSTER_11,CLUSTER_11
Output,"numpy.vstack((Output,AddingArray)",CLUSTER_11,CLUSTER_11
Output,"numpy.vstack((Output,PdArray[i+1])",CLUSTER_11,CLUSTER_11
startIndex,"numpy.append(startIndex,CalcSearchIndexFromTime(obj,startTime)",CLUSTER_11,CLUSTER_11
goalIndex,"numpy.append(goalIndex,CalcSearchIndexFromTime(obj,goalTime)",CLUSTER_11,CLUSTER_11
t,"numpy.append(t,array[i].hour*3600*1000+array[i].minute*60*1000+array[i].second*1000+array[i].microsecond*0.001)",CLUSTER_11,CLUSTER_11
TrimArray,"numpy.append(TrimArray,PandasObject.ix[0:])",CLUSTER_11,CLUSTER_11
TrimArray,"numpy.append(TrimArray,PandasObject[i:i+1])",CLUSTER_11,CLUSTER_11
TrimArray,"numpy.append(TrimArray,TimeArray[i+1:i+2])",CLUSTER_11,CLUSTER_11
l,os.listdir(DataPath),CLUSTER_11,CLUSTER_11
data,pandas.read_csv(csv_file),CLUSTER_11,CLUSTER_11
data,"pandas.read_csv(LabelPath+'spa_First_2.csv',encoding='Shift_JIS')",CLUSTER_11,CLUSTER_11
array,"pandas.to_datetime(data['
t=np.array([])",CLUSTER_11,CLUSTER_11
combos,"pandas.DataFrame(cartesian([gres,gpas,[1,2,3,4],[1.]])",CLUSTER_7,CLUSTER_5
combos,"pandas.concat([combos,dummy_ranks],axis=1)",CLUSTER_7,CLUSTER_5
dummy_ranks,"pandas.get_dummies(df['prestige'],prefix='prestige')",CLUSTER_7,CLUSTER_5
dummy_ranks,"pandas.get_dummies(combos['prestige'],prefix='prestige')",CLUSTER_7,CLUSTER_5
df_raw,"pandas.read_csv(""../assets/admissions.csv"")",CLUSTER_7,CLUSTER_5
out,"numpy.zeros([n,len(arrays)",CLUSTER_7,CLUSTER_5
n,numpy.prod([x.sizeforxinarrays]),CLUSTER_7,CLUSTER_5
"out[:,0]","numpy.repeat(arrays[0],m)",CLUSTER_7,CLUSTER_5
gres,numpy.linspace(data['gre'].min(),CLUSTER_7,CLUSTER_5
gpas,numpy.linspace(data['gpa'].min(),CLUSTER_7,CLUSTER_5
lr,sklearn.linear_model.LogisticRegression(random_state=99),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data[train_cols],data['admit'],test_size=0.2,random_state=11)",CLUSTER_7,CLUSTER_5
data,"pandas.concat([data,sex,pclass,embarked],axis=1)",CLUSTER_7,CLUSTER_5
sex,"pandas.get_dummies(data['Sex'],drop_first=True)",CLUSTER_7,CLUSTER_5
pclass,"pandas.get_dummies(data['Pclass'],drop_first=True)",CLUSTER_7,CLUSTER_5
embarked,"pandas.get_dummies(data['Embarked'],drop_first=True)",CLUSTER_7,CLUSTER_5
data,pandas.read_csv('C:/Users/sachi/Downloads/titanic_train.csv'),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30)",CLUSTER_7,CLUSTER_5
model,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n_neighbors),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=11),CLUSTER_7,CLUSTER_5
model,sklearn.svm.SVC(kernel='linear'),CLUSTER_7,CLUSTER_5
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_7,CLUSTER_5
drinks,pandas.read_csv('http://bit.ly/drinksbycountry'),CLUSTER_8,CLUSTER_4
complaints,pandas.read_csv('../data/311-service-requests.csv'),CLUSTER_1,CLUSTER_3
arr,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_3
data,pandas.DataFrame(data),CLUSTER_7,CLUSTER_8
df1,"pandas.DataFrame({'Actual_price':y_test,'Predicted_price':prediction})",CLUSTER_7,CLUSTER_8
result,"pandas.DataFrame(result,columns=['price'])",CLUSTER_7,CLUSTER_8
df,"pandas.concat([new_data,result],axis=1)",CLUSTER_7,CLUSTER_8
data,"pandas.read_csv(r""F:\Data_Sets\house_price.csv"")",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(r""C:\Users\sathishkumar\Downloads\predictivedata\house_price_prediction.csv"")",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=0)",CLUSTER_7,CLUSTER_8
grid_model,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=parameters,cv=2,n_jobs=-1)",CLUSTER_7,CLUSTER_8
test_score,"sklearn.metrics.r2_score(y_test,prediction)",CLUSTER_7,CLUSTER_8
prediction,"pandas.DataFrame(prediction,columns=[""rf_pred""])",CLUSTER_5,CLUSTER_1
x_combine_2,pandas.get_dummies(x_combine),CLUSTER_5,CLUSTER_1
data,"pandas.read_csv(""emission_train.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
test,"pandas.read_csv(""emission_test.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
data,"pandas.read_csv(""emission_train.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
predict,"pandas.read_csv(""emission_predicted.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
predict,"pandas.read_csv(""emission_predicted.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
ridge,sklearn.linear_model.Ridge(alpha=10000),CLUSTER_5,CLUSTER_1
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_1
loans_df,"pandas.get_dummies(loans_df,columns=[""Bank"",""State"",""City""])",CLUSTER_8,CLUSTER_1
loans_df,pandas.read_csv(file_path),CLUSTER_8,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
a,pandas.DataFrame(daily_counts),CLUSTER_7,CLUSTER_3
df_merged,"pandas.concat(list_df,axis=0,ignore_index=True)",CLUSTER_7,CLUSTER_3
df_0th,"pandas.concat(list_0rows,axis=0,ignore_index=True)",CLUSTER_7,CLUSTER_3
a.index,pandas.to_datetime(a.index),CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(15.0*x,10.0*x)",CLUSTER_7,CLUSTER_3
preds_with_true_labels,"numpy.array(list(zip(y_predicted_probs,y_true_labels)",CLUSTER_5,CLUSTER_5
scores_table,"pandas.DataFrame({'f1':f1_scores,
'precision':precisions,
'recall':recalls,
'probability':thresholds})",CLUSTER_5,CLUSTER_5
feat_imp,"pandas.DataFrame({'feat':model_catb_final.feature_names_,'importance':model_catb_final.get_feature_importance()",CLUSTER_5,CLUSTER_5
pred_df,"pandas.DataFrame({'Id':data_test['Id'],cred_default:pd.Series(predicted,dtype='bool')",CLUSTER_5,CLUSTER_5
df,"pandas.concat([df,pd.get_dummies(df[cat_colname],prefix=cat_colname)",CLUSTER_5,CLUSTER_5
data_train,pandas.read_csv('./data/train-kaggle.csv'),CLUSTER_5,CLUSTER_5
data_test,pandas.read_csv('./data/test-kaggle.csv'),CLUSTER_5,CLUSTER_5
figure,"matplotlib.pyplot.figure(figsize=(15,5)",CLUSTER_5,CLUSTER_5
cv,"sklearn.model_selection.KFold(n_splits=3,random_state=21,shuffle=True)",CLUSTER_5,CLUSTER_5
rs,"sklearn.model_selection.RandomizedSearchCV(model_catb,params,scoring='f1',cv=cv,n_jobs=-1)",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
fLat,numpy.radians(data.LocationLat),CLUSTER_4,CLUSTER_11
fLon,numpy.radians(data.LocationLng),CLUSTER_4,CLUSTER_11
sLat,numpy.radians(lat),CLUSTER_4,CLUSTER_11
sLon,numpy.radians(lng),CLUSTER_4,CLUSTER_11
a,numpy.sin(dLat/2.0),CLUSTER_4,CLUSTER_11
data_split,"numpy.array_split(data,partitions)",CLUSTER_4,CLUSTER_11
data_split,"numpy.array_split(data,partitions)",CLUSTER_4,CLUSTER_11
collision_T,"collision_T.assign(distance=pandas.Series(
distance(collision_T,long_event.LocationLat,long_event.LocationLng,idx)",CLUSTER_4,CLUSTER_11
collision,"pandas.concat([collison_W,collision_T])",CLUSTER_4,CLUSTER_11
long_event,"pandas.read_hdf('../../long_events_.h5',key='LN_300')",CLUSTER_4,CLUSTER_11
long_events_,"pandas.read_hdf(filepath,key=key)",CLUSTER_4,CLUSTER_11
In_LN,"pandas.read_hdf('../../long_events.h5',key='LN_300')",CLUSTER_4,CLUSTER_11
data_set,"pandas.read_hdf('../../data_set.h5',key='DS_new')",CLUSTER_4,CLUSTER_11
list_num_factors,"numpy.asarray([1,2,3,4])",CLUSTER_4,CLUSTER_11
list_num_groups,"numpy.asarray([2,3,4,5,6])",CLUSTER_4,CLUSTER_11
elbos2,numpy.asarray(elbos2),CLUSTER_4,CLUSTER_11
linx,numpy.asarray([np.min(_x),CLUSTER_4,CLUSTER_11
z,"numpy.zeros((num_nodes,num_communities)",CLUSTER_4,CLUSTER_11
predictor,"numpy.dot(x,A.T)",CLUSTER_4,CLUSTER_11
z,"numpy.ones((num_nodes,num_groups)",CLUSTER_4,CLUSTER_11
best_idx,"numpy.argmax(model['z'].mean,axis=1)",CLUSTER_4,CLUSTER_11
"m,c","numpy.polyfit(_x,_y,1)",CLUSTER_4,CLUSTER_11
hyperparameters,json.load(fp),CLUSTER_4,CLUSTER_11
kmeans,sklearn.cluster.KMeans(num_communities),CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(ncols=n_pictures,figsize=(4*n_pictures,4)",CLUSTER_6,CLUSTER_11
mean,"numpy.array([0.5,0.5,0.5])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.5,0.5,0.5])",CLUSTER_6,CLUSTER_11
mean,"numpy.array([0.5,0.5,0.5])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.5,0.5,0.5])",CLUSTER_6,CLUSTER_11
self.train_y,"numpy.zeros(n1,dtype=np.uint8)",CLUSTER_6,CLUSTER_11
self.val_y,"numpy.zeros(n2,dtype=np.uint8)",CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
since,time.time(),CLUSTER_6,CLUSTER_11
time_elapsed,time.time(),CLUSTER_6,CLUSTER_11
self.df,pandas.read_csv(train_csv_path_and_file),CLUSTER_6,CLUSTER_11
self.df_test,pandas.read_csv(test_csv_path_and_file),CLUSTER_6,CLUSTER_11
user31_data,"pandas.read_csv(os.path.join(PATH_TO_DATA,
'10users/user0031.csv')",CLUSTER_4,CLUSTER_11
dd1,pandas.read_csv(path+d1),CLUSTER_1,CLUSTER_3
dd2,pandas.read_csv(path+d2),CLUSTER_1,CLUSTER_3
dd3,pandas.read_csv(path+d3),CLUSTER_1,CLUSTER_3
dd,json.loads(f.read(),CLUSTER_1,CLUSTER_3
dd,json.loads(f.read(),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,15)",CLUSTER_1,CLUSTER_3
yy,numpy.array(df6[ii].dropna(),CLUSTER_1,CLUSTER_3
xx,numpy.array(df[ii].dropna(),CLUSTER_1,CLUSTER_3
yy,numpy.array(df5[ii].dropna(),CLUSTER_1,CLUSTER_3
xx1,numpy.array(df2[ii].dropna(),CLUSTER_1,CLUSTER_3
yy1,numpy.array(df5[ii].dropna(),CLUSTER_1,CLUSTER_3
xx1,numpy.array(df2[ii].dropna(),CLUSTER_1,CLUSTER_3
yy,numpy.array(df5[ii].dropna(),CLUSTER_1,CLUSTER_3
xx1,numpy.array(df2[ii].dropna(),CLUSTER_1,CLUSTER_3
yy,numpy.array(df5[ii].dropna(),CLUSTER_1,CLUSTER_3
X,"pandas.concat([full_data[:train_data.shape[0]][cat_columns],full_data[:train_data.shape[0]][con_columns]],axis=1)",CLUSTER_7,CLUSTER_8
sample_submission,pandas.read_csv('sample_submission.csv'),CLUSTER_7,CLUSTER_8
train_data,pandas.read_csv('train_2016_v2.csv'),CLUSTER_7,CLUSTER_8
properties_data,pandas.read_csv('properties_2016.csv'),CLUSTER_7,CLUSTER_8
zillow_dict,"pandas.read_excel('zillow_data_dictionary.xlsx',sheetname=None)",CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
OHE,sklearn.preprocessing.OneHotEncoder(),CLUSTER_7,CLUSTER_8
SSL,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
"full_data[i],_",scipy.stats.boxcox(full_data[i]+20),CLUSTER_7,CLUSTER_8
linear_reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
counts,collections.Counter(snp_counts),CLUSTER_10,CLUSTER_4
X,"numpy.arange(1,17,1)",CLUSTER_1,CLUSTER_3
Y,"numpy.arange(100,1100,100)",CLUSTER_1,CLUSTER_3
X,"numpy.arange(1,17,1)",CLUSTER_1,CLUSTER_3
Y,"numpy.arange(100,1100,100)",CLUSTER_1,CLUSTER_3
z,"numpy.empty(shape=(10,16)",CLUSTER_1,CLUSTER_3
"X,Y","numpy.meshgrid(X,Y)",CLUSTER_1,CLUSTER_3
"X,Y","numpy.meshgrid(X,Y)",CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(data=d),CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(df,dtype='float64')",CLUSTER_5,CLUSTER_1
out,"pandas.Series(result[0:4],index=labels)",CLUSTER_5,CLUSTER_1
df,pandas.read_csv('global_covid_confirmed_daily_updates.csv'),CLUSTER_5,CLUSTER_1
df.index,pandas.to_datetime(df.index),CLUSTER_5,CLUSTER_1
error,"sklearn.metrics.mean_squared_error(test['India'],predictions)",CLUSTER_5,CLUSTER_1
self.pos,"numpy.array([0,0])",CLUSTER_3,CLUSTER_6
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,stratify=y,random_state=random_seed,test_size=0.3)",CLUSTER_5,CLUSTER_10
continuous_pipeline,sklearn.pipeline.Pipeline(steps=pipeline_steps),CLUSTER_5,CLUSTER_10
xgb_clf_pipeline,"sklearn.pipeline.Pipeline(steps=[('features',FeatureUnion(featurisers)",CLUSTER_5,CLUSTER_10
xgb_hist_clf_pipeline,"sklearn.pipeline.Pipeline(steps=[('features',FeatureUnion(featurisers)",CLUSTER_5,CLUSTER_10
lgbm_clf_pipeline,"sklearn.pipeline.Pipeline(steps=[('features',FeatureUnion(featurisers)",CLUSTER_5,CLUSTER_10
left,"random.randint(0,w-new_w)",CLUSTER_3,CLUSTER_6
top,"random.randint(0,h-new_h)",CLUSTER_3,CLUSTER_6
area,random.uniform(*self.scale),CLUSTER_3,CLUSTER_6
"left,top","random.randint(0,w-self.crop_size[0])",CLUSTER_3,CLUSTER_6
"left,top","random.randint(0,x.size[0]-csize[0])",CLUSTER_3,CLUSTER_6
"left,top","random.randint(0,x.size[0]-csize[0])",CLUSTER_3,CLUSTER_6
%timeit-n10a,numpy.array(PIL.Image.open(il.items[0]),CLUSTER_3,CLUSTER_6
a,"numpy.array([250,20,254],dtype='uint8')",CLUSTER_1,CLUSTER_9
a,"numpy.array([250,20,254],dtype='int')",CLUSTER_1,CLUSTER_9
f,numpy.array(e),CLUSTER_1,CLUSTER_9
imgint,"numpy.array(img,dtype='int')",CLUSTER_1,CLUSTER_9
kernel,"numpy.array([[0,0,0],
[0,1,0],
[0,0,0]])",CLUSTER_1,CLUSTER_9
kernel,"numpy.ones((k,k)",CLUSTER_1,CLUSTER_9
c,"numpy.clip(b,0,255)",CLUSTER_1,CLUSTER_9
img2,"numpy.clip(img2,0,255)",CLUSTER_1,CLUSTER_9
all,"numpy.hstack([
cv2.LUT(img,mullut(0.7)",CLUSTER_1,CLUSTER_9
hb,matplotlib.pyplot.hist(b.ravel(),CLUSTER_1,CLUSTER_9
hg,matplotlib.pyplot.hist(g.ravel(),CLUSTER_1,CLUSTER_9
hr,matplotlib.pyplot.hist(r.ravel(),CLUSTER_1,CLUSTER_9
losses,numpy.array(losses),CLUSTER_5,CLUSTER_10
yhat,numpy.array(yhat),CLUSTER_5,CLUSTER_10
"X,Y,coef","sklearn.datasets.make_regression(n_samples=500,n_features=1,bias=3.7,noise=8.5,coef=True)",CLUSTER_5,CLUSTER_10
r,"random.randint(0,len(datain)",CLUSTER_3,CLUSTER_6
y,numpy.array([d['y']fordindatain]),CLUSTER_3,CLUSTER_6
DX_train,numpy.array([d['x']fordinX_train]),CLUSTER_3,CLUSTER_6
DX_test,numpy.array([d['x']fordinX_test]),CLUSTER_3,CLUSTER_6
x1,"numpy.array([transformin([""أرحام"",""""])",CLUSTER_3,CLUSTER_6
x,numpy.zeros(20*512),CLUSTER_3,CLUSTER_6
y,numpy.zeros(4*30),CLUSTER_3,CLUSTER_6
by,numpy.zeros(120),CLUSTER_3,CLUSTER_6
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.05)",CLUSTER_3,CLUSTER_6
univ,pandas.read_csv('University.csv'),CLUSTER_7,CLUSTER_3
univ['Full_Time_Enrollment'],pandas.to_numeric(univ['Full_Time_Enrollment']),CLUSTER_7,CLUSTER_3
univ['Average_Monthly_Search_Volume'],pandas.to_numeric(univ['Average_Monthly_Search_Volume']),CLUSTER_7,CLUSTER_3
univ['Endowment_per_Full_Time_Student'],pandas.to_numeric(univ['Endowment_per_Full_Time_Student']),CLUSTER_7,CLUSTER_3
biggest['Full_Time_Enrollment'],pandas.to_numeric(biggest['Full_Time_Enrollment']),CLUSTER_7,CLUSTER_3
g,"seaborn.FacetGrid(univ,col=""Prof_G_Categorization"",hue=""Prof_G_Categorization"")",CLUSTER_7,CLUSTER_3
ax,"seaborn.boxplot(x=""Prof_G_Categorization"",y=""Full_Time_Enrollment"",data=univ)",CLUSTER_7,CLUSTER_3
g,"seaborn.jointplot(x=""Full_Time_Enrollment"",y=""Endowment_per_Full_Time_Student"",data=thrive,
kind=""reg"",truncate=False,
xlim=(0,60000)",CLUSTER_7,CLUSTER_3
g,"seaborn.jointplot(x=""Full_Time_Enrollment"",y=""Endowment_per_Full_Time_Student"",data=struggle,
kind=""reg"",truncate=False,
xlim=(0,60000)",CLUSTER_7,CLUSTER_3
ax,"seaborn.lmplot(y='Eduation_Score',x='Rank',data=univ,
col='Prof_G_Categorization',hue='Prof_G_Categorization'
)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x=""Vulnerability_Score"",y=""Average_Undergraduate_Tuition_and_Fees"",hue=""Prof_G_Categorization"",data=top_ranked)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x=""Vulnerability_Score"",y=""Full_Time_Enrollment"",hue=""Prof_G_Categorization"",data=biggest)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x=""Vulnerability_Score"",y=""Full_Time_Enrollment"",hue=""Prof_G_Categorization"",data=smallest)",CLUSTER_7,CLUSTER_3
ax2,"seaborn.scatterplot(x=""Average_Monthly_Search_Volume"",y=""Vulnerability_Score"",hue=""Prof_G_Categorization"",data=univ)",CLUSTER_7,CLUSTER_3
axp,"seaborn.scatterplot(y='Eduation_Score',x='Rank',data=univ,hue='Prof_G_Categorization',palette=['blue','orange','green','red'])",CLUSTER_7,CLUSTER_3
L,matplotlib.pyplot.legend(prop={'size':9.5}),CLUSTER_7,CLUSTER_3
all_features[i],numpy.cbrt(all_features[i]),CLUSTER_7,CLUSTER_8
"submission.iloc[:,1]",numpy.floor(np.expm1(y_pred),CLUSTER_7,CLUSTER_8
"df_train[""cc_cons""]","numpy.log1p(df_train[""cc_cons""])",CLUSTER_7,CLUSTER_8
all_features[i],numpy.log1p(all_features[i]),CLUSTER_7,CLUSTER_8
rmse,"numpy.sqrt(-cross_val_score(model,X,train_labels,scoring=""neg_mean_squared_error"",cv=kf)",CLUSTER_7,CLUSTER_8
data,pandas.DataFrame(df),CLUSTER_7,CLUSTER_8
skewness,pandas.DataFrame({'Skew':high_skew}),CLUSTER_7,CLUSTER_8
skewness,pandas.DataFrame({'Skew':high_skew}),CLUSTER_7,CLUSTER_8
skewness,pandas.DataFrame({'Skew':high_skew}),CLUSTER_7,CLUSTER_8
df_labels,pandas.DataFrame(train_labels),CLUSTER_7,CLUSTER_8
data,"pandas.concat([df_train['cc_cons'],df_train['cc_cons_apr']],axis=1)",CLUSTER_7,CLUSTER_8
all_features,"pandas.concat([train_features,test_features])",CLUSTER_7,CLUSTER_8
all_features,pandas.get_dummies(all_features),CLUSTER_7,CLUSTER_8
df_train,pandas.read_csv('./dataset/train.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv('./dataset/test_9K3DBWQ.csv'),CLUSTER_7,CLUSTER_8
all_features,pandas.read_csv('./dataset/all_feature_210719.csv'),CLUSTER_7,CLUSTER_8
all_features,pandas.read_csv('./dataset/all_features_final_210719.csv'),CLUSTER_7,CLUSTER_8
submission,"pandas.read_csv(""./dataset/sample_submission_iwBpW0t.csv"")",CLUSTER_7,CLUSTER_8
df_dict,pandas.read_excel('./dataset/Data_Dictionary.xlsx'),CLUSTER_7,CLUSTER_8
ax,"seaborn.boxplot(data=all_features[numeric],orient=""h"",palette=""Set1"")",CLUSTER_7,CLUSTER_8
ax,"seaborn.boxplot(data=all_features[numeric],orient=""h"",palette=""Set1"")",CLUSTER_7,CLUSTER_8
ax,"seaborn.boxplot(data=all_features[numeric],orient=""h"",palette=""Set1"")",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"fig,axs","matplotlib.pyplot.subplots(ncols=2,nrows=0,figsize=(12,120)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=1200,
max_depth=15,
min_samples_split=5,
min_samples_leaf=5,
max_features=None,
oob_score=True,
random_state=42)",CLUSTER_7,CLUSTER_8
gbr,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=6000,
learning_rate=0.01,
max_depth=4,
max_features='sqrt',
min_samples_leaf=15,
min_samples_split=10,
loss='huber',
random_state=42)",CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_splits=3,random_state=42,shuffle=True)",CLUSTER_7,CLUSTER_8
ridge,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_7,CLUSTER_8
svr,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_7,CLUSTER_8
scaler_x,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
df1,pandas.DataFrame({'A':['a'+str(x),CLUSTER_8,CLUSTER_4
df2,pandas.DataFrame({'A':['a'+str(x),CLUSTER_8,CLUSTER_4
df3,pandas.DataFrame({'D':['d'+str(x),CLUSTER_8,CLUSTER_4
df4,pandas.DataFrame({'D':['d'+str(x),CLUSTER_8,CLUSTER_4
left,pandas.DataFrame({'idx':['i'+str(x),CLUSTER_8,CLUSTER_4
right,pandas.DataFrame({'idx':['i'+str(x),CLUSTER_8,CLUSTER_4
fig,"matplotlib.pyplot.figure(figsize=(14,12)",CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(2,1,figsize=(10,8)",CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_1,CLUSTER_10
time_2_sync,"numpy.empty((npts,npts)",CLUSTER_1,CLUSTER_10
n1,numpy.empty(T),CLUSTER_1,CLUSTER_10
n2,numpy.empty(T),CLUSTER_1,CLUSTER_10
unit_range,"numpy.linspace(0.0,1.0,npts)",CLUSTER_1,CLUSTER_10
unitrange,"numpy.linspace(0,1,npts)",CLUSTER_1,CLUSTER_10
unitrange,"numpy.linspace(0,1,npts)",CLUSTER_1,CLUSTER_10
forest_prediction,numpy.expm1(forest_model.predict(X_test_transformed),CLUSTER_7,CLUSTER_8
alphas,"numpy.logspace(-5,2,100)",CLUSTER_7,CLUSTER_8
alphas,"numpy.logspace(1,2,10)",CLUSTER_7,CLUSTER_8
train_sizes,"numpy.linspace(0.05,1,20)",CLUSTER_7,CLUSTER_8
X_train_real,"numpy.hstack((X_train_сarat_log,X_train_x_log,X_train[:,[7,8,4,5]])",CLUSTER_7,CLUSTER_8
X_test_real,"numpy.hstack((X_test_сarat_log,X_test_x_log,X_test[:,[7,8,4,5]])",CLUSTER_7,CLUSTER_8
X_train_transformed,"numpy.hstack((X_train_real_scaled,X_train_cut_ohe,X_train_color_ohe,X_train_clarity_ohe)",CLUSTER_7,CLUSTER_8
X_test_transformed,"numpy.hstack((X_test_real_scaled,X_test_cut_ohe,X_test_color_ohe,X_test_clarity_ohe)",CLUSTER_7,CLUSTER_8
X_train_transformed_add,"numpy.hstack((X_train_transformed,X_train_additional_scaled)",CLUSTER_7,CLUSTER_8
X_test_transformed_add,"numpy.hstack((X_test_transformed,X_test_additional_scaled)",CLUSTER_7,CLUSTER_8
log_vect,numpy.vectorize(np.log1p),CLUSTER_7,CLUSTER_8
diamonds_df,pandas.read_csv('../../data/diamonds.csv'),CLUSTER_7,CLUSTER_8
ax,"seaborn.distplot(sub_df['price'],kde=False,ax=axes[idx//3,idx%3])",CLUSTER_7,CLUSTER_8
ax,"seaborn.distplot(sub_df['price'],kde=False,ax=axes[idx//3,idx%3])",CLUSTER_7,CLUSTER_8
ax,"seaborn.distplot(sub_df['price'],kde=False,ax=axes[idx//3,idx%3])",CLUSTER_7,CLUSTER_8
ridge_cv,"sklearn.linear_model.RidgeCV(alphas=alphas,scoring=mean_absolute_exp_error,cv=cv)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.Ridge(random_state=4444),CLUSTER_7,CLUSTER_8
model,"sklearn.linear_model.Ridge(alpha=52.140083,random_state=4444)",CLUSTER_7,CLUSTER_8
pure_ridge,"sklearn.linear_model.Ridge(random_state=4444,alpha=0.00001)",CLUSTER_7,CLUSTER_8
poly_ridge,"sklearn.linear_model.Ridge(random_state=4444,alpha=52.140083)",CLUSTER_7,CLUSTER_8
lasso_cv,"sklearn.linear_model.LassoCV(alphas=alphas,cv=cv,random_state=4444)",CLUSTER_7,CLUSTER_8
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,random_state=4444)",CLUSTER_7,CLUSTER_8
forest_model,"sklearn.ensemble.RandomForestRegressor(n_estimators=200,random_state=4444)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=4444,shuffle=True)",CLUSTER_7,CLUSTER_8
"X_train_boosting,X_valid_boosting,y_train_boosting,y_valid_boosting","sklearn.model_selection.train_test_split(
X_train_transformed,y_train_log,test_size=0.3,random_state=4444)",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=4444)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
label_bin,sklearn.preprocessing.LabelBinarizer(),CLUSTER_7,CLUSTER_8
X_train_additional,sklearn.preprocessing.PolynomialFeatures(),CLUSTER_7,CLUSTER_8
X_test_additional,sklearn.preprocessing.PolynomialFeatures(),CLUSTER_7,CLUSTER_8
score_ridge,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(ridge_cv.predict(X_test_transformed)",CLUSTER_7,CLUSTER_8
score_lasso,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(lasso_cv.predict(X_test_transformed)",CLUSTER_7,CLUSTER_8
score_ridge,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(ridge_cv.predict(X_test_transformed_add)",CLUSTER_7,CLUSTER_8
score_lasso,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(lasso_cv.predict(X_test_transformed_add)",CLUSTER_7,CLUSTER_8
score,"sklearn.metrics.mean_absolute_error(y_test,forest_prediction)",CLUSTER_7,CLUSTER_8
score,sklearn.metrics.mean_absolute_error(np.expm1(y_valid_boosting),CLUSTER_7,CLUSTER_8
score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(predictions)",CLUSTER_7,CLUSTER_8
pure_ridge_score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(pure_ridge.predict(X_test_transformed)",CLUSTER_7,CLUSTER_8
poly_ridge_score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(poly_ridge.predict(X_test_transformed_add)",CLUSTER_7,CLUSTER_8
forest_score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(forest_model.predict(X_test_transformed)",CLUSTER_7,CLUSTER_8
boosting_score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(boosting_model.predict(dvalid)",CLUSTER_7,CLUSTER_8
"N_train,val_train,val_test","sklearn.model_selection.learning_curve(model,X,y,train_sizes=train_sizes,cv=5,scoring=mean_absolute_exp_error,random_state=4444)",CLUSTER_7,CLUSTER_8
"val_train,val_test","sklearn.model_selection.validation_curve(model,X_train_transformed_add,y_train_log,'alpha',alphas,cv=cv,scoring=mean_absolute_exp_error)",CLUSTER_7,CLUSTER_8
"val_train,val_test","sklearn.model_selection.validation_curve(model,X_train_transformed,y_train_log,'n_estimators',n_estimators,cv=cv,scoring=mean_absolute_exp_error)",CLUSTER_7,CLUSTER_8
brow,"numpy.array(train.loc[:,""Browser_Used""])",CLUSTER_5,CLUSTER_1
dev,"numpy.array(train.loc[:,""Device_Used""])",CLUSTER_5,CLUSTER_1
label,"numpy.array(train.loc[:,""Is_Response""])",CLUSTER_5,CLUSTER_1
prediction,numpy.array(prediction),CLUSTER_5,CLUSTER_1
loan_id,"numpy.ravel(test.loc[:,['User_ID']])",CLUSTER_5,CLUSTER_1
ans,"pandas.DataFrame(prediction,loan_id,columns=['Is_Response'])",CLUSTER_5,CLUSTER_1
combine,"pandas.concat([train,test])",CLUSTER_5,CLUSTER_1
train,pandas.read_csv('train.csv'),CLUSTER_5,CLUSTER_1
test,pandas.read_csv('test.csv'),CLUSTER_5,CLUSTER_1
test,"pandas.read_csv(""test.csv"")",CLUSTER_5,CLUSTER_1
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data[cols],data[target_col].values,test_size=0.3,random_state=142)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data[most_important_features.index],data[target_col],test_size=0.3,random_state=142)",CLUSTER_5,CLUSTER_5
correlated_indices,numpy.where((corr_matrix>=0.8),CLUSTER_5,CLUSTER_5
sorted_idx,numpy.argsort(feature_importance_values),CLUSTER_5,CLUSTER_5
sorted_idx,numpy.argsort(feature_importance_values),CLUSTER_5,CLUSTER_5
important_feature_series,"pandas.Series(feature_importance_values,index=important_features)",CLUSTER_5,CLUSTER_5
data,"pandas.get_dummies(data,columns=cat_col)",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv(""data.csv"",encoding='unicode_escape')",CLUSTER_5,CLUSTER_5
cv,"5,error_score=sklearn.metrics.make_scorer(accuracy_score)",CLUSTER_5,CLUSTER_5
"""min_samples_leaf"":[2,4,5,6]}],cv","5,error_score=sklearn.metrics.make_scorer(accuracy_score)",CLUSTER_5,CLUSTER_5
best_gdr,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.4,n_estimators=30)",CLUSTER_5,CLUSTER_5
best_tree,"sklearn.ensemble.RandomForestClassifier(max_depth=4,min_samples_leaf=4,n_estimators=50)",CLUSTER_5,CLUSTER_5
gdr_grid_search,sklearn.model_selection.GridSearchCV(GradientBoostingClassifier(),CLUSTER_5,CLUSTER_5
grid_search_tree,sklearn.model_selection.GridSearchCV(RandomForestClassifier(),CLUSTER_5,CLUSTER_5
zs,"numpy.arange(-5,5,0.1)",CLUSTER_7,CLUSTER_8
X,"numpy.concatenate((Xtr,Xte)",CLUSTER_7,CLUSTER_8
"xx,yy","numpy.meshgrid(np.linspace(x_min,x_max,100)",CLUSTER_7,CLUSTER_8
cs2,"matplotlib.pyplot.contour(xx,yy,Z,cmap=ccolor,alpha=.6,axes=ax)",CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
dflog,"pandas.read_csv(""data/01_heights_weights_genders.csv"")",CLUSTER_7,CLUSTER_8
c0,seaborn.color_palette(),CLUSTER_7,CLUSTER_8
c1,seaborn.color_palette(),CLUSTER_7,CLUSTER_8
c2,seaborn.color_palette(),CLUSTER_7,CLUSTER_8
gs,"sklearn.model_selection.GridSearchCV(clf,param_grid=parameters,cv=n_folds)",CLUSTER_7,CLUSTER_8
"Xlr,Xtestlr,ylr,ytestlr","sklearn.model_selection.train_test_split(dflog[['Height','Weight']].values,
(dflog.Gender==""Male"")",CLUSTER_7,CLUSTER_8
"Xtrain,Xtest,ytrain,ytest","sklearn.model_selection.train_test_split(X,y,train_size=train_size)",CLUSTER_7,CLUSTER_8
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
clf,sklearn.linear_model.LogisticRegression(C=c),CLUSTER_7,CLUSTER_8
clf1,sklearn.linear_model.LogisticRegression(C=0.1),CLUSTER_7,CLUSTER_8
clf2,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
clf_2,sklearn.linear_model.LogisticRegression(C=0.001),CLUSTER_7,CLUSTER_8
new_rides,numpy.mean(fiveso),CLUSTER_1,CLUSTER_10
b,"random.randint(2,zm)",CLUSTER_3,CLUSTER_4
r,"random.randint(2,n-2)",CLUSTER_3,CLUSTER_4
k_prywatny,"random.randint(2,p-2)",CLUSTER_3,CLUSTER_4
j,"random.randint(2,p-2)",CLUSTER_3,CLUSTER_4
x,math.floor(math.sqrt(n),CLUSTER_3,CLUSTER_4
spraw,math.floor(math.sqrt(y),CLUSTER_3,CLUSTER_4
ifx,=math.sqrt(n),CLUSTER_3,CLUSTER_4
ifspraw,=math.sqrt(y),CLUSTER_3,CLUSTER_4
statinfo,os.stat(filepath),CLUSTER_2,CLUSTER_7
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_2,CLUSTER_7
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_2,CLUSTER_7
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_2,CLUSTER_7
df,"pandas.DataFrame(data=pitcher_team_cleaned,columns=['Team','Pitcher'])",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame(data=line_odds_cleaned,columns=['Line','Odds'])",CLUSTER_8,CLUSTER_3
df3,"pandas.DataFrame(data=over_unders_cleaned,columns=['Over_Under','Total','Price'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_excel(""Ejemplo.xlsx"")",CLUSTER_7,CLUSTER_9
"normality_plot,stat","scipy.stats.probplot(modelo.resid,plot=plt,rvalue=True)",CLUSTER_7,CLUSTER_9
SW,scipy.stats.shapiro(modelo.resid),CLUSTER_7,CLUSTER_9
orden,random.sample(range(26),CLUSTER_7,CLUSTER_9
df,pandas.read_csv('logreturns.csv'),CLUSTER_8,CLUSTER_4
stats,"requests.get(requestStr,auth=HTTPBasicAuth(userid,password)",CLUSTER_9,CLUSTER_2
stats,"requests.get(requestStr,auth=HTTPBasicAuth(userid,password)",CLUSTER_9,CLUSTER_2
settings,json.load(open('../APIsettings/config.json'),CLUSTER_9,CLUSTER_2
settings,json.load(open('../APIsettings/config.json'),CLUSTER_9,CLUSTER_2
players_df,"pandas.DataFrame(players,columns=ncolumns)",CLUSTER_9,CLUSTER_2
self.feats,collections.defaultdict(int),CLUSTER_10,CLUSTER_4
train,"pandas.merge(train,label,on='ID')",CLUSTER_7,CLUSTER_5
train,pandas.read_csv('./train.csv'),CLUSTER_7,CLUSTER_5
label,"pandas.read_csv('./challenge_output_data_training_file_nba_challenge.csv',sep=';')",CLUSTER_7,CLUSTER_5
test,pandas.read_csv('./test.csv'),CLUSTER_7,CLUSTER_5
test,pandas.read_csv('./test.csv'),CLUSTER_7,CLUSTER_5
feat,numpy.sort(model.feature_importances_),CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_7,CLUSTER_5
"df_train,df_val","sklearn.model_selection.train_test_split(train,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_5
pdat,"numpy.array([parsec['logTe'],parsec['Ksmag'],np.log10(parsec['Zini']/0.02)",CLUSTER_7,CLUSTER_5
model,numpy.array([radii]),CLUSTER_7,CLUSTER_5
model,numpy.array([x]),CLUSTER_7,CLUSTER_5
parage,numpy.asarray(parages.copy(),CLUSTER_7,CLUSTER_5
devs,numpy.asarray(devs),CLUSTER_7,CLUSTER_5
bloopage,numpy.asarray(parages),CLUSTER_7,CLUSTER_5
mp_radii,numpy.asarray(mp_radii),CLUSTER_7,CLUSTER_5
mp_surfden,numpy.asarray(mp_surfden),CLUSTER_7,CLUSTER_5
mp_radii,numpy.asarray(mp_radii),CLUSTER_7,CLUSTER_5
mp_surfden,numpy.asarray(mp_surfden),CLUSTER_7,CLUSTER_5
young_radii,numpy.asarray(young_radii),CLUSTER_7,CLUSTER_5
young_surfden,numpy.asarray(young_surfden),CLUSTER_7,CLUSTER_5
yless_radii,numpy.asarray(yless_radii),CLUSTER_7,CLUSTER_5
yless_surfden,numpy.asarray(yless_surfden),CLUSTER_7,CLUSTER_5
ymed_radii,numpy.asarray(ymed_radii),CLUSTER_7,CLUSTER_5
ymed_surfden,numpy.asarray(ymed_surfden),CLUSTER_7,CLUSTER_5
omed_radii,numpy.asarray(omed_radii),CLUSTER_7,CLUSTER_5
omed_surfden,numpy.asarray(omed_surfden),CLUSTER_7,CLUSTER_5
old_radii,numpy.asarray(old_radii),CLUSTER_7,CLUSTER_5
old_surfden,numpy.asarray(old_surfden),CLUSTER_7,CLUSTER_5
rgb,numpy.where(parsecall['label']==3),CLUSTER_7,CLUSTER_5
clnr,numpy.where((r13['FE_H']>-9999.0),CLUSTER_7,CLUSTER_5
bloop,numpy.where((r13['TEFF']>=4100),CLUSTER_7,CLUSTER_5
young,numpy.where(np.asarray(parages),CLUSTER_7,CLUSTER_5
young,numpy.where(parage[bloop_cut]<=np.log10(0.5*10**9),CLUSTER_7,CLUSTER_5
yless,numpy.where((parage[bloop_cut]>np.log10(0.5*10**9),CLUSTER_7,CLUSTER_5
ymed,numpy.where((parage[bloop_cut]>np.log10(2.0*10**9),CLUSTER_7,CLUSTER_5
omed,numpy.where((parage[bloop_cut]>np.log10(7*10**9),CLUSTER_7,CLUSTER_5
old,numpy.where(parage[bloop_cut]>np.log10(10.5*10**9),CLUSTER_7,CLUSTER_5
fd,numpy.where(bloopr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(bloopr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(bloopr13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(bloopr13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(bloopr13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
metal_poor,numpy.where(bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
m_int1,numpy.where((bloopr13['FE_H']>=-0.87833154),CLUSTER_7,CLUSTER_5
m_int2,numpy.where((bloopr13['FE_H']>=-0.7067915),CLUSTER_7,CLUSTER_5
metal_rich,numpy.where(bloopr13['FE_H']>=-0.5933316),CLUSTER_7,CLUSTER_5
fd,numpy.where(mpr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mpr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(mpr13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(mpr13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(mpr13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mp_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(mint1r13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mint1r13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(mint1r13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(mint1r13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(mint1r13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mint1_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(mint2r13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mint2r13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(mint2r13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(mint2r13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(mint2r13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mint2_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(mrr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mrr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(mrr13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(mrr13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(mrr13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mr_surfden),CLUSTER_7,CLUSTER_5
mp_young,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
mp_yless,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
mp_ymed,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
mp_omed,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
mp_old,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
fd,numpy.where(mpomedr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mpomedr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mp_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13young['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13young['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13young['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13young['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13young['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(young_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13yless['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13yless['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13yless['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13yless['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13yless['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(yless_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13ymed['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13ymed['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13ymed['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13ymed['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13ymed['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(ymed_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13omed['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13omed['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13omed['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13omed['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13omed['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(omed_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13old['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13old['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13old['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13old['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13old['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(old_surfden),CLUSTER_7,CLUSTER_5
cpsi,numpy.cos(np.radians(psi),CLUSTER_7,CLUSTER_5
spsi,numpy.cos(np.radians(psi),CLUSTER_7,CLUSTER_5
lgteff_new,numpy.log10(teff_new),CLUSTER_7,CLUSTER_5
young,np.where(np.asarray(parages)[bloop_cut]<=numpy.log10(0.5*10**9),CLUSTER_7,CLUSTER_5
young,np.where(parage[bloop_cut]<=numpy.log10(0.5*10**9),CLUSTER_7,CLUSTER_5
yless,np.where((parage[bloop_cut]>numpy.log10(0.5*10**9))&(parage[bloop_cut]<=numpy.log10(2.0*10**9),CLUSTER_7,CLUSTER_5
ymed,np.where((parage[bloop_cut]>numpy.log10(2.0*10**9))&(parage[bloop_cut]<=numpy.log10(7*10**9),CLUSTER_7,CLUSTER_5
omed,np.where((parage[bloop_cut]>numpy.log10(7*10**9))&(parage[bloop_cut]<=numpy.log10(10.5*10**9),CLUSTER_7,CLUSTER_5
field_areas,"numpy.multiply(np.pi*np.square(numpy.multiply(field_ang,0.875)",CLUSTER_7,CLUSTER_5
ell_r,numpy.sqrt(np.square(x*cpsi-y*spsi),CLUSTER_7,CLUSTER_5
CMERR,numpy.sqrt((cfeERR),CLUSTER_7,CLUSTER_5
NMERR,numpy.sqrt((nfeERR),CLUSTER_7,CLUSTER_5
ffacERR,numpy.sqrt((x_CERR),CLUSTER_7,CLUSTER_5
radius,"numpy.linspace(0,7,num=1000)",CLUSTER_7,CLUSTER_5
radii_rm30dor,"numpy.delete(radii,0)",CLUSTER_7,CLUSTER_5
surfden_rm30dor,"numpy.delete(surfden,0)",CLUSTER_7,CLUSTER_5
mint1_radii,numpy.delete(np.asarray(mint1_radii),CLUSTER_7,CLUSTER_5
mint1_surfden,numpy.delete(np.asarray(mint1_surfden),CLUSTER_7,CLUSTER_5
mint2_radii,numpy.delete(np.asarray(mint2_radii),CLUSTER_7,CLUSTER_5
mint2_surfden,numpy.delete(np.asarray(mint2_surfden),CLUSTER_7,CLUSTER_5
mr_radii,numpy.delete(np.asarray(mr_radii),CLUSTER_7,CLUSTER_5
mr_surfden,numpy.delete(np.asarray(mr_surfden),CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_7,CLUSTER_5
pca_transform,sklearn.decomposition.PCA(n_components=3),CLUSTER_7,CLUSTER_5
variants_train,"pandas.read_csv('/Users/cory/Desktop/Kaggle/msk/training_variants.txt',index_col=0,verbose=True)",CLUSTER_5,CLUSTER_5
variants_test,"pandas.read_csv('/Users/cory/Desktop/Kaggle/all/stage2_test_variants.csv',index_col=0,verbose=True)",CLUSTER_5,CLUSTER_5
text_train,"pandas.read_table('/Users/cory/Desktop/Kaggle/msk/training_text.txt',sep='\|\|',engine='python',verbose=True)",CLUSTER_5,CLUSTER_5
text_test,"pandas.read_table('/Users/cory/Desktop/Kaggle/all/stage2_test_text.csv',sep='\|\|',engine='python',verbose=True)",CLUSTER_5,CLUSTER_5
text_clf,"sklearn.pipeline.Pipeline([('vect',CountVectorizer()",CLUSTER_5,CLUSTER_5
"X_train,X_test","sklearn.model_selection.train_test_split(Train,train_size=.7)",CLUSTER_5,CLUSTER_5
results,"pandas.DataFrame(columns=['mae','rmse'],index=model_name_list)",CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
results,"pandas.DataFrame(index=X_test.index,columns=['estimate'])",CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
observation,"pandas.Series({'Intercept':1,'mother_edu':4,'failures':0,
'higher_edu':1,'studytime':3,
'father_edu':1,'absences':1})",CLUSTER_7,CLUSTER_8
observation,"pandas.Series({'Intercept':1,'mother_edu':2,'failures':2,
'higher_edu':1,'studytime':2,
'father_edu':3,'absences':4})",CLUSTER_7,CLUSTER_8
observation,"pandas.Series({'Intercept':1,'mother_edu':4,'failures':0,
'higher_edu':1,'studytime':3,
'father_edu':1,'absences':1})",CLUSTER_7,CLUSTER_8
observation,"pandas.Series({'Intercept':1,'mother_edu':4,'failures':0,
'higher_edu':1,'studytime':3,
'father_edu':1,'absences':1})",CLUSTER_7,CLUSTER_8
dummy_df,pandas.get_dummies(category_df),CLUSTER_7,CLUSTER_8
df,pandas.get_dummies(df),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('data/student-mat.csv'),CLUSTER_7,CLUSTER_8
actual,numpy.array(y_test),CLUSTER_7,CLUSTER_8
"results.ix[row[0],'estimate']",numpy.dot(np.array(var_means),CLUSTER_7,CLUSTER_8
mean_loc,"numpy.dot(var_means,test_observation)",CLUSTER_7,CLUSTER_8
mean_loc,"numpy.dot(var_means,new_observation)",CLUSTER_7,CLUSTER_8
mean_loc,"numpy.dot(var_means,test_observation)",CLUSTER_7,CLUSTER_8
mean_loc,"numpy.dot(var_means,new_observation)",CLUSTER_7,CLUSTER_8
mae,numpy.mean(abs(predictions-true),CLUSTER_7,CLUSTER_8
mae,numpy.mean(abs(predictions-y_test),CLUSTER_7,CLUSTER_8
baseline_mae,numpy.mean(abs(baseline-y_test),CLUSTER_7,CLUSTER_8
mae,numpy.mean(abs(errors),CLUSTER_7,CLUSTER_8
rmse,numpy.sqrt(np.mean((predictions-true),CLUSTER_7,CLUSTER_8
rmse,numpy.sqrt(np.mean((predictions-y_test),CLUSTER_7,CLUSTER_8
baseline_rmse,numpy.sqrt(np.mean((baseline-y_test),CLUSTER_7,CLUSTER_8
rmse,numpy.sqrt(np.mean(errors**2),CLUSTER_7,CLUSTER_8
"pm.plot_posterior_predictive_glm(trace,eval","numpy.linspace(var_min,var_max,100)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-5,5,num=500)",CLUSTER_7,CLUSTER_8
baseline,numpy.median(y_train),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,2,1)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,2,2)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,2,1)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,2,2)",CLUSTER_7,CLUSTER_8
g,seaborn.PairGrid(X_train),CLUSTER_7,CLUSTER_8
cmap,"seaborn.cubehelix_palette(light=1,dark=0.1,
hue=0.5,as_cmap=True)",CLUSTER_7,CLUSTER_8
"r,_","scipy.stats.pearsonr(x,y)",CLUSTER_7,CLUSTER_8
model1,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
model2,"sklearn.linear_model.ElasticNet(alpha=1.0,l1_ratio=0.5)",CLUSTER_7,CLUSTER_8
model3,sklearn.ensemble.RandomForestRegressor(n_estimators=50),CLUSTER_7,CLUSTER_8
model4,sklearn.ensemble.ExtraTreesRegressor(n_estimators=50),CLUSTER_7,CLUSTER_8
model6,sklearn.ensemble.GradientBoostingRegressor(n_estimators=20),CLUSTER_7,CLUSTER_8
model5,"sklearn.svm.SVR(kernel='rbf',degree=3,C=1.0,gamma='auto')",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df,labels,
test_size=0.25,
random_state=42)",CLUSTER_7,CLUSTER_8
click,"pandas.read_csv(url_click,sep='\t',thousands='.',decimal=',',header=None)",CLUSTER_12,CLUSTER_3
tokenized_verses,numpy.array(tokenized_verses),CLUSTER_0,CLUSTER_6
Config,"collections.namedtuple('Config',
field_names=""batch_size,n_epochs,lr,gradient_accumulation_steps,n_warmup,max_norm,dropout,log_dir,device"")",CLUSTER_0,CLUSTER_6
temp_GDF_Y['TempGrps'],"pandas.cut(temp_GDF_Y['Monthly_Temp'],temp_quartiles,labels=grp_names)",CLUSTER_11,CLUSTER_8
temp_GDF_Y['TempGrps'],"pandas.cut(temp_GDF_Y['Year'],bins,labels=group_names)",CLUSTER_11,CLUSTER_8
temp_flatDF,"pandas.melt(tempDF,id_vars=['Country','Year'],var_name='Month',value_name=""Monthly_Temp"")",CLUSTER_11,CLUSTER_8
temp_flatDF,"pandas.melt(tempDF,id_vars=['Country','Year'],var_name='Month',value_name=""Monthly_Temp"")",CLUSTER_11,CLUSTER_8
co2_flatDF,"pandas.melt(co2DF,id_vars=['Year'],var_name='Month',value_name=""Monthly_Co2"")",CLUSTER_11,CLUSTER_8
aer_flatDF,"pandas.melt(aerDF,id_vars=['Year'],var_name='Month',value_name=""Monthly_AER"")",CLUSTER_11,CLUSTER_8
tsi_flatDF,"pandas.melt(tsiDF,id_vars=['Year'],var_name='Month',value_name=""Monthly_TSI"")",CLUSTER_11,CLUSTER_8
temp_co2,"pandas.merge(temp_GDF_YM,co2_flatDF,left_on=['Year','Month'],right_on=['Year','Month'],\
how='inner',suffixes=['_temp','_co2'])",CLUSTER_11,CLUSTER_8
temp_2var,"pandas.merge(temp_co2,aer_flatDF,left_on=['Year','Month'],right_on=['Year','Month'],\
how='inner')",CLUSTER_11,CLUSTER_8
temp_3var,"pandas.merge(temp_2var,tsi_flatDF,left_on=['Year','Month'],right_on=['Year','Month'],\
how='inner')",CLUSTER_11,CLUSTER_8
tempDF,"pandas.read_csv(os.path.join(data_path,temp_dataFile)",CLUSTER_11,CLUSTER_8
tempDF,"pandas.read_csv(os.path.join(data_path,temp_dataFile)",CLUSTER_11,CLUSTER_8
co2DF,"pandas.read_csv(os.path.join(data_path,co2_dataFile)",CLUSTER_11,CLUSTER_8
aerDF,"pandas.read_csv(os.path.join(data_path,aer_dataFile)",CLUSTER_11,CLUSTER_8
tsiDF,"pandas.read_csv(os.path.join(data_path,tsi_dataFile)",CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
"fig,axs","matplotlib.pyplot.subplots(1,3,figsize=(20,7)",CLUSTER_11,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(17,13)",CLUSTER_11,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(17,13)",CLUSTER_11,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(17,13)",CLUSTER_11,CLUSTER_8
box_ax,"seaborn.boxplot(x=""TempGrps"",y=""Monthly_Temp"",data=temp_GDF_Y,palette='RdYlBu_r')",CLUSTER_11,CLUSTER_8
distPlt_Temp,"seaborn.distplot(temp_GDF_Y['Monthly_Temp'],color=""

distPlt_Temp.set(xlabel='AvgTemperature(degC)",CLUSTER_11,CLUSTER_8
g,"seaborn.lineplot(x_axis1,y_axis1,color='

ax1=g.axes
ax1.set_xticklabels(ax1.get_xticks()",CLUSTER_11,CLUSTER_8
regPlot_ax,"seaborn.regplot(x=""Year"",y=""Monthly_Temp"",data=temp_GDF_Y,ci=95,x_estimator=np.mean,\
scatter_kws={""color"":""

regPlot_ax.set(xlabel='Years',ylabel='Avg.Temperature(DegC)",CLUSTER_11,CLUSTER_8
simpPlt_ax,"seaborn.relplot('Year','Monthly_Temp',data=temp_GDF_Y,\
hue='Z_SCORE',palette='nipy_spectral',s=85)",CLUSTER_11,CLUSTER_8
"(slope,intercept,r_value,p_value,std_err)","scipy.stats.linregress(x_axis,y_axis)",CLUSTER_11,CLUSTER_8
reslt,"scipy.stats.f_oneway(group1,group2,group3,group4)",CLUSTER_11,CLUSTER_8
X,"numpy.linspace(-2,2,7)",CLUSTER_5,CLUSTER_5
X,"numpy.linspace(-2,2,7)",CLUSTER_5,CLUSTER_5
x_val,"numpy.linspace(-2,2,100)",CLUSTER_5,CLUSTER_5
X,"numpy.linspace(-2,2,7)",CLUSTER_5,CLUSTER_5
x_vals,"numpy.linspace(-2,2,100)",CLUSTER_5,CLUSTER_5
tr,"numpy.linspace(-1.9,1.9,50)",CLUSTER_5,CLUSTER_5
X,"numpy.linspace(-2,2,7)",CLUSTER_5,CLUSTER_5
x_values,"numpy.linspace(-2,2,100)",CLUSTER_5,CLUSTER_5
df,"pandas.get_dummies(df,columns=['gluc','cholesterol'])",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv('data/mlbootcamp5_train.csv',index_col='id',sep=';')",CLUSTER_5,CLUSTER_5
d,"pandas.read_csv('data/mlbootcamp5_train.csv',index_col='id',sep=';')",CLUSTER_5,CLUSTER_5
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(df_c,df['cardio'],train_size=0.7,test_size=0.3,random_state=17)",CLUSTER_5,CLUSTER_5
tree_grid,"sklearn.model_selection.GridSearchCV(tr,tree_params,cv=5,verbose=True)",CLUSTER_5,CLUSTER_5
tr_grid,"sklearn.model_selection.GridSearchCV(tr,t_params,cv=5,verbose=True)",CLUSTER_5,CLUSTER_5
tr,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=3,random_state=17)",CLUSTER_5,CLUSTER_5
trr,"sklearn.tree.DecisionTreeClassifier(max_depth=3,random_state=17)",CLUSTER_5,CLUSTER_5
muts_x_sample_df,pandas.DataFrame(index=set(nonimmune_df.sample_name),CLUSTER_8,CLUSTER_4
coverage_all_total,"pandas.DataFrame(index=all_cells,columns=all_muts)",CLUSTER_8,CLUSTER_4
coverage_all_variant,"pandas.DataFrame(index=all_cells,columns=all_muts)",CLUSTER_8,CLUSTER_4
muts_x_sample_df_ratios,pandas.DataFrame(index=list(muts_x_sample_df_variant.index),CLUSTER_8,CLUSTER_4
muts_x_sample_df_ratios,pandas.DataFrame(index=list(muts_x_sample_df_variant.index),CLUSTER_8,CLUSTER_4
coverage_run_old,pandas.read_csv('/Users/lincoln.harris/Desktop/coverage_run_all.csv'),CLUSTER_8,CLUSTER_4
nonimmune_df,"pandas.read_csv('/Users/lincoln.harris/Desktop/laud_process_new_cells/sample_cell_key.csv',index_col=0)",CLUSTER_8,CLUSTER_4
coverage_run_new,pandas.read_csv('/Users/lincoln.harris/Desktop/laud_process_new_cells/new_nonimmune_cells_cerebra_out_3.21.20.csv'),CLUSTER_8,CLUSTER_4
X,"numpy.concatenate([X,np.apply_along_axis(shift,1,X)",CLUSTER_5,CLUSTER_9
Y,"numpy.concatenate([y,y],axis=0)",CLUSTER_5,CLUSTER_9
X_red,sklearn.manifold.SpectralEmbedding(n_components=2),CLUSTER_5,CLUSTER_9
digits,sklearn.datasets.load_digits(n_class=10),CLUSTER_5,CLUSTER_9
clustering,"sklearn.cluster.KMeans(init='k-means++',n_clusters=10,n_init=10)",CLUSTER_5,CLUSTER_9
array,"numpy.array([1,4,5,8],float)",CLUSTER_8,CLUSTER_3
array,"numpy.array([[1,2,3],[4,5,6]],float)",CLUSTER_8,CLUSTER_3
array,"numpy.array([1,4,5,8],float)",CLUSTER_8,CLUSTER_3
two_D_array,"numpy.array([[1,2,3],[4,5,6]],float)",CLUSTER_8,CLUSTER_3
array_1,"numpy.array([1,2,3],float)",CLUSTER_8,CLUSTER_3
array_2,"numpy.array([5,2,6],float)",CLUSTER_8,CLUSTER_3
array_1,"numpy.array([[1,2],[3,4]],float)",CLUSTER_8,CLUSTER_3
array_2,"numpy.array([[5,6],[7,8]],float)",CLUSTER_8,CLUSTER_3
array_1,"numpy.array([1,2,3],float)",CLUSTER_8,CLUSTER_3
array_2,"numpy.array([[6],[7],[8]],float)",CLUSTER_8,CLUSTER_3
football,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
football,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
football,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
football,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
series,"pandas.Series(['Dave','Cheng-Han','Udacity',42,-1789710578])",CLUSTER_8,CLUSTER_3
series,"pandas.Series(['Dave','Cheng-Han',359,9001],
index=['Instructor','CurriculumManager',
'CourseNumber','PowerLevel'])",CLUSTER_8,CLUSTER_3
series,"pandas.Series(['Dave','Cheng-Han',359,9001],
index=['Instructor','CurriculumManager',
'CourseNumber','PowerLevel'])",CLUSTER_8,CLUSTER_3
cuteness,"pandas.Series([1,2,3,4,5],index=['Cockroach','Fish','MiniPig',
'Puppy','Kitten'])",CLUSTER_8,CLUSTER_3
olympic_medal_counts_df,"pandas.DataFrame({
'countryName':Series(countries)",CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(olympic_medal_counts),CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame({
'country_name':countries,
'gold':Series(gold)",CLUSTER_8,CLUSTER_3
olympic_points_df,"pandas.DataFrame({
'country_name':Series(countries)",CLUSTER_8,CLUSTER_3
points,"numpy.dot(df[['gold','silver','bronze']],[4,2,1])",CLUSTER_8,CLUSTER_3
train,"pandas.concat([train,wind_train],axis=1)",CLUSTER_7,CLUSTER_9
test,"pandas.concat([test,wind_test],axis=1)",CLUSTER_7,CLUSTER_9
wind_train,pandas.get_dummies(train['NumberOfWindows']),CLUSTER_7,CLUSTER_9
wind_test,pandas.get_dummies(test['NumberOfWindows']),CLUSTER_7,CLUSTER_9
train,pandas.read_csv('train_data.csv'),CLUSTER_7,CLUSTER_9
test,pandas.read_csv('test_data.csv'),CLUSTER_7,CLUSTER_9
sub,pandas.read_csv('sample_submission(1),CLUSTER_7,CLUSTER_9
response,requests.get(target_url),CLUSTER_9,CLUSTER_2
response,requests.get(first_link),CLUSTER_9,CLUSTER_2
response,requests.get(link),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(arrange_data),CLUSTER_9,CLUSTER_2
img,numpy.array(img),CLUSTER_9,CLUSTER_2
img,numpy.array(img),CLUSTER_9,CLUSTER_2
x,"numpy.expand_dims(x,axis=0)",CLUSTER_2,CLUSTER_7
n_rows,math.ceil(filters/n_columns),CLUSTER_2,CLUSTER_7
x,"numpy.array([x_green,x_red],dtype=float)",CLUSTER_1,CLUSTER_9
y,"numpy.array([435.833,614.95])",CLUSTER_1,CLUSTER_9
X,"numpy.column_stack((x,x**2)",CLUSTER_1,CLUSTER_9
Hg,numpy.loadtxt(fname),CLUSTER_1,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(3),CLUSTER_1,CLUSTER_9
logT,"numpy.arange(3.5,6.6,0.1)",CLUSTER_1,CLUSTER_10
fit,numpy.poly1d(coe),CLUSTER_1,CLUSTER_10
coe,numpy.polyfit(np.log10(rho),CLUSTER_1,CLUSTER_10
coeff_names,numpy.array(list(regression_coefficients[0].keys(),CLUSTER_12,CLUSTER_5
coeff_samples,numpy.array(coeff_samples),CLUSTER_12,CLUSTER_5
all_kfold_scores,"numpy.array([x_kfold_scores,poly2_kfold_scores,poly4_kfold_scores])",CLUSTER_12,CLUSTER_5
si,numpy.argsort(np.abs(BikeOLSModel.coef_[0]),CLUSTER_12,CLUSTER_5
bottom_percentile,"numpy.percentile(coeff_samples,q=significance_level/2,axis=0)",CLUSTER_12,CLUSTER_5
top_percentile,"numpy.percentile(coeff_samples,q=1-significance_level/2,axis=0)",CLUSTER_12,CLUSTER_5
all_interactions,pandas.DataFrame(poly_model.fit_transform(df),CLUSTER_12,CLUSTER_5
X_kfold_train,"pandas.DataFrame(X_train.values[train_index],columns=X_train.columns)",CLUSTER_12,CLUSTER_5
X_kfold_test,"pandas.DataFrame(X_train.values[test_index],columns=X_train.columns)",CLUSTER_12,CLUSTER_5
higher_orders_train,"pandas.concat(higher_orders_train,axis=1)",CLUSTER_12,CLUSTER_5
higher_orders_test,"pandas.concat(higher_orders_test,axis=1)",CLUSTER_12,CLUSTER_5
poly_train,pandas.concat([dataset_train.reset_index(),CLUSTER_12,CLUSTER_5
poly_test,pandas.concat([dataset_test.reset_index(),CLUSTER_12,CLUSTER_5
BSS_train,pandas.read_csv('data/BSS_train.csv'),CLUSTER_12,CLUSTER_5
BSS_test,pandas.read_csv('data/BSS_test.csv'),CLUSTER_12,CLUSTER_5
train_r2_score,"sklearn.metrics.r2_score(y_train,BikeOLSModel.predict(X_train)",CLUSTER_12,CLUSTER_5
test_r2_score,"sklearn.metrics.r2_score(y_test,BikeOLSModel.predict(X_test)",CLUSTER_12,CLUSTER_5
poly_model,"sklearn.preprocessing.PolynomialFeatures(k,include_bias=False)",CLUSTER_12,CLUSTER_5
poly_model,"sklearn.preprocessing.PolynomialFeatures(2,include_bias=False,interaction_only=True)",CLUSTER_12,CLUSTER_5
BikeRRModel,"sklearn.linear_model.RidgeCV(cv=5,alphas=lambdas,fit_intercept=True)",CLUSTER_12,CLUSTER_5
BikeLRModel,"sklearn.linear_model.LassoCV(cv=5,alphas=lambdas,fit_intercept=True)",CLUSTER_12,CLUSTER_5
BikeOLSModel,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
BikeOLSPolyModel,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
kfold,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
poly2,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
poly4,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
base_model,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
poly2_model,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
poly4_model,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_5
MLR_scores,sklearn.model_selection.cross_val_score(LinearRegression(),CLUSTER_12,CLUSTER_5
k_fold,sklearn.model_selection.KFold(n_splits=5),CLUSTER_12,CLUSTER_5
feat_imp,pandas.Series(alg.get_booster(),CLUSTER_7,CLUSTER_8
train,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
test,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x='Age',y='Purchase',hue='Gender',data=train)",CLUSTER_7,CLUSTER_8
mars_facts,pandas.read_html(facts_url),CLUSTER_11,CLUSTER_12
ff,numpy.array(f),CLUSTER_4,CLUSTER_0
fin,numpy.array(final),CLUSTER_4,CLUSTER_0
cate1,numpy.array(cate),CLUSTER_4,CLUSTER_0
fram1,numpy.array(fram),CLUSTER_4,CLUSTER_0
x,numpy.array(image2),CLUSTER_4,CLUSTER_0
new_new,"numpy.concatenate((data,fin)",CLUSTER_4,CLUSTER_0
max_train1,"numpy.argmax(predictions_train,axis=1)",CLUSTER_4,CLUSTER_0
max_test,"numpy.argmax(predictions_test,axis=1)",CLUSTER_4,CLUSTER_0
image1,"numpy.resize(im[sss],(28,28,3)",CLUSTER_4,CLUSTER_0
av,"numpy.append(fram1,cate1,axis=1)",CLUSTER_4,CLUSTER_0
new_new,"numpy.load(""new.npy"",allow_pickle=True)",CLUSTER_4,CLUSTER_0
ab,pandas.read_csv('test.csv'),CLUSTER_4,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(x,y,test_size=0.2)",CLUSTER_4,CLUSTER_0
accuracy_train,"sklearn.metrics.accuracy_score(ytrain,max_train1)",CLUSTER_4,CLUSTER_0
accuracy_test,"sklearn.metrics.accuracy_score(ytest,max_test)",CLUSTER_4,CLUSTER_0
precision_train,"sklearn.metrics.precision_score(ytrain,max_train1,average='weighted')",CLUSTER_4,CLUSTER_0
precision_test,"sklearn.metrics.precision_score(ytest,max_test,average='weighted')",CLUSTER_4,CLUSTER_0
recall_train,"sklearn.metrics.recall_score(ytrain,max_train1,average='weighted')",CLUSTER_4,CLUSTER_0
recall_test,"sklearn.metrics.recall_score(ytest,max_test,average='weighted')",CLUSTER_4,CLUSTER_0
f1score_train,"sklearn.metrics.f1_score(ytrain,max_train1,average='weighted')",CLUSTER_4,CLUSTER_0
f1score_test,"sklearn.metrics.f1_score(ytest,max_test,average='weighted')",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(ytrain,max_train1)",CLUSTER_4,CLUSTER_0
cm_test,"sklearn.metrics.confusion_matrix(ytest,max_test)",CLUSTER_4,CLUSTER_0
x,"numpy.zeros(4,dtype=np.int)",CLUSTER_3,CLUSTER_6
data,"numpy.zeros(4,dtype={'names':('name','age','weight')",CLUSTER_3,CLUSTER_6
data2,"numpy.zeros(4,dtype=[('name','U10')",CLUSTER_3,CLUSTER_6
df3,pandas.DataFrame(df3),CLUSTER_1,CLUSTER_3
df4,"pandas.DataFrame(df4,index=[1,2,3,4,5])",CLUSTER_1,CLUSTER_3
df,"pandas.read_csv('crime_in_Seoul.csv',engine='python',index_col='관서명',encoding='euc-kr',thousands=',')",CLUSTER_1,CLUSTER_3
dfTuple,"pandas.DataFrame(tupAppend,columns=['CellIdx','Sentence'])",CLUSTER_11,CLUSTER_1
result_pd,"pandas.DataFrame({
""class"":labels,
""precision"":precision,
""recall"":recall,
""f1-score"":fscore,
""support"":support
})",CLUSTER_11,CLUSTER_1
df_3Col,"pandas.merge(dfout,df,how='inner',left_on='CellIdx',right_on='new_id')",CLUSTER_11,CLUSTER_1
dfTrain,"pandas.read_csv(""dfTrain.csv"")",CLUSTER_11,CLUSTER_1
dfTest,"pandas.read_csv(""dfTest.csv"")",CLUSTER_11,CLUSTER_1
dfRemoveStartsWithRow,"pandas.read_csv(""startsWith.csv"")",CLUSTER_11,CLUSTER_1
dfout,pandas.read_csv(fnToSave),CLUSTER_11,CLUSTER_1
text_clf,"sklearn.pipeline.Pipeline([
('vect',CountVectorizer(ngram_range=(1,2)",CLUSTER_11,CLUSTER_1
"precision,recall,fscore,support","sklearn.metrics.precision_recall_fscore_support(dftest.Area,predicted,labels=labels)",CLUSTER_11,CLUSTER_1
data,pandas.read_csv('housing.csv'),CLUSTER_5,CLUSTER_1
score,"sklearn.metrics.r2_score(y_true,y_predict)",CLUSTER_5,CLUSTER_1
scoring_fnc,sklearn.metrics.make_scorer(performance_metric),CLUSTER_5,CLUSTER_1
regressor,sklearn.tree.DecisionTreeRegressor(),CLUSTER_5,CLUSTER_1
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
labels,numpy.array(labels),CLUSTER_6,CLUSTER_11
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
conv_features,numpy.concatenate([[feat]forfeatinconv_features]),CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,50)",CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,50)",CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,50)",CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(30,30)",CLUSTER_6,CLUSTER_11
titanic,"pandas.read_csv(""C:/Users/GOLUVERMA/Desktop/sachin'sppts/titanic.csv"")",CLUSTER_7,CLUSTER_5
t1['sex'],sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_5
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(n_estimators=45),CLUSTER_7,CLUSTER_5
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=40,criterion='entropy')",CLUSTER_7,CLUSTER_5
dt,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_7,CLUSTER_5
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/august_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/september_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/october_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/november_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/december_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/january_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/february_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/march_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/april_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/may_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/june_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/july_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
x,"numpy.arange(0,9,9/50)",CLUSTER_1,CLUSTER_9
result_array,"numpy.array([np.power(x,m)",CLUSTER_1,CLUSTER_9
A,"numpy.empty([0,N])",CLUSTER_1,CLUSTER_9
A,numpy.transpose(A),CLUSTER_1,CLUSTER_9
L_tl,numpy.sqrt(A_tl),CLUSTER_1,CLUSTER_9
A,"numpy.append(A,result_array,axis=0)",CLUSTER_1,CLUSTER_9
L,numpy.eye(len(A),CLUSTER_1,CLUSTER_9
p,numpy.poly1d(np.flip(w),CLUSTER_1,CLUSTER_9
c,"scipy.linalg.solve_triangular(R,b_new,lower=True)",CLUSTER_1,CLUSTER_9
x_w,"scipy.linalg.solve_triangular(R.T,c,lower=False)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
res,"pandas.DataFrame(index=['Daily','Weekly','Monthly','Quarterly','Annually','Hold'])",CLUSTER_4,CLUSTER_11
table,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
table_print,"pandas.DataFrame(table,copy=True)",CLUSTER_4,CLUSTER_11
w_b,"pandas.Series(index=returns.columns,data=1)",CLUSTER_4,CLUSTER_11
benchmark_returns,"pandas.Series(index=used_returns.index,data=np.dot(used_returns.values,w_b.values)",CLUSTER_4,CLUSTER_11
sigmas,"pandas.read_csv(datadir+'sigmas.csv.gz',index_col=0,parse_dates=[0])",CLUSTER_4,CLUSTER_11
returns,"pandas.read_csv(datadir+'returns.csv.gz',index_col=0,parse_dates=[0])",CLUSTER_4,CLUSTER_11
volumes,"pandas.read_csv(datadir+'volumes.csv.gz',index_col=0,parse_dates=[0])",CLUSTER_4,CLUSTER_11
benchmark_returns,"pd.Series(index=used_returns.index,data=numpy.dot(used_returns.values,w_b.values)",CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
Y,numpy.log(Y),CLUSTER_7,CLUSTER_8
df_submission,"pandas.DataFrame({'id':id_test,'price_doc':y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
df_all,"pandas.concat([train,test])",CLUSTER_7,CLUSTER_8
df_all,"pandas.concat([df_numeric,df_obj],axis=1)",CLUSTER_7,CLUSTER_8
df_obj[c],pandas.factorize(df_obj[c]),CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(PATH+""train.csv"",parse_dates=['timestamp'])",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(PATH+""test.csv"",parse_dates=['timestamp'])",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2)",CLUSTER_7,CLUSTER_8
reg,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.GradientBoostingRegressor(loss='quantile',alpha=alpha,
n_estimators=10,max_depth=3,
learning_rate=.1,min_samples_leaf=9,
min_samples_split=9)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
clf,"sklearn.neural_network.MLPRegressor(solver='lbfgs',alpha=1e-5,
hidden_layer_sizes=(7,)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=0)",CLUSTER_7,CLUSTER_8
X_scaled,pandas.DataFrame(self.scaler.transform(X[self.columns]),CLUSTER_5,CLUSTER_1
summary_table,"pandas.DataFrame(columns=['Featurename'],data=feature_name)",CLUSTER_5,CLUSTER_1
data_preprocessed,pandas.read_csv('Absenteeism_preprocessed.csv'),CLUSTER_5,CLUSTER_1
targets,numpy.where(data_preprocessed['AbsenteeismTimeinHours']>data_preprocessed['AbsenteeismTimeinHours'].median(),CLUSTER_5,CLUSTER_1
self.mean_,numpy.mean(X[self.columns]),CLUSTER_5,CLUSTER_1
summary_table['coefficient'],numpy.transpose(reg.coef_),CLUSTER_5,CLUSTER_1
self.var_,numpy.var(X[self.columns]),CLUSTER_5,CLUSTER_1
summary_table['oddratio'],numpy.exp(summary_table.coefficient),CLUSTER_5,CLUSTER_1
self.scaler,"sklearn.preprocessing.StandardScaler(copy,with_mean,with_std)",CLUSTER_5,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_inputs,targets,train_size=0.8,random_state=20)",CLUSTER_5,CLUSTER_1
reg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
train_store,"pandas.merge(train,store,how='left',on='Store')",CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(""./data/train.csv"",parse_dates=True,index_col='Date')",CLUSTER_7,CLUSTER_8
store,"pandas.read_csv(""./data/store.csv"")",CLUSTER_7,CLUSTER_8
"fig,axis","matplotlib.pyplot.subplots(1,1,figsize=(12,6)",CLUSTER_7,CLUSTER_8
g,"seaborn.FacetGrid(train_store.groupby(['DayOfWeek','StoreType','Month'],as_index=False)",CLUSTER_7,CLUSTER_8
g,"seaborn.FacetGrid(train_store.groupby(['Promo','Promo2','DayOfWeek'],as_index=False)",CLUSTER_7,CLUSTER_8
sub_train,pandas.DataFrame(app_train['WEEKDAY_APPR_PROCESS_START']),CLUSTER_8,CLUSTER_11
sub_train,pandas.DataFrame(app_train['WEEKDAY_APPR_PROCESS_START']),CLUSTER_8,CLUSTER_11
sub_train,pandas.get_dummies(sub_train),CLUSTER_8,CLUSTER_11
app_train,pandas.read_csv(f_app_train),CLUSTER_8,CLUSTER_11
gamma,"numpy.asarray([1.0,2.0,3.0])",CLUSTER_1,CLUSTER_10
beta,"numpy.asarray([11.0,12.0,13.0])",CLUSTER_1,CLUSTER_10
beta,numpy.zeros(D3),CLUSTER_1,CLUSTER_10
gamma,numpy.ones(D3),CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
weight_scales,"numpy.logspace(-4,0,num=20)",CLUSTER_1,CLUSTER_10
fig1,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_2,CLUSTER_7
fig2,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_2,CLUSTER_7
fig3,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_2,CLUSTER_7
fig4,"matplotlib.pyplot.figure(figsize=(12,12/5*2)",CLUSTER_2,CLUSTER_7
fig5,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_2,CLUSTER_7
fig6,"matplotlib.pyplot.figure(figsize=(6,3)",CLUSTER_2,CLUSTER_7
fig7,"matplotlib.pyplot.figure(figsize=(6,3)",CLUSTER_2,CLUSTER_7
fig8,"matplotlib.pyplot.figure(figsize=(2.5*cols,2.5*rows)",CLUSTER_2,CLUSTER_7
predicted_label,numpy.argmax(prob),CLUSTER_2,CLUSTER_7
predicted_label,numpy.argmax(prob),CLUSTER_2,CLUSTER_7
iftest_labels[i],=numpy.argmax(predictions[i]),CLUSTER_2,CLUSTER_7
iftest_labels[i]!,numpy.argmax(predictions[i]),CLUSTER_2,CLUSTER_7
glb,"pandas.concat([glb,us],ignore_index=True)",CLUSTER_8,CLUSTER_4
glb,"pandas.concat([tmp,tmp_num],axis=1)",CLUSTER_8,CLUSTER_4
glb,pandas.read_csv('compustat_10_glb.csv'),CLUSTER_8,CLUSTER_4
us,pandas.read_csv('compustat_10_us.csv'),CLUSTER_8,CLUSTER_4
curcd,pandas.read_csv('compustat_curcd_10.csv'),CLUSTER_8,CLUSTER_4
currtr,pandas.read_csv('compustat_currtr_10.csv'),CLUSTER_8,CLUSTER_4
glb,pandas.read_csv('compustat_10_glbus.csv'),CLUSTER_8,CLUSTER_4
curr,pandas.read_csv('exchange_rate_10.csv'),CLUSTER_8,CLUSTER_4
dose,"numpy.array([-.86,-.3,-.05,.73])",CLUSTER_1,CLUSTER_10
deaths,"numpy.array([0,1,3,5])",CLUSTER_1,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(2,5,figsize=(14,6)",CLUSTER_1,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(1,4,figsize=(12,6)",CLUSTER_1,CLUSTER_10
X_data,"numpy.concatenate((X_pos,X_neg)",CLUSTER_4,CLUSTER_7
Y_data,"numpy.concatenate((Y_pos,Y_neg)",CLUSTER_4,CLUSTER_7
Y_pos,"numpy.ones((num_data,1)",CLUSTER_4,CLUSTER_7
Y_neg,"numpy.ones((num_data,1)",CLUSTER_4,CLUSTER_7
plot_index,"numpy.argsort(predictionsoutput[:,0])",CLUSTER_4,CLUSTER_7
X_pos,"numpy.expand_dims(X_pos,axis=2)",CLUSTER_4,CLUSTER_7
X,"numpy.expand_dims(test['inputs'][plot_index[ii]],axis=0)",CLUSTER_4,CLUSTER_7
starttime,time.time(),CLUSTER_4,CLUSTER_7
starttime,time.time(),CLUSTER_4,CLUSTER_7
train,"pandas.read_csv('hw11t4v0_train.txt',sep='\t')",CLUSTER_5,CLUSTER_5
target,pandas.read_csv('hw11t4v0_target.txt'),CLUSTER_5,CLUSTER_5
test,"pandas.read_csv('hw11t4v0_test.txt',sep='\t')",CLUSTER_5,CLUSTER_5
target_test,pandas.read_csv('hw11t4v0_target_test.txt'),CLUSTER_5,CLUSTER_5
concatenated_data,"numpy.concatenate([train,test],axis=0)",CLUSTER_5,CLUSTER_5
error+,numpy.mean((predictions-target_test),CLUSTER_5,CLUSTER_5
attendance['key_guess'],"numpy.where(attendance['school_name']==school,fixed_guess,attendance['key_guess'])",CLUSTER_8,CLUSTER_11
attendance,pandas.DataFrame(),CLUSTER_8,CLUSTER_11
keys,pandas.read_csv('../data/intermediary/scorecard/names/broward.csv'),CLUSTER_8,CLUSTER_11
raw_attendance,pandas.read_csv('../data/input/foia/broward.csv'),CLUSTER_8,CLUSTER_11
DEFAULT_BEGIN,"datetime.datetime(1970,1,1)",CLUSTER_10,CLUSTER_12
DEFAULT_BEGIN,"datetime.datetime(1970,1,1)",CLUSTER_10,CLUSTER_12
self.DEFAULT_BEGIN,"datetime.datetime(1980,1,1)",CLUSTER_10,CLUSTER_12
DEFAULT_BEGIN,"datetime.datetime(1970,1,1)",CLUSTER_10,CLUSTER_12
interval.begin,"datetime.datetime(2016,1,1)",CLUSTER_10,CLUSTER_12
DEFAULT_BEGIN,"datetime.datetime(1970,1,1)",CLUSTER_10,CLUSTER_12
DEFAULT_END,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
end,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
TimeInterval,"collections.namedtuple('TimeInterval',['begin','end'])",CLUSTER_10,CLUSTER_12
self.start,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
running_time,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
imgs,"numpy.array([
image.img_to_array(image.load_img(img_path,target_size=(224,224)",CLUSTER_4,CLUSTER_11
sents,"numpy.array([
sent2ixs(""agroupofmenarestanding."".split("""")",CLUSTER_4,CLUSTER_11
vfs,numpy.array([_visual_features[image_index]]*len(sents),CLUSTER_4,CLUSTER_11
logprobs,numpy.log(prs),CLUSTER_4,CLUSTER_11
ix2word,"numpy.load('preprocessed_flickr30k/ix2word.npy',allow_pickle=True)",CLUSTER_4,CLUSTER_11
df,"pandas.DataFrame(
np.ones([len(img_paths)",CLUSTER_4,CLUSTER_11
ids,numpy.arange(labels.shape[0]),CLUSTER_2,CLUSTER_7
shfl1,numpy.arange(X_data.shape[0]),CLUSTER_2,CLUSTER_7
shfl2,numpy.arange(X_data.shape[0]),CLUSTER_2,CLUSTER_7
data_choice,numpy.concatenate([labels_dic[label]forlabelinlabels_dic.keys(),CLUSTER_2,CLUSTER_7
mean_image,numpy.mean(X_train),CLUSTER_2,CLUSTER_7
fig,"matplotlib.pyplot.figure(figsize=(10,5,)",CLUSTER_2,CLUSTER_7
data,pandas.read_csv('irrigation_machine.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=4)",CLUSTER_5,CLUSTER_5
service_key,json.load(sk_json),CLUSTER_10,CLUSTER_12
j,json.loads(res),CLUSTER_10,CLUSTER_12
j,json.loads(res),CLUSTER_10,CLUSTER_12
j,json.loads(res),CLUSTER_10,CLUSTER_12
tmFc,"time.strftime('%Y%m%d',time.localtime(time.time()",CLUSTER_10,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
music,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
X,pandas.DataFrame(music.loudness),CLUSTER_5,CLUSTER_9
X,pandas.DataFrame(music.loudness),CLUSTER_5,CLUSTER_9
X,pandas.DataFrame(music.duration),CLUSTER_5,CLUSTER_9
X,pandas.DataFrame(music.duration),CLUSTER_5,CLUSTER_9
T,"numpy.arange(0,50,0.1)",CLUSTER_5,CLUSTER_9
T,"numpy.arange(0,50,0.1)",CLUSTER_5,CLUSTER_9
T,"numpy.arange(0,50,0.1)",CLUSTER_5,CLUSTER_9
T,"numpy.arange(0,50,0.1)",CLUSTER_5,CLUSTER_9
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=10),CLUSTER_5,CLUSTER_9
knn_w,"sklearn.neighbors.KNeighborsRegressor(n_neighbors=10,weights='distance')",CLUSTER_5,CLUSTER_9
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=10),CLUSTER_5,CLUSTER_9
knn_w,"sklearn.neighbors.KNeighborsRegressor(n_neighbors=10,weights='distance')",CLUSTER_5,CLUSTER_9
score,"sklearn.model_selection.cross_val_score(knn,X,Y,cv=5)",CLUSTER_5,CLUSTER_9
score_w,"sklearn.model_selection.cross_val_score(knn_w,X,Y,cv=5)",CLUSTER_5,CLUSTER_9
score,"sklearn.model_selection.cross_val_score(knn,X,Y,cv=5)",CLUSTER_5,CLUSTER_9
score_w,"sklearn.model_selection.cross_val_score(knn_w,X,Y,cv=5)",CLUSTER_5,CLUSTER_9
range_list,"numpy.arange(0,50,5)",CLUSTER_4,CLUSTER_0
train_filenames_tmp,numpy.array(os.listdir(),CLUSTER_4,CLUSTER_0
test_filenames_tmp,numpy.array(os.listdir(),CLUSTER_4,CLUSTER_0
x_train,"numpy.zeros((n_train,image_width,image_height,channels)",CLUSTER_4,CLUSTER_0
y_train,"numpy.zeros((n_train,1)",CLUSTER_4,CLUSTER_0
x_test,"numpy.zeros((n_test,image_width,image_height,channels)",CLUSTER_4,CLUSTER_0
y_test,"numpy.zeros((n_test,1)",CLUSTER_4,CLUSTER_0
max_voting_accuracies,"numpy.zeros((51,1)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.zeros((10000,5)",CLUSTER_4,CLUSTER_0
average_accuracies,"numpy.zeros((51,1)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.zeros((10000,5)",CLUSTER_4,CLUSTER_0
basic_stacking_accuracies,"numpy.zeros((51,1)",CLUSTER_4,CLUSTER_0
pred,"numpy.argmax(pred,axis=1)",CLUSTER_4,CLUSTER_0
index,"numpy.argmax(pred_part,axis=2)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.argmax(pred_new,axis=2)",CLUSTER_4,CLUSTER_0
index,"numpy.argmax(pred_part,axis=2)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.argmax(pred_new,axis=2)",CLUSTER_4,CLUSTER_0
test_accuracy,"numpy.sum(np.equal(pred,y_test)",CLUSTER_4,CLUSTER_0
max_voting_accuracies[k],"numpy.sum(np.equal(pred_new,y_test)",CLUSTER_4,CLUSTER_0
max_voting_accuracy,"numpy.sum(np.equal(pred_new,y_test)",CLUSTER_4,CLUSTER_0
pred,"numpy.expand_dims(pred,axis=1)",CLUSTER_4,CLUSTER_0
pred,"numpy.expand_dims(pred,axis=1)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.expand_dims(pred_new,axis=1)",CLUSTER_4,CLUSTER_0
pred,"numpy.expand_dims(pred,axis=1)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.expand_dims(pred_new,axis=1)",CLUSTER_4,CLUSTER_0
Q,"numpy.zeros((NS,NA)",CLUSTER_2,CLUSTER_7
window,numpy.ones(int(window_size),CLUSTER_2,CLUSTER_7
window,numpy.ones(int(window_size),CLUSTER_2,CLUSTER_7
NS,numpy.prod(o_cells),CLUSTER_2,CLUSTER_7
energy,pandas.read_csv(data_dir+'energydata_complete.csv'),CLUSTER_7,CLUSTER_3
prediction_df,"pandas.DataFrame({""prediction"":prediction})",CLUSTER_5,CLUSTER_5
prediction_df_1,"pandas.DataFrame({""prediction"":prediction})",CLUSTER_5,CLUSTER_5
prediction_df,"pandas.DataFrame({""prediction"":prediction})",CLUSTER_5,CLUSTER_5
prediction_df_1,"pandas.DataFrame({""prediction"":prediction})",CLUSTER_5,CLUSTER_5
training_result,"pandas.concat([prediction_df,target],axis=1)",CLUSTER_5,CLUSTER_5
training_result,"pandas.concat([prediction_df_1,actual_class_test],axis=1)",CLUSTER_5,CLUSTER_5
training_result,"pandas.concat([prediction_df,target],axis=1)",CLUSTER_5,CLUSTER_5
training_result,"pandas.concat([prediction_df_1,actual_class_test],axis=1)",CLUSTER_5,CLUSTER_5
users,"pandas.read_csv(""data/users.csv"")",CLUSTER_5,CLUSTER_5
survey,pandas.read_csv('data/survey.csv'),CLUSTER_5,CLUSTER_5
iris_df,"pandas.read_csv(url,names=(""sepallength"",""sepalwidth"",""petallength"",""petalwidth"",""class"")",CLUSTER_5,CLUSTER_5
data_R2,"pandas.read_csv(""./data/dataR2.csv"")",CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_5,CLUSTER_5
clf2,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_5,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_5,CLUSTER_5
clf2,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_5,CLUSTER_5
weather_data,pandas.DataFrame(weather_dict),CLUSTER_9,CLUSTER_2
response,requests.get(query_url+city),CLUSTER_9,CLUSTER_2
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
t,time.time(),CLUSTER_4,CLUSTER_0
elapsed_time_train,time.time(),CLUSTER_4,CLUSTER_0
t,time.time(),CLUSTER_4,CLUSTER_0
elapsed_time_train,time.time(),CLUSTER_4,CLUSTER_0
t,time.time(),CLUSTER_4,CLUSTER_0
elapsed_time_train,time.time(),CLUSTER_4,CLUSTER_0
y_autoenc,"numpy.dot(int_rep,B_auto)",CLUSTER_4,CLUSTER_0
y,"numpy.dot(x_train,B_t)",CLUSTER_4,CLUSTER_0
B_t,numpy.transpose(B_auto),CLUSTER_4,CLUSTER_0
x_train2,"numpy.tanh((np.dot(x_train,B_t)",CLUSTER_4,CLUSTER_0
x_test2,"numpy.tanh((np.dot(x_test,B_t)",CLUSTER_4,CLUSTER_0
mask,"numpy.array(proj_edge_dist_map<dist_to_edge,dtype='uint8')",CLUSTER_1,CLUSTER_10
mask,"numpy.array(proj_edge_dist_map<dist_to_edge,dtype='uint8')",CLUSTER_1,CLUSTER_10
proj_edge_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_edge_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_vert_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_vert_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
distances,numpy.zeros(len(edge_list),CLUSTER_1,CLUSTER_10
eucl_edge_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_edge_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_vert_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_vert_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
distances,numpy.zeros(len(edge_list),CLUSTER_1,CLUSTER_10
distances,numpy.zeros((len(edge_list),CLUSTER_1,CLUSTER_10
proj_edge_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_edge_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_vert_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_vert_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
distances,numpy.zeros(len(edge_list),CLUSTER_1,CLUSTER_10
eucl_edge_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_edge_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_vert_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_vert_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
distances,numpy.zeros(len(edge_list),CLUSTER_1,CLUSTER_10
distances,numpy.zeros((len(edge_list),CLUSTER_1,CLUSTER_10
r,numpy.sqrt((x1-x2),CLUSTER_1,CLUSTER_10
M,"numpy.float32([[1,0,150],[0,1,50]])",CLUSTER_1,CLUSTER_10
M,"numpy.float32([[1,0,100],[0,1,100]])",CLUSTER_1,CLUSTER_10
ref_nodes,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\src\Resources\default\ref_nodes.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
trial_1_data,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\data\processed\2019-01-16_10-45-35\trial_1\position_log_files\pos_log_file.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
dat0,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\Data\processed\2019-06-20_15-23-03\trial_26\position_log_files\pos_log_file_0.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
dat1,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\Data\processed\2019-06-20_15-23-03\trial_26\position_log_files\pos_log_file_1.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
top_nodes,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\src\Resources\default\node_pos_top.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
bot_nodes,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\src\Resources\default\node_pos_bottom.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
eucl_edge_dist_map,numpy.load('cache/eucl_edge_dist_map_top.npy'),CLUSTER_1,CLUSTER_10
eucl_edge_id_map,numpy.load('cache/eucl_edge_id_map_top.npy'),CLUSTER_1,CLUSTER_10
eucl_vert_dist_map,numpy.load('cache/eucl_vert_dist_map_top.npy'),CLUSTER_1,CLUSTER_10
eucl_vert_id_map,numpy.load('cache/eucl_vert_id_map_top.npy'),CLUSTER_1,CLUSTER_10
proj_edge_id_map,numpy.load('cache/proj_edge_id_map_top.npy'),CLUSTER_1,CLUSTER_10
proj_edge_dist_map,numpy.load('cache/proj_edge_dist_map_top.npy'),CLUSTER_1,CLUSTER_10
proj_vert_dist_map,numpy.load('cache/proj_vert_dist_map_top.npy'),CLUSTER_1,CLUSTER_10
proj_vert_id_map,numpy.load('cache/proj_vert_id_map_top.npy'),CLUSTER_1,CLUSTER_10
eucl_edge_dist_map,numpy.load('cache/eucl_edge_dist_map_bot.npy'),CLUSTER_1,CLUSTER_10
eucl_edge_id_map,numpy.load('cache/eucl_edge_id_map_bot.npy'),CLUSTER_1,CLUSTER_10
eucl_vert_dist_map,numpy.load('cache/eucl_vert_dist_map_bot.npy'),CLUSTER_1,CLUSTER_10
eucl_vert_id_map,numpy.load('cache/eucl_vert_id_map_bot.npy'),CLUSTER_1,CLUSTER_10
proj_edge_id_map,numpy.load('cache/proj_edge_id_map_bot.npy'),CLUSTER_1,CLUSTER_10
proj_edge_dist_map,numpy.load('cache/proj_edge_dist_map_bot.npy'),CLUSTER_1,CLUSTER_10
proj_vert_dist_map,numpy.load('cache/proj_vert_dist_map_bot.npy'),CLUSTER_1,CLUSTER_10
proj_vert_id_map,numpy.load('cache/proj_vert_id_map_bot.npy'),CLUSTER_1,CLUSTER_10
dist,math.sqrt(dx*dx+dy*dy),CLUSTER_1,CLUSTER_10
im,matplotlib.pyplot.imshow(image),CLUSTER_1,CLUSTER_10
im,matplotlib.pyplot.imshow(image),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(40,24)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(2,5,figsize=(40,24)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(40,24)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(2,5,figsize=(40,24)",CLUSTER_1,CLUSTER_10
dataset,pandas.read_csv('Data.csv'),CLUSTER_5,CLUSTER_5
labelencoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
labelencoder_y,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[0]),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
distmatrix,"scipy.spatial.distance_matrix(assigned_points_coords,unassigned_points_coords)",CLUSTER_0,CLUSTER_9
full_d_matrix,"scipy.spatial.distance_matrix(all_points_coords,all_points_coords)",CLUSTER_0,CLUSTER_9
dtest,"scipy.spatial.distance_matrix([a1,a2,a3,a4],[a2,a4])",CLUSTER_0,CLUSTER_9
X_toy,"numpy.array([[-1,-1],[-2,-1],[-3,-2],[1,1],[2,1],[3,2]])",CLUSTER_0,CLUSTER_9
a1,numpy.asarray(s.iloc[[0]]),CLUSTER_0,CLUSTER_9
df_BNG_90['label'],numpy.full((len(df_BNG_90),CLUSTER_0,CLUSTER_9
cols_for_min_2,"numpy.full((1,len(assigned_points)",CLUSTER_0,CLUSTER_9
min_dists,"numpy.full((1,len(assigned_points)",CLUSTER_0,CLUSTER_9
cols_for_min_2,"numpy.full((1,len(assigned_points)",CLUSTER_0,CLUSTER_9
min_dists,"numpy.full((1,len(assigned_points)",CLUSTER_0,CLUSTER_9
a,"numpy.argmax(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmax(dtest[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmin(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmin(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmin(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmin(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
A_i_arr_view,"numpy.around(A_i_arr,3)",CLUSTER_0,CLUSTER_9
n_i_arr,"numpy.add(np.multiply(A_i_arr,3)",CLUSTER_0,CLUSTER_9
n_i_arr_toy,"numpy.add(np.multiply(A_i_arr_toy,3)",CLUSTER_0,CLUSTER_9
threshold_10,"numpy.percentile(df_BNG['Ai'],10)",CLUSTER_0,CLUSTER_9
j_to_i,math.exp(-gamma*dist_matrix[i][j]),CLUSTER_0,CLUSTER_9
indices_df,pandas.DataFrame(indices),CLUSTER_0,CLUSTER_9
distmatrix_df,pandas.DataFrame(distmatrix),CLUSTER_0,CLUSTER_9
full_d_matrix_df,pandas.DataFrame(full_d_matrix),CLUSTER_0,CLUSTER_9
s,"pandas.DataFrame(np.random.randn(8,4)",CLUSTER_0,CLUSTER_9
json_dic_data,json.load(json_data),CLUSTER_0,CLUSTER_9
nbrs,"sklearn.neighbors.NearestNeighbors(n_neighbors=2001,algorithm='auto')",CLUSTER_0,CLUSTER_9
nbrs_toy,"sklearn.neighbors.NearestNeighbors(n_neighbors=4,algorithm='auto')",CLUSTER_0,CLUSTER_9
tr_df,pandas.read_pickle('/home/baode/huangzc/tencent/data/train_preliminary/3shuru.pkl'),CLUSTER_4,CLUSTER_0
ts_df,pandas.read_pickle('/home/baode/huangzc/tencent/data/test/3shuru.pkl'),CLUSTER_4,CLUSTER_0
wv_matrix,"numpy.concatenate([row,wv_matrix],axis=0)",CLUSTER_4,CLUSTER_0
wv_matrix,numpy.load(TRAIN_DIR+'gensim_%s.npy'%col),CLUSTER_4,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_0
tmp,time.time(),CLUSTER_4,CLUSTER_0
frame,pandas.read_csv('../data/test.csv'),CLUSTER_8,CLUSTER_3
token_dic,collections.defaultdict(int),CLUSTER_8,CLUSTER_3
nonzeroy,numpy.array(nonzero[0]),CLUSTER_12,CLUSTER_9
nonzerox,numpy.array(nonzero[1]),CLUSTER_12,CLUSTER_9
hist_features,"numpy.concatenate((ch1_hist[0],ch2_hist[0],ch3_hist[0])",CLUSTER_12,CLUSTER_9
hist_features,"numpy.concatenate((channel1_hist[0],channel2_hist[0],channel3_hist[0])",CLUSTER_12,CLUSTER_9
X,"numpy.concatenate((car_feats,noncar_feats)",CLUSTER_12,CLUSTER_9
heat,"numpy.zeros_like(multi_detection_image[:,:,0])",CLUSTER_12,CLUSTER_9
hot,"numpy.zeros_like(image[:,:,0])",CLUSTER_12,CLUSTER_9
heatmap,"numpy.clip(heat,0,255)",CLUSTER_12,CLUSTER_9
heat_map,"numpy.clip(hot,0,255)",CLUSTER_12,CLUSTER_9
hogs_feats,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_12,CLUSTER_9
y,numpy.hstack((np.ones(len(car_feats),CLUSTER_12,CLUSTER_9
hog_features,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_12,CLUSTER_9
img,numpy.copy(image),CLUSTER_12,CLUSTER_9
draw_img,numpy.copy(img),CLUSTER_12,CLUSTER_9
track_example,numpy.copy(test_images[4]),CLUSTER_12,CLUSTER_9
multi_detection_image,numpy.copy(test_images[4]),CLUSTER_12,CLUSTER_9
ch1_hist,"numpy.histogram(img[:,:,0],bins=bins)",CLUSTER_12,CLUSTER_9
ch2_hist,"numpy.histogram(img[:,:,1],bins=bins)",CLUSTER_12,CLUSTER_9
ch3_hist,"numpy.histogram(img[:,:,2],bins=bins)",CLUSTER_12,CLUSTER_9
channel1_hist,"numpy.histogram(img[:,:,0],bins=nbins)",CLUSTER_12,CLUSTER_9
channel2_hist,"numpy.histogram(img[:,:,1],bins=nbins)",CLUSTER_12,CLUSTER_9
channel3_hist,"numpy.histogram(img[:,:,2],bins=nbins)",CLUSTER_12,CLUSTER_9
t,time.time(),CLUSTER_12,CLUSTER_9
t2,time.time(),CLUSTER_12,CLUSTER_9
t,time.time(),CLUSTER_12,CLUSTER_9
t2,time.time(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_12,CLUSTER_9
end,time.time(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_12,CLUSTER_9
end,time.time(),CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,9)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(4,4)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,3)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,9)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_12,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,4)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,9)",CLUSTER_12,CLUSTER_9
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_X,y,test_size=0.2,random_state=rand_state)",CLUSTER_12,CLUSTER_9
svc,sklearn.svm.LinearSVC(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_2,CLUSTER_0
df,"pandas.read_csv('poker_training_data.csv',delimiter=',')",CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_10
y_pos,numpy.arange(len(names),CLUSTER_6,CLUSTER_10
image,numpy.array(image),CLUSTER_6,CLUSTER_10
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_10
sd,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_10
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_10
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_10
probs,numpy.array(probability.topk(topk),CLUSTER_6,CLUSTER_10
performance,numpy.array(probs),CLUSTER_6,CLUSTER_10
image,"numpy.clip(image,0,1)",CLUSTER_6,CLUSTER_10
image,"numpy.transpose(image,(2,0,1)",CLUSTER_6,CLUSTER_10
cat_to_name,json.load(f),CLUSTER_6,CLUSTER_10
distance,numpy.sqrt(x_distance**2+y_distance**2+z_distance**2),CLUSTER_3,CLUSTER_6
df,"pandas.read_csv('olympics.csv',index_col=0,skiprows=1)",CLUSTER_8,CLUSTER_4
census_df,pandas.read_csv('census.csv'),CLUSTER_8,CLUSTER_4
df,pandas.read_csv(url),CLUSTER_5,CLUSTER_5
X,numpy.asarray(stemming(X),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=42)",CLUSTER_5,CLUSTER_5
clf,"sklearn.svm.SVC(kernel=""linear"",decision_function_shape=decision_shape[k],C=C_Params[j],gamma=gamma_params[j])",CLUSTER_5,CLUSTER_5
clf,"sklearn.svm.SVC(kernel=kernel_param[i],decision_function_shape='ovr',C=10.0,gamma='scale')",CLUSTER_5,CLUSTER_5
enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
train_df,"pandas.read_csv(""../KB_NLP/raw_data/train.csv"")",CLUSTER_4,CLUSTER_11
test_df,"pandas.read_csv(""../KB_NLP/raw_data/public_test.csv"")",CLUSTER_4,CLUSTER_11
doublespace_pattern,re.compile('\s+'),CLUSTER_4,CLUSTER_11
weather_data,pandas.DataFrame(weatherpy_dict),CLUSTER_9,CLUSTER_2
response,"requests.get(f""{url}&q={city}"")",CLUSTER_9,CLUSTER_2
start_time,time.time(),CLUSTER_7,CLUSTER_8
elapsed_time_secs,time.time(),CLUSTER_7,CLUSTER_8
start_time,time.time(),CLUSTER_7,CLUSTER_8
elapsed_time_secs,time.time(),CLUSTER_7,CLUSTER_8
start_time,time.time(),CLUSTER_7,CLUSTER_8
elapsed_time_secs,time.time(),CLUSTER_7,CLUSTER_8
start_time,time.time(),CLUSTER_7,CLUSTER_8
elapsed_time_secs,time.time(),CLUSTER_7,CLUSTER_8
start_time,time.time(),CLUSTER_7,CLUSTER_8
k_folds,"sklearn.model_selection.KFold(n_splits=n_folds,random_state=seed)",CLUSTER_7,CLUSTER_8
k_folds,"sklearn.model_selection.KFold(n_splits=n_folds,random_state=seed)",CLUSTER_7,CLUSTER_8
result_saida,"sklearn.model_selection.cross_val_score(modelo
,preditoras_treino
,alvo_treino
,cv=k_folds

,scoring='accuracy'

)",CLUSTER_7,CLUSTER_8
result_saida,"sklearn.model_selection.cross_val_score(modelo
,preditoras_treino
,alvo_treino
,cv=k_folds

,scoring='accuracy'

)",CLUSTER_7,CLUSTER_8
"preditoras_treino,preditoras_teste,alvo_treino,alvo_teste","sklearn.model_selection.train_test_split(
preditoras
,alvo
,test_size=test_size
,random_state=seed
)",CLUSTER_7,CLUSTER_8
"preditoras_treino,preditoras_teste,alvo_treino,alvo_teste","sklearn.model_selection.train_test_split(
preditoras
,alvo
,test_size=test_size
,random_state=seed
)",CLUSTER_7,CLUSTER_8
acuracia,"sklearn.metrics.accuracy_score(y_true=alvo_teste,y_pred=alvo_predito)",CLUSTER_7,CLUSTER_8
modelo,sklearn.pipeline.Pipeline(steps=pipelines),CLUSTER_7,CLUSTER_8
modelo,sklearn.pipeline.Pipeline(steps=pipelines),CLUSTER_7,CLUSTER_8
modelo,sklearn.pipeline.Pipeline(steps=pipelines),CLUSTER_7,CLUSTER_8
pipe,sklearn.pipeline.Pipeline(steps=pipelines),CLUSTER_7,CLUSTER_8
model_01,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
model_02,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
model_04,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
model_05,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(),CLUSTER_7,CLUSTER_8
modelo,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(solver='svd'),CLUSTER_7,CLUSTER_8
modelo,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(solver='svd'),CLUSTER_7,CLUSTER_8
model_06,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
model_03,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_8
dados,"pandas.read_csv(filepath_or_buffer=url,names=colunas,delimiter=',')",CLUSTER_7,CLUSTER_8
dados,"pandas.read_csv(filepath_or_buffer=url,names=colunas,delimiter=',')",CLUSTER_7,CLUSTER_8
datafram_comp,"pandas.DataFrame(data=array_comp,columns=[colunas])",CLUSTER_7,CLUSTER_8
x_data,numpy.arange(min(data),CLUSTER_7,CLUSTER_8
ticks,"numpy.arange(0,QtdTotalElementos,1)",CLUSTER_7,CLUSTER_8
pos,numpy.arange(numBoxes),CLUSTER_7,CLUSTER_8
KNeighborsClassifier__n_neighbors,"numpy.arange(1,50,2)",CLUSTER_7,CLUSTER_8
array_final,numpy.array(medias),CLUSTER_7,CLUSTER_8
ids,numpy.array(input_data[colunas_nominais].astype(dtype='str'),CLUSTER_7,CLUSTER_8
dados['ClasseNumerica'],"numpy.where(dados['Classe']=='good',1,0)",CLUSTER_7,CLUSTER_8
dados['ClasseNumerica'],"numpy.where(dados['Classe']=='good',1,0)",CLUSTER_7,CLUSTER_8
prediction_series,numpy.where(pd.Series(predictions),CLUSTER_7,CLUSTER_8
handles,"[plt.plot([],[],color=plt.cm.brg(i/2.),ls="""",marker=""o"",markersize=numpy.sqrt(10)",CLUSTER_7,CLUSTER_8
array_comp,"numpy.column_stack([algoritmos,
acuracia_COM_VALID_CRUZADA,
desviopadrao_COM_VALID_CRUZADA,
acuracia_SEM_VALID_CRUZADA,
desviopadrao_SEM_VALID_CRUZADA])",CLUSTER_7,CLUSTER_8
boxplot,matplotlib.pyplot.boxplot(resultados),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(1,figsize=(17,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(1,figsize=(17,8)",CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(17,7)",CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
xtickNames,"matplotlib.pyplot.setp(ax,xticklabels=modelos_nome)",CLUSTER_7,CLUSTER_8
xtickNames,"matplotlib.pyplot.setp(ax,xticklabels=algoritmos)",CLUSTER_7,CLUSTER_8
xtickNames,"matplotlib.pyplot.setp(ax,xticklabels=modelos_nome)",CLUSTER_7,CLUSTER_8
density_est,scipy.stats.gaussian_kde(data),CLUSTER_7,CLUSTER_8
boxplot,"seaborn.boxplot(data=resultados,orient=""v"",width=0.6,fliersize=2,linewidth=0.7,saturation=0.9,ax=ax)",CLUSTER_7,CLUSTER_8
values,json.loads(data),CLUSTER_7,CLUSTER_8
all_time_head_to_head,pandas.DataFrame(),CLUSTER_11,CLUSTER_2
all_time_head_to_head,pandas.concat(frames),CLUSTER_11,CLUSTER_2
eventid,"pandas.read_sql_query('selecteventidfrom_0_original_data.tournament_id_dictionary',db)",CLUSTER_11,CLUSTER_2
teamid,"pandas.read_sql_query(""selectteam1idfrom_0_original_data.match_fixtureswheretournament_id='""+k+""'"",db)",CLUSTER_11,CLUSTER_2
opponentid,"pandas.read_sql_query(""selectteam2idfrom_0_original_data.match_fixtures\
wheretournament_id='""+k+""'andteam1id='""+n+""'"",db)",CLUSTER_11,CLUSTER_2
"fig,axis","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(getdata),CLUSTER_9,CLUSTER_2
df2,pandas.DataFrame(df['ticker']['markets']),CLUSTER_9,CLUSTER_2
getdata,requests.get('https://api.cryptonator.com/api/full/btc-usd'),CLUSTER_9,CLUSTER_2
num,"random.randint(1,100)",CLUSTER_10,CLUSTER_4
Xtr,"pandas.read_csv(path1,header=None)",CLUSTER_5,CLUSTER_5
Ytr,pandas.read_csv(path2),CLUSTER_5,CLUSTER_5
Xte,"pandas.read_csv(path3,header=None)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(Xtr.values,Ytr['Prediction'].values,test_size=0.2)",CLUSTER_5,CLUSTER_5
df_total_6,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_corr,"pandas.DataFrame(get_top_abs_correlations(df_high_end_cust,60)",CLUSTER_7,CLUSTER_8
X_sm,"pandas.DataFrame(X_sm,columns=X.columns)",CLUSTER_7,CLUSTER_8
pcs_df,"pandas.DataFrame({'PC1':pca.components_[0],'PC2':pca.components_[1],'Feature':colnames})",CLUSTER_7,CLUSTER_8
cv_results,pandas.DataFrame(grid_search.cv_results_),CLUSTER_7,CLUSTER_8
df_imp_cols,"pandas.DataFrame({'Column':X_train_1.columns,'Importance':clf_gini.feature_importances_})",CLUSTER_7,CLUSTER_8
df_imp_cols,"pandas.DataFrame({'Column':X_train_1.columns,'Importance':clf_gini.feature_importances_})",CLUSTER_7,CLUSTER_8
y_train_series,pandas.Series(y_train),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(""telecom_churn_data.csv"",low_memory=False)",CLUSTER_7,CLUSTER_8
df['date_of_last_rech_9'],pandas.to_datetime(df['date_of_last_rech_9']),CLUSTER_7,CLUSTER_8
df['date_of_last_rech_8'],pandas.to_datetime(df['date_of_last_rech_8']),CLUSTER_7,CLUSTER_8
df['date_of_last_rech_7'],pandas.to_datetime(df['date_of_last_rech_7']),CLUSTER_7,CLUSTER_8
df['date_of_last_rech_6'],pandas.to_datetime(df['date_of_last_rech_6']),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,axes",matplotlib.pyplot.subplots(nrows=2),CLUSTER_7,CLUSTER_8
indices,numpy.argsort(importances),CLUSTER_7,CLUSTER_8
diff,numpy.sum((points-median),CLUSTER_7,CLUSTER_8
diff,numpy.sqrt(diff),CLUSTER_7,CLUSTER_8
"q_high,q_low","numpy.percentile(df_high_end_cust[li_plot_num_feats[i]],[max_q,min_q])",CLUSTER_7,CLUSTER_8
"q_high,q_low","numpy.percentile(df[li_plot_num_feats[i]],[max_q,min_q])",CLUSTER_7,CLUSTER_8
"q_high,q_low","numpy.percentile(df[li_plot_num_feats[i]],[max_q,min_q])",CLUSTER_7,CLUSTER_8
corrmat,numpy.corrcoef(df_train_pca.transpose(),CLUSTER_7,CLUSTER_8
median,"numpy.median(points,axis=0)",CLUSTER_7,CLUSTER_8
med_abs_deviation,numpy.median(diff),CLUSTER_7,CLUSTER_8
"X_train_1,X_test_1,y_train,y_test","sklearn.model_selection.train_test_split(X_sm,y_sm,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
pca,"sklearn.decomposition.PCA(svd_solver='randomized',random_state=42)",CLUSTER_7,CLUSTER_8
pca_again,sklearn.decomposition.PCA(0.95),CLUSTER_7,CLUSTER_8
pca_final,sklearn.decomposition.IncrementalPCA(n_components=21),CLUSTER_7,CLUSTER_8
learner_pca,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
learner_pca2,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
confusion,"sklearn.metrics.confusion_matrix(y_test,y_pred_class)",CLUSTER_7,CLUSTER_8
confusion,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion,"sklearn.metrics.confusion_matrix(y_test,predictions)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(estimator=dtree,param_grid=param_grid,
cv=n_folds,verbose=1)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(estimator=rf,param_grid=param_grid,
cv=3,n_jobs=-1,verbose=1)",CLUSTER_7,CLUSTER_8
dtree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
clf_gini,"sklearn.tree.DecisionTreeClassifier(criterion=""gini"",
random_state=100,
max_depth=10,
min_samples_leaf=50,
min_samples_split=100)",CLUSTER_7,CLUSTER_8
clf_gini,"sklearn.tree.DecisionTreeClassifier(criterion=""gini"",
random_state=100,
max_depth=15,
min_samples_leaf=50,
min_samples_split=50)",CLUSTER_7,CLUSTER_8
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
rfc,"sklearn.ensemble.RandomForestClassifier(bootstrap=True,
max_depth=10,
min_samples_leaf=100,
min_samples_split=200,
max_features=5,
n_estimators=300)",CLUSTER_7,CLUSTER_8
xlabels,"numpy.arange(xlabel_min,xlabel_max+1)",CLUSTER_4,CLUSTER_11
xlabels,"numpy.arange(xlabel_min,xlabel_max+1)",CLUSTER_4,CLUSTER_11
xlabels,"numpy.arange(xlabel_min,xlabel_max+1)",CLUSTER_4,CLUSTER_11
base_size,"numpy.array([1,1/scale/golden_ratio])",CLUSTER_4,CLUSTER_11
a,"numpy.array([0.133,0.171,0.165,0.138])",CLUSTER_4,CLUSTER_11
b,"numpy.array([243,292,299,-221])",CLUSTER_4,CLUSTER_11
k,"numpy.array([482,1020,611,521])",CLUSTER_4,CLUSTER_11
g,"numpy.array([917,1680,1340,1680])",CLUSTER_4,CLUSTER_11
f_k,"numpy.array([0.00258,0.00215,0.00173,0.00113])",CLUSTER_4,CLUSTER_11
phi,numpy.arccos(h_c_low_factor/h_c_high_factor*overlap_freq**(-3),CLUSTER_4,CLUSTER_11
h_h_f,numpy.sqrt(fT_tmp*S_h_f),CLUSTER_4,CLUSTER_11
f,"numpy.logspace(-5,-2,100)",CLUSTER_4,CLUSTER_11
current_path,os.getcwd(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=figsize)",CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
x,"numpy.arange(1,day_count_for_current_country+1)",CLUSTER_11,CLUSTER_1
day_array,"numpy.arange(1,day_count)",CLUSTER_11,CLUSTER_1
x,"numpy.arange(0,len(y)",CLUSTER_11,CLUSTER_1
ticks,numpy.arange((-1*max_pop),CLUSTER_11,CLUSTER_1
time_range,"numpy.arange(1,180,1)",CLUSTER_11,CLUSTER_1
deftoy_model(C,"25,P=0.0025,D=10,fatality_rate=0.03,initial_real_cases=2000,initial_recovered=200,initial_deceased=50,country=""France"",time_range=numpy.arange(1,180,1)",CLUSTER_11,CLUSTER_1
text_x,numpy.argmax(np.array(trace),CLUSTER_11,CLUSTER_1
a,numpy.mean(np.diff(y),CLUSTER_11,CLUSTER_1
a,numpy.mean(np.diff(y),CLUSTER_11,CLUSTER_1
a,numpy.mean(np.diff(y),CLUSTER_11,CLUSTER_1
a,numpy.mean(np.diff(y),CLUSTER_11,CLUSTER_1
x_new,"numpy.linspace(x[0],x[-1],len(x)",CLUSTER_11,CLUSTER_1
f,numpy.poly1d(coefs),CLUSTER_11,CLUSTER_1
"coefs,residual,rank,singular_values,rcond","numpy.polyfit(x,y,degree,full=True)",CLUSTER_11,CLUSTER_1
api_data,pandas.DataFrame(),CLUSTER_11,CLUSTER_1
temp_data,"pandas.DataFrame(data[""stats""][""history""])",CLUSTER_11,CLUSTER_1
age_distribution,"pandas.DataFrame(columns=[""CountryorArea"",""Sex"",""Age"",""Value"",""Year""])",CLUSTER_11,CLUSTER_1
fatality_per_age_category,"pandas.DataFrame(
[{""Age"":""0-9"",""Fatalityrate"":0},
{""Age"":""10-19"",""Fatalityrate"":0.2},
{""Age"":""20-29"",""Fatalityrate"":0.2},
{""Age"":""30-39"",""Fatalityrate"":0.2},
{""Age"":""40-49"",""Fatalityrate"":0.4},
{""Age"":""50-59"",""Fatalityrate"":1.3},
{""Age"":""60-69"",""Fatalityrate"":3.6},
{""Age"":""70-79"",""Fatalityrate"":8.0},
{""Age"":""80+"",""Fatalityrate"":14.8}],
columns=[""Age"",""Fatalityrate""]
)",CLUSTER_11,CLUSTER_1
deaths_in_all_countries,"pandas.DataFrame(columns=[""Country"",""Population"",""Female"",""Male"",""Femaledeaths"",""Maledeaths"",""Totaldeaths"",""Year""])",CLUSTER_11,CLUSTER_1
raw_data,"pandas.read_csv(""coronavirus.csv"",header=0)",CLUSTER_11,CLUSTER_1
age_distribution_raw_data,"pandas.read_excel(""age_distribution.xlsx"",header=0)",CLUSTER_11,CLUSTER_1
svr,"sklearn.svm.SVR(kernel=""rbf"",C=10000,gamma=0.01,epsilon=.001)",CLUSTER_11,CLUSTER_1
r,"requests.get(url=api_url,params=api_params)",CLUSTER_11,CLUSTER_1
df,"pandas.read_csv(file,encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
can_df['Year'],pandas.to_numeric(can_df['Year']),CLUSTER_8,CLUSTER_3
can_df['Refugees(incl.refugee-likesituations)'],pandas.to_numeric(can_df['Refugees(incl.refugee-likesituations),CLUSTER_8,CLUSTER_3
can_df['TotalPopulation'],pandas.to_numeric(can_df['TotalPopulation']),CLUSTER_8,CLUSTER_3
values,numpy.where(alpha_channel!=0),CLUSTER_4,CLUSTER_11
ind,"numpy.argwhere(new_sunglasses[:,:,3]>0)",CLUSTER_4,CLUSTER_11
image_copy,numpy.copy(image),CLUSTER_4,CLUSTER_11
key_pts_frame,pandas.read_csv('/data/training_frames_keypoints.csv'),CLUSTER_4,CLUSTER_11
"X_full,y_full",numpy.asarray(X_full),CLUSTER_7,CLUSTER_5
X_out_test,numpy.asarray(X_out_test),CLUSTER_7,CLUSTER_5
g,seaborn.countplot(sorted(y_full),CLUSTER_7,CLUSTER_5
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_7,CLUSTER_5
clf_1,"sklearn.linear_model.SGDClassifier(alpha=1e-5,n_iter=70,penalty='elasticnet')",CLUSTER_7,CLUSTER_5
clf_2,sklearn.linear_model.LassoCV(),CLUSTER_7,CLUSTER_5
clf_3,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_5
to_idf,"sklearn.pipeline.Pipeline([('count_vect',CountVectorizer()",CLUSTER_7,CLUSTER_5
data,json.loads(open('data/train.json'),CLUSTER_7,CLUSTER_5
test_data,json.loads(open('data/test.json'),CLUSTER_7,CLUSTER_5
df_param,"pandas.DataFrame(df_normalizado,columns=df.columns[:-1])",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""ClassifiedData"",index_col=0)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(df_param,df['TARGETCLASS'],test_size=.3)",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=10),CLUSTER_7,CLUSTER_5
ecom,"pandas.read_csv(""EcommercePurchases"")",CLUSTER_8,CLUSTER_4
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
Z1,"numpy.dot(W1,X)",CLUSTER_5,CLUSTER_9
Z2,"numpy.dot(W2,A1)",CLUSTER_5,CLUSTER_9
Z3,"numpy.dot(W3,A2)",CLUSTER_5,CLUSTER_9
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(40,5)",CLUSTER_5,CLUSTER_9
ax1,"matplotlib.pyplot.subplot(111,polar=True)",CLUSTER_5,CLUSTER_9
ax1,"matplotlib.pyplot.subplot(111,polar=True)",CLUSTER_5,CLUSTER_9
panss_p_n_g_imputed_mean,"numpy.mean(panss_p_n_g_imputed,axis=0)",CLUSTER_5,CLUSTER_9
panss_p_n_g_imputed_std,"numpy.std(panss_p_n_g_imputed,axis=0)",CLUSTER_5,CLUSTER_9
	data,pandas.read_csv(path),CLUSTER_5,CLUSTER_9
two_labels,pandas.read_excel('comparison_between_pn_kmeans_and_png_kmeans.xlsx'),CLUSTER_5,CLUSTER_9
panss_p_n_g_imputed_standardized,sklearn.preprocessing.scale(panss_p_n_g_imputed),CLUSTER_5,CLUSTER_9
kmeans_fit,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_5,CLUSTER_9
interactions,pandas.DataFrame(index=data.index),CLUSTER_7,CLUSTER_8
selected_features,pandas.DataFrame(model.inverse_transform(X_new),CLUSTER_7,CLUSTER_8
new_models_dataframe2,"pandas.DataFrame({'CVMean':xyz,'Std':std},index=classifiers)",CLUSTER_7,CLUSTER_8
box,"pandas.DataFrame(accuracy,index=[classifiers])",CLUSTER_7,CLUSTER_8
interactions,pandas.DataFrame(index=data_test.index),CLUSTER_7,CLUSTER_8
a,pandas.Series(),CLUSTER_7,CLUSTER_8
feat_imp,"pandas.Series(alg.feature_importances_,predictors)",CLUSTER_7,CLUSTER_8
feat_imp,"pandas.Series(alg.feature_importances_,predictors)",CLUSTER_7,CLUSTER_8
train_df['Fare_Range'],"pandas.qcut(train_df['Fare'],4)",CLUSTER_7,CLUSTER_8
test_df['Fare_Range'],"pandas.qcut(test_df['Fare'],4)",CLUSTER_7,CLUSTER_8
train_df,"pandas.read_csv(PATH+""/train.csv"")",CLUSTER_7,CLUSTER_8
test_df,"pandas.read_csv(PATH+""/test.csv"")",CLUSTER_7,CLUSTER_8
gender_submission,"pandas.read_csv(PATH+""/gender_submission.csv"")",CLUSTER_7,CLUSTER_8
submission,pandas.read_csv('../data/gender_submission.csv'),CLUSTER_7,CLUSTER_8
submission,pandas.read_csv('../data/gender_submission.csv'),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(2,2,figsize=(20,15)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(20,8)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(20,8)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(1,3,figsize=(20,8)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,6)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,10)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(2,2,figsize=(15,12)",CLUSTER_7,CLUSTER_8
logistic,"sklearn.linear_model.LogisticRegression(C=1,penalty=""l1"",random_state=7)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(kernel='rbf',C=1,gamma=0.1)",CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(kernel='linear',C=0.1,gamma=0.1)",CLUSTER_7,CLUSTER_8
gd,GridSearchCV(estimator=sklearn.svm.SVC(),CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(kernel='linear',C=0.4,gamma=0.1)",CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_7,CLUSTER_8
gd,GridSearchCV(estimator=sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_7,CLUSTER_8
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,random_state=0)",CLUSTER_7,CLUSTER_8
model,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_7,CLUSTER_8
model,BaggingClassifier(base_estimator=sklearn.neighbors.KNeighborsClassifier(n_neighbors=4),CLUSTER_7,CLUSTER_8
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
model,BaggingClassifier(base_estimator=sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
"train,test","sklearn.model_selection.train_test_split(train_df,test_size=0.2,random_state=0,stratify=train_df['Survived'])",CLUSTER_7,CLUSTER_8
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
label_enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
label_enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
model,"sklearn.feature_selection.SelectFromModel(logistic,prefit=True)",CLUSTER_7,CLUSTER_8
kfold,"sklearn.model_selection.KFold(n_splits=10,random_state=22)",CLUSTER_7,CLUSTER_8
cv_result,"sklearn.model_selection.cross_val_score(model,X,Y,cv=kfold,scoring=""accuracy"")",CLUSTER_7,CLUSTER_8
cross,"sklearn.model_selection.cross_val_score(ensemble_lin_rbf,X,Y,cv=10,scoring=""accuracy"")",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(model,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(model,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(ada,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(grad,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
cv_score,"sklearn.model_selection.cross_val_score(alg,dtrain[predictors],dtrain['Survived'],cv=cv_folds,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(xgboost,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
cv_score,"sklearn.model_selection.cross_val_score(alg,dtrain[predictors],dtrain['Survived'],cv=cv_folds,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(svm.SVC(kernel='rbf'),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(svm.SVC(kernel='linear'),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(KNeighborsClassifier(n_neighbors=9),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(RandomForestClassifier(n_estimators=100),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(LogisticRegression(),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(GaussianNB(),CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_predict(ada,X,Y,cv=10)",CLUSTER_7,CLUSTER_8
gd,sklearn.model_selection.GridSearchCV(estimator=svm.SVC(),CLUSTER_7,CLUSTER_8
gd,sklearn.model_selection.GridSearchCV(estimator=RandomForestClassifier(random_state=0),CLUSTER_7,CLUSTER_8
gsearch1,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,min_samples_split=9,min_samples_leaf=10,max_depth=5,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch2,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch3,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch4,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,n_estimators=60,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch5,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10,max_features=3)",CLUSTER_7,CLUSTER_8
gsearch1,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=5,
min_child_weight=1,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch2,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch2b,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch3,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch4,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0.2,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch5,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0.2,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch6,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=51,max_depth=4,
min_child_weight=4,gamma=0,subsample=0.8,colsample_bytree=0.85,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch7,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=51,max_depth=4,
min_child_weight=4,gamma=0,subsample=0.8,colsample_bytree=0.85,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gd,sklearn.model_selection.GridSearchCV(estimator=AdaBoostClassifier(),CLUSTER_7,CLUSTER_8
ensemble_lin_rbf,"sklearn.ensemble.VotingClassifier(estimators=[('KNN',KNeighborsClassifier(n_neighbors=4)",CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.BaggingClassifier(base_estimator=KNeighborsClassifier(n_neighbors=4),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.BaggingClassifier(base_estimator=DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
ada,"sklearn.ensemble.AdaBoostClassifier(n_estimators=200,random_state=0,learning_rate=0.1)",CLUSTER_7,CLUSTER_8
gd,GridSearchCV(estimator=sklearn.ensemble.AdaBoostClassifier(),CLUSTER_7,CLUSTER_8
ada,"sklearn.ensemble.AdaBoostClassifier(n_estimators=400,random_state=0,learning_rate=0.05)",CLUSTER_7,CLUSTER_8
model,"sklearn.ensemble.AdaBoostClassifier(n_estimators=200,learning_rate=0.05,random_state=0)",CLUSTER_7,CLUSTER_8
ada,"sklearn.ensemble.AdaBoostClassifier(n_estimators=400,random_state=0,learning_rate=0.05)",CLUSTER_7,CLUSTER_8
grad,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=500,random_state=0,learning_rate=0.1)",CLUSTER_7,CLUSTER_8
gbm0,sklearn.ensemble.GradientBoostingClassifier(random_state=10),CLUSTER_7,CLUSTER_8
gsearch1,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,min_samples_split=9,min_samples_leaf=10,max_depth=5,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch2,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch3,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch4,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=60,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch5,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10,max_features=3)",CLUSTER_7,CLUSTER_8
gbm_tuned_1,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10,max_features=3)",CLUSTER_7,CLUSTER_8
model,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=500,learning_rate=0.1,random_state=0)",CLUSTER_7,CLUSTER_8
gbm_tuned_1,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.05,

n_estimators=200,
max_depth=4,
min_samples_split=10,
min_samples_leaf=8,
subsample=0.8,
random_state=10,
max_features=13)",CLUSTER_7,CLUSTER_8
t,"numpy.linspace(0,time_to_plot,num_samples)",CLUSTER_1,CLUSTER_9
fft_output,numpy.fft.rfft(signal),CLUSTER_1,CLUSTER_9
inventory,"pandas.DataFrame({'Fruit':fruits,'Qty':qtys,'Price':[2.99,1.99,3.99,2.99]})",CLUSTER_8,CLUSTER_4
fruits,"pandas.Series(['Apple','Banana','Cherry','Orange'],name=""Fruit"")",CLUSTER_8,CLUSTER_4
qtys,"pandas.Series([5,7,2,9])",CLUSTER_8,CLUSTER_4
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
x,numpy.arange(len(ts),CLUSTER_12,CLUSTER_6
momentum_list,"numpy.log(data.history(context.security_list,""close"",context.momentum_window,""1d"")",CLUSTER_12,CLUSTER_6
"slope,intercept,r_value,p_value,std_err","scipy.stats.linregress(x,ts)",CLUSTER_12,CLUSTER_6
dateTime,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
line_x,"numpy.arange(0,12,0.1)",CLUSTER_1,CLUSTER_10
surf_x,"numpy.arange(-2,8,0.1)",CLUSTER_1,CLUSTER_10
surf_y,"numpy.arange(-2,6,0.1)",CLUSTER_1,CLUSTER_10
line_x,"numpy.arange(0,12,0.1)",CLUSTER_1,CLUSTER_10
surf_x,"numpy.arange(-2,8,0.1)",CLUSTER_1,CLUSTER_10
surf_y,"numpy.arange(-2,6,0.1)",CLUSTER_1,CLUSTER_10
line_x,"numpy.arange(0,12,0.1)",CLUSTER_1,CLUSTER_10
surf_x,"numpy.arange(-2,8,0.1)",CLUSTER_1,CLUSTER_10
surf_y,"numpy.arange(-2,6,0.1)",CLUSTER_1,CLUSTER_10
line_x,"numpy.arange(0,12,0.1)",CLUSTER_1,CLUSTER_10
surf_x,"numpy.arange(-2,8,0.1)",CLUSTER_1,CLUSTER_10
surf_y,"numpy.arange(-2,6,0.1)",CLUSTER_1,CLUSTER_10
w_pri,"numpy.array([-0.62369285,-0.743176,0.24227395])",CLUSTER_1,CLUSTER_10
beta,"numpy.array([0.01,0.01,0.01])",CLUSTER_1,CLUSTER_10
w_pri,"numpy.array([1,-1])",CLUSTER_1,CLUSTER_10
beta,"numpy.array([0.01,0.01,0.01])",CLUSTER_1,CLUSTER_10
w_pri,"numpy.array([-1,5])",CLUSTER_1,CLUSTER_10
beta,"numpy.array([0.01,0.01,0.01])",CLUSTER_1,CLUSTER_10
w_pri,"numpy.array([-1,1,3])",CLUSTER_1,CLUSTER_10
beta,"numpy.array([0.01,0.01,0.01])",CLUSTER_1,CLUSTER_10
ind_neg,numpy.where(tt<0),CLUSTER_1,CLUSTER_10
ind_neg,numpy.where(tt<0),CLUSTER_1,CLUSTER_10
data_11,"numpy.concatenate((data_1,ones_1[:,np.newaxis])",CLUSTER_1,CLUSTER_10
data_22,"numpy.concatenate((data_2,ones_2[:,np.newaxis])",CLUSTER_1,CLUSTER_10
tag,"numpy.concatenate((1*ones_1,-1*ones_2)",CLUSTER_1,CLUSTER_10
data_total,"numpy.concatenate((data_11,data_22)",CLUSTER_1,CLUSTER_10
data_total_nobias,"numpy.concatenate((data_1,data_2)",CLUSTER_1,CLUSTER_10
ones_1,numpy.ones(np.shape(data_1),CLUSTER_1,CLUSTER_10
summ,"numpy.sum(data_total[ind,:]*tag[ind,np.newaxis],0)",CLUSTER_1,CLUSTER_10
summ,"numpy.sum(data_total_nobias[ind,:]*tag[ind,np.newaxis],0)",CLUSTER_1,CLUSTER_10
summ,"numpy.sum(data_total[ind_neg,:][:,[0,2]]*tag[ind_neg,np.newaxis],0)",CLUSTER_1,CLUSTER_10
summ,"numpy.sum(data_total[ind_neg,:]*tag[ind_neg,np.newaxis],0)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(surf_x,surf_y)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(surf_x,surf_y)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(surf_x,surf_y)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(surf_x,surf_y)",CLUSTER_1,CLUSTER_10
summ_norm,"numpy.linalg.norm(summ,ord=2)",CLUSTER_1,CLUSTER_10
summ_norm,"numpy.linalg.norm(summ,ord=2)",CLUSTER_1,CLUSTER_10
summ_norm,"numpy.linalg.norm(summ,ord=2)",CLUSTER_1,CLUSTER_10
summ_norm,"numpy.linalg.norm(summ,ord=2)",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
merge_data,"pandas.merge(clinical_trial,mouse_drug,on=""MouseID"",how=""left"")",CLUSTER_1,CLUSTER_3
mouse_drug,pandas.read_csv(mouse_drug_data_to_load),CLUSTER_1,CLUSTER_3
clinical_trial,pandas.read_csv(clinical_trial_data_to_load),CLUSTER_1,CLUSTER_3
df,"pandas.read_hdf('../database/all_data_comp.h5','table')",CLUSTER_5,CLUSTER_5
MSE,sklearn.metrics.mean_squared_error(tpot.predict(X_test_13),CLUSTER_5,CLUSTER_5
MSE_perc,sklearn.metrics.mean_squared_error(tpot.predict(X_13),CLUSTER_5,CLUSTER_5
MSE_13,sklearn.metrics.mean_squared_error(tpot.predict(X_test_13),CLUSTER_5,CLUSTER_5
MSE_24,sklearn.metrics.mean_squared_error(tpot.predict(X_test_24),CLUSTER_5,CLUSTER_5
t1,time.time(),CLUSTER_5,CLUSTER_5
X_13,"numpy.array(df[[
var_names['ae1_frp'],
var_names['ae3_frp'],
var_names['me1_frp'],
var_names['me3_frp'],
var_names['ae1_rpm'],
var_names['ae3_rpm'],
var_names['me1_rpm'],
var_names['me3_rpm'],
]][date_begin:date_end])",CLUSTER_5,CLUSTER_5
X_24,"numpy.array(df[[
var_names['ae2_frp'],
var_names['ae4_frp'],
var_names['me2_frp'],
var_names['me4_frp'],
var_names['ae2_rpm'],
var_names['ae4_rpm'],
var_names['me2_rpm'],
var_names['me4_rpm'],
]][date_begin:date_end])",CLUSTER_5,CLUSTER_5
X_13,numpy.array(df[eng_13][date_begin:date_end]),CLUSTER_5,CLUSTER_5
X_24,numpy.array(df[eng_24][date_begin:date_end]),CLUSTER_5,CLUSTER_5
y_13,numpy.array(df[var_names['fo_booster_13']][date_begin:date_end]),CLUSTER_5,CLUSTER_5
y_24,numpy.array(df[var_names['fo_booster_24']][date_begin:date_end]),CLUSTER_5,CLUSTER_5
err,numpy.array(tpot_13.predict(X_13),CLUSTER_5,CLUSTER_5
train_label,numpy.array([train_data[i][0]+2*train_data[i][1]foriinrange(100),CLUSTER_5,CLUSTER_5
eval_label,numpy.array([11]),CLUSTER_5,CLUSTER_5
x,"numpy.linspace(n1,n2,n2-n1)",CLUSTER_5,CLUSTER_5
x,"numpy.linspace(n1,n2,n2-n1)",CLUSTER_5,CLUSTER_5
"X_train_13,X_test_13,y_train_13,y_test_13","sklearn.model_selection.train_test_split(X_13,y_13,train_size=0.75,test_size=0.25)",CLUSTER_5,CLUSTER_5
"X_train_13,X_test_13,y_train_13,y_test_13","sklearn.model_selection.train_test_split(X_13,y_13,train_size=0.75,test_size=0.25)",CLUSTER_5,CLUSTER_5
"X_train_13,X_test_13,y_train_13,y_test_13","sklearn.model_selection.train_test_split(X_13,y_13,train_size=0.75,test_size=0.25)",CLUSTER_5,CLUSTER_5
"X_train_24,X_test_24,y_train_24,y_test_24","sklearn.model_selection.train_test_split(X_13,y_13,train_size=0.75,test_size=0.25)",CLUSTER_5,CLUSTER_5
StackingEstimator(estimator,sklearn.linear_model.LassoLarsCV(normalize=False),CLUSTER_5,CLUSTER_5
exported_pipeline,"sklearn.pipeline.make_pipeline(
PolynomialFeatures(degree=2,include_bias=False,interaction_only=False)",CLUSTER_5,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(students,columns=['Name','Age','City','Country'])",CLUSTER_8,CLUSTER_4
data,"pandas.merge(hits,truth,on='hit_id',how='left')",CLUSTER_11,CLUSTER_1
births,pandas.read_csv('births.csv'),CLUSTER_7,CLUSTER_3
births.index,"pandas.to_datetime(10000*births.year+100*births.month+births.day,format='%Y%m%d')",CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,4)",CLUSTER_7,CLUSTER_3
quartiles,"numpy.percentile(births['births'],[25,50,75])",CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
data,numpy.array(data),CLUSTER_1,CLUSTER_3
almR[count],"scipy.integrate.simps(scipy.integrate.simps(mapr*(leg[count,:].reshape(Nmax,1)",CLUSTER_3,CLUSTER_6
almP[count],scipy.integrate.simps(scipy.integrate.simps((mapt+1j*mapp),CLUSTER_3,CLUSTER_6
almM[count],scipy.integrate.simps(scipy.integrate.simps((mapt-1j*mapp),CLUSTER_3,CLUSTER_6
ulm[count],"scipy.integrate.simps(scipy.integrate.simps(mapr*(leg[count,:].reshape(Nmax,1)",CLUSTER_3,CLUSTER_6
vlm[count],"scipy.integrate.simps(scipy.integrate.simps((mapt*(dt_leg[count,:].reshape(Nmax,1)",CLUSTER_3,CLUSTER_6
wlm[count],"scipy.integrate.simps(scipy.integrate.simps((mapp*(dt_leg[count,:].reshape(Nmax,1)",CLUSTER_3,CLUSTER_6
_index,numpy.arange(npix),CLUSTER_3,CLUSTER_6
ell,numpy.arange(ellmax+1),CLUSTER_3,CLUSTER_6
ell,numpy.arange(ellmax+1),CLUSTER_3,CLUSTER_6
vt,"numpy.array([ct*cp,ct*sp,-st])",CLUSTER_3,CLUSTER_6
vp,"numpy.array([-sp,cp,0.0*cp])",CLUSTER_3,CLUSTER_6
vtR,"numpy.array([ctR*cpR,ctR*spR,-stR])",CLUSTER_3,CLUSTER_6
vpR,"numpy.array([-spR,cpR,0.0*cpR])",CLUSTER_3,CLUSTER_6
vt,"numpy.array([ct*cp,ct*sp,-st])",CLUSTER_3,CLUSTER_6
vp,"numpy.array([-sp,cp,0.0*cp])",CLUSTER_3,CLUSTER_6
vtR,"numpy.array([ctR*cpR,ctR*spR,-stR])",CLUSTER_3,CLUSTER_6
vpR,"numpy.array([-spR,cpR,0.0*cpR])",CLUSTER_3,CLUSTER_6
newCoefs,"numpy.zeros(coefs.shape[0],dtype=complex)",CLUSTER_3,CLUSTER_6
almNew,numpy.zeros(int(lmax-t+1),CLUSTER_3,CLUSTER_6
ps,numpy.zeros(lmax+1),CLUSTER_3,CLUSTER_6
thetaNew,numpy.zeros(_numPix),CLUSTER_3,CLUSTER_6
phiNew,numpy.zeros(_numPix),CLUSTER_3,CLUSTER_6
thetaNew,numpy.zeros(_numPix),CLUSTER_3,CLUSTER_6
phiNew,numpy.zeros(_numPix),CLUSTER_3,CLUSTER_6
thetaNew,numpy.zeros(12*NSIDE**2),CLUSTER_3,CLUSTER_6
phiNew,numpy.zeros(12*NSIDE**2),CLUSTER_3,CLUSTER_6
newCoefs,"numpy.zeros(_maxind,dtype=complex)",CLUSTER_3,CLUSTER_6
leg,"numpy.zeros((maxIndex,theta.size)",CLUSTER_3,CLUSTER_6
leg_d1,"numpy.zeros((maxIndex,theta.size)",CLUSTER_3,CLUSTER_6
dp_leg,"numpy.zeros((maxIndex,theta.size)",CLUSTER_3,CLUSTER_6
ellArr,numpy.zeros(maxIndex),CLUSTER_3,CLUSTER_6
emmArr,numpy.zeros(maxIndex),CLUSTER_3,CLUSTER_6
pspec,numpy.zeros(lmax),CLUSTER_3,CLUSTER_6
almSynth,numpy.zeros(maxNum),CLUSTER_3,CLUSTER_6
ellSynth,numpy.zeros(maxNum),CLUSTER_3,CLUSTER_6
almR,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
almP,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
almM,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
ulm,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
vlm,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
wlm,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
index,numpy.where((ellArr==ell),CLUSTER_3,CLUSTER_6
index,numpy.where((ellArr==ell),CLUSTER_3,CLUSTER_6
index,numpy.where((ellArr==ell),CLUSTER_3,CLUSTER_6
index,numpy.where((ellArr==ell),CLUSTER_3,CLUSTER_6
values,numpy.fromiter((np.sum(data[index==i]),CLUSTER_3,CLUSTER_6
counts,"numpy.ones(_numPix,dtype=np.int)",CLUSTER_3,CLUSTER_6
onesMap,numpy.ones(map_trans[0].shape[0]),CLUSTER_3,CLUSTER_6
e1map,"numpy.full(_numPix,hp.UNSEEN,dtype=complex)",CLUSTER_3,CLUSTER_6
existance,"numpy.full(_numPix,False,dtype=np.bool)",CLUSTER_3,CLUSTER_6
e1map,"numpy.full(_numPix,hp.UNSEEN,dtype=np.float)",CLUSTER_3,CLUSTER_6
existance,"numpy.full(_numPix,False,dtype=np.bool)",CLUSTER_3,CLUSTER_6
e1map,numpy.full(hp.nside2npix(NSIDE),CLUSTER_3,CLUSTER_6
existance,numpy.full(hp.nside2npix(NSIDE),CLUSTER_3,CLUSTER_6
THETAROT,numpy.arcsin(np.sqrt(y**2+z**2),CLUSTER_3,CLUSTER_6
THETAROT,numpy.arcsin(np.sqrt(y**2+z**2),CLUSTER_3,CLUSTER_6
PHIROT,"numpy.arctan2(z,y)",CLUSTER_3,CLUSTER_6
PHIROT,"numpy.arctan2(z,y)",CLUSTER_3,CLUSTER_6
"ct,cp,st,sp",numpy.cos(t),CLUSTER_3,CLUSTER_6
"ctR,cpR,stR,spR",numpy.cos(trot),CLUSTER_3,CLUSTER_6
"ct,cp,st,sp",numpy.cos(t),CLUSTER_3,CLUSTER_6
"ctR,cpR,stR,spR",numpy.cos(trot),CLUSTER_3,CLUSTER_6
cost,numpy.cos(theta),CLUSTER_3,CLUSTER_6
z,numpy.cos(theta),CLUSTER_3,CLUSTER_6
z,numpy.cos(theta),CLUSTER_3,CLUSTER_6
cosmp,numpy.cos(emm*phi),CLUSTER_3,CLUSTER_6
lr,numpy.cos(thRot),CLUSTER_3,CLUSTER_6
sint,numpy.sin(theta),CLUSTER_3,CLUSTER_6
y,numpy.sin(theta),CLUSTER_3,CLUSTER_6
y,numpy.sin(theta),CLUSTER_3,CLUSTER_6
sinmp,numpy.sin(emm*phi),CLUSTER_3,CLUSTER_6
norm,numpy.sqrt(ellArr*(ellArr+1),CLUSTER_3,CLUSTER_6
theta,"numpy.linspace(0,pi-1e-4,Nmax)",CLUSTER_3,CLUSTER_6
phi,"numpy.linspace(-pi+1e-4,pi-1e-4,Nmax)",CLUSTER_3,CLUSTER_6
theta,"numpy.linspace(1e-4,pi-1e-4,Nmax)",CLUSTER_3,CLUSTER_6
phi,"numpy.linspace(-pi+1e-4,pi-1e-4,Nmax)",CLUSTER_3,CLUSTER_6
"PHI,THETA","numpy.meshgrid(phi,theta)",CLUSTER_3,CLUSTER_6
"PHI,THETA","numpy.meshgrid(phi,theta)",CLUSTER_3,CLUSTER_6
l,numpy.array(l),CLUSTER_4,CLUSTER_11
df,"pandas.DataFrame(data,columns=['img']+['c%d'%iforiinrange(10)",CLUSTER_4,CLUSTER_11
data1,"pandas.read_csv(""turnover.csv"")",CLUSTER_4,CLUSTER_11
energies,numpy.empty([len(algorithms),CLUSTER_3,CLUSTER_6
hf_energies,numpy.empty(len(pts),CLUSTER_3,CLUSTER_6
distances,numpy.empty(len(pts),CLUSTER_3,CLUSTER_6
dipoles,numpy.empty([len(algorithms),CLUSTER_3,CLUSTER_6
eval_counts,numpy.empty(len(pts),CLUSTER_3,CLUSTER_6
"fig,(ax0,ax1)","matplotlib.pyplot.subplots(nrows=2,sharex=True,figsize=(6,6)",CLUSTER_5,CLUSTER_5
results,pandas.DataFrame(search.cv_results_),CLUSTER_5,CLUSTER_5
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_5
logistic,"sklearn.linear_model.SGDClassifier(loss='log',penalty='l1',max_iter=100,tol=1e-5,random_state=0)",CLUSTER_5,CLUSTER_5
pipe,"sklearn.pipeline.Pipeline(steps=[('pca',pca)",CLUSTER_5,CLUSTER_5
search,"sklearn.model_selection.GridSearchCV(pipe,param_grid,iid=False,cv=5,return_train_score=False)",CLUSTER_5,CLUSTER_5
train_data,"pandas.read_csv(path_to_data,sep="""",header=None)",CLUSTER_6,CLUSTER_11
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_6,CLUSTER_11
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_6,CLUSTER_11
dists,"numpy.zeros((num_pred,num_data)",CLUSTER_1,CLUSTER_9
y_pred,numpy.zeros(num_pred),CLUSTER_1,CLUSTER_9
y_pred,numpy.zeros(num_pred),CLUSTER_1,CLUSTER_9
features,"numpy.zeros((steps,3)",CLUSTER_1,CLUSTER_9
train_ind,"numpy.ones(l,dtype=bool)",CLUSTER_1,CLUSTER_9
closest_x,numpy.argsort(dst),CLUSTER_1,CLUSTER_9
test_ind,numpy.logical_not(train_ind),CLUSTER_1,CLUSTER_9
Y,numpy.hstack((np.zeros(num_observations),CLUSTER_1,CLUSTER_9
X,"numpy.vstack((x1,x2)",CLUSTER_1,CLUSTER_9
t0,time.time(),CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
t0,time.time(),CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
y_pred[j],"scipy.stats.mode(closest_y,None)",CLUSTER_1,CLUSTER_9
y_pred[j],"scipy.stats.mode(closest_y,None)",CLUSTER_1,CLUSTER_9
country,pandas.get_dummies(df['country']),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('ab_data.csv'),CLUSTER_1,CLUSTER_3
df_country,pandas.read_csv('countries.csv'),CLUSTER_1,CLUSTER_3
p_diffs,numpy.asarray(p_diffs),CLUSTER_1,CLUSTER_3
df2['ab_page'],"numpy.where(df2['group']=='treatment',1,0)",CLUSTER_1,CLUSTER_3
noteIn,"numpy.array(noteIn,dtype=float)",CLUSTER_5,CLUSTER_0
noteOut,"numpy.array(noteOut,dtype=float)",CLUSTER_5,CLUSTER_0
noteIn,"numpy.array(noteIn,dtype=float)",CLUSTER_5,CLUSTER_0
noteOut,"numpy.array(noteOut,dtype=float)",CLUSTER_5,CLUSTER_0
result,"numpy.array([intToNote[indexPitch],intToLength[indexLength]])",CLUSTER_5,CLUSTER_0
result,"numpy.array([intToNote[indexPitch],intToLength[indexLength]])",CLUSTER_5,CLUSTER_0
fake,"numpy.zeros((batch_size,1)",CLUSTER_5,CLUSTER_0
dout,"numpy.concatenate((catNote,catLength)",CLUSTER_5,CLUSTER_0
pattern,"numpy.concatenate((pattern,append)",CLUSTER_5,CLUSTER_0
real,"numpy.ones((batch_size,1)",CLUSTER_5,CLUSTER_0
indexPitch,numpy.argmax(array),CLUSTER_5,CLUSTER_0
indexLength,numpy.argmax(array),CLUSTER_5,CLUSTER_0
din,"numpy.reshape(reshape,(inputSize,seqLength,categories)",CLUSTER_5,CLUSTER_0
din,"numpy.reshape(reshape,(inputSize,seqLength,categories)",CLUSTER_5,CLUSTER_0
prediction_input,"numpy.reshape(pattern,(1,seqLength,categories)",CLUSTER_5,CLUSTER_0
append,numpy.reshape(np.array([indexPitch/float(npitches),CLUSTER_5,CLUSTER_0
shape,numpy.shape(noteIn),CLUSTER_5,CLUSTER_0
cik_df,"pandas.read_sql(text(""selectcik,sic,sic_description,company_name,tickerfromcikwherecik=:cik"")",CLUSTER_8,CLUSTER_4
mean_acc,numpy.zeros((Ks-1),CLUSTER_5,CLUSTER_5
std_acc,numpy.zeros((Ks-1),CLUSTER_5,CLUSTER_5
std_acc[n-1],numpy.std(yhat==y_test),CLUSTER_5,CLUSTER_5
df,pandas.read_csv('teleCust1000t.csv'),CLUSTER_5,CLUSTER_5
X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=4)",CLUSTER_5,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n),CLUSTER_5,CLUSTER_5
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,yhat)",CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('/home/urwa/Documents/side_projects/urban/data/featureData/com_jfk.csv'),CLUSTER_5,CLUSTER_5
train_r2,sklearn.metrics.r2_score(y_train.detach(),CLUSTER_5,CLUSTER_5
test_r2,sklearn.metrics.r2_score(y_test.detach(),CLUSTER_5,CLUSTER_5
train_r2,sklearn.metrics.r2_score(y_train.detach(),CLUSTER_5,CLUSTER_5
test_r2,sklearn.metrics.r2_score(y_test.detach(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.30,random_state=42)",CLUSTER_5,CLUSTER_5
text,"re.sub(r""i'm"",""iam"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""he's"",""heis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""she's"",""sheis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""it's"",""itis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""that's"",""thatis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""what's"",""thatis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""where's"",""whereis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""how's"",""howis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'ll"",""will"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'ve"",""have"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'d"",""would"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""won't"",""willnot"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""can't"",""cannot"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""n't"",""not"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""n'"",""ng"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""'bout"",""about"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""'til"",""until"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""[-()",CLUSTER_0,CLUSTER_7
counter,collections.Counter(words),CLUSTER_0,CLUSTER_7
probs_df,"pandas.DataFrame(np.hstack([probs,y_test.values.reshape(-1,1)",CLUSTER_5,CLUSTER_1
X_fs_df,"pandas.DataFrame(X_fs,columns=features)",CLUSTER_5,CLUSTER_1
ft_pipeline,"sklearn.pipeline.Pipeline([
('cat',experiment_2.get_categorical_pipeline()",CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.2,stratify=y,random_state=1)",CLUSTER_5,CLUSTER_1
cb,matplotlib.pyplot.colorbar(),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(8,5)",CLUSTER_4,CLUSTER_11
imgplot,"matplotlib.pyplot.imshow(X[0],cmap=""gray"")",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.subplot(rows,cols,i+1)",CLUSTER_4,CLUSTER_11
loc,"numpy.arange(1,num_labels+1)",CLUSTER_4,CLUSTER_11
X,"numpy.array(X,dtype='float64')",CLUSTER_4,CLUSTER_11
y,numpy.array(y),CLUSTER_4,CLUSTER_11
X,"numpy.reshape(X,(400,(92*112)",CLUSTER_4,CLUSTER_11
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_4,CLUSTER_11
pca,sklearn.decomposition.PCA(n_components=0.99),CLUSTER_4,CLUSTER_11
clf,sklearn.linear_model.LogisticRegression(C=.001),CLUSTER_4,CLUSTER_11
clf,sklearn.linear_model.LogisticRegression(C=.01),CLUSTER_4,CLUSTER_11
"X_train,X_temp,y_train,y_temp","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_11
"X_val,X_test,y_val,y_test","sklearn.model_selection.train_test_split(X_temp,y_temp,test_size=0.5,random_state=42)",CLUSTER_4,CLUSTER_11
X_sample_scaled,sklearn.preprocessing.scale(X_sample),CLUSTER_4,CLUSTER_11
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_11
clf,sklearn.svm.LinearSVC(C=.001),CLUSTER_4,CLUSTER_11
clf,sklearn.svm.LinearSVC(C=.001),CLUSTER_4,CLUSTER_11
positions,"numpy.ndarray((n+1,self.ndim)",CLUSTER_1,CLUSTER_10
reference,"numpy.array([[0.,0.],[-1.,0.],[-1.,-1.],[-2.,-1.],
[-2.,0.],[-2.,1.],[-1.,1.],[-1.,2.],
[0.,2.],[1.,2.],[0.,2.]])",CLUSTER_1,CLUSTER_10
step,numpy.zeros(ndim),CLUSTER_1,CLUSTER_10
ys_2,"numpy.power(ys,2)",CLUSTER_1,CLUSTER_10
new_1,numpy.array(new_1),CLUSTER_1,CLUSTER_9
x,numpy.where(parabola==255),CLUSTER_1,CLUSTER_9
y,numpy.where(parabola==255),CLUSTER_1,CLUSTER_9
"values,freq","numpy.unique(img,return_counts=True)",CLUSTER_1,CLUSTER_9
"params,_","scipy.optimize.curve_fit(f=parabola_eqn_2,xdata=x,ydata=y)",CLUSTER_1,CLUSTER_9
window,"numpy.cumsum(np.insert(x_array,0,0)",CLUSTER_1,CLUSTER_9
average,numpy.average(y_data),CLUSTER_1,CLUSTER_9
average_weight,numpy.average(weighted_mean),CLUSTER_1,CLUSTER_9
y_data,"numpy.load(""6_dataset.pickle.npy"")",CLUSTER_1,CLUSTER_9
peaks,"scipy.signal.find_peaks(stretched_weighted_mean,width=3,distance=200,prominence=3,wlen=150)",CLUSTER_1,CLUSTER_9
test_df,"pandas.read_csv(""../data/test_WyRytb0.csv"")",CLUSTER_1,CLUSTER_3
sample_sub,"pandas.read_csv(""../data/sample_submission_CH2mq5Z.csv"")",CLUSTER_1,CLUSTER_3
df,"pandas.read_csv(""../data/train/train.csv"")",CLUSTER_1,CLUSTER_3
y,numpy.array([i*-2+1+np.random.normal(),CLUSTER_1,CLUSTER_9
y_hat,numpy.array([a+b*iforiinx]),CLUSTER_1,CLUSTER_9
y_fit,numpy.array([a+b*iforiinx_val]),CLUSTER_1,CLUSTER_9
y_hat,numpy.array([a+b*iforiinx]),CLUSTER_1,CLUSTER_9
y_fit,numpy.array([a+b*iforiinx_val]),CLUSTER_1,CLUSTER_9
residuals,numpy.zeros(len(y),CLUSTER_1,CLUSTER_9
ci_lo,numpy.zeros(len(x_val),CLUSTER_1,CLUSTER_9
ci_hi,numpy.zeros(len(x_val),CLUSTER_1,CLUSTER_9
resid,numpy.zeros(len(y),CLUSTER_1,CLUSTER_9
ci_lo,numpy.zeros(len(x_val),CLUSTER_1,CLUSTER_9
ci_hi,numpy.zeros(len(x_val),CLUSTER_1,CLUSTER_9
a,numpy.mean(y),CLUSTER_1,CLUSTER_9
a,numpy.mean(y),CLUSTER_1,CLUSTER_9
Sxy,numpy.sum(x*y),CLUSTER_1,CLUSTER_9
Sxx,numpy.sum(x**2),CLUSTER_1,CLUSTER_9
SSE,numpy.sum((y-y_hat),CLUSTER_1,CLUSTER_9
SSR,numpy.sum((y_hat-np.mean(y),CLUSTER_1,CLUSTER_9
tms,numpy.sum((y-np.mean(y),CLUSTER_1,CLUSTER_9
Sxy,numpy.sum(x*y),CLUSTER_1,CLUSTER_9
Sxx,numpy.sum(x**2),CLUSTER_1,CLUSTER_9
SSE,numpy.sum((y-y_hat),CLUSTER_1,CLUSTER_9
SSR,numpy.sum((y_hat-np.mean(y),CLUSTER_1,CLUSTER_9
tms,numpy.sum((y-np.mean(y),CLUSTER_1,CLUSTER_9
x_val,numpy.linspace(min(x),CLUSTER_1,CLUSTER_9
x_val,numpy.linspace(min(x),CLUSTER_1,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_9
"fig,((ax0,ax1),(ax2,_))","matplotlib.pyplot.subplots(nrows=2,ncols=2)",CLUSTER_1,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_9
"fig,((ax0,ax1),(ax2,_))","matplotlib.pyplot.subplots(nrows=2,ncols=2)",CLUSTER_1,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_9
r,math.sqrt(Rsq),CLUSTER_1,CLUSTER_9
SE_b,math.sqrt(MSE/Sxx),CLUSTER_1,CLUSTER_9
SE_b,math.sqrt(MSE/Sxx),CLUSTER_1,CLUSTER_9
SE_a,math.sqrt(MSE*(1/len(y),CLUSTER_1,CLUSTER_9
"w_shap,p_shap",scipy.stats.shapiro(residuals),CLUSTER_1,CLUSTER_9
data,pandas.read_csv('data/telecom_data.csv'),CLUSTER_7,CLUSTER_3
train_df,pandas.DataFrame(metadata),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(metadata),CLUSTER_7,CLUSTER_8
required_plots_df,"pandas.DataFrame(predictions_LR,columns=['predictions_LR'])",CLUSTER_7,CLUSTER_8
train_plot_df,pandas.DataFrame(np.array(y_train_pred),CLUSTER_7,CLUSTER_8
df_stop_words,"pandas.read_csv(""stop_words.txt"",delimiter=',')",CLUSTER_7,CLUSTER_8
df_stop_words,"pandas.read_csv(""stop_words.txt"",delimiter=',')",CLUSTER_7,CLUSTER_8
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_8
required_plots_df['true_labels'],numpy.array(labels_test),CLUSTER_7,CLUSTER_8
train_plot_df['labels_train'],numpy.array(labels_train),CLUSTER_7,CLUSTER_8
sorted_index,numpy.argsort(similarity),CLUSTER_7,CLUSTER_8
"mu,sd",numpy.mean(a),CLUSTER_7,CLUSTER_8
params,"numpy.logspace(-4,4,num=9)",CLUSTER_7,CLUSTER_8
processed_feature,"re.sub(r'\W','',str(tweets[sentence])",CLUSTER_7,CLUSTER_8
processed_feature,"re.sub(r'\s+[a-zA-Z]\s+','',processed_feature)",CLUSTER_7,CLUSTER_8
processed_feature,"re.sub(r'\s+','',processed_feature,flags=re.I)",CLUSTER_7,CLUSTER_8
processed_feature,"re.sub(r'^b\s+','',processed_feature)",CLUSTER_7,CLUSTER_8
train3,"scipy.sparse.hstack((train1,train2)",CLUSTER_7,CLUSTER_8
test_curve,"matplotlib.pyplot.errorbar(params,test_mean_hp,color=sns.xkcd_rgb[""palered""],yerr=test_ci_hp)",CLUSTER_7,CLUSTER_8
train_curve,"matplotlib.pyplot.errorbar(params,train_mean_hp,color=sns.xkcd_rgb[""denimblue""],yerr=train_ci_hp)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(15,6)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_7,CLUSTER_8
p1,"seaborn.countplot(x=""year"",data=df,ax=axes[0])",CLUSTER_7,CLUSTER_8
p2,"seaborn.countplot(x=""year"",data=df,hue='label',ax=axes[1])",CLUSTER_7,CLUSTER_8
p1,"seaborn.countplot(x=""claimant"",data=claimant_df,ax=axes[0])",CLUSTER_7,CLUSTER_8
p2,"seaborn.countplot(x=""claimant"",data=claimant_df,hue='label',ax=axes[1])",CLUSTER_7,CLUSTER_8
p1,"seaborn.countplot(x=""true_labels"",data=required_plots_df,ax=axes[0])",CLUSTER_7,CLUSTER_8
p2,"seaborn.countplot(x=""predictions_LR"",data=required_plots_df,ax=axes[1])",CLUSTER_7,CLUSTER_8
"features_train,features_test,labels_train,labels_test","sklearn.model_selection.train_test_split(train3,y,test_size=0.3,random_state=10)",CLUSTER_7,CLUSTER_8
"features_train,features_test,target_train,target_test","sklearn.model_selection.train_test_split(features,target,test_size=0.3,stratify=target)",CLUSTER_7,CLUSTER_8
"features_train,features_test,target_train,target_test","sklearn.model_selection.train_test_split(features,target,test_size=0.3,stratify=target)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
classifier,"sklearn.linear_model.LogisticRegression(C=params['c'],solver='liblinear')",CLUSTER_7,CLUSTER_8
classifier,"sklearn.linear_model.LogisticRegression(C=params[i],solver='liblinear')",CLUSTER_7,CLUSTER_8
selector,"sklearn.feature_selection.SelectPercentile(f_classif,percentile=10)",CLUSTER_7,CLUSTER_8
conf_mat_train,"sklearn.metrics.confusion_matrix(train_plot_df['labels_train'],train_plot_df['y_train_pred'])",CLUSTER_7,CLUSTER_8
conf_mat_train,"sklearn.metrics.confusion_matrix(required_plots_df['true_labels'],required_plots_df['predictions_LR'])",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.StratifiedKFold(n_splits=10,random_state=2017)",CLUSTER_7,CLUSTER_8
train_score,"sklearn.metrics.accuracy_score(target_train,train_target_pred)",CLUSTER_7,CLUSTER_8
test_score,"sklearn.metrics.accuracy_score(target_test,test_target_pred)",CLUSTER_7,CLUSTER_8
mashed_str,"re.sub("",\Z"","""",mashed_str)",CLUSTER_0,CLUSTER_11
parsed_lines,"re.split('\n',parsed_content)",CLUSTER_0,CLUSTER_11
parsed_words1,"re.split('[\t]+',parsed_line)",CLUSTER_0,CLUSTER_11
parsed_words2,"re.split('\,',parsed_words1[1])",CLUSTER_0,CLUSTER_11
dataset_desc_list,"re.split('[]+',dataset_desc)",CLUSTER_0,CLUSTER_11
org_url_dict,json.load(f),CLUSTER_0,CLUSTER_11
result_json,json.load(f),CLUSTER_0,CLUSTER_11
rsc_data,"pandas.Series({
'name':dataset_name,
'description':dataset_desc_list,
'attribution':package_author,
'column_field_name':'',
'columns_name':'',
'type':'file',
'categories':group_list,
'domain_category':group_domain,
'domain_tags':tag_list,
'provenance':'official',
'download_count':download_count,
'page_views_last_month':page_views_last_month,
'page_views_last_week':page_views_last_week,
'page_views_total':page_views_total,
'page_views_total_log':page_views_total_log,
'domain':domain_name,
'mash':mash_list,
'big_mash':big_mash_list
})",CLUSTER_0,CLUSTER_11
pd_data_init,"pandas.DataFrame(index=[],columns=[
'name',
'description',
'attribution',
'column_field_name',
'columns_name',
'type',
'categories',
'domain_category',
'domain_tags',
'provenance',
'download_count',
'page_views_last_month',
'page_views_last_week',
'page_views_total',
'page_views_total_log',
'domain',
'mash',
'big_mash'
])",CLUSTER_0,CLUSTER_11
amount,"random.randint(1,maxValue)",CLUSTER_10,CLUSTER_4
"fig,ax","matplotlib.pyplot.subplots(10,10,figsize=(8,8)",CLUSTER_7,CLUSTER_9
n_components,"numpy.arange(1,21)",CLUSTER_7,CLUSTER_9
n_components,"numpy.arange(50,210,10)",CLUSTER_7,CLUSTER_9
X_stretched,"numpy.dot(X,rng.randn(2,2)",CLUSTER_7,CLUSTER_9
angle,"numpy.degrees(np.arctan2(U[1,0],U[0,0])",CLUSTER_7,CLUSTER_9
"U,s,Vt",numpy.linalg.svd(covariance),CLUSTER_7,CLUSTER_9
kmeans,"sklearn.cluster.KMeans(4,random_state=0)",CLUSTER_7,CLUSTER_9
kmeans,"sklearn.cluster.KMeans(n_clusters=4,random_state=0)",CLUSTER_7,CLUSTER_9
kmeans,"sklearn.cluster.KMeans(n_clusters=4,random_state=0)",CLUSTER_7,CLUSTER_9
"Xmoon,ymoon","sklearn.datasets.make_moons(200,noise=.05,random_state=0)",CLUSTER_7,CLUSTER_9
digits,sklearn.datasets.load_digits(),CLUSTER_7,CLUSTER_9
pca,"sklearn.decomposition.PCA(0.99,whiten=True)",CLUSTER_7,CLUSTER_9
word_to_vec_map[currWordFromGlove],"numpy.array(line[1:],dtype=np.float64)",CLUSTER_0,CLUSTER_3
X,numpy.asarray(phrases),CLUSTER_0,CLUSTER_3
Y,"numpy.asarray(emoji,dtype=(int)",CLUSTER_0,CLUSTER_3
avgReturn,"numpy.zeros((50,)",CLUSTER_0,CLUSTER_3
pred,"numpy.zeros((m,1)",CLUSTER_0,CLUSTER_3
b,"numpy.zeros((n_y,)",CLUSTER_0,CLUSTER_3
XReturn,"numpy.zeros((m,max_len)",CLUSTER_0,CLUSTER_3
embeddingMatrix,"numpy.zeros((vocabularyLength,embeddingLength)",CLUSTER_0,CLUSTER_3
Z,"numpy.dot(W,avg)",CLUSTER_0,CLUSTER_3
z,"numpy.dot(W,avg)",CLUSTER_0,CLUSTER_3
dW,"numpy.dot(dz.reshape(n_y,1)",CLUSTER_0,CLUSTER_3
pred[j],numpy.argmax(A),CLUSTER_0,CLUSTER_3
val,numpy.argmax(output[0]),CLUSTER_0,CLUSTER_3
exp,numpy.exp(z),CLUSTER_0,CLUSTER_3
Y,numpy.eye(C),CLUSTER_0,CLUSTER_3
newarray,numpy.eye(5),CLUSTER_0,CLUSTER_3
newarray1,numpy.eye(5),CLUSTER_0,CLUSTER_3
filetest,pandas.read_csv('data/emojify_data.csv'),CLUSTER_0,CLUSTER_3
y,"numpy.array([3,6,9,12])",CLUSTER_3,CLUSTER_6
vector_for_char_a,"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
bh,"numpy.zeros((hidden_size,1)",CLUSTER_8,CLUSTER_3
by,"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
x,"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
x,"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
hprev,"numpy.zeros((hidden_size,1)",CLUSTER_8,CLUSTER_3
hprev,"numpy.zeros((hidden_size,1)",CLUSTER_8,CLUSTER_3
"dWxh,dWhh,dWhy",numpy.zeros_like(Wxh),CLUSTER_8,CLUSTER_3
"dbh,dby",numpy.zeros_like(bh),CLUSTER_8,CLUSTER_3
dhnext,numpy.zeros_like(hs[0]),CLUSTER_8,CLUSTER_3
"mWxh,mWhh,mWhy",numpy.zeros_like(Wxh),CLUSTER_8,CLUSTER_3
"mbh,mby",numpy.zeros_like(bh),CLUSTER_8,CLUSTER_3
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_8,CLUSTER_3
dWhy+,"numpy.dot(dy,hs[t].T)",CLUSTER_8,CLUSTER_3
dh,"numpy.dot(Why.T,dy)",CLUSTER_8,CLUSTER_3
dWxh+,"numpy.dot(dhraw,xs[t].T)",CLUSTER_8,CLUSTER_3
dWhh+,"numpy.dot(dhraw,hs[t-1].T)",CLUSTER_8,CLUSTER_3
dhnext,"numpy.dot(Whh.T,dhraw)",CLUSTER_8,CLUSTER_3
y,"numpy.dot(Why,h)",CLUSTER_8,CLUSTER_3
ps[t],numpy.exp(ys[t]),CLUSTER_8,CLUSTER_3
p,numpy.exp(y),CLUSTER_8,CLUSTER_3
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_8,CLUSTER_3
h,"numpy.tanh(np.dot(Wxh,x)",CLUSTER_8,CLUSTER_3
hs[-1],numpy.copy(hprev),CLUSTER_8,CLUSTER_3
dy,numpy.copy(ps[t]),CLUSTER_8,CLUSTER_3
data,"numpy.column_stack((tt,xk,qk)",CLUSTER_1,CLUSTER_9
response,requests.get('https://jsonplaceholder.typicode.com/todos'),CLUSTER_9,CLUSTER_2
response,requests.get('https://api.github.com/events'),CLUSTER_9,CLUSTER_2
data,pandas.DataFrame(results),CLUSTER_9,CLUSTER_2
data,pandas.DataFrame(response.json(),CLUSTER_9,CLUSTER_2
flattened,pandas.DataFrame(dict(data[column]),CLUSTER_9,CLUSTER_2
data,"pandas.concat([data,flattened],axis=1)",CLUSTER_9,CLUSTER_2
ds,pandas.read_csv('./anonymized_data.csv'),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
ages,"pandas.DataFrame({""age"":[18,22,25,27,7,21,23,37,30,61,45,41,9,18,80,100]})",CLUSTER_4,CLUSTER_11
"ages[""equal_width_age""]","pandas.cut(ages[""age""],4)",CLUSTER_4,CLUSTER_11
"ages[""customized_age_grd""]","pandas.cut(ages[""age""],bin)",CLUSTER_4,CLUSTER_11
"ages[""equal_freq_age""]","pandas.qcut(ages[""age""],4)",CLUSTER_4,CLUSTER_11
app_train['CNT_CHILDREN_GROUP'],"pandas.cut(app_train['CNT_CHILDREN'].values,cut_rule,include_lowest=True)",CLUSTER_4,CLUSTER_11
app_train,pandas.read_csv(f_app),CLUSTER_4,CLUSTER_11
df,pandas.read_csv('newsdataset1.csv'),CLUSTER_8,CLUSTER_4
l,pandas.DataFrame(difference),CLUSTER_8,CLUSTER_3
my_predict,pandas.DataFrame(list(returns(signals),CLUSTER_8,CLUSTER_3
ticker_df,pandas.read_csv('stock_data/ticker_data.csv'),CLUSTER_8,CLUSTER_3
factor_df,pandas.read_csv('stock_data/factor_data.csv'),CLUSTER_8,CLUSTER_3
x,"numpy.ndarray.astype(x,""float32"")",CLUSTER_8,CLUSTER_3
my_weights,numpy.zeros(1000),CLUSTER_8,CLUSTER_3
sharpe_ratio,numpy.sqrt(252),CLUSTER_8,CLUSTER_3
features_dir,os.getcwd(),CLUSTER_4,CLUSTER_11
monkey,os.listdir(features_dir),CLUSTER_4,CLUSTER_11
def_scores,"pandas.DataFrame(dat,columns=cols,index=mindex)",CLUSTER_4,CLUSTER_11
scores_frame,"pandas.DataFrame(dat,columns=cols,index=mindex)",CLUSTER_4,CLUSTER_11
mortality_percents,"pandas.concat([live_percent,dead_percent],axis=1)",CLUSTER_4,CLUSTER_11
scores_report,"sklearn.metrics.classification_report(y_true,y_pred)",CLUSTER_4,CLUSTER_11
scores_report,"sklearn.metrics.classification_report(y_true,y_pred)",CLUSTER_4,CLUSTER_11
scores_report,"sklearn.metrics.classification_report(y_true,y_pred)",CLUSTER_4,CLUSTER_11
scores_report,"sklearn.metrics.classification_report(y_true,y_pred)",CLUSTER_4,CLUSTER_11
"surv_f1,mort_f1","sklearn.metrics.f1_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv_f1,mort_f1","sklearn.metrics.f1_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv_f1,mort_f1","sklearn.metrics.f1_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv,mort","sklearn.metrics.recall_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv,mort","sklearn.metrics.recall_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv,mort","sklearn.metrics.recall_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
default_scores,"sklearn.model_selection.cross_val_score(Tree,X_train,y_train,cv=5,scoring='f1')",CLUSTER_4,CLUSTER_11
default_scores,"sklearn.model_selection.cross_val_score(Tree,X_train,y_train,cv=5,scoring='f1_macro')",CLUSTER_4,CLUSTER_11
default_scores,"sklearn.model_selection.cross_val_score(Tree,X_train,y_train,cv=5,scoring='recall')",CLUSTER_4,CLUSTER_11
default_scores,"sklearn.model_selection.cross_val_score(Tree,X_train,y_train,cv=5,scoring='recall_macro')",CLUSTER_4,CLUSTER_11
optimized_scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='f1')",CLUSTER_4,CLUSTER_11
optimized_scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='f1_macro')",CLUSTER_4,CLUSTER_11
optimized_scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='recall')",CLUSTER_4,CLUSTER_11
optimized_scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='recall_macro')",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.20,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.30,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.30,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=testes_size,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.20,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.50,random_state=42)",CLUSTER_4,CLUSTER_11
clf,"sklearn.model_selection.GridSearchCV(classifiers[key][0],classifiers[key][1],cv=5,
scoring=score)",CLUSTER_4,CLUSTER_11
clf,"sklearn.model_selection.GridSearchCV(classifiers[key][0],classifiers[key][1],cv=5,
scoring=score)",CLUSTER_4,CLUSTER_11
LSVC,sklearn.svm.LinearSVC(),CLUSTER_4,CLUSTER_11
LSVC,sklearn.svm.LinearSVC(random_state=42),CLUSTER_4,CLUSTER_11
SVC,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_11
SVC,sklearn.svm.SVC(random_state=42),CLUSTER_4,CLUSTER_11
MLP,sklearn.neural_network.MLPClassifier(),CLUSTER_4,CLUSTER_11
MLP,sklearn.neural_network.MLPClassifier(random_state=42),CLUSTER_4,CLUSTER_11
classifiers[key][0],"sklearn.neural_network.MLPClassifier(random_state=42,
hidden_layer_sizes=(input_layer,middle_layer)",CLUSTER_4,CLUSTER_11
Tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_11
Tree,sklearn.tree.DecisionTreeClassifier(random_state=42),CLUSTER_4,CLUSTER_11
Tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_11
Kneighb,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_11
Kneighb,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_11
df2_stand,"pandas.DataFrame({'type':['TV','radio','newspaper'],'coef':regr2.coef_})",CLUSTER_7,CLUSTER_5
df2_unstand,"pandas.DataFrame({'type':['TV','radio','newspaper'],'coef':regr.coef_})",CLUSTER_7,CLUSTER_5
exog,pandas.DataFrame({'TV':x_mesh.flatten(),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv('http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv',index_col=0)",CLUSTER_7,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr2,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr3,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr4,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr5,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_7,CLUSTER_5
x_mesh,"numpy.arange(0,300)",CLUSTER_7,CLUSTER_5
y_mesh,"numpy.arange(0,50)",CLUSTER_7,CLUSTER_5
x_mesh,"numpy.arange(0,300)",CLUSTER_7,CLUSTER_5
y_mesh,"numpy.arange(0,50)",CLUSTER_7,CLUSTER_5
x_mesh,"numpy.arange(0,300)",CLUSTER_7,CLUSTER_5
y_mesh,"numpy.arange(0,50)",CLUSTER_7,CLUSTER_5
num_iterations_array,"numpy.arange(0,10)",CLUSTER_7,CLUSTER_5
num_iterations_array,"numpy.arange(0,10)",CLUSTER_7,CLUSTER_5
num_iterations_array,"numpy.arange(0,10)",CLUSTER_7,CLUSTER_5
learning_rates,"numpy.logspace(-4,-3,100)",CLUSTER_7,CLUSTER_5
"x_mesh,y_mesh","numpy.meshgrid(x_mesh,y_mesh)",CLUSTER_7,CLUSTER_5
"x_mesh,y_mesh","numpy.meshgrid(x_mesh,y_mesh)",CLUSTER_7,CLUSTER_5
"x_mesh,y_mesh","numpy.meshgrid(x_mesh,y_mesh)",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
price,"pandas.DataFrame({ticker:data['AdjClose']forticker,datainall_data.items()",CLUSTER_1,CLUSTER_3
volume,"pandas.DataFrame({ticker:data['Volume']forticker,datainall_data.items()",CLUSTER_1,CLUSTER_3
"figure3,ax3",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"figure1,ax1",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"figure2,ax2",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"figure3,ax3",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
labels,"numpy.array([1,2,3,0,2,1])",CLUSTER_1,CLUSTER_9
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
corona_data,pandas.read_csv(dir_path+data_filename),CLUSTER_8,CLUSTER_3
targets,numpy.array(targets),CLUSTER_5,CLUSTER_10
results,numpy.zeros((len(sequences),CLUSTER_5,CLUSTER_10
data,"numpy.concatenate((training_data,testing_data)",CLUSTER_5,CLUSTER_10
targets,"numpy.concatenate((training_targets,testing_targets)",CLUSTER_5,CLUSTER_10
data,"numpy.concatenate((training_data,testing_data)",CLUSTER_5,CLUSTER_10
targets,"numpy.concatenate((training_targets,testing_targets)",CLUSTER_5,CLUSTER_10
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(data,targets,test_size=0.2)",CLUSTER_5,CLUSTER_10
collections1,"requests.get(
collection_url,
parameters={'load_amount':10,
'offset':0}
)",CLUSTER_8,CLUSTER_2
events0,"requests.get(calendar_url,parameters={'date':'2018-11'})",CLUSTER_8,CLUSTER_2
dataset,pandas.read_csv('Position_Salaries.csv'),CLUSTER_5,CLUSTER_5
X_grid,numpy.arange(min(sc_X.inverse_transform(X),CLUSTER_5,CLUSTER_5
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
sc_Y,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
regressor,sklearn.svm.SVR(kernel='rbf'),CLUSTER_5,CLUSTER_5
intr_features,"pandas.DataFrame(res,columns=['Attack','Defense','Attack^2','AttackxDefense','Defense^2'])",CLUSTER_5,CLUSTER_9
new_df,"pandas.DataFrame([[95,75],[121,120],[77,60]],
columns=['Attack','Defense'])",CLUSTER_5,CLUSTER_9
new_intr_features,"pandas.DataFrame(new_res,
columns=['Attack','Defense',
'Attack^2','AttackxDefense','Defense^2'])",CLUSTER_5,CLUSTER_9
fcc_survey_df['Age_bin_custom_range'],pandas.cut(np.array(fcc_survey_df['Age']),CLUSTER_5,CLUSTER_9
fcc_survey_df['Age_bin_custom_label'],pandas.cut(np.array(fcc_survey_df['Age']),CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_quantile_range'],"pandas.qcut(fcc_survey_df['Income'],
q=quantile_list)",CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_quantile_label'],"pandas.qcut(fcc_survey_df['Income'],
q=quantile_list,labels=quantile_labels)",CLUSTER_5,CLUSTER_9
poke_df,"pandas.read_csv('datasets/Pokemon.csv',encoding='utf-8')",CLUSTER_5,CLUSTER_9
popsong_df,"pandas.read_csv('datasets/song_views.csv',encoding='utf-8')",CLUSTER_5,CLUSTER_9
items_popularity,"pandas.read_csv('datasets/item_popularity.csv',encoding='utf-8')",CLUSTER_5,CLUSTER_9
fcc_survey_df,"pandas.read_csv('datasets/fcc_2016_coder_survey_subset.csv',encoding='utf-8')",CLUSTER_5,CLUSTER_9
qvl,"matplotlib.pyplot.axvline(quantile,color='r')",CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
watched,numpy.array(popsong_df['listen_count']),CLUSTER_5,CLUSTER_9
items_popularity['popularity_scale_10'],numpy.array(np.round((items_popularity['pop_percent']*10),CLUSTER_5,CLUSTER_9
items_popularity['popularity_scale_100'],numpy.array(np.round((items_popularity['pop_percent']*100),CLUSTER_5,CLUSTER_9
fcc_survey_df['Age_bin_round'],numpy.array(np.floor(numpy.array(fcc_survey_df['Age']),CLUSTER_5,CLUSTER_9
income,numpy.array(fcc_survey_df['Income']),CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_log'],numpy.log((1+fcc_survey_df['Income']),CLUSTER_5,CLUSTER_9
"l,opt_lambda",scipy.stats.boxcox(income_clean),CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_boxcox_lambda_0'],scipy.stats.boxcox((1+fcc_survey_df['Income']),CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_boxcox_lambda_opt'],"scipy.stats.boxcox(fcc_survey_df['Income'],
lmbda=opt_lambda)",CLUSTER_5,CLUSTER_9
bn,sklearn.preprocessing.Binarizer(threshold=0.9),CLUSTER_5,CLUSTER_9
pf,"sklearn.preprocessing.PolynomialFeatures(degree=2,interaction_only=False,include_bias=False)",CLUSTER_5,CLUSTER_9
ls1,os.listdir('color'),CLUSTER_2,CLUSTER_6
ls2,os.listdir('color/'+i),CLUSTER_2,CLUSTER_6
ls1,os.listdir('color'),CLUSTER_2,CLUSTER_6
ls2,os.listdir('color/'+i),CLUSTER_2,CLUSTER_6
xvap,os.listdir('I_want_to_test_it/'),CLUSTER_2,CLUSTER_6
im1,numpy.asarray(sm.imread('color/'+i+'/'+j),CLUSTER_2,CLUSTER_6
im1,numpy.asarray(sm.imread('I_want_to_test_it/'+i),CLUSTER_2,CLUSTER_6
X,"numpy.zeros((count,256,256,3)",CLUSTER_2,CLUSTER_6
Y,"numpy.zeros((count,1)",CLUSTER_2,CLUSTER_6
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
reduced['bin'],"pandas.cut(reduced['price'],bins)",CLUSTER_1,CLUSTER_9
mean_price_and_count,"pandas.merge(listings_price,listings_number,
left_index=True,right_index=True,
suffixes=('_mean','_count')",CLUSTER_1,CLUSTER_9
mean_price_and_count,"pandas.merge(listings_price,listings_number,
left_on=""host_id"",right_on=""host_id"",
suffixes=('_mean','_count')",CLUSTER_1,CLUSTER_9
listings_and_price_with_review,"pandas.merge(listings_and_price_with_review,
num_reviews,
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
listings_with_reviews,"pandas.merge(listings,listings_and_price_with_review[['listing_id','count']].rename(columns={'count':'num_reviews'})",CLUSTER_1,CLUSTER_9
listings_and_comment_length,"pandas.merge(listings,mean_length_by_listing,
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
listings_and_comment_length,"pandas.merge(listings,reviews,
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
host_year_reviews,"pandas.merge(reviews,listings_with_reviews,
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
listing_multireviewers,"pandas.merge(listings_with_reviews[['listing_id','neighbourhood']],
multireviews[['listing_id','reviewer_id']],
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
listings,"pandas.read_csv(""./data/Edinburgh_AirBnb_listings_2.csv"")",CLUSTER_1,CLUSTER_9
reviews,"pandas.read_csv(""./data/Edinburgh_reviews_reduced.csv"")",CLUSTER_1,CLUSTER_9
allnbh_distances,"scipy.spatial.distance_matrix(coords,coords,p=2)",CLUSTER_1,CLUSTER_9
allnbh_distances,"scipy.spatial.distance_matrix(coords,coords,p=2)",CLUSTER_1,CLUSTER_9
mask,"numpy.ones(allnbh_distances.shape,dtype=bool)",CLUSTER_1,CLUSTER_9
bins,"numpy.linspace(0,21,22)",CLUSTER_1,CLUSTER_9
bins,"numpy.linspace(
np.min(reduced.price)",CLUSTER_1,CLUSTER_9
"hist,bin_edges","numpy.histogram(listings['minimum_nights'][listings.room_type==room_type],bins)",CLUSTER_1,CLUSTER_9
pbb,seaborn.color_palette(wavelength_to_rgb(clip(400+0.35*(pb_centers-pb_centers.min(),CLUSTER_10,CLUSTER_4
label_indices,numpy.where(labels==label),CLUSTER_2,CLUSTER_7
mis_idxs_list,numpy.where(misclassified==True),CLUSTER_2,CLUSTER_7
labels_int_vec,"numpy.argmax(labels,axis=1)",CLUSTER_2,CLUSTER_7
label_unique,numpy.sort(np.unique(labels),CLUSTER_2,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_7
aucs,numpy.array(aucs),CLUSTER_5,CLUSTER_1
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
cv,"sklearn.model_selection.StratifiedKFold(n_splits=num_splits,
shuffle=True,
random_state=seed)",CLUSTER_5,CLUSTER_1
auc,"sklearn.model_selection.cross_val_score(estimator,X=pc,y=labels,
cv=cv,scoring=""roc_auc"",
n_jobs=-1,verbose=3)",CLUSTER_5,CLUSTER_1
scores,numpy.zeros((len(n_clusters_range),CLUSTER_5,CLUSTER_10
n_clusters_range,"numpy.linspace(2,n_samples,10)",CLUSTER_5,CLUSTER_10
n_clusters_range,"numpy.linspace(2,100,10)",CLUSTER_5,CLUSTER_10
t0,time.time(),CLUSTER_5,CLUSTER_10
t0,time.time(),CLUSTER_5,CLUSTER_10
lag,"numpy.arange(-mid_idx,mid_idx+1)",CLUSTER_1,CLUSTER_10
signal,numpy.array(data_str.split(),CLUSTER_1,CLUSTER_10
spike,numpy.zeros(2*len(w),CLUSTER_1,CLUSTER_10
acf,"numpy.correlate(w,w,mode=""full"")",CLUSTER_1,CLUSTER_10
b,"numpy.correlate(spike,w)",CLUSTER_1,CLUSTER_10
acf,"numpy.correlate(tr,tr,mode=""full"")",CLUSTER_1,CLUSTER_10
tr_filtered,"numpy.convolve(f,tr)",CLUSTER_1,CLUSTER_10
A,"numpy.squeeze([np.roll(acf,i)",CLUSTER_1,CLUSTER_10
A,"numpy.squeeze([np.roll(acf,i)",CLUSTER_1,CLUSTER_10
f,"numpy.insert(f,0,np.zeros(alpha-1)",CLUSTER_1,CLUSTER_10
f,"numpy.insert(f,0,1)",CLUSTER_1,CLUSTER_10
b,"numpy.pad(acf[mid_idx+alpha:],pad_width=(0,alpha)",CLUSTER_1,CLUSTER_10
f,"numpy.linalg.solve(A,b)",CLUSTER_1,CLUSTER_10
f,"numpy.linalg.solve(A,b)",CLUSTER_1,CLUSTER_10
history2,"json.load(open(his_file,'r')",CLUSTER_2,CLUSTER_11
steps_per_epoch,numpy.ceil(train_gen.samples/batch_size),CLUSTER_2,CLUSTER_11
car_data,"pandas.DataFrame({""CarMake"":series,""Color"":colors})",CLUSTER_8,CLUSTER_4
series,"pandas.Series([""BMW"",""Toyota"",""Audi""])",CLUSTER_8,CLUSTER_4
colors,"pandas.Series([""Red"",""Blue"",""White""])",CLUSTER_8,CLUSTER_4
animals,"pandas.Series(['Tiger','Pandas','Lion','Snake'],index=[0,2,2,5])",CLUSTER_8,CLUSTER_4
car_sales,pandas.read_csv('car-sales.csv'),CLUSTER_8,CLUSTER_4
advertising,"pandas.read_csv(""C:/Users/sudha/Desktop/csv/advertising.csv"")",CLUSTER_7,CLUSTER_8
MSE,"numpy.sqrt(mean_squared_error(y_test,y_pred)",CLUSTER_7,CLUSTER_8
corrs,"numpy.corrcoef(x_train,y_train)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
"x_train_lm,x_test_lm,y_train_lm,y_test_lm","sklearn.model_selection.train_test_split(x,y,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
r_squared,"sklearn.metrics.r2_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
xx,numpy.array(xx),CLUSTER_3,CLUSTER_6
yy,numpy.array(yy),CLUSTER_3,CLUSTER_6
r_yy,numpy.array(r_yy),CLUSTER_3,CLUSTER_6
y_p,numpy.array(xMat*ws),CLUSTER_3,CLUSTER_6
y,"numpy.array([1,2])",CLUSTER_3,CLUSTER_6
a,"numpy.array([[1,2],[3,4]])",CLUSTER_3,CLUSTER_6
b,"numpy.array([2,3])",CLUSTER_3,CLUSTER_6
X,"numpy.empty((M,x.shape[0])",CLUSTER_3,CLUSTER_6
err,"numpy.dot(X,w.reshape(w.shape[0],1)",CLUSTER_3,CLUSTER_6
err,"numpy.dot(X,w.reshape(w.shape[0],1)",CLUSTER_3,CLUSTER_6
predict_y,"numpy.dot(X,W_k.reshape(W_k.shape[0],1)",CLUSTER_3,CLUSTER_6
X,numpy.transpose(X),CLUSTER_3,CLUSTER_6
X,numpy.float64(X),CLUSTER_3,CLUSTER_6
x,numpy.float64(x),CLUSTER_3,CLUSTER_6
y,numpy.float64(y),CLUSTER_3,CLUSTER_6
xMat,numpy.mat(xArr),CLUSTER_3,CLUSTER_6
yMat,numpy.mat(yArr),CLUSTER_3,CLUSTER_6
xMat,numpy.mat(xArr),CLUSTER_3,CLUSTER_6
yMat,numpy.mat(yArr),CLUSTER_3,CLUSTER_6
weights,numpy.mat(np.eye(m),CLUSTER_3,CLUSTER_6
y,numpy.mat(y),CLUSTER_3,CLUSTER_6
y,math.sin(x),CLUSTER_3,CLUSTER_6
correct,numpy.squeeze(predicted.eq(labels.data.view_as(predicted),CLUSTER_6,CLUSTER_10
preds,numpy.squeeze(net(images),CLUSTER_6,CLUSTER_10
img,numpy.squeeze(images[idx]),CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(30,10)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(30,10)",CLUSTER_6,CLUSTER_10
titanic_df,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_3
cabin_df,pandas.DataFrame(levels),CLUSTER_7,CLUSTER_3
fig,"seaborn.FacetGrid(titanic_df,hue=""Sex"",aspect=4)",CLUSTER_7,CLUSTER_3
fig,"seaborn.FacetGrid(titanic_df,hue=""person"",aspect=4)",CLUSTER_7,CLUSTER_3
fig,"seaborn.FacetGrid(titanic_df,hue=""Pclass"",aspect=4)",CLUSTER_7,CLUSTER_3
movies,"pandas.concat([movies_sheet1,movies_sheet2,movies_sheet3])",CLUSTER_1,CLUSTER_3
movies,pandas.read_excel(file),CLUSTER_1,CLUSTER_3
movies_sheet1,"pandas.read_excel(file,sheet_name=0,index_col=0)",CLUSTER_1,CLUSTER_3
movies_sheet2,"pandas.read_excel(file,sheet_name=1,index_col=0)",CLUSTER_1,CLUSTER_3
movies_sheet3,"pandas.read_excel(file,sheet_name=2,index_col=0)",CLUSTER_1,CLUSTER_3
movies_subset_columns,"pandas.read_excel(file,parse_cols=6)",CLUSTER_1,CLUSTER_3
pima,"pandas.read_csv(url,header=None,names=col_names)",CLUSTER_8,CLUSTER_1
mnb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_8,CLUSTER_1
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_8,CLUSTER_1
xx,"numpy.linspace(0,1,1000)",CLUSTER_5,CLUSTER_9
dfX,"pandas.DataFrame(boston.data,columns=boston.feature_names)",CLUSTER_5,CLUSTER_9
dfy,"pandas.DataFrame(boston.target,columns=[""MEDV""])",CLUSTER_5,CLUSTER_9
df,"pandas.concat([dfX,dfy],axis=1)",CLUSTER_5,CLUSTER_9
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_9
C,"numpy.zeros((n_row,n_row)",CLUSTER_1,CLUSTER_9
C_new,"numpy.zeros((n_row,n_row)",CLUSTER_1,CLUSTER_9
m1,numpy.identity(n_row),CLUSTER_1,CLUSTER_9
m2,numpy.identity(n_row),CLUSTER_1,CLUSTER_9
X,"numpy.apply_along_axis(demean,1,X)",CLUSTER_1,CLUSTER_9
eigenvalues,"numpy.roots([a,-b,c])",CLUSTER_1,CLUSTER_9
"U,V",numpy.linalg.eig(C),CLUSTER_1,CLUSTER_9
C_new,numpy.linalg.inv(eigenvectors),CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(12,4)",CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(12,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(12,4)",CLUSTER_1,CLUSTER_9
X,"scipy.io.loadmat(""datafile.mat"")",CLUSTER_1,CLUSTER_9
sal,"pandas.read_csv('C:/Users/Surajkumar/Desktop/MLClub/Salaries.csv',low_memory=False)",CLUSTER_8,CLUSTER_3
np_img,numpy.array(img),CLUSTER_2,CLUSTER_7
np_img,"numpy.asarray([np_img],dtype=np.int32)",CLUSTER_2,CLUSTER_7
img_arr,"numpy.asarray(result_val,np.uint8)",CLUSTER_2,CLUSTER_7
result_val,"numpy.clip(result_val,0,255)",CLUSTER_2,CLUSTER_7
data_dict,"numpy.load(vgg16_npy_path,encoding='latin1')",CLUSTER_2,CLUSTER_7
start_time,time.time(),CLUSTER_2,CLUSTER_7
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
shown_images,"numpy.array([[1.,1.]])",CLUSTER_5,CLUSTER_10
dist,numpy.sum((X[i]-shown_images),CLUSTER_5,CLUSTER_10
ax,matplotlib.pyplot.subplot(111),CLUSTER_5,CLUSTER_10
tsne,"sklearn.manifold.TSNE(n_components=2,random_state=0,init='pca',learning_rate=200.,early_exaggeration=12.)",CLUSTER_5,CLUSTER_10
top_ch,numpy.arange(len(self.vocab),CLUSTER_6,CLUSTER_6
encoded_text,numpy.array([char2int[char]forcharintext]),CLUSTER_6,CLUSTER_6
x,numpy.array([[self.char2int[x]]]),CLUSTER_6,CLUSTER_6
one_hot,numpy.zeros((np.multiply(*arr.shape),CLUSTER_6,CLUSTER_6
y,numpy.zeros_like(x),CLUSTER_6,CLUSTER_6
kernel,"numpy.ones((3,3)",CLUSTER_1,CLUSTER_10
sure_fg,numpy.uint8(sure_fg),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_1,CLUSTER_10
x_data,numpy.arange(size),CLUSTER_12,CLUSTER_3
x,numpy.arange(100),CLUSTER_12,CLUSTER_3
x_data,numpy.arange(20),CLUSTER_12,CLUSTER_3
names,"numpy.arange(100,200)",CLUSTER_12,CLUSTER_3
tooltip,"dd,names=numpy.arange(100,200)",CLUSTER_12,CLUSTER_3
x_data,numpy.arange(10),CLUSTER_12,CLUSTER_3
y,numpy.cumsum(np.random.randn(n),CLUSTER_12,CLUSTER_3
y,"numpy.cumsum(np.random.randn(2,100)",CLUSTER_12,CLUSTER_3
line.y,"numpy.cumsum(np.random.randn(2,100)",CLUSTER_12,CLUSTER_3
x,"numpy.linspace(0.0,10.0,n)",CLUSTER_12,CLUSTER_3
all_images,os.listdir(SOURCE),CLUSTER_2,CLUSTER_7
news_data,"sklearn.datasets.fetch_20newsgroups(subset='all',random_state=156)",CLUSTER_8,CLUSTER_1
train_news,"sklearn.datasets.fetch_20newsgroups(subset='train',
remove=('headers','footers','quotes')",CLUSTER_8,CLUSTER_1
test_news,"sklearn.datasets.fetch_20newsgroups(subset='test',
remove=('headers','footers','quotes')",CLUSTER_8,CLUSTER_1
lr_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
lr_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
lr_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
lr_clf,sklearn.linear_model.LogisticRegression(C=10),CLUSTER_8,CLUSTER_1
gs_ridge,"RidgeCV(alphas=numpy.logspace(-2,2)",CLUSTER_5,CLUSTER_1
new_x_train,"numpy.vstack((meta1,meta2,meta3,meta4,meta5)",CLUSTER_5,CLUSTER_1
new_x_test,"numpy.vstack((
gs_ridge.predict(x_test)",CLUSTER_5,CLUSTER_1
df,"pandas.get_dummies(df,['month','day'])",CLUSTER_5,CLUSTER_1
df,pandas.read_csv(r'C:\Users\student\Desktop\forestfires.csv'),CLUSTER_5,CLUSTER_1
nknn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=17),CLUSTER_5,CLUSTER_1
gs_ridge,"sklearn.linear_model.RidgeCV(alphas=np.logspace(-2,2)",CLUSTER_5,CLUSTER_1
meta_ridge,"sklearn.linear_model.RidgeCV(np.logspace(-2,2)",CLUSTER_5,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(df,y)",CLUSTER_5,CLUSTER_1
"x_train_a,x_train_b,y_train_a,y_train_b","sklearn.model_selection.train_test_split(x_train,y_train)",CLUSTER_5,CLUSTER_1
gs_knn1,sklearn.model_selection.GridSearchCV(KNeighborsRegressor(),CLUSTER_5,CLUSTER_1
gs_knn2,sklearn.model_selection.GridSearchCV(KNeighborsRegressor(),CLUSTER_5,CLUSTER_1
gs_rf1,"sklearn.model_selection.GridSearchCV(RandomForestRegressor(n_estimators=30,n_jobs=-1)",CLUSTER_5,CLUSTER_1
gs_rf2,"sklearn.model_selection.GridSearchCV(RandomForestRegressor(n_estimators=100,n_jobs=-1)",CLUSTER_5,CLUSTER_1
gs_nrf,sklearn.model_selection.GridSearchCV(RandomForestRegressor(n_estimators=30),CLUSTER_5,CLUSTER_1
x,"numpy.array([2,3,7,8])",CLUSTER_5,CLUSTER_5
y,"numpy.array([1,6,5,7])",CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
t_array,numpy.array(t_array),CLUSTER_1,CLUSTER_10
q_array,numpy.array(q_array),CLUSTER_1,CLUSTER_10
v_array,numpy.array(v_array),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(nrows=2,ncols=1,figsize=(6,7)",CLUSTER_1,CLUSTER_10
df,pandas.read_csv(datafile),CLUSTER_8,CLUSTER_4
json_data,json.dumps(merged_json),CLUSTER_8,CLUSTER_4
json_data,json.dumps(merged_json),CLUSTER_8,CLUSTER_4
merged_json,json.loads(merged.to_json(),CLUSTER_8,CLUSTER_4
merged_json,json.loads(merged.to_json(),CLUSTER_8,CLUSTER_4
fs_images,numpy.array(fs_images),CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(""sample_data/styles_sample.csv"",sep=',',error_bad_lines=False)",CLUSTER_4,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(k,n,figsize=(20,4*k)",CLUSTER_4,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=k,init=""k-means++"",n_init=10,max_iter=50)",CLUSTER_4,CLUSTER_0
df,"pandas.DataFrame({'Actual':y_test,'Predicted':y_pred})",CLUSTER_7,CLUSTER_5
dataset,"pandas.read_csv('house.txt',names=['Area','Bed','Price'])",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
puf,"pandas.read_csv(""../tax-calculator/puf.csv"")",CLUSTER_8,CLUSTER_3
s,numpy.std(data),CLUSTER_1,CLUSTER_10
u,numpy.median(data),CLUSTER_1,CLUSTER_10
incomes,"numpy.append(incomes,[1000000000])",CLUSTER_1,CLUSTER_10
toronto_df1,"pandas.DataFrame({""PostalCode"":postalCodeList,
""Borough"":boroughList,
""Neighbourhood"":neighbourhoodList})",CLUSTER_9,CLUSTER_2
coordinates,pandas.read_csv('http://cocl.us/Geospatial_data'),CLUSTER_9,CLUSTER_2
data,requests.get('https://en.wikipedia.org/w/index.php?title=List_of_postal_codes_of_Canada:_M&oldid=945633050'),CLUSTER_9,CLUSTER_2
X,"numpy.zeros((n_sentences,embedding_dim)",CLUSTER_3,CLUSTER_6
vetor_y1,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_y2,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_P,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_x1,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_x2,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_P,numpy.zeros(100),CLUSTER_1,CLUSTER_10
gamma1,numpy.exp(lngamma1),CLUSTER_1,CLUSTER_10
gamma2,numpy.exp(lngamma2),CLUSTER_1,CLUSTER_10
vetor_x1,"numpy.linspace(0,1,100)",CLUSTER_1,CLUSTER_10
vetor_y1,"numpy.linspace(0,1,100)",CLUSTER_1,CLUSTER_10
sol,numpy.zeros_like(M),CLUSTER_12,CLUSTER_9
sol,numpy.zeros_like(M),CLUSTER_12,CLUSTER_9
r,numpy.sqrt(area/np.pi),CLUSTER_12,CLUSTER_9
x,"numpy.linspace(0,10,num=100)",CLUSTER_12,CLUSTER_9
x,"numpy.linspace(0,1)",CLUSTER_12,CLUSTER_9
M,"numpy.linspace(0,2*np.pi,N)",CLUSTER_12,CLUSTER_9
M,"numpy.linspace(0,2*np.pi,N)",CLUSTER_12,CLUSTER_9
sol[ii],"scipy.optimize.newton(F,sol[ii-1],args=(0.249,M[ii])",CLUSTER_12,CLUSTER_9
sol[ii],"scipy.optimize.newton(F,sol[ii-1],args=(ee,M[ii])",CLUSTER_12,CLUSTER_9
data_scaled,"pandas.DataFrame(data_scaled,columns=('WeeksToDeparture','std_wtd','MaxTemperatureC',
'MeanTemperatureC','MinTemperatureC','MeanDewPointC',
'MeanHumidity','MeanVisibilityKm','MeanWindSpeedKm/h',
'CloudCover')",CLUSTER_7,CLUSTER_5
X_encoded,"pandas.merge(
X_encoded,external_data,how='left',
left_on=['DateOfDeparture','Arrival'],
right_on=['DateOfDeparture','Arrival'],
sort=False)",CLUSTER_7,CLUSTER_5
X_encoded,"pandas.merge(
X_encoded,external_data,how='left',
left_on=['DateOfDeparture','Arrival'],
right_on=['DateOfDeparture','Arrival'],
sort=False)",CLUSTER_7,CLUSTER_5
data_weather,pandas.read_csv('submissions/starting_kit/external_data.csv'),CLUSTER_7,CLUSTER_5
data_weather,"pandas.read_csv(os.path.join(path,'external_data.csv')",CLUSTER_7,CLUSTER_5
X_encoded['DateOfDeparture'],pandas.to_datetime(X_encoded['DateOfDeparture']),CLUSTER_7,CLUSTER_5
X_encoded['DateOfDeparture'],pandas.to_datetime(X_encoded['DateOfDeparture']),CLUSTER_7,CLUSTER_5
"X_encoded.loc[:,'WeeksToDeparture':'CloudCover']",sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X_array,y_array,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(
model,X_train,y_train,cv=5,scoring='neg_mean_squared_error')",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(
lasso,X_train,y_train,cv=5,scoring='neg_mean_squared_error')",CLUSTER_7,CLUSTER_5
regressor,sklearn.ensemble.RandomForestRegressor(),CLUSTER_7,CLUSTER_5
self.reg,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,max_depth=30,max_features=50)",CLUSTER_7,CLUSTER_5
score,sklearn.metrics.make_scorer(accuracy_score),CLUSTER_7,CLUSTER_5
grid_obj,"sklearn.model_selection.GridSearchCV(regressor,parameters,scoring=score)",CLUSTER_7,CLUSTER_5
df,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
dates,"pandas.date_range('20200101',periods=df.shape[0],freq='m')",CLUSTER_8,CLUSTER_3
entradas_treino,"numpy.concatenate((entradas[:35],entradas[50:85],entradas[100:135])",CLUSTER_3,CLUSTER_6
saidas_treino,"numpy.concatenate((saidas[:35],saidas[50:85],saidas[100:135])",CLUSTER_3,CLUSTER_6
entradas_teste,"numpy.concatenate((entradas[35:50],entradas[85:100],entradas[135:])",CLUSTER_3,CLUSTER_6
saidas_teste,"numpy.concatenate((saidas[35:50],saidas[85:100],saidas[135:])",CLUSTER_3,CLUSTER_6
entradas,"numpy.genfromtxt(""iris.data"",delimiter="","",usecols=(0,1,2,3)",CLUSTER_3,CLUSTER_6
saidas,"numpy.genfromtxt(""iris.data"",delimiter="","",usecols=(4)",CLUSTER_3,CLUSTER_6
x_plt,"numpy.arange(0,2*np.pi,10e-2)",CLUSTER_1,CLUSTER_9
Ns,"numpy.arange(5,30)",CLUSTER_1,CLUSTER_9
r,"numpy.array(r_init,dtype=float)",CLUSTER_1,CLUSTER_9
ab,"numpy.zeros((3,N)",CLUSTER_1,CLUSTER_9
b,numpy.zeros(N),CLUSTER_1,CLUSTER_9
us,numpy.zeros_like(ts),CLUSTER_1,CLUSTER_9
us,numpy.zeros_like(ts),CLUSTER_1,CLUSTER_9
dI,numpy.fabs(I-old_I),CLUSTER_1,CLUSTER_9
log_errs,numpy.log(errs),CLUSTER_1,CLUSTER_9
"xs,h","numpy.linspace(a,b,N,retstep=True)",CLUSTER_1,CLUSTER_9
xs_local,"numpy.linspace(xs[i-1],xs[i])",CLUSTER_1,CLUSTER_9
xs_local,"numpy.linspace(xs[i-1],xs[i])",CLUSTER_1,CLUSTER_9
xs,"numpy.linspace(a,b,N)",CLUSTER_1,CLUSTER_9
"ts,h","numpy.linspace(a,b,N,retstep=True)",CLUSTER_1,CLUSTER_9
"ts,h","numpy.linspace(a,b,N,retstep=True)",CLUSTER_1,CLUSTER_9
df,numpy.diff(fs),CLUSTER_1,CLUSTER_9
"a,b","numpy.polyfit(hs,errs,deg=1)",CLUSTER_1,CLUSTER_9
"a,b,c","numpy.polyfit(hs,errs,deg=2)",CLUSTER_1,CLUSTER_9
delta_r,numpy.linalg.solve(J(r),CLUSTER_1,CLUSTER_9
approx,"matplotlib.pyplot.plot(hs,a*hs**2+b*hs+c,'b')",CLUSTER_1,CLUSTER_9
table1_1,"pandas.concat([table1.iloc[:,0:2],table1.iloc[:,4:21]],axis=1)",CLUSTER_8,CLUSTER_3
table1_1,"pandas.concat([table1_1_1,table1_1_2],axis=1)",CLUSTER_8,CLUSTER_3
table1_1,"pandas.melt(table1_1,id_vars=['Type','Category'],var_name='Year',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table2_1,"pandas.melt(table2,id_vars=['RiskLevel','Category'],var_name='Year',value_name='n_of_risk_level_change')",CLUSTER_8,CLUSTER_3
table3_1,"pandas.melt(table3_1,id_vars=['Category'],var_name='Red_List_category',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table4_1,"pandas.melt(table4_1,id_vars=['Animal/plant','Class','Group'],var_name='Red_List_category',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table5_1,"pandas.melt(table5_1,id_vars=['Continent','Country'],var_name='Category',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table6_1,"pandas.melt(tabl6_1,id_vars=['Animal/plant','Continent','Sub_Continent','Country'],var_name='Red_List_category',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table5_GDP,"pandas.merge(left=table5_GDP,right=GDP,how='left')",CLUSTER_8,CLUSTER_3
GDP,"pandas.read_csv('dataset/GDP.csv',header=None)",CLUSTER_8,CLUSTER_3
table1,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table1')",CLUSTER_8,CLUSTER_3
table2,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table2',header=1)",CLUSTER_8,CLUSTER_3
table3,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table3a',header=8)",CLUSTER_8,CLUSTER_3
table4,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table4ab',header=0)",CLUSTER_8,CLUSTER_3
table5,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table5',header=1)",CLUSTER_8,CLUSTER_3
table6,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table6ab',header=1)",CLUSTER_8,CLUSTER_3
table9,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table9')",CLUSTER_8,CLUSTER_3
unemployment,pandas.read_csv(file),CLUSTER_8,CLUSTER_3
cases,pandas.read_csv(file),CLUSTER_8,CLUSTER_3
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
b1,"numpy.zeros((n_h,1)",CLUSTER_1,CLUSTER_9
b2,"numpy.zeros((n_y,1)",CLUSTER_1,CLUSTER_9
parameters['b'+str(l)],"numpy.zeros((layer_dims[l],1)",CLUSTER_1,CLUSTER_9
Z,"numpy.dot(W,A)",CLUSTER_1,CLUSTER_9
dW,"numpy.dot(dZ,A_prev.T)",CLUSTER_1,CLUSTER_9
dA_prev,"numpy.dot(W.T,dZ)",CLUSTER_1,CLUSTER_9
cost,numpy.squeeze(cost),CLUSTER_1,CLUSTER_9
db,"numpy.sum(dZ,axis=1,keepdims=True)",CLUSTER_1,CLUSTER_9
x,"numpy.arange(-2.0,7.0,delta)",CLUSTER_1,CLUSTER_9
y,"numpy.arange(-2.0,7.0,delta)",CLUSTER_1,CLUSTER_9
delta,numpy.array(d),CLUSTER_1,CLUSTER_9
resp,"compute_responsibilities(data=numpy.array([[1.,2.],[-1.,-2.]]),weights=numpy.array([0.3,0.7])",CLUSTER_1,CLUSTER_9
resp,"compute_responsibilities(data=numpy.array([[1.,2.],[-1.,-2.],[0,0]]),weights=numpy.array([0.3,0.7])",CLUSTER_1,CLUSTER_9
data_tmp,"numpy.array([[1.,2.],[-1.,-2.]])",CLUSTER_1,CLUSTER_9
resp,"compute_responsibilities(data=data_tmp,weights=numpy.array([0.3,0.7])",CLUSTER_1,CLUSTER_9
data_tmp,"numpy.array([[1.,2.],[-1.,-2.]])",CLUSTER_1,CLUSTER_9
resp,"compute_responsibilities(data=data_tmp,weights=numpy.array([0.3,0.7])",CLUSTER_1,CLUSTER_9
Z,numpy.zeros(num_clusters),CLUSTER_1,CLUSTER_9
resp,"numpy.zeros((num_data,num_clusters)",CLUSTER_1,CLUSTER_9
weighted_sum,"numpy.zeros((num_dim,num_dim)",CLUSTER_1,CLUSTER_9
resp,"numpy.zeros((num_data,num_clusters)",CLUSTER_1,CLUSTER_9
p,numpy.zeros(K),CLUSTER_1,CLUSTER_9
exponent_term,"numpy.dot(delta.T,numpy.dot(np.linalg.inv(covs[k])",CLUSTER_1,CLUSTER_9
assignments[i],numpy.argmax(p),CLUSTER_1,CLUSTER_9
counts,"numpy.sum(resp,axis=0)",CLUSTER_1,CLUSTER_9
Z[k]+,numpy.log(weights[k]),CLUSTER_1,CLUSTER_9
sigmax,numpy.sqrt(cov[0][0]),CLUSTER_1,CLUSTER_9
sigmay,numpy.sqrt(cov[1][1]),CLUSTER_1,CLUSTER_9
d,numpy.vstack(data),CLUSTER_1,CLUSTER_9
"X,Y","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_9
cov,numpy.diag([images['red'].var(),CLUSTER_1,CLUSTER_9
ans,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
all_data,"pandas.concat([data,test_data])",CLUSTER_5,CLUSTER_5
all_data_ready,"pandas.concat([all_data_num,all_data_cat],axis=1,join_axes=[all_data_num.index])",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv('./data/ech_apprentissage.csv',sep=';',index_col='id')",CLUSTER_5,CLUSTER_5
test_data,"pandas.read_csv('./data/ech_test.csv',sep=';',index_col='id')",CLUSTER_5,CLUSTER_5
enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
x,"numpy.array([1,2])",CLUSTER_1,CLUSTER_9
m,"numpy.array([4,5])",CLUSTER_1,CLUSTER_9
w,"numpy.diag([1,2])",CLUSTER_1,CLUSTER_9
color_select,numpy.copy(image),CLUSTER_1,CLUSTER_10
line_image,numpy.copy(image),CLUSTER_1,CLUSTER_10
"XX,YY","numpy.meshgrid(np.arange(0,xsize)",CLUSTER_1,CLUSTER_10
fit_left,"numpy.polyfit((left_bottom[0],apex[0])",CLUSTER_1,CLUSTER_10
fit_right,"numpy.polyfit((right_bottom[0],apex[0])",CLUSTER_1,CLUSTER_10
fit_bottom,"numpy.polyfit((left_bottom[0],right_bottom[0])",CLUSTER_1,CLUSTER_10
df_features,"pandas.DataFrame(columns=['object_id','mean0','stddev0','med0','max0','min0','kurt0',
'mean1','stddev1','med1','max1','min1','kurt1',
'mean2','stddev2','med2','max2','min2','kurt2',
'mean3','stddev3','med3','max3','min3','kurt3',
'mean4','stddev4','med4','max4','min4','kurt4',
'mean5','stddev5','med5','max5','min5','kurt5'])",CLUSTER_8,CLUSTER_3
ig_training_features,"pandas.concat([df_ts_features,df_metadata],axis=1)",CLUSTER_8,CLUSTER_3
ig_test_features,"pandas.concat([df_ts_features,df_metadata],axis=1)",CLUSTER_8,CLUSTER_3
ig_training_set,pandas.read_csv('~/Desktop/Classes/ee660/data/ig_training_set.csv'),CLUSTER_8,CLUSTER_3
ig_test_set,pandas.read_csv('~/Desktop/Classes/ee660/data/ig_test_set.csv'),CLUSTER_8,CLUSTER_3
ig_training_set_metadata,pandas.read_csv('~/Desktop/Classes/ee660/data/ig_training_set_metadata.csv'),CLUSTER_8,CLUSTER_3
ig_test_set_metadata,pandas.read_csv('~/Desktop/Classes/ee660/data/ig_test_set_metadata.csv'),CLUSTER_8,CLUSTER_3
eg_training_set,pandas.read_csv('~/Desktop/Classes/ee660/data/eg_training_set.csv'),CLUSTER_8,CLUSTER_3
eg_test_set,pandas.read_csv('~/Desktop/Classes/ee660/data/eg_test_set.csv'),CLUSTER_8,CLUSTER_3
eg_training_set_metadata,pandas.read_csv('~/Desktop/Classes/ee660/data/eg_training_set_metadata.csv'),CLUSTER_8,CLUSTER_3
eg_test_set_metadata,pandas.read_csv('~/Desktop/Classes/ee660/data/eg_test_set_metadata.csv'),CLUSTER_8,CLUSTER_3
kmeans,"sklearn.cluster.KMeans(init='k-means++',n_clusters=number_of_components)",CLUSTER_5,CLUSTER_5
gmm_silhoute_score,"sklearn.metrics.silhouette_score(data,gmm_labels,metric='euclidean')",CLUSTER_5,CLUSTER_5
kmeans_silhoute_score,"sklearn.metrics.silhouette_score(data,kmeans_labels,metric='euclidean')",CLUSTER_5,CLUSTER_5
HC_silhoute_score,"sklearn.metrics.silhouette_score(data,HC.labels_,metric='euclidean')",CLUSTER_5,CLUSTER_5
data.brand,pandas.Categorical(data.brand),CLUSTER_5,CLUSTER_5
data,pandas.read_csv('cars.csv'),CLUSTER_5,CLUSTER_5
angle,"numpy.degrees(np.arctan2(U[1,0],U[0,0])",CLUSTER_5,CLUSTER_5
"U,s,Vt",numpy.linalg.svd(covariance),CLUSTER_5,CLUSTER_5
gmm,"sklearn.mixture.GaussianMixture(n_components=number_of_components,covariance_type='full',verbose=0,verbose_interval=10,max_iter=5000)",CLUSTER_5,CLUSTER_5
gmm,"sklearn.mixture.GaussianMixture(n_components=number_of_components,covariance_type='full',random_state=0)",CLUSTER_5,CLUSTER_5
gmm,"sklearn.mixture.GaussianMixture(n_components=number_of_components,covariance_type='spherical',verbose=0,verbose_interval=10,max_iter=5000)",CLUSTER_5,CLUSTER_5
HC,"sklearn.cluster.AgglomerativeClustering(n_clusters=number_of_components,linkage='ward',connectivity=KeepXNearestPointsConnected)",CLUSTER_5,CLUSTER_5
HC,"sklearn.cluster.AgglomerativeClustering(n_clusters=number_of_components,linkage='ward',connectivity=KeepXNearestPointsConnected)",CLUSTER_5,CLUSTER_5
KeepXNearestPointsConnected,"sklearn.neighbors.kneighbors_graph(data.values,n_neighbors=number_of_components,include_self=False)",CLUSTER_5,CLUSTER_5
KeepXNearestPointsConnected,"sklearn.neighbors.kneighbors_graph(data.values,n_neighbors=10,include_self=False)",CLUSTER_5,CLUSTER_5
Tsub,"numpy.linspace(T3-20,T3)",CLUSTER_1,CLUSTER_10
Tvap,"numpy.linspace(T3,T3+20)",CLUSTER_1,CLUSTER_10
Tvap_sea,"numpy.linspace(T3-5,304)",CLUSTER_1,CLUSTER_10
outliers,pandas.DataFrame(olrs),CLUSTER_7,CLUSTER_3
car_data,"pandas.read_csv('car.csv',index_col=0)",CLUSTER_7,CLUSTER_3
car_data['Power_bhp'],"pandas.to_numeric(car_data['Power_bhp'],errors='coerce')",CLUSTER_7,CLUSTER_3
car_data['Mileage'],"pandas.to_numeric(car_data['Mileage'],errors='coerce')",CLUSTER_7,CLUSTER_3
plt1,"sns.countplot(car_data['Name'],order=pandas.value_counts(car_data['Name'])",CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_7,CLUSTER_3
survive,"seaborn.countplot(x='Fuel_Type',hue='Transmission',palette='Set3',data=car_data)",CLUSTER_7,CLUSTER_3
plt1,seaborn.countplot(car_data['Power']),CLUSTER_7,CLUSTER_3
plt1,"seaborn.countplot(car_data['Name'],order=pd.value_counts(car_data['Name'])",CLUSTER_7,CLUSTER_3
tips,seaborn.load_dataset('tips'),CLUSTER_7,CLUSTER_3
alldata,pandas.read_csv('/home/thiago/Downloads/creditcard.csv'),CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,20)",CLUSTER_7,CLUSTER_3
df_agg,"pandas.concat([df_agg,df_NTUerr],axis=1)",CLUSTER_7,CLUSTER_9
df1,"pandas.read_csv(""CoolingTowerDay1-All.csv"")",CLUSTER_7,CLUSTER_9
df2,"pandas.read_csv(""CoolingTowerDay2-All.csv"")",CLUSTER_7,CLUSTER_9
hs_T,"numpy.array([40,50,60,70,80,90,100,110,120,130])",CLUSTER_7,CLUSTER_9
hs_h,"numpy.array([15.230,20.301,26.46,34.09,43.69,55.93,71.73,92.34,119.54,155.9])",CLUSTER_7,CLUSTER_9
gmeans,numpy.array([g1b['GasFlow'].mean(),CLUSTER_7,CLUSTER_9
gerrs,numpy.array([g1b['GasFlow-err'].mean(),CLUSTER_7,CLUSTER_9
LGfitx,numpy.sort(df['L/G']),CLUSTER_7,CLUSTER_9
SSres,numpy.sum(res**2),CLUSTER_7,CLUSTER_9
SStot,numpy.sum(sst**2),CLUSTER_7,CLUSTER_9
ss_res,"numpy.sum(LGweights*(df['NTU']-NTULGfit(df['L/G'],*LGfit)",CLUSTER_7,CLUSTER_9
ss_tot,numpy.sum(LGweights*(df['NTU']-df['NTU'].mean(),CLUSTER_7,CLUSTER_9
p_wb,"numpy.exp(-6096.9385*T_wb**-1+\
21.2409642-2.711193*10**-2*T_wb+\
1.673952*10**-5*T_wb**2+\
2.433502*np.log(T_wb)",CLUSTER_7,CLUSTER_9
p_wb,"numpy.exp(-6096.9385*T_wb**-1+\
21.2409642-2.711193*10**-2*T_wb+\
1.673952*10**-5*T_wb**2+\
2.433502*np.log(T_wb)",CLUSTER_7,CLUSTER_9
fit_err,numpy.sqrt(np.diagonal(hsat_cov),CLUSTER_7,CLUSTER_9
dp,"numpy.sqrt(dp_wb**2+\
(-P*(T-T_wb)",CLUSTER_7,CLUSTER_9
drho,numpy.sqrt((0.378/(287.1*T),CLUSTER_7,CLUSTER_9
dV,numpy.sqrt((np.pi/4*0.095**2),CLUSTER_7,CLUSTER_9
dG,"numpy.sqrt(V**2*drho**2+\
rho**2*dV**2
)",CLUSTER_7,CLUSTER_9
LGfit_err,numpy.sqrt(np.diagonal(LGcov),CLUSTER_7,CLUSTER_9
hs_Tdata,"numpy.linspace(hs_T[0],hs_T[-1],100)",CLUSTER_7,CLUSTER_9
"hsat_fit,hsat_cov","scipy.optimize.curve_fit(hsat,hs_T,hs_h,[0,0])",CLUSTER_7,CLUSTER_9
"LGfit,LGcov","scipy.optimize.curve_fit(NTULGfit,df_agg['L/G'],df_agg['NTU'],
sigma=LGweights,
absolute_sigma=True)",CLUSTER_7,CLUSTER_9
cbar,matplotlib.pyplot.colorbar(),CLUSTER_7,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
"fig,axs","matplotlib.pyplot.subplots(2,3,sharey=True,sharex=True,figsize=[11,6])",CLUSTER_7,CLUSTER_9
start,time.time(),CLUSTER_10,CLUSTER_12
end,time.time(),CLUSTER_10,CLUSTER_12
start,time.time(),CLUSTER_10,CLUSTER_12
end,time.time(),CLUSTER_10,CLUSTER_12
start,time.time(),CLUSTER_10,CLUSTER_12
end,time.time(),CLUSTER_10,CLUSTER_12
cities_df,"pandas.read_csv(""../Resources/KCMetroCities_Lat_Lng.csv"")",CLUSTER_9,CLUSTER_2
restaurant_address,"requests.get(base_url,params=params)",CLUSTER_9,CLUSTER_2
df,"pandas.concat([df_train,df_test])",CLUSTER_7,CLUSTER_8
df_train,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv(data_path+'titanic_test.csv'),CLUSTER_7,CLUSTER_8
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
df_fixed['Fare'],scipy.stats.boxcox(df_fixed['Fare']),CLUSTER_7,CLUSTER_8
text,"re.sub(r""[^A-Za-z0-9^,!.\/'+-=]"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""what's"",""whatis"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'s"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'ve"",""have"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""n't"",""not"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""i'm"",""iam"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'d"",""would"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'ll"",""will"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r"","","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\."","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""!"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\/"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\^"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\+"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\-"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\="","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""'"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""(\d+)",CLUSTER_8,CLUSTER_4
text,"re.sub(r"":"","":"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""eg"",""eg"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""bg"",""bg"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\0s"",""0"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""911"",""911"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""e-mail"",""email"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\s{2,}"","""",text)",CLUSTER_8,CLUSTER_4
r,requests.get(adres),CLUSTER_10,CLUSTER_4
data,json.loads(r.text),CLUSTER_10,CLUSTER_4
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_6,CLUSTER_11
x2,"random.randint(1,10)",CLUSTER_10,CLUSTER_12
x3,random.random(),CLUSTER_10,CLUSTER_12
x1,"random.randrange(1,10)",CLUSTER_10,CLUSTER_12
now,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
now,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
date1,"datetime.datetime.strptime(myStr1,""%Y-%m-%d"")",CLUSTER_10,CLUSTER_12
date2,"datetime.datetime.strptime(myStr2,""%d-%m-%Y%H:%M:%S"")",CLUSTER_10,CLUSTER_12
date1,"datetime.datetime.strptime(str1,""%Y-%m-%d"")",CLUSTER_10,CLUSTER_12
dd,numpy.asarray(Train.Count),CLUSTER_7,CLUSTER_8
merge,"pandas.merge(test,test_original,on=('day','month','year')",CLUSTER_7,CLUSTER_8
prediction,"pandas.merge(merge,temp2,on='Hour',how='left')",CLUSTER_7,CLUSTER_8
merge,"pandas.merge(test,test_original,on=('day','month','year')",CLUSTER_7,CLUSTER_8
prediction,"pandas.merge(merge,temp2,on='Hour',how='left')",CLUSTER_7,CLUSTER_8
train,pandas.read_csv('Train_SU63ISt.csv'),CLUSTER_7,CLUSTER_8
test,pandas.read_csv('Test_0qrQsBZ.csv'),CLUSTER_7,CLUSTER_8
temp2,"pandas.read_csv(""GROUPby.csv"")",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('Holtlinear.csv'),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('Holtwinters.csv'),CLUSTER_7,CLUSTER_8
train['Datetime'],"pandas.to_datetime(train['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
test['Datetime'],"pandas.to_datetime(test['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
train_original['Datetime'],"pandas.to_datetime(train_original['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
test_original['Datetime'],"pandas.to_datetime(test_original['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
train.index,"pandas.to_datetime(train.Datetime,format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
test.index,"pandas.to_datetime(test['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
train.index,"pandas.to_datetime(train['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
"fig,axs","matplotlib.pyplot.subplots(4,1,figsize=(20,20)",CLUSTER_7,CLUSTER_8
rms,"math.sqrt(mean_squared_error(valid.Count,y_naive.Naive)",CLUSTER_7,CLUSTER_8
rms_MA,"math.sqrt(mean_squared_error(valid.Count,y_mavg.forecast)",CLUSTER_7,CLUSTER_8
rms_exp,"math.sqrt(mean_squared_error(valid.Count,y_exp.SES)",CLUSTER_7,CLUSTER_8
rms_holt,"math.sqrt(mean_squared_error(valid.Count,y_holt_linear.holt_linear)",CLUSTER_7,CLUSTER_8
rms,"math.sqrt(mean_squared_error(valid.Count,y_holt_winter.Holt_Winter)",CLUSTER_7,CLUSTER_8
self.dfExpected,"pandas.DataFrame(expected,columns=self.dfObserved.columns,index=self.dfObserved.index)",CLUSTER_4,CLUSTER_0
df_to_plot_race,"pandas.DataFrame(data=sorted_by_value,columns=['Emoji','P-value'])",CLUSTER_4,CLUSTER_0
self.dfObserved,"pandas.crosstab(Y,X)",CLUSTER_4,CLUSTER_0
counts_df_ran,"pandas.read_csv(path_counts_ran,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
users_df_ran,"pandas.read_csv(path_users_ran,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
counts_df_lon,"pandas.read_csv(path_counts_lon,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
users_df_lon,"pandas.read_csv(path_users_lon,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
counts_df_joh,"pandas.read_csv(path_counts_joh,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
users_df_joh,"pandas.read_csv(path_users_joh,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
counts_df_nyc,"pandas.read_csv(path_counts_nyc,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
users_df_nyc,"pandas.read_csv(path_users_nyc,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,12)",CLUSTER_4,CLUSTER_0
"chi2,p,dof,expected",scipy.stats.chi2_contingency(self.dfObserved.values),CLUSTER_4,CLUSTER_0
x_linespace,"numpy.linspace(0,4*pi,num=20)",CLUSTER_4,CLUSTER_0
data,pandas.read_csv('diabetes2.csv'),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,shuffle=True)",CLUSTER_7,CLUSTER_5
model,sklearn.svm.SVC(gamma='scale'),CLUSTER_7,CLUSTER_5
model1,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model2,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
model3,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline([
('nomalizer',StandardScaler()",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_validate(pipeline,X_train,y_train)",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_validate(pipeline,X_train,y_train)",CLUSTER_7,CLUSTER_5
adaboost,sklearn.ensemble.AdaBoostClassifier(base_estimator=DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
adaboost,sklearn.ensemble.AdaBoostClassifier(base_estimator=LogisticRegression(),CLUSTER_8,CLUSTER_1
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_8,CLUSTER_1
adaboost,AdaBoostClassifier(base_estimator=sklearn.tree.DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
"('abc',AdaBoostClassifier(base_estimator",sklearn.tree.DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
"('abc',AdaBoostClassifier(base_estimator",sklearn.tree.DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
pipeline,"make_pipeline(MinMaxScaler(),AdaBoostClassifier(n_estimators=100,base_estimator=sklearn.tree.DecisionTreeClassifier()",CLUSTER_8,CLUSTER_1
digits,sklearn.datasets.load_digits(),CLUSTER_8,CLUSTER_1
"trainX,testX,trainY,testY","sklearn.model_selection.train_test_split(digits.data,digits.target)",CLUSTER_8,CLUSTER_1
"trainX,testX,trainY,testY","sklearn.model_selection.train_test_split(digits.data,digits.target)",CLUSTER_8,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
adaboost,AdaBoostClassifier(base_estimator=sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
gbt,sklearn.ensemble.GradientBoostingClassifier(n_estimators=100),CLUSTER_8,CLUSTER_1
vc,"sklearn.ensemble.VotingClassifier(estimators=estimators,voting='hard')",CLUSTER_8,CLUSTER_1
vcc,"sklearn.ensemble.VotingClassifier(estimators=estimators,voting='soft',weights=[1,5,4,1])",CLUSTER_8,CLUSTER_1
gs,"sklearn.model_selection.GridSearchCV(vc,param_grid={'weights':[[1,5,4,1],[1,4,5,1]]},cv=5)",CLUSTER_8,CLUSTER_1
gs,"sklearn.model_selection.GridSearchCV(pipeline,param_grid={'adaboostclassifier__base_estimator':[DecisionTreeClassifier()",CLUSTER_8,CLUSTER_1
pipeline,sklearn.pipeline.make_pipeline(MinMaxScaler(),CLUSTER_8,CLUSTER_1
RHO,"numpy.zeros((nb_x_classes,nb_x_classes+1)",CLUSTER_2,CLUSTER_7
z,"numpy.zeros(n,dtype=int)",CLUSTER_2,CLUSTER_7
q_arr,numpy.zeros(nb_x_classes),CLUSTER_2,CLUSTER_7
x_convert,"numpy.zeros(n,dtype=int)",CLUSTER_2,CLUSTER_7
x_hat,"numpy.zeros(n,dtype=np.int)",CLUSTER_2,CLUSTER_7
m[context_str],"numpy.zeros(nb_z_classes,dtype=np.int)",CLUSTER_2,CLUSTER_7
x_convert[i],"numpy.dot(mask,x_temp[i:i+order])",CLUSTER_2,CLUSTER_7
EXP,"numpy.dot(PI_INV,LAMBDA*(PI[:,z[i]].reshape((nb_x_classes,1)",CLUSTER_2,CLUSTER_7
score,"numpy.dot(m_vector,EXP)",CLUSTER_2,CLUSTER_7
LAMBDA,"numpy.ones((nb_x_classes,nb_x_classes)",CLUSTER_2,CLUSTER_7
MAP,"numpy.ones((nb_x_classes,nb_x_classes+1)",CLUSTER_2,CLUSTER_7
mask,numpy.ones((order),CLUSTER_2,CLUSTER_7
LAMBDA,"numpy.ones((nb_x_classes,nb_x_classes)",CLUSTER_2,CLUSTER_7
L,"numpy.matmul(PI_INV,RHO)",CLUSTER_2,CLUSTER_7
"img_quantize[i,j]","numpy.argmax(img[i,j]<q_arr)",CLUSTER_2,CLUSTER_7
x_hat[i],numpy.argmin(score),CLUSTER_2,CLUSTER_7
x_temp,numpy.hstack((np.zeros(order-1),CLUSTER_2,CLUSTER_7
PI_sum,numpy.copy(PI),CLUSTER_2,CLUSTER_7
x_temp,numpy.copy(x),CLUSTER_2,CLUSTER_7
imarray,numpy.array(im),CLUSTER_2,CLUSTER_7
C,"numpy.zeros((n-2*k,2*k*nb_z_classes)",CLUSTER_2,CLUSTER_7
Y,"numpy.dot(Z[k:n-k],L_new)",CLUSTER_2,CLUSTER_7
x,"numpy.ones((states,states)",CLUSTER_2,CLUSTER_7
error,numpy.absolute(a-b),CLUSTER_2,CLUSTER_7
error,numpy.absolute(a-b),CLUSTER_2,CLUSTER_7
x,numpy.hstack(tuple(x),CLUSTER_2,CLUSTER_7
z,numpy.hstack(tuple(z),CLUSTER_2,CLUSTER_7
c_i,"numpy.vstack((Z[i-k:i,],Z[i+1:i+k+1,])",CLUSTER_2,CLUSTER_7
PI_INV,numpy.linalg.inv(PI),CLUSTER_2,CLUSTER_7
PI_INV,numpy.linalg.inv(PI),CLUSTER_2,CLUSTER_7
PI_dict,scipy.io.loadmat('PARAM/'+true_or_assumed+'_PI.mat'),CLUSTER_2,CLUSTER_7
TRANS_dict,scipy.io.loadmat('PARAM/'+true_or_assumed+'_TRANS.mat'),CLUSTER_2,CLUSTER_7
article_labels,"numpy.argmax(article_dists,axis=1)",CLUSTER_5,CLUSTER_5
top_i,numpy.argsort(topic_dists[comp]),CLUSTER_5,CLUSTER_5
articles,pandas.read_csv('all.csv'),CLUSTER_5,CLUSTER_5
as_topics,"sklearn.decomposition.LatentDirichletAllocation(n_components=10,random_state=0,n_jobs=6)",CLUSTER_5,CLUSTER_5
talks,"pandas.read_csv(""talks.tsv"",sep=""\t"",header=0)",CLUSTER_8,CLUSTER_4
colors,seaborn.color_palette(),CLUSTER_10,CLUSTER_4
iris,sklearn.datasets.load_iris(),CLUSTER_10,CLUSTER_4
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,n_jobs=-1)",CLUSTER_10,CLUSTER_4
coeffdf,"pandas.DataFrame({'Word':basicwords,
'Coefficient':basiccoeffs})",CLUSTER_8,CLUSTER_1
advcoeffdf,"pandas.DataFrame({'Words':advwords,
'Coefficient':advcoeffs})",CLUSTER_8,CLUSTER_1
data,pandas.read_csv('Combined_News_DJIA.csv'),CLUSTER_8,CLUSTER_1
basicmodel,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
advancedmodel,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
p2kfatc_qtdamostra_loc_exec,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_extpython_tp_total[0:1]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_extpython_tp_total[4:5]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_mssql_tp_total[0:1]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_mssql_tp_total[4:5]),CLUSTER_5,CLUSTER_9
p2kfatc_qtdamostra_loc_exec10,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_extpython_tp_total[0:1]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_extpython_tp_total[10:]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_mssql_tp_total[0:1]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_mssql_tp_total[10:]),CLUSTER_5,CLUSTER_9
pivot_df_desempenho,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
df,pandas.DataFrame(x_scaled),CLUSTER_5,CLUSTER_9
df_desempenho_mssql,"pandas.read_csv(""dados_desempenho_mssql.csv"",sep="";"")",CLUSTER_5,CLUSTER_9
df_desempenho_extpython,"pandas.read_csv(""dados_desempenho_ext_python.csv"",sep=""|"")",CLUSTER_5,CLUSTER_9
"pivot_df_desempenho_mssql_tp_python[""sem""]","numpy.apply_along_axis(sts.sem,axis=1,arr=pivot_df_desempenho_mssql_tp_python_tmp.as_matrix()",CLUSTER_5,CLUSTER_9
"pivot_df_desempenho_mssql_tp_total[""sem""]","numpy.apply_along_axis(sts.sem,axis=1,arr=pivot_df_desempenho_mssql_tp_total_tmp.as_matrix()",CLUSTER_5,CLUSTER_9
"pivot_df_desempenho_extpython_tp_python[""sem""]","numpy.apply_along_axis(sts.sem,axis=1,arr=pivot_df_desempenho_extpython_tp_python_tmp.as_matrix()",CLUSTER_5,CLUSTER_9
"pivot_df_desempenho_extpython_tp_total[""sem""]","numpy.apply_along_axis(sts.sem,axis=1,arr=pivot_df_desempenho_extpython_tp_total_tmp.as_matrix()",CLUSTER_5,CLUSTER_9
chi_med_total,"scipy.stats.chisquare(pivot_df_desempenho[""media_extpython_tp_total""],
pivot_df_desempenho[""media_mssql_tp_total""])",CLUSTER_5,CLUSTER_9
chi_med_python,"scipy.stats.chisquare(pivot_df_desempenho[""media_extpython_tp_python""],
pivot_df_desempenho[""media_mssql_tp_python""])",CLUSTER_5,CLUSTER_9
tstat,"scipy.stats.ttest_ind(df_desempenho_extpython.query(""qtd_amostra==1000"")",CLUSTER_5,CLUSTER_9
min_max_scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0.1,1)",CLUSTER_5,CLUSTER_9
Se,math.sqrt(MSE),CLUSTER_5,CLUSTER_9
data,"pandas.read_csv(os.path.join(data_path,'ratings.csv')",CLUSTER_10,CLUSTER_2
data_movies,"pandas.read_csv(os.path.join(data_path,'movies.csv')",CLUSTER_10,CLUSTER_2
data_baltic,"pandas.read_csv(os.path.join(data_path,'power.csv')",CLUSTER_10,CLUSTER_2
table,pandas.read_html(io.StringIO(page.content.decode('UTF-8'),CLUSTER_10,CLUSTER_2
page,"requests.get(""https://fortrader.org/quotes"")",CLUSTER_10,CLUSTER_2
df,"pandas.read_csv('./ex2data1.txt',dtype=np.float64,header=None)",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv('./ex2data1.txt',dtype=np.float64,header=None)",CLUSTER_5,CLUSTER_5
theta,numpy.array(initial_theta),CLUSTER_5,CLUSTER_5
st,"numpy.array([1,45,85])",CLUSTER_5,CLUSTER_5
st,"numpy.array([1,45,85])",CLUSTER_5,CLUSTER_5
st,"numpy.array([1,45,85])",CLUSTER_5,CLUSTER_5
grad_,numpy.zeros(theta.shape[0]),CLUSTER_5,CLUSTER_5
initial_theta,numpy.zeros(n+1),CLUSTER_5,CLUSTER_5
J_history,numpy.zeros(num_iters),CLUSTER_5,CLUSTER_5
theta,numpy.zeros(n),CLUSTER_5,CLUSTER_5
J_history,numpy.zeros(num_iters),CLUSTER_5,CLUSTER_5
initial_theta,numpy.zeros(X.shape[1]+1),CLUSTER_5,CLUSTER_5
theta,numpy.zeros(n),CLUSTER_5,CLUSTER_5
J_history,numpy.zeros(num_iters),CLUSTER_5,CLUSTER_5
X,"numpy.concatenate((np.ones((m,1)",CLUSTER_5,CLUSTER_5
grad_,"numpy.dot(X.T,hx-y)",CLUSTER_5,CLUSTER_5
hx,"numpy.dot(X,theta)",CLUSTER_5,CLUSTER_5
J,numpy.sum(-y*np.log(hx),CLUSTER_5,CLUSTER_5
clf,"sklearn.linear_model.SGDClassifier(loss='log',n_iter=6000,random_state=100)",CLUSTER_5,CLUSTER_5
clf,"sklearn.linear_model.LogisticRegression(C=10,solver='lbfgs')",CLUSTER_5,CLUSTER_5
data,"sklearn.datasets.make_blobs(n_samples=300,n_features=2,centers=n+2,cluster_std=1.5,
center_box=(-10.0,10.0)",CLUSTER_5,CLUSTER_10
clf,"sklearn.ensemble.RandomTreesEmbedding(n_estimators=100,max_depth=10)",CLUSTER_5,CLUSTER_10
cluster,"sklearn.cluster.AgglomerativeClustering(n_clusters=i+2,affinity=""precomputed"",linkage=""complete"")",CLUSTER_5,CLUSTER_10
cluster,"sklearn.cluster.AgglomerativeClustering(n_clusters=i+2,affinity=""precomputed"",linkage=""complete"")",CLUSTER_5,CLUSTER_10
cluster,"sklearn.cluster.AgglomerativeClustering(n_clusters=i+2,affinity=""euclidean"",linkage=""ward"")",CLUSTER_5,CLUSTER_10
cluster,"sklearn.cluster.AgglomerativeClustering(n_clusters=i+2,affinity=""precomputed"",linkage=""average"")",CLUSTER_5,CLUSTER_10
colors,"numpy.array(['red','orange','blue','yellow'])",CLUSTER_5,CLUSTER_10
d,"numpy.zeros([n_sample,n_sample])",CLUSTER_5,CLUSTER_10
d,"numpy.zeros([n_sample,n_sample])",CLUSTER_5,CLUSTER_10
node_depth,numpy.zeros(n_nodes),CLUSTER_5,CLUSTER_10
is_leaves,numpy.zeros(n_nodes),CLUSTER_5,CLUSTER_10
prob,"numpy.zeros([n_sample,n_sample])",CLUSTER_5,CLUSTER_10
df1,"pandas.read_csv(line1+""/전처리된거+서울경기.csv"",engine='python')",CLUSTER_9,CLUSTER_11
f_list1,os.listdir(line2),CLUSTER_9,CLUSTER_11
response,requests.get(URL),CLUSTER_9,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,13)",CLUSTER_9,CLUSTER_11
labels,"numpy.array([1,2,3,0,2,1])",CLUSTER_1,CLUSTER_9
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
rf_df,"pandas.DataFrame({'accuracy':cross_val_score(random_forest_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
dt_df,"pandas.DataFrame({'accuracy':cross_val_score(decision_tree_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
iris_data,pandas.read_csv('iris-data.csv'),CLUSTER_7,CLUSTER_5
iris_data,"pandas.read_csv('iris-data.csv',na_values=['NA'])",CLUSTER_7,CLUSTER_5
iris_data_clean,pandas.read_csv('iris-data-clean.csv'),CLUSTER_7,CLUSTER_5
iris_data_clean,pandas.read_csv('iris-data-clean.csv'),CLUSTER_7,CLUSTER_5
iris_data_clean,pandas.read_csv('iris-data-clean.csv'),CLUSTER_7,CLUSTER_5
testing_classes),"sklearn.model_selection.train_test_split(all_inputs,all_labels,test_size=0.25,random_state=1)",CLUSTER_7,CLUSTER_5
testing_classes),"sklearn.model_selection.train_test_split(all_inputs,all_labels,test_size=0.25)",CLUSTER_7,CLUSTER_5
testing_classes),"sklearn.model_selection.train_test_split(all_inputs,all_labels,test_size=0.25)",CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(max_depth=1),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
mask,numpy.zeros(len(labels),CLUSTER_7,CLUSTER_5
cross_validation,sklearn.model_selection.StratifiedKFold(n_splits=10),CLUSTER_7,CLUSTER_5
cross_validation,sklearn.model_selection.StratifiedKFold(n_splits=10),CLUSTER_7,CLUSTER_5
cross_validation,sklearn.model_selection.StratifiedKFold(n_splits=10),CLUSTER_7,CLUSTER_5
cv_scores,"sklearn.model_selection.cross_val_score(decision_tree_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
cv_scores,"sklearn.model_selection.cross_val_score(decision_tree_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
dt_scores,"sklearn.model_selection.cross_val_score(decision_tree_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
rf_classifier_scores,"sklearn.model_selection.cross_val_score(random_forest_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(decision_tree_classifier,
param_grid=parameter_grid,
cv=cross_validation)",CLUSTER_7,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(decision_tree_classifier,
param_grid=parameter_grid,
cv=cross_validation)",CLUSTER_7,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(random_forest_classifier,
param_grid=parameter_grid,
cv=cross_validation)",CLUSTER_7,CLUSTER_5
out_file,"sklearn.tree.export_graphviz(decision_tree_classifier,out_file=out_file)",CLUSTER_7,CLUSTER_5
random_forest_classifier,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
random_forest_classifier,"sklearn.ensemble.RandomForestClassifier(criterion='gini',max_features=3,n_estimators=50)",CLUSTER_7,CLUSTER_5
"count,bin_edges",numpy.histogram(df_can['2013']),CLUSTER_1,CLUSTER_3
"count,bin_edges",numpy.histogram(df_can['2013']),CLUSTER_1,CLUSTER_3
"count,bin_edges","numpy.histogram(df_t,15)",CLUSTER_1,CLUSTER_3
"count,bin_edges","numpy.histogram(df_t,15)",CLUSTER_1,CLUSTER_3
"count,binedges","numpy.histogram(df_cof,15)",CLUSTER_1,CLUSTER_3
df_can,"pandas.read_excel('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx',
sheet_name='CanadabyCitizenship',
skiprows=range(20)",CLUSTER_1,CLUSTER_3
mergedDf,pandas.DataFrame(),CLUSTER_4,CLUSTER_0
bonsai,pandas.read_csv(path),CLUSTER_4,CLUSTER_0
exl,pandas.read_fwf(path),CLUSTER_4,CLUSTER_0
cleanData,numpy.array(example[:-1]forexampleintrainingData),CLUSTER_4,CLUSTER_0
cleanData,numpy.array(example[:-1]forexampleintestData),CLUSTER_4,CLUSTER_0
dictionary[key],numpy.array(dictionary[key]),CLUSTER_4,CLUSTER_0
trainEndIndex,math.floor(len(labelledStrides[exercise]),CLUSTER_4,CLUSTER_0
model,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=5,weights='distance',metric=DTWDistance)",CLUSTER_4,CLUSTER_0
report,"sklearn.metrics.classification_report(testClasses,results,output_dict=True)",CLUSTER_4,CLUSTER_0
htt_wt,"pandas.DataFrame(X,columns=ht_wt.columns)",CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame(columns=['Publishers','total-heroes','total-villans','total-neutral','total-unknown'])",CLUSTER_5,CLUSTER_1
heroes,"pandas.concat([heroes_without_htwt,htt_wt],axis=1)",CLUSTER_5,CLUSTER_1
heroes,pandas.read_csv('heroes_information.csv'),CLUSTER_5,CLUSTER_1
powers,pandas.read_csv('super_hero_powers.csv'),CLUSTER_5,CLUSTER_1
imputer,sklearn.impute.SimpleImputer(strategy='median'),CLUSTER_5,CLUSTER_1
groups,"pandas.DataFrame(columns=['size','sum','mean','std'])",CLUSTER_8,CLUSTER_3
Top15['bins'],"pandas.cut(Top15['%Renewable'],5)",CLUSTER_8,CLUSTER_3
df,"pandas.merge(pandas.merge(energy,GDP,on='Country')",CLUSTER_8,CLUSTER_3
df_all,"pandas.merge(pandas.merge(energy,GDP,on='Country')",CLUSTER_8,CLUSTER_3
df_not_all,"pandas.merge(pandas.merge(energy,GDP,on='Country')",CLUSTER_8,CLUSTER_3
GDP,"pandas.read_csv('world_bank.csv',skiprows=4)",CLUSTER_8,CLUSTER_3
energy,pandas.read_excel('EnergyIndicators.xls'),CLUSTER_8,CLUSTER_3
ScimEn,pandas.read_excel('scimagojr-3.xlsx'),CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""./data/crime.csv"",encoding=""ISO-8859-1"")",CLUSTER_1,CLUSTER_3
"df[""OCCURRED_ON_DATE""]","pandas.to_datetime(df.OCCURRED_ON_DATE,infer_datetime_format=True)",CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
sequence_1,"numpy.arange(start=2,stop=10,step=2)",CLUSTER_3,CLUSTER_6
sequence_1,"numpy.arange(2,10,2)",CLUSTER_3,CLUSTER_6
a,numpy.arange(5),CLUSTER_3,CLUSTER_6
b,"numpy.arange(0,50,10)",CLUSTER_3,CLUSTER_6
array1,"numpy.arange(0,10,2)",CLUSTER_3,CLUSTER_6
array1,"numpy.array([1.,2.,3.])",CLUSTER_3,CLUSTER_6
matrix1,"numpy.array(
[[1.,2.,3.],
[4.,5.,6.],
[7.,8.,9.]]
)",CLUSTER_3,CLUSTER_6
array_tuple,"numpy.array((1,2,3)",CLUSTER_3,CLUSTER_6
matrix_mixed,"numpy.array(
[(1,2,3)",CLUSTER_3,CLUSTER_6
matrix1_32,"numpy.array(
[[1.,2.,3.],
[4.,5.,6.],
[7.,8.,9.]],
dtype=np.float32
)",CLUSTER_3,CLUSTER_6
array_complex,"numpy.array([[2.+3.j,1.]],dtype=np.complex)",CLUSTER_3,CLUSTER_6
matrix_complex,"numpy.array(
[[2.+1.j,1.],
[0.,1.j]],
dtype=np.complex
)",CLUSTER_3,CLUSTER_6
A,"numpy.array(
[[1.,3.],
[2.,4.]]
)",CLUSTER_3,CLUSTER_6
B,"numpy.array(
[[10.,0.],
[10.,20.]]
)",CLUSTER_3,CLUSTER_6
mat,"numpy.array([[2.,1.],[1,2.]])",CLUSTER_3,CLUSTER_6
vec,"numpy.array([1.,0.])",CLUSTER_3,CLUSTER_6
vec,"numpy.array([1/3,1/2])",CLUSTER_3,CLUSTER_6
array1,"numpy.array([10.,10.])",CLUSTER_3,CLUSTER_6
array2,"numpy.array([15,30])",CLUSTER_3,CLUSTER_6
an_array,numpy.array([]),CLUSTER_3,CLUSTER_6
array_zeros,numpy.zeros(3),CLUSTER_3,CLUSTER_6
matrix_zeros,numpy.zeros(shape),CLUSTER_3,CLUSTER_6
array3,numpy.zeros(n),CLUSTER_3,CLUSTER_6
"matrix3,matrix3_loop",numpy.zeros(shape),CLUSTER_3,CLUSTER_6
array_ones,numpy.ones(3),CLUSTER_3,CLUSTER_6
matrix_ones,numpy.ones(shape),CLUSTER_3,CLUSTER_6
a,"numpy.ones(3,dtype=np.int32)",CLUSTER_3,CLUSTER_6
b,numpy.ones(n),CLUSTER_3,CLUSTER_6
sequence_2,"numpy.linspace(start=2,stop=8,num=4)",CLUSTER_3,CLUSTER_6
sequence_2,"numpy.linspace(2,8,4)",CLUSTER_3,CLUSTER_6
sequence_3,"numpy.linspace(0,100,200)",CLUSTER_3,CLUSTER_6
b,"numpy.linspace(0,5,3)",CLUSTER_3,CLUSTER_6
array1,"numpy.linspace(5,20,10)",CLUSTER_3,CLUSTER_6
array2,"numpy.linspace(0,5,10)",CLUSTER_3,CLUSTER_6
an_array,"numpy.append(an_array,i)",CLUSTER_3,CLUSTER_6
x,numpy.loadtxt('u_out.dat'),CLUSTER_3,CLUSTER_6
"x,y",numpy.loadtxt('uv_out.dat'),CLUSTER_3,CLUSTER_6
"x,y","numpy.loadtxt('uv_out_2.dat',unpack=True)",CLUSTER_3,CLUSTER_6
"x,y","numpy.loadtxt('A_out.dat',usecols=(0,1)",CLUSTER_3,CLUSTER_6
M,numpy.loadtxt('A_out.dat'),CLUSTER_3,CLUSTER_6
"e_vals,e_vecs",numpy.linalg.eig(A),CLUSTER_3,CLUSTER_6
x,"numpy.linalg.solve(A,b)",CLUSTER_3,CLUSTER_6
fig,"matplotlib.pyplot.figure(figsize=(15,4)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,4)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(10,6)",CLUSTER_7,CLUSTER_5
"f,axes","matplotlib.pyplot.subplots(ncols=3,figsize=(15,6)",CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(15,4)",CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(x=""projectCount"",y=""projectCount"",hue=""turnover"",data=df,estimator=lambdax:len(x)",CLUSTER_7,CLUSTER_5
ax,seaborn.kdeplot(df.loc[(df['turnover']==0),CLUSTER_7,CLUSTER_5
ax,seaborn.kdeplot(df.loc[(df['turnover']==1),CLUSTER_7,CLUSTER_5
ax,seaborn.kdeplot(df.loc[(df['turnover']==0),CLUSTER_7,CLUSTER_5
ax,seaborn.kdeplot(df.loc[(df['turnover']==1),CLUSTER_7,CLUSTER_5
kmeans,"sklearn.cluster.KMeans(n_clusters=3,random_state=2)",CLUSTER_7,CLUSTER_5
X,"numpy.arange(-16,16)",CLUSTER_5,CLUSTER_5
X_test,"numpy.zeros(shape=(n_test_games,1)",CLUSTER_5,CLUSTER_5
clipped_preds,"numpy.clip(preds,0.05,0.95)",CLUSTER_5,CLUSTER_5
df_wins,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
df_losses,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
df_for_predictions,"pandas.concat((df_wins,df_losses)",CLUSTER_5,CLUSTER_5
df_dummy,"pandas.merge(left=df_tour,right=df_winseeds,how='left',on=['Season','Wteam'])",CLUSTER_5,CLUSTER_5
df_concat,"pandas.merge(left=df_dummy,right=df_lossseeds,on=['Season','Lteam'])",CLUSTER_5,CLUSTER_5
df_seeds,pandas.read_csv(data_dir+'TourneySeeds.csv'),CLUSTER_5,CLUSTER_5
df_tour,pandas.read_csv(data_dir+'TourneyCompactResults.csv'),CLUSTER_5,CLUSTER_5
df_sample_sub,pandas.read_csv(data_dir+'sample_submission.csv'),CLUSTER_5,CLUSTER_5
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
clf,"sklearn.model_selection.GridSearchCV(logreg,params,scoring='neg_log_loss',refit=True)",CLUSTER_5,CLUSTER_5
beta,"numpy.array([1,0.1,10])",CLUSTER_8,CLUSTER_3
y,"numpy.dot(x,beta)",CLUSTER_8,CLUSTER_3
y_true,"numpy.dot(x,beta)",CLUSTER_8,CLUSTER_3
x,"numpy.linspace(0,10,100)",CLUSTER_8,CLUSTER_3
x,"numpy.linspace(0,20,nsample)",CLUSTER_8,CLUSTER_3
x,"numpy.column_stack((x,x**2)",CLUSTER_8,CLUSTER_3
x,"numpy.column_stack((x,np.sin(x)",CLUSTER_8,CLUSTER_3
data,pandas.DataFrame(data1),CLUSTER_7,CLUSTER_5
data1,"pandas.read_csv(r""C:\Users\rishy\Desktop\rr\lgdata.csv"")",CLUSTER_7,CLUSTER_5
y,numpy.asarray(a),CLUSTER_7,CLUSTER_5
reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_5
weather_data,pandas.DataFrame(weather_dict),CLUSTER_9,CLUSTER_2
response,"requests.get(f""{url}&q={city}"")",CLUSTER_9,CLUSTER_2
"trn_y,val_y",numpy.array(trn_y),CLUSTER_6,CLUSTER_9
top_3,numpy.array(labels),CLUSTER_6,CLUSTER_9
test_y,numpy.zeros(len(test_x),CLUSTER_6,CLUSTER_9
data,"numpy.pad(data,((0,self.n_segments-data.shape[0])",CLUSTER_6,CLUSTER_9
train,pandas.read_csv(PATH/'train.csv'),CLUSTER_6,CLUSTER_9
test,pandas.read_csv(PATH/'sample_submission.csv'),CLUSTER_6,CLUSTER_9
"X,y","sklearn.datasets.make_classification(n_samples=10000,
n_features=10,
n_classes=2,
n_informative=3,
random_state=3)",CLUSTER_5,CLUSTER_10
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
"false_positive_rate,true_positive_rate,threshold","sklearn.metrics.roc_curve(y_test,y_score)",CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.1,random_state=1)",CLUSTER_5,CLUSTER_10
box_scores,"numpy.multiply(box_confidence,box_class_probs)",CLUSTER_4,CLUSTER_0
r,requests.get(url),CLUSTER_10,CLUSTER_12
similarity_df,"pandas.DataFrame(similarities,columns=entity_names,index=entity_names)",CLUSTER_0,CLUSTER_1
similarity_df,"pandas.DataFrame(similarities,columns=entity_names,index=entity_names)",CLUSTER_0,CLUSTER_1
review_df,"pandas.read_csv('./dataset/labeledTrainData.tsv',header=0,sep=""\t"",quoting=3)",CLUSTER_0,CLUSTER_1
review_df,"pandas.read_csv('./dataset/labeledTrainData.tsv',header=0,sep=""\t"",quoting=3)",CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feature_df,class_df,\
test_size=0.3,\
random_state=156)",CLUSTER_0,CLUSTER_1
accuracy,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_0,CLUSTER_1
accuracy,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_0,CLUSTER_1
accuracy,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_0,CLUSTER_1
precision,"sklearn.metrics.precision_score(y_test,pred)",CLUSTER_0,CLUSTER_1
precision,"sklearn.metrics.precision_score(y_test,pred)",CLUSTER_0,CLUSTER_1
precision,"sklearn.metrics.precision_score(y_test,pred)",CLUSTER_0,CLUSTER_1
recall,"sklearn.metrics.recall_score(y_test,pred)",CLUSTER_0,CLUSTER_1
recall,"sklearn.metrics.recall_score(y_test,pred)",CLUSTER_0,CLUSTER_1
recall,"sklearn.metrics.recall_score(y_test,pred)",CLUSTER_0,CLUSTER_1
confusion,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_0,CLUSTER_1
confusion,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_0,CLUSTER_1
confusion,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_0,CLUSTER_1
f1,"sklearn.metrics.f1_score(y_test,pred)",CLUSTER_0,CLUSTER_1
f1,"sklearn.metrics.f1_score(y_test,pred)",CLUSTER_0,CLUSTER_1
f1,"sklearn.metrics.f1_score(y_test,pred)",CLUSTER_0,CLUSTER_1
roc_auc,"sklearn.metrics.roc_auc_score(y_test,pred)",CLUSTER_0,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([
('cnt_vect',CountVectorizer(stop_words='english',ngram_range=(1,2)",CLUSTER_0,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([
('tfidf_vect',TfidfVectorizer(stop_words='english',ngram_range=(1,2)",CLUSTER_0,CLUSTER_1
"plt.imshow(X_train[0],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_2,CLUSTER_10
"plt.imshow(X_train[1],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_2,CLUSTER_10
"plt.imshow(X_train[2],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_2,CLUSTER_10
"plt.imshow(X_train[3],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_2,CLUSTER_10
X_fit,"numpy.linspace(0,1,100)",CLUSTER_7,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
mcr,"pandas.DataFrame({'MisclassificationRate':Misclassification},Models)",CLUSTER_8,CLUSTER_3
roc_df,pandas.DataFrame(),CLUSTER_8,CLUSTER_3
roc_df,"pandas.concat([roc_df,tmp.ROCInfo])",CLUSTER_8,CLUSTER_3
site_index,numpy.arange(-0.5*(M-1),CLUSTER_1,CLUSTER_10
x,"numpy.arange(0,len(w)",CLUSTER_1,CLUSTER_10
H,"numpy.diag(np.ones(shape=(M-1,)",CLUSTER_1,CLUSTER_10
fftx,numpy.fft.fft(np.sort(w),CLUSTER_1,CLUSTER_10
fft_freq,numpy.fft.fftfreq(len(w),CLUSTER_1,CLUSTER_10
input_ids,"numpy.zeros(shape=(n_batch,max_sen_lenght)",CLUSTER_6,CLUSTER_6
input_ids,"numpy.zeros(shape=(n_batch,max_sen_lenght)",CLUSTER_6,CLUSTER_6
lm_labels,"numpy.full(shape=(n_batch,max_sen_lenght)",CLUSTER_6,CLUSTER_6
lm_labels,"numpy.full(shape=(n_batch,max_sen_lenght)",CLUSTER_6,CLUSTER_6
token2num,json.load(f),CLUSTER_6,CLUSTER_6
fig1,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
label,numpy.load(l_p),CLUSTER_1,CLUSTER_9
label1,numpy.load(l1_path),CLUSTER_1,CLUSTER_9
label2,numpy.load(l2_path),CLUSTER_1,CLUSTER_9
label3,numpy.load(l3_path),CLUSTER_1,CLUSTER_9
label4,numpy.load(l4_path),CLUSTER_1,CLUSTER_9
label5,numpy.load(l5_path),CLUSTER_1,CLUSTER_9
j,"pandas.DataFrame({'XX':['Primera','Segunda','Tercera'],'Totales':[primera,segunda,tercera]})",CLUSTER_1,CLUSTER_3
CVM,"pandas.DataFrame({'Vivos':Vivos,'Muertos':Muertos},index=index)",CLUSTER_1,CLUSTER_3
entrena,"pandas.read_csv(""train.csv"")",CLUSTER_1,CLUSTER_3
"line,","matplotlib.pyplot.plot(x,np.cos(x)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(0,10)",CLUSTER_1,CLUSTER_10
texts,numpy.array([article.raw_textforarticleinp.data_source.articles]),CLUSTER_5,CLUSTER_10
labels,numpy.array([article.labelforarticleinp.data_source.articles]),CLUSTER_5,CLUSTER_10
texts_test,numpy.array([article.raw_textforarticleintest_data_source.articles]),CLUSTER_5,CLUSTER_10
labels_test,numpy.array([article.labelforarticleintest_data_source.articles]),CLUSTER_5,CLUSTER_10
train_acc,"sklearn.metrics.accuracy_score(y_train,model.predict(X_train)",CLUSTER_5,CLUSTER_10
test_acc,"sklearn.metrics.accuracy_score(y_test,labels_prediction)",CLUSTER_5,CLUSTER_10
test_acc,"sklearn.metrics.accuracy_score(y_test,fitted_model.predict(X_test)",CLUSTER_5,CLUSTER_10
train_loss,"sklearn.metrics.log_loss(y_train,model.predict_proba(X_train)",CLUSTER_5,CLUSTER_10
test_loss,"sklearn.metrics.log_loss(y_test,labels_probs)",CLUSTER_5,CLUSTER_10
model,"sklearn.svm.SVC(kernel=kernel,
C=c,
random_state=42,
decision_function_shape='ovr',

class_weight=class_weight,
probability=True,
gamma=gamma)",CLUSTER_5,CLUSTER_10
SVC_opt,"sklearn.svm.SVC(kernel=best_param['kernel'],
C=best_param['C'],
random_state=42,
decision_function_shape='ovr',

class_weight=best_param['class_weight'],
probability=True,
gamma=best_param['gamma'])",CLUSTER_5,CLUSTER_10
start,time.time(),CLUSTER_5,CLUSTER_10
end,time.time(),CLUSTER_5,CLUSTER_10
pdf,"pandas.read_sql(selectQuery,pconn)",CLUSTER_8,CLUSTER_4
missing_data,pandas.DataFrame({'MissingRatio':all_data_na}),CLUSTER_5,CLUSTER_1
missing_data,pandas.DataFrame({'MissingRatio':all_data_na}),CLUSTER_5,CLUSTER_1
temp,"pandas.crosstab(date1['customer_id'],date1['购买了商品+'])",CLUSTER_5,CLUSTER_1
temp,"pandas.crosstab(date1['customer_id'],date1['购买了商品+'])",CLUSTER_5,CLUSTER_1
temp,"pandas.crosstab(date1['customer_id'],date1['购买了商品+'])",CLUSTER_5,CLUSTER_1
all_data,"pandas.merge(all_data,goods_feature[['goods_id','Goods_clustering_kind']],on='goods_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(customer_id,temp,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,temp,on=['customer_id'],how='left')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,temp,on=['customer_id'],how='left')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_buy_goods_num,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_total_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_real_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_happy_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_number,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_son_real_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_son_happy_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,last_time,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,q,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,Location,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,Longtitude,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,Latitude,on='customer_id')",CLUSTER_5,CLUSTER_1
all_customer,"pandas.merge(all_customer,submit_df,on=['customer_id'],how='left',copy=False)",CLUSTER_5,CLUSTER_1
all_data,"pandas.read_csv('D:/new_date.csv',low_memory=False)",CLUSTER_5,CLUSTER_1
goods_feature,pandas.read_csv('goods_feature.csv'),CLUSTER_5,CLUSTER_1
all_data['order_pay_time'],pandas.to_datetime(all_data['order_pay_time']),CLUSTER_5,CLUSTER_1
output['order_pay_date_jiange'],pandas.to_datetime('2013-12-31'),CLUSTER_5,CLUSTER_1
y_true,numpy.array(y_true),CLUSTER_5,CLUSTER_1
y_pred,numpy.array(y_pred),CLUSTER_5,CLUSTER_1
y_true,numpy.array(y_true),CLUSTER_5,CLUSTER_1
y_pred,numpy.array(y_pred),CLUSTER_5,CLUSTER_1
p,"numpy.clip(y_pred,eps,1-eps)",CLUSTER_5,CLUSTER_1
p,"numpy.clip(y_pred,eps,1-eps)",CLUSTER_5,CLUSTER_1
p,"numpy.clip(y_pred,eps,1-eps)",CLUSTER_5,CLUSTER_1
loss,numpy.sum(-y_true*np.log(p),CLUSTER_5,CLUSTER_1
loss,numpy.sum(-labels*np.log(p),CLUSTER_5,CLUSTER_1
loss,numpy.sum(-y_true*np.log(p),CLUSTER_5,CLUSTER_1
label,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=42,stratify=y)",CLUSTER_5,CLUSTER_1
xs,numpy.array(xs),CLUSTER_1,CLUSTER_10
ys,numpy.array(ys),CLUSTER_1,CLUSTER_10
yerr,numpy.array(yerr),CLUSTER_1,CLUSTER_10
wine_data,sklearn.datasets.load_wine(),CLUSTER_5,CLUSTER_1
wine_data,sklearn.datasets.load_wine(),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feat_data,
labels,
test_size=0.3,
random_state=101)",CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feat_data,
labels,
test_size=0.3,
random_state=101)",CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
onehot_y_train,pandas.get_dummies(y_train),CLUSTER_5,CLUSTER_1
one_hot_y_test,pandas.get_dummies(y_test),CLUSTER_5,CLUSTER_1
raw_data,"pandas.read_csv(""./data.csv"")",CLUSTER_7,CLUSTER_3
g,seaborn.PairGrid(data=data0),CLUSTER_7,CLUSTER_3
g,seaborn.PairGrid(data=data1),CLUSTER_7,CLUSTER_3
g,seaborn.PairGrid(data=data2),CLUSTER_7,CLUSTER_3
arr,"numpy.array([0.0foriinrange(0,300)",CLUSTER_0,CLUSTER_1
df_non_red_features,pandas.DataFrame(features),CLUSTER_0,CLUSTER_1
df_fluency_features,pandas.DataFrame(fluency_features),CLUSTER_0,CLUSTER_1
df_new_non_red_features,"pandas.concat([df_non_red_features,pd.DataFrame(new_features)",CLUSTER_0,CLUSTER_1
df_new_fluency_features,"pandas.concat([df_fluency_features,pd.DataFrame(new_features)",CLUSTER_0,CLUSTER_1
train_data,"pandas.read_csv(""q4_train_set.csv"")",CLUSTER_0,CLUSTER_1
test_data,"pandas.read_csv(""q4_test_set.csv"")",CLUSTER_0,CLUSTER_1
r_coeff,"scipy.stats.pearsonr(pred,y)",CLUSTER_0,CLUSTER_1
mse,"sklearn.metrics.mean_squared_error(pred,y)",CLUSTER_0,CLUSTER_1
clf,sklearn.linear_model.LinearRegression(),CLUSTER_0,CLUSTER_1
vp_data,"pandas.DataFrame({'idx':data.index,x:data[x],y:data[y],'hue_class':0})",CLUSTER_7,CLUSTER_3
vp_data,"pandas.DataFrame({x:data_unharmonized[x],y:data_unharmonized[y],'Legend':'Unharmonized'})",CLUSTER_7,CLUSTER_3
fit_resid_df,"pandas.DataFrame({'Residual':resid,'Fitted_Value':fitted_y,'Site':ex_data['Site'],'DX':ex_data['DX']})",CLUSTER_7,CLUSTER_3
combat_es,"pandas.DataFrame(model_es,index=features)",CLUSTER_7,CLUSTER_3
unh_es,"pandas.DataFrame(model_unh_es,index=features)",CLUSTER_7,CLUSTER_3
lmm_es,"pandas.DataFrame(lm_model_es,index=features)",CLUSTER_7,CLUSTER_3
models,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
model_params,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
models_unh,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
model_unh_params,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
lm_models,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
lm_model_params,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
data,"pandas.read_csv(""../../input/data.csv"",index_col=0)",CLUSTER_7,CLUSTER_3
harmonized_features,"pandas.read_csv(""harmonized_masked.csv"",index_col=0)",CLUSTER_7,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(ncols=2,nrows=2,figsize=(13,4)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(fitted_y,resid,hue=hue_col,data=fit_resid_df)",CLUSTER_7,CLUSTER_3
ax_vp,"seaborn.violinplot(y=y,x=x,data=vp_data,hue='hue_class',split=True,scale=scale)",CLUSTER_7,CLUSTER_3
ax_h_uh,"seaborn.violinplot(y=y,x=x,data=vp_data,hue='Legend',split=True,scale=scale)",CLUSTER_7,CLUSTER_3
se,math.sqrt(((n1+n2-1),CLUSTER_7,CLUSTER_3
hw_percents,numpy.array(hw_percents),CLUSTER_3,CLUSTER_6
lab_percents,numpy.array(lab_percents),CLUSTER_3,CLUSTER_6
lab_total,numpy.ones(10),CLUSTER_3,CLUSTER_6
ratings,pandas.DataFrame(df.groupby('title'),CLUSTER_7,CLUSTER_8
ratings['Noofraters'],pandas.DataFrame(df.groupby('title'),CLUSTER_7,CLUSTER_8
corr_starwars,"pandas.DataFrame(similar_to_starwars,columns=['CorrelationFactor'])",CLUSTER_7,CLUSTER_8
corr_movie,"pandas.DataFrame(similar_to_movie,columns=['Correlation'])",CLUSTER_7,CLUSTER_8
df,"pandas.merge(df,movie_titles,on='item_id')",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('ml-100k/u.data',sep='\t',names=col_names)",CLUSTER_7,CLUSTER_8
movie_titles,"pandas.read_csv('ml-100k/u.item',sep=""\|"",header=None,engine='python')",CLUSTER_7,CLUSTER_8
admits,pandas.read_csv('admission_data.csv'),CLUSTER_8,CLUSTER_4
prod_long,"pandas.read_csv(""/Users/johannesmauritzen/research/solar_prod/prod_long.csv"")",CLUSTER_7,CLUSTER_3
prod_wide,"pandas.read_csv(""/Users/johannesmauritzen/research/solar_prod/prod_wide.csv"")",CLUSTER_7,CLUSTER_3
"prod_long[""prod_end_date""]","pandas.to_datetime(prod_long[""prod_end_date""])",CLUSTER_7,CLUSTER_3
"prod_wide[""prod_end_date""]","pandas.to_datetime(prod_wide[""prod_end_date""])",CLUSTER_7,CLUSTER_3
"prod_wide[""complete_date""]","pandas.to_datetime(prod_wide[""complete_date""])",CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
self.indexes,numpy.arange(len(self.files),CLUSTER_4,CLUSTER_0
x_flat,numpy.array([vec.flatten(),CLUSTER_4,CLUSTER_0
vecs,numpy.array([get_vec(i),CLUSTER_4,CLUSTER_0
X,"numpy.empty((self.batch_size,*self.dim,self.n_channels)",CLUSTER_4,CLUSTER_0
vec,"numpy.reshape(pred,512)",CLUSTER_4,CLUSTER_0
"sample_x,sample_y",numpy.squeeze(sample_x),CLUSTER_4,CLUSTER_0
pred0,numpy.squeeze(pred[ind]),CLUSTER_4,CLUSTER_0
"embedded_x,embedded_y","numpy.split(embedded_samp,2,axis=1)",CLUSTER_4,CLUSTER_0
"embedded_x,embedded_y,embedded_z","numpy.split(embedded_flat_samp,3,axis=1)",CLUSTER_4,CLUSTER_0
x_train,"numpy.expand_dims(x_train,axis=3)",CLUSTER_4,CLUSTER_0
x_test,"numpy.expand_dims(x_test,axis=3)",CLUSTER_4,CLUSTER_0
"X[i,]",numpy.expand_dims(np.load(file),CLUSTER_4,CLUSTER_0
vec/,numpy.linalg.norm(vec),CLUSTER_4,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=2,init='random',perplexity=400,n_jobs=-1,verbose=1)",CLUSTER_4,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=3,init='random',perplexity=400,n_jobs=-1,verbose=1)",CLUSTER_4,CLUSTER_0
text,"pandas.DataFrame(df[""texts""])",CLUSTER_7,CLUSTER_5
y,pandas.DataFrame(df[0]),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""C:/Users/delll/Desktop/train.csv"",header=None)",CLUSTER_7,CLUSTER_5
df_new,"sklearn.feature_selection.SelectKBest(chi2,k=2)",CLUSTER_7,CLUSTER_5
shuffle,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=9,random_state=6)",CLUSTER_7,CLUSTER_5
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_5
model7,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_5
f1_DTree,"sklearn.metrics.f1_score(pre_DTree,y_test,average=""weighted"")",CLUSTER_7,CLUSTER_5
f1_RandT,"sklearn.metrics.f1_score(pre_RandT,y_test,average=""weighted"")",CLUSTER_7,CLUSTER_5
f1_Voti,"sklearn.metrics.f1_score(pre_Voti,y_test,average=""weighted"")",CLUSTER_7,CLUSTER_5
model1,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_5
svc1,"sklearn.svm.SVC(kernel=""poly"")",CLUSTER_7,CLUSTER_5
model6,"sklearn.svm.SVC(kernel=""rbf"")",CLUSTER_7,CLUSTER_5
DTree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
RandT,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,n_jobs=2,random_state=7)",CLUSTER_7,CLUSTER_5
Voti,sklearn.ensemble.VotingClassifier(estimater),CLUSTER_7,CLUSTER_5
model4,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_5
model5,sklearn.cluster.KMeans(),CLUSTER_7,CLUSTER_5
model8,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
%timegss,"pandas.read_hdf('../homeworks/gss.hdf5','gss')",CLUSTER_7,CLUSTER_3
df_events,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_10
"X_train_price,X_test_price,y_train_price,y_test_price","sklearn.model_selection.train_test_split(
X_price,y_price,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_10
"X_train_30,X_test_30,y_train_30,y_test_30","sklearn.model_selection.train_test_split(X_30,y_30,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_10
"X_train_90,X_test_90,y_train_90,y_test_90","sklearn.model_selection.train_test_split(X_90,y_90,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_10
"X_train_price,X_test_price,y_train_price,y_test_price","sklearn.model_selection.train_test_split(
X_price,y_price,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_10
time_start,datetime.datetime.utcnow(),CLUSTER_10,CLUSTER_12
time_end,datetime.datetime.utcnow(),CLUSTER_10,CLUSTER_12
coefs,"pandas.Series(index=words,data=weights)",CLUSTER_5,CLUSTER_5
model,"sklearn.pipeline.Pipeline(
[
('vect',TfidfVectorizer()",CLUSTER_5,CLUSTER_5
df_corpus,"pandas.read_pickle(""df_corpus.pkl"")",CLUSTER_0,CLUSTER_5
data_dtm,"pandas.read_pickle(""df_DTM.pkl"")",CLUSTER_0,CLUSTER_5
"unique,counts","numpy.unique(predicted,return_counts=True)",CLUSTER_0,CLUSTER_5
"unique,counts","numpy.unique(predicted,return_counts=True)",CLUSTER_0,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data_dtm,df_corpus['categoria'],test_size=0.4,random_state=1)",CLUSTER_0,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(text_tf,df_corpus['categoria'],test_size=0.4,random_state=123)",CLUSTER_0,CLUSTER_5
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_0,CLUSTER_5
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_0,CLUSTER_5
x,"numpy.expand_dims(x,axis=0)",CLUSTER_12,CLUSTER_9
obj,"pandas.Series(['c','a','d','a','a','b','b','c','c','a','b'])",CLUSTER_8,CLUSTER_2
resp,requests.get(url),CLUSTER_8,CLUSTER_2
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df_m,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df_f,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df_m,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df_f,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
monthly_df,"pandas.DataFrame(
dict((column_name+""_""+period,survey_scenario.simulation.calculate_add(column_name,period)",CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
undecompsed_revdisp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df1,pandas.DataFrame({'revdisp_mensuel_annuel':revdisp_oy.sum(1),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
to_change,pandas.Series(marginal_rate),CLUSTER_1,CLUSTER_3
u_ir_m_rsa_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel_rsa_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_c_ir,"pandas.Series(survey_scenario.simulation.calculate_add('utility_compensated_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_ir_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_ir_a,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_annuel','2009')",CLUSTER_1,CLUSTER_3
weight_1,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_1,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
u_es_c_ir,"pandas.Series(survey_scenario.simulation.calculate_add('utility_es_compensated_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_es_ir_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_es_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_es_ir_a,"pandas.Series(survey_scenario.simulation.calculate_add('utility_es_ir_annuel','2009')",CLUSTER_1,CLUSTER_3
weight_1,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_1,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_1,CLUSTER_3
decote_monthly,"pandas.Series(survey_scenario.simulation.calculate_add(""decote_mensuel_times_12"")",CLUSTER_1,CLUSTER_3
decote_annual,"pandas.Series(survey_scenario.simulation.calculate_add(""decote"")",CLUSTER_1,CLUSTER_3
poids,pandas.Series(weight_foyers),CLUSTER_1,CLUSTER_3
poids,pandas.Series(weight_foyers),CLUSTER_1,CLUSTER_3
lambda_compensation_menage,"pandas.Series(switch_entity('lambda_compensation','menage')",CLUSTER_1,CLUSTER_3
poids_menage,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
poids_menage,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
poids_menage,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
u_ir_m_rsa_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel_rsa_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_c_ir,"pandas.Series(survey_scenario.simulation.calculate_add('utility_compensated_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_ir_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_ir_a,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_annuel','2009')",CLUSTER_1,CLUSTER_3
weight_menages,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
hist1,"((u_ir_m-u_ir_a))[((u_ir_m-u_ir_a))!=0].hist(bins=7000,figsize=(25,12),weights=pandas.Series(weight_menages)",CLUSTER_1,CLUSTER_3
hist2,"((u_c_ir-u_ir_a))[((u_c_ir-u_ir_a))!=0].hist(bins=7000,figsize=(25,12),weights=pandas.Series(weight_menages)",CLUSTER_1,CLUSTER_3
outliers,pandas.Series(np.abs(((u_ir_m-u_ir_a),CLUSTER_1,CLUSTER_3
is_decote_different,pandas.Series(np.abs(decote-decote_mensuel),CLUSTER_1,CLUSTER_3
irpp_mensuel,"pandas.Series(survey_scenario.simulation.calculate(""irpp_mensuel"",'2009-{}'.format(month)",CLUSTER_1,CLUSTER_3
to_change,pandas.Series(marginal_rate),CLUSTER_1,CLUSTER_3
to_change,"pandas.Series(rates.marginal_rate(irpp_test_case,rbg_test_case)",CLUSTER_1,CLUSTER_3
monetary_gain_ir,pandas.Series(monetary_gain_ir),CLUSTER_1,CLUSTER_3
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
diff_in_income,"pandas.Series(
np.abs(survey_scenario.simulation.calculate(""revdisp_mensuel_annuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_money_gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_annuelle+,"pandas.Series(
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_annuelle+,"pandas.Series(
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_annuelle+,"pandas.Series(
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_ir_mensuel_rsa_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp,pandas.Series(gain_m),CLUSTER_1,CLUSTER_3
passage_a_la_retraite,pandas.Series(is_retired),CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['revdisp_mensuel_annuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('revdisp_mensuel_annuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""rev_trav_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""salaire_imposable"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""pen_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""psoc_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""ppe"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""impo_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""retraite_imposable"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,9)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,9)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,9)",CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_m[((df_m.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_m[((df_m.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_f[((df_f.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_f[((df_f.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_m[((df_m.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_m[((df_m.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_f[((df_f.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_f[((df_f.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_f[((df_f.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_f[((df_f.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_m[((df_m.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_m[((df_m.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_f[((df_f.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_f[((df_f.yearly_income>0),CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((1,1)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(15,5)",CLUSTER_1,CLUSTER_3
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_1,CLUSTER_3
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_1,CLUSTER_3
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(nb_subplots_lines,2,sharey=True,figsize=(20,15)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(15,5)",CLUSTER_1,CLUSTER_3
"fig,axe","matplotlib.pyplot.subplots(6,2,figsize=(20,20)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(nb_subplots_lines,2,sharey=True,figsize=(20,15)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(20,7)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(20,7)",CLUSTER_1,CLUSTER_3
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_1,CLUSTER_3
ax2,matplotlib.pyplot.twinx(),CLUSTER_1,CLUSTER_3
ax2,matplotlib.pyplot.twinx(),CLUSTER_1,CLUSTER_3
ax2,matplotlib.pyplot.twinx(),CLUSTER_1,CLUSTER_3
ax2,matplotlib.pyplot.twinx(),CLUSTER_1,CLUSTER_3
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_1,CLUSTER_3
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_1,CLUSTER_3
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_1,CLUSTER_3
a,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_3
b,"numpy.array([True,True,False])",CLUSTER_1,CLUSTER_3
month_income,numpy.zeros(simulation.persons.count),CLUSTER_1,CLUSTER_3
month_income,numpy.zeros(simulation.persons.count),CLUSTER_1,CLUSTER_3
month_income,numpy.zeros(simulation.persons.count),CLUSTER_1,CLUSTER_3
month_rbg,numpy.zeros(59874),CLUSTER_1,CLUSTER_3
month_rbg,numpy.zeros(59874),CLUSTER_1,CLUSTER_3
below_collection_thrshld,"numpy.zeros(weight_foyers.shape[0],dtype=bool)",CLUSTER_1,CLUSTER_3
monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_money_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
mean_gain,numpy.zeros(1),CLUSTER_1,CLUSTER_3
mean_gain,numpy.zeros(1),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
mean_gain,numpy.zeros(1),CLUSTER_1,CLUSTER_3
mean_gain,numpy.zeros(1),CLUSTER_1,CLUSTER_3
monetary_gain_ir_rsa,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
c,numpy.zeros(1),CLUSTER_1,CLUSTER_3
is_retired,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_inactive,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_retired,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_inactive,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_retire_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
target_array,numpy.empty(entity.count),CLUSTER_1,CLUSTER_3
target_array,numpy.empty(entity.count),CLUSTER_1,CLUSTER_3
target_array,numpy.empty(simulation.persons.count),CLUSTER_1,CLUSTER_3
target_array,numpy.empty(simulation.persons.count),CLUSTER_1,CLUSTER_3
target_array_by_role[role],"target_array=numpy.empty(entity.count,dtype='int64')",CLUSTER_1,CLUSTER_3
target_array_by_role[role],"target_array=numpy.empty(entity.count,dtype=array.dtype)",CLUSTER_1,CLUSTER_3
u_monetary_gain_ir+,"numpy.mean(
(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_monetary_gain+,"numpy.mean(
pd.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_monetary_gain_ir+,"numpy.mean(
(survey_scenario.simulation.calculate(""utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_monetary_gain+,"numpy.mean(
pd.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_1,CLUSTER_3
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_1,CLUSTER_3
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_1,CLUSTER_3
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_1,CLUSTER_3
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_1,CLUSTER_3
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_1,CLUSTER_3
age,numpy.floor(agm/12),CLUSTER_1,CLUSTER_3
"count,division",numpy.histogram(df[(df.yearly_income>0),CLUSTER_1,CLUSTER_3
bins,"numpy.histogram(np.hstack((winners,loosers)",CLUSTER_1,CLUSTER_3
bins,"numpy.histogram(np.hstack((winners,loosers)",CLUSTER_1,CLUSTER_3
bins,"numpy.histogram(np.hstack((weight_1,weight_2)",CLUSTER_1,CLUSTER_3
bins,numpy.histogram(np.hstack(((u_ir_m-u_ir_a),CLUSTER_1,CLUSTER_3
bins,numpy.histogram(np.hstack(((u_es_ir_m-u_es_ir_a),CLUSTER_1,CLUSTER_3
bins,numpy.histogram(np.hstack(((u_ir_m-u_ir_a),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('grades.csv'),CLUSTER_1,CLUSTER_9
output,"matplotlib.pyplot.hist([chi_squared_df2,chi_squared_df5],bins=50,histtype='step',
label=['2degreesoffreedom','5degreesoffreedom'])",CLUSTER_1,CLUSTER_9
start_time,time.time(),CLUSTER_5,CLUSTER_1
start,time.time(),CLUSTER_5,CLUSTER_1
end,time.time(),CLUSTER_5,CLUSTER_1
start,time.time(),CLUSTER_5,CLUSTER_1
end,time.time(),CLUSTER_5,CLUSTER_1
time_taken_list,numpy.array(time_taken_list),CLUSTER_5,CLUSTER_1
vectors,numpy.asarray(vectors),CLUSTER_5,CLUSTER_1
labels,numpy.asarray(labels),CLUSTER_5,CLUSTER_1
vectors,numpy.asarray(vectors),CLUSTER_5,CLUSTER_1
time_mean,numpy.mean(time_taken_list),CLUSTER_5,CLUSTER_1
time_std,numpy.std(time_taken_list),CLUSTER_5,CLUSTER_1
train_times_table,pandas.DataFrame(train_time_values),CLUSTER_5,CLUSTER_1
tsne,"sklearn.manifold.TSNE(n_components=num_dimensions,random_state=0)",CLUSTER_5,CLUSTER_1
x,"numpy.arange(-1,200)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-10,10,1000)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(0,1,100002)",CLUSTER_7,CLUSTER_8
values_A,numpy.hstack(([0]*(1055-28),CLUSTER_7,CLUSTER_8
values_B,numpy.hstack(([0]*(1057-45),CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
h,"matplotlib.pyplot.hist(y,bins=range(48)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(5,3.75)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_7,CLUSTER_8
deltas,pandas.Series(delta_distribution),CLUSTER_7,CLUSTER_8
deltas2,pandas.Series(delta_distribution2),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_null,pandas.Series(x_null),CLUSTER_7,CLUSTER_8
deltas,pandas.Series(delta_distribution),CLUSTER_7,CLUSTER_8
dist,"scipy.stats.beta(a,b)",CLUSTER_7,CLUSTER_8
dist,"scipy.stats.binom(n,b)",CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(1),CLUSTER_1,CLUSTER_3
"fig,ax1",matplotlib.pyplot.subplots(dpi=300),CLUSTER_1,CLUSTER_3
MAC270,"pandas.DataFrame(Student_list,columns=['Student_name','Age','Gender','City','Major','Test_score'])",CLUSTER_1,CLUSTER_3
X,numpy.array(train_image),CLUSTER_5,CLUSTER_5
y,"numpy.array(train.drop(['Id','Genre'],axis=1)",CLUSTER_5,CLUSTER_5
classes,numpy.array(train.columns[2:]),CLUSTER_5,CLUSTER_5
classes,numpy.array(train.columns[2:]),CLUSTER_5,CLUSTER_5
classes,numpy.array(train.columns[2:]),CLUSTER_5,CLUSTER_5
classes,numpy.array(train.columns[2:]),CLUSTER_5,CLUSTER_5
top_3,numpy.argsort(proba[0]),CLUSTER_5,CLUSTER_5
top_3,numpy.argsort(proba[0]),CLUSTER_5,CLUSTER_5
top_3,numpy.argsort(proba[0]),CLUSTER_5,CLUSTER_5
top_3,numpy.argsort(proba[0]),CLUSTER_5,CLUSTER_5
train,pandas.read_csv('./Multi_Label_dataset/train.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42,test_size=0.1)",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv('ex2data1.txt',sep="","",header=None)",CLUSTER_5,CLUSTER_1
X,"numpy.array(data.iloc[:,0:2])",CLUSTER_5,CLUSTER_1
y,"numpy.array(data.iloc[:,2:3])",CLUSTER_5,CLUSTER_1
y_Pred,"numpy.where(y_Pred<=0.654,0,1)",CLUSTER_5,CLUSTER_1
z,"numpy.dot(X,self.theta)",CLUSTER_5,CLUSTER_1
z,"numpy.dot(X,coeff)",CLUSTER_5,CLUSTER_1
self.theta,numpy.ones(X.shape[1]),CLUSTER_5,CLUSTER_1
"xTrain,xTest,yTrain,yTest","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_1
results,"sklearn.metrics.confusion_matrix(true_y,pred_y)",CLUSTER_5,CLUSTER_1
df,"pandas.read_csv(os.getenv(""PUIDATA"")",CLUSTER_8,CLUSTER_11
df['date'],pandas.to_datetime(df['starttime']),CLUSTER_8,CLUSTER_11
df_1['birthyear'],pandas.to_numeric(df_1['birthyear']),CLUSTER_8,CLUSTER_11
error_o,numpy.sqrt(counts_o),CLUSTER_8,CLUSTER_11
error_u,numpy.sqrt(counts_u),CLUSTER_8,CLUSTER_11
error_o,numpy.sqrt(counts_o),CLUSTER_8,CLUSTER_11
error_u,numpy.sqrt(counts_u),CLUSTER_8,CLUSTER_11
puidata,"os.getenv(""PUIDATA"")",CLUSTER_8,CLUSTER_11
puidata,"os.getenv(""PUIDATA"")",CLUSTER_8,CLUSTER_11
off_m,numpy.array([df.valuesfordfinoff_plays]),CLUSTER_7,CLUSTER_5
def_m,numpy.array([df.valuesfordfindef_plays]),CLUSTER_7,CLUSTER_5
rus_m,numpy.array([df.valuesfordfinrus_plays]),CLUSTER_7,CLUSTER_5
y_train,"numpy.array(list(map(pdf,y_train.clip(y_min,y_max)",CLUSTER_7,CLUSTER_5
y_test,"numpy.array(list(map(pdf,y_test)",CLUSTER_7,CLUSTER_5
off_def,"numpy.concatenate([off_def_rel_comp,off_def_ed],axis=3)",CLUSTER_7,CLUSTER_5
def_rus,"numpy.concatenate([def_rus_rel_comp,def_rus_ed],axis=3)",CLUSTER_7,CLUSTER_5
x,"numpy.concatenate(features,axis=3)",CLUSTER_7,CLUSTER_5
dir_rad,numpy.deg2rad(data.Dir),CLUSTER_7,CLUSTER_5
off_def_ed,"numpy.sqrt(np.square(off_def_rel_comp[:,:,:,:2])",CLUSTER_7,CLUSTER_5
def_rus_ed,"numpy.sqrt(np.square(def_rus_rel_comp[:,:,:,:2])",CLUSTER_7,CLUSTER_5
off_m,"numpy.expand_dims(off_m,axis=def_axis)",CLUSTER_7,CLUSTER_5
def_m,"numpy.expand_dims(def_m,axis=off_axis)",CLUSTER_7,CLUSTER_5
rus_m,"numpy.expand_dims(rus_m,off_axis)",CLUSTER_7,CLUSTER_5
rus_m,"numpy.expand_dims(rus_m,def_axis)",CLUSTER_7,CLUSTER_5
off_def_ed,"numpy.expand_dims(off_def_ed,3)",CLUSTER_7,CLUSTER_5
def_rus_ed,"numpy.expand_dims(def_rus_ed,3)",CLUSTER_7,CLUSTER_5
hist,pandas.DataFrame(history.history),CLUSTER_7,CLUSTER_5
raw_data,"pandas.read_csv(""../data/fe_data.csv"",index_col=[1])",CLUSTER_7,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(16,8)",CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y)",CLUSTER_7,CLUSTER_5
missing_data,"pandas.concat([total,percent],axis=1,keys=['Total','Percent'])",CLUSTER_7,CLUSTER_11
listings,"pandas.merge(listings,listings_details[target_columns],on='id',how='left')",CLUSTER_7,CLUSTER_11
listings,"pandas.read_csv(""Desktop/Asheville/listings.csv"",index_col=""id"")",CLUSTER_7,CLUSTER_11
listings_details,"pandas.read_csv(""Desktop/Asheville/listings_details.csv"",index_col=""id"",low_memory=False)",CLUSTER_7,CLUSTER_11
reviews,"pandas.read_csv(""Desktop/Asheville/reviews.csv"")",CLUSTER_7,CLUSTER_11
reviews_details,"pandas.read_csv(""Desktop/Asheville/reviews_details.csv"")",CLUSTER_7,CLUSTER_11
neighbourhoods,"pandas.read_csv(""Desktop/Asheville/neighbourhoods.csv"")",CLUSTER_7,CLUSTER_11
calendar,"pandas.read_csv(""Desktop/Asheville/calendar.csv"")",CLUSTER_7,CLUSTER_11
calendar_new['date'],pandas.to_datetime(calendar_new['date']),CLUSTER_7,CLUSTER_11
calendar['date'],pandas.to_datetime(calendar['date']),CLUSTER_7,CLUSTER_11
calendar['date'],pandas.to_datetime(calendar['date']),CLUSTER_7,CLUSTER_11
listings['host_response_rate'],pandas.to_numeric(listings['host_response_rate'].str.strip('%'),CLUSTER_7,CLUSTER_11
entries,os.listdir('Desktop/Asheville/'),CLUSTER_7,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,15)",CLUSTER_7,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_7,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_11
dfountput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','

forkey,valueindftest[4].items()",CLUSTER_7,CLUSTER_8
Guangzhou,"pandas.read_csv(""D:/Math546Timeseries/finalprojects/PM2.5DataofFiveChineseCitiesDataSet/GuangzhouPM20100101_20151231.csv"")",CLUSTER_7,CLUSTER_8
Guangzhou['Time'],pandas.to_datetime(Guangzhou['year'].map(str),CLUSTER_7,CLUSTER_8
by_hour.index,"pandas.to_datetime(by_hour.index,
format='%d-%m-%Y%H:%M:%S')",CLUSTER_7,CLUSTER_8
data_13,by_hour[(by_hour['Time']>=pandas.to_datetime('20140101030000'))&(by_hour['Time']<=pandas.to_datetime('20151231030000'),CLUSTER_7,CLUSTER_8
data,by_hour[(by_hour['Time']>=pandas.to_datetime('20140101030000'))&(by_hour['Time']<=pandas.to_datetime('20140201030000'),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(9,6)",CLUSTER_7,CLUSTER_8
orig,"matplotlib.pyplot.plot(timeseries,color='blue',label='Original')",CLUSTER_7,CLUSTER_8
mean,"matplotlib.pyplot.plot(rolmean,color='red',label='Rollingmean')",CLUSTER_7,CLUSTER_8
std,"matplotlib.pyplot.plot(rolstd,color='black',label='Rollingstd')",CLUSTER_7,CLUSTER_8
orig,"matplotlib.pyplot.plot(test,color='blue',label='Original')",CLUSTER_7,CLUSTER_8
pred,"matplotlib.pyplot.plot(predict_ARMA,color='red',label='Prediction')",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(20,5)",CLUSTER_7,CLUSTER_8
anc_imgs,"numpy.array(anc_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
pos_imgs,"numpy.array(pos_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
neg_imgs,"numpy.array(neg_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
anc_imgs,"numpy.array(anc_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
pos_imgs,"numpy.array(pos_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
neg_imgs,"numpy.array(neg_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
tmp_imgs,"numpy.array(tmp_imgs,dtype=np.float32)",CLUSTER_2,CLUSTER_0
tmp_imgs,"numpy.array(tmp_imgs,dtype=np.float32)",CLUSTER_2,CLUSTER_0
tmp_imgs,"numpy.array(tmp_imgs,dtype=np.float32)",CLUSTER_2,CLUSTER_0
zeros,"numpy.zeros((batch_size,3,1)",CLUSTER_2,CLUSTER_0
zeros,"numpy.zeros((batch_size,3,1)",CLUSTER_2,CLUSTER_0
train_imgs,numpy.zeros(shape=(len(train_df),CLUSTER_2,CLUSTER_0
val_imgs,numpy.zeros(shape=(len(val_df),CLUSTER_2,CLUSTER_0
test_imgs,numpy.zeros(shape=(len(test_df),CLUSTER_2,CLUSTER_0
lr_reducer,ReduceLROnPlateau(factor=numpy.sqrt(0.1),CLUSTER_2,CLUSTER_0
train_df,pandas.read_csv('./data/triplet/train.csv'),CLUSTER_2,CLUSTER_0
val_df,pandas.read_csv('./data/triplet/validation.csv'),CLUSTER_2,CLUSTER_0
test_df,pandas.read_csv('./data/triplet/test.csv'),CLUSTER_2,CLUSTER_0
train_df,pandas.read_csv('./data/triplet/train.csv'),CLUSTER_2,CLUSTER_0
val_df,pandas.read_csv('./data/triplet/validation.csv'),CLUSTER_2,CLUSTER_0
test_df,pandas.read_csv('./data/triplet/test.csv'),CLUSTER_2,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,7)",CLUSTER_2,CLUSTER_0
data,"pandas.read_csv(""data.tsv"",sep=""\t"")",CLUSTER_5,CLUSTER_5
imputer,sklearn.impute.SimpleImputer(strategy='median'),CLUSTER_5,CLUSTER_5
labelencoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
"l,o",sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
n_inside,numpy.sum(circle(x_points),CLUSTER_3,CLUSTER_6
x_array,"numpy.linspace(0,1,100)",CLUSTER_3,CLUSTER_6
k_array,"numpy.linspace(0,20,100)",CLUSTER_3,CLUSTER_6
importances_rf,"pandas.Series(rf.feature_importances_,index=x.columns)",CLUSTER_7,CLUSTER_8
importances_rf_best,"pandas.Series(rf_best.feature_importances_,index=x.columns)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('spotify_dat.csv'),CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=200,min_samples_leaf=5,random_state=SEED,n_jobs=-1)",CLUSTER_7,CLUSTER_8
rf2,sklearn.ensemble.RandomForestRegressor(random_state=SEED),CLUSTER_7,CLUSTER_8
rf_best,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,min_samples_leaf=1,max_depth=4,
random_state=SEED,n_jobs=-1)",CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
gb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=4,n_estimators=400,random_state=SEED)",CLUSTER_7,CLUSTER_8
dt,"sklearn.tree.DecisionTreeRegressor(max_depth=6,min_samples_leaf=5,random_state=3)",CLUSTER_7,CLUSTER_8
CV_rf,"sklearn.model_selection.GridSearchCV(estimator=rf2,param_grid=param_grid,cv=5,n_jobs=-1)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=SEED)",CLUSTER_7,CLUSTER_8
gdf_to_df,pandas.DataFrame(gdf.drop(columns='geometry'),CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame(gdf.drop(['geometry','OBJECTID'],axis=1)",CLUSTER_7,CLUSTER_5
f_imp,"pandas.DataFrame(data={'importance':m.feature_importances_,'features':X_train.columns})",CLUSTER_7,CLUSTER_5
df,pandas.get_dummies(df),CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(30,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(10,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(15,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(25,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(20,10)",CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
geojson,requests.get(url),CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,n_jobs=-2)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=5,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=10,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=25,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=25,max_features=0.5,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=25,max_features=0.5,min_samples_split=0.1)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=25,max_features=0.5,min_samples_split=0.1,oob_score=True)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df.drop(['fatalCount','OBJECTID_1','crashSever','lons','meshblockI','areaUnitID','crashFinan','tlaID','lats','seriousInj','crashRPSH','crashLoc_1','minorInjur','northing','crashSHDes','cornerRoad','crashRPDis','crashDista','crashRPRS','tlaName','easting'],axis=1)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df_imp,y,test_size=0.33,random_state=42)",CLUSTER_7,CLUSTER_5
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=4,shuffle=True)",CLUSTER_5,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=4,shuffle=True)",CLUSTER_5,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=4,shuffle=True)",CLUSTER_5,CLUSTER_0
tick_marks,numpy.arange(len(classes),CLUSTER_5,CLUSTER_0
cm,numpy.zeros((len(experiments),CLUSTER_5,CLUSTER_0
train_results,"numpy.empty((train_samples,num_models)",CLUSTER_5,CLUSTER_0
val_results,"numpy.empty((val_samples,num_models)",CLUSTER_5,CLUSTER_0
train_results,"numpy.empty((train_samples,num_models)",CLUSTER_5,CLUSTER_0
val_results,"numpy.empty((test_samples,num_models)",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val[0].round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val[0].round()",CLUSTER_5,CLUSTER_0
cm_fold,"sklearn.metrics.confusion_matrix(target_val,predict_val[0].round()",CLUSTER_5,CLUSTER_0
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=10),CLUSTER_5,CLUSTER_0
clf,sklearn.ensemble.AdaBoostClassifier(n_estimators=10),CLUSTER_5,CLUSTER_0
clf,sklearn.ensemble.GradientBoostingClassifier(n_estimators=10),CLUSTER_5,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_5,CLUSTER_0
svc,"sklearn.svm.LinearSVC(class_weight='balanced',verbose=1)",CLUSTER_5,CLUSTER_0
exp_df,pandas.DataFrame(experiments),CLUSTER_5,CLUSTER_0
results,"pandas.DataFrame(np.concatenate([val_results,target_val_ts.values.reshape(-1,1)",CLUSTER_5,CLUSTER_0
results,pandas.DataFrame(np.concatenate([loader.get_test_index(),CLUSTER_5,CLUSTER_0
results,pandas.DataFrame({'SK_ID_CURR':loader.get_test_index(),CLUSTER_5,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(class_weight='balanced',C=0.01)",CLUSTER_5,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(class_weight='balanced'),CLUSTER_5,CLUSTER_0
df_new,pandas.DataFrame(),CLUSTER_0,CLUSTER_0
df_train,"pandas.read_csv(train_path,encoding='utf-8')",CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv(test_path,encoding='utf-8')",CLUSTER_0,CLUSTER_0
data_train,pandas.read_csv(train_seg_path),CLUSTER_0,CLUSTER_0
data_test,pandas.read_csv(test_seg_path),CLUSTER_0,CLUSTER_0
data_train_merge,pandas.read_csv(train_seg_merge_path),CLUSTER_0,CLUSTER_0
data_test_merge,pandas.read_csv(test_seg_merge_path),CLUSTER_0,CLUSTER_0
encoder_embedding,"numpy.zeros((num_input_en,embed_size)",CLUSTER_0,CLUSTER_0
decoder_embedding,"numpy.zeros((num_input_de,embed_size)",CLUSTER_0,CLUSTER_0
attention_plot,"numpy.zeros((max_length_targ,max_length_inp)",CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_0,CLUSTER_0
w,"re.sub(r""([?.!,¿])",CLUSTER_0,CLUSTER_0
w,"re.sub(r'[""""]+',"""",w)",CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_0,CLUSTER_0
"input_tensor_train,input_tensor_val,target_tensor_train,target_tensor_val","sklearn.model_selection.train_test_split(tensor_input[:dataset_num],tensor_target[:dataset_num],test_size=0.2)",CLUSTER_0,CLUSTER_0
t1e,time.time(),CLUSTER_4,CLUSTER_7
t1,time.time(),CLUSTER_4,CLUSTER_7
t2,time.time(),CLUSTER_4,CLUSTER_7
t2e,time.time(),CLUSTER_4,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(6,6,sharex=True,sharey=True,figsize=(5,5)",CLUSTER_4,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(figsize=figsize,nrows=nrows,ncols=ncols,
sharey=True,sharex=True)",CLUSTER_4,CLUSTER_7
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_7
idx,numpy.arange(num_examples),CLUSTER_4,CLUSTER_7
self.label_mask,numpy.zeros_like(self.train_y),CLUSTER_4,CLUSTER_7
self.train_x,"numpy.rollaxis(self.train_x,3)",CLUSTER_4,CLUSTER_7
self.valid_x,"numpy.rollaxis(self.valid_x,3)",CLUSTER_4,CLUSTER_7
self.test_x,"numpy.rollaxis(self.test_x,3)",CLUSTER_4,CLUSTER_7
trainset,scipy.io.loadmat(data_dir+'train_32x32.mat'),CLUSTER_4,CLUSTER_7
testset,scipy.io.loadmat(data_dir+'test_32x32.mat'),CLUSTER_4,CLUSTER_7
df,"pandas.get_dummies(df,columns=['weather','shape'])",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(data_location,low_memory=False)",CLUSTER_7,CLUSTER_5
df['reportedTimestamp'],pandas.to_datetime(df['reportedTimestamp']),CLUSTER_7,CLUSTER_5
df['eventDate'],pandas.to_datetime(df['eventDate']),CLUSTER_7,CLUSTER_5
ax.set(xticks,numpy.arange(cm.shape[1]),CLUSTER_7,CLUSTER_5
yticks,numpy.arange(cm.shape[0]),CLUSTER_7,CLUSTER_5
predictions,numpy.array(predictions),CLUSTER_7,CLUSTER_5
class_names,"numpy.array(['Unexplained','Explained','Probable'])",CLUSTER_7,CLUSTER_5
scores,"precision_recall_fscore_support(y_test,y_pred,average='macro',labels=numpy.unique(y_pred)",CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_7,CLUSTER_5
scores,"sklearn.metrics.precision_recall_fscore_support(y_test,y_pred,average='macro',labels=np.unique(y_pred)",CLUSTER_7,CLUSTER_5
acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_5
posts,"pandas.DataFrame(posts,columns=['title','score','id','subreddit','url','num_comments','body','created','user'])",CLUSTER_8,CLUSTER_4
user_df,"pandas.DataFrame({'Users':d_users,'Karma':d_karma})",CLUSTER_8,CLUSTER_4
d_frame,pandas.DataFrame(d_posts),CLUSTER_8,CLUSTER_4
posts,"pandas.DataFrame(posts,columns=['title','score','id','subreddit','url','num_comments','body','created','user'])",CLUSTER_8,CLUSTER_4
c_user_df,"pandas.DataFrame({'Users':c_users,'Karma':c_karma})",CLUSTER_8,CLUSTER_4
Depressed,"pandas.DataFrame({'Text':d_normalized_posts,'Category':""Depressed""})",CLUSTER_8,CLUSTER_4
Control,"pandas.DataFrame({'Text':c_normalized_posts,'Category':""Control""})",CLUSTER_8,CLUSTER_4
Full,"pandas.concat([Depressed,Control])",CLUSTER_8,CLUSTER_4
remove_list,"pandas.read_csv(""Depression_related.csv"")",CLUSTER_8,CLUSTER_4
new_word,"re.sub(r'[^\w\s]','',word)",CLUSTER_8,CLUSTER_4
x,numpy.array(selected['MappedFixationPointX']),CLUSTER_7,CLUSTER_5
y,numpy.array(selected['MappedFixationPointY']),CLUSTER_7,CLUSTER_5
Eyetracking_data,"pandas.read_csv('metro_data.csv',encoding='latin1',sep="";"")",CLUSTER_7,CLUSTER_5
new_data,"pandas.DataFrame(columns=['STATE/UT','YEAR','TIME','ACCIDENTS'],index=np.arange(10000)",CLUSTER_5,CLUSTER_5
data,pandas.read_csv('road-accidents-in-india/only_road_accidents_data3.csv'),CLUSTER_5,CLUSTER_5
data,pandas.read_csv('road-accidents-in-india/only_road_accidents_data3.csv'),CLUSTER_5,CLUSTER_5
new_data,"pd.DataFrame(columns=['STATE/UT','YEAR','TIME','ACCIDENTS'],index=numpy.arange(10000)",CLUSTER_5,CLUSTER_5
X_data,numpy.array([t[0]fortine]),CLUSTER_5,CLUSTER_5
Y_data,numpy.array([y[1]foryine]),CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
df,pandas.read_csv('data.csv'),CLUSTER_8,CLUSTER_1
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""weatherHistory.csv"")",CLUSTER_5,CLUSTER_5
mean_img,"numpy.mean(
cm.load(fl[:-12]+'mmap')",CLUSTER_4,CLUSTER_11
mean_img,"numpy.mean(
cm.load(fl[:-12]+'.tif')",CLUSTER_4,CLUSTER_11
mean_img,"numpy.mean(
cm.load(fl[:-12]+'hdf5')",CLUSTER_4,CLUSTER_11
bord_px_rig,numpy.ceil(np.max(mc.shifts_rig),CLUSTER_4,CLUSTER_11
bord_px_els,numpy.ceil(np.maximum(np.max(np.abs(mc.x_shifts_els),CLUSTER_4,CLUSTER_11
final_size,"numpy.subtract(mc.total_template_els.shape,2*bord_px_els)",CLUSTER_4,CLUSTER_11
"lq,hq","numpy.nanpercentile(mean_img,[.5,99.5])",CLUSTER_4,CLUSTER_11
t0,time.time(),CLUSTER_4,CLUSTER_11
axes,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
axes,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
bt_v,"pandas.read_csv(""application_data/IS_variable.csv"")",CLUSTER_5,CLUSTER_1
pkg_matrix,"numpy.zeros((4,4)",CLUSTER_5,CLUSTER_1
ram_matrix,"numpy.zeros((4,4)",CLUSTER_5,CLUSTER_1
total_matrix,"numpy.zeros((4,4)",CLUSTER_5,CLUSTER_1
pkg_var_matrix,"numpy.zeros((4,26)",CLUSTER_5,CLUSTER_1
ram_var_matrix,"numpy.zeros((4,26)",CLUSTER_5,CLUSTER_1
total_var_matrix,"numpy.zeros((4,26)",CLUSTER_5,CLUSTER_1
pkg_matrix,"sklearn.metrics.confusion_matrix(bt_v['a'],bt_v['Perf_node01_power_energy_pkg_'])",CLUSTER_5,CLUSTER_1
ram_matrix,"sklearn.metrics.confusion_matrix(bt_v['b'],bt_v['Perf_node01_power_energy_ram_'])",CLUSTER_5,CLUSTER_1
total_matrix,"sklearn.metrics.confusion_matrix(bt_v['c'],bt_v['Perf_node01_power_energy_total_'])",CLUSTER_5,CLUSTER_1
tem_matrix,"sklearn.metrics.confusion_matrix(bt_v['Perf_node01_power_energy_pkg_'],bt_v['variable'])",CLUSTER_5,CLUSTER_1
tem_matrix,"sklearn.metrics.confusion_matrix(bt_v['Perf_node01_power_energy_ram_'],bt_v['variable'])",CLUSTER_5,CLUSTER_1
tem_matrix,"sklearn.metrics.confusion_matrix(bt_v['Perf_node01_power_energy_total_'],bt_v['variable'])",CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame(raw_data,columns=['first_name','last_name','age','preTestScore','postTestScore'])",CLUSTER_8,CLUSTER_3
df,pandas.read_csv('../data/example.csv'),CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',header=None)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',names=['UID','FirstName','LastName','Age','Pre-TestScore','Post-TestScore'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',index_col='UID',names=['UID','FirstName','LastName','Age','Pre-TestScore','Post-TestScore'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',index_col=['FirstName','LastName'],names=['UID','FirstName','LastName','Age','Pre-TestScore','Post-TestScore'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',na_values=['.'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',na_values=sentinels)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',na_values=sentinels,skiprows=3)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',thousands=',')",CLUSTER_8,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
p,"numpy.arange(0,5.1,0.1)",CLUSTER_1,CLUSTER_3
year_options,pandas.DatetimeIndex(df.reset_index(),CLUSTER_11,CLUSTER_3
"df[""Date_Y""]","pandas.DatetimeIndex(df[""Date""])",CLUSTER_11,CLUSTER_3
df,"pandas.read_sql_query(""SELECT*FROMfinal_test_dataWHEREDate"",conn)",CLUSTER_11,CLUSTER_3
df,"pandas.read_sql_query(""SELECT*FROM{}"".format(datasetD)",CLUSTER_11,CLUSTER_3
df_ta,"pandas.read_sql_query(""SELECT*FROM{}WHEREDate>='{}'ANDDate<='{}'"".format(datasetD,start_date,end_date)",CLUSTER_11,CLUSTER_3
df_raw_prices,"pandas.read_sql_query(""SELECT*FROMraw_pricesWHEREDate>='{}'ANDDate<='{}'"".format(start_date,end_date)",CLUSTER_11,CLUSTER_3
df['Date'],pandas.to_datetime(df['Date']),CLUSTER_11,CLUSTER_3
date,pandas.to_datetime(clickData['points'][0]['customdata']),CLUSTER_11,CLUSTER_3
df_ta['Date'],pandas.to_datetime(df_ta['Date']),CLUSTER_11,CLUSTER_3
df_raw_prices['Date'],pandas.to_datetime(df_raw_prices['Date']),CLUSTER_11,CLUSTER_3
df,pandas.read_csv('data_processed.csv'),CLUSTER_5,CLUSTER_5
trainingSet,pandas.read_csv('trainingSet.csv'),CLUSTER_5,CLUSTER_5
testSet,pandas.read_csv('testSet.csv'),CLUSTER_5,CLUSTER_5
Y,numpy.array(trainingSet['Value']),CLUSTER_5,CLUSTER_5
X,numpy.array(trainSet_X),CLUSTER_5,CLUSTER_5
Y,numpy.array(testSet['Value']),CLUSTER_5,CLUSTER_5
X,numpy.array(testSet_X),CLUSTER_5,CLUSTER_5
CM,"numpy.zeros((4,4)",CLUSTER_5,CLUSTER_5
clf,"sklearn.neighbors.KNeighborsClassifier(k,weights='uniform')",CLUSTER_5,CLUSTER_5
clf,"sklearn.neighbors.KNeighborsClassifier(5,weights='uniform')",CLUSTER_5,CLUSTER_5
kf,sklearn.model_selection.KFold(n_splits=5),CLUSTER_5,CLUSTER_5
customer,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
pca_df,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df,"pandas.get_dummies(df,prefix_sep='_',drop_first=False)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('customer2.csv'),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=i,init='k-means++',)",CLUSTER_7,CLUSTER_8
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_7,CLUSTER_8
suicides_sgmales_elderly,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='male'),CLUSTER_11,CLUSTER_3
suicides_sgfemales_elderly,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='female'),CLUSTER_11,CLUSTER_3
suicides_sgmales_seniors,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='male'),CLUSTER_11,CLUSTER_3
suicides_sgfemales_seniors,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='female'),CLUSTER_11,CLUSTER_3
suicides_sgmales_adults,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='male'),CLUSTER_11,CLUSTER_3
suicides_sgfemales_adults,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='female'),CLUSTER_11,CLUSTER_3
suicides,"pandas.read_csv('WHO_suicide_statistics.csv',sep=',')",CLUSTER_11,CLUSTER_3
sgdata,"pandas.read_csv('sg_combineddata.csv',sep=',')",CLUSTER_11,CLUSTER_3
sgdata['Year'],pandas.to_datetime(sgdata.Year),CLUSTER_11,CLUSTER_3
x,"numpy.arange(1,30+0.1,0.1)",CLUSTER_1,CLUSTER_9
x,"numpy.arange(1,30+0.1,0.1)",CLUSTER_1,CLUSTER_9
x2,"numpy.array([a1.x,b1.x])",CLUSTER_1,CLUSTER_9
b,numpy.around(a1.fun[0]),CLUSTER_1,CLUSTER_9
b2,numpy.around(b1.fun),CLUSTER_1,CLUSTER_9
b1,"scipy.optimize.differential_evolution(h,a2)",CLUSTER_1,CLUSTER_9
a1,"scipy.optimize.minimize(h,30,method=""BFGS"")",CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(2,4)",CLUSTER_1,CLUSTER_10
vocab,numpy.array(vectorizer.get_feature_names(),CLUSTER_5,CLUSTER_9
"%timeu,s,v","numpy.linalg.svd(vectors,full_matrices=False)",CLUSTER_5,CLUSTER_9
newsgroups_train,"sklearn.datasets.fetch_20newsgroups(subset='train',categories=categories,remove=remove)",CLUSTER_5,CLUSTER_9
newsgroups_test,"sklearn.datasets.fetch_20newsgroups(subset='test',categories=categories,remove=remove)",CLUSTER_5,CLUSTER_9
clf,"sklearn.decomposition.NMF(n_components=d,random_state=1)",CLUSTER_5,CLUSTER_9
"%timeu,s,v","sklearn.decomposition.randomized_svd(vectors,10)",CLUSTER_5,CLUSTER_9
"%timeU,s,Vh","scipy.linalg.svd(vectors,full_matrices=False)",CLUSTER_5,CLUSTER_9
RMSE,numpy.sqrt(mse),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(""baseballs(1)",CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3,random_state=1)",CLUSTER_7,CLUSTER_8
mae,"sklearn.metrics.mean_absolute_error(y_test,y_pred)",CLUSTER_7,CLUSTER_8
mse,"sklearn.metrics.mean_squared_error(y_test,y_pred)",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame({'Actual':y_test,'Predicted':y_pred})",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv(""http://bit.ly/w-data"")",CLUSTER_5,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,
test_size=0.5,random_state=0)",CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
X,"pandas.DataFrame(boston.data,columns=boston.feature_names)",CLUSTER_5,CLUSTER_1
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_1
testdata,"numpy.zeros([100,1000])",CLUSTER_3,CLUSTER_6
result_tuple,"collections.namedtuple('DDLOutput',['created_table','query'])",CLUSTER_10,CLUSTER_4
series,pandas.Series(np.arange(30),CLUSTER_8,CLUSTER_3
series,pandas.Series(np.arange(10),CLUSTER_8,CLUSTER_3
df_obj,pandas.DataFrame(np.random.rand(36),CLUSTER_8,CLUSTER_3
df_obj_1,pandas.DataFrame(np.arange(36),CLUSTER_8,CLUSTER_3
x,"numpy.arange(1,10)",CLUSTER_7,CLUSTER_3
d,"numpy.matrix(df.iloc[:,7:].fillna(0)",CLUSTER_7,CLUSTER_3
"u,s,vt","numpy.linalg.svd(d-col_means,full_matrices=False)",CLUSTER_7,CLUSTER_3
weights,"pandas.DataFrame({
'labels':df.iloc[:,7:].columns,
'PC1weights':np.array(vt[0,:])",CLUSTER_7,CLUSTER_3
df,pandas.read_csv('https://gist.githubusercontent.com/surajrampure/76bef6c3561b6d99fb87106cb91ef2b1/raw/c19e1300a1f8cc36ba93713261fcdcea00f4e8ed/nba_19_stats.csv'),CLUSTER_7,CLUSTER_3
models,sklearn.multiclass.OneVsRestClassifier(MultinomialNB(),CLUSTER_5,CLUSTER_5
kbest,"sklearn.feature_selection.SelectKBest(chi2,k=30)",CLUSTER_5,CLUSTER_5
cv_pipe,"sklearn.pipeline.Pipeline([
('kbest',SelectKBest(chi2,k=30)",CLUSTER_5,CLUSTER_5
df_submit,"pandas.concat([id_test,pd.DataFrame(Y_test_prob,columns=toxic_classes)",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv('../data/train.csv',na_filter=False)",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv('../data/test.csv',na_filter=False)",CLUSTER_5,CLUSTER_5
res,requests.get('http://www.gutenberg.org/cache/epub/1112/pg1112.txt'),CLUSTER_10,CLUSTER_12
res,requests.get('http://inventwithpython.com/page_that_does_not_exist'),CLUSTER_10,CLUSTER_12
res,requests.get('http://inventwithpython.com/page_that_does_not_exist'),CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':'成都',
'language':'zh-Hans',
'unit':'c'
},timeout=1)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/life/suggestion.json',params={
'key':'mbghskqqeagdjdqt',
'location':'成都',
'language':'zh-Hans',
'unit':'c'
},timeout=1)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':'成都',
'language':'zh-Hans',
'unit':'c'
},timeout=1)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':location,
'language':'zh-Hans',
'unit':'c'
},timeout=60)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':location,
'language':'zh-Hans',
'unit':'c'
},timeout=60)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':location,
'language':'zh-Hans',
'unit':'c'
},timeout=60)",CLUSTER_10,CLUSTER_12
weather_data,json.loads(result.text),CLUSTER_10,CLUSTER_12
weather_data,json.loads(result.text),CLUSTER_10,CLUSTER_12
weather_data,json.loads(result.text),CLUSTER_10,CLUSTER_12
weather_data,json.loads(result),CLUSTER_10,CLUSTER_12
weather_data,json.loads(result),CLUSTER_10,CLUSTER_12
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_5,CLUSTER_10
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_10
df_coeff,pandas.DataFrame(data_col_coeff),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""Advertising.csv"")",CLUSTER_7,CLUSTER_5
grids,seaborn.PairGrid(df),CLUSTER_7,CLUSTER_5
g,seaborn.PairGrid(df),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=1)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_op,y,test_size=0.3,random_state=1)",CLUSTER_7,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
model1,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
test_images_dir,os.listdir('data/test'),CLUSTER_2,CLUSTER_0
train_images,os.listdir('data/train/'+'/images'),CLUSTER_2,CLUSTER_0
train_mask,os.listdir('data/train/'+'/masks'),CLUSTER_2,CLUSTER_0
f,"numpy.array((
[0,-1,0],
[-1,5,-1],
[0,-1,0])",CLUSTER_2,CLUSTER_0
output,"numpy.zeros((iH,iW)",CLUSTER_2,CLUSTER_0
f,"numpy.ones((size,size)",CLUSTER_2,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_2,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_2,CLUSTER_0
ax_orig,"matplotlib.pyplot.subplot2grid(layout,(0,0)",CLUSTER_2,CLUSTER_0
ax_filt,"matplotlib.pyplot.subplot2grid(layout,(0,1)",CLUSTER_2,CLUSTER_0
df_timeseries,pandas.read_csv(response_as_file),CLUSTER_9,CLUSTER_2
r,requests.get(url),CLUSTER_9,CLUSTER_2
features,numpy.array(features),CLUSTER_4,CLUSTER_11
labels,numpy.array(labels),CLUSTER_4,CLUSTER_11
ifeatures,numpy.array(ifeatures),CLUSTER_4,CLUSTER_11
labels,numpy.array(labels),CLUSTER_4,CLUSTER_11
sfeatures,"numpy.array(sfeatures,dtype=float)",CLUSTER_4,CLUSTER_11
canvas,"numpy.zeros((h,2*w+128,3)",CLUSTER_4,CLUSTER_11
fs,numpy.concatenate([mh.features.haralick(img),CLUSTER_4,CLUSTER_11
concatenated,numpy.concatenate(alldescriptors),CLUSTER_4,CLUSTER_11
C,numpy.exp(-2.*(X**2+Y**2),CLUSTER_4,CLUSTER_11
hist,numpy.log1p(hist),CLUSTER_4,CLUSTER_11
allfeatures,"numpy.hstack([sfeatures,ifeatures])",CLUSTER_4,CLUSTER_11
hist,numpy.bincount(pixels.ravel(),CLUSTER_4,CLUSTER_11
clf,"sklearn.pipeline.Pipeline([('preproc',StandardScaler()",CLUSTER_4,CLUSTER_11
clf,"sklearn.pipeline.Pipeline([('preproc',StandardScaler()",CLUSTER_4,CLUSTER_11
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_11
cv,"sklearn.model_selection.KFold(n_splits=5,
shuffle=True,random_state=123)",CLUSTER_4,CLUSTER_11
cv,sklearn.model_selection.LeaveOneOut(),CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(
clf,features,labels,cv=cv)",CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(
clf,features,labels,cv=cv)",CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(
clf,ifeatures,labels,n_jobs=-1,cv=cv)",CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(
clf,sfeatures,labels,cv=cv)",CLUSTER_4,CLUSTER_11
score_SURF_global,"sklearn.model_selection.cross_val_score(
clf,allfeatures,labels,cv=cv)",CLUSTER_4,CLUSTER_11
grid,sklearn.model_selection.GridSearchCV(LogisticRegression(),CLUSTER_4,CLUSTER_11
km,sklearn.cluster.KMeans(k),CLUSTER_4,CLUSTER_11
df,pandas.read_csv('./movie_data.csv'),CLUSTER_0,CLUSTER_1
docs,"numpy.array([
'Thesunisshining',
'Theweatherissweet',
'Thesunisshining,theweatherissweet,andoneandoneistwo'])",CLUSTER_0,CLUSTER_1
idf_is,numpy.log((n_docs+1),CLUSTER_0,CLUSTER_1
text,"re.sub('<[^>]*>','',text)",CLUSTER_0,CLUSTER_1
text,"re.sub('[\W]+','',text.lower()",CLUSTER_0,CLUSTER_1
emoticons,re.findall('(?::|;|=),CLUSTER_0,CLUSTER_1
"parser.add_argument('--hosts',type","list,default=json.loads(os.environ['SM_HOSTS'])",CLUSTER_10,CLUSTER_4
search_range,"numpy.arange(1e-3,10,1e-3)",CLUSTER_4,CLUSTER_11
x_tst_knn_gt,"numpy.zeros((N_tst,N)",CLUSTER_4,CLUSTER_11
dist_gt,numpy.zeros(N),CLUSTER_4,CLUSTER_11
sp_gt,"numpy.zeros((N_tst,N)",CLUSTER_4,CLUSTER_11
nns_len,numpy.zeros(N_tst),CLUSTER_4,CLUSTER_11
sp_approx,"numpy.zeros((N_tst,self.N)",CLUSTER_4,CLUSTER_11
non_nan_index,"numpy.where(x_tst_knn[j,:]>=0)",CLUSTER_4,CLUSTER_11
x_tst_knn,"numpy.ones((N_tst,K)",CLUSTER_4,CLUSTER_11
min_ind,numpy.argmin(y),CLUSTER_4,CLUSTER_11
min_ind,numpy.argmin(y),CLUSTER_4,CLUSTER_11
"x_tst_knn_gt[i_tst,:]",numpy.argsort(dist_gt),CLUSTER_4,CLUSTER_11
dist_rand,"numpy.mean(dist_rand,axis=0)",CLUSTER_4,CLUSTER_11
contrast,"numpy.mean(contrast,axis=0)",CLUSTER_4,CLUSTER_11
dist_knn,"numpy.mean(dist_knn,axis=0)",CLUSTER_4,CLUSTER_11
x_trn,"numpy.reshape(x_trn,(-1,2048)",CLUSTER_4,CLUSTER_11
h,"numpy.floor((np.dot(w,x)",CLUSTER_4,CLUSTER_11
y,"numpy.log(f_h(dist_knn,r)",CLUSTER_4,CLUSTER_11
y,"numpy.log(f_h(1/contrast,r)",CLUSTER_4,CLUSTER_11
x_trn,numpy.vstack(x_trn),CLUSTER_4,CLUSTER_11
nns,numpy.unique(nns),CLUSTER_4,CLUSTER_11
dist_rand,numpy.load('eps0.1/dist_rand.npy'),CLUSTER_4,CLUSTER_11
contrast,numpy.load('eps0.1/contrast.npy'),CLUSTER_4,CLUSTER_11
dist_knn,numpy.load('eps0.1/dist_knn.npy'),CLUSTER_4,CLUSTER_11
dist_gt[i_trn],"numpy.linalg.norm(x_trn[i_trn,:]-x_tst[i_tst,:],2)",CLUSTER_4,CLUSTER_11
sp_err_inf_val,"numpy.linalg.norm(val_sp_gt-sp_approx,ord=np.inf,axis=1)",CLUSTER_4,CLUSTER_11
sp_err_inf_val,"numpy.linalg.norm(sp_gt-sp_approx,ord=np.inf,axis=1)",CLUSTER_4,CLUSTER_11
sp_err_inf_val,"numpy.linalg.norm(sp_gt-sp_approx,ord=np.inf,axis=1)",CLUSTER_4,CLUSTER_11
sp_err_inf_val,"numpy.linalg.norm(val_sp_gt-sp_approx,ord=np.inf,axis=1)",CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
end1,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
val_end1,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
end2,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
val_end2,time.time(),CLUSTER_4,CLUSTER_11
start2,time.time(),CLUSTER_4,CLUSTER_11
end2,time.time(),CLUSTER_4,CLUSTER_11
start5,time.time(),CLUSTER_4,CLUSTER_11
end5,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_build_hash,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_query,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_approx_value,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_build_hash,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_query,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_approx_value,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_query,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_approx_value,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_query,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_approx_value,time.time(),CLUSTER_4,CLUSTER_11
start2,time.time(),CLUSTER_4,CLUSTER_11
end2,time.time(),CLUSTER_4,CLUSTER_11
start5,time.time(),CLUSTER_4,CLUSTER_11
end5,time.time(),CLUSTER_4,CLUSTER_11
rex,re.compile('n[0-9]+'),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_6,CLUSTER_10
filter_vals,"numpy.array([[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1]])",CLUSTER_6,CLUSTER_10
filters,"numpy.array([filter_1,filter_2,filter_3,filter_4])",CLUSTER_6,CLUSTER_10
messages,"pandas.read_csv('SMSSpamCollection',sep='\t',names=['label','message'])",CLUSTER_7,CLUSTER_5
spam_detect_model,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer(analyzer=text_processing)",CLUSTER_7,CLUSTER_5
pipeline2,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer(analyzer=text_processing)",CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame({'lower':lower,'upper':upper,'centre':centre},index=idx)",CLUSTER_8,CLUSTER_9
ls8_df,"pandas.read_csv('LS8OLI.rsr',header=0)",CLUSTER_8,CLUSTER_9
s2a,"pandas.read_csv('S2AMSI.rsr',header=0)",CLUSTER_8,CLUSTER_9
xbar,"numpy.average(s2a['SR_WL'],weights=s2a[col])",CLUSTER_8,CLUSTER_9
target_mean_wavelength,"numpy.average(ls8_df['SR_WL'],weights=ls8_df['coastal'])",CLUSTER_8,CLUSTER_9
target_mean_wavelength,"numpy.average(ls8_df['SR_WL'],weights=ls8_df['coastal'])",CLUSTER_8,CLUSTER_9
spline,"scipy.interpolate.UnivariateSpline(ls8_df['SR_WL'],ls8_df['coastal']-ls8_df['coastal'].max()",CLUSTER_8,CLUSTER_9
spline,"scipy.interpolate.UnivariateSpline(s2a['SR_WL'],s2a[col]-s2a[col].max()",CLUSTER_8,CLUSTER_9
spline,"scipy.interpolate.UnivariateSpline(ls8_df['SR_WL'],ls8_df['cirrus']-ls8_df['cirrus'].max()",CLUSTER_8,CLUSTER_9
spline,"scipy.interpolate.UnivariateSpline(ls8_df['SR_WL'],ls8_df['nir']-ls8_df['nir'].max()",CLUSTER_8,CLUSTER_9
df,"pandas.read_csv(""house-votes-84.csv"")",CLUSTER_8,CLUSTER_11
X,"numpy.array([[1,2],
[5,8],
[1.5,1.8],
[8,8],
[1,0.6],
[9,11]])",CLUSTER_5,CLUSTER_9
xx,"numpy.linspace(0,12)",CLUSTER_5,CLUSTER_9
df,"pandas.DataFrame(data,
columns=['Country','Capital','Population'])",CLUSTER_5,CLUSTER_9
models,"pandas.DataFrame({
'Model':['LogisticRegression','SupportVectorMachines','KNN',
'RandomForest','NaiveBayes','DecisionTree'],
'Score':[acc_lr,acc_svc,acc_knn,
acc_random_forest,acc_gaussian,acc_decision_tree]})",CLUSTER_5,CLUSTER_9
df,pandas.read_csv(path),CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.5)",CLUSTER_5,CLUSTER_9
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_9
lm,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
kmeans,"sklearn.cluster.KMeans(n_clusters=3,init='k-means++',max_iter=300,n_init=10,random_state=0)",CLUSTER_5,CLUSTER_9
svc,sklearn.svm.SVC(probability=True),CLUSTER_5,CLUSTER_9
clf,"sklearn.svm.SVC(kernel='linear',C=1.0)",CLUSTER_5,CLUSTER_9
h0,"matplotlib.pyplot.plot(xx,yy,'k-',label=""nonweighteddiv"")",CLUSTER_5,CLUSTER_9
acc_svc,"sklearn.metrics.accuracy_score(y_test,predictions_svm)",CLUSTER_5,CLUSTER_9
acc_gaussian,"sklearn.metrics.accuracy_score(y_test,predictions)",CLUSTER_5,CLUSTER_9
acc_knn,"sklearn.metrics.accuracy_score(y_test,predictions_knn)",CLUSTER_5,CLUSTER_9
acc_decision_tree,"sklearn.metrics.accuracy_score(y_test,predictions_dt)",CLUSTER_5,CLUSTER_9
acc_random_forest,"sklearn.metrics.accuracy_score(y_test,predictions_rf)",CLUSTER_5,CLUSTER_9
acc_lr,"sklearn.metrics.accuracy_score(y_test,predictions_lr)",CLUSTER_5,CLUSTER_9
gaussian,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_9
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_5,CLUSTER_9
decision_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_9
random_forest,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_5,CLUSTER_9
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_9
crimedata_df,"pandas.read_csv(""../Source/crimedata_2017_1.csv"")",CLUSTER_9,CLUSTER_2
"crimedata_df[""DateReported""]","pandas.to_datetime(crimedata_df[""DateReported""])",CLUSTER_9,CLUSTER_2
response,"requests.get(url,params=params)",CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_7,CLUSTER_3
t,"numpy.array([theta_0[i],theta_1[j]])",CLUSTER_7,CLUSTER_3
theta,"numpy.zeros((2,1)",CLUSTER_7,CLUSTER_3
cost_values,numpy.zeros((len(theta_0),CLUSTER_7,CLUSTER_3
error,numpy.dot(X.transpose(),CLUSTER_7,CLUSTER_3
y_pred,numpy.dot(theta.transpose(),CLUSTER_7,CLUSTER_3
theta,numpy.squeeze(theta),CLUSTER_7,CLUSTER_3
theta_0,"numpy.linspace(-10,10,100)",CLUSTER_7,CLUSTER_3
theta_1,"numpy.linspace(-1,4,100)",CLUSTER_7,CLUSTER_3
X,"numpy.append(np.ones((m,1)",CLUSTER_7,CLUSTER_3
data,"pandas.read_csv(""food_truck_data.txt"")",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x='Population',y='Profit',data=data)",CLUSTER_7,CLUSTER_3
counts,collections.Counter(x),CLUSTER_3,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(6,6,)",CLUSTER_6,CLUSTER_10
action,numpy.argmax(q_values.detach(),CLUSTER_6,CLUSTER_10
best_action,numpy.argmax(policy_next_state_values[0].numpy(),CLUSTER_6,CLUSTER_10
average_reward,numpy.mean(results_score[-TARGET_PERIOD:]),CLUSTER_6,CLUSTER_10
state,"numpy.reshape(state,[1,observation_space])",CLUSTER_6,CLUSTER_10
state_next,"numpy.reshape(state_next,[1,observation_space])",CLUSTER_6,CLUSTER_10
action,random.randrange(self.action_space),CLUSTER_6,CLUSTER_10
batch,"random.sample(memory,BATCH_SIZE)",CLUSTER_6,CLUSTER_10
self.memory,collections.deque(maxlen=MEMORY_SIZE),CLUSTER_6,CLUSTER_10
Alfabeto,"numpy.array([""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",
""J"",""K"",""L"",""M"",""N"",""Ñ"",""O"",""P"",""Q"",
""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z"",""""])",CLUSTER_3,CLUSTER_3
poblacion,numpy.array(['_'for_inrange(len(Target),CLUSTER_3,CLUSTER_3
fitness_array,"numpy.array(Fitness,copy=True)",CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_max,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_max_porcentaje,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_medio,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_medio_porcentaje,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_targets,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_targets_porcentaje,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Fitness,numpy.zeros(NPOB),CLUSTER_3,CLUSTER_3
Coincidencias,numpy.zeros(NPOB),CLUSTER_3,CLUSTER_3
padres,numpy.zeros(NumPadres),CLUSTER_3,CLUSTER_3
indices_cromosomas_perfectos,numpy.where(Coincidencias==ITAR_TARGET),CLUSTER_3,CLUSTER_3
padres[i],numpy.argmax(fitness_array),CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_max,"numpy.append(Stats_num_coincidencias_max,num_coincidencias_max)",CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_max_porcentaje,"numpy.append(Stats_num_coincidencias_max_porcentaje,num_coincidencias_max_porcentaje)",CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_medio,"numpy.append(Stats_num_coincidencias_medio,num_coincidencias_medio)",CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_medio_porcentaje,"numpy.append(Stats_num_coincidencias_medio_porcentaje,num_coincidencias_medio_porcentaje)",CLUSTER_3,CLUSTER_3
Stats_num_targets,"numpy.append(Stats_num_targets,num_targets)",CLUSTER_3,CLUSTER_3
Stats_num_targets_porcentaje,"numpy.append(Stats_num_targets_porcentaje,num_targets_porcentaje)",CLUSTER_3,CLUSTER_3
T_Inicio,time.time(),CLUSTER_3,CLUSTER_3
T_Final,time.time(),CLUSTER_3,CLUSTER_3
counts_sim,"numpy.array([
np.histogram(simulated_data[:,i],bins=bins)",CLUSTER_1,CLUSTER_9
KL,"numpy.array([entropy(pk=counts,qk=counts_sim[i])",CLUSTER_1,CLUSTER_9
dolphin_network,"numpy.zeros((N,N)",CLUSTER_1,CLUSTER_9
"μs,σs",numpy.empty(N),CLUSTER_1,CLUSTER_9
KL_percentile,"numpy.percentile(KL,5)",CLUSTER_1,CLUSTER_9
dolphin_data,"numpy.loadtxt('../data/dolphins/out.dolphins',comments='%',dtype=int)",CLUSTER_1,CLUSTER_9
"counts,bins",numpy.histogram(real_data),CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(2,1,sharex=True)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(8,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(8,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(8,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_1,CLUSTER_9
"red,blue,green","seaborn.color_palette('Set1',3)",CLUSTER_1,CLUSTER_9
ax,"seaborn.kdeplot(μs,σs,shade=True,cmap='viridis')",CLUSTER_1,CLUSTER_9
sales,"pandas.read_csv(""../../assets/datasets/sales.csv"")",CLUSTER_7,CLUSTER_5
df,pandas.read_csv(r'..\Datasets\titanic.csv'),CLUSTER_8,CLUSTER_3
data_y,numpy.array(trace.data),CLUSTER_1,CLUSTER_9
max_data,numpy.zeros(100001),CLUSTER_1,CLUSTER_9
max_data,numpy.fromiter((max(value),CLUSTER_1,CLUSTER_9
data_x,"numpy.linspace(trace.start_frequency,trace.stop_frequency,len(data_y)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
dataset,pandas.read_excel(r'E:\\Electronics_data.xlsx'),CLUSTER_0,CLUSTER_1
doc,"re.sub(r'[^a-zA-Z\s]','',doc,re.I|re.A)",CLUSTER_0,CLUSTER_1
contractions_re,re.compile('(%s),CLUSTER_0,CLUSTER_1
lr,"sklearn.linear_model.LogisticRegression(penalty='l2',max_iter=500,C=1,solver='lbfgs',random_state=42)",CLUSTER_0,CLUSTER_1
response,"requests.get(cli_web,stream=True)",CLUSTER_9,CLUSTER_2
res,requests.get('http://sumomo-ch.com/archives.html'),CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data,files=files)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data,files=files)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data,files=files)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
write,pandas.DataFrame(av_data),CLUSTER_9,CLUSTER_2
write,pandas.DataFrame(av_data),CLUSTER_9,CLUSTER_2
write,pandas.DataFrame(av_data),CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict_facetoken,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
av_girl,os.listdir('av_girl_data'),CLUSTER_9,CLUSTER_2
dir_file,os.listdir('av_girl_data/'+name[0]),CLUSTER_9,CLUSTER_2
av_girl,os.listdir('av_girl_data'),CLUSTER_9,CLUSTER_2
av_girl,os.listdir('av_girl_data/not_sure'),CLUSTER_9,CLUSTER_2
B,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_9
a,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_1,CLUSTER_9
b,"numpy.array([[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
c,"numpy.array((1,2,3)",CLUSTER_1,CLUSTER_9
d,"numpy.array((4,5,6)",CLUSTER_1,CLUSTER_9
mean,numpy.zeros(m),CLUSTER_1,CLUSTER_9
x1,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x2,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x1,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x2,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x1,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x2,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
"X1,X2","numpy.meshgrid(x1,x2)",CLUSTER_1,CLUSTER_9
"X1,X2","numpy.meshgrid(x1,x2)",CLUSTER_1,CLUSTER_9
"X1,X2","numpy.meshgrid(x1,x2)",CLUSTER_1,CLUSTER_9
sigma,numpy.eye(m),CLUSTER_1,CLUSTER_9
C1,"pandas.Series([1,2,3,4],index=['A','B','C','D'])",CLUSTER_1,CLUSTER_9
C2,"pandas.Series((1,2,3)",CLUSTER_1,CLUSTER_9
C3,"pandas.Series({1:'A',2:'B'})",CLUSTER_1,CLUSTER_9
C4,"pandas.Series(np.array([1,2,3])",CLUSTER_1,CLUSTER_9
D1,"pandas.DataFrame([[1,2,3],[4,5,6],[7,8,9]],index=['i1','i2','i3'],columns=['c1','c2','c3'])",CLUSTER_1,CLUSTER_9
D2,"pandas.DataFrame(C1,columns=['c1'])",CLUSTER_1,CLUSTER_9
D3,"pandas.DataFrame({'key1':[1,2,3],'key2':[4,5,6]})",CLUSTER_1,CLUSTER_9
D4,"pandas.DataFrame(np.array([[1,2,3],[4,5,6]])",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
data,"pandas.DataFrame(lst,columns=['Variable','Value','All','Good','Bad'])",CLUSTER_7,CLUSTER_8
random_result,"pandas.DataFrame(columns=['model','accuracy','precision','recall','f1_score','roc_auc_score'])",CLUSTER_7,CLUSTER_8
iv_result,"pandas.DataFrame(columns=['model','accuracy','precision','recall','f1_score','roc_auc_score'])",CLUSTER_7,CLUSTER_8
iv_gridsearch_result,"pandas.DataFrame(columns=['model','accuracy','precision','recall','f1_score','roc_auc_score'])",CLUSTER_7,CLUSTER_8
data['loans_latest_time'],pandas.Series(b),CLUSTER_7,CLUSTER_8
data['latest_query_time'],pandas.Series(b),CLUSTER_7,CLUSTER_8
column_headers,"pandas.Series(column_headers,name='feature')",CLUSTER_7,CLUSTER_8
d,"pandas.Series(d,name='iv_value')",CLUSTER_7,CLUSTER_8
iv_result,"pandas.concat([column_headers,d],axis=1)",CLUSTER_7,CLUSTER_8
df['new_feature'],"pandas.qcut(df[feature],10,duplicates='drop')",CLUSTER_7,CLUSTER_8
_data,"pandas.read_csv(r'D:\文档\kaggle\coding\数据科学-datawhale\data.csv',engine='python')",CLUSTER_7,CLUSTER_8
data['latest_query_time'],"pandas.to_datetime(data['latest_query_time'],format='%Y-%m-%d%H:%M:%S.%f')",CLUSTER_7,CLUSTER_8
data['loans_latest_time'],"pandas.to_datetime(data['loans_latest_time'],format='%Y-%m-%d%H:%M:%S.%f')",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_random_forest_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
data['WoE'],numpy.log(data['DistributionGood']/data['DistributionBad']),CLUSTER_7,CLUSTER_8
random_forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_depth=4,n_jobs=-1,oob_score=True,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_depth=4,n_jobs=-1,oob_score=True,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_depth=4,n_jobs=-1,oob_score=True,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_depth=4,n_jobs=-1,oob_score=True,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
sclf_without_prob,"sklearn.ensemble.StackingClassifier(classifiers=[xgb_best,svc_best,dt_bset,
rf_best,lr_best],
meta_classifier=lr_gridsearch.best_estimator_
)",CLUSTER_7,CLUSTER_8
sclf_with_prob,"sklearn.ensemble.StackingClassifier(classifiers=[xgb_best,svc_best,dt_bset,
rf_best,lr_best],
meta_classifier=lr_gridsearch.best_estimator_,
use_probas=True,
)",CLUSTER_7,CLUSTER_8
lr_gridsearch,"sklearn.model_selection.GridSearchCV(logistic,param_grid=lr_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
svc_gridsearch,"sklearn.model_selection.GridSearchCV(svc,param_grid=svc_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
dt_gridsearch,"sklearn.model_selection.GridSearchCV(dt,param_grid=dt_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
rf_gridsearch,"sklearn.model_selection.GridSearchCV(rf,param_grid=rf_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
xgb_gridsearch,"sklearn.model_selection.GridSearchCV(xgb,param_grid=xgb_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
grid_without_prob,"sklearn.model_selection.GridSearchCV(sclf_without_prob,
param_grid={'meta_classifier__C':[0.0001,0.001,0.01,0.1,1.0,5,10],
'meta_classifier__penalty':['l1','l2']},
cv=5,n_jobs=-1,scoring='recall',
verbose=1,)",CLUSTER_7,CLUSTER_8
grid_with_prob,"sklearn.model_selection.GridSearchCV(sclf_without_prob,
param_grid={'meta_classifier__C':[0.0001,0.001,0.01,0.1,1.0,5,10],
'meta_classifier__penalty':['l1','l2']},
cv=5,n_jobs=-1,scoring='recall',
verbose=1,)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_random_forest_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
logistic_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_without_prob_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_with_prob_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
F1,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_without_prob_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_with_prob_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_without_prob_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_with_prob_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_without_prob_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_with_prob_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
svc_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
dt_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
rf_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
xgb_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
logistic_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
svc_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
dt_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
rf_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
xgb_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
logistic_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
svc_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
dt_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
rf_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
xgb_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
grid_without_prob_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
grid_with_prob_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
"logistic_fpr_score_random,logistic_tpr_score_random,logistic_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"svc_fpr_score_random,svc_tpr_score_random,svc_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"dt_fpr_score_random,dt_tpr_score_random,dt_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"rf_fpr_score_random,rf_tpr_score_random,rf_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"xgb_fpr_score_random,xgb_tpr_score_random,xgb_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"logistic_fpr_score_iv,logistic_tpr_score_iv,logistic_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"svc_fpr_score_iv,svc_tpr_score_iv,svc_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"dt_fpr_score_iv,dt_tpr_score_iv,dt_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"rf_fpr_score_iv,rf_tpr_score_iv,rf_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"xgb_fpr_score_iv,xgb_tpr_score_iv,xgb_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"logistic_fpr_score_iv,logistic_tpr_score_iv,logistic_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"svc_fpr_score_iv,svc_tpr_score_iv,svc_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"dt_fpr_score_iv,dt_tpr_score_iv,dt_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"rf_fpr_score_iv,rf_tpr_score_iv,rf_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"xgb_fpr_score_iv,xgb_tpr_score_iv,xgb_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"grid_without_prob_fpr_score_iv,grid_without_prob_tpr_score_iv,grid_without_prob_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"grid_with_prob_fpr_score_iv,grid_with_prob_tpr_score_iv,grid_with_prob_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
logistic,"sklearn.linear_model.LogisticRegression(n_jobs=-1,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
logistic,"sklearn.linear_model.LogisticRegression(n_jobs=-1,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
logistic,"sklearn.linear_model.LogisticRegression(n_jobs=-1,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
svc,"sklearn.svm.SVC(random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
svc,"sklearn.svm.SVC(random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
svc,"sklearn.svm.SVC(random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
dt,"sklearn.tree.DecisionTreeClassifier(max_depth=5,random_state=666)",CLUSTER_7,CLUSTER_8
dt,"sklearn.tree.DecisionTreeClassifier(max_depth=5,random_state=666)",CLUSTER_7,CLUSTER_8
dt,"sklearn.tree.DecisionTreeClassifier(max_depth=5,random_state=666)",CLUSTER_7,CLUSTER_8
lr_best,"sklearn.pipeline.Pipeline([('standardscaler',StandardScaler()",CLUSTER_7,CLUSTER_8
svc_best,"sklearn.pipeline.Pipeline([('standardscaler',StandardScaler()",CLUSTER_7,CLUSTER_8
lr_best,"sklearn.pipeline.Pipeline([('standardscaler',StandardScaler()",CLUSTER_7,CLUSTER_8
svc_best,"sklearn.pipeline.Pipeline([('standardscaler',StandardScaler()",CLUSTER_7,CLUSTER_8
x_values,"numpy.arange(1,pca.n_features_+1)",CLUSTER_7,CLUSTER_5
sorted_idx,numpy.argsort(weights),CLUSTER_7,CLUSTER_5
cumulative_explained_variance_ratio,numpy.cumsum(explained_variance_ratio),CLUSTER_7,CLUSTER_5
missing_num[feature],numpy.sum(missing_flag),CLUSTER_7,CLUSTER_5
non_missing_rows_flag,"numpy.logical_not(azdias.loc[:,'CAMEO_INTL_2015'].isna()",CLUSTER_7,CLUSTER_5
non_missing_rows_flag,"numpy.logical_not(df.loc[:,'CAMEO_INTL_2015'].isna()",CLUSTER_7,CLUSTER_5
nan_per_col.hist(bins,"numpy.linspace(0,1e6,101)",CLUSTER_7,CLUSTER_5
nan_per_col.hist(bins,"numpy.linspace(0,2e5,21)",CLUSTER_7,CLUSTER_5
missing_per_row.plot.hist(bins,"numpy.linspace(0,50,26)",CLUSTER_7,CLUSTER_5
scaled_df,"pandas.DataFrame(scaled_data,columns=azdias.columns)",CLUSTER_7,CLUSTER_5
transformed_df,"pandas.DataFrame(transformed_data,columns=[f'PC{i}'foriinrange(1,transformed_data.shape[1]+1)",CLUSTER_7,CLUSTER_5
decade_feat,"pandas.Series(['DECADE','person','interval',[]],index=feat_info.columns)",CLUSTER_7,CLUSTER_5
movement_feat,"pandas.Series(['MOVEMENT','person','interval',[]],index=feat_info.columns)",CLUSTER_7,CLUSTER_5
wealth_feat,"pandas.Series(['WEALTH','micro-cell','interval',[]],index=feat_info.columns)",CLUSTER_7,CLUSTER_5
lifestage_feat,"pandas.Series(['LIFE_STAGE','micro-cell','interval',[]],index=feat_info.columns)",CLUSTER_7,CLUSTER_5
azdias,"pandas.read_csv('Udacity_AZDIAS_Subset.csv',delimiter=';')",CLUSTER_7,CLUSTER_5
feat_info,"pandas.read_csv('AZDIAS_Feature_Summary.csv',delimiter=';')",CLUSTER_7,CLUSTER_5
sclr,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=20),CLUSTER_7,CLUSTER_5
cluster_model,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_7,CLUSTER_5
final_model,sklearn.cluster.KMeans(n_clusters=final_cluster_count),CLUSTER_7,CLUSTER_5
df_activities,"pandas.read_csv(runkeeper_file,parse_dates=True,index_col='Date')",CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(8,5)",CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_7,CLUSTER_3
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(2,sharex=True,figsize=(12,8)",CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_3
myTitanic,seaborn.load_dataset('titanic'),CLUSTER_10,CLUSTER_4
myTips,seaborn.load_dataset('tips'),CLUSTER_10,CLUSTER_4
output,numpy.array(outputlist),CLUSTER_7,CLUSTER_5
scale,"numpy.array([5e4,1e5,5e5,1e6,2e6])",CLUSTER_7,CLUSTER_5
scale,"numpy.array([1e5,5e5,1e6,5e6,1e7])",CLUSTER_7,CLUSTER_5
scale,"numpy.array([1e5,5e5,1e6,2e6,5e6])",CLUSTER_7,CLUSTER_5
countdf['fractionaloccup.'],numpy.asarray(chipcount),CLUSTER_7,CLUSTER_5
d,"numpy.where(c>0.3*a,1,0)",CLUSTER_7,CLUSTER_5
d,"numpy.where(c>0.3*ab,1,0)",CLUSTER_7,CLUSTER_5
outputidx,numpy.where(output!=0),CLUSTER_7,CLUSTER_5
Z,numpy.reshape(kernel(positions),CLUSTER_7,CLUSTER_5
lengthtot,numpy.sum(tempdf['SequenceLength']),CLUSTER_7,CLUSTER_5
genetot,numpy.sum(tempdf['GeneCount']),CLUSTER_7,CLUSTER_5
"plt.hist(inputdf['numberofcells'],bins","numpy.logspace(-1,3,15)",CLUSTER_7,CLUSTER_5
positions,numpy.vstack([X.ravel(),CLUSTER_7,CLUSTER_5
values,"numpy.vstack([m1,m2])",CLUSTER_7,CLUSTER_5
CS,"matplotlib.pyplot.contour(X,Y,Z)",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
f,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
frame,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_5
legend,"matplotlib.pyplot.legend(['bulk','minimeta'])",CLUSTER_7,CLUSTER_5
sc,"matplotlib.pyplot.scatter(df['k5_x'],df['k5_y'],c=z,s=df['SequenceLength']/5e2,alpha=0.2,cmap=cm)",CLUSTER_7,CLUSTER_5
ax3,"matplotlib.pyplot.subplot(gs[1,0])",CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
countdf,"pandas.DataFrame(columns=[lineage[8:],'counts','chip','fractionaloccup.','mean_occup.','numberofcells','num_contigs','length','genes'])",CLUSTER_7,CLUSTER_5
dcsummary,"pandas.DataFrame([info],columns=['Contigs','Length(bp)",CLUSTER_7,CLUSTER_5
dbscandf,"pandas.DataFrame(columns=['cluster
'dominantphylum','dominantspecies','chipcounts',
'fractionaloccup.','numberofcells','num_contigs',
'length','genes','CRISPRS','NoCOG','mu_x','mu_y','sig_x','sig_y'])",CLUSTER_7,CLUSTER_5
dfjoiner,"pandas.DataFrame([0],columns=['funct_occurence'])",CLUSTER_7,CLUSTER_5
dfjoiner,"pandas.DataFrame([0],columns=['funct_occurence'])",CLUSTER_7,CLUSTER_5
chip,pandas.DataFrame(columns=cols),CLUSTER_7,CLUSTER_5
df_contigorigin,pandas.read_pickle(expt_name+'_contigorigin'),CLUSTER_7,CLUSTER_5
df,pandas.read_pickle(expt_name+'maindf_AR_wellcounts'),CLUSTER_7,CLUSTER_5
chip,pandas.read_pickle(expt_name+'ARasChip'),CLUSTER_7,CLUSTER_5
chip2,pandas.read_pickle(expt_name+'normalizedARasChip'),CLUSTER_7,CLUSTER_5
chip_abs,pandas.read_pickle(expt_name+'absolutecoverageARasChip'),CLUSTER_7,CLUSTER_5
chip_conc,pandas.read_pickle(expt_name+'DNAconcasChip'),CLUSTER_7,CLUSTER_5
COGassembly,pandas.read_pickle(expt_name+'_COGassembly_All'),CLUSTER_7,CLUSTER_5
mh,pandas.read_pickle(expt_name+'megahit_maindf'),CLUSTER_7,CLUSTER_5
mS,pandas.read_pickle(expt_name+'metaSpades_maindf'),CLUSTER_7,CLUSTER_5
mm,pandas.read_pickle(expt_name+'minimeta_maindf'),CLUSTER_7,CLUSTER_5
df,pandas.read_pickle(expt_name+'All_maindf'),CLUSTER_7,CLUSTER_5
COGfun,pandas.read_table('COGreffiles/fun2003-2014.tab'),CLUSTER_7,CLUSTER_5
palette,"seaborn.color_palette('deep',np.unique(labels)",CLUSTER_7,CLUSTER_5
barcolortype,"seaborn.color_palette(""deep"",10)",CLUSTER_7,CLUSTER_5
barcolortype,"seaborn.color_palette(""deep"",len(output)",CLUSTER_7,CLUSTER_5
barcolortype,"seaborn.color_palette(""deep"",10)",CLUSTER_7,CLUSTER_5
palette,"seaborn.diverging_palette(10,220,l=59,n=len(ghb5)",CLUSTER_7,CLUSTER_5
start_time,time.time(),CLUSTER_7,CLUSTER_5
end_time,time.time(),CLUSTER_7,CLUSTER_5
start_time,time.time(),CLUSTER_7,CLUSTER_5
end_time,time.time(),CLUSTER_7,CLUSTER_5
start_time,time.time(),CLUSTER_7,CLUSTER_5
end_time,time.time(),CLUSTER_7,CLUSTER_5
ghb4,collections.Counter(ghb3),CLUSTER_7,CLUSTER_5
listcount,collections.Counter(sublist),CLUSTER_7,CLUSTER_5
listcount,collections.Counter(sublist),CLUSTER_7,CLUSTER_5
kernel,scipy.stats.gaussian_kde(values),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_7
data,"sklearn.datasets.make_blobs(n_samples=100,n_features=3,centers=2,random_state=101)",CLUSTER_5,CLUSTER_7
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_7
J_plus,"numpy.zeros((num_parameters,1)",CLUSTER_3,CLUSTER_6
J_minus,"numpy.zeros((num_parameters,1)",CLUSTER_3,CLUSTER_6
gradapprox,"numpy.zeros((num_parameters,1)",CLUSTER_3,CLUSTER_6
Z1,"numpy.dot(W1,X)",CLUSTER_3,CLUSTER_6
Z2,"numpy.dot(W2,A1)",CLUSTER_3,CLUSTER_6
Z3,"numpy.dot(W3,A2)",CLUSTER_3,CLUSTER_6
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_3,CLUSTER_6
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_3,CLUSTER_6
logprobs,numpy.multiply(-np.log(A3),CLUSTER_3,CLUSTER_6
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_3,CLUSTER_6
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_3,CLUSTER_6
thetaplus,numpy.copy(parameters_values),CLUSTER_3,CLUSTER_6
thetaminus,numpy.copy(parameters_values),CLUSTER_3,CLUSTER_6
numerator,numpy.linalg.norm(grad-gradapprox),CLUSTER_3,CLUSTER_6
denominator,numpy.linalg.norm(numpy.linalg.norm(grad),CLUSTER_3,CLUSTER_6
numerator,numpy.linalg.norm(grad-gradapprox),CLUSTER_3,CLUSTER_6
denominator,numpy.linalg.norm(numpy.linalg.norm(grad),CLUSTER_3,CLUSTER_6
df,"pandas.read_csv(""gapminder_gdp_oceania.csv"")",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""gapminder_gdp_oceania.csv"",index_col=""country"")",CLUSTER_8,CLUSTER_3
data,"pandas.read_csv('gapminder_gdp_europe.csv',index_col='country')",CLUSTER_8,CLUSTER_3
indices,numpy.arange(data.shape[0]),CLUSTER_0,CLUSTER_0
coefs,"numpy.asarray(values[1:],dtype='float32')",CLUSTER_0,CLUSTER_0
data_train,pandas.read_csv('train.csv'),CLUSTER_0,CLUSTER_0
data_train,pandas.read_csv('train.csv'),CLUSTER_0,CLUSTER_0
string,"re.sub(r""\\"","""",string)",CLUSTER_0,CLUSTER_0
string,"re.sub(r""\'"","""",string)",CLUSTER_0,CLUSTER_0
string,"re.sub(r""\"""","""",string)",CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(data,labels,test_size=0.20,random_state=42)",CLUSTER_0,CLUSTER_0
"x_test,x_val,y_test,y_val","sklearn.model_selection.train_test_split(x_test,y_test,test_size=0.50,random_state=42)",CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test_s,x_pred)",CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test_s,x_pred)",CLUSTER_0,CLUSTER_0
data,pandas.read_csv('student_data.csv'),CLUSTER_1,CLUSTER_3
X,"numpy.array(data[[""gre"",""gpa""]])",CLUSTER_1,CLUSTER_3
y,"numpy.array(data[""admit""])",CLUSTER_1,CLUSTER_3
del_w,numpy.zeros(weights.shape),CLUSTER_1,CLUSTER_3
loss,numpy.mean((out-targets),CLUSTER_1,CLUSTER_3
accuracy,numpy.mean(predictions==targets_test),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('E:/Python/Data_Assignment_3/employee_compensation.csv'),CLUSTER_8,CLUSTER_4
df_GDP,pandas.DataFrame(GDP),CLUSTER_7,CLUSTER_9
data_frame_time_srs,"pandas.DataFrame(time_srs,columns=[""values""])",CLUSTER_7,CLUSTER_9
GDP,"pandas.read_csv('../GDP/GDP.csv',parse_dates=True,skiprows=1)",CLUSTER_7,CLUSTER_9
data,pandas.read_pickle('./dataGDP.pkl'),CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_9
x,"numpy.arange(1,len(lag_array)",CLUSTER_7,CLUSTER_9
volatility,numpy.array(volatility[col_name].tolist(),CLUSTER_7,CLUSTER_9
x_axis,numpy.asarray(x_axis),CLUSTER_7,CLUSTER_9
zero_crossings,numpy.where(np.diff(np.sign(y_axis),CLUSTER_7,CLUSTER_9
diff,numpy.diff(times),CLUSTER_7,CLUSTER_9
mask,"numpy.ma.less_equal(diff,0)",CLUSTER_7,CLUSTER_9
masked_diff,"numpy.ma.masked_array(diff,mask)",CLUSTER_7,CLUSTER_9
sqrt_delta_sigma,math.sqrt(delta),CLUSTER_7,CLUSTER_9
peaks,"scipy.signal.find_peaks(wave,height=border)",CLUSTER_7,CLUSTER_9
result.csv(filename,"time.strftime(""%Y%m%d"")",CLUSTER_11,CLUSTER_5
"data[""year""]","pandas.DatetimeIndex(data[""date""])",CLUSTER_11,CLUSTER_5
&(data.year!,"pandas.Period('1969',freq='A-DEC')",CLUSTER_11,CLUSTER_5
data,"pandas.concat([data,age],axis=1)",CLUSTER_11,CLUSTER_5
data['date'],pandas.to_datetime(Date_final),CLUSTER_11,CLUSTER_5
new_arr,numpy.array(d*10**9),CLUSTER_5,CLUSTER_0
pred_diams,"numpy.array(find_points(y_pred,point)",CLUSTER_5,CLUSTER_0
real_diams,numpy.array(pred_d[np.where(y_test[point]==1),CLUSTER_5,CLUSTER_0
G,numpy.zeros(N),CLUSTER_5,CLUSTER_0
A,"numpy.zeros((M,N)",CLUSTER_5,CLUSTER_0
B,"numpy.zeros((M+N,N)",CLUSTER_5,CLUSTER_0
y_,numpy.zeros(M+N),CLUSTER_5,CLUSTER_0
B,"numpy.zeros((M+N,N)",CLUSTER_5,CLUSTER_0
y_,numpy.zeros(M+N),CLUSTER_5,CLUSTER_0
B,"numpy.zeros((M+N,N)",CLUSTER_5,CLUSTER_0
y_,numpy.zeros(M+N),CLUSTER_5,CLUSTER_0
w,numpy.zeros(N),CLUSTER_5,CLUSTER_0
B,"numpy.zeros((M+N,N)",CLUSTER_5,CLUSTER_0
y_,numpy.zeros(M+N),CLUSTER_5,CLUSTER_0
y_try,numpy.zeros(300),CLUSTER_5,CLUSTER_0
"i,",numpy.where(a1==max(a1),CLUSTER_5,CLUSTER_0
"i,",numpy.where(a2==max(a2),CLUSTER_5,CLUSTER_0
"i,",numpy.where(a3==max(a3),CLUSTER_5,CLUSTER_0
a,numpy.zeros_like(d),CLUSTER_5,CLUSTER_0
G,"numpy.linspace(G_min,G_max,N)",CLUSTER_5,CLUSTER_0
pred_d,"numpy.linspace(d_min,d_max,num=Num_diam)",CLUSTER_5,CLUSTER_0
new_train,"numpy.hstack([X_train,linear_pred_for_tr])",CLUSTER_5,CLUSTER_0
new_test,"numpy.hstack([X_test,linear_pred_for_test])",CLUSTER_5,CLUSTER_0
new_test,"numpy.hstack([[X_try],linear_pred_for_test])",CLUSTER_5,CLUSTER_0
w,numpy.load('newspectr/real_freq.npy'),CLUSTER_5,CLUSTER_0
clf,sklearn.linear_model.LassoCV(),CLUSTER_5,CLUSTER_0
clf,sklearn.linear_model.Ridge(alpha=5e-7),CLUSTER_5,CLUSTER_0
"a2,rnorm","scipy.optimize.nnls(B,y_)",CLUSTER_5,CLUSTER_0
"a2,rnorm","scipy.optimize.nnls(B,y_)",CLUSTER_5,CLUSTER_0
"a2,rnorm","scipy.optimize.nnls(B,y_)",CLUSTER_5,CLUSTER_0
"a2,rnorm","scipy.optimize.nnls(B,y_)",CLUSTER_5,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.33,random_state=42)",CLUSTER_5,CLUSTER_0
extrm,"scipy.signal.argrelextrema(y_pred[point],np.greater)",CLUSTER_5,CLUSTER_0
extrm,"scipy.signal.argrelextrema(y_pred[point],np.greater)",CLUSTER_5,CLUSTER_0
tick_marks,numpy.arange(len(classes),CLUSTER_11,CLUSTER_10
Y_pred_classes,"numpy.argmax(Y_pred,axis=1)",CLUSTER_11,CLUSTER_10
"unique,counts","numpy.unique(y,return_counts=True)",CLUSTER_11,CLUSTER_10
"unique,counts","numpy.unique(Y_pred_classes,return_counts=True)",CLUSTER_11,CLUSTER_10
x_npz,"numpy.load(""x_Pneumothorax_balanced_224.npz"")",CLUSTER_11,CLUSTER_10
y_npz,"numpy.load(""y_Pneumothorax_balanced_224.npz"")",CLUSTER_11,CLUSTER_10
"X_train,X_valtest,y_train,y_valtest","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=1,stratify=y)",CLUSTER_11,CLUSTER_10
"X_test,X_val,y_test,y_val","sklearn.model_selection.train_test_split(X_valtest,y_valtest,test_size=0.5,random_state=1,stratify=y_valtest)",CLUSTER_11,CLUSTER_10
current_datetime,datetime.datetime.now(),CLUSTER_11,CLUSTER_10
cnf_matrix,"sklearn.metrics.confusion_matrix(np.argmax(validation_generator.y,axis=1)",CLUSTER_11,CLUSTER_10
"fpr0,tpr0,thresholds0","sklearn.metrics.roc_curve(validation_generator.y[:,0],Y_pred[:,0])",CLUSTER_11,CLUSTER_10
"fpr1,tpr1,thresholds1","sklearn.metrics.roc_curve(validation_generator.y[:,1],Y_pred[:,1])",CLUSTER_11,CLUSTER_10
roc_auc0,"sklearn.metrics.auc(fpr0,tpr0)",CLUSTER_11,CLUSTER_10
roc_auc1,"sklearn.metrics.auc(fpr1,tpr1)",CLUSTER_11,CLUSTER_10
swap,"numpy.array([[0,1],[1,0]],dtype=complex)",CLUSTER_1,CLUSTER_9
ch,"numpy.zeros(n_nodes,dtype=complex)",CLUSTER_1,CLUSTER_9
ch2,"numpy.zeros(n_nodes,dtype=float)",CLUSTER_1,CLUSTER_9
Step1,"numpy.identity(n_nodes,dtype=complex)",CLUSTER_1,CLUSTER_9
Step2,"numpy.identity(n_nodes,dtype=complex)",CLUSTER_1,CLUSTER_9
cwd,os.getcwd(),CLUSTER_4,CLUSTER_7
datetime_rec,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
dataset,"pandas.read_csv('Market_Basket_Optimisation.csv',header=None)",CLUSTER_1,CLUSTER_3
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3,2,3,4,3,4,5,6])",CLUSTER_3,CLUSTER_6
b,"numpy.array([7,2,10,2,7,4,9,4,9,8])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3,4,5])",CLUSTER_3,CLUSTER_6
b,"numpy.array([5,6,7,8,9])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3,2,3,4,3,4,5,6])",CLUSTER_3,CLUSTER_6
b,"numpy.array([7,2,10,2,7,4,9,4,9,8])",CLUSTER_3,CLUSTER_6
a,"numpy.array([2,6,1,9,10,3,27])",CLUSTER_3,CLUSTER_6
a,"numpy.array([5,7,9,8,6,4,5])",CLUSTER_3,CLUSTER_6
b,"numpy.array([6,3,4,8,9,7,1])",CLUSTER_3,CLUSTER_6
a,"numpy.array([5,7,9,8,6,4,5])",CLUSTER_3,CLUSTER_6
b,"numpy.array([6,3,4,8,9,7,1])",CLUSTER_3,CLUSTER_6
index,numpy.where((a>=5),CLUSTER_3,CLUSTER_6
index,"numpy.where(np.logical_and(a>=5,a<=10)",CLUSTER_3,CLUSTER_6
pair_max,"numpy.vectorize(maxx,otypes=[float])",CLUSTER_3,CLUSTER_6
hdb_crimes_aggregate,"pandas.pivot_table(df,index=['hdb_c'],values='id',columns=['offence_category'],aggfunc='count')",CLUSTER_5,CLUSTER_9
df_all,"pandas.read_csv('crimes_lahore_final2014to2016labeledbysayyab.csv',dtype=""object"")",CLUSTER_5,CLUSTER_9
df_all['Timestamp'],"pandas.to_datetime(df_all['Timestamp'],infer_datetime_format=True)",CLUSTER_5,CLUSTER_9
db,"sklearn.cluster.DBSCAN(eps=.000007840,min_samples=9,metric='haversine')",CLUSTER_5,CLUSTER_9
tmp,"re.split('\s{2,}',text)",CLUSTER_10,CLUSTER_4
coronavirus,"pandas.DataFrame(columns=['Province/State','Country/Region','LastUpdate','Confirmed','Deaths','Recovered'])",CLUSTER_4,CLUSTER_11
dates,"pandas.DataFrame({'date':dates,'count':nan})",CLUSTER_4,CLUSTER_11
dates,"pandas.DataFrame({'date':dates,'count':nan})",CLUSTER_4,CLUSTER_11
dates,"pandas.DataFrame({'date':dates,'count':nan})",CLUSTER_4,CLUSTER_11
dates,"pandas.DataFrame({'date':dates,'count':nan})",CLUSTER_4,CLUSTER_11
suisse,"pandas.concat([pd.read_csv('/mnt/datastore/data/medias/media_suisse_fr.csv',header=None)",CLUSTER_4,CLUSTER_11
dates,"pandas.date_range(start='01/22/2020',end=pd.datetime.now()",CLUSTER_4,CLUSTER_11
coronavirus_merge,"pandas.pivot_table(coronavirus_merge,values=['Infections','Deces','Guerisons','GTrend','Tweets'],index=['date'],columns=['country'])",CLUSTER_4,CLUSTER_11
coronavirus_by_country,"pandas.pivot_table(coronavirus_count,values=['Infections','Deces','Guerisons'],index=['date'],
columns=['Pays'])",CLUSTER_4,CLUSTER_11
all_countries,"pandas.read_csv(""https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv"")",CLUSTER_4,CLUSTER_11
coronavirus,"pandas.read_csv(""/mnt/datastore/data/coronavirus_2020-03-16.csv"",sep="";"")",CLUSTER_4,CLUSTER_11
daily_report,pandas.read_csv(url),CLUSTER_4,CLUSTER_11
allemagne,"pandas.read_csv('/mnt/datastore/data/medias/media_allemagne.csv',header=None)",CLUSTER_4,CLUSTER_11
france,"pandas.read_csv('/mnt/datastore/data/medias/media_france.csv',header=None)",CLUSTER_4,CLUSTER_11
italy,"pandas.read_csv('/mnt/datastore/data/medias/media_italy.csv',header=None)",CLUSTER_4,CLUSTER_11
interest,pandas.read_csv('/mnt/datastore/data/gtrend_by_country.csv'),CLUSTER_4,CLUSTER_11
interest,pandas.read_csv('/mnt/datastore/data/gtrend_by_country.csv'),CLUSTER_4,CLUSTER_11
interest,pandas.read_csv('/mnt/datastore/data/gtrend_by_country.csv'),CLUSTER_4,CLUSTER_11
interest,pandas.read_csv('/mnt/datastore/data/gtrend_by_country.csv'),CLUSTER_4,CLUSTER_11
medias_it,"pandas.read_csv('/mnt/datastore/data/medias/media_italy.csv',header=None)",CLUSTER_4,CLUSTER_11
all_geo_tweets_eu_count['date'],pandas.to_datetime(all_geo_tweets_eu_count['date']),CLUSTER_4,CLUSTER_11
coronavirus['date'],pandas.to_datetime(coronavirus['Date']),CLUSTER_4,CLUSTER_11
coronavirus_count['date'],"pandas.to_datetime(coronavirus_count[['Year','Month','Day']])",CLUSTER_4,CLUSTER_11
coronavirus['LastUpdate'],pandas.to_datetime(coronavirus['LastUpdate']),CLUSTER_4,CLUSTER_11
coronavirus_count['date'],"pandas.to_datetime(coronavirus_count[['Year','Month','Day']])",CLUSTER_4,CLUSTER_11
count_FR['date'],pandas.to_datetime(count_FR['date']),CLUSTER_4,CLUSTER_11
count_IT['date'],pandas.to_datetime(count_IT['date']),CLUSTER_4,CLUSTER_11
count_CH['date'],pandas.to_datetime(count_CH['date']),CLUSTER_4,CLUSTER_11
count_DE['date'],pandas.to_datetime(count_DE['date']),CLUSTER_4,CLUSTER_11
count_US['date'],pandas.to_datetime(count_US['date']),CLUSTER_4,CLUSTER_11
medias['date'],pandas.to_datetime(pandas.to_datetime(medias['date']),CLUSTER_4,CLUSTER_11
interest['date'],pandas.to_datetime(interest['date']),CLUSTER_4,CLUSTER_11
tweet_count['date'],pandas.to_datetime(tweet_count['date']),CLUSTER_4,CLUSTER_11
interest_it['date'],pandas.to_datetime(interest_it['date']),CLUSTER_4,CLUSTER_11
interest_it['date'],pandas.to_datetime(interest_it['date']),CLUSTER_4,CLUSTER_11
medias_it['date'],pandas.to_datetime(medias_it['date']),CLUSTER_4,CLUSTER_11
medias_it['date'],pandas.to_datetime(medias_it['date']),CLUSTER_4,CLUSTER_11
count_IT['date'],pandas.to_datetime(count_IT['date']),CLUSTER_4,CLUSTER_11
,numpy.empty(dates.size),CLUSTER_4,CLUSTER_11
,numpy.empty(dates.size),CLUSTER_4,CLUSTER_11
,numpy.empty(dates.size),CLUSTER_4,CLUSTER_11
,numpy.empty(dates.size),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
sns_cmap,"seaborn.light_palette(""Navy"",as_cmap=True)",CLUSTER_4,CLUSTER_11
sns_cmap,"seaborn.light_palette(""Navy"",as_cmap=True)",CLUSTER_4,CLUSTER_11
sns_cmap,"seaborn.light_palette(""Navy"",as_cmap=True)",CLUSTER_4,CLUSTER_11
classes,os.listdir(CORPUS_PATH),CLUSTER_4,CLUSTER_0
X_train,numpy.concatenate(image_list),CLUSTER_4,CLUSTER_0
labels,numpy.concatenate(label_list),CLUSTER_4,CLUSTER_0
class_votes,numpy.zeros(num_classes),CLUSTER_8,CLUSTER_3
data,pandas.read_csv('01_homework_dataset.csv'),CLUSTER_8,CLUSTER_3
rotatedval_complete,"numpy.array((X3,Y3,Z3)",CLUSTER_8,CLUSTER_3
Y1,numpy.cos(alpha),CLUSTER_8,CLUSTER_3
X2,numpy.cos(beta),CLUSTER_8,CLUSTER_3
X3,numpy.cos(delta),CLUSTER_8,CLUSTER_3
alpha,numpy.radians(-Pitch),CLUSTER_8,CLUSTER_3
beta,numpy.radians(-Roll),CLUSTER_8,CLUSTER_3
delta,numpy.radians(-Azimuth),CLUSTER_8,CLUSTER_3
Z1,numpy.sin(alpha),CLUSTER_8,CLUSTER_3
Y3,numpy.sin(delta),CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame(
[
(10,1,5,90,0,0)",CLUSTER_8,CLUSTER_3
info,"pandas.DataFrame({""ID"":['apms','lit','y2h'],""nodos"":nodos,""enlaces"":enlaces,""dirigido"":dirigido,""kmean"":kmean,
""kmin"":kmin,""kmax"":kmax,""densidad"":densidad,""clusteringglobal"":clusteringglobal,
""clusteringlocal"":clusteringlocal,""diametro"":diametro})",CLUSTER_1,CLUSTER_9
"k,pk",numpy.array(gord),CLUSTER_1,CLUSTER_9
"k,pk",numpy.array(gord),CLUSTER_1,CLUSTER_9
logx,numpy.log10(bins),CLUSTER_1,CLUSTER_9
logy,numpy.log10(pk),CLUSTER_1,CLUSTER_9
grados,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
grados,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
gradosporgrado,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
gradosporgrado2,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
out,"scipy.optimize.leastsq(errfunc,pinit,args=(logx,logy)",CLUSTER_1,CLUSTER_9
X_grad,numpy.zeros(X.shape),CLUSTER_4,CLUSTER_11
Theta_grad,numpy.zeros(Theta.shape),CLUSTER_4,CLUSTER_11
my_ratings,numpy.zeros(n_m),CLUSTER_4,CLUSTER_11
grad,numpy.concatenate([X_grad.ravel(),CLUSTER_4,CLUSTER_11
initial_parameters,numpy.concatenate([X.ravel(),CLUSTER_4,CLUSTER_11
p,"numpy.dot(X,Theta.T)",CLUSTER_4,CLUSTER_11
ix,numpy.argsort(my_predictions),CLUSTER_4,CLUSTER_11
J,numpy.sum(np.square(X.dot(Theta.T),CLUSTER_4,CLUSTER_11
Y,"numpy.hstack([my_ratings[:,None],Y])",CLUSTER_4,CLUSTER_11
R,numpy.hstack([(my_ratings>0),CLUSTER_4,CLUSTER_11
res,"scipy.optimize.minimize(lambdax:cofiCostFunc(x,Ynorm,R,num_users,
num_movies,num_features,lambda_)",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join('Data','ex8_movies.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join('Data','ex8_movieParams.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join('Data','ex8_movies.mat')",CLUSTER_4,CLUSTER_11
cb,matplotlib.pyplot.colorbar(),CLUSTER_1,CLUSTER_10
x,"numpy.arange(0,N)",CLUSTER_1,CLUSTER_10
y,"numpy.arange(0,N)",CLUSTER_1,CLUSTER_10
Vc,"numpy.zeros((N,N)",CLUSTER_1,CLUSTER_10
V,"numpy.zeros((N,N,Ns)",CLUSTER_1,CLUSTER_10
conv_l,"numpy.zeros((Ns,1)",CLUSTER_1,CLUSTER_10
Ex,"numpy.zeros((N,N)",CLUSTER_1,CLUSTER_10
Ey,"numpy.zeros((N,N)",CLUSTER_1,CLUSTER_10
cost,numpy.zeros(iters),CLUSTER_4,CLUSTER_11
term,"numpy.multiply(error,X[:,j])",CLUSTER_4,CLUSTER_11
inner,numpy.power(((X*theta.T),CLUSTER_4,CLUSTER_11
x,numpy.linspace(mydata.Population.min(),CLUSTER_4,CLUSTER_11
X,numpy.matrix(X),CLUSTER_4,CLUSTER_11
y,numpy.matrix(y),CLUSTER_4,CLUSTER_11
theta,"numpy.matrix(np.array([0,0])",CLUSTER_4,CLUSTER_11
temp,numpy.matrix(np.zeros(theta.shape),CLUSTER_4,CLUSTER_11
X2,numpy.matrix(X2.values),CLUSTER_4,CLUSTER_11
y2,numpy.matrix(y2.values),CLUSTER_4,CLUSTER_11
theta2,"numpy.matrix(np.array([0,0,0])",CLUSTER_4,CLUSTER_11
mydata,"pandas.read_csv(path,header=None,names=['Population','Profit'])",CLUSTER_4,CLUSTER_11
mydata2,"pandas.read_csv(path,header=None,names=['Size','Bedrooms','Price'])",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
path,os.getcwd(),CLUSTER_4,CLUSTER_11
path,os.getcwd(),CLUSTER_4,CLUSTER_11
review_text,"re.sub(""[^a-zA-Z]"","""",review_text)",CLUSTER_5,CLUSTER_1
train,"pandas.read_csv(r'C:\Laury\Kaggle_Sentiment/labeledTrainData.tsv',header=0,delimiter=""\t"",quoting=3)",CLUSTER_5,CLUSTER_1
test,"pandas.read_csv(r'C:\Laury\Kaggle_Sentiment/testData.tsv',header=0,delimiter=""\t"",quoting=3)",CLUSTER_5,CLUSTER_1
df,"pandas.read_csv('https://github.com/prasertcbs/tutorial/raw/master/mtcars.csv',nrows=10,index_col=0)",CLUSTER_8,CLUSTER_4
df2,"pandas.read_csv('https://github.com/prasertcbs/tutorial/raw/master/gapminder.csv',index_col=[0,1])",CLUSTER_8,CLUSTER_4
df3,pandas.read_csv('https://github.com/prasertcbs/tutorial/raw/master/gapminder.csv'),CLUSTER_8,CLUSTER_4
tips,seaborn.load_dataset('tips'),CLUSTER_3,CLUSTER_6
ldf,"pandas.DataFrame(l1,columns=['query'])",CLUSTER_0,CLUSTER_1
temp,"pandas.DataFrame(X,columns=temp_name)",CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""Corpus_1.csv"")",CLUSTER_0,CLUSTER_1
text,"re.sub(r'[0-9]*','',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(""[
text=re.sub(r'\s\s+','',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(r'[0-9]*','',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(""[
text=re.sub(r'\s\s+','',text)",CLUSTER_0,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_0,CLUSTER_1
WORDS,"collections.Counter(words(open('big_ml.txt',encoding=""utf8"")",CLUSTER_0,CLUSTER_1
inputs,"numpy.array([[0.5,-0.2,0.1]])",CLUSTER_1,CLUSTER_3
targets,numpy.array([[0.4]]),CLUSTER_1,CLUSTER_3
test_w_i_h,"numpy.array([[0.1,-0.2],
[0.4,0.5],
[-0.3,0.2]])",CLUSTER_1,CLUSTER_3
test_w_h_o,"numpy.array([[0.3],
[-0.1]])",CLUSTER_1,CLUSTER_3
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_1,CLUSTER_3
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_1,CLUSTER_3
rides,pandas.read_csv(data_path),CLUSTER_1,CLUSTER_3
dates,pandas.to_datetime(rides.loc[test_data.index]['dteday']),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_1,CLUSTER_3
y,"pandas.Series(shuffle_csv[""class""])",CLUSTER_6,CLUSTER_3
csv_file,"pandas.read_csv(file_name,names=ref_names)",CLUSTER_6,CLUSTER_3
df,"pandas.DataFrame({'Name':name,
'Role':role,
'AreaofInterest':area}
)",CLUSTER_9,CLUSTER_2
url,requests.get('https://www.sfu.ca/computing/people/faculty.html'),CLUSTER_9,CLUSTER_2
temp,"re.sub('<.*?>','',temp)",CLUSTER_9,CLUSTER_2
output,"json.loads(output,strict=False)",CLUSTER_0,CLUSTER_6
output,"json.loads(output,strict=False)",CLUSTER_0,CLUSTER_6
d,collections.defaultdict(list),CLUSTER_0,CLUSTER_6
arr,numpy.array(data),CLUSTER_0,CLUSTER_6
arr,numpy.hstack(arr),CLUSTER_0,CLUSTER_6
rs,"re.match(pattern,string1)",CLUSTER_10,CLUSTER_4
rs_2,"re.match(ptn_2,string1)",CLUSTER_10,CLUSTER_4
m,re.match(r'([\w]+),CLUSTER_10,CLUSTER_4
m,"re.match(r""(\w+)",CLUSTER_10,CLUSTER_4
m,"re.match(r""(\d+)",CLUSTER_10,CLUSTER_4
m,"re.match(r""(\d+)",CLUSTER_10,CLUSTER_4
m,re.search('(?P<name>.*),CLUSTER_10,CLUSTER_4
mm_1,re.search('(?P<name>[\w]+),CLUSTER_10,CLUSTER_4
mm_2,re.search(r'(?P<name>[\w]+),CLUSTER_10,CLUSTER_4
s,re.search('(Sergey\'snumber),CLUSTER_10,CLUSTER_4
match,"re.search(""(nn)",CLUSTER_10,CLUSTER_4
m,"re.search(""(nn)",CLUSTER_10,CLUSTER_4
m_1,re.finditer(r'(?P<first>[.]+),CLUSTER_10,CLUSTER_4
m_2,re.finditer(r'(?:[.]+),CLUSTER_10,CLUSTER_4
r,"re.compile(r""var(\w+|\d+)",CLUSTER_10,CLUSTER_4
p,re.compile(r'[\d]+'),CLUSTER_10,CLUSTER_4
m,"re.compile(r""(?P<first>[(])",CLUSTER_10,CLUSTER_4
pattern,"re.compile(""o[gh]"")",CLUSTER_10,CLUSTER_4
p,re.compile(r'(?P<food1>[\w]+),CLUSTER_10,CLUSTER_4
p,re.compile(r'(?:[\w]+),CLUSTER_10,CLUSTER_4
vertices,"numpy.array([[[0,height],[440,320],[520,320],[width,height]]],dtype=np.int32)",CLUSTER_4,CLUSTER_11
vertices,"numpy.array([[[0,height],[440,320],[520,320],[width,height]]],dtype=np.int32)",CLUSTER_4,CLUSTER_11
vertices,"numpy.array([[[0,height],[440,320],[520,320],[width,height]]],dtype=np.int32)",CLUSTER_4,CLUSTER_11
ori_line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
mask,numpy.zeros_like(img),CLUSTER_4,CLUSTER_11
mean_slope,numpy.mean(slopes),CLUSTER_4,CLUSTER_11
mean_intercept,numpy.mean(intercepts),CLUSTER_4,CLUSTER_11
mean_slope,numpy.mean(keep_slopes),CLUSTER_4,CLUSTER_11
mean_intercept,numpy.mean(keep_intercepts),CLUSTER_4,CLUSTER_11
std_slope,numpy.std(slopes),CLUSTER_4,CLUSTER_11
img_files,os.listdir(img_dir),CLUSTER_4,CLUSTER_11
imgs,os.listdir(img_dir),CLUSTER_4,CLUSTER_11
x,numpy.arange(7),CLUSTER_1,CLUSTER_9
true_variances,"numpy.array([0,662,9501,251,284,1872,555])",CLUSTER_1,CLUSTER_9
Y_total,numpy.array(scaled_Y_parts),CLUSTER_1,CLUSTER_9
thisP,numpy.array(P_models),CLUSTER_1,CLUSTER_9
avg_rsq,numpy.array(rsqs),CLUSTER_1,CLUSTER_9
A,"numpy.array([[-1,0,0,1,0,0,0],
[0,-1,0,1,0,0,0],
[1,1,0,-1,0,0,0],
[-1,0,0,0,1,0,0],
[0,0,-1,0,1,0,0],
[1,0,1,0,-1,0,0],
[0,-1,0,0,0,1,0],
[0,0,-1,0,0,1,0],
[0,1,1,0,0,-1,0],
[-1,0,0,0,0,0,1],
[0,-1,0,0,0,0,1],
[0,0,-1,0,0,0,1],
[0,0,0,-1,0,0,1],
[0,0,0,0,-1,0,1],
[0,0,0,0,0,-1,1],
[1,1,1,0,0,0,-1],
[0,0,0,1,1,0,-1],
[0,0,0,1,0,1,-1],
[0,0,0,0,1,1,-1],
[1,0,0,0,0,1,-1],
[0,1,0,0,1,0,-1],
[0,0,1,1,0,0,-1],
[0,0,-1,0,1,1,-1],
[0,-1,0,1,0,1,-1],
[-1,0,0,1,1,0,-1]])",CLUSTER_1,CLUSTER_9
B,"numpy.array([[0,0,0,0,0,-1,1],
[0,0,0,0,-1,0,1],
[0,0,0,-1,0,0,1],
[0,0,-1,0,1,1,-1],
[0,-1,0,1,0,1,-1],
[-1,0,0,1,1,0,-1],
[1,1,1,-1,-1,-1,1],
])",CLUSTER_1,CLUSTER_9
fixed_b,numpy.array(b),CLUSTER_1,CLUSTER_9
actual_rsq_biases,numpy.array(rsq_est),CLUSTER_1,CLUSTER_9
actual_rsq_biases,numpy.array(rsq_est),CLUSTER_1,CLUSTER_9
biases,"numpy.zeros((maxs.shape[1],7)",CLUSTER_1,CLUSTER_9
preds,"numpy.dot(Xcomb.T[N_R:],wts)",CLUSTER_1,CLUSTER_9
alphas,"numpy.logspace(-4,3,20)",CLUSTER_1,CLUSTER_9
XX,numpy.corrcoef(np.vstack(X_parts),CLUSTER_1,CLUSTER_9
XX_orthog,numpy.corrcoef(np.vstack(X_parts),CLUSTER_1,CLUSTER_9
X_parts,"numpy.vsplit(cat_orthog_X_parts.T,np.cumsum(P_parts)",CLUSTER_1,CLUSTER_9
"wts,res,ranks,sings","numpy.linalg.lstsq(Xcomb.T[:N_R],zY_total[:N_R])",CLUSTER_1,CLUSTER_9
"cat_orthog_X_parts,_,_",numpy.linalg.svd(np.vstack(X_parts),CLUSTER_1,CLUSTER_9
res,"scipy.optimize.fmin_slsqp(minfun,np.zeros(7)",CLUSTER_1,CLUSTER_9
REQUEST,"json.dumps({
'body':{
'name':'JaneDoe',
'phone':'888-555-5245',
'address':'123BellviewDrive,Somewhere,NC'
}
})",CLUSTER_10,CLUSTER_4
REQUEST,"json.dumps({
'body':{
'name':'JaneandJohnDoe',
'address':'321ViewbellLane,SomewhereElse,SC'
},
'path':{
'contact_id':globals()",CLUSTER_10,CLUSTER_4
req,json.loads(REQUEST),CLUSTER_10,CLUSTER_4
req,json.loads(REQUEST),CLUSTER_10,CLUSTER_4
req,json.loads(REQUEST),CLUSTER_10,CLUSTER_4
req,json.loads(REQUEST),CLUSTER_10,CLUSTER_4
resp,requests.get(URL+'/contacts?name=billi'),CLUSTER_10,CLUSTER_4
resp,requests.get(URL+'/contacts'),CLUSTER_10,CLUSTER_4
post_resp,"requests.post(URL+'/contacts',json={
'name':'AliceAdams',
'phone':'919-555-6712',
'address':'42WallabyWay,Sydney,NC'
})",CLUSTER_10,CLUSTER_4
put_resp,"requests.put(URL+'/contacts/'+first_contact_id,{
'phone':'919-444-5601'
})",CLUSTER_10,CLUSTER_4
y,"numpy.zeros((1,Ty)",CLUSTER_4,CLUSTER_11
x,"numpy.expand_dims(x,axis=0)",CLUSTER_4,CLUSTER_11
X,"numpy.load(""./XY_train/X.npy"")",CLUSTER_4,CLUSTER_11
Y,"numpy.load(""./XY_train/Y.npy"")",CLUSTER_4,CLUSTER_11
X_dev,"numpy.load(""./XY_dev/X_dev.npy"")",CLUSTER_4,CLUSTER_11
Y_dev,"numpy.load(""./XY_dev/Y_dev.npy"")",CLUSTER_4,CLUSTER_11
final_df,pandas.read_csv(final_data),CLUSTER_8,CLUSTER_4
mean_saleprice,pandas.DataFrame(train.groupby(['GrLivArea']),CLUSTER_5,CLUSTER_9
index,"pandas.DataFrame(test.Id,columns=['Id'])",CLUSTER_5,CLUSTER_9
index,"pandas.DataFrame(test.Id,columns=['Id'])",CLUSTER_5,CLUSTER_9
pred,pandas.DataFrame(clf.predict(Xte),CLUSTER_5,CLUSTER_9
index,"pandas.DataFrame(test.Id,columns=['Id'])",CLUSTER_5,CLUSTER_9
pred1,pandas.DataFrame(clf.predict(test_fin),CLUSTER_5,CLUSTER_9
pred2,pandas.DataFrame(clf2.predict(test_fin_ridge),CLUSTER_5,CLUSTER_9
pred3,pandas.DataFrame(clf3.predict(test_fin_ridge),CLUSTER_5,CLUSTER_9
pred_final_1,pandas.DataFrame(np.exp(pred_1),CLUSTER_5,CLUSTER_9
pred_final_2,pandas.DataFrame(np.exp(pred_2),CLUSTER_5,CLUSTER_9
pred_Lasso,pandas.DataFrame(np.exp(pred3),CLUSTER_5,CLUSTER_9
pred_xg,pandas.DataFrame(np.exp(pred_xg),CLUSTER_5,CLUSTER_9
all_data,"all_data=pandas.concat((train.loc[:,'MSSubClass':'SaleCondition'],test.loc[:,'MSSubClass':'SaleCondition'])",CLUSTER_5,CLUSTER_9
tr_te,"pandas.concat((train_clf4,test_clf4)",CLUSTER_5,CLUSTER_9
train_str_dum,pandas.get_dummies(train_str),CLUSTER_5,CLUSTER_9
test_str_dum,pandas.get_dummies(test_str),CLUSTER_5,CLUSTER_9
new_train,"pandas.merge(train_flo,train_str_dum,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
new_test,"pandas.merge(test_flo,test_str_dum,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
train_clf2,"pandas.merge(train_clf2,train[['LotFrontage','MasVnrArea','GarageYrBlt']],left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
train_clf3,"pandas.merge(train_clf2,pd.DataFrame(train_clf2_pca)",CLUSTER_5,CLUSTER_9
test_clf2,"pandas.merge(test_clf2,test[['LotFrontage','MasVnrArea','GarageYrBlt']],left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
test_clf3,"pandas.merge(test_clf2,pd.DataFrame(clus.transform(test_clf2)",CLUSTER_5,CLUSTER_9
pred_submit,"pandas.merge(index,pred_final,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
pred_Lasso_submit,"pandas.merge(index,pred_Lasso,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
pred_xg_submit,"pandas.merge(index,pred_xg,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
pred_xg_lasso_submit,"pandas.merge(index,pred_final_2,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
train,"pandas.read_csv(""../input/train.csv"")",CLUSTER_5,CLUSTER_9
test,"pandas.read_csv(""../input/test.csv"")",CLUSTER_5,CLUSTER_9
sample_index,numpy.arange(X.shape[0]),CLUSTER_5,CLUSTER_9
sample_index,numpy.arange(X.shape[0]),CLUSTER_5,CLUSTER_9
y,numpy.array(pd.DataFrame(np.log(train.SalePrice),CLUSTER_5,CLUSTER_9
y2,numpy.array(pd.DataFrame(np.log(train.SalePrice),CLUSTER_5,CLUSTER_9
data_new[i],numpy.array(data_new[i]),CLUSTER_5,CLUSTER_9
test_new[i],numpy.array(test_new[i]),CLUSTER_5,CLUSTER_9
train_np,numpy.array(train_clf3),CLUSTER_5,CLUSTER_9
train_fin,"numpy.array(Select.fit_transform(train_clf4,y)",CLUSTER_5,CLUSTER_9
test_fin,numpy.array(Select.transform(test_clf4),CLUSTER_5,CLUSTER_9
train_fin_ridge,numpy.array(robust_scaler.fit_transform(train_clf3),CLUSTER_5,CLUSTER_9
test_fin_ridge,numpy.array(robust_scaler.transform(test_clf3),CLUSTER_5,CLUSTER_9
pred_oob,numpy.zeros(xtrain.shape[0]),CLUSTER_5,CLUSTER_9
pred_test,numpy.zeros(xtest.shape[0]),CLUSTER_5,CLUSTER_9
pred,numpy.zeros(xte.shape[0]),CLUSTER_5,CLUSTER_9
number_of_batches,numpy.ceil(X.shape[0]/batch_size),CLUSTER_5,CLUSTER_9
train[skewed_feats],numpy.log1p(train[skewed_feats]),CLUSTER_5,CLUSTER_9
test[skewed_feats],numpy.log1p(test[skewed_feats]),CLUSTER_5,CLUSTER_9
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_9
clus,sklearn.decomposition.KernelPCA(n_components=25),CLUSTER_5,CLUSTER_9
corr1,scipy.stats.pearsonr(np.array(pd.DataFrame(data[i]),CLUSTER_5,CLUSTER_9
corr2,scipy.stats.pearsonr(np.array(pd.DataFrame(data[i]**3),CLUSTER_5,CLUSTER_9
Select,"sklearn.feature_selection.SelectKBest(f_regression,k=268)",CLUSTER_5,CLUSTER_9
clf2,sklearn.linear_model.Ridge(alpha=21),CLUSTER_5,CLUSTER_9
clf3,"sklearn.linear_model.LassoCV(alphas=[1,0.1,0.001,0.0005])",CLUSTER_5,CLUSTER_9
robust_scaler,sklearn.preprocessing.RobustScaler(),CLUSTER_5,CLUSTER_9
tmp,scipy.sparse.csr_matrix(tr_te),CLUSTER_5,CLUSTER_9
xtr_te,"scipy.sparse.hstack(sparse_data,format='csr')",CLUSTER_5,CLUSTER_9
outputDf,"pandas.DataFrame(data=output,index=[''])",CLUSTER_8,CLUSTER_1
summary_df,"pandas.DataFrame(index=['NoofSamples','NoofFeatures'])",CLUSTER_8,CLUSTER_1
rundata,pandas.DataFrame(metricslist),CLUSTER_8,CLUSTER_1
data_train,"sklearn.datasets.fetch_20newsgroups(subset='train',categories=categories,
shuffle=True,random_state=42,
remove=remove)",CLUSTER_8,CLUSTER_1
data_test,"sklearn.datasets.fetch_20newsgroups(subset='test',categories=categories,
shuffle=True,random_state=42,
remove=remove)",CLUSTER_8,CLUSTER_1
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(data_train.data,data_train.target,test_size=0.33,random_state=42)",CLUSTER_8,CLUSTER_1
grid[:3],"numpy.array(np.meshgrid(x,y,z,indexing='ij')",CLUSTER_12,CLUSTER_9
s_offsets,"numpy.array([0.25,0.2,0.15,0.1,0.05,0.01])",CLUSTER_12,CLUSTER_9
ang_offsets,"numpy.array([-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9,-10,10])",CLUSTER_12,CLUSTER_9
appended_coords,numpy.array(self.points[0].pos),CLUSTER_12,CLUSTER_9
dom_bound,"numpy.array([xmin,xmax,ymin,ymax,zmin,zmax])",CLUSTER_12,CLUSTER_9
xs,numpy.array(xs),CLUSTER_12,CLUSTER_9
ys,numpy.array(ys),CLUSTER_12,CLUSTER_9
zs,numpy.array(zs),CLUSTER_12,CLUSTER_9
dom_bound,"numpy.array([xmin,xmax,ymin,ymax,zmin,zmax])",CLUSTER_12,CLUSTER_9
lcs_candidates,numpy.array(lcs_candidates),CLUSTER_12,CLUSTER_9
t,numpy.asarray(t),CLUSTER_12,CLUSTER_9
p,numpy.asarray(p),CLUSTER_12,CLUSTER_9
h,numpy.asarray(h),CLUSTER_12,CLUSTER_9
ps,numpy.asarray(ps),CLUSTER_12,CLUSTER_9
grid,"numpy.zeros((12,x.shape[0],y.shape[0],z.shape[0])",CLUSTER_12,CLUSTER_9
mask_c,"numpy.zeros(mask_a.shape,dtype=np.bool)",CLUSTER_12,CLUSTER_9
presences,numpy.zeros((len(lcs_candidates),CLUSTER_12,CLUSTER_9
ret,numpy.empty(x.shape),CLUSTER_12,CLUSTER_9
xi3_sinusoid,"numpy.empty((nx,ny,nz,3)",CLUSTER_12,CLUSTER_9
seps,numpy.empty(n),CLUSTER_12,CLUSTER_9
interpoint_dist,numpy.empty(n),CLUSTER_12,CLUSTER_9
interpoint_dist,numpy.empty(n),CLUSTER_12,CLUSTER_9
hessian,"numpy.empty((x.shape[0],y.shape[0],z.shape[0],3,3)",CLUSTER_12,CLUSTER_9
d0,"numpy.empty((mf_ps.shape[0]-1,mf_ps.shape[0])",CLUSTER_12,CLUSTER_9
d1,"numpy.empty((mf_ps.shape[0]-1,mf_ps.shape[0])",CLUSTER_12,CLUSTER_9
d2,"numpy.empty((mf_ps.shape[0]-1,mf_ps.shape[0])",CLUSTER_12,CLUSTER_9
qvarrs,"numpy.empty((*xs[::10].shape,3)",CLUSTER_12,CLUSTER_9
init_pos,"numpy.empty((Ncores,3)",CLUSTER_12,CLUSTER_9
mask_d,"numpy.empty((nx,ny,nz)",CLUSTER_12,CLUSTER_9
innerprod,"numpy.empty((nx,ny,nz)",CLUSTER_12,CLUSTER_9
t,numpy.ones(pos.shape[1:]),CLUSTER_12,CLUSTER_9
h,numpy.ones(pos.shape[1:]),CLUSTER_12,CLUSTER_9
to_be_added,"numpy.ones(n,dtype=np.bool)",CLUSTER_12,CLUSTER_9
"mask_d[i,j,k]","numpy.any(np.less_equal([d*dps[0]fordindps],0)",CLUSTER_12,CLUSTER_9
indices,numpy.argsort(lambda3s),CLUSTER_12,CLUSTER_9
div,"numpy.ceil(np.linspace(0,x.shape[0],nproc+1)",CLUSTER_12,CLUSTER_9
mask_b,"numpy.less_equal(np.sum(xi3*np.sum(hess_lm3*xi3[...,np.newaxis],axis=3)",CLUSTER_12,CLUSTER_9
mask_a,"numpy.logical_and(np.greater(lm3,1)",CLUSTER_12,CLUSTER_9
h,"numpy.minimum(h,tf-t)",CLUSTER_12,CLUSTER_9
self.A,numpy.sqrt(3),CLUSTER_12,CLUSTER_9
self.B,numpy.sqrt(2),CLUSTER_12,CLUSTER_9
dists,"numpy.sqrt(np.min(d0**2+d1**2+d2**2,axis=0)",CLUSTER_12,CLUSTER_9
dists_mf,"numpy.sqrt(np.min(d0**2+d1**2+d2**2,axis=0)",CLUSTER_12,CLUSTER_9
d0,"numpy.subtract.outer(mf_ps[...,0],ps[...,0])",CLUSTER_12,CLUSTER_9
d1,"numpy.subtract.outer(mf_ps[...,1],ps[...,1])",CLUSTER_12,CLUSTER_9
d2,"numpy.subtract.outer(mf_ps[...,2],ps[...,2])",CLUSTER_12,CLUSTER_9
d0[j],"numpy.subtract.outer(mf_ps[j,0],mf_ps[...,0])",CLUSTER_12,CLUSTER_9
d1[j],"numpy.subtract.outer(mf_ps[j,1],mf_ps[...,1])",CLUSTER_12,CLUSTER_9
d2[j],"numpy.subtract.outer(mf_ps[j,2],mf_ps[...,2])",CLUSTER_12,CLUSTER_9
"x,dx","numpy.linspace(xmin,xmax,nx,retstep=True)",CLUSTER_12,CLUSTER_9
"y,dy","numpy.linspace(ymin,ymax,ny,retstep=True)",CLUSTER_12,CLUSTER_9
"z,dz","numpy.linspace(zmin,zmax,nz,retstep=True)",CLUSTER_12,CLUSTER_9
plane_tols,"numpy.linspace(plane_tol,0.2,11)",CLUSTER_12,CLUSTER_9
dist_tol_factors,"numpy.linspace(1,maxfac,11)",CLUSTER_12,CLUSTER_9
xv,"numpy.linspace(xmin,xmax,4)",CLUSTER_12,CLUSTER_9
yv,"numpy.linspace(ymin,ymax,4)",CLUSTER_12,CLUSTER_9
zv,"numpy.linspace(zmin,zmax,4)",CLUSTER_12,CLUSTER_9
appended_coords,"numpy.vstack((appended_coords,p.pos)",CLUSTER_12,CLUSTER_9
appended_coords,"numpy.vstack((appended_coords,p.pos)",CLUSTER_12,CLUSTER_9
mf_ps,"numpy.vstack((xs,ys,zs)",CLUSTER_12,CLUSTER_9
grad,"numpy.gradient(lm,dx,dy,dz,edge_order=2)",CLUSTER_12,CLUSTER_9
tmp_grad,"numpy.gradient(grad_k,dx,dy,dz,edge_order=2)",CLUSTER_12,CLUSTER_9
interpoint_dist,"numpy.delete(interpoint_dist,i,0)",CLUSTER_12,CLUSTER_9
interpoint_dist,"numpy.delete(interpoint_dist,np.divmod(i+1,n)",CLUSTER_12,CLUSTER_9
seps[i],"numpy.linalg.norm(set_suggestion[np.divmod(i+1,n)",CLUSTER_12,CLUSTER_9
"u,s,v",numpy.linalg.svd(jac),CLUSTER_12,CLUSTER_9
t_start,time.time(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_12,CLUSTER_9
img_list,numpy.asarray(img_list),CLUSTER_4,CLUSTER_0
temp,numpy.frombuffer(canvas.tostring_rgb(),CLUSTER_4,CLUSTER_0
temp,numpy.frombuffer(canvas.tostring_rgb(),CLUSTER_4,CLUSTER_0
mask_list,"numpy.moveaxis(values_list[3],2,0)",CLUSTER_4,CLUSTER_0
eventlist,"numpy.load(EVENTPATH+f'vid{v:03}_sub{s:02}_eventlist.npy',allow_pickle=True)",CLUSTER_4,CLUSTER_0
eventlist,"numpy.load(EVENTPATH+f'vid{v:03}_sub{s:02}_eventlist.npy',allow_pickle=True)",CLUSTER_4,CLUSTER_0
masked_array,"numpy.ma.masked_where(total_mask==0,total_mask)",CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,gridspec_kw={'height_ratios':[5,1],'wspace':0,'hspace':0.05},dpi=200)",CLUSTER_4,CLUSTER_0
"fix,ax","matplotlib.pyplot.subplots(figsize=(14.4,9)",CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,gridspec_kw={'height_ratios':[5,1],'wspace':0,'hspace':0.05},dpi=200)",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(txtloc,sep='\t')",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(txtloc,sep='\t')",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(txtloc,sep='\t')",CLUSTER_4,CLUSTER_0
ax,"seaborn.lineplot(x='x',y='y',hue='event_tracker',marker=""o"",alpha=0.5,sort=False,lw=1,data=df)",CLUSTER_4,CLUSTER_0
r,requests.get(url),CLUSTER_9,CLUSTER_2
tokens,"re.findall('\w+',sentence)",CLUSTER_9,CLUSTER_2
df,pandas.read_csv('titanic.csv'),CLUSTER_7,CLUSTER_3
lm,"seaborn.lmplot(x='Age',y='Fare',data=df,hue='Sex',fit_reg=False)",CLUSTER_7,CLUSTER_3
expected_next_h,"numpy.asarray([
[0.24635157,0.28610883,0.32240467,0.35525807,0.38474904],
[0.49223563,0.55611431,0.61507696,0.66844003,0.7159181],
[0.56735664,0.66310127,0.74419266,0.80889665,0.858299]])",CLUSTER_1,CLUSTER_10
expected_next_c,"numpy.asarray([
[0.32986176,0.39145139,0.451556,0.51014116,0.56717407],
[0.66382255,0.76674007,0.87195994,0.97902709,1.08751345],
[0.74192008,0.90592151,1.07717006,1.25120233,1.42395676]])",CLUSTER_1,CLUSTER_10
expected_h,"numpy.asarray([
[[0.01764008,0.01823233,0.01882671,0.0194232],
[0.11287491,0.12146228,0.13018446,0.13902939],
[0.31358768,0.33338627,0.35304453,0.37250975]],
[[0.45767879,0.4761092,0.4936887,0.51041945],
[0.6704845,0.69350089,0.71486014,0.7346449],
[0.81733511,0.83677871,0.85403753,0.86935314]]])",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,1.2,num=N*D)",CLUSTER_1,CLUSTER_10
prev_h,"numpy.linspace(-0.3,0.7,num=N*H)",CLUSTER_1,CLUSTER_10
prev_c,"numpy.linspace(-0.4,0.9,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-2.1,1.3,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.7,2.2,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.3,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,0.6,num=N*T*D)",CLUSTER_1,CLUSTER_10
h0,"numpy.linspace(-0.4,0.8,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-0.2,0.9,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.3,0.6,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.2,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
model.params[k],"numpy.linspace(-1.4,1.3,num=v.size)",CLUSTER_1,CLUSTER_10
features,"numpy.linspace(-0.5,1.7,num=N*D)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(1,figsize=(18,10)",CLUSTER_5,CLUSTER_10
fig,"matplotlib.pyplot.figure(1,figsize=(18,10)",CLUSTER_5,CLUSTER_10
PCA_var,sklearn.decomposition.PCA(n_components=3),CLUSTER_5,CLUSTER_10
cm,"sklearn.metrics.confusion_matrix(y_test,y_predic)",CLUSTER_5,CLUSTER_10
tick_marks,numpy.arange(len(class_labels_),CLUSTER_5,CLUSTER_10
class_labels_,"numpy.array(['Group1','Group2','Group3'])",CLUSTER_5,CLUSTER_10
data,"numpy.loadtxt(fname=f,delimiter=',',dtype='double')",CLUSTER_5,CLUSTER_10
labels_,"numpy.loadtxt(fname=f,delimiter=',',dtype='string')",CLUSTER_5,CLUSTER_10
data,"numpy.loadtxt(fname=f,delimiter=',',dtype='double')",CLUSTER_5,CLUSTER_10
df_org,pandas.read_csv(r'D:\ML_WORK\Kaggle\Titanic\train.csv'),CLUSTER_7,CLUSTER_3
M,numpy.linalg.inv(D),CLUSTER_1,CLUSTER_9
"w,v",scipy.linalg.eig(M),CLUSTER_1,CLUSTER_9
"X,y","sklearn.datasets.make_s_curve(n_samples=1000,noise=.6,random_state=0)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
y_pos,numpy.arange(len(objects),CLUSTER_4,CLUSTER_0
X_train_left_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_right_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_up_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_down_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_left_down_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_right_up_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_left_up_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_right_down_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
x,"numpy.roll(a,-1,axis=1)",CLUSTER_4,CLUSTER_0
x,"numpy.roll(a,1,axis=1)",CLUSTER_4,CLUSTER_0
x,"numpy.roll(a,-1,axis=0)",CLUSTER_4,CLUSTER_0
x,"numpy.roll(a,1,axis=0)",CLUSTER_4,CLUSTER_0
big_image,"numpy.append(big_image,images[i],axis=0)",CLUSTER_4,CLUSTER_0
input_files,os.listdir(test_image_dir),CLUSTER_4,CLUSTER_0
y,"numpy.dot(x,w)",CLUSTER_2,CLUSTER_7
y,"ed.Normal(loc=numpy.dot(X,M)",CLUSTER_2,CLUSTER_7
bbox,"numpy.array(((280,710)",CLUSTER_12,CLUSTER_3
"plt.scatter(xy_cam[xy_cam_mask,0],xy_cam[xy_cam_mask,1],c",numpy.log1p(r[xy_cam_mask]),CLUSTER_12,CLUSTER_3
xyz_homogen,"numpy.pad(xyz,((0,0)",CLUSTER_12,CLUSTER_3
r,"numpy.linalg.norm(xyz[:,:2],axis=1)",CLUSTER_12,CLUSTER_3
res,requests.get(mwe_url),CLUSTER_10,CLUSTER_2
df,pandas.DataFrame(catalog),CLUSTER_10,CLUSTER_2
doc_df,"pandas.concat(
[df.filter(regex=(""^document"")",CLUSTER_10,CLUSTER_2
features_of_players,"pandas.DataFrame({'quadrant':player_data['playerx'],'playerz':player_data['playerz']})",CLUSTER_8,CLUSTER_1
player_data,"pandas.read_csv(data_filename,delimiter=',')",CLUSTER_8,CLUSTER_1
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,5,figsize=(15,15)",CLUSTER_6,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(1,5,figsize=(15,15)",CLUSTER_6,CLUSTER_11
vertices,"numpy.array([[(0,imshape[0])",CLUSTER_4,CLUSTER_11
vertices,"numpy.array([[(150,imshape[0])",CLUSTER_4,CLUSTER_11
vertices,"numpy.array([[(150,540)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
mask,numpy.zeros_like(img),CLUSTER_4,CLUSTER_11
images,"os.listdir(""test_images/"")",CLUSTER_4,CLUSTER_11
X,pandas.DataFrame(preprocessing.scale(X),CLUSTER_7,CLUSTER_8
data,"pandas.read_csv(""/data/collegescorecard/merged_2011_PP.csv"",encoding=""ISO-8859-1"")",CLUSTER_7,CLUSTER_8
model,sklearn.cluster.KMeans(n_clusters=15),CLUSTER_7,CLUSTER_8
pca_model,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
team_stat,pandas.read_csv(DIRECTORY+'team_stats.csv'),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(20,15)",CLUSTER_7,CLUSTER_8
z,"numpy.linspace(0,32,100)",CLUSTER_7,CLUSTER_8
z,"numpy.linspace(15,70,100)",CLUSTER_7,CLUSTER_8
z,"numpy.linspace(5,10,100)",CLUSTER_7,CLUSTER_8
action,random.choice(list(action_mapping.keys(),CLUSTER_1,CLUSTER_10
env.episodes,"random.sample(env.episodes,2)",CLUSTER_1,CLUSTER_10
ax,"matplotlib.pyplot.subplot(1,3,i+1)",CLUSTER_1,CLUSTER_10
time_start,time.time(),CLUSTER_0,CLUSTER_1
time_end,time.time(),CLUSTER_0,CLUSTER_1
strains['strain_text'],pandas.Series(dtype='str'),CLUSTER_0,CLUSTER_1
dataset,"pandas.read_csv('/content/quoracsv',engine='python',
usecols=['question1','question2','is_duplicate'],
skiprows=random.sample(range(1,data_size)",CLUSTER_0,CLUSTER_1
strains,pandas.read_json('/content/leafly.json'),CLUSTER_0,CLUSTER_1
skiprows,"random.sample(range(1,data_size)",CLUSTER_0,CLUSTER_1
embeddings,numpy.zeros((len(vocabulary.items(),CLUSTER_0,CLUSTER_1
strains['predictions'],"numpy.around(predictions,3)",CLUSTER_0,CLUSTER_1
text,"re.sub('[^a-z]','',text)",CLUSTER_0,CLUSTER_1
"train,validation","sklearn.model_selection.train_test_split(dataset,test_size=0.2)",CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_6,CLUSTER_10
"line,","matplotlib.pyplot.plot(x[:,0],x@a)",CLUSTER_6,CLUSTER_10
s,"re.sub('[0-9]+','0',s)",CLUSTER_5,CLUSTER_10
s,"re.sub('[\W_]+','',s)",CLUSTER_5,CLUSTER_10
nparr0,numpy.array(logistic.coef_[0]),CLUSTER_5,CLUSTER_10
nparr1,numpy.array(logistic.coef_[1]),CLUSTER_5,CLUSTER_10
nparr2,numpy.array(logistic.coef_[2]),CLUSTER_5,CLUSTER_10
nparr3,numpy.array(logistic.coef_[3]),CLUSTER_5,CLUSTER_10
nparr0_2,numpy.array(logistic2.coef_[0]),CLUSTER_5,CLUSTER_10
nparr1_2,numpy.array(logistic2.coef_[1]),CLUSTER_5,CLUSTER_10
nparr2_2,numpy.array(logistic2.coef_[2]),CLUSTER_5,CLUSTER_10
nparr3_2,numpy.array(logistic2.coef_[3]),CLUSTER_5,CLUSTER_10
npR,numpy.array(R_values),CLUSTER_5,CLUSTER_10
rows,"numpy.concatenate((five0,five1,five2,five3)",CLUSTER_5,CLUSTER_10
rows2,"numpy.concatenate((five0_2,five1_2,five2_2,five3_2)",CLUSTER_5,CLUSTER_10
nonzeros,"numpy.concatenate((nparr0[0],nparr1[0],nparr2[0],nparr3[0])",CLUSTER_5,CLUSTER_10
nparr0,numpy.nonzero(logistic.coef_[0]),CLUSTER_5,CLUSTER_10
nparr1,numpy.nonzero(logistic.coef_[1]),CLUSTER_5,CLUSTER_10
nparr2,numpy.nonzero(logistic.coef_[2]),CLUSTER_5,CLUSTER_10
nparr3,numpy.nonzero(logistic.coef_[3]),CLUSTER_5,CLUSTER_10
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_10
logistic,sklearn.linear_model.LogisticRegression(penalty='l2'),CLUSTER_5,CLUSTER_10
lgstc,"sklearn.linear_model.LogisticRegression(penalty='l2',C=cval)",CLUSTER_5,CLUSTER_10
logistic,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
logistic2,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
loge,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
logb,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
logistic,"sklearn.linear_model.LogisticRegression(penalty='l1',C=cval,tol=0.01)",CLUSTER_5,CLUSTER_10
logistic2,"sklearn.linear_model.LogisticRegression(penalty='l2',tol=0.01)",CLUSTER_5,CLUSTER_10
logistic,sklearn.linear_model.LogisticRegression(C=100),CLUSTER_5,CLUSTER_10
mnb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_5,CLUSTER_10
scoree,"sklearn.metrics.f1_score(dev_labels,loge_pred,average=""weighted"")",CLUSTER_5,CLUSTER_10
scoreb,"sklearn.metrics.f1_score(dev_labels,logb_pred,average=""weighted"")",CLUSTER_5,CLUSTER_10
score,"sklearn.metrics.f1_score(dev_labels,log2_pred,average=""weighted"")",CLUSTER_5,CLUSTER_10
newsgroups_train,"sklearn.datasets.fetch_20newsgroups(subset='train',
remove=('headers','footers','quotes')",CLUSTER_5,CLUSTER_10
newsgroups_test,"sklearn.datasets.fetch_20newsgroups(subset='test',
remove=('headers','footers','quotes')",CLUSTER_5,CLUSTER_10
v4,"numpy.arange(1,8)",CLUSTER_1,CLUSTER_10
x,"numpy.arange(1,5)",CLUSTER_1,CLUSTER_10
A,"numpy.arange(1,13)",CLUSTER_1,CLUSTER_10
B,numpy.arange(8),CLUSTER_1,CLUSTER_10
A,numpy.arange(6),CLUSTER_1,CLUSTER_10
v3,"numpy.array([1,3,5])",CLUSTER_1,CLUSTER_10
y,"numpy.array([2,4,6,8])",CLUSTER_1,CLUSTER_10
v1,"numpy.array([3,4])",CLUSTER_1,CLUSTER_10
v2,"numpy.array([4,-3])",CLUSTER_1,CLUSTER_10
A,"numpy.array([[1,3,2],
[1,0,0],
[1,2,2]])",CLUSTER_1,CLUSTER_10
B,"numpy.array([[1,0,5],
[7,5,0],
[2,1,1]])",CLUSTER_1,CLUSTER_10
A,"numpy.array([[4,7],
[2,6]])",CLUSTER_1,CLUSTER_10
A,"numpy.array([[1.,-2.],
[3.,2.]])",CLUSTER_1,CLUSTER_10
x,"numpy.array([[3.],[1.]])",CLUSTER_1,CLUSTER_10
A,"numpy.array([[1,2,3],
[2,5,2],
[6,-3,1]])",CLUSTER_1,CLUSTER_10
b,"numpy.array([6,4,2])",CLUSTER_1,CLUSTER_10
v2,numpy.ones(3),CLUSTER_1,CLUSTER_10
x_vals,"numpy.linspace(0,5,50)",CLUSTER_1,CLUSTER_10
x_vals,"numpy.linspace(0,800,10)",CLUSTER_1,CLUSTER_10
I,numpy.eye(2),CLUSTER_1,CLUSTER_10
A_inv,numpy.linalg.inv(A),CLUSTER_1,CLUSTER_10
x,"numpy.linalg.solve(A,b)",CLUSTER_1,CLUSTER_10
"fix,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
expected_next_h,"numpy.asarray([
[0.24635157,0.28610883,0.32240467,0.35525807,0.38474904],
[0.49223563,0.55611431,0.61507696,0.66844003,0.7159181],
[0.56735664,0.66310127,0.74419266,0.80889665,0.858299]])",CLUSTER_1,CLUSTER_10
expected_next_c,"numpy.asarray([
[0.32986176,0.39145139,0.451556,0.51014116,0.56717407],
[0.66382255,0.76674007,0.87195994,0.97902709,1.08751345],
[0.74192008,0.90592151,1.07717006,1.25120233,1.42395676]])",CLUSTER_1,CLUSTER_10
expected_h,"numpy.asarray([
[[0.01764008,0.01823233,0.01882671,0.0194232],
[0.11287491,0.12146228,0.13018446,0.13902939],
[0.31358768,0.33338627,0.35304453,0.37250975]],
[[0.45767879,0.4761092,0.4936887,0.51041945],
[0.6704845,0.69350089,0.71486014,0.7346449],
[0.81733511,0.83677871,0.85403753,0.86935314]]])",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,1.2,num=N*D)",CLUSTER_1,CLUSTER_10
prev_h,"numpy.linspace(-0.3,0.7,num=N*H)",CLUSTER_1,CLUSTER_10
prev_c,"numpy.linspace(-0.4,0.9,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-2.1,1.3,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.7,2.2,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.3,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,0.6,num=N*T*D)",CLUSTER_1,CLUSTER_10
h0,"numpy.linspace(-0.4,0.8,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-0.2,0.9,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.3,0.6,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.2,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
model.params[k],"numpy.linspace(-1.4,1.3,num=v.size)",CLUSTER_1,CLUSTER_10
features,"numpy.linspace(-0.5,1.7,num=N*D)",CLUSTER_1,CLUSTER_10
mean,numpy.mean(bucket),CLUSTER_3,CLUSTER_6
mean,numpy.mean(bucket),CLUSTER_3,CLUSTER_6
batchMean,numpy.mean(randomDataAvgs),CLUSTER_3,CLUSTER_6
batchMean,numpy.mean(randomDataAvgs),CLUSTER_3,CLUSTER_6
rangeList,numpy.ptp(bucket),CLUSTER_3,CLUSTER_6
prcp_df,pandas.DataFrame(combined_obj),CLUSTER_11,CLUSTER_3
date,"datetime.date(2017,8,23)",CLUSTER_11,CLUSTER_3
iris,"pandas.read_csv(""iris.csv"")",CLUSTER_7,CLUSTER_8
glass,"pandas.read_csv(""glass.csv"")",CLUSTER_7,CLUSTER_8
lens,"pandas.read_csv(""contactlenses.csv"")",CLUSTER_7,CLUSTER_8
anneal,"pandas.read_csv(""anneal.csv"")",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,40)",CLUSTER_7,CLUSTER_8
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
new_df,pandas.DataFrame(columns=cols),CLUSTER_5,CLUSTER_5
t_df,pandas.DataFrame([model_dict]),CLUSTER_5,CLUSTER_5
features,pandas.read_csv('hr_features.csv'),CLUSTER_5,CLUSTER_5
labels,pandas.read_csv('hr_labels.csv'),CLUSTER_5,CLUSTER_5
"x_train,x_test",numpy.array(features[:split]),CLUSTER_5,CLUSTER_5
"y_train,y_test",numpy.array(labels[:split]),CLUSTER_5,CLUSTER_5
cf,"sklearn.metrics.confusion_matrix(y_test,evals)",CLUSTER_5,CLUSTER_5
new_score,"sklearn.metrics.roc_auc_score(y_test,new_preds)",CLUSTER_5,CLUSTER_5
new_score,"sklearn.metrics.roc_auc_score(y_test,new_pred)",CLUSTER_5,CLUSTER_5
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
toronto_onehot,"pandas.get_dummies(toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
Canada_df,"pandas.merge(left=df,right=geo_df)",CLUSTER_9,CLUSTER_2
df,"pandas.read_csv('iso_3166-1_alpha-2_codes.txt',sep=';',header=None,names=['Postcode','Borough','Neighborhood'])",CLUSTER_9,CLUSTER_2
geo_df,pandas.read_csv('http://cocl.us/Geospatial_data'),CLUSTER_9,CLUSTER_2
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
year_bins,"numpy.arange(1910,2020,10)",CLUSTER_1,CLUSTER_10
baby_names.select('Count').hist(bins,"numpy.arange(0,1000,50)",CLUSTER_1,CLUSTER_10
df,"pandas.read_csv('olympics.csv',index_col=0,skiprows=1)",CLUSTER_8,CLUSTER_4
census_df,pandas.read_csv('census.csv'),CLUSTER_8,CLUSTER_4
sal,pandas.read_csv('Salaries.csv'),CLUSTER_8,CLUSTER_4
data1,"pandas.read_csv(r""C:\Users\Administrator\Desktop\picture\1\1.csv"",header=0,index_col=None)",CLUSTER_7,CLUSTER_3
data2,"pandas.read_csv(r""C:\Users\Administrator\Desktop\picture\1\2.csv"",header=0,index_col=None)",CLUSTER_7,CLUSTER_3
data3,"pandas.read_csv(r""C:\Users\Administrator\Desktop\picture\1\3.csv"",header=0,index_col=None)",CLUSTER_7,CLUSTER_3
data4,"pandas.read_csv(r""C:\Users\Administrator\Desktop\picture\1\4.csv"",header=0,index_col=None)",CLUSTER_7,CLUSTER_3
ax,seaborn.boxplot(data=data1),CLUSTER_7,CLUSTER_3
ax,seaborn.boxplot(data=data2),CLUSTER_7,CLUSTER_3
ax,seaborn.boxplot(data=data3),CLUSTER_7,CLUSTER_3
ax,seaborn.boxplot(data=data4),CLUSTER_7,CLUSTER_3
iris,"seaborn.load_dataset(""iris"")",CLUSTER_7,CLUSTER_3
ax2,matplotlib.pyplot.subplot(221),CLUSTER_7,CLUSTER_3
ax2,matplotlib.pyplot.subplot(222),CLUSTER_7,CLUSTER_3
ax2,matplotlib.pyplot.subplot(223),CLUSTER_7,CLUSTER_3
ax2,matplotlib.pyplot.subplot(224),CLUSTER_7,CLUSTER_3
future_dates_df,"pandas.DataFrame(index=future_dates[1:],columns=df.columns)",CLUSTER_1,CLUSTER_3
future_df,"pandas.concat([df,future_dates_df])",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('monthly-milk-production-pounds-p.csv'),CLUSTER_1,CLUSTER_3
df['Month'],pandas.to_datetime(df['Month']),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_1,CLUSTER_3
content,"pandas.read_csv(filename,encoding='gb18030')",CLUSTER_0,CLUSTER_3
with_jieba_cut,collections.Counter(jieba.cut(articles[110]),CLUSTER_0,CLUSTER_3
words_count,collections.Counter(TOKEN),CLUSTER_0,CLUSTER_3
words_count_2,collections.Counter(TOKEN_2_GRAM),CLUSTER_0,CLUSTER_3
g1,pandas.DataFrame(titanic.groupby('sex'),CLUSTER_8,CLUSTER_3
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_5,CLUSTER_10
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_10
labeldf,"pandas.DataFrame(label_list,date_list)",CLUSTER_11,CLUSTER_3
gtrends,"pandas.merge(gtrends,weather,""inner"")",CLUSTER_11,CLUSTER_3
gtrends,"pandas.read_csv(""data/googletrends.csv"")",CLUSTER_11,CLUSTER_3
weather,"pandas.read_csv(""data/NOAAweatherdata.csv"",skiprows=4)",CLUSTER_11,CLUSTER_3
"gtrends[""date_num""]","pandas.to_datetime(gtrends[""month""],yearfirst=True)",CLUSTER_11,CLUSTER_3
"weather[""date_num""]","pandas.to_datetime(weather[""Date""],yearfirst=True)",CLUSTER_11,CLUSTER_3
labels,"numpy.array(['RelativeFreq:{0}|Date:{1}'.format(i[1][0],i[0])",CLUSTER_11,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(14,7)",CLUSTER_11,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,3,sharey=False,sharex=False,figsize=(14,7)",CLUSTER_11,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(14,7)",CLUSTER_11,CLUSTER_3
result,"pandas.concat([movies_per_year,votes_per_year],axis=1)",CLUSTER_3,CLUSTER_3
pdmovies,"pandas.read_csv(""movies.csv"")",CLUSTER_3,CLUSTER_3
X,"numpy.array([[0,0,1],
[0,1,1],
[1,0,1],
[1,1,1]])",CLUSTER_8,CLUSTER_3
y,"numpy.array([[0],
[1],
[1],
[0]])",CLUSTER_8,CLUSTER_3
X,"numpy.array([[0,0,1],
[0,1,1],
[1,0,1],
[1,1,1]])",CLUSTER_8,CLUSTER_3
y,"numpy.array([[0,0,1,1]])",CLUSTER_8,CLUSTER_3
syn0+,"numpy.dot(l0.T,l1_delta)",CLUSTER_8,CLUSTER_3
text,"numpy.array(""Doyouwantsomecafé?"".split()",CLUSTER_4,CLUSTER_7
theta_numpy,numpy.linalg.inv(X.T.dot(X),CLUSTER_4,CLUSTER_7
housing,sklearn.datasets.fetch_california_housing(),CLUSTER_4,CLUSTER_7
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_7
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_7
now,datetime.datetime.utcnow(),CLUSTER_4,CLUSTER_7
df,"pandas.concat([state_dummies,data],axis=1)",CLUSTER_5,CLUSTER_5
state_dummies,"pandas.get_dummies(data.state,prefix='state')",CLUSTER_5,CLUSTER_5
data,pandas.read_csv('Notebook_step3_output.csv'),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_scaled,y,test_size=0.25,random_state=1)",CLUSTER_5,CLUSTER_5
y1,numpy.array(adr),CLUSTER_5,CLUSTER_5
x1,"numpy.column_stack((leadtime,arrivaldateweekno,mealcat,reservedroomtypecat)",CLUSTER_5,CLUSTER_5
atest,"numpy.column_stack((t_leadtime,t_arrivaldateweekno,t_mealcat,t_reservedroomtypecat)",CLUSTER_5,CLUSTER_5
arrivaldatemonthcat,pandas.Series(arrivaldatemonth),CLUSTER_5,CLUSTER_5
mealcat,pandas.Series(mealcat),CLUSTER_5,CLUSTER_5
countrycat,pandas.Series(countrycat),CLUSTER_5,CLUSTER_5
marketsegmentcat,pandas.Series(marketsegmentcat),CLUSTER_5,CLUSTER_5
distributionchannelcat,pandas.Series(distributionchannelcat),CLUSTER_5,CLUSTER_5
reservedroomtypecat,pandas.Series(reservedroomtypecat),CLUSTER_5,CLUSTER_5
assignedroomtypecat,pandas.Series(assignedroomtypecat),CLUSTER_5,CLUSTER_5
deposittypecat,pandas.Series(deposittypecat),CLUSTER_5,CLUSTER_5
customertypecat,pandas.Series(customertypecat),CLUSTER_5,CLUSTER_5
reservationstatuscat,pandas.Series(reservationstatuscat),CLUSTER_5,CLUSTER_5
t_arrivaldatemonthcat,pandas.Series(t_arrivaldatemonth),CLUSTER_5,CLUSTER_5
t_mealcat,pandas.Series(t_mealcat),CLUSTER_5,CLUSTER_5
t_countrycat,pandas.Series(t_countrycat),CLUSTER_5,CLUSTER_5
t_marketsegmentcat,pandas.Series(t_marketsegmentcat),CLUSTER_5,CLUSTER_5
t_distributionchannelcat,pandas.Series(t_distributionchannelcat),CLUSTER_5,CLUSTER_5
t_reservedroomtypecat,pandas.Series(t_reservedroomtypecat),CLUSTER_5,CLUSTER_5
t_assignedroomtypecat,pandas.Series(t_assignedroomtypecat),CLUSTER_5,CLUSTER_5
t_deposittypecat,pandas.Series(t_deposittypecat),CLUSTER_5,CLUSTER_5
t_customertypecat,pandas.Series(t_customertypecat),CLUSTER_5,CLUSTER_5
t_reservationstatuscat,pandas.Series(t_reservationstatuscat),CLUSTER_5,CLUSTER_5
train_df,pandas.read_csv('H1full.csv'),CLUSTER_5,CLUSTER_5
h2data,pandas.read_csv('H2full.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(x1,y1)",CLUSTER_5,CLUSTER_5
tree_reg,sklearn.tree.DecisionTreeRegressor(max_depth=4),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,4)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
nonzeroy,numpy.array(nonzero[0]),CLUSTER_1,CLUSTER_9
nonzerox,numpy.array(nonzero[1]),CLUSTER_1,CLUSTER_9
hist_features,"numpy.concatenate((channel1_hist[0],channel2_hist[0],channel3_hist[0])",CLUSTER_1,CLUSTER_9
heat,"numpy.zeros_like(image[:,:,0])",CLUSTER_1,CLUSTER_9
heat,"numpy.zeros_like(_img[:,:,0])",CLUSTER_1,CLUSTER_9
heatmap,"numpy.clip(heat,0,255)",CLUSTER_1,CLUSTER_9
heatmap,"numpy.clip(heat,0,255)",CLUSTER_1,CLUSTER_9
hog_features,numpy.ravel(hog_features),CLUSTER_1,CLUSTER_9
hog_features,numpy.ravel(hog_features),CLUSTER_1,CLUSTER_9
hog_features,numpy.ravel(hog_features),CLUSTER_1,CLUSTER_9
y,numpy.hstack((np.ones(len(car_features),CLUSTER_1,CLUSTER_9
hog_features,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_1,CLUSTER_9
hog_features,numpy.hstack((hog_feat1),CLUSTER_1,CLUSTER_9
X,"numpy.vstack((car_features,notcar_features)",CLUSTER_1,CLUSTER_9
X,"numpy.vstack((car_features,notcar_features)",CLUSTER_1,CLUSTER_9
draw_img,numpy.copy(img),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(image),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(image),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(image),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(img),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(image),CLUSTER_1,CLUSTER_9
draw_img,numpy.copy(img),CLUSTER_1,CLUSTER_9
channel1_hist,"numpy.histogram(img[:,:,0],bins=nbins,range=bins_range)",CLUSTER_1,CLUSTER_9
channel2_hist,"numpy.histogram(img[:,:,1],bins=nbins,range=bins_range)",CLUSTER_1,CLUSTER_9
channel3_hist,"numpy.histogram(img[:,:,2],bins=nbins,range=bins_range)",CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
t2,time.time(),CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
t2,time.time(),CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
t2,time.time(),CLUSTER_1,CLUSTER_9
svc,sklearn.svm.LinearSVC(),CLUSTER_1,CLUSTER_9
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_1,CLUSTER_9
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_1,CLUSTER_9
data,pandas.DataFrame(dt),CLUSTER_7,CLUSTER_8
cat_df,pandas.DataFrame(df.select_dtypes(include=['object']),CLUSTER_7,CLUSTER_8
cat_df,pandas.DataFrame(df.select_dtypes(include=['object']),CLUSTER_7,CLUSTER_8
cat_df,pandas.DataFrame(df.select_dtypes(include=['object']),CLUSTER_7,CLUSTER_8
num_df,"pandas.DataFrame(df.select_dtypes(include=['float64','int64','int32'])",CLUSTER_7,CLUSTER_8
num_df,"pandas.DataFrame(df.select_dtypes(include=['float64','int64','int32'])",CLUSTER_7,CLUSTER_8
num_df,"pandas.DataFrame(df.select_dtypes(include=['float64','int64','int32'])",CLUSTER_7,CLUSTER_8
dfr,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
Z,pandas.get_dummies(df),CLUSTER_7,CLUSTER_8
pos,pandas.get_dummies(y_test),CLUSTER_7,CLUSTER_8
"df[""AGE_VEHQ""]","pandas.qcut(df.AGE_VEH,3,labels=[""inf14ans"",""entre14_19ans"",""sup19ans""])",CLUSTER_7,CLUSTER_8
"df[""AGE_CLIENTQ""]","pandas.qcut(df.AGE_CLIENT,4,labels=[""inf44ans"",""entre45_55ans"",""entre55_66ans"",""sup66ans""])",CLUSTER_7,CLUSTER_8
"df[""ANCIENQ""]","pandas.qcut(df.AGE_CLIENT,4,labels=[""inf12ans"",""entre12_17ans"",""entre17_26ans"",""sup26ans""])",CLUSTER_7,CLUSTER_8
"df[""PERMISQ""]","pandas.qcut(df.PERMIS,3,labels=[""inf24ans"",""entre25_37ans"",""sup37ans""])",CLUSTER_7,CLUSTER_8
"df[""DUR_CONTQ""]","pandas.qcut(df.DUR_CONT,3,labels=[""inf11ans"",""entre11_17ans"",""sup17ans""])",CLUSTER_7,CLUSTER_8
dt,"pandas.read_table(""..\\ResiliationContratAuto.txt"",sep='|',encoding=""ISO-8859-1"")",CLUSTER_7,CLUSTER_8
df[d],"pandas.to_datetime(df[d],unit='d')",CLUSTER_7,CLUSTER_8
"df[""MMJECHPP""]","pandas.to_datetime(df[""MMJECHPP""],format='%m%d')",CLUSTER_7,CLUSTER_8
"df[""DT_NAI""]","pandas.to_timedelta(df[""DT_NAI""],unit='d')",CLUSTER_7,CLUSTER_8
ind,numpy.arange(len(labels),CLUSTER_7,CLUSTER_8
"df[""CONTRAT""]","numpy.where(df[""CONTRAT""].str.contains(""RESIL"")",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,50)",CLUSTER_7,CLUSTER_8
algo,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
algo,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.neural_network.MLPClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.svm.LinearSVC(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=0)",CLUSTER_7,CLUSTER_8
today,datetime.date.today(),CLUSTER_7,CLUSTER_8
acc_train,"sklearn.metrics.accuracy_score(y_train,y_pred1)",CLUSTER_7,CLUSTER_8
acc_test,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
acc_train,"sklearn.metrics.accuracy_score(y_train,y_pred1)",CLUSTER_7,CLUSTER_8
acc_test,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
mc,"sklearn.metrics.confusion_matrix(y,y_hat)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
specificite,"sklearn.metrics.make_scorer(specificity,greater_is_better=True)",CLUSTER_7,CLUSTER_8
specificite,"sklearn.metrics.make_scorer(specificity,greater_is_better=True)",CLUSTER_7,CLUSTER_8
sensib,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
se,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_7,CLUSTER_8
taille,"numpy.arange(start=1,stop=26681,step=1)",CLUSTER_7,CLUSTER_8
index,numpy.argsort(score),CLUSTER_7,CLUSTER_8
cpos,numpy.cumsum(sort_pos),CLUSTER_7,CLUSTER_8
npos,numpy.sum(pos),CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(importance,columns=['feature','fscore'])",CLUSTER_7,CLUSTER_8
lrmodel,sklearn.linear_model.LinearRegression(),CLUSTER_10,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y)",CLUSTER_10,CLUSTER_4
submission_train_1,pandas.DataFrame(dataset_blend_train_2),CLUSTER_7,CLUSTER_8
submission_test_1,pandas.DataFrame(dataset_blend_test_2),CLUSTER_7,CLUSTER_8
submission_df,"pandas.DataFrame(data={'Id':id_test,'SalePrice':y_submission})",CLUSTER_7,CLUSTER_8
dg_pca_train,pandas.read_csv('dg_pca_train.csv'),CLUSTER_7,CLUSTER_8
dg_pca_test,pandas.read_csv('dg_pca_test.csv'),CLUSTER_7,CLUSTER_8
id_test,pandas.read_csv('id_test.csv'),CLUSTER_7,CLUSTER_8
id_train,pandas.read_csv('id_train.csv'),CLUSTER_7,CLUSTER_8
score_train,pandas.read_csv('score_train.csv'),CLUSTER_7,CLUSTER_8
dataset_blend_train,"numpy.zeros((X.shape[0],len(clfs)",CLUSTER_7,CLUSTER_8
dataset_blend_test,"numpy.zeros((X_predict.shape[0],len(clfs)",CLUSTER_7,CLUSTER_8
dataset_blend_test_j,"numpy.zeros((X_predict.shape[0],len(skf)",CLUSTER_7,CLUSTER_8
dataset_blend_train_2,"numpy.zeros((X.shape[0],len(clfs)",CLUSTER_7,CLUSTER_8
dataset_blend_test_2,"numpy.zeros((X_predict.shape[0],len(clfs)",CLUSTER_7,CLUSTER_8
dataset_blend_test_j,"numpy.zeros((X_predict.shape[0],len(skf)",CLUSTER_7,CLUSTER_8
dataset_blend_test,"numpy.hstack((dataset_blend_test_1,dataset_blend_test_2)",CLUSTER_7,CLUSTER_8
dataset_blend_train,"numpy.hstack((dataset_blend_train_1,dataset_blend_train_2)",CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_folds,True,50)",CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_folds,True,50)",CLUSTER_7,CLUSTER_8
clf,"sklearn.svm.SVR(C=1.0,gamma=0.1)",CLUSTER_7,CLUSTER_8
clf,sklearn.svm.SVR(),CLUSTER_7,CLUSTER_8
clf,sklearn.model_selection.GridSearchCV(svm.SVR(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(dataset_blend_train,y,test_size=0.2,random_state=123)",CLUSTER_7,CLUSTER_8
X,"numpy.concatenate((X,b)",CLUSTER_7,CLUSTER_8
core_samples,"numpy.zeros_like(labels,dtype=bool)",CLUSTER_7,CLUSTER_8
"""""""log_air_passengers",numpy.log(df2['min_price']),CLUSTER_7,CLUSTER_8
df3,pandas.DataFrame(df2.groupby(level=0),CLUSTER_7,CLUSTER_8
month_names,"pandas.date_range(start='2016-01-01',periods=12,freq='MS')",CLUSTER_7,CLUSTER_8
df1,"pandas.read_csv(r""C:\Users\Sony\Desktop\CMO_MSP_Mandi.csv"")",CLUSTER_7,CLUSTER_8
df2,"pandas.read_csv(r""C:\Users\Sony\Desktop\Monthly_data_cmo.csv"",index_col=0,parse_dates=[[2,3]],infer_datetime_format=True)",CLUSTER_7,CLUSTER_8
df1.index,"pandas.to_datetime(df1.index,format='%Y')",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_7,CLUSTER_8
dbscan,"sklearn.cluster.DBSCAN(eps=3,min_samples=4)",CLUSTER_7,CLUSTER_8
X,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
ohe,sklearn.preprocessing.OneHotEncoder(),CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
a,pandas.read_csv('df_a.csv'),CLUSTER_1,CLUSTER_3
b,pandas.read_csv('df_b.csv'),CLUSTER_1,CLUSTER_3
c,pandas.read_csv('df_c.csv'),CLUSTER_1,CLUSTER_3
d,pandas.read_csv('df_d.csv'),CLUSTER_1,CLUSTER_3
e,pandas.read_csv('df_e.csv'),CLUSTER_1,CLUSTER_3
f,pandas.read_csv('df_f.csv'),CLUSTER_1,CLUSTER_3
g,pandas.read_csv('df_g.csv'),CLUSTER_1,CLUSTER_3
h,pandas.read_csv('df_h.csv'),CLUSTER_1,CLUSTER_3
i,pandas.read_csv('df_i.csv'),CLUSTER_1,CLUSTER_3
j,pandas.read_csv('df_j.csv'),CLUSTER_1,CLUSTER_3
k,pandas.read_csv('df_k.csv'),CLUSTER_1,CLUSTER_3
l,pandas.read_csv('df_l.csv'),CLUSTER_1,CLUSTER_3
m,pandas.read_csv('df_m.csv'),CLUSTER_1,CLUSTER_3
mat,"pandas.read_csv(""data/student-mat.csv"")",CLUSTER_7,CLUSTER_3
ax2,"plt.colorbar(contours,cax=cax,ax=ax,ticks=numpy.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
cost,numpy.zeros_like(cm),CLUSTER_7,CLUSTER_8
cm,"numpy.around(cm,decimals=2)",CLUSTER_7,CLUSTER_8
n_samples,numpy.median(cnts),CLUSTER_7,CLUSTER_8
"X,Y","numpy.meshgrid(np.arange(0,n_classes,1)",CLUSTER_7,CLUSTER_8
df_resampled,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_resampled,"pandas.concat([df_resampled,df_target_resampled],axis=0)",CLUSTER_7,CLUSTER_8
df_remap['quality2'],"pandas.cut(df.quality,bins=3,labels=[1,2,3])",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('/home/cneiderer/Metis/Neiderer_Metis/Project3/data/winequality-red.csv',delimiter=';')",CLUSTER_7,CLUSTER_8
ax,"seaborn.distplot(df[col][df.quality==q],hist=False,label=label,ax=ax)",CLUSTER_7,CLUSTER_8
cmap,"seaborn.diverging_palette(10,133,sep=80,n=20)",CLUSTER_7,CLUSTER_8
ax,"seaborn.heatmap(Z,ax=ax,cmap='RdYlGn',annot=True,cbar_ax=cax,
vmin=0,vmax=1,cbar_kws={'ticks':np.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
ax2,"matplotlib.pyplot.colorbar(contours,cax=cax,ax=ax,ticks=np.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
"target_fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_7,CLUSTER_8
"corr_fig,ax","matplotlib.pyplot.subplots(figsize=(14,10)",CLUSTER_7,CLUSTER_8
"kde_fig,axes","matplotlib.pyplot.subplots(3,4,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"gnb_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"svm0_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"svm1_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"knn_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"lr_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
svm0,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
svm1,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
knn1,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
knn2,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
pipe3,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_7,CLUSTER_8
lr3,"sklearn.linear_model.LogisticRegression(C=1e3,
class_weight='balanced',
random_state=129,
multi_class='multinomial',
solver='newton-cg',max_iter=1000)",CLUSTER_7,CLUSTER_8
nb1,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
sampleData,"pandas.read_csv('C:/Users/jpkee/Desktop/PythonProjects/MasterDataAnalysiswithPython-Introtopandas/data/sample_data.csv',index_col=0)",CLUSTER_8,CLUSTER_4
movies,"pandas.read_csv('C:/Users/jpkee/Desktop/PythonProjects/MasterDataAnalysiswithPython-Introtopandas/data/movie.csv',index_col='title')",CLUSTER_8,CLUSTER_4
bikes,"pandas.read_csv('C:/Users/jpkee/Desktop/PythonProjects/MasterDataAnalysiswithPython-Introtopandas/data/bikes.csv',parse_dates=['starttime','stoptime'])",CLUSTER_8,CLUSTER_4
r,requests.get(url),CLUSTER_10,CLUSTER_12
w1,"np.random.uniform(low=-numpy.sqrt(6/(784+500)),high=numpy.sqrt(6/(784+500)",CLUSTER_9,CLUSTER_2
w2,"np.random.uniform(low=-numpy.sqrt(6/(500+10)),high=numpy.sqrt(6/(500+10)",CLUSTER_9,CLUSTER_2
b1,"np.random.uniform(low=-numpy.sqrt(6/(1+500)),high=numpy.sqrt(6/(1+500)",CLUSTER_9,CLUSTER_2
b2,"np.random.uniform(low=-numpy.sqrt(6/(1+10)),high=numpy.sqrt(6/(1+10)",CLUSTER_9,CLUSTER_2
req,"requests.request('POST',_url,json=json)",CLUSTER_9,CLUSTER_2
result,"pandas.DataFrame({'actual':actual,'predict':predict})",CLUSTER_9,CLUSTER_2
result,pandas.DataFrame({'accuracy':accuracy}),CLUSTER_9,CLUSTER_2
data,"numpy.linspace(-5,5,100)",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('data/Race-COVID.csv'),CLUSTER_1,CLUSTER_3
case,"numpy.array([white,black,latin,asian,aian,nhpi,other,unknown])",CLUSTER_1,CLUSTER_3
case,"numpy.array([white,black,latin,asian,aian,nhpi,other])",CLUSTER_1,CLUSTER_3
case,"numpy.array([white,black,latin,asian,aian,nhpi,other,unknown])",CLUSTER_1,CLUSTER_3
case,"numpy.array([white,black,latin,asian,other,unknown])",CLUSTER_1,CLUSTER_3
total,numpy.sum(df['Cases_Total']),CLUSTER_1,CLUSTER_3
white,numpy.sum(df['Cases_White']),CLUSTER_1,CLUSTER_3
black,numpy.sum(df['Cases_Black']),CLUSTER_1,CLUSTER_3
latin,numpy.sum(df['Cases_LatinX']),CLUSTER_1,CLUSTER_3
asian,numpy.sum(df['Cases_Asian']),CLUSTER_1,CLUSTER_3
aian,numpy.sum(df['Cases_AIAN']),CLUSTER_1,CLUSTER_3
nhpi,numpy.sum(df['Cases_NHPI']),CLUSTER_1,CLUSTER_3
unknown,numpy.sum(df['Cases_Unknown']),CLUSTER_1,CLUSTER_3
total,numpy.sum(df['Deaths_Total']),CLUSTER_1,CLUSTER_3
white,numpy.sum(df['Deaths_White']),CLUSTER_1,CLUSTER_3
black,numpy.sum(df['Deaths_Black']),CLUSTER_1,CLUSTER_3
latin,numpy.sum(df['Deaths_LatinX']),CLUSTER_1,CLUSTER_3
asian,numpy.sum(df['Deaths_Asian']),CLUSTER_1,CLUSTER_3
aian,numpy.sum(df['Deaths_AIAN']),CLUSTER_1,CLUSTER_3
nhpi,numpy.sum(df['Deaths_NHPI']),CLUSTER_1,CLUSTER_3
unknown,numpy.sum(df['Deaths_Unknown']),CLUSTER_1,CLUSTER_3
total,numpy.sum(df['Deaths_Total']),CLUSTER_1,CLUSTER_3
white,numpy.sum(df['Deaths_White']),CLUSTER_1,CLUSTER_3
black,numpy.sum(df['Deaths_Black']),CLUSTER_1,CLUSTER_3
latin,numpy.sum(df['Deaths_LatinX']),CLUSTER_1,CLUSTER_3
asian,numpy.sum(df['Deaths_Asian']),CLUSTER_1,CLUSTER_3
unknown,numpy.sum(df['Deaths_Unknown']),CLUSTER_1,CLUSTER_3
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_1,CLUSTER_3
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_1,CLUSTER_3
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_1,CLUSTER_3
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_1,CLUSTER_3
df_lookup,"pandas.DataFrame(0,index=np.arange(len(table)",CLUSTER_8,CLUSTER_3
df_lookup,"pd.DataFrame(0,index=numpy.arange(len(table)",CLUSTER_8,CLUSTER_3
trueMat,numpy.array(true),CLUSTER_5,CLUSTER_1
utilMat,numpy.array(train),CLUSTER_5,CLUSTER_1
Usk,"numpy.dot(U,s_root)",CLUSTER_5,CLUSTER_1
skV,"numpy.dot(s_root,V)",CLUSTER_5,CLUSTER_1
UsV,"numpy.dot(Usk,skV)",CLUSTER_5,CLUSTER_1
item_means,"numpy.mean(masked_arr,axis=0)",CLUSTER_5,CLUSTER_1
mask,numpy.isnan(utilMat),CLUSTER_5,CLUSTER_1
x,"numpy.tile(item_means,(utilMat.shape[0],1)",CLUSTER_5,CLUSTER_1
s,numpy.diag(s),CLUSTER_5,CLUSTER_1
"U,s,V","numpy.linalg.svd(utilMat,full_matrices=False)",CLUSTER_5,CLUSTER_1
masked_arr,"numpy.ma.masked_array(utilMat,mask)",CLUSTER_5,CLUSTER_1
UsV,"numpy.ma.masked_where(trueMat==1,UsV)",CLUSTER_5,CLUSTER_1
products_to_join,pandas.DataFrame(train['customerID']),CLUSTER_5,CLUSTER_1
test['products'],pandas.Series(pred),CLUSTER_5,CLUSTER_1
test['products'],pandas.Series(pred),CLUSTER_5,CLUSTER_1
train,"pandas.get_dummies(train,columns=['product_code'],prefix=prod_dict)",CLUSTER_5,CLUSTER_1
product_joined,"pandas.merge(train,cnt_srs,on='product_code',how='inner')",CLUSTER_5,CLUSTER_1
train,"pandas.merge(products_to_join,products_less.drop_duplicates(subset=['customerID'],keep='last')",CLUSTER_5,CLUSTER_1
train,pandas.read_csv('products.csv'),CLUSTER_5,CLUSTER_1
test,pandas.read_csv('sampleSubmission.csv'),CLUSTER_5,CLUSTER_1
s_root,scipy.linalg.sqrtm(s),CLUSTER_5,CLUSTER_1
svd,"sklearn.decomposition.TruncatedSVD(n_components=14,n_iter=7,random_state=42)",CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame({
'contry':['Kazakhstan','Russia','Belarus','Ukraine'],
'population':[17.04,143.5,9.5,45.5],
'square':[2724902,17125191,207600,603628]
})",CLUSTER_8,CLUSTER_4
df,"pandas.DataFrame({
'country':['Kazakhstan','Russia','Belarus','Ukraine'],
'population':[17.04,143.5,9.5,45.5],
'square':[2724902,17125191,207600,603628]
},index=['KZ','RU','BY','UA'])",CLUSTER_8,CLUSTER_4
my_series,"pandas.Series([5,6,7,8,9,10])",CLUSTER_8,CLUSTER_4
my_series2,"pandas.Series([5,6,7,8,9,10],index=['a','b','c','d','e','f'])",CLUSTER_8,CLUSTER_4
my_series3,"pandas.Series({'a':5,'b':6,'c':7,'d':8})",CLUSTER_8,CLUSTER_4
titanic_df,pandas.read_csv('titanic.csv'),CLUSTER_8,CLUSTER_4
pass_data,pandas.read_csv('titanic.csv'),CLUSTER_8,CLUSTER_4
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
train,"pandas.read_csv(""fichier_csv/train.csv"",sep=';',header=None)",CLUSTER_1,CLUSTER_3
train.columns,"pandas.read_csv(""fichier_csv/names.csv"",sep=';')",CLUSTER_1,CLUSTER_3
test,"pandas.read_csv(""fichier_csv/test.csv"",sep=';',header=None)",CLUSTER_1,CLUSTER_3
test.columns,"pandas.read_csv(""fichier_csv/names.csv"",sep=';')",CLUSTER_1,CLUSTER_3
eval_,"pandas.read_csv(""fichier_csv/eval.csv"",sep=';',header=None)",CLUSTER_1,CLUSTER_3
eval_.columns,"pandas.read_csv(""fichier_csv/names.csv"",sep=';')",CLUSTER_1,CLUSTER_3
debut_ClassifierLineaireRandom,time.time(),CLUSTER_1,CLUSTER_3
fin_ClassifierLineaireRandom,time.time(),CLUSTER_1,CLUSTER_3
debut_ClassifierKNN,time.time(),CLUSTER_1,CLUSTER_3
fin_ClassifierKNN,time.time(),CLUSTER_1,CLUSTER_3
debut_ClassifierPerceptron,time.time(),CLUSTER_1,CLUSTER_3
fin_ClassifierPerceptron,time.time(),CLUSTER_1,CLUSTER_3
debut_ClassifierPerceptronKernel,time.time(),CLUSTER_1,CLUSTER_3
fin_ClassifierPerceptronKernel,time.time(),CLUSTER_1,CLUSTER_3
df_pca_3d,"pandas.DataFrame(data=pca_3d,index=df_3d.index,columns=[""PC1"",""PC2""])",CLUSTER_7,CLUSTER_5
df_tsne_3d,"pandas.DataFrame(data=tsne_3d,index=df_3d.index,columns=[""tSNE1"",""tSNE2""])",CLUSTER_7,CLUSTER_5
df_3d,"pandas.read_pickle('../output/df_3d_zero.pkl.gz',compression='gzip')",CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_5
tsne,"sklearn.manifold.TSNE(n_components=2,n_iter=300)",CLUSTER_7,CLUSTER_5
ax,"seaborn.scatterplot(x=""PC1"",y=""PC2"",data=df_pca_3d,hue=df_3d[""Target""])",CLUSTER_7,CLUSTER_5
ax,"seaborn.scatterplot(x=""tSNE1"",y=""tSNE2"",data=df_tsne_3d,hue=df_3d[""Target""])",CLUSTER_7,CLUSTER_5
code+,"random.choice([s1,s2])",CLUSTER_11,CLUSTER_12
new_list,"random.sample(old_list,5)",CLUSTER_11,CLUSTER_12
arr,"numpy.array([1,2,3])",CLUSTER_2,CLUSTER_7
arr,"numpy.array([[1,2,3],[1,2,3]])",CLUSTER_2,CLUSTER_7
arr,"numpy.array([[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]])",CLUSTER_2,CLUSTER_7
arr,"numpy.array([1,2,3])",CLUSTER_2,CLUSTER_7
arr,"numpy.array([1,2,3],dtype=np.float32)",CLUSTER_2,CLUSTER_7
arr2,"numpy.array([4,5,6,7],dtype=np.float32)",CLUSTER_2,CLUSTER_7
words_matrix,pandas.DataFrame(newsgroups_counts.toarray(),CLUSTER_7,CLUSTER_1
tfidf_matrix,pandas.DataFrame(newsgroups_tfidf.toarray(),CLUSTER_7,CLUSTER_1
countries,"pandas.read_csv(""countries.csv"")",CLUSTER_7,CLUSTER_1
tfidf_matrix,"pd.DataFrame(newsgroups_tfidf.toarray(),columns=numpy.array(count_vectorizer.get_feature_names()",CLUSTER_7,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline(steps=[
(""imputer"",SimpleImputer(strategy=""median"")",CLUSTER_7,CLUSTER_1
newsgroups,"sklearn.datasets.fetch_20newsgroups(subset=""train"",categories=categories,shuffle=True,random_state=42)",CLUSTER_7,CLUSTER_1
newsgroups,"sklearn.datasets.fetch_20newsgroups(subset=""train"",categories=categories,shuffle=True,random_state=42)",CLUSTER_7,CLUSTER_1
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_3
targets,"numpy.array(targets_list,ndmin=2)",CLUSTER_1,CLUSTER_3
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_3
test_w_i_h,"numpy.array([[0.1,0.4,-0.3],
[-0.2,0.5,0.2]])",CLUSTER_1,CLUSTER_3
test_w_h_o,"numpy.array([[0.3,-0.1]])",CLUSTER_1,CLUSTER_3
hidden_inputs,"numpy.dot(self.weights_input_to_hidden,inputs)",CLUSTER_1,CLUSTER_3
final_inputs,"numpy.dot(self.weights_hidden_to_output,hidden_outputs)",CLUSTER_1,CLUSTER_3
del_weight_h_o,"numpy.dot(output_grad,hidden_outputs.T)",CLUSTER_1,CLUSTER_3
hidden_inputs,"numpy.dot(self.weights_input_to_hidden,inputs)",CLUSTER_1,CLUSTER_3
final_inputs,"numpy.dot(self.weights_hidden_to_output,hidden_outputs)",CLUSTER_1,CLUSTER_3
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_1,CLUSTER_3
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_1,CLUSTER_3
rides,pandas.read_csv(data_path),CLUSTER_1,CLUSTER_3
dates,pandas.to_datetime(rides.ix[test_data.index]['dteday']),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_3
"test_df.loc[:,'cluster']",pandas.Series(cluster),CLUSTER_0,CLUSTER_5
test_df,"pandas.read_csv(""data/test.csv"",low_memory=False)",CLUSTER_0,CLUSTER_5
n_estimators,"numpy.arange(2,200,step=5)",CLUSTER_0,CLUSTER_5
n_estimators,"numpy.arange(2,50,step=2)",CLUSTER_0,CLUSTER_5
n_estimators,"numpy.arange(2,20,step=1)",CLUSTER_0,CLUSTER_5
tweet_text,numpy.array(text),CLUSTER_0,CLUSTER_5
text,"re.sub(r""(?:\@|http?\://)",CLUSTER_0,CLUSTER_5
text,"re.sub(r""(?:\@|https?\://)",CLUSTER_0,CLUSTER_5
text,"re.sub(r""""""[\'\""]"""""",'',text)",CLUSTER_0,CLUSTER_5
tokens_regexp,"re.compile(r""""""(%s)",CLUSTER_0,CLUSTER_5
km_model,sklearn.cluster.KMeans(n_clusters=clusters),CLUSTER_0,CLUSTER_5
data,json.load(data_file),CLUSTER_10,CLUSTER_4
data,json.load(data_file),CLUSTER_10,CLUSTER_4
sol1,"scipy.integrate.odeint(ec_mov,[1,0,0,0.5],t1,args=(0.05,)",CLUSTER_3,CLUSTER_6
sol2,"scipy.integrate.odeint(ec_mov,[1,0,0,0.5],t2,args=(0.05,)",CLUSTER_3,CLUSTER_6
sol3,"scipy.integrate.odeint(ec_mov,[1,0,0,0.5],t3,args=(0.05,)",CLUSTER_3,CLUSTER_6
sol4,"scipy.integrate.odeint(ec_mov,[1,0,0,1],t4,args=(alpha,)",CLUSTER_3,CLUSTER_6
sol4_2,"scipy.integrate.odeint(ec_mov,[.99,sqrt(1-.99**2)",CLUSTER_3,CLUSTER_6
tiempos,"numpy.arange(x[0],x[1]+h,h)",CLUSTER_3,CLUSTER_6
sol,numpy.zeros((len(tiempos),CLUSTER_3,CLUSTER_6
t1,"numpy.linspace(0,30)",CLUSTER_3,CLUSTER_6
t2,"numpy.linspace(0,30,10)",CLUSTER_3,CLUSTER_6
t3,"numpy.linspace(0,30,1000)",CLUSTER_3,CLUSTER_6
t4,"numpy.linspace(0,2*pi*50,5000)",CLUSTER_3,CLUSTER_6
fig,"matplotlib.pyplot.figure(figsize=(4,4)",CLUSTER_2,CLUSTER_7
ax,matplotlib.pyplot.subplot(gs[i]),CLUSTER_2,CLUSTER_7
summarytable,"pandas.DataFrame({""UniqueItems"":[unique_items],""AveragePrice"":[average_price],""TotalNumberofPurchases"":[total_price],""TotalRevenue"":[total_purchases]})",CLUSTER_8,CLUSTER_4
df,"pandas.DataFrame({""Gender"":[""Male"",""Female"",""Other/Non-Disclosed""],""PercentageofPlayers"":[male_percentage,female_percentage,other_percentage],""TotalCount"":[male_count,female_count,other_count]},columns=[""Gender"",""PercentageofPlayers"",""TotalCount""])",CLUSTER_8,CLUSTER_4
df2,"pandas.DataFrame({""PurchaseCount"":gender_count,""AveragePurchasePrice"":gender_average,""TotalPurchaseValue"":gender_purchase_total,""PurchaseTotalPerPerson,Average"":purchase_total_per_person})",CLUSTER_8,CLUSTER_4
df3,"pandas.DataFrame({""TotalCount"":age_demographics_count,""PercentageofPlayers"":age_percentage})",CLUSTER_8,CLUSTER_4
df4,"pandas.DataFrame({""PurchaseCount"":total_count,""AveragePurchasePrice"":average,""TotalPurchaseValue"":total,""AveragePurchasePerPerson"":per_person_data})",CLUSTER_8,CLUSTER_4
df5,"pandas.DataFrame({""PurchaseCount"":top_count,""AveragePurchasePrice"":top_mean_count,""TotalPurchaseValue"":top_total_value})",CLUSTER_8,CLUSTER_4
df6,"pandas.DataFrame({""PurchaseCount"":most_profitable_items,""ItemPrice"":most_profit_price,""TotalPurchaseValue"":most_profit_total})",CLUSTER_8,CLUSTER_4
demographic,"pandas.cut(purchase_data[""Age""],bins_for_ages,labels=categorize_existing_players)",CLUSTER_8,CLUSTER_4
"purchase_data[""AgeRanges""]","pandas.cut(purchase_data[""Age""],bins_for_ages,labels=categorize_existing_players)",CLUSTER_8,CLUSTER_4
purchase_data,pandas.read_csv(file_to_load),CLUSTER_8,CLUSTER_4
yhat,"numpy.argmax(sess.run(score,feed_dict={X:x_tst})",CLUSTER_1,CLUSTER_3
x_val,"numpy.delete(arr=x_train,obj=tr_indices,axis=0)",CLUSTER_1,CLUSTER_3
y_val,"numpy.delete(arr=y_train,obj=tr_indices,axis=0)",CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(weather_data),CLUSTER_8,CLUSTER_4
df,"pandas.DataFrame(weather_data,columns=['Day','Temperature','Windspeed','Event'])",CLUSTER_8,CLUSTER_4
df,pandas.DataFrame(weather_data),CLUSTER_8,CLUSTER_4
india_weather,"pandas.DataFrame({
'city':['mumbai','delhi','bangalore'],
'temperature':[32,45,30],
'humidity':[80,60,78]
})",CLUSTER_8,CLUSTER_4
us_weather,"pandas.DataFrame({
'city':['newyork','chicago','orlando'],
'temperature':[21,14,65],
'humidity':[68,65,75]
})",CLUSTER_8,CLUSTER_4
temperature_df,"pandas.DataFrame({
'city':['mumbai','delhi','bangalore'],
'temperature':[32,38,35]
})",CLUSTER_8,CLUSTER_4
windspeed_df,"pandas.DataFrame({
'city':['mumbai','delhi','bangalore'],
'windspeed':[7,8,12]
})",CLUSTER_8,CLUSTER_4
s,"pandas.Series(['Humid','Dry','Rain'],name='event')",CLUSTER_8,CLUSTER_4
df,"pandas.concat([india_weather,us_weather],ignore_index=True)",CLUSTER_8,CLUSTER_4
df,"pandas.concat([india_weather,us_weather],keys=['india','us'])",CLUSTER_8,CLUSTER_4
df,"pandas.concat([temperature_df,windspeed_df],axis=1)",CLUSTER_8,CLUSTER_4
df,"pandas.concat([temperature_df,s],axis=1)",CLUSTER_8,CLUSTER_4
df,pandas.read_csv('weather_data.csv'),CLUSTER_8,CLUSTER_4
df,"pandas.read_csv('weather_data.csv',skiprows=1,names=['day','temperature','windspeed','event'])",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv('weather_data.csv',skiprows=1,names=['day','temperature','windspeed','event'],nrows=3)",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv('weather_data.csv',na_values=['notavailable','n.a.'])",CLUSTER_8,CLUSTER_4
df,pandas.read_csv('city_weather.csv'),CLUSTER_8,CLUSTER_4
crash_type_summary_stats,"pandas.DataFrame(columns=[""Cause"",
""TotalCount"",
""ClusteredCount"",
""NoiseCount"",
""Std.DistanceSum"",
""Std.DistanceMean""
])",CLUSTER_11,CLUSTER_11
multvarcluster_roads_df,"pandas.merge(segroutes_df,mvc_df,on=""OBJECTID"")",CLUSTER_11,CLUSTER_11
merged_routes_df,"pandas.merge(segroutes_mvt_df,mvc_df,on=""OBJECTID"")",CLUSTER_11,CLUSTER_11
crash_type_summary_stats,"pandas.read_csv(os.path.join(workspace_dir,""crash_type_summary_stats.csv"")",CLUSTER_11,CLUSTER_11
cmf_df,pandas.read_excel(cmf_xls),CLUSTER_11,CLUSTER_11
simple_plot,"seaborn.lmplot(x=aadt_field,y=crash_field,data=df,fit_reg=True)",CLUSTER_11,CLUSTER_11
single_plot_wreglines,"seaborn.lmplot(x=aadt_field,y=crash_field,data=df,fit_reg=True,ci=ci,hue=regline_case_field)",CLUSTER_11,CLUSTER_11
multi_plot_wreglines,"seaborn.lmplot(x=aadt_field,y=crash_field,data=df,fit_reg=True,ci=ci,col=regline_case_field)",CLUSTER_11,CLUSTER_11
dataset,pandas.read_csv('fiuba-trocafone-tp1-final-set\events.csv'),CLUSTER_11,CLUSTER_11
clientes_nuevos['timestamp'],pandas.to_datetime(clientes_nuevos['timestamp']),CLUSTER_11,CLUSTER_11
mes_minimo['flag_compra'],"numpy.where(mes_minimo['event']=='conversion','1','0')",CLUSTER_11,CLUSTER_11
df_zonas,pandas.concat(zonas),CLUSTER_9,CLUSTER_2
df,"pandas.read_html(url,match=zona)",CLUSTER_9,CLUSTER_2
purchase_data,pandas.read_csv(file_to_load),CLUSTER_8,CLUSTER_3
embedding,"pandas.DataFrame(data=data,index=keys)",CLUSTER_1,CLUSTER_3
bag2d,numpy.array([vec(word),CLUSTER_1,CLUSTER_3
bag2d,numpy.array([vec(word),CLUSTER_1,CLUSTER_3
i,numpy.argmin(delta),CLUSTER_1,CLUSTER_3
delta,"numpy.sum(diff*diff,axis=1)",CLUSTER_1,CLUSTER_3
doc2vec,"numpy.sum(vdoc,axis=0)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_1,CLUSTER_3
audits,"numpy.arange(0,10,1)",CLUSTER_12,CLUSTER_10
penalties,numpy.zeros(audits.shape[0]),CLUSTER_12,CLUSTER_10
ratios,numpy.zeros(cs.shape[0]),CLUSTER_12,CLUSTER_10
cs,"numpy.linspace(300000,1000000,num=2000)",CLUSTER_12,CLUSTER_10
t,"numpy.arange(0,30,dt)",CLUSTER_1,CLUSTER_10
s1,numpy.sin(2*np.pi*10*t),CLUSTER_1,CLUSTER_10
s2,numpy.sin(2*np.pi*10*t),CLUSTER_1,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(2,1)",CLUSTER_1,CLUSTER_10
data,"pandas.read_csv(""https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/06_Stats/Wind_Stats/wind.data"",sep='\s+')",CLUSTER_8,CLUSTER_3
data['Date'],"pandas.to_datetime(data[['Mo','Dy','Yr']])",CLUSTER_8,CLUSTER_3
xticks,"numpy.linspace(X_min[0],X_max[0],100)",CLUSTER_12,CLUSTER_5
yticks,"numpy.linspace(X_min[1],X_max[1],100)",CLUSTER_12,CLUSTER_5
"xx,yy","numpy.meshgrid(xticks,yticks)",CLUSTER_12,CLUSTER_5
X,"pandas.DataFrame(iris.data,columns=iris.feature_names)",CLUSTER_12,CLUSTER_5
df,"pandas.read_csv(""dt_data.csv"",index_col=0)",CLUSTER_12,CLUSTER_5
ax,matplotlib.pyplot.gca(),CLUSTER_12,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_5
model,sklearn.tree.DecisionTreeClassifier(max_depth=2),CLUSTER_12,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(max_depth=3),CLUSTER_12,CLUSTER_5
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_5
dfconf['Upper_Value'],numpy.exp(dfconf['Upper_Value']),CLUSTER_8,CLUSTER_3
dfconf['Lower_Value'],numpy.exp(dfconf['Lower_Value']),CLUSTER_8,CLUSTER_3
dfconf,pandas.DataFrame(conf),CLUSTER_8,CLUSTER_3
dfconf['Actual'],"pandas.DataFrame([2877,2730,3072,3306,2836,2713,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan],index=dfconf.index)",CLUSTER_8,CLUSTER_3
"forecast,stderr,conf","pandas.Series(model.forecast(steps=12,alpha=0.05)",CLUSTER_8,CLUSTER_3
"xx,yy","numpy.meshgrid(np.linspace(x_min,x_max,101)",CLUSTER_0,CLUSTER_3
df,"pandas.read_csv(args.data_file,header=0)",CLUSTER_0,CLUSTER_3
df_reduced,"pandas.read_csv(args.reduced_data_file,header=0)",CLUSTER_0,CLUSTER_3
x,"numpy.arange(-10,11,1)",CLUSTER_1,CLUSTER_10
x,"numpy.arange(-10,11,1)",CLUSTER_1,CLUSTER_10
x,"numpy.arange(-10,11,1)",CLUSTER_1,CLUSTER_10
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
sorter,numpy.argsort(jla['zcmb']),CLUSTER_5,CLUSTER_9
sorter1,numpy.argsort(logx_valsub),CLUSTER_5,CLUSTER_9
sorter,numpy.argsort(logx_vals),CLUSTER_5,CLUSTER_9
sorter,numpy.argsort(logx_vals),CLUSTER_5,CLUSTER_9
sorter,numpy.argsort(logx_vals),CLUSTER_5,CLUSTER_9
xvals,"numpy.reshape(logx_vals.values,(len(logx_vals)",CLUSTER_5,CLUSTER_9
yvals,"numpy.reshape(jla.mb.values,(len(logx_vals)",CLUSTER_5,CLUSTER_9
yerr,"numpy.reshape(jla.dmb.values,(len(logx_vals)",CLUSTER_5,CLUSTER_9
logx_vals,"numpy.log10(jla[""zcmb""])",CLUSTER_5,CLUSTER_9
logx_vals,"numpy.log10(jla[""zcmb""])",CLUSTER_5,CLUSTER_9
logx_vals,"numpy.log10(jla[""zcmb""])",CLUSTER_5,CLUSTER_9
err,numpy.sqrt(np.diag(pcov),CLUSTER_5,CLUSTER_9
err2,numpy.sqrt(np.diag(pcov2),CLUSTER_5,CLUSTER_9
err2,numpy.sqrt(np.diag(pcov2),CLUSTER_5,CLUSTER_9
test,numpy.setdiff1d(np.arange(Nall),CLUSTER_5,CLUSTER_9
jla,"pandas.read_csv(""drive/MyDrive/dsps/data/jla_likelihood_v6/data/jla_lcparams.txt"",sep="""")",CLUSTER_5,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(line,logx_vals,y_vals,p0=[5,0])",CLUSTER_5,CLUSTER_9
"popt2,pcov2","scipy.optimize.curve_fit(line,logx_vals,y_vals,sigma=jla.dmb,p0=[5,0])",CLUSTER_5,CLUSTER_9
"popt3,pcov3","scipy.optimize.curve_fit(line,logx_valsub,y_valsub)",CLUSTER_5,CLUSTER_9
"popt4,pcov4","scipy.optimize.curve_fit(quad,logx_vals,y_vals,p0=[5,1,0])",CLUSTER_5,CLUSTER_9
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test,yerr_train,yerr_test","sklearn.model_selection.train_test_split(
logx_vals,y_vals,uncertanties,test_size=0.33,random_state=42)",CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test,yerr_train,yerr_test","sklearn.model_selection.train_test_split(
xvals,yvals,yerr,test_size=0.33,random_state=42)",CLUSTER_5,CLUSTER_9
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_4,CLUSTER_11
df,"pandas.DataFrame(cancer['data'],columns=cancer['feature_names'])",CLUSTER_7,CLUSTER_5
df_comp,"pandas.DataFrame(pca.components_,columns=cancer['feature_names'])",CLUSTER_7,CLUSTER_5
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(tips,col=""time"",row=""smoker"")",CLUSTER_1,CLUSTER_10
g,"seaborn.FacetGrid(tips,col=""time"",row=""smoker"")",CLUSTER_1,CLUSTER_10
g,"seaborn.FacetGrid(tips,col=""time"",row=""smoker"",hue='sex')",CLUSTER_1,CLUSTER_10
g,"seaborn.JointGrid(x=""total_bill"",y=""tip"",data=tips)",CLUSTER_1,CLUSTER_10
g,"seaborn.JointGrid(x=""total_bill"",y=""tip"",data=tips)",CLUSTER_1,CLUSTER_10
g,seaborn.PairGrid(iris),CLUSTER_1,CLUSTER_10
g,seaborn.PairGrid(iris),CLUSTER_1,CLUSTER_10
iris,seaborn.load_dataset('iris'),CLUSTER_1,CLUSTER_10
tips,seaborn.load_dataset('tips'),CLUSTER_1,CLUSTER_10
html,requests.get(url),CLUSTER_9,CLUSTER_2
resultTable,pandas.DataFrame(myList),CLUSTER_9,CLUSTER_2
myList,"numpy.column_stack([SNoList,StateList,AdminCapitaList,LegisCapitalList,JudisCapitalList,YearList,FormerCapitalList])",CLUSTER_9,CLUSTER_2
ax2,"plt.colorbar(contours,cax=cax,ax=ax,ticks=numpy.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
cost,numpy.zeros_like(cm),CLUSTER_7,CLUSTER_8
cm,"numpy.around(cm,decimals=2)",CLUSTER_7,CLUSTER_8
n_samples,numpy.median(cnts),CLUSTER_7,CLUSTER_8
"X,Y","numpy.meshgrid(np.arange(0,n_classes,1)",CLUSTER_7,CLUSTER_8
df_resampled,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_resampled,"pandas.concat([df_resampled,df_target_resampled],axis=0)",CLUSTER_7,CLUSTER_8
df_remap['quality2'],"pandas.cut(df.quality,bins=3,labels=[1,2,3])",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('/home/cneiderer/Metis/Neiderer_Metis/Project3/data/winequality-red.csv',delimiter=';')",CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(cnts.index,cnts)",CLUSTER_7,CLUSTER_8
ax,"seaborn.heatmap(Z,ax=ax,cmap='RdYlGn',annot=True,cbar_ax=cax,
vmin=0,vmax=1,cbar_kws={'ticks':np.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
ax2,"matplotlib.pyplot.colorbar(contours,cax=cax,ax=ax,ticks=np.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
svm0,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
svm1,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
knn1,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
knn2,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
pipe3,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_7,CLUSTER_8
lr3,"sklearn.linear_model.LogisticRegression(C=1e3,
class_weight='balanced',
random_state=129,
multi_class='multinomial',
solver='newton-cg',max_iter=1000)",CLUSTER_7,CLUSTER_8
nb1,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
cities,pandas.read_csv('cities.csv'),CLUSTER_1,CLUSTER_3
self.worldmap,"numpy.zeros((200,200,3)",CLUSTER_12,CLUSTER_9
output_image,"numpy.zeros((img.shape[0]+data.worldmap.shape[0],img.shape[1]*2,3)",CLUSTER_12,CLUSTER_9
	idx_in_front,numpy.where(np.abs(Rover.obs_angles-bearing),CLUSTER_12,CLUSTER_9
color_select,"numpy.zeros_like(img[:,:,0])",CLUSTER_12,CLUSTER_9
color_select,"numpy.zeros_like(img[:,:,0])",CLUSTER_12,CLUSTER_9
x_pix_world,numpy.clip(np.int_(xpix_tran),CLUSTER_12,CLUSTER_9
y_pix_world,numpy.clip(np.int_(ypix_tran),CLUSTER_12,CLUSTER_9
mean_dir,numpy.mean(angles),CLUSTER_12,CLUSTER_9
obs_map,numpy.absolute(np.float32(threshed),CLUSTER_12,CLUSTER_9
angles,"numpy.arctan2(y_pixel,x_pixel)",CLUSTER_12,CLUSTER_9
dist,numpy.sqrt(x_pixel**2+y_pixel**2),CLUSTER_12,CLUSTER_9
source,"numpy.float32([[14,140],[301,140],[200,96],[118,96]])",CLUSTER_12,CLUSTER_9
destination,"numpy.float32([[image.shape[1]/2-dst_size,image.shape[0]-bottom_offset],
[image.shape[1]/2+dst_size,image.shape[0]-bottom_offset],
[image.shape[1]/2+dst_size,image.shape[0]-2*dst_size-bottom_offset],
[image.shape[1]/2-dst_size,image.shape[0]-2*dst_size-bottom_offset],
])",CLUSTER_12,CLUSTER_9
ground_truth_3d,"numpy.dstack((ground_truth*0,ground_truth*255,ground_truth*0)",CLUSTER_12,CLUSTER_9
"output_image[img.shape[0]:,0:data.worldmap.shape[1]]",numpy.flipud(map_add),CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,3)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,9)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,3)",CLUSTER_12,CLUSTER_9
df,"pandas.read_csv('../test_dataset/robot_log.csv',delimiter=';',decimal='.')",CLUSTER_12,CLUSTER_9
data,"pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data',names=column_names)",CLUSTER_5,CLUSTER_1
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
sgdc,sklearn.linear_model.SGDClassifier(),CLUSTER_5,CLUSTER_1
df,"pandas.read_csv('./LifeExpectancy.csv',skiprows=4,header=""infer"")",CLUSTER_1,CLUSTER_3
p0,matplotlib.pyplot.plot(Afghanistan),CLUSTER_1,CLUSTER_3
p1,matplotlib.pyplot.plot(Nepal),CLUSTER_1,CLUSTER_3
p2,matplotlib.pyplot.plot(NewZealand),CLUSTER_1,CLUSTER_3
p3,matplotlib.pyplot.plot(Netherlands),CLUSTER_1,CLUSTER_3
wmt,pandas.read_csv('./../data/WMT.csv'),CLUSTER_7,CLUSTER_3
wmt.ds,pandas.to_datetime(wmt.ds),CLUSTER_7,CLUSTER_3
myTime,time.time(),CLUSTER_7,CLUSTER_3
myTime,time.time(),CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,2)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
cm,matplotlib.pyplot.get_cmap('jet'),CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.array([56,52,4,150,30,0,0,0,39,17,0,
63,54,9,185,37,0,0,0,44,17,2,
112,106,6,1598,29,293,281,8,99,12,1])",CLUSTER_1,CLUSTER_3
xx,numpy.ones_like(zz),CLUSTER_1,CLUSTER_3
yy,numpy.ones_like(zz),CLUSTER_1,CLUSTER_3
z,numpy.ones_like(xx),CLUSTER_1,CLUSTER_3
"xx,yy",numpy.meshgrid(range(50),CLUSTER_1,CLUSTER_3
mean1,numpy.array(data1.mean(),CLUSTER_3,CLUSTER_3
mean2,numpy.array(data2.mean(),CLUSTER_3,CLUSTER_3
dif1,numpy.array(data1-mean1),CLUSTER_3,CLUSTER_3
dif2,numpy.array(data2-mean2),CLUSTER_3,CLUSTER_3
Euclidean,"numpy.array(np.power(abs(train.sub(numpy.array(numpy.array(test.loc[[j],:])",CLUSTER_3,CLUSTER_3
K_neighbours,"numpy.array([trainLabel[j]forjinnp.argpartition(Euclidean,i)",CLUSTER_3,CLUSTER_3
w1,numpy.dot(np.linalg.pinv(cov),CLUSTER_3,CLUSTER_3
predictedY,"numpy.dot(test_data,w1)",CLUSTER_3,CLUSTER_3
predictedY,"numpy.dot(test_data,w1)",CLUSTER_3,CLUSTER_3
output,pandas.DataFrame(output),CLUSTER_3,CLUSTER_3
output,"pandas.concat([data1,data2],ignore_index=True)",CLUSTER_3,CLUSTER_3
output,"pandas.concat([data1,data2,data3,data4,data5,data6],ignore_index=True)",CLUSTER_3,CLUSTER_3
output,"pandas.concat([data1,data2,data3],ignore_index=True)",CLUSTER_3,CLUSTER_3
output,"pandas.concat([data1,data2],ignore_index=True)",CLUSTER_3,CLUSTER_3
output,"pandas.read_csv(filename,delimiter=',',header=None)",CLUSTER_3,CLUSTER_3
w0,math.log(p1),CLUSTER_3,CLUSTER_3
hospital_read_df,pandas.read_csv('data/cms_hospital_readmissions.csv'),CLUSTER_7,CLUSTER_3
perm_samp,numpy.empty(size),CLUSTER_7,CLUSTER_3
comb_data,"numpy.concatenate((data1,data2)",CLUSTER_7,CLUSTER_3
perm_samp[i],numpy.sum(permuted_data[:len(data1),CLUSTER_7,CLUSTER_3
p,numpy.sum(perm_replicates>(sum(data1),CLUSTER_7,CLUSTER_3
p,numpy.sum(perm_replicates>(sum(data2),CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_3
df,"pandas.read_excel(""ENB2012_data.xlsx"")",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_5
reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
model,"sklearn.pipeline.Pipeline([('poly',PolynomialFeatures(degree=2)",CLUSTER_7,CLUSTER_5
model,"sklearn.pipeline.Pipeline([
('scale',StandardScaler()",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(other_path,header=None)",CLUSTER_8,CLUSTER_4
df,"pandas.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame({'col1':[1,2,3,np.nan],
'col2':[np.nan,555,666,444],
'col3':['abc','def','ghi','xyz']})",CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
train['PAY_LAST_3_CAT'],"pandas.qcut(train['PAY_LAST_3'],q=3,labels=['PAY_EARLY','PAY_REG','PAY_LATE'])",CLUSTER_7,CLUSTER_5
train['PAY_FIRST_3_CAT'],"pandas.qcut(train['PAY_FIRST_3'],q=3,labels=['PAY_EARLY','PAY_REG','PAY_LATE'])",CLUSTER_7,CLUSTER_5
train['PAY_AVG_CAT'],"pandas.qcut(train['PAY_AVG'],q=3,labels=['PAY_EARLY','PAY_REG','PAY_LATE'])",CLUSTER_7,CLUSTER_5
x,"pandas.qcut(train['PAY_LAST_3'],q=3)",CLUSTER_7,CLUSTER_5
train['PAY_TREND_CAT'],"pandas.qcut(train['PAY_TREND'],q=2,labels=['DEC','INC'])",CLUSTER_7,CLUSTER_5
train['PAY_LAST_2_CAT'],"pandas.qcut(train.apply(avg_payments(['PAY_DEC','PAY_NOV'])",CLUSTER_7,CLUSTER_5
train,pandas.read_csv('data/train_clean.csv'),CLUSTER_7,CLUSTER_5
test,"pandas.read_csv('data/test_clean.csv',sep=';')",CLUSTER_7,CLUSTER_5
pay_sum_acc,"sklearn.metrics.accuracy_score(prediction,train['DEFAULTPAYMENTJAN'])",CLUSTER_7,CLUSTER_5
pay_sum_acc_norm,"sklearn.metrics.accuracy_score(prediction_norm,train['DEFAULTPAYMENTJAN'])",CLUSTER_7,CLUSTER_5
"df[""year""]",pandas.DatetimeIndex(df.fundedDate),CLUSTER_8,CLUSTER_3
"df[""month""]",pandas.DatetimeIndex(df.fundedDate),CLUSTER_8,CLUSTER_3
company,"pandas.pivot_table(data=df,index=""company"",aggfunc=""count"",margins=True)",CLUSTER_8,CLUSTER_3
df,"pandas.read_excel(""CaseStudy-VCfundingdata.xlsx"",sheet_name=""FundingData"")",CLUSTER_8,CLUSTER_3
new_df,"pandas.read_excel(""CaseStudy-VCfundingdata.xlsx"",sheet_name=""FundingData"")",CLUSTER_8,CLUSTER_3
df_2,"pandas.read_excel(""CaseStudy-VCfundingdata.xlsx"",sheet_name=""StateMap"")",CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(),CLUSTER_11,CLUSTER_3
fruits_df,"pandas.DataFrame(fruits,columns=['Fruit'])",CLUSTER_11,CLUSTER_3
people_df,"pandas.DataFrame(people,columns=['Name','Age','BloodGroup'])",CLUSTER_11,CLUSTER_3
people_df,pandas.DataFrame(people),CLUSTER_11,CLUSTER_3
df1,"pandas.DataFrame({
'id':[1,2,3,4,5],
'name':['a','b','c','d','e'],
'sub':['sub1','sub2','sub3','sub4','sub5']
})",CLUSTER_11,CLUSTER_3
df2,"pandas.DataFrame({
'id':[1,2,3,4,5],
'name':['b','c','d','e','f'],
'sub':['sub3','sub4','sub5','sub6','sub7']
})",CLUSTER_11,CLUSTER_3
df1,"pandas.DataFrame({
'emp_id':[1,2,3,4,5],
'emp_name':['a','b','c','d','e'],
'sub':['sub1','sub2','sub3','sub4','sub5']
})",CLUSTER_11,CLUSTER_3
df2,"pandas.DataFrame({
'dept_id':[1,2,3,4,5],
'dept_name':['b','c','d','e','f'],
'sub':['sub3','sub4','sub5','sub6','sub7']
})",CLUSTER_11,CLUSTER_3
df3,"pandas.DataFrame({'id':[10],
'name':['z'],
'sub':['sub10']})",CLUSTER_11,CLUSTER_3
cmp_df,pandas.DataFrame(company_df),CLUSTER_11,CLUSTER_3
people_df,"pandas.DataFrame(people,columns=['Name','Score','BloodGroup'])",CLUSTER_11,CLUSTER_3
df1_st,"pandas.DataFrame(myList1,columns=['Star_ID','Loc_ID','pmRA','pmDE','Field','Jmag','Hmag'])",CLUSTER_11,CLUSTER_3
df2_st,"pandas.DataFrame(myList2,columns=['Star_ID','Loc_ID','pmRA','pmDE','Field','Jmag','Hmag'])",CLUSTER_11,CLUSTER_3
my_series,pandas.Series(dicts),CLUSTER_11,CLUSTER_3
s1,pandas.Series(dicts1),CLUSTER_11,CLUSTER_3
df_onlyleft,"pandas.merge(left=df1_x,right=df2_x,on='ID',how='left',indicator=True)",CLUSTER_11,CLUSTER_3
df3_st,"pandas.merge(df1_st,df2_st,on='Star_ID')",CLUSTER_11,CLUSTER_3
csv_df,pandas.read_csv('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/supermarkets.csv'),CLUSTER_11,CLUSTER_3
txt_df,"pandas.read_csv('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/supermarkets-semi-colons.txt',sep=';')",CLUSTER_11,CLUSTER_3
web_df,pandas.read_csv('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/supermarkets.csv'),CLUSTER_11,CLUSTER_3
market_df,pandas.read_csv('http://pythonhow.com/supermarkets.csv'),CLUSTER_11,CLUSTER_3
air_df,pandas.read_csv('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/AirQualityUCI.csv'),CLUSTER_11,CLUSTER_3
excel_df,"pandas.read_excel('https://github.com/insaid2018/Term-1/blob/master/Data/Casestudy/supermarkets.xlsx?raw=true',sheet_name=0)",CLUSTER_11,CLUSTER_3
json_df,pandas.read_json('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/supermarkets.json'),CLUSTER_11,CLUSTER_3
air_df['Date'],"pandas.to_datetime(air_df['Date'],format='%m/%d/%Y')",CLUSTER_11,CLUSTER_3
air_df['Time'],"pandas.to_datetime(air_df['Time'],format='%H:%M:%S')",CLUSTER_11,CLUSTER_3
timestamp,"pandas.to_datetime(""09:00:00"",format='%H:%M:%S')",CLUSTER_11,CLUSTER_3
datestamp,"pandas.to_datetime(""01/01/2005"",format='%d/%m/%Y')",CLUSTER_11,CLUSTER_3
a,numpy.arange(12),CLUSTER_11,CLUSTER_3
arr,numpy.array(capitals),CLUSTER_11,CLUSTER_3
tips,seaborn.load_dataset('tips'),CLUSTER_11,CLUSTER_3
dummy_label,pandas.get_dummies(train_labels),CLUSTER_5,CLUSTER_0
dummy_vote_label,pandas.get_dummies(vote),CLUSTER_5,CLUSTER_0
test_rss,"pandas.read_csv(path+'/Training_rss_21Aug17.csv',header=0)",CLUSTER_5,CLUSTER_0
test_coord,"pandas.read_csv(path+'/Training_coordinates_21Aug17.csv',header=0)",CLUSTER_5,CLUSTER_0
train_rss,"pandas.read_csv(path+'/Test_rss_21Aug17.csv',header=0)",CLUSTER_5,CLUSTER_0
train_coord,"pandas.read_csv(path+'/Test_coordinates_21Aug17.csv',header=0)",CLUSTER_5,CLUSTER_0
sample_x,numpy.array(sample_x),CLUSTER_5,CLUSTER_0
sample_y,numpy.array(sample_y),CLUSTER_5,CLUSTER_0
train_labels,numpy.asarray(building_floors_str),CLUSTER_5,CLUSTER_0
train_labels,numpy.asarray(dummy_label),CLUSTER_5,CLUSTER_0
test_labels,numpy.asarray(test_ch.map(str),CLUSTER_5,CLUSTER_0
test_labels,numpy.asarray(pd.get_dummies(test_labels),CLUSTER_5,CLUSTER_0
vote,numpy.asarray(vote),CLUSTER_5,CLUSTER_0
vote_labels,numpy.asarray(dummy_vote_label),CLUSTER_5,CLUSTER_0
ifnp.all(vote_labels[i]),=numpy.all(test_labels[i]),CLUSTER_5,CLUSTER_0
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_5,CLUSTER_0
"train_x,val_x,train_y,val_y","sklearn.model_selection.train_test_split(train_Xx,train_Yy,test_size=0.2)",CLUSTER_5,CLUSTER_0
index,random.randrange(len(x),CLUSTER_5,CLUSTER_0
name_path,os.listdir(data_path),CLUSTER_4,CLUSTER_6
temp,"os.listdir(os.path.join(data_path,v)",CLUSTER_4,CLUSTER_6
filenames,os.listdir(path),CLUSTER_4,CLUSTER_6
filenames,os.listdir(path),CLUSTER_4,CLUSTER_6
autolib_df,pandas.read_csv(url),CLUSTER_1,CLUSTER_3
new_autolib_data_df,pandas.read_csv('new_autolib.csv'),CLUSTER_1,CLUSTER_3
X_train_scaled,pandas.DataFrame(scaler.fit_transform(X_train),CLUSTER_7,CLUSTER_5
X_test_scaled,pandas.DataFrame(scaler.transform(X_test),CLUSTER_7,CLUSTER_5
features,"pandas.DataFrame(tree_sel.feature_importances_,
index=X_train.columns,
columns=['Importance'])",CLUSTER_7,CLUSTER_5
scores,"pandas.DataFrame({'roc_auc_score':roc_scores,'f1_score':f1_scores,'accuracy':acc_scores},
index=labels)",CLUSTER_7,CLUSTER_5
data,"pandas.get_dummies(data,columns=col_for_dum)",CLUSTER_7,CLUSTER_5
data,"pandas.read_excel('defaultofcreditcardclients.xls',header=1)",CLUSTER_7,CLUSTER_5
estimators,"numpy.arange(25,425,25)",CLUSTER_7,CLUSTER_5
depth,"numpy.arange(3,25)",CLUSTER_7,CLUSTER_5
min_l,"numpy.arange(3,10)",CLUSTER_7,CLUSTER_5
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_5
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
val_train_mean,"numpy.mean(val_train,axis=1)",CLUSTER_7,CLUSTER_5
val_test_mean,"numpy.mean(val_test,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
val_train_std,"numpy.std(val_train,axis=1)",CLUSTER_7,CLUSTER_5
val_test_std,"numpy.std(val_test,axis=1)",CLUSTER_7,CLUSTER_5
n_jobs,"1,train_sizes=numpy.linspace(.1,1.0,10)",CLUSTER_7,CLUSTER_5
n_jobs,"-1,train_sizes=numpy.linspace(.1,1.0,10)",CLUSTER_7,CLUSTER_5
learn_rate,"numpy.linspace(0.01,1.0,10)",CLUSTER_7,CLUSTER_5
tsne_model,"sklearn.manifold.TSNE(2,random_state=17)",CLUSTER_7,CLUSTER_5
tsne_model,"sklearn.manifold.TSNE(2,random_state=17)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
score_acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,grid_logit.predict(X_test_new)",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,grid_boosting.predict(X_test_new)",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,grid_forest.predict(X_test_new)",CLUSTER_7,CLUSTER_5
score_f1,"sklearn.metrics.f1_score(y_test,y_pred,average='weighted')",CLUSTER_7,CLUSTER_5
score_roc,"sklearn.metrics.roc_auc_score(y_test,y_roc)",CLUSTER_7,CLUSTER_5
forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=50,random_state=17,
class_weight='balanced')",CLUSTER_7,CLUSTER_5
boosting,sklearn.ensemble.GradientBoostingClassifier(random_state=17),CLUSTER_7,CLUSTER_5
logit,"sklearn.linear_model.LogisticRegression(random_state=17,class_weight='balanced')",CLUSTER_7,CLUSTER_5
tree_sel,sklearn.tree.DecisionTreeClassifier(random_state=17),CLUSTER_7,CLUSTER_5
sss,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=5,test_size=0.3,random_state=17)",CLUSTER_7,CLUSTER_5
grid_logit,"sklearn.model_selection.GridSearchCV(logit,logit_parameters,n_jobs=-1,scoring='roc_auc',cv=sss)",CLUSTER_7,CLUSTER_5
grid_boosting,"sklearn.model_selection.GridSearchCV(boosting,boosting_parameters,n_jobs=-1,scoring='roc_auc',cv=sss)",CLUSTER_7,CLUSTER_5
grid_forest,"sklearn.model_selection.GridSearchCV(forest,forest_parameters,n_jobs=-1,scoring='roc_auc',cv=sss)",CLUSTER_7,CLUSTER_5
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes,scoring=scoring)",CLUSTER_7,CLUSTER_5
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes,scoring=scoring)",CLUSTER_7,CLUSTER_5
"val_train,val_test","sklearn.model_selection.validation_curve(estimator,X,y,cv_param_name,
cv_param_values,cv=cv,
scoring=scoring)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,y_score[i])",CLUSTER_7,CLUSTER_5
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_7,CLUSTER_5
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
df1,"pandas.read_csv(""http://cocl.us/Geospatial_data"")",CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
K_gradient,"numpy.einsum(""ijk,i,j->ijk"",R[1],d,d)",CLUSTER_5,CLUSTER_5
K_gradient,"numpy.einsum(""ijk,i,j->ijk"",R[1],diag_X,diag_Y)",CLUSTER_5,CLUSTER_5
K,"numpy.einsum(""ij,i,j->ij"",R,diag_X,diag_Y)",CLUSTER_5,CLUSTER_5
d,numpy.diag(R[0]),CLUSTER_5,CLUSTER_5
K,numpy.diag(d),CLUSTER_5,CLUSTER_5
d,numpy.diag(R),CLUSTER_5,CLUSTER_5
K,numpy.diag(d),CLUSTER_5,CLUSTER_5
K,numpy.diag(diag_X),CLUSTER_5,CLUSTER_5
inputs,numpy.array(int_text[0:inputs_to_use]),CLUSTER_2,CLUSTER_7
targets,numpy.array(int_text[1:inputs_to_use+1]),CLUSTER_2,CLUSTER_7
inputs,"numpy.split(inputs,batches,1)",CLUSTER_2,CLUSTER_7
targets,"numpy.split(targets,batches,1)",CLUSTER_2,CLUSTER_7
data,"pandas.read_csv(""globalterrorismdb_0718dist_.csv"",encoding=""iso-8859-1"",low_memory=False)",CLUSTER_1,CLUSTER_3
kmeans_model,"sklearn.cluster.KMeans(n_clusters=num_clusters,n_init=5,max_iter=400,random_state=1,n_jobs=1)",CLUSTER_5,CLUSTER_10
df,pandas.read_csv('../01.Data_Collection/films.csv'),CLUSTER_8,CLUSTER_3
actor,pandas.read_csv('../01.Data_Collection/actor_code.csv'),CLUSTER_8,CLUSTER_3
toronto,pandas.DataFrame(columns=column_names),CLUSTER_9,CLUSTER_2
extracting_data,requests.get(url),CLUSTER_9,CLUSTER_2
df,"pandas.read_csv('df_comprehensive.csv',index_col=0)",CLUSTER_7,CLUSTER_3
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6','pca7'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5','pca6','pca7'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6','pca7','pca8'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5','pca6','pca7','pca8'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6','pca7','pca8','pca9'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5','pca6','pca7','pca8','pca9'])",CLUSTER_7,CLUSTER_8
proj,pandas.DataFrame(test_proj),CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(""fashion-mnist_train.csv"")",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(""fashion-mnist_test.csv"")",CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(2,5,figsize=(8,3)",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=1),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=4),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=5),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=6),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=7),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=8),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=9),CLUSTER_7,CLUSTER_8
tsne,"sklearn.manifold.TSNE(n_components=2,init='random',random_state=0)",CLUSTER_7,CLUSTER_8
v3,"numpy.array([1.0,0.2])",CLUSTER_1,CLUSTER_10
e_3,"numpy.matrix([[7],[0]])",CLUSTER_1,CLUSTER_10
e_4,"numpy.matrix([[0],[-2]])",CLUSTER_1,CLUSTER_10
transfusion,pandas.read_csv('datasets/transfusion.data'),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
transfusion.drop(columns='target')",CLUSTER_5,CLUSTER_1
tpot_auc_score,"sklearn.metrics.roc_auc_score(y_test,tpot.predict_proba(X_test)",CLUSTER_5,CLUSTER_1
logreg_auc_score,"sklearn.metrics.roc_auc_score(y_test,logreg.predict_proba(X_test_normed)",CLUSTER_5,CLUSTER_1
df_['monetary_log'],numpy.log(df_['Monetary(c.c.blood),CLUSTER_5,CLUSTER_1
logreg,"sklearn.linear_model.LogisticRegression(
solver='liblinear',
random_state=42
)",CLUSTER_5,CLUSTER_1
q_50,numpy.percentile(app_train[~app_train['AMT_ANNUITY'].isnull(),CLUSTER_4,CLUSTER_11
app_train,pandas.read_csv(f_app),CLUSTER_4,CLUSTER_11
mode_get,scipy.stats.mode(app_train[~app_train['AMT_GOODS_PRICE'].isnull(),CLUSTER_4,CLUSTER_11
start_time,time.time(),CLUSTER_4,CLUSTER_11
today,datetime.date.today(),CLUSTER_11,CLUSTER_12
delta,datetime.timedelta(days=100),CLUSTER_11,CLUSTER_12
n,"numpy.arange(0,30,2)",CLUSTER_11,CLUSTER_12
s,numpy.arange(13),CLUSTER_11,CLUSTER_12
r,numpy.arange(36),CLUSTER_11,CLUSTER_12
x,numpy.array(mylist),CLUSTER_11,CLUSTER_12
y,"numpy.array([4,5,6])",CLUSTER_11,CLUSTER_12
m,"numpy.array([[7,8,9],[10,11,12]])",CLUSTER_11,CLUSTER_12
z,"numpy.array([y,y**2])",CLUSTER_11,CLUSTER_12
z,"numpy.array([y,y**2])",CLUSTER_11,CLUSTER_12
a,"numpy.array([-4,-2,1,3,5])",CLUSTER_11,CLUSTER_12
p,"numpy.ones([2,3],int)",CLUSTER_11,CLUSTER_12
o,"numpy.linspace(0,4,9)",CLUSTER_11,CLUSTER_12
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_10
y,numpy.sin(2*np.pi*(x-0.01*i),CLUSTER_12,CLUSTER_10
x,"numpy.linspace(0,2,1000)",CLUSTER_12,CLUSTER_10
raw_tea_df,"pandas.read_csv(""./scraper/tea.csv"")",CLUSTER_8,CLUSTER_3
figure,"matplotlib.pyplot.figure(figsize=(8,15)",CLUSTER_5,CLUSTER_10
ax,matplotlib.pyplot.subplot(len(datasets),CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.4,random_state=42)",CLUSTER_5,CLUSTER_10
X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_10
"X,y","sklearn.datasets.make_classification(n_features=2,n_redundant=0,n_informative=2,
random_state=1,n_clusters_per_class=1)",CLUSTER_5,CLUSTER_10
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(2,4,figsize=(20,8)",CLUSTER_5,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(2,4,figsize=(20,8)",CLUSTER_5,CLUSTER_10
line,"numpy.linspace(-3,3,100)",CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,stratify=y,random_state=42)",CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(canser.data,canser.target,random_state=0)",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0)",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,hidden_layer_sizes=[10])",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,hidden_layer_sizes=[10,10])",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,
activation='tanh',hidden_layer_sizes=[10,10])",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,
hidden_layer_sizes=[n_hidden_nodes,n_hidden_nodes],
alpha=alpha)",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=i,hidden_layer_sizes=[100,100])",CLUSTER_5,CLUSTER_10
mlp,sklearn.neural_network.MLPClassifier(random_state=0),CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(random_state=0,max_iter=1000)",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(random_state=0,max_iter=1000,alpha=1)",CLUSTER_5,CLUSTER_10
"X,y","sklearn.datasets.make_moons(n_samples=100,noise=0.25,random_state=3)",CLUSTER_5,CLUSTER_10
canser,sklearn.datasets.load_breast_cancer(),CLUSTER_5,CLUSTER_10
X,"numpy.array(gen_data(n_samples,0.7)",CLUSTER_4,CLUSTER_0
X,"numpy.array(gen_data(n_samples,1)",CLUSTER_4,CLUSTER_0
test,"numpy.array(gen_data(2,1)",CLUSTER_4,CLUSTER_0
X,"numpy.zeros((n_chars,len(cat)",CLUSTER_4,CLUSTER_0
X_new,"numpy.zeros((X.shape[0],)",CLUSTER_4,CLUSTER_0
X_new,"numpy.copy(X[:,0])",CLUSTER_4,CLUSTER_0
train,"pandas.read_csv(""train_cab.csv"",na_values={""pickup_datetime"":""43""})",CLUSTER_7,CLUSTER_5
test,"pandas.read_csv(""test.csv"")",CLUSTER_7,CLUSTER_5
train['pickup_datetime'],"pandas.to_datetime(train['pickup_datetime'],format='%Y-%m-%d%H:%M:%SUTC')",CLUSTER_7,CLUSTER_5
"test[""pickup_datetime""]","pandas.to_datetime(test[""pickup_datetime""],format=""%Y-%m-%d%H:%M:%SUTC"")",CLUSTER_7,CLUSTER_5
"train[""fare_amount""]","pandas.to_numeric(train[""fare_amount""],errors=""coerce"")",CLUSTER_7,CLUSTER_5
train['fare_amount'],numpy.log1p(train['fare_amount']),CLUSTER_7,CLUSTER_5
train['distance'],numpy.log1p(train['distance']),CLUSTER_7,CLUSTER_5
test['distance'],numpy.log1p(test['distance']),CLUSTER_7,CLUSTER_5
RMSE_test_LR,"numpy.sqrt(mean_squared_error(y_test,pred_test_LR)",CLUSTER_7,CLUSTER_5
RMSE_train_LR,"numpy.sqrt(mean_squared_error(y_train,pred_train_LR)",CLUSTER_7,CLUSTER_5
RMSE_train_DT,"numpy.sqrt(mean_squared_error(y_train,pred_train_DT)",CLUSTER_7,CLUSTER_5
RMSE_test_DT,"numpy.sqrt(mean_squared_error(y_test,pred_test_DT)",CLUSTER_7,CLUSTER_5
RMSE_train_RF,"numpy.sqrt(mean_squared_error(y_train,pred_train_RF)",CLUSTER_7,CLUSTER_5
RMSE_test_RF,"numpy.sqrt(mean_squared_error(y_test,pred_test_RF)",CLUSTER_7,CLUSTER_5
RMSE_train_GB,"numpy.sqrt(mean_squared_error(y_train,pred_train_GB)",CLUSTER_7,CLUSTER_5
RMSE_test_GB,"numpy.sqrt(mean_squared_error(y_test,pred_test_GB)",CLUSTER_7,CLUSTER_5
RRF_rmse,"numpy.sqrt(mean_squared_error(y_test,predictions_RRF)",CLUSTER_7,CLUSTER_5
gb_rmse,"numpy.sqrt(mean_squared_error(y_test,predictions_gb)",CLUSTER_7,CLUSTER_5
GRF_rmse,"numpy.sqrt(mean_squared_error(y_test,predictions_GRF)",CLUSTER_7,CLUSTER_5
Ggb_rmse,"numpy.sqrt(mean_squared_error(y_test,predictions_Ggb)",CLUSTER_7,CLUSTER_5
fit_DT,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_7,CLUSTER_5
fit_RF,sklearn.ensemble.RandomForestRegressor(n_estimators=200),CLUSTER_7,CLUSTER_5
rf,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_7,CLUSTER_5
RRF,sklearn.ensemble.RandomForestRegressor(random_state=0),CLUSTER_7,CLUSTER_5
regr,sklearn.ensemble.RandomForestRegressor(random_state=0),CLUSTER_7,CLUSTER_5
regr,sklearn.ensemble.RandomForestRegressor(random_state=0),CLUSTER_7,CLUSTER_5
fit_GB,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_7,CLUSTER_5
gb,sklearn.ensemble.GradientBoostingRegressor(random_state=42),CLUSTER_7,CLUSTER_5
gb,sklearn.ensemble.GradientBoostingRegressor(random_state=0),CLUSTER_7,CLUSTER_5
gb,sklearn.ensemble.GradientBoostingRegressor(random_state=0),CLUSTER_7,CLUSTER_5
fit_LR,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train.iloc[:,train.columns!='fare_amount'],
train.iloc[:,0],test_size=0.20,random_state=1)",CLUSTER_7,CLUSTER_5
RRF_r2,"sklearn.metrics.r2_score(y_test,predictions_RRF)",CLUSTER_7,CLUSTER_5
gb_r2,"sklearn.metrics.r2_score(y_test,predictions_gb)",CLUSTER_7,CLUSTER_5
GRF_r2,"sklearn.metrics.r2_score(y_test,predictions_GRF)",CLUSTER_7,CLUSTER_5
Ggb_r2,"sklearn.metrics.r2_score(y_test,predictions_Ggb)",CLUSTER_7,CLUSTER_5
gridcv_rf,"sklearn.model_selection.GridSearchCV(regr,param_grid=grid_search,cv=5)",CLUSTER_7,CLUSTER_5
gridcv_gb,"sklearn.model_selection.GridSearchCV(gb,param_grid=grid_search,cv=5)",CLUSTER_7,CLUSTER_5
gridcv_rf,"sklearn.model_selection.GridSearchCV(regr,param_grid=grid_search,cv=5)",CLUSTER_7,CLUSTER_5
a,math.sin(dlat/2),CLUSTER_7,CLUSTER_5
randomcv_rf,"sklearn.model_selection.RandomizedSearchCV(RRF,param_distributions=rand_grid,n_iter=5,cv=5,random_state=0)",CLUSTER_7,CLUSTER_5
randomcv_gb,"sklearn.model_selection.RandomizedSearchCV(gb,param_distributions=rand_grid,n_iter=5,cv=5,random_state=0)",CLUSTER_7,CLUSTER_5
dframe,pandas.DataFrame(fips_sentiment),CLUSTER_0,CLUSTER_11
df,"pandas.read_csv(""us_cities.csv"")",CLUSTER_0,CLUSTER_11
Tweet1,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
t,json.loads(tweet),CLUSTER_0,CLUSTER_11
t,json.loads(tweet),CLUSTER_0,CLUSTER_11
t,json.loads(tweet),CLUSTER_0,CLUSTER_11
match,"re.match(pattern,city)",CLUSTER_0,CLUSTER_11
text,"re.sub('\[.*?\]','',text)",CLUSTER_0,CLUSTER_11
text,re.sub('[%s]'%re.escape(string.punctuation),CLUSTER_0,CLUSTER_11
text,"re.sub('\w*\d\w*','',text)",CLUSTER_0,CLUSTER_11
text,"re.sub('[‘’“”…]','',parsed_tweet[""cleaned_text""])",CLUSTER_0,CLUSTER_11
text,"re.sub('\n','',text)",CLUSTER_0,CLUSTER_11
recovered,"numpy.zeros((n,1)",CLUSTER_4,CLUSTER_11
dead,"numpy.zeros((n,1)",CLUSTER_4,CLUSTER_11
collision,"numpy.zeros((n,n)",CLUSTER_4,CLUSTER_11
inf_sum,numpy.zeros(np.int(t_tot/delT),CLUSTER_4,CLUSTER_11
infidx,"numpy.where(color[:,0]==1)",CLUSTER_4,CLUSTER_11
healthyidx,"numpy.where(color[:,1]==1)",CLUSTER_4,CLUSTER_11
deadidx,"numpy.where(color[:,3]==1)",CLUSTER_4,CLUSTER_11
recovidx,"numpy.where(color[:,2]==1)",CLUSTER_4,CLUSTER_11
phi,numpy.arctan2((pos1[1]-pos0[1]),CLUSTER_4,CLUSTER_11
th0,"numpy.arctan2(v[k,1],v[k,0])",CLUSTER_4,CLUSTER_11
th1,"numpy.arctan2(v[j,1],v[j,0])",CLUSTER_4,CLUSTER_11
t_rec,numpy.ceil(t_recovery*np.ones(n),CLUSTER_4,CLUSTER_11
v0_mag,"numpy.sqrt(v[k,0]**2+v[k,1]**2)",CLUSTER_4,CLUSTER_11
v1_mag,"numpy.sqrt(v[j,0]**2+v[j,1]**2)",CLUSTER_4,CLUSTER_11
t,"numpy.linspace(0,t_tot,np.int(t_tot/delT)",CLUSTER_4,CLUSTER_11
v,numpy.hstack((speed*np.cos(th),CLUSTER_4,CLUSTER_11
color,"numpy.hstack([infected,healthy,recovered]*(1-dead)",CLUSTER_4,CLUSTER_11
color,"numpy.hstack((color,dead)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(2,1,figsize=(5,10)",CLUSTER_4,CLUSTER_11
x,numpy.arange(len(feature_names),CLUSTER_5,CLUSTER_5
x,numpy.arange(len(feature_names),CLUSTER_5,CLUSTER_5
x,numpy.arange(len(feature_names),CLUSTER_5,CLUSTER_5
data,"pandas.read_csv(""SpeedDatingData.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_5
X,sklearn.preprocessing.scale(features),CLUSTER_5,CLUSTER_5
Y,sklearn.preprocessing.scale(features),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_5,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
proj,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(12,5)",CLUSTER_5,CLUSTER_5
_,"matplotlib.pyplot.xticks(x+0.5,feature_names,rotation=30)",CLUSTER_5,CLUSTER_5
_,"matplotlib.pyplot.xticks(x+0.5,feature_names,rotation=30)",CLUSTER_5,CLUSTER_5
_,"matplotlib.pyplot.xticks(x+0.5,feature_names,rotation=30)",CLUSTER_5,CLUSTER_5
logreg,sklearn.linear_model.LogisticRegression(C=1),CLUSTER_5,CLUSTER_5
logreg_men,sklearn.linear_model.LogisticRegression(C=1),CLUSTER_5,CLUSTER_5
logreg_women,sklearn.linear_model.LogisticRegression(C=1),CLUSTER_5,CLUSTER_5
response,"requests.get(url=url,headers=headers)",CLUSTER_10,CLUSTER_12
detail_page_text,"requests.get(url=detail_url,headers=headers)",CLUSTER_10,CLUSTER_12
traindf['cleaned'],numpy.array(corpus),CLUSTER_0,CLUSTER_5
testdf['cleaned'],numpy.array(corpus_test),CLUSTER_0,CLUSTER_5
train_upsampled,"pandas.concat([train_minority_upsampled,train_majority])",CLUSTER_0,CLUSTER_5
traindf,pandas.read_csv('data/train.csv'),CLUSTER_0,CLUSTER_5
testdf,pandas.read_csv('data/test.csv'),CLUSTER_0,CLUSTER_5
tweet,"re.sub('[^a-zA-Z]','',tweet)",CLUSTER_0,CLUSTER_5
tweet,re.sub('((www\.[^\s]+),CLUSTER_0,CLUSTER_5
tweet,"re.sub('@[^\s]+','AT_USER',tweet)",CLUSTER_0,CLUSTER_5
tweet,"re.sub(r'
tweet=tweet.split()",CLUSTER_0,CLUSTER_5
tweet,"re.sub('[^a-zA-Z]','',tweet)",CLUSTER_0,CLUSTER_5
tweet,re.sub('((www\.[^\s]+),CLUSTER_0,CLUSTER_5
tweet,"re.sub('@[^\s]+','AT_USER',tweet)",CLUSTER_0,CLUSTER_5
tweet,"re.sub(r'
tweet=tweet.split()",CLUSTER_0,CLUSTER_5
"X_train_bow,X_val_bow,y_train,y_val","sklearn.model_selection.train_test_split(train_upsampled_bow,train_upsampled['label'],test_size=0.2,random_state=42)",CLUSTER_0,CLUSTER_5
rf_bow,"sklearn.ensemble.RandomForestClassifier(n_estimators=400,random_state=11)",CLUSTER_0,CLUSTER_5
sample_df,"pandas.DataFrame(sample_numpy_data,index=dates_index,columns=list('ABCD')",CLUSTER_1,CLUSTER_3
dates_index,"pandas.date_range(starting_date,periods=6)",CLUSTER_1,CLUSTER_3
sample_numpy_data,numpy.array(np.arange(24),CLUSTER_1,CLUSTER_3
train_loss,"numpy.array([i[""train_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
valid_loss,"numpy.array([i[""valid_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_train_loss,"numpy.array([i[""train_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_str_train_loss,"numpy.array([i[""train_loss""]foriinnet1_stretch.train_history_])",CLUSTER_4,CLUSTER_8
net1_str_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_stretch.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_train_loss,"numpy.array([i[""train_loss""]foriinnet1_eq.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_eq.train_history_])",CLUSTER_4,CLUSTER_8
net1_adapteq_train_loss,"numpy.array([i[""train_loss""]foriinnet1_adapteq.train_history_])",CLUSTER_4,CLUSTER_8
net1_adapteq_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_adapteq.train_history_])",CLUSTER_4,CLUSTER_8
net1_train_loss,"numpy.array([i[""train_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_train_loss,"numpy.array([i[""train_loss""]foriinnet1_eq.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_eq.train_history_])",CLUSTER_4,CLUSTER_8
net1_augmentation_train_loss,"numpy.array([i[""train_loss""]foriinnet1_augmentation.train_history_])",CLUSTER_4,CLUSTER_8
net1_augmentation_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_augmentation.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_augmentation_train_loss,"numpy.array([i[""train_loss""]foriinnet1_eq_augmentation.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_augmentation_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_eq_augmentation.train_history_])",CLUSTER_4,CLUSTER_8
train_loss,"numpy.array([i[""train_loss""]foriinnet1_dropout.train_history_])",CLUSTER_4,CLUSTER_8
valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_dropout.train_history_])",CLUSTER_4,CLUSTER_8
X_stretch,numpy.empty_like(X),CLUSTER_4,CLUSTER_8
X_eq,numpy.empty_like(X),CLUSTER_4,CLUSTER_8
X_adapteq,numpy.empty_like(X),CLUSTER_4,CLUSTER_8
hpfX,numpy.empty_like(X),CLUSTER_4,CLUSTER_8
X,numpy.vstack(df['Image'].values),CLUSTER_4,CLUSTER_8
"p_lowbound,p_upperbound","numpy.percentile(img,(1,99)",CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,16)",CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_4,CLUSTER_8
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_2,CLUSTER_7
self.time_start,time.time(),CLUSTER_2,CLUSTER_7
C,"pandas.DataFrame([""CAC40"",""DAX"",""FTSE""],columns=[""Index""])",CLUSTER_8,CLUSTER_3
Indices,"pandas.read_csv(""data/hsbc_bcs_bac.csv"")",CLUSTER_8,CLUSTER_3
Indices,"pandas.read_csv(""data/hsbc_bcs_bac.csv"")",CLUSTER_8,CLUSTER_3
"Temp[""Return""]","numpy.log(Temp[""close""]/Temp[""close""].shift(1)",CLUSTER_8,CLUSTER_3
sunspot,pandas.read_csv('dados/sunspot.csv'),CLUSTER_1,CLUSTER_3
airline,pandas.read_csv('dados/airline_passengers.csv'),CLUSTER_1,CLUSTER_3
aws,pandas.read_csv('dados/wine_sales.csv'),CLUSTER_1,CLUSTER_3
sp500,pandas.read_csv('dados/sp500.csv'),CLUSTER_1,CLUSTER_3
usd,pandas.read_csv('dados/usa_accident_death.csv'),CLUSTER_1,CLUSTER_3
hit,pandas.read_csv('dados/internet_traffic.csv'),CLUSTER_1,CLUSTER_3
dmt,pandas.read_csv('dados/daily_temp.csv'),CLUSTER_1,CLUSTER_3
execucoes,numpy.arange(qtd_execucoes),CLUSTER_1,CLUSTER_3
neuronios,"numpy.arange(2,26)",CLUSTER_1,CLUSTER_3
dim_tot,numpy.array(parameter.shape),CLUSTER_1,CLUSTER_3
W1_dim,numpy.array(W1.shape),CLUSTER_1,CLUSTER_3
b1_dim,numpy.array(b1.shape),CLUSTER_1,CLUSTER_3
W2_dim,numpy.array(W2.shape),CLUSTER_1,CLUSTER_3
b2_dim,numpy.array(b2.shape),CLUSTER_1,CLUSTER_3
velocidade,"numpy.zeros((qtd_particulas,atributos_dim_sum)",CLUSTER_1,CLUSTER_3
pbest,"numpy.zeros((qtd_particulas,atributos_dim_sum)",CLUSTER_1,CLUSTER_3
mse_treino,"numpy.zeros((qtd_execucoes,len(y_I)",CLUSTER_1,CLUSTER_3
mse_teste,"numpy.zeros((qtd_execucoes,len(y_I)",CLUSTER_1,CLUSTER_3
pos_indexes,numpy.where(diffs>0),CLUSTER_1,CLUSTER_3
neg_indexes,numpy.where(diffs<0),CLUSTER_1,CLUSTER_3
zero_indexes,numpy.where(diffs==0),CLUSTER_1,CLUSTER_3
params_stack,numpy.concatenate(tuple(params_list),CLUSTER_1,CLUSTER_3
Z1,"numpy.dot(W1,X)",CLUSTER_1,CLUSTER_3
Z2,"numpy.dot(W2,A1)",CLUSTER_1,CLUSTER_3
dZ1,"numpy.dot(W2.T,dZ2)",CLUSTER_1,CLUSTER_3
step_size[neg_indexes],"numpy.maximum(step_size[neg_indexes]*learning_rate_min,step_size.min()",CLUSTER_1,CLUSTER_3
step_size[pos_indexes],"numpy.minimum(step_size[pos_indexes]*learning_rate_max,step_size.max()",CLUSTER_1,CLUSTER_3
diffs,"numpy.multiply(grad_old,grad_new)",CLUSTER_1,CLUSTER_3
grad_new[pos_indexes],numpy.multiply(-np.sign(grad_new[pos_indexes]),CLUSTER_1,CLUSTER_3
grad_new[zero_indexes],numpy.multiply(-np.sign(grad_new[zero_indexes]),CLUSTER_1,CLUSTER_3
X_treino_temp,"numpy.vstack((X_treino,X_validacao)",CLUSTER_1,CLUSTER_3
y_treino_temp,"numpy.vstack((y_treino,y_validacao)",CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
inputs,numpy.asarray(inputs),CLUSTER_4,CLUSTER_0
inputs,numpy.asarray(inputs),CLUSTER_4,CLUSTER_0
axes,"matplotlib.pyplot.subplot(rows,cols,i)",CLUSTER_7,CLUSTER_3
X_train,numpy.array(raw_data_X),CLUSTER_3,CLUSTER_10
y_train,numpy.array(raw_data_y),CLUSTER_3,CLUSTER_10
x,"numpy.array([8.093607318,3.365731514])",CLUSTER_3,CLUSTER_10
nearest,numpy.argsort(distances),CLUSTER_3,CLUSTER_10
d,math.sqrt(np.sum((x_train-x),CLUSTER_3,CLUSTER_10
votes,collections.Counter(topK_y),CLUSTER_3,CLUSTER_10
experiments_dir,os.getcwd(),CLUSTER_4,CLUSTER_7
_outputs_shape,numpy.prod(image_size),CLUSTER_4,CLUSTER_7
tf.keras.layers.Dense(units,numpy.product(c),CLUSTER_4,CLUSTER_7
TRI_2008,"pandas.read_csv(""C:/Users/Luckbug/Code/emissions/TRI/TRI_2008_US.csv"")",CLUSTER_8,CLUSTER_4
x2,"numpy.linspace(0,1,100)",CLUSTER_1,CLUSTER_10
dados_new,pandas.DataFrame(),CLUSTER_8,CLUSTER_3
dados_new,"pandas.concat([dados_new,dados_selecao])",CLUSTER_8,CLUSTER_3
dados,"pandas.read_csv('aluguel_residencial.csv',sep=';')",CLUSTER_8,CLUSTER_3
aluguel_amostra,"pandas.read_csv('aluguel_amostra.csv',sep=';')",CLUSTER_8,CLUSTER_3
english_words_counter,collections.Counter([wordforsentenceinenglish_sentencesforwordinsentence.split(),CLUSTER_2,CLUSTER_7
french_words_counter,collections.Counter([wordforsentenceinfrench_sentencesforwordinsentence.split(),CLUSTER_2,CLUSTER_7
sentences,"numpy.array([sentence[0],x[0]])",CLUSTER_2,CLUSTER_7
"X,y","sklearn.datasets.make_blobs(n_samples=500,
n_features=2,
centers=4,
cluster_std=1,
center_box=(-10.0,10.0)",CLUSTER_5,CLUSTER_10
"X,y","sklearn.datasets.make_blobs(n_samples=500,
n_features=2,
centers=4,
cluster_std=1,
center_box=(-10.0,10.0)",CLUSTER_5,CLUSTER_10
clusterer,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=10)",CLUSTER_5,CLUSTER_10
sample_silhouette_values,"sklearn.metrics.silhouette_samples(X,cluster_labels)",CLUSTER_5,CLUSTER_10
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels)",CLUSTER_5,CLUSTER_10
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_5,CLUSTER_10
y,pandas.Period('2016'),CLUSTER_8,CLUSTER_3
m,pandas.Period('2017-12'),CLUSTER_8,CLUSTER_3
d,"pandas.Period('2016-02-28',freq='D')",CLUSTER_8,CLUSTER_3
h,"pandas.Period('2017-08-1523:00:00',freq='H')",CLUSTER_8,CLUSTER_3
q1,"pandas.Period('2017Q1',freq='Q-JAN')",CLUSTER_8,CLUSTER_3
w,"pandas.Period('2017-07-05',freq='W')",CLUSTER_8,CLUSTER_3
w2,"pandas.Period('2017-08-15',freq='W')",CLUSTER_8,CLUSTER_3
r,"pandas.PeriodIndex(start='2016-01',freq='3M',periods=10)",CLUSTER_8,CLUSTER_3
df.index,"pandas.PeriodIndex(df.index,freq=""Q-JAN"")",CLUSTER_8,CLUSTER_3
ps,pandas.Series(np.random.randn(len(idx),CLUSTER_8,CLUSTER_3
r,"pandas.period_range('2011','2017',freq='q')",CLUSTER_8,CLUSTER_3
r,"pandas.period_range('2011','2017',freq='q-jan')",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""wmt.csv"")",CLUSTER_8,CLUSTER_3
T,"numpy.array([[9.8999e-01,9.00000e-01,0.00000e-00,1.00000e-02,0.00000e+00],
[1.00000e-02,0.00000e+00,0.00000e+00,0.00000e+00,0.00000e+00],
[0.0000,1.00000e-01,9.98999e-01,9.90000e-01,1.00000e+00],
[0.00000e+00,0.00000e+00,1.00000e-03,0.00000e+00,0.00000e+00],
[0.00001e+00,0.00000e+00,1.00000e-06,0.00000e+00,0.00000e+00]])",CLUSTER_1,CLUSTER_3
initial_state,"numpy.array([1.0,0.0,0.0,0.0,0.0])",CLUSTER_1,CLUSTER_3
R,"numpy.array([[-30.0,-600,0.0,-3000,0.0],
[-200.0,0.0,0.0,0.0,0.0],
[0.0,-30000,-20,-100,-30000],
[0.0,0.0,-1000,0.0,0.0],
[-100000,0.0,-50000,0.0,0.0]])",CLUSTER_1,CLUSTER_3
s_list,"numpy.concatenate((s_list,np.reshape(s,(s.shape[0],1)",CLUSTER_1,CLUSTER_3
s,"numpy.matmul(T,s)",CLUSTER_1,CLUSTER_3
s_prime,"numpy.matmul(T,s)",CLUSTER_1,CLUSTER_3
s_list,"numpy.reshape(s,(s.shape[0],1)",CLUSTER_1,CLUSTER_3
delta_s,"numpy.subtract(s,s_prime)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_1,CLUSTER_3
train,pandas.read_csv('train.csv'),CLUSTER_5,CLUSTER_5
test,pandas.read_csv('test.csv'),CLUSTER_5,CLUSTER_5
df_test,pandas.read_csv('test.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=1,stratify=y)",CLUSTER_5,CLUSTER_5
etc,sklearn.ensemble.ExtraTreesClassifier(n_estimators=1000),CLUSTER_5,CLUSTER_5
etc,sklearn.ensemble.ExtraTreesClassifier(n_estimators=1000),CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(te_ary,columns=te.columns_)",CLUSTER_8,CLUSTER_4
c,collections.Counter(list),CLUSTER_10,CLUSTER_4
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_6,CLUSTER_10
filter_vals,"numpy.array([[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1]])",CLUSTER_6,CLUSTER_10
filters,"numpy.array([filter_1,filter_2,filter_3,filter_4])",CLUSTER_6,CLUSTER_10
df,pandas.DataFrame(friend_list),CLUSTER_8,CLUSTER_4
list,os.listdir(rootdir),CLUSTER_11,CLUSTER_12
init_date,"datetime.date(1970,1,1)",CLUSTER_11,CLUSTER_12
start_date,"datetime.date(1990,1,1)",CLUSTER_11,CLUSTER_12
end_date,"datetime.date(2012,12,25)",CLUSTER_11,CLUSTER_12
result,"numpy.zeros((7,79,94)",CLUSTER_11,CLUSTER_12
f_w.variables['lat'][:],numpy.zeros((79),CLUSTER_11,CLUSTER_12
f_w.variables['lon'][:],numpy.zeros((94),CLUSTER_11,CLUSTER_12
f_w.variables['time'][:],numpy.zeros((7),CLUSTER_11,CLUSTER_12
rand_ind,random.choice(range(len(s),CLUSTER_4,CLUSTER_7
s_list[rand_ind],random.choice(string.ascii_lowercase+'0123456789'),CLUSTER_4,CLUSTER_7
target_similarity,numpy.array([x[1]forxinbatch_data]),CLUSTER_4,CLUSTER_7
address1,numpy.array([address2onehot(x[0]),CLUSTER_4,CLUSTER_7
address2,numpy.array([address2onehot(x[1]),CLUSTER_4,CLUSTER_7
test_queries_ix,numpy.array([address2onehot(x),CLUSTER_4,CLUSTER_7
test_references_ix,numpy.array([address2onehot(x),CLUSTER_4,CLUSTER_7
test_query,numpy.repeat(np.array([query]),CLUSTER_4,CLUSTER_7
df,"pandas.read_csv(""ml-latest-small/ratings.csv"")",CLUSTER_8,CLUSTER_4
power_df,"pandas.read_csv(""power.csv"")",CLUSTER_8,CLUSTER_4
sports_ru_tb,pandas.read_html('https://www.sports.ru/bundesliga/table/'),CLUSTER_8,CLUSTER_4
data,pandas.read_csv('data_breast.csv'),CLUSTER_7,CLUSTER_5
pd_table,pandas.read_csv(StringIO(table.as_csv(),CLUSTER_7,CLUSTER_5
pd_table,pandas.read_csv(StringIO(table.as_csv(),CLUSTER_7,CLUSTER_5
model_tree_o,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_logreg,"sklearn.linear_model.LogisticRegression(penalty='l1',C=0.1,solver='liblinear')",CLUSTER_7,CLUSTER_5
model_logreg_o,"sklearn.linear_model.LogisticRegression(penalty='l1',C=0.1,solver='liblinear')",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=42)",CLUSTER_7,CLUSTER_5
"X_train_o,X_test_o,y_train_o,y_test_o","sklearn.model_selection.train_test_split(X_resampled_o,y_resampled_o,test_size=0.33,
random_state=42)",CLUSTER_7,CLUSTER_5
"precision,recall,thresholds","sklearn.metrics.precision_recall_curve(y_test,
[i[1]foriinlogreg_prediction_proba])",CLUSTER_7,CLUSTER_5
daypage,"requests.get('http://mars.nasa.gov/msl/multimedia/raw',
params={'s':day,'camera':'FHAZ'})",CLUSTER_12,CLUSTER_11
content,requests.get(url),CLUSTER_12,CLUSTER_11
submission,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
joined,"pandas.concat([train_data,test_data],ignore_index=True)",CLUSTER_7,CLUSTER_8
joined[column],"pandas.factorize(joined[column].values,sort=True)",CLUSTER_7,CLUSTER_8
train_data,"pandas.read_csv(""train.csv"")",CLUSTER_7,CLUSTER_8
prediction,numpy.exp(model.predict(test_data),CLUSTER_7,CLUSTER_8
target,numpy.log(target+shift),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(np.log(train_data['loss']),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(np.log(train_data['loss']+shift),CLUSTER_7,CLUSTER_8
"fg,ax","matplotlib.pyplot.subplots(nrows=1,ncols=n_cols,figsize=(12,8)",CLUSTER_7,CLUSTER_8
"fg,ax","matplotlib.pyplot.subplots(nrows=1,ncols=n_cols,sharey=True,figsize=(12,8)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LinearRegression(n_jobs=-1),CLUSTER_7,CLUSTER_8
error,"sklearn.metrics.mean_absolute_error(y_true,np.exp(model.predict(test_data)",CLUSTER_7,CLUSTER_8
my_array1,numpy.array(my_list1),CLUSTER_3,CLUSTER_6
my_array2,numpy.array(my_lists),CLUSTER_3,CLUSTER_6
dataframe,"pandas.read_csv(""C:/Users/FC/Documents/Deep_Learning_Project_Four/sonar.csv"",header=None)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
dfCrimesByTemp,pandas.DataFrame(dfCrimesByTemp),CLUSTER_9,CLUSTER_2
dfTempNorm,pandas.DataFrame(dfTempNorm),CLUSTER_9,CLUSTER_2
dfTempByHour,pandas.DataFrame(dfTempByHour),CLUSTER_9,CLUSTER_2
dfCrimesByWeather,pandas.DataFrame(dfCrimesByWeather),CLUSTER_9,CLUSTER_2
dfWeatherNorm,pandas.DataFrame(dfWeatherNorm),CLUSTER_9,CLUSTER_2
dfWeatherByHour,pandas.DataFrame(dfWeatherByHour),CLUSTER_9,CLUSTER_2
dfSevenMaybeOutdoor,pandas.DataFrame(dfSevenMaybeOutdoor),CLUSTER_9,CLUSTER_2
dfSevenOutdoor,pandas.DataFrame(dfSevenOutdoor),CLUSTER_9,CLUSTER_2
dfSevenIndoor,pandas.DataFrame(dfSevenIndoor),CLUSTER_9,CLUSTER_2
dfSouthPrecinct,pandas.DataFrame(dfSouthPrecinct),CLUSTER_9,CLUSTER_2
dfNorthPrecinct,pandas.DataFrame(dfNorthPrecinct),CLUSTER_9,CLUSTER_2
dfCrimesByWeather,pandas.DataFrame(dfCrimesByWeather),CLUSTER_9,CLUSTER_2
dfWeatherNorm,pandas.DataFrame(dfWeatherNorm),CLUSTER_9,CLUSTER_2
dfWeatherByHour,pandas.DataFrame(dfWeatherByHour),CLUSTER_9,CLUSTER_2
dfSevenPrecincts,pandas.DataFrame(dfSevenPrecincts),CLUSTER_9,CLUSTER_2
dfPrecinct,"pandas.DataFrame(columns=['Precinct','R-Squared','P-Value','Crime'])",CLUSTER_9,CLUSTER_2
dfTempNormalized,"pandas.merge(dfTempByHour,dfCrimesByTemp,on='Temperature')",CLUSTER_9,CLUSTER_2
dfWeatherNormalized,"pandas.merge(dfCrimesByWeather,dfWeatherByHour,on=weatherType)",CLUSTER_9,CLUSTER_2
dfWeatherNormalized,"pandas.merge(dfCrimesByWeather,dfWeatherByHour,on=weatherType)",CLUSTER_9,CLUSTER_2
crimeData,"pandas.read_csv(""rows.csv_accessType=DOWNLOAD"")",CLUSTER_9,CLUSTER_2
weather,"pandas.read_json(""DarkSky_Data.json"")",CLUSTER_9,CLUSTER_2
weather['datetime'],"pandas.to_datetime(weather['time'],unit='s',utc=True)",CLUSTER_9,CLUSTER_2
crime['datetime'],pandas.to_datetime((crime['CMPLNT_FR_DT']+''+crime['CMPLNT_FR_TM']),CLUSTER_9,CLUSTER_2
x,sklearn.preprocessing.StandardScaler(),CLUSTER_10,CLUSTER_4
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_10,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train_data,class_data,test_size=0.2)",CLUSTER_10,CLUSTER_4
plain,"numpy.zeros((ns,ntr)",CLUSTER_1,CLUSTER_10
cipher,"numpy.zeros((ns,ntr)",CLUSTER_1,CLUSTER_10
cipher,"numpy.zeros((ns,ntr)",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
imgplot,"matplotlib.pyplot.imshow(plain,cmap='gray')",CLUSTER_1,CLUSTER_10
imgplot,"matplotlib.pyplot.imshow(cipher,cmap='gray')",CLUSTER_1,CLUSTER_10
imgplot,"matplotlib.pyplot.imshow(plain,cmap='gray')",CLUSTER_1,CLUSTER_10
imgplot,"matplotlib.pyplot.imshow(cipher,cmap='gray')",CLUSTER_1,CLUSTER_10
address_indexes_arr,numpy.asarray(address_indexes),CLUSTER_9,CLUSTER_2
has_field,numpy.logical_not(pd.isnull(df[fld]),CLUSTER_9,CLUSTER_2
input_df,"pandas.DataFrame(keys,columns=['key','street','city','state','zip'])",CLUSTER_9,CLUSTER_2
matching,pandas.DataFrame({'idx':pd.Series(address_indexes_arr[matched_df.reset_index(),CLUSTER_9,CLUSTER_2
ad_ix_df,pandas.DataFrame({'idx':address_indexes_arr[matched_df.reset_index(),CLUSTER_9,CLUSTER_2
cols,"pandas.Series(tmp_df.columns,index=tmp_df.columns)",CLUSTER_9,CLUSTER_2
idx,"pandas.isnull(geocoded_df[['Case.File.Date','Judgment.Date']]
)",CLUSTER_9,CLUSTER_2
eviction_df,"pandas.read_sql('SELECT*FROMevictions',connstr)",CLUSTER_9,CLUSTER_2
df,"pandas.read_sql_table('GeocodedAddresses2',connstr)",CLUSTER_9,CLUSTER_2
sess,requests.Session(),CLUSTER_9,CLUSTER_2
encoder_input_data,"numpy.zeros(
(len(input_texts)",CLUSTER_5,CLUSTER_5
decoder_input_data,"numpy.zeros(
(len(input_texts)",CLUSTER_5,CLUSTER_5
decoder_target_data,"numpy.zeros(
(len(input_texts)",CLUSTER_5,CLUSTER_5
target_seq,"numpy.zeros((1,1,num_decoder_tokens)",CLUSTER_5,CLUSTER_5
target_seq,"numpy.zeros((1,1,num_decoder_tokens)",CLUSTER_5,CLUSTER_5
sampled_token_index,"numpy.argmax(output_tokens[0,-1,:])",CLUSTER_5,CLUSTER_5
df,pandas.read_pickle('train_df.pkl'),CLUSTER_5,CLUSTER_5
result_vector,"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
bh,"numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
by,"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
hs[-1],"hprev=numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
hprev,"numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
hprev,"numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
x,"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
h,"numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
x,"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
"dWxh,dWhh,dWhy",numpy.zeros_like(Wxh),CLUSTER_3,CLUSTER_6
"dbh,dby",numpy.zeros_like(bh),CLUSTER_3,CLUSTER_6
"dWxh,dWhh,dWhy",numpy.zeros_like(Wxh),CLUSTER_3,CLUSTER_6
"dbh,dby",numpy.zeros_like(bh),CLUSTER_3,CLUSTER_6
dhnext,numpy.zeros_like(hs[0]),CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
dWhy,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dWhy,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWhy,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWhy,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWxh,"numpy.dot(dhraw,xs[t].T)",CLUSTER_3,CLUSTER_6
dWhh,"numpy.dot(dhraw,hs[t-1].T)",CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
dWhy+,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWxh+,"numpy.dot(dhraw,xs[t].T)",CLUSTER_3,CLUSTER_6
dWhh+,"numpy.dot(dhraw,hs[t-1].T)",CLUSTER_3,CLUSTER_6
y,"numpy.dot(Why,h)",CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
dWhy+,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWxh+,"numpy.dot(dhraw,xs[t].T)",CLUSTER_3,CLUSTER_6
dWhh+,"numpy.dot(dhraw,hs[t-1].T)",CLUSTER_3,CLUSTER_6
dhnext,"numpy.dot(Whh.T,dhraw)",CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
p,numpy.exp(y),CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
h,"numpy.tanh(np.dot(Wxh,x)",CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
hs[-1],numpy.copy(hprev),CLUSTER_3,CLUSTER_6
hs[-1],numpy.copy(hprev),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
hs[-1],numpy.copy(hprev),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
hs[-1],numpy.copy(hprev),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
author_df,pandas.DataFrame(author_u),CLUSTER_9,CLUSTER_2
book,pandas.read_csv('data/books_c.csv'),CLUSTER_9,CLUSTER_2
data,"pandas.read_sql_query(
'''
SELECTcustomers.FirstName,customers.LastName,invoices.CustomerId,customers.country,invoices.Total,invoices.InvoiceDate
FROMcustomers
LEFTJOINinvoices
ONcustomers.CustomerId=invoices.CustomerId
''',
conn
)",CLUSTER_9,CLUSTER_2
df,pandas.read_csv('H:/Study/AI-MLAssignments/Day07/general_data.csv'),CLUSTER_1,CLUSTER_9
"stats,p","scipy.stats.pearsonr(df.MonthlyIncome,df.Attrition)",CLUSTER_1,CLUSTER_9
"corr,_","scipy.stats.pearsonr(df.Attrition,df.Age)",CLUSTER_1,CLUSTER_9
"x,y","scipy.stats.pearsonr(df.Attrition,df.Education)",CLUSTER_1,CLUSTER_9
"pyu,kyu","scipy.stats.pearsonr(df.Attrition,df.Gender)",CLUSTER_1,CLUSTER_9
"tri,p","scipy.stats.pearsonr(df.Attrition,df.DistanceFromHome)",CLUSTER_1,CLUSTER_9
"k,j","scipy.stats.pearsonr(df.Attrition,df.YearsWithCurrManager)",CLUSTER_1,CLUSTER_9
"stat,r","scipy.stats.pearsonr(df.Attrition,df.NumCompaniesWorked)",CLUSTER_1,CLUSTER_9
"stats,p","scipy.stats.pearsonr(df.Attrition,df.YearsSinceLastPromotion)",CLUSTER_1,CLUSTER_9
"corr,_","scipy.stats.pearsonr(df.Attrition,df.PercentSalaryHike)",CLUSTER_1,CLUSTER_9
"corr,_","scipy.stats.pearsonr(df.Attrition,df.TotalWorkingYears)",CLUSTER_1,CLUSTER_9
"f,axarr","matplotlib.pyplot.subplots(3,4,figsize=(15,15)",CLUSTER_1,CLUSTER_3
xs,"numpy.array([-1.0,0.0,1.0,2.0,3.0,4.0],dtype=float)",CLUSTER_1,CLUSTER_3
ys,"numpy.array([-3.0,-1.0,1.0,3.0,5.0,7.0],dtype=float)",CLUSTER_1,CLUSTER_3
xs,"numpy.array([1.0,2.0,3.0,4.0,5.0,6.0],dtype=float)",CLUSTER_1,CLUSTER_3
ys,"numpy.array([1.0,1.5,2.0,2.5,3.0,3.5],dtype=float)",CLUSTER_1,CLUSTER_3
openArray,"numpy.array([1,2,3,3],dtype='float64')",CLUSTER_9,CLUSTER_2
highArray,"numpy.array([2,3,4,3],dtype='float64')",CLUSTER_9,CLUSTER_2
lowArray,"numpy.array([0.5,1.5,2.5,1.5],dtype='float64')",CLUSTER_9,CLUSTER_2
closeArray,"numpy.array([1.5,2.5,3.5,2.5],dtype='float64')",CLUSTER_9,CLUSTER_2
EMA,"pandas.Series(ta.EMA(closeArray,2)",CLUSTER_9,CLUSTER_2
candleDF,pandas.concat([pd.Series(openArray),CLUSTER_9,CLUSTER_2
timeIndex,"pandas.date_range(""20180808"",periods=len(closeArray)",CLUSTER_9,CLUSTER_2
"fig,(ax)","matplotlib.pyplot.subplots(1,1,sharex=True,figsize=(15,7)",CLUSTER_9,CLUSTER_2
r,"requests.get(""http://bbs.fxdayu.com"")",CLUSTER_9,CLUSTER_2
t,numpy.arange(x_values.shape[0]),CLUSTER_4,CLUSTER_11
local_average,numpy.zeros(L),CLUSTER_4,CLUSTER_11
energy_local_diff,"numpy.concatenate((energy_local_diff,np.array([0])",CLUSTER_4,CLUSTER_11
log_energy_local_diff,"numpy.concatenate((log_energy_local_diff,np.array([0])",CLUSTER_4,CLUSTER_11
nov,"numpy.concatenate((nov,np.array([0])",CLUSTER_4,CLUSTER_11
energy_local,"numpy.convolve(x**2,w**2,'same')",CLUSTER_4,CLUSTER_11
nov,"numpy.sum(Y_diff,axis=0)",CLUSTER_4,CLUSTER_11
amplitude,numpy.log(1+gamma*np.abs(X),CLUSTER_4,CLUSTER_11
Y,numpy.log(1+gamma*np.abs(X),CLUSTER_4,CLUSTER_11
novelty_energy,numpy.copy(energy_local_diff),CLUSTER_4,CLUSTER_11
novelty_log_energy,numpy.copy(log_energy_local_diff),CLUSTER_4,CLUSTER_11
energy_local_diff,numpy.diff(energy_local),CLUSTER_4,CLUSTER_11
log_energy_local_diff,numpy.diff(np.log(1+gamma*energy_local),CLUSTER_4,CLUSTER_11
Y_diff,"numpy.diff(Y,n=1)",CLUSTER_4,CLUSTER_11
w,scipy.signal.hann(H),CLUSTER_4,CLUSTER_11
df,pandas.read_csv('Iris.csv'),CLUSTER_12,CLUSTER_5
"X1,X2","numpy.meshgrid(np.arange(start=X_set[:,0].min()",CLUSTER_12,CLUSTER_5
sc_x,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_5
classifier,sklearn.tree.DecisionTreeClassifier(max_depth=5),CLUSTER_12,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y,classifier.predict(x)",CLUSTER_12,CLUSTER_5
sqrt_disc,numpy.sqrt(b**2-4*a*c),CLUSTER_3,CLUSTER_6
r2,pandas.DataFrame(km.cluster_centers_),CLUSTER_7,CLUSTER_8
r1,pandas.Series(km.labels_),CLUSTER_7,CLUSTER_8
merge_AB,"pandas.concat([merged_sub_base_uae_14_day_trial,merged_sub_low_uae_no_trial],axis=0)",CLUSTER_7,CLUSTER_8
merge_AB_under,"pandas.concat([X_under,y_under],axis=1)",CLUSTER_7,CLUSTER_8
r,"pandas.concat([r2,r1],axis=1)",CLUSTER_7,CLUSTER_8
merge_AB,"pandas.get_dummies(merge_AB,prefix=['plan_type'],drop_first=True)",CLUSTER_7,CLUSTER_8
dummy_df,"pandas.get_dummies(data,columns=categorical,
prefix=categorical,
prefix_sep='_',
dummy_na=False,
drop_first=False)",CLUSTER_7,CLUSTER_8
merged_sub,"pandas.get_dummies(merged_sub,prefix=['package_type','preferred_genre','intended_use','male_TF','attribution_technical','attribution_survey','plan_type','payment_type'],columns=['package_type','preferred_genre','intended_use','male_TF','attribution_technical','attribution_survey','plan_type','payment_type'])",CLUSTER_7,CLUSTER_8
subs,pandas.read_pickle('C:/Users/ytw23/Downloads/subscribers'),CLUSTER_7,CLUSTER_8
engag,pandas.read_pickle('C:/Users/ytw23/Downloads/engagement'),CLUSTER_7,CLUSTER_8
cs,pandas.read_pickle(r'customer_service_reps'),CLUSTER_7,CLUSTER_8
data,pandas.read_pickle('C:/Users/ytw23/Downloads/subscribers'),CLUSTER_7,CLUSTER_8
revenue,numpy.array(X['revenue_net']),CLUSTER_7,CLUSTER_8
expected_revenue,"numpy.dot(y_pred,revenue)",CLUSTER_7,CLUSTER_8
norm,scipy.stats.norm(),CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=i,random_state=1)",CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=5,random_state=1)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33)",CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=i,max_depth=j)",CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=110,max_depth=4)",CLUSTER_7,CLUSTER_8
dist,math.sqrt((self.x-landmarks[i][0]),CLUSTER_3,CLUSTER_4
dist,math.sqrt((self.x-landmarks[i][0]),CLUSTER_3,CLUSTER_4
dist+,"random.gauss(0.0,self.sense_noise)",CLUSTER_3,CLUSTER_4
self.x,random.random(),CLUSTER_3,CLUSTER_4
self.y,random.random(),CLUSTER_3,CLUSTER_4
self.orientation,random.random(),CLUSTER_3,CLUSTER_4
beta+,random.random(),CLUSTER_3,CLUSTER_4
features,"np.append(arr=numpy.ones((506,1)",CLUSTER_7,CLUSTER_5
features,"numpy.append(arr=np.ones((506,1)",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv(""https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data"",delim_whitespace=True,names=['crime_rate','ZN','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','TAX','PTRATIO','BLACK','LSTAT','MEDV'])",CLUSTER_7,CLUSTER_5
modelFinal,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
R_Sq,"sklearn.metrics.r2_score(ytest,Y_Predict)",CLUSTER_7,CLUSTER_5
Mean_sq,"sklearn.metrics.mean_squared_error(Y_Predict,ytest)",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(8,4)",CLUSTER_3,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_10
"fig,axes",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2)",CLUSTER_3,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2)",CLUSTER_3,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(figsize=(12,3)",CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_3,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_3,CLUSTER_10
x,"numpy.linspace(0,5,11)",CLUSTER_3,CLUSTER_10
data,"random.sample(range(1,1000)",CLUSTER_3,CLUSTER_10
taxi_tickets,pandas.read_csv('taxi_ticket_data/taxi_tickets_by_ward.csv'),CLUSTER_7,CLUSTER_3
taxi_bus_st['IssueDate'],pandas.to_datetime(taxi_bus_st['IssueDate']),CLUSTER_7,CLUSTER_3
model80_score,"pandas.DataFrame({'Model':['LogRegression','RandomForest','KNNeighbors'],
'Normal':[LRG_score,RFC_score,KNN_score],
'Hyper':[LRG_best_score,RFC_best_score,KNN_best_score]})",CLUSTER_7,CLUSTER_8
report_LRG,"pandas.DataFrame(classification_report(y_test,yp_LRG,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
report_RFC,"pandas.DataFrame(classification_report(y_test,yp_RFC,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
report_KNN,"pandas.DataFrame(classification_report(y_test,yp_KNN,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
model90_score,"pandas.DataFrame({'Model':['LogRegression','RandomForest','KNNeighbors'],
'Normal':[LRG1_score,RFC1_score,KNN1_score],
'Hyper':[LRG1_best_score,RFC1_best_score,KNN1_best_score]})",CLUSTER_7,CLUSTER_8
report_LRG1,"pandas.DataFrame(classification_report(y1_test,yp_LRG1,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
report_RFC1,"pandas.DataFrame(classification_report(y1_test,yp_RFC1,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
report_KNN1,"pandas.DataFrame(classification_report(y1_test,yp_KNN1,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
df,"pandas.concat([df_test,df_surv],axis=1)",CLUSTER_7,CLUSTER_8
df_titanic,"pandas.concat([df_train,df],ignore_index=True)",CLUSTER_7,CLUSTER_8
fill_male,"pandas.concat([mcat0,mcat1,mcat2,mcat3,mcat4])",CLUSTER_7,CLUSTER_8
fill_female,"pandas.concat([fcat0,fcat1,fcat2,fcat3,fcat4])",CLUSTER_7,CLUSTER_8
fill_age,"pandas.concat([fill_male,fill_female])",CLUSTER_7,CLUSTER_8
df_train,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_8
df_surv,pandas.read_csv('gender_submission.csv'),CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_8
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_8
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,train_size=0.8,shuffle=False)",CLUSTER_7,CLUSTER_8
"x1_train,x1_test,y1_train,y1_test","sklearn.model_selection.train_test_split(x1,y1,train_size=0.9,shuffle=False)",CLUSTER_7,CLUSTER_8
LRG,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
LRG_best,"sklearn.linear_model.LogisticRegression(solver='liblinear',penalty='l1',max_iter=10)",CLUSTER_7,CLUSTER_8
LRG1,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
LRG1_best,"sklearn.linear_model.LogisticRegression(solver='liblinear',penalty='l2',max_iter=100)",CLUSTER_7,CLUSTER_8
df_titanic['Embarked'],sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
df_titanic['Sex'],sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
RFC,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
RFC_best,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,min_samples_split=5,min_samples_leaf=1,max_depth=10)",CLUSTER_7,CLUSTER_8
RFC1,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
RFC1_best,"sklearn.ensemble.RandomForestClassifier(n_estimators=1000,min_samples_split=10,min_samples_leaf=2,max_depth=20)",CLUSTER_7,CLUSTER_8
KNN,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
KNN_best,"sklearn.neighbors.KNeighborsClassifier(p=1,n_neighbors=7,leaf_size=49)",CLUSTER_7,CLUSTER_8
KNN1,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
KNN1_best,"sklearn.neighbors.KNeighborsClassifier(p=1,n_neighbors=8,leaf_size=34)",CLUSTER_7,CLUSTER_8
cm_LRG,"sklearn.metrics.confusion_matrix(y_test,yp_LRG)",CLUSTER_7,CLUSTER_8
cm_RFC,"sklearn.metrics.confusion_matrix(y_test,yp_RFC)",CLUSTER_7,CLUSTER_8
cm_KNN,"sklearn.metrics.confusion_matrix(y_test,yp_KNN)",CLUSTER_7,CLUSTER_8
cm_LRG1,"sklearn.metrics.confusion_matrix(y1_test,yp_LRG1)",CLUSTER_7,CLUSTER_8
cm_RFC1,"sklearn.metrics.confusion_matrix(y1_test,yp_RFC1)",CLUSTER_7,CLUSTER_8
cm_KNN1,"sklearn.metrics.confusion_matrix(y1_test,yp_KNN1)",CLUSTER_7,CLUSTER_8
RSCV_LRG,"sklearn.model_selection.RandomizedSearchCV(estimator=LRG,param_distributions=LRG_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_RFC,"sklearn.model_selection.RandomizedSearchCV(estimator=RFC,param_distributions=RFC_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_KNN,"sklearn.model_selection.RandomizedSearchCV(estimator=KNN,param_distributions=KNN_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_LRG1,"sklearn.model_selection.RandomizedSearchCV(estimator=LRG1,param_distributions=LRG_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_RFC1,"sklearn.model_selection.RandomizedSearchCV(estimator=RFC1,param_distributions=RFC_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_KNN1,"sklearn.model_selection.RandomizedSearchCV(estimator=KNN1,param_distributions=KNN_param,cv=5)",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(item,columns=te.columns_)",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(item.astype(""int"")",CLUSTER_7,CLUSTER_3
product,"pandas.DataFrame(product,columns=['productrecommendation'])",CLUSTER_7,CLUSTER_3
df,"pandas.read_csv('MarketBasketAnalysis/GroceryStoreDataSet.csv',header=None)",CLUSTER_7,CLUSTER_3
mask,numpy.zeros_like(dftable),CLUSTER_7,CLUSTER_3
"f,ax","matplotlib.pyplot.subplots(figsize=(7,5)",CLUSTER_7,CLUSTER_3
pal,"seaborn.color_palette(""RdBu"",n_colors=4)",CLUSTER_7,CLUSTER_3
ax,"seaborn.heatmap(dftable,mask=mask,vmax=4,square=True,annot=True,cmap=pal)",CLUSTER_7,CLUSTER_3
Ar,numpy.zeros((len(u),CLUSTER_3,CLUSTER_6
SVD,"numpy.linalg.svd(A,full_matrices=False)",CLUSTER_3,CLUSTER_6
"u,s,v","numpy.linalg.svd(x,full_matrices=False)",CLUSTER_3,CLUSTER_6
x,scipy.misc.face(),CLUSTER_3,CLUSTER_6
songs_info_pd['publish_year'],pandas.DatetimeIndex(songs_info_pd['publish_time']),CLUSTER_1,CLUSTER_3
user_action_pd,"pandas.read_csv('../data/mars_tianchi_user_actions.csv',header=None)",CLUSTER_1,CLUSTER_3
songs_info_pd,"pandas.read_csv('../data/mars_tianchi_songs.csv',header=None)",CLUSTER_1,CLUSTER_3
user_action_pd['gmt_create'],"pandas.to_datetime(user_action_pd['gmt_create'],unit='s')",CLUSTER_1,CLUSTER_3
songs_info_pd['publish_time'],pandas.to_datetime(songs_info_pd['publish_time'].astype(str),CLUSTER_1,CLUSTER_3
songs_info_pd['publish_time'],pandas.to_datetime(songs_info_pd['publish_time'].astype(str),CLUSTER_1,CLUSTER_3
reviews,"pandas.read_csv(""../input/wine-reviews/winemag-data-130k-v2.csv"",index_col=0)",CLUSTER_8,CLUSTER_4
"orig_mean,orig_std,orig_max,orig_min",numpy.mean(num_nodes),CLUSTER_6,CLUSTER_10
"orig_mean,orig_std,orig_max,orig_min",numpy.mean(num_nodes),CLUSTER_6,CLUSTER_10
"orig_mean,orig_std,orig_max,orig_min",numpy.mean(num_nodes),CLUSTER_6,CLUSTER_10
"orig_mean,orig_std,orig_max,orig_min",numpy.mean(num_nodes),CLUSTER_6,CLUSTER_10
ecom,pandas.read_csv('EcommercePurchases'),CLUSTER_8,CLUSTER_4
unique_incidents_sub_weekly_train.index,numpy.arange(len(unique_incidents_sub_weekly_train),CLUSTER_11,CLUSTER_8
unique_incidents_sub_weekly_test.index,numpy.arange(len(unique_incidents_sub_weekly_test),CLUSTER_11,CLUSTER_8
incidents,pandas.read_csv('../data/sf-police-calls-for-service-and-incidents/police-department-incidents.csv'),CLUSTER_11,CLUSTER_8
incidents['DateTime'],pandas.to_datetime(pandas.to_datetime(incidents['Date']),CLUSTER_11,CLUSTER_8
unique_incidents_sub.index,pandas.to_datetime(unique_incidents_sub['DateTime']),CLUSTER_11,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_11,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,6)",CLUSTER_11,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,6)",CLUSTER_11,CLUSTER_8
a,"numpy.zeros([x.shape[0],34])",CLUSTER_2,CLUSTER_7
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
daily_df,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_std,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_mean,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
stat_table,pandas.DataFrame(index=tickers),CLUSTER_7,CLUSTER_9
mvsk_moments,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_function,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_data,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
daily_df,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_std,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_mean,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
stat_table,pandas.DataFrame(index=tickers),CLUSTER_7,CLUSTER_9
mvsk_moments,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_function,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_data,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
daily_df,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_std,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_mean,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
stat_table,pandas.DataFrame(index=tickers),CLUSTER_7,CLUSTER_9
mvsk_moments,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_function,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_data,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
btc_usd,pandas.read_csv('BTC-USDmax.csv'),CLUSTER_7,CLUSTER_9
djia,pandas.read_csv('DJIAmax.csv'),CLUSTER_7,CLUSTER_9
S_and_P,pandas.read_csv('SandPmax.csv'),CLUSTER_7,CLUSTER_9
MSCI_World,pandas.read_csv('URTHmax.csv'),CLUSTER_7,CLUSTER_9
T_Bill,pandas.read_csv('BILmax.csv'),CLUSTER_7,CLUSTER_9
DBV,pandas.read_csv('DBVmax.csv'),CLUSTER_7,CLUSTER_9
CEW,pandas.read_csv('CEWmax.csv'),CLUSTER_7,CLUSTER_9
ACWI,pandas.read_csv('ACWImax.csv'),CLUSTER_7,CLUSTER_9
AGG,pandas.read_csv('AGGmax.csv'),CLUSTER_7,CLUSTER_9
usd_eur,pandas.read_csv('usd_eur_quandl.csv'),CLUSTER_7,CLUSTER_9
usd_eur.Date,"pandas.to_datetime(usd_eur.Date,format='%m/%d/%Y')",CLUSTER_7,CLUSTER_9
df.Date,"pandas.to_datetime(df.Date,format='%Y/%m/%d')",CLUSTER_7,CLUSTER_9
df.Date,"pandas.to_datetime(df.Date,format='%Y/%m/%d')",CLUSTER_7,CLUSTER_9
df.Date,"pandas.to_datetime(df.Date,format='%Y/%m/%d')",CLUSTER_7,CLUSTER_9
cont_data,"numpy.arange(-0.05,0.05,0.0001)",CLUSTER_7,CLUSTER_9
temp_cont_data,"numpy.arange(-2,2,0.0001)",CLUSTER_7,CLUSTER_9
cont_data,"numpy.arange(-0.05,0.05,0.0001)",CLUSTER_7,CLUSTER_9
temp_cont_data,"numpy.arange(-2,2,0.0001)",CLUSTER_7,CLUSTER_9
cont_data,"numpy.arange(-0.05,0.05,0.0001)",CLUSTER_7,CLUSTER_9
temp_cont_data,"numpy.arange(-2,2,0.0001)",CLUSTER_7,CLUSTER_9
stat_table['Mean'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Min'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Max'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Variance'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Skewness'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Kurtosis'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Mean'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Min'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Max'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Variance'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Skewness'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Kurtosis'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Mean'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Min'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Max'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Variance'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Skewness'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Kurtosis'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['z-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['p-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['z-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['p-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['z-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['p-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
start,"datetime.datetime(2011,1,21)",CLUSTER_7,CLUSTER_9
end,"datetime.datetime(2019,1,20)",CLUSTER_7,CLUSTER_9
start,"datetime.datetime(2014,1,21)",CLUSTER_7,CLUSTER_9
end,"datetime.datetime(2019,1,20)",CLUSTER_7,CLUSTER_9
start,"datetime.datetime(2016,1,21)",CLUSTER_7,CLUSTER_9
end,"datetime.datetime(2019,1,20)",CLUSTER_7,CLUSTER_9
industry_titles,"pandas.DataFrame([['POPESTIMATE2010','Population']],columns=industry_titles.columns)",CLUSTER_0,CLUSTER_5
industry_titles,"pandas.DataFrame([['Cropland','Cropland'],
['Desert','Desert'],
['Grassland','Grassland'],
['Other','Other'],
['Woodland','Woodland'],
['Urban','Urban'],
['Water','Water']],columns=industry_titles.columns)",CLUSTER_0,CLUSTER_5
clust_result,"pandas.DataFrame(clustering.labels_,index=X.columns,columns=['cluster'])",CLUSTER_0,CLUSTER_5
edges,pandas.DataFrame(demean(cor_mat),CLUSTER_0,CLUSTER_5
nodes_size,pandas.DataFrame(np.sqrt(X.sum(),CLUSTER_0,CLUSTER_5
pos_df,"pandas.DataFrame(pos,index=['x','y'])",CLUSTER_0,CLUSTER_5
df,pandas.concat(df_list),CLUSTER_0,CLUSTER_5
X,"pandas.concat([county_pop.loc[X.index],county_LU.loc[X.index],X],axis=1,sort=True)",CLUSTER_0,CLUSTER_5
clust_result,"pandas.concat([clust_result,industry_titles.set_index('industry_code')",CLUSTER_0,CLUSTER_5
nodes,"pandas.concat([nodes_size,clust_result],axis=1,sort=False)",CLUSTER_0,CLUSTER_5
nodes_wpos,"pandas.concat([nodes_s,pos_df],axis=1,sort=False)",CLUSTER_0,CLUSTER_5
main_tables,pandas.concat([pd.read_csv('./../../../../../media/miglesia/Elements/corr_st_data/CHI_COM_W4_O4_E2_I4_main_table_2011_2012.csv'),CLUSTER_0,CLUSTER_5
merged,pandas.concat([population.set_index('CHIIDCOM'),CLUSTER_0,CLUSTER_5
b,"8;population['log_dens_cat']=pandas.cut(population['log_dens'],b)",CLUSTER_0,CLUSTER_5
bins,"pandas.cut(population['log_dens'],b,retbins=True)",CLUSTER_0,CLUSTER_5
agglevel_titles,pandas.read_csv(path+'agglevel_titles.csv'),CLUSTER_0,CLUSTER_5
area_titles,pandas.read_csv(path+'area_titles.csv'),CLUSTER_0,CLUSTER_5
industry_titles,pandas.read_csv(path+'industry_titles.csv'),CLUSTER_0,CLUSTER_5
df_y,pandas.read_csv(path+str(y),CLUSTER_0,CLUSTER_5
df_cnt,"pandas.read_csv('./data/naics_area_cnt_02_07.csv',index_col=[0,1])",CLUSTER_0,CLUSTER_5
county_LU,"pandas.read_csv('./data/US_land_use/land_use_frac.csv',index_col=0)",CLUSTER_0,CLUSTER_5
county_pop,"pandas.read_csv('./data/co-est2017-alldata.csv',encoding='latin-1')",CLUSTER_0,CLUSTER_5
population,pandas.read_csv('./data/pop_dist_comuna.csv'),CLUSTER_0,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(1,3,figsize=(24,8)",CLUSTER_0,CLUSTER_5
nodes_['color_mfg_srv'],"numpy.select(conditions,choices,default='

edges_max_d_triangles.to_csv('edges_max_d_triangles.csv',index=False)",CLUSTER_0,CLUSTER_5
clustering,"sklearn.cluster.SpectralClustering(n_clusters=10,
assign_labels=""discretize"",
random_state=0)",CLUSTER_0,CLUSTER_5
cor_mat,numpy.log10(X),CLUSTER_0,CLUSTER_5
cov_mat,numpy.log10(X),CLUSTER_0,CLUSTER_5
df_indu_prc_area,numpy.log10(df_agglv_yravg),CLUSTER_0,CLUSTER_5
df_indu_prc_area,numpy.log10(df_agglv_yravg),CLUSTER_0,CLUSTER_5
population['log_dens'],numpy.log10(population['densidad']),CLUSTER_0,CLUSTER_5
x_len,numpy.arange(len(y_loss),CLUSTER_2,CLUSTER_7
favorite_retweet_table,pandas.DataFrame(data_list),CLUSTER_9,CLUSTER_2
data_twitter_clean,"pandas.melt(data_twitter_clean,id_vars=columns_to_stay,value_vars=columns_to_melt,
var_name='stages',value_name='dog_stage')",CLUSTER_9,CLUSTER_2
df_twitter,"pandas.merge(data_twitter_clean,
images_clean,
how='left',on=['tweet_id'])",CLUSTER_9,CLUSTER_2
df_twitter_master,"pandas.merge(df_twitter,json_clean,
how='left',on=['tweet_id'])",CLUSTER_9,CLUSTER_2
data_twitter,pandas.read_csv('twitter-archive-enhanced.csv'),CLUSTER_9,CLUSTER_2
images,"pandas.read_table('images_prediction/image-predictions.tsv',
sep='\t')",CLUSTER_9,CLUSTER_2
data_twitter_clean['timestamp'],pandas.to_datetime(data_twitter_clean['timestamp']),CLUSTER_9,CLUSTER_2
r,requests.get(url),CLUSTER_9,CLUSTER_2
data,json.loads(line),CLUSTER_9,CLUSTER_2
idlat,numpy.where(abs(pointCoords[0]-lat),CLUSTER_1,CLUSTER_9
idlon,numpy.where(abs(pointCoords[1]-lon),CLUSTER_1,CLUSTER_9
ts,"numpy.squeeze(myvar[:,idlat,idlon])",CLUSTER_1,CLUSTER_9
ts_CDOfilt,"numpy.squeeze(myvar_CDOfilt[:,idlat,idlon])",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,4)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,4)",CLUSTER_1,CLUSTER_9
t,"matplotlib.pyplot.text(1/max5[i,0],max5[i,1],'%.0fdays'%round(max5[i,2])",CLUSTER_1,CLUSTER_9
t,"matplotlib.pyplot.text(1/max5_f[i,0],max5_f[i,1],'%.0fdays'%round(max5_f[i,2])",CLUSTER_1,CLUSTER_9
t,"matplotlib.pyplot.text(1/max5_CDOf[i,0],max5_CDOf[i,1],'%.0fdays'%round(max5_CDOf[i,2])",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,[low,high],btype='band')",CLUSTER_1,CLUSTER_9
y,"scipy.signal.lfilter(b,a,data)",CLUSTER_1,CLUSTER_9
wiki_movies_raw,json.load(file),CLUSTER_9,CLUSTER_3
wiki_movies_df,pandas.DataFrame(wiki_movies_raw),CLUSTER_9,CLUSTER_3
wiki_movies_df,pandas.DataFrame(clean_movies),CLUSTER_9,CLUSTER_3
wiki_movies_df,pandas.DataFrame(clean_movies),CLUSTER_9,CLUSTER_3
movies_df,"pandas.merge(wiki_movies_df,kaggle_metadata,on='imdb_id',suffixes=['_wiki','_kaggle'])",CLUSTER_9,CLUSTER_3
movies_with_ratings_df,"pandas.merge(movies_df,rating_counts,left_on='kaggle_id',right_index=True,how='left')",CLUSTER_9,CLUSTER_3
kaggle_metadata,"pandas.read_csv(f'{file_dir}movies_metadata.csv',low_memory=False)",CLUSTER_9,CLUSTER_3
ratings,pandas.read_csv(f'{file_dir}ratings.csv'),CLUSTER_9,CLUSTER_3
wiki_movies_df['release_date'],pandas.to_datetime(release_date.str.extract(f'({date_form_one}|{date_form_two}|{date_form_three}|{date_form_four}),CLUSTER_9,CLUSTER_3
kaggle_metadata['release_date'],pandas.to_datetime(kaggle_metadata['release_date']),CLUSTER_9,CLUSTER_3
ratings['timestamp'],"pandas.to_datetime(ratings['timestamp'],unit='s')",CLUSTER_9,CLUSTER_3
kaggle_metadata['id'],"pandas.to_numeric(kaggle_metadata['id'],errors='raise')",CLUSTER_9,CLUSTER_3
kaggle_metadata['popularity'],"pandas.to_numeric(kaggle_metadata['popularity'],errors='raise')",CLUSTER_9,CLUSTER_3
s,"re.sub('\$|\s|[a-zA-Z]','',s)",CLUSTER_9,CLUSTER_3
s,"re.sub('\$|\s|[a-zA-Z]','',s)",CLUSTER_9,CLUSTER_3
s,"re.sub('\$|,','',s)",CLUSTER_9,CLUSTER_3
start_time,time.time(),CLUSTER_9,CLUSTER_3
hist,pandas.Series(counts),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('survey_short_columns.csv'),CLUSTER_7,CLUSTER_8
tmp,"pandas.read_csv('roles.csv',sep=';',index_col=0)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('Data/taxi_data.csv'),CLUSTER_0,CLUSTER_5
X,"numpy.array(df[['LON','LAT']],dtype='float64')",CLUSTER_0,CLUSTER_5
X,"numpy.array(df[['LON','LAT']],dtype='float64')",CLUSTER_0,CLUSTER_5
dummy,"numpy.array([-1,-1,-1,2,3,4,5,-1])",CLUSTER_0,CLUSTER_5
new,numpy.array([(counter+2),CLUSTER_0,CLUSTER_5
no_outliers,numpy.array([(counter+2),CLUSTER_0,CLUSTER_5
no_outliers,numpy.array([(counter+2),CLUSTER_0,CLUSTER_5
X_train,"numpy.array(df_train[['LON','LAT']],dtype='float64')",CLUSTER_0,CLUSTER_5
y_train,numpy.array(df_train['CLUSTER_HDBSCAN']),CLUSTER_0,CLUSTER_5
X_predict,"numpy.array(df_predict[['LON','LAT']],dtype='float64')",CLUSTER_0,CLUSTER_5
unique_clusters,numpy.unique(class_predictions),CLUSTER_0,CLUSTER_5
unique_clusters,numpy.unique(class_predictions),CLUSTER_0,CLUSTER_5
data[x]['unique_classes'],numpy.unique(class_predictions),CLUSTER_0,CLUSTER_5
class_predictions,numpy.load('Data/sample_clusters.npy'),CLUSTER_0,CLUSTER_5
class_predictions,numpy.load('Data/sample_clusters_improved.npy'),CLUSTER_0,CLUSTER_5
model,"sklearn.cluster.KMeans(n_clusters=3,random_state=17,
max_iter=x,n_init=1)",CLUSTER_0,CLUSTER_5
model,"sklearn.cluster.KMeans(n_clusters=k,random_state=17)",CLUSTER_0,CLUSTER_5
model,"sklearn.cluster.KMeans(n_clusters=k,random_state=1)",CLUSTER_0,CLUSTER_5
model,"sklearn.cluster.DBSCAN(eps=0.01,min_samples=5)",CLUSTER_0,CLUSTER_5
curr_silhouette,"sklearn.metrics.silhouette_score(X,class_predictions)",CLUSTER_0,CLUSTER_5
"X_blobs,_","sklearn.datasets.make_blobs(n_samples=1000,centers=10,n_features=2,
cluster_std=0.5,random_state=4)",CLUSTER_0,CLUSTER_5
"X_blobs,_","sklearn.datasets.make_blobs(n_samples=1000,centers=50,
n_features=2,cluster_std=1,random_state=4)",CLUSTER_0,CLUSTER_5
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_0,CLUSTER_5
data,collections.defaultdict(dict),CLUSTER_0,CLUSTER_5
popup,"re.sub(r'[^a-zA-Z]+','',row.NAME)",CLUSTER_0,CLUSTER_5
df,pandas.DataFrame([list(x.seq),CLUSTER_5,CLUSTER_5
distances,pandas.DataFrame(manhattan_distances(data.toarray(),CLUSTER_5,CLUSTER_5
pathsdf,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
df,pandas.DataFrame([list(x.seq),CLUSTER_5,CLUSTER_5
names,pandas.Series([x.idforxinfastas]),CLUSTER_5,CLUSTER_5
names,pandas.Series([x.idforxinfastas]),CLUSTER_5,CLUSTER_5
primersheet['GC'],pandas.Series([GC(i),CLUSTER_5,CLUSTER_5
repeats,"pandas.Series(repeats,name='%repeats')",CLUSTER_5,CLUSTER_5
pairs,"pandas.concat([pathsdf[0],pathsdf[1]],
axis=1,join='inner')",CLUSTER_5,CLUSTER_5
x,"pandas.concat([pathsdf[i],pathsdf[i+1]],
axis=1,join='inner')",CLUSTER_5,CLUSTER_5
primersheet,"pandas.concat([rxns['Source'],
rxns['Target'],
rxns['newcodon'].str.cat([rxns['baseprimer']])",CLUSTER_5,CLUSTER_5
arr,numpy.array([]),CLUSTER_5,CLUSTER_5
arr,numpy.array([]),CLUSTER_5,CLUSTER_5
array,numpy.asarray(array),CLUSTER_5,CLUSTER_5
arr,"numpy.append(arr,i)",CLUSTER_5,CLUSTER_5
arr,"numpy.append(arr,mt.Tm_NN(primer)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,3.5)",CLUSTER_5,CLUSTER_5
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
OneHotEncoder,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
skf,"sklearn.model_selection.KFold(n_splits=config['N_USED_FOLDS'],shuffle=True,random_state=SEED)",CLUSTER_10,CLUSTER_7
data,"numpy.array(file[""/numres""])",CLUSTER_1,CLUSTER_10
imag,numpy.array(file[rl]),CLUSTER_1,CLUSTER_10
real,numpy.array(file[im]),CLUSTER_1,CLUSTER_10
cn,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
c1,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
c2,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
c3,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
c4,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
index,numpy.int32(i/toff),CLUSTER_1,CLUSTER_10
t,"numpy.linspace(0,5000,1e3)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(14,10)",CLUSTER_1,CLUSTER_10
df,"pandas.read_csv(database,delimiter=';')",CLUSTER_7,CLUSTER_3
image,numpy.array(image),CLUSTER_4,CLUSTER_0
data,numpy.array(data),CLUSTER_4,CLUSTER_0
labels,numpy.array(labels),CLUSTER_4,CLUSTER_0
X_test,numpy.array(data),CLUSTER_4,CLUSTER_0
y_test,pandas.read_csv('Test.csv'),CLUSTER_4,CLUSTER_0
cur_path,os.getcwd(),CLUSTER_4,CLUSTER_0
images,os.listdir(path),CLUSTER_4,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,labels,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_0
input_df,"pandas.DataFrame([[input_json['machine']['temperature'],input_json['machine']['pressure'],input_json['ambient']['temperature'],input_json['ambient']['humidity']]])",CLUSTER_5,CLUSTER_1
temp_data,pandas.read_csv('temperature_data.csv'),CLUSTER_5,CLUSTER_1
clf1,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_1
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.35,random_state=0)",CLUSTER_5,CLUSTER_1
input_json,json.loads(input_str),CLUSTER_5,CLUSTER_1
x,numpy.arange(9),CLUSTER_7,CLUSTER_8
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_8
val_scores_mean,"numpy.mean(val_scores,axis=1)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv(TRAIN_DATASET),CLUSTER_7,CLUSTER_8
"slope,intercept,r_value,p_value,std_err","scipy.stats.linregress(x_axis,y_axis)",CLUSTER_7,CLUSTER_8
"popt,pcov","scipy.optimize.curve_fit(func,x_axis,y_axis)",CLUSTER_7,CLUSTER_8
r,"random.randint(0,len(x_axis)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,target,test_size=0.25,random_state=random_state)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
model,sklearn.tree.DecisionTreeRegressor(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.Ridge(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.Lasso(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.ElasticNet(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.GradientBoostingRegressor(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.RandomForestRegressor(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.AdaBoostRegressor(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.svm.SVR(),CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=random_state)",CLUSTER_7,CLUSTER_8
"train_sizes,train_scores,val_scores","sklearn.model_selection.learning_curve(model,X_train,y_train,cv=cv,
scoring=scoring,n_jobs=n_jobs,verbose=1)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('Input/Pokemon.csv'),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
proyect_data,pandas.read_csv('/Users/juandediegosuanzes/desktop/ih_datamadpt0420_project_m1/data/raw/proyect_data.csv'),CLUSTER_8,CLUSTER_4
tables,"pandas.read_sql_query(""""""SELECTnameFROMsqlite_masterWHEREtype='table'"""""",engine)",CLUSTER_8,CLUSTER_4
"X_train,y_train","sklearn.datasets.load_svmlight_file(""a9atrain.txt"")",CLUSTER_3,CLUSTER_10
"X_test,y_test","sklearn.datasets.load_svmlight_file(""a9atest.txt"")",CLUSTER_3,CLUSTER_10
x_,numpy.array(X_train.toarray(),CLUSTER_3,CLUSTER_10
y_,"numpy.array(y_train,np.float32)",CLUSTER_3,CLUSTER_10
xt_,numpy.array(X_test.toarray(),CLUSTER_3,CLUSTER_10
yt_,"numpy.array(y_test,np.float32)",CLUSTER_3,CLUSTER_10
	gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	test_loss_history,"numpy.zeros((iteration,1)",CLUSTER_3,CLUSTER_10
	v,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	Theta_gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	test_loss_history,"numpy.zeros((iteration,1)",CLUSTER_3,CLUSTER_10
	Theta_gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	test_loss_history,"numpy.zeros((iteration,1)",CLUSTER_3,CLUSTER_10
	Theta_gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	delta_theta,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	test_loss_history,"numpy.zeros((iteration,1)",CLUSTER_3,CLUSTER_10
	Theta_gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	m_t,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
t_nag,"numpy.zeros((1,124)",CLUSTER_3,CLUSTER_10
t_rmsprop,"numpy.zeros((1,124)",CLUSTER_3,CLUSTER_10
t_adadelta,"numpy.zeros((1,124)",CLUSTER_3,CLUSTER_10
t_adam,"numpy.zeros((1,124)",CLUSTER_3,CLUSTER_10
X_,"numpy.hstack([x_,np.ones((x_.shape[0],1)",CLUSTER_3,CLUSTER_10
Xt_,"numpy.hstack([xt_,np.zeros((xt_.shape[0],1)",CLUSTER_3,CLUSTER_10
	e_t,math.exp(Xi.dot(Theta.T),CLUSTER_3,CLUSTER_10
		index,"random.randint(0,y.shape[0]-10)",CLUSTER_3,CLUSTER_10
		index,"random.randint(0,y.shape[0]-10)",CLUSTER_3,CLUSTER_10
		index,"random.randint(0,y.shape[0]-10)",CLUSTER_3,CLUSTER_10
		index,"random.randint(0,y.shape[0]-10)",CLUSTER_3,CLUSTER_10
ts_pre,"pandas.read_csv('../PIRdata/1monthPIRsleep.csv',parse_dates=True,index_col=0)",CLUSTER_7,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((9,1)",CLUSTER_7,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((9,1)",CLUSTER_7,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((9,1)",CLUSTER_7,CLUSTER_3
decisions,"numpy.array([l0,l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13,
l14,l15,l16,l17,l18,l19,l20,l21,l22,l23,l24,l25,
l26,l27,l28,l29,l30,l31,l32,l33,l34,l35,l36,l37,
l38,l39,l40,l41,l42,l43,l44,l45,l46,l47,l48,l49,
l50,l51,l52,l53,l54,l55,l56,l57,l58,l59,l60,l61,
l62,l63,l64,l65,l66,l67,l68,l69,l70,l71,l72,l73,
l74,l75,l76,l77,l78,l79,l80,l81,l82,l83,l84,l85,
l86,l87,l88,l89,l90,l91,l92,l93,l94,l95,l96,l97,
l98,l99])",CLUSTER_3,CLUSTER_6
decisions,numpy.array(decisions),CLUSTER_3,CLUSTER_6
X,"numpy.zeros((nvars,)",CLUSTER_3,CLUSTER_6
average_daily_P,"numpy.zeros((nvars,)",CLUSTER_3,CLUSTER_6
reliability+,numpy.sum(X<Pcrit),CLUSTER_3,CLUSTER_6
utility,"numpy.sum(alpha*decisions*np.power(delta,np.arange(nvars)",CLUSTER_3,CLUSTER_6
inertia,numpy.sum(np.abs(np.diff(decisions),CLUSTER_3,CLUSTER_6
Pcrit,scipy.optimize.brentq(lambdax:x**q/(1+x**q),CLUSTER_3,CLUSTER_6
df,"pandas.read_csv('olympics.csv',index_col=0,skiprows=1)",CLUSTER_8,CLUSTER_4
census_df,pandas.read_csv('census.csv'),CLUSTER_8,CLUSTER_4
data_matrix,"numpy.array([[10,60,10,90],
[20,50,40,70],
[30,50,30,40],
[20,50,20,60],
[10,60,30,10]])",CLUSTER_5,CLUSTER_10
data_matrix,"numpy.array([[10,60,90],
[20,50,70],
[30,50,40],
[20,50,60],
[10,60,10]])",CLUSTER_5,CLUSTER_10
centered_data,"numpy.empty([5,3])",CLUSTER_5,CLUSTER_10
mean,"numpy.mean(data_matrix,axis=0)",CLUSTER_5,CLUSTER_10
covariance,"numpy.cov(centered_data,rowvar=False)",CLUSTER_5,CLUSTER_10
proj_matrix,"numpy.column_stack((eigenvectors[:,2],eigenvectors[:,1])",CLUSTER_5,CLUSTER_10
"eigenvalues,eigenvectors",numpy.linalg.eigh(covariance),CLUSTER_5,CLUSTER_10
norm,"numpy.linalg.norm(data_matrix,axis=1)",CLUSTER_5,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_10
df,pandas.DataFrame(treated_cards),CLUSTER_8,CLUSTER_4
n,numpy.arange(immagini.shape[0]),CLUSTER_4,CLUSTER_0
immagini,numpy.array(data),CLUSTER_4,CLUSTER_0
label,numpy.array(labels),CLUSTER_4,CLUSTER_0
x_train,numpy.array(list(x_train),CLUSTER_4,CLUSTER_0
x_test,numpy.array(list(x_test),CLUSTER_4,CLUSTER_0
dati,"pandas.DataFrame(data=d,columns=[""immagini"",""labels""])",CLUSTER_4,CLUSTER_0
infette,"os.listdir(cellule+""/Parasitized"")",CLUSTER_4,CLUSTER_0
sane,"os.listdir(cellule+""/Uninfected"")",CLUSTER_4,CLUSTER_0
img,"matplotlib.pyplot.imread(cellule+""/""+""Parasitized""+""/""+infette[i+1])",CLUSTER_4,CLUSTER_0
img,"matplotlib.pyplot.imread(cellule+""/""+""Uninfected""+""/""+sane[i+1])",CLUSTER_4,CLUSTER_0
img_read,"matplotlib.pyplot.imread(cellule+""/Parasitized/""+img)",CLUSTER_4,CLUSTER_0
img_read,"matplotlib.pyplot.imread(cellule+""/Uninfected/""+img)",CLUSTER_4,CLUSTER_0
"train,test","sklearn.model_selection.train_test_split(dati,test_size=0.3,stratify=dati[""labels""])",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv('1coinUSD.csv',header=None)",CLUSTER_8,CLUSTER_9
self.current_density_points_to_bin,numpy.array([-1for_inrange(var.shape[0]),CLUSTER_8,CLUSTER_9
self.current_velocity_points_to_bin,numpy.array([-1for_inrange(var.shape[0]),CLUSTER_8,CLUSTER_9
self.current_density_bin_to_points,numpy.array(self.current_density_bin_to_points),CLUSTER_8,CLUSTER_9
self.init_density,"numpy.array([0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.5200622,0.4259711,0.05396671,0.,0.,0.,0.,0.])",CLUSTER_8,CLUSTER_9
self.current_velocity,numpy.zeros(self.n),CLUSTER_8,CLUSTER_9
self.current_velocity_table,"numpy.zeros((self.n_v,self.n)",CLUSTER_8,CLUSTER_9
self.current_density,numpy.zeros(self.n),CLUSTER_8,CLUSTER_9
new_velocity,numpy.zeros(self.n),CLUSTER_8,CLUSTER_9
self.x,numpy.zeros(N),CLUSTER_8,CLUSTER_9
indicies,"numpy.nonzero(np.logical_and(current_var>=g[0],current_var<g[1])",CLUSTER_8,CLUSTER_9
indicies,"numpy.nonzero(np.logical_and(var>=g[0],var<g[1])",CLUSTER_8,CLUSTER_9
indicies,numpy.nonzero(current_density),CLUSTER_8,CLUSTER_9
new_velocity[indicies],"numpy.divide(np.multiply(prev_density[indicies],prev_velocity[indicies])",CLUSTER_8,CLUSTER_9
integral,"numpy.multiply(self.current_velocity_table[:,i],self.mean_velocity_in_bin)",CLUSTER_8,CLUSTER_9
self.density,"scipy.sparse.vstack(self.density,format='csr')",CLUSTER_8,CLUSTER_9
self.velocity,"scipy.sparse.vstack(self.velocity,format='csr')",CLUSTER_8,CLUSTER_9
self.new_density,"scipy.sparse.vstack(self.new_density,format='csr')",CLUSTER_8,CLUSTER_9
self.n,"math.floor(math.pow(T,0.34)",CLUSTER_8,CLUSTER_9
dataset,pandas.read_csv('Position_Salaries.csv'),CLUSTER_5,CLUSTER_5
X_grid,numpy.arange(min(X),CLUSTER_5,CLUSTER_5
regressor,sklearn.tree.DecisionTreeRegressor(random_state=0),CLUSTER_5,CLUSTER_5
train_imgs,"numpy.asfarray(train_data[:,1:])",CLUSTER_7,CLUSTER_8
test_imgs,"numpy.asfarray(test_data[:,1:])",CLUSTER_7,CLUSTER_8
train_labels,"numpy.asfarray(train_data[:,:1])",CLUSTER_7,CLUSTER_8
test_labels,"numpy.asfarray(test_data[:,:1])",CLUSTER_7,CLUSTER_8
corr_mat,"numpy.corrcoef(x,y)",CLUSTER_7,CLUSTER_8
train_data,"numpy.loadtxt(data_path+""mnist_train.csv"",
delimiter="","")",CLUSTER_7,CLUSTER_8
test_data,"numpy.loadtxt(data_path+""mnist_test.csv"",
delimiter="","")",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(3,4)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(3,5)",CLUSTER_7,CLUSTER_8
iris,"seaborn.load_dataset(""iris"")",CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
iris,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_8
cv_results,"sklearn.model_selection.cross_validate(clf,X,y,cv=3,return_train_score=True)",CLUSTER_7,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(test_imgs,pred,test_labels)",CLUSTER_7,CLUSTER_8
faces,sklearn.datasets.fetch_lfw_people(min_faces_per_person=40),CLUSTER_7,CLUSTER_8
sample_list_1,random.sample(range(100),CLUSTER_10,CLUSTER_4
feature_imp,pandas.DataFrame(model.feature_importances_),CLUSTER_8,CLUSTER_1
data,pandas.read_excel('INX_Future_Inc_Employee_Performance_CDS_Project2_Data_V1.8-Copy.xls'),CLUSTER_8,CLUSTER_1
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=40)",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.24,random_state=0)",CLUSTER_8,CLUSTER_1
enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
apcs,"pandas.read_csv(apc_file,sep="","")",CLUSTER_8,CLUSTER_3
apcs,pandas.read_csv(value),CLUSTER_8,CLUSTER_3
X_test,"numpy.arange(0.0,10,0.01)",CLUSTER_5,CLUSTER_10
X,"numpy.sort(10*rng.rand(80,1)",CLUSTER_5,CLUSTER_10
y,numpy.sin(X),CLUSTER_5,CLUSTER_10
clf_0,sklearn.tree.DecisionTreeRegressor(max_depth=1),CLUSTER_5,CLUSTER_10
clf_1,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_5,CLUSTER_10
clf_2,sklearn.tree.DecisionTreeRegressor(max_depth=3),CLUSTER_5,CLUSTER_10
clf_3,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_5,CLUSTER_10
pred_idx,numpy.argmax(y_hat[idx]),CLUSTER_2,CLUSTER_10
true_idx,numpy.argmax(y_test[idx]),CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,5)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_2,CLUSTER_10
parameters_tmp['Wy'],"numpy.zeros((2,5)",CLUSTER_3,CLUSTER_6
parameters_tmp['by'],"numpy.zeros((2,1)",CLUSTER_3,CLUSTER_6
data,json.load(json_file),CLUSTER_1,CLUSTER_10
res,collections.defaultdict(list),CLUSTER_1,CLUSTER_10
res,collections.defaultdict(list),CLUSTER_1,CLUSTER_10
y_pos,numpy.arange(len(semisortedinfo[[*data][1]]),CLUSTER_1,CLUSTER_10
y_pos,numpy.arange(len(semisortedinfo[p]),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,15)",CLUSTER_1,CLUSTER_10
df,pandas.read_csv('../data/Part01/application_train.csv'),CLUSTER_7,CLUSTER_9
y,"numpy.arange(1,1+len(x)",CLUSTER_7,CLUSTER_9
y,"numpy.arange(1,n+1)",CLUSTER_7,CLUSTER_9
x,numpy.sort(df['AMT_INCOME_TOTAL']),CLUSTER_7,CLUSTER_9
x,numpy.sort(df['REGION_POPULATION_RELATIVE']),CLUSTER_7,CLUSTER_9
x,numpy.sort(data),CLUSTER_7,CLUSTER_9
x_train,"numpy.pad(x_train,((0,0)",CLUSTER_4,CLUSTER_0
x_test,"numpy.pad(x_test,((0,0)",CLUSTER_4,CLUSTER_0
x_val,"numpy.pad(x_val,((0,0)",CLUSTER_4,CLUSTER_0
program_starts,time.time(),CLUSTER_4,CLUSTER_0
now,time.time(),CLUSTER_4,CLUSTER_0
categorical,pandas.get_dummies(data[categorical.columns]),CLUSTER_5,CLUSTER_1
data,"pandas.read_csv('23OCT_23NOV_10.193.123.18_final.csv.csv',header=0,encoding='UTF-16')",CLUSTER_5,CLUSTER_1
ridge_alphas,"numpy.logspace(0,5,100)",CLUSTER_7,CLUSTER_8
l1_ratios,"numpy.linspace(0.01,1.0,50)",CLUSTER_7,CLUSTER_8
merge_base,"pandas.DataFrame(df1,columns=['Country','year'])",CLUSTER_7,CLUSTER_8
merge_base,"pandas.DataFrame(df2,columns=['Country','year'])",CLUSTER_7,CLUSTER_8
df3_indicators,"pandas.DataFrame(df3,columns=['Country','year'])",CLUSTER_7,CLUSTER_8
method_coefs,"pandas.DataFrame({'Variable':X.columns,
'Coefficient':best_regulari.coef_,
'AbsoluteCoefficient':np.abs(best_regulari.coef_)",CLUSTER_7,CLUSTER_8
feature_importance,"pandas.DataFrame({'Feature':X.columns,'Importance':best_model.feature_importances_})",CLUSTER_7,CLUSTER_8
acled,pandas.concat(acled),CLUSTER_7,CLUSTER_8
merge_base,"pandas.merge(merge_base,df1_i,on=['Country','year'],how='left')",CLUSTER_7,CLUSTER_8
merge_base,"pandas.merge(merge_base,df2_i,on=['Country','year'],how='left')",CLUSTER_7,CLUSTER_8
df3_indicators,"pandas.merge(df3_indicators,df3_i,on=['Country','year'],how='left')",CLUSTER_7,CLUSTER_8
data,"pandas.merge(acled_eventtype_total,df2_indicators,on=['Country','year'])",CLUSTER_7,CLUSTER_8
acled_africa,pandas.read_csv('Desktop/ECON628-01-RPanlilio/ACLED-Africa.csv'),CLUSTER_7,CLUSTER_8
acled_asia,pandas.read_csv('Desktop/ECON628-01-RPanlilio/ACLED-Asia.csv'),CLUSTER_7,CLUSTER_8
df1,pandas.read_csv('Desktop/ECON628-01-RPanlilio/poverryandequity.csv'),CLUSTER_7,CLUSTER_8
df2,pandas.read_csv('Desktop/ECON628-01-RPanlilio/indexofeconomicfreedom.csv'),CLUSTER_7,CLUSTER_8
df3,pandas.read_csv('Desktop/ECON628-01-RPanlilio/resourcestatistics.csv'),CLUSTER_7,CLUSTER_8
acled['date'],pandas.to_datetime(acled['EventDate']),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(10,6)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,10)",CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x=""Country"",y=""TotalEvents"",data=acled_country)",CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x=""year"",y=""TotalEvents"",data=acled_year)",CLUSTER_7,CLUSTER_8
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
ridge,sklearn.linear_model.Ridge(alpha=optimal_ridge.alpha_),CLUSTER_7,CLUSTER_8
lasso,sklearn.linear_model.Lasso(alpha=optimal_lasso.alpha_),CLUSTER_7,CLUSTER_8
enet,"sklearn.linear_model.ElasticNet(alpha=optimal_enet.alpha_,l1_ratio=optimal_enet.l1_ratio_)",CLUSTER_7,CLUSTER_8
optimal_ridge,"sklearn.linear_model.RidgeCV(alphas=ridge_alphas,cv=10)",CLUSTER_7,CLUSTER_8
optimal_lasso,"sklearn.linear_model.LassoCV(n_alphas=300,cv=10,verbose=1)",CLUSTER_7,CLUSTER_8
optimal_enet,"sklearn.linear_model.ElasticNetCV(l1_ratio=l1_ratios,n_alphas=300,cv=5,verbose=1)",CLUSTER_7,CLUSTER_8
dtr,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_8
forest,sklearn.ensemble.RandomForestRegressor(),CLUSTER_7,CLUSTER_8
data,sklearn.datasets.load_files(path),CLUSTER_4,CLUSTER_0
dog_files,numpy.array(data['filenames']),CLUSTER_4,CLUSTER_0
human_files,"numpy.array(glob(""/data/lfw/*/*"")",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(dog_breed_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(VGG16_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(Inception_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
bottleneck_features,numpy.load('/data/bottleneck_features/DogVGG16Data.npz'),CLUSTER_4,CLUSTER_0
bottleneck_features,numpy.load('/data/bottleneck_features/DogInceptionV3Data.npz'),CLUSTER_4,CLUSTER_0
img,matplotlib.pyplot.imread(img_path),CLUSTER_4,CLUSTER_0
tp,numpy.cumsum(pca.explained_variance_ratio_),CLUSTER_7,CLUSTER_5
df,pandas.DataFrame(scale(df),CLUSTER_7,CLUSTER_5
corr_cell,"pandas.DataFrame(reduced_data_pca,index=df.index)",CLUSTER_7,CLUSTER_5
_,matplotlib.pyplot.bar(range(len(lpa),CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(20,7)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,8)",CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=5),CLUSTER_7,CLUSTER_5
isomap,sklearn.manifold.Isomap(n_neighbors=10),CLUSTER_7,CLUSTER_5
tsne,sklearn.manifold.TSNE(n_components=2),CLUSTER_7,CLUSTER_5
_,"seaborn.clustermap(corr_feature,linewidths=0.1,vmax=1.0,square=True,linecolor='white',annot=False,figsize=(6,6)",CLUSTER_7,CLUSTER_5
g,"seaborn.clustermap(corr_cell,linewidths=0.01,vmax=1.0,linecolor='white',
row_colors=row_colors,col_colors=row_colors,
cmap=""vlag"",
annot=False,figsize=(14,14)",CLUSTER_7,CLUSTER_5
g,"seaborn.clustermap(corr_cell,linewidths=0.01,vmax=1.0,linecolor='white',
row_colors=row_colors,col_colors=row_colors,cmap=""vlag"",
metric='correlation',
annot=False,figsize=(12,12)",CLUSTER_7,CLUSTER_5
network_pal,seaborn.husl_palette(len(u_celltypes),CLUSTER_7,CLUSTER_5
mask,"numpy.where(img==classes_dict[img_label_str],255,0)",CLUSTER_1,CLUSTER_10
mask,"numpy.where(label_array[:,:,layer]==img_label,255,0)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=4,figsize=(50,30)",CLUSTER_1,CLUSTER_10
errors_one,"pandas.Series([5,10,5,10,5,10,5,10,5,10,5,10,5,10,5,10,5,10])",CLUSTER_8,CLUSTER_3
errors_two,"pandas.Series([5,10,5,10,5,10,5,10,5,10,5,10,5,10,5,10,5,1000])",CLUSTER_8,CLUSTER_3
dc_listings,"pandas.read_csv(""dc_airbnb.csv"")",CLUSTER_8,CLUSTER_3
mae_one,numpy.mean(errors_one),CLUSTER_8,CLUSTER_3
mae_two,numpy.mean(errors_two),CLUSTER_8,CLUSTER_3
mae,numpy.absolute(test_df['predicted_price']-test_df['price']),CLUSTER_8,CLUSTER_3
rmse,numpy.sqrt(mse),CLUSTER_8,CLUSTER_3
rmse_one,numpy.sqrt(np.square(errors_one),CLUSTER_8,CLUSTER_3
rmse_two,numpy.sqrt(np.square(errors_two),CLUSTER_8,CLUSTER_3
mse,numpy.square(test_df['predicted_price']-test_df['price']),CLUSTER_8,CLUSTER_3
test_df['squared_error'],numpy.square(test_df['predicted_price']-test_df['price']),CLUSTER_8,CLUSTER_3
r,"requests.delete(""http://httpbin.org/delete"")",CLUSTER_10,CLUSTER_4
r,"requests.get(""http://httpbin.org/get"")",CLUSTER_10,CLUSTER_4
r,"requests.get(""http://httpbin.org/get"",params=payload)",CLUSTER_10,CLUSTER_4
r,requests.get('https://github.com/timeline.json'),CLUSTER_10,CLUSTER_4
r,requests.get('http://httpbin.org/get'),CLUSTER_10,CLUSTER_4
r,"requests.head(""http://httpbin.org/get"")",CLUSTER_10,CLUSTER_4
r,"requests.options(""http://httpbin.org/get"")",CLUSTER_10,CLUSTER_4
r,"requests.post('http://httpbin.org/post',data={'key':'value'})",CLUSTER_10,CLUSTER_4
r,"requests.put(""http://httpbin.org/put"")",CLUSTER_10,CLUSTER_4
df,"pandas.DataFrame(X,index=y)",CLUSTER_5,CLUSTER_9
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_9
p,numpy.array(p),CLUSTER_11,CLUSTER_11
q,numpy.array(q),CLUSTER_11,CLUSTER_11
p,numpy.array(p),CLUSTER_11,CLUSTER_11
q,numpy.array(q),CLUSTER_11,CLUSTER_11
fftDataE,numpy.array([]),CLUSTER_11,CLUSTER_11
fftDataD,numpy.array([]),CLUSTER_11,CLUSTER_11
DistributePowerDataE,numpy.array([]),CLUSTER_11,CLUSTER_11
DistributePowerDataD,numpy.array([]),CLUSTER_11,CLUSTER_11
ArrayKLD,numpy.array([]),CLUSTER_11,CLUSTER_11
PowerDataE,numpy.imag(fftDataE),CLUSTER_11,CLUSTER_11
PowerDataD,numpy.imag(fftDataD),CLUSTER_11,CLUSTER_11
fftDataE,"numpy.append(fftDataE,fftpack.fft(window[i])",CLUSTER_11,CLUSTER_11
fftDataD,"numpy.append(fftDataD,fftpack.fft(reconstructData[i])",CLUSTER_11,CLUSTER_11
DistributePowerDataE,"numpy.append(DistributePowerDataE,PowerDataE[i]/(np.sum(PowerDataE[i])",CLUSTER_11,CLUSTER_11
DistributePowerDataD,"numpy.append(DistributePowerDataD,PowerDataD[i]/(np.sum(PowerDataD[i])",CLUSTER_11,CLUSTER_11
ArrayKLD,"numpy.append(ArrayKLD,kld(DistributePowerDataE[i],DistributePowerDataD[i])",CLUSTER_11,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(30,15)",CLUSTER_11,CLUSTER_11
df.review_count.hist(bins,"numpy.arange(0,40000,400)",CLUSTER_7,CLUSTER_9
a,"numpy.array([1,2,3,4,5])",CLUSTER_7,CLUSTER_9
b,"numpy.array([1,2,3,4,5])",CLUSTER_7,CLUSTER_9
df,"pandas.read_csv(""all.csv"",header=None,
names=[""rating"",'review_count','isbn','booktype','author_url','year','genre_urls','dir','rating_count','name'],
)",CLUSTER_7,CLUSTER_9
a,numpy.arange(5),CLUSTER_3,CLUSTER_6
x,"numpy.arange(2,101)",CLUSTER_3,CLUSTER_6
x,"numpy.arange(10,22)",CLUSTER_3,CLUSTER_6
x,"numpy.arange(0,32)",CLUSTER_3,CLUSTER_6
x,numpy.arange(4),CLUSTER_3,CLUSTER_6
x1,"numpy.arange(1,7)",CLUSTER_3,CLUSTER_6
x2,"numpy.arange(1,7)",CLUSTER_3,CLUSTER_6
x,"numpy.arange(1,7)",CLUSTER_3,CLUSTER_6
x,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
x,"numpy.array([1,2,3,4,5,6,7,8,9])",CLUSTER_3,CLUSTER_6
arr,"numpy.array([[0.,1.,2.,3.],
[4.,5.,6.,7.],
[8.,9.,10.,11.],
[12.,13.,14.,15.]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([[5,10,15],[20,25,30],[35,40,45]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([[1,2,3],
[4,5,6]])",CLUSTER_3,CLUSTER_6
y,"numpy.array([[7,8,9],
[10,11,12]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([3,6,9,25,10,8])",CLUSTER_3,CLUSTER_6
a,"numpy.array([0.0,10.0,20.0,30.0])",CLUSTER_3,CLUSTER_6
b,"numpy.array([1.0,2.0,3.0])",CLUSTER_3,CLUSTER_6
res,numpy.asarray(x),CLUSTER_3,CLUSTER_6
x,"numpy.zeros([5,5,5],dtype=int)",CLUSTER_3,CLUSTER_6
a,"numpy.zeros(10,dtype=int)",CLUSTER_3,CLUSTER_6
x,"numpy.zeros((4,4)",CLUSTER_3,CLUSTER_6
res,"numpy.zeros((6,6)",CLUSTER_3,CLUSTER_6
x,"numpy.ones([3,2],dtype=float)",CLUSTER_3,CLUSTER_6
y,numpy.ones(5),CLUSTER_3,CLUSTER_6
x,"numpy.full([2,5],6)",CLUSTER_3,CLUSTER_6
b,"numpy.full([10],5)",CLUSTER_3,CLUSTER_6
mea,numpy.mean(L),CLUSTER_3,CLUSTER_6
b,"numpy.reshape(b,[3,1])",CLUSTER_3,CLUSTER_6
std,numpy.std(L),CLUSTER_3,CLUSTER_6
var,numpy.var(L),CLUSTER_3,CLUSTER_6
"x1,x2,x3","numpy.split(x,[4,6])",CLUSTER_3,CLUSTER_6
"arr1,arr2","numpy.split(arr,2,axis=1)",CLUSTER_3,CLUSTER_6
my_new_str,"re.sub(""(\\W|+)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(r'\s+','',my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(r""\b\d+\b"","""",my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(""\d+"","""",my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(r""[^a-zA-Z0-9]+"",'',my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(r'\b\w{1,2}\b','',my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,re.sub(r'\b('+r'|'.join(stopwords.words('english'),CLUSTER_10,CLUSTER_4
my_new_str,"re.sub('+','',my_new_str)",CLUSTER_10,CLUSTER_4
files,"os.listdir(""X:/xxxx/xxxx/xxxxx/"")",CLUSTER_10,CLUSTER_4
mask,numpy.zeros_like(x),CLUSTER_1,CLUSTER_10
mask,numpy.zeros_like(x),CLUSTER_1,CLUSTER_10
x,numpy.array([]),CLUSTER_0,CLUSTER_1
y,numpy.array([]),CLUSTER_0,CLUSTER_1
preds,model.predict(x=numpy.array([word_idxs]),CLUSTER_0,CLUSTER_1
startind,numpy.argmax(prob),CLUSTER_0,CLUSTER_1
idx,numpy.argmax(prob),CLUSTER_0,CLUSTER_1
preds[0],"numpy.divide(preds[0],1*sum(preds[0])",CLUSTER_0,CLUSTER_1
speech_text,"re.sub(r'SPEECH\d+','',speech_text)",CLUSTER_0,CLUSTER_1
speech_text,"re.sub(r'\d+/\d+/\d+','',speech_text)",CLUSTER_0,CLUSTER_1
speech_text,"re.sub(r"";|-|\.\.+|\?|'|–|``|’|,|\$|"",'',speech_text)",CLUSTER_0,CLUSTER_1
speech_text,"re.sub(""\.\S+"",""."",speech_text)",CLUSTER_0,CLUSTER_1
ngramdict,collections.Counter([]),CLUSTER_0,CLUSTER_1
ngramdict+,collections.Counter(unigram),CLUSTER_0,CLUSTER_1
"ngramdict,n1gramdict",collections.Counter([]),CLUSTER_0,CLUSTER_1
ngramdict+,collections.Counter(ngram),CLUSTER_0,CLUSTER_1
n1gramdict+,collections.Counter(n1gram),CLUSTER_0,CLUSTER_1
"train_data,test_data","sklearn.model_selection.train_test_split(tokenized_sent_list,test_size=0.20,random_state=100)",CLUSTER_0,CLUSTER_1
p+,math.log(mle_dict[nwords]),CLUSTER_0,CLUSTER_1
prob+,math.log(prob1),CLUSTER_0,CLUSTER_1
enc,sklearn.preprocessing.OneHotEncoder(handle_unknown='ignore'),CLUSTER_0,CLUSTER_1
X_train_cont_scaled,"pandas.DataFrame(X_train_cont_scaled,columns=X_train_cont.columns)",CLUSTER_7,CLUSTER_5
X_test_cont_scaled,"pandas.DataFrame(X_test_cont_scaled,columns=X_test_cont.columns)",CLUSTER_7,CLUSTER_5
df_base,pandas.DataFrame({'ID':np.repeat(dow_id_all.ID.unique(),CLUSTER_7,CLUSTER_5
df,"pandas.concat([df,dow],axis=1)",CLUSTER_7,CLUSTER_5
X_train_scaled,"pandas.concat([X_train_dummy,X_train_cont_scaled],axis=1)",CLUSTER_7,CLUSTER_5
X_test_scaled,"pandas.concat([X_test_dummy,X_test_cont_scaled],axis=1)",CLUSTER_7,CLUSTER_5
dow,pandas.get_dummies(df['Dayoftheweek']),CLUSTER_7,CLUSTER_5
df_merge,"pandas.merge(df_base,dow_id_all,how='left',on=['ID','Day_of_the_week'])",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv('../../data/01_raw/Absenteeism_at_work.csv',delimiter=';')",CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
selector,"sklearn.feature_selection.RFE(linreg,n_features_to_select=15)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
lasso,sklearn.linear_model.LassoCV(eps=0.001),CLUSTER_7,CLUSTER_5
df,pandas.DataFrame({'A':'foobarfoobarfoobarfoofoo'.split(),CLUSTER_8,CLUSTER_3
b_is_two_dataframe,pandas.DataFrame(df.groupby('B'),CLUSTER_8,CLUSTER_3
b_is_two_dataframe_2,pandas.DataFrame(df.groupby('B'),CLUSTER_8,CLUSTER_3
s1,pandas.Series(np.random.randn(5),CLUSTER_8,CLUSTER_3
s2,pandas.Series(np.random.randn(5),CLUSTER_8,CLUSTER_3
data,numpy.array(data),CLUSTER_12,CLUSTER_6
predicted_class_indices,"numpy.argmax(pred,axis=1)",CLUSTER_4,CLUSTER_11
data,"pandas.read_excel('fbi_ny_2013.xls',sheet_name=0,header=1,skiprows=3,skip_footer=3,
index_col=0,thousands=None)",CLUSTER_7,CLUSTER_8
df,numpy.cbrt(df),CLUSTER_7,CLUSTER_8
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
sklearn_pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_7,CLUSTER_8
suppliers,"pandas.read_csv('./data/northwind-mongo-master/suppliers.csv',usecols=['SupplierID','CompanyName','City'])",CLUSTER_8,CLUSTER_3
products,"pandas.read_csv('./data/northwind-mongo-master/products.csv',usecols=['ProductID','ProductName','SupplierID'])",CLUSTER_8,CLUSTER_3
df,pandas.read_csv('fraud_data.csv'),CLUSTER_5,CLUSTER_1
df,pandas.read_csv('fraud_data.csv'),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_5,CLUSTER_1
dummy_majority,sklearn.dummy.DummyClassifier(strategy='most_frequent'),CLUSTER_5,CLUSTER_1
recall_score,"sklearn.metrics.recall_score(y_test,dummy_majority.predict(X_test)",CLUSTER_5,CLUSTER_1
recall_score,"sklearn.metrics.recall_score(y_test,svm_predicted)",CLUSTER_5,CLUSTER_1
precision_score,"sklearn.metrics.precision_score(y_test,svm_predicted)",CLUSTER_5,CLUSTER_1
svm,sklearn.svm.SVC(),CLUSTER_5,CLUSTER_1
svm,"sklearn.svm.SVC(C=1e9,gamma=1e-07)",CLUSTER_5,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
"precision,recall,thresholds","sklearn.metrics.precision_recall_curve(y_test,y_scores_lr)",CLUSTER_5,CLUSTER_1
"fpr_lr,tpr_lr,_","sklearn.metrics.roc_curve(y_test,y_scores_lr)",CLUSTER_5,CLUSTER_1
roc_auc_lr,"sklearn.metrics.auc(fpr_lr,tpr_lr)",CLUSTER_5,CLUSTER_1
grid_lr_rec,"sklearn.model_selection.GridSearchCV(lr,param_grid=grid_values,scoring='recall')",CLUSTER_5,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,5)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_10
data,json.load(open(fname),CLUSTER_3,CLUSTER_6
result,json.load(open(fname),CLUSTER_3,CLUSTER_6
data,"json.load(open('./bounds/{}/pac-bayes-{}-{}.json'.format(model,seed,algorithm)",CLUSTER_3,CLUSTER_6
terms_f,"json.load(open('./bounds/{}/pac-bayes-{}-{}-det.json'.format(model,seed,algorithm)",CLUSTER_3,CLUSTER_6
data,"json.load(open('./bounds/{}/pac-bayes-{}.json'.format(model,seed)",CLUSTER_3,CLUSTER_6
data_f,"json.load(open('./bounds/{}/pac-bayes-{}-det.json'.format(model,seed)",CLUSTER_3,CLUSTER_6
lowest_val_loss,numpy.finfo(np.float(0.),CLUSTER_3,CLUSTER_6
best_bound,numpy.finfo(np.float(0.),CLUSTER_3,CLUSTER_6
df,"pandas.DataFrame(open_file,index=[file])",CLUSTER_11,CLUSTER_11
complete_birds_df,pandas.concat(df_list),CLUSTER_11,CLUSTER_11
complete_birds_df.index,pandas.to_datetime(complete_birds_df.index),CLUSTER_11,CLUSTER_11
complete_birds_df.index,pandas.to_datetime(complete_birds_df.index),CLUSTER_11,CLUSTER_11
text,"re.sub('\[.*?\]','',text)",CLUSTER_11,CLUSTER_11
text,"re.sub('\\\\n','',text)",CLUSTER_11,CLUSTER_11
text,"re.sub('\\\\[\w\d]{3}',"""",text)",CLUSTER_11,CLUSTER_11
text,"re.sub('\sand\s|,and\s','',text)",CLUSTER_11,CLUSTER_11
text,"re.sub('BrownPelican','BrownPelican',text)",CLUSTER_11,CLUSTER_11
text,"re.sub('GrayFlycatcher','GrayFlycatcher(1)",CLUSTER_11,CLUSTER_11
text,"re.sub('WesternWoodPewee','WesternWoodPewee(1)",CLUSTER_11,CLUSTER_11
text,"re.sub('Yellow-headedBlackbirdWesternMeadowlark','WesternMeadowlark',text)",CLUSTER_11,CLUSTER_11
file,"re.sub('.docx','',file)",CLUSTER_11,CLUSTER_11
l,"re.findall('\d+',temp)",CLUSTER_11,CLUSTER_11
reg,re.compile('[\.Ss\s][p\s]eciesseen'),CLUSTER_11,CLUSTER_11
match,"re.search(pattern,text)",CLUSTER_10,CLUSTER_4
X,"numpy.array([[-1,-1],[-2,-1],[-3,-2],[1,1],[2,1],[3,2]])",CLUSTER_5,CLUSTER_6
Y,"numpy.array([1,1,1,2,2,2])",CLUSTER_5,CLUSTER_6
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_6
clf_pf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_6
df,pandas.read_csv(ingredient_data_fp),CLUSTER_8,CLUSTER_4
positive_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
negative_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
total_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
pos_neg_ratios,collections.Counter(),CLUSTER_12,CLUSTER_6
review_counter,collections.Counter(),CLUSTER_12,CLUSTER_6
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
center,"numpy.array([center_x,center_y])",CLUSTER_4,CLUSTER_11
img_arr,numpy.array(img_arr),CLUSTER_4,CLUSTER_11
else:y,numpy.zeros(ft_data[name].shape[0]),CLUSTER_4,CLUSTER_11
par,"numpy.concatenate(([num+1,i],fit_gaussian(data)",CLUSTER_4,CLUSTER_11
inp_data,"pd.DataFrame(columns=numpy.concatenate((['target'],ft_data[cl_names[0]].columns.values)",CLUSTER_4,CLUSTER_11
par,"numpy.concatenate(([img_num+1,polar],fit_gaussian(data)",CLUSTER_4,CLUSTER_11
"Y,X",numpy.indices(data.shape),CLUSTER_4,CLUSTER_11
y,numpy.ones(ft_data[name].shape[0]),CLUSTER_4,CLUSTER_11
over,numpy.ceil((float(numb),CLUSTER_4,CLUSTER_11
x,numpy.stack(np.meshgrid(np.arange(data.shape[0]),CLUSTER_4,CLUSTER_11
X_tr,"numpy.vstack((X_tr,tmp_X_tr)",CLUSTER_4,CLUSTER_11
X_tt,"numpy.vstack((X_tt,tmp_X_tt)",CLUSTER_4,CLUSTER_11
y_tr,"numpy.append(y_tr,tmp_y_tr)",CLUSTER_4,CLUSTER_11
y_tt,"numpy.append(y_tt,tmp_y_tt)",CLUSTER_4,CLUSTER_11
col_slice,"numpy.append(flat_slice.columns.values,[opa+str(int(j)",CLUSTER_4,CLUSTER_11
"a,b","numpy.linalg.eigvalsh([[s[0],s[2]],[s[2],s[1]]])",CLUSTER_4,CLUSTER_11
"a,b","numpy.linalg.eigvalsh([[s[0],s[2]],[s[2],s[1]]])",CLUSTER_4,CLUSTER_11
"p,success","scipy.optimize.leastsq(errorfunction,para)",CLUSTER_4,CLUSTER_11
img_names,os.listdir(dir_name),CLUSTER_4,CLUSTER_11
params,"pandas.DataFrame(columns=['img_num','polar','height','amplitude','center_x','center_y','sig_x','sig_y','sig_xy'])",CLUSTER_4,CLUSTER_11
ellip_par,"pandas.DataFrame(data={'minor_ax':a_ar,'eps':eps_ar,'area':area_ar},index=idx)",CLUSTER_4,CLUSTER_11
inp_data,"pandas.DataFrame(columns=np.concatenate((['target'],ft_data[cl_names[0]].columns.values)",CLUSTER_4,CLUSTER_11
targ,pandas.DataFrame(data={'target':np.ones(len(idx),CLUSTER_4,CLUSTER_11
else:targ,pandas.DataFrame(data={'target':np.zeros(len(idx),CLUSTER_4,CLUSTER_11
params,"pandas.DataFrame(columns=['img_num','polar','height','amplitude','center_x','center_y','sig_x','sig_y','sig_xy'])",CLUSTER_4,CLUSTER_11
params,"pandas.DataFrame(columns=['img_num','polar','height','amplitude','center_x','center_y','sig_x','sig_y','sig_xy'])",CLUSTER_4,CLUSTER_11
y_tr,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
y_tt,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
X_tr,pandas.DataFrame(columns=ft_data[cl_names[0]].columns),CLUSTER_4,CLUSTER_11
X_tt,pandas.DataFrame(columns=ft_data[cl_names[0]].columns),CLUSTER_4,CLUSTER_11
pol_par,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
par_slice,"pandas.DataFrame(par_slice.drop(['img_num','polar'],axis=1)",CLUSTER_4,CLUSTER_11
flat_slice,pandas.DataFrame(index=[i]),CLUSTER_4,CLUSTER_11
flat_slice,"pandas.DataFrame(np.append(flat_slice.values,par_slice.loc[j].values)",CLUSTER_4,CLUSTER_11
ellip_par,pandas.DataFrame(data={'min_ax'+str(i),CLUSTER_4,CLUSTER_11
params,"pandas.concat([img_num,params,cov_xy],axis=1,join='inner')",CLUSTER_4,CLUSTER_11
feat,"pandas.concat([feat,ellip_par],axis=1)",CLUSTER_4,CLUSTER_11
app_data,"pandas.concat([targ,ft_data[name]],axis=1)",CLUSTER_4,CLUSTER_11
pol_par,"pandas.concat([pol_par,flat_slice])",CLUSTER_4,CLUSTER_11
feat,"pandas.concat([feat,ellip_par],axis=1)",CLUSTER_4,CLUSTER_11
par,"pandas.read_csv(os.path.join(dir_name,img_name)",CLUSTER_4,CLUSTER_11
else:dat_params[name],pandas.read_csv('C:/Artem/NEWS/params/'+str(numb),CLUSTER_4,CLUSTER_11
imgs,"pandas.read_csv('D:/NEWSdm/crops/dust_fog/0_cluster_1.csv',header=None)",CLUSTER_4,CLUSTER_11
"f,axes","matplotlib.pyplot.subplots(2,4,figsize=(24,12)",CLUSTER_4,CLUSTER_11
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,8)",CLUSTER_4,CLUSTER_11
"X_tr,X_tt,y_tr,y_tt","sklearn.model_selection.train_test_split(X,y,test_size=test_size)",CLUSTER_4,CLUSTER_11
"tmp_X_tr,tmp_X_tt,tmp_y_tr,tmp_y_tt","sklearn.model_selection.train_test_split(X,y,test_size=test_size,shuffle=False)",CLUSTER_4,CLUSTER_11
train['CategoricalAge'],"pandas.cut(train['Age'],5)",CLUSTER_7,CLUSTER_8
train['CategoricalFare'],"pandas.qcut(train['Fare'],4)",CLUSTER_7,CLUSTER_8
train,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
test,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_8
oof_train,"numpy.zeros((ntrain,)",CLUSTER_7,CLUSTER_8
oof_test,"numpy.zeros((ntest,)",CLUSTER_7,CLUSTER_8
oof_test_skf,"numpy.empty((NFOLDS,ntest)",CLUSTER_7,CLUSTER_8
title_search,re.search('([A-Za-z]+),CLUSTER_7,CLUSTER_8
g,"seaborn.pairplot(train[[u'Survived',u'Pclass',u'Sex',u'Age',u'Parch',u'Fare',u'Embarked',
u'Family_Size',u'Title']],hue='Survived',palette='seismic',size=1.2,diag_kind='kde',diag_kws=dict(shade=True)",CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_splits=NFOLDS,random_state=SEED)",CLUSTER_7,CLUSTER_8
band_info,"pandas.DataFrame([
(1,""Aerosol"",""0.43-0.45"",0.440,""30"",""Coastalaerosol"")",CLUSTER_8,CLUSTER_3
fig,matplotlib.pyplot.figure(figsize=single_fig_size),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(figsize=single_fig_size),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(figsize=single_fig_size),CLUSTER_1,CLUSTER_10
target,"numpy.mean(out_normed[start:end],axis=0)",CLUSTER_1,CLUSTER_10
line_train,"matplotlib.pyplot.plot(err_train,'b',err_val,'r')",CLUSTER_5,CLUSTER_10
xlab,matplotlib.pyplot.xlabel('Iterations'),CLUSTER_5,CLUSTER_10
ylab,matplotlib.pyplot.ylabel('Error'),CLUSTER_5,CLUSTER_10
X,sklearn.preprocessing.normalize(X),CLUSTER_5,CLUSTER_10
data,"numpy.loadtxt(f,delimiter=';')",CLUSTER_5,CLUSTER_10
data,"numpy.loadtxt(f,delimiter=';')",CLUSTER_5,CLUSTER_10
R,"numpy.array([[Z[i],-Z[i]],[1,1]])",CLUSTER_1,CLUSTER_10
Lp,"numpy.array([[0,0],[0,c[i]]])",CLUSTER_1,CLUSTER_10
R,"numpy.array([[Z[i],-Z[i]],[1,1]])",CLUSTER_1,CLUSTER_10
Lm,"numpy.array([[-c[i],0],[0,0]])",CLUSTER_1,CLUSTER_10
xg,numpy.zeros((N+1),CLUSTER_1,CLUSTER_10
M,"numpy.zeros((N+1,N+1)",CLUSTER_1,CLUSTER_10
K,"numpy.zeros((N+1,N+1)",CLUSTER_1,CLUSTER_10
Ap,"numpy.zeros((ne,2,2)",CLUSTER_1,CLUSTER_10
Am,"numpy.zeros((ne,2,2)",CLUSTER_1,CLUSTER_10
Z,numpy.zeros(ne),CLUSTER_1,CLUSTER_10
rho,numpy.zeros(ne),CLUSTER_1,CLUSTER_10
mu,numpy.zeros(ne),CLUSTER_1,CLUSTER_10
Q,"numpy.zeros((ne,N+1,2)",CLUSTER_1,CLUSTER_10
Qnew,"numpy.zeros((ne,N+1,2)",CLUSTER_1,CLUSTER_10
k1,"numpy.zeros((ne,N+1,2)",CLUSTER_1,CLUSTER_10
k2,"numpy.zeros((ne,N+1,2)",CLUSTER_1,CLUSTER_10
Qs,numpy.zeros(xg.size),CLUSTER_1,CLUSTER_10
Qv,numpy.zeros(xg.size),CLUSTER_1,CLUSTER_10
Minv,numpy.identity(N+1),CLUSTER_1,CLUSTER_10
x,"numpy.reshape(xg,(N+1,ne)",CLUSTER_1,CLUSTER_10
"Q[:,:,0]",numpy.exp(-1/sig**2*((x-x0),CLUSTER_1,CLUSTER_10
c,numpy.sqrt(mu/rho),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(10,6)",CLUSTER_1,CLUSTER_10
best_iter,numpy.argmin(cv_data['test-Logloss-mean']),CLUSTER_8,CLUSTER_3
"fifa_data[""overall_cat""]","pandas.cut(fifa_data[""Overall""],bins=[0.,50,60,70,80,90,100],
labels=[1,2,3,4,5,6])",CLUSTER_5,CLUSTER_1
fifa_data,"pandas.read_csv(""data.csv"")",CLUSTER_5,CLUSTER_1
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_1
num_pipeline,"sklearn.pipeline.Pipeline([
('imputer',SimpleImputer(strategy=""median"")",CLUSTER_5,CLUSTER_1
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_5,CLUSTER_1
tree_rmse,numpy.sqrt(tree_mse),CLUSTER_5,CLUSTER_1
tree_rmse_scores,numpy.sqrt(-scores),CLUSTER_5,CLUSTER_1
lin_rmse_scores,numpy.sqrt(-lin_scores),CLUSTER_5,CLUSTER_1
forest_rmse_scores,numpy.sqrt(-forest_scores),CLUSTER_5,CLUSTER_1
final_rmse,numpy.sqrt(final_mse),CLUSTER_5,CLUSTER_1
lin_mse,"sklearn.metrics.mean_squared_error(fifa_labels,fifa_predictions)",CLUSTER_5,CLUSTER_1
tree_mse,"sklearn.metrics.mean_squared_error(fifa_labels,fifa_predictions)",CLUSTER_5,CLUSTER_1
final_mse,"sklearn.metrics.mean_squared_error(y_test,final_predictions)",CLUSTER_5,CLUSTER_1
tree_reg,sklearn.tree.DecisionTreeRegressor(),CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(tree_reg,fifa_data_final,fifa_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_5,CLUSTER_1
lin_scores,"sklearn.model_selection.cross_val_score(lin_reg,fifa_data_final,fifa_labels,scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_5,CLUSTER_1
forest_scores,"sklearn.model_selection.cross_val_score(forest_reg,fifa_data_final,fifa_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_5,CLUSTER_1
forest_reg,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,random_state=42)",CLUSTER_5,CLUSTER_1
forest_reg,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_5,CLUSTER_1
grid_search,"sklearn.model_selection.GridSearchCV(forest_reg,param_grid,cv=5,
scoring='neg_mean_squared_error',
return_train_score=True)",CLUSTER_5,CLUSTER_1
scale,scipy.stats.sem(squared_errors),CLUSTER_5,CLUSTER_1
data_out,"pandas.DataFrame(list(zip(list_lr,list_epochs,list_batch,
list_neurons_dense,list_activation,list_optimizer,
list_loss,list_acc,list_prec,list_rec,
list_f1,list_time)",CLUSTER_8,CLUSTER_3
data_out,"pandas.DataFrame(list(zip(list_lr,list_epochs,list_batch,
list_neurons_dense,list_activation,list_optimizer,
list_loss,list_acc,list_prec,list_rec,
list_f1,list_time)",CLUSTER_8,CLUSTER_3
activation,random.choice(activation_list),CLUSTER_8,CLUSTER_3
optimizer,random.choice(optimizer_list),CLUSTER_8,CLUSTER_3
epochs,"random.randrange(1,128)",CLUSTER_8,CLUSTER_3
batch,"random.randrange(1,512)",CLUSTER_8,CLUSTER_3
neurons_dense,"random.randrange(1,1200)",CLUSTER_8,CLUSTER_3
dx,"pandas.DataFrame({'chisquare':chi2_stats,'pvalues':chi2_pvalues})",CLUSTER_1,CLUSTER_9
dataset,"pandas.read_csv(url,names=names)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.20)",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_5,CLUSTER_5
fit,"numpy.polyfit(x,y,deg=1)",CLUSTER_1,CLUSTER_3
new_df,"pandas.DataFrame({'1980s':df_80s,'1990s':df_90s,'2000s':df_00s})",CLUSTER_1,CLUSTER_3
df_tot,pandas.DataFrame(df_can[years].sum(axis=0),CLUSTER_1,CLUSTER_3
df_total,pandas.DataFrame(df_countries.sum(axis=1),CLUSTER_1,CLUSTER_3
df_can,"pandas.read_excel('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx',
sheet_name='CanadabyCitizenship',
skiprows=range(20)",CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
df,"pandas.read_excel('../data/OnlineRetail.xlsx',sheet_name='OnlineRetail')",CLUSTER_5,CLUSTER_5
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_5,CLUSTER_5
kmeans,sklearn.cluster.KMeans(n_clusters=n_cluster),CLUSTER_5,CLUSTER_5
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_5,CLUSTER_5
silhouette_avg,"sklearn.metrics.silhouette_score(
normalized_df[['TotalSales','OrderCount','AvgOrderValue']],
kmeans.labels_
)",CLUSTER_5,CLUSTER_5
elexon,"pandas.read_csv('~/git/forecast/projects/elexon/data/clean.csv',index_col=0,parse_dates=True)",CLUSTER_8,CLUSTER_4
alldata_x,numpy.array(alldata_x),CLUSTER_4,CLUSTER_0
alldata_y,numpy.array(alldata_y),CLUSTER_4,CLUSTER_0
combined,"numpy.array([gen_imgs[0],gen_imgs[1],gen_imgs[2],gen_imgs[3],gen_imgs[4],gen_imgs[5],gen_imgs[6],gen_imgs[7],gen_imgs[8],gen_imgs[9]])",CLUSTER_4,CLUSTER_0
combined,"numpy.array([y_train[0],y_train[1],y_train[2],y_train[3],y_train[4],y_train[5],y_train[6],y_train[7],y_train[8],y_train[9]])",CLUSTER_4,CLUSTER_0
combined,"numpy.array([X_train[0],X_train[1],X_train[2],X_train[3],X_train[4],X_train[5],X_train[6],X_train[7],X_train[8],X_train[9]])",CLUSTER_4,CLUSTER_0
combined,"numpy.hstack(combined.reshape(10,384,384,3)",CLUSTER_4,CLUSTER_0
combined,"numpy.hstack(combined.reshape(10,384,384,3)",CLUSTER_4,CLUSTER_0
combined,"numpy.hstack(combined.reshape(10,384,384,3)",CLUSTER_4,CLUSTER_0
tile_sizes,"numpy.loadtxt(path+'tile_sizes.txt',dtype='int')",CLUSTER_4,CLUSTER_0
frame,numpy.load(frame),CLUSTER_4,CLUSTER_0
tile_index,random.choice(images_sampled[i]),CLUSTER_4,CLUSTER_0
index_list,random.sample(images_sampled.keys(),CLUSTER_4,CLUSTER_0
mse,numpy.mean((img1-img2),CLUSTER_4,CLUSTER_0
current_struct_time,time.gmtime(current_time),CLUSTER_10,CLUSTER_12
current_time,time.time(),CLUSTER_10,CLUSTER_12
nye_2017,"datetime.datetime(year=2017,month=12,day=31,hour=12,minute=59,second=59)",CLUSTER_10,CLUSTER_12
sabbatical,"datetime.datetime(year=2017,month=9,day=1)",CLUSTER_10,CLUSTER_12
march3,"datetime.datetime(year=2010,month=3,day=3)",CLUSTER_10,CLUSTER_12
mystery_date,"datetime.datetime(2015,12,31,0,0)",CLUSTER_10,CLUSTER_12
datetime_object,datetime.datetime.fromtimestamp(1433213314.0),CLUSTER_10,CLUSTER_12
post[2],datetime.datetime.fromtimestamp(float(post[2]),CLUSTER_10,CLUSTER_12
now,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
today,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
today,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
dezember12,"datetime.datetime.strptime(""Dec12,2017"",""%b%d,%Y"")",CLUSTER_10,CLUSTER_12
march1,"datetime.datetime.strptime(""Mar1,2017"",""%b%d,%Y"")",CLUSTER_10,CLUSTER_12
mystery_date,"datetime.datetime.strptime(mystery_date_formatted_string,""%I:%M%pon%A%B%d,%Y"")",CLUSTER_10,CLUSTER_12
diff,"datetime.timedelta(weeks=6,days=0,minutes=20)",CLUSTER_10,CLUSTER_12
train,"pandas.read_csv('data/features-train.csv',index_col='Id')",CLUSTER_0,CLUSTER_3
test,"pandas.read_csv('data/features-test.csv',index_col='Id')",CLUSTER_0,CLUSTER_3
scores,numpy.zeros(num_agents),CLUSTER_3,CLUSTER_6
actions,"numpy.clip(actions,-1,1)",CLUSTER_3,CLUSTER_6
currentTime,"datetime.datetime.strptime(tweetObj['created_at'],timeFormat)",CLUSTER_4,CLUSTER_11
lambdatweet:crisisTime<,"datetime.datetime.strptime(tweet[""retweeted_status""][""created_at""],timeFormat)",CLUSTER_4,CLUSTER_11
crisisTime,datetime.datetime.utcfromtimestamp(crisisMoment),CLUSTER_4,CLUSTER_11
timeIntervalStep,"datetime.timedelta(0,60)",CLUSTER_4,CLUSTER_11
tweetObj,json.loads(decoded_line),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"features_set_2,labels_2",numpy.array(features_set_2),CLUSTER_4,CLUSTER_0
"features_set_2,labels_2",numpy.array(features_set_2),CLUSTER_4,CLUSTER_0
max_labels_pred_test,"numpy.argmax(labels_pred_test,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_test,"numpy.argmax(labels,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_pred_test,"numpy.argmax(labels_pred_test,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_test,"numpy.argmax(labels_2,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_pred_test,"numpy.argmax(labels_pred_test,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_test,"numpy.argmax(labels_2,axis=1)",CLUSTER_4,CLUSTER_0
features_set,"numpy.reshape(features_set,(16692,200,3)",CLUSTER_4,CLUSTER_0
features_set_2,"numpy.reshape(features_set_2,(1317,200,3)",CLUSTER_4,CLUSTER_0
features_set_2,"numpy.reshape(features_set_2,(1317,200,3)",CLUSTER_4,CLUSTER_0
features_set,"numpy.reshape(features_set,(4173,600)",CLUSTER_4,CLUSTER_0
features_set_2,"numpy.reshape(features_set_2,(1317,600)",CLUSTER_4,CLUSTER_0
data,pandas.read_csv('WISDM_ar_latest/WISDM_ar_v1.1/WISDM_ar_v1.1.csv'),CLUSTER_4,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(validations,predictions)",CLUSTER_4,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(validations,predictions)",CLUSTER_4,CLUSTER_0
label_encoded,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_0
max_labels_perwindow,"scipy.stats.mode(y_train[""Encodedactivity""][i:i+200])",CLUSTER_4,CLUSTER_0
max_labels_perwindow,"scipy.stats.mode(y_test[""Encodedactivity""][i:i+200])",CLUSTER_4,CLUSTER_0
max_labels_perwindow,"scipy.stats.mode(y_test[""ActivityEncoded""][i:i+200])",CLUSTER_4,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_0
q,collections.deque(reachable_ocean),CLUSTER_10,CLUSTER_4
train['log_revenue'],numpy.log1p(train['revenue']),CLUSTER_0,CLUSTER_8
train['log_budget'],numpy.log1p(train['budget']),CLUSTER_0,CLUSTER_8
test['log_budget'],numpy.log1p(test['budget']),CLUSTER_0,CLUSTER_8
train,pandas.read_csv('data/train.csv'),CLUSTER_0,CLUSTER_8
test,pandas.read_csv('data/test.csv'),CLUSTER_0,CLUSTER_8
train['release_date'],pandas.to_datetime(train['release_date']),CLUSTER_0,CLUSTER_8
test['release_date'],pandas.to_datetime(test['release_date']),CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,6)",CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,6)",CLUSTER_0,CLUSTER_8
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_0,CLUSTER_8
mapping_recon2_genes,"pandas.read_csv('../data/hgnc_to_entrez.txt',sep='\t')",CLUSTER_8,CLUSTER_4
IEMinfo,"pandas.read_excel('../data/IEM_compendium.xlsx',sheet_name='mappedIEMssuppletable',header=0)",CLUSTER_8,CLUSTER_4
some_nans_bools,pandas.isnull(informative_df),CLUSTER_8,CLUSTER_3
df_nans,pandas.isnull(df[nan_columns]),CLUSTER_8,CLUSTER_3
df1,"pandas.read_csv(""http://mlr.cs.umass.edu/ml/machine-learning-databases/autos/imports-85.data"",header=None)",CLUSTER_8,CLUSTER_3
df1['price'],pandas.to_numeric(df1['price']),CLUSTER_8,CLUSTER_3
df1['price'],pandas.to_numeric(df1['price']),CLUSTER_8,CLUSTER_3
column_idx_matches,"numpy.array([column_matches(df,column,match_value)",CLUSTER_8,CLUSTER_3
rows,"numpy.concatenate(matches[:,1])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../../data/mlbootcamp5_train.csv',sep=';',index_col='id')",CLUSTER_12,CLUSTER_3
x_ticks,numpy.arange(25),CLUSTER_1,CLUSTER_10
x,"numpy.arange(0,len(nu_ch)",CLUSTER_1,CLUSTER_10
indexes_los,numpy.arange(npix),CLUSTER_1,CLUSTER_10
nu_ch,numpy.array(file['frequencies']),CLUSTER_1,CLUSTER_10
obs_maps+,numpy.array(file[c]),CLUSTER_1,CLUSTER_10
obs_maps,"numpy.array([[obs_maps[i]-np.mean(obs_maps[i],axis=0)",CLUSTER_1,CLUSTER_10
FF_col,numpy.array([nu_ch**(-2.13),CLUSTER_1,CLUSTER_10
sync_A,numpy.array([nu_ch**(-3.2),CLUSTER_1,CLUSTER_10
sync_B,numpy.array([nu_ch**(-2.6),CLUSTER_1,CLUSTER_10
map_input,numpy.array(file['cosmological_signal']),CLUSTER_1,CLUSTER_10
map_input,numpy.array(file['cosmological_signal']),CLUSTER_1,CLUSTER_10
map_input,numpy.array(file['cosmological_signal']),CLUSTER_1,CLUSTER_10
obs_maps,numpy.zeros((len(nu_ch),CLUSTER_1,CLUSTER_10
npix,numpy.shape(file['cosmological_signal']),CLUSTER_1,CLUSTER_10
C_ij,numpy.cov(X),CLUSTER_1,CLUSTER_10
"eigenval,eigenvec",numpy.linalg.eigh(C_ij),CLUSTER_1,CLUSTER_10
piA,numpy.linalg.inv(Ae.T@Ae),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,6)",CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_10
random_indices,"numpy.arange(0,Space_Position.shape[0])",CLUSTER_6,CLUSTER_10
Space_Position,numpy.array(position_vis),CLUSTER_6,CLUSTER_10
vis,numpy.zeros(np.shape(fft_now),CLUSTER_6,CLUSTER_10
"x_len,y_len",numpy.shape(images),CLUSTER_6,CLUSTER_10
sum_flux_obs,numpy.sum(ifft_obs.real.T[int(x_len/2),CLUSTER_6,CLUSTER_10
sum_flux_model,numpy.sum(images.real.T[int(x_len/2),CLUSTER_6,CLUSTER_10
x,"numpy.linspace(xmin,xmax,x_len)",CLUSTER_6,CLUSTER_10
y,"numpy.linspace(ymin,ymax,y_len)",CLUSTER_6,CLUSTER_10
"xx,yy","numpy.meshgrid(x,y,indexing='ij')",CLUSTER_6,CLUSTER_10
fft_now,numpy.fft.fft2(images),CLUSTER_6,CLUSTER_10
fft_now,numpy.fft.fft2(images),CLUSTER_6,CLUSTER_10
fft_now,numpy.fft.fftshift(fft_now),CLUSTER_6,CLUSTER_10
fft_now,numpy.fft.fftshift(fft_now),CLUSTER_6,CLUSTER_10
model_vis,numpy.fft.fftshift(np.fft.fft2(model),CLUSTER_6,CLUSTER_10
model_vis,numpy.fft.fftshift(np.fft.fft2(model),CLUSTER_6,CLUSTER_10
model_vis,numpy.fft.fftshift(np.fft.fft2(model),CLUSTER_6,CLUSTER_10
model_vis,numpy.fft.fftshift(np.fft.fft2(model),CLUSTER_6,CLUSTER_10
ifft,numpy.fft.ifft2(shift_ifft2),CLUSTER_6,CLUSTER_10
ifft_obs,numpy.fft.ifft2(vis_obs_shift),CLUSTER_6,CLUSTER_10
ifft_F,numpy.fft.ifft2(d_vis),CLUSTER_6,CLUSTER_10
ifft_F,numpy.fft.ifft2(d_vis),CLUSTER_6,CLUSTER_10
shift_ifft2,numpy.fft.ifftshift(fft_now),CLUSTER_6,CLUSTER_10
vis_obs_shift,numpy.fft.ifftshift(vis_obs),CLUSTER_6,CLUSTER_10
vis_F,numpy.fft.ifftshift(d_vis),CLUSTER_6,CLUSTER_10
vis_F,numpy.fft.ifftshift(d_vis),CLUSTER_6,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(1,2,figsize=(10,3)",CLUSTER_6,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(1,3,figsize=(10,3)",CLUSTER_6,CLUSTER_10
transform_df,"pandas.concat([
transform_df,
pd.get_dummies(transform_df.select_dtypes(include=['category'])",CLUSTER_5,CLUSTER_5
df,"pandas.concat([df,pd.get_dummies(df.select_dtypes(include=['category'])",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""AmesHousing.tsv"",delimiter=""\t"")",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""AmesHousing.tsv"",delimiter=""\t"")",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""AmesHousing.tsv"",delimiter=""\t"")",CLUSTER_5,CLUSTER_5
avg_rmse,"numpy.mean([rmse_one,rmse_two])",CLUSTER_5,CLUSTER_5
avg_rmse,numpy.mean(rmse_values),CLUSTER_5,CLUSTER_5
rmse,numpy.sqrt(mse),CLUSTER_5,CLUSTER_5
rmse,numpy.sqrt(mse),CLUSTER_5,CLUSTER_5
rmse,numpy.sqrt(mse),CLUSTER_5,CLUSTER_5
rmse_one,numpy.sqrt(mse_one),CLUSTER_5,CLUSTER_5
rmse_two,numpy.sqrt(mse_two),CLUSTER_5,CLUSTER_5
rmse,numpy.sqrt(mse),CLUSTER_5,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=k,shuffle=True)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions)",CLUSTER_5,CLUSTER_5
mse_one,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions_one)",CLUSTER_5,CLUSTER_5
mse_two,"sklearn.metrics.mean_squared_error(train[""SalePrice""],predictions_two)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions)",CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
alphas,"numpy.logspace(-1,5,20)",CLUSTER_7,CLUSTER_8
"eig_val,eig_vec",numpy.linalg.eig(RR),CLUSTER_7,CLUSTER_8
"eig_val,eig_vec",numpy.linalg.eig(RR),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
enroll_df,pandas.DataFrame(stats.items(),CLUSTER_7,CLUSTER_8
dfEig,"pandas.DataFrame(eig_vec,index=x.columns,columns=pc_label)",CLUSTER_7,CLUSTER_8
dfEig,"pandas.DataFrame(eig_vec,index=x.columns,columns=pc_label)",CLUSTER_7,CLUSTER_8
ridge_models,"pandas.DataFrame(
[(alpha,
""RidgeRegressionwithalpha=%f""%alpha,
compute_error(Ridge(alpha=alpha)",CLUSTER_7,CLUSTER_8
pred_df,"pandas.DataFrame(list(zip(X_test.index,pred)",CLUSTER_7,CLUSTER_8
pred_df,"pandas.DataFrame(list(zip(X_test.index,pred)",CLUSTER_7,CLUSTER_8
test,"pandas.DataFrame({'ClaimMonth':['July'],'ClaimYear':[2019],'Enrolled':[4981]})",CLUSTER_7,CLUSTER_8
df,"pandas.concat([df,pd.get_dummies(dataframe[feat],prefix=feat)",CLUSTER_7,CLUSTER_8
df,"pandas.concat([dataframe,df],axis=1,sort=False)",CLUSTER_7,CLUSTER_8
claim_df,"pandas.read_csv('./claimdata.csv',parse_dates=['ClaimDate'])",CLUSTER_7,CLUSTER_8
pet_df,"pandas.read_csv('./petdata.csv',parse_dates=['EnrollDate','CancelDate'])",CLUSTER_7,CLUSTER_8
claim_df,"pandas.read_csv('./claimdata.csv',parse_dates=['ClaimDate'])",CLUSTER_7,CLUSTER_8
july,"datetime.datetime.strptime('2019-07-31','%Y-%m-%d')",CLUSTER_7,CLUSTER_8
july_ids['ClaimDate'],"datetime.datetime.strptime('2019-07-31','%Y-%m-%d')",CLUSTER_7,CLUSTER_8
gs_dt,"sklearn.model_selection.GridSearchCV(pipe,
param_grid,
scoring='neg_mean_absolute_error',
return_train_score=True,
cv=cv,n_jobs=5,verbose=3,error_score='raise')",CLUSTER_7,CLUSTER_8
gs_dt,"sklearn.model_selection.GridSearchCV(pipe,
param_grid,
scoring='neg_mean_absolute_error',
return_train_score=True,
cv=cv,n_jobs=5,verbose=3,error_score='raise')",CLUSTER_7,CLUSTER_8
gs_dt,"sklearn.model_selection.GridSearchCV(pipe,
param_grid,
scoring='neg_mean_absolute_error',
return_train_score=True,
cv=cv,n_jobs=2,verbose=3,error_score='raise')",CLUSTER_7,CLUSTER_8
gs_dt2,"sklearn.model_selection.GridSearchCV(pipe,
param_grid,
scoring='explained_variance',
return_train_score=True,
cv=cv,n_jobs=5,verbose=3,error_score='raise')",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.2,random_state=42)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.2,random_state=42)",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.ShuffleSplit(n_splits=100,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.ShuffleSplit(n_splits=100,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
('features',FeatureUnion([
('numeric_feats',ColumnSelector(cols=numerical)",CLUSTER_7,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
('features',FeatureUnion([
('numeric_feats',ColumnSelector(cols=numerical)",CLUSTER_7,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
('features',FeatureUnion([
('numeric_feats',ColumnSelector(cols=numerical)",CLUSTER_7,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
('features',FeatureUnion([
('numeric_feats',ColumnSelector(cols=numerical)",CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=i,
init='k-means++',
n_init=10,
max_iter=300,
random_state=0)",CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=i,
init='k-means++',
n_init=10,
max_iter=300,
random_state=0)",CLUSTER_7,CLUSTER_8
self.bk_active_links,"numpy.zeros(self.size,dtype=np.int)",CLUSTER_1,CLUSTER_10
self.state,"numpy.zeros(self.size,dtype=np.int8)",CLUSTER_1,CLUSTER_10
"soi,",numpy.where(self.state==1),CLUSTER_1,CLUSTER_10
"susceptible,",numpy.where(self.state==0),CLUSTER_1,CLUSTER_10
beta,"numpy.linspace(0,0.3,20)",CLUSTER_1,CLUSTER_10
alsX,numpy.array(docX),CLUSTER_11,CLUSTER_0
alsY,numpy.array(docY),CLUSTER_11,CLUSTER_0
high_win,numpy.array([]),CLUSTER_11,CLUSTER_0
high_lost,numpy.array([]),CLUSTER_11,CLUSTER_0
low_win,numpy.array([]),CLUSTER_11,CLUSTER_0
low_lost,numpy.array([]),CLUSTER_11,CLUSTER_0
high_win,"numpy.append(high_win,numpy.array(temp_check[i])",CLUSTER_11,CLUSTER_0
high_lost,"numpy.append(high_lost,numpy.array(temp_check[i])",CLUSTER_11,CLUSTER_0
low_win,"numpy.append(low_win,numpy.array(temp_check[i])",CLUSTER_11,CLUSTER_0
low_lost,"numpy.append(low_lost,numpy.array(temp_check[i])",CLUSTER_11,CLUSTER_0
result,pandas.DataFrame(high_predicted),CLUSTER_11,CLUSTER_0
data,pandas.read_csv(file_name),CLUSTER_11,CLUSTER_0
data['date'],"pandas.to_datetime(data['date'],format='%Y-%m-%d')",CLUSTER_11,CLUSTER_0
starttime,time.time(),CLUSTER_11,CLUSTER_0
reviews,"pandas.read_csv(""../input/wine-reviews/winemag-data-130k-v2.csv"",index_col=0)",CLUSTER_8,CLUSTER_4
df,pandas.DataFrame(menuList),CLUSTER_1,CLUSTER_3
randnum,random.random(),CLUSTER_6,CLUSTER_6
randnum,random.random(),CLUSTER_6,CLUSTER_6
epoch_start_time,time.time(),CLUSTER_6,CLUSTER_6
epoch_start_time,time.time(),CLUSTER_6,CLUSTER_6
start_time,time.time(),CLUSTER_6,CLUSTER_6
total_time,time.time(),CLUSTER_6,CLUSTER_6
self.rgbColors,"numpy.array([[0,255,0],[255,255,255],[0,0,0],[255,0,0],[0,0,255],[255,255,0],[0,255,255],[255,0,255],[51,51,255],[102,102,0],[255,0,127],[160,32,240],[238,130,238]])",CLUSTER_1,CLUSTER_9
tmpImg,numpy.zeros(img.shape),CLUSTER_1,CLUSTER_9
feats,"numpy.zeros((filteredImg[0].shape[0],filteredImg[0].shape[1],dim)",CLUSTER_1,CLUSTER_9
output,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_1,CLUSTER_9
output,"numpy.zeros((img.shape[0],img.shape[1])",CLUSTER_1,CLUSTER_9
ref_feats[i],"numpy.mean(ref_feats[i],axis=0)",CLUSTER_1,CLUSTER_9
ref_feats[i],"numpy.mean(ref_feats[i],axis=0)",CLUSTER_1,CLUSTER_9
ref_feats[i],"numpy.mean(ref_feats[i],axis=0)",CLUSTER_1,CLUSTER_9
ref_feats[i],"numpy.mean(ref_feats[i],axis=0)",CLUSTER_1,CLUSTER_9
kernel,"numpy.real(gabor_kernel(frequency,theta=theta,sigma_x=sigma,sigma_y=sigma)",CLUSTER_1,CLUSTER_9
self.centroids[item],"numpy.average(self.clusters[item],axis=0)",CLUSTER_1,CLUSTER_9
self.centroids[item],"numpy.average(self.clusters[item],axis=0)",CLUSTER_1,CLUSTER_9
df_assetCodes,"pandas.DataFrame({'level_0':assetCodes_index,'assetCode':assetCodes_expanded})",CLUSTER_11,CLUSTER_5
news_df_expanded,"pandas.merge(df_assetCodes,news_df[news_cols],left_on='level_0',right_index=True,suffixes=(['','_old'])",CLUSTER_11,CLUSTER_5
market_df['day_change'],"numpy.divide(np.subtract(market_df['close'],market_df['open'])",CLUSTER_11,CLUSTER_5
predictions,numpy.divide(predictions-np.min(predictions),CLUSTER_11,CLUSTER_5
market_df['dollar_volume'],"numpy.multiply(market_df['volume'],np.divide(np.add(market_df['open'],market_df['close'])",CLUSTER_11,CLUSTER_5
"market_df[""change_""+time+""_""+adj]","numpy.subtract(market_df['returns'+time+'Prev'+adj+'1'],market_df['returns'+time+'Prev'+adj+'10'])",CLUSTER_11,CLUSTER_5
error,"numpy.subtract(y_pred,y_true)",CLUSTER_11,CLUSTER_5
"plt.hist(y_true,bins","numpy.linspace(-0.5,0.5,150)",CLUSTER_11,CLUSTER_5
"plt.hist(y_pred,bins","numpy.linspace(-0.5,0.5,150)",CLUSTER_11,CLUSTER_5
"plt.hist(error,bins","numpy.linspace(-0.25,0.25,100)",CLUSTER_11,CLUSTER_5
"train,validate,test",numpy.split(merged_data.sample(frac=1),CLUSTER_11,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_11,CLUSTER_5
accuracy,sklearn.metrics.accuracy_score(np.array(y_true),CLUSTER_11,CLUSTER_5
MSE,"sklearn.metrics.mean_squared_error(y_true,y_pred)",CLUSTER_11,CLUSTER_5
U_rv,scipy.stats.uniform(),CLUSTER_1,CLUSTER_9
U_rv_fixed,"scipy.stats.uniform(1,scale=4)",CLUSTER_1,CLUSTER_9
mmap,"numpy.memmap('mymmap',dtype='float64',mode='w+',shape=(10000,10000)",CLUSTER_8,CLUSTER_3
mmap,"numpy.memmap('mymmap',dtype='float64',shape=(10000,10000)",CLUSTER_8,CLUSTER_3
arr,numpy.arange(8),CLUSTER_8,CLUSTER_3
arr,numpy.arange(15),CLUSTER_8,CLUSTER_3
arr,numpy.arange(15),CLUSTER_8,CLUSTER_3
arr,numpy.arange(12),CLUSTER_8,CLUSTER_3
arr,numpy.arange(6),CLUSTER_8,CLUSTER_3
arr,numpy.arange(3),CLUSTER_8,CLUSTER_3
arr,numpy.arange(10),CLUSTER_8,CLUSTER_3
arr,numpy.arange(5),CLUSTER_8,CLUSTER_3
arr,numpy.arange(10),CLUSTER_8,CLUSTER_3
arr,numpy.arange(15),CLUSTER_8,CLUSTER_3
arr,numpy.arange(3),CLUSTER_8,CLUSTER_3
arr,numpy.arange(10),CLUSTER_8,CLUSTER_3
arr1,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_8,CLUSTER_3
arr2,"numpy.array([[7,8,9],[10,11,12]])",CLUSTER_8,CLUSTER_3
col,"numpy.array([1.28,-0.42,0.44,1.6])",CLUSTER_8,CLUSTER_3
sarr,"numpy.array([(1.5,6)",CLUSTER_8,CLUSTER_3
data,"numpy.array([((1,2)",CLUSTER_8,CLUSTER_3
values,"numpy.array([5,0,1,3,2])",CLUSTER_8,CLUSTER_3
first_name,"numpy.array(['Bob','Jane','Steve','Bill','Barbara'])",CLUSTER_8,CLUSTER_3
last_name,"numpy.array(['Jones','Arnold','Arnold','Jones','Walters'])",CLUSTER_8,CLUSTER_3
values,"numpy.array(['2:first','2:second','1:first','1:second','1:third'])",CLUSTER_8,CLUSTER_3
key,"numpy.array([2,2,1,1,1])",CLUSTER_8,CLUSTER_3
arr,"numpy.array([0,1,7,12,15])",CLUSTER_8,CLUSTER_3
arr,"numpy.array([0,0,0,1,1,1,1])",CLUSTER_8,CLUSTER_3
bins,"numpy.array([0,100,1000,5000,10000])",CLUSTER_8,CLUSTER_3
X,"numpy.array([[8.82768214,3.82222409,-1.14276475,2.04411587],
[3.82222409,6.75272284,0.83909108,2.08293758],
[-1.14276475,0.83909108,5.01690521,0.79573241],
[2.04411587,2.08293758,0.79573241,6.24095859]])",CLUSTER_8,CLUSTER_3
arr,"numpy.zeros((4,4)",CLUSTER_8,CLUSTER_3
arr,"numpy.zeros((4,3)",CLUSTER_8,CLUSTER_3
arr,"numpy.zeros(4,dtype=dtype)",CLUSTER_8,CLUSTER_3
sorter,"numpy.lexsort((first_name,last_name)",CLUSTER_8,CLUSTER_3
ints,"numpy.ones(10,dtype=np.uint16)",CLUSTER_8,CLUSTER_3
floats,"numpy.ones(10,dtype=np.float32)",CLUSTER_8,CLUSTER_3
other_arr,"numpy.ones((3,5)",CLUSTER_8,CLUSTER_3
arr_c,"numpy.ones((1000,1000)",CLUSTER_8,CLUSTER_3
arr_f,"numpy.ones((1000,1000)",CLUSTER_8,CLUSTER_3
data,"numpy.floor(np.random.uniform(0,10000,size=50)",CLUSTER_8,CLUSTER_3
add_them,"numpy.frompyfunc(add_elements,2,1)",CLUSTER_8,CLUSTER_3
arr,numpy.multiply.outer(np.arange(4),CLUSTER_8,CLUSTER_3
result,"numpy.subtract.outer(randn(3,4)",CLUSTER_8,CLUSTER_3
Xm,numpy.matrix(X),CLUSTER_8,CLUSTER_3
add_them,"numpy.vectorize(add_elements,otypes=[np.float64])",CLUSTER_8,CLUSTER_3
"first,second,third","numpy.split(arr,[1,3])",CLUSTER_8,CLUSTER_3
a,numpy.arange(27),CLUSTER_3,CLUSTER_6
b,numpy.arange(5),CLUSTER_3,CLUSTER_6
c,"numpy.arange(5,10)",CLUSTER_3,CLUSTER_6
a,numpy.arange(6),CLUSTER_3,CLUSTER_6
a,numpy.arange(6),CLUSTER_3,CLUSTER_6
a,numpy.arange(27),CLUSTER_3,CLUSTER_6
a,numpy.array(100),CLUSTER_3,CLUSTER_6
a,numpy.array([100]),CLUSTER_3,CLUSTER_6
a,numpy.array([[100]]),CLUSTER_3,CLUSTER_6
a,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_3,CLUSTER_6
a,"numpy.array([[0,1,2,3,4,5]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([('Rex',9,81.0)",CLUSTER_3,CLUSTER_6
Address,"collections.namedtuple('Address',('name','age','weight')",CLUSTER_3,CLUSTER_6
xml_files,os.listdir(Annotations),CLUSTER_10,CLUSTER_4
eip,"numpy.arange(0,3*np.pi,0.1)",CLUSTER_1,CLUSTER_9
eip,"numpy.arange(0,3*np.pi,0.1)",CLUSTER_1,CLUSTER_9
eip,"numpy.arange(0,3*np.pi,0.1)",CLUSTER_1,CLUSTER_9
eip_list,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([0,2,0,1])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1,2])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1.0,2.0])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1,2],dtype=np.int64)",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4]],dtype=np.float64)",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([[5,6],[7,8]],dtype=np.float64)",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([[5,6],[7,8]])",CLUSTER_1,CLUSTER_9
eip_in,"numpy.array([9,10])",CLUSTER_1,CLUSTER_9
eip_out,"numpy.array([11,12])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([1,0,1])",CLUSTER_1,CLUSTER_9
eip_in,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
mlblr_in,"numpy.array([1,0,1])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([1,0,1])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([4,5])",CLUSTER_1,CLUSTER_9
eip_in,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[0,1],[1,0],[2,0]])",CLUSTER_1,CLUSTER_9
eip,"numpy.zeros((2,2)",CLUSTER_1,CLUSTER_9
mlblr_in,numpy.empty_like(eip),CLUSTER_1,CLUSTER_9
mlblr,"numpy.ones((1,2)",CLUSTER_1,CLUSTER_9
eip,"numpy.full((2,2)",CLUSTER_1,CLUSTER_9
eip_out,numpy.cos(eip),CLUSTER_1,CLUSTER_9
eip_out,numpy.cos(eip),CLUSTER_1,CLUSTER_9
mlblr,numpy.sin(eip),CLUSTER_1,CLUSTER_9
eip_in,numpy.sin(eip),CLUSTER_1,CLUSTER_9
eip_in,numpy.sin(eip),CLUSTER_1,CLUSTER_9
mlblr_out,"numpy.tile(mlblr_in,(4,1)",CLUSTER_1,CLUSTER_9
mlblr,numpy.eye(2),CLUSTER_1,CLUSTER_9
unrate,pandas.read_excel('uer-20150702-tyejjd8j.xlsx'),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,6)",CLUSTER_1,CLUSTER_3
newsgroups_train,sklearn.datasets.fetch_20newsgroups(subset='train'),CLUSTER_8,CLUSTER_1
df,pandas.DataFrame(columns=['text']),CLUSTER_8,CLUSTER_1
df_features,"pandas.DataFrame(norm_features,index=df.index.tolist()",CLUSTER_8,CLUSTER_1
nmf,sklearn.decomposition.NMF(n_components=40),CLUSTER_8,CLUSTER_1
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_8,CLUSTER_1
y_guess,"numpy.zeros(n_samples,dtype=np.int)",CLUSTER_4,CLUSTER_6
y_truth,"numpy.argmax(y_test[:n_samples],axis=-1)",CLUSTER_4,CLUSTER_6
y_guess[c*BATCHSIZE:(c+1)*BATCHSIZE],"numpy.argmax(predicted_label_probs,axis=-1)",CLUSTER_4,CLUSTER_6
data,"numpy.genfromtxt(""../../datasets/raw/veg/vegetation.grid"",skip_header=6,skip_footer=18)",CLUSTER_4,CLUSTER_11
rain,"numpy.genfromtxt(""../../datasets/raw/rain/2019123120191231.grid"",skip_header=6,skip_footer=18)",CLUSTER_4,CLUSTER_11
temp,"numpy.genfromtxt(""../../datasets/raw/temp/2019103120191031.grid"",skip_header=6,skip_footer=18)",CLUSTER_4,CLUSTER_11
fire,"pandas.read_csv(""../../datasets/raw/fire/fire_nrt_V1_95405.csv"")",CLUSTER_4,CLUSTER_11
item_features,scipy.sparse.load_npz('data/item_features_matrix.npz'),CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame({'id1':id1,'id2':id2,'distance':M})",CLUSTER_5,CLUSTER_1
df,pandas.read_csv('data/Interactions.csv'),CLUSTER_5,CLUSTER_1
I,"scipy.sparse.coo_matrix((data,(row,col)",CLUSTER_5,CLUSTER_1
svd,"sklearn.decomposition.TruncatedSVD(n_components=300,n_iter=7,random_state=42)",CLUSTER_5,CLUSTER_1
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_11
ax,"matplotlib.pyplot.subplot(num_images//2,2,images_so_far)",CLUSTER_6,CLUSTER_11
since,time.time(),CLUSTER_6,CLUSTER_11
time_elapsed,time.time(),CLUSTER_6,CLUSTER_11
new_thrust,"random.gauss(450.,25.)",CLUSTER_3,CLUSTER_3
init_pose,"numpy.array([0.,0.,10.,0.,0.,0.])",CLUSTER_3,CLUSTER_3
init_velocities,"numpy.array([0.,0.,0.])",CLUSTER_3,CLUSTER_3
init_angle_velocities,"numpy.array([0.,0.,0.])",CLUSTER_3,CLUSTER_3
target_pos,"numpy.array([0.,0.,10.])",CLUSTER_3,CLUSTER_3
init_pos,"numpy.array([0.,0.,0.,0.,0.,0.])",CLUSTER_3,CLUSTER_3
target_pos,"numpy.array([0.,0.,100.])",CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
DF,"pandas.read_csv(FILE,index_col=False)",CLUSTER_3,CLUSTER_3
DF,"pandas.read_csv(FILE,index_col=False)",CLUSTER_3,CLUSTER_3
fig,"pandas.DataFrame(data,index=[0])",CLUSTER_0,CLUSTER_0
list_length_train,pandas.Series(list_length_train),CLUSTER_0,CLUSTER_0
list_length_valid,pandas.Series(list_length_valid),CLUSTER_0,CLUSTER_0
list_length_test,pandas.Series(list_length_test),CLUSTER_0,CLUSTER_0
data_csv,pandas.read_csv('G:/my_code/python/mathematical_expression_recognition/Mathematical_Expression_Recognition_train/train.csv'),CLUSTER_0,CLUSTER_0
"X_data,X_valid,y_data,y_valid","sklearn.model_selection.train_test_split(img_dirpath,label,test_size=10000,random_state=17)",CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_data,y_data,test_size=10000,random_state=17)",CLUSTER_0,CLUSTER_0
self.imgs,"numpy.zeros((self.n,self.img_h,self.img_w)",CLUSTER_0,CLUSTER_0
label_length,"numpy.zeros((self.batch_size,1)",CLUSTER_0,CLUSTER_0
label_length,"numpy.zeros((batch_size,1)",CLUSTER_0,CLUSTER_0
Y_data,"numpy.empty([self.batch_size,self.max_text_len])",CLUSTER_0,CLUSTER_0
Y_data,"numpy.empty([batch_size,max_text_len])",CLUSTER_0,CLUSTER_0
X_data,"numpy.ones([self.batch_size,self.img_w,self.img_h,1])",CLUSTER_0,CLUSTER_0
input_length,"numpy.ones((self.batch_size,1)",CLUSTER_0,CLUSTER_0
X_data,"numpy.ones([batch_size,img_w,img_h,1])",CLUSTER_0,CLUSTER_0
input_length,"numpy.ones((batch_size,1)",CLUSTER_0,CLUSTER_0
img,"numpy.expand_dims(img,-1)",CLUSTER_0,CLUSTER_0
img_pred,"numpy.expand_dims(img_pred,axis=-1)",CLUSTER_0,CLUSTER_0
img_pred,"numpy.expand_dims(img_pred,axis=0)",CLUSTER_0,CLUSTER_0
img,"numpy.expand_dims(img,-1)",CLUSTER_0,CLUSTER_0
img,"numpy.expand_dims(img,axis=0)",CLUSTER_0,CLUSTER_0
img_pred,"numpy.expand_dims(img_pred,axis=-1)",CLUSTER_0,CLUSTER_0
img_pred,"numpy.expand_dims(img_pred,axis=0)",CLUSTER_0,CLUSTER_0
sum_character_train,collections.defaultdict(int),CLUSTER_0,CLUSTER_0
sum_character_valid,collections.defaultdict(int),CLUSTER_0,CLUSTER_0
sum_character_test,collections.defaultdict(int),CLUSTER_0,CLUSTER_0
seq+,random.choice(digits),CLUSTER_0,CLUSTER_0
seq+,random.choice(operators),CLUSTER_0,CLUSTER_0
seq+,random.choice(digits),CLUSTER_0,CLUSTER_0
seq+,random.choice(operators),CLUSTER_0,CLUSTER_0
seq+,random.choice(digits),CLUSTER_0,CLUSTER_0
k,"random.randint(0,2)",CLUSTER_0,CLUSTER_0
x_new,"numpy.linspace(0,3,1000)",CLUSTER_5,CLUSTER_5
log_reg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_5
m,pandas.DataFrame(new_random),CLUSTER_7,CLUSTER_5
X_Cluster_centroid,pandas.DataFrame(X_cc),CLUSTER_7,CLUSTER_5
y_,pandas.DataFrame(y_smoke_resample_train),CLUSTER_7,CLUSTER_5
resamp,pandas.concat([pd.DataFrame(X_smoke_resample_train),CLUSTER_7,CLUSTER_5
data,"pandas.read_csv(""train_2v.csv"")",CLUSTER_7,CLUSTER_5
param_range,"numpy.arange(1,41,2)",CLUSTER_7,CLUSTER_5
param_range,"numpy.arange(1,41,2)",CLUSTER_7,CLUSTER_5
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
"values,indices","numpy.histogram(d.bmi,bins=25)",CLUSTER_7,CLUSTER_5
"X_train_No_smoke,X_test_No_smoke,y_train_No_smoke,y_test_No_smoke","sklearn.model_selection.train_test_split(X_No_smoke,y_No_smoke,test_size=0.1,random_state=1)",CLUSTER_7,CLUSTER_5
"X_train_smoke,X_test_smoke,y_train_smoke,y_test_smoke","sklearn.model_selection.train_test_split(X_smoke,y_smoke,test_size=0.1,random_state=1)",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(12,12)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
model_smoke_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_No_smoke_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_smoke_tree_Undersampling,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_smoke_tree_Resampling,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_smoke_tree_Resampling_2,"sklearn.tree.DecisionTreeClassifier(max_depth=7,criterion=""gini"")",CLUSTER_7,CLUSTER_5
model_No_smoke_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_No_smoke_tree_Undersampling,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_No_smoke_tree_Resampling,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_No_smoke_tree_Resampling_2,"sklearn.tree.DecisionTreeClassifier(max_depth=7,criterion=""gini"")",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_smoke)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_No_smoke)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_smoke_Undersampling)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_smoke_boost_Undersampling)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_smoke_Resampling)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_svm_smoke)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_svm_smoke_2)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_smoke_Resampling_2)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_No_smoke)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_No_smoke_Undersampling)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_No_smoke_Resampling)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_svm_No_smoke)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_No_smoke_Resampling_2)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_svm_No_smoke_2)",CLUSTER_7,CLUSTER_5
conf_mat_smoke_tree,"sklearn.metrics.confusion_matrix(y_true=y_test_smoke,y_pred=y_pred_smoke)",CLUSTER_7,CLUSTER_5
conf_mat_No_smoke_tree,"sklearn.metrics.confusion_matrix(y_true=y_test_No_smoke,y_pred=y_pred_No_smoke)",CLUSTER_7,CLUSTER_5
conf_mat_smoke_tree_Undersampling,"sklearn.metrics.confusion_matrix(y_true=y_test_smoke,y_pred=y_pred_smoke_Undersampling)",CLUSTER_7,CLUSTER_5
conf_mat_smoke_boost_Undersampling,"sklearn.metrics.confusion_matrix(y_true=y_test_smoke,y_pred=y_pred_smoke_boost_Undersampling)",CLUSTER_7,CLUSTER_5
conf_mat_smoke_tree_Resampling,"sklearn.metrics.confusion_matrix(y_true=y_test_smoke,y_pred=y_pred_smoke_Resampling)",CLUSTER_7,CLUSTER_5

dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
Z1,"numpy.dot(W1,X)",CLUSTER_5,CLUSTER_9
Z2,"numpy.dot(W2,A1)",CLUSTER_5,CLUSTER_9
Z3,"numpy.dot(W3,A2)",CLUSTER_5,CLUSTER_9
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
data,pandas.DataFrame(np.arange(16),CLUSTER_1,CLUSTER_3
frame,"pandas.DataFrame(np.random.randn(4,3)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({'col1':['A','A','B',np.nan,'D','C'],'col2':[2,1,9,8,7,4],'col3':[0,1,9,4,2,3],})",CLUSTER_1,CLUSTER_3
df1,"pandas.DataFrame({'key1':['foo','bar','baz','foo'],'data1':list(np.arange(1,5)",CLUSTER_1,CLUSTER_3
df2,"pandas.DataFrame({'key1':['foo','bar','qux','bar'],'data2':list(np.arange(5,9)",CLUSTER_1,CLUSTER_3
left1,"pandas.DataFrame({'key':['a','c','b','c'],'value1':[1,2,3,4],'value2':[4,5,6,7]},index=['a','b','c','e'])",CLUSTER_1,CLUSTER_3
right1,"pandas.DataFrame([[7,8],[9,10],[11,12],[13,14]],index=['b','c','d','a'],columns=['value3','value4'])",CLUSTER_1,CLUSTER_3
df1,"pandas.DataFrame([['a',1],['b',2]],index=[0,4],columns=['letter1','number'])",CLUSTER_1,CLUSTER_3
df2,"pandas.DataFrame([['c',3],['d',4]],columns=['number','letter'])",CLUSTER_1,CLUSTER_3
df1,"pandas.DataFrame({'a':[1,np.nan,5.,np.nan],'b':[np.nan,2,np.nan,6],'c':list(np.arange(2,18,4)",CLUSTER_1,CLUSTER_3
df2,"pandas.DataFrame({'a':[5,4,np.nan,3,7],'b':[np.nan,3,4,6,8]})",CLUSTER_1,CLUSTER_3
data,pandas.DataFrame(np.arange(6),CLUSTER_1,CLUSTER_3
df1,"pandas.DataFrame(np.arange(1,13)",CLUSTER_1,CLUSTER_3
df2,"pandas.DataFrame(np.arange(1,21)",CLUSTER_1,CLUSTER_3
frame,"pandas.DataFrame(np.arange(1,13)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame([[1.4,np.nan],[7.1,-4.5],[np.nan,np.nan],[0.75,-1.3]],index=list('abcd')",CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(np.arange(20),CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({""id"":[1001,1002,1003,1004,1005,1006],
""date"":pd.date_range('20130102',periods=6)",CLUSTER_1,CLUSTER_3
df1,"pandas.DataFrame({""id"":[1001,1002,1003,1004,1005,1006,1007,1008],
""gender"":['male','female','male','female','male','female','male','female'],
""pay"":['Y','N','Y','Y','N','Y','N','Y',],
""m-point"":[10,12,20,40,40,40,30,20]})",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({""id"":[1001,1002,1003,1004,1005,1006],
""date"":pd.date_range('20130102',periods=6)",CLUSTER_1,CLUSTER_3
df1,"pandas.DataFrame({""id"":[1001,1002,1003,1004,1005,1006,1007,1008],
""gender"":['male','female','male','female','male','female','male','female'],
""pay"":['Y','N','Y','Y','N','Y','N','Y',],
""m-point"":[10,12,20,40,40,40,30,20]})",CLUSTER_1,CLUSTER_3
series,"pandas.Series(range(1,4)",CLUSTER_1,CLUSTER_3
df['one'],pandas.Series(list('abdd'),CLUSTER_1,CLUSTER_3
df['sex'],"pandas.Series([1,0,0,0])",CLUSTER_1,CLUSTER_3
aaa,"pandas.concat([df1,df2],sort=True,axis=1)",CLUSTER_1,CLUSTER_3
labels,"pandas.cut(fec_mrbo.contb_receipt_amt,bins)",CLUSTER_1,CLUSTER_3
df_inner,"pandas.merge(df,df1,how='inner')",CLUSTER_1,CLUSTER_3
df_inner,"pandas.merge(df,df1,how='inner')",CLUSTER_1,CLUSTER_3
tips,pandas.read_csv('data/tips.csv'),CLUSTER_1,CLUSTER_3
fec,pandas.read_csv('data/2012FederalElectoralCommission.csv'),CLUSTER_1,CLUSTER_3
bins,"numpy.array([0,1,10,100,1000,10000,100000,1000000,10000000])",CLUSTER_1,CLUSTER_3
cl,pandas.read_csv('cleaned_demo3.csv'),CLUSTER_7,CLUSTER_5
type_label,"numpy.where(cl['Class_ASD']=='YES',0,1)",CLUSTER_7,CLUSTER_5
xx,"numpy.linspace(-1,2)",CLUSTER_7,CLUSTER_5
model,sklearn.svm.SVC(kernel='linear'),CLUSTER_7,CLUSTER_5
X,"np.append(arr=numpy.ones((50,1)",CLUSTER_5,CLUSTER_5
X,"numpy.append(arr=np.ones((50,1)",CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('50_Startups.csv'),CLUSTER_5,CLUSTER_5
labelEncoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[3]),CLUSTER_5,CLUSTER_5
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
sc_y,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
expdata_sc,"pandas.read_csv('data/mon_data/expdata_sc.csv',sep=';')",CLUSTER_8,CLUSTER_3
expdata_dnz,"pandas.read_csv('data/mon_data/expdata_dnz.csv',sep=';')",CLUSTER_8,CLUSTER_3
df_prozorro,"pandas.read_csv('data/TrainingProZorroForSchoolProject20162019.csv',sep=';',low_memory=False)",CLUSTER_8,CLUSTER_3
boundaries,"numpy.array([[0,sim_param.x_length],[0,sim_param.y_length]])",CLUSTER_3,CLUSTER_6
placement_rsrc_range,"numpy.array([[2,3],[8,16],[2,5]])",CLUSTER_3,CLUSTER_6
placement_rsrc_range,"numpy.array([[1,1],[0.5,1],[0.5,1]])",CLUSTER_3,CLUSTER_6
placement_rsrc_range,"numpy.array([[1,2],[2,4],[1,2]])",CLUSTER_3,CLUSTER_6
weak_range,"numpy.array([[4,8],[1000,1500],[4,16]])",CLUSTER_3,CLUSTER_6
strong_range,"numpy.array([[50,100],[100000,150000],[300,600]])",CLUSTER_3,CLUSTER_6
rsrc_cost,"numpy.array([0.03,0.01,0.05])",CLUSTER_3,CLUSTER_6
"servers_l3.append(Server(boundaries,level","3,rand_locs=False,locs=numpy.array([200,200])",CLUSTER_3,CLUSTER_6
lv_minmax,"numpy.array(([[500,1000],[10000,20000],[30000,50000]])",CLUSTER_3,CLUSTER_6
link_costs,"numpy.array([0.05,0.02,0.01])",CLUSTER_3,CLUSTER_6
temp_usr_dict[p],numpy.zeros(time_steps),CLUSTER_3,CLUSTER_6
exp_service,numpy.zeros((len(ILP_prob.servers),CLUSTER_3,CLUSTER_6
service_thruput,numpy.zeros(self.prob.links.distances.shape),CLUSTER_3,CLUSTER_6
num_switch,"numpy.sum(numpy.sum(service_path,axis=1)",CLUSTER_3,CLUSTER_6
num_dist,"numpy.sum(numpy.sum(latency_dists,axis=1)",CLUSTER_3,CLUSTER_6
expected_sbw,"numpy.multiply(service_bw,avg_link)",CLUSTER_3,CLUSTER_6
latency_dists,"numpy.multiply(service_path,server_distances)",CLUSTER_3,CLUSTER_6
num,re.sub(r'diverg.*\),CLUSTER_0,CLUSTER_1
algUtl,"re.sub(r'diverg.*\(',r'',arq)",CLUSTER_0,CLUSTER_1
algUtl,re.sub(r'\),CLUSTER_0,CLUSTER_1
conj_treino,pandas.DataFrame(columns=pc_vetores.columns.values),CLUSTER_0,CLUSTER_1
conj_treino,pandas.DataFrame(columns=pc_vetores.columns.values),CLUSTER_0,CLUSTER_1
conj_descart,pandas.DataFrame(columns=pc_vetores.columns.values),CLUSTER_0,CLUSTER_1
pc_vetores,"pandas.concat([duplicata,pc_vetores],axis=1,ignore_index=False)",CLUSTER_0,CLUSTER_1
geral,"pandas.concat([pc_vetores,conj_treino])",CLUSTER_0,CLUSTER_1
estatisticas,"pandas.read_csv(estat,index_col=['algoritmosUtilizados','etapa','permutacao'],sep=';')",CLUSTER_0,CLUSTER_1
pc,"pandas.read_csv(pc,sep=';',index_col=['elemento1','elemento2'])",CLUSTER_0,CLUSTER_1
"exc_type,exc_obj,exc_tb",sys.exc_info(),CLUSTER_0,CLUSTER_1
"exc_type,exc_obj,exc_tb",sys.exc_info(),CLUSTER_0,CLUSTER_1
"exc_type,exc_obj,exc_tb",sys.exc_info(),CLUSTER_0,CLUSTER_1
"exc_type,exc_obj,exc_tb",sys.exc_info(),CLUSTER_0,CLUSTER_1
"exc_type,exc_obj,exc_tb",sys.exc_info(),CLUSTER_0,CLUSTER_1
cv_results,"sklearn.model_selection.cross_val_score(modelo,X_train,y_train,cv=kfold,scoring='f1')",CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(XtoClass,ytoClass,test_size=0.20,random_state=seed)",CLUSTER_0,CLUSTER_1
modelo,sklearn.tree.DecisionTreeClassifier(random_state=seed),CLUSTER_0,CLUSTER_1
modelo,sklearn.svm.SVC(random_state=seed),CLUSTER_0,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=seed)",CLUSTER_0,CLUSTER_1
kfold,"sklearn.model_selection.KFold(n_splits=2,random_state=seed)",CLUSTER_0,CLUSTER_1
kfold,"sklearn.model_selection.KFold(n_splits=5,random_state=seed)",CLUSTER_0,CLUSTER_1
kfold,sklearn.model_selection.KFold(random_state=seed),CLUSTER_0,CLUSTER_1
kfold,"sklearn.model_selection.KFold(n_splits=2,random_state=seed)",CLUSTER_0,CLUSTER_1
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
all_times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
target_times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
times,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
detrended_mem_pot,"detrend(eval(key),type='linear',bp=numpy.arange(smoothing_step,
len(eval(key)",CLUSTER_4,CLUSTER_11
detrended_mem_pot,"detrend(eval(key),type='linear',bp=numpy.arange(smoothing_step,
len(eval(key)",CLUSTER_4,CLUSTER_11
detrended_mem_pot,numpy.convolve(smoothing_filter/smoothing_filter.sum(),CLUSTER_4,CLUSTER_11
smoothing_filter,numpy.ones((int(2/.001),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['flash_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['intraRF_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['linesRF_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['flash_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['intraRF_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['linesRF_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['flash_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['intraRF_v']-time_us),CLUSTER_4,CLUSTER_11
idx,numpy.argmin(abs(minimum_times['linesRF_v']-time_us),CLUSTER_4,CLUSTER_11
scaling_factor,numpy.mean(np.diff(times[params[0]]),CLUSTER_4,CLUSTER_11
scaling_factor,numpy.mean(np.diff(times[params[0]]),CLUSTER_4,CLUSTER_11
scaling_factor,numpy.mean(np.diff(times[params[0]]),CLUSTER_4,CLUSTER_11
boxes_time,"numpy.linspace(0,500.015,boxes_len)",CLUSTER_4,CLUSTER_11
lines_time,"numpy.linspace(0,)",CLUSTER_4,CLUSTER_11
time_intraRF_v,"numpy.linspace(times['intraRF_v'][0],times['intraRF_v'][1],len(intraRF_v)",CLUSTER_4,CLUSTER_11
time_boxes,"numpy.linspace(times['boxes'][0],times['boxes'][1],boxes.shape[0])",CLUSTER_4,CLUSTER_11
target_times[key],"numpy.linspace(0,minimum_times[key],int(minimum_times[key]/sampling_rate)",CLUSTER_4,CLUSTER_11
times[params[0]],numpy.linspace(float(params[1]),CLUSTER_4,CLUSTER_11
times[params[0]],numpy.linspace(float(params[-2]),CLUSTER_4,CLUSTER_11
times[params[0]],numpy.linspace(float(params[-2]),CLUSTER_4,CLUSTER_11
times[params[0]],numpy.linspace(float(params[1]),CLUSTER_4,CLUSTER_11
times[params[0]],numpy.linspace(float(params[-2]),CLUSTER_4,CLUSTER_11
times[params[0]],numpy.linspace(float(params[1]),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['linesRF_v'][key]forkeyinsorted_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['intraRF_v'][key]forkeyinsorted_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['flash_v'][key]forkeyinsorted_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['linesRF_v'][key]forkeyinsorted_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['intraRF_v'][key]forkeyinsorted_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['flash_v'][key]forkeyinsorted_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['linesRF_v'][key]forkeyinlate_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['intraRF_v'][key]forkeyinlate_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['flash_v'][key]forkeyinlate_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['linesRF_v'][key]forkeyinlate_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['intraRF_v'][key]forkeyinlate_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['flash_v'][key]forkeyinlate_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['linesRF_v'][key]forkeyinearly_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['intraRF_v'][key]forkeyinearly_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(membrane_potentials['flash_v'][key]forkeyinearly_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['linesRF_v'][key]forkeyinearly_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['intraRF_v'][key]forkeyinearly_2012_expts),CLUSTER_4,CLUSTER_11
data,numpy.stack(detrended_membrane_potentials['flash_v'][key]forkeyinearly_2012_expts),CLUSTER_4,CLUSTER_11
boxes,"numpy.loadtxt(h_file+'/'+'boxes.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
intraRF_v,"numpy.loadtxt(h_file+'/'+'intraRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
lines,"numpy.loadtxt(h_file+'/'+'lines.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
intraRF,"numpy.loadtxt(h_file+'/intraRF.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
linesRF,"numpy.loadtxt(h_file+'/linesRF.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flash,"numpy.loadtxt(h_file+'/flash.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
intraRF_v,"numpy.loadtxt(h_file+'/intraRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
linesRF_v,"numpy.loadtxt(h_file+'/linesRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flash_v,"numpy.loadtxt(h_file+'/flash_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
boxes,"numpy.loadtxt(h_file+'/boxes.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
lines,"numpy.loadtxt(h_file+'/lines.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flashStim,"numpy.loadtxt(h_file+'/flashStim.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
boxes,"numpy.loadtxt(h_file+'/boxes.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
lines,"numpy.loadtxt(h_file+'/lines.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flashStim,"numpy.loadtxt(h_file+'/flashStim.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
intraRF,"numpy.loadtxt(h_file+'/intraRF.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
linesRF,"numpy.loadtxt(h_file+'/linesRF.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flash,"numpy.loadtxt(h_file+'/flash.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
intraRF_v,"numpy.loadtxt(h_file+'/intraRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
linesRF_v,"numpy.loadtxt(h_file+'/linesRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flash_v,"numpy.loadtxt(h_file+'/flash_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
boxes,"numpy.loadtxt(h_file+'/boxes.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
lines,"numpy.loadtxt(h_file+'/lines.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flashStim,"numpy.loadtxt(h_file+'/flashStim.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
intraRF_v,"numpy.loadtxt(h_file+'/intraRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
linesRF_v,"numpy.loadtxt(h_file+'/linesRF_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
flash_v,"numpy.loadtxt(h_file+'/flash_v.txt',skiprows=1)",CLUSTER_4,CLUSTER_11
mem_pot_interp,"scipy.interpolate.interp1d(times[key],eval(key)",CLUSTER_4,CLUSTER_11
detrended_interp,"scipy.interpolate.interp1d(times[key],detrended_mem_pot,kind='linear',bounds_error=False,
fill_value='extrapolate')",CLUSTER_4,CLUSTER_11
mem_pot_interp,"scipy.interpolate.interp1d(times[key],eval(key)",CLUSTER_4,CLUSTER_11
detrended_interp,"scipy.interpolate.interp1d(times[key],detrended_mem_pot,kind='linear',bounds_error=False,
fill_value='extrapolate')",CLUSTER_4,CLUSTER_11
mem_pot_interp,"scipy.interpolate.interp1d(times[key],eval(key)",CLUSTER_4,CLUSTER_11
detrended_interp,"scipy.interpolate.interp1d(times[key],detrended_mem_pot,kind='linear',bounds_error=False,
fill_value='extrapolate')",CLUSTER_4,CLUSTER_11
detrended_mem_pot,scipy.signal.detrend(eval(key),CLUSTER_4,CLUSTER_11
detrended_mem_pot,scipy.signal.detrend(eval(key),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.gcf(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.gcf(),CLUSTER_4,CLUSTER_11
dfGender,"pandas.DataFrame(data=gender_onehot_encoded,columns=['F','M'])",CLUSTER_7,CLUSTER_5
dfAge,"pandas.DataFrame(data=age_onehot_encoded,columns=ageColumns)",CLUSTER_7,CLUSTER_5
dfOccupation,"pandas.DataFrame(data=occupation_onehot_encoded,columns=occupationColumns)",CLUSTER_7,CLUSTER_5
dfCityCat,"pandas.DataFrame(data=city_cat_onehot_encoded,columns=City_Cat_Columns)",CLUSTER_7,CLUSTER_5
NumPurchByAgeDf,pandas.DataFrame(NumPurchByAge),CLUSTER_7,CLUSTER_5
AvgPurchByAgeDf,pandas.DataFrame(AvgPurchByAge),CLUSTER_7,CLUSTER_5
TotalPurchByIDDf,pandas.DataFrame(TotalPurchByID),CLUSTER_7,CLUSTER_5
df2,"pandas.concat([df,dfGender,dfAge,dfOccupation,dfCityCat],axis=1,join='inner')",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('train1.csv'),CLUSTER_7,CLUSTER_5
values,numpy.array(data),CLUSTER_7,CLUSTER_5
gender,numpy.array(df['Gender']),CLUSTER_7,CLUSTER_5
ageArray,numpy.array(df['Age']),CLUSTER_7,CLUSTER_5
occupationArray,numpy.array(df['Occupation']),CLUSTER_7,CLUSTER_5
city_catArray,numpy.array(df['City_Category']),CLUSTER_7,CLUSTER_5
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_7,CLUSTER_5
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_7,CLUSTER_5
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_7,CLUSTER_5
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_7,CLUSTER_5
city_cat_onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(x=x,y=y,data=NumPurchByAgeDf)",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(x=x1,y=y1,data=AvgPurchByAgeDf)",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(x=x2,y=y2,data=TotalPurchByIDDf)",CLUSTER_7,CLUSTER_5
summary_table,"pandas.DataFrame({""MeanTumorVolume"":means,
""MedianTumorVolume"":medians,
""TumorVolumeVariance"":variances,
""TumorVolumeStd.Dev."":sds,
""TumorVolumeStd.Err."":sems})",CLUSTER_1,CLUSTER_9
combined_results,"pandas.merge(mouse_metadata,study_results,how=""left"",on=""MouseID"")",CLUSTER_1,CLUSTER_9
mouse_metadata,pandas.read_csv(mouse_metadata_path),CLUSTER_1,CLUSTER_9
study_results,pandas.read_csv(study_results_path),CLUSTER_1,CLUSTER_9
model,scipy.stats.linregress(capomulin_average['Weight(g),CLUSTER_1,CLUSTER_9
b1,"numpy.zeros((n_h,1)",CLUSTER_1,CLUSTER_10
b2,"numpy.zeros((n_y,1)",CLUSTER_1,CLUSTER_10
parameters['b'+str(l)],"numpy.zeros((layer_dims[l],1)",CLUSTER_1,CLUSTER_10
Z,"numpy.dot(W,A)",CLUSTER_1,CLUSTER_10
dA_prev,"numpy.dot(W.T,dZ)",CLUSTER_1,CLUSTER_10
cost,numpy.squeeze(cost),CLUSTER_1,CLUSTER_10
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_6,CLUSTER_10
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_6,CLUSTER_10
response,requests.get(img_path),CLUSTER_6,CLUSTER_10
df,"pandas.DataFrame(data_cleaned_stem,columns=['text','label','conf0','conf1','conf2'])",CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(dir_in+dataset_name+'.csv',encoding=""ISO-8859-1"")",CLUSTER_0,CLUSTER_1
idx_neg,numpy.where(df.label.values==0),CLUSTER_0,CLUSTER_1
idx_pos,numpy.where(df.label.values==1),CLUSTER_0,CLUSTER_1
idx_nut,numpy.where(df.label.values==2),CLUSTER_0,CLUSTER_1
idx_neg,numpy.where(df.label.values==0),CLUSTER_0,CLUSTER_1
idx_pos,numpy.where(df.label.values==1),CLUSTER_0,CLUSTER_1
idx_nut,numpy.where(df.label.values==2),CLUSTER_0,CLUSTER_1
test_indx,"numpy.concatenate((test_idx_neg,test_idx_pos,test_idx_nut)",CLUSTER_0,CLUSTER_1
val_indx,"numpy.concatenate((val_idx_neg,val_idx_pos,val_idx_nut)",CLUSTER_0,CLUSTER_1
tick_marks,numpy.arange(len(classes),CLUSTER_4,CLUSTER_0
X_train,"numpy.array(X_train_orig,dtype=np.float32)",CLUSTER_4,CLUSTER_0
X_test,"numpy.array(X_test_orig,dtype=np.float32)",CLUSTER_4,CLUSTER_0
Y_train,"numpy.array(Y_train_orig,dtype=np.float32)",CLUSTER_4,CLUSTER_0
Y_test,"numpy.array(Y_test_orig,dtype=np.float32)",CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(5,10,figsize=(15,6)",CLUSTER_4,CLUSTER_0
"(X_traing,X_val,Y_traing,Y_val)","sklearn.model_selection.train_test_split(X_train,Y_train,test_size=0.25,random_state=42,stratify=Y_train)",CLUSTER_4,CLUSTER_0
index,"random.randint(0,len(X_train_orig)",CLUSTER_4,CLUSTER_0
confm,"sklearn.metrics.confusion_matrix(Y_val_int,y_pred_int)",CLUSTER_4,CLUSTER_0
confm,"sklearn.metrics.confusion_matrix(y_test_int,y_pred_test_int)",CLUSTER_4,CLUSTER_0
f1,"sklearn.metrics.f1_score(Y_val_int,y_pred_int,average='weighted')",CLUSTER_4,CLUSTER_0
f1,"sklearn.metrics.f1_score(y_test_int,y_pred_test_int,average='weighted')",CLUSTER_4,CLUSTER_0
Re,"sklearn.metrics.recall_score(Y_val_int,y_pred_int,average='weighted')",CLUSTER_4,CLUSTER_0
Re,"sklearn.metrics.recall_score(y_test_int,y_pred_test_int,average='weighted')",CLUSTER_4,CLUSTER_0
plot_df,pandas.DataFrame(),CLUSTER_7,CLUSTER_3
fandango_score_comp,pandas.read_csv('fandango_score_comparison.csv'),CLUSTER_7,CLUSTER_3
movie_ratings,pandas.read_csv('movie_ratings_16_17.csv'),CLUSTER_7,CLUSTER_3
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,random_state=49)",CLUSTER_4,CLUSTER_11
"X,y","sklearn.datasets.make_moons(n_samples=500,noise=0.30,random_state=42)",CLUSTER_4,CLUSTER_11
rnd_clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_11
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,max_leaf_nodes=16,n_jobs=-1,random_state=42)",CLUSTER_4,CLUSTER_11
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,n_jobs=-1,random_state=42)",CLUSTER_4,CLUSTER_11
rnd_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_4,CLUSTER_11
voting_clf,"sklearn.ensemble.VotingClassifier(
estimators=[('lr',log_clf)",CLUSTER_4,CLUSTER_11
log_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_11
svm_clf,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_11
svm_clf,"sklearn.svm.SVC(kernel=""rbf"",C=0.05,random_state=42)",CLUSTER_4,CLUSTER_11
bag_clf,"sklearn.ensemble.BaggingClassifier(
DecisionTreeClassifier()",CLUSTER_4,CLUSTER_11
bag_clf,"sklearn.ensemble.BaggingClassifier(
DecisionTreeClassifier(random_state=42)",CLUSTER_4,CLUSTER_11
bag_clf,"sklearn.ensemble.BaggingClassifier(
DecisionTreeClassifier(splitter=""random"",max_leaf_nodes=16,random_state=42)",CLUSTER_4,CLUSTER_11
tree_clf,sklearn.tree.DecisionTreeClassifier(random_state=42),CLUSTER_4,CLUSTER_11
X_new,numpy.array([[0.8]]),CLUSTER_4,CLUSTER_11
sample_weights,numpy.ones(m),CLUSTER_4,CLUSTER_11
bst_n_estimators,numpy.argmin(errors),CLUSTER_4,CLUSTER_11
x1s,"numpy.linspace(axes[0],axes[1],100)",CLUSTER_4,CLUSTER_11
x2s,"numpy.linspace(axes[2],axes[3],100)",CLUSTER_4,CLUSTER_11
x1,"numpy.linspace(axes[0],axes[1],500)",CLUSTER_4,CLUSTER_11
"x1,x2","numpy.meshgrid(x1s,x2s)",CLUSTER_4,CLUSTER_11
iris,sklearn.datasets.load_iris(),CLUSTER_4,CLUSTER_11
ada_clf,"sklearn.ensemble.AdaBoostClassifier(
DecisionTreeClassifier(max_depth=1)",CLUSTER_4,CLUSTER_11
tree_reg1,"sklearn.tree.DecisionTreeRegressor(max_depth=2,random_state=42)",CLUSTER_4,CLUSTER_11
tree_reg2,"sklearn.tree.DecisionTreeRegressor(max_depth=2,random_state=42)",CLUSTER_4,CLUSTER_11
tree_reg3,"sklearn.tree.DecisionTreeRegressor(max_depth=2,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=3,learning_rate=1.0,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt_underfit,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=3,learning_rate=0.1,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt_slow,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=200,learning_rate=0.1,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=120,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt_best,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=bst_n_estimators,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,warm_start=True,random_state=42)",CLUSTER_4,CLUSTER_11
val_error,"sklearn.metrics.mean_squared_error(y_val,y_pred)",CLUSTER_4,CLUSTER_11
dataset,"pandas.read_csv('dataset/dataset-normalizado.csv',header=0)",CLUSTER_7,CLUSTER_3
confusion,"
pandas.DataFrame(confusion,
columns=['predicted_home_win','predicted_home_loss'],
index=['predicted_home_win','predicted_home_loss'])",CLUSTER_7,CLUSTER_5
coef_df,"pandas.DataFrame({'coef':best_lr.coef_[0],
'feature':X.columns,
'abs_coef':np.abs(best_lr.coef_[0])",CLUSTER_7,CLUSTER_5
data,pandas.read_csv('./datasets/basketball_data.csv'),CLUSTER_7,CLUSTER_5
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
knn,"
sklearn.model_selection.cross_val_score()",CLUSTER_7,CLUSTER_5
lr,"
sklearn.model_selection.cross_val_score()",CLUSTER_7,CLUSTER_5
knn_gridsearch,sklearn.model_selection.GridSearchCV(KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
lr_gridsearch,sklearn.model_selection.GridSearchCV(),CLUSTER_7,CLUSTER_5
actionindex,"numpy.zeros(self.num_actions,dtype=np.int)",CLUSTER_3,CLUSTER_6
feature,numpy.concatenate([actionindex[i]*stateforiinself.actions]),CLUSTER_3,CLUSTER_6
pic_arr,numpy.asarray(pic),CLUSTER_1,CLUSTER_10
iris,pandas.read_csv('../data/iris.csv'),CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(X),CLUSTER_5,CLUSTER_1
df,"pandas.concat(rows,axis=1)",CLUSTER_5,CLUSTER_1
candidates,numpy.flatnonzero(results['rank_test_score']==i),CLUSTER_5,CLUSTER_1
all_scores,numpy.hstack(scores),CLUSTER_5,CLUSTER_1
dataset,sklearn.datasets.load_breast_cancer(),CLUSTER_5,CLUSTER_1
clf,"sklearn.linear_model.LogisticRegression(solver='lbfgs',max_iter=1000,penalty='none')",CLUSTER_5,CLUSTER_1
clf,"sklearn.linear_model.LogisticRegression(solver='lbfgs',max_iter=1000,penalty='l2')",CLUSTER_5,CLUSTER_1
clf,"sklearn.linear_model.LogisticRegression(solver='lbfgs',max_iter=1000,penalty='l2',class_weight='balanced')",CLUSTER_5,CLUSTER_1
res,"sklearn.metrics.confusion_matrix(y_train,yp_train)",CLUSTER_5,CLUSTER_1
res2,"sklearn.metrics.confusion_matrix(y_test,yp_test)",CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=2)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('clf',clf)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('clf',clf)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_1
clf,sklearn.svm.SVC(gamma='auto'),CLUSTER_5,CLUSTER_1
svc,"sklearn.svm.SVC(gamma=""scale"")",CLUSTER_5,CLUSTER_1
clf,"sklearn.svm.SVC(kernel='linear',C=100,gamma='auto')",CLUSTER_5,CLUSTER_1
clf,"sklearn.model_selection.GridSearchCV(svc,param_grid,cv=5,verbose=0)",CLUSTER_5,CLUSTER_1
gs,"sklearn.model_selection.GridSearchCV(model,params,cv=cv,n_jobs=n_jobs,
verbose=verbose,scoring=scoring,refit=refit,
return_train_score=True)",CLUSTER_5,CLUSTER_1
graph_data,json.load(json_file),CLUSTER_12,CLUSTER_12
solution,json.load(json_file),CLUSTER_12,CLUSTER_12
features,"pandas.read_csv(""../Resources/features.csv"")",CLUSTER_11,CLUSTER_5
"np.where(features[""Unemployment""].values>",numpy.finfo(np.float64),CLUSTER_11,CLUSTER_5
"train_WM,test_WM","sklearn.model_selection.train_test_split(features,test_size=0.3,random_state=42)",CLUSTER_11,CLUSTER_5
"train_features,test_features","sklearn.model_selection.train_test_split(features,test_size=0.3,random_state=42

print(train_features.shape,test_features.shape)",CLUSTER_11,CLUSTER_5
features_Linear,sklearn.linear_model.LinearRegression(normalize=True),CLUSTER_11,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_6,CLUSTER_10
filter_vals,"numpy.array([[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1]])",CLUSTER_6,CLUSTER_10
filters,"numpy.array([filter_1,filter_2,filter_3,filter_4])",CLUSTER_6,CLUSTER_10
x,"numpy.expand_dims(x,axis=0)",CLUSTER_12,CLUSTER_10
data,"pandas.DataFrame(data={""menu"":1,""id"":idd,""name"":name,""businessCategory"":businessCategory,""category"":category,""desc"":desc,
""microReview"":microReview,""tags"":tags,""options"":options,""totalReviewCount"":totalReviewCount,
""roadAddr"":roadAddr,""commonAddr"":commonAddr,""addr"":addr,""phone"":phone,""x"":x,""y"":y,
""imageSrc"":imageSrc},columns=col)",CLUSTER_9,CLUSTER_12
r_list,json.loads(r_list),CLUSTER_9,CLUSTER_12
unique_vals,numpy.unique(raw_data[column]),CLUSTER_7,CLUSTER_5
Coeff_df,"pandas.DataFrame(Coeff,columns=[X2.columns])",CLUSTER_7,CLUSTER_5
new_raw_data,"pandas.get_dummies(raw_data,columns=['Promo','Day_Name'])",CLUSTER_7,CLUSTER_5
raw_data,pandas.read_csv(r'C:\Users\chest\OneDrive\Desktop\Marketing\dataset\MarketingRawData.csv'),CLUSTER_7,CLUSTER_5
g,"seaborn.boxplot(x='Day_Name',y='Revenue',data=raw_data,hue='Promo',palette=pal)",CLUSTER_7,CLUSTER_5
g,"seaborn.heatmap(hm,annot=True,annot_kws={'size':40})",CLUSTER_7,CLUSTER_5
g,"seaborn.lmplot(x='MarketingSpend',y='Revenue',data=raw_data,col='Day_Name',col_wrap=3,height=5,
scatter_kws={'color':'green'},ci=False)",CLUSTER_7,CLUSTER_5
g,seaborn.pairplot(raw_data),CLUSTER_7,CLUSTER_5
g,"seaborn.pairplot(raw_data[['Visitors','Revenue','MarketingSpend','Promo']],hue='Promo',height=5)",CLUSTER_7,CLUSTER_5
g,"seaborn.pairplot(raw_data[['Visitors','Revenue','MarketingSpend','Day_Name']],hue='Day_Name',height=5)",CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_7,CLUSTER_5
dt,"sklearn.tree.DecisionTreeClassifier(random_state=15,criterion='entropy',max_depth=10)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=0.80,test_size=0.2,random_state=15)",CLUSTER_7,CLUSTER_5
parkinson_data,"pandas.read_csv(""Parkinson-disease-data-updated"")",CLUSTER_5,CLUSTER_5
indices,numpy.argsort(etc.feature_importances_),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(scled_features,labels,test_size=0.3)",CLUSTER_5,CLUSTER_5
etc,sklearn.ensemble.ExtraTreesClassifier(n_estimators=300),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_5
new_knn,"sklearn.neighbors.KNeighborsClassifier(algorithm='auto',leaf_size=30,metric='minkowski',
metric_params=None,n_jobs=1,n_neighbors=3,p=1,
weights='uniform')",CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
lr_tuned,"sklearn.linear_model.LogisticRegression(C=1000,penalty='l2')",CLUSTER_5,CLUSTER_5
dtc,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_5
rfc,sklearn.ensemble.RandomForestClassifier(n_estimators=350),CLUSTER_5,CLUSTER_5
sub_train,pandas.DataFrame(app_train['WEEKDAY_APPR_PROCESS_START']),CLUSTER_8,CLUSTER_11
dummy_sub_train,"pandas.get_dummies(sub_train[""WEEKDAY_APPR_PROCESS_START""])",CLUSTER_8,CLUSTER_11
app_train,pandas.read_csv(f_app_train),CLUSTER_8,CLUSTER_11
data,"numpy.array([1,3,5,2,3,7,8,4,10,0,6,7,3,0,3,0,5,7,10,1,4,9,3])",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame([[10,20,30,40],[7,14,21,28],[55,15,8,12],
[15,14,1,8],[7,1,1,8],[5,4,9,2]],
columns=['Apple','Orange','Banana','Pear'],
index=['Basket1','Basket2','Basket3','Basket4',
'Basket5','Basket6'])",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('titanic.csv'),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('titanic.csv'),CLUSTER_1,CLUSTER_3
means,pandas.DataFrame(returns.tail(30),CLUSTER_7,CLUSTER_3
std,pandas.DataFrame(returns.tail(30),CLUSTER_7,CLUSTER_3
df,"pandas.concat(data,sort=True)",CLUSTER_7,CLUSTER_3
ratios,"pandas.concat([means,std],axis=1)",CLUSTER_7,CLUSTER_3
companies,pandas.read_csv(path),CLUSTER_7,CLUSTER_3
chart,"seaborn.barplot(data=df,x=x,y=y)",CLUSTER_7,CLUSTER_3
cmap,"seaborn.diverging_palette(6,255,as_cmap=True)",CLUSTER_7,CLUSTER_3
chart,"seaborn.heatmap(corr,mask=mask,cmap=cmap,center=0,linewidths=.5,annot=True,fmt='.2f')",CLUSTER_7,CLUSTER_3
weights,numpy.array(np.random.random(5),CLUSTER_7,CLUSTER_3
all_weights,"numpy.zeros((num_ports,len(pivot2.columns)",CLUSTER_7,CLUSTER_3
ret_arr,numpy.zeros(num_ports),CLUSTER_7,CLUSTER_3
vol_arr,numpy.zeros(num_ports),CLUSTER_7,CLUSTER_3
sharpe_arr,numpy.zeros(num_ports),CLUSTER_7,CLUSTER_3
mask,"numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_7,CLUSTER_3
ret_arr[x],numpy.sum((log_ret.mean(),CLUSTER_7,CLUSTER_3
log_ret,numpy.log(pivot2/pivot2.shift(1),CLUSTER_7,CLUSTER_3
vol_arr[x],"numpy.sqrt(np.dot(weights.T,np.dot(log_ret.cov()",CLUSTER_7,CLUSTER_3
df_sample,pandas.DataFrame(df),CLUSTER_5,CLUSTER_1
df,"pandas.read_csv(file_name,encoding='ANSI')",CLUSTER_5,CLUSTER_1
data,"numpy.array(df.iloc[:,0])",CLUSTER_5,CLUSTER_1
target,"numpy.array(df.iloc[:,1])",CLUSTER_5,CLUSTER_1
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(clf,arr[n:],target[n:],cv=5)",CLUSTER_5,CLUSTER_1
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_1
clf_pf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_1
dataset,"pandas.DataFrame({
'sma_60':sma_60,
'sma_20':sma_20,
'sma_5':sma_5,
'k':k,
'd':d,
'rsi':rsi
})",CLUSTER_7,CLUSTER_5
dataset_scaled,"pandas.DataFrame(dataset_scaled,columns=dataset.columns,index=dataset.index)",CLUSTER_7,CLUSTER_5
exp_y,"pandas.Series(exp_y,index=train_x.index)",CLUSTER_7,CLUSTER_5
exp_test_y,"pandas.Series(exp_test_y,index=test_x.index)",CLUSTER_7,CLUSTER_5
predict_df,"pandas.Series(predict,index=inputX.index)",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv('2317.TW.csv',index_col='Date')",CLUSTER_7,CLUSTER_5
"precisions,recalls,thresholds","sklearn.metrics.precision_recall_curve(test_y,exp_test_y)",CLUSTER_7,CLUSTER_5
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
white_bgd,"numpy.full((bgd_h,bgd_w,3)",CLUSTER_4,CLUSTER_7
max_index,numpy.argmax(areas),CLUSTER_4,CLUSTER_7
obj_index,"random.randint(0,len(obj_names_lst)",CLUSTER_4,CLUSTER_7
obj_x,"random.randint(0,bgd_w-obj_w-1)",CLUSTER_4,CLUSTER_7
obj_y,"random.randint(0,bgd_h-obj_h-1)",CLUSTER_4,CLUSTER_7
train_csv,pandas.read_csv('./data/train.csv'),CLUSTER_7,CLUSTER_8
test_csv,pandas.read_csv('./data/test.csv'),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(20,4)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
Mscaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
labels,"pandas.read_csv('datasets/labels.csv',index_col=0)",CLUSTER_5,CLUSTER_5
X,numpy.array(image_list),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(1),CLUSTER_5,CLUSTER_5
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
"x_interim,x_eval,y_interim,y_eval","sklearn.model_selection.train_test_split(X,
y,
test_size=0.2,
random_state=52)",CLUSTER_5,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_interim,
y_interim,
test_size=0.4,
random_state=52)",CLUSTER_5,CLUSTER_5
freq,collections.defaultdict(int),CLUSTER_10,CLUSTER_4
df,pandas.DataFrame(data=d),CLUSTER_8,CLUSTER_3
new_df,pandas.DataFrame(data=new_df),CLUSTER_8,CLUSTER_3
data,"pandas.read_csv('movies.txt',sep="""",header=None)",CLUSTER_8,CLUSTER_3
movie,pandas.read_fwf('movies.txt'),CLUSTER_8,CLUSTER_3
df,"pandas.read_table('movies.txt',header=None)",CLUSTER_8,CLUSTER_3
wordset,numpy.genfromtxt(fname='temp.txt'),CLUSTER_8,CLUSTER_3
content,json.load(fin),CLUSTER_8,CLUSTER_3
summary_table,"pandas.DataFrame({""VehicleMake"":count_cars
})",CLUSTER_1,CLUSTER_3
motor_vehicle_df,"pandas.read_csv(file,encoding=""ISO-8859-1"")",CLUSTER_1,CLUSTER_3
state_count_df,"pandas.read_csv(state,encoding=""ISO-8859-1"")",CLUSTER_1,CLUSTER_3
x_axis,numpy.arange(len(edit_table),CLUSTER_1,CLUSTER_3
x_axis,numpy.arange(len(df1),CLUSTER_1,CLUSTER_3
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_5,CLUSTER_10
grid,"sklearn.model_selection.GridSearchCV(knn,param_grid,cv=10,scoring='accuracy')",CLUSTER_5,CLUSTER_10
classifier,"sklearn.ensemble.RandomForestClassifier(oob_score=True,n_estimators=20,max_depth=5)",CLUSTER_5,CLUSTER_10
data,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_10
self.graph,collections.defaultdict(list),CLUSTER_0,CLUSTER_10
self.graph,collections.defaultdict(list),CLUSTER_0,CLUSTER_10
self.graph,collections.defaultdict(list),CLUSTER_0,CLUSTER_10
start3,time.time(),CLUSTER_0,CLUSTER_10
end3,time.time(),CLUSTER_0,CLUSTER_10
start3,time.time(),CLUSTER_0,CLUSTER_10
end3,time.time(),CLUSTER_0,CLUSTER_10
start1,time.time(),CLUSTER_0,CLUSTER_10
end1,time.time(),CLUSTER_0,CLUSTER_10
start2,time.time(),CLUSTER_0,CLUSTER_10
end2,time.time(),CLUSTER_0,CLUSTER_10
index,numpy.arange(len(label),CLUSTER_0,CLUSTER_10
lower_green,"numpy.array([hmin,s,v])",CLUSTER_1,CLUSTER_10
upper_green,"numpy.array([hmax,255,255])",CLUSTER_1,CLUSTER_10
img,"numpy.zeros((300,512,3)",CLUSTER_1,CLUSTER_10
hsv,"numpy.zeros((300,512,3)",CLUSTER_1,CLUSTER_10
hminsv,"numpy.zeros((100,200,3)",CLUSTER_1,CLUSTER_10
hmaxsv,"numpy.zeros((100,200,3)",CLUSTER_1,CLUSTER_10
row_indices,numpy.arange(4),CLUSTER_12,CLUSTER_9
col_indices,numpy.arange(4),CLUSTER_12,CLUSTER_9
x,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_12,CLUSTER_9
X_new,"numpy.array([[5,2.9,1,0.2]])",CLUSTER_12,CLUSTER_9
data,numpy.ones(4),CLUSTER_12,CLUSTER_9
y,numpy.sin(x),CLUSTER_12,CLUSTER_9
x,"numpy.linspace(-10,10,100)",CLUSTER_12,CLUSTER_9
eye,numpy.eye(4),CLUSTER_12,CLUSTER_9
eye_coo,"scipy.sparse.coo_matrix((data,(row_indices,col_indices)",CLUSTER_12,CLUSTER_9
sparse_matrix,scipy.sparse.csr_matrix(eye),CLUSTER_12,CLUSTER_9
data_pandas,pandas.DataFrame(data),CLUSTER_12,CLUSTER_9
iris_dataframe,"pandas.DataFrame(X_train,columns=iris_dataset.feature_names)",CLUSTER_12,CLUSTER_9
iris_dataset,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
iris_dataset['data'],iris_dataset['target'],random_state=0)",CLUSTER_12,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
iris_dataset['data'],iris_dataset['target'],random_state=0)",CLUSTER_12,CLUSTER_9
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_12,CLUSTER_9
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_12,CLUSTER_9
sub_train,pandas.DataFrame(app_train['WEEKDAY_APPR_PROCESS_START']),CLUSTER_5,CLUSTER_1
app_train,pandas.get_dummies(app_train),CLUSTER_5,CLUSTER_1
app_test,pandas.get_dummies(app_test),CLUSTER_5,CLUSTER_1
app_train,pandas.read_csv(f_app_train),CLUSTER_5,CLUSTER_1
app_test,pandas.read_csv(f_app_test),CLUSTER_5,CLUSTER_1
app_train,pandas.read_csv(f_app_train),CLUSTER_5,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
ax,"matplotlib.pyplot.subplot(1,batch_size,i+1)",CLUSTER_6,CLUSTER_10
image,"numpy.transpose(image,(1,2,0)",CLUSTER_6,CLUSTER_10
measurements_df,"pandas.read_csv(""clean_hawaii_measurements.csv"")",CLUSTER_8,CLUSTER_3
stations,"pandas.read_csv(""clean_hawaii_stations.csv"")",CLUSTER_8,CLUSTER_3
pixels,numpy.asarray(image),CLUSTER_4,CLUSTER_11
pima,"pandas.read_csv(""diabetes.csv"")",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=0)",CLUSTER_8,CLUSTER_1
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
d,"datetime.date(2010,10,4)",CLUSTER_10,CLUSTER_12
d,"datetime.date(2010,10,4)",CLUSTER_10,CLUSTER_12
d2,"datetime.datetime(2020,1,3)",CLUSTER_10,CLUSTER_12
testcases_files,os.listdir(testcases_path),CLUSTER_4,CLUSTER_7
testcases_files,os.listdir(testcases_path),CLUSTER_4,CLUSTER_7
testcases_files,os.listdir(testcases_path),CLUSTER_4,CLUSTER_7
pred_df,pandas.DataFrame(pred_dict),CLUSTER_4,CLUSTER_7
pred_df,pandas.DataFrame(pred_dict),CLUSTER_4,CLUSTER_7
pred_df,pandas.DataFrame(pred_dict),CLUSTER_4,CLUSTER_7
df_essay,"pandas.read_csv(testing_path,engine='python')",CLUSTER_4,CLUSTER_7
df_essay,"pandas.read_csv(testing_path,engine='python')",CLUSTER_4,CLUSTER_7
df_essay,"pandas.read_csv(testing_path,engine='python')",CLUSTER_4,CLUSTER_7
preds,numpy.clip(np.round(preds),CLUSTER_4,CLUSTER_7
preds,numpy.clip(np.round(preds),CLUSTER_4,CLUSTER_7
preds,numpy.clip(np.round(preds),CLUSTER_4,CLUSTER_7
preds,numpy.clip(np.round(preds),CLUSTER_4,CLUSTER_7
preds,numpy.clip(np.round(preds),CLUSTER_4,CLUSTER_7
preds,numpy.clip(np.round(preds),CLUSTER_4,CLUSTER_7
test_preds,"numpy.append(test_preds,predsF)",CLUSTER_4,CLUSTER_7
test_preds,"numpy.append(test_preds,preds2[ite])",CLUSTER_4,CLUSTER_7
test_preds,"numpy.append(test_preds,predsF)",CLUSTER_4,CLUSTER_7
test_preds,"numpy.append(test_preds,preds2[ite])",CLUSTER_4,CLUSTER_7
test_preds,"numpy.append(test_preds,predsF)",CLUSTER_4,CLUSTER_7
test_preds,"numpy.append(test_preds,preds2[ite])",CLUSTER_4,CLUSTER_7
freqs,pandas.Series(train_seqs),CLUSTER_0,CLUSTER_5
df,pandas.read_csv('complaints-balanced.csv'),CLUSTER_0,CLUSTER_5
sss,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,
test_size=0.3,
random_state=0)",CLUSTER_0,CLUSTER_5
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_0,CLUSTER_5
tick_marks,numpy.arange(len(my_tags),CLUSTER_0,CLUSTER_5
embedding_matrix,"numpy.zeros((vocab_size,embedding_dim)",CLUSTER_0,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(target,predictions,labels=my_tags)",CLUSTER_0,CLUSTER_5
heatmap,"pandas.pivot_table(data,values='e',index='weekday',columns='hour',aggfunc='count')",CLUSTER_7,CLUSTER_3
data,pandas.read_csv('data/911.csv'),CLUSTER_7,CLUSTER_3
data['timeStamp'],pandas.to_datetime(data['timeStamp']),CLUSTER_7,CLUSTER_3
df,"pandas.read_csv(""conversational_data.csv"",usecols=['text','replies__text'])",CLUSTER_0,CLUSTER_5
REPLACE_BY_SPACE_RE,re.compile('[/(),CLUSTER_0,CLUSTER_5
BAD_SYMBOLS_RE,"re.compile('[^0-9a-z
STOPWORDS=set(stopwords.words('english')",CLUSTER_0,CLUSTER_5
start,time.time(),CLUSTER_4,CLUSTER_7
"fig,axs","matplotlib.pyplot.subplots(2,2,figsize=(10,10)",CLUSTER_4,CLUSTER_7
"fig,axs","matplotlib.pyplot.subplots(2,2,figsize=(10,10)",CLUSTER_4,CLUSTER_7
fake,"numpy.zeros((BATCH_SIZE,16,16,1)",CLUSTER_4,CLUSTER_7
valid,"numpy.ones((BATCH_SIZE,16,16,1)",CLUSTER_4,CLUSTER_7
twitter_count,"pandas.DataFrame(twitter_count['tweet_counts'],
columns=['tweet_id','retweet_count','favorite_count'])",CLUSTER_9,CLUSTER_2
counts_s,"pandas.Series(counts_df['counts'].values,index=counts_df['stages'],name='')",CLUSTER_9,CLUSTER_2
twitter_archive_clean,"pandas.melt(twitter_archive_clean,
id_vars=['tweet_id','in_reply_to_status_id','in_reply_to_user_id','timestamp','source',
'text','retweeted_status_id','retweeted_status_user_id',
'retweeted_status_timestamp','expanded_urls','rating_numerator',
'rating_denominator','name'],
value_vars=['doggo','floofer','pupper','puppo','no_stage'],
var_name='category',value_name='stage')",CLUSTER_9,CLUSTER_2
twitter_archive_clean,"pandas.merge(twitter_archive_clean,twitter_count_clean,
on=['tweet_id'],how='left')",CLUSTER_9,CLUSTER_2
twitter_archive_master,"pandas.merge(twitter_archive_clean,predictions_clean,
on=['tweet_id'],how='left')",CLUSTER_9,CLUSTER_2
twitter_archive,"pandas.read_csv('twitter-archive-enhanced.csv',encoding='utf-8')",CLUSTER_9,CLUSTER_2
predictions,"pandas.read_csv('image-predictions.tsv',sep='\t')",CLUSTER_9,CLUSTER_2
twitter_archive_master,"pandas.read_csv('twitter_archive_master.csv',encoding='utf-8')",CLUSTER_9,CLUSTER_2
twitter_archive_clean.timestamp,pandas.to_datetime(twitter_archive_clean.timestamp),CLUSTER_9,CLUSTER_2
twitter_archive_clean.retweeted_status_timestamp,pandas.to_datetime(twitter_archive_clean.retweeted_status_timestamp),CLUSTER_9,CLUSTER_2
n,numpy.arange(len(dog_stages),CLUSTER_9,CLUSTER_2
twitter_count,json.load(file),CLUSTER_9,CLUSTER_2
df,"pandas.read_csv(r'LION_PressureTags_2017_04_24_to_2017_08_07.csv',sep='\t',usecols=['last_active_time','UARegPilotPes','UARegRdbakPes','pod_pilot_pres_podtrans','pod_supply_pres_podtrans','upper_ann_open_current','upper_ann_close_current','pod_2_adj','pod_1_adj','Active'])",CLUSTER_1,CLUSTER_3
df['last_active_time'],pandas.to_datetime(df['last_active_time']),CLUSTER_1,CLUSTER_3
df_temp['UARegPilotPes_adj'],"numpy.where(df_temp['Active']==1,df_temp['UARegPilotPes']-df_temp['pod_1_adj'],df_temp['UARegPilotPes']-df_temp['pod_2_adj'])",CLUSTER_1,CLUSTER_3
df_temp['UARegRdbakPes_adj'],"numpy.where(df_temp['Active']==1,df_temp['UARegRdbakPes']-df_temp['pod_1_adj'],df_temp['UARegRdbakPes']-df_temp['pod_2_adj'])",CLUSTER_1,CLUSTER_3
df_temp['pod_pilot_pres_podtrans_adj'],"numpy.where(df_temp['Active']==1,df_temp['pod_pilot_pres_podtrans']-df_temp['pod_1_adj'],df_temp['pod_pilot_pres_podtrans']-df_temp['pod_2_adj'])",CLUSTER_1,CLUSTER_3
df_temp['pod_supply_pres_podtrans_adj'],"numpy.where(df_temp['Active']==1,df_temp['pod_supply_pres_podtrans']-df_temp['pod_1_adj'],df_temp['pod_supply_pres_podtrans']-df_temp['pod_2_adj'])",CLUSTER_1,CLUSTER_3
multa1,"pandas.read_csv('multas/201806_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
set18,"pandas.read_csv('multas/201809_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
oct18,"pandas.read_csv('multas/201810_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
nov18,"pandas.read_csv('multas/201811_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
dic18,"pandas.read_csv('multas/201812_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
ene19,"pandas.read_csv('multas/201901_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
feb19,"pandas.read_csv('multas/201902_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
mar19,"pandas.read_csv('multas/201903_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
abr19,"pandas.read_csv('multas/201904_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
may19,"pandas.read_csv('multas/201905_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
jun19,"pandas.read_csv('multas/201906_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
jul19,"pandas.read_csv('multas/201907_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
ago19,"pandas.read_csv('multas/201908_detalle.csv',sep=';',encoding='windows-1250',index_col=False,header=0)",CLUSTER_8,CLUSTER_3
multa1,"pandas.read_csv('multas/201806_detalle.csv',sep=';',encoding='iso-8859-1',header=0)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('multasS18A19.csv',keep_default_na=False,na_values=[""""])",CLUSTER_8,CLUSTER_3
park_gu,pandas.DataFrame(park_daejeon['구군'].value_counts(),CLUSTER_1,CLUSTER_3
park_gu_normalize,pandas.DataFrame(park_daejeon['구군'].value_counts(normalize=True),CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(""C:/Users/joyh1/Desktop/DSC/Inflearn강의자료/데이터분석/data/전국도시공원표준데이터.csv"",encoding='euc-kr')",CLUSTER_1,CLUSTER_3
scores_window,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
count_by_tags,collections.defaultdict(int),CLUSTER_11,CLUSTER_12
tags_by_date,collections.defaultdict(list),CLUSTER_11,CLUSTER_12
date_tag,collections.defaultdict(list),CLUSTER_11,CLUSTER_12
date_tag_republican,collections.defaultdict(list),CLUSTER_11,CLUSTER_12
date_tag_democrats,collections.defaultdict(list),CLUSTER_11,CLUSTER_12
tags,collections.defaultdict(list),CLUSTER_11,CLUSTER_12
tags_by_count,collections.defaultdict(int),CLUSTER_11,CLUSTER_12
date_in_type,"datetime.datetime(date_in_type[0],date_in_type[1],date_in_type[2])",CLUSTER_11,CLUSTER_12
df_date_tag,pandas.DataFrame(taggis),CLUSTER_11,CLUSTER_12
df,"pandas.DataFrame(predictions,columns=['uid','iid','rui','est','details'])",CLUSTER_8,CLUSTER_3
product_info,pandas.read_csv('../data/CatfoodProductInfo.csv'),CLUSTER_8,CLUSTER_3
reviews,pandas.read_csv('../data/CatfoodReviewsInfo.csv'),CLUSTER_8,CLUSTER_3
xm,numpy.mean(x_ex),CLUSTER_1,CLUSTER_10
xm,numpy.mean(x),CLUSTER_1,CLUSTER_10
xs,"numpy.std(x_ex,ddof=1)",CLUSTER_1,CLUSTER_10
xs,"numpy.std(x,ddof=1)",CLUSTER_1,CLUSTER_10
comp,numpy.transpose(np.asarray(d18O_all),CLUSTER_1,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(7,1,figsize=(8,11)",CLUSTER_1,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(7,1,figsize=(8,11)",CLUSTER_1,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(7,1,figsize=(8,11)",CLUSTER_1,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(7,1,figsize=(8,11)",CLUSTER_1,CLUSTER_10
df_labels,pandas.read_csv('labels.csv'),CLUSTER_6,CLUSTER_11
df3,"pandas.merge(df2,lat_lon,how='left',left_on='Postalcode',right_on='PostalCode')",CLUSTER_9,CLUSTER_2
lat_lon,pandas.read_csv('http://cocl.us/Geospatial_data'),CLUSTER_9,CLUSTER_2
df_s,pandas.read_html(tab),CLUSTER_9,CLUSTER_2
x,numpy.arange(k),CLUSTER_9,CLUSTER_2
df2['Neighborhood'],"numpy.where(df2['Neighborhood']=='Notassigned',df2['Borough'],df2['Neighborhood'])",CLUSTER_9,CLUSTER_2
source,requests.get('https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M'),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=k,random_state=0)",CLUSTER_9,CLUSTER_2
stat_summary_df,"pandas.DataFrame({'mean':mean_tum_vol,
'median':median_tum_vol,
'variance':var_tum_vol,
'standarddeviation':[std_tum_vol],
'SEM':sem_tum_vol})",CLUSTER_5,CLUSTER_9
mouse_metadata_df,pandas.read_csv(mouse_metadata),CLUSTER_5,CLUSTER_9
study_results_df,pandas.read_csv(study_results),CLUSTER_5,CLUSTER_9
tum_vol_array,numpy.array(avg_tum_vol),CLUSTER_5,CLUSTER_9
weight_array,numpy.array(avg_weight),CLUSTER_5,CLUSTER_9
v,"numpy.minimum(a,b)",CLUSTER_5,CLUSTER_9
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
train_img,numpy.array([ImportImage(img),CLUSTER_4,CLUSTER_0
predicted_args,numpy.argsort(y),CLUSTER_4,CLUSTER_0
predicted_args,numpy.argsort(y),CLUSTER_4,CLUSTER_0
predicted_args,numpy.argsort(y),CLUSTER_4,CLUSTER_0
predicted_args,numpy.argsort(y),CLUSTER_4,CLUSTER_0
train_data,"numpy.load(open('bottleneck_features_train.npy','rb')",CLUSTER_4,CLUSTER_0
train_data,"numpy.load(open(working_path+'/bottleneck_features_train.npy','rb')",CLUSTER_4,CLUSTER_0
train_data,"numpy.load(open('/Users/freefrog/Studing/DataScience/bottleneck_features_train.npy','rb')",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(working_path+""/inputs/train.csv"")",CLUSTER_4,CLUSTER_0
self.ohe,sklearn.preprocessing.OneHotEncoder(),CLUSTER_4,CLUSTER_0
self.le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_0
r,requests.get(url),CLUSTER_10,CLUSTER_12
r2,requests.get(url2),CLUSTER_10,CLUSTER_12
individualUrlText,requests.get('https://www.ptt.cc'+d.find('a'),CLUSTER_10,CLUSTER_12
individualUrlText,requests.get('https://www.ptt.cc'+d.find('a'),CLUSTER_10,CLUSTER_12
r,requests.get(url),CLUSTER_10,CLUSTER_12
individualUrlText,requests.get('https://www.ptt.cc'+d.find('a'),CLUSTER_10,CLUSTER_12
z,"numpy.arange(0,1.5,0.1)",CLUSTER_1,CLUSTER_10
l,"numpy.arange(-0.5,1.5,0.1)",CLUSTER_1,CLUSTER_10
p,"numpy.arange(-2,2,0.1)",CLUSTER_1,CLUSTER_10
q,"numpy.arange(-2,2,0.1)",CLUSTER_1,CLUSTER_10
p,"numpy.arange(-2,2,0.1)",CLUSTER_1,CLUSTER_10
q,"numpy.arange(-2,2,0.1)",CLUSTER_1,CLUSTER_10
p,"numpy.arange(-2,2,0.1)",CLUSTER_1,CLUSTER_10
q,"numpy.arange(-2,2,0.1)",CLUSTER_1,CLUSTER_10
data,numpy.asarray(data),CLUSTER_1,CLUSTER_10
data,numpy.asarray(data),CLUSTER_1,CLUSTER_10
data_vis,numpy.asarray(data_vis),CLUSTER_1,CLUSTER_10
w,numpy.zeros(len(X[1]),CLUSTER_1,CLUSTER_10
P,"numpy.inner(W_csv1,num)",CLUSTER_1,CLUSTER_10
P,"numpy.inner(W_csv2,num)",CLUSTER_1,CLUSTER_10
P,"numpy.inner(W_csv3,num)",CLUSTER_1,CLUSTER_10
F6,"numpy.cos(X_csv2[:,1:3])",CLUSTER_1,CLUSTER_10
F2,"numpy.multiply(X_csv2[:,1],X_csv2[:,2])",CLUSTER_1,CLUSTER_10
F7,"numpy.multiply(Xv[:,1],Xv[:,2])",CLUSTER_1,CLUSTER_10
F4,"numpy.multiply(X_csv3[:,1],X_csv3[:,2])",CLUSTER_1,CLUSTER_10
F6,"numpy.multiply(Xv[:,1],Xv[:,2])",CLUSTER_1,CLUSTER_10
F5,"numpy.sin(X_csv2[:,1:3])",CLUSTER_1,CLUSTER_10
F_csv1,"numpy.square(X_csv1[:,1:3])",CLUSTER_1,CLUSTER_10
F3,"numpy.square(X_csv2[:,1:3])",CLUSTER_1,CLUSTER_10
F8,"numpy.square(Xv[:,1:3])",CLUSTER_1,CLUSTER_10
F3,"numpy.square(X_csv3[:,1:3])",CLUSTER_1,CLUSTER_10
F5,"numpy.square(Xv[:,1:3])",CLUSTER_1,CLUSTER_10
F_csv2,"numpy.hstack((F2,F3)",CLUSTER_1,CLUSTER_10
F9,"numpy.hstack((F7,F8)",CLUSTER_1,CLUSTER_10
F5,"numpy.hstack((F3,F4)",CLUSTER_1,CLUSTER_10
F7,"numpy.hstack((F5,F6)",CLUSTER_1,CLUSTER_10
"P,Q","numpy.meshgrid(p,q)",CLUSTER_1,CLUSTER_10
"P,Q","numpy.meshgrid(p,q)",CLUSTER_1,CLUSTER_10
"P,Q","numpy.meshgrid(p,q)",CLUSTER_1,CLUSTER_10
X,"numpy.insert(X,0,1,axis=1)",CLUSTER_1,CLUSTER_10
X,"numpy.insert(X,0,1,axis=1)",CLUSTER_1,CLUSTER_10
X,"numpy.insert(X,0,1,axis=1)",CLUSTER_1,CLUSTER_10
X,"numpy.insert(X,0,1,axis=1)",CLUSTER_1,CLUSTER_10
X_csv1,"numpy.insert(X_csv1,0,1,axis=1)",CLUSTER_1,CLUSTER_10
Xv,"numpy.insert(Xv,0,1,axis=1)",CLUSTER_1,CLUSTER_10
X_csv2,"numpy.insert(X_csv2,0,1,axis=1)",CLUSTER_1,CLUSTER_10
X_csv3,"numpy.insert(X_csv3,0,1,axis=1)",CLUSTER_1,CLUSTER_10
Xf_csv1,"numpy.append(X_csv1,F_csv1,axis=1)",CLUSTER_1,CLUSTER_10
Xv_1,"numpy.append(Xv,np.square(Xv[:,1:3])",CLUSTER_1,CLUSTER_10
Xf_csv2,"numpy.append(X_csv2,F_csv2,axis=1)",CLUSTER_1,CLUSTER_10
Xv_2,"numpy.append(Xv,F9,axis=1)",CLUSTER_1,CLUSTER_10
Xf_csv3,"numpy.append(X_csv3,F5,axis=1)",CLUSTER_1,CLUSTER_10
Xv_3,"numpy.append(Xv,F7,axis=1)",CLUSTER_1,CLUSTER_10
data_csv1,"numpy.genfromtxt('csv1.csv',delimiter=',')",CLUSTER_1,CLUSTER_10
data_csv2,"numpy.genfromtxt('csv2.csv',delimiter=',')",CLUSTER_1,CLUSTER_10
data_csv3,"numpy.genfromtxt('csv3.csv',delimiter=',')",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
y,"re.findall(""."",x)",CLUSTER_4,CLUSTER_11
y,"re.findall(""e+"",""sandeeeeeep"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""e*"","""")",CLUSTER_4,CLUSTER_11
y,"re.findall(""e+"","""")",CLUSTER_4,CLUSTER_11
y,"re.findall("".+"",""thisisanything"")",CLUSTER_4,CLUSTER_11
y,"re.findall("".*"","""")",CLUSTER_4,CLUSTER_11
y,"re.findall("".*"",""thisissomething"")",CLUSTER_4,CLUSTER_11
y,"re.findall("".+"",""thisissomething......."")",CLUSTER_4,CLUSTER_11
y,"re.findall(""\.+"",""thisissomething......."")",CLUSTER_4,CLUSTER_11
y,"re.findall(""this.+is"",""thisisgreatandthisisokay"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""this.+?is"",""thisisgreatandthisisokay"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""this.*?is"",""thisisgreatandthisisokay"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th.?s"",""thisisgreatandthisisokaythusths"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""thi?s"",""thisisgreatandthisisokaythusthsthiis"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""thi*s"",""thisisgreatandthisisokaythusthsthiis"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""thi{0,}s"",""thisisgreatandthisisokaythusthsthiis"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th.*s"",""thisisgreatandthisisokaythusthsthiis"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th.*?s"",""thisisgreatandthisisokaythusthsthiis"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th[iu]s"",""thisisgreatandthisisokaythusthsthiisthatthanthiusthise"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th[aiu][tsn]"",""thisisgreatandthisisokaythusthsthiisthatthanthiusthaiutsn"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th[aiu][aiu]"",""thisisgreatandthisisokaythusthsthiisthatthanthiusthaiutsn"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""th[a-z]t"",""thisisgreatandthisisokaythusthsthiisthatthanthiusthaiutsn"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""a[0-9]"",""thiusthaiutsna1anda2anda3andaza10aa1"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""a[0-9][0-9][0-9]"",""thiusthaiutsna1anda222anda3andaza10aa1"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""a[0-9]{3}"",""thiusthaiutsna1anda222anda3andaza10aa1"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""a[0-9]{2,3}"",""thiusthaiutsna1anda222anda3andaza10aa1"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""a[0-9]{2,4}"",""thiusthaiutsna1anda222anda3andaza10aa1a8921"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""a{2,4}[0-9]"",""thiusthaiutsna1anda222anda3andaza10aa1a8921"")",CLUSTER_4,CLUSTER_11
y,"re.findall('[0-9]+',x)",CLUSTER_4,CLUSTER_11
y,"re.findall(""[0-9]+"",""thisisavalidnumber:12345and5.4"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""-?[0-9]+"",""thisisavalidnumber:12345and5.4,-10"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""[0-9]+.[0-9]+"",""thisisavalidnumber:12345and5.4,0000000.0000003x5"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""[0-9]+\.[0-9]+"",""thisisavalidnumber:12345and5.4,0000000.0000003x5"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""^[^aeiou][aeiou]"",""wearelookingforconsonentfollowedbyvowel."")",CLUSTER_4,CLUSTER_11
y,"re.findall(""[0-9]$"",""thisis123and456"")",CLUSTER_4,CLUSTER_11
x,"re.findall(""\\\\.+"",s)",CLUSTER_4,CLUSTER_11
y,"re.findall('[0-9]+',x)",CLUSTER_4,CLUSTER_11
y,"re.findall('[0-9]+',x)",CLUSTER_4,CLUSTER_11
y,"re.findall('[AEIOU]+',x)",CLUSTER_4,CLUSTER_11
y,"re.findall(""[^aeiou][aeiou]"",""wearelookingforconsonentfollowedbyvowel."")",CLUSTER_4,CLUSTER_11
y,"re.findall(""\S\s\S"",""wearelookingforconsonentfollowedbyvowel."")",CLUSTER_4,CLUSTER_11
y,"re.findall(""[ADM]?"","""")",CLUSTER_4,CLUSTER_11
y,"re.findall('^F.+:',x)",CLUSTER_4,CLUSTER_11
y,"re.findall('^F.+?:',x)",CLUSTER_4,CLUSTER_11
y,"re.findall(""[a-z]+@[a-z]+\.com"",
""myemailaddressisreachus@cloudxlab.comandnotreachus@cloudxlab,reachus@@cloudxlababc@abc.org"")",CLUSTER_4,CLUSTER_11
y,"re.findall(""[a-z]+@[a-z]+.com"",
""myemailaddressisreachus@cloudxlab_com"")",CLUSTER_4,CLUSTER_11
stuff,re.findall('^X-DSPAM-Confidence:([0-9.]+),CLUSTER_4,CLUSTER_11
y,"re.findall('\S+@\S+',x)",CLUSTER_4,CLUSTER_11
y,re.findall('^From:.*?(\S+@\S+),CLUSTER_4,CLUSTER_11
y,re.findall('@([^]*),CLUSTER_4,CLUSTER_11
y,re.findall('^From.*@([^]*),CLUSTER_4,CLUSTER_11
stuff,re.findall('^X-DSPAM-Confidence:([0-9.]+),CLUSTER_4,CLUSTER_11
y,"re.findall('\$[0-9.]+',x)",CLUSTER_4,CLUSTER_11
C,"numpy.zeros((A.shape[0],B.shape[1])",CLUSTER_4,CLUSTER_11
res,numpy.array(observation),CLUSTER_6,CLUSTER_6
mean_reward,numpy.mean(total_rewards[-100:]),CLUSTER_6,CLUSTER_6
ts,time.time(),CLUSTER_6,CLUSTER_6
ts,time.time(),CLUSTER_6,CLUSTER_6
self.buffer,collections.deque(maxlen=capacity),CLUSTER_6,CLUSTER_6
Experience,"collections.namedtuple('Experience',field_names=['state','action','reward','done','new_state'])",CLUSTER_6,CLUSTER_6
"fig,ax","matplotlib.pyplot.subplots(2,4,figsize=(20,10)",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('../data/iris.csv'),CLUSTER_7,CLUSTER_5
df,pandas.read_csv('../data/diabetes.csv'),CLUSTER_7,CLUSTER_5
y_test_class,"numpy.argmax(y_test,axis=1)",CLUSTER_7,CLUSTER_5
y_pred_class,"numpy.argmax(y_pred,axis=1)",CLUSTER_7,CLUSTER_5
y_test_class,"numpy.argmax(y_test,axis=1)",CLUSTER_7,CLUSTER_5
y_pred_class,"numpy.argmax(y_pred,axis=1)",CLUSTER_7,CLUSTER_5
hticks,"numpy.linspace(amin,amax,101)",CLUSTER_7,CLUSTER_5
vticks,"numpy.linspace(bmin,bmax,101)",CLUSTER_7,CLUSTER_5
"aa,bb","numpy.meshgrid(hticks,vticks)",CLUSTER_7,CLUSTER_5
"X,y","sklearn.datasets.make_moons(n_samples=1000,noise=0.1,random_state=0)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,
test_size=0.3,
random_state=42)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X.values,y_cat,
test_size=0.2)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y_cat,test_size=0.2,random_state=22)",CLUSTER_7,CLUSTER_5
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
l2_penalty_values,"numpy.logspace(-4,10,num=10)",CLUSTER_3,CLUSTER_10
avgSeqQ,numpy.array([ord(x),CLUSTER_4,CLUSTER_11
axes,numpy.ravel(axes),CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(4,3,figsize=(20,15)",CLUSTER_4,CLUSTER_11
g,"seaborn.FacetGrid(melted,row='name',col='variable',hue='variable',sharex=False,sharey=False,size=3,aspect=1.5,margin_titles=True)",CLUSTER_4,CLUSTER_11
g,"seaborn.FacetGrid(melted,row='name',col='variable',hue='variable',sharex=False,sharey=False,size=3,aspect=1.5,margin_titles=True)",CLUSTER_4,CLUSTER_11
sampleTable,"pandas.DataFrame(rows,columns=['sampleID','sex','tissue','runID','date','processID','sizeBin','subreads','num_subreads','roi1','num_roi1','ccs2','num_ccs2'])",CLUSTER_4,CLUSTER_11
dd,"pandas.concat([roi,ccs],axis=1)",CLUSTER_4,CLUSTER_11
melted,"pandas.melt(dfRoi,id_vars=['name'],value_vars=['LENGTH','MEAN_QVAL','MEAN_SCORE','NUM_PASSES'])",CLUSTER_4,CLUSTER_11
melted,"pandas.melt(dfCcs,id_vars=['name'],value_vars=['LENGTH','MEAN_QVAL','MEAN_SCORE','NUM_PASSES'])",CLUSTER_4,CLUSTER_11
df,"pandas.read_csv(os.path.join(data_dir,'{0}/roi1/{0}_roi1_stats.txt'.format(fn)",CLUSTER_4,CLUSTER_11
df,"pandas.read_csv(os.path.join(data_dir,'{0}/ccs2/{0}_ccs2_stats.txt'.format(fn)",CLUSTER_4,CLUSTER_11
scores_df,"pandas.DataFrame({'RandomForest':[myGS.best_score_],'XGBoost':[myXGB_GS.best_score_],
'AdaBoost':[myAda_GS.best_score_],'SVM':[mySVM_GS.best_score_]})",CLUSTER_5,CLUSTER_5
raw_data,"pandas.read_csv('/Users/iMotz/Propulsion/Machine_learning/data_sets/data_challange',sep=';',index_col=0)",CLUSTER_5,CLUSTER_5
raw_y,"pandas.read_csv('/Users/iMotz/Propulsion/Machine_learning/data_sets/target_challange',sep=';',index_col=0)",CLUSTER_5,CLUSTER_5
X_test,"pandas.read_csv('/Users/iMotz/Propulsion/Machine_learning/data_sets/data_validation.csv',sep=';',index_col=0)",CLUSTER_5,CLUSTER_5
myGS,"sklearn.model_selection.GridSearchCV(estimator=pipe_1,param_distributions=grid_params_pipe_1_better,
scoring='accuracy',cv=3,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
myXGB_GS,"sklearn.model_selection.GridSearchCV(estimator=pipe_2,param_grid=grid_params_pipe_2_better,
scoring='accuracy',cv=5,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
myAda_GS,"sklearn.model_selection.GridSearchCV(estimator=pipe_3,param_grid=grid_params_pipe_3_better,
scoring='accuracy',cv=3,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
mySVM_GS,"sklearn.model_selection.GridSearchCV(estimator=pipe_4,param_grid=grid_params_pipe_4_better,
scoring='accuracy',cv=6,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
myRS,"sklearn.model_selection.RandomizedSearchCV(estimator=pipe_1,param_distributions=grid_params_pipe_1,
scoring='accuracy',cv=3,n_iter=20,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
myXGB_RS,"sklearn.model_selection.RandomizedSearchCV(estimator=pipe_2,param_distributions=grid_params_pipe_2,
scoring='accuracy',cv=3,n_iter=20,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
myAda_RS,"sklearn.model_selection.RandomizedSearchCV(estimator=pipe_3,param_distributions=grid_params_pipe_3,
scoring='accuracy',cv=3,n_iter=20,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
mySVM_RS,"sklearn.model_selection.RandomizedSearchCV(estimator=pipe_4,param_distributions=grid_params_pipe_4,
scoring='accuracy',cv=3,n_iter=20,
n_jobs=-1,verbose=1)",CLUSTER_5,CLUSTER_5
pipe_1,"sklearn.pipeline.Pipeline([('scl',skpp.StandardScaler()",CLUSTER_5,CLUSTER_5
pipe_2,"sklearn.pipeline.Pipeline([('scl',skpp.StandardScaler()",CLUSTER_5,CLUSTER_5
pipe_3,"sklearn.pipeline.Pipeline([('scl',skpp.StandardScaler()",CLUSTER_5,CLUSTER_5
pipe_4,"sklearn.pipeline.Pipeline([('scl',skpp.StandardScaler()",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(7,5)",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(7,5)",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(7,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(7,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(7,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(7,5)",CLUSTER_7,CLUSTER_9
mean_delay,numpy.mean(delay),CLUSTER_7,CLUSTER_9
acceptance_criterion,numpy.exp(proposal_loglike-current_loglike),CLUSTER_7,CLUSTER_9
minute_range,"numpy.linspace(0,40,200)",CLUSTER_7,CLUSTER_9
proposal_xrange,numpy.linspace(np.min(data),CLUSTER_7,CLUSTER_9
proposal_xrange,numpy.linspace(np.min(data),CLUSTER_7,CLUSTER_9
x_range,"numpy.linspace(0,40,200)",CLUSTER_7,CLUSTER_9
air,pandas.read_csv('/Users/kiefer/github-repos/DSI-SF-2/datasets/airport/airport_operations.csv'),CLUSTER_7,CLUSTER_9
ax,"seaborn.distplot(delay,bins=40,ax=ax)",CLUSTER_7,CLUSTER_9
ax,"seaborn.distplot(data,bins=40,ax=ax)",CLUSTER_7,CLUSTER_9
ax,"seaborn.distplot(data,bins=40,ax=ax)",CLUSTER_7,CLUSTER_9
prior_pdf,"scipy.stats.norm(delay_belief_mean,delay_belief_std)",CLUSTER_7,CLUSTER_9
distribution,"scipy.stats.norm(proposed_mean,proposed_std)",CLUSTER_7,CLUSTER_9
proposal_pdf,"scipy.stats.norm(proposed_mean,proposed_std)",CLUSTER_7,CLUSTER_9
prop_dist,"scipy.stats.norm(proposal_distribution_mean,proposal_distribution_std)",CLUSTER_7,CLUSTER_9
old_pdf,"scipy.stats.norm(old_mean,old_std)",CLUSTER_7,CLUSTER_9
new_pdf,"scipy.stats.norm(new_mean,new_std)",CLUSTER_7,CLUSTER_9
distribution,"scipy.stats.norm(prior_mean,prior_std)",CLUSTER_7,CLUSTER_9
prior_pdf,"scipy.stats.norm(prior_mean,prior_std)",CLUSTER_7,CLUSTER_9
proposed_p,"scipy.stats.norm(prior_mean,prior_std)",CLUSTER_7,CLUSTER_9
df,"pandas.DataFrame(randn(5,4)",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(6,2)",CLUSTER_8,CLUSTER_3
n,"random.randint(2,16)",CLUSTER_10,CLUSTER_4
t,"random.randint(1,1000)",CLUSTER_10,CLUSTER_4
m,"random.randint(2,100)",CLUSTER_10,CLUSTER_4
p,"random.randint(1,m)",CLUSTER_10,CLUSTER_4
x,numpy.array(pageSpeeds),CLUSTER_5,CLUSTER_10
y,numpy.array(purchaseAmount),CLUSTER_5,CLUSTER_10
xp,"numpy.linspace(0,7,100)",CLUSTER_5,CLUSTER_10
p4,"numpy.poly1d(np.polyfit(x,y,4)",CLUSTER_5,CLUSTER_10
r2,"sklearn.metrics.r2_score(y,p4(x)",CLUSTER_5,CLUSTER_10
dt,"datetime.datetime.strptime(stime,'%Y-%m-%dT%H:%M:%S')",CLUSTER_10,CLUSTER_12
combined_data,"pandas.merge(census_data,zip_data,on=""CityState"",how=""inner"")",CLUSTER_8,CLUSTER_4
census_data,"pandas.read_sql(""SELECT*FROMCensus_Data"",conn)",CLUSTER_8,CLUSTER_4
zip_data,"pandas.read_sql(""SELECT*FROMZip_Census"",conn)",CLUSTER_8,CLUSTER_4
df_predicted,"pandas.DataFrame({'date':dates_to_predict,\
'predictions':pd.Series(predictions.reshape(-1)",CLUSTER_5,CLUSTER_5
dates_to_predict,pandas.Series([pd.Timestamp.today(),CLUSTER_5,CLUSTER_5
dates_to_predict,pandas.Series([pd.Timestamp.today(),CLUSTER_5,CLUSTER_5
df_ctr_cum,pandas.read_csv('df_ctr_cum.csv'),CLUSTER_5,CLUSTER_5
X,"pandas.to_numeric(pd.to_datetime(df_ctr_cum.loc[df_ctr_cum['category']=='case'].iloc[-n_days:][str_date],format='%Y/%m/%d')",CLUSTER_5,CLUSTER_5
X,"pandas.to_numeric(\
pd.to_datetime(df.loc[df['category']==class_to_predict].iloc[-n_days:][str_date],\
format='%Y/%m/%d')",CLUSTER_5,CLUSTER_5
predictions,numpy.exp(lr.predict(pd.to_numeric(pd.Series(dates_to_predict),CLUSTER_5,CLUSTER_5
predictions,numpy.exp(lr.predict(pd.to_numeric(pd.Series(dates_to_predict),CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
learning_rate,"numpy.arange(0.01,0.5,0.02)",CLUSTER_7,CLUSTER_8
subsample,"numpy.arange(0.2,1.,0.2)",CLUSTER_7,CLUSTER_8
colsample_bytree,"numpy.arange(0.2,1.2,0.2)",CLUSTER_7,CLUSTER_8
gamma,"numpy.arange(0.001,0.1,0.02)",CLUSTER_7,CLUSTER_8
min_child_weight,"numpy.arange(0.5,2.0,0.2)",CLUSTER_7,CLUSTER_8
"y_true,y_pred",numpy.array(y_true),CLUSTER_7,CLUSTER_8
num_coeff_bigger,numpy.sum(abs(linridge.coef_),CLUSTER_7,CLUSTER_8
y_pred,numpy.floor(np.expm1(y_pred),CLUSTER_7,CLUSTER_8
data_ser,pandas.Series(data_for_pred.index.unique(),CLUSTER_7,CLUSTER_8
data_for_pred.index,pandas.Series(data_for_pred.index),CLUSTER_7,CLUSTER_8
data_ser,pandas.Series(sorted(new_data['pre_date'].unique(),CLUSTER_7,CLUSTER_8
data_ser_val,pandas.Series(sorted(train['pre_date'].unique(),CLUSTER_7,CLUSTER_8
data,pandas.get_dummies(data),CLUSTER_7,CLUSTER_8
data,pandas.read_csv('DF_File_sample.csv'),CLUSTER_7,CLUSTER_8
data,pandas.read_csv('DF_File_sample.csv'),CLUSTER_7,CLUSTER_8
data_with_LE,pandas.read_csv('DF_File_sample.csv'),CLUSTER_7,CLUSTER_8
pred,results.get_prediction(start=pandas.to_datetime('2015-01-01'),CLUSTER_7,CLUSTER_8
"X_train_LE,X_test_LE,y_train_LE,y_test_LE","sklearn.model_selection.train_test_split(train_LE.loc[:,train_LE.columns!='Sales'],train_LE['Sales'],test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_8
accuracies,"sklearn.model_selection.cross_val_score(estimator=xgb_model,X=X_train,y=y_train,cv=10)",CLUSTER_7,CLUSTER_8
"norm_stats,p_norm",scipy.stats.normaltest(df_test[target]),CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(estimator=xgb_model,
param_grid=parameters,
scoring='neg_mean_squared_error',
cv=5,
n_jobs=-1)",CLUSTER_7,CLUSTER_8
linridge,sklearn.linear_model.Ridge(alpha=20.0),CLUSTER_7,CLUSTER_8
linridge,sklearn.linear_model.Ridge(alpha=this_alpha),CLUSTER_7,CLUSTER_8
linridge,sklearn.linear_model.Ridge(alpha=0),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
linlasso,"sklearn.linear_model.Lasso(alpha,max_iter=10000)",CLUSTER_7,CLUSTER_8
linlasso_LE,"sklearn.linear_model.Lasso(alpha,max_iter=10000)",CLUSTER_7,CLUSTER_8
linlasso_LE,"sklearn.linear_model.Lasso(alpha,max_iter=10000)",CLUSTER_7,CLUSTER_8
svr,"sklearn.svm.SVR(kernel='linear',C=C,epsilon=0.6)",CLUSTER_7,CLUSTER_8
tl3,"pandas.merge(tl,afinn)",CLUSTER_4,CLUSTER_11
tl3,"pandas.merge(tl,afinn)",CLUSTER_4,CLUSTER_11
afinn,"pandas.read_csv(""AFINN-111.txt"",sep='\t',names=['token','valence'])",CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
rootDir,os.getcwd(),CLUSTER_4,CLUSTER_11
y_pos,numpy.arange(len(x),CLUSTER_4,CLUSTER_11
predictions,numpy.zeros((len(Xtests),CLUSTER_1,CLUSTER_9
predictions,numpy.zeros((len(Xtests),CLUSTER_1,CLUSTER_9
predictions,numpy.zeros((len(Xtests),CLUSTER_1,CLUSTER_9
mew_t,"numpy.dot(Ktm,Kinv)",CLUSTER_1,CLUSTER_9
mew_t,"numpy.dot(Ktm,Kinv)",CLUSTER_1,CLUSTER_9
mew_t,"numpy.dot(Ktm,Kinv)",CLUSTER_1,CLUSTER_9
K,"numpy.ones((N,M)",CLUSTER_1,CLUSTER_9
"x,y",numpy.exp(2*np.pi*1j*x/365.),CLUSTER_1,CLUSTER_9
Kinv,"scipy.linalg.pinv(np.dot(Kmn,Knm)",CLUSTER_1,CLUSTER_9
Kinv,"scipy.linalg.pinv(np.dot(Kmn,Knm)",CLUSTER_1,CLUSTER_9
Kinv,"scipy.linalg.pinv(np.dot(Kmn,Knm)",CLUSTER_1,CLUSTER_9
prediction,"pandas.DataFrame(columns=['Id','Sales'])",CLUSTER_1,CLUSTER_9
prediction,"pandas.DataFrame(columns=['Id','Sales'])",CLUSTER_1,CLUSTER_9
prediction,"pandas.DataFrame(columns=['Id','Sales'])",CLUSTER_1,CLUSTER_9
rossman['School'],pandas.Series(np.ones(N),CLUSTER_1,CLUSTER_9
rossman,pandas.read_csv(datafile),CLUSTER_1,CLUSTER_9
rossman['Date'],pandas.to_datetime(rossman['Date']),CLUSTER_1,CLUSTER_9
start,time.time(),CLUSTER_1,CLUSTER_9
start,time.time(),CLUSTER_1,CLUSTER_9
start,time.time(),CLUSTER_1,CLUSTER_9
"scores.hist('Midterm1',group","'Mentored',bins=numpy.arange(0,41,5)",CLUSTER_3,CLUSTER_6
"scores_with_improvements.hist(""Improvement"",bins","numpy.arange(-30,31,5)",CLUSTER_3,CLUSTER_6
neighbors,"numpy.arange(0,10)",CLUSTER_7,CLUSTER_8
models,"pandas.DataFrame({
'Models':['RandomForestClassifier','DecisionTreeClassifier','SupportVectorMachine',
'K-NearNeighbors','LogisticModel','GausianNB','GradientBoosting'],
'Score':[RFCCV,DTREECV,SVCCV,KNNCV,LOGCV,GAUSIAN,GBKCV]})",CLUSTER_7,CLUSTER_8
y,"pandas.get_dummies(bank_model['y'],columns=['y'],prefix=['y'],drop_first=True)",CLUSTER_7,CLUSTER_8
bank_model,pandas.read_csv('/Users/kanchansingh/gitproject/Bank_propensity_model/clean_data.csv'),CLUSTER_7,CLUSTER_8
"fig,ax_arr","matplotlib.pyplot.subplots(nrows=2,ncols=3,figsize=(20,15)",CLUSTER_7,CLUSTER_8
"fig,(ax1,ax2,ax3,ax4,ax5)","matplotlib.pyplot.subplots(nrows=2,ncols=3,figsize=(15,4)",CLUSTER_7,CLUSTER_8
"fig,ax_arr","matplotlib.pyplot.subplots(nrows=2,ncols=3,figsize=(20,15)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feat,label,test_size=0.3,random_state=103)",CLUSTER_7,CLUSTER_8
"X_trainK,X_testK,y_trainK,y_testK","sklearn.model_selection.train_test_split(feat,label,test_size=0.2,random_state=101)",CLUSTER_7,CLUSTER_8
k_fold,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=0)",CLUSTER_7,CLUSTER_8
accuracy,"sklearn.metrics.accuracy_score(y_test,predictions)",CLUSTER_7,CLUSTER_8
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
logmodel,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
kfold,"sklearn.model_selection.KFold(n_splits=5,random_state=123)",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(knn,X_trainK,y_trainK,cv=kfold,scoring='accuracy')",CLUSTER_7,CLUSTER_8
knn,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=k_value,weights='uniform',p=2,metric='euclidean')",CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=22),CLUSTER_7,CLUSTER_8
svc,sklearn.svm.SVC(kernel='sigmoid'),CLUSTER_7,CLUSTER_8
dtree,sklearn.tree.DecisionTreeClassifier(criterion='gini'),CLUSTER_7,CLUSTER_8
rfc,sklearn.ensemble.RandomForestClassifier(n_estimators=200),CLUSTER_7,CLUSTER_8
gaussiannb,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
gbk,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_7,CLUSTER_8
roc_auclog,"sklearn.metrics.auc(fprlog,tprlog)",CLUSTER_7,CLUSTER_8
roc_auclog,"sklearn.metrics.auc(fprlog,tprlog)",CLUSTER_7,CLUSTER_8
roc_aucrfc,"sklearn.metrics.auc(fprrfc,tprrfc)",CLUSTER_7,CLUSTER_8
"fprlog,tprlog,thresholdlog","sklearn.metrics.roc_curve(y_test,preds)",CLUSTER_7,CLUSTER_8
"fprlog,tprlog,thresholdlog","sklearn.metrics.roc_curve(y_test,preds)",CLUSTER_7,CLUSTER_8
"fprrfc,tprrfc,thresholdrfc","sklearn.metrics.roc_curve(y_test,preds)",CLUSTER_7,CLUSTER_8
"print('rmsetest3:%s'%(rmse([2,2,2],[1,1,0])",=numpy.sqrt(2.0),CLUSTER_3,CLUSTER_6
prediction,"numpy.average(valueList,weights=similarityList)",CLUSTER_3,CLUSTER_6
manualPrediction,"numpy.average(historyData[1],weights=historyData[4])",CLUSTER_3,CLUSTER_6
data,json.load(data_file),CLUSTER_3,CLUSTER_6
text,"pandas.concat([train_sentence,test_sentence])",CLUSTER_5,CLUSTER_1
train,pandas.read_csv(PATH+'cleaned_train.csv'),CLUSTER_5,CLUSTER_1
test,pandas.read_csv(PATH+'cleaned_test.csv'),CLUSTER_5,CLUSTER_1
submission,pandas.read_csv(path+'sample_train.csv'),CLUSTER_5,CLUSTER_1
submission,pandas.read_csv(path+'sample_submission.csv'),CLUSTER_5,CLUSTER_1
preds,"numpy.zeros((test.shape[0],len(label_cols)",CLUSTER_5,CLUSTER_1
preds_train,"numpy.zeros((train.shape[0],len(label_cols)",CLUSTER_5,CLUSTER_1
r,"numpy.log(pr(1,y.values,train_features[0])",CLUSTER_5,CLUSTER_1
train_tfidf,"scipy.sparse.hstack((train_char,train_phrase)",CLUSTER_5,CLUSTER_1
test_tfidf,"scipy.sparse.hstack((test_char,test_phrase)",CLUSTER_5,CLUSTER_1
scale,"numpy.arange(5,0,-1)",CLUSTER_7,CLUSTER_8
scale,"numpy.arange(5,0,-1)",CLUSTER_7,CLUSTER_8
pos,numpy.arange(sorted_idx.shape[0]),CLUSTER_7,CLUSTER_8
idx,numpy.where(dataframe[col].isnull(),CLUSTER_7,CLUSTER_8
mask,numpy.zeros_like(corr),CLUSTER_7,CLUSTER_8
sorted_idx,numpy.argsort(feature_importance),CLUSTER_7,CLUSTER_8
y,numpy.exp(y_test),CLUSTER_7,CLUSTER_8
dataframe[col],numpy.log(dataframe[col]),CLUSTER_7,CLUSTER_8
X_train_scale,pandas.DataFrame(scaler.transform(X_train),CLUSTER_7,CLUSTER_8
X_test_scale,pandas.DataFrame(scaler.transform(X_test),CLUSTER_7,CLUSTER_8
df_category_joint,"pandas.concat([df_category,df_category_test])",CLUSTER_7,CLUSTER_8
total_diag,"pandas.concat([train_diag,test_diag])",CLUSTER_7,CLUSTER_8
df_dummies,"pandas.get_dummies(df_category,columns=cat_variables)",CLUSTER_7,CLUSTER_8
df_dummies_test,"pandas.get_dummies(df_category_test,columns=cat_variables)",CLUSTER_7,CLUSTER_8
df_dummies_joint,"pandas.get_dummies(df_category_joint,columns=cat_variables,drop_first=True)",CLUSTER_7,CLUSTER_8
realestate,pandas.read_csv('RealEstate/train.csv'),CLUSTER_7,CLUSTER_8
realestate_test,pandas.read_csv('RealEstate/test.csv'),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
model_rf1,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,max_depth=15)",CLUSTER_7,CLUSTER_8
model_rf2,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(y=feat,x=featimp)",CLUSTER_7,CLUSTER_8
ax,"seaborn.heatmap(corr,mask=mask,vmax=.9,square=True,annot=False)",CLUSTER_7,CLUSTER_8
ax,"seaborn.jointplot(X_test['OverallQual'],y,kind=""hex"",stat_func=kendalltau,color=""
plt.xlabel('RelativeImportance')",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(10,15)",CLUSTER_7,CLUSTER_8
income,"pandas.read_csv('https://github.com/albahnsen/PracticalMachineLearningClass/raw/master/datasets/income.csv.zip',index_col=0)",CLUSTER_5,CLUSTER_5
data,pandas.read_csv('https://github.com/ghuiber/churn/raw/master/data/churn.csv'),CLUSTER_5,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
linreg3,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
linreg5,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
linreg2,"sklearn.linear_model.SGDRegressor(max_iter=30000,tol=None)",CLUSTER_5,CLUSTER_5
linreg4,"sklearn.linear_model.SGDRegressor(max_iter=30000,tol=None)",CLUSTER_5,CLUSTER_5
linreg6,"sklearn.linear_model.SGDRegressor(max_iter=30000,tol=None)",CLUSTER_5,CLUSTER_5
"X_train,X_validation,Y_train,Y_validation","sklearn.model_selection.train_test_split(X,Y,test_size=validation_size,random_state=seed)",CLUSTER_5,CLUSTER_5
logreg,"sklearn.linear_model.LogisticRegression(solver='liblinear',C=1e9)",CLUSTER_5,CLUSTER_5
data_ML_train,"pandas.DataFrame(train_split,columns=data_ML.columns)",CLUSTER_12,CLUSTER_1
data_ML_test,"pandas.DataFrame(test_split,columns=data_ML.columns)",CLUSTER_12,CLUSTER_1
data,pandas.read_csv('h1b_kaggle.csv'),CLUSTER_12,CLUSTER_1
lr_model,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='newton-cg')",CLUSTER_12,CLUSTER_1
lr_model_200,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='newton-cg',max_iter=200)",CLUSTER_12,CLUSTER_1
"train_split,test_split","sklearn.model_selection.train_test_split(data_ML,train_size=0.80,random_state=1)",CLUSTER_12,CLUSTER_1
HWeather_df,pandas.read_csv(path1),CLUSTER_8,CLUSTER_4
HStation_df,pandas.read_csv(path2),CLUSTER_8,CLUSTER_4
path,os.getcwd(),CLUSTER_9,CLUSTER_2
SP100_tickers,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
symbol_data,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
df_Flat_pct_change,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
news_df,"pandas.DataFrame(news_data,columns=['searchedkeyword','title','link'])",CLUSTER_9,CLUSTER_2
dataframe[col],"pandas.Series([round(val,2)",CLUSTER_9,CLUSTER_2
dataframe[col],"pandas.Series([""{0:.2f}%"".format(val*100)",CLUSTER_9,CLUSTER_2
single_table,"pandas.concat([symbol,symbol_data],axis=0,ignore_index=True)",CLUSTER_9,CLUSTER_2
website_url,"requests.get(""https://en.wikipedia.org/wiki/S%26P_100"")",CLUSTER_9,CLUSTER_2
resp,requests.get(url),CLUSTER_9,CLUSTER_2
df,"pandas.DataFrame({'ID':[1,2,3,4],
'customerName':['Tom','Harry','Meagan','Nancy'],
'Age':[20,25,34,45]})",CLUSTER_8,CLUSTER_4
ufo,pandas.read_csv(filepath),CLUSTER_8,CLUSTER_4
CS,"matplotlib.pyplot.contour(xgrid,ygrid,vv.asnumpy()",CLUSTER_1,CLUSTER_10
xgrid,"numpy.arange(-3,3,0.02)",CLUSTER_1,CLUSTER_10
ygrid,"numpy.arange(-3,3,0.02)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(xgrid,ygrid)",CLUSTER_1,CLUSTER_10
pivote,"random.randint(1,long_cromosoma-1)",CLUSTER_10,CLUSTER_4
pivote,"random.randint(0,long_cromosoma-1)",CLUSTER_10,CLUSTER_4
nuevo_valor,"random.randint(0,1)",CLUSTER_10,CLUSTER_4
padre,"random.sample(seleccion_final,2)",CLUSTER_10,CLUSTER_4
train,"pandas.read_csv(""Train.csv"")",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(""Test.csv"")",CLUSTER_7,CLUSTER_8
sample,"pandas.read_csv(""sample_submission.csv"")",CLUSTER_7,CLUSTER_8
train['date_time'],"pandas.to_datetime(train['date_time'],format=""%Y-%m-%d%H:%M:%S"")",CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(figsize=a4_dims),CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(figsize=a4_dims),CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(figsize=a4_dims),CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(figsize=a4_dims),CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(figsize=a4_dims),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(24,24)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(24,24)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(24,24)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(24,24)",CLUSTER_7,CLUSTER_8
href_df,pandas.DataFrame(np.array(href),CLUSTER_9,CLUSTER_2
dataset,pandas.read_csv('./href_list.csv'),CLUSTER_9,CLUSTER_2
href_df['title'],numpy.array(title),CLUSTER_9,CLUSTER_2
predictions,numpy.array(model.predict(testX),CLUSTER_2,CLUSTER_7
test_accuracy,"numpy.mean(predictions==actual,axis=0)",CLUSTER_2,CLUSTER_7
df,pandas.read_csv('indiadata.csv'),CLUSTER_5,CLUSTER_5
score,"numpy.sqrt(-cross_val_score(mlp,X_train,
y_train,
cv=5,scoring='neg_mean_squared_error')",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
mlp,"sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(nhn,)",CLUSTER_5,CLUSTER_5
a,"numpy.array([[0.84062117,0.48006452,0.7876326,0.77109654],
[0.44409793,0.09014516,0.81835917,0.87645456],
[0.7066597,0.09610873,0.41247947,0.57433389],
[0.29960807,0.42315023,0.34452557,0.4751035],
[0.17003563,0.46843998,0.92796258,0.69814654],
[0.41290051,0.19561071,0.16284783,0.97016248],
[0.71725408,0.87702738,0.31244595,0.76615487],
[0.20754036,0.57871812,0.07214068,0.40356048],
[0.12149553,0.53222417,0.9976855,0.12536346],
[0.80930099,0.50962849,0.94555126,0.33364763]])",CLUSTER_8,CLUSTER_11
b,"numpy.array([[[0.55867166,0.06210792,0.08147297],
[0.82579068,0.91512478,0.06833034]],

[[0.05440634,0.65857693,0.30296619],
[0.06769833,0.96031863,0.51293743]],

[[0.09143215,0.71893382,0.45850679],
[0.58256464,0.59005654,0.56266457]],

[[0.71600294,0.87392666,0.11434044],
[0.8694668,0.65669313,0.10708681]],

[[0.07529684,0.46470767,0.47984544],
[0.65368638,0.14901286,0.23760688]]])",CLUSTER_8,CLUSTER_11
neighborhoods,pandas.DataFrame(columns=column_names),CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
total_coffee,pandas.DataFrame(toronto_coffee['Neighborhood'].value_counts(),CLUSTER_9,CLUSTER_2
total_coffee_nyc,pandas.DataFrame(nyc_coffee['Neighborhood'].value_counts(),CLUSTER_9,CLUSTER_2
toronto,"pandas.merge(boroughs,coordinates,on='PostalCode')",CLUSTER_9,CLUSTER_2
neighborhood_data,"pandas.merge(neighborhood_data,toronto,on='Neighbourhood')",CLUSTER_9,CLUSTER_2
master_toronto,"pandas.merge(neighborhood_data,total_coffee,on='Neighbourhood',how='outer')",CLUSTER_9,CLUSTER_2
master_nyc,"pandas.merge(nyc_data,total_coffee_nyc,on='Neighborhood',how='outer')",CLUSTER_9,CLUSTER_2
coordinates,pandas.read_csv('Geospatial_Coordinates.csv'),CLUSTER_9,CLUSTER_2
url,"pandas.read_csv(""nyc_demographics"")",CLUSTER_9,CLUSTER_2
df_list,pandas.read_html(url),CLUSTER_9,CLUSTER_2
df_list,pandas.read_html(url),CLUSTER_9,CLUSTER_2
newyork_data,json.load(json_data),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
local_dir,os.getenv('TMPDIR'),CLUSTER_4,CLUSTER_11
T,"numpy.arange(0,len(SSU.time)",CLUSTER_4,CLUSTER_11
lat_edges,"numpy.arange(vb1['min'],vb1['max']+vb1['d']*.1,vb1['d'])",CLUSTER_4,CLUSTER_11
f_edges,"numpy.arange(vb2['min'],vb2['max']+vb2['d']*.1,vb2['d'])",CLUSTER_4,CLUSTER_11
"h,lbins","dask.array.histogram(i,bins=numpy.arange(-.5,(vb1['imax']+1)",CLUSTER_4,CLUSTER_11
"hnorm,lbins","dask.array.histogram(i,bins=numpy.arange(-.5,(vb1['imax']+1)",CLUSTER_4,CLUSTER_11
lat_edges,"numpy.arange(vb1['min'],vb1['max']+vb1['d']*.1,vb1['d'])",CLUSTER_4,CLUSTER_11
f_edges,"numpy.arange(vb2['min'],vb2['max']+vb2['d']*.1,vb2['d'])",CLUSTER_4,CLUSTER_11
"h,lbins","dask.array.histogram(i,bins=numpy.arange(-.5,(vb1['imax']+1)",CLUSTER_4,CLUSTER_11
"hnorm,lbins","dask.array.histogram(i,bins=numpy.arange(-.5,(vb1['imax']+1)",CLUSTER_4,CLUSTER_11
lat_edges,"numpy.arange(vb1['min'],vb1['max']+vb1['d']*.1,vb1['d'])",CLUSTER_4,CLUSTER_11
f_edges,"numpy.arange(vb2['min'],vb2['max']+vb2['d']*.1,vb2['d'])",CLUSTER_4,CLUSTER_11
"h,lbins","dask.array.histogram(i,bins=numpy.arange(-.5,(vb1['imax']+1)",CLUSTER_4,CLUSTER_11
"hnorm,lbins","dask.array.histogram(i,bins=numpy.arange(-.5,(vb1['imax']+1)",CLUSTER_4,CLUSTER_11
cax,numpy.log10(E/8.64),CLUSTER_4,CLUSTER_11
cax,numpy.log10(E/8.64),CLUSTER_4,CLUSTER_11
cax,numpy.log10(E/8.64),CLUSTER_4,CLUSTER_11
cax,"numpy.log10(ds_1['E_all'].isel(i=slice(2500,4320)",CLUSTER_4,CLUSTER_11
cax,numpy.log10(ds['E_all']),CLUSTER_4,CLUSTER_11
cax,numpy.log10(eta),CLUSTER_4,CLUSTER_11
cax,numpy.log10(eta),CLUSTER_4,CLUSTER_11
i1,numpy.maximum(np.rint((v1-b1['min']),CLUSTER_4,CLUSTER_11
i2,numpy.maximum(np.rint((v2-b2['min']),CLUSTER_4,CLUSTER_11
i1,numpy.maximum(np.rint((v1-b1['min']),CLUSTER_4,CLUSTER_11
i2,numpy.maximum(np.rint((v2-b2['min']),CLUSTER_4,CLUSTER_11
i1,numpy.maximum(np.rint((v1-b1['min']),CLUSTER_4,CLUSTER_11
i2,numpy.maximum(np.rint((v2-b2['min']),CLUSTER_4,CLUSTER_11
i1,"numpy.minimum(i1,b1['imax'])",CLUSTER_4,CLUSTER_11
i2,"numpy.minimum(i2,b2['imax'])",CLUSTER_4,CLUSTER_11
i1,"numpy.minimum(i1,b1['imax'])",CLUSTER_4,CLUSTER_11
i2,"numpy.minimum(i2,b2['imax'])",CLUSTER_4,CLUSTER_11
i1,"numpy.minimum(i1,b1['imax'])",CLUSTER_4,CLUSTER_11
i2,"numpy.minimum(i2,b2['imax'])",CLUSTER_4,CLUSTER_11
E_uv,numpy.real(E_uv),CLUSTER_4,CLUSTER_11
E_all,numpy.real(E_all),CLUSTER_4,CLUSTER_11
E_sdiurnal,numpy.real(E_sdiurnal),CLUSTER_4,CLUSTER_11
E_diurnal,numpy.real(E_diurnal),CLUSTER_4,CLUSTER_11
E_low,numpy.real(E_low),CLUSTER_4,CLUSTER_11
E_f,numpy.real(E_f),CLUSTER_4,CLUSTER_11
E_f,numpy.real(E_f),CLUSTER_4,CLUSTER_11
E_all,numpy.real(E_all),CLUSTER_4,CLUSTER_11
E_sdiurnal,numpy.real(E_sdiurnal),CLUSTER_4,CLUSTER_11
E_diurnal,numpy.real(E_diurnal),CLUSTER_4,CLUSTER_11
E_low,numpy.real(E_low),CLUSTER_4,CLUSTER_11
E_f,numpy.real(E_f),CLUSTER_4,CLUSTER_11
E_all,numpy.real(E_all),CLUSTER_4,CLUSTER_11
E_sdiurnal,numpy.real(E_sdiurnal),CLUSTER_4,CLUSTER_11
E_diurnal,numpy.real(E_diurnal),CLUSTER_4,CLUSTER_11
E_low,numpy.real(E_low),CLUSTER_4,CLUSTER_11
window,numpy.hanning(nfft),CLUSTER_4,CLUSTER_11
upper_diags,"scipy.sparse.diags([d1,d2],[1,c])",CLUSTER_6,CLUSTER_11
upper_diags,"scipy.sparse.diags([d1,d2,d3,d4],[1,c-1,c,c+1])",CLUSTER_6,CLUSTER_11
a,numpy.array([25.0]),CLUSTER_6,CLUSTER_11
b,numpy.array([.05]),CLUSTER_6,CLUSTER_11
y,numpy.array([25.0]),CLUSTER_6,CLUSTER_11
ds,numpy.array(dummy),CLUSTER_6,CLUSTER_11
d,numpy.array(new_d),CLUSTER_6,CLUSTER_11
A_pair,numpy.asarray(np.where(A.toarray(),CLUSTER_6,CLUSTER_11
A_pair,numpy.asarray(np.where(A.toarray(),CLUSTER_6,CLUSTER_11
dummy,"numpy.zeros(shape=(3,T1.shape[-1],T1.shape[-2])",CLUSTER_6,CLUSTER_11
d2,numpy.ones(c*(r-1),CLUSTER_6,CLUSTER_11
d3,numpy.ones(c*(r-1),CLUSTER_6,CLUSTER_11
pixel_indices,"numpy.reshape(pixel_indices,(width,width)",CLUSTER_6,CLUSTER_11
pixel_indices,"numpy.reshape(pixel_indices,(width,width)",CLUSTER_6,CLUSTER_11
d2,"numpy.append([0],d1[:c*(r-1)",CLUSTER_6,CLUSTER_11
d1,numpy.tile(np.append(np.ones(c-1),CLUSTER_6,CLUSTER_11
d1,numpy.tile(np.append(np.ones(c-1),CLUSTER_6,CLUSTER_11
tstart,time.time(),CLUSTER_6,CLUSTER_11
tstart,time.time(),CLUSTER_6,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(8,8)",CLUSTER_6,CLUSTER_11
view_log,"pandas.read_json(json_file,lines=True)",CLUSTER_8,CLUSTER_4
view_song,"pandas.read_json(song_file,orient='columns',lines=True)",CLUSTER_8,CLUSTER_4
x,json.load(f),CLUSTER_8,CLUSTER_4
x1,"numpy.array([1,2,1])",CLUSTER_4,CLUSTER_11
x2,"numpy.array([0,4,-1])",CLUSTER_4,CLUSTER_11
idx,numpy.argsort(model['w']),CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join(RESOURCES_FOLDER,'ex6data1.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join(RESOURCES_FOLDER,'ex6data2.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join(RESOURCES_FOLDER,'ex6data3.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join(RESOURCES_FOLDER,'spamTrain.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join(RESOURCES_FOLDER,'spamTest.mat')",CLUSTER_4,CLUSTER_11
x,"numpy.expand_dims(img,axis=0)",CLUSTER_2,CLUSTER_7
x,"numpy.expand_dims(img2,axis=0)",CLUSTER_2,CLUSTER_7
"[t,p]","scipy.stats.ttest_1samp(datasetA,42)",CLUSTER_1,CLUSTER_9
"[t,p]","scipy.stats.ttest_ind(datasetA,datasetB)",CLUSTER_1,CLUSTER_9
"[t,p]","scipy.stats.ttest_rel(dataset2,dataset3)",CLUSTER_1,CLUSTER_9
cov,"numpy.array([[1,0.8],[0.8,1]])",CLUSTER_7,CLUSTER_9
cov,"numpy.array([[0,0.8],[0.8,0]],dtype=np.float64)",CLUSTER_7,CLUSTER_9
x,"numpy.linspace(xlim[0],xlim[1],100)",CLUSTER_7,CLUSTER_9
y,"scipy.stats.norm(advifit.means['mu'],advifit.stds['mu'])",CLUSTER_7,CLUSTER_9
ax,"seaborn.distplot(trace['mu'],label='NUTS')",CLUSTER_7,CLUSTER_9
a,numpy.arange(12),CLUSTER_3,CLUSTER_6
a,numpy.arange(12),CLUSTER_3,CLUSTER_6
a,numpy.arange(48),CLUSTER_3,CLUSTER_6
a,numpy.arange(10),CLUSTER_3,CLUSTER_6
b,numpy.arange(16),CLUSTER_3,CLUSTER_6
c,numpy.arange(30),CLUSTER_3,CLUSTER_6
a,numpy.arange(12),CLUSTER_3,CLUSTER_6
b,numpy.arange(16),CLUSTER_3,CLUSTER_6
a,numpy.arange(100000),CLUSTER_3,CLUSTER_6
a,"numpy.array([11,22,33,44,55,66,77,88,99])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1.1,2.2,3.3])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1+2j,2+3j])",CLUSTER_3,CLUSTER_6
a,"numpy.array((1,2,3)",CLUSTER_3,CLUSTER_6
a,"numpy.array([[2,4],[6,8],[10,12]])",CLUSTER_3,CLUSTER_6
b,"numpy.array([[[1,2],[3,4]],
[[5,6],[7,8]],
[[9,10],[11,12]]])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
b,"numpy.array([[1,1],[0,0]])",CLUSTER_3,CLUSTER_6
c,"numpy.array([[1],[2],[3]])",CLUSTER_3,CLUSTER_6
y2,numpy.cos(x),CLUSTER_3,CLUSTER_6
y1,numpy.sin(x),CLUSTER_3,CLUSTER_6
x,"numpy.linspace(0,2*np.pi,10)",CLUSTER_3,CLUSTER_6
a,numpy.load('example_1.npy'),CLUSTER_3,CLUSTER_6
ex_2,numpy.load('example_2.npz'),CLUSTER_3,CLUSTER_6
ex_2,numpy.load('example_2.npz'),CLUSTER_3,CLUSTER_6
ex_3,numpy.load('example_3.npz'),CLUSTER_3,CLUSTER_6
R,numpy.sum((x-np.mean(x),CLUSTER_1,CLUSTER_10
A,"numpy.vstack([x,np.ones(len(x)",CLUSTER_1,CLUSTER_10
"a1,b1","numpy.linalg.lstsq(A,y)",CLUSTER_1,CLUSTER_10
"n,bins,pathes","matplotlib.pyplot.hist(x,num_bins)",CLUSTER_1,CLUSTER_10
X_train_augmented,numpy.array(X_train_augmented),CLUSTER_0,CLUSTER_11
y_train_augmented,numpy.array(y_train_augmented),CLUSTER_0,CLUSTER_11
X,numpy.array(ham_emails+spam_emails),CLUSTER_0,CLUSTER_11
y,numpy.array([0]*len(ham_emails),CLUSTER_0,CLUSTER_11
image,"numpy.concatenate(row_images,axis=0)",CLUSTER_0,CLUSTER_11
X_train_expanded,numpy.concatenate(X_train_expanded),CLUSTER_0,CLUSTER_11
y_train_expanded,numpy.concatenate(y_train_expanded),CLUSTER_0,CLUSTER_11
shifted_images,"numpy.apply_along_axis(shift_digit,axis=1,arr=X_train,dx=dx,dy=dy)",CLUSTER_0,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_0,CLUSTER_11
sgd_clf,"sklearn.linear_model.SGDClassifier(max_iter=5,random_state=42)",CLUSTER_0,CLUSTER_11
svm_scores,"sklearn.model_selection.cross_val_score(svm_clf,X_train,y_train,cv=10)",CLUSTER_0,CLUSTER_11
forest_scores,"sklearn.model_selection.cross_val_score(forest_clf,X_train,y_train,cv=10)",CLUSTER_0,CLUSTER_11
score,"sklearn.model_selection.cross_val_score(log_clf,X_train_transformed,y_train,cv=3,verbose=3)",CLUSTER_0,CLUSTER_11
skfolds,"sklearn.model_selection.StratifiedKFold(n_splits=3,random_state=42)",CLUSTER_0,CLUSTER_11
y_train_pred,"sklearn.model_selection.cross_val_predict(sgd_clf,X_train,y_train_5,cv=3)",CLUSTER_0,CLUSTER_11
y_scores,"sklearn.model_selection.cross_val_predict(sgd_clf,X_train,y_train_5,cv=3,
method=""decision_function"")",CLUSTER_0,CLUSTER_11
y_probas_forest,"sklearn.model_selection.cross_val_predict(forest_clf,X_train,y_train_5,cv=3,
method=""predict_proba"")",CLUSTER_0,CLUSTER_11
y_train_pred_forest,"sklearn.model_selection.cross_val_predict(forest_clf,X_train,y_train_5,cv=3)",CLUSTER_0,CLUSTER_11
y_train_pred,"sklearn.model_selection.cross_val_predict(sgd_clf,X_train_scaled,y_train,cv=3)",CLUSTER_0,CLUSTER_11
y_train_knn_pred,"sklearn.model_selection.cross_val_predict(knn_clf,X_train,y_multilabel,cv=3,n_jobs=-1)",CLUSTER_0,CLUSTER_11
y_probas_dmy,"sklearn.model_selection.cross_val_predict(dmy_clf,X_train,y_train_5,cv=3,method=""predict_proba"")",CLUSTER_0,CLUSTER_11
conf_mx,"sklearn.metrics.confusion_matrix(y_train,y_train_pred)",CLUSTER_0,CLUSTER_11
"precisions,recalls,thresholds","sklearn.metrics.precision_recall_curve(y_train_5,y_scores)",CLUSTER_0,CLUSTER_11
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_train_5,y_scores)",CLUSTER_0,CLUSTER_11
"fpr_forest,tpr_forest,thresholds_forest","sklearn.metrics.roc_curve(y_train_5,y_scores_forest)",CLUSTER_0,CLUSTER_11
"fprr,tprr,thresholdsr","sklearn.metrics.roc_curve(y_train_5,y_scores_dmy)",CLUSTER_0,CLUSTER_11
forest_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_0,CLUSTER_11
forest_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_0,CLUSTER_11
ovo_clf,"sklearn.multiclass.OneVsOneClassifier(SGDClassifier(max_iter=5,random_state=42)",CLUSTER_0,CLUSTER_11
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_0,CLUSTER_11
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_11
knn_clf,"sklearn.neighbors.KNeighborsClassifier(n_jobs=-1,weights='distance',n_neighbors=4)",CLUSTER_0,CLUSTER_11
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_11
knn_clf,sklearn.neighbors.KNeighborsClassifier(**grid_search.best_params_),CLUSTER_0,CLUSTER_11
dmy_clf,sklearn.dummy.DummyClassifier(),CLUSTER_0,CLUSTER_11
grid_search,"sklearn.model_selection.GridSearchCV(knn_clf,param_grid,cv=5,verbose=3,n_jobs=-1)",CLUSTER_0,CLUSTER_11
self.most_frequent_,pandas.Series([X[c].value_counts(),CLUSTER_0,CLUSTER_11
num_pipeline,"sklearn.pipeline.Pipeline([
(""select_numeric"",DataFrameSelector([""Age"",""SibSp"",""Parch"",""Fare""])",CLUSTER_0,CLUSTER_11
cat_pipeline,"sklearn.pipeline.Pipeline([
(""select_cat"",DataFrameSelector([""Pclass"",""Sex"",""Embarked""])",CLUSTER_0,CLUSTER_11
preprocess_pipeline,"sklearn.pipeline.Pipeline([
(""email_to_wordcount"",EmailToWordCounterTransformer()",CLUSTER_0,CLUSTER_11
preprocess_pipeline,"sklearn.pipeline.FeatureUnion(transformer_list=[
(""num_pipeline"",num_pipeline)",CLUSTER_0,CLUSTER_11
svm_clf,sklearn.svm.SVC(),CLUSTER_0,CLUSTER_11
structures,collections.Counter(),CLUSTER_0,CLUSTER_11
word_counts,collections.Counter(text.split(),CLUSTER_0,CLUSTER_11
stemmed_word_counts,collections.Counter(),CLUSTER_0,CLUSTER_11
total_count,collections.Counter(),CLUSTER_0,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_0,CLUSTER_11
text,"re.sub('<head.*?>.*?</head>','',html,flags=re.M|re.S|re.I)",CLUSTER_0,CLUSTER_11
text,"re.sub('<a\s.*?>','HYPERLINK',text,flags=re.M|re.S|re.I)",CLUSTER_0,CLUSTER_11
text,"re.sub('<.*?>','',text,flags=re.M|re.S)",CLUSTER_0,CLUSTER_11
text,re.sub(r'(\s*\n),CLUSTER_0,CLUSTER_11
text,re.sub(r'\d+(?:\.\d*(?:[eE]\d+),CLUSTER_0,CLUSTER_11
text,"re.sub(r'\W+','',text,flags=re.M)",CLUSTER_0,CLUSTER_11
log_clf,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_0,CLUSTER_11
log_clf,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_0,CLUSTER_11
arr_1,numpy.array(temp),CLUSTER_1,CLUSTER_10
arr,numpy.asarray(image),CLUSTER_1,CLUSTER_10
arr,numpy.asarray(image),CLUSTER_1,CLUSTER_10
final_arr_1,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_2,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_3,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_4,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_5,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_6,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_7,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_8,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_9,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_1,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_2,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_3,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_4,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
final_arr_5,"numpy.zeros((new_len,new_len)",CLUSTER_1,CLUSTER_10
temp,"numpy.append(final_arr_1,final_arr_2)",CLUSTER_1,CLUSTER_10
temp_1,"numpy.append(temp,final_arr_3)",CLUSTER_1,CLUSTER_10
temp_2,"numpy.append(temp_1,final_arr_4)",CLUSTER_1,CLUSTER_10
temp_3,"numpy.append(temp_2,final_arr_5)",CLUSTER_1,CLUSTER_10
temp_4,"numpy.append(temp_3,final_arr_6)",CLUSTER_1,CLUSTER_10
temp_5,"numpy.append(temp_4,final_arr_7)",CLUSTER_1,CLUSTER_10
temp_6,"numpy.append(temp_5,final_arr_8)",CLUSTER_1,CLUSTER_10
final_result,"numpy.append(temp_6,final_arr_9)",CLUSTER_1,CLUSTER_10
temp,"numpy.append(final_arr_1,final_arr_2)",CLUSTER_1,CLUSTER_10
temp_1,"numpy.append(temp,final_arr_3)",CLUSTER_1,CLUSTER_10
temp_2,"numpy.append(temp_1,final_arr_4)",CLUSTER_1,CLUSTER_10
final_result,"numpy.append(temp_2,final_arr_5)",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_10
img,"matplotlib.pyplot.imread(""X.png"")",CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_7
data,"pandas.read_csv('ADHD.txt',sep='',header=0)",CLUSTER_8,CLUSTER_9
all_volume,"pandas.concat([sh02_volume,sh03_volume],axis=0,ignore_index=True)",CLUSTER_8,CLUSTER_4
datas,pandas.read_excel(path),CLUSTER_8,CLUSTER_4
sh02,pandas.read_excel('/Users/zhangzhen/Desktop/000002日线数据.xlsx'),CLUSTER_8,CLUSTER_4
sh03,pandas.read_excel('/Users/zhangzhen/Desktop/000003日线数据.xlsx'),CLUSTER_8,CLUSTER_4
parameters['W'+str(l)],"numpy.zeros((layers_dims[l],layers_dims[l-1])",CLUSTER_5,CLUSTER_10
parameters['b'+str(l)],"numpy.zeros((layers_dims[l],1)",CLUSTER_5,CLUSTER_10
parameters['b'+str(l)],"numpy.zeros((layers_dims[l],1)",CLUSTER_5,CLUSTER_10
parameters['b'+str(l)],"numpy.zeros((layers_dims[l],1)",CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_10
df,"pandas.DataFrame(np.random.randn(4,3)",CLUSTER_8,CLUSTER_3
data,"pandas.read_csv('data/ex5.csv',na_values=[1])",CLUSTER_8,CLUSTER_3
randomNum,"random.randint(0,55000)",CLUSTER_2,CLUSTER_7
real_image_batch,"numpy.reshape(real_image_batch[0],[batch_size,28,28,1])",CLUSTER_2,CLUSTER_7
"plt.imshow(image,cmap",matplotlib.pyplot.get_cmap('gray_r'),CLUSTER_2,CLUSTER_7
a,"pandas.merge(t,f,how='left',left_on='beer_id',right_on='id')",CLUSTER_8,CLUSTER_3
t,"pandas.read_json('../data/reviews.json',orient='records')",CLUSTER_8,CLUSTER_3
f,"pandas.read_json('../data/beer-info.json',orient='records')",CLUSTER_8,CLUSTER_3
f.date,pandas.to_datetime(f.date.apply(lambdav:v.split(''),CLUSTER_8,CLUSTER_3
df,pandas.read_csv('creditcard.csv'),CLUSTER_8,CLUSTER_11
X_grid,numpy.arange(min(X_train),CLUSTER_5,CLUSTER_5
test,numpy.array([5.06]),CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(cols*5,rows*5)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(cols*5,rows*5)",CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('data.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
regressor,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,random_state=0,)",CLUSTER_5,CLUSTER_5
lasso,sklearn.linear_model.Lasso(),CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
rr,sklearn.linear_model.Ridge(),CLUSTER_5,CLUSTER_5
mlpr,"sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(5,3)",CLUSTER_5,CLUSTER_5
data,"numpy.array(df.iloc[:100,:])",CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(iris.data,columns=iris.feature_names)",CLUSTER_5,CLUSTER_5
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_5,CLUSTER_5
exponent,"math.exp(-(math.pow(x-mean,2)",CLUSTER_5,CLUSTER_5
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_5
fu,"numpy.array([[9,0,0,6,4,3,5,7,8,6,5],
[0,0,0,8,10,0,8,5,6,2,0],
[8,0,5,7,4,0,5,7,8,8,5],
[5,2,0,4,10,0,9,5,0,0,0],
[0,0,2,5,7,0,0,9,0,4,0],
[2,3,0,0,0,7,9,0,5,0,3],
[5,0,3,8,8,0,0,7,0,2,4],
[8,7,0,6,5,4,0,8,0,10,0],
[0,0,2,5,10,0,0,0,9,0,3]])",CLUSTER_1,CLUSTER_3
U,"numpy.zeros((R.shape[0],d)",CLUSTER_1,CLUSTER_3
V,"numpy.zeros((d,R.shape[1])",CLUSTER_1,CLUSTER_3
r_cap,"numpy.zeros((R.shape[0],R.shape[1])",CLUSTER_1,CLUSTER_3
"r_cap[i,j]","numpy.dot(A[i,:],B[:,j])",CLUSTER_1,CLUSTER_3
R,"pandas.DataFrame(fu,u,f)",CLUSTER_1,CLUSTER_3
R_cap,"pandas.DataFrame(r_cap,u,f)",CLUSTER_1,CLUSTER_3
labels_np,numpy.array(labels),CLUSTER_5,CLUSTER_5
target_values_np,numpy.array(target_values_list),CLUSTER_5,CLUSTER_5
img_matricies_np,numpy.asarray(img_matricies_list),CLUSTER_5,CLUSTER_5
test_img_matricies_np,numpy.asarray(test_img_matricies_list),CLUSTER_5,CLUSTER_5
test_individual_img_matrix_np,"numpy.asarray(get_imgMatrix_from_id(test_individual_id,image_dir=""../data/preprocessed_data/Test"")",CLUSTER_5,CLUSTER_5
test_not_processes_img_matrix_np,"numpy.asarray(get_imgMatrix_from_id(test_individual_id,image_dir=""../data/included/Test"",filetype="".jpg"")",CLUSTER_5,CLUSTER_5
labels_df,"pandas.DataFrame(labels_np,columns=list(""B"")",CLUSTER_5,CLUSTER_5
train,"pandas.read_csv(""../data/included/labels.csv"")",CLUSTER_5,CLUSTER_5
test,"pandas.read_csv(""../data/included/test_id.csv"")",CLUSTER_5,CLUSTER_5
clf,"sklearn.linear_model.SGDClassifier(loss=""log"",penalty=""l2"",max_iter=1000,tol=None)",CLUSTER_5,CLUSTER_5
arr,"numpy.array([10,20,30])",CLUSTER_8,CLUSTER_3
ser1,"pandas.Series([1,2,3,4],index=['USA','Germany','USSR','Japan'])",CLUSTER_8,CLUSTER_3
ser2,"pandas.Series([1,2,5,4],index=['USA','Germany','Italy','Japan'])",CLUSTER_8,CLUSTER_3
sigma,numpy.sqrt(n*.5*(1-.5),CLUSTER_1,CLUSTER_9
sigma,numpy.sqrt(n*.5*(1-.5),CLUSTER_1,CLUSTER_9
page,requests.get(hrefdoximity),CLUSTER_9,CLUSTER_2
page,requests.get(hrefhealthgrades),CLUSTER_9,CLUSTER_2
page,requests.get(hrefhealthgrades),CLUSTER_9,CLUSTER_2
page,requests.get(hrefhealthgrades),CLUSTER_9,CLUSTER_2
page,requests.get(hrefhealthgrades),CLUSTER_9,CLUSTER_2
page,requests.get(hreftruepeoplesearch),CLUSTER_9,CLUSTER_2
page,requests.get(hreftruepeoplesearch),CLUSTER_9,CLUSTER_2
page,requests.get(hreftruepeoplesearch),CLUSTER_9,CLUSTER_2
page,requests.get(hreftruepeoplesearch),CLUSTER_9,CLUSTER_2
leadstable,"pandas.read_csv('indiananames.csv',header=None)",CLUSTER_9,CLUSTER_2
delimetedname,"re.split('',str(item)",CLUSTER_9,CLUSTER_2
train_data,pandas.read_csv('train_groups.csv'),CLUSTER_5,CLUSTER_5
train_data,pandas.read_csv('test_groups.csv'),CLUSTER_5,CLUSTER_5
x_axis,numpy.arange(length//N),CLUSTER_5,CLUSTER_5
x_axis,numpy.arange(length//N),CLUSTER_5,CLUSTER_5
y_batch,numpy.array(y_batch),CLUSTER_5,CLUSTER_5
a,"numpy.array([np.dot(X_batch[i],self.weights)",CLUSTER_5,CLUSTER_5
self.weights,"numpy.array([random.uniform(-1/k,1/k)",CLUSTER_5,CLUSTER_5
C1,"numpy.array([[0.,-0.8],[1.5,0.8]])",CLUSTER_5,CLUSTER_5
C2,"numpy.array([[1.,-0.7],[2.,0.7]])",CLUSTER_5,CLUSTER_5
X_train,numpy.array(X_train),CLUSTER_5,CLUSTER_5
y_train,numpy.array(y_train),CLUSTER_5,CLUSTER_5
groups_train,numpy.array(groups_train),CLUSTER_5,CLUSTER_5
X_test,numpy.array(X_test),CLUSTER_5,CLUSTER_5
groups_train,numpy.array(groups_train),CLUSTER_5,CLUSTER_5
X_batch,"numpy.zeros((batch_size,X.shape[1])",CLUSTER_5,CLUSTER_5
y_batch,numpy.zeros((batch_size),CLUSTER_5,CLUSTER_5
loss_grad,numpy.zeros((len(self.weights),CLUSTER_5,CLUSTER_5
X,"numpy.concatenate((X,list_added)",CLUSTER_5,CLUSTER_5
loss_grad,"numpy.dot(sigmoid(numpy.dot(X_batch,self.weights)",CLUSTER_5,CLUSTER_5
gauss1,"numpy.dot(np.random.randn(200,2)",CLUSTER_5,CLUSTER_5
gauss2,"numpy.dot(np.random.randn(200,2)",CLUSTER_5,CLUSTER_5
loss,"numpy.sum([(y_batch[i]-
np.dot(X_batch[i],self.weights)",CLUSTER_5,CLUSTER_5
loss+,numpy.sum(self.weights**2),CLUSTER_5,CLUSTER_5
loss+,numpy.sum(self.weights**2),CLUSTER_5,CLUSTER_5
loss_grad,numpy.sum([(a[i]-y_batch[i]),CLUSTER_5,CLUSTER_5
x,"numpy.linspace(-5,8,num=2)",CLUSTER_5,CLUSTER_5
X,"numpy.vstack([gauss1,gauss2])",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.1,stratify=y)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_5,CLUSTER_5
"X,y","sklearn.datasets.make_classification(n_samples=100000,n_features=10,
n_informative=4,n_redundant=0,
random_state=123,class_sep=1.0,
n_clusters_per_class=1)",CLUSTER_5,CLUSTER_5
df,pandas.DataFrame(list(client.lookups['aggregated_franchise_spend'].find({'extracted_date':extracted_date}),CLUSTER_11,CLUSTER_12
gf,pandas.DataFrame(index=list(set(df.companyname),CLUSTER_11,CLUSTER_12
amount_corr_df,pandas.DataFrame(index=gf.index),CLUSTER_11,CLUSTER_12
amount_corr_df,pandas.DataFrame(index=gf.index),CLUSTER_11,CLUSTER_12
inds,numpy.where(df[amount_col].notnull(),CLUSTER_11,CLUSTER_12
inds,numpy.where(df[amount_col].notnull(),CLUSTER_11,CLUSTER_12
amount_corr_df[amount_next+'_corr'],"numpy.log(gf[amount_next].div(gf[amount_now],axis=0)",CLUSTER_11,CLUSTER_12
C,numpy.corrcoef(df.values),CLUSTER_11,CLUSTER_12
correlation,"pandas.DataFrame([top15['Citabledocumentsperperson'],top15['EnergySupplyperCapita']])",CLUSTER_1,CLUSTER_3
cut,"pandas.cut(top15[""%Renewable""],5,labels=False)",CLUSTER_1,CLUSTER_3
GDP,"pandas.read_csv(world_bank_gdp_csv_location,skiprows=4)",CLUSTER_1,CLUSTER_3
energy,"pandas.read_excel(energy_xls_location,sheetname='Energy',header=None,skiprows=18,skip_footer=38)",CLUSTER_1,CLUSTER_3
ScimEn,pandas.read_excel(scim_location),CLUSTER_1,CLUSTER_3
auths,json.load(json_yahoo_file),CLUSTER_11,CLUSTER_12
ranges,pandas.read_csv('IPRangesOfInterest.csv'),CLUSTER_9,CLUSTER_2
scores,numpy.array(gr_dt01.cv_results_['mean_test_score']),CLUSTER_7,CLUSTER_8
scores,numpy.array(gr_dt02.cv_results_['mean_test_score']),CLUSTER_7,CLUSTER_8
scores,numpy.array(gr_rf01.cv_results_['mean_test_score']),CLUSTER_7,CLUSTER_8
scores,numpy.array(gr_rf02.cv_results_['mean_test_score']),CLUSTER_7,CLUSTER_8
mask,"numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_7,CLUSTER_8
diamond_data01,pandas.get_dummies(diamond_data),CLUSTER_7,CLUSTER_8
diamond_data02,pandas.get_dummies(diamond_data_f),CLUSTER_7,CLUSTER_8
diamond_data,"pandas.read_csv('./diamonds.csv',sep=',',decimal='.')",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_7,CLUSTER_8
"X_train01,X_test01,y_train01,y_test01","sklearn.model_selection.train_test_split(X01,y01,random_state=0,test_size=.3,shuffle=True)",CLUSTER_7,CLUSTER_8
"X_train02,X_test02,y_train02,y_test02","sklearn.model_selection.train_test_split(X02,y02,random_state=0,test_size=.3,shuffle=True)",CLUSTER_7,CLUSTER_8
lr01,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
lr02,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
treeModel,sklearn.tree.DecisionTreeRegressor(max_depth=maxDepthOptimo),CLUSTER_7,CLUSTER_8
treeModel,sklearn.tree.DecisionTreeRegressor(max_depth=maxDepthOptimo),CLUSTER_7,CLUSTER_8
gr_dt01,sklearn.model_selection.GridSearchCV(DecisionTreeRegressor(random_state=0),CLUSTER_7,CLUSTER_8
gr_dt02,sklearn.model_selection.GridSearchCV(DecisionTreeRegressor(random_state=0),CLUSTER_7,CLUSTER_8
gr_rf01,"sklearn.model_selection.GridSearchCV(RandomForestRegressor(random_state=0,n_estimators=100,max_features='sqrt')",CLUSTER_7,CLUSTER_8
gr_rf02,"sklearn.model_selection.GridSearchCV(RandomForestRegressor(random_state=0,n_estimators=100,max_features='sqrt')",CLUSTER_7,CLUSTER_8
grid,"sklearn.model_selection.GridSearchCV(GradientBoostingRegressor(random_state=0,max_depth=3)",CLUSTER_7,CLUSTER_8
rf_01,"sklearn.ensemble.RandomForestRegressor(max_depth=10,n_estimators=100,max_features='sqrt')",CLUSTER_7,CLUSTER_8
rf_02,"sklearn.ensemble.RandomForestRegressor(max_depth=10,n_estimators=100,max_features='sqrt')",CLUSTER_7,CLUSTER_8
bt,"sklearn.ensemble.GradientBoostingRegressor(random_state=0,max_depth=3,learning_rate=0.1,n_estimators=1500)",CLUSTER_7,CLUSTER_8
df,"pandas.merge(df_2015,df_2017,on='Country')",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(""./2017.csv"")",CLUSTER_7,CLUSTER_8
df_2015,"pandas.read_csv(""./2015.csv"")",CLUSTER_7,CLUSTER_8
df_2017,"pandas.read_csv(""./2017.csv"")",CLUSTER_7,CLUSTER_8
mask,"numpy.zeros_like(corrmat,dtype=np.bool)",CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(18,18)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
programmers,"pandas.read_csv('/Users/kamilw/Desktop/Moje/PythonLearing/Pandas_Udemy/course-files/StackOverflowDeveloperSurvey2018.csv',usecols=['ConvertedSalary'],squeeze=True,low_memory=False)",CLUSTER_8,CLUSTER_4
fortune500,"pandas.read_csv('/Users/kamilw/Desktop/Moje/PythonLearing/Pandas_Udemy/course-files/Fortune_500_2017.csv',usecols=['Title','Employees'],index_col=['Title'],squeeze=True)",CLUSTER_8,CLUSTER_4
riverdale,"pandas.DataFrame({'height':samp_series,
'actor':actor})",CLUSTER_8,CLUSTER_3
data,"pandas.Series([0.25,0.5,0.75,1.0])",CLUSTER_8,CLUSTER_3
data,"pandas.Series([0.25,0.5,0.75,1.0],
index=['a','b','c','d'])",CLUSTER_8,CLUSTER_3
samp_series,pandas.Series(samp_dict),CLUSTER_8,CLUSTER_3
actor,pandas.Series(actor_dict),CLUSTER_8,CLUSTER_3
titanic,pandas.read_csv(url),CLUSTER_8,CLUSTER_3
x0,"numpy.array([-8.0,8.0,27.0])",CLUSTER_1,CLUSTER_6
mis_np,numpy.array(mis),CLUSTER_1,CLUSTER_6
corr_np,numpy.array(corr),CLUSTER_1,CLUSTER_6
lagged,"numpy.roll(x,-tau)",CLUSTER_1,CLUSTER_6
data_lag1,"numpy.roll(x,-tau)",CLUSTER_1,CLUSTER_6
data_lag2,"numpy.roll(x,-2*tau)",CLUSTER_1,CLUSTER_6
t,"numpy.linspace(0,100,10000)",CLUSTER_1,CLUSTER_6
joint,"numpy.hstack((unlagged,lagged)",CLUSTER_1,CLUSTER_6
corr_,"numpy.corrcoef(np.array([x[:-tau],x[tau:]])",CLUSTER_1,CLUSTER_6
data,"scipy.integrate.odeint(lorentz_deriv,x0,t)",CLUSTER_1,CLUSTER_6
"U,Sig,Vh","scipy.linalg.svd(x_hank[:,:-1],False)",CLUSTER_1,CLUSTER_6
hank,"scipy.linalg.hankel(c=array[:nrows],r=array[nrows-1:])",CLUSTER_1,CLUSTER_6
hank,scipy.linalg.hankel(c=array[:nrows]),CLUSTER_1,CLUSTER_6
html_page,requests.get(url),CLUSTER_10,CLUSTER_12
html_page,requests.get(url),CLUSTER_10,CLUSTER_12
loan_data_target_train,pandas.DataFrame(loan_data_target_train),CLUSTER_5,CLUSTER_9
loan_data_target_train_2,pandas.DataFrame(loan_data_target_train_2),CLUSTER_5,CLUSTER_9
loan_data_target_test,pandas.DataFrame(loan_data_target_test),CLUSTER_5,CLUSTER_9
loan_data_target_test_2,pandas.DataFrame(loan_data_target_test_2),CLUSTER_5,CLUSTER_9
summary_table,"pandas.DataFrame(columns=['Featurename'],data=feature_name)",CLUSTER_5,CLUSTER_9
summary_table,"pandas.DataFrame(columns=['Featurename'],data=feature_name)",CLUSTER_5,CLUSTER_9
yhat_test_rf,pandas.DataFrame(yhat_test_rf),CLUSTER_5,CLUSTER_9
yhat_test_rf_2,pandas.DataFrame(yhat_test_rf_2),CLUSTER_5,CLUSTER_9
yhat_test_rf_imb,pandas.DataFrame(yhat_test_rf_imb),CLUSTER_5,CLUSTER_9
yhat_test_gbl,pandas.DataFrame(yhat_test_gbl),CLUSTER_5,CLUSTER_9
df_ref_cat,"pandas.DataFrame(ref_categories,columns=['FeatureName'])",CLUSTER_5,CLUSTER_9
mis_val_table,"pandas.concat([mis_valu,mis_val_percent],axis=1)",CLUSTER_5,CLUSTER_9
loan_data_dummies,"pandas.concat(loan_data_dummies,axis=1)",CLUSTER_5,CLUSTER_9
dataframe,"pandas.concat([dataframe,loan_data_dummies],axis=1)",CLUSTER_5,CLUSTER_9
df,"pandas.concat([df[discrete_variable_name],good_bad_variable_df],axis=1)",CLUSTER_5,CLUSTER_9
df,"pandas.concat([df.groupby(df.columns.values[0],as_index=False)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs,"pandas.concat([loan_data_targets_test_temp,pd.DataFrame(yhat_test_proba)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_rf,"pandas.concat([loan_data_target_test,yhat_test_rf.iloc[:,1]],axis=1)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_rf_2,"pandas.concat([loan_data_target_test_2,yhat_test_rf_2.iloc[:,1]],axis=1)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_rf_imb,"pandas.concat([loan_data_target_test,yhat_test_rf_imb.iloc[:,1]],axis=1)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_gbl,"pandas.concat([loan_data_target_test,yhat_test_gbl.iloc[:,1]],axis=1)",CLUSTER_5,CLUSTER_9
df_scorecard,"pandas.concat([summary_table,df_ref_cat])",CLUSTER_5,CLUSTER_9
df_cutoff,pandas.concat([pd.DataFrame(thresholds),CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor'],"pandas.cut(df_inputs_prepr['loan_amnt'],30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor'],"pandas.cut(df_inputs_prepr['annual_inc'],100)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_temp['annual_inc_factor'],"pandas.cut(df_inputs_prepr_temp['annual_inc'],20)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor_f'],"pandas.cut(df_inputs_prepr['int_rate_factor'],10)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor_f'],"pandas.cut(df_inputs_prepr['revol_util_factor'],30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc_t'],"pandas.cut(df_inputs_prepr['open_acc'],30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['zip_code_f'],"pandas.cut(df_inputs_prepr['zip_code_t'],5)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal_t'],"pandas.cut(df_inputs_prepr['tot_cur_bal'],300)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor'],"pandas.cut(df_inputs_prepr_t['loan_amnt'],30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor'],"pandas.cut(df_inputs_prepr_t['annual_inc'],100)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor_f'],"pandas.cut(df_inputs_prepr_t['int_rate_factor'],10)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor_f'],"pandas.cut(df_inputs_prepr_t['revol_util_factor'],30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc_t'],"pandas.cut(df_inputs_prepr_t['open_acc'],30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['zip_code_f'],"pandas.cut(df_inputs_prepr_t['zip_code_t'],5)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal_t'],"pandas.cut(df_inputs_prepr_t['tot_cur_bal'],300)",CLUSTER_5,CLUSTER_9
df_backup,"pandas.read_csv('/Users/fayadabbasi/Desktop/Python_Scripts/Galvanize/DSI/CreditRisk/merged.csv',skiprows=1,low_memory=False)",CLUSTER_5,CLUSTER_9
df[items],pandas.to_numeric(df[items]),CLUSTER_5,CLUSTER_9
dataframe[column+'_int'],pandas.to_numeric(dataframe[column+'_int']),CLUSTER_5,CLUSTER_9
dataframe[column+'_int'],pandas.to_numeric(dataframe[column+'_int']),CLUSTER_5,CLUSTER_9
dataframe[column+'_factor'],pandas.to_numeric(dataframe[column+'_factor']),CLUSTER_5,CLUSTER_9
dataframe[column+'_t'],pandas.to_numeric(dataframe[column+'_t']),CLUSTER_5,CLUSTER_9
x,"numpy.array(df_WoE.iloc[:,0].apply(str)",CLUSTER_5,CLUSTER_9
dataframe['good_bad'],"numpy.where(dataframe['loan_status'].isin(['ChargedOff','Default','Doesnotmeetthecreditpolicy.Status:FullyPaid','Doesnotmeetthecreditpolicy.Status:ChargedOff','Late(31-120days)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:1'],numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(1817),CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:2'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(1817,7084)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:3'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(7084,11034)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:4'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(11034,28150)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:5'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(28150,28160)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:6'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(28160,32100)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:7'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(32100,36050)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['loan_amnt_factor:8'],"numpy.where((df_inputs_prepr['loan_amnt_factor'].isin(range(36050,int(df_inputs_prepr['loan_amnt'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:1'],numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(7000),CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:2'],"numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(7000,42000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:3'],"numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(42000,70000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:4'],"numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(70000,100000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:5'],"numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(100000,112000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:6'],"numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(112000,126000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['annual_inc_factor:7'],"numpy.where((df_inputs_prepr['annual_inc_factor'].isin(range(126000,int(df_inputs_prepr['annual_inc'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:1'],numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(8),CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:2'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(8,11)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:3'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(11,13)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:4'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(13,15)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:5'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(15,17)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:6'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(17,19)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:7'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(19,21)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:8'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(21,23)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:9'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(23,25)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:10'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(25,27)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['int_rate_factor:11'],"numpy.where((df_inputs_prepr['int_rate_factor_f'].isin(range(27,int(df_inputs_prepr['int_rate_factor'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:1'],numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(12),CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:2'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(12,24)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:3'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(24,36)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:4'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(36,48)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:5'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(48,60)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:6'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(60,72)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:7'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(72,84)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:8'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(84,96)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['revol_util_factor:9'],"numpy.where((df_inputs_prepr['revol_util_factor_f'].isin(range(96,int(df_inputs_prepr['revol_util_factor'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:1'],numpy.where((df_inputs_prepr['open_acc_t'].isin(range(3),CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:2'],"numpy.where((df_inputs_prepr['open_acc_t'].isin(range(3,6)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:3'],"numpy.where((df_inputs_prepr['open_acc_t'].isin(range(6,10)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:4'],"numpy.where((df_inputs_prepr['open_acc_t'].isin(range(10,15)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:5'],"numpy.where((df_inputs_prepr['open_acc_t'].isin(range(15,20)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:6'],"numpy.where((df_inputs_prepr['open_acc_t'].isin(range(20,30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['open_acc:9'],"numpy.where((df_inputs_prepr['open_acc_t'].isin(range(30,int(df_inputs_prepr['open_acc'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr['zip_code:1'],numpy.where((df_inputs_prepr['zip_code_f'].isin(range(200),CLUSTER_5,CLUSTER_9
df_inputs_prepr['zip_code:2'],"numpy.where((df_inputs_prepr['zip_code_f'].isin(range(200,400)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['zip_code:3'],"numpy.where((df_inputs_prepr['zip_code_f'].isin(range(400,600)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['zip_code:4'],"numpy.where((df_inputs_prepr['zip_code_f'].isin(range(600,800)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['zip_code:5'],"numpy.where((df_inputs_prepr['zip_code_f'].isin(range(800,int(df_inputs_prepr['zip_code_t'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:1'],numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(30000),CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:2'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(30000,70000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:3'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(70000,120000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:4'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(120000,180000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:5'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(180000,250000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:6'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(250000,350000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:7'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(350000,500000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:8'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(500000,750000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr['tot_cur_bal:9'],"numpy.where((df_inputs_prepr['tot_cur_bal_t'].isin(range(750000,int(df_inputs_prepr['tot_cur_bal'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:1'],numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(1817),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:2'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(1817,7084)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:3'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(7084,11034)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:4'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(11034,28150)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:5'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(28150,28160)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:6'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(28160,32100)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:7'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(32100,36050)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['loan_amnt_factor:8'],"numpy.where((df_inputs_prepr_t['loan_amnt_factor'].isin(range(36050,int(df_inputs_prepr_t['loan_amnt'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:1'],numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(7000),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:2'],"numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(7000,42000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:3'],"numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(42000,70000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:4'],"numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(70000,100000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:5'],"numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(100000,112000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:6'],"numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(112000,126000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['annual_inc_factor:7'],"numpy.where((df_inputs_prepr_t['annual_inc_factor'].isin(range(126000,int(df_inputs_prepr_t['annual_inc'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:1'],numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(8),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:2'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(8,11)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:3'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(11,13)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:4'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(13,15)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:5'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(15,17)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:6'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(17,19)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:7'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(19,21)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:8'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(21,23)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:9'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(23,25)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:10'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(25,27)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['int_rate_factor:11'],"numpy.where((df_inputs_prepr_t['int_rate_factor_f'].isin(range(27,int(df_inputs_prepr_t['int_rate_factor'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:1'],numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(12),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:2'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(12,24)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:3'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(24,36)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:4'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(36,48)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:5'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(48,60)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:6'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(60,72)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:7'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(72,84)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:8'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(84,96)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['revol_util_factor:9'],"numpy.where((df_inputs_prepr_t['revol_util_factor_f'].isin(range(96,int(df_inputs_prepr_t['revol_util_factor'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:1'],numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(3),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:2'],"numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(3,6)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:3'],"numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(6,10)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:4'],"numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(10,15)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:5'],"numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(15,20)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:6'],"numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(20,30)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['open_acc:9'],"numpy.where((df_inputs_prepr_t['open_acc_t'].isin(range(30,int(df_inputs_prepr_t['open_acc'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['zip_code:1'],numpy.where((df_inputs_prepr_t['zip_code_f'].isin(range(200),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['zip_code:2'],"numpy.where((df_inputs_prepr_t['zip_code_f'].isin(range(200,400)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['zip_code:3'],"numpy.where((df_inputs_prepr_t['zip_code_f'].isin(range(400,600)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['zip_code:4'],"numpy.where((df_inputs_prepr_t['zip_code_f'].isin(range(600,800)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['zip_code:5'],"numpy.where((df_inputs_prepr_t['zip_code_f'].isin(range(800,int(df_inputs_prepr_t['zip_code_t'].max()",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:1'],numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(30000),CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:2'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(30000,70000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:3'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(70000,120000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:4'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(120000,180000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:5'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(180000,250000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:6'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(250000,350000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:7'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(350000,500000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:8'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(500000,750000)",CLUSTER_5,CLUSTER_9
df_inputs_prepr_t['tot_cur_bal:9'],"numpy.where((df_inputs_prepr_t['tot_cur_bal_t'].isin(range(750000,int(df_inputs_prepr_t['tot_cur_bal'].max()",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs['yhat_test'],"numpy.where(df_actual_predicted_probs['yhat_test_proba']>tr,1,0)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_rf['yhat_test_proba_rf'],"numpy.where(df_actual_predicted_probs_rf['yhat_test_rf']>tr,1,0)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_rf_2['yhat_test_proba_rf_2'],"numpy.where(df_actual_predicted_probs_rf_2['yhat_test_rf_2']>tr,1,0)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_rf_imb['yhat_test_proba_rf_imb'],"numpy.where(df_actual_predicted_probs_rf_imb['yhat_test_rf_imb']>tr,1,0)",CLUSTER_5,CLUSTER_9
df_actual_predicted_probs_gbl['yhat_test_proba_gbl'],"numpy.where(df_actual_predicted_probs_gbl['yhat_test_gbl']>tr,1,0)",CLUSTER_5,CLUSTER_9
summary_table['Coefficients'],numpy.transpose(reg.coef_),CLUSTER_5,CLUSTER_9
summary_table['Coefficients'],numpy.transpose(reg.coef_),CLUSTER_5,CLUSTER_9
yhat_proba_from_score,numpy.exp(sum_coef_from_score),CLUSTER_5,CLUSTER_9
df['WoE'],numpy.log(df['prop_n_good']/df['prop_n_bad']),CLUSTER_5,CLUSTER_9
reg,"sklearn.linear_model.LogisticRegression(class_weight={0:3,1:1})",CLUSTER_5,CLUSTER_9
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_actual_predicted_probs['loan_data_targets_test'],df_actual_predicted_probs['yhat_test_proba'])",CLUSTER_5,CLUSTER_9
"fpr_rf,tpr_rf,thresholds_rf","sklearn.metrics.roc_curve(df_actual_predicted_probs_rf['loan_data_targets_test'],df_actual_predicted_probs_rf['yhat_test_rf'])",CLUSTER_5,CLUSTER_9
"fpr_rf_imb,tpr_rf_imb,thresholds_rf_imb","sklearn.metrics.roc_curve(df_actual_predicted_probs_rf_imb['loan_data_targets_test'],df_actual_predicted_probs_rf_imb['yhat_test_rf_imb'])",CLUSTER_5,CLUSTER_9
"fpr_gbl,tpr_gbl,thresholds_gbl","sklearn.metrics.roc_curve(df_actual_predicted_probs_gbl['loan_data_targets_test'],df_actual_predicted_probs_gbl['yhat_test_gbl'])",CLUSTER_5,CLUSTER_9
auroc,"sklearn.metrics.roc_auc_score(df_actual_predicted_probs['loan_data_targets_test'],df_actual_predicted_probs['yhat_test_proba'])",CLUSTER_5,CLUSTER_9
auroc_rf,"sklearn.metrics.roc_auc_score(df_actual_predicted_probs_rf['loan_data_targets_test'],df_actual_predicted_probs_rf['yhat_test_rf'])",CLUSTER_5,CLUSTER_9
auroc_rf_imb,"sklearn.metrics.roc_auc_score(df_actual_predicted_probs_rf_imb['loan_data_targets_test'],df_actual_predicted_probs_rf_imb['yhat_test_rf_imb'])",CLUSTER_5,CLUSTER_9
auroc_gbl,"sklearn.metrics.roc_auc_score(df_actual_predicted_probs_gbl['loan_data_targets_test'],df_actual_predicted_probs_gbl['yhat_test_gbl'])",CLUSTER_5,CLUSTER_9
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=None,random_state=42,n_jobs=-1)",CLUSTER_5,CLUSTER_9
rf2,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=None,random_state=42,n_jobs=-1)",CLUSTER_5,CLUSTER_9
rf_imb,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=None,class_weight={0:10,1:1},random_state=42,n_jobs=-1)",CLUSTER_5,CLUSTER_9
gbl,"sklearn.ensemble.GradientBoostingClassifier(loss='deviance',learning_rate=0.001,n_estimators=300,subsample=1,min_samples_leaf=1,max_depth=2,random_state=42)",CLUSTER_5,CLUSTER_9
train_indicies,numpy.arange(Xd.shape[0]),CLUSTER_2,CLUSTER_7
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_2,CLUSTER_7
correct+,numpy.sum(corr),CLUSTER_2,CLUSTER_7
total_loss,numpy.sum(losses),CLUSTER_2,CLUSTER_7
u,"numpy.zeros((M,T)",CLUSTER_1,CLUSTER_10
W,"numpy.zeros((M,M)",CLUSTER_1,CLUSTER_10
S,"numpy.zeros((M,T)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,1000)",CLUSTER_1,CLUSTER_10
t,"numpy.linspace(t_start,t_end,T)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(A,B,M)",CLUSTER_1,CLUSTER_10
t,"numpy.arange(2013,2018,0.2)",CLUSTER_1,CLUSTER_3
t,"numpy.arange(2013,2018,0.2)",CLUSTER_1,CLUSTER_3
purchase_data,pandas.read_csv(file_to_load),CLUSTER_8,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_2,CLUSTER_10
df,pandas.read_csv('fe_workshop/dataset/LendingClub50000.csv'),CLUSTER_5,CLUSTER_1
ohe,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
recipes,json.load(f),CLUSTER_0,CLUSTER_5
tc_matrix,"pandas.DataFrame(data=numpy.zeros((model.num_topics,len(targets)",CLUSTER_0,CLUSTER_5
target_sums,"pandas.DataFrame(data=numpy.zeros((1,len(targets)",CLUSTER_0,CLUSTER_5
mean_coher,numpy.mean([c[1]forcincoher]),CLUSTER_0,CLUSTER_5
mean_coher2,numpy.mean([c[1]forcincoher2]),CLUSTER_0,CLUSTER_5
c,collections.Counter(np.hstack((words.values(),CLUSTER_0,CLUSTER_5
tokens,"re.findall('""(\d+)",CLUSTER_0,CLUSTER_5
rf_model,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_0,CLUSTER_5
tc_matrix,"pandas.DataFrame(data=np.zeros((model.num_topics,len(targets)",CLUSTER_0,CLUSTER_5
target_sums,"pandas.DataFrame(data=np.zeros((1,len(targets)",CLUSTER_0,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(2,5)",CLUSTER_2,CLUSTER_7
df[k],"pandas.DataFrame(params[k],columns=VARS)",CLUSTER_7,CLUSTER_5
df_all,pandas.DataFrame([]),CLUSTER_7,CLUSTER_5
df_all,"pandas.concat([df[('sig','em')",CLUSTER_7,CLUSTER_5
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=7)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
matrix_2l_4f_l2reg_train,"sklearn.metrics.confusion_matrix(Y_train,Y_predict_2l_4f_l2reg_train.round()",CLUSTER_7,CLUSTER_5
matrix_2l_4f_l2reg_test,"sklearn.metrics.confusion_matrix(Y_test,Y_predict_2l_4f_l2reg_test.round()",CLUSTER_7,CLUSTER_5
matrix_2l_4f_l2reg,"sklearn.metrics.confusion_matrix(Y,Y_predict_2l_4f_l2reg.round()",CLUSTER_7,CLUSTER_5
h2_sig,"matplotlib.pyplot.hist(df_all[df_all['label']==1][""model_2l_4f_l2reg_predicted""],
bins=np.linspace(0,1.0,20)",CLUSTER_7,CLUSTER_5
h2_bkg,"matplotlib.pyplot.hist(df_all[df_all['label']==0][""model_2l_4f_l2reg_predicted""],
bins=np.linspace(0,1.0,20)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,1,i+1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,2,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,2,2)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,1,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,3,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,3,2)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,3,3)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,3,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,3,2)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,3,3)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,1,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,1,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,2,1)",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.subplot(1,2,2)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(4,4)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(15,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(3,1,figsize=(12,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,6)",CLUSTER_7,CLUSTER_5
"fpr_2l_4f_l2reg_train,tpr_2l_4f_l2reg_train,thresholds_2l_4f_l2reg_train","sklearn.metrics.roc_curve(Y_train,Y_predict_2l_4f_l2reg_train)",CLUSTER_7,CLUSTER_5
"fpr_2l_4f_l2reg_test,tpr_2l_4f_l2reg_test,thresholds_2l_4f_l2reg_test","sklearn.metrics.roc_curve(Y_test,Y_predict_2l_4f_l2reg_test)",CLUSTER_7,CLUSTER_5
"fpr_2l_4f_l2reg,tpr_2l_4f_l2reg,thresholds_2l_4f_l2reg","sklearn.metrics.roc_curve(Y,Y_predict_2l_4f_l2reg)",CLUSTER_7,CLUSTER_5
roc_auc_2l_4f_l2reg_train,"sklearn.metrics.auc(fpr_2l_4f_l2reg_train,tpr_2l_4f_l2reg_train)",CLUSTER_7,CLUSTER_5
roc_auc_2l_4f_l2reg_test,"sklearn.metrics.auc(fpr_2l_4f_l2reg_test,tpr_2l_4f_l2reg_test)",CLUSTER_7,CLUSTER_5
roc_auc_2l_4f_l2reg,"sklearn.metrics.auc(fpr_2l_4f_l2reg,tpr_2l_4f_l2reg)",CLUSTER_7,CLUSTER_5
x,"numpy.expand_dims(x,axis=0)",CLUSTER_4,CLUSTER_11
X,"numpy.load(""./XY_train/X.npy"")",CLUSTER_4,CLUSTER_11
Y,"numpy.load(""./XY_train/Y.npy"")",CLUSTER_4,CLUSTER_11
X_dev,"numpy.load(""./XY_dev/X_dev.npy"")",CLUSTER_4,CLUSTER_11
Y_dev,"numpy.load(""./XY_dev/Y_dev.npy"")",CLUSTER_4,CLUSTER_11
arry,"numpy.arange(0,50,5,dtype=""int32"")",CLUSTER_3,CLUSTER_6
array_list,numpy.array(liste),CLUSTER_3,CLUSTER_6
a,"numpy.array([2,4,5,12,54,9,0,23,67,45])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,6,5,1,2,9])",CLUSTER_3,CLUSTER_6
b,"numpy.array([2,4,5,9,6,5])",CLUSTER_3,CLUSTER_6
sonuc,"numpy.concatenate([list_of_array[0],list_of_array[2],list_of_array[2],list_of_array[3]])",CLUSTER_3,CLUSTER_6
sonuc_2,"numpy.concatenate([list_of_array[0],list_of_array[2],list_of_array[2],list_of_array[3]])",CLUSTER_3,CLUSTER_6
nerede,numpy.argsort(array1),CLUSTER_3,CLUSTER_6
array2,numpy.sort(array1),CLUSTER_3,CLUSTER_6
a,numpy.sum(matrs>20),CLUSTER_3,CLUSTER_6
k,numpy.sum(matrs<30),CLUSTER_3,CLUSTER_6
e,numpy.sum(matrs==33),CLUSTER_3,CLUSTER_6
array,"numpy.split(a,[2,5,7])",CLUSTER_3,CLUSTER_6
sizevals,"numpy.array([round(s,1)",CLUSTER_4,CLUSTER_8
corrmats[visual_area],"numpy.array([v.valuesfork,vintuningcorrs.items()",CLUSTER_4,CLUSTER_8
corrmats[visual_area],"numpy.array([v.valuesfork,vincondcorrs.items()",CLUSTER_4,CLUSTER_8
mask,"numpy.zeros_like(corr_matrix,dtype=np.bool)",CLUSTER_4,CLUSTER_8
weights,numpy.ones_like(acorrs),CLUSTER_4,CLUSTER_8
scores,"numpy.hstack([c1,c2,c3])",CLUSTER_4,CLUSTER_8
groups,numpy.hstack([['V1'for_inrange(len(c1),CLUSTER_4,CLUSTER_8
scores,"numpy.hstack([c1,c2,c3])",CLUSTER_4,CLUSTER_8
groups,numpy.hstack([['V1'for_inrange(len(c1),CLUSTER_4,CLUSTER_8
setnames,numpy.unique(['_'.join(s.split('_'),CLUSTER_4,CLUSTER_8
setnames,numpy.unique([s.split('_'),CLUSTER_4,CLUSTER_8
t,"pandas.DataFrame([[1,2,3],[4,5,6],[7,8,9]])",CLUSTER_4,CLUSTER_8
sdf.loc[sdf.morphlevel,"=-1,'size']=pandas.Series(sizevals,index=control_ixs)",CLUSTER_4,CLUSTER_8
meanr,pandas.concat([pd.Series(estats.gdf.get_group(roi),CLUSTER_4,CLUSTER_8
tdf,pandas.concat([pd.DataFrame(estats.gdf.get_group(roi),CLUSTER_4,CLUSTER_8
df,"pandas.concat(dflist,axis=0)",CLUSTER_4,CLUSTER_8
summary,pandas.concat(dsummary),CLUSTER_4,CLUSTER_8
meanr,pandas.concat([pd.Series(estats.gdf.get_group(roi),CLUSTER_4,CLUSTER_8
self.inputs,collections.deque(inp),CLUSTER_10,CLUSTER_4
y,numpy.array(df['Type']),CLUSTER_7,CLUSTER_5
X,numpy.array(df),CLUSTER_7,CLUSTER_5
df,pandas.read_csv('seeds.csv'),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=10),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(knn,X,y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(knn,X,y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(clf,X,y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(clf,X,y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(clf,X,y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_5
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=k),CLUSTER_7,CLUSTER_5
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=23),CLUSTER_7,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
result,"pandas.concat([dfu,dfb,dfr],axis=1,sort=False)",CLUSTER_7,CLUSTER_3
Ratingsdata,"pandas.read_csv('Books-dataset/BX-Book-Ratings.csv',encoding='Latin-1',header=None)",CLUSTER_7,CLUSTER_3
Booksdata,"pandas.read_csv('Books-dataset/BX-Books1.csv',encoding='Latin-1',header=None)",CLUSTER_7,CLUSTER_3
usersdata,"pandas.read_csv('Books-dataset/BX-Users2.csv',encoding='Latin=1',header=None)",CLUSTER_7,CLUSTER_3
dfr['Book-Rating'],pandas.to_numeric(dfr['Book-Rating']),CLUSTER_7,CLUSTER_3
books1['Year-Of-Publication'],pandas.to_numeric(books1['Year-Of-Publication']),CLUSTER_7,CLUSTER_3
users1['Age'],pandas.to_numeric(users1['Age']),CLUSTER_7,CLUSTER_3
train_df,pandas.read_csv('_Data/train.csv'),CLUSTER_5,CLUSTER_5
test_df,pandas.read_csv('_Data/test.csv'),CLUSTER_5,CLUSTER_5
train_meta,"numpy.concatenate(train_meta,axis=0)",CLUSTER_5,CLUSTER_5
trainy_meta,"numpy.concatenate(trainy_meta,axis=0)",CLUSTER_5,CLUSTER_5
C,"numpy.logspace(0,2,20)",CLUSTER_5,CLUSTER_5
"x0,x1","numpy.meshgrid(
np.linspace(-1,1,500)",CLUSTER_5,CLUSTER_5
"x0,x1","numpy.meshgrid(
np.linspace(-1,1,500)",CLUSTER_5,CLUSTER_5
"fig,axs",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_5
"fig,axs",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
knn_cls,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_5
knn_cls,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_5,CLUSTER_5
knn_cls,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_5,CLUSTER_5
svc_cls,"sklearn.svm.SVC(kernel=""poly"")",CLUSTER_5,CLUSTER_5
svc_cls,"sklearn.svm.SVC(kernel='poly',C=2,coef0=80,degree=3,probability=True)",CLUSTER_5,CLUSTER_5
kfolds,"sklearn.model_selection.KFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_5,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(knn_cls,knn_grid,cv=5,scoring='accuracy')",CLUSTER_5,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(svc_cls,svc_grid,cv=5,scoring='accuracy',n_jobs=4)",CLUSTER_5,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(log_cls,hyperparameters,cv=kfolds)",CLUSTER_5,CLUSTER_5
log_cls,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_3
targets,"numpy.array(targets_list,ndmin=2)",CLUSTER_1,CLUSTER_3
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_3
test_w_i_h,"numpy.array([[0.1,0.4,-0.3],
[-0.2,0.5,0.2]])",CLUSTER_1,CLUSTER_3
test_w_h_o,"numpy.array([[0.3,-0.1]])",CLUSTER_1,CLUSTER_3
hidden_errors,"numpy.dot(self.weights_hidden_to_output.T,output_errors)",CLUSTER_1,CLUSTER_3
self.hidden_inputs,"numpy.dot(self.weights_input_to_hidden,inputs)",CLUSTER_1,CLUSTER_3
self.final_inputs,"numpy.dot(self.weights_hidden_to_output,self.hidden_outputs)",CLUSTER_1,CLUSTER_3
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_1,CLUSTER_3
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_1,CLUSTER_3
rides,pandas.read_csv(data_path),CLUSTER_1,CLUSTER_3
dates,pandas.to_datetime(rides.ix[test_data.index]['dteday']),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_3
total_annual,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
us_holidays_df,"pandas.DataFrame([],columns=['ds','holiday'])",CLUSTER_7,CLUSTER_8
custom_holidays_df,"pandas.DataFrame([],columns=['ds','holiday'])",CLUSTER_7,CLUSTER_8
total_monthly_reset_index,pandas.DataFrame(total_monthly),CLUSTER_7,CLUSTER_8
us_holidays_df,"pandas.concat([us_holidays_df,custom_holidays_df],ignore_index=True)",CLUSTER_7,CLUSTER_8
df_sales_avg_holidays,"pandas.merge(df_sales_avg_holidays,us_holidays_df,on='ds')",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('../data/net_sales_total.csv'),CLUSTER_7,CLUSTER_8
weather_df,pandas.read_csv('../data/dark_sky_api.csv'),CLUSTER_7,CLUSTER_8
df['date'],pandas.to_datetime(df['date']),CLUSTER_7,CLUSTER_8
weather_df['time'],pandas.to_datetime(weather_df['time']),CLUSTER_7,CLUSTER_8
us_holidays_df['ds'],pandas.to_datetime(us_holidays_df['ds']),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(3,2,sharex=True)",CLUSTER_7,CLUSTER_8
ax,"seaborn.boxplot(data=y,orient=""h"")",CLUSTER_7,CLUSTER_8
ax,seaborn.boxplot(data=x),CLUSTER_7,CLUSTER_8
ax,seaborn.boxplot(data=z),CLUSTER_7,CLUSTER_8
ax,seaborn.boxplot(data=total_annual),CLUSTER_7,CLUSTER_8
"fordate,nameinsorted(holidays.US(years","numpy.arange(2015,2020+1)",CLUSTER_7,CLUSTER_8
ldates,numpy.array(ldates),CLUSTER_7,CLUSTER_8
lnames,numpy.array(lnames),CLUSTER_7,CLUSTER_8
ldates,numpy.array(ldates),CLUSTER_7,CLUSTER_8
lnames,numpy.array(lnames),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(ncols=6,nrows=2,figsize=(12,6)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(ncols=6,nrows=2,figsize=(12,6)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(ncols=4,nrows=2,figsize=(12,6)",CLUSTER_1,CLUSTER_10
X_train,numpy.zeros((len(X),CLUSTER_1,CLUSTER_10
X,numpy.concatenate((X),CLUSTER_1,CLUSTER_10
y,numpy.concatenate((y),CLUSTER_1,CLUSTER_10
X,numpy.sqrt(X),CLUSTER_1,CLUSTER_10
startprob,"numpy.array([0.5,0.3,0.2])",CLUSTER_1,CLUSTER_10
transmat,"numpy.array([[0.7,0.2,0.1],
[0.3,0.5,0.2],
[0.1,0.1,0.8]])",CLUSTER_1,CLUSTER_10
mus,"numpy.array([[0.0,0.0],
[9.0,10.0],
[11.0,-1.0]])",CLUSTER_1,CLUSTER_10
sigma,"numpy.transpose(sigma,[2,0,1])",CLUSTER_1,CLUSTER_10
sigma,"numpy.dstack([np.array([[1.0,0.9],[0.9,1.0]])",CLUSTER_1,CLUSTER_10
bdata,pandas.DataFrame(),CLUSTER_7,CLUSTER_5
X,"pandas.concat([x_train,x_test])",CLUSTER_7,CLUSTER_5
X,"pandas.concat([x_train,x_test])",CLUSTER_7,CLUSTER_5
Xn,pandas.get_dummies(X),CLUSTER_7,CLUSTER_5
Xn,pandas.get_dummies(X),CLUSTER_7,CLUSTER_5
train_data,"pandas.read_csv('../datasets/preprocessed/train.csv',sep=',')",CLUSTER_7,CLUSTER_5
test_data,"pandas.read_csv('../datasets/preprocessed/test.csv',sep=',')",CLUSTER_7,CLUSTER_5
epsilon,"sklearn.metrics.f1_score(y_test,pred,average='macro')",CLUSTER_7,CLUSTER_5
epsilon,"sklearn.metrics.f1_score(y_test,pred,average='macro')",CLUSTER_7,CLUSTER_5
epsilon,"sklearn.metrics.f1_score(y_test,pred,average='macro')",CLUSTER_7,CLUSTER_5
epsilon,"sklearn.metrics.f1_score(y_test,pred,average='macro')",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=10,scoring='f1_macro')",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=10,scoring='f1_macro')",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_7,CLUSTER_5
clf,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',min_samples_split=3,min_impurity_decrease=0.01)",CLUSTER_7,CLUSTER_5
clf,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',min_samples_split=clf.best_params_['min_samples_split'],min_impurity_decrease=clf.best_params_['min_impurity_decrease'])",CLUSTER_7,CLUSTER_5
clf,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',min_samples_split=clf.best_params_['min_samples_split'],min_impurity_decrease=clf.best_params_['min_impurity_decrease'])",CLUSTER_7,CLUSTER_5
clf,sklearn.model_selection.GridSearchCV(tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_7,CLUSTER_5
clf,sklearn.model_selection.GridSearchCV(tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_7,CLUSTER_5
x,numpy.arange(results.shape[0]),CLUSTER_7,CLUSTER_5
idx_between_quartiles,"numpy.logical_and(bad_wine_q1<X_train['alcohol'],X_train['alcohol']<good_wine_q3)",CLUSTER_7,CLUSTER_5
results,"pandas.DataFrame({'name':names,
'train_scores':train_scores,
'train_std':train_scores_std,
'test_scores':test_scores,
'test_std':test_scores_std,
'best_parameters':best_parameters,
'estimator':estimators},
columns=['name','train_scores','train_std',
'test_scores','test_std','best_parameters','estimator'])",CLUSTER_7,CLUSTER_5
test_df,pandas.DataFrame(X_test),CLUSTER_7,CLUSTER_5
results,"pandas.DataFrame({'name':names,
'train_scores':train_scores,
'train_std':train_scores_std,
'test_scores':test_scores,
'test_std':test_scores_std,
'best_parameters':best_parameters,
'estimator':estimators},
columns=['name','train_scores','train_std',
'test_scores','test_std','best_parameters','estimator'])",CLUSTER_7,CLUSTER_5
all_results,"pandas.concat([results,second_search])",CLUSTER_7,CLUSTER_5
wine,pandas.read_csv('Data/winequality-red.csv'),CLUSTER_7,CLUSTER_5
ax,"seaborn.countplot(data=wine,x='quality',palette='Greens_d')",CLUSTER_7,CLUSTER_5
ax,"seaborn.countplot(data=wine,x='good_wine',palette='Greens_d')",CLUSTER_7,CLUSTER_5
figure,"matplotlib.pyplot.figure(figsize=(10,6)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=0.7,random_state=42)",CLUSTER_7,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(model,
param_grid=param_grid,
n_jobs=-1,
cv=3,
refit=True,
verbose=1,
return_train_score=True)",CLUSTER_7,CLUSTER_5
grid_search_svm,"sklearn.model_selection.GridSearchCV(svm,
param_grid=param_grid,
scoring=make_scorer(accuracy_score)",CLUSTER_7,CLUSTER_5
grid_search_svm,"sklearn.model_selection.GridSearchCV(svm,
param_grid=param_grid,
scoring=make_scorer(accuracy_score)",CLUSTER_7,CLUSTER_5
cv_voting_clf,"sklearn.model_selection.GridSearchCV(voting_clf,
param_grid={},
scoring=make_scorer(accuracy_score)",CLUSTER_7,CLUSTER_5
model,"sklearn.svm.SVC(kernel='rbf',
probability=False,
cache_size=1024)",CLUSTER_7,CLUSTER_5
svm,"sklearn.svm.SVC(probability=False,
cache_size=2048)",CLUSTER_7,CLUSTER_5
svm,"sklearn.svm.SVC(probability=False,
cache_size=2048)",CLUSTER_7,CLUSTER_5
scoring,sklearn.metrics.make_scorer(accuracy_score),CLUSTER_7,CLUSTER_5
scoring,sklearn.metrics.make_scorer(accuracy_score),CLUSTER_7,CLUSTER_5
scoring,sklearn.metrics.make_scorer(accuracy_score),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline(steps=[
('scaler',scaler)",CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline(steps=[('scaler',scaler)",CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline(steps=[('scaler',scaler)",CLUSTER_7,CLUSTER_5
voting_clf,"sklearn.ensemble.VotingClassifier(clfs,voting='hard',n_jobs=-1)",CLUSTER_7,CLUSTER_5
size,numpy.array([len(sample_binomial_1),CLUSTER_12,CLUSTER_9
sd,numpy.array([sample_binomial_1.std(),CLUSTER_12,CLUSTER_9
size_normal,numpy.array([len(sample_normal_1),CLUSTER_12,CLUSTER_9
sd_normal,numpy.array([sample_normal_1.std(),CLUSTER_12,CLUSTER_9
df_2016,pandas.DataFrame(filtered_df[filtered_df['Year']==2016]),CLUSTER_11,CLUSTER_3
df_2017,pandas.DataFrame(filtered_df[filtered_df['Year']==2017]),CLUSTER_11,CLUSTER_3
df_2018,pandas.DataFrame(filtered_df[filtered_df['Year']==2018]),CLUSTER_11,CLUSTER_3
df_2019,pandas.DataFrame(filtered_df[filtered_df['Year']==2019]),CLUSTER_11,CLUSTER_3
df_merged,"pandas.concat([filtered_2016_df,filtered_2017_df,filtered_2018_df])",CLUSTER_11,CLUSTER_3
df,"pandas.read_csv(""C:/Users/omiku/DCU/DataManagementLab/Assignment/US_Accidents_May19/US_Accidents_May19.csv"")",CLUSTER_11,CLUSTER_3
df['Start_Time'],pandas.to_datetime(df.Start_Time),CLUSTER_11,CLUSTER_3
X_train,"pandas.read_csv('../data/X_train_trans.csv',index_col=0)",CLUSTER_7,CLUSTER_8
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_7,CLUSTER_8
knn2,sklearn.neighbors.KNeighborsClassifier(n_neighbors=7),CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_train,y_pred)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_train,y_pred2)",CLUSTER_7,CLUSTER_8
scores1,"sklearn.model_selection.cross_val_score(knn,X_train,y_train,cv=5,scoring='accuracy')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(knn,X_train,y_train,cv=5,scoring='precision')",CLUSTER_7,CLUSTER_8
scores2,"sklearn.model_selection.cross_val_score(knn2,X_train,y_train,cv=5,scoring='precision')",CLUSTER_7,CLUSTER_8
complete,"pandas.concat(frames,sort=True)",CLUSTER_7,CLUSTER_3
count_reg,"pandas.concat(frames2,axis=1,join='inner',sort=True)",CLUSTER_7,CLUSTER_3
veh_count_reg,"pandas.merge_ordered(count_county,region,on='County',fill_method=None,how='outer')",CLUSTER_7,CLUSTER_3
veh_count_reg,"pandas.merge_ordered(count_county,region_csv,on='County',fill_method=None,how='outer')",CLUSTER_7,CLUSTER_3
vehicle_reg,pandas.read_csv('Vehicle__Snowmobile__and_Boat_Registrations.csv'),CLUSTER_7,CLUSTER_3
charge_hub,pandas.read_csv('Electric_Vehicle_Charging_Stations_in_New_York.csv'),CLUSTER_7,CLUSTER_3
region_csv,pandas.read_csv('county_to_region1.csv'),CLUSTER_7,CLUSTER_3
region,pandas.read_excel(r'/Users/ceciliapershyn/CIS_512_Term_Project/county_to_region.xlsx'),CLUSTER_7,CLUSTER_3
ax,"seaborn.countplot(x=""Zip"",data=veh)",CLUSTER_7,CLUSTER_3
region,"pandas.DataFrame(region,columns=['Region_Code','Region','County'])",CLUSTER_7,CLUSTER_3
review_lens,collections.Counter([len(x),CLUSTER_2,CLUSTER_7
charge_value,numpy.exp(charge_value),CLUSTER_7,CLUSTER_8
df.charges,numpy.log1p(df.charges),CLUSTER_7,CLUSTER_8
model_table,"pandas.DataFrame(y_pred,y_test)",CLUSTER_7,CLUSTER_8
other_model,"pandas.DataFrame(r_score,model_str)",CLUSTER_7,CLUSTER_8
df['age_category'],"pandas.cut(df[""age""],cut_points,labels=labels)",CLUSTER_7,CLUSTER_8
"df[""bmi_cat""]","pandas.cut(df['bmi'],cut_points,labels=label_names)",CLUSTER_7,CLUSTER_8
df_smoker,"pandas.get_dummies(df_smoker,drop_first=True)",CLUSTER_7,CLUSTER_8
df_non_smoker,"pandas.get_dummies(df_non_smoker,drop_first=True)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('insurance.csv'),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_8
"f,(ax,ax2)","matplotlib.pyplot.subplots(2,1,figsize=(8,10)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_8
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,figsize=(8,8)",CLUSTER_7,CLUSTER_8
res,"scipy.stats.probplot(data[input],plot=ax3)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_7,CLUSTER_8
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
mcdon,"pandas.read_csv('mcdonalds.csv',index_col='Date',parse_dates=True)",CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_1,CLUSTER_3
bottom10mortality,pandas.DataFrame(data=definition),CLUSTER_8,CLUSTER_3
citypopulation,pandas.DataFrame(data=definition),CLUSTER_8,CLUSTER_3
results,"pandas.DataFrame(columns=['SSID','R-squared','MAPE','MdAPE','Row_Count','JPID_Count'])",CLUSTER_4,CLUSTER_5
ssid_df,"pandas.concat([ssid_df,Day_dummies],axis=1)",CLUSTER_4,CLUSTER_5
ssid_df,"pandas.concat([ssid_df,HF_dummies],axis=1)",CLUSTER_4,CLUSTER_5
results,"pandas.concat([results,temp],axis=0)",CLUSTER_4,CLUSTER_5
res,"pandas.concat([blank,temp],axis=0)",CLUSTER_4,CLUSTER_5
Day_dummies,"pandas.get_dummies(ssid_df.Day,prefix='Day',drop_first=True)",CLUSTER_4,CLUSTER_5
HF_dummies,"pandas.get_dummies(ssid_df.HourFrame,prefix='HF',drop_first=True)",CLUSTER_4,CLUSTER_5
stop_times,"pandas.merge(stop_times,stops,on='stop_id',how='inner')",CLUSTER_4,CLUSTER_5
ssid_df,"pandas.merge(left=ssid_df,right=JPIDL,how='left',left_on='JourneyPatternID',right_on='JourneyPatternID')",CLUSTER_4,CLUSTER_5
calendar,pandas.read_csv('./googletransitdbfeedp20121129-1547/calendar.txt'),CLUSTER_4,CLUSTER_5
routes,pandas.read_csv('./googletransitdbfeedp20121129-1547/routes.txt'),CLUSTER_4,CLUSTER_5
stops,pandas.read_csv('./googletransitdbfeedp20121129-1547/stops.txt'),CLUSTER_4,CLUSTER_5
trips,pandas.read_csv('./googletransitdbfeedp20121129-1547/trips.txt'),CLUSTER_4,CLUSTER_5
stop_times,pandas.read_csv('./googletransitdbfeedp20121129-1547/stop_times.txt'),CLUSTER_4,CLUSTER_5
JPIDL,pandas.read_csv('JPID_Length.csv'),CLUSTER_4,CLUSTER_5
allSSID,pandas.read_csv('allSSID.csv'),CLUSTER_4,CLUSTER_5
blank,pandas.read_csv('./Route_XXXX_travel_time_csvs/Blank_Route_travel_time.csv'),CLUSTER_4,CLUSTER_5
temp,pandas.read_csv(fn),CLUSTER_4,CLUSTER_5
trip_stops['pass_stop_id'],numpy.array(target_1),CLUSTER_4,CLUSTER_5
ssid_df['SchoolHoliday'],"numpy.where(ssid_df['TimeFrame'].isin(['2013-01-01','2013-01-02','2013-01-03','2013-01-04','2013-01-05','2013-01-06'])",CLUSTER_4,CLUSTER_5
gbr_mae,"sklearn.metrics.mean_absolute_error(y,gbr_pred)",CLUSTER_4,CLUSTER_5
gbr_mdae,"sklearn.metrics.median_absolute_error(y,gbr_pred)",CLUSTER_4,CLUSTER_5
gbr_rsq,"sklearn.metrics.r2_score(y,gbr_pred)",CLUSTER_4,CLUSTER_5
gbr,sklearn.svm.SVR(),CLUSTER_4,CLUSTER_5
pad_sources_batch,"numpy.array(pad_sentence_batch(sources_batch,source_pad_int)",CLUSTER_2,CLUSTER_7
pad_targets_batch,"numpy.array(pad_sentence_batch(targets_batch,target_pad_int)",CLUSTER_2,CLUSTER_7
target,"numpy.pad(
target,
[(0,0)",CLUSTER_2,CLUSTER_7
logits,"numpy.pad(
logits,
[(0,0)",CLUSTER_2,CLUSTER_7
conf_matr_df_train,"pandas.DataFrame(confusion_matrix(y_train,predict(y_train_pred,tr_thresholds,train_fpr,train_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_test,"pandas.DataFrame(confusion_matrix(y_test,predict(y_test_pred,tr_thresholds,test_fpr,test_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_train_1,"pandas.DataFrame(confusion_matrix(y_train,predict(y_train_pred,tr_thresholds,train_fpr,train_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_test_1,"pandas.DataFrame(confusion_matrix(y_test,predict(y_test_pred,tr_thresholds,test_fpr,test_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_train_2,"pandas.DataFrame(confusion_matrix(y_train,predict(y_train_pred,tr_thresholds,train_fpr,train_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_test_2,"pandas.DataFrame(confusion_matrix(y_test,predict(y_test_pred,tr_thresholds,test_fpr,test_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_train_3,"pandas.DataFrame(confusion_matrix(y_train,predict(y_train_pred,tr_thresholds,train_fpr,train_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_test_3,"pandas.DataFrame(confusion_matrix(y_test,predict(y_test_pred,tr_thresholds,test_fpr,test_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_train_4,"pandas.DataFrame(confusion_matrix(y_train,predict(y_train_pred,tr_thresholds,train_fpr,train_fpr)",CLUSTER_0,CLUSTER_8
conf_matr_df_test_4,"pandas.DataFrame(confusion_matrix(y_test,predict(y_test_pred,tr_thresholds,test_fpr,test_fpr)",CLUSTER_0,CLUSTER_8
X_train,"pandas.merge(X_train,price_data,on='id',how='left')",CLUSTER_0,CLUSTER_8
X_test,"pandas.merge(X_test,price_data,on='id',how='left')",CLUSTER_0,CLUSTER_8
X_cv,"pandas.merge(X_cv,price_data,on='id',how='left')",CLUSTER_0,CLUSTER_8
project_data,"pandas.read_csv('train_data.csv',nrows=50000)",CLUSTER_0,CLUSTER_8
resource_data,pandas.read_csv('resources.csv'),CLUSTER_0,CLUSTER_8
project_data['Date'],pandas.to_datetime(project_data['project_submitted_datetime']),CLUSTER_0,CLUSTER_8
embedding,numpy.array([float(val),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
vector,numpy.zeros(300),CLUSTER_0,CLUSTER_8
"train_fpr,train_tpr,tr_thresholds","sklearn.metrics.roc_curve(y_train,y_train_pred)",CLUSTER_0,CLUSTER_8
"test_fpr,test_tpr,te_thresholds","sklearn.metrics.roc_curve(y_test,y_test_pred)",CLUSTER_0,CLUSTER_8
"train_fpr,train_tpr,tr_thresholds","sklearn.metrics.roc_curve(y_train,y_train_pred)",CLUSTER_0,CLUSTER_8
"test_fpr,test_tpr,te_thresholds","sklearn.metrics.roc_curve(y_test,y_test_pred)",CLUSTER_0,CLUSTER_8
"train_fpr,train_tpr,tr_thresholds","sklearn.metrics.roc_curve(y_train,y_train_pred)",CLUSTER_0,CLUSTER_8
"test_fpr,test_tpr,te_thresholds","sklearn.metrics.roc_curve(y_test,y_test_pred)",CLUSTER_0,CLUSTER_8
"train_fpr,train_tpr,tr_thresholds","sklearn.metrics.roc_curve(y_train,y_train_pred)",CLUSTER_0,CLUSTER_8
"test_fpr,test_tpr,te_thresholds","sklearn.metrics.roc_curve(y_test,y_test_pred)",CLUSTER_0,CLUSTER_8
"train_fpr,train_tpr,tr_thresholds","sklearn.metrics.roc_curve(y_train,y_train_pred)",CLUSTER_0,CLUSTER_8
"test_fpr,test_tpr,te_thresholds","sklearn.metrics.roc_curve(y_test,y_test_pred)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""won't"",""willnot"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""can\'t"",""cannot"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""n\'t"",""not"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'re"",""are"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'s"",""is"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'d"",""would"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'ll"",""will"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'t"",""not"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'ve"",""have"",phrase)",CLUSTER_0,CLUSTER_8
phrase,"re.sub(r""\'m"",""am"",phrase)",CLUSTER_0,CLUSTER_8
sent,"re.sub('[^A-Za-z0-9]+','',sent)",CLUSTER_0,CLUSTER_8
sent,"re.sub('[^A-Za-z0-9]+','',sent)",CLUSTER_0,CLUSTER_8
sent,"re.sub('[^A-Za-z0-9]+','',sent)",CLUSTER_0,CLUSTER_8
sent,"re.sub('[^A-Za-z0-9]+','',sent)",CLUSTER_0,CLUSTER_8
title,"re.sub('[^A-Za-z0-9]+','',title)",CLUSTER_0,CLUSTER_8
title,"re.sub('[^A-Za-z0-9]+','',title)",CLUSTER_0,CLUSTER_8
title,"re.sub('[^A-Za-z0-9]+','',title)",CLUSTER_0,CLUSTER_8
my_counter,collections.Counter(),CLUSTER_0,CLUSTER_8
my_counter,collections.Counter(),CLUSTER_0,CLUSTER_8
my_counter,collections.Counter(),CLUSTER_0,CLUSTER_8
my_counter,collections.Counter(),CLUSTER_0,CLUSTER_8
my_counter,collections.Counter(),CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(project_data,project_data['project_is_approved'],test_size=0.33,stratify=project_data['project_is_approved'])",CLUSTER_0,CLUSTER_8
"X_train,X_cv,y_train,y_cv","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.33,stratify=y_train)",CLUSTER_0,CLUSTER_8
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_0,CLUSTER_8
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_0,CLUSTER_8
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_0,CLUSTER_8
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_0,CLUSTER_8
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_0,CLUSTER_8
X_tr,"scipy.sparse.hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,project_grade_categories_one_hot_train,teacher_prefix_categories_one_hot_train,price_train,quantity_train,prev_projects_train,title_word_count_train,essay_word_count_train,title_bow_train,text_bow_train)",CLUSTER_0,CLUSTER_8
X_te,"scipy.sparse.hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,project_grade_categories_one_hot_test,teacher_prefix_categories_one_hot_test,price_test,quantity_test,prev_projects_test,title_word_count_test,essay_word_count_test,title_bow_test,text_bow_test)",CLUSTER_0,CLUSTER_8
X_cr,"scipy.sparse.hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,project_grade_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,price_cv,quantity_cv,prev_projects_cv,title_word_count_cv,essay_word_count_cv,title_bow_cv,text_bow_cv)",CLUSTER_0,CLUSTER_8
X_tr,"scipy.sparse.hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,project_grade_categories_one_hot_train,teacher_prefix_categories_one_hot_train,price_train,quantity_train,prev_projects_train,title_word_count_train,essay_word_count_train,text_tfidf_train,title_tfidf_train)",CLUSTER_0,CLUSTER_8
X_te,"scipy.sparse.hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,project_grade_categories_one_hot_test,teacher_prefix_categories_one_hot_test,price_test,quantity_test,prev_projects_test,title_word_count_test,essay_word_count_test,text_tfidf_test,title_tfidf_test)",CLUSTER_0,CLUSTER_8
X_cr,"scipy.sparse.hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,project_grade_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,price_cv,quantity_cv,prev_projects_cv,title_word_count_cv,essay_word_count_cv,text_tfidf_cv,title_tfidf_cv)",CLUSTER_0,CLUSTER_8
X_tr,"scipy.sparse.hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,project_grade_categories_one_hot_train,teacher_prefix_categories_one_hot_train,price_train,quantity_train,prev_projects_train,title_word_count_train,essay_word_count_train,avg_w2v_vectors_train,avg_w2v_vectors_titles_train)",CLUSTER_0,CLUSTER_8
X_te,"scipy.sparse.hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,project_grade_categories_one_hot_test,teacher_prefix_categories_one_hot_test,price_test,quantity_test,prev_projects_test,title_word_count_test,essay_word_count_test,avg_w2v_vectors_test,avg_w2v_vectors_titles_test)",CLUSTER_0,CLUSTER_8
X_cr,"scipy.sparse.hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,project_grade_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,price_cv,quantity_cv,prev_projects_cv,title_word_count_cv,essay_word_count_cv,avg_w2v_vectors_cv,avg_w2v_vectors_titles_cv)",CLUSTER_0,CLUSTER_8
X_tr,"scipy.sparse.hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,project_grade_categories_one_hot_train,teacher_prefix_categories_one_hot_train,price_train,quantity_train,prev_projects_train,title_word_count_train,essay_word_count_train,tfidf_w2v_vectors_train,tfidf_w2v_vectors_titles_train)",CLUSTER_0,CLUSTER_8
X_te,"scipy.sparse.hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,project_grade_categories_one_hot_test,teacher_prefix_categories_one_hot_test,price_test,quantity_test,prev_projects_test,title_word_count_test,essay_word_count_test,tfidf_w2v_vectors_test,tfidf_w2v_vectors_titles_test)",CLUSTER_0,CLUSTER_8
X_cr,"scipy.sparse.hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,project_grade_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,price_cv,quantity_cv,prev_projects_cv,title_word_count_cv,essay_word_count_cv,tfidf_w2v_vectors_cv,tfidf_w2v_vectors_titles_cv)",CLUSTER_0,CLUSTER_8
X_tr,"scipy.sparse.hstack((categories_one_hot_train,sub_categories_one_hot_train,school_state_categories_one_hot_train,project_grade_categories_one_hot_train,teacher_prefix_categories_one_hot_train,price_train,quantity_train,prev_projects_train,title_word_count_train,essay_word_count_train,text_tfidf_train,title_tfidf_train)",CLUSTER_0,CLUSTER_8
X_te,"scipy.sparse.hstack((categories_one_hot_test,sub_categories_one_hot_test,school_state_categories_one_hot_test,project_grade_categories_one_hot_test,teacher_prefix_categories_one_hot_test,price_test,quantity_test,prev_projects_test,title_word_count_test,essay_word_count_test,text_tfidf_test,title_tfidf_test)",CLUSTER_0,CLUSTER_8
X_cr,"scipy.sparse.hstack((categories_one_hot_cv,sub_categories_one_hot_cv,school_state_categories_one_hot_cv,project_grade_categories_one_hot_cv,teacher_prefix_categories_one_hot_cv,price_cv,quantity_cv,prev_projects_cv,title_word_count_cv,essay_word_count_cv,text_tfidf_cv,title_tfidf_cv)",CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=best_k_1),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=best_k_2),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=best_k_3),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=best_k_4),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_0,CLUSTER_8
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=best_k_5),CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(neigh,parameters,cv=5,scoring='roc_auc')",CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(neigh,parameters,cv=5,scoring='roc_auc')",CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(neigh,parameters,cv=5,scoring='roc_auc')",CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(neigh,parameters,cv=5,scoring='roc_auc')",CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(neigh,parameters,cv=5,scoring='roc_auc')",CLUSTER_0,CLUSTER_8
X_tr_new,"sklearn.feature_selection.SelectKBest(chi2,k=2000)",CLUSTER_0,CLUSTER_8
X_te_new,"sklearn.feature_selection.SelectKBest(chi2,k=2000)",CLUSTER_0,CLUSTER_8
X_cr_new,"sklearn.feature_selection.SelectKBest(chi2,k=2000)",CLUSTER_0,CLUSTER_8
data,pandas.read_csv('../3-Data_Cleaning/movies_half.csv'),CLUSTER_1,CLUSTER_3
features,"numpy.zeros(shape=(sample_count,2048)",CLUSTER_4,CLUSTER_0
labels,"numpy.zeros(shape=(sample_count,label_count)",CLUSTER_4,CLUSTER_0
pca128,sklearn.decomposition.PCA(n_components=128),CLUSTER_4,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
clf128,"sklearn.svm.SVC(kernel='linear',probability=True)",CLUSTER_4,CLUSTER_0
y_enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
d,"pandas.concat([pd.read_csv(f,index_col=0,header=0)",CLUSTER_5,CLUSTER_5
index,numpy.arange(len(names),CLUSTER_5,CLUSTER_5
pos_seq,numpy.asarray(pos_seq),CLUSTER_5,CLUSTER_5
neg_seq,numpy.asarray(neg_seq),CLUSTER_5,CLUSTER_5
X_train,numpy.asarray(list(map(lambdax:X_enc.transform(x.astype('str'),CLUSTER_5,CLUSTER_5
X_test,numpy.asarray(list(map(lambdax:X_enc.transform(x.astype('str'),CLUSTER_5,CLUSTER_5
X_train,"numpy.concatenate((neg_seq[neg_train,:-1],pos_seq[pos_train,:-1])",CLUSTER_5,CLUSTER_5
y_train,"numpy.concatenate((neg_seq[neg_train,-1],pos_seq[pos_train,-1])",CLUSTER_5,CLUSTER_5
X_test,"numpy.concatenate((neg_seq[neg_test,:-1],pos_seq[pos_test,:-1])",CLUSTER_5,CLUSTER_5
y_test,"numpy.concatenate((neg_seq[neg_test,-1],pos_seq[pos_test,-1])",CLUSTER_5,CLUSTER_5
"names,occ","numpy.unique(d['class'].values,return_counts=True)",CLUSTER_5,CLUSTER_5
kfold,"sklearn.model_selection.KFold(n_splits=5,random_state=7)",CLUSTER_5,CLUSTER_5
X_enc,sklearn.preprocessing.LabelBinarizer(),CLUSTER_5,CLUSTER_5
OceanFraction,"numpy.array([0.,0.1,0.2,0.5,0.8,0.9,1.0,1.0,0.95,0.9,0.9,
0.85,0.8,0.75,0.75,0.8,0.8,0.75,0.75,0.75,0.75,
0.7,0.65,0.6,0.6,0.55,0.5,0.5,0.45,0.4,0.3,
0.35,0.5,0.8,0.9,1.0])",CLUSTER_4,CLUSTER_11
OceanFraction,"numpy.array([0.,0.1,0.2,0.5,0.8,0.9,1.0,1.0,0.95,0.9,0.9,
0.85,0.8,0.75,0.75,0.8,0.8,0.75,0.75,0.75,0.75,
0.7,0.65,0.6,0.6,0.55,0.5,0.5,0.45,0.4,0.3,
0.35,0.5,0.8,0.9,1.0])",CLUSTER_4,CLUSTER_11
OceanFraction,"numpy.array([0.,0.1,0.2,0.5,0.8,0.9,1.0,1.0,0.95,0.9,0.9,
0.85,0.8,0.75,0.75,0.8,0.8,0.75,0.75,0.75,0.75,
0.7,0.65,0.6,0.6,0.55,0.5,0.5,0.45,0.4,0.3,
0.35,0.5,0.8,0.9,1.0])",CLUSTER_4,CLUSTER_11
OceanFraction,"numpy.array([0.,0.1,0.2,0.5,0.8,0.9,1.0,1.0,0.95,0.9,0.9,
0.85,0.8,0.75,0.75,0.8,0.8,0.75,0.75,0.75,0.75,
0.7,0.65,0.6,0.6,0.55,0.5,0.5,0.45,0.4,0.3,
0.35,0.5,0.8,0.9,1.0])",CLUSTER_4,CLUSTER_11
OceanFraction,"numpy.array([0.,0.1,0.2,0.5,0.8,0.9,1.0,1.0,0.95,0.9,0.9,
0.85,0.8,0.75,0.75,0.8,0.8,0.75,0.75,0.75,0.75,
0.7,0.65,0.6,0.6,0.55,0.5,0.5,0.45,0.4,0.3,
0.35,0.5,0.8,0.9,1.0])",CLUSTER_4,CLUSTER_11
OceanFraction,"numpy.array([0.,0.1,0.2,0.5,0.8,0.9,1.0,1.0,0.95,0.9,0.9,
0.85,0.8,0.75,0.75,0.8,0.8,0.75,0.75,0.75,0.75,
0.7,0.65,0.6,0.6,0.55,0.5,0.5,0.45,0.4,0.3,
0.35,0.5,0.8,0.9,1.0])",CLUSTER_4,CLUSTER_11
CellFaceK,numpy.zeros(ny+1),CLUSTER_4,CLUSTER_11
Insolation,numpy.zeros(ny),CLUSTER_4,CLUSTER_11
MeridionalFlux,numpy.zeros(ny+1),CLUSTER_4,CLUSTER_11
OceanFraction,numpy.zeros(36),CLUSTER_4,CLUSTER_11
OceanFraction,numpy.ones(36),CLUSTER_4,CLUSTER_11
OceanFraction,numpy.ones(36),CLUSTER_4,CLUSTER_11
OceanFraction,numpy.ones(36),CLUSTER_4,CLUSTER_11
GlobalTemp,numpy.sum(SurfaceTemp*CellArea),CLUSTER_4,CLUSTER_11
CellArea,numpy.cos(Latitude*DegRad),CLUSTER_4,CLUSTER_11
CellFaceLength,numpy.cos(LatitudeFaces*DegRad),CLUSTER_4,CLUSTER_11
Latitude,"numpy.linspace(-87.5,87.5,ny)",CLUSTER_4,CLUSTER_11
LatitudeFaces,"numpy.linspace(-90,90,ny+1)",CLUSTER_4,CLUSTER_11
SPTemp,"numpy.append(SPTemp,SurfaceTemp[0])",CLUSTER_4,CLUSTER_11
EqTemp,"numpy.append(EqTemp,np.max(SurfaceTemp)",CLUSTER_4,CLUSTER_11
NPTemp,"numpy.append(NPTemp,SurfaceTemp[-1])",CLUSTER_4,CLUSTER_11
GlobalTemp,"numpy.append(GlobalTemp,np.sum(SurfaceTemp*CellArea)",CLUSTER_4,CLUSTER_11
Time,"numpy.append(Time,i*dt/SecsYr)",CLUSTER_4,CLUSTER_11
SurfaceTemp,numpy.load(InitTemp),CLUSTER_4,CLUSTER_11
dataset,pandas.read_csv('Churn_Modelling.csv'),CLUSTER_5,CLUSTER_5
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
labelencoder_X_1,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
labelencoder_X_2,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[1]),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
grid,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=param_grid)",CLUSTER_5,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_5,CLUSTER_5
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_5,CLUSTER_5
origin_dum_df,"pandas.DataFrame(origin_dummies,columns=lb.classes_)",CLUSTER_5,CLUSTER_5
origin_series,pandas.Series(origin),CLUSTER_5,CLUSTER_5
data,"pandas.concat([data,cyl_dummies,yr_dummies,orig_dummies],axis=1)",CLUSTER_5,CLUSTER_5
cyl_dummies,"pandas.get_dummies(data[""cylinders""],prefix=""cyl"")",CLUSTER_5,CLUSTER_5
yr_dummies,"pandas.get_dummies(data[""modelyear""],prefix=""yr"")",CLUSTER_5,CLUSTER_5
orig_dummies,"pandas.get_dummies(data[""origin""],prefix=""orig"")",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv(""auto-mpg.csv"")",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_5,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=4,figsize=(16,3)",CLUSTER_5,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=3,figsize=(12,3)",CLUSTER_5,CLUSTER_5
lb_make,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
lb,sklearn.preprocessing.LabelBinarizer(),CLUSTER_5,CLUSTER_5
_,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_1,CLUSTER_9
_,matplotlib.pyplot.legend(loc='best'),CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.legend(loc=(0.9,0.05)",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(t,sol[:,0],label='r_x')",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(t,sol[:,1],label='r_y')",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(t,np.sqrt(sol[:,0]**2.+sol[:,1]**2.)",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(t,np.sqrt(sol[:,0]**2.+sol[:,1]**2.)",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(t,np.sqrt(sol_non_rel[:,0]**2.+sol_non_rel[:,1]**2.)",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(sol_non_rel[:,0],sol_non_rel[:,1],c='C0',label='Newtonian')",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.plot(sol[:,0],sol[:,1],c='C1',label='GR')",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.savefig('bh_binary_pn.png',dpi=200)",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.subplot(1,2,2)",CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.suptitle(r'Relativepostitionblack-holebinary',fontsize=14)",CLUSTER_1,CLUSTER_9
_,matplotlib.pyplot.tight_layout(True),CLUSTER_1,CLUSTER_9
_,"matplotlib.pyplot.ylabel(r'relative$r_y$',fontsize=16)",CLUSTER_1,CLUSTER_9
t,"numpy.linspace(0,5,int(1e4)",CLUSTER_1,CLUSTER_9
sol_non_rel,"scipy.integrate.odeint(relative_dynamics,y0,t,args=(Gm_val,c_squared_val*1e10,eta_val*0.+1.,)",CLUSTER_1,CLUSTER_9
X,"pandas.DataFrame(boston.data,
columns=boston.feature_names)",CLUSTER_7,CLUSTER_5
y,"pandas.DataFrame(boston.target,
columns=['MEDV'])",CLUSTER_7,CLUSTER_5
pred_df,"pandas.DataFrame(predicted,columns=['predicted'],index=Xchosen.index)",CLUSTER_7,CLUSTER_5
pred_df,"pandas.DataFrame(y_pred,columns=['predicted'],index=x.index)",CLUSTER_7,CLUSTER_5
fapd,"pandas.DataFrame(avg_mses,index=folds)",CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame(boston.data,columns=boston.feature_names)",CLUSTER_7,CLUSTER_5
df,"pandas.concat([Xchosen,y,pred_df],axis=1)",CLUSTER_7,CLUSTER_5
df,"pandas.concat([x,y_act,pred_df],axis=1)",CLUSTER_7,CLUSTER_5
iris,"pandas.read_csv(url,header=None,names=col_names)",CLUSTER_7,CLUSTER_5
boston,sklearn.datasets.load_boston(),CLUSTER_7,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(Xchosen,y,test_size=0.3,random_state=123)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(Xchosen,y,test_size=0.1,random_state=123)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=.7)",CLUSTER_7,CLUSTER_5
kf,sklearn.model_selection.KFold(n_splits=number_of_splits),CLUSTER_7,CLUSTER_5
neighbors,"numpy.arange(1,9)",CLUSTER_5,CLUSTER_5
df_feature,"pandas.DataFrame(X,columns=df_sales.columns.values)",CLUSTER_5,CLUSTER_5
df,"pandas.read_excel('master_dataset.xlsx',sheetname='Sheet1')",CLUSTER_5,CLUSTER_5
figure,"matplotlib.pyplot.figure(figsize=(27,9)",CLUSTER_5,CLUSTER_5
ax,matplotlib.pyplot.subplot(len(df_sales.values),CLUSTER_5,CLUSTER_5
ax,matplotlib.pyplot.subplot(len(df_sales.values),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=6),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=8),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=4),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=6),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=7),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=8),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,
random_state=21,stratify=y)",CLUSTER_5,CLUSTER_5
a,"numpy.arange(10,20,2)",CLUSTER_3,CLUSTER_6
a,numpy.arange(12),CLUSTER_3,CLUSTER_6
b,numpy.arange(4),CLUSTER_3,CLUSTER_6
b,numpy.arange(4),CLUSTER_3,CLUSTER_6
A,"numpy.arange(2,14)",CLUSTER_3,CLUSTER_6
A,"numpy.arange(3,15)",CLUSTER_3,CLUSTER_6
A,"numpy.arange(3,15)",CLUSTER_3,CLUSTER_6
A,numpy.arange(12),CLUSTER_3,CLUSTER_6
a,numpy.arange(4),CLUSTER_3,CLUSTER_6
array,"numpy.array([[1,2,3],
[2,3,4]])",CLUSTER_3,CLUSTER_6
array,"numpy.array([1,2,3],dtype=np.int)",CLUSTER_3,CLUSTER_6
array,"numpy.array([1,2,3],dtype=np.int32)",CLUSTER_3,CLUSTER_6
array,"numpy.array([1,2,3],dtype=np.float)",CLUSTER_3,CLUSTER_6
array,"numpy.array([1,2,3],dtype=np.float32)",CLUSTER_3,CLUSTER_6
a,"numpy.array([10,20,30,40])",CLUSTER_3,CLUSTER_6
a,"numpy.array([[1,1],
[0,1]])",CLUSTER_3,CLUSTER_6
A,"numpy.array([1,1,1])",CLUSTER_3,CLUSTER_6
B,"numpy.array([2,2,2])",CLUSTER_3,CLUSTER_6
matrix,"numpy.zeros((2,3)",CLUSTER_3,CLUSTER_6
matrix,"numpy.empty((2,2)",CLUSTER_3,CLUSTER_6
C,"numpy.concatenate((A,B,B,A)",CLUSTER_3,CLUSTER_6
c,"numpy.dot(a,b)",CLUSTER_3,CLUSTER_6
matrix,"numpy.ones((3,4)",CLUSTER_3,CLUSTER_6
a,"numpy.linspace(1,10,5)",CLUSTER_3,CLUSTER_6
a,"numpy.linspace(1,10,6)",CLUSTER_3,CLUSTER_6
c,numpy.copy(a),CLUSTER_3,CLUSTER_6
svm,"sklearn.svm.SVC(kernel='linear',C=1.0,random_state=0)",CLUSTER_10,CLUSTER_4
svm,"sklearn.svm.SVC(kernel='rbf',random_state=0,gamma=.1,C=10.)",CLUSTER_10,CLUSTER_4
svm,"sklearn.svm.SVC(kernel='rbf',random_state=0,gamma=.2,C=1.)",CLUSTER_10,CLUSTER_4
svm,"sklearn.svm.SVC(kernel='rbf',random_state=0,gamma=10,C=1.)",CLUSTER_10,CLUSTER_4
svm,sklearn.linear_model.SGDClassifier(loss='hinge'),CLUSTER_10,CLUSTER_4
df_totals.index,pandas.RangeIndex(len(df_totals.index),CLUSTER_4,CLUSTER_11
df_totals_head.index,pandas.RangeIndex(len(df_totals_head.index),CLUSTER_4,CLUSTER_11
df_totals_content.index,pandas.RangeIndex(len(df_totals_content.index),CLUSTER_4,CLUSTER_11
df_totals,"pandas.concat([df01,df02,df03,df04,df05,df06,df07,df08,df09,df10,
df11,df12,df13,df14,df15,df16,df17,df18,df19,df20],join=""inner"")",CLUSTER_4,CLUSTER_11
df_totals_head,"pandas.concat([df01_head,df02_head,df03_head,df04_head,df05_head,
df06_head,df07_head,df08_head,df09_head,df10_head,
df11_head,df12_head,df13_head,df14_head,df15_head,
df16_head,df17_head,df18_head,df19_head,df20_head],join=""inner"")",CLUSTER_4,CLUSTER_11
df_totals_content,"pandas.concat([df01_content,df02_content,df03_content,df04_content,df05_content,
df06_content,df07_content,df08_content,df09_content,df10_content,
df11_content,df12_content,df13_content,df14_content,df15_content,
df16_content,df17_content,df18_content,df19_content,df20_content],join=""inner"")",CLUSTER_4,CLUSTER_11
dirpath,os.getcwd(),CLUSTER_4,CLUSTER_11
weather_df,pandas.DataFrame(weather_data),CLUSTER_9,CLUSTER_9
response,requests.get(query_url),CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_9
cols,"numpy.delete(cols,[0,6,7,8,9,10,11])",CLUSTER_7,CLUSTER_8
cols,"numpy.delete(cols,-1)",CLUSTER_7,CLUSTER_8
my_data,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.6,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.6,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.6,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.6,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.6,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.6,random_state=0)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
clf_gini,"sklearn.tree.DecisionTreeClassifier(criterion=""gini"",random_state=0)",CLUSTER_7,CLUSTER_8
clf_entropy,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",random_state=0)",CLUSTER_7,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=80),CLUSTER_7,CLUSTER_8
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=7),CLUSTER_7,CLUSTER_8
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
svm,sklearn.svm.SVC(kernel='rbf'),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
fruits,pandas.read_table('fruit_data_with_colors.txt'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=1-s)",CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
v,"numpy.array([2,1])",CLUSTER_1,CLUSTER_10
v,"numpy.array([2,1])",CLUSTER_1,CLUSTER_10
s,"numpy.array([-3,2])",CLUSTER_1,CLUSTER_10
v,"numpy.array([2,1])",CLUSTER_1,CLUSTER_10
s,"numpy.array([-3,2])",CLUSTER_1,CLUSTER_10
v,"numpy.array([2,1])",CLUSTER_1,CLUSTER_10
s,"numpy.array([-3,2])",CLUSTER_1,CLUSTER_10
p,"numpy.array([2,3,1])",CLUSTER_1,CLUSTER_10
q,"numpy.array([1,2,-2])",CLUSTER_1,CLUSTER_10
d,"numpy.dot(v,s)",CLUSTER_1,CLUSTER_10
r,"numpy.cross(p,q)",CLUSTER_1,CLUSTER_10
vMag,numpy.linalg.norm(v),CLUSTER_1,CLUSTER_10
sMag,numpy.linalg.norm(s),CLUSTER_1,CLUSTER_10
theta,math.degrees(math.acos(cos),CLUSTER_1,CLUSTER_10
rr_plot_data,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
rt_plot_data,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
means,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
errs,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
"rr_plot_data_dict[algo+"":""+run]","pandas.read_csv(i,header=0,na_filter=False)",CLUSTER_4,CLUSTER_11
"rt_plot_data_dict[algo+"":""+run]","pandas.read_csv(i,header=0,na_filter=False)",CLUSTER_4,CLUSTER_11
preds,numpy.asarray(preds),CLUSTER_2,CLUSTER_6
exp_preds,numpy.exp(preds),CLUSTER_2,CLUSTER_6
preds,numpy.log(preds),CLUSTER_2,CLUSTER_6
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_5
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_5
mean_acc,numpy.zeros((Ks-1),CLUSTER_7,CLUSTER_5
std_acc,numpy.zeros((Ks-1),CLUSTER_7,CLUSTER_5
std_acc[n-1],numpy.std(predictions==y_test),CLUSTER_7,CLUSTER_5
bins,numpy.linspace(df.Principal.min(),CLUSTER_7,CLUSTER_5
bins,numpy.linspace(df.age.min(),CLUSTER_7,CLUSTER_5
bins,numpy.linspace(df.dayofweek.min(),CLUSTER_7,CLUSTER_5
Feature,"pandas.concat([Feature,pd.get_dummies(df['education'])",CLUSTER_7,CLUSTER_5
test_Feature,"pandas.concat([test_Feature,pd.get_dummies(test_df['education'])",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('loan_train.csv'),CLUSTER_7,CLUSTER_5
test_df,pandas.read_csv('loan_test.csv'),CLUSTER_7,CLUSTER_5
df['due_date'],pandas.to_datetime(df['due_date']),CLUSTER_7,CLUSTER_5
df['effective_date'],pandas.to_datetime(df['effective_date']),CLUSTER_7,CLUSTER_5
test_df['due_date'],pandas.to_datetime(test_df['due_date']),CLUSTER_7,CLUSTER_5
test_df['effective_date'],pandas.to_datetime(test_df['effective_date']),CLUSTER_7,CLUSTER_5
X,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
X_testset,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_7,CLUSTER_5
knn1,sklearn.neighbors.KNeighborsClassifier(n_neighbors=4),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n),CLUSTER_7,CLUSTER_5
knn2,sklearn.neighbors.KNeighborsClassifier(n_neighbors=9),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30,random_state=50)",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,predictions_svm1,labels=[""COLLECTION"",""PAIDOFF""])",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,predictions_lr,labels=[""COLLECTION"",""PAIDOFF""])",CLUSTER_7,CLUSTER_5
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,predictions)",CLUSTER_7,CLUSTER_5
dtree,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=4)",CLUSTER_7,CLUSTER_5
clf1,"sklearn.svm.SVC(kernel=""rbf"")",CLUSTER_7,CLUSTER_5
clf2,"sklearn.svm.SVC(kernel=""linear"")",CLUSTER_7,CLUSTER_5
clf3,"sklearn.svm.SVC(kernel=""poly"")",CLUSTER_7,CLUSTER_5
clf4,"sklearn.svm.SVC(kernel=""sigmoid"")",CLUSTER_7,CLUSTER_5
lr,"sklearn.linear_model.LogisticRegression(C=0.01,solver=""liblinear"")",CLUSTER_7,CLUSTER_5
result,"pandas.merge(data,data_text,on='ID',how='left')",CLUSTER_0,CLUSTER_8
data,pandas.read_csv('training/training_variants'),CLUSTER_0,CLUSTER_8
data_text,"pandas.read_csv(""training/training_text"",sep=""\|\|"",engine=""python"",names=[""ID"",""TEXT""],skiprows=1)",CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"'''fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
total_text,"re.sub('[^a-zA-Z0-9\n]','',total_text)",CLUSTER_0,CLUSTER_8
total_text,"re.sub('\s+','',total_text)",CLUSTER_0,CLUSTER_8
train_gene_feature_responseCoding,"numpy.array(get_gv_feature(alpha,""Gene"",train_df)",CLUSTER_0,CLUSTER_8
test_gene_feature_responseCoding,"numpy.array(get_gv_feature(alpha,""Gene"",test_df)",CLUSTER_0,CLUSTER_8
cv_gene_feature_responseCoding,"numpy.array(get_gv_feature(alpha,""Gene"",cv_df)",CLUSTER_0,CLUSTER_8
train_variation_feature_responseCoding,"numpy.array(get_gv_feature(alpha,""Variation"",train_df)",CLUSTER_0,CLUSTER_8
test_variation_feature_responseCoding,"numpy.array(get_gv_feature(alpha,""Variation"",test_df)",CLUSTER_0,CLUSTER_8
cv_variation_feature_responseCoding,"numpy.array(get_gv_feature(alpha,""Variation"",cv_df)",CLUSTER_0,CLUSTER_8
confuse_array,numpy.array(confuse_array),CLUSTER_0,CLUSTER_8
sorted_text_occur,numpy.array(list(sorted_text_fea_dict.values(),CLUSTER_0,CLUSTER_8
train_y,numpy.array(list(train_df['Class']),CLUSTER_0,CLUSTER_8
test_y,numpy.array(list(test_df['Class']),CLUSTER_0,CLUSTER_8
cv_y,numpy.array(list(cv_df['Class']),CLUSTER_0,CLUSTER_8
cv_predicted_y,"numpy.zeros((cv_data_len,9)",CLUSTER_0,CLUSTER_8
test_predicted_y,"numpy.zeros((test_data_len,9)",CLUSTER_0,CLUSTER_8
text_feature_responseCoding,"numpy.zeros((df.shape[0],9)",CLUSTER_0,CLUSTER_8
features,numpy.dot(np.array(alpha),CLUSTER_0,CLUSTER_8
features,numpy.dot(np.array(alpha),CLUSTER_0,CLUSTER_8
predicted_y,"numpy.argmax(test_predicted_y,axis=1)",CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
sorted_yi,numpy.argsort(-train_class_distribution.values),CLUSTER_0,CLUSTER_8
sorted_yi,numpy.argsort(-test_class_distribution.values),CLUSTER_0,CLUSTER_8
sorted_yi,numpy.argsort(-train_class_distribution.values),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.feature_importances_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.feature_importances_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.feature_importances_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.feature_importances_),CLUSTER_0,CLUSTER_8
c,numpy.cumsum(h),CLUSTER_0,CLUSTER_8
c,numpy.cumsum(h),CLUSTER_0,CLUSTER_8
train_gene_var_responseCoding,"numpy.hstack((train_gene_feature_responseCoding,train_variation_feature_responseCoding)",CLUSTER_0,CLUSTER_8
test_gene_var_responseCoding,"numpy.hstack((test_gene_feature_responseCoding,test_variation_feature_responseCoding)",CLUSTER_0,CLUSTER_8
cv_gene_var_responseCoding,"numpy.hstack((cv_gene_feature_responseCoding,cv_variation_feature_responseCoding)",CLUSTER_0,CLUSTER_8
train_x_responseCoding,"numpy.hstack((train_gene_var_responseCoding,train_text_feature_responseCoding)",CLUSTER_0,CLUSTER_8
test_x_responseCoding,"numpy.hstack((test_gene_var_responseCoding,test_text_feature_responseCoding)",CLUSTER_0,CLUSTER_8
cv_x_responseCoding,"numpy.hstack((cv_gene_var_responseCoding,cv_text_feature_responseCoding)",CLUSTER_0,CLUSTER_8
train_text_feature_onehotCoding,"sklearn.preprocessing.normalize(train_text_feature_onehotCoding,axis=0)",CLUSTER_0,CLUSTER_8
test_text_feature_onehotCoding,"sklearn.preprocessing.normalize(test_text_feature_onehotCoding,axis=0)",CLUSTER_0,CLUSTER_8
cv_text_feature_onehotCoding,"sklearn.preprocessing.normalize(cv_text_feature_onehotCoding,axis=0)",CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
C,"sklearn.metrics.confusion_matrix(test_y,predict_y)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=i,penalty='l2',loss='hinge',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=alpha[best_alpha],penalty='l2',loss='hinge',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='hinge',random_state=42,class_weight='balanced')",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='hinge',random_state=42)",CLUSTER_0,CLUSTER_8
clf1,"sklearn.linear_model.SGDClassifier(alpha=0.001,penalty='l2',loss='log',class_weight='balanced',random_state=0)",CLUSTER_0,CLUSTER_8
clf2,"sklearn.linear_model.SGDClassifier(alpha=1,penalty='l2',loss='hinge',class_weight='balanced',random_state=0)",CLUSTER_0,CLUSTER_8
train_gene_var_onehotCoding,"scipy.sparse.hstack((train_gene_feature_onehotCoding,train_variation_feature_onehotCoding)",CLUSTER_0,CLUSTER_8
test_gene_var_onehotCoding,"scipy.sparse.hstack((test_gene_feature_onehotCoding,test_variation_feature_onehotCoding)",CLUSTER_0,CLUSTER_8
cv_gene_var_onehotCoding,"scipy.sparse.hstack((cv_gene_feature_onehotCoding,cv_variation_feature_onehotCoding)",CLUSTER_0,CLUSTER_8
train_x_onehotCoding,"scipy.sparse.hstack((train_gene_var_onehotCoding,train_text_feature_onehotCoding)",CLUSTER_0,CLUSTER_8
test_x_onehotCoding,"scipy.sparse.hstack((test_gene_var_onehotCoding,test_text_feature_onehotCoding)",CLUSTER_0,CLUSTER_8
cv_x_onehotCoding,"scipy.sparse.hstack((cv_gene_var_onehotCoding,cv_text_feature_onehotCoding)",CLUSTER_0,CLUSTER_8
dictionary,collections.defaultdict(int),CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf1,"sklearn.calibration.CalibratedClassifierCV(clf1,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf2,"sklearn.calibration.CalibratedClassifierCV(clf2,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf3,"sklearn.calibration.CalibratedClassifierCV(clf3,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(alpha=i),CLUSTER_0,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(alpha=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(alpha=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf3,sklearn.naive_bayes.MultinomialNB(alpha=0.001),CLUSTER_0,CLUSTER_8
"X_train,test_df,y_train,y_test","sklearn.model_selection.train_test_split(result,y_true,stratify=y_true,test_size=0.2)",CLUSTER_0,CLUSTER_8
"train_df,cv_df,y_train,y_cv","sklearn.model_selection.train_test_split(X_train,y_train,stratify=y_train,test_size=0.2)",CLUSTER_0,CLUSTER_8
text_feature_responseCoding[row_index][i],math.exp(sum_prob/len(row['TEXT'].split(),CLUSTER_0,CLUSTER_8
sum_prob+,"math.log(((dict_list[i].get(word,0)",CLUSTER_0,CLUSTER_8
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=i,criterion='gini',max_depth=j,random_state=42,n_jobs=-1)",CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=alpha[int(best_alpha/2),CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=alpha[int(best_alpha/2),CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=alpha[int(best_alpha/2),CLUSTER_0,CLUSTER_8
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=i,criterion='gini',max_depth=j,random_state=42,n_jobs=-1)",CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=alpha[int(best_alpha/4),CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(max_depth=max_depth[int(best_alpha%4),CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=alpha[int(best_alpha/4),CLUSTER_0,CLUSTER_8
lr,sklearn.linear_model.LogisticRegression(C=i),CLUSTER_0,CLUSTER_8
lr,sklearn.linear_model.LogisticRegression(C=0.1),CLUSTER_0,CLUSTER_8
vclf,"sklearn.ensemble.VotingClassifier(estimators=[('lr',sig_clf1)",CLUSTER_0,CLUSTER_8
df,pandas.read_csv('data/train.csv'),CLUSTER_8,CLUSTER_4
df_test,pandas.read_csv('data/test.csv'),CLUSTER_8,CLUSTER_4
ms,"pandas.DataFrame(0,index=cont_reduced.columns,columns=metrics)",CLUSTER_7,CLUSTER_8
ms,"pandas.DataFrame(0,index=contingency.index,columns=metrics)",CLUSTER_7,CLUSTER_8
medians,"pandas.DataFrame(medians,columns=[name])",CLUSTER_7,CLUSTER_8
subtype_df,pandas.DataFrame([[subtype_data['pospredvalue'].median(),CLUSTER_7,CLUSTER_8
reference_sort,pandas.Index(reference_sort),CLUSTER_7,CLUSTER_8
tumor_data_gse18549,"pandas.read_csv('cup_project/external_validation/gse18549_sample_anns.csv',
header=0,index_col=0)",CLUSTER_7,CLUSTER_8
label_counts,pandas.value_counts(labels),CLUSTER_7,CLUSTER_8
y,numpy.arange(L),CLUSTER_7,CLUSTER_8
y,numpy.arange(L),CLUSTER_7,CLUSTER_8
axarr,numpy.array(axs),CLUSTER_7,CLUSTER_8
cont_reduced,"numpy.zeros((L,L)",CLUSTER_7,CLUSTER_8
sizes,numpy.ones(len(colors_x),CLUSTER_7,CLUSTER_8
sizes,numpy.ones(len(colors_x),CLUSTER_7,CLUSTER_8
sizes,numpy.ones(len(colors_x),CLUSTER_7,CLUSTER_8
sizes_group,numpy.ones(len(colors_group_x),CLUSTER_7,CLUSTER_8
sizes,numpy.ones(len(colors_x),CLUSTER_7,CLUSTER_8
sizes_group,numpy.ones(len(colors_group_x),CLUSTER_7,CLUSTER_8
sizes,numpy.ones(len(colors_x),CLUSTER_7,CLUSTER_8
sizes_group,numpy.ones(len(colors_group_x),CLUSTER_7,CLUSTER_8
desats,"numpy.repeat(jch_color,n,axis=0)",CLUSTER_7,CLUSTER_8
gs,"matplotlib.pyplot.GridSpec(5,3,hspace=0.7,wspace=0.7,right=0.98,left=0.24,top=1)",CLUSTER_7,CLUSTER_8
gs,"matplotlib.pyplot.GridSpec(2,3,width_ratios=[1,1,1],height_ratios=[1.5,1],
hspace=0.7,wspace=0.9)",CLUSTER_7,CLUSTER_8
gs,"matplotlib.pyplot.GridSpec(2,3,width_ratios=[1,1,1.3],height_ratios=[2,1],
hspace=0.4,wspace=0.9)",CLUSTER_7,CLUSTER_8
gs,"matplotlib.pyplot.GridSpec(2,3,width_ratios=[1.5,1,1],height_ratios=[1.5,1],
hspace=0.7,wspace=0.9)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(FIG_WIDTH_1COL,FIG_HEIGHT_MAX)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(FIG_WIDTH_2COL,6)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(FIG_WIDTH_2COL,7)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(FIG_WIDTH_2COL,6)",CLUSTER_7,CLUSTER_8
human_body,matplotlib.pyplot.imread('Human_body_silhouette.png'),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(FIG_WIDTH_1COL,4)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(2,2)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(3,3)",CLUSTER_7,CLUSTER_8
"fig,axarr","matplotlib.pyplot.subplots(2,1,figsize=(FIG_WIDTH_2COL,7)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(2,5)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(3,3)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(3,3)",CLUSTER_7,CLUSTER_8
user,pandas.read_csv('../data/csv/JData_User.csv'),CLUSTER_8,CLUSTER_4
product,pandas.read_csv('../data/csv/JData_Product.csv'),CLUSTER_8,CLUSTER_4
comment,pandas.read_csv('../data/csv/JData_Comment.csv'),CLUSTER_8,CLUSTER_4
res,collections.Counter(lista),CLUSTER_10,CLUSTER_4
res,collections.Counter(palavras),CLUSTER_10,CLUSTER_4
DFValPGs,pandas.DataFrame(valPGStats),CLUSTER_7,CLUSTER_8
SCDF,pandas.DataFrame(SCData),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('TheNBACSV/nbaNew.csv',delimiter=',',encoding=""utf-8-sig"")",CLUSTER_7,CLUSTER_8
X,numpy.array(x),CLUSTER_7,CLUSTER_8
df['PlayerSalary'],numpy.array(salaryCleaner(df['PlayerSalary']),CLUSTER_7,CLUSTER_8
df['TS%'],numpy.array(percentRemover(numpy.array(df['TS%']),CLUSTER_7,CLUSTER_8
df['ORB%'],numpy.array(percentRemover(numpy.array(df['ORB%']),CLUSTER_7,CLUSTER_8
df['DRB%'],numpy.array(percentRemover(numpy.array(df['DRB%']),CLUSTER_7,CLUSTER_8
df['TRB%'],numpy.array(percentRemover(numpy.array(df['TRB%']),CLUSTER_7,CLUSTER_8
df['AST%'],numpy.array(percentRemover(numpy.array(df['AST%']),CLUSTER_7,CLUSTER_8
df['STL%'],numpy.array(percentRemover(numpy.array(df['STL%']),CLUSTER_7,CLUSTER_8
df['BLK%'],numpy.array(percentRemover(numpy.array(df['BLK%']),CLUSTER_7,CLUSTER_8
df['TOV%'],numpy.array(percentRemover(numpy.array(df['TOV%']),CLUSTER_7,CLUSTER_8
df['USG%'],numpy.array(percentRemover(numpy.array(df['USG%']),CLUSTER_7,CLUSTER_8
df['FG%'],numpy.array(percentRemover(numpy.array(df['FG%']),CLUSTER_7,CLUSTER_8
df['3P%'],numpy.array(percentRemover(numpy.array(df['3P%']),CLUSTER_7,CLUSTER_8
df['2P%'],numpy.array(percentRemover(numpy.array(df['2P%']),CLUSTER_7,CLUSTER_8
df['eFG%'],numpy.array(percentRemover(numpy.array(df['eFG%']),CLUSTER_7,CLUSTER_8
df['FT%'],numpy.array(percentRemover(numpy.array(df['FT%']),CLUSTER_7,CLUSTER_8
df['FTr'],numpy.array(percentRemover(numpy.array(df['FTr']),CLUSTER_7,CLUSTER_8
SCSS,numpy.array(StephCurr['SeasonStart']),CLUSTER_7,CLUSTER_8
SCSal,numpy.array(StephCurr['PlayerSalary']),CLUSTER_7,CLUSTER_8
SC2PP,numpy.array(StephCurr['2P%']),CLUSTER_7,CLUSTER_8
SC3PP,numpy.array(StephCurr['3P%']),CLUSTER_7,CLUSTER_8
SCFtr,numpy.array(StephCurr['FTr']),CLUSTER_7,CLUSTER_8
SCEFG,numpy.array(StephCurr['eFG%']),CLUSTER_7,CLUSTER_8
SCASTP,numpy.array(StephCurr['AST%']),CLUSTER_7,CLUSTER_8
SCAST,numpy.array(StephCurr['AST']),CLUSTER_7,CLUSTER_8
meanSalary,"numpy.mean(AllPGStats['PlayerSalary'],axis=0)",CLUSTER_7,CLUSTER_8
stdSalary,"numpy.std(AllPGStats['PlayerSalary'],axis=0)",CLUSTER_7,CLUSTER_8
npMatrix,numpy.matrix(DFValPGs),CLUSTER_7,CLUSTER_8
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
"slope,intercept,r_value,p_value,std_err","scipy.stats.linregress(X,Y)",CLUSTER_7,CLUSTER_8
stats,"scipy.stats.linregress(X,Y)",CLUSTER_7,CLUSTER_8
stats,"scipy.stats.linregress(X,Y)",CLUSTER_7,CLUSTER_8
stats,"scipy.stats.linregress(X,Y)",CLUSTER_7,CLUSTER_8
stats,"scipy.stats.linregress(X,Y)",CLUSTER_7,CLUSTER_8
stats,"scipy.stats.linregress(X,Y)",CLUSTER_7,CLUSTER_8
a0,"numpy.zeros((m,n_a)",CLUSTER_12,CLUSTER_6
c0,"numpy.zeros((m,n_a)",CLUSTER_12,CLUSTER_6
x_initializer,"numpy.zeros((1,1,78)",CLUSTER_12,CLUSTER_6
a_initializer,"numpy.zeros((1,n_a)",CLUSTER_12,CLUSTER_6
c_initializer,"numpy.zeros((1,n_a)",CLUSTER_12,CLUSTER_6
indices,"numpy.argmax(pred,2)",CLUSTER_12,CLUSTER_6
y,numpy.array([aforainvp.y]),CLUSTER_4,CLUSTER_0
x,numpy.array([xforxinvp[special]]),CLUSTER_4,CLUSTER_0
yz,numpy.array([t[0]fortinz]),CLUSTER_4,CLUSTER_0
xz,numpy.array([t[1]fortinz]),CLUSTER_4,CLUSTER_0
f1b,"numpy.array([f1_score(yi,xpi,average='binary')",CLUSTER_4,CLUSTER_0
tv,"numpy.array(list(vp.iloc[:,offset+i].values)",CLUSTER_4,CLUSTER_0
scores,"numpy.array([f1_score(y,np.int32(tv>threshold)",CLUSTER_4,CLUSTER_0
y,numpy.array([yforyinvp.y]),CLUSTER_4,CLUSTER_0
tv,"numpy.array(list(vp.iloc[:,offset+i].values)",CLUSTER_4,CLUSTER_0
scores,"numpy.array([f1_score(y,np.int32(bestEnsemble>threshold)",CLUSTER_4,CLUSTER_0
order,numpy.array(fm),CLUSTER_4,CLUSTER_0
ioub,"numpy.array([iou_metric(m,np.int32(b>(t+0.1)",CLUSTER_4,CLUSTER_0
peps,"numpy.array([1e-12,0.00001,0.001,0.002,0.003,0.004,0.005,0.006,0.007,0.008,0.009,0.01])",CLUSTER_4,CLUSTER_0
ious,"numpy.array([iou_metric_batch(train_df.masks,np.int32(bestEnsemble>threshold_best)",CLUSTER_4,CLUSTER_0
ioub,numpy.array(ioub),CLUSTER_4,CLUSTER_0
ens_crf,numpy.array(ens_crf),CLUSTER_4,CLUSTER_0
m,"numpy.array(oof.loc[:,mcols])",CLUSTER_4,CLUSTER_0
m,"numpy.array(small.loc[:,mcols])",CLUSTER_4,CLUSTER_0
m,numpy.array([numpy.array(list(i),CLUSTER_4,CLUSTER_0
poof,"numpy.concatenate((poof,pooff)",CLUSTER_4,CLUSTER_0
yoof,"numpy.concatenate((yoof,yooff)",CLUSTER_4,CLUSTER_0
besta,numpy.argmax(scores),CLUSTER_4,CLUSTER_0
threshold_best_index,numpy.argmax(scores),CLUSTER_4,CLUSTER_0
threshold_best_index,numpy.argmax(ious),CLUSTER_4,CLUSTER_0
eps_best_index,numpy.argmax(ious),CLUSTER_4,CLUSTER_0
MAP,"numpy.argmax(Q,axis=0)",CLUSTER_4,CLUSTER_0
x,"numpy.clip(x,-20,20)",CLUSTER_4,CLUSTER_0
ymean,"numpy.mean(y,axis=0)",CLUSTER_4,CLUSTER_0
prop,"numpy.mean(pred[:,j])",CLUSTER_4,CLUSTER_0
ymean,"numpy.mean(y,axis=0)",CLUSTER_4,CLUSTER_0
cov,numpy.mean(e),CLUSTER_4,CLUSTER_0
ys,"numpy.sum(y,axis=1)",CLUSTER_4,CLUSTER_0
c_val,"numpy.sum(y,axis=0)",CLUSTER_4,CLUSTER_0
xps,"numpy.sum(xp,axis=1)",CLUSTER_4,CLUSTER_0
x1ps,"numpy.sum(x1p,axis=1)",CLUSTER_4,CLUSTER_0
xp,numpy.int32(x>t),CLUSTER_4,CLUSTER_0
x1p,numpy.int32(x1>t),CLUSTER_4,CLUSTER_0
ens,numpy.int32(bestEnsemble>threshold_best),CLUSTER_4,CLUSTER_0
thresholds,"numpy.linspace(5.0,-5.,1001)",CLUSTER_4,CLUSTER_0
thresholds,"numpy.linspace(0.1,0.9,1001)",CLUSTER_4,CLUSTER_0
r,numpy.corrcoef(f),CLUSTER_4,CLUSTER_0
"colors,labels","numpy.unique(annotated_label,return_inverse=True)",CLUSTER_4,CLUSTER_0
mdf,pandas.DataFrame({'Id':id}),CLUSTER_4,CLUSTER_0
d,"pandas.DataFrame(r,columns=mnames)",CLUSTER_4,CLUSTER_0
rez,pandas.DataFrame({'step':np.zeros(nstep),CLUSTER_4,CLUSTER_0
single,"pandas.DataFrame({'mod':np.repeat("""",nm)",CLUSTER_4,CLUSTER_0
md,pandas.DataFrame(m),CLUSTER_4,CLUSTER_0
ss,pandas.concat([s]*(d*d),CLUSTER_4,CLUSTER_0
ss,pandas.concat([s]*(d*d),CLUSTER_4,CLUSTER_0
f,"pandas.concat((sr,md)",CLUSTER_4,CLUSTER_0
df,pandas.read_csv(PATH_TO_TARGET),CLUSTER_4,CLUSTER_0
ss,pandas.read_csv(PATH_TO_SUB),CLUSTER_4,CLUSTER_0
btp,pandas.read_csv('btp.csv'),CLUSTER_4,CLUSTER_0
folds,pandas.read_csv('folds.csv'),CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,ni,figsize=(20,4)",CLUSTER_4,CLUSTER_0
pooff,scipy.special.expit(pooff),CLUSTER_4,CLUSTER_0
pooffx,scipy.special.expit(pooffx),CLUSTER_4,CLUSTER_0
tryScore,"sklearn.metrics.f1_score(y,np.int32(tryEnsemble>threshold)",CLUSTER_4,CLUSTER_0
ufo_sightings,"pandas.read_csv(""http://bit.ly/uforeports"")",CLUSTER_8,CLUSTER_4
mat,scipy.io.loadmat('hw3prob5.mat'),CLUSTER_1,CLUSTER_9
df_coordinates_school_teachers,"pandas.concat([df_prof_coordinates,df_schools_coordinates2],axis=0)",CLUSTER_8,CLUSTER_3
df_nonan,"pandas.read_csv(""df_nonan.csv"")",CLUSTER_8,CLUSTER_3
df_prof_coordinates,"pandas.read_csv(""prof_coordinates.csv"")",CLUSTER_8,CLUSTER_3
idxs,numpy.arange(N),CLUSTER_2,CLUSTER_7
x_np,numpy.arange(24),CLUSTER_2,CLUSTER_7
x_np,numpy.arange(12),CLUSTER_2,CLUSTER_7
X_train,"numpy.asarray(X_train,dtype=np.float32)",CLUSTER_2,CLUSTER_7
y_train,"numpy.asarray(y_train,dtype=np.int32)",CLUSTER_2,CLUSTER_7
X_test,"numpy.asarray(X_test,dtype=np.float32)",CLUSTER_2,CLUSTER_7
y_test,"numpy.asarray(y_test,dtype=np.int32)",CLUSTER_2,CLUSTER_7
x_np,"numpy.zeros((64,32,32,3)",CLUSTER_2,CLUSTER_7
x_np,"numpy.zeros((64,32,32,3)",CLUSTER_2,CLUSTER_7
"fan_in,fan_out",numpy.prod(shape[:3]),CLUSTER_2,CLUSTER_7
dataset,pandas.get_dummies(dataset),CLUSTER_5,CLUSTER_5
dataset,"pandas.read_csv('./Adult_Income.txt',delimiter=',',header=0)",CLUSTER_5,CLUSTER_5
df,pandas.DataFrame(df),CLUSTER_5,CLUSTER_5
dataf,"pandas.concat([train,test],axis=0,sort=False)",CLUSTER_5,CLUSTER_5
data_model,"pandas.concat([dataf_one_hot,dataf['Loan_ID'],dataf['Loan_Status'],dataf[data_column_Integer],dataf['Source']],axis=1)",CLUSTER_5,CLUSTER_5
data_model,"pandas.concat([data_model,X],axis=1)",CLUSTER_5,CLUSTER_5
dataf_one_hot,"pandas.get_dummies(dataf[data_column_category].drop(columns=['Loan_ID','Source','Loan_Status'])",CLUSTER_5,CLUSTER_5
train,"pandas.read_csv(""train_u6lujuX_CVtuZ9i.csv"")",CLUSTER_5,CLUSTER_5
test,"pandas.read_csv(""test_Y3wMUE5_7gLdaTN.csv"")",CLUSTER_5,CLUSTER_5
sample_submit,"pandas.read_csv(""Sample_Submission_ZAuTl8O_FK3zQHh.csv"")",CLUSTER_5,CLUSTER_5
gen,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
poly,"sklearn.preprocessing.PolynomialFeatures(degree=2,interaction_only=True,include_bias=False)",CLUSTER_5,CLUSTER_5
select,sklearn.feature_selection.SelectKBest(k=20),CLUSTER_5,CLUSTER_5
filtered_result4,pandas.read_csv('/Users/carolinerosefrensko/Downloads/data_wrangling_json/AirBNB_cleaned_dataChicagoprice2018-07-20.csv'),CLUSTER_7,CLUSTER_8
mean,numpy.mean(filtered_result4.price),CLUSTER_7,CLUSTER_8
error_mean,numpy.mean(residual_error),CLUSTER_7,CLUSTER_8
std,numpy.std(filtered_result4.price),CLUSTER_7,CLUSTER_8
error_sigma,numpy.std(residual_error),CLUSTER_7,CLUSTER_8
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_7,CLUSTER_8
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_7,CLUSTER_8
"n,bins,patches","matplotlib.pyplot.hist(residual_error,50,normed=1,facecolor='blue',alpha=0.75)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.20,random_state=42)",CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
lin_mse,"sklearn.metrics.mean_squared_error(y_train,y_pred_train)",CLUSTER_7,CLUSTER_8
lin_mse,"sklearn.metrics.mean_squared_error(y_test,y_pred_test)",CLUSTER_7,CLUSTER_8
lin_mae,"sklearn.metrics.mean_absolute_error(y_pred_train,y_train)",CLUSTER_7,CLUSTER_8
lin_mae,"sklearn.metrics.mean_absolute_error(y_pred_test,y_test)",CLUSTER_7,CLUSTER_8
_,scipy.stats.probplot((residual_error),CLUSTER_7,CLUSTER_8
merged,"pandas.merge(abbrev,popul,how='outer',left_on='abbreviation',right_on='state/region')",CLUSTER_8,CLUSTER_3
final,"pandas.merge(merged,area,on='state',how='left')",CLUSTER_8,CLUSTER_3
abbrev,"pandas.read_csv('/home/lukasz/Pobrane/data-USstates-master/state-abbrevs.csv',sep=',')",CLUSTER_8,CLUSTER_3
area,"pandas.read_csv('/home/lukasz/Pobrane/data-USstates-master/state-areas.csv',sep=',')",CLUSTER_8,CLUSTER_3
popul,"pandas.read_csv('/home/lukasz/Pobrane/data-USstates-master/state-population.csv',sep=',')",CLUSTER_8,CLUSTER_3
xgrid,"numpy.linspace(-3.5,3.5,40)",CLUSTER_1,CLUSTER_9
ygrid,"numpy.linspace(-6,6,40)",CLUSTER_1,CLUSTER_9
data,"numpy.vstack([x,y])",CLUSTER_1,CLUSTER_9
"Xgrid,Ygrid","numpy.meshgrid(xgrid,ygrid)",CLUSTER_1,CLUSTER_9
"counts,xedges,yedges","numpy.histogram2d(x,y,bins=30)",CLUSTER_1,CLUSTER_9
"counts,bin_edges","numpy.histogram(data,bins=5)",CLUSTER_1,CLUSTER_9
cb,matplotlib.pyplot.colorbar(),CLUSTER_1,CLUSTER_9
cb,matplotlib.pyplot.colorbar(label='countinbin'),CLUSTER_1,CLUSTER_9
cb,matplotlib.pyplot.colorbar(),CLUSTER_1,CLUSTER_9
kde,scipy.stats.gaussian_kde(data),CLUSTER_1,CLUSTER_9
"x1,x2","numpy.meshgrid(np.arange(start=x_set[:,0].min()",CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('Social_Network_Ads.csv'),CLUSTER_5,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.25,random_state=0)",CLUSTER_5,CLUSTER_5
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
classifier,sklearn.linear_model.LogisticRegression(random_state=0),CLUSTER_5,CLUSTER_5
valid_x,"numpy.arange(1,len(valid_curve)",CLUSTER_6,CLUSTER_11
df,"pandas.merge(df,features,on=['Store','Date','IsHoliday'],how='inner')",CLUSTER_8,CLUSTER_4
df,"pandas.merge(df,storesdata,on=['Store'],how='inner')",CLUSTER_8,CLUSTER_4
features,pandas.read_csv('../../data/features.csv'),CLUSTER_8,CLUSTER_4
storesdata,pandas.read_csv('../../data/stores.csv'),CLUSTER_8,CLUSTER_4
df.Date,pandas.to_datetime(df.Date),CLUSTER_8,CLUSTER_4
df['Year'],pandas.DatetimeIndex(df['Date']),CLUSTER_8,CLUSTER_4
df['Month'],pandas.DatetimeIndex(df['Date']),CLUSTER_8,CLUSTER_4
df['Day'],pandas.DatetimeIndex(df['Date']),CLUSTER_8,CLUSTER_4
coef,"pandas.DataFrame(lm.coef_,x.columns,columns=['Coefs'])",CLUSTER_7,CLUSTER_5
df1,pandas.read_csv(file),CLUSTER_7,CLUSTER_5
ax,"seaborn.scatterplot(y_test,predict)",CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
WorkingIndex,"numpy.full((10980,10980)",CLUSTER_4,CLUSTER_11
attributes_values,"numpy.full((N_Samples,5)",CLUSTER_4,CLUSTER_11
Full_labeled,"numpy.full((rows,cols)",CLUSTER_4,CLUSTER_11
"data[Band[i],Band[i2]]","numpy.full(index.shape,np.nan)",CLUSTER_4,CLUSTER_11
assertTX.shape[0],=numpy.sum(GlobalClassifIndex),CLUSTER_4,CLUSTER_11
x,"numpy.log(6000.0*X[:,:,1][labeled_Samples==i+1])",CLUSTER_4,CLUSTER_11
y,"numpy.log(6000.0*X[:,:,2][labeled_Samples==i+1])",CLUSTER_4,CLUSTER_11
I,"numpy.log(X[:,:,i][labeled_Samples==Sample_id])",CLUSTER_4,CLUSTER_11
J,"numpy.log(X[:,:,i2][labeled_Samples==Sample_id])",CLUSTER_4,CLUSTER_11
index,"numpy.logical_and(~ErMap[:,:,i],~ErMap[:,:,i2])",CLUSTER_4,CLUSTER_11
index,"numpy.logical_and(index,ClassifyIndex)",CLUSTER_4,CLUSTER_11
GlobalClassifIndex,"numpy.logical_and(np.sum(ErMap,axis=2)",CLUSTER_4,CLUSTER_11
TX,"numpy.stack(TX,axis=1)",CLUSTER_4,CLUSTER_11
buffer,"numpy.append(np.array(stats.linregress(x,y)",CLUSTER_4,CLUSTER_11
"data[Band[i],Band[i2]]","numpy.dstack((data[Band[i],Band[i2]],ErMap[:,:,i],ErMap[:,:,i2])",CLUSTER_4,CLUSTER_11
bands_data,numpy.dstack(bands_data),CLUSTER_4,CLUSTER_11
classes,numpy.unique(labeled_Samples),CLUSTER_4,CLUSTER_11
npzfile,numpy.load('../../../Poe/CompressedData/XData.npz'),CLUSTER_4,CLUSTER_11
"fig,axes",matplotlib.pyplot.subplots(int(np.ceil(N_Samples/2),CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(20,20)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(30,10)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(30,10)",CLUSTER_4,CLUSTER_11
S_train,"numpy.zeros((X.shape[0],len(self.base_models)",CLUSTER_11,CLUSTER_1
S_test,"numpy.zeros((T.shape[0],len(self.base_models)",CLUSTER_11,CLUSTER_1
S_test_i,"numpy.zeros((T.shape[0],len(folds)",CLUSTER_11,CLUSTER_1
all_data[skewed_feats],numpy.log1p(all_data[skewed_feats]),CLUSTER_11,CLUSTER_1
all_data,pandas.DataFrame(imp.fit_transform(all_data),CLUSTER_11,CLUSTER_1
all_data,pandas.DataFrame(imp.fit_transform(all_data),CLUSTER_11,CLUSTER_1
all_data,"pandas.concat((X_train,X_test)",CLUSTER_11,CLUSTER_1
all_data,"pandas.concat((X_train,X_test)",CLUSTER_11,CLUSTER_1
train,"pandas.read_csv('./input/train_further_additional_feature_filtered.csv',index_col=0)",CLUSTER_11,CLUSTER_1
y_train,"pandas.read_csv('./input/y_train_further_additional_feature_filtered.csv',index_col=0)",CLUSTER_11,CLUSTER_1
test,"pandas.read_csv('./input/test_further_additional_feature_filtered.csv',index_col=0)",CLUSTER_11,CLUSTER_1
macro,"pandas.read_csv('./input/macro.csv',parse_dates=['timestamp'])",CLUSTER_11,CLUSTER_1
id_test,pandas.read_csv('./input/test.csv'),CLUSTER_11,CLUSTER_1
now,datetime.datetime.now(),CLUSTER_11,CLUSTER_1
RMSLE,"sklearn.metrics.make_scorer(RMSLE_,greater_is_better=False)",CLUSTER_11,CLUSTER_1
RMSE,"sklearn.metrics.make_scorer(RMSE_,greater_is_better=False)",CLUSTER_11,CLUSTER_1
stacker,sklearn.linear_model.Ridge(),CLUSTER_11,CLUSTER_1
"housing[""income_cat""]","numpy.ceil(housing[""median_income""]/1.5)",CLUSTER_4,CLUSTER_11
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_4,CLUSTER_11
tree_rmse,numpy.sqrt(tree_mse),CLUSTER_4,CLUSTER_11
rmse_score,numpy.sqrt(-scores),CLUSTER_4,CLUSTER_11
lin_rmse_scores,numpy.sqrt(-lin_scores),CLUSTER_4,CLUSTER_11
forest_rmse_scores,numpy.sqrt(-forest_scores),CLUSTER_4,CLUSTER_11
final_rmse,numpy.sqrt(final_mse),CLUSTER_4,CLUSTER_11
housing_tr,"pandas.DataFrame(X,columns=housing_num.columns)",CLUSTER_4,CLUSTER_11
c,"""median_house_value"",cmap=matplotlib.pyplot.get_cmap(""jet"")",CLUSTER_4,CLUSTER_11
"train_set,test_set","sklearn.model_selection.train_test_split(housing,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_11
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_11
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_11
encoder,sklearn.preprocessing.OneHotEncoder(),CLUSTER_4,CLUSTER_11
encoder,sklearn.preprocessing.LabelBinarizer(),CLUSTER_4,CLUSTER_11
encoder,sklearn.preprocessing.LabelBinarizer(sparse_output=True),CLUSTER_4,CLUSTER_11
num_pipeline,"sklearn.pipeline.Pipeline([
('imputer',Imputer(strategy='median')",CLUSTER_4,CLUSTER_11
full_pipeline,"sklearn.compose.ColumnTransformer([
(""num"",num_pipeline,num_attribs)",CLUSTER_4,CLUSTER_11
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
lin_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_4,CLUSTER_11
tree_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_4,CLUSTER_11
final_mse,"sklearn.metrics.mean_squared_error(y_test,final_predictions)",CLUSTER_4,CLUSTER_11
tree_reg,sklearn.tree.DecisionTreeRegressor(),CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(tree_reg,housing_prepared,housing_labels,scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_4,CLUSTER_11
lin_scores,"sklearn.model_selection.cross_val_score(lin_reg,housing_prepared,housing_labels,scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_4,CLUSTER_11
forest_scores,"sklearn.model_selection.cross_val_score(forest_reg,housing_prepared,housing_labels,scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_4,CLUSTER_11
forest_reg,sklearn.ensemble.RandomForestRegressor(),CLUSTER_4,CLUSTER_11
forest_reg,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_4,CLUSTER_11
grid_search,"sklearn.model_selection.GridSearchCV(forest_reg,param_grid,cv=5,
scoring='neg_mean_squared_error',return_train_score=True)",CLUSTER_4,CLUSTER_11
fabric,"numpy.zeros((10,10)",CLUSTER_3,CLUSTER_6
summe,numpy.sum(fabric==square[0]),CLUSTER_3,CLUSTER_6
data,"numpy.arange(0,10,0.1)",CLUSTER_1,CLUSTER_10
a,pandas.DataFrame(np.arange(4*4),CLUSTER_8,CLUSTER_3
cv_results,pandas.DataFrame(model_cv.cv_results_),CLUSTER_7,CLUSTER_8
cv_results,pandas.DataFrame(model_cv.cv_results_),CLUSTER_7,CLUSTER_8
dataframe_to_export,pandas.DataFrame(data=d),CLUSTER_7,CLUSTER_8
dataframe_to_export,pandas.DataFrame(data=d),CLUSTER_7,CLUSTER_8
training_dataframe,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
testing_dataframe,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=4)",CLUSTER_7,CLUSTER_8
folds,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=4)",CLUSTER_7,CLUSTER_8
folds,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=4)",CLUSTER_7,CLUSTER_8
cv_results,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=folds,scoring='accuracy',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_results,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=folds,scoring='accuracy',n_jobs=-1)",CLUSTER_7,CLUSTER_8
model_cv,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=params,
scoring='accuracy',cv=folds,n_jobs=-1,
verbose=1,return_train_score=True)",CLUSTER_7,CLUSTER_8
model_cv,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=hyper_params,
scoring='accuracy',cv=folds,n_jobs=-1,
verbose=1,return_train_score=True)",CLUSTER_7,CLUSTER_8
X,sklearn.preprocessing.scale(X),CLUSTER_7,CLUSTER_8
testing_dataframe,sklearn.preprocessing.scale(testing_dataframe),CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(C=1,gamma='auto')",CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(C=1,gamma='auto')",CLUSTER_7,CLUSTER_8
model,sklearn.svm.SVC(gamma='auto'),CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(C=best_C,gamma='auto')",CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(C=1,gamma='auto',kernel='rbf')",CLUSTER_7,CLUSTER_8
modelkernel,"sklearn.svm.SVC(C=1,gamma='auto',kernel='rbf')",CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(kernel=""rbf"")",CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(C=best_hyperparams['C'],gamma=best_hyperparams['gamma'],kernel=""rbf"")",CLUSTER_7,CLUSTER_8
pdfs,numpy.exp(-s),CLUSTER_8,CLUSTER_9
pdfs,numpy.exp(-s),CLUSTER_8,CLUSTER_9
pdfs/,numpy.sqrt(2*numpy.pi),CLUSTER_8,CLUSTER_9
pdfs/,numpy.sqrt(2*numpy.pi),CLUSTER_8,CLUSTER_9
lh,"scipy.stats.norm(mean,sigma)",CLUSTER_8,CLUSTER_9
functions,collections.OrderedDict(),CLUSTER_8,CLUSTER_9
scores,"pandas.DataFrame(data=0,columns=functions.keys()",CLUSTER_8,CLUSTER_9
d_axis,"numpy.arange(0,1000)",CLUSTER_1,CLUSTER_3
n_bins,"numpy.arange(-1000,1001,50)",CLUSTER_1,CLUSTER_3
n_bins,"numpy.arange(0,1001,50)",CLUSTER_1,CLUSTER_3
n_bins,"numpy.arange(num_syn[0],num_syn[1]+2,max(1,np.round(0.1*np.diff(num_syn)",CLUSTER_1,CLUSTER_3
tgt_pos,"numpy.array([nrn_list.x[tgt],nrn_list.y[tgt],nrn_list.z[tgt]])",CLUSTER_1,CLUSTER_3
src_pos,"numpy.array([x_pos[src],y_pos[src],z_pos])",CLUSTER_1,CLUSTER_3
tgt_pos,"numpy.array([nrn_list.x[tgt],nrn_list.y[tgt],nrn_list.z[tgt]])",CLUSTER_1,CLUSTER_3
src_pos,"numpy.array([x_pos[src],y_pos[src],z_pos])",CLUSTER_1,CLUSTER_3
idx_E,numpy.where(nrn_list.type=='LIF_exc'),CLUSTER_1,CLUSTER_3
idx_I,numpy.where(nrn_list.type=='LIF_inh'),CLUSTER_1,CLUSTER_3
d,numpy.sqrt(np.sum((tgt_pos-src_pos),CLUSTER_1,CLUSTER_3
d,numpy.sqrt(np.sum((tgt_pos-src_pos),CLUSTER_1,CLUSTER_3
inp_list,"pandas.DataFrame(inp_dict,columns=['index','src_gid','src_vis_x','src_vis_y','presyn_type','N_syn'])",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(8,6)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(2,2,figsize=(8,6)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(8,6)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(8,6)",CLUSTER_1,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=10,sharex=True,sharey=True,figsize=(20,4)",CLUSTER_2,CLUSTER_7
fig,matplotlib.pyplot.figure(figsize=figsize),CLUSTER_6,CLUSTER_11
dttm,"time.strftime(""%Y%m%d-%H%M%S"")",CLUSTER_6,CLUSTER_11
class_count,collections.Counter(y_train),CLUSTER_5,CLUSTER_6
feature_count,collections.defaultdict(int),CLUSTER_5,CLUSTER_6
mnb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_5,CLUSTER_6
freq_khz,numpy.arange(spectrum.size),CLUSTER_4,CLUSTER_11
np_img,numpy.array(img),CLUSTER_4,CLUSTER_11
train_image_names,numpy.array(os.listdir(IMAGE_TRAIN_PATH),CLUSTER_4,CLUSTER_11
A,"numpy.array([
[1,2,3,4],
[5,6,7,8],
[9,0,1,2]
])",CLUSTER_4,CLUSTER_11
np_img,numpy.array(img),CLUSTER_4,CLUSTER_11
np_img,numpy.array(img),CLUSTER_4,CLUSTER_11
image_vector,numpy.array(image),CLUSTER_4,CLUSTER_11
sum_intensity,"numpy.zeros((28,28)",CLUSTER_4,CLUSTER_11
music,numpy.sin(2*np.pi*frequency*t),CLUSTER_4,CLUSTER_11
music,numpy.sin(2*np.pi*frequency*t),CLUSTER_4,CLUSTER_11
x,"numpy.linspace(-2*np.pi,2*np.pi,300)",CLUSTER_4,CLUSTER_11
t,"numpy.linspace(0,T,int(T*SR)",CLUSTER_4,CLUSTER_11
t,"numpy.linspace(0,T,int(T*sr)",CLUSTER_4,CLUSTER_11
t,"numpy.linspace(0,duration,int(duration*SR)",CLUSTER_4,CLUSTER_11
t,"numpy.linspace(0,duration,int(duration*SR)",CLUSTER_4,CLUSTER_11
X_train,"numpy.hstack((
np.vstack(train_data[""voice_vector""])",CLUSTER_4,CLUSTER_11
X_test,"numpy.hstack((
np.vstack(test_data[""voice_vector""])",CLUSTER_4,CLUSTER_11
composition,"numpy.hstack((
beep(a,0.500)",CLUSTER_4,CLUSTER_11
X_train,"numpy.vstack(train_data[""image_vector""].values)",CLUSTER_4,CLUSTER_11
X_test,"numpy.vstack(test_data[""image_vector""].values)",CLUSTER_4,CLUSTER_11
X_train,"numpy.vstack(train_data[""voice_vector""].values)",CLUSTER_4,CLUSTER_11
X_test,"numpy.vstack(test_data[""voice_vector""].values)",CLUSTER_4,CLUSTER_11
spectrum,numpy.fft.fft(signal),CLUSTER_4,CLUSTER_11
start_date,"datetime.datetime.strptime(""2019-09-24"",DATE_FORMAT)",CLUSTER_4,CLUSTER_11
"train_data,test_data","sklearn.model_selection.train_test_split(
dataset,test_size=0.2,random_state=42
)",CLUSTER_4,CLUSTER_11
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=150),CLUSTER_4,CLUSTER_11
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=150),CLUSTER_4,CLUSTER_11
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=150),CLUSTER_4,CLUSTER_11
conf_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_11
l,numpy.array(range(n),CLUSTER_6,CLUSTER_3
l,numpy.array(range(ntr),CLUSTER_6,CLUSTER_3
trainN,numpy.array(dfNewton['optimizationloss']),CLUSTER_6,CLUSTER_3
testN,numpy.array(dfNewton['testerror']),CLUSTER_6,CLUSTER_3
timeN,numpy.array(dfNewton['time']),CLUSTER_6,CLUSTER_3
passesN,numpy.array(dfNewton['conjugategradientsteps']),CLUSTER_6,CLUSTER_3
trainK,numpy.array(dfKatyusha['optimizationloss']),CLUSTER_6,CLUSTER_3
testK,numpy.array(dfKatyusha['testerror']),CLUSTER_6,CLUSTER_3
timeK,numpy.array(dfKatyusha['time']),CLUSTER_6,CLUSTER_3
passesK,numpy.array(dfKatyusha['numberofpasses']),CLUSTER_6,CLUSTER_3
trainN,numpy.array(dfNewton['optimizationloss']),CLUSTER_6,CLUSTER_3
testN,numpy.array(dfNewton['testerror']),CLUSTER_6,CLUSTER_3
timeN,numpy.array(dfNewton['time']),CLUSTER_6,CLUSTER_3
passesN,numpy.array(dfNewton['conjugategradientsteps']),CLUSTER_6,CLUSTER_3
trainK,numpy.array(dfKatyusha['optimizationloss']),CLUSTER_6,CLUSTER_3
testK,numpy.array(dfKatyusha['testerror']),CLUSTER_6,CLUSTER_3
timeK,numpy.array(dfKatyusha['time']),CLUSTER_6,CLUSTER_3
passesK,numpy.array(dfKatyusha['numberofpasses']),CLUSTER_6,CLUSTER_3
dfNewton,pandas.read_csv(path+titleNewton),CLUSTER_6,CLUSTER_3
dfKatyusha,pandas.read_csv(path+titleKatyusha),CLUSTER_6,CLUSTER_3
dfNewton,pandas.read_csv(path+titleNewton),CLUSTER_6,CLUSTER_3
dfKatyusha,pandas.read_csv(path+titleKatyusha),CLUSTER_6,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_3
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_3
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_3
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_3
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_3
now,time.time(),CLUSTER_6,CLUSTER_10
start,time.time(),CLUSTER_6,CLUSTER_10
m,math.floor(s/60),CLUSTER_6,CLUSTER_10
total_withdup,pandas.Series([]),CLUSTER_12,CLUSTER_3
to_append,pandas.Series([row]),CLUSTER_12,CLUSTER_3
swiss_unemp_data,"pandas.read_csv(swiss_unemp_path,encoding='utf_16')",CLUSTER_12,CLUSTER_3
swiss_unemp_data,"pandas.read_csv(swiss_unemp_path,encoding='utf_16')",CLUSTER_12,CLUSTER_3
swiss_unemp_age_data,"pandas.read_csv(swiss_unemp_age_path,encoding='utf_16')",CLUSTER_12,CLUSTER_3
unemp_data,"pandas.read_excel('lfsa_urgan.xls',skiprows=11,skip_footer=3)",CLUSTER_12,CLUSTER_3
x,"numpy.arange(52,step=2)",CLUSTER_12,CLUSTER_3
geo_json_eu,json.load(open('topojson/europe.topojson.json'),CLUSTER_12,CLUSTER_3
geo_json_swiss,json.load(open('topojson/ch-cantons.topojson.json'),CLUSTER_12,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(30,20)",CLUSTER_12,CLUSTER_3
FI_sp_DT,"pandas.DataFrame(regr_DT_sp.feature_importances_.T,columns=['Spec-DT'])",CLUSTER_7,CLUSTER_5
FI_sp_RF,"pandas.DataFrame(regr_RF_sp.feature_importances_.T,columns=['Spec-RF'])",CLUSTER_7,CLUSTER_5
FI_sp_RF2_dr,"pandas.DataFrame(model_RF2_dr_sp.feature_importances_.T,columns=['Spec-RF2_dr'])",CLUSTER_7,CLUSTER_5
FI_sp_RF2_di,"pandas.DataFrame(model_RF2_di_sp.feature_importances_.T,columns=['Spec-RF2_di'])",CLUSTER_7,CLUSTER_5
FI_sp_AB_dr,"pandas.DataFrame(model_AB_dr_sp.feature_importances_.T,columns=['Spec-AB_dr'])",CLUSTER_7,CLUSTER_5
FI_sp_AB_di,"pandas.DataFrame(model_AB_di_sp.feature_importances_.T,columns=['Spec-AB_di'])",CLUSTER_7,CLUSTER_5
FI_sp_GB_dr,"pandas.DataFrame(model_GB_dr_sp.feature_importances_.T,columns=['Spec-GB_dr'])",CLUSTER_7,CLUSTER_5
FI_sp_GB_di,"pandas.DataFrame(model_GB_di_sp.feature_importances_.T,columns=['Spec-GB_di'])",CLUSTER_7,CLUSTER_5
predictedPhases,"pandas.DataFrame(pred_phase_DT_sp,columns=['deltaI','deltaR','deltaIscore','deltaRscore'],index=['DecisionTreespecpoints'])",CLUSTER_7,CLUSTER_5
importance_DT_,"pandas.Series(regr_DT_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_DT_,"pandas.Series(regr_DT_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_RF_,"pandas.Series(model_RF_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_IRF_r,"pandas.Series(model_RF2_dr_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_IRF_i,"pandas.Series(model_RF2_di_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_ARF_r,"pandas.Series(model_AB_dr_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_ARF_i,"pandas.Series(model_AB_di_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_GRF_r,"pandas.Series(model_GB_dr_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
importance_GRF_i,"pandas.Series(model_GB_di_sp.feature_importances_,index=X1_train.columns)",CLUSTER_7,CLUSTER_5
tops,pandas.concat(tops_list),CLUSTER_7,CLUSTER_5
data1,"pandas.read_csv('Training_Data/Graphene/ES_AG_Spec_data_180729_sf_0.8993.csv',header=None)",CLUSTER_7,CLUSTER_5
exp_data_sp,"pandas.read_csv('Training_Data/Graphene/ES_AG_Exp_data.csv',header=None,names=['deltaI','deltaR']+energy_names+energy_names)",CLUSTER_7,CLUSTER_5
xp,"numpy.linspace(xmin,xmax,100)",CLUSTER_7,CLUSTER_5
pred_phase_DT_sp,numpy.append(regr_DT_sp.predict(exp_data_sp),CLUSTER_7,CLUSTER_5
pred_phase_DT_sp,"numpy.append(pred_phase_DT_sp,
r2_score(Y1_test['deltaR'],predictions_DT_sp[:,1])",CLUSTER_7,CLUSTER_5
p,numpy.poly1d(fit_temp),CLUSTER_7,CLUSTER_5
fit_temp,"numpy.polyfit(true,predicted,1)",CLUSTER_7,CLUSTER_5
RF_sp_di_r2score,"sklearn.metrics.r2_score(Y1_test['deltaI'],predictions_RF_sp[:,0])",CLUSTER_7,CLUSTER_5
RF_sp_dr_r2score,"sklearn.metrics.r2_score(Y1_test['deltaR'],predictions_RF_sp[:,1])",CLUSTER_7,CLUSTER_5
AB_sp_di_r2score,"sklearn.metrics.r2_score(Y1_test['deltaI'],predictions_AB_di_sp)",CLUSTER_7,CLUSTER_5
AB_sp_dr_r2score,"sklearn.metrics.r2_score(Y1_test['deltaR'],predictions_AB_dr_sp)",CLUSTER_7,CLUSTER_5
GB_sp_di_r2score,"sklearn.metrics.r2_score(Y1_test['deltaI'],predictions_GB_di_sp)",CLUSTER_7,CLUSTER_5
GB_sp_dr_r2score,"sklearn.metrics.r2_score(Y1_test['deltaR'],predictions_GB_dr_sp)",CLUSTER_7,CLUSTER_5
IRF_sp_di_r2score,"sklearn.metrics.r2_score(Y1_test['deltaI'],predictions_RF2_di_sp)",CLUSTER_7,CLUSTER_5
IRF_sp_dr_r2score,"sklearn.metrics.r2_score(Y1_test['deltaR'],predictions_RF2_dr_sp)",CLUSTER_7,CLUSTER_5
"X1_train,X1_test,Y1_train,Y1_test","sklearn.model_selection.train_test_split(X1,Y1,test_size=ts1,random_state=rs1)",CLUSTER_7,CLUSTER_5
"xmin,xmax",matplotlib.pyplot.xlim(),CLUSTER_7,CLUSTER_5
regr_DT_sp,"sklearn.tree.DecisionTreeRegressor(max_depth=60,min_samples_leaf=2,random_state=rs)",CLUSTER_7,CLUSTER_5
regr_RF_sp,"sklearn.ensemble.RandomForestRegressor(max_depth=40,n_estimators=30,random_state=rs)",CLUSTER_7,CLUSTER_5
regr_RF2_dr_sp,"sklearn.ensemble.RandomForestRegressor(max_depth=md,n_estimators=n,random_state=rs)",CLUSTER_7,CLUSTER_5
regr_RF2_di_sp,"sklearn.ensemble.RandomForestRegressor(max_depth=md,n_estimators=n,random_state=rs)",CLUSTER_7,CLUSTER_5
regr_AB_di_sp,sklearn.ensemble.AdaBoostRegressor(DecisionTreeRegressor(max_depth=md),CLUSTER_7,CLUSTER_5
regr_AB_dr_sp,sklearn.ensemble.AdaBoostRegressor(DecisionTreeRegressor(max_depth=md),CLUSTER_7,CLUSTER_5
regr_GB_di_sp,"sklearn.ensemble.GradientBoostingRegressor(max_depth=md,n_estimators=nest2,random_state=rng)",CLUSTER_7,CLUSTER_5
regr_GB_dr_sp,"sklearn.ensemble.GradientBoostingRegressor(max_depth=md,n_estimators=nest2,random_state=rng)",CLUSTER_7,CLUSTER_5
submission['Id'],"numpy.arange(1,submission.shape[0]+1)",CLUSTER_7,CLUSTER_8
submission,pandas.DataFrame(gbc.predict(test[high_feature10]),CLUSTER_7,CLUSTER_8
feats,"pandas.Series(data=gbc.feature_importances_,index=train.columns)",CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(dir_train,header=None)",CLUSTER_7,CLUSTER_8
trainLabels,"pandas.read_csv(dir_trainLabels,header=None)",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(dir_test,header=None)",CLUSTER_7,CLUSTER_8
gbc,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_7,CLUSTER_8
gbc,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(train_high_feature10,trainLabels,test_size=0.25,random_state=0)",CLUSTER_7,CLUSTER_8
confmat,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
twenty_train,"sklearn.datasets.fetch_20newsgroups(subset='train',categories=categories,shuffle=True,random_state=42)",CLUSTER_10,CLUSTER_4
twenty_test,"sklearn.datasets.fetch_20newsgroups(subset='test',categories=categories,shuffle=True,random_state=42)",CLUSTER_10,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=1)",CLUSTER_10,CLUSTER_4
nb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_10,CLUSTER_4
logreg,sklearn.linear_model.LogisticRegression(C=1e9),CLUSTER_10,CLUSTER_4
mnist,pandas.read_csv('train.csv'),CLUSTER_8,CLUSTER_7
test,pandas.read_csv('test.csv'),CLUSTER_8,CLUSTER_7
training_data,"numpy.zeros((160000,784)",CLUSTER_8,CLUSTER_7
training_labels,numpy.zeros(160000),CLUSTER_8,CLUSTER_7
labels_onehot,"numpy.zeros((160000,10)",CLUSTER_8,CLUSTER_7
Imageid,"numpy.linspace(1,10000,num=10000,dtype=int)",CLUSTER_8,CLUSTER_7
A,"random.randint(0,160000-batch_size-1)",CLUSTER_8,CLUSTER_7
movies,pandas.read_csv('datasets/movies_multilinear_reg.csv'),CLUSTER_5,CLUSTER_1
"train,test,train_bilheteria,test_bilheteria","sklearn.model_selection.train_test_split(filmes_independente,filmes_dependente)",CLUSTER_5,CLUSTER_1
"train,test,train_bilheteria,test_bilheteria","sklearn.model_selection.train_test_split(
filmes_independente,filmes_dependente,test_size=0.3)",CLUSTER_5,CLUSTER_1
modelo,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
modelo_30,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
bgr_image,"numpy.asarray(resized,dtype=np.float32)",CLUSTER_4,CLUSTER_11
hwc_format,"numpy.ascontiguousarray(np.rollaxis(bgr_image,2)",CLUSTER_4,CLUSTER_11
predicted_label,numpy.argmax(probs),CLUSTER_4,CLUSTER_11
stride,"numpy.multiply(stride1x1,stride3x3)",CLUSTER_4,CLUSTER_11
startTime,time.time(),CLUSTER_4,CLUSTER_11
endTime,time.time(),CLUSTER_4,CLUSTER_11
startTime,time.time(),CLUSTER_4,CLUSTER_11
endTime,time.time(),CLUSTER_4,CLUSTER_11
startTime,time.time(),CLUSTER_4,CLUSTER_11
endTime,time.time(),CLUSTER_4,CLUSTER_11
df,pandas.DataFrame(my_results),CLUSTER_4,CLUSTER_11
x,"numpy.arange(1,10,0.1)",CLUSTER_1,CLUSTER_10
ls,"numpy.arange(1,10,0.1)",CLUSTER_1,CLUSTER_10
y,numpy.sin(x),CLUSTER_1,CLUSTER_10
indexed,pandas.DataFrame(bow_new),CLUSTER_5,CLUSTER_1
index,pandas.DataFrame(index.sort_values(ascending=False),CLUSTER_5,CLUSTER_1
allData,pandas.DataFrame(data),CLUSTER_5,CLUSTER_1
innerProductresult,pandas.DataFrame((metadata2*value1),CLUSTER_5,CLUSTER_1
data,pandas.read_csv('keyword.csv'),CLUSTER_5,CLUSTER_1
metadata1,pandas.read_csv('metadata1.csv'),CLUSTER_5,CLUSTER_1
metadata2,pandas.read_csv('metadata2.csv'),CLUSTER_5,CLUSTER_1
metadata1,pandas.read_csv('metadata1.csv'),CLUSTER_5,CLUSTER_1
metadata2,pandas.read_csv('metadata2.csv'),CLUSTER_5,CLUSTER_1
idfDict[word],math.log10(N/float(val),CLUSTER_5,CLUSTER_1
x22,math.sqrt((result1**2),CLUSTER_5,CLUSTER_1
"corr,p_val","scipy.stats.spearmanr(cyl,am)",CLUSTER_7,CLUSTER_9
"corr,p_val","scipy.stats.spearmanr(cyl,vs)",CLUSTER_7,CLUSTER_9
"corr,p_val","scipy.stats.spearmanr(cyl,gear)",CLUSTER_7,CLUSTER_9
cars_tab,"pandas.crosstab(cyl,am)",CLUSTER_7,CLUSTER_9
cars,"pandas.read_csv(""mtcars.csv"")",CLUSTER_7,CLUSTER_9
df,"pandas.read_csv(""iris.csv"",index_col=0)",CLUSTER_7,CLUSTER_9
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighbourhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
downtown_onehot,"pandas.get_dummies(downtown_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
Toronto_pc,pandas.read_csv('Toronto_Postalcode.csv'),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
df,"pandas.read_csv('Tutorials/tuto4_table1.txt',sep="""")",CLUSTER_8,CLUSTER_4
df2,"pandas.read_csv('Tutorials/tuto4_table2.txt',sep="""")",CLUSTER_8,CLUSTER_4
ecom,"pandas.read_csv(""EcommercePurchases"")",CLUSTER_8,CLUSTER_4
df_all,pandas.DataFrame(alldata),CLUSTER_7,CLUSTER_8
alldata_hists,"pandas.DataFrame({""alldata:""+column:alldata[column],""alldata:log(""+column+""+1)",CLUSTER_7,CLUSTER_8
cv_ridge,"pandas.Series(cv_ridge,index=alphas)",CLUSTER_7,CLUSTER_8
series_lasso,"pandas.Series(cv_lasso,index=alphas)",CLUSTER_7,CLUSTER_8
series_knn,"pandas.Series(cv_knn,index=neighbors)",CLUSTER_7,CLUSTER_8
series_randomforest,"pandas.Series(cv_randomforest,index=trees)",CLUSTER_7,CLUSTER_8
alldata,"pandas.concat([alldata,alldata2014])",CLUSTER_7,CLUSTER_8
new_train_X,"pandas.concat([train_X,validation_X])",CLUSTER_7,CLUSTER_8
new_train_Y,"pandas.concat([train_Y,validation_Y])",CLUSTER_7,CLUSTER_8
alldata_feats,pandas.get_dummies(alldata_feats),CLUSTER_7,CLUSTER_8
alldata,"pandas.read_csv(""eleicoes_2006_a_2010.csv"")",CLUSTER_7,CLUSTER_8
alldata2014,"pandas.read_csv(""eleicoes_2014.csv"")",CLUSTER_7,CLUSTER_8
x_plot,numpy.array([i/200.0foriinrange(200),CLUSTER_7,CLUSTER_8
alldata_feats[skewed_feats],numpy.log1p(alldata_feats[skewed_feats]),CLUSTER_7,CLUSTER_8
rmse,"numpy.sqrt(-cross_val_score(model,train_X,train_y,scoring=""neg_mean_squared_error"",cv=5)",CLUSTER_7,CLUSTER_8
alphas,"numpy.linspace(10,100,50,endpoint=False)",CLUSTER_7,CLUSTER_8
y_pred,numpy.matrix(y_pred),CLUSTER_7,CLUSTER_8
linear,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
model_ridge,sklearn.linear_model.Ridge(alpha=8.0),CLUSTER_7,CLUSTER_8
model_ridge,sklearn.linear_model.Ridge(alpha=30.0),CLUSTER_7,CLUSTER_8
model_ridge,sklearn.linear_model.Ridge(alpha=8.0),CLUSTER_7,CLUSTER_8
model_lasso,sklearn.linear_model.Lasso(alpha=19.0),CLUSTER_7,CLUSTER_8
model_lasso,sklearn.linear_model.Lasso(alpha=50.0),CLUSTER_7,CLUSTER_8
model_lasso,sklearn.linear_model.Lasso(alpha=50.0),CLUSTER_7,CLUSTER_8
model_knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=21),CLUSTER_7,CLUSTER_8
model_knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=21),CLUSTER_7,CLUSTER_8
model_randomforest,sklearn.ensemble.RandomForestRegressor(n_estimators=70),CLUSTER_7,CLUSTER_8
model_randomforest,sklearn.ensemble.RandomForestRegressor(n_estimators=75),CLUSTER_7,CLUSTER_8
model_randomforest,sklearn.ensemble.RandomForestRegressor(n_estimators=75),CLUSTER_7,CLUSTER_8
ts2,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
ts3,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
ts_sax,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
dist_matrix,"pandas.DataFrame(0,index=ts.index,columns=ts.index)",CLUSTER_1,CLUSTER_3
raw_data,"pandas.read_csv('stock_data.csv',header=0)",CLUSTER_1,CLUSTER_3
arr1,numpy.array(ts_sax.loc[dist_matrix.index.values[i]]),CLUSTER_1,CLUSTER_3
arr2,numpy.array(ts_sax.loc[dist_matrix.columns.values[j]]),CLUSTER_1,CLUSTER_3
ttl_dist,"numpy.sum([ttl_dist,(sym_dic[int_to_sym_dic[a[i][k]]+int_to_sym_dic[b[k]]]**2)",CLUSTER_1,CLUSTER_3
sim,"numpy.append(sim,[s])",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(5,3,figsize=(15,15)",CLUSTER_1,CLUSTER_3
episode_history,numpy.array(episode_history),CLUSTER_2,CLUSTER_7
discounted_rewards,numpy.zeros_like(rewards),CLUSTER_2,CLUSTER_7
discounted_rewards-,numpy.mean(discounted_rewards),CLUSTER_2,CLUSTER_7
discounted_rewards/,numpy.std(discounted_rewards),CLUSTER_2,CLUSTER_7
dfdados,pandas.read_csv('USA_Housing.csv'),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
regre,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
avg_reward,numpy.mean(scores_window),CLUSTER_6,CLUSTER_10
scores_window,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
data,"pandas.DataFrame(full_reviews,columns=['Restaurant_Id','Review'])",CLUSTER_9,CLUSTER_2
response,"requests.get(url,headers=headers,params=url_params)",CLUSTER_9,CLUSTER_2
response,"requests.get(url,headers=headers,params=url_params)",CLUSTER_9,CLUSTER_2
source,requests.get(full_url),CLUSTER_9,CLUSTER_2
source,requests.get(full_url),CLUSTER_9,CLUSTER_2
df_coef_,"pandas.DataFrame(index=high_corr_cols,data={'coef':lasso_.coef_})",CLUSTER_5,CLUSTER_5
df_coef,pandas.DataFrame(index=pd.get_dummies(df_train),CLUSTER_5,CLUSTER_5
results_df,"pandas.DataFrame(index=df_test.index,data={'SalePrice':predictions})",CLUSTER_5,CLUSTER_5
df_temp_train,pandas.get_dummies(df_train),CLUSTER_5,CLUSTER_5
df_coef,pd.DataFrame(index=pandas.get_dummies(df_train),CLUSTER_5,CLUSTER_5
reg_cols,pandas.get_dummies(df_train),CLUSTER_5,CLUSTER_5
df_train,"pandas.read_csv(""DataSets/HousePricePrediction/train.csv"",index_col='Id')",CLUSTER_5,CLUSTER_5
df_test,"pandas.read_csv(""DataSets/HousePricePrediction/test.csv"",index_col='Id')",CLUSTER_5,CLUSTER_5
lin_reg_lot,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
lasso_,sklearn.linear_model.Lasso(max_iter=10000),CLUSTER_5,CLUSTER_5
lasso_reg,"sklearn.linear_model.Lasso(max_iter=10000,alpha=0.001)",CLUSTER_5,CLUSTER_5
lasso,sklearn.linear_model.Lasso(),CLUSTER_5,CLUSTER_5
lasso_fin,"sklearn.linear_model.Lasso(alpha=100,max_iter=50000)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df_temp_train[high_corr_cols],
df_temp_train[['SalePrice']])",CLUSTER_5,CLUSTER_5
scaler_,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
scaler_reg_X,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
scaler_reg_y,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
scaler_X,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
scaler_X_fin,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
clf,"sklearn.model_selection.GridSearchCV(lasso,params,cv=5)",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(os.getenv(""PUIDATA"")",CLUSTER_10,CLUSTER_4
df['date'],pandas.to_datetime(df['starttime']),CLUSTER_10,CLUSTER_4
str,"re.sub(r'[^\w]|_','',str)",CLUSTER_8,CLUSTER_4
str,"re.sub(""^\d+\s|\s\d+\s|\s\d+$"","""",str)",CLUSTER_8,CLUSTER_4
fo,pandas.read_excel('2017.xls'),CLUSTER_8,CLUSTER_4
x,"y=numpy.arange(-2.0,2.0,0.02)",CLUSTER_1,CLUSTER_10
zs,"numpy.array([fun(x,y)",CLUSTER_1,CLUSTER_10
r,"numpy.linspace(0,1.5,220)",CLUSTER_1,CLUSTER_10
p,"numpy.linspace(0,2*np.pi,220)",CLUSTER_1,CLUSTER_10
"R,P","numpy.meshgrid(r,p)",CLUSTER_1,CLUSTER_10
"X,Y","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
imgplot,matplotlib.pyplot.imshow(img),CLUSTER_1,CLUSTER_10
df,"pandas.read_table(""../../data/raw/TB_INTERACCIONES.tsv"",encoding=""latin-1"")",CLUSTER_8,CLUSTER_3
env,sklearn.covariance.EllipticEnvelope(contamination=.01),CLUSTER_5,CLUSTER_5
"features,col","sklearn.datasets.make_blobs(centers=1,cluster_std=.90)",CLUSTER_5,CLUSTER_5
boxes,numpy.array(rectsTypeA),CLUSTER_12,CLUSTER_11
xs,"numpy.asarray(plotx,dtype=np.int32)",CLUSTER_12,CLUSTER_11
ys,"numpy.asarray(ploty,dtype=np.int32)",CLUSTER_12,CLUSTER_11
blankStrip,"numpy.zeros((h-dead_y,w)",CLUSTER_12,CLUSTER_11
blankStrip,"numpy.zeros((hUs-dead_y,w)",CLUSTER_12,CLUSTER_11
remain,numpy.where(mask),CLUSTER_12,CLUSTER_11
deadzone_mask,"numpy.concatenate((deadzoneU,blankStrip)",CLUSTER_12,CLUSTER_11
deadzone_mask,"numpy.concatenate((deadzoneU,blankStrip)",CLUSTER_12,CLUSTER_11
stripsPu[0],"numpy.concatenate((dead_strip,rest_strip)",CLUSTER_12,CLUSTER_11
pUmap,"numpy.concatenate(stripsPu,axis=0)",CLUSTER_12,CLUSTER_11
stripsPv[0],"numpy.concatenate((top_strip,bot_strip)",CLUSTER_12,CLUSTER_11
stripsPv[1],"numpy.concatenate((top_strip,bot_strip)",CLUSTER_12,CLUSTER_11
newV,"numpy.concatenate(stripsPv,axis=1)",CLUSTER_12,CLUSTER_11
disp,numpy.zeros_like(vboat.img),CLUSTER_12,CLUSTER_11
borderb,"numpy.ones((1,w,3)",CLUSTER_12,CLUSTER_11
borders,"numpy.ones((h,1,3)",CLUSTER_12,CLUSTER_11
tK,"numpy.ones((3,2)",CLUSTER_12,CLUSTER_11
kernel,"numpy.ones((4,4)",CLUSTER_12,CLUSTER_11
idxs,numpy.argsort(y2),CLUSTER_12,CLUSTER_11
tmpMean,numpy.mean(tmp),CLUSTER_12,CLUSTER_11
summed,"numpy.sum(copy,axis=1)",CLUSTER_12,CLUSTER_11
total,numpy.sum(summed),CLUSTER_12,CLUSTER_11
b,2;d=numpy.ceil(nObs/float(b),CLUSTER_12,CLUSTER_11
plotx,"numpy.linspace(pxls[0,0],pxls[-1,0])",CLUSTER_12,CLUSTER_11
pts,"numpy.vstack(([xs],[ys])",CLUSTER_12,CLUSTER_11
tmp1,numpy.copy(pipe.vmap),CLUSTER_12,CLUSTER_11
tmp1,numpy.copy(pipe.vmap),CLUSTER_12,CLUSTER_11
tmp,numpy.copy(pipe.greyV),CLUSTER_12,CLUSTER_11
tmp2,numpy.copy(pipe.img),CLUSTER_12,CLUSTER_11
tmp2,numpy.copy(pipe.img),CLUSTER_12,CLUSTER_11
im,numpy.copy(pipe.img),CLUSTER_12,CLUSTER_11
raw_umap,numpy.copy(umap1),CLUSTER_12,CLUSTER_11
strips,numpy.copy(stripsU),CLUSTER_12,CLUSTER_11
black,numpy.copy(vmap),CLUSTER_12,CLUSTER_11
clone,numpy.copy(umap),CLUSTER_12,CLUSTER_11
disp,numpy.copy(img),CLUSTER_12,CLUSTER_11
tmp,numpy.copy(img),CLUSTER_12,CLUSTER_11
tImg,numpy.copy(vboat.img),CLUSTER_12,CLUSTER_11
tImg,numpy.copy(vboat.img),CLUSTER_12,CLUSTER_11
disp,numpy.copy(vboat.umap_processed),CLUSTER_12,CLUSTER_11
img,numpy.copy(vboat.img),CLUSTER_12,CLUSTER_11
disp,numpy.copy(vboat.img),CLUSTER_12,CLUSTER_11
mask,numpy.copy(disp),CLUSTER_12,CLUSTER_11
idxs,"numpy.delete(idxs,suppress)",CLUSTER_12,CLUSTER_11
fit,"numpy.poly1d(np.polyfit(pxls[:,0],pxls[:,1],2)",CLUSTER_12,CLUSTER_11
mask,"numpy.isin(non,supressed,invert=True)",CLUSTER_12,CLUSTER_11
rows,math.ceil(num_filters/cols),CLUSTER_4,CLUSTER_7
train_x,"numpy.ndarray((0,img_height*img_width*num_channels)",CLUSTER_4,CLUSTER_7
indices,numpy.arange(data_x.shape[0]),CLUSTER_4,CLUSTER_7
train_y,"numpy.array(train_y,dtype=np.int32)",CLUSTER_4,CLUSTER_7
test_y,"numpy.array(subset['labels'],dtype=np.int32)",CLUSTER_4,CLUSTER_7
shuffled_data_x,numpy.ascontiguousarray(data_x[indices]),CLUSTER_4,CLUSTER_7
shuffled_data_y,numpy.ascontiguousarray(data_y[indices]),CLUSTER_4,CLUSTER_7
img,"numpy.zeros([height,width,num_channels])",CLUSTER_4,CLUSTER_7
yp,"numpy.argmax(model_out,1)",CLUSTER_4,CLUSTER_7
yt,"numpy.argmax(y_batch,1)",CLUSTER_4,CLUSTER_7
yp,"numpy.argmax(cur_logits,1)",CLUSTER_4,CLUSTER_7
yt,"numpy.argmax(train_y_batch,1)",CLUSTER_4,CLUSTER_7
correct,"numpy.argmax(train_y_batch,1)",CLUSTER_4,CLUSTER_7
x_data,"numpy.linspace(1,num_points,num_points)",CLUSTER_4,CLUSTER_7
train_x,"numpy.vstack((train_x,subset['data'])",CLUSTER_4,CLUSTER_7
train_y,numpy.eye(10),CLUSTER_4,CLUSTER_7
test_y,numpy.eye(10),CLUSTER_4,CLUSTER_7
valid_y,numpy.eye(10),CLUSTER_4,CLUSTER_7
"fig,((ax1,ax2),(ax3,ax4))","matplotlib.pyplot.subplots(2,2,figsize=(16,8)",CLUSTER_4,CLUSTER_7
dataset,pandas.read_csv('C:/Users/Susan/Desktop/Salary_Data.csv'),CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
pad_sources_batch,"numpy.array(pad_sentence_batch(sources_batch,source_pad_int)",CLUSTER_2,CLUSTER_7
pad_targets_batch,"numpy.array(pad_sentence_batch(targets_batch,target_pad_int)",CLUSTER_2,CLUSTER_7
target,"numpy.pad(
target,
[(0,0)",CLUSTER_2,CLUSTER_7
logits,"numpy.pad(
logits,
[(0,0)",CLUSTER_2,CLUSTER_7
df,"pandas.read_csv(""../data/Advertising.csv"")",CLUSTER_8,CLUSTER_4
x,numpy.array(FarDefect[i]),CLUSTER_3,CLUSTER_6
centerMass,numpy.array(centerMass),CLUSTER_3,CLUSTER_6
dot,"numpy.dot(v1,v2)",CLUSTER_3,CLUSTER_6
kernel_square,"numpy.ones((11,11)",CLUSTER_3,CLUSTER_6
AverageDefectDistance,numpy.mean(sortedDefectsDistances[0:2]),CLUSTER_3,CLUSTER_6
angle,numpy.degrees(np.arccos(cos_angle),CLUSTER_3,CLUSTER_6
x_modulus,numpy.sqrt((v1*v1),CLUSTER_3,CLUSTER_6
y_modulus,numpy.sqrt((v2*v2),CLUSTER_3,CLUSTER_6
distance,"numpy.sqrt(np.power(x[0]-centerMass[0],2)",CLUSTER_3,CLUSTER_6
distance,"numpy.sqrt(np.power(fingers[i][0]-centerMass[0],2)",CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
dates,"numpy.linspace(1,inf.size,inf.size)",CLUSTER_1,CLUSTER_3
days,"numpy.linspace(1,fit.size,fit.size)",CLUSTER_1,CLUSTER_3
infections,pandas.read_csv('cases.csv'),CLUSTER_1,CLUSTER_3
x,"numpy.arange(0,2*np.pi,0.01)",CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
x,"numpy.arange(1,4)",CLUSTER_1,CLUSTER_10
y,"numpy.arange(10,15)",CLUSTER_1,CLUSTER_10
Z,numpy.sin(X),CLUSTER_1,CLUSTER_10
"X,Y","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_10
xyz_to_r,"numpy.array([0.41847,-0.15866,-0.082835],)",CLUSTER_1,CLUSTER_10
xyz_to_g,"numpy.array([-0.091169,0.25243,0.015708])",CLUSTER_1,CLUSTER_10
xyz_to_b,"numpy.array([0.00092090,-0.0025498,0.17860])",CLUSTER_1,CLUSTER_10
xyz_to_r,"numpy.array([3.2410,-1.5374,-0.4986])",CLUSTER_1,CLUSTER_10
xyz_to_g,"numpy.array([-0.9692,1.8760,0.0416])",CLUSTER_1,CLUSTER_10
xyz_to_b,"numpy.array([0.0556,-0.204,1.0570])",CLUSTER_1,CLUSTER_10
xyz_to_rgb,"numpy.array([[3.2406,-1.5372,-0.4986],[-0.9689,1.8758,0.0415],[0.0557,-0.204,1.0570]])",CLUSTER_1,CLUSTER_10
img,numpy.asarray(img),CLUSTER_1,CLUSTER_10
r,"numpy.dot(XYZ,xyz_to_r)",CLUSTER_1,CLUSTER_10
g,"numpy.dot(XYZ,xyz_to_g)",CLUSTER_1,CLUSTER_10
b,"numpy.dot(XYZ,xyz_to_b)",CLUSTER_1,CLUSTER_10
rgb_img,"numpy.dot(XYZ,xyz_to_rgb)",CLUSTER_1,CLUSTER_10
r,"numpy.dot(XYZ,xyz_to_r)",CLUSTER_1,CLUSTER_10
g,"numpy.dot(XYZ,xyz_to_g)",CLUSTER_1,CLUSTER_10
b,"numpy.dot(XYZ,xyz_to_b)",CLUSTER_1,CLUSTER_10
X,"numpy.sum(x*nhimg,axis=2)",CLUSTER_1,CLUSTER_10
Y,"numpy.sum(y*nhimg,axis=2)",CLUSTER_1,CLUSTER_10
Z,"numpy.sum(z*nhimg,axis=2)",CLUSTER_1,CLUSTER_10
XYZ,"numpy.stack([X,Y,Z],2)",CLUSTER_1,CLUSTER_10
rgb_img,"numpy.stack([r,g,b],axis=2)",CLUSTER_1,CLUSTER_10
rgb_img2,"numpy.stack([r,g,b],axis=2)",CLUSTER_1,CLUSTER_10
cmf,"numpy.loadtxt(""CIE1931-2deg-XYZ.csv"",delimiter="","")",CLUSTER_1,CLUSTER_10
sd_light_source,"numpy.loadtxt(""lamp_spectrum.csv"",skiprows=1,dtype=""float"")",CLUSTER_1,CLUSTER_10
sd_light_source,"numpy.loadtxt(""lamp_spectrum.csv"",skiprows=1,dtype=""float"")",CLUSTER_1,CLUSTER_10
xyz_to_rgb,numpy.linalg.inv(rgb_to_xyz),CLUSTER_1,CLUSTER_10
"baseball[""pay_category""]","pandas.cut(baseball[""Salary""],bins,labels=[""low"",""average"",""high""])",CLUSTER_7,CLUSTER_1
baseball,"pandas.read_csv(""../assets/data/hitters.csv"")",CLUSTER_7,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(baseball[[""AtBat"",""HmRun"",""Years"",""Assists"",""Errors""]],
baseball[""Salary""],
test_size=0.3,
random_state=42)",CLUSTER_7,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(dt,X_train,y_train,cv=10,scoring=""neg_mean_squared_error"")",CLUSTER_7,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(rf,X_train,y_train,cv=10,scoring=""neg_mean_squared_error"")",CLUSTER_7,CLUSTER_1
dt,sklearn.tree.DecisionTreeRegressor(min_samples_leaf=5),CLUSTER_7,CLUSTER_1
dt,"sklearn.tree.DecisionTreeRegressor(min_samples_leaf=5,max_depth=4)",CLUSTER_7,CLUSTER_1
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=11,min_samples_leaf=5)",CLUSTER_7,CLUSTER_1
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=11,min_samples_leaf=5)",CLUSTER_7,CLUSTER_1
grid,GridSearchCV(estimator=sklearn.ensemble.RandomForestRegressor(),CLUSTER_7,CLUSTER_1
rf_final,"sklearn.ensemble.RandomForestRegressor(max_depth=7,min_samples_leaf=10,n_estimators=9)",CLUSTER_7,CLUSTER_1
grid,sklearn.model_selection.GridSearchCV(estimator=RandomForestRegressor(),CLUSTER_7,CLUSTER_1
f_result,"pandas.DataFrame({'Model':Model,'AccuracyScore':score,'Cross_Val_Score':cvs,'ROC-AUC_Curve':rocscore})",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('Customer_Churn.csv'),CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,random_state=42,stratify=y)",CLUSTER_7,CLUSTER_8
sc,"sklearn.model_selection.cross_val_score(model,x,y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
knc,sklearn.neighbors.KNeighborsClassifier(n_neighbors=8),CLUSTER_7,CLUSTER_8
svc,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_8
dtc,sklearn.tree.DecisionTreeClassifier(random_state=6),CLUSTER_7,CLUSTER_8
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=200,random_state=42)",CLUSTER_7,CLUSTER_8
AS,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_7,CLUSTER_8
roc_auc,"sklearn.metrics.auc(false_positive_rate,true_positive_rate)",CLUSTER_7,CLUSTER_8
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_7,CLUSTER_8
nearbyVenues,"pandas.DataFrame([],columns=['Venue','VenueCategory','VenueLatitude','VenueLongitude','Neighborhood','NeighborhoodLatitude','NeighborhoodLongitude'])",CLUSTER_9,CLUSTER_2
df_initial,pandas.read_csv('restaurant_dataframe.csv'),CLUSTER_9,CLUSTER_2
resp,"requests.get(url=url,params=params)",CLUSTER_9,CLUSTER_2
data,json.loads(resp.text),CLUSTER_9,CLUSTER_2
start,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
features,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_10
pca,"sklearn.decomposition.PCA(n_components=0.99,whiten=True)",CLUSTER_5,CLUSTER_10
pca_nowhiten,sklearn.decomposition.PCA(n_components=0.99),CLUSTER_5,CLUSTER_10
pca,sklearn.decomposition.PCA(whiten=True),CLUSTER_5,CLUSTER_10
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
kpca,"sklearn.decomposition.KernelPCA(kernel='rbf',gamma=15,n_components=1)",CLUSTER_5,CLUSTER_10
"features,_","sklearn.datasets.make_circles(n_samples=100,random_state=1,noise=0.1,factor=0.1)",CLUSTER_5,CLUSTER_10
filename,os.fsdecode(os.fsencode((str(wd),CLUSTER_0,CLUSTER_11
filename,os.fsdecode(os.fsencode((str(wd),CLUSTER_0,CLUSTER_11
test_df_hypertension,"pandas.DataFrame({'filename':test_hypertension_indicator_filenames,'test_token':test_hypertension_indicator_tokens,'test_label':test_hypertension_indicator_labels})",CLUSTER_0,CLUSTER_11
gold_df_hypertension,"pandas.DataFrame({'filename':gold_hypertension_indicator_filenames,'gold_token':gold_hypertension_indicator_tokens,'gold_label':gold_hypertension_indicator_labels})",CLUSTER_0,CLUSTER_11
test_df,"pandas.DataFrame({'filename':test_filenames,'test_token':test_tokens,'test_label':test_labels})",CLUSTER_0,CLUSTER_11
gold_df,"pandas.DataFrame({'filename':gold_filenames,'gold_token':gold_tokens,'gold_label':gold_labels})",CLUSTER_0,CLUSTER_11
test_df_diabetes,"pandas.DataFrame({'filename':test_diabetes_indicator_filenames,'test_token':test_diabetes_indicator_tokens,'test_label':test_diabetes_indicator_labels})",CLUSTER_0,CLUSTER_11
gold_df_diabetes,"pandas.DataFrame({'filename':gold_diabetes_indicator_filenames,'gold_token':gold_diabetes_indicator_tokens,'gold_label':gold_diabetes_indicator_labels})",CLUSTER_0,CLUSTER_11
test_combined,"pandas.concat([tdf,bert_results['classLabel']],axis=1)",CLUSTER_0,CLUSTER_11
test_DI_combined,"pandas.concat([tdf,bert_DI_results['PredictedLabel']],axis=1)",CLUSTER_0,CLUSTER_11
test_hypertension_combined,"pandas.concat([tdf,bert_hypertension_results['PredictedLabel']],axis=1)",CLUSTER_0,CLUSTER_11
bert_results,"pandas.read_csv(file_path,sep='\t',header=None)",CLUSTER_0,CLUSTER_11
bert_DI_results,"pandas.read_csv(""bert_output_results/diabetes/test_results.tsv"",sep='\t',header=None)",CLUSTER_0,CLUSTER_11
bert_hypertension_results,"pandas.read_csv(""bert_output_results/hypertension/bert_run1_test_results.tsv"",sep='\t',header=None)",CLUSTER_0,CLUSTER_11
ntest,numpy.array(bert_hypertension_results),CLUSTER_0,CLUSTER_11
df,"pandas.read_csv(""BankNote_Authentication.csv"")",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=23,test_size=0.3)",CLUSTER_7,CLUSTER_5
classifier,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
Neighborhood_Good,"pandas.DataFrame(np.zeros((all_data.shape[0],1)",CLUSTER_5,CLUSTER_5
price_category,"pandas.DataFrame(np.zeros((all_data.shape[0],1)",CLUSTER_5,CLUSTER_5
reconstruct,"pandas.DataFrame(np.zeros((all_data.shape[0],1)",CLUSTER_5,CLUSTER_5
recon_after_buy,"pandas.DataFrame(np.zeros((all_data.shape[0],1)",CLUSTER_5,CLUSTER_5
build_eq_buy,"pandas.DataFrame(np.zeros((all_data.shape[0],1)",CLUSTER_5,CLUSTER_5
solution,"pandas.DataFrame({""id"":p,""SalePrice"":test.Id},columns=['SalePrice','id'])",CLUSTER_5,CLUSTER_5
pc,pandas.Series(np.zeros(train.shape[0]),CLUSTER_5,CLUSTER_5
coef,"pandas.Series(model_lasso.coef_,index=X_train.columns)",CLUSTER_5,CLUSTER_5
all_data,"pandas.concat((train.loc[:,'MSSubClass':'SaleCondition'],
test.loc[:,'MSSubClass':'SaleCondition'])",CLUSTER_5,CLUSTER_5
qu_list,"pandas.concat((overall_poor_qu,overall_good_qu,overall_poor_cond,overall_good_cond,exter_poor_qu,
exter_good_qu,exter_poor_cond,exter_good_cond,bsmt_poor_cond,bsmt_good_cond,garage_poor_qu,
garage_good_qu,garage_poor_cond,garage_good_cond,kitchen_poor_qu,kitchen_good_qu)",CLUSTER_5,CLUSTER_5
year_map,pandas.concat(pd.Series('YearGroup'+str(i+1),CLUSTER_5,CLUSTER_5
X,"pandas.concat((X,newer_dwelling,season,reconstruct,recon_after_buy,
qu_list,bad_heating,MasVnrType_Any,price_category,build_eq_buy)",CLUSTER_5,CLUSTER_5
XP,pandas.concat(poly(X),CLUSTER_5,CLUSTER_5
X,"pandas.concat((X,XP)",CLUSTER_5,CLUSTER_5
imp_coef,pandas.concat([coef.head(23),CLUSTER_5,CLUSTER_5
imp_coef,pandas.concat([coef.tail(23),CLUSTER_5,CLUSTER_5
X_t,"pandas.get_dummies(train.loc[:,columns_for_pc],sparse=True)",CLUSTER_5,CLUSTER_5
X_t,"pandas.get_dummies(all_data.loc[:,columns_for_pc],sparse=True)",CLUSTER_5,CLUSTER_5
X,pandas.get_dummies(all_data),CLUSTER_5,CLUSTER_5
train,"pandas.read_csv(""train.csv"")",CLUSTER_5,CLUSTER_5
test,"pandas.read_csv(""test.csv"")",CLUSTER_5,CLUSTER_5
outliers_id,"numpy.array([524,1299])",CLUSTER_5,CLUSTER_5
elas_preds,numpy.expm1(clf2.predict(xtrain),CLUSTER_5,CLUSTER_5
xgb_preds,numpy.expm1(clf3.predict(xtrain),CLUSTER_5,CLUSTER_5
resid,numpy.expm1(ytrain),CLUSTER_5,CLUSTER_5
elas_preds,numpy.expm1(clf2.predict(xtest),CLUSTER_5,CLUSTER_5
xgb_preds,numpy.expm1(clf3.predict(xtest),CLUSTER_5,CLUSTER_5
up_resid,numpy.expm1(ytrain),CLUSTER_5,CLUSTER_5
elas_preds,numpy.expm1(clf2.predict(X_test),CLUSTER_5,CLUSTER_5
xgb_preds,numpy.expm1(clf3.predict(X_test),CLUSTER_5,CLUSTER_5
"all_data.loc[:,t]","numpy.log1p(all_data.loc[:,t])",CLUSTER_5,CLUSTER_5
y,numpy.log1p(train.SalePrice),CLUSTER_5,CLUSTER_5
"all_data.loc[all_data['LotFrontage'].isnull(),'LotFrontage']","numpy.polyval(p,all_data.loc[all_data['LotFrontage'].isnull()",CLUSTER_5,CLUSTER_5
p_poly_val,"numpy.polyfit(train['OverallQual'],train['SalePrice'],3)",CLUSTER_5,CLUSTER_5
p,"numpy.polyfit(x[t],y[t],1)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(18,6)",CLUSTER_5,CLUSTER_5
model_lasso,"sklearn.linear_model.Lasso(alpha=3e-4,max_iter=50000)",CLUSTER_5,CLUSTER_5
clf,"sklearn.ensemble.RandomForestRegressor(n_estimators=300,n_jobs=-1,max_features=0.9,
max_depth=9,min_samples_split=25,min_samples_leaf=10,
random_state=36
)",CLUSTER_5,CLUSTER_5
svm,"sklearn.svm.SVC(C=100,gamma=0.0001,kernel='rbf')",CLUSTER_5,CLUSTER_5
scorer,"sklearn.metrics.make_scorer(mean_squared_error,False)",CLUSTER_5,CLUSTER_5
clf2,"sklearn.linear_model.ElasticNet(alpha=0.0005,l1_ratio=0.9)",CLUSTER_5,CLUSTER_5
stock_response,requests.get(url),CLUSTER_9,CLUSTER_2
response,requests.get(url),CLUSTER_9,CLUSTER_2
df,"pandas.DataFrame(response['dataset']['data'],columns=response['dataset']['column_names'])",CLUSTER_9,CLUSTER_2
processed_data,"pandas.get_dummies(data,columns=['rank'])",CLUSTER_1,CLUSTER_3
data,pandas.read_csv('student_data.csv'),CLUSTER_1,CLUSTER_3
X,"numpy.array(data[[""gre"",""gpa""]])",CLUSTER_1,CLUSTER_3
y,"numpy.array(data[""admit""])",CLUSTER_1,CLUSTER_3
X,numpy.array(processed_data),CLUSTER_1,CLUSTER_3
rotation_matrix,"numpy.array([[cosval,0,sinval],
[0,1,0],
[-sinval,0,cosval]])",CLUSTER_2,CLUSTER_7
rotated_data,"numpy.zeros(batch_data.shape,dtype=np.float32)",CLUSTER_2,CLUSTER_7
"rotated_data[k,...]","numpy.dot(shape_pc.reshape((-1,3)",CLUSTER_2,CLUSTER_7
jittered_data,"numpy.clip(sigma*np.random.randn(B,N,C)",CLUSTER_2,CLUSTER_7
cosval,numpy.cos(rotation_angle),CLUSTER_2,CLUSTER_7
sinval,numpy.sin(rotation_angle),CLUSTER_2,CLUSTER_7
train_points_r,numpy.load('data/train_features.npy'),CLUSTER_2,CLUSTER_7
train_labels_r,numpy.load('data/train_labels.npy'),CLUSTER_2,CLUSTER_7
test_points_r,numpy.load('data/test_features.npy'),CLUSTER_2,CLUSTER_7
test_labels_r,numpy.load('data/test_labels.npy'),CLUSTER_2,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_7
df,"pandas.DataFrame({""Publisher"":publishers,""Values"":values})",CLUSTER_4,CLUSTER_11
writer,"pandas.ExcelWriter(data_file,engine='xlsxwriter')",CLUSTER_4,CLUSTER_11
hybrid,pandas.Series([0]*len(graph_df),CLUSTER_4,CLUSTER_11
full_oa,"pandas.Series(graph_df[col,publisher,""FullOA""])",CLUSTER_4,CLUSTER_11
full_oa,pandas.Series([0]*len(graph_df),CLUSTER_4,CLUSTER_11
hybrid,pandas.Series([0]*len(graph_df),CLUSTER_4,CLUSTER_11
full_oa,pandas.Series([0]*len(graph_df),CLUSTER_4,CLUSTER_11
df,"pandas.concat([topdf,otherdf,totaldf])",CLUSTER_4,CLUSTER_11
master_df,pandas.concat(df_list),CLUSTER_4,CLUSTER_11
temp_df,"pandas.read_excel(os.path.join(folder,f)",CLUSTER_4,CLUSTER_11
bins,"numpy.arange(start,x.max()",CLUSTER_4,CLUSTER_11
mean,numpy.mean(a),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,8)",CLUSTER_4,CLUSTER_11
"fig,ax1","matplotlib.pyplot.subplots(figsize=(9,6.8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,6.8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6.8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,6.8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,6.8)",CLUSTER_4,CLUSTER_11
se,scipy.stats.sem(a),CLUSTER_4,CLUSTER_11
x,"numpy.linspace(-2.0,2.0,N)",CLUSTER_12,CLUSTER_10
y,"numpy.linspace(-1.0,1.0,N)",CLUSTER_12,CLUSTER_10
"X,Y","numpy.meshgrid(x,y)",CLUSTER_12,CLUSTER_10
covid19_pivoted_df_2,pandas.DataFrame(covid19_pivoted_df.to_records(),CLUSTER_11,CLUSTER_12
covid19_df,pandas.read_csv(covid19_path),CLUSTER_11,CLUSTER_12
self.x,numpy.arange(size),CLUSTER_1,CLUSTER_10
self.y,numpy.arange(size),CLUSTER_1,CLUSTER_10
self.cells,"numpy.zeros((size,size)",CLUSTER_1,CLUSTER_10
newcells,"numpy.zeros((self.size,self.size)",CLUSTER_1,CLUSTER_10
self.initTree,numpy.count_nonzero(self.cells==1),CLUSTER_1,CLUSTER_10
self.initEmpty,numpy.count_nonzero(self.cells==0),CLUSTER_1,CLUSTER_10
self.burnt,numpy.count_nonzero(newcells==3),CLUSTER_1,CLUSTER_10
self.plt,"matplotlib.pyplot.imshow(self.cells,interpolation='nearest',
origin='bottom',
vmin=Forest.states[""EMPTY""],
vmax=Forest.states[""BURNT""],
cmap=ff1)",CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
db,pandas.read_csv('data/tokyo.csv'),CLUSTER_12,CLUSTER_3
ri,numpy.arange(len(db),CLUSTER_12,CLUSTER_3
t1,time.time(),CLUSTER_1,CLUSTER_10
t2,time.time(),CLUSTER_1,CLUSTER_10
t3,time.time(),CLUSTER_1,CLUSTER_10
gamma,"numpy.asarray([1.0,2.0,3.0])",CLUSTER_1,CLUSTER_10
beta,"numpy.asarray([11.0,12.0,13.0])",CLUSTER_1,CLUSTER_10
gamma,"numpy.asarray([3.0,3.0,3.0])",CLUSTER_1,CLUSTER_10
beta,"numpy.asarray([5.0,5.0,5.0])",CLUSTER_1,CLUSTER_10
beta,"numpy.zeros((D3,)",CLUSTER_1,CLUSTER_10
beta,numpy.zeros(D3),CLUSTER_1,CLUSTER_10
dx,"numpy.zeros((N,D)",CLUSTER_1,CLUSTER_10
dd,"numpy.zeros(3,4)",CLUSTER_1,CLUSTER_10
self.params[bias_name],numpy.zeros(hidden_dims[0]),CLUSTER_1,CLUSTER_10
self.params[beta_name],numpy.zeros(hidden_dims[0]),CLUSTER_1,CLUSTER_10
self.params[beta_name],numpy.zeros(hidden_dims[0]),CLUSTER_1,CLUSTER_10
self.params[bias_name],numpy.zeros(hidden_dims[k]),CLUSTER_1,CLUSTER_10
self.params[beta_name],numpy.zeros(hidden_dims[k]),CLUSTER_1,CLUSTER_10
self.params[beta_name],numpy.zeros(hidden_dims[k]),CLUSTER_1,CLUSTER_10
self.params[bias_name],numpy.zeros(num_classes),CLUSTER_1,CLUSTER_10
beta,numpy.zeros(D3),CLUSTER_1,CLUSTER_10
cache,numpy.empty(len(cache_list),CLUSTER_1,CLUSTER_10
cache,numpy.empty(len(cache_list),CLUSTER_1,CLUSTER_10
cache,numpy.empty(len(cache_list),CLUSTER_1,CLUSTER_10
gamma,"numpy.ones((D3,)",CLUSTER_1,CLUSTER_10
gamma,numpy.ones(D3),CLUSTER_1,CLUSTER_10
self.params[gamma_name],numpy.ones(hidden_dims[0]),CLUSTER_1,CLUSTER_10
self.params[gamma_name],numpy.ones(hidden_dims[0]),CLUSTER_1,CLUSTER_10
self.params[gamma_name],numpy.ones(hidden_dims[k]),CLUSTER_1,CLUSTER_10
self.params[gamma_name],numpy.ones(hidden_dims[k]),CLUSTER_1,CLUSTER_10
gamma,numpy.ones(D3),CLUSTER_1,CLUSTER_10
sample_mean,"numpy.mean(x,axis=0)",CLUSTER_1,CLUSTER_10
sample_mean,"numpy.mean(x,axis=0)",CLUSTER_1,CLUSTER_10
sample_mean,"numpy.mean(x,axis=0)",CLUSTER_1,CLUSTER_10
input_temp,"numpy.reshape(X,(X.shape[0],-1)",CLUSTER_1,CLUSTER_10
sample_std,"numpy.std(x,axis=0)",CLUSTER_1,CLUSTER_10
sample_std,"numpy.std(x,axis=0)",CLUSTER_1,CLUSTER_10
sample_std,"numpy.std(x,axis=0)",CLUSTER_1,CLUSTER_10
dbeta,"numpy.sum(dout,axis=0)",CLUSTER_1,CLUSTER_10
dgamma,"numpy.sum(dout*x_hat,axis=0)",CLUSTER_1,CLUSTER_10
dbeta,"numpy.sum(dout,axis=0)",CLUSTER_1,CLUSTER_10
dgamma,"numpy.sum(dout*x_hat,axis=0)",CLUSTER_1,CLUSTER_10
di_var,"numpy.sum(dx_hat*x_mu,axis=0)",CLUSTER_1,CLUSTER_10
dbeta,"numpy.sum(dout,axis=0)",CLUSTER_1,CLUSTER_10
dgamma,"numpy.sum(dout*x_hat,axis=0)",CLUSTER_1,CLUSTER_10
di_var,"numpy.sum(dx_hat*x_mu,axis=0)",CLUSTER_1,CLUSTER_10
reg_loss,numpy.sum(W1*W1),CLUSTER_1,CLUSTER_10
reg_loss+,numpy.sum(W_temp*W_temp),CLUSTER_1,CLUSTER_10
reg_loss+,numpy.sum(W_temp*W_temp),CLUSTER_1,CLUSTER_10
num,"numpy.sum(exp_scores,axis=1)",CLUSTER_1,CLUSTER_10
dbeta,"numpy.sum(dout,axis=0)",CLUSTER_1,CLUSTER_10
dgamma,"numpy.sum(dout*x_hat,axis=0)",CLUSTER_1,CLUSTER_10
di_var,"numpy.sum(dx_hat*x_mu,axis=0)",CLUSTER_1,CLUSTER_10
exp_scores,numpy.exp(scores),CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
dx_hat,"numpy.multiply(dout,gamma)",CLUSTER_1,CLUSTER_10
dx_hat,"numpy.multiply(dout,gamma)",CLUSTER_1,CLUSTER_10
dx_mu_1,"numpy.multiply(dx_hat,i_var)",CLUSTER_1,CLUSTER_10
dx_hat,"numpy.multiply(dout,gamma)",CLUSTER_1,CLUSTER_10
dx_mu_1,"numpy.multiply(dx_hat,i_var)",CLUSTER_1,CLUSTER_10
dx_hat,"numpy.multiply(dout,gamma)",CLUSTER_1,CLUSTER_10
dx_mu_1,"numpy.multiply(dx_hat,i_var)",CLUSTER_1,CLUSTER_10
i_var,numpy.reciprocal(sqrt_var),CLUSTER_1,CLUSTER_10
i_var,numpy.reciprocal(sqrt_var),CLUSTER_1,CLUSTER_10
den,numpy.reciprocal(num),CLUSTER_1,CLUSTER_10
i_var,numpy.reciprocal(sqrt_var),CLUSTER_1,CLUSTER_10
R,numpy.sqrt(np.reciprocal((1.0/N),CLUSTER_1,CLUSTER_10
sqrt_var,numpy.sqrt(var+eps),CLUSTER_1,CLUSTER_10
sqrt_var,numpy.sqrt(var+eps),CLUSTER_1,CLUSTER_10
sqrt_var,numpy.sqrt(var+eps),CLUSTER_1,CLUSTER_10
weight_scales,"numpy.logspace(-4,-1,num=15)",CLUSTER_1,CLUSTER_10
cache['BN_cache'+'1'],numpy.copy(cache_BN),CLUSTER_1,CLUSTER_10
cache['BN_cache'+'1'],numpy.copy(cache_BN),CLUSTER_1,CLUSTER_10
h_relu,numpy.copy(h_b),CLUSTER_1,CLUSTER_10
cache['Input'+'1'],numpy.copy(input_temp),CLUSTER_1,CLUSTER_10
cache['Hidden'+'1'],numpy.copy(h_b),CLUSTER_1,CLUSTER_10
input_temp,numpy.copy(h_relu),CLUSTER_1,CLUSTER_10
cache['BN_cache'+str(k+1)],numpy.copy(cache_BN),CLUSTER_1,CLUSTER_10
cache['BN_cache'+str(k+1)],numpy.copy(cache_BN),CLUSTER_1,CLUSTER_10
h_relu,numpy.copy(h_b),CLUSTER_1,CLUSTER_10
cache['Input'+str(k+1)],numpy.copy(input_temp),CLUSTER_1,CLUSTER_10
cache['Hidden'+str(k+1)],numpy.copy(h_b),CLUSTER_1,CLUSTER_10
input_temp,numpy.copy(h_relu),CLUSTER_1,CLUSTER_10
cache['Input'+str(self.num_layers)],numpy.copy(input_temp),CLUSTER_1,CLUSTER_10
dy,numpy.copy(exp_scores),CLUSTER_1,CLUSTER_10
grads['W'+str(self.num_layers)],numpy.copy(np.true_divide(cache['Input'+str(self.num_layers),CLUSTER_1,CLUSTER_10
grads['b'+str(self.num_layers)],"numpy.copy(np.true_divide(np.sum(dy,axis=0)",CLUSTER_1,CLUSTER_10
grads['gamma'+str(k+1)],"numpy.copy(np.true_divide(dgamma,num_train)",CLUSTER_1,CLUSTER_10
grads['beta'+str(k+1)],"numpy.copy(np.true_divide(dbeta,num_train)",CLUSTER_1,CLUSTER_10
grads['gamma'+str(k+1)],"numpy.copy(np.true_divide(dgamma,num_train)",CLUSTER_1,CLUSTER_10
grads['beta'+str(k+1)],"numpy.copy(np.true_divide(dbeta,num_train)",CLUSTER_1,CLUSTER_10
grads['W'+str(k+1)],"numpy.copy(np.true_divide(dw,num_train)",CLUSTER_1,CLUSTER_10
grads['b'+str(k+1)],"numpy.copy(np.true_divide(db,num_train)",CLUSTER_1,CLUSTER_10
grads['gamma'+str(1)],"numpy.copy(np.true_divide(dgamma,num_train)",CLUSTER_1,CLUSTER_10
grads['beta'+str(1)],"numpy.copy(np.true_divide(dbeta,num_train)",CLUSTER_1,CLUSTER_10
grads['gamma'+str(1)],"numpy.copy(np.true_divide(dgamma,num_train)",CLUSTER_1,CLUSTER_10
grads['beta'+str(1)],"numpy.copy(np.true_divide(dbeta,num_train)",CLUSTER_1,CLUSTER_10
grads['W'+str(1)],"numpy.copy(np.true_divide(dw,num_train)",CLUSTER_1,CLUSTER_10
grads['b'+str(1)],"numpy.copy(np.true_divide(db,num_train)",CLUSTER_1,CLUSTER_10
bold_ho_pPHG_r,"numpy.array(bold_ho_r[:,roi_id])",CLUSTER_4,CLUSTER_8
bold_ho_SPL_r,"numpy.array(bold_ho_r[:,roi_id])",CLUSTER_4,CLUSTER_8
bold_ho_SPL_l,"numpy.array(bold_ho_l[:,roi_id])",CLUSTER_4,CLUSTER_8
all_corr,"numpy.zeros((num_voxels,1)",CLUSTER_4,CLUSTER_8
seed_corr,"numpy.zeros((num_voxels,1)",CLUSTER_4,CLUSTER_8
seed_corr_fishZ,numpy.arctanh(seed_corr),CLUSTER_4,CLUSTER_8
"all_corr[v,0]",numpy.corrcoef(bold_lPPA_r.flatten(),CLUSTER_4,CLUSTER_8
"seed_corr[v,0]",numpy.corrcoef(seedBold.flatten(),CLUSTER_4,CLUSTER_8
labels,numpy.unique(atlas_data),CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(11,10)",CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(11,10)",CLUSTER_4,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(2,2,figsize=(16,7)",CLUSTER_4,CLUSTER_8
atlas_pd,pandas.DataFrame(atlas),CLUSTER_4,CLUSTER_8
start_time,time.time(),CLUSTER_4,CLUSTER_8
end_time,time.time(),CLUSTER_4,CLUSTER_8
fig1,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
x,"numpy.arange(0,2*np.pi,0.01)",CLUSTER_3,CLUSTER_10
y,numpy.sin(x),CLUSTER_3,CLUSTER_10
x,"numpy.linspace(0,10,10000)",CLUSTER_3,CLUSTER_10
text.set(text,time.ctime(),CLUSTER_3,CLUSTER_10
data,"pandas.read_csv(""data/weight-height.csv"")",CLUSTER_1,CLUSTER_3
df,pandas.read_csv(input_path),CLUSTER_8,CLUSTER_3
train_data,pandas.read_csv('./training.csv'),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(target,sep="""")",CLUSTER_8,CLUSTER_11
df,"pandas.read_csv(target,sep="""")",CLUSTER_8,CLUSTER_11
tables,pandas.read_html(url),CLUSTER_9,CLUSTER_2
travel_df,pandas.read_excel(file_name),CLUSTER_8,CLUSTER_4
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_11,CLUSTER_3
predictions_ARIMA_diff,"pandas.Series(results_ARIMA.fittedvalues,copy=True)",CLUSTER_11,CLUSTER_3
predictions_ARIMA_log,"pandas.Series(ts_log.ix[0],index=ts_log.index)",CLUSTER_11,CLUSTER_3
data,pandas.read_csv('AirPassengers.csv'),CLUSTER_11,CLUSTER_3
data['Date'],"pandas.to_datetime(data['Month'],format='%Y-%m')",CLUSTER_11,CLUSTER_3
predictions_ARIMA,numpy.exp(predictions_ARIMA_log),CLUSTER_11,CLUSTER_3
ts_log,numpy.log(ts),CLUSTER_11,CLUSTER_3
X,"numpy.zeros((n,160,320,3)",CLUSTER_4,CLUSTER_0
X,"numpy.concatenate([X,X[:,::-1]],axis=0)",CLUSTER_4,CLUSTER_0
y,"numpy.concatenate([y,-y],axis=0)",CLUSTER_4,CLUSTER_0
df,pandas.read_csv('../record2/driving_log.csv'),CLUSTER_4,CLUSTER_0
a0,"numpy.zeros((m,n_a)",CLUSTER_12,CLUSTER_6
c0,"numpy.zeros((m,n_a)",CLUSTER_12,CLUSTER_6
x_initializer,"numpy.zeros((1,1,78)",CLUSTER_12,CLUSTER_6
a_initializer,"numpy.zeros((1,n_a)",CLUSTER_12,CLUSTER_6
c_initializer,"numpy.zeros((1,n_a)",CLUSTER_12,CLUSTER_6
indices,"numpy.argmax(pred,axis=2)",CLUSTER_12,CLUSTER_6
frame,"pandas.DataFrame({'col1':['A','B',np.NaN,'C','D'],
'col2':['F',np.NaN,'G','H','I']})",CLUSTER_8,CLUSTER_3
df1,"pandas.DataFrame({'key':['A','B','C','D'],
'value':np.random.randn(4)",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame({'key':['B','D','D','E'],
'value':np.random.randn(4)",CLUSTER_8,CLUSTER_3
city1,"pandas.DataFrame({'city':['Chicago','SanFrancisco','NewYorkCity'],
'rank':range(1,4)",CLUSTER_8,CLUSTER_3
city2,"pandas.DataFrame({'city':['Chicago','Boston','LosAngeles'],
'rank':[1,4,5]})",CLUSTER_8,CLUSTER_3
tips,pandas.read_csv(r'../data/tips.csv'),CLUSTER_8,CLUSTER_3
result,"pandas.read_sql(query,conn)",CLUSTER_8,CLUSTER_3
data,"pandas.read_csv(join(DATA,'data_norway_sixcol.csv')",CLUSTER_4,CLUSTER_11
app_train,pandas.get_dummies(app_train),CLUSTER_4,CLUSTER_5
app_test,pandas.get_dummies(app_test),CLUSTER_4,CLUSTER_5
app_train,pandas.read_csv(f_app_train),CLUSTER_4,CLUSTER_5
app_test,pandas.read_csv(f_app_test),CLUSTER_4,CLUSTER_5
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_5
lda_model,"sklearn.decomposition.LatentDirichletAllocation(n_components=50,learning_method='online',random_state=777,max_iter=1)",CLUSTER_10,CLUSTER_4
x_boolean,"scipy.sparse.csr_matrix((data,(row,col)",CLUSTER_10,CLUSTER_4
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(figsize=figsize),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(figsize=figsize),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(figsize=figsize),CLUSTER_4,CLUSTER_11
x_data,"numpy.linspace(0,10,10)",CLUSTER_2,CLUSTER_7
y_label,"numpy.linspace(0,10,10)",CLUSTER_2,CLUSTER_7
x_test,"numpy.linspace(-1,11,10)",CLUSTER_2,CLUSTER_7
weights,"numpy.array([0.5,0.5])",CLUSTER_1,CLUSTER_3
weights,"numpy.array([0.5,0.5])",CLUSTER_1,CLUSTER_3
pfolio_var,"numpy.dot(weights.T,numpy.dot(sec_returns.cov()",CLUSTER_1,CLUSTER_3
sec_returns,numpy.log(sec_data/sec_data.shift(1),CLUSTER_1,CLUSTER_3
sec_data,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
start,time.time(),CLUSTER_10,CLUSTER_12
end,time.time(),CLUSTER_10,CLUSTER_12
X_train_cvec,pandas.DataFrame(cvec.fit_transform(X_train['text']),CLUSTER_0,CLUSTER_11
X_test_cvec,pandas.DataFrame(cvec.transform(X_test['text']),CLUSTER_0,CLUSTER_11
X_train_tvec,pandas.DataFrame(tvec.fit_transform(X_train['text']),CLUSTER_0,CLUSTER_11
X_test_tvec,pandas.DataFrame(tvec.transform(X_test['text']),CLUSTER_0,CLUSTER_11
X_train_cvec,pandas.DataFrame(cvec.fit_transform(X_train['text']),CLUSTER_0,CLUSTER_11
X_test_cvec,pandas.DataFrame(cvec.transform(X_test['text']),CLUSTER_0,CLUSTER_11
X_train_tvec,pandas.DataFrame(tvec.fit_transform(X_train['text']),CLUSTER_0,CLUSTER_11
X_test_tvec,pandas.DataFrame(tvec.transform(X_test['text']),CLUSTER_0,CLUSTER_11
cm_df,"pandas.DataFrame(cm,columns=['predictneg','predictpos'],index=['actualneg','actualpos'])",CLUSTER_0,CLUSTER_11
X_train_cvec,pandas.DataFrame(cvec.fit_transform(X_train['text']),CLUSTER_0,CLUSTER_11
X_test_cvec,pandas.DataFrame(cvec.transform(X_test['text']),CLUSTER_0,CLUSTER_11
word_freq,"pandas.DataFrame({'word':features,'freq':list(visualizer.count(docs)",CLUSTER_0,CLUSTER_11
word_freq,"pandas.DataFrame({'word':features,'freq':list(visualizer.count(docs)",CLUSTER_0,CLUSTER_11
X_test['y_test'],"pandas.Series(y_test,index=X_test.index)",CLUSTER_0,CLUSTER_11
X_test['y_pred'],"pandas.Series(y_pred,index=X_test.index)",CLUSTER_0,CLUSTER_11
X_test['word_count'],"pandas.Series([len(re.findall(r'\w+',x)",CLUSTER_0,CLUSTER_11
df,"pandas.concat([df_eat,df_science])",CLUSTER_0,CLUSTER_11
df_eat,pandas.read_pickle('./data/eatcheap.pkl'),CLUSTER_0,CLUSTER_11
df_science,pandas.read_pickle('./data/science.pkl'),CLUSTER_0,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_11
svc,"sklearn.svm.SVC(kernel='rbf',C=40,gamma=.01)",CLUSTER_0,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42,stratify=y)",CLUSTER_0,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42,stratify=y)",CLUSTER_0,CLUSTER_11
gs,"sklearn.model_selection.GridSearchCV(pipe,param_grid=pipe_params,cv=3,return_train_score=True)",CLUSTER_0,CLUSTER_11
gs,"sklearn.model_selection.GridSearchCV(pipe2,param_grid=pipe_params,cv=3,return_train_score=True)",CLUSTER_0,CLUSTER_11
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_0,CLUSTER_11
lr,"sklearn.linear_model.LogisticRegression(solver='lbfgs',C=3)",CLUSTER_0,CLUSTER_11
lr,"sklearn.linear_model.LogisticRegression(solver='lbfgs',C=4)",CLUSTER_0,CLUSTER_11
nb,sklearn.naive_bayes.MultinomialNB(alpha=1),CLUSTER_0,CLUSTER_11
nb,sklearn.naive_bayes.MultinomialNB(alpha=.3),CLUSTER_0,CLUSTER_11
nb,sklearn.naive_bayes.BernoulliNB(alpha=0.03),CLUSTER_0,CLUSTER_11
nb,sklearn.naive_bayes.BernoulliNB(alpha=.03),CLUSTER_0,CLUSTER_11
pipe,"sklearn.pipeline.Pipeline([
('cvec',CountVectorizer()",CLUSTER_0,CLUSTER_11
pipe2,"sklearn.pipeline.Pipeline([
('tvec',TfidfVectorizer()",CLUSTER_0,CLUSTER_11
vif,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
a,pandas.DataFrame(data[cols].values),CLUSTER_7,CLUSTER_8
a,pandas.DataFrame(cat_cols_enc_y[cols].values),CLUSTER_7,CLUSTER_8
df_color,"pandas.concat([data['NetNewMoneyDetails-Color'],data['NetNewMoneyDetails-Identifier']],axis=1)",CLUSTER_7,CLUSTER_8
cat_cols_enc_y,"pandas.concat([cat_cols_enc,data['NetNewMoneyDetails-YTDNNM\n(March-2018)",CLUSTER_7,CLUSTER_8
df_new,"pandas.concat([num_cols,cat_cols_enc],axis=1)",CLUSTER_7,CLUSTER_8
df_color,"pandas.get_dummies(df_color,drop_first=True)",CLUSTER_7,CLUSTER_8
cat_cols_enc,"pandas.get_dummies(cat_cols,drop_first=True)",CLUSTER_7,CLUSTER_8
data,pandas.read_excel('FAAnalysis_Rocket.xlsx'),CLUSTER_7,CLUSTER_8
data['ClientAcquisitionDetails-YTD$1m+QNRs(March-2018)'],pandas.to_numeric(data['ClientAcquisitionDetails-YTD$1m+QNRs(March-2018),CLUSTER_7,CLUSTER_8
data['Wealth/FinancialPlanning-H/UHNWMHHPlanning%'],"pandas.to_numeric(data['Wealth/FinancialPlanning-H/UHNWMHHPlanning%'],errors='coerce')",CLUSTER_7,CLUSTER_8
data['Wealth/FinancialPlanning-TotalMHHs'],"pandas.to_numeric(data['Wealth/FinancialPlanning-TotalMHHs'],errors='coerce')",CLUSTER_7,CLUSTER_8
data['DigitalTools-%ofMHHsonOLS'],"pandas.to_numeric(data['DigitalTools-%ofMHHsonOLS'],errors='coerce')",CLUSTER_7,CLUSTER_8
data['ClientRetention-%ofAttritedMHHs(2017-PostSplit)'],pandas.to_numeric(data['ClientRetention-%ofAttritedMHHs(2017-PostSplit),CLUSTER_7,CLUSTER_8
data['NetNewMoneyDetails-FAComp.NNM2014'],"pandas.to_numeric(data['NetNewMoneyDetails-FAComp.NNM2014'],errors='coerce')",CLUSTER_7,CLUSTER_8
data['NetNewMoneyDetails-FAComp.NNM2015'],"pandas.to_numeric(data['NetNewMoneyDetails-FAComp.NNM2015'],errors='coerce')",CLUSTER_7,CLUSTER_8
data['NetNewMoneyDetails-FAComp.NNM2016'],"pandas.to_numeric(data['NetNewMoneyDetails-FAComp.NNM2016'],errors='coerce')",CLUSTER_7,CLUSTER_8
data['NetNewMoneyDetails-YTDNNM\n(March-2018)'],pandas.to_numeric(data['NetNewMoneyDetails-YTDNNM\n(March-2018),CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(14,6)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_7,CLUSTER_8
hm,"seaborn.heatmap(cm,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10},yticklabels=cols.values,xticklabels=cols.values)",CLUSTER_7,CLUSTER_8
hm,"seaborn.heatmap(cm,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10},yticklabels=cols.values,xticklabels=cols.values)",CLUSTER_7,CLUSTER_8
xx,"numpy.arange(0,n,0.01)",CLUSTER_4,CLUSTER_11
ix,"numpy.arange(0,n)",CLUSTER_4,CLUSTER_11
tceGrid,"numpy.zeros((NPeriod,NMes)",CLUSTER_4,CLUSTER_11
cellPeriod,"numpy.zeros((NPeriod,NMes)",CLUSTER_4,CLUSTER_11
cellMes,"numpy.zeros((NPeriod,NMes)",CLUSTER_4,CLUSTER_11
pcGrid,"numpy.zeros((NPeriod,NMes)",CLUSTER_4,CLUSTER_11
fpGrid,"numpy.zeros((NPeriod,NMes)",CLUSTER_4,CLUSTER_11
pcFrac,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
fpFrac,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
fitTheta,numpy.zeros(resultSize[0]),CLUSTER_4,CLUSTER_11
fitGrid,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
fitFrac,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
fitGrid,numpy.zeros([np.shape(tceGrid),CLUSTER_4,CLUSTER_11
fitFracMean,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
stdFrac,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
fitDiffNorm,numpy.zeros(fitDiff.shape),CLUSTER_4,CLUSTER_11
residuals,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
rateGrid,numpy.zeros(np.shape(tceGrid),CLUSTER_4,CLUSTER_11
l,numpy.zeros(np.shape(samples),CLUSTER_4,CLUSTER_11
aicDist,numpy.zeros(np.shape(samples),CLUSTER_4,CLUSTER_11
lbnds,numpy.empty([np.shape(samples),CLUSTER_4,CLUSTER_11
ubnds,numpy.empty([np.shape(samples),CLUSTER_4,CLUSTER_11
spIndex,"numpy.where(np.all([
syntheticTrueFps['Rp']>rpMin,syntheticTrueFps['Rp']<rpMax,\
syntheticTrueFps['period']>periodMin,syntheticTrueFps['period']<periodMax],axis=0)",CLUSTER_4,CLUSTER_11
pointsInCell,"numpy.where(
(spSyntheticTrueFps['period']>cellPeriod[(p,m)",CLUSTER_4,CLUSTER_11
pointsInCell,"numpy.where(
(spSyntheticPcs['period']>cellPeriod[(p,m)",CLUSTER_4,CLUSTER_11
pointsInCell,"numpy.where(
(spSyntheticFps['period']>cellPeriod[(p,m)",CLUSTER_4,CLUSTER_11
mctIndex,"numpy.where(modelComparisonTable[""Model""].isin([model])",CLUSTER_4,CLUSTER_11
nData,numpy.ones(dataArray.shape),CLUSTER_4,CLUSTER_11
meanFit,"numpy.mean(fitGrid,2)",CLUSTER_4,CLUSTER_11
gridShape,numpy.shape(cellX),CLUSTER_4,CLUSTER_11
resultSize,numpy.shape(dataResult),CLUSTER_4,CLUSTER_11
stdFit,"numpy.std(fitGrid,2)",CLUSTER_4,CLUSTER_11
lpl,"numpy.sum(np.log(spec.comb(n,c)",CLUSTER_4,CLUSTER_11
da,numpy.transpose(dataArray),CLUSTER_4,CLUSTER_11
"modelComparisonTable[""AICRelativeProb""].iloc[i]","numpy.exp((minAic-modelComparisonTable[""medianMCMCAIC""].iloc[i])",CLUSTER_4,CLUSTER_11
"modelComparisonTable[""BayesFactor""].iloc[i]",numpy.exp(c2-c1),CLUSTER_4,CLUSTER_11
A,numpy.exp(c2-c1),CLUSTER_4,CLUSTER_11
sA,numpy.exp(c2-c1),CLUSTER_4,CLUSTER_11
i1,"numpy.double(modelComparisonTable[""IntegralPost""].iloc[modelToCompareIndex])",CLUSTER_4,CLUSTER_11
B,"numpy.double(modelComparisonTable[""IntegralPost""].iloc[modelToCompareIndex])",CLUSTER_4,CLUSTER_11
sB,"numpy.double(modelComparisonTable[""IntegralPostErr""].iloc[modelToCompareIndex])",CLUSTER_4,CLUSTER_11
f,"numpy.double(modelComparisonTable[""BayesFactor""].iloc[i])",CLUSTER_4,CLUSTER_11
tcePctiles,numpy.percentile(nTce[(rateFlat>0.9),CLUSTER_4,CLUSTER_11
regularizationOffset,numpy.median(l),CLUSTER_4,CLUSTER_11
cbh,"matplotlib.pyplot.colorbar(im,fraction=0.024*im_ratio,pad=0.02)",CLUSTER_4,CLUSTER_11
cbh,matplotlib.pyplot.colorbar(scf),CLUSTER_4,CLUSTER_11
fig,plt.figure(figsize=matplotlib.pyplot.figaspect(0.3),CLUSTER_4,CLUSTER_11
fig,plt.figure(figsize=matplotlib.pyplot.figaspect(0.3),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(figsize=plt.figaspect(0.3),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(figsize=plt.figaspect(0.3),CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
histVals,matplotlib.pyplot.hist(residualsFlat[(rateFlat>0.9),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_4,CLUSTER_11
modelComparisonTable,"pandas.DataFrame({""Model"":[""rotatedLogisticX0"",""rotatedLogisticX02"",""constant"",
""dualBrokenPowerLaw"",""gaussian"",""rotatedLogisticX0xlogisticY0"",
""rotatedLogisticX0+gaussian"",""rotatedLogisticY"",""rotatedLogisticYXLogisticY"",
""logisticY"",""rotatedLogisticYXFixedLogisticY""],
""medianMCMCAIC"":[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
""minMCMCAIC"":[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
""maxLikelihoodAIC"":[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
""MedianLogPost"":[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
""IntegralPost"":[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
""IntegralPostErr"":[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
""medianMCMCTheta"":[[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],
""maxLikelihoodTheta"":[[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],
""periodRange"":[[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],
""mesRange"":[[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]]},
columns=[""Model"",""BayesFactor"",""BayesFactorError"",""AICRelativeProb"",
""medianMCMCAIC"",""minMCMCAIC"",""maxLikelihoodAIC"",""IntegralPost"",
""IntegralPostErr"",""MedianLogPost"",""medianMCMCTheta"",
""maxLikelihoodTheta"",""periodRange"",""mesRange""])",CLUSTER_4,CLUSTER_11
kic,pandas.read_csv(starlist),CLUSTER_4,CLUSTER_11
modelComparisonTable,pandas.read_pickle(fname),CLUSTER_4,CLUSTER_11
tt,pandas.read_pickle(fname),CLUSTER_4,CLUSTER_11
result,"scipy.optimize.minimize(nll,initialPos,args=(tceData,model)",CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_7
a,numpy.arange(15),CLUSTER_4,CLUSTER_11
x,numpy.arange(9),CLUSTER_4,CLUSTER_11
i,"numpy.arange(10,30,5)",CLUSTER_4,CLUSTER_11
f,"numpy.arange(0,2,0.3)",CLUSTER_4,CLUSTER_11
a,numpy.arange(10),CLUSTER_4,CLUSTER_11
a,numpy.arange(24),CLUSTER_4,CLUSTER_11
x,numpy.arange(12),CLUSTER_4,CLUSTER_11
b,numpy.arange(4),CLUSTER_4,CLUSTER_11
a,numpy.arange(10),CLUSTER_4,CLUSTER_11
a,numpy.arange(12),CLUSTER_4,CLUSTER_11
a,numpy.arange(12),CLUSTER_4,CLUSTER_11
a,numpy.arange(5),CLUSTER_4,CLUSTER_11
a,numpy.arange(5),CLUSTER_4,CLUSTER_11
a,numpy.arange(5),CLUSTER_4,CLUSTER_11
a,numpy.arange(10),CLUSTER_4,CLUSTER_11
x,numpy.arange(9.),CLUSTER_4,CLUSTER_11
a,"numpy.arange(1,10)",CLUSTER_4,CLUSTER_11
x,"numpy.array([[0,1,2,3,4],
[5,6,7,8,9]],dtype=np.int32)",CLUSTER_4,CLUSTER_11
a,"numpy.array([20,30,40,50])",CLUSTER_4,CLUSTER_11
A,"numpy.array([[1,1],
[0,1]])",CLUSTER_4,CLUSTER_11
B,"numpy.array([[2,0],
[3,4]])",CLUSTER_4,CLUSTER_11
i,"numpy.array([1,1,3,8,5])",CLUSTER_4,CLUSTER_11
j,"numpy.array([[3,4],[9,7]])",CLUSTER_4,CLUSTER_11
i,"numpy.array([[0,1],
[1,2]])",CLUSTER_4,CLUSTER_11
j,"numpy.array([[2,1],
[3,3]])",CLUSTER_4,CLUSTER_11
x,"numpy.array([1,2,3,-1,5])",CLUSTER_4,CLUSTER_11
x,"numpy.array([[1,2],
[3,4]])",CLUSTER_4,CLUSTER_11
x,"numpy.array(['a','b','c'],dtype=object)",CLUSTER_4,CLUSTER_11
a,"numpy.array([[[1.,2.],
[3.,4.]],
[[1,3],
[3,5]]
])",CLUSTER_4,CLUSTER_11
a,"numpy.array([[3,1],
[1,2]])",CLUSTER_4,CLUSTER_11
b,"numpy.array([9,8])",CLUSTER_4,CLUSTER_11
a,"numpy.array([[[1,2],
[3,4]],

[[1,2],
[2,1]],

[[1,3],
[3,1]]])",CLUSTER_4,CLUSTER_11
a,"numpy.array([3,4])",CLUSTER_4,CLUSTER_11
z,"numpy.zeros((3,4)",CLUSTER_4,CLUSTER_11
e,"numpy.empty((2,3)",CLUSTER_4,CLUSTER_11
b,"numpy.fromfunction(f,(5,4)",CLUSTER_4,CLUSTER_11
o,"numpy.ones((2,3,4)",CLUSTER_4,CLUSTER_11
a,"numpy.floor(10*np.random.random((3,4)",CLUSTER_4,CLUSTER_11
a,"numpy.floor(10*np.random.random((2,2)",CLUSTER_4,CLUSTER_11
b,"numpy.floor(10*np.random.random((2,2)",CLUSTER_4,CLUSTER_11
xl,numpy.log(x),CLUSTER_4,CLUSTER_11
lgsp,"numpy.logspace(0.02,2,10)",CLUSTER_4,CLUSTER_11
x,"numpy.linspace(0,2*pi,5)",CLUSTER_4,CLUSTER_11
xs,"numpy.linspace(0.02,2,10)",CLUSTER_4,CLUSTER_11
abh,"numpy.hstack((a,b)",CLUSTER_4,CLUSTER_11
abv,"numpy.vstack((a,b)",CLUSTER_4,CLUSTER_11
hab,"numpy.hsplit(abh,2)",CLUSTER_4,CLUSTER_11
vab,"numpy.vsplit(abv,2)",CLUSTER_4,CLUSTER_11
x,"numpy.linalg.solve(a,b)",CLUSTER_4,CLUSTER_11
y,"numpy.ma.array([1,2,3],mask=[0,1,0])",CLUSTER_4,CLUSTER_11
mx,"numpy.ma.array(x,mask=mask)",CLUSTER_4,CLUSTER_11
y,"numpy.ma.array([[1,2,3],[4,5,6],[7,8,9]])",CLUSTER_4,CLUSTER_11
x,"numpy.ma.array([1,2,3],mask=[0,0,1])",CLUSTER_4,CLUSTER_11
x,"numpy.ma.array([1,2,3],mask=[0,0,1],hard_mask=True)",CLUSTER_4,CLUSTER_11
x,"numpy.ma.array([1,2,3],mask=[0,0,1])",CLUSTER_4,CLUSTER_11
x,"numpy.ma.array([1,2,3,4,5],mask=[0,1,0,0,1])",CLUSTER_4,CLUSTER_11
x,"numpy.ma.array([-1,1,0,2,3],mask=[0,0,0,0,1])",CLUSTER_4,CLUSTER_11
x,"numpy.ma.log([-1,0,1,2])",CLUSTER_4,CLUSTER_11
mx,"numpy.ma.masked_array(x,mask=[0,0,0,1,0])",CLUSTER_4,CLUSTER_11
z,"numpy.ma.masked_equal([1,2,3],2)",CLUSTER_4,CLUSTER_11
w,"numpy.ma.masked_less(np.arange(1,20)",CLUSTER_4,CLUSTER_11
y,"numpy.ma.masked_where(a**2<30,a)",CLUSTER_4,CLUSTER_11
"w,v","numpy.linalg.eig(np.diag((1,2,3)",CLUSTER_4,CLUSTER_11
"w,v","numpy.linalg.eig([[1,0,0],
[1,0,0],
[0,0,0]])",CLUSTER_4,CLUSTER_11
ainv,numpy.linalg.inv(a),CLUSTER_4,CLUSTER_11
"_,bins,_","matplotlib.pyplot.hist(s,30,normed=True)",CLUSTER_4,CLUSTER_11
_,matplotlib.pyplot.show(),CLUSTER_4,CLUSTER_11
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_4,CLUSTER_11
winning_df,pandas.DataFrame(winning_dict),CLUSTER_11,CLUSTER_3
new_date,"datetime.datetime.strptime(date,'%A,%B%d,%Y')",CLUSTER_11,CLUSTER_3
data,"pandas.read_csv(""Missing_Values_Handling/final_train.csv"")",CLUSTER_5,CLUSTER_1
d_test,"pandas.read_csv(""Missing_Values_Handling/final_test.csv"")",CLUSTER_5,CLUSTER_1
"xTrain,xValid,yTrain,yValid","sklearn.model_selection.train_test_split(X,Y,train_size=0.999,random_state=4)",CLUSTER_5,CLUSTER_1
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=12,max_features=7,max_depth=25,min_samples_split=3,min_samples_leaf=2,random_state=0)",CLUSTER_5,CLUSTER_1
pred,"numpy.array([1,2,3,4,5])",CLUSTER_6,CLUSTER_6
targ,"numpy.array([1,1,3,3,5])",CLUSTER_6,CLUSTER_6
x1,"numpy.ascontiguousarray(pred[:,0:2])",CLUSTER_6,CLUSTER_6
x2,"numpy.ascontiguousarray(targ[:,0:2])",CLUSTER_6,CLUSTER_6
df['children'],"numpy.array(df['children'],dtype='int32')",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('hotel_bookings.csv'),CLUSTER_7,CLUSTER_5
le1,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le2,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le3,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le4,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le5,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le6,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le7,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le8,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le11,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le22,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le44,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le55,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
df['previous_cancellations'],sklearn.preprocessing.minmax_scale(df['previous_cancellations']),CLUSTER_7,CLUSTER_5
df['days_in_waiting_list'],sklearn.preprocessing.minmax_scale(df['days_in_waiting_list']),CLUSTER_7,CLUSTER_5
df['adr'],sklearn.preprocessing.minmax_scale(df['days_in_waiting_list']),CLUSTER_7,CLUSTER_5
sc1,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df.drop(['is_canceled'],axis=1)",CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
actor_full_df,"pandas.merge(actor_df,actor_movies_df,left_index=True,right_index=True)",CLUSTER_1,CLUSTER_9
"sample_1,sample_2",numpy.array(sample_1),CLUSTER_1,CLUSTER_9
"sample_1,sample_2",numpy.array(sample_1),CLUSTER_1,CLUSTER_9
n_wins,numpy.sum(x>sample_2),CLUSTER_1,CLUSTER_9
n_wins,numpy.sum(x>sample_2),CLUSTER_1,CLUSTER_9
res,"scipy.stats.mannwhitneyu(not_tested_for_genre_df['popularity'],tested_for_genre_df['popularity'],alternative=""greater"")",CLUSTER_1,CLUSTER_9
res,"scipy.stats.mannwhitneyu(not_tested_for_genre_df['revenue'],tested_for_genre_df['revenue'],alternative=""greater"")",CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,figsize=(16,3)",CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,figsize=(16,3)",CLUSTER_1,CLUSTER_9
df,"pandas.concat([df,delta],axis=1)",CLUSTER_8,CLUSTER_1
ward,pandas.get_dummies(df['区']),CLUSTER_8,CLUSTER_1
df,"pandas.merge(df,ward,left_index=True,right_index=True)",CLUSTER_8,CLUSTER_1
df,"pandas.read_csv(""suumo_treated.csv"",sep='\t',encoding='utf-16',index_col=0)",CLUSTER_8,CLUSTER_1
df,"pandas.read_csv(""suumo_treated.csv"",sep='\t',encoding='utf-16',index_col=0)",CLUSTER_8,CLUSTER_1
neighbors,"numpy.arange(1,201,2)",CLUSTER_7,CLUSTER_5
target,numpy.hstack((np.zeros(len(class0),CLUSTER_7,CLUSTER_5
data,"numpy.vstack((class0,class1)",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=200),CLUSTER_7,CLUSTER_5
knn_uniform,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=k,weights='uniform')",CLUSTER_7,CLUSTER_5
knn_distance,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=k,weights='distance')",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""dataset_31_credit-g.csv"")",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=42)",CLUSTER_7,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=42)",CLUSTER_7,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=42)",CLUSTER_7,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=5,random_state=42,shuffle=True)",CLUSTER_7,CLUSTER_5
clf,"sklearn.model_selection.GridSearchCV(knn,params,cv=kf,scoring='accuracy')",CLUSTER_7,CLUSTER_5
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
X,"pandas.get_dummies(X,prefix=[columnforcolumninX.columnsifX[column].dtype==object],
drop_first=True)",CLUSTER_5,CLUSTER_5
crx_data,"pandas.read_csv('crx.data.txt',sep=',',header=None,na_values='?')",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.3,random_state=10)",CLUSTER_5,CLUSTER_5
"X_train1,X_train2,y_train1,y_train2","sklearn.model_selection.train_test_split(X_train,y_train,test_size=.5)",CLUSTER_5,CLUSTER_5
scaler_train,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
log_l2_clf,"sklearn.linear_model.SGDClassifier(loss='log',penalty='l2',alpha=0.035,max_iter=10*5,
n_jobs=4,random_state=0,learning_rate='optimal')",CLUSTER_5,CLUSTER_5
base_classifier,"sklearn.linear_model.SGDClassifier(loss='log',penalty='none',max_iter=10**5)",CLUSTER_5,CLUSTER_5
clf1,"sklearn.linear_model.SGDClassifier(loss='log',penalty='l2',alpha=0.035,max_iter=10000,random_state=100,n_jobs=4)",CLUSTER_5,CLUSTER_5
pasting,"sklearn.ensemble.BaggingClassifier(base_classifier,max_samples=.7,max_features=1.,bootstrap=False,
n_estimators=21,n_jobs=4,random_state=0)",CLUSTER_5,CLUSTER_5
bagging,"sklearn.ensemble.BaggingClassifier(base_classifier,max_samples=.7,max_features=1.,bootstrap=True,
n_estimators=21,n_jobs=4,random_state=0)",CLUSTER_5,CLUSTER_5
random_subspaces,"sklearn.ensemble.BaggingClassifier(base_classifier,max_samples=1.,max_features=.5,bootstrap=False,
n_estimators=21,n_jobs=4,random_state=0)",CLUSTER_5,CLUSTER_5
random_patches,"sklearn.ensemble.BaggingClassifier(base_classifier,max_samples=.7,max_features=.7,bootstrap=True,
n_estimators=21,n_jobs=4,random_state=0)",CLUSTER_5,CLUSTER_5
bagging_warm,"sklearn.ensemble.BaggingClassifier(base_classifier,max_samples=.7,max_features=1.,bootstrap=True,
n_estimators=11,n_jobs=4,random_state=0,warm_start=True)",CLUSTER_5,CLUSTER_5
random_forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=1000,criterion='gini',max_features='sqrt',
n_jobs=4,random_state=0,bootstrap=True,max_depth=10,
min_samples_split=30)",CLUSTER_5,CLUSTER_5
extra_trees,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=1000,criterion='gini',max_features='sqrt',
n_jobs=4,random_state=0,class_weight='balanced',bootstrap=True)",CLUSTER_5,CLUSTER_5
ada_boost,sklearn.ensemble.AdaBoostClassifier(DecisionTreeClassifier(max_depth=1),CLUSTER_5,CLUSTER_5
clf5,"sklearn.tree.DecisionTreeClassifier(criterion='gini',max_depth=7,max_features='sqrt',min_samples_split=23,
splitter='random',random_state=0)",CLUSTER_5,CLUSTER_5
gradient_boosting,"sklearn.ensemble.GradientBoostingClassifier(loss='deviance',learning_rate=.01,n_estimators=1000,
max_depth=1,subsample=.6,max_features=None,random_state=0)",CLUSTER_5,CLUSTER_5
voting,"sklearn.ensemble.VotingClassifier(estimators=[('log',clf1)",CLUSTER_5,CLUSTER_5
clf4,"sklearn.svm.SVC(C=0.87,kernel='sigmoid',probability=True,random_state=0)",CLUSTER_5,CLUSTER_5
clf2,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=48,weights='distance',n_jobs=4)",CLUSTER_5,CLUSTER_5
clf3,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_5
tick_marks,numpy.arange(len(classes),CLUSTER_4,CLUSTER_9
im,numpy.array(Image.open(TRAIN_PATH+sample['filename']),CLUSTER_4,CLUSTER_9
im,numpy.array(Image.open(TRAIN_PATH+sample['filename']),CLUSTER_4,CLUSTER_9
X,numpy.array(all_cuts),CLUSTER_4,CLUSTER_9
y,numpy.array([all_labels]),CLUSTER_4,CLUSTER_9
classes,numpy.unique(train_labels),CLUSTER_4,CLUSTER_9
train_ds,json.load(f),CLUSTER_4,CLUSTER_9
ts,time.time(),CLUSTER_4,CLUSTER_9
ts,time.time(),CLUSTER_4,CLUSTER_9
cm,"sklearn.metrics.confusion_matrix(test_labels,test_labels_pred)",CLUSTER_4,CLUSTER_9
cm,"sklearn.metrics.confusion_matrix(test_labels,test_labels_pred)",CLUSTER_4,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.33,random_state=37)",CLUSTER_7,CLUSTER_5
metrics,pandas.DataFrame(model.history.history),CLUSTER_7,CLUSTER_5
df,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_5
df,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_5
pic,"numpy.reshape(pic,(28,28)",CLUSTER_7,CLUSTER_5
X_train,"numpy.reshape(X_train,(28140,28,28,1)",CLUSTER_7,CLUSTER_5
X_test,"numpy.reshape(X_test,(13860,28,28,1)",CLUSTER_7,CLUSTER_5
y_train,"numpy.reshape(y_train,(-1,1)",CLUSTER_7,CLUSTER_5
y_test,"numpy.reshape(y_test,(-1,1)",CLUSTER_7,CLUSTER_5
x,"numpy.reshape(x,shape)",CLUSTER_7,CLUSTER_5
x,"numpy.reshape(x,shape)",CLUSTER_7,CLUSTER_5
frame2['debt'],numpy.arange(6.),CLUSTER_8,CLUSTER_3
frame2,"pandas.DataFrame(data,columns=['year','state','pop','debt'],
index=['one','two','three','four','five','six'])",CLUSTER_8,CLUSTER_3
frame3,pandas.DataFrame(pop),CLUSTER_8,CLUSTER_3
labels,pandas.Index(np.arange(3),CLUSTER_8,CLUSTER_3
dup_labels,"pandas.Index(['foo','foo','bar','bar'])",CLUSTER_8,CLUSTER_3
obj2,"pandas.Series([4,7,-5,3],index=['d','b','a','c'])",CLUSTER_8,CLUSTER_3
obj3,pandas.Series(sdata),CLUSTER_8,CLUSTER_3
obj4,"pandas.Series(sdata,index=states)",CLUSTER_8,CLUSTER_3
val,"pandas.Series([-1.2,-1.5,-1.7],index=['two','four','five'])",CLUSTER_8,CLUSTER_3
obj,pandas.Series(range(3),CLUSTER_8,CLUSTER_3
obj2,"pandas.Series([1.5,-2.5,0],index=labels)",CLUSTER_8,CLUSTER_3
obj,"pandas.Series([4,7,-5,3])",CLUSTER_8,CLUSTER_3
frame,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
x,"numpy.arange(-5.0,5.0,0.1)",CLUSTER_1,CLUSTER_10
x,"numpy.array([1.0,2.5,3.8])",CLUSTER_1,CLUSTER_10
x,"numpy.array([[1,2,3,4],[6,7,8,9],[11,12,13,14],[16,17,18,19]])",CLUSTER_1,CLUSTER_10
kernel,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_10
x,"numpy.array([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]])",CLUSTER_1,CLUSTER_10
kernel,"numpy.array([[5,5],[10,10]])",CLUSTER_1,CLUSTER_10
x,"numpy.array([[1,2,3,4],[6,7,8,9],[11,12,13,14],[16,17,18,19]])",CLUSTER_1,CLUSTER_10
x,"numpy.array([[1,2,3,4],[6,7,8,9],[11,12,13,14],[16,17,18,19]])",CLUSTER_1,CLUSTER_10
output,"numpy.zeros((column,row)",CLUSTER_1,CLUSTER_10
output,"numpy.zeros((column,row)",CLUSTER_1,CLUSTER_10
p_array,"numpy.zeros((a_h+2*padding,a_w+2*padding)",CLUSTER_1,CLUSTER_10
output,"numpy.zeros((column,row)",CLUSTER_1,CLUSTER_10
temp,"numpy.zeros((k_w,k_h)",CLUSTER_1,CLUSTER_10
output,"numpy.zeros((column,row)",CLUSTER_1,CLUSTER_10
temp,"numpy.zeros((k_w,k_h)",CLUSTER_1,CLUSTER_10
sum_exp_x,numpy.sum(exp_x),CLUSTER_1,CLUSTER_10
exp_x,numpy.exp(x-c),CLUSTER_1,CLUSTER_10
"output[i,j]",numpy.average(temp),CLUSTER_1,CLUSTER_10
dx,"numpy.array([
np.cos(x[2])",CLUSTER_4,CLUSTER_11
x,numpy.zeros(3),CLUSTER_4,CLUSTER_11
u,numpy.zeros(2),CLUSTER_4,CLUSTER_11
x[2],"numpy.arctan2(zflag[1][1],zflag[0][1])",CLUSTER_4,CLUSTER_11
u[1],"numpy.arctan2(thdot_v,u[0]**2/b)",CLUSTER_4,CLUSTER_11
T,"numpy.linspace(0,Tf,500)",CLUSTER_4,CLUSTER_11
factor,"math.log(256**3,2)",CLUSTER_5,CLUSTER_9
a,numpy.array(mat['A']),CLUSTER_5,CLUSTER_9
new_bird_arr,"numpy.reshape(new_bird.values,a.shape)",CLUSTER_5,CLUSTER_9
new_img,"numpy.reshape(new_colors.values,img_arr.shape)",CLUSTER_5,CLUSTER_9
aggl_img,"numpy.reshape(aggl_colors.values,img_arr.shape)",CLUSTER_5,CLUSTER_9
bird,"pandas.DataFrame(a.reshape(-1,3)",CLUSTER_5,CLUSTER_9
img_colors,"pandas.DataFrame(img_arr.reshape(-1,3)",CLUSTER_5,CLUSTER_9
aggl_clusters,pandas.Series(clustering.fit_predict(img_colors),CLUSTER_5,CLUSTER_9
mat,scipy.io.loadmat('bird_small.mat'),CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(15,5)",CLUSTER_5,CLUSTER_9
clustering,sklearn.cluster.AgglomerativeClustering(n_clusters=16),CLUSTER_5,CLUSTER_9
binw,numpy.ceil((np.max(S),CLUSTER_1,CLUSTER_10
future,"pandas.DataFrame(index=date_list,columns=salary2.columns)",CLUSTER_1,CLUSTER_9
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_1,CLUSTER_9
salary2,"pandas.concat([salary2,future])",CLUSTER_1,CLUSTER_9
salary,"pandas.read_csv('WAG_C_M.csv',';',index_col=['month'],parse_dates=['month'],dayfirst=True)",CLUSTER_1,CLUSTER_9
"salary['WAG_C_M_boxcox'],lmbda",scipy.stats.boxcox(salary.WAG_C_M),CLUSTER_1,CLUSTER_9
"salary['WAG_C_M_box'],lmbda",scipy.stats.boxcox(salary.WAG_C_M),CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_1,CLUSTER_9
orig,"matplotlib.pyplot.plot(timeseries,color='blue',label='Original')",CLUSTER_1,CLUSTER_9
mean,"matplotlib.pyplot.plot(rolmean,color='red',label='RollingMean')",CLUSTER_1,CLUSTER_9
std,"matplotlib.pyplot.plot(rolstd,color='black',label='RollingStd')",CLUSTER_1,CLUSTER_9
x,numpy.arange(10),CLUSTER_7,CLUSTER_8
x,numpy.arange(10),CLUSTER_7,CLUSTER_8
x,numpy.arange(10),CLUSTER_7,CLUSTER_8
x,"numpy.arange(-3.0,3.0,0.1)",CLUSTER_7,CLUSTER_8
y,"numpy.arange(-3.0,3.0,0.1)",CLUSTER_7,CLUSTER_8
v,numpy.array(v1),CLUSTER_7,CLUSTER_8
y,numpy.array([2*iforiinx]),CLUSTER_7,CLUSTER_8
y,numpy.array([3*iforiinx]),CLUSTER_7,CLUSTER_8
x,"numpy.array(range(0,10)",CLUSTER_7,CLUSTER_8
y,"numpy.array(range(10,20)",CLUSTER_7,CLUSTER_8
x_batch,numpy.array(list(zip(*batch),CLUSTER_7,CLUSTER_8
y_batch,numpy.array(list(zip(*batch),CLUSTER_7,CLUSTER_8
x,"numpy.array([2,-2])",CLUSTER_7,CLUSTER_8
x,"numpy.array([2,-2])",CLUSTER_7,CLUSTER_8
x2,numpy.array(range(len(trace),CLUSTER_7,CLUSTER_8
x3,numpy.array(range(len(trace2),CLUSTER_7,CLUSTER_8
x_train,"numpy.linspace(0,100,1000)",CLUSTER_7,CLUSTER_8
x_test,"numpy.linspace(100.01,110.01,50)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-1,5,100)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-10,20,100)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-10,20,100)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-10,20,100)",CLUSTER_7,CLUSTER_8
data,"numpy.vstack((x,y)",CLUSTER_7,CLUSTER_8
data,"numpy.vstack((x,y)",CLUSTER_7,CLUSTER_8
"X,Y","numpy.meshgrid(w,b)",CLUSTER_7,CLUSTER_8
"X,Y","numpy.meshgrid(x,y,indexing='ij')",CLUSTER_7,CLUSTER_8
w,random.random(),CLUSTER_7,CLUSTER_8
w,random.random(),CLUSTER_7,CLUSTER_8
w,random.random(),CLUSTER_7,CLUSTER_8
b,"

matplotlib.pyplot.figure(figsize=(4,4)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(5,4)",CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_8
source,"numpy.array(list(map(lambdax:to_categorical(x,num_classes=len(human_vocab)",CLUSTER_2,CLUSTER_10
s0,"numpy.zeros((m,n_s)",CLUSTER_2,CLUSTER_10
c0,"numpy.zeros((m,n_s)",CLUSTER_2,CLUSTER_10
prediction,"numpy.argmax(prediction,axis=-1)",CLUSTER_2,CLUSTER_10
x,numpy.array(img),CLUSTER_4,CLUSTER_11
x_data,numpy.array(x_data),CLUSTER_4,CLUSTER_11
y_data,numpy.array(y_data),CLUSTER_4,CLUSTER_11
multiarray_normalized,numpy.array(multiarray_normalized),CLUSTER_5,CLUSTER_9
correlacion,"numpy.corrcoef(factor_1.values[i:i+paso],factor_2.values[i:i+paso])",CLUSTER_5,CLUSTER_9
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_9
R,"numpy.array(((c,-s)",CLUSTER_7,CLUSTER_9
C,"numpy.array([[self.sigma[i,0]**2,0.],[0.,self.sigma[i,1]**2]])",CLUSTER_7,CLUSTER_9
v,numpy.array(cm.viridis.colors),CLUSTER_7,CLUSTER_9
g,numpy.array(cm.plasma.colors),CLUSTER_7,CLUSTER_9
angle,"numpy.array([-30.,0.])",CLUSTER_7,CLUSTER_9
prob_C,"numpy.array([0.6,0.4])",CLUSTER_7,CLUSTER_9
self.I,"numpy.zeros((self.nx,self.ny,3)",CLUSTER_7,CLUSTER_9
mu,"numpy.zeros((2,2)",CLUSTER_7,CLUSTER_9
sigma,"numpy.zeros((2,2)",CLUSTER_7,CLUSTER_9
indx,numpy.argwhere(self.masque),CLUSTER_7,CLUSTER_9
indx,numpy.argwhere(~self.masque),CLUSTER_7,CLUSTER_9
"c,s",numpy.cos(theta),CLUSTER_7,CLUSTER_9
theta,numpy.radians(self.angle[i]),CLUSTER_7,CLUSTER_9
"self.xx,self.yy","numpy.meshgrid(np.linspace(self.x_min,self.x_max,self.nx)",CLUSTER_7,CLUSTER_9
self.pos,"numpy.dstack((self.xx,self.yy)",CLUSTER_7,CLUSTER_9
cs,"matplotlib.pyplot.contour(self.xx,self.yy,self.masque,[0.5])",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(13,10)",CLUSTER_7,CLUSTER_9
self.modeles[i],"scipy.stats.multivariate_normal(self.mu[i,:],C)",CLUSTER_7,CLUSTER_9
df,"pandas.read_csv(""venezuela_explore_data.csv"")",CLUSTER_8,CLUSTER_4
word_counts,collections.Counter(tokens),CLUSTER_3,CLUSTER_6
word_counts,collections.Counter(tokens),CLUSTER_3,CLUSTER_6
ax,"matplotlib.pyplot.axes(xscale='log',yscale='log')",CLUSTER_5,CLUSTER_10
ax,matplotlib.pyplot.axes(),CLUSTER_5,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(5,5,figsize=(5,5)",CLUSTER_5,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(4,4,sharex=True,sharey=True)",CLUSTER_5,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_10
x,"numpy.linspace(0,3*np.pi,1000)",CLUSTER_5,CLUSTER_10
faces,sklearn.datasets.fetch_olivetti_faces(),CLUSTER_5,CLUSTER_10
x_train,"numpy.reshape(x_train,(x_train.shape[0],784)",CLUSTER_2,CLUSTER_7
x_test,"numpy.reshape(x_test,(x_test.shape[0],784)",CLUSTER_2,CLUSTER_7
ax,"matplotlib.pyplot.subplot(2,number,index+1)",CLUSTER_2,CLUSTER_7
ax,"matplotlib.pyplot.subplot(2,number,index+1+number)",CLUSTER_2,CLUSTER_7
df,pandas.read_csv('911.csv'),CLUSTER_7,CLUSTER_3
df['timeStamp'],pandas.to_datetime(df['timeStamp']),CLUSTER_7,CLUSTER_3
datetime,pandas.to_datetime(train_2016.transactiondate),CLUSTER_4,CLUSTER_5
token,"requests.request(""GET"",TOKEN_URL,headers=TOKEN_HEADERS)",CLUSTER_6,CLUSTER_6
current_seq,"numpy.roll(current_seq,-1,1)",CLUSTER_6,CLUSTER_6
current_seq,"numpy.full((1,sequence_length)",CLUSTER_6,CLUSTER_6
img,numpy.array(image.open('gal.png'),CLUSTER_12,CLUSTER_6
gray,"numpy.zeros((img.shape[0],img.shape[1])",CLUSTER_12,CLUSTER_6
medianBlur,"numpy.zeros((gray.shape[0]-kernel_size+1,gray.shape[1]-kernel_size+1)",CLUSTER_12,CLUSTER_6
medianBlur,"numpy.zeros((gray.shape[0]-kernel_size+1,gray.shape[1]-kernel_size+1)",CLUSTER_12,CLUSTER_6
paraphrases,pandas.read_csv('paraphrases.csv'),CLUSTER_0,CLUSTER_1
percent,"pandas.DataFrame(round(train.Embarked.value_counts(dropna=False,normalize=True)",CLUSTER_7,CLUSTER_8
total,pandas.DataFrame(train.Embarked.value_counts(dropna=False),CLUSTER_7,CLUSTER_8
all_data,"pandas.concat([train,test],ignore_index=False)",CLUSTER_7,CLUSTER_8
all_data,"pandas.concat([with_N,without_N],axis=0)",CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(""./input/train.csv"")",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(""./input/test.csv"")",CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x=""Sex"",
y=""Survived"",
data=train,
palette=pal,
linewidth=2)",CLUSTER_7,CLUSTER_8
ax1,"seaborn.boxplot(x=""Embarked"",y=""Fare"",hue=""Pclass"",data=train,ax=ax[0])",CLUSTER_7,CLUSTER_8
ax2,"seaborn.boxplot(x=""Embarked"",y=""Fare"",hue=""Pclass"",data=test,ax=ax[1])",CLUSTER_7,CLUSTER_8
ax,"seaborn.countplot(x=""Sex"",
hue=""Survived"",
data=train,
linewidth=2,
palette=pal
)",CLUSTER_7,CLUSTER_8
ax,"seaborn.kdeplot(train.Pclass[train.Survived==0],
color='gray',
shade=True,
label='notsurvived')",CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(train.loc[(train['Survived']==1),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(train.loc[(train['Survived']==0),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(train.loc[(train['Survived']==1),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(train.loc[(train['Survived']==0),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(train.loc[(train['Survived']==1),CLUSTER_7,CLUSTER_8
X,"pandas.DataFrame(scaled_df,columns=names)",CLUSTER_7,CLUSTER_8
X,"pandas.DataFrame(scaled_df,columns=names)",CLUSTER_7,CLUSTER_8
feat_importances,"pandas.Series(model.feature_importances_,index=X.columns)",CLUSTER_7,CLUSTER_8
feat_importances,"pandas.Series(model.feature_importances_,index=X.columns)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('C:/Users/spbro/OneDrive/Desktop/diabetes_data.csv'),CLUSTER_7,CLUSTER_8
"fig1,ax1","matplotlib.pyplot.subplots(1,2,figsize=(8,8)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(4,2,figsize=(10,10)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.ExtraTreesClassifier(),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.ExtraTreesClassifier(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.20,random_state=42)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.20,random_state=42)",CLUSTER_7,CLUSTER_8
kfold,"sklearn.model_selection.KFold(n_splits=10,random_state=123)",CLUSTER_7,CLUSTER_8
cv_result,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=kfold,scoring=""accuracy"")",CLUSTER_7,CLUSTER_8
model,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_8
final_model,"sklearn.svm.SVC(C=0.01,kernel='linear')",CLUSTER_7,CLUSTER_8
final_model,"sklearn.svm.SVC(C=0.1,kernel='linear')",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(estimator=model,
param_grid=paramaters,
scoring='accuracy',
cv=10,
n_jobs=-1)",CLUSTER_7,CLUSTER_8
cf,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
cf,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
report,"sklearn.metrics.classification_report(y_test,y_pred)",CLUSTER_7,CLUSTER_8
report,"sklearn.metrics.classification_report(y_test,y_pred)",CLUSTER_7,CLUSTER_8
ig_df,pandas.read_csv('dataset.csv'),CLUSTER_8,CLUSTER_4
images,"numpy.zeros((size_image[0],size_image[1],size_image[2],len(fileList)",CLUSTER_4,CLUSTER_11
labels,"numpy.zeros((size_image[0],size_image[1],len(fileList)",CLUSTER_4,CLUSTER_11
images_irm_test,"numpy.zeros((size_image[0],size_image[1],size_image[2],len(fileList)",CLUSTER_4,CLUSTER_11
labels_test,"numpy.zeros((size_image[0],size_image[1],len(fileList)",CLUSTER_4,CLUSTER_11
heat_map_normalize,numpy.zeros(heat_map.shape),CLUSTER_4,CLUSTER_11
accuaracy_depending_nbItterations,numpy.zeros(len(nets),CLUSTER_4,CLUSTER_11
accuaracy_depending_nbItterations[i]+,numpy.sum((label==label_predicted),CLUSTER_4,CLUSTER_11
e_x,numpy.exp(x-np.max(x),CLUSTER_4,CLUSTER_11
df['bedrooms_new_size'],pandas.concat(lista),CLUSTER_8,CLUSTER_4
df,pandas.read_csv(file),CLUSTER_8,CLUSTER_4
df,"pandas.read_csv(file,nrows=5)",CLUSTER_8,CLUSTER_4
chunk,"pandas.read_csv(file,chunksize=10000)",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv(file,sep=',',usecols=['date','price','bedrooms','bathrooms','zipcode'])",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv(file,sep=',',usecols=[0,1,2,3,4,16])",CLUSTER_8,CLUSTER_4
df,pandas.read_csv(file),CLUSTER_8,CLUSTER_4
df,"pandas.read_csv(file,usecols=lambdacol:colnotin['sqft_living','sqft_lot','floors'])",CLUSTER_8,CLUSTER_4
df,pandas.read_csv(titanic),CLUSTER_8,CLUSTER_4
df,"pandas.read_csv(titanic,dtype={'Embarked':'category','Survived':'category','Parch':'int32'})",CLUSTER_8,CLUSTER_4
this_mean,numpy.mean(new_pd_dict_columns['Total']),CLUSTER_12,CLUSTER_9
this_std,numpy.std(new_pd_dict_columns['Total']),CLUSTER_12,CLUSTER_9
first_quartile,"numpy.percentile(new_pd_dict_columns['Total'],25)",CLUSTER_12,CLUSTER_9
third_quartile,"numpy.percentile(new_pd_dict_columns['Total'],75)",CLUSTER_12,CLUSTER_9
new_pd_dict_columns,collections.defaultdict(list),CLUSTER_12,CLUSTER_9
new_pd_dict_columns,collections.defaultdict(list),CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_12,CLUSTER_9
norm_pvalue,scipy.stats.normaltest(new_pd_dict_columns[col]),CLUSTER_12,CLUSTER_9
col_skew,scipy.stats.skew(new_pd_dict_columns[col]),CLUSTER_12,CLUSTER_9
rewards,"numpy.array([agent.evaluate(weights,gamma,max_t)",CLUSTER_6,CLUSTER_10
best_weight,numpy.array(elite_weights),CLUSTER_6,CLUSTER_10
scores_deque,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
df,"pandas.DataFrame(np.random.randn(6,4)",CLUSTER_1,CLUSTER_3
df2,"pandas.DataFrame({'A':1.,
'B':pd.Timestamp('20130102')",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(10,4)",CLUSTER_1,CLUSTER_3
left,"pandas.DataFrame({'key':['foo','foo'],'lval':[1,2]})",CLUSTER_1,CLUSTER_3
right,"pandas.DataFrame({'key':['foo','foo'],'rval':[4,5]})",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(8,4)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({'A':['foo','bar','foo','bar',
'foo','bar','foo','foo'],
'B':['one','one','two','three',
'two','two','one','three'],
'C':np.random.randn(8)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(8,2)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({'A':['one','one','two','three']*3,
'B':['A','B','C']*4,
'C':['foo','foo','foo','bar','bar','bar']*2,
'D':np.random.randn(12)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({""id"":[1,2,3,4,5,6],""raw_grade"":['a','b','b','a','a','e']})",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(1000,4)",CLUSTER_1,CLUSTER_3
s,"pandas.Series([1,3,5,np.nan,6,8])",CLUSTER_1,CLUSTER_3
s1,"pandas.Series([1,2,3,4,5,6],index=pd.date_range('20130102',periods=6)",CLUSTER_1,CLUSTER_3
s,"pandas.Series([1,3,5,np.nan,6,8],index=dates)",CLUSTER_1,CLUSTER_3
s,"pandas.Series(np.random.randint(0,7,size=10)",CLUSTER_1,CLUSTER_3
s,"pandas.Series(['A','B','C','Aaba','Baca',np.nan,'CABA','dog','cat'])",CLUSTER_1,CLUSTER_3
ts,"pandas.Series(np.random.randint(0,500,len(rng)",CLUSTER_1,CLUSTER_3
ts,pandas.Series(np.random.randn(len(rng),CLUSTER_1,CLUSTER_3
ts,pandas.Series(np.random.randn(len(rng),CLUSTER_1,CLUSTER_3
ts,pandas.Series(np.random.randn(len(prng),CLUSTER_1,CLUSTER_3
ts,pandas.Series(np.random.randn(1000),CLUSTER_1,CLUSTER_3
dates,"pandas.date_range('20130101',periods=6)",CLUSTER_1,CLUSTER_3
s1,"pd.Series([1,2,3,4,5,6],index=pandas.date_range('20130102',periods=6)",CLUSTER_1,CLUSTER_3
rng,"pandas.date_range('1/1/2012',periods=100,freq='s')",CLUSTER_1,CLUSTER_3
rng,"pandas.date_range('3/6/201200:00',periods=5,freq='D')",CLUSTER_1,CLUSTER_3
rng,"pandas.date_range('1/1/2012',periods=5,freq='M')",CLUSTER_1,CLUSTER_3
ts,"pd.Series(np.random.randn(1000),index=pandas.date_range('1/1/2000',periods=1000)",CLUSTER_1,CLUSTER_3
prng,"pandas.period_range('1990Q1','2000Q4',freq='Q-NOV')",CLUSTER_1,CLUSTER_3
"df.loc[:,'D']",numpy.array([5]*len(df),CLUSTER_1,CLUSTER_3
response,requests.get(url),CLUSTER_9,CLUSTER_2
datadf,pandas.DataFrame(data),CLUSTER_9,CLUSTER_2
hikesdf,pandas.DataFrame(hikes),CLUSTER_9,CLUSTER_2
hikes,pandas.read_csv(csv_file),CLUSTER_9,CLUSTER_2
gene_nature_supplement,pandas.read_csv(gene_nature_supplement_file),CLUSTER_10,CLUSTER_4
probes_info,"pandas.read_csv(os.path.join(donor_path,'Probes.csv')",CLUSTER_10,CLUSTER_4
gene_expr,"pandas.read_csv(os.path.join(donor_path,'MicroarrayExpression.csv')",CLUSTER_10,CLUSTER_4
sample_info,"pandas.read_csv(os.path.join(donor_path,'SampleAnnot.csv')",CLUSTER_10,CLUSTER_4
p,"numpy.zeros((10**5,4)",CLUSTER_1,CLUSTER_3
x1234,"numpy.concatenate((x123,[x4])",CLUSTER_1,CLUSTER_3
z,numpy.sum(x1234),CLUSTER_1,CLUSTER_3
logwayspp,numpy.log(ways),CLUSTER_1,CLUSTER_3
p,pandas.DataFrame(data=d),CLUSTER_1,CLUSTER_3
y1,numpy.sin(6*t),CLUSTER_1,CLUSTER_10
y2,numpy.sin(6*t+2),CLUSTER_1,CLUSTER_10
y3,numpy.sin(6*t),CLUSTER_1,CLUSTER_10
t,"numpy.linspace(0,6,n_points)",CLUSTER_1,CLUSTER_10
input_pred,"numpy.linspace(6,10,100)",CLUSTER_1,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(4,1,sharex=False,figsize=(12,8)",CLUSTER_1,CLUSTER_10
corp_total,"pandas.merge(corp_info,corp_data,how='left',on='종목코드')",CLUSTER_8,CLUSTER_4
corp_info,"pandas.read_csv('corp.csv',header=0)",CLUSTER_8,CLUSTER_4
corp_result,pandas.read_excel('SAMPLE_2018.xlsx'),CLUSTER_8,CLUSTER_4
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
y_pred,"numpy.argmax(pred,axis=1)",CLUSTER_7,CLUSTER_8
temp_df,pandas.DataFrame(temp_dict),CLUSTER_7,CLUSTER_8
temp_df,"pandas.melt(temp_df,id_vars=['Performance'],value_vars=averages,
var_name='Metric',value_name=feature)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv(path),CLUSTER_7,CLUSTER_8
embedding_matrix,"pandas.read_pickle(""model/GloVe_matrix.pkl"")",CLUSTER_7,CLUSTER_8
"X_train,x_test,Y_train,y_test","sklearn.model_selection.train_test_split(data.clean_tweet,data.labels,test_size=0.33,random_state=42)",CLUSTER_7,CLUSTER_8
"x_train,x_val,y_train,y_val","sklearn.model_selection.train_test_split(X_train,Y_train,test_size=0.33,random_state=42)",CLUSTER_7,CLUSTER_8
cr,"sklearn.metrics.classification_report(y_test_onehot,y_pred_onehot,target_names=class_names,output_dict=True)",CLUSTER_7,CLUSTER_8
squares,numpy.square(dist),CLUSTER_7,CLUSTER_8
vardf,pandas.DataFrame(pca.explained_variance_),CLUSTER_7,CLUSTER_8
df,"pandas.merge(df_offers,df_transactions)",CLUSTER_7,CLUSTER_8
df,"pandas.merge(df_transactions,customer_clusters)",CLUSTER_7,CLUSTER_8
df,"pandas.merge(df_offers,df)",CLUSTER_7,CLUSTER_8
df_offers,"pandas.read_excel(""./WineKMC.xlsx"",sheetname=0)",CLUSTER_7,CLUSTER_8
df_transactions,"pandas.read_excel(""./WineKMC.xlsx"",sheetname=1)",CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_8
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
new_palette,seaborn.xkcd_palette(colors),CLUSTER_7,CLUSTER_8
K_means,"sklearn.cluster.KMeans(n_clusters=K,random_state=5)",CLUSTER_7,CLUSTER_8
K_means,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_7,CLUSTER_8
clusterer,"sklearn.cluster.KMeans(n_clusters=K,random_state=5)",CLUSTER_7,CLUSTER_8
K_means,"sklearn.cluster.KMeans(n_clusters=8,random_state=5)",CLUSTER_7,CLUSTER_8
K_means,"sklearn.cluster.KMeans(n_clusters=3,random_state=5)",CLUSTER_7,CLUSTER_8
sample_silhouette_values,"sklearn.metrics.silhouette_samples(x_cols,cluster_labels)",CLUSTER_7,CLUSTER_8
silhouette_avg,"sklearn.metrics.silhouette_score(x_cols,cluster_labels)",CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
af,sklearn.cluster.AffinityPropagation(damping=0.5),CLUSTER_7,CLUSTER_8
silhouette_score,"sklearn.metrics.silhouette_score(x_cols,labels,metric='sqeuclidean')",CLUSTER_7,CLUSTER_8
silhouette_score,"sklearn.metrics.silhouette_score(x_cols,labels,metric='sqeuclidean')",CLUSTER_7,CLUSTER_8
silhouette_score,"sklearn.metrics.silhouette_score(x_cols,labels,metric='sqeuclidean')",CLUSTER_7,CLUSTER_8
silhouette_score,"sklearn.metrics.silhouette_score(x_cols,labels,metric='sqeuclidean')",CLUSTER_7,CLUSTER_8
silhouette_score,"sklearn.metrics.silhouette_score(x_cols,labels,metric='sqeuclidean')",CLUSTER_7,CLUSTER_8
spectral,"sklearn.cluster.SpectralClustering(n_clusters=3,random_state=5)",CLUSTER_7,CLUSTER_8
agc,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage='ward')",CLUSTER_7,CLUSTER_8
agc,"sklearn.cluster.AgglomerativeClustering(n_clusters=8,linkage='ward')",CLUSTER_7,CLUSTER_8
dbscan,"sklearn.cluster.DBSCAN(min_samples=3,eps=1.4)",CLUSTER_7,CLUSTER_8
r,requests.get(url),CLUSTER_9,CLUSTER_2
r,requests.get(lyric_url),CLUSTER_9,CLUSTER_2
r,requests.get(song_detail),CLUSTER_9,CLUSTER_2
r,requests.get(music_url),CLUSTER_9,CLUSTER_2
content,requests.get(music),CLUSTER_9,CLUSTER_2
artists,requests.get(url),CLUSTER_9,CLUSTER_2
df_songs,pandas.DataFrame(songs_list),CLUSTER_9,CLUSTER_2
tables,pandas.read_html(mars_facts),CLUSTER_9,CLUSTER_2
mars_html,requests.get(mars_url),CLUSTER_9,CLUSTER_2
twitter_html,requests.get(twitter_url),CLUSTER_9,CLUSTER_2
y,"numpy.choose(y,[1,2,0])",CLUSTER_5,CLUSTER_10
fig,"matplotlib.pyplot.figure(fignum,figsize=(4,3)",CLUSTER_5,CLUSTER_10
fig,"matplotlib.pyplot.figure(fignum,figsize=(4,3)",CLUSTER_5,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
positive_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
negative_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
total_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
pos_neg_ratios,collections.Counter(),CLUSTER_12,CLUSTER_6
review_counter,collections.Counter(),CLUSTER_12,CLUSTER_6
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
layer_0,numpy.zeros(10),CLUSTER_12,CLUSTER_6
layer_1,numpy.zeros(5),CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
self.layer_1,"numpy.zeros((1,hidden_nodes)",CLUSTER_12,CLUSTER_6
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
mean_acc,numpy.zeros((Ks-1),CLUSTER_7,CLUSTER_5
std_acc,numpy.zeros((Ks-1),CLUSTER_7,CLUSTER_5
std_acc[n-1],numpy.std(yhat==y_test),CLUSTER_7,CLUSTER_5
bins,numpy.linspace(df.Principal.min(),CLUSTER_7,CLUSTER_5
bins,numpy.linspace(df.age.min(),CLUSTER_7,CLUSTER_5
bins,numpy.linspace(df.dayofweek.min(),CLUSTER_7,CLUSTER_5
out,"tree.export_graphviz(loanTree,feature_names=featureNames,out_file=dot_data,class_names=numpy.unique(y_train)",CLUSTER_7,CLUSTER_5
Feature,"pandas.concat([Feature,pd.get_dummies(df['education'])",CLUSTER_7,CLUSTER_5
Feature_test,"pandas.concat([Feature_test,pd.get_dummies(test_df['education'])",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('loan_train.csv'),CLUSTER_7,CLUSTER_5
test_df,pandas.read_csv('loan_test.csv'),CLUSTER_7,CLUSTER_5
df['due_date'],pandas.to_datetime(df['due_date']),CLUSTER_7,CLUSTER_5
df['effective_date'],pandas.to_datetime(df['effective_date']),CLUSTER_7,CLUSTER_5
test_df['due_date'],pandas.to_datetime(test_df['due_date']),CLUSTER_7,CLUSTER_5
test_df['effective_date'],pandas.to_datetime(test_df['effective_date']),CLUSTER_7,CLUSTER_5
X,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
X,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
test_X,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=4)",CLUSTER_7,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n),CLUSTER_7,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=7),CLUSTER_7,CLUSTER_5
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,yhat)",CLUSTER_7,CLUSTER_5
loanTree,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=4)",CLUSTER_7,CLUSTER_5
loanTree,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"")",CLUSTER_7,CLUSTER_5
out,"sklearn.tree.export_graphviz(loanTree,feature_names=featureNames,out_file=dot_data,class_names=np.unique(y_train)",CLUSTER_7,CLUSTER_5
clf,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_5
LR,sklearn.linear_model.LogisticRegression(C=0.01),CLUSTER_7,CLUSTER_5
LR,"sklearn.linear_model.LogisticRegression(C=0.01,solver='liblinear')",CLUSTER_7,CLUSTER_5
logloss_lg,"sklearn.metrics.log_loss(test_y,yhat_lg_prob)",CLUSTER_7,CLUSTER_5
f1_score_knn,"sklearn.metrics.f1_score(test_y,yhat_knn,average='weighted')",CLUSTER_7,CLUSTER_5
f1_score_dt,"sklearn.metrics.f1_score(test_y,yhat_dt,average='weighted')",CLUSTER_7,CLUSTER_5
f1_score_svm,"sklearn.metrics.f1_score(test_y,yhat_svm,average='weighted')",CLUSTER_7,CLUSTER_5
f1_score_lg,"sklearn.metrics.f1_score(test_y,yhat_lg,average='weighted')",CLUSTER_7,CLUSTER_5
ifprediction_result[i]!,numpy.argmax(data.test.labels[i]),CLUSTER_11,CLUSTER_0
ifprediction_result[j]!,numpy.argmax(labels[j]),CLUSTER_11,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_0
ax,"matplotlib.pyplot.subplot(5,5,1+i)",CLUSTER_11,CLUSTER_0
ax,"matplotlib.pyplot.subplot(5,5,1+i)",CLUSTER_11,CLUSTER_0
startTime,time.time(),CLUSTER_11,CLUSTER_0
duration,time.time(),CLUSTER_11,CLUSTER_0
response,requests.get(image_url),CLUSTER_12,CLUSTER_10
response,"requests.post(face_api_url,params=params,headers=headers,json={""url"":image_url})",CLUSTER_12,CLUSTER_10
response,"requests.post(face_api_url,params=params,headers=headers,json={""url"":image_url})",CLUSTER_12,CLUSTER_10
_,"matplotlib.pyplot.axis(""off"")",CLUSTER_12,CLUSTER_10
ax,"matplotlib.pyplot.imshow(image,alpha=0.6)",CLUSTER_12,CLUSTER_10
ax,"matplotlib.pyplot.imshow(image,alpha=0.6)",CLUSTER_12,CLUSTER_10
base_color,seaborn.color_palette('Paired'),CLUSTER_7,CLUSTER_8
X_batch,numpy.array(zero_seq_seed[-num_time_steps:]),CLUSTER_2,CLUSTER_7
X_batch,numpy.array(training_instance[-num_time_steps:]),CLUSTER_2,CLUSTER_7
self.y_true,numpy.sin(self.x_data),CLUSTER_2,CLUSTER_7
y_batch,numpy.sin(batch_ts),CLUSTER_2,CLUSTER_7
X_new,"numpy.sin(np.array(train_inst[:-1].reshape(-1,num_time_steps,num_inputs)",CLUSTER_2,CLUSTER_7
self.x_data,"numpy.linspace(xmin,xmax,num_points)",CLUSTER_2,CLUSTER_7
train_inst,"numpy.linspace(5,5+ts_data.resolution*(num_time_steps+1)",CLUSTER_2,CLUSTER_7
moon_phase_list,pandas.DataFrame(moon_phase_list),CLUSTER_8,CLUSTER_3
moons,pandas.read_csv('../assets/moon_phase_data/moon-phases-2007-UTC.csv'),CLUSTER_8,CLUSTER_3
new,pandas.read_csv(path),CLUSTER_8,CLUSTER_3
all_data,pandas.read_csv('../assets/03_df.csv'),CLUSTER_8,CLUSTER_3
tz_map,pandas.read_excel('../assets/timezone_map.xlsx'),CLUSTER_8,CLUSTER_3
moon_map['ts_date'],pandas.to_datetime(moon_map['ts_date']),CLUSTER_8,CLUSTER_3
df,pandas.read_csv('cleanedData.csv'),CLUSTER_11,CLUSTER_3
bday,"datetime.date(2000,9,12)",CLUSTER_10,CLUSTER_12
next_bday,"datetime.date(2020,9,12)",CLUSTER_10,CLUSTER_12
today,datetime.date.today(),CLUSTER_10,CLUSTER_12
datetime1,datetime.datetime.today(),CLUSTER_10,CLUSTER_12
datetime_today,datetime.datetime.today(),CLUSTER_10,CLUSTER_12
tdelta1,datetime.timedelta(days=1),CLUSTER_10,CLUSTER_12
tdelta2,datetime.timedelta(days=2),CLUSTER_10,CLUSTER_12
tdelta3,datetime.timedelta(days=3),CLUSTER_10,CLUSTER_12
pdf,"pandas.DataFrame([1,2,3,4,5],columns=[""ratings""])",CLUSTER_1,CLUSTER_3
maSeries,pandas.Series(movie_ages.values(),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
pattern,"re.compile(r""[^\d+]"")",CLUSTER_1,CLUSTER_3
pattern,"re.compile(r""\d{2}-\w{3}-\d{4}"")",CLUSTER_1,CLUSTER_3
pattern,"re.compile(r""\d{1,2}-\w{3}-\d{4}"")",CLUSTER_1,CLUSTER_3
it,"numpy.nditer([A,B,None])",CLUSTER_8,CLUSTER_9
Z+,numpy.arange(5),CLUSTER_8,CLUSTER_9
Z,numpy.arange(10),CLUSTER_8,CLUSTER_9
X,numpy.arange(8),CLUSTER_8,CLUSTER_9
Z,numpy.arange(100),CLUSTER_8,CLUSTER_9
Z,"numpy.arange(10,dtype=np.int32)",CLUSTER_8,CLUSTER_9
Z,numpy.arange(9),CLUSTER_8,CLUSTER_9
A,numpy.arange(3),CLUSTER_8,CLUSTER_9
B,numpy.arange(3),CLUSTER_8,CLUSTER_9
A,numpy.arange(25),CLUSTER_8,CLUSTER_9
Z,numpy.arange(20),CLUSTER_8,CLUSTER_9
Z,"numpy.arange(1,15,dtype=np.uint32)",CLUSTER_8,CLUSTER_9
Z,numpy.arange(10000),CLUSTER_8,CLUSTER_9
phi,"numpy.arange(0,10*np.pi,0.1)",CLUSTER_8,CLUSTER_9
Z,"numpy.array([1,2,3,4,5])",CLUSTER_8,CLUSTER_9
P,numpy.array(list(position),CLUSTER_8,CLUSTER_9
Rs,numpy.array(list(R.shape),CLUSTER_8,CLUSTER_9
Zs,numpy.array(list(Z.shape),CLUSTER_8,CLUSTER_9
R_stop,numpy.array(list(shape),CLUSTER_8,CLUSTER_9
Z,"numpy.array([(""Hello"",2.5,3)",CLUSTER_8,CLUSTER_9
I,"numpy.array([0,1,2,3,15,16,32,64,128])",CLUSTER_8,CLUSTER_9
obj,numpy.asarray(array),CLUSTER_8,CLUSTER_9
X,"numpy.asarray([[1.0,0.0,3.0,8.0],
[2.0,0.0,1.0,1.0],
[1.5,2.5,1.0,0.0]])",CLUSTER_8,CLUSTER_9
T,numpy.ascontiguousarray(Z),CLUSTER_8,CLUSTER_9
Z,"numpy.zeros((5,5)",CLUSTER_8,CLUSTER_9
Z,"numpy.zeros((5,5)",CLUSTER_8,CLUSTER_9
Z,"numpy.zeros(10,[('position',[('x',float,1)",CLUSTER_8,CLUSTER_9
Z,"numpy.zeros((n,n)",CLUSTER_8,CLUSTER_9
Z0,numpy.zeros(len(Z),CLUSTER_8,CLUSTER_9
R_start,numpy.zeros((len(shape),CLUSTER_8,CLUSTER_9
rows,"numpy.where(C.any((3,1)",CLUSTER_8,CLUSTER_9
r,numpy.zeros_like(x),CLUSTER_8,CLUSTER_9
F,"numpy.roll(faces.repeat(2,axis=1)",CLUSTER_8,CLUSTER_9
S,"numpy.tensordot(M,V,axes=[[0,2],[0,1]])",CLUSTER_8,CLUSTER_9
Z,numpy.fromiter(generate(),CLUSTER_8,CLUSTER_9
equal,"numpy.array_equal(A,B)",CLUSTER_8,CLUSTER_9
ix,"numpy.indices(shape,dtype=int)",CLUSTER_8,CLUSTER_9
Z,numpy.ones(10),CLUSTER_8,CLUSTER_9
A,"numpy.ones((5,5,3)",CLUSTER_8,CLUSTER_9
R,"numpy.ones(shape,dtype=Z.dtype)",CLUSTER_8,CLUSTER_9
M,"numpy.ones((p,n,n)",CLUSTER_8,CLUSTER_9
V,"numpy.ones((p,n,1)",CLUSTER_8,CLUSTER_9
Z,"numpy.ones((16,16)",CLUSTER_8,CLUSTER_9
equal,"numpy.allclose(A,B)",CLUSTER_8,CLUSTER_9
E,"numpy.all(Z[:,1:]==Z[:,:-1],axis=1)",CLUSTER_8,CLUSTER_9
ret,"numpy.cumsum(a,dtype=float)",CLUSTER_8,CLUSTER_9
r[1:],numpy.cumsum(dr),CLUSTER_8,CLUSTER_9
A,numpy.repeat(np.arange(len(C),CLUSTER_8,CLUSTER_9
F,"numpy.sort(F,axis=1)",CLUSTER_8,CLUSTER_9
rank,numpy.sum(S>1e-10),CLUSTER_8,CLUSTER_9
S,"numpy.add.reduceat(numpy.add.reduceat(Z,np.arange(0,Z.shape[0],k)",CLUSTER_8,CLUSTER_9
T,"numpy.arctan2(Y,X)",CLUSTER_8,CLUSTER_9
G,numpy.exp(-((D-mu),CLUSTER_8,CLUSTER_9
M,"numpy.logical_and.reduce(np.mod(X,1)",CLUSTER_8,CLUSTER_9
R_stop,"numpy.maximum(R_start,(R_stop-numpy.maximum(Z_stop-Zs,0)",CLUSTER_8,CLUSTER_9
R,numpy.sqrt(X**2+Y**2),CLUSTER_8,CLUSTER_9
D,numpy.sqrt((X-X.T),CLUSTER_8,CLUSTER_9
D,numpy.sqrt(X*X+Y*Y),CLUSTER_8,CLUSTER_9
Z,"numpy.linspace(0,1,11,endpoint=False)",CLUSTER_8,CLUSTER_9
r_int,"numpy.linspace(0,r.max()",CLUSTER_8,CLUSTER_9
"X,Y","numpy.atleast_2d(Z[:,0],Z[:,1])",CLUSTER_8,CLUSTER_9
confint,"numpy.percentile(means,[2.5,97.5])",CLUSTER_8,CLUSTER_9
Z+,"numpy.bincount(I,minlength=len(Z)",CLUSTER_8,CLUSTER_9
F,"numpy.bincount(I,X)",CLUSTER_8,CLUSTER_9
D_sums,"numpy.bincount(S,weights=D)",CLUSTER_8,CLUSTER_9
D_counts,numpy.bincount(S),CLUSTER_8,CLUSTER_9
C,"numpy.bincount([1,1,2,3,4,4,6])",CLUSTER_8,CLUSTER_9
"Z['x'],Z['y']","numpy.meshgrid(np.linspace(0,1,5)",CLUSTER_8,CLUSTER_9
"X,Y","numpy.meshgrid(np.linspace(-1,1,10)",CLUSTER_8,CLUSTER_9
x_int,"numpy.interp(r_int,r,x)",CLUSTER_8,CLUSTER_9
y_int,"numpy.interp(r_int,r,y)",CLUSTER_8,CLUSTER_9
G,numpy.unique(G),CLUSTER_8,CLUSTER_9
"_,idx","numpy.unique(T,return_index=True)",CLUSTER_8,CLUSTER_9
"U,S,V",numpy.linalg.svd(Z),CLUSTER_8,CLUSTER_9
y_pos,numpy.arange(len(tweets),CLUSTER_1,CLUSTER_3
y_pos,numpy.arange(len(tweets),CLUSTER_1,CLUSTER_3
y_pos,numpy.arange(len(tweets),CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(file,encoding='ISO-8859-1')",CLUSTER_1,CLUSTER_3
to,"datetime.datetime(2014,11,26)",CLUSTER_11,CLUSTER_10
tf,"datetime.datetime(2015,4,26)",CLUSTER_11,CLUSTER_10
u_bt_pred[site],numpy.zeros(len(times[site]),CLUSTER_11,CLUSTER_10
v_bt_pred[site],numpy.zeros(len(times[site]),CLUSTER_11,CLUSTER_10
u_bc_pred[site],numpy.zeros((len(times[site]),CLUSTER_11,CLUSTER_10
v_bc_pred[site],numpy.zeros((len(times[site]),CLUSTER_11,CLUSTER_10
adjphase,numpy.rad2deg(np.unwrap(np.deg2rad(baroclinic_ellipse[site][const][param]),CLUSTER_11,CLUSTER_10
df,"pandas.read_csv('./carats.csv',header=None)",CLUSTER_1,CLUSTER_3
df,"pandas.concat([fulltime_df,parttime_df])",CLUSTER_11,CLUSTER_9
df,"pandas.merge(df,name_match,how=""left"",left_on='company',right_on='IndeedCompany')",CLUSTER_11,CLUSTER_9
pay_desc_df,"pandas.merge(pay_df,df,how=""inner"",left_on='EmployerName',right_on='Human-VerifiedGPGMatch')",CLUSTER_11,CLUSTER_9
pay_df,pandas.read_csv('UKGenderPayGapData-2017to2018.csv'),CLUSTER_11,CLUSTER_9
name_match,pandas.read_csv('IndeedtoGPGCompanyName-indeed_companies_match.csv'),CLUSTER_11,CLUSTER_9
txt,json.loads(txt),CLUSTER_11,CLUSTER_9
cleantext,"re.sub(cleanr,'',raw_html)",CLUSTER_11,CLUSTER_9
cleanr,re.compile('<.*?>'),CLUSTER_11,CLUSTER_9
indexes,numpy.arange(train_dataset_info.shape[0]),CLUSTER_0,CLUSTER_0
names,"numpy.array(subcellular_location[['Enhanced','Supported','Approved','Uncertain']].values[j])",CLUSTER_0,CLUSTER_0
train_dataset_info,numpy.array(train_dataset_info),CLUSTER_0,CLUSTER_0
batch_labels,numpy.zeros((len(X_train_batch),CLUSTER_0,CLUSTER_0
steps_per_epoch,numpy.ceil(float(len(train_indexes),CLUSTER_0,CLUSTER_0
validation_steps,numpy.ceil(float(len(valid_indexes),CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(data_list,columns=['Id','Names','Target'])",CLUSTER_0,CLUSTER_0
subcellular_location,"pandas.read_csv('../input/external-data-for-protein-atlas/subcellular_location.tsv',sep=""\t"",index_col=None)",CLUSTER_0,CLUSTER_0
response,requests.get(url),CLUSTER_0,CLUSTER_0
response,requests.get(link),CLUSTER_0,CLUSTER_0
"train_indexes,valid_indexes","sklearn.model_selection.train_test_split(indexes,test_size=0.15,random_state=21)",CLUSTER_0,CLUSTER_0
world_bank_df,pandas.read_csv('data/WORLD_BANK.csv'),CLUSTER_1,CLUSTER_3
slid_df,pandas.read_csv('data/SLID.csv'),CLUSTER_1,CLUSTER_3
linear_fit,"numpy.polyfit(world_bank_df.gdp_capita,world_bank_df.c02,1)",CLUSTER_1,CLUSTER_3
quadratic_fit,"numpy.polyfit(world_bank_df.gdp_capita,world_bank_df.c02,2)",CLUSTER_1,CLUSTER_3
male_fit,"numpy.polyfit(slid_male.educ,slid_male.wage,1)",CLUSTER_1,CLUSTER_3
female_fit,"numpy.polyfit(slid_female.educ,slid_female.wage,1)",CLUSTER_1,CLUSTER_3
X,numpy.array(ct.fit_transform(X),CLUSTER_5,CLUSTER_5
ds,pandas.read_csv('../datasets/equake_clean.csv'),CLUSTER_5,CLUSTER_5
ct,"sklearn.compose.ColumnTransformer(transformers=[('encoder',OneHotEncoder()",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=0)",CLUSTER_5,CLUSTER_5
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
classifier,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',random_state=0)",CLUSTER_5,CLUSTER_5
EEG_df,pandas.read_csv('mergedTrialData.csv'),CLUSTER_7,CLUSTER_5
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,
test_size=test_size,
random_state=random_state)",CLUSTER_7,CLUSTER_5
rkfold,"sklearn.model_selection.RepeatedKFold(n_splits=7,n_repeats=3,random_state=42)",CLUSTER_7,CLUSTER_5
rkfold,"sklearn.model_selection.RepeatedKFold(n_splits=7,n_repeats=3,random_state=42)",CLUSTER_7,CLUSTER_5
grid,sklearn.model_selection.GridSearchCV(KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
grid,sklearn.model_selection.GridSearchCV(KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""/Users/manishanker.talusani/Statistics_ML_26Aug/kaggle/train.csv"")",CLUSTER_8,CLUSTER_1
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=1)",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_std,y,test_size=0.3,random_state=1)",CLUSTER_8,CLUSTER_1
clf_random_forest,sklearn.ensemble.RandomForestClassifier(n_estimators=170),CLUSTER_8,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_8,CLUSTER_1
clf_svm,sklearn.svm.SVC(C=5),CLUSTER_8,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_1,CLUSTER_9
bbox_transform,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_9
table,"pandas.DataFrame(data,columns=['lag',""AC"",""Q"",""Prob(>Q)",CLUSTER_1,CLUSTER_9
Data,"pandas.read_csv('data-1.csv',dayfirst=False,decimal=',',index_col=None,parse_dates=[0])",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
reqSession,requests.Session(),CLUSTER_10,CLUSTER_12
resApi,"requests.post(apiUrl,data=params,headers=headers(pageUrl)",CLUSTER_10,CLUSTER_12
res,"requests.post(apiUrl,data=params,headers=headers,cookies=userCookie,timeout=5)",CLUSTER_10,CLUSTER_12
df,pandas.DataFrame(columns=cols),CLUSTER_9,CLUSTER_2
df,pandas.read_csv('arizona.csv'),CLUSTER_9,CLUSTER_2
x_axis,numpy.arange(len(df),CLUSTER_1,CLUSTER_3
df,pandas.read_csv(path),CLUSTER_1,CLUSTER_3
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_3,CLUSTER_10
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_3,CLUSTER_10
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_3,CLUSTER_10
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_3,CLUSTER_10
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_3,CLUSTER_10
grad_difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
data_na,pandas.DataFrame(data_na.reset_index(),CLUSTER_1,CLUSTER_3
data,pandas.read_csv('titanic.csv'),CLUSTER_1,CLUSTER_3
data,pandas.read_csv('houseprice.csv'),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
x,"pandas.DataFrame(gdp_dataframe,columns=['date'])",CLUSTER_10,CLUSTER_4
gdp_change,"pandas.DataFrame(gdp_dataframe,columns=['change-current'])",CLUSTER_10,CLUSTER_4
unemployment,"pandas.DataFrame(unemploy_dataframe,columns=['unemployment'])",CLUSTER_10,CLUSTER_4
df_gdp,pandas.read_csv('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/projects/coursera_project/clean_gdp.csv'),CLUSTER_10,CLUSTER_4
df_unemployment,pandas.read_csv('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/projects/coursera_project/clean_unemployment.csv'),CLUSTER_10,CLUSTER_4
gdp_dataframe,pandas.read_csv(csv_path),CLUSTER_10,CLUSTER_4
gdp_dataframe,pandas.read_csv(csv_path),CLUSTER_10,CLUSTER_4
unemploy_dataframe,pandas.read_csv(csv_path),CLUSTER_10,CLUSTER_4
directory,os.getcwd(),CLUSTER_10,CLUSTER_4
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_5,CLUSTER_10
response,"requests.get(url,stream=True)",CLUSTER_9,CLUSTER_7
m,"re.match(r""url\((.*)",CLUSTER_9,CLUSTER_7
results,numpy.squeeze(results),CLUSTER_9,CLUSTER_7
n,numpy.sum(samples<=(logAmin+delta),CLUSTER_4,CLUSTER_11
TMAX,"numpy.ceil(max(U[:,-eps]*psr.toas/const.day)",CLUSTER_4,CLUSTER_11
TMIN,"numpy.floor(max(U[:,eps]*psr.toas/const.day)",CLUSTER_4,CLUSTER_11
tchunk,"numpy.linspace(TMIN,TMAX,41)",CLUSTER_4,CLUSTER_11
dA,"numpy.linspace(dAmin,dAmax,100)",CLUSTER_4,CLUSTER_11
xs,"numpy.linspace(-23,-9.5,100)",CLUSTER_4,CLUSTER_11
x0,numpy.hstack(p.sample(),CLUSTER_4,CLUSTER_11
ch_plt,"numpy.hstack([chain_bwm,chain_L.reshape(N,1)",CLUSTER_4,CLUSTER_11
cov,numpy.diag(np.ones(ndim),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(16,4)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(width,height)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(width,height)",CLUSTER_4,CLUSTER_11
chain_raw,"pandas.read_csv(rundir+'/chain_1.txt',
sep='\t',dtype=float,header=None)",CLUSTER_4,CLUSTER_11
y,"numpy.hstack([y_train,y_test])",CLUSTER_7,CLUSTER_5
X,"numpy.vstack([X_train,X_test])",CLUSTER_7,CLUSTER_5
n_classes,numpy.unique(y),CLUSTER_7,CLUSTER_5
X_train,"numpy.loadtxt(""samsung_train.txt"")",CLUSTER_7,CLUSTER_5
y_train,"numpy.loadtxt(""samsung_train_labels.txt"")",CLUSTER_7,CLUSTER_5
X_test,"numpy.loadtxt(""samsung_test.txt"")",CLUSTER_7,CLUSTER_5
y_test,"numpy.loadtxt(""samsung_test_labels.txt"")",CLUSTER_7,CLUSTER_5
tab,"pandas.crosstab(y,cluster_labels,margins=True)",CLUSTER_7,CLUSTER_5
tab,"pandas.crosstab(y_test,y_predicted,margins=True)",CLUSTER_7,CLUSTER_5
kmean,"sklearn.cluster.KMeans(n_clusters=n_classes,n_init=100,
random_state=42,n_jobs=1)",CLUSTER_7,CLUSTER_5
kmeans,"sklearn.cluster.KMeans(n_clusters=k,n_init=100,random_state=42,n_jobs=1)",CLUSTER_7,CLUSTER_5
ag,"sklearn.cluster.AgglomerativeClustering(n_clusters=n_classes,linkage='ward')",CLUSTER_7,CLUSTER_5
pca,"sklearn.decomposition.PCA(n_components=0.9,random_state=42)",CLUSTER_7,CLUSTER_5
pca,"sklearn.decomposition.PCA(n_components=0.9,random_state=42)",CLUSTER_7,CLUSTER_5
best_svc,"sklearn.model_selection.GridSearchCV(svc,svc_params,n_jobs=1,cv=3,verbose=1)",CLUSTER_7,CLUSTER_5
best_svc_pca,"sklearn.model_selection.GridSearchCV(svc,svc_params,n_jobs=1,cv=3,verbose=1)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
svc,sklearn.svm.LinearSVC(random_state=42),CLUSTER_7,CLUSTER_5
svc,sklearn.svm.LinearSVC(random_state=42),CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame({
""标题"":r.html.xpath('//div[@class=""news_title""]/a/@title')",CLUSTER_8,CLUSTER_4
数据,pandas.DataFrame(数据字典),CLUSTER_8,CLUSTER_4
数据,pandas.DataFrame(数据字典),CLUSTER_8,CLUSTER_4
数据,pandas.DataFrame(数据字典),CLUSTER_8,CLUSTER_4
数据,pandas.DataFrame(数据字典),CLUSTER_8,CLUSTER_4
df,pandas.DataFrame(outcomes),CLUSTER_8,CLUSTER_4
pattern,re.compile(r'abc'),CLUSTER_10,CLUSTER_4
p,re.compile(r'\d'),CLUSTER_10,CLUSTER_4
p,re.compile(r'\s'),CLUSTER_10,CLUSTER_4
pattern,re.compile('\d\d\d[.-]\d\d\d[-.]\d\d\d'),CLUSTER_10,CLUSTER_4
pattern,re.compile('[^b]at'),CLUSTER_10,CLUSTER_4
pattern,re.compile('\d{3}[.-]\d{3}[-.]\d{3}'),CLUSTER_10,CLUSTER_4
pattern,"re.compile(""M(r|s|rs)",CLUSTER_10,CLUSTER_4
pattern,re.compile('\w*@\w+\.\w+'),CLUSTER_10,CLUSTER_4
pattern,re.compile('[a-zA-Z0-9.-]+@[a-z-]+\.(com|edu|net),CLUSTER_10,CLUSTER_4
pattern,re.compile('https?://(www\.),CLUSTER_10,CLUSTER_4
pattern,re.compile('https?://(www\.),CLUSTER_10,CLUSTER_4
pattern,"re.compile(r'start',re.I)",CLUSTER_10,CLUSTER_4
arr,numpy.array(model.cv_results_['mean_test_score']),CLUSTER_5,CLUSTER_1
binc,numpy.bincount(target),CLUSTER_5,CLUSTER_1
dataf,pandas.read_csv('fraud_data.csv'),CLUSTER_5,CLUSTER_1
df,pandas.read_csv('fraud_data.csv'),CLUSTER_5,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
"precision,recall,thresholds","sklearn.metrics.precision_recall_curve(y_test,lr)",CLUSTER_5,CLUSTER_1
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,lr)",CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_5,CLUSTER_1
dclf,sklearn.dummy.DummyClassifier(strategy='most_frequent'),CLUSTER_5,CLUSTER_1
rs,"sklearn.metrics.recall_score(y_test,result)",CLUSTER_5,CLUSTER_1
svm,sklearn.svm.SVC(),CLUSTER_5,CLUSTER_1
svm,"sklearn.svm.SVC(gamma=1e-07,C=1e9)",CLUSTER_5,CLUSTER_1
cm,"sklearn.metrics.confusion_matrix(y_test,result)",CLUSTER_5,CLUSTER_1
model,"sklearn.model_selection.GridSearchCV(lr,param_grid=grid,scoring='recall')",CLUSTER_5,CLUSTER_1
src,numpy.float32(original_img_pts),CLUSTER_1,CLUSTER_10
dst,numpy.float32(destination_pts),CLUSTER_1,CLUSTER_10
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_1,CLUSTER_10
labels,numpy.array([xforxinrange(100),CLUSTER_2,CLUSTER_6
accuracies_mean,numpy.array([np.mean(v),CLUSTER_3,CLUSTER_10
accuracies_std,numpy.array([np.std(v),CLUSTER_3,CLUSTER_10
idxs,numpy.flatnonzero(y_train==y),CLUSTER_3,CLUSTER_10
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_train_temp,"numpy.reshape(X_train_temp,(num_train_temp,-1)",CLUSTER_3,CLUSTER_10
y_train_temp,"numpy.reshape(y_train_temp,(num_train_temp,-1)",CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_val_pred==y_val_temp),CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
X_train_temp,"numpy.delete(X_train_folds,i,0)",CLUSTER_3,CLUSTER_10
y_train_temp,"numpy.delete(y_train_folds,i,0)",CLUSTER_3,CLUSTER_10
acc_arr,"numpy.append(acc_arr,accuracy)",CLUSTER_3,CLUSTER_10
X_train_folds,"numpy.array_split(X_train,num_folds)",CLUSTER_3,CLUSTER_10
y_train_folds,"numpy.array_split(y_train,num_folds)",CLUSTER_3,CLUSTER_10
difference,"numpy.linalg.norm(dists-dists_one,ord='fro')",CLUSTER_3,CLUSTER_10
difference,"numpy.linalg.norm(dists-dists_two,ord='fro')",CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
aerial,"pandas.read_csv(""../TimeSeriesPredictionwithEDA/data/operations.csv"")",CLUSTER_7,CLUSTER_8
weather_station_location,"pandas.read_csv(""../TimeSeriesPredictionwithEDA/data/WeatherStationLocations.csv"")",CLUSTER_7,CLUSTER_8
weather,"pandas.read_csv(""../TimeSeriesPredictionwithEDA/data/SummaryofWeather.csv"")",CLUSTER_7,CLUSTER_8
"weather_bin[""Date""]","pandas.to_datetime(weather_bin[""Date""])",CLUSTER_7,CLUSTER_8
orig,"matplotlib.pyplot.plot(ts,color='red',label='Original')",CLUSTER_7,CLUSTER_8
mean,"matplotlib.pyplot.plot(rolmean,color='black',label='RollingMean')",CLUSTER_7,CLUSTER_8
std,"matplotlib.pyplot.plot(rolstd,color='green',label='RollingStd')",CLUSTER_7,CLUSTER_8
error,"sklearn.metrics.mean_squared_error(ts,forecast2)",CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(data=sensorTrain),CLUSTER_4,CLUSTER_11
prediction,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
blf,"sklearn.svm.SVC(kernel='linear',gamma='auto')",CLUSTER_4,CLUSTER_11
clf,"sklearn.svm.SVC(kernel='rbf',gamma=0.0001)",CLUSTER_4,CLUSTER_11
alf,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_4,CLUSTER_11
meteo,"pandas.DataFrame({""DATE"":meteo[""DATE""],
""TIME"":meteo[""TIME""],
""airT_Avg"":meteo[""airT_Avg""]})",CLUSTER_11,CLUSTER_3
soil,"pandas.DataFrame({""AÑO"":soil[""2Year_RTML""],
""DIA"":soil[""3Day_RTML""],
""HORA"":soil[""4Hour_Minute_RTML""],
""Tsuelo_10cm"":soil[""Tsuelo_10cm""],
""Tsuelo_20cm"":soil[""Tsuelo_20cm""],
""Tsuelo_40cm"":soil[""Tsuelo_40cm""],
""Tsuelo_85cm"":soil[""Tsuelo_85cm""]})",CLUSTER_11,CLUSTER_3
meteoDIA,"pandas.DataFrame({""FECHA"":meteoDIA[""DATE""],
""Tair_AvgDiaria"":meteoDIA[""Tair_AvgDiaria""],
""Tair_max"":meteoDIA[""Tair_max""],
""Tair_min"":meteoDIA[""Tair_min""]})",CLUSTER_11,CLUSTER_3
undia,"pandas.DataFrame({""HORA"":hora,
""Taire"":meteo1dia,
""Tsuelo_10cm"":soil1dia[""Tsuelo_10cm""],
""Tsuelo_20cm"":soil1dia[""Tsuelo_20cm""],
""Tsuelo_40cm"":soil1dia[""Tsuelo_40cm""],
""Tsuelo_85cm"":soil1dia[""Tsuelo_85cm""]})",CLUSTER_11,CLUSTER_3
MeteoEnero,"pandas.DataFrame({
""FECHA"":fecha,
""HORA"":hora,
""PROM"":promedios
})",CLUSTER_11,CLUSTER_3
meteo,"pandas.read_csv(""meteo-nogal-09.csv"",engine=""python"")",CLUSTER_11,CLUSTER_3
soil,"pandas.read_csv(""soil-nogal-09.csv"",engine=(""python"")",CLUSTER_11,CLUSTER_3
"meteo[""DATE""]","pandas.to_datetime(meteo[""DATE""],dayfirst=True)",CLUSTER_11,CLUSTER_3
solution,pandas.DataFrame(ss['Day.Index']),CLUSTER_7,CLUSTER_5
df,"pandas.concat([df,df_month],axis=1)",CLUSTER_7,CLUSTER_5
df,"pandas.concat([df,df_campaign],axis=1)",CLUSTER_7,CLUSTER_5
solution,"pandas.concat([solution,pd.DataFrame(predicted,columns=['Obtained.Leads'])",CLUSTER_7,CLUSTER_5
df_month,"pandas.get_dummies(df['Month'],prefix='month')",CLUSTER_7,CLUSTER_5
df_campaign,"pandas.get_dummies(df['Campaign'],prefix='campaign')",CLUSTER_7,CLUSTER_5
train,"pandas.read_csv('modified_train.csv',parse_dates=['Day.Index'],dayfirst=True)",CLUSTER_7,CLUSTER_5
test,"pandas.read_csv('modified_test.csv',parse_dates=['Day.Index'],dayfirst=True)",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv('modified_data.csv',parse_dates=['Day.Index'],dayfirst=True)",CLUSTER_7,CLUSTER_5
ss,pandas.read_csv('samplesubmission.csv'),CLUSTER_7,CLUSTER_5
xgb,pandas.read_csv(path+'solution1.csv'),CLUSTER_7,CLUSTER_5
Lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
population,"numpy.column_stack((height,weight)",CLUSTER_1,CLUSTER_10
_,matplotlib.pyplot.boxplot(height),CLUSTER_1,CLUSTER_10
_,matplotlib.pyplot.boxplot(weight),CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.grid(b=True,which='major',color='b',linestyle='-')",CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.grid(b=True,which='minor',color='r',linestyle='--')",CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.grid(b=True,which='major',color='b',linestyle='-')",CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.grid(b=True,which='minor',color='r',linestyle='--')",CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.hist(height,num_bins,facecolor='blue',alpha=0.5)",CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.hist(weight,num_bins,facecolor='blue',alpha=0.5)",CLUSTER_1,CLUSTER_10
_,"matplotlib.pyplot.scatter(height,weight,alpha=0.5,edgecolors='blue')",CLUSTER_1,CLUSTER_10
_,matplotlib.pyplot.xlabel('cm'),CLUSTER_1,CLUSTER_10
_,matplotlib.pyplot.xlabel('kg'),CLUSTER_1,CLUSTER_10
_,matplotlib.pyplot.yscale('linear'),CLUSTER_1,CLUSTER_10
_,matplotlib.pyplot.yscale('linear'),CLUSTER_1,CLUSTER_10
img,"matplotlib.pyplot.imread(os.path.join(path,imgpath)",CLUSTER_2,CLUSTER_0
pred,numpy.argmax(model.predict(generator['val']),CLUSTER_2,CLUSTER_0
imgpath,os.listdir(path),CLUSTER_2,CLUSTER_0
"train_frame,test_frame","sklearn.model_selection.train_test_split(image_dataframe,test_size=0.15,random_state=911)",CLUSTER_2,CLUSTER_0
Features,numpy.unique(df['property_type']),CLUSTER_7,CLUSTER_3
Features_ft,numpy.unique(df_filtered['property_type']),CLUSTER_7,CLUSTER_3
p10,"numpy.nanpercentile(df_filtered.price_usd_per_m2,10)",CLUSTER_7,CLUSTER_3
p90,"numpy.nanpercentile(df_filtered.price_usd_per_m2,90)",CLUSTER_7,CLUSTER_3
table,"pandas.crosstab(df_filtered_barrio_not_match.barrio,df_filtered_barrio_not_match.barrio_publicado)",CLUSTER_7,CLUSTER_3
table,"pandas.pivot_table(df,values='price_usd_per_m2',index=['barrio'],aggfunc=np.mean)",CLUSTER_7,CLUSTER_3
table,"pandas.pivot_table(df,values='price_usd_per_m2',index=['barrio'],aggfunc=np.mean)",CLUSTER_7,CLUSTER_3
df,"pandas.read_csv('./dataset/datos_properati.csv',index_col='created_on',parse_dates=True)",CLUSTER_7,CLUSTER_3
g,seaborn.distplot(df_filtered[df_filtered.barrio.isin(barrios_baratos),CLUSTER_7,CLUSTER_3
g,seaborn.distplot(df_filtered[df_filtered.barrio.isin(barrios_baratos),CLUSTER_7,CLUSTER_3
g,seaborn.distplot(df_filtered[df_filtered.barrio.isin(barrios_baratos),CLUSTER_7,CLUSTER_3
top_ch,numpy.arange(len(net.chars),CLUSTER_6,CLUSTER_6
encoded,numpy.array([char2int[ch]forchintext]),CLUSTER_6,CLUSTER_6
test_seq,"numpy.array([[3,5,1]])",CLUSTER_6,CLUSTER_6
x,numpy.array([[net.char2int[char]]]),CLUSTER_6,CLUSTER_6
one_hot,numpy.zeros((np.multiply(*arr.shape),CLUSTER_6,CLUSTER_6
df,pandas.read_csv('iris.csv'),CLUSTER_5,CLUSTER_5
x1,"numpy.linspace(0.0,50.0,50)",CLUSTER_5,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=2,figsize=(10,7)",CLUSTER_5,CLUSTER_5
"train_X,test_X,train_y,test_y","sklearn.model_selection.train_test_split(features,label,test_size=0.2,random_state=33)",CLUSTER_5,CLUSTER_5
dfclass,pandas.read_csv(PATH/'train_classes.csv'),CLUSTER_6,CLUSTER_9
dfbb,pandas.read_csv(PATH/'train_bbs.csv'),CLUSTER_6,CLUSTER_9
lrs,"numpy.array([lr/100,lr/10,lr])",CLUSTER_6,CLUSTER_9
lrs,"numpy.array([lr/100,lr/10,lr])",CLUSTER_6,CLUSTER_9
c,numpy.argmax(y[i][4:]),CLUSTER_6,CLUSTER_9
bb,scipy.special.expit(y[i][:4]),CLUSTER_6,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,6)",CLUSTER_5,CLUSTER_9
results,"numpy.zeros((3,len(hs)",CLUSTER_5,CLUSTER_9
results,"numpy.zeros((3,len(hs)",CLUSTER_5,CLUSTER_9
mu,numpy.mean(data),CLUSTER_5,CLUSTER_9
train_matrix,"numpy.repeat([train],len(test)",CLUSTER_5,CLUSTER_9
m,numpy.hstack([np.zeros(67),CLUSTER_5,CLUSTER_9
data,"numpy.vstack([class1,class2])",CLUSTER_5,CLUSTER_9
res,"scipy.stats.cumfreq(i,100)",CLUSTER_5,CLUSTER_9
"train,test","sklearn.model_selection.train_test_split(image0,train_size=100)",CLUSTER_5,CLUSTER_9
x,"pandas.get_dummies(x,columns=['Pclass',""Sex"",""Embarked""])",CLUSTER_7,CLUSTER_5
df_test,"pandas.get_dummies(df_test,columns=['Pclass',""Sex"",""Embarked""])",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""train.csv"")",CLUSTER_7,CLUSTER_5
test,"pandas.read_csv(""test.csv"")",CLUSTER_7,CLUSTER_5
imputer,"sklearn.impute.SimpleImputer(missing_values=np.nan,strategy=""mean"")",CLUSTER_7,CLUSTER_5
imputer_test1,"sklearn.impute.SimpleImputer(missing_values=np.nan,strategy=""mean"")",CLUSTER_7,CLUSTER_5
imputer_test1,"sklearn.impute.SimpleImputer(missing_values=np.nan,strategy=""median"")",CLUSTER_7,CLUSTER_5
labelencoder_train1,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
labelencoder_train1,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
labelencoder_test1,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
labelencoder_test2,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler_test,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=17)",CLUSTER_7,CLUSTER_5
gcv_lgr,"sklearn.model_selection.GridSearchCV(lgr,lgr_params,n_jobs=-1,cv=10,verbose=1)",CLUSTER_7,CLUSTER_5
knn_gcv,"sklearn.model_selection.GridSearchCV(knn,knn_params,n_jobs=-1,cv=10,verbose=1)",CLUSTER_7,CLUSTER_5
rfc_gcv,"sklearn.model_selection.GridSearchCV(rfc,rfc_params,n_jobs=-1,cv=10,verbose=1)",CLUSTER_7,CLUSTER_5
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=42,n_jobs=-1)",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
lgr,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_5
logits,"numpy.linspace(-6,6,200)",CLUSTER_5,CLUSTER_5
X_train,"pandas.DataFrame(
dv.fit_transform(X_train.to_dict(orient='records')",CLUSTER_5,CLUSTER_5
X_test,"pandas.DataFrame(
dv.transform(X_test.to_dict(orient='records')",CLUSTER_5,CLUSTER_5
c,"pandas.DataFrame(
confusion_matrix(y_test,pred)",CLUSTER_5,CLUSTER_5
pltdf,"pandas.DataFrame({
'Class':y_test,
'pred':lr.predict_proba(X_test)",CLUSTER_5,CLUSTER_5
ax,"pandas.DataFrame({'probs':probs},index=logits)",CLUSTER_5,CLUSTER_5
ax,"pandas.DataFrame({'probs':probs},index=logits)",CLUSTER_5,CLUSTER_5
c,"pandas.DataFrame(
confusion_matrix(y_test,pred)",CLUSTER_5,CLUSTER_5
df,pandas.read_csv('abalone19.csv'),CLUSTER_5,CLUSTER_5
_,"matplotlib.pyplot.plot(fpr,tpr)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df[predictors],df[target],random_state=2)",CLUSTER_5,CLUSTER_5
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
dv,sklearn.feature_extraction.DictVectorizer(sparse=False),CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
"fpr,tpr,thresh","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_5,CLUSTER_5
"fpr,tpr,thresh","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_5,CLUSTER_5
"fpr,tpr,thresh","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_5,CLUSTER_5
"fpr,tpr,thresh","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_5,CLUSTER_5
"fpr,tpr,thresh","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_5,CLUSTER_5
"fpr,tpr,thresh","sklearn.metrics.roc_curve(y_test,pred)",CLUSTER_5,CLUSTER_5
standard_auc,"sklearn.metrics.roc_auc_score(y_test,pred)",CLUSTER_5,CLUSTER_5
poly_auc,"sklearn.metrics.roc_auc_score(y_test,pred)",CLUSTER_5,CLUSTER_5
rf_auc,"sklearn.metrics.roc_auc_score(y_test,pred)",CLUSTER_5,CLUSTER_5
poly,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_5,CLUSTER_5
poly,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_5,CLUSTER_5
lrcv,sklearn.linear_model.LogisticRegressionCV(scoring='roc_auc'),CLUSTER_5,CLUSTER_5
polylr,"sklearn.pipeline.Pipeline([('poly',poly)",CLUSTER_5,CLUSTER_5
gb,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_5,CLUSTER_5
item_table_df,pandas.DataFrame(item_table),CLUSTER_8,CLUSTER_4
movie_df,pandas.read_csv('dataset/movies.csv'),CLUSTER_8,CLUSTER_4
self.context,numpy.array(context),CLUSTER_3,CLUSTER_6
context,"numpy.array([[1,2],[4,5],[7,8]])",CLUSTER_3,CLUSTER_6
context,"numpy.array([[1,2],[4,5],[7,8]])",CLUSTER_3,CLUSTER_6
context,"numpy.array([[1,2],[4,5],[7,8]])",CLUSTER_3,CLUSTER_6
self.b,numpy.zeros(n_features),CLUSTER_3,CLUSTER_6
assert(lu.b,=numpy.zeros(n_features),CLUSTER_3,CLUSTER_6
assertselected_arm,=numpy.argmax(ucb_score),CLUSTER_3,CLUSTER_6
index,numpy.argmax(np.asarray(cosine_similarities),CLUSTER_11,CLUSTER_1
data,"pandas.read_csv(""C:/Users/JRF/Desktop/CGCB/Data/FAQ.csv"")",CLUSTER_11,CLUSTER_1
a,datetime.datetime.now(),CLUSTER_11,CLUSTER_1
b,datetime.datetime.now(),CLUSTER_11,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_11,CLUSTER_11
ax,matplotlib.pyplot.subplot(111),CLUSTER_11,CLUSTER_11
ax,matplotlib.pyplot.subplot(111),CLUSTER_11,CLUSTER_11
ax,matplotlib.pyplot.subplot(111),CLUSTER_11,CLUSTER_11
df,"pandas.DataFrame(data=log_df,columns=cols)",CLUSTER_11,CLUSTER_11
df,"pandas.DataFrame(data=log_df,columns=cols)",CLUSTER_11,CLUSTER_11
df,"pandas.DataFrame(data=log_df,columns=cols)",CLUSTER_11,CLUSTER_11
df['Date'],pandas.to_datetime(df['GAME_DATE']),CLUSTER_11,CLUSTER_11
df['Date'],pandas.to_datetime(df['GAME_DATE']),CLUSTER_11,CLUSTER_11
df['Date'],pandas.to_datetime(df['GAME_DATE']),CLUSTER_11,CLUSTER_11
label_date,"datetime.datetime(2018,4,12,0,0)",CLUSTER_11,CLUSTER_11
label_date,"datetime.datetime(2018,4,12,0,0)",CLUSTER_11,CLUSTER_11
label_date,"datetime.datetime(2018,4,12,0,0)",CLUSTER_11,CLUSTER_11
season_start,"datetime.datetime(2018,10,15,0,0)",CLUSTER_11,CLUSTER_11
nov,"datetime.datetime(2018,11,1,0,0)",CLUSTER_11,CLUSTER_11
nov_mid,"datetime.datetime(2018,11,15,0,0)",CLUSTER_11,CLUSTER_11
dec,"datetime.datetime(2018,12,1,0,0)",CLUSTER_11,CLUSTER_11
dec_mid,"datetime.datetime(2018,12,15,0,0)",CLUSTER_11,CLUSTER_11
jan,"datetime.datetime(2019,1,1,0,0)",CLUSTER_11,CLUSTER_11
jan_mid,"datetime.datetime(2019,1,12,0,0)",CLUSTER_11,CLUSTER_11
label_date,"datetime.datetime(2019,1,13,0,0)",CLUSTER_11,CLUSTER_11
season_start,"datetime.datetime(2018,10,15,0,0)",CLUSTER_11,CLUSTER_11
nov,"datetime.datetime(2018,11,1,0,0)",CLUSTER_11,CLUSTER_11
nov_mid,"datetime.datetime(2018,11,15,0,0)",CLUSTER_11,CLUSTER_11
dec,"datetime.datetime(2018,12,1,0,0)",CLUSTER_11,CLUSTER_11
dec_mid,"datetime.datetime(2018,12,15,0,0)",CLUSTER_11,CLUSTER_11
jan,"datetime.datetime(2019,1,1,0,0)",CLUSTER_11,CLUSTER_11
jan_mid,"datetime.datetime(2019,1,12,0,0)",CLUSTER_11,CLUSTER_11
label_date,"datetime.datetime(2019,1,14,0,0)",CLUSTER_11,CLUSTER_11
df,"pandas.DataFrame(randn(5,4)",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(6,2)",CLUSTER_8,CLUSTER_3
df,pandas.read_csv('time_data/walmart_stock.csv'),CLUSTER_1,CLUSTER_3
boston_dataset,sklearn.datasets.load_boston(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,
test_size=0.2,
random_state=10)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,
test_size=0.2,
random_state=10)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,
test_size=0.2,
random_state=10)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,
test_size=0.2,
random_state=10)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,
test_size=0.2,
random_state=10)",CLUSTER_7,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
data,"pandas.DataFrame(data=boston_dataset.data,columns=boston_dataset.feature_names)",CLUSTER_7,CLUSTER_5
org_coef,"pandas.DataFrame({'coef':results.params,'p-value':round(results.pvalues,3)",CLUSTER_7,CLUSTER_5
coef_minus_indus,"pandas.DataFrame({'coef':results.params,'p-value':round(results.pvalues,3)",CLUSTER_7,CLUSTER_5
reduced_coef,"pandas.DataFrame({'coef':results.params,'p-value':round(results.pvalues,3)",CLUSTER_7,CLUSTER_5
mask,numpy.zeros_like(data.corr(),CLUSTER_7,CLUSTER_5
y_log,numpy.log(data['price']),CLUSTER_7,CLUSTER_5
prices,numpy.log(data['price']),CLUSTER_7,CLUSTER_5
prices,numpy.log(data['price']),CLUSTER_7,CLUSTER_5
prices,numpy.log(data['price']),CLUSTER_7,CLUSTER_5
upper_bound,numpy.log(30),CLUSTER_7,CLUSTER_5
lower_bound,numpy.log(30),CLUSTER_7,CLUSTER_5
triangle_indices,numpy.triu_indices_from(mask),CLUSTER_7,CLUSTER_5
precipitation_data_df,pandas.DataFrame(precipitation_data),CLUSTER_1,CLUSTER_3
similarity,numpy.zeros(self.founders.shape[0]),CLUSTER_8,CLUSTER_3
self.sum_of_weights,numpy.sum(weights),CLUSTER_8,CLUSTER_3
founders,"pandas.read_csv(""data/cleaned_input_data.csv"",encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
output,"pandas.read_csv(""data/cleaned_output_data.csv"",encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
weight_df,"pandas.read_csv(""data/weights.csv"",encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
data,json.load(infile),CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('score.sc',header=0,sep='\s+')",CLUSTER_8,CLUSTER_3
recent_grads,pandas.read_csv('recent-grads.csv'),CLUSTER_8,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(5,12)",CLUSTER_8,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(5,12)",CLUSTER_8,CLUSTER_3
reordered,"numpy.zeros((n_nodes,n_nodes)",CLUSTER_5,CLUSTER_9
D_sqrt_inv,numpy.sqrt(np.linalg.inv(D),CLUSTER_5,CLUSTER_9
D_largest_sqrt_inv,numpy.sqrt(np.linalg.inv(D_largest),CLUSTER_5,CLUSTER_9
D,"numpy.diag(np.sum(adjacency,axis=0)",CLUSTER_5,CLUSTER_9
D_largest,"numpy.diag(np.sum(largest_adjacency,axis=0)",CLUSTER_5,CLUSTER_9
adjacency,numpy.load('../data/adj_matr.npy'),CLUSTER_5,CLUSTER_9
largest_adjacency,numpy.load('../data/largest_connected_component_adjacency.npy'),CLUSTER_5,CLUSTER_9
"(eigval,eigvect)",numpy.linalg.eigh(laplacian),CLUSTER_5,CLUSTER_9
laplacian_combinatorial_largest,scipy.sparse.csr_matrix(laplacian_combinatorial_largest),CLUSTER_5,CLUSTER_9
laplacian_normalized_largest,scipy.sparse.csr_matrix(laplacian_normalized_largest),CLUSTER_5,CLUSTER_9
kmeans,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_5,CLUSTER_9
kmeans_norm,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_5,CLUSTER_9
files,os.listdir(dir),CLUSTER_4,CLUSTER_11
time,numpy.array(time),CLUSTER_4,CLUSTER_11
spectra,numpy.array(spectra),CLUSTER_4,CLUSTER_11
spectra_errors,numpy.array(spectra_errors),CLUSTER_4,CLUSTER_11
new_errors,"numpy.array([np.std(spectra,axis=0)",CLUSTER_4,CLUSTER_11
alligned_profile,"numpy.mean(alligned_model,axis=0)",CLUSTER_4,CLUSTER_11
scale,numpy.sqrt(3.0),CLUSTER_4,CLUSTER_11
master_dat,numpy.loadtxt('sodium_spectrum.dat'),CLUSTER_4,CLUSTER_11
master_dat,numpy.loadtxt('sodium_spectrum.dat'),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(5,2,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(5,2,sharex=True)",CLUSTER_4,CLUSTER_11
dataFrame,pandas.read_csv(path),CLUSTER_8,CLUSTER_3
x,numpy.arange(N[-1]),CLUSTER_3,CLUSTER_10
x,numpy.arange(N[-1]),CLUSTER_3,CLUSTER_10
N,"numpy.arange(1,20)",CLUSTER_3,CLUSTER_10
x,numpy.sort(x),CLUSTER_3,CLUSTER_10
x,numpy.sort(x),CLUSTER_3,CLUSTER_10
start,time.time(),CLUSTER_6,CLUSTER_12
start,time.time(),CLUSTER_6,CLUSTER_12
"fig,ax","matplotlib.pyplot.subplots(1,figsize=(20,20)",CLUSTER_12,CLUSTER_3
data_tables_sources,pandas.DataFrame(data),CLUSTER_12,CLUSTER_3
ddeaths_by_county,pandas.DataFrame(hist_tornadoes.groupby(['county']),CLUSTER_12,CLUSTER_3
ideaths_by_county,pandas.DataFrame(hist_tornadoes.groupby(['county']),CLUSTER_12,CLUSTER_3
dinjuries_by_county,pandas.DataFrame(hist_tornadoes.groupby(['county']),CLUSTER_12,CLUSTER_3
iinjuries_by_county,pandas.DataFrame(hist_tornadoes.groupby(['county']),CLUSTER_12,CLUSTER_3
props_by_county,pandas.DataFrame(hist_tornadoes.groupby(['county']),CLUSTER_12,CLUSTER_3
crops_by_county,pandas.DataFrame(hist_tornadoes.groupby(['county']),CLUSTER_12,CLUSTER_3
tncensus2,"pandas.merge(socio,mob2,left_on='GEO_ID',right_on='GEO_ID',how='left')",CLUSTER_12,CLUSTER_3
both,"pandas.merge(history_tornadoes,len_magnitude_by_county,left_on='GeoID',right_on='GEOID',how='left')",CLUSTER_12,CLUSTER_3
final,"pandas.merge(both,tn_county_UTM,left_on='GeoID',right_on='GEOID',how='left')",CLUSTER_12,CLUSTER_3
socio,pandas.read_csv('ACSST5Y2018.S0601_data_with_overlays_2020-04-04T144327.csv'),CLUSTER_12,CLUSTER_3
mob2,pandas.read_csv('ACSST5Y2018.S1101_data_with_overlays_2020-04-04T143749.csv'),CLUSTER_12,CLUSTER_3
tor1,pandas.read_csv('C:\\Users\\caitl\\Documents\\Lehman\\Spring2020\\GEP662ProgrammingforGIS\\FinalProject\\Tornadoes\\1150_123190.csv'),CLUSTER_12,CLUSTER_3
tor2,pandas.read_csv('C:\\Users\\caitl\\Documents\\Lehman\\Spring2020\\GEP662ProgrammingforGIS\\FinalProject\\Tornadoes\\1191_123108.csv'),CLUSTER_12,CLUSTER_3
tor3,pandas.read_csv('C:\\Users\\caitl\\Documents\\Lehman\\Spring2020\\GEP662ProgrammingforGIS\\FinalProject\\Tornadoes\\1109_123119.csv'),CLUSTER_12,CLUSTER_3
history['inc-vul'],numpy.where(history['Med_inc']<=(incquant1),CLUSTER_12,CLUSTER_3
history['inc-vul'],numpy.where(history['Med_inc']>(incquant3),CLUSTER_12,CLUSTER_3
history['inc-vul'],numpy.where((history['Med_inc']>(incquant1),CLUSTER_12,CLUSTER_3
history['inc-vul'],numpy.where((history['Med_inc']>(incquant2),CLUSTER_12,CLUSTER_3
index,"numpy.arange(1,predicted_labels.shape[0]+1)",CLUSTER_7,CLUSTER_8
predicted_df,"pandas.DataFrame(predicted_labels,
index=np.arange(1,predicted_labels.shape[0]+1)",CLUSTER_7,CLUSTER_8
train_test_df,"pandas.concat([train_df,test_df],sort=False)",CLUSTER_7,CLUSTER_8
X_add,"pandas.get_dummies(X_add,columns=features_cat)",CLUSTER_7,CLUSTER_8
data,"pandas.get_dummies(data,columns=features_cat)",CLUSTER_7,CLUSTER_8
train_df,"pandas.read_csv(os.path.join(PATH_TO_DATA,'train_sessions.csv')",CLUSTER_7,CLUSTER_8
test_df,"pandas.read_csv(os.path.join(PATH_TO_DATA,'test_sessions.csv')",CLUSTER_7,CLUSTER_8
X_train,"scipy.sparse.hstack((X_train_sparse,X_add.values[:train_df.shape[0]])",CLUSTER_7,CLUSTER_8
X_test,"scipy.sparse.hstack((X_test_sparse,X_add.values[train_df.shape[0]:])",CLUSTER_7,CLUSTER_8
X_tf_idf_train,"scipy.sparse.hstack((X_tf_idf_train_sparse,X_add.values[:train_df.shape[0]])",CLUSTER_7,CLUSTER_8
X_tf_idf_test,"scipy.sparse.hstack((X_tf_idf_test_sparse,X_add.values[train_df.shape[0]:])",CLUSTER_7,CLUSTER_8
X_tf_idf_train,"scipy.sparse.hstack((X_tf_idf_train_sparse,data.values[:train_df.shape[0]])",CLUSTER_7,CLUSTER_8
X_tf_idf_test,"scipy.sparse.hstack((X_tf_idf_test_sparse,data.values[train_df.shape[0]:])",CLUSTER_7,CLUSTER_8
train_test_sparse,"scipy.sparse.csr_matrix((data,(row,column)",CLUSTER_7,CLUSTER_8
X_add[features_scale],sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
data[features_scale],sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
logit,"sklearn.linear_model.LogisticRegression(C=1,random_state=17)",CLUSTER_7,CLUSTER_8
cv_skf_scores,"sklearn.model_selection.cross_val_score(logit,X_train_sparse,y,cv=skf,scoring='roc_auc',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_time_scores,"sklearn.model_selection.cross_val_score(logit,X_train_sparse,y,cv=time_split,scoring='roc_auc',n_jobs=-1)",CLUSTER_7,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=3,shuffle=True,random_state=17)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_skf,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=skf)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_time,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=time_split)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_skf_new_fe,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=skf)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_time_new_fe,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=time_split)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_skf_new_fe_tf_idf,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=skf)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_time_new_fe_tf_idf,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=time_split)",CLUSTER_7,CLUSTER_8
logit_grid_searcher_final,"sklearn.model_selection.GridSearchCV(estimator=logit,param_grid=params,scoring='roc_auc',n_jobs=-1,cv=time_split)",CLUSTER_7,CLUSTER_8
time_split,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
del_w_input_hidden,numpy.zeros(weights_input_hidden.shape),CLUSTER_8,CLUSTER_3
del_w_hidden_output,numpy.zeros(weights_hidden_output.shape),CLUSTER_8,CLUSTER_3
hidden_input,"numpy.dot(x,del_w_input_hidden)",CLUSTER_8,CLUSTER_3
input_from_hidden_to_output,"numpy.dot(hidden_activations,del_w_hidden_output)",CLUSTER_8,CLUSTER_3
hidden_error,"numpy.dot(del_w_input_hidden,output_error)",CLUSTER_8,CLUSTER_3
loss,numpy.mean((out-targets),CLUSTER_8,CLUSTER_3
accuracy,numpy.mean(predictions==targets_test),CLUSTER_8,CLUSTER_3
data,"pandas.concat([admissions,pd.get_dummies(admissions['rank'],prefix='rank')",CLUSTER_8,CLUSTER_3
admissions,pandas.read_csv('binary.csv'),CLUSTER_8,CLUSTER_3
X_train,numpy.array(X_train),CLUSTER_4,CLUSTER_0
X_test,numpy.array(X_test),CLUSTER_4,CLUSTER_0
y_pred_classes,"numpy.argmax(y_pred,axis=1)",CLUSTER_4,CLUSTER_0
y_true,"numpy.argmax(y_val,axis=1)",CLUSTER_4,CLUSTER_0
y_pred_classes2,"numpy.argmax(y_pred2,axis=1)",CLUSTER_4,CLUSTER_0
y_true2,"numpy.argmax(Y_test,axis=1)",CLUSTER_4,CLUSTER_0
conf_mat,"sklearn.metrics.confusion_matrix(y_true,y_pred_classes)",CLUSTER_4,CLUSTER_0
conf_mat2,"sklearn.metrics.confusion_matrix(y_true2,y_pred_classes2)",CLUSTER_4,CLUSTER_0
"x_train,x_val,y_train,y_val","sklearn.model_selection.train_test_split(X_train,Y_train,
test_size=0.2,random_state=50)",CLUSTER_4,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(25,24)",CLUSTER_4,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(25,24)",CLUSTER_4,CLUSTER_0
data['readmit_dt'],numpy.zeros(data.shape[0]),CLUSTER_1,CLUSTER_3
data['next_readmit_dt'],numpy.zeros(data.shape[0]),CLUSTER_1,CLUSTER_3
data,"pandas.read_sql_query(query,con)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_1,CLUSTER_3
ld_all,"pandas.concat([ld_train,ld_test],axis=0)",CLUSTER_5,CLUSTER_1
ld_train,pandas.read_csv(train_file),CLUSTER_5,CLUSTER_1
ld_test,pandas.read_csv(test_file),CLUSTER_5,CLUSTER_1
ld_all[col],"pandas.to_numeric(ld_all[col],errors='coerce')",CLUSTER_5,CLUSTER_1
ld_all['Employment.Length'],"pandas.to_numeric(ld_all['Employment.Length'],errors='coerce')",CLUSTER_5,CLUSTER_1
ld_all['Employment.Length'],"numpy.where(ld_all['Employment.Length'].str[:2]=='10',10,ld_all['Employment.Length'])",CLUSTER_5,CLUSTER_1
ld_all['Employment.Length'],"numpy.where(ld_all['Employment.Length'].str[:0]=='<',0,ld_all['Employment.Length'])",CLUSTER_5,CLUSTER_1
lambdas,"numpy.linspace(1,100,100)",CLUSTER_5,CLUSTER_1
lambdas,"numpy.linspace(1,10,100)",CLUSTER_5,CLUSTER_1
"ld_train1,ld_train2","sklearn.model_selection.train_test_split(ld_train,test_size=0.2,random_state=2)",CLUSTER_5,CLUSTER_1
lm,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
model,sklearn.linear_model.Ridge(fit_intercept=True),CLUSTER_5,CLUSTER_1
model,sklearn.linear_model.Lasso(fit_intercept=True),CLUSTER_5,CLUSTER_1
grid_search,"sklearn.model_selection.GridSearchCV(model,param_grid=params,cv=10,scoring='neg_mean_absolute_error')",CLUSTER_5,CLUSTER_1
grid_search,"sklearn.model_selection.GridSearchCV(model,param_grid=params,cv=10,scoring='neg_mean_absolute_error')",CLUSTER_5,CLUSTER_1
row_indices,numpy.arange(4),CLUSTER_12,CLUSTER_9
col_indices,numpy.arange(4),CLUSTER_12,CLUSTER_9
x,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_12,CLUSTER_9
X_new,"numpy.array([[5,2.9,1,0.2]])",CLUSTER_12,CLUSTER_9
data,numpy.ones(4),CLUSTER_12,CLUSTER_9
y,numpy.sin(x),CLUSTER_12,CLUSTER_9
x,"numpy.linspace(-10,10,100)",CLUSTER_12,CLUSTER_9
eye,numpy.eye(4),CLUSTER_12,CLUSTER_9
eye_coo,"scipy.sparse.coo_matrix((data,(row_indices,col_indices)",CLUSTER_12,CLUSTER_9
sparse_matrix,scipy.sparse.csr_matrix(eye),CLUSTER_12,CLUSTER_9
data_pandas,pandas.DataFrame(data),CLUSTER_12,CLUSTER_9
iris_dataframe,"pandas.DataFrame(X_train,columns=iris_dataset.feature_names)",CLUSTER_12,CLUSTER_9
iris_dataset,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
iris_dataset['data'],iris_dataset['target'],random_state=0)",CLUSTER_12,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
iris_dataset['data'],iris_dataset['target'],random_state=0)",CLUSTER_12,CLUSTER_9
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_12,CLUSTER_9
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_12,CLUSTER_9
d,collections.defaultdict(int),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_10
resampled,"pandas.DataFrame(X_res,columns=X.columns)",CLUSTER_5,CLUSTER_0
df,"pandas.concat([data,labels],axis=1)",CLUSTER_5,CLUSTER_0
data,"pandas.read_csv(url_data,sep="""",names=names,header=None,dtype=None)",CLUSTER_5,CLUSTER_0
labels,"pandas.read_csv(url_classifications,sep="""",names=[""classification"",""date""],parse_dates=[""date""])",CLUSTER_5,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=5)",CLUSTER_5,CLUSTER_0
y,numpy.log(Y_triptime.tolist(),CLUSTER_5,CLUSTER_5
model,"sklearn.neural_network.MLPRegressor(early_stopping=True,alpha=0.1)",CLUSTER_5,CLUSTER_5
clf2,"sklearn.model_selection.GridSearchCV(model,param_grid,cv=2,scoring='neg_mean_squared_error',
n_jobs=-1)",CLUSTER_5,CLUSTER_5
"Xtrain,Xval,Ztrain,Zval","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
"Xcv,Xv,Zcv,Zv","sklearn.model_selection.train_test_split(Xval,Zval,test_size=0.5,random_state=1)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_5,CLUSTER_5
ax,seaborn.heatmap(heatmap_df),CLUSTER_0,CLUSTER_5
pareto,"pandas.DataFrame({'gb':gb[mask],
'cumu_sum':cumu_sum[cumu_sum<=0.8*gb.sum()",CLUSTER_0,CLUSTER_5
pareto,"pandas.DataFrame({'gb':gb[mask],
'cumu_sum':cumu_sum[cumu_sum<=0.8*gb.sum()",CLUSTER_0,CLUSTER_5
heatmap_df,"pandas.DataFrame(data=None,columns=top_n_volunteers,index=top_n_volunteers)",CLUSTER_0,CLUSTER_5
contin_tb,pandas.DataFrame(data=np.zeros((len(unique_vals),CLUSTER_0,CLUSTER_5
reliability_df,"pandas.concat((avg_kappa,num_clfs)",CLUSTER_0,CLUSTER_5
df,pandas.read_excel('mp_data.xlsx'),CLUSTER_0,CLUSTER_5
df['Class_Date'],pandas.to_datetime(pandas.to_datetime(df['Class_Date']),CLUSTER_0,CLUSTER_5
contin_tb,pd.DataFrame(data=numpy.zeros((len(unique_vals),CLUSTER_0,CLUSTER_5
cumu_sum,numpy.cumsum(gb),CLUSTER_0,CLUSTER_5
cumu_sum,numpy.cumsum(gb),CLUSTER_0,CLUSTER_5
agreements,numpy.trace(contin_tb),CLUSTER_0,CLUSTER_5
cohen_kappa,"sklearn.metrics.cohen_kappa_score(user_vector,other_user_vector)",CLUSTER_0,CLUSTER_5
word_vectors,"numpy.empty((0,100)",CLUSTER_5,CLUSTER_10
word_vectors,"numpy.append(word_vectors,np.array([model.wv[word]])",CLUSTER_5,CLUSTER_10
word_vectors,"numpy.append(word_vectors,np.array([model.wv[w]])",CLUSTER_5,CLUSTER_10
tsne,sklearn.manifold.TSNE(random_state=0),CLUSTER_5,CLUSTER_10
new_bias,"numpy.array([0.,0.,0.,1.,0.,0.,0.,0.])",CLUSTER_2,CLUSTER_7
start,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
elapsed,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
rnd_num,"random.randint(0,100)",CLUSTER_4,CLUSTER_7
counts,collections.Counter(words),CLUSTER_4,CLUSTER_7
val_content,json.load(f),CLUSTER_4,CLUSTER_7
train_content,json.load(f),CLUSTER_4,CLUSTER_7
perplexity,math.exp(sum_losses/sum_weights),CLUSTER_4,CLUSTER_7
input_feed_val,numpy.array([c.sentence[-1]forcinpartial_captions_list]),CLUSTER_4,CLUSTER_7
state_feed_val,numpy.array([c.stateforcinpartial_captions_list]),CLUSTER_4,CLUSTER_7
sum_losses+,numpy.sum(losses_val*weights_val),CLUSTER_4,CLUSTER_7
sum_weights+,numpy.sum(weights_val),CLUSTER_4,CLUSTER_7
ratings,pandas.DataFrame(df.groupby('title'),CLUSTER_7,CLUSTER_3
ratings['numofratings'],pandas.DataFrame(df.groupby('title'),CLUSTER_7,CLUSTER_3
corr_starwars,"pandas.DataFrame(similar_to_starwars,columns=['Correlation'])",CLUSTER_7,CLUSTER_3
corr_liarliar,"pandas.DataFrame(similar_to_liarliar,columns=['Correlation'])",CLUSTER_7,CLUSTER_3
df,"pandas.merge(df,movie_titles,on='item_id')",CLUSTER_7,CLUSTER_3
df,"pandas.read_csv('u.data',sep='\t',names=column_names)",CLUSTER_7,CLUSTER_3
movie_titles,"pandas.read_csv(""Movie_Id_Titles"")",CLUSTER_7,CLUSTER_3
fan_in,numpy.prod(shape[1:]),CLUSTER_6,CLUSTER_6
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
venue_id_recover,pandas.DataFrame(columns=venue_id_rcols),CLUSTER_9,CLUSTER_2
venue_DF,pandas.DataFrame(columns=venue_columns),CLUSTER_9,CLUSTER_2
venue_id_recover,pandas.DataFrame(columns=venue_id_rcols),CLUSTER_9,CLUSTER_2
singapore_town_venues,pandas.DataFrame(columns=venue_columns),CLUSTER_9,CLUSTER_2
town_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
singapore_town_venues,"pandas.concat([singapore_town_venues,tmp],ignore_index=True)",CLUSTER_9,CLUSTER_2
singapore_town_venues,"pandas.concat([singapore_food_venues,singapore_outdoor_venues_by_town,singapore_Nightlife_by_town],ignore_index=True)",CLUSTER_9,CLUSTER_2
sg_onehot,"pandas.get_dummies(singapore_town_venues[['category']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
sgp_median_rent_by_town_data,"pandas.read_csv(zf.open(""median-rent-by-town-and-flat-type.csv"")",CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=1)",CLUSTER_9,CLUSTER_2
lat,requests.get(url),CLUSTER_9,CLUSTER_2
lng,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
venID_result,requests.get(venID_URL),CLUSTER_9,CLUSTER_2
range_idxs,"numpy.array([range_idx],dtype=np.int32)",CLUSTER_3,CLUSTER_6
a_probs_each_model,"numpy.array([
weight*strat.get_a_probs(pub_obses=[pub_obs],
range_idxs=[range_idx],
legal_actions_lists=[legal_actions_list]
)",CLUSTER_3,CLUSTER_6
range_idxs,"numpy.array([range_idx],dtype=np.int32)",CLUSTER_3,CLUSTER_6
prob_a_each_model_each_timestep,"numpy.array(
[
model.get_a_probs(
pub_obses=H['pub_obs_batch'],
range_idxs=[range_idx]*H['len'],
legal_actions_lists=H['legal_action_list_batch'],
)",CLUSTER_3,CLUSTER_6
range_idxs,numpy.array(non_zero_hands),CLUSTER_3,CLUSTER_6
contrib_each_model,"numpy.zeros(
shape=(n_models,self.env_bldr.rules.RANGE_SIZE,self.env_bldr.N_ACTIONS)",CLUSTER_3,CLUSTER_6
reach_hist,"numpy.zeros(shape=(H['len'],self.env_bldr.rules.RANGE_SIZE)",CLUSTER_3,CLUSTER_6
reaches,numpy.empty(shape=(len(models),CLUSTER_3,CLUSTER_6
unif_rand_legal,"numpy.full(
shape=self.env_bldr.N_ACTIONS,
fill_value=1.0/len(legal_actions_list)",CLUSTER_3,CLUSTER_6
unif_rand_legal,"numpy.full(
shape=self.env_bldr.N_ACTIONS,
fill_value=1.0/len(legal_actions_list)",CLUSTER_3,CLUSTER_6
range_idxs,numpy.nonzero(reaches[m_i]),CLUSTER_3,CLUSTER_6
reaches[m_i],"numpy.prod(reach_hist,axis=0)",CLUSTER_3,CLUSTER_6
a_probs,"numpy.sum(a_probs_each_model,axis=0)",CLUSTER_3,CLUSTER_6
a_probs_sum,numpy.sum(a_probs),CLUSTER_3,CLUSTER_6
a_probs_sum,"numpy.expand_dims(np.sum(a_probs,axis=1)",CLUSTER_3,CLUSTER_6
a_probs_each_model*,"numpy.expand_dims(self._get_reach_for_each_model(
p_id_acting=p_id_acting,
range_idx=range_idx,
)",CLUSTER_3,CLUSTER_6
district_summary_df,"pandas.DataFrame(
[{""TotalSchools"":school_count,
""TotalStudents"":student_count,
""TotalBudget"":total_budget,
""AverageMathScore"":average_math_score,
""AverageReadingScore"":average_reading_score,
""%PassingMath"":passing_math_percentage,
""%PassingReading"":passing_reading_percentage,
""%OverallPassing"":overall_passing_percentage}])",CLUSTER_8,CLUSTER_11
df,pandas.DataFrame(per_school_types),CLUSTER_8,CLUSTER_11
per_school_summary_df,"pandas.DataFrame({
""SchoolType"":per_school_types,
""TotalStudents"":per_school_counts,
""TotalSchoolBudget"":per_school_budget,
""PerStudentBudget"":per_school_capita,
""AverageMathScore"":per_school_math,
""AverageReadingScore"":per_school_reading,
""%PassingMath"":per_school_passing_math,
""%PassingReading"":per_school_passing_reading,
""%OverallPassing"":per_overall_passing_percentage})",CLUSTER_8,CLUSTER_11
math_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_math_scores,
""10th"":tenth_grade_math_scores,
""11th"":eleventh_grade_math_scores,
""12th"":twelfth_grade_math_scores})",CLUSTER_8,CLUSTER_11
reading_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_reading_scores,
""10th"":tenth_grade_reading_scores,
""11th"":eleventh_grade_reading_scores,
""12th"":twelfth_grade_reading_scores})",CLUSTER_8,CLUSTER_11
spending_summary_df,"pandas.DataFrame({
""AverageMathScore"":spending_math_scores,
""AverageReadingScore"":spending_reading_scores,
""%PassingMath"":spending_passing_math,
""%PassingReading"":spending_passing_reading,
""%OverallPassing"":overall_passing_spending})",CLUSTER_8,CLUSTER_11
size_summary_df,"pandas.DataFrame({
""AverageMathScore"":size_math_scores,
""AverageReadingScore"":size_reading_scores,
""%PassingMath"":size_passing_math,
""%PassingReading"":size_passing_reading,
""%OverallPassing"":size_overall_passing})",CLUSTER_8,CLUSTER_11
type_summary_df,"pandas.DataFrame({
""AverageMathScore"":type_math_scores,
""AverageReadingScore"":type_reading_scores,
""%PassingMath"":type_passing_math,
""%PassingReading"":type_passing_reading,
""%OverallPassing"":type_overall_passing})",CLUSTER_8,CLUSTER_11
district_summary_df,"pandas.DataFrame(
[{""TotalSchools"":school_count,
""TotalStudents"":student_count,
""TotalBudget"":total_budget,
""AverageMathScore"":average_math_score,
""AverageReadingScore"":average_reading_score,
""%PassingMath"":passing_math_percentage,
""%PassingReading"":passing_reading_percentage,
""%OverallPassing"":overall_passing_percentage}])",CLUSTER_8,CLUSTER_11
clean_school_data_df,"pandas.DataFrame({
""SchoolType"":per_school_types,
""TotalStudents"":per_school_counts,
""TotalSchoolBudget"":per_school_budget,
""PerStudentBudget"":per_school_capita,
""AverageMathScore"":per_school_math,
""AverageReadingScore"":per_school_reading,
""%PassingMath"":per_school_passing_math,
""%PassingReading"":per_school_passing_reading,
""%OverallPassing"":per_overall_passing_percentage})",CLUSTER_8,CLUSTER_11
math_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_math_scores,
""10th"":tenth_grade_math_scores,
""11th"":eleventh_grade_math_scores,
""12th"":twelfth_grade_math_scores})",CLUSTER_8,CLUSTER_11
reading_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_reading_scores,
""10th"":tenth_grade_reading_scores,
""11th"":eleventh_grade_reading_scores,
""12th"":twelfth_grade_reading_scores})",CLUSTER_8,CLUSTER_11
size_summary_df,"pandas.DataFrame({
""AverageMathScore"":size_math_scores,
""AverageReadingScore"":size_reading_scores,
""%PassingMath"":size_passing_math,
""%PassingReading"":size_passing_reading,
""%OverallPassing"":size_overall_passing})",CLUSTER_8,CLUSTER_11
type_summary_df,"pandas.DataFrame({
""AverageMathScore"":type_math_scores,
""AverageReadingScore"":type_reading_scores,
""%PassingMath"":type_passing_math,
""%PassingReading"":type_passing_reading,
""%OverallPassing"":type_overall_passing})",CLUSTER_8,CLUSTER_11
"per_school_summary_df[""SpendingRanges(PerStudent)""]","pandas.cut(per_school_capita,spending_bins,labels=group_names)",CLUSTER_8,CLUSTER_11
"per_school_summary_df[""SchoolSize""]","pandas.cut(per_school_summary_df[""TotalStudents""],size_bins,labels=group_names)",CLUSTER_8,CLUSTER_11
school_data_complete_df,"pandas.merge(student_data_df,school_data_df,on=[""school_name"",""school_name""])",CLUSTER_8,CLUSTER_11
clean_school_data_df,"pandas.merge(student_data_df,school_data_df,on=[""school_name"",""school_name""])",CLUSTER_8,CLUSTER_11
clean_school_data_df,"pandas.merge(student_data_df,school_data_df,on=[""school_name"",""school_name""])",CLUSTER_8,CLUSTER_11
school_data_df,pandas.read_csv(school_data_to_load),CLUSTER_8,CLUSTER_11
student_data_df,pandas.read_csv(student_data_to_load),CLUSTER_8,CLUSTER_11
falsePositives,"numpy.arange(1.0,length+1,1.)",CLUSTER_4,CLUSTER_11
aDense,"numpy.array([0.,3.,0.,4.])",CLUSTER_4,CLUSTER_11
bDense,"numpy.array([0.,0.,0.,1.])",CLUSTER_4,CLUSTER_11
w,"numpy.array([0.4,3.1,-1.4,-.5])",CLUSTER_4,CLUSTER_11
labelsByWeight,"numpy.array([kfor(k,v)",CLUSTER_4,CLUSTER_11
logLoss,"numpy.array([[0.45808431,0.45808493,0.45809113,0.45815333,0.45879221,0.46556321],
[0.45188196,0.45188306,0.4518941,0.4520051,0.45316284,0.46396068],
[0.44886478,0.44886613,0.44887974,0.44902096,0.4505614,0.46371153],
[0.44706645,0.4470698,0.44708102,0.44724251,0.44905525,0.46366507],
[0.44588848,0.44589365,0.44590568,0.44606631,0.44807106,0.46365589],
[0.44508948,0.44509474,0.44510274,0.44525007,0.44738317,0.46365405]])",CLUSTER_4,CLUSTER_11
logLoss,numpy.array(logLoss),CLUSTER_4,CLUSTER_11
"x,y",numpy.log(x),CLUSTER_4,CLUSTER_11
image,"matplotlib.pyplot.imshow(logLoss,interpolation='nearest',aspect='auto',
cmap=colors)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=figsize,facecolor='white',edgecolor='white')",CLUSTER_4,CLUSTER_11
sparseFeatures,collections.defaultdict(float),CLUSTER_4,CLUSTER_11
media,numpy.mean(lista),CLUSTER_3,CLUSTER_6
desvio,numpy.std(lista),CLUSTER_3,CLUSTER_6
ax,"seaborn.barplot(x=lista,y=demoras_promedio_experimento)",CLUSTER_3,CLUSTER_6
ax,"seaborn.barplot(x=lista,y=demoras_promedio_experimento)",CLUSTER_3,CLUSTER_6
grafico,seaborn.distplot(demoras_promedio_experimento),CLUSTER_3,CLUSTER_6
b1,"numpy.zeros(shape=(n_h,1)",CLUSTER_5,CLUSTER_10
b2,"numpy.zeros(shape=(n_y,1)",CLUSTER_5,CLUSTER_10
Z1,"numpy.dot(W1,X)",CLUSTER_5,CLUSTER_10
Z2,"numpy.dot(W2,A1)",CLUSTER_5,CLUSTER_10
cost,numpy.squeeze(cost),CLUSTER_5,CLUSTER_10
logprobs,numpy.multiply(np.log(A2),CLUSTER_5,CLUSTER_10
dZ1,"numpy.multiply(np.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_10
A1,numpy.tanh(Z1),CLUSTER_5,CLUSTER_10
clf,sklearn.linear_model.LogisticRegressionCV(),CLUSTER_5,CLUSTER_10
MonSolIrradiation,"numpy.array([4.3,5.32,6.35,6.82,6.96,7.35,6.73,6.41,6.37,5.42,4.88,4.21])",CLUSTER_9,CLUSTER_9
DaylightHours,"numpy.array([10,11,12,13,14,15,15,14,12,11,10,9])",CLUSTER_9,CLUSTER_9
SunshineHours,"numpy.array([6.9,7.5,8.2,9.2,9.4,10.5,10.5,9.9,9.1,8,6.5,6.3])",CLUSTER_9,CLUSTER_9
unitsOn,numpy.array(status['On']),CLUSTER_9,CLUSTER_9
unitsOff,numpy.array(status['Off']),CLUSTER_9,CLUSTER_9
TimeOn,numpy.array(status['TimeOn']),CLUSTER_9,CLUSTER_9
TimeOff,numpy.array(status['TimeOff']),CLUSTER_9,CLUSTER_9
minDowntime,numpy.array(GenStack['minDowntime']),CLUSTER_9,CLUSTER_9
minRuntime,numpy.array(GenStack['minRuntime']),CLUSTER_9,CLUSTER_9
PMax,numpy.array(GenStack['PMax']),CLUSTER_9,CLUSTER_9
GenMix,numpy.zeros((len(GenStack),CLUSTER_9,CLUSTER_9
ShadowCost,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
Gaps,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
MaxGenVector,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
CostVector,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
ViolationsVector,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
HrSolarIrradiance,"numpy.zeros((periods,1)",CLUSTER_9,CLUSTER_9
SolarOutput,"numpy.zeros((periods,1)",CLUSTER_9,CLUSTER_9
SolarVector,"numpy.zeros((1,DaylightTime)",CLUSTER_9,CLUSTER_9
ViolationsVector,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
Load1,"numpy.zeros((1,periods)",CLUSTER_9,CLUSTER_9
AvShadowCostVector,"numpy.zeros((1,len(SolarMWVector)",CLUSTER_9,CLUSTER_9
TotalLoadVector,"numpy.zeros((1,len(SolarMWVector)",CLUSTER_9,CLUSTER_9
caseNormRes,"numpy.zeros((1,cases)",CLUSTER_9,CLUSTER_9
AverageShadowCost,numpy.sum(CostVector),CLUSTER_9,CLUSTER_9
"TotalLoadVector[0,penetration]",numpy.sum(Load),CLUSTER_9,CLUSTER_9
status,pandas.DataFrame(np.zeros((len(GenStack),CLUSTER_9,CLUSTER_9
SolarOutputProfile,pandas.DataFrame(SolarOutput),CLUSTER_9,CLUSTER_9
status1,pandas.DataFrame(np.zeros((len(GenStack),CLUSTER_9,CLUSTER_9
profiles,"pandas.read_csv('Profiles.csv',sep="","")",CLUSTER_9,CLUSTER_9
GenStack,"pandas.read_csv('GenStack.csv',sep="","")",CLUSTER_9,CLUSTER_9
FuelPrices,"pandas.read_csv('FuelPrices.csv',sep="","")",CLUSTER_9,CLUSTER_9
w,pandas.DataFrame(),CLUSTER_11,CLUSTER_11
w_,"pandas.DataFrame(w_,index=range(w_.shape[0])",CLUSTER_11,CLUSTER_11
out,"pandas.DataFrame(columns=['adfStat','pVal','lags','nObs','95%conf','corr'])",CLUSTER_11,CLUSTER_11
trades,pandas.DataFrame(),CLUSTER_11,CLUSTER_11
trades,"pandas.DataFrame(columns=['Opening_Price','Closing_Price','Return','Type'])",CLUSTER_11,CLUSTER_11
trades,"pandas.DataFrame(columns=['Opening_Price','Closing_Price','Return','Type','BetSize'])",CLUSTER_11,CLUSTER_11
df,"pandas.concat(df,axis=1)",CLUSTER_11,CLUSTER_11
df,"pandas.read_excel('https://images.aqr.com/-/media/AQR/Documents/Insights/Data-Sets/Century-of-Factor-Premia-Monthly.xlsx',
header=18,nrows=1220)",CLUSTER_11,CLUSTER_11
df['Date'],pandas.to_datetime(df['Date']),CLUSTER_11,CLUSTER_11
w,numpy.array(w[::-1]),CLUSTER_11,CLUSTER_11
df_[loc],numpy.dot(w[-(iloc+1),CLUSTER_11,CLUSTER_11
w_,numpy.cumsum(abs(w),CLUSTER_11,CLUSTER_11
df1,numpy.log(df[['Close']]),CLUSTER_11,CLUSTER_11
start,"datetime.datetime(2000,11,30)",CLUSTER_11,CLUSTER_11
end,"datetime.datetime(2019,11,30)",CLUSTER_11,CLUSTER_11
rf,sklearn.ensemble.RandomForestClassifier(verbose=1),CLUSTER_11,CLUSTER_11
rf,sklearn.ensemble.RandomForestClassifier(verbose=1),CLUSTER_11,CLUSTER_11
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_11,CLUSTER_11
corr,"numpy.ma.corrcoef(ma.masked_invalid(df1.loc[df2.index,'Close'])",CLUSTER_11,CLUSTER_11
kf,sklearn.model_selection.KFold(n_splits=5),CLUSTER_11,CLUSTER_11
TP,numpy.sum(income),CLUSTER_12,CLUSTER_1
features_log_transformed,pandas.DataFrame(data=features_raw),CLUSTER_12,CLUSTER_1
features_log_minmax_transform,pandas.DataFrame(data=features_log_transformed),CLUSTER_12,CLUSTER_1
features_final,pandas.get_dummies(features_log_minmax_transform),CLUSTER_12,CLUSTER_1
data,"pandas.read_csv(""census.csv"")",CLUSTER_12,CLUSTER_1
start,time.time(),CLUSTER_12,CLUSTER_1
end,time.time(),CLUSTER_12,CLUSTER_1
start,time.time(),CLUSTER_12,CLUSTER_1
end,time.time(),CLUSTER_12,CLUSTER_1
scorer,"sklearn.metrics.make_scorer(fbeta_score,beta=0.5)",CLUSTER_12,CLUSTER_1
results['acc_train'],"sklearn.metrics.accuracy_score(y_train[:300],predictions_train)",CLUSTER_12,CLUSTER_1
results['acc_test'],"sklearn.metrics.accuracy_score(y_test,predictions_test)",CLUSTER_12,CLUSTER_1
results['f_train'],"sklearn.metrics.fbeta_score(y_train[:300],predictions_train,0.5)",CLUSTER_12,CLUSTER_1
results['f_test'],"sklearn.metrics.fbeta_score(y_test,predictions_test,0.5)",CLUSTER_12,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features_final,
income,
test_size=0.2,
random_state=0)",CLUSTER_12,CLUSTER_1
grid_obj,"sklearn.model_selection.GridSearchCV(clf_A,parameters,scoring=scorer)",CLUSTER_12,CLUSTER_1
learner,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_1
clf_A,sklearn.tree.DecisionTreeClassifier(random_state=2019),CLUSTER_12,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_12,CLUSTER_1
clf_B,sklearn.naive_bayes.MultinomialNB(),CLUSTER_12,CLUSTER_1
clf_C,sklearn.ensemble.RandomForestClassifier(random_state=2019),CLUSTER_12,CLUSTER_1
clf,sklearn.ensemble.RandomForestClassifier(random_state=2019),CLUSTER_12,CLUSTER_1
clf_A,sklearn.ensemble.RandomForestClassifier(),CLUSTER_12,CLUSTER_1
model,sklearn.ensemble.RandomForestClassifier(random_state=2019),CLUSTER_12,CLUSTER_1
ticks,"numpy.arange(0,15,1)",CLUSTER_4,CLUSTER_0
Y,numpy.arange(X.shape[0]),CLUSTER_4,CLUSTER_0
train_Y_,"numpy.array(numpy.where(train_Y=='N',1,0)",CLUSTER_4,CLUSTER_0
valid_Y_,"numpy.array(numpy.where(valid_Y=='N',1,0)",CLUSTER_4,CLUSTER_0
train_Y_TPS_,"numpy.array(numpy.where(train_Y_TPS['CLASS_PHASE']=='regS',1,0)",CLUSTER_4,CLUSTER_0
valid_Y_TPS_,"numpy.array(numpy.where(valid_Y_TPS['CLASS_PHASE']=='regS',1,0)",CLUSTER_4,CLUSTER_0
manual_Y_TPS_,"numpy.array(numpy.where(MTPS_data_norm[y_indices]=='regS',1,0)",CLUSTER_4,CLUSTER_0
train_Y_TP_,"numpy.array(numpy.where(train_Y_TP['CLASS_PHASE']=='regP',1,0)",CLUSTER_4,CLUSTER_0
valid_Y_TP_,"numpy.array(numpy.where(valid_Y_TP['CLASS_PHASE']=='regP',1,0)",CLUSTER_4,CLUSTER_0
Y_NPTS,numpy.zeros(X.shape[0]),CLUSTER_4,CLUSTER_0
Y_PTS,numpy.zeros(X.shape[0]),CLUSTER_4,CLUSTER_0
data_2017_Y,numpy.zeros(data_2017.shape[0]),CLUSTER_4,CLUSTER_0
data_2017_Y_wN,numpy.zeros(data_2017_wN.shape[0]),CLUSTER_4,CLUSTER_0
Y_pred,"numpy.argmax(Y_pred_,axis=1)",CLUSTER_4,CLUSTER_0
Y_pred,numpy.argmax(model.predict(train_X),CLUSTER_4,CLUSTER_0
Y_NPTS,numpy.argmax(model_NTPS.predict(X),CLUSTER_4,CLUSTER_0
Y_PTS,numpy.argmax(model_STP.predict(X_PTS),CLUSTER_4,CLUSTER_0
Y_PT,numpy.argmax(model_PT.predict(X_PT),CLUSTER_4,CLUSTER_0
Y_pred,numpy.reshape(numpy.argmax(model_TPS.predict(valid_X_TPS),CLUSTER_4,CLUSTER_0
Y_pred,numpy.reshape(numpy.argmax(model_TPS.predict(train_X_TPS),CLUSTER_4,CLUSTER_0
Y_pred,numpy.reshape(numpy.argmax(model_TP.predict(valid_X_TP),CLUSTER_4,CLUSTER_0
input,"numpy.reshape(numpy.array([1.000000,0.966347,0.977263,0.091495,0.986118,0.382480,-1.354475,-1.354475,0.300000,0.507750,0.066849,-0.539140,-0.183338,-0.152606,-0.613563])",CLUSTER_4,CLUSTER_0
TPS_data_norm['HMXMN'],numpy.log10(TPS_data['HMXMN']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HVRATP'],numpy.log10(TPS_data['HVRATP']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HVRAT'],numpy.log10(TPS_data['HVRAT']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HTOV1'],numpy.log10(TPS_data['HTOV1']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HTOV2'],numpy.log10(TPS_data['HTOV2']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HTOV3'],numpy.log10(TPS_data['HTOV3']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HTOV4'],numpy.log10(TPS_data['HTOV4']),CLUSTER_4,CLUSTER_0
TPS_data_norm['HTOV5'],numpy.log10(TPS_data['HTOV5']),CLUSTER_4,CLUSTER_0
N_data_norm['HMXMN'],numpy.log10(N_data['HMXMN']),CLUSTER_4,CLUSTER_0
N_data_norm['HVRATP'],numpy.log10(N_data['HVRATP']),CLUSTER_4,CLUSTER_0
N_data_norm['HVRAT'],numpy.log10(N_data['HVRAT']),CLUSTER_4,CLUSTER_0
N_data_norm['HTOV1'],numpy.log10(N_data['HTOV1']),CLUSTER_4,CLUSTER_0
N_data_norm['HTOV2'],numpy.log10(N_data['HTOV2']),CLUSTER_4,CLUSTER_0
N_data_norm['HTOV3'],numpy.log10(N_data['HTOV3']),CLUSTER_4,CLUSTER_0
N_data_norm['HTOV4'],numpy.log10(N_data['HTOV4']),CLUSTER_4,CLUSTER_0
N_data_norm['HTOV5'],numpy.log10(N_data['HTOV5']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HMXMN'],numpy.log10(MTPS_data['HMXMN']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HVRATP'],numpy.log10(MTPS_data['HVRATP']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HVRAT'],numpy.log10(MTPS_data['HVRAT']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HTOV1'],numpy.log10(MTPS_data['HTOV1']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HTOV2'],numpy.log10(MTPS_data['HTOV2']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HTOV3'],numpy.log10(MTPS_data['HTOV3']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HTOV4'],numpy.log10(MTPS_data['HTOV4']),CLUSTER_4,CLUSTER_0
MTPS_data_norm['HTOV5'],numpy.log10(MTPS_data['HTOV5']),CLUSTER_4,CLUSTER_0
data_2017_norm['HMXMN'],numpy.log10(data_2017_X['HMXMN']),CLUSTER_4,CLUSTER_0
data_2017_norm['HVRATP'],numpy.log10(data_2017_X['HVRATP']),CLUSTER_4,CLUSTER_0
data_2017_norm['HVRAT'],numpy.log10(data_2017_X['HVRAT']),CLUSTER_4,CLUSTER_0
data_2017_norm['HTOV1'],numpy.log10(data_2017_X['HTOV1']),CLUSTER_4,CLUSTER_0
data_2017_norm['HTOV2'],numpy.log10(data_2017_X['HTOV2']),CLUSTER_4,CLUSTER_0
data_2017_norm['HTOV3'],numpy.log10(data_2017_X['HTOV3']),CLUSTER_4,CLUSTER_0
data_2017_norm['HTOV4'],numpy.log10(data_2017_X['HTOV4']),CLUSTER_4,CLUSTER_0
data_2017_norm['HTOV5'],numpy.log10(data_2017_X['HTOV5']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HMXMN'],numpy.log10(data_2017_X_wN['HMXMN']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HVRATP'],numpy.log10(data_2017_X_wN['HVRATP']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HVRAT'],numpy.log10(data_2017_X_wN['HVRAT']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HTOV1'],numpy.log10(data_2017_X_wN['HTOV1']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HTOV2'],numpy.log10(data_2017_X_wN['HTOV2']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HTOV3'],numpy.log10(data_2017_X_wN['HTOV3']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HTOV4'],numpy.log10(data_2017_X_wN['HTOV4']),CLUSTER_4,CLUSTER_0
data_2017_norm_wN['HTOV5'],numpy.log10(data_2017_X_wN['HTOV5']),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
diagsum,numpy.diag(C),CLUSTER_4,CLUSTER_0
TPS_data,"pandas.concat([ssS,ssP,ssT])",CLUSTER_4,CLUSTER_0
train,"pandas.concat([TPS_train,N_train])",CLUSTER_4,CLUSTER_0
valid,"pandas.concat([TPS_valid,N_valid])",CLUSTER_4,CLUSTER_0
MTPS_data,"pandas.concat([mssS,mssP,mssT])",CLUSTER_4,CLUSTER_0
data_2017,"pandas.concat([df_P_2017,df_S_2017,df_T_2017])",CLUSTER_4,CLUSTER_0
data_2017_wN,"pandas.concat([df_P_2017,df_S_2017,df_T_2017,df_N_2017])",CLUSTER_4,CLUSTER_0
df_S_all,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_P_all,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_T_all,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_N_all,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_S_2017,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_P_2017,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_T_2017,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
df_N_2017,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
urz_eval,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
urz_eval,"pandas.read_sql(query,con=connection)",CLUSTER_4,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(14,14)",CLUSTER_4,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_0
conf_mat,"sklearn.metrics.confusion_matrix(Y_pred,valid_Y_)",CLUSTER_4,CLUSTER_0
conf_mat,"sklearn.metrics.confusion_matrix(train_Y_,Y_pred)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(valid_Y_TPS_,Y_pred)",CLUSTER_4,CLUSTER_0
Ctr,"sklearn.metrics.confusion_matrix(train_Y_TPS_,Y_pred)",CLUSTER_4,CLUSTER_0
conf_mat,"sklearn.metrics.confusion_matrix(valid_Y_TP_,Y_pred)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(Y,valid_Y_GT)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(valid_pred_Y,valid_Y_GT)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(valid_TPS_iphase_Y,valid_TPS_truth_Y)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(valid_TPS_pred_Y,valid_TPS_truth_Y)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(data_2017_pred,data_2017_Y)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(data_2017_pred_wN,data_2017_Y_wN)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(Y,train_Y_GT)",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(urz_eval['NCLS_IPHASE_DEV'],urz_eval['NCLS_PHASE_ODB'])",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(urz_eval['NCLS_IPHASE_ODB'],urz_eval['NCLS_PHASE_ODB'])",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(urz_eval['NCLS_IPHASE_DEV'],urz_eval['NCLS_PHASE_ODB'])",CLUSTER_4,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(urz_eval['NCLS_IPHASE_ODB'],urz_eval['NCLS_PHASE_ODB'])",CLUSTER_4,CLUSTER_0
data,pandas.read_csv('../input/train.csv'),CLUSTER_7,CLUSTER_5
test,pandas.read_csv('../input/test.csv'),CLUSTER_7,CLUSTER_5
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
rfc,"sklearn.ensemble.RandomForestClassifier(n_jobs=-1,
random_state=42,
n_estimators=gs.best_params_['n_estimators'],
max_depth=gs.best_params_['max_depth'],
max_features=gs.best_params_['max_features'],
criterion=gs.best_params_['criterion'],
min_samples_leaf=gs.best_params_['min_samples_leaf'],
warm_start=gs.best_params_['warm_start'])",CLUSTER_7,CLUSTER_5
gs,"sklearn.model_selection.GridSearchCV(RandomForestClassifier(
n_jobs=-1,
random_state=42)",CLUSTER_7,CLUSTER_5
start,time.time(),CLUSTER_7,CLUSTER_5
reviews_train,"sklearn.datasets.load_files(""data/aclImdb/train/"")",CLUSTER_10,CLUSTER_4
reviews_test,"sklearn.datasets.load_files(""data/aclImdb/test/"")",CLUSTER_10,CLUSTER_4
scores,sklearn.model_selection.cross_val_score(LogisticRegression(),CLUSTER_10,CLUSTER_4
grid,sklearn.model_selection.GridSearchCV(LogisticRegression(),CLUSTER_10,CLUSTER_4
grid,sklearn.model_selection.GridSearchCV(LogisticRegression(),CLUSTER_10,CLUSTER_4
grid,sklearn.model_selection.GridSearchCV(LogisticRegression(),CLUSTER_10,CLUSTER_4
grid,"sklearn.model_selection.GridSearchCV(pipe,param_grid,cv=5)",CLUSTER_10,CLUSTER_4
grid,"sklearn.model_selection.GridSearchCV(pipe,param_grid,cv=5)",CLUSTER_10,CLUSTER_4
grid,sklearn.model_selection.GridSearchCV(LogisticRegression(),CLUSTER_10,CLUSTER_4
pipe,"sklearn.pipeline.make_pipeline(TfidfVectorizer(min_df=5,norm=None)",CLUSTER_10,CLUSTER_4
pipe,sklearn.pipeline.make_pipeline(TfidfVectorizer(min_df=5),CLUSTER_10,CLUSTER_4
regexp,re.compile('(?u),CLUSTER_10,CLUSTER_4
cv,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=5,test_size=0.99,
train_size=0.01,random_state=0)",CLUSTER_10,CLUSTER_4
lda,"sklearn.decomposition.LatentDirichletAllocation(n_topics=10,learning_method=""batch"",
max_iter=25,random_state=0)",CLUSTER_10,CLUSTER_4
lda100,"sklearn.decomposition.LatentDirichletAllocation(n_topics=100,learning_method=""batch"",
max_iter=25,random_state=0)",CLUSTER_10,CLUSTER_4
one_counts,collections.Counter(tokenizer.tokenize(one_star_text),CLUSTER_0,CLUSTER_3
two_counts,collections.Counter(tokenizer.tokenize(two_star_text),CLUSTER_0,CLUSTER_3
three_counts,collections.Counter(tokenizer.tokenize(three_star_text),CLUSTER_0,CLUSTER_3
four_counts,collections.Counter(tokenizer.tokenize(four_star_text),CLUSTER_0,CLUSTER_3
five_counts,collections.Counter(tokenizer.tokenize(five_star_text),CLUSTER_0,CLUSTER_3
df,pandas.DataFrame(DATA_DICT),CLUSTER_0,CLUSTER_3
sample,"random.sample(data,int(NUM_REVIEWS/10)",CLUSTER_0,CLUSTER_3
DATA_SAMPLE,"random.sample(data,SAMPLE_SIZE)",CLUSTER_0,CLUSTER_3
initial_centroids,"numpy.array([[3,3],[6,2],[8,5]])",CLUSTER_1,CLUSTER_9
initial_centroids,"numpy.array([[3,3],[6,2],[8,5]])",CLUSTER_1,CLUSTER_9
closest_centroids,"numpy.zeros((X.shape[0],1)",CLUSTER_1,CLUSTER_9
distance_matrix,"numpy.zeros((X.shape[0],initial_centroids.shape[0])",CLUSTER_1,CLUSTER_9
centroids,"numpy.zeros((K,n)",CLUSTER_1,CLUSTER_9
idx,"numpy.zeros((m,1)",CLUSTER_1,CLUSTER_9
initial_centroids,"numpy.zeros((K,X.shape[1])",CLUSTER_1,CLUSTER_9
cluster_i,numpy.where(idx.flatten(),CLUSTER_1,CLUSTER_9
closest_centroids,"numpy.argmin(distance_matrix,axis=1)",CLUSTER_1,CLUSTER_9
centroids[i],"numpy.mean(training_examples,axis=0)",CLUSTER_1,CLUSTER_9
"distance_matrix[:,i]","numpy.sqrt(np.sum(np.power(X-initial_centroids[i],2)",CLUSTER_1,CLUSTER_9
img,matplotlib.pyplot.imread('./data/bird_small.png'),CLUSTER_1,CLUSTER_9
data,scipy.io.loadmat('./data/ex7data2.mat'),CLUSTER_1,CLUSTER_9
img_test,scipy.io.loadmat('./data/bird_small.mat'),CLUSTER_1,CLUSTER_9
data,pandas.read_csv(filepath),CLUSTER_3,CLUSTER_6
orders,numpy.arange(8),CLUSTER_3,CLUSTER_6
order,numpy.arange(max_order+1),CLUSTER_3,CLUSTER_6
cv_loss,numpy.zeros(K),CLUSTER_3,CLUSTER_6
ind_loss,numpy.zeros(K),CLUSTER_3,CLUSTER_6
train_loss,numpy.zeros(K),CLUSTER_3,CLUSTER_6
loss,"numpy.zeros((max_order+1,3)",CLUSTER_3,CLUSTER_6
X,numpy.ones_like(x),CLUSTER_3,CLUSTER_6
testX,numpy.ones_like(testx),CLUSTER_3,CLUSTER_6
X,numpy.ones_like(x),CLUSTER_3,CLUSTER_6
testX,numpy.ones_like(testx),CLUSTER_3,CLUSTER_6
test_mean,"numpy.dot(testX,w)",CLUSTER_3,CLUSTER_6
w,"numpy.dot(np.linalg.inv(numpy.dot(X.T,X)",CLUSTER_3,CLUSTER_6
testmean,"numpy.dot(testX,w)",CLUSTER_3,CLUSTER_6
x,"numpy.sort((10*np.random.rand(100,1)",CLUSTER_3,CLUSTER_6
testx,"numpy.linspace(-5,5,100)",CLUSTER_3,CLUSTER_6
X,"numpy.hstack((X,x**i)",CLUSTER_3,CLUSTER_6
testX,"numpy.hstack((testX,testx**i)",CLUSTER_3,CLUSTER_6
X,"numpy.hstack((X,x**i)",CLUSTER_3,CLUSTER_6
testX,"numpy.hstack((testX,testx**i)",CLUSTER_3,CLUSTER_6
x,"numpy.delete(x,((x>0)",CLUSTER_3,CLUSTER_6
X_train,"numpy.delete(X,np.arange(a,b)",CLUSTER_3,CLUSTER_6
t_train,"numpy.delete(t,np.arange(a,b)",CLUSTER_3,CLUSTER_6
test_var,"numpy.diag(sig_sq*np.dot(np.dot(testX,np.linalg.inv(np.dot(X.T,X)",CLUSTER_3,CLUSTER_6
ax,"matplotlib.pyplot.axes(xticks=[],yticks=[])",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(2,5,figsize=(8,3)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_8
new_centers,numpy.array([X[labels==i].mean(0),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_7,CLUSTER_8
labels,"sklearn.cluster.KMeans(6,random_state=0)",CLUSTER_7,CLUSTER_8
labels,"sklearn.cluster.KMeans(2,random_state=0)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=0)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=0)",CLUSTER_7,CLUSTER_8
labels,"sklearn.metrics.pairwise_distances_argmin(X,centers)",CLUSTER_7,CLUSTER_8
"X,y","sklearn.datasets.make_moons(200,noise=.05,random_state=0)",CLUSTER_7,CLUSTER_8
model,"sklearn.cluster.SpectralClustering(n_clusters=2,affinity='nearest_neighbors',
assign_labels='kmeans')",CLUSTER_7,CLUSTER_8
digits,sklearn.datasets.load_digits(),CLUSTER_7,CLUSTER_8
labels[mask],scipy.stats.mode(digits.target[mask]),CLUSTER_7,CLUSTER_8
labels[mask],scipy.stats.mode(digits.target[mask]),CLUSTER_7,CLUSTER_8
mat,"sklearn.metrics.confusion_matrix(digits.target,labels)",CLUSTER_7,CLUSTER_8
tsne,"sklearn.manifold.TSNE(n_components=2,init='random',random_state=0)",CLUSTER_7,CLUSTER_8
china,"sklearn.datasets.load_sample_image(""china.jpg"")",CLUSTER_7,CLUSTER_8
kmeans,sklearn.cluster.MiniBatchKMeans(16),CLUSTER_7,CLUSTER_8
results,"pandas.DataFrame({
'Model':['SupportVectorMachines','KNN','LogisticRegression',
'RandomForest','NaiveBayes','Perceptron',
'StochasticGradientDecent',
'DecisionTree'],
'Score':[acc_linear_svc,acc_knn,acc_log,
acc_random_forest,acc_gaussian,acc_perceptron,
acc_sgd,acc_decision_tree]})",CLUSTER_7,CLUSTER_5
importances,"pandas.DataFrame({'feature':X_train.columns,'importance':np.round(random_forest.feature_importances_,3)",CLUSTER_7,CLUSTER_5
missing_data,"pandas.concat([total,percent_2],axis=1,keys=['Total','%'])",CLUSTER_7,CLUSTER_5
test_df,"pandas.read_csv(""titanic.csv"",sep='\t')",CLUSTER_7,CLUSTER_5
ax,seaborn.distplot(women[women['Survived']==1].Age.dropna(),CLUSTER_7,CLUSTER_5
ax,seaborn.distplot(women[women['Survived']==0].Age.dropna(),CLUSTER_7,CLUSTER_5
ax,seaborn.distplot(men[men['Survived']==1].Age.dropna(),CLUSTER_7,CLUSTER_5
ax,seaborn.distplot(men[men['Survived']==0].Age.dropna(),CLUSTER_7,CLUSTER_5
sgd,"sklearn.linear_model.SGDClassifier(max_iter=5,tol=None)",CLUSTER_7,CLUSTER_5
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_5
random_forest,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_7,CLUSTER_5
rf,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_7,CLUSTER_5
random_forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,oob_score=True)",CLUSTER_7,CLUSTER_5
random_forest,"sklearn.ensemble.RandomForestClassifier(criterion=""gini"",
min_samples_leaf=1,
min_samples_split=10,
n_estimators=100,
max_features='auto',
oob_score=True,
random_state=1,
n_jobs=-1)",CLUSTER_7,CLUSTER_5
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
perceptron,sklearn.linear_model.Perceptron(max_iter=5),CLUSTER_7,CLUSTER_5
decision_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_7,CLUSTER_5
linear_svc,sklearn.svm.LinearSVC(),CLUSTER_7,CLUSTER_5
gaussian,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_5
"train_df,post_test_df","sklearn.model_selection.train_test_split(
test_df,
test_size=0.7,
random_state=42)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.7,random_state=5,stratify=y)",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(rf,X_train,Y_train,cv=10,scoring=""accuracy"")",CLUSTER_7,CLUSTER_5
predictions,"sklearn.model_selection.cross_val_predict(random_forest,X_train,Y_train,cv=3)",CLUSTER_7,CLUSTER_5
"precision,recall,threshold","sklearn.metrics.precision_recall_curve(Y_train,y_scores)",CLUSTER_7,CLUSTER_5
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(Y_train,y_scores)",CLUSTER_7,CLUSTER_5
r_a_score,"sklearn.metrics.roc_auc_score(Y_train,y_scores)",CLUSTER_7,CLUSTER_5
xgb_random,"sklearn.model_selection.RandomizedSearchCV(param_distributions=gbm_param_grid,
estimator=gbm,scoring=""accuracy"",
verbose=1,n_iter=50,cv=4)",CLUSTER_7,CLUSTER_5
start,time.time(),CLUSTER_12,CLUSTER_7
stamp,time.time(),CLUSTER_12,CLUSTER_7
plus_dataframe1,pandas.DataFrame(columns=data_filter_freq_copy.columns),CLUSTER_4,CLUSTER_8
minus_dataframe1,pandas.DataFrame(columns=data_filter_freq_copy.columns),CLUSTER_4,CLUSTER_8
plus_dataframe2,pandas.DataFrame(columns=data_filter_freq_copy.columns),CLUSTER_4,CLUSTER_8
minus_dataframe2,pandas.DataFrame(columns=data_filter_freq_copy.columns),CLUSTER_4,CLUSTER_8
plus_dataframe2,pandas.DataFrame(columns=data_filter_freq_copy.columns),CLUSTER_4,CLUSTER_8
minus_dataframe2,pandas.DataFrame(columns=data_filter_freq_copy.columns),CLUSTER_4,CLUSTER_8
fitted_earning,pandas.DataFrame(columns=data_filter_freq_ori.columns),CLUSTER_4,CLUSTER_8
X_train,"pandas.DataFrame(columns=['긍정','부정'])",CLUSTER_4,CLUSTER_8
plus_dict1,pandas.Series([]),CLUSTER_4,CLUSTER_8
minus_dict1,pandas.Series([]),CLUSTER_4,CLUSTER_8
X_train,pandas.Series(),CLUSTER_4,CLUSTER_8
csv_file,"pandas.read_csv(abs_path,header=None)",CLUSTER_4,CLUSTER_8
earning_month_raw,pandas.read_excel('./data/코웨이수익률.xlsx'),CLUSTER_4,CLUSTER_8
data,pandas.read_parquet(path+file_name),CLUSTER_4,CLUSTER_8
file_name,os.listdir(path),CLUSTER_4,CLUSTER_8
y,numpy.array(earning_data_ori),CLUSTER_4,CLUSTER_8
y,numpy.array([labeling(label),CLUSTER_4,CLUSTER_8
y,numpy.array([labeling(label),CLUSTER_4,CLUSTER_8
y,"numpy.where(earning_data>=0,1,0)",CLUSTER_4,CLUSTER_8
y,"numpy.where(earning_data>0,1,0)",CLUSTER_4,CLUSTER_8
pos_score_dot_freq,"numpy.dot(plus_dict1[plus_pos],X_train_raw.iloc[train_idx,plus_idx])",CLUSTER_4,CLUSTER_8
minus_score_dot_freq,"numpy.dot(minus_dict1[minus_pos],X_train_raw.iloc[train_idx,minus_idx])",CLUSTER_4,CLUSTER_8
y,"numpy.delete(y,delete_index)",CLUSTER_4,CLUSTER_8
y,"numpy.delete(y,delete_index)",CLUSTER_4,CLUSTER_8
yesterday,"datetime.datetime(year=2017,month=6,day=8)",CLUSTER_4,CLUSTER_8
tag_dict,collections.Counter(),CLUSTER_4,CLUSTER_8
all_dict,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
precision_score_result,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
model_result,collections.Counter(),CLUSTER_4,CLUSTER_8
train_result,collections.Counter(),CLUSTER_4,CLUSTER_8
test_result,collections.Counter(),CLUSTER_4,CLUSTER_8
confusion_matrix_result,collections.Counter(),CLUSTER_4,CLUSTER_8
auc_result,collections.Counter(),CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict3[model_str],"sklearn.metrics.accuracy_score(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict5[model_str],"sklearn.metrics.auc(fpr,tpr)",CLUSTER_4,CLUSTER_8
tmp_dict5[model_str],"sklearn.metrics.auc(fpr,tpr)",CLUSTER_4,CLUSTER_8
tmp_dict5[model_str],"sklearn.metrics.auc(fpr,tpr)",CLUSTER_4,CLUSTER_8
tmp_dict5[model_str],"sklearn.metrics.auc(fpr,tpr)",CLUSTER_4,CLUSTER_8
tmp_dict5[model_str],"sklearn.metrics.auc(fpr,tpr)",CLUSTER_4,CLUSTER_8
tmp_dict5[model_str],"sklearn.metrics.precision_score(y_test,pre)",CLUSTER_4,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,pre)",CLUSTER_4,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,pre)",CLUSTER_4,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,pre)",CLUSTER_4,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,pre)",CLUSTER_4,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,pre)",CLUSTER_4,CLUSTER_8
exmodel,"sklearn.ensemble.ExtraTreesClassifier(bootstrap=False,criterion='gini',max_depth=11,max_features=8,n_estimators=500,random_state=4000)",CLUSTER_4,CLUSTER_8
model,sklearn.model_selection.GridSearchCV(ExtraTreesClassifier(),CLUSTER_4,CLUSTER_8
model,sklearn.model_selection.GridSearchCV(ExtraTreesClassifier(),CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
tmp_dict4[model_str],"sklearn.metrics.confusion_matrix(y_test,pre)",CLUSTER_4,CLUSTER_8
"X_train_raw,X_test_raw","sklearn.model_selection.train_test_split(fitted_earning,test_size=test_ratio,shuffle=False)",CLUSTER_4,CLUSTER_8
"y_train,y_test","sklearn.model_selection.train_test_split(earning_data_ori,test_size=test_ratio,shuffle=False)",CLUSTER_4,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.33,shuffle=False)",CLUSTER_4,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.33,shuffle=False)",CLUSTER_4,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.33,shuffle=False)",CLUSTER_4,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.33,shuffle=False)",CLUSTER_4,CLUSTER_8
x,numpy.arange(100),CLUSTER_12,CLUSTER_3
x,numpy.arange(100),CLUSTER_12,CLUSTER_3
y_data,numpy.cumsum(np.random.randn(size),CLUSTER_12,CLUSTER_3
y_data_2,numpy.cumsum(np.random.randn(size),CLUSTER_12,CLUSTER_3
y_data_3,numpy.cumsum(np.random.randn(size),CLUSTER_12,CLUSTER_3
y,"numpy.cumsum(np.random.randn(2,100)",CLUSTER_12,CLUSTER_3
line.y,"numpy.cumsum(np.random.randn(2,100)",CLUSTER_12,CLUSTER_3
y,"numpy.cumsum(np.random.randn(2,100)",CLUSTER_12,CLUSTER_3
y_data,numpy.cumsum(np.random.randn(size),CLUSTER_12,CLUSTER_3
x,"numpy.linspace(0.0,10.0,size)",CLUSTER_12,CLUSTER_3
price_data,"pandas.DataFrame(np.cumsum(np.random.randn(150,2)",CLUSTER_12,CLUSTER_3
index,"pandas.date_range(start='01-01-2007',periods=150)",CLUSTER_12,CLUSTER_3
x,numpy.log10(plotdata['eta']),CLUSTER_7,CLUSTER_9
y,numpy.log10(plotdata['V']),CLUSTER_7,CLUSTER_9
xdata_var,numpy.log10(plotdataTMP['eta']),CLUSTER_7,CLUSTER_9
ydata_var,numpy.log10(plotdataTMP['V']),CLUSTER_7,CLUSTER_9
xdata_ax3,numpy.log10(plotdataTMP['flux']),CLUSTER_7,CLUSTER_9
ydata_ax1,numpy.log10(plotdataTMP['eta']),CLUSTER_7,CLUSTER_9
ydata_ax3,numpy.log10(plotdataTMP['V']),CLUSTER_7,CLUSTER_9
Xax3,numpy.log10(plotdataTMP['flux']),CLUSTER_7,CLUSTER_9
Yax1,numpy.log10(plotdata['eta']),CLUSTER_7,CLUSTER_9
Yax3,numpy.log10(plotdata['V']),CLUSTER_7,CLUSTER_9
plotdata,"pandas.DataFrame(data=plotdata,columns=['runcat','eta','V','maxFlx','avgFlx','freq','dpts','newSrc'])",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(1,figsize=(12,12)",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(1,figsize=(12,12)",CLUSTER_7,CLUSTER_9
motif_enrich_df,pandas.DataFrame(results),CLUSTER_7,CLUSTER_9
counts,pandas.DataFrame(records),CLUSTER_7,CLUSTER_9
motif_enrich_df,"pandas.concat([motif_enrich_df,counts],axis=1,sort=True)",CLUSTER_7,CLUSTER_9
dmr_bed_df,"pandas.read_csv(
f'/home/hanliu/project/mouse_rostral_brain/DMR/SubType/{dmr_type}Bed/{cluster}.{dmr_type}DMR.DMS2.bed',
header=None,
sep='\t',
index_col=-1,
names=['chrom','start','end','SubDMR'])",CLUSTER_7,CLUSTER_9
p,"numpy.zeros((np,3)",CLUSTER_3,CLUSTER_6
t,"numpy.zeros((nt,3)",CLUSTER_3,CLUSTER_6
"newMesh[""p""]","numpy.zeros((np,3)",CLUSTER_3,CLUSTER_6
v,"numpy.cross(b-a,c-a)",CLUSTER_3,CLUSTER_6
coefficients,numpy.zeros(25),CLUSTER_12,CLUSTER_9
ini_beta,numpy.zeros(30),CLUSTER_12,CLUSTER_9
ini_beta,numpy.zeros(30),CLUSTER_12,CLUSTER_9
rmse,numpy.sqrt(np.sum((predictions-observed),CLUSTER_12,CLUSTER_9
datatxt,numpy.loadtxt('data.txt'),CLUSTER_12,CLUSTER_9
MEDVtxt,numpy.loadtxt('MEDV.txt'),CLUSTER_12,CLUSTER_9
data,"pandas.DataFrame(datatxt,columns=[""CRIM"",""ZN"",""INDUS"",""CHAS"",""NOX"",""RM"",""AGE"",""DIS"",""RAD"",""TAX"",""PTRATIO"",""B"",""LSTAT""])",CLUSTER_12,CLUSTER_9
LR1,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_9
LR2,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_9
LR,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_9
kf,sklearn.model_selection.KFold(n_splits=25),CLUSTER_12,CLUSTER_9
kf,"sklearn.model_selection.KFold(n_splits=num_batch,shuffle=True)",CLUSTER_12,CLUSTER_9
start_time,time.time(),CLUSTER_12,CLUSTER_9
end_time,time.time(),CLUSTER_12,CLUSTER_9
start_time,time.time(),CLUSTER_12,CLUSTER_9
end_time,time.time(),CLUSTER_12,CLUSTER_9
start_time,time.time(),CLUSTER_12,CLUSTER_9
end_time,time.time(),CLUSTER_12,CLUSTER_9
start_time,time.time(),CLUSTER_12,CLUSTER_9
end_time,time.time(),CLUSTER_12,CLUSTER_9
"train,test","sklearn.model_selection.train_test_split(data,test_size=0.34)",CLUSTER_12,CLUSTER_9
"train,test","sklearn.model_selection.train_test_split(x_data,test_size=0.34,shuffle=True)",CLUSTER_12,CLUSTER_9
label,numpy.argmax(mnist.test.labels[i]),CLUSTER_2,CLUSTER_7
coefs,"numpy.asarray(values[1:],dtype='float32')",CLUSTER_4,CLUSTER_0
event_col,numpy.zeros((len(df_sum),CLUSTER_4,CLUSTER_0
late_event,numpy.zeros((len(df_sum),CLUSTER_4,CLUSTER_0
really_late_event,numpy.zeros((len(df_sum),CLUSTER_4,CLUSTER_0
embedding_matrix,"numpy.zeros((num_words,EMBEDDING_DIM)",CLUSTER_4,CLUSTER_0
event_feats,"numpy.concatenate([df_sum[""event_next_day""].as_matrix()",CLUSTER_4,CLUSTER_0
mae,numpy.mean(np.abs(predicted-trues),CLUSTER_4,CLUSTER_0
mse,numpy.mean((predicted-trues),CLUSTER_4,CLUSTER_0
mae,numpy.mean(np.abs(predicted-trues),CLUSTER_4,CLUSTER_0
mse,numpy.mean((predicted-trues),CLUSTER_4,CLUSTER_0
rae,numpy.sum(np.abs(predicted-trues),CLUSTER_4,CLUSTER_0
rae,numpy.sum(np.abs(predicted-trues),CLUSTER_4,CLUSTER_0
rmse,numpy.sqrt(np.mean((predicted-trues),CLUSTER_4,CLUSTER_0
rmse,numpy.sqrt(np.mean((predicted-trues),CLUSTER_4,CLUSTER_0
corr,"numpy.corrcoef(predicted,trues)",CLUSTER_4,CLUSTER_0
corr,"numpy.corrcoef(predicted,trues)",CLUSTER_4,CLUSTER_0
df_sum,"pandas.DataFrame(df.groupby(""date"")",CLUSTER_4,CLUSTER_0
"df_sum[""event_next_day""]","pandas.Series(df_sum[""event""])",CLUSTER_4,CLUSTER_0
"df_sum[""late_event_next_day""]","pandas.Series(df_sum[""late_event""])",CLUSTER_4,CLUSTER_0
"df_sum[""really_late_event_next_day""]","pandas.Series(df_sum[""really_late_event""])",CLUSTER_4,CLUSTER_0
"df_sum[""event_next_day_desc""]","pandas.Series(df_sum[""event_desc""])",CLUSTER_4,CLUSTER_0
preds,"pandas.Series(df_sum[""detrended""])",CLUSTER_4,CLUSTER_0
lags,"pandas.concat([pd.Series(df_sum[""detrended""])",CLUSTER_4,CLUSTER_0
lags_event_feats,"pandas.concat([pd.Series(df_sum[""event_next_day""])",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(""../central_park_weather.csv"")",CLUSTER_4,CLUSTER_0
events,"pandas.read_csv(""terminal5_events_preprocessed.tsv"",sep=""\t"")",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(""/home/fmpr/data/pickups_terminal_5_0.003.csv"")",CLUSTER_4,CLUSTER_0
events['start_time'],"pandas.to_datetime(events['start_time'],format='%Y-%m-%d%H:%M')",CLUSTER_4,CLUSTER_0
df_sum.index,"pandas.to_datetime(df_sum.index,format='%Y-%m-%d%H:%M')",CLUSTER_4,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
metadata,pandas.DataFrame(metadata),CLUSTER_4,CLUSTER_11
cross_results[dname],pandas.read_csv(cross_paths[dname]),CLUSTER_1,CLUSTER_3
lgd,matplotlib.pyplot.legend(),CLUSTER_1,CLUSTER_3
"f,axs","matplotlib.pyplot.subplots(1,len(m_datasets)",CLUSTER_1,CLUSTER_3
"f,axs","matplotlib.pyplot.subplots(1,len(m_datasets)",CLUSTER_1,CLUSTER_3
positive_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
negative_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
total_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
pos_neg_ratios,collections.Counter(),CLUSTER_12,CLUSTER_6
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_12,CLUSTER_6
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_12,CLUSTER_6
e,numpy.array(e.value),CLUSTER_3,CLUSTER_6
e,numpy.array(e.value),CLUSTER_3,CLUSTER_6
e,numpy.array(e.value),CLUSTER_3,CLUSTER_6
e_max,numpy.zeros(n),CLUSTER_3,CLUSTER_6
e_min,numpy.zeros(n),CLUSTER_3,CLUSTER_6
e_max,"numpy.maximum(e_max,e)",CLUSTER_3,CLUSTER_6
e_min,"numpy.minimum(e_min,e)",CLUSTER_3,CLUSTER_6
A,numpy.loadtxt('data/edge_incidence.txt'),CLUSTER_3,CLUSTER_6
f,numpy.loadtxt('data/node_flows.txt'),CLUSTER_3,CLUSTER_6
df,"pandas.concat([df_train,df_test])",CLUSTER_7,CLUSTER_8
df_train,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv(data_path+'titanic_test.csv'),CLUSTER_7,CLUSTER_8
df_fixed['Fare'],numpy.log1p(df_fixed['Fare']),CLUSTER_7,CLUSTER_8
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
df_fixed['Fare'],scipy.stats.boxcox(df_fixed['Fare']),CLUSTER_7,CLUSTER_8
titanic,seaborn.load_dataset('titanic'),CLUSTER_1,CLUSTER_10
df,pandas.read_parquet('../input/train_image_data_0.parquet'),CLUSTER_8,CLUSTER_4
p,"pandas.DataFrame([1,2,3,4,5],index=[11,22,33,44,55],columns=[""1""])",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame([[""Harshad"",20],[""kalpak"",20],[""mayur"",25]],columns=[""Name"",""Age""])",CLUSTER_8,CLUSTER_3
df1,"pandas.DataFrame([{""Name"":[""A"",""B"",""C"",""D""],""Age"":[20,21,25]}])",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame([{'Name':'Harshad','Age':20},{'Name':'Kalpak','Age':20},{}])",CLUSTER_8,CLUSTER_3
student,pandas.DataFrame(student),CLUSTER_8,CLUSTER_3
student1,"pandas.DataFrame(studlist,columns=index)",CLUSTER_8,CLUSTER_3
df1,"pandas.DataFrame({'rollno':[1,2,3,4,5],'name':['a1','a2','a3','a4','a5'],'Subject':['sub1','sub2','sub4','sub6','sub5']})",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame({'rollno':[1,2,3,4,5],'name':['b1','b2','b3','b4','b5'],'Subject':['sub2','sub4','sub3','sub6','sub5']})",CLUSTER_8,CLUSTER_3
df1,"pandas.DataFrame({'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']},
index=[0,1,2,3])",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame({'A':['A4','A5','A6','A7'],
'B':['B4','B5','B6','B7'],
'C':['C4','C5','C6','C7'],
'D':['D4','D5','D6','D7']},
index=[4,5,6,7])",CLUSTER_8,CLUSTER_3
df3,"pandas.DataFrame({'A':['A8','A9','A10','A11'],
'B':['B8','B9','B10','B11'],
'C':['C8','C9','C10','C11'],
'D':['D8','D9','D10','D11']},
index=[8,9,10,11])",CLUSTER_8,CLUSTER_3
left,"pandas.DataFrame({'Key':['K0','K1','K2','K3'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_8,CLUSTER_3
right,"pandas.DataFrame({'Key':['K0','K1','K2','K3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_8,CLUSTER_3
a,"pandas.Series([2,4,6,8,10])",CLUSTER_8,CLUSTER_3
b,"pandas.Series([2,4,6,8,10],index=[""a"",""b"",""c"",""d"",""e""])",CLUSTER_8,CLUSTER_3
d,"pandas.Series(5,index=[0,1,2,3,4])",CLUSTER_8,CLUSTER_3
s,"pandas.Series([1,2,3,4,5],index=[""a"",""b"",""c"",""d"",""e""])",CLUSTER_8,CLUSTER_3
a,"pandas.concat([df1,df2])",CLUSTER_8,CLUSTER_3
df3,"pandas.merge(df1,df2)",CLUSTER_8,CLUSTER_3
df3,"pandas.merge(df1,df2,on='Subject',how='inner')",CLUSTER_8,CLUSTER_3
df3,"pandas.merge(df1,df2,on='Subject',how='outer')",CLUSTER_8,CLUSTER_3
df3,"pandas.merge(df1,df2,on='Subject',how='left')",CLUSTER_8,CLUSTER_3
df4,"pandas.merge(df1,df2,on='Subject',how='right')",CLUSTER_8,CLUSTER_3
df5,"pandas.merge(df1,df2,on='Subject',how='right',sort='True')",CLUSTER_8,CLUSTER_3
A,"pandas.read_excel(""student.xlsx"",index_col=0)",CLUSTER_8,CLUSTER_3
b,"pandas.read_excel(""student.xlsx"",index_col=None,header=None)",CLUSTER_8,CLUSTER_3
arr,"numpy.array([2,4,6,8,10])",CLUSTER_8,CLUSTER_3
phiprime,"numpy.empty([M+1,M+1],float)",CLUSTER_3,CLUSTER_6
phi,"numpy.zeros([M+1,M+1],float)",CLUSTER_3,CLUSTER_6
rho,"numpy.zeros([M+1,M+1],float)",CLUSTER_3,CLUSTER_6
df,pandas.concat([df]+project_helper.generate_tb_sector(df[df['ticker']=='AAPL']['date']),CLUSTER_8,CLUSTER_9
df_original,"pandas.read_csv('../../data/project_2/eod-quotemedia.csv',parse_dates=['date'],index_col=False)",CLUSTER_8,CLUSTER_9
kmeans_,"sklearn.cluster.KMeans(n_clusters=6,random_state=42)",CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_10
end_time,time.time(),CLUSTER_5,CLUSTER_10
alphas,"numpy.arange(0,1,0.01)",CLUSTER_5,CLUSTER_10
er_stats_all,"pandas.read_csv(""Year-2018-EPSRating-stats.csv"")",CLUSTER_8,CLUSTER_3
windowCenters,"numpy.arange(-8,9)",CLUSTER_4,CLUSTER_11
xvals,"numpy.arange(-20,21)",CLUSTER_4,CLUSTER_11
windowCenters,"numpy.arange(-8,9)",CLUSTER_4,CLUSTER_11
xvals,"numpy.arange(-20,21)",CLUSTER_4,CLUSTER_11
X,"numpy.array(outData[['Frame','X']],dtype=np.float)",CLUSTER_4,CLUSTER_11
testMat,numpy.array([[ii+jjforjjinnp.arange(5),CLUSTER_4,CLUSTER_11
binVec,numpy.array(tempDat.X_Index+1),CLUSTER_4,CLUSTER_11
outVec,numpy.array(outEig[1]),CLUSTER_4,CLUSTER_11
X,"numpy.array(outData[['Frame','X']],dtype=np.float)",CLUSTER_4,CLUSTER_11
binVec,numpy.array(tempDat.X_Index+1),CLUSTER_4,CLUSTER_11
outVec,numpy.array(outEig[1]),CLUSTER_4,CLUSTER_11
X,"numpy.array(outData[['Frame','X']],dtype=np.float)",CLUSTER_4,CLUSTER_11
binVec,numpy.array(tempDat.X_Index+1),CLUSTER_4,CLUSTER_11
outVec,numpy.array(outEig[1]),CLUSTER_4,CLUSTER_11
winMins,numpy.array(windowMins),CLUSTER_4,CLUSTER_11
winMaxs,numpy.array(windowMaxs),CLUSTER_4,CLUSTER_11
binVec,numpy.array(tempDat.X_Index+1),CLUSTER_4,CLUSTER_11
outVec,numpy.array(outEig[1]),CLUSTER_4,CLUSTER_11
bVec,numpy.zeros(nedges),CLUSTER_4,CLUSTER_11
escapeMat,"numpy.zeros((nBins,nBins)",CLUSTER_4,CLUSTER_11
pCenters,numpy.zeros(len(windows),CLUSTER_4,CLUSTER_11
escapeRatios,numpy.zeros(len(windows),CLUSTER_4,CLUSTER_11
escapeMat,"numpy.zeros((nBins,nBins)",CLUSTER_4,CLUSTER_11
pCenters,numpy.zeros(len(windows),CLUSTER_4,CLUSTER_11
escapeRatios,numpy.zeros(len(windows),CLUSTER_4,CLUSTER_11
tempVals,numpy.zeros(len(parmValNames),CLUSTER_4,CLUSTER_11
escapeMat,"numpy.zeros((nBins,nBins)",CLUSTER_4,CLUSTER_11
pCenters,numpy.zeros(len(windows),CLUSTER_4,CLUSTER_11
escapeRatios,numpy.zeros(len(windows),CLUSTER_4,CLUSTER_11
escapeMat,"numpy.zeros((nBins,nBins)",CLUSTER_4,CLUSTER_11
"printzip(xvals,np.digitize(xvals,bins","numpy.concatenate([winMins,[winMaxs[-1]]])",CLUSTER_4,CLUSTER_11
"printzip(xvals,np.digitize(xvals,bins","numpy.concatenate([winMins,[winMaxs[-1]]])",CLUSTER_4,CLUSTER_11
datColNames,"numpy.concatenate([
['Frame'],
['MG%g'%iiMGforiiMGinnp.arange(6)",CLUSTER_4,CLUSTER_11
datColNames,"numpy.concatenate([
['Timestep'],
['MG%g'%iiMGforiiMGinnp.arange(6)",CLUSTER_4,CLUSTER_11
si,numpy.argsort(1-outEig[0]),CLUSTER_4,CLUSTER_11
si,numpy.argsort(1-outEig[0]),CLUSTER_4,CLUSTER_11
si,numpy.argsort(1-outEig[0]),CLUSTER_4,CLUSTER_11
si,numpy.argsort(1-outEig[0]),CLUSTER_4,CLUSTER_11
windowWidth,numpy.mean(winMaxs-winMins),CLUSTER_4,CLUSTER_11
testRows,"numpy.nonzero(np.sum(testMat,axis=1)",CLUSTER_4,CLUSTER_11
testNZinds,numpy.nonzero(testMat),CLUSTER_4,CLUSTER_11
x,numpy.nonzero(milestoneResults['Qmat']),CLUSTER_4,CLUSTER_11
y,numpy.nonzero(milestoneResults['Qmat']),CLUSTER_4,CLUSTER_11
windows,numpy.sort(simDataTable.Window.unique(),CLUSTER_4,CLUSTER_11
xbins,numpy.sort(simDataTable.X_Index.unique(),CLUSTER_4,CLUSTER_11
windows,numpy.sort(simDataTable.Window.unique(),CLUSTER_4,CLUSTER_11
xbins,numpy.sort(simDataTable.X_Index.unique(),CLUSTER_4,CLUSTER_11
dataFiles,numpy.sort(os.listdir(dataDir),CLUSTER_4,CLUSTER_11
windows,numpy.sort(simData.Window.unique(),CLUSTER_4,CLUSTER_11
xbins,numpy.sort(simData.X_Index.unique(),CLUSTER_4,CLUSTER_11
windows,numpy.sort(simData.Window.unique(),CLUSTER_4,CLUSTER_11
xbins,numpy.sort(simData.X_Index.unique(),CLUSTER_4,CLUSTER_11
cCount,numpy.sum(binC),CLUSTER_4,CLUSTER_11
cCount,numpy.sum(binC),CLUSTER_4,CLUSTER_11
cCount,numpy.sum(binC),CLUSTER_4,CLUSTER_11
cCount,numpy.sum(binC),CLUSTER_4,CLUSTER_11
Rmat,numpy.matrix(escapeMat),CLUSTER_4,CLUSTER_11
Dmat,"numpy.matrix(np.diag(1-np.sum(escapeMat,axis=1)",CLUSTER_4,CLUSTER_11
Rmat,numpy.matrix(escapeMat),CLUSTER_4,CLUSTER_11
Dmat,"numpy.matrix(np.diag(1-np.sum(escapeMat,axis=1)",CLUSTER_4,CLUSTER_11
Rmat,numpy.matrix(escapeMat),CLUSTER_4,CLUSTER_11
Dmat,"numpy.matrix(np.diag(1-np.sum(escapeMat,axis=1)",CLUSTER_4,CLUSTER_11
Rmat,numpy.matrix(escapeMat),CLUSTER_4,CLUSTER_11
Dmat,"numpy.matrix(np.diag(1-np.sum(escapeMat,axis=1)",CLUSTER_4,CLUSTER_11
tCounts,"numpy.unique(binT,return_counts=True)",CLUSTER_4,CLUSTER_11
tCounts,"numpy.unique(binT,return_counts=True)",CLUSTER_4,CLUSTER_11
tCounts,"numpy.unique(binT,return_counts=True)",CLUSTER_4,CLUSTER_11
tCounts,"numpy.unique(binT,return_counts=True)",CLUSTER_4,CLUSTER_11
outEig,numpy.linalg.eig(RDmat.T),CLUSTER_4,CLUSTER_11
outEig,numpy.linalg.eig(RDmat.T),CLUSTER_4,CLUSTER_11
outEig,numpy.linalg.eig(RDmat.T),CLUSTER_4,CLUSTER_11
outEig,numpy.linalg.eig(RDmat.T),CLUSTER_4,CLUSTER_11
parmData,pandas.DataFrame(parmData),CLUSTER_4,CLUSTER_11
mdTable,pandas.concat(mdDataTables),CLUSTER_4,CLUSTER_11
simDataTable,"pandas.read_csv(""Test_Simulation_Milestoning_Data.csv"")",CLUSTER_4,CLUSTER_11
simDataTable,"pandas.read_csv(""Test_Simulation_Milestoning_Data.lvd.csv"")",CLUSTER_4,CLUSTER_11
tempTable,"pandas.read_csv(dataDir+'/'+winFileName,delim_whitespace=True,
names=datColNames)",CLUSTER_4,CLUSTER_11
table_by_month,"pandas.DataFrame(table_by_month,index=['
table_by_month.to_csv(""/Users/sangwon/workspace/school/bithumb_bot/bithumb_bot/sangwon_code/table/overall_table_by_month.csv"",header=True,index=True,encoding='utf-8')",CLUSTER_1,CLUSTER_3
cumsum_df1,"pandas.concat([df1,sign_quantity_cumsum1,amount_cumsum1],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df2,"pandas.concat([df2,sign_quantity_cumsum2,amount_cumsum2],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df3,"pandas.concat([df3,sign_quantity_cumsum3,amount_cumsum3],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df4,"pandas.concat([df4,sign_quantity_cumsum4,amount_cumsum4],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df5,"pandas.concat([df5,sign_quantity_cumsum5,amount_cumsum5],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df6,"pandas.concat([df6,sign_quantity_cumsum6,amount_cumsum6],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df7,"pandas.concat([df7,sign_quantity_cumsum7,amount_cumsum7],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point1,"pandas.concat([cumsum_df_zero_point1,compare1],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point2,"pandas.concat([cumsum_df_zero_point2,compare2],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point3,"pandas.concat([cumsum_df_zero_point3,compare3],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point4,"pandas.concat([cumsum_df_zero_point4,compare4],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point5,"pandas.concat([cumsum_df_zero_point5,compare5],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point6,"pandas.concat([cumsum_df_zero_point6,compare6],axis=1)",CLUSTER_1,CLUSTER_3
cumsum_df_zero_point7,"pandas.concat([cumsum_df_zero_point7,compare7],axis=1)",CLUSTER_1,CLUSTER_3
df1,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-01-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df2,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-02-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df3,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-03-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df4,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-04-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df5,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-05-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df6,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-06-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df7,"pandas.read_csv(""/Users/sangwon/workspace/school/bithumb_bot/data/2018-07-btc-krw.csv"")",CLUSTER_1,CLUSTER_3
df1['timestamp'],"pandas.to_datetime(df1['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df2['timestamp'],"pandas.to_datetime(df2['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df3['timestamp'],"pandas.to_datetime(df3['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df4['timestamp'],"pandas.to_datetime(df4['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df5['timestamp'],"pandas.to_datetime(df5['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df6['timestamp'],"pandas.to_datetime(df6['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df7['timestamp'],"pandas.to_datetime(df7['timestamp'],format='%Y-%m-%d%H:%M:%S',errors='raise')",CLUSTER_1,CLUSTER_3
df_imp,"pandas.DataFrame(df2,columns=df1.columns)",CLUSTER_7,CLUSTER_5
cdf,"pandas.DataFrame(lm.coef_,X.columns,columns=['Coeff'])",CLUSTER_7,CLUSTER_5
df_all,"pandas.concat(df_,sort=False,axis=1)",CLUSTER_7,CLUSTER_5
df,"pandas.read_sql_query(""select*fromPlayer_Attributes"",conn)",CLUSTER_7,CLUSTER_5
df_cat['date'],pandas.to_datetime(df_cat.date),CLUSTER_7,CLUSTER_5
tree,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y)",CLUSTER_7,CLUSTER_5
imp,"sklearn.impute.SimpleImputer(missing_values='NaN',strategy='most_frequent')",CLUSTER_7,CLUSTER_5
impute,sklearn.impute.SimpleImputer(strategy='mean'),CLUSTER_7,CLUSTER_5
lb_en,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
bias,numpy.array([[1]*len(X),CLUSTER_12,CLUSTER_10
X,"numpy.array([[0,0],[0,1],[1,0],[1,1]])",CLUSTER_12,CLUSTER_10
X,"numpy.array([[0,0],[0,1],[1,0],[1,1]])",CLUSTER_12,CLUSTER_10
Y_1,"numpy.array([[0],[0],[0],[1]])",CLUSTER_12,CLUSTER_10
Y_2,"numpy.array([[0],[1],[1],[1]])",CLUSTER_12,CLUSTER_10
Y_3,"numpy.array([[1],[0],[0],[1]])",CLUSTER_12,CLUSTER_10
X,"numpy.array([[0,0],[0,1],[1,0],[1,1]])",CLUSTER_12,CLUSTER_10
Y_1,"numpy.array([[0],[0],[0],[1]])",CLUSTER_12,CLUSTER_10
Y_2,"numpy.array([[0],[1],[1],[1]])",CLUSTER_12,CLUSTER_10
Y_3,"numpy.array([[1],[0],[0],[1]])",CLUSTER_12,CLUSTER_10
Y,numpy.zeros((len(digits),CLUSTER_12,CLUSTER_10
digit_sample,"numpy.ones((8,8)",CLUSTER_12,CLUSTER_10
"returnnp.sum(np.argmax(A,axis","1)==numpy.argmax(Y,axis=1)",CLUSTER_12,CLUSTER_10
digits,"numpy.loadtxt('digits123.csv',delimiter=',',dtype=int)",CLUSTER_12,CLUSTER_10
clf,"sklearn.neural_network.MLPClassifier(solver='lbfgs',alpha=1e-5,hidden_layer_sizes=(8,)",CLUSTER_12,CLUSTER_10
jobs,"pandas.DataFrame({'title':title,
'company':company,
'location':location,
'salary':salary,
'summary':summary,
'link':link})",CLUSTER_9,CLUSTER_2
df,pandas.read_csv('./data/jobs.csv'),CLUSTER_9,CLUSTER_2
r,requests.get(url),CLUSTER_9,CLUSTER_2
r,requests.get(url),CLUSTER_9,CLUSTER_2
r,requests.get(url_pages),CLUSTER_9,CLUSTER_2
value,re.search('^£(\d+),CLUSTER_9,CLUSTER_2
kbdata,"pandas.read_csv(""/data/fjsdata/ctKngBase/kb.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
kbdata,"pandas.read_csv(""/data/fjsdata/ctKngBase/kb.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
trainset,"pandas.read_csv(""/data/fjsdata/ctKngBase/trainset.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
testset,"pandas.read_csv(""/data/fjsdata/ctKngBase/testset.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
kbdata,"pandas.read_csv(""/data/fjsdata/ctKngBase/kb.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
kbdata,"pandas.read_csv(""/data/fjsdata/ctKngBase/kb.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
kbdata,"pandas.read_csv(""/data/fjsdata/ctKngBase/kb.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
kbdata,"traindata=pandas.read_csv(""/data/fjsdata/ctKngBase/kb.csv"",sep='|',low_memory=False)",CLUSTER_0,CLUSTER_1
testset,numpy.array(testset),CLUSTER_0,CLUSTER_1
testset,numpy.array(testset),CLUSTER_0,CLUSTER_1
R,"numpy.zeros((nCsr,nKe)",CLUSTER_0,CLUSTER_1
eR,"numpy.dot(P,Q)",CLUSTER_0,CLUSTER_1
nR,"numpy.dot(nP,nQ.T)",CLUSTER_0,CLUSTER_1
user_est_true,collections.defaultdict(list),CLUSTER_0,CLUSTER_1
user_est_true,collections.defaultdict(list),CLUSTER_0,CLUSTER_1
user_est_true,collections.defaultdict(list),CLUSTER_0,CLUSTER_1
user_est_true,collections.defaultdict(list),CLUSTER_0,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_0,CLUSTER_1
RMSE,"sklearn.metrics.mean_squared_error(test['num'],Y_test)",CLUSTER_0,CLUSTER_1
x,numpy.zeros(n),CLUSTER_1,CLUSTER_10
X,numpy.zeros(ntrials),CLUSTER_1,CLUSTER_10
sqrtdt,numpy.sqrt(dt),CLUSTER_1,CLUSTER_10
t,"numpy.linspace(0.,T,n)",CLUSTER_1,CLUSTER_10
bins,"numpy.linspace(-2.,14.,100)",CLUSTER_1,CLUSTER_10
"hist,_","numpy.histogram(X,bins=bins)",CLUSTER_1,CLUSTER_10
output,"pandas.DataFrame(data={""id"":test[""id""],""sentiment"":result})",CLUSTER_0,CLUSTER_1
train,"pandas.read_csv(""data/kaggle_nlp_labeledTrainData.tsv"",header=0,delimiter=""\t"",quoting=3)",CLUSTER_0,CLUSTER_1
test,"pandas.read_csv(""data/kaggle_nlp_testData.tsv"",header=0,delimiter=""\t"",quoting=3)",CLUSTER_0,CLUSTER_1
letters_only,"re.sub(""[^a-zA-Z]"",
"""",
example1.get_text()",CLUSTER_0,CLUSTER_1
letters_only,"re.sub(""[^a-zA-Z]"","""",review_text)",CLUSTER_0,CLUSTER_1
dist,"numpy.sum(train_data_features,axis=0)",CLUSTER_0,CLUSTER_1
forest,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame({'attributes':cols,'correlation':correlations})",CLUSTER_5,CLUSTER_5
df,"pandas.read_sql_query(""SELECT*FROMPlayer_Attributes"",cnx)",CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.gcf(),CLUSTER_5,CLUSTER_5
model,"sklearn.cluster.KMeans(init='k-means++',n_clusters=noOfClusters,n_init=20)",CLUSTER_5,CLUSTER_5
data,sklearn.preprocessing.scale(df_select),CLUSTER_5,CLUSTER_5
movies,pandas.read_csv('./train_data/tmdb_5000_movies.csv'),CLUSTER_5,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_4,CLUSTER_11
statinfo,os.stat(filename),CLUSTER_4,CLUSTER_11
datasetGray,numpy.ndarray([len(imgInfos),CLUSTER_4,CLUSTER_11
bboxes,numpy.zeros([len(imgInfos),CLUSTER_4,CLUSTER_11
validBoundingBoxes,"numpy.concatenate((extraBoundingBoxes[validIndex2,:],trainBoundingBoxes[validIndex,:])",CLUSTER_4,CLUSTER_11
trainBoundingBoxes_t,"numpy.concatenate((extraBoundingBoxes[trainIndex2,:],trainBoundingBoxes[trainIndex,:])",CLUSTER_4,CLUSTER_11
validLabels,"numpy.concatenate((extraLabels[validIndex2,:],trainLabels[validIndex,:])",CLUSTER_4,CLUSTER_11
trainLabels_t,"numpy.concatenate((extraLabels[trainIndex2,:],trainLabels[trainIndex,:])",CLUSTER_4,CLUSTER_11
validDatasetGray,"numpy.concatenate((extraDatasetGray[validIndex2,:,:,:],trainDatasetGray[validIndex,:,:,:])",CLUSTER_4,CLUSTER_11
trainDatasetGray_t,"numpy.concatenate((extraDatasetGray[trainIndex2,:,:,:],trainDatasetGray[trainIndex,:,:,:])",CLUSTER_4,CLUSTER_11
imGray,"numpy.dot(np.array(img,dtype='float32')",CLUSTER_4,CLUSTER_11
labels,numpy.ones([len(imgInfos),CLUSTER_4,CLUSTER_11
im_height,numpy.amax(top),CLUSTER_4,CLUSTER_11
im_width,numpy.amax(left),CLUSTER_4,CLUSTER_11
im_top,numpy.amin(top),CLUSTER_4,CLUSTER_11
im_left,numpy.amin(left),CLUSTER_4,CLUSTER_11
trainDatasetGray,"numpy.delete(trainDatasetGray,29929,axis=0)",CLUSTER_4,CLUSTER_11
trainBoundingBoxes,"numpy.delete(trainBoundingBoxes,29929,axis=0)",CLUSTER_4,CLUSTER_11
trainLabels,"numpy.delete(trainLabels,29929,axis=0)",CLUSTER_4,CLUSTER_11
scores_deque,collections.deque(maxlen=print_every),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
smiles_tasks_df,pandas.read_csv(raw_filename),CLUSTER_4,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=SEED)",CLUSTER_4,CLUSTER_0
ax,"seaborn.distplot(atom_num_dist,bins=28,kde=False)",CLUSTER_4,CLUSTER_0
start,time.time(),CLUSTER_10,CLUSTER_12
s,numpy.zeros(nt),CLUSTER_1,CLUSTER_9
a,numpy.zeros(nt),CLUSTER_1,CLUSTER_9
s,numpy.zeros(nt),CLUSTER_1,CLUSTER_9
a,numpy.zeros(nt),CLUSTER_1,CLUSTER_9
s,numpy.zeros(nt),CLUSTER_1,CLUSTER_9
a,numpy.zeros(nt),CLUSTER_1,CLUSTER_9
time,"numpy.linspace(0,total_time,num=nt)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
t1,time.perf_counter(),CLUSTER_10,CLUSTER_12
t2,time.perf_counter(),CLUSTER_10,CLUSTER_12
time,"numpy.arange(0,len(wave_data)",CLUSTER_2,CLUSTER_7
wave_data,"numpy.fromstring(str_data,dtype=np.short)",CLUSTER_2,CLUSTER_7
mse,numpy.mean(pow(abs(wave_data-decoded),CLUSTER_2,CLUSTER_7
policy_list,"numpy.array([[1.],[1.]])",CLUSTER_3,CLUSTER_6
agent.values,"numpy.array([0.,1.])",CLUSTER_3,CLUSTER_6
policy_list,numpy.array([[1.]]),CLUSTER_3,CLUSTER_6
agent.values,numpy.array([0.]),CLUSTER_3,CLUSTER_6
average_v,numpy.array(arr),CLUSTER_3,CLUSTER_6
self.values,"numpy.zeros((self.policy.shape[0],)",CLUSTER_3,CLUSTER_6
policy,"numpy.ones(shape=(env_info['grid_width']*env_info['grid_height'],4)",CLUSTER_3,CLUSTER_6
policy,"numpy.ones(shape=(env_info['grid_width']*env_info['grid_height'],4)",CLUSTER_3,CLUSTER_6
policy,"numpy.ones(shape=(env_info['grid_width']*env_info['grid_height'],4)",CLUSTER_3,CLUSTER_6
Ridge_results,pandas.DataFrame(ridge_cv.cv_results_),CLUSTER_7,CLUSTER_8
Lasso_results,pandas.DataFrame(lasso_cv.cv_results_),CLUSTER_7,CLUSTER_8
coef,"pandas.Series(lasso.coef_,index=X_train.columns)",CLUSTER_7,CLUSTER_8
data,"pandas.concat([data,data_categorical],axis=1)",CLUSTER_7,CLUSTER_8
main_coef,pandas.concat([coef.sort_values(),CLUSTER_7,CLUSTER_8
data_categorical,"pandas.get_dummies(data_categorical,drop_first=True)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
ax,"seaborn.boxplot(x=col,
y='SalePrice',
data=data)",CLUSTER_7,CLUSTER_8
ax,seaborn.distplot(data['SalePrice']),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
"df_train,df_test","sklearn.model_selection.train_test_split(data,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
ridge_cv,"sklearn.model_selection.GridSearchCV(estimator=ridge,
param_grid=params,
scoring='r2',
cv=folds,
return_train_score=True,
verbose=1)",CLUSTER_7,CLUSTER_8
lasso_cv,"sklearn.model_selection.GridSearchCV(estimator=lasso,
param_grid=params,
scoring='r2',
cv=folds,
return_train_score=True,
verbose=1)",CLUSTER_7,CLUSTER_8
ridge,sklearn.linear_model.Ridge(),CLUSTER_7,CLUSTER_8
ridge,sklearn.linear_model.Ridge(alpha=alpha),CLUSTER_7,CLUSTER_8
lasso,sklearn.linear_model.Lasso(),CLUSTER_7,CLUSTER_8
lasso,sklearn.linear_model.Lasso(alpha=alpha_val),CLUSTER_7,CLUSTER_8
n,numpy.arange(N),CLUSTER_1,CLUSTER_10
N,numpy.arange(200),CLUSTER_1,CLUSTER_10
Z,numpy.array(np.matrix(2*n+1),CLUSTER_1,CLUSTER_10
Qy_g,"numpy.zeros((z.size,N.size)",CLUSTER_1,CLUSTER_10
z,"numpy.linspace(-1.,0,300)",CLUSTER_1,CLUSTER_10
ax,"matplotlib.pyplot.axes(xlim=(Qy_g[:,-1].min()",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(7,7)",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_1,CLUSTER_10
X,"numpy.arange(-5,5,0.25)",CLUSTER_1,CLUSTER_10
Y,"numpy.arange(-5,5,0.25)",CLUSTER_1,CLUSTER_10
distance_to_center_line,"numpy.arange(0,1.8,0.2)",CLUSTER_1,CLUSTER_10
delta_headings,"numpy.arange(0,20,0.1)",CLUSTER_1,CLUSTER_10
rotations,"numpy.arange(-1,1,0.2)",CLUSTER_1,CLUSTER_10
current_speeds,"numpy.arange(0,10,0.5)",CLUSTER_1,CLUSTER_10
current_speeds,"numpy.arange(0,15,1)",CLUSTER_1,CLUSTER_10
delta_headings,"numpy.arange(0,1.5,0.1)",CLUSTER_1,CLUSTER_10
rotation_reward,numpy.ones_like(rotations),CLUSTER_1,CLUSTER_10
speed_reward,numpy.ones_like(current_speeds),CLUSTER_1,CLUSTER_10
Z,numpy.sin(R),CLUSTER_1,CLUSTER_10
R,numpy.sqrt(X**2+Y**2),CLUSTER_1,CLUSTER_10
"X,Y","numpy.meshgrid(X,Y)",CLUSTER_1,CLUSTER_10
"current_speeds,delta_headings","numpy.meshgrid(current_speeds,delta_headings)",CLUSTER_1,CLUSTER_10
data1,pandas.read_csv('mnist_train.csv'),CLUSTER_1,CLUSTER_3
data2,pandas.read_csv('mnist_test.csv'),CLUSTER_1,CLUSTER_3
a,"numpy.array([[1,2,3,4,5],[34,3,4,2,4],[4,5,6,7,8]])",CLUSTER_1,CLUSTER_3
value,numpy.array([x-mean_class[k]]),CLUSTER_1,CLUSTER_3
value,numpy.array([x-mean_class_ldamulti[k]]),CLUSTER_1,CLUSTER_3
value,numpy.array([x-mean_class[k]]),CLUSTER_1,CLUSTER_3
ans,"numpy.zeros((x.shape[1],x.shape[1])",CLUSTER_1,CLUSTER_3
first_term,numpy.zeros((10),CLUSTER_1,CLUSTER_3
third_term,numpy.zeros((10),CLUSTER_1,CLUSTER_3
preds,"numpy.zeros((5,1)",CLUSTER_1,CLUSTER_3
u,"numpy.zeros((10,784,784)",CLUSTER_1,CLUSTER_3
second_term,numpy.zeros((10),CLUSTER_1,CLUSTER_3
preds1,"numpy.zeros((5,1)",CLUSTER_1,CLUSTER_3
preds2,"numpy.zeros((5,1)",CLUSTER_1,CLUSTER_3
term,numpy.zeros((2),CLUSTER_1,CLUSTER_3
preds_b,"numpy.zeros((200,1)",CLUSTER_1,CLUSTER_3
third_term[k],numpy.log(size_train_class[k]/ytrain.shape[0]),CLUSTER_1,CLUSTER_3
second_term[k],numpy.log(size_train_class[k]/ytrain.shape[0]),CLUSTER_1,CLUSTER_3
term[k],numpy.log(size_train_class[k]/ytrain.shape[0]),CLUSTER_1,CLUSTER_3
xbar,"numpy.vstack(np.mean(x,axis=0)",CLUSTER_1,CLUSTER_3
labels1,"numpy.asfarray(data1.iloc[:,data1.columns=='label'])",CLUSTER_1,CLUSTER_3
images1,"numpy.asfarray(data1.iloc[:,data1.columns!='label'])",CLUSTER_1,CLUSTER_3
labels2,"numpy.asfarray(data2.loc[:,data2.columns=='label'])",CLUSTER_1,CLUSTER_3
images2,"numpy.asfarray(data2.loc[:,data2.columns!='label'])",CLUSTER_1,CLUSTER_3
b,numpy.cov(a.T),CLUSTER_1,CLUSTER_3
rand_index,"random.randint(1,9989)",CLUSTER_1,CLUSTER_3
rand_index,"random.randint(1,9989)",CLUSTER_1,CLUSTER_3
c,collections.Counter(),CLUSTER_1,CLUSTER_10
c_sites,collections.Counter(trajectory.site_labels(),CLUSTER_1,CLUSTER_10
c_sites,collections.Counter(trajectory.site_labels(),CLUSTER_1,CLUSTER_10
c,collections.Counter(),CLUSTER_1,CLUSTER_10
y,"numpy.zeros((102,1)",CLUSTER_1,CLUSTER_10
y,"numpy.zeros((102,1)",CLUSTER_1,CLUSTER_10
e,"numpy.zeros((102,1)",CLUSTER_1,CLUSTER_10
times,"numpy.linspace(0,100,num=101)",CLUSTER_1,CLUSTER_10
image,numpy.array(image_pil),CLUSTER_1,CLUSTER_10
image_bw,numpy.array(image_pil),CLUSTER_1,CLUSTER_10
cat_image,numpy.array(cat_pil),CLUSTER_1,CLUSTER_10
signal,numpy.sin(2*np.pi*f1*times),CLUSTER_12,CLUSTER_10
times,"numpy.linspace(0,3,100)",CLUSTER_12,CLUSTER_10
response,"requests.get(p_the_URL,headers=p_headers,params=p_params,auth=p_auth)",CLUSTER_10,CLUSTER_4
all_df,pandas.concat(df_list),CLUSTER_11,CLUSTER_12
all_df,pandas.concat(df_list),CLUSTER_11,CLUSTER_12
virus_df,pandas.read_csv(BASE_URL.format(day_label),CLUSTER_11,CLUSTER_12
virus_df,"pandas.read_csv(file,sep=',')",CLUSTER_11,CLUSTER_12
latlong_df,"pandas.read_csv(os.path.join(PROCESSED_DIR,'lat_long_table.csv')",CLUSTER_11,CLUSTER_12
virus_df,"pandas.read_csv(file,sep=',',parse_dates=['LastUpdate'])",CLUSTER_11,CLUSTER_12
START_DATE,"datetime.date(2020,1,22)",CLUSTER_11,CLUSTER_12
END_DATE,"datetime.date(2020,3,12)",CLUSTER_11,CLUSTER_12
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_5
print_table,"pandas.DataFrame(data=table,index=['first','second','third','fourth','fiveth'])",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv(""ORGANICS.csv"",encoding=""cp1251"",delimiter=',')",CLUSTER_7,CLUSTER_5
titanic,"pandas.read_csv(""titanic.csv"",encoding=""cp1251"",delimiter=',')",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv(""ORGANICS.csv"",encoding=""cp1251"",delimiter=',')",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3)",CLUSTER_7,CLUSTER_5
tree,"sklearn.tree.DecisionTreeClassifier(max_depth=4,random_state=0)",CLUSTER_7,CLUSTER_5
newTree,"sklearn.tree.DecisionTreeClassifier(max_depth=5,criterion='entropy')",CLUSTER_7,CLUSTER_5
tree_one,"sklearn.tree.DecisionTreeClassifier(max_depth=2,min_samples_leaf=4)",CLUSTER_7,CLUSTER_5
tree_two,"sklearn.tree.DecisionTreeClassifier(max_depth=4,min_samples_leaf=2)",CLUSTER_7,CLUSTER_5
tree_three,"sklearn.tree.DecisionTreeClassifier(max_depth=1,min_samples_leaf=5)",CLUSTER_7,CLUSTER_5
tree_four,"sklearn.tree.DecisionTreeClassifier(max_depth=5,min_samples_leaf=1)",CLUSTER_7,CLUSTER_5
tree_five,"sklearn.tree.DecisionTreeClassifier(max_depth=6,min_samples_leaf=6)",CLUSTER_7,CLUSTER_5
tree,"sklearn.tree.DecisionTreeClassifier(max_depth=4,min_samples_leaf=2)",CLUSTER_7,CLUSTER_5
le_one,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
le_second,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
lr,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_7,CLUSTER_5
report,"sklearn.metrics.classification_report(y_test,lr.predict(X_test)",CLUSTER_7,CLUSTER_5
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,lr.predict_proba(X_test)",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,lr.predict(X_test)",CLUSTER_7,CLUSTER_5
r,requests.get(url),CLUSTER_0,CLUSTER_8
requested_page,requests.get(request_url),CLUSTER_0,CLUSTER_8
requested_page_1,requests.get(urls_to_scrape[category_articles_url]),CLUSTER_0,CLUSTER_8
requested_page_2,requests.get(tag_1['href']),CLUSTER_0,CLUSTER_8
match,re.compile('\.(pdf),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(couple_dist.ravel(),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(couple_dist.ravel(),CLUSTER_0,CLUSTER_8
datasetObj,pandas.DataFrame(),CLUSTER_0,CLUSTER_8
df_information,"pandas.DataFrame(
{'Category':[category],'Title':[str(title)",CLUSTER_0,CLUSTER_8
df,"pandas.DataFrame({'Datedepublication':data_propre['Date'][indices].values,
'Titre':data_propre['Title'][indices].values,
'Lien':data_propre['Lien'][indices].values,
""Similitudeeuclidienneavecl'articleinterrogé"":couple_dist[indices].ravel()",CLUSTER_0,CLUSTER_8
df,"pandas.DataFrame({'Datedepublication':data_propre['Date'][indices].values,
'Titre':data_propre['Title'][indices].values,
'Lien':data_propre['Lien'][indices].values,
""Similitudeeuclidienneavecl'articleinterrogé"":couple_dist[indices].ravel()",CLUSTER_0,CLUSTER_8
result_bayes,"pandas.DataFrame({'true_labels':y_test,'predicted_labels':predicted_bayes})",CLUSTER_0,CLUSTER_8
result_softmax,"pandas.DataFrame({'true_labels':y_test,'predicted_labels':predicted_nn})",CLUSTER_0,CLUSTER_8
result_svm,"pandas.DataFrame({'true_labels':y_test,'predicted_labels':predicted_svm})",CLUSTER_0,CLUSTER_8
merged,pandas.concat(list_content),CLUSTER_0,CLUSTER_8
data,"pandas.read_csv('train_data_recommendation.csv',sep="";"")",CLUSTER_0,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_train_tfidf,data_propre.Category,test_size=0.25,random_state=42)",CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_train_tfidf,data_propre.Category,test_size=0.25,random_state=42)",CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_train_tfidf,data_propre.Category,test_size=0.25,random_state=42)",CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_train_tfidf,data_propre.Category,test_size=0.25,random_state=42)",CLUSTER_0,CLUSTER_8
clf_neural,"sklearn.neural_network.MLPClassifier(solver='lbfgs',alpha=1e-5,hidden_layer_sizes=(15,)",CLUSTER_0,CLUSTER_8
clf_svm,sklearn.svm.LinearSVC(),CLUSTER_0,CLUSTER_8
couple_dist,"sklearn.metrics.pairwise_distances(headline_features,headline_features[row_index])",CLUSTER_0,CLUSTER_8
couple_dist,"sklearn.metrics.pairwise_distances(tfidf_headline_features,tfidf_headline_features[row_index])",CLUSTER_0,CLUSTER_8
df,"pandas.read_csv('../../data/medium_posts.csv.zip',sep='\t')",CLUSTER_7,CLUSTER_9
df['published'],pandas.to_datetime(df['published']),CLUSTER_7,CLUSTER_9
"train_df2['y'],lambda_prophet",scipy.stats.boxcox(train_df2['y']),CLUSTER_7,CLUSTER_9
y,"numpy.array([self.class_to_index_[label]
forlabeliny],dtype=np.int32)",CLUSTER_4,CLUSTER_7
class_indices,numpy.argmax(self.predict_proba(X),CLUSTER_4,CLUSTER_7
means,"numpy.mean(Z,axis=1)",CLUSTER_4,CLUSTER_7
stds,"numpy.std(Z,axis=1)",CLUSTER_4,CLUSTER_7
W,"np.random.normal(size=(100,100),scale=numpy.sqrt(1/100)",CLUSTER_4,CLUSTER_7
z,"numpy.linspace(-5,5,200)",CLUSTER_4,CLUSTER_7
hidden2_batches,"numpy.array_split(h2_cache[shuffled_idx],n_batches)",CLUSTER_4,CLUSTER_7
y_batches,"numpy.array_split(mnist.train.labels[shuffled_idx],n_batches)",CLUSTER_4,CLUSTER_7
self.classes_,numpy.unique(y),CLUSTER_4,CLUSTER_7
rnd_search,sklearn.model_selection.RandomizedSearchCV(DNNClassifier(random_state=42),CLUSTER_4,CLUSTER_7
rnd_search_bn,sklearn.model_selection.RandomizedSearchCV(DNNClassifier(random_state=42),CLUSTER_4,CLUSTER_7
rnd_search_dropout,sklearn.model_selection.RandomizedSearchCV(DNNClassifier(random_state=42),CLUSTER_4,CLUSTER_7
t0,time.time(),CLUSTER_4,CLUSTER_7
t1,time.time(),CLUSTER_4,CLUSTER_7
t0,time.time(),CLUSTER_4,CLUSTER_7
t1,time.time(),CLUSTER_4,CLUSTER_7
df_died,"pandas.DataFrame([df_survived['age_bucket'],1-df_survived['percentage']])",CLUSTER_1,CLUSTER_3
df_died,"pandas.DataFrame([df_survived['Sex'],1-df_survived['percentage']])",CLUSTER_1,CLUSTER_3
df,"pandas.concat([df_survived,df_died])",CLUSTER_1,CLUSTER_3
df,"pandas.concat([df_survived,df_died])",CLUSTER_1,CLUSTER_3
test_df,pandas.read_csv('/content/drive/MyDrive/Berlin/ReDI/P2-DataAnalyticswithPython/Berlin/WS2019/Titanic_study/titanic_dataset/test.csv'),CLUSTER_1,CLUSTER_3
train_df,pandas.read_csv('/content/drive/MyDrive/Berlin/ReDI/P2-DataAnalyticswithPython/Berlin/WS2019/train.csv'),CLUSTER_1,CLUSTER_3
gender_df,pandas.read_csv('/content/drive/MyDrive/Berlin/ReDI/P2-DataAnalyticswithPython/Berlin/WS2019/Titanic_study/titanic_dataset/gender_submission.csv'),CLUSTER_1,CLUSTER_3
index,numpy.arange(7),CLUSTER_1,CLUSTER_3
index,numpy.arange(2),CLUSTER_1,CLUSTER_3
list_below,numpy.zeros(7),CLUSTER_1,CLUSTER_3
list_below,numpy.zeros(2),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,7)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,2)",CLUSTER_1,CLUSTER_3
energy_array,numpy.asarray(energies[0]),CLUSTER_3,CLUSTER_6
en_bin_bound,numpy.mean(energies[prev_ind+amt-1:prev_ind+amt+1]),CLUSTER_3,CLUSTER_6
energies,"numpy.append(energies,energies[-1])",CLUSTER_3,CLUSTER_6
energy_array,"numpy.append(energy_array,en_bin_bound)",CLUSTER_3,CLUSTER_6
ec_table,numpy.loadtxt(ec_table_file),CLUSTER_3,CLUSTER_6
chan_bin_table,numpy.loadtxt(chan_bin_file),CLUSTER_3,CLUSTER_6
f_os,"os.popen(""file2.txt"",""w"")",CLUSTER_10,CLUSTER_4
f_os,"os.popen(""file2.txt"",""w"")",CLUSTER_10,CLUSTER_4
f_os,"os.popen(""file2.txt"",""w"")",CLUSTER_10,CLUSTER_4
temp,"pandas.merge(mean_df,mode_df,how='left',on=['SaleCondition'])",CLUSTER_5,CLUSTER_1
temp,"pandas.merge(temp,median_df,how='left',on=['SaleCondition'])",CLUSTER_5,CLUSTER_1
temp,"pandas.merge(temp,max_df,how='left',on=['SaleCondition'])",CLUSTER_5,CLUSTER_1
df,"pandas.merge(df,temp,how='left',on=['SaleCondition'])",CLUSTER_5,CLUSTER_1
df,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_5,CLUSTER_1
train_Y,numpy.log1p(df['SalePrice']),CLUSTER_5,CLUSTER_1
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
estimator,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame({'A':[""a"",""b"",""a"",""c"",""a""]})",CLUSTER_7,CLUSTER_3
loan_master,"pandas.read_csv(""loan.csv"",low_memory=False)",CLUSTER_7,CLUSTER_3
flu,"pandas.read_csv('flu.csv',index_col='Date',parse_dates=True)",CLUSTER_11,CLUSTER_12
start,"datetime.datetime(2004,1,1)",CLUSTER_11,CLUSTER_12
end,"datetime.datetime(2016,8,6)",CLUSTER_11,CLUSTER_12
"fig,axes","matplotlib.pyplot.subplots(1,11,figsize=(25,5)",CLUSTER_4,CLUSTER_7
start,time.time(),CLUSTER_9,CLUSTER_2
end,time.time(),CLUSTER_9,CLUSTER_2
eda_sorted_df['DayofWeek'],pandas.Series(day_of_week),CLUSTER_9,CLUSTER_2
eda_df,pandas.read_csv('first150.csv'),CLUSTER_9,CLUSTER_2
file_combined_df,pandas.read_csv('file_combined.csv'),CLUSTER_9,CLUSTER_2
unique_list_thread_title,numpy.unique(eda_sorted_df['thread_title']),CLUSTER_9,CLUSTER_2
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_9,CLUSTER_2
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_9,CLUSTER_2
x,"datetime.datetime.combine(datetime.date(2008,6,23)",CLUSTER_9,CLUSTER_2
datetime_object,datetime.datetime.now(),CLUSTER_9,CLUSTER_2
post_freq_2,"datetime.datetime.strptime(date,""%d-%m-%Y,%I:%M%p"")",CLUSTER_9,CLUSTER_2
a,"numpy.asarray([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,1]])",CLUSTER_2,CLUSTER_7
xmat,"numpy.zeros((x.shape[0],num_steps,feat_len)",CLUSTER_2,CLUSTER_7
ymat,"numpy.zeros((x.shape[0],feat_len)",CLUSTER_2,CLUSTER_7
y1_tf,"numpy.reshape(y,(batch_size,num_steps,1)",CLUSTER_2,CLUSTER_7
mnist,"scipy.io.loadmat(""./mnist/mnist-original.mat"")",CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=666)",CLUSTER_5,CLUSTER_9
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_9
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_9
pca,sklearn.decomposition.PCA(0.95),CLUSTER_5,CLUSTER_9
rf_clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_5,CLUSTER_9
df_merged,pandas.concat(frames),CLUSTER_7,CLUSTER_5
df_with_keys,"pandas.concat(frames,keys=keys)",CLUSTER_7,CLUSTER_5
df1,"pandas.read_csv(""Youtube01-Psy.csv"")",CLUSTER_7,CLUSTER_5
df2,"pandas.read_csv(""Youtube02-KatyPerry.csv"")",CLUSTER_7,CLUSTER_5
df3,"pandas.read_csv(""Youtube03-LMFAO.csv"")",CLUSTER_7,CLUSTER_5
df4,"pandas.read_csv(""Youtube04-Eminem.csv"")",CLUSTER_7,CLUSTER_5
df5,"pandas.read_csv(""Youtube05-Shakira.csv"")",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,df_y,test_size=0.33)",CLUSTER_7,CLUSTER_5
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_5
t_start,time.time(),CLUSTER_3,CLUSTER_6
"t2,aem2","nic.get_photon_data_arr(h5file,spots=numpy.arange(48)",CLUSTER_3,CLUSTER_6
d,numpy.diff(tx[:]),CLUSTER_3,CLUSTER_6
d,numpy.diff(tx[:]),CLUSTER_3,CLUSTER_6
xy_data,"collections.namedtuple(""xy_data"",""xyxuyu"")",CLUSTER_4,CLUSTER_11
reso_fit_data,"collections.namedtuple(""reso_fit_data"",""xyresidualsfR"")",CLUSTER_4,CLUSTER_11
_,"matplotlib.pyplot.plot([-100,100],[-100,100])",CLUSTER_7,CLUSTER_3
_,"matplotlib.pyplot.ylabel(""Count"")",CLUSTER_7,CLUSTER_3
hist,pandas.DataFrame(history.history),CLUSTER_7,CLUSTER_3
hist,pandas.DataFrame(history.history),CLUSTER_7,CLUSTER_3
raw_dataset,"pandas.read_csv(dataset_path,names=column_names,
na_values=""?"",comment='\t',
sep="""",skipinitialspace=True)",CLUSTER_7,CLUSTER_3
cur_w,"numpy.zeros([784,500],np.float32)",CLUSTER_2,CLUSTER_7
cur_vb,"numpy.zeros([784],np.float32)",CLUSTER_2,CLUSTER_7
cur_hb,"numpy.zeros([500],np.float32)",CLUSTER_2,CLUSTER_7
prv_w,"numpy.zeros([784,500],np.float32)",CLUSTER_2,CLUSTER_7
prv_vb,"numpy.zeros([784],np.float32)",CLUSTER_2,CLUSTER_7
prv_hb,"numpy.zeros([500],np.float32)",CLUSTER_2,CLUSTER_7
imgplot,matplotlib.pyplot.imshow(image),CLUSTER_2,CLUSTER_7
imgplot,matplotlib.pyplot.imshow(image),CLUSTER_2,CLUSTER_7
imgplot,matplotlib.pyplot.imshow(img),CLUSTER_2,CLUSTER_7
imgplot,matplotlib.pyplot.imshow(img),CLUSTER_2,CLUSTER_7
tick_marks,numpy.arange(len(classes),CLUSTER_4,CLUSTER_11
y,numpy.array(y),CLUSTER_4,CLUSTER_11
encoding,numpy.zeros((len(x),CLUSTER_4,CLUSTER_11
encoding,numpy.zeros((len(x),CLUSTER_4,CLUSTER_11
idx_others,numpy.where(y==0),CLUSTER_4,CLUSTER_11
"categories,category_counts","numpy.unique(y,return_counts=True)",CLUSTER_4,CLUSTER_11
"categories_train,category_counts_train","numpy.unique(y_train,return_counts=True)",CLUSTER_4,CLUSTER_11
"categories_t,category_counts_t","numpy.unique(test_y,return_counts=True)",CLUSTER_4,CLUSTER_11
x1_vec,numpy.load('../../dm_emb/deepmoji_train_x1.npy'),CLUSTER_4,CLUSTER_11
x2_vec,numpy.load('../../dm_emb/deepmoji_train_x2.npy'),CLUSTER_4,CLUSTER_11
x3_vec,numpy.load('../../dm_emb/deepmoji_train_x3.npy'),CLUSTER_4,CLUSTER_11
test_x1_vec,numpy.load('../../dm_emb/deepmoji_test_x1.npy'),CLUSTER_4,CLUSTER_11
test_x2_vec,numpy.load('../../dm_emb/deepmoji_test_x2.npy'),CLUSTER_4,CLUSTER_11
test_x3_vec,numpy.load('../../dm_emb/deepmoji_test_x3.npy'),CLUSTER_4,CLUSTER_11
data,"pandas.read_csv('../../deepmoji/data/train.txt',sep='\t')",CLUSTER_4,CLUSTER_11
test_data,"pandas.read_csv('../../deepmoji/data/test.txt',sep='\t')",CLUSTER_4,CLUSTER_11
vocabulary,json.load(f),CLUSTER_4,CLUSTER_11
vocabulary,json.load(f),CLUSTER_4,CLUSTER_11
mc_svm_ovo,"sklearn.svm.SVC(decision_function_shape='ovo',kernel='linear',C=100)",CLUSTER_4,CLUSTER_11
mc_svm_ovo,"sklearn.svm.SVC(decision_function_shape='ovo',kernel='linear',C=100)",CLUSTER_4,CLUSTER_11
mc_svm_ovr,"sklearn.svm.SVC(decision_function_shape='ovr',kernel='linear',C=100)",CLUSTER_4,CLUSTER_11
mc_svm_ovr,"sklearn.svm.SVC(decision_function_shape='ovr',kernel='linear',C=100)",CLUSTER_4,CLUSTER_11
LR,"sklearn.pipeline.Pipeline([('scaler',MinMaxScaler()",CLUSTER_4,CLUSTER_11
mc_nb,"sklearn.pipeline.Pipeline([('scaler',MinMaxScaler()",CLUSTER_4,CLUSTER_11
mc_nb,"sklearn.pipeline.Pipeline([('clf',MultinomialNB()",CLUSTER_4,CLUSTER_11
LR,sklearn.linear_model.LogisticRegression(random_state=0),CLUSTER_4,CLUSTER_11
LR,sklearn.linear_model.LogisticRegression(random_state=0),CLUSTER_4,CLUSTER_11
nml_models,pandas.DataFrame(nml_models),CLUSTER_5,CLUSTER_9
df,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
prop_r,"numpy.array([stats.pearsonr(X[i],df[col])",CLUSTER_5,CLUSTER_9
trans,numpy.sign(df[col]),CLUSTER_5,CLUSTER_9
dist,"numpy.apply_along_axis(euclidean,1,X,center)",CLUSTER_5,CLUSTER_9
dist,"numpy.apply_along_axis(euclidean,1,pca_centers,X_w_noise.ix[model][:-2])",CLUSTER_5,CLUSTER_9
labels,numpy.unique(cluster.labels_),CLUSTER_5,CLUSTER_9
labels,numpy.unique(cluster.labels_),CLUSTER_5,CLUSTER_9
x,"pandas.DataFrame(x,columns=prop_names)",CLUSTER_5,CLUSTER_9
principalDf,pandas.DataFrame(data=principalComponents),CLUSTER_5,CLUSTER_9
clusterer,sklearn.cluster.KMeans(n_clusters=n_clusters),CLUSTER_5,CLUSTER_9
cluster,"sklearn.cluster.KMeans(n_clusters=kmeans_n_clusters,random_state=1)",CLUSTER_5,CLUSTER_9
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_9
sample_silhouette_values,"sklearn.metrics.silhouette_samples(X,cluster_labels)",CLUSTER_5,CLUSTER_9
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels)",CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,10)",CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,10)",CLUSTER_5,CLUSTER_9
pca,"sklearn.decomposition.PCA(svd_solver='full',n_components=0.95)",CLUSTER_5,CLUSTER_9
X,numpy.array(column_original),CLUSTER_4,CLUSTER_11
y,numpy.array(column_repeated),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
linear_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
r2,"sklearn.metrics.r2_score(column_original,column_repeated)",CLUSTER_4,CLUSTER_11
r2,"sklearn.metrics.r2_score(y,y_pred)",CLUSTER_4,CLUSTER_11
df_back_rate,"pandas.DataFrame(result,columns=['promotion','back_rate'])",CLUSTER_7,CLUSTER_8
df_mean_gmv,"pandas.DataFrame(result,columns=['promotion','mean_gmv'])",CLUSTER_7,CLUSTER_8
df_result,"pandas.DataFrame(result,columns=['column','val','promotion_id','transaction_cnt','back_rate','mean_gmv'])",CLUSTER_7,CLUSTER_8
df_full_age,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_full_gender,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_full_member_duration_days,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_customer_transaction,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
feat_importances,"pandas.Series(rfr.feature_importances_,index=X_train.columns)",CLUSTER_7,CLUSTER_8
data,"pandas.get_dummies(data,columns=['gender','offer_type'])",CLUSTER_7,CLUSTER_8
df_transaction_with_profile,"pandas.merge(df_transaction,profile,how='left',on=['customer_id'])",CLUSTER_7,CLUSTER_8
df_full_age_with_portfolio,"pandas.merge(df_full_age,portfolio,how='left',on=['promotion_id'])",CLUSTER_7,CLUSTER_8
df_full_gender,"pandas.merge(df_full_gender,portfolio,how='left',on=['promotion_id'])",CLUSTER_7,CLUSTER_8
df_full_member_duration_days_with_portfolio,"pandas.merge(df_full_member_duration_days,portfolio,how='left',on=['promotion_id'])",CLUSTER_7,CLUSTER_8
df_all,"pandas.merge(df_received_info,profile,how='left',on=['customer_id'])",CLUSTER_7,CLUSTER_8
df_all,"pandas.merge(df_all,portfolio,how='left',on=['promotion_id'])",CLUSTER_7,CLUSTER_8
df_all,"pandas.merge(df_all,df_received_info,how='left',on=['customer_id','promotion_id'])",CLUSTER_7,CLUSTER_8
df_all,"pandas.merge(df_all,df_received_cnt,how='left',on=['customer_id','promotion_id'])",CLUSTER_7,CLUSTER_8
df_all,"pandas.merge(df_all,df_viewed_cnt,how='left',on=['customer_id','promotion_id'])",CLUSTER_7,CLUSTER_8
df_all,"pandas.merge(df_all,df_customer_transaction,how='left',on=['customer_id'])",CLUSTER_7,CLUSTER_8
portfolio,"pandas.read_json('data/portfolio.json',orient='records',lines=True)",CLUSTER_7,CLUSTER_8
profile,"pandas.read_json('data/profile.json',orient='records',lines=True)",CLUSTER_7,CLUSTER_8
transcript,"pandas.read_json('data/transcript.json',orient='records',lines=True)",CLUSTER_7,CLUSTER_8
profile['became_member_on'],pandas.to_datetime(profile['became_member_on']),CLUSTER_7,CLUSTER_8
profile['age'],"numpy.where(profile['age']==118,median_age,profile['age'])",CLUSTER_7,CLUSTER_8
y,numpy.expm1(y.get_label(),CLUSTER_7,CLUSTER_8
yhat,numpy.expm1(yhat),CLUSTER_7,CLUSTER_8
y_train_scaled,numpy.log1p(y_train),CLUSTER_7,CLUSTER_8
y_test_scaled,numpy.log1p(y_test),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_7,CLUSTER_8
g1,"seaborn.distplot(data['consumption_amount'],hist=True,label='skewness:{:.2f}'.format(data['consumption_amount'].skew()",CLUSTER_7,CLUSTER_8
g2,seaborn.distplot(np.log1p(data['consumption_amount']),CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""age"",y=""transaction_cnt"",
hue=""offer_type"",
data=df_full_age_with_portfolio)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""age"",y=""back_rate"",
hue=""offer_type"",
data=df_full_age_with_portfolio)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""age"",y=""mean_gmv"",
hue=""offer_type"",
data=df_full_age_with_portfolio)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""gender"",y=""transaction_cnt"",
hue=""offer_type"",
data=df_full_gender)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""gender"",y=""back_rate"",
hue=""offer_type"",
data=df_full_gender)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""gender"",y=""mean_gmv"",
hue=""offer_type"",
data=df_full_gender)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""member_duration_days"",y=""transaction_cnt"",
hue=""offer_type"",
data=df_full_member_duration_days_with_portfolio)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""member_duration_days"",y=""back_rate"",
hue=""offer_type"",
data=df_full_member_duration_days_with_portfolio)",CLUSTER_7,CLUSTER_8
g,"seaborn.lineplot(x=""member_duration_days"",y=""mean_gmv"",
hue=""offer_type"",
data=df_full_member_duration_days_with_portfolio)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
rfr,sklearn.ensemble.RandomForestRegressor(n_estimators=15),CLUSTER_7,CLUSTER_8
score,sklearn.metrics.r2_score(np.expm1(y_test_scaled),CLUSTER_7,CLUSTER_8
score,sklearn.metrics.r2_score(np.expm1(y_test_scaled),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
table,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
ax,seaborn.PairGrid(stock_rets),CLUSTER_7,CLUSTER_8
ax,"seaborn.pairplot(stock_rets,diag_kind='hist')",CLUSTER_7,CLUSTER_8
d1,"datetime.datetime.strptime(start,""%Y-%m-%d"")",CLUSTER_7,CLUSTER_8
d2,"datetime.datetime.strptime(end,""%Y-%m-%d"")",CLUSTER_7,CLUSTER_8
m,sklearn.ensemble.RandomForestRegressor(n_jobs=-1),CLUSTER_12,CLUSTER_4
m,sklearn.ensemble.RandomForestRegressor(n_jobs=-1),CLUSTER_12,CLUSTER_4
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=2000,min_samples_leaf=1,max_features=0.3,n_jobs=-1,oob_score=True)",CLUSTER_12,CLUSTER_4
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=2000,max_features=0.3,n_jobs=-1,oob_score=True)",CLUSTER_12,CLUSTER_4
rforest,"sklearn.ensemble.RandomForestRegressor(n_estimators=2000,max_features=0.3,n_jobs=-1,oob_score=True)",CLUSTER_12,CLUSTER_4
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=10)",CLUSTER_12,CLUSTER_4
content_text,re.sub(r'\([^),CLUSTER_10,CLUSTER_4
tokens,"re.sub(r""[^a-z0-9]+"","""",string.lower()",CLUSTER_10,CLUSTER_4
curent_path,os.getcwd(),CLUSTER_10,CLUSTER_4
output,"pandas.concat([df,dfswap])",CLUSTER_7,CLUSTER_5
tourney_data,"pandas.merge(tourney_data,season_statistics_T1,on=['Season','T1_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
tourney_data,"pandas.merge(tourney_data,season_statistics_T2,on=['Season','T2_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
tourney_data,"pandas.merge(tourney_data,rank_T1,on=['Season','T1_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
tourney_data,"pandas.merge(tourney_data,rank_T2,on=['Season','T2_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
sub,"pandas.merge(sub,season_statistics_T1,on=['Season','T1_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
sub,"pandas.merge(sub,season_statistics_T2,on=['Season','T2_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
sub,"pandas.merge(sub,rank_T1,on=['Season','T1_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
sub,"pandas.merge(sub,rank_T2,on=['Season','T2_TeamID'],how='left')",CLUSTER_7,CLUSTER_5
tourney_results,"pandas.read_csv(os.path.join(data_folder,sub_folder,'{}NCAATourneyDetailedResults.csv'.format(gender)",CLUSTER_7,CLUSTER_5
regular_results,"pandas.read_csv(os.path.join(data_folder,sub_folder,'{}RegularSeasonDetailedResults.csv'.format(gender)",CLUSTER_7,CLUSTER_5
rank,"pandas.read_csv(os.path.join(data_folder,sub_folder,'{}MasseyOrdinals.csv'.format(gender)",CLUSTER_7,CLUSTER_5
sub,"pandas.read_csv(os.path.join(data_folder,'{}SampleSubmissionStage{}_{}.csv'.format(gender,stage,year)",CLUSTER_7,CLUSTER_5
r,"numpy.where(y>0,0,1)",CLUSTER_7,CLUSTER_5
rmask,"numpy.where(y[mask]>0,0,1)",CLUSTER_7,CLUSTER_5
clf,"sklearn.linear_model.LogisticRegression(solver='liblinear',C=10000)",CLUSTER_7,CLUSTER_5
clf,"sklearn.linear_model.LogisticRegression(solver='liblinear',C=10000)",CLUSTER_7,CLUSTER_5
clf,"sklearn.linear_model.LogisticRegression(solver='liblinear',C=10000)",CLUSTER_7,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=cross_validation_fold,shuffle=True,random_state=42)",CLUSTER_7,CLUSTER_5
positive_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
negative_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
total_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
pos_neg_ratios,collections.Counter(),CLUSTER_12,CLUSTER_6
review_counter,collections.Counter(),CLUSTER_12,CLUSTER_6
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
layer_0,numpy.zeros(10),CLUSTER_12,CLUSTER_6
layer_1,numpy.zeros(5),CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
self.layer_1,"numpy.zeros((1,hidden_nodes)",CLUSTER_12,CLUSTER_6
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
boston_dataset,sklearn.datasets.load_boston(),CLUSTER_7,CLUSTER_5
boston_data,"pandas.DataFrame(boston_dataset.data,columns=boston_dataset.feature_names)",CLUSTER_7,CLUSTER_5
g,"seaborn.jointplot(""MEDV"",""LSTAT"",data=boston_data,xlim=(0,60)",CLUSTER_7,CLUSTER_5
g,"seaborn.stripplot(x=""CHAS"",y=""MEDV"",data=boston_data,jitter=True)",CLUSTER_7,CLUSTER_5
arr,"numpy.array([iforiinrange(1,20)",CLUSTER_7,CLUSTER_3
arr,numpy.array(my_list),CLUSTER_7,CLUSTER_3
a,"numpy.ones([2,2])",CLUSTER_7,CLUSTER_3
b,"numpy.ones([2,2])",CLUSTER_7,CLUSTER_3
x,"numpy.linspace(0,5,11)",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(5,4)",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame({'col1':[1,2,3,4],
'col2':[444,555,666,444],
'col3':['abc','def','ghi','xyz']})",CLUSTER_7,CLUSTER_3
tips,"seaborn.load_dataset(""tips"")",CLUSTER_7,CLUSTER_3
flights,"seaborn.load_dataset(""flights"")",CLUSTER_7,CLUSTER_3
train_set,"pandas.read_csv(""/Users/peterhoang/Downloads/Ubiqum/UJIndoorLoc/trainingData.csv"")",CLUSTER_7,CLUSTER_5
test_set,"pandas.read_csv(""/Users/peterhoang/Downloads/Ubiqum/UJIndoorLoc/validationData.csv"")",CLUSTER_7,CLUSTER_5
"train_set_copy.iloc[:,0:520]","numpy.where(train_set_copy.iloc[:,0:520]<=0,
train_set_copy.iloc[:,0:520]+105,
train_set_copy.iloc[:,0:520]-100)",CLUSTER_7,CLUSTER_5
"test_set_copy.iloc[:,0:520]","numpy.where(test_set_copy.iloc[:,0:520]<=0,
test_set_copy.iloc[:,0:520]+105,
test_set_copy.iloc[:,0:520]-100)",CLUSTER_7,CLUSTER_5
KNN_error,"math.sqrt(mean_squared_error(y_test,pred_K)",CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=5),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=i),CLUSTER_7,CLUSTER_5
KNN,sklearn.neighbors.KNeighborsRegressor(n_neighbors=K),CLUSTER_7,CLUSTER_5
KNN_r2,"sklearn.metrics.r2_score(y_test,pred_K)",CLUSTER_7,CLUSTER_5
dtree,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_5
rfc,sklearn.ensemble.RandomForestRegressor(n_estimators=200),CLUSTER_7,CLUSTER_5
svm,sklearn.svm.SVR(),CLUSTER_7,CLUSTER_5
MLP,sklearn.neural_network.MLPRegressor(),CLUSTER_7,CLUSTER_5
wheat,"pandas.read_csv(""./Datasets/wheat.data"")",CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
imagem_filtrada,"scipy.signal.correlate2d(nova_imagem,mascara,mode='same')",CLUSTER_1,CLUSTER_9
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
new_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_6,CLUSTER_11
count_labels,numpy.zeros((num_classes),CLUSTER_6,CLUSTER_11
"x,y",numpy.where(img==key),CLUSTER_6,CLUSTER_11
corr_arr,numpy.zeros_like(pred_arr),CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
iou,numpy.mean(np.sum(intersection),CLUSTER_6,CLUSTER_11
intersection,"numpy.bitwise_and(out_labels_np,gt_res_img)",CLUSTER_6,CLUSTER_11
union,"numpy.bitwise_or(out_labels_np,gt_res_img)",CLUSTER_6,CLUSTER_11
valid_keys,numpy.unique(img),CLUSTER_6,CLUSTER_11
un_labs,numpy.unique(gt_lab),CLUSTER_6,CLUSTER_11
startTime_for_tictoc,time.time(),CLUSTER_6,CLUSTER_11
X_train,"os.listdir(os.path.join(colpath,'train')",CLUSTER_6,CLUSTER_11
Y_train,"os.listdir(os.path.join(segpath,'train')",CLUSTER_6,CLUSTER_11
X_val,"os.listdir(os.path.join(colpath,'val')",CLUSTER_6,CLUSTER_11
Y_val,"os.listdir(os.path.join(segpath,'val')",CLUSTER_6,CLUSTER_11
X_test,"os.listdir(os.path.join(colpath,'test')",CLUSTER_6,CLUSTER_11
Y_test,"os.listdir(os.path.join(segpath,'test')",CLUSTER_6,CLUSTER_11
all_labels,os.listdir(dataPath),CLUSTER_6,CLUSTER_11
all_imgs,"os.listdir(os.path.join(root,orig_Dir)",CLUSTER_6,CLUSTER_11
all_test_imgs,"os.listdir(os.path.join(colpath,'test')",CLUSTER_6,CLUSTER_11
id_to_color_map,json.load(f),CLUSTER_6,CLUSTER_11
students,"numpy.array([1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0])",CLUSTER_1,CLUSTER_10
df,"pandas.read_excel(DATA_PATH+""rawdata/Послойноеописаниесфотографиями.xlsx"")",CLUSTER_4,CLUSTER_11
"sns.heatmap(corr,cmap","seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_11
"fig,axs","matplotlib.pyplot.subplots(y_len,x_len,figsize=(20,40)",CLUSTER_4,CLUSTER_11
"fig,axs","matplotlib.pyplot.subplots(y_len,x_len,figsize=(15,33)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(y_len,x_len,figsize=(2,80)",CLUSTER_4,CLUSTER_11
images_paths,os.listdir(IMAGES_PATH),CLUSTER_4,CLUSTER_11
label_vals,numpy.unique(example_labels),CLUSTER_4,CLUSTER_0
df_train,"pandas.read_csv(os.path.join(competition_name,'train_masks.csv')",CLUSTER_4,CLUSTER_0
df_Acc,"pandas.DataFrame([acc_train,acc_test])",CLUSTER_5,CLUSTER_5
dataframe,"pandas.read_csv(filename,header=-1)",CLUSTER_5,CLUSTER_5
err_t,"numpy.dot(D_t,indicator_1_0)",CLUSTER_5,CLUSTER_5
D_t,numpy.ones(n_train),CLUSTER_5,CLUSTER_5
D_t,"numpy.multiply(D_t,np.exp([-alpha_t*float(yhx_i)",CLUSTER_5,CLUSTER_5
"pred_train,pred_test",numpy.sign(pred_train),CLUSTER_5,CLUSTER_5
clf_tree,"sklearn.tree.DecisionTreeClassifier(max_depth=1,random_state=1)",CLUSTER_5,CLUSTER_5
"train_set,test_set","sklearn.model_selection.train_test_split(dataframe,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame({'X_train':X_train.shape[0],'X_valid':X_valid.shape[0],'X_test':X_test.shape[0]},index=['Taille'])",CLUSTER_4,CLUSTER_11
df2,pandas.DataFrame({'drama':str(int(data[0]*100),CLUSTER_4,CLUSTER_11
df3,pandas.DataFrame({'mystery':str(int(data[7]*100),CLUSTER_4,CLUSTER_11
df,"pandas.DataFrame(y_train,columns=list_genres)",CLUSTER_4,CLUSTER_11
indices,numpy.arange(len(results),CLUSTER_4,CLUSTER_11
scores,numpy.array(scores),CLUSTER_4,CLUSTER_11
y_pred,numpy.zeros(y_train.shape),CLUSTER_4,CLUSTER_11
y_pred,numpy.zeros(y_train.shape),CLUSTER_4,CLUSTER_11
"y_pred[:,i]",numpy.ones(y_pred.shape[0]),CLUSTER_4,CLUSTER_11
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_4,CLUSTER_11
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_4,CLUSTER_11
selected_features,"numpy.mean(selected_features,axis=0)",CLUSTER_4,CLUSTER_11
selected_features,"numpy.mean(selected_features,axis=0)",CLUSTER_4,CLUSTER_11
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_4,CLUSTER_11
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_4,CLUSTER_11
"train_sizes,train_scores,test_scores","learning_curve(clf,X_train,y_train,cv=5,scoring='f1_weighted',train_sizes=numpy.linspace(0.1,1.0,10)",CLUSTER_4,CLUSTER_11
t0,time.time(),CLUSTER_4,CLUSTER_11
test_time,time.time(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_4,CLUSTER_11
f1_micro,"sklearn.metrics.f1_score(y_train,y_pred,average=""micro"")",CLUSTER_4,CLUSTER_11
f1_macro,"sklearn.metrics.f1_score(y_train,y_pred,average=""macro"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_train,y_pred,average=""weighted"")",CLUSTER_4,CLUSTER_11
f1_samples,"sklearn.metrics.f1_score(y_train,y_pred,average=""samples"")",CLUSTER_4,CLUSTER_11
f1_micro,"sklearn.metrics.f1_score(y_train,y_pred,average=""micro"")",CLUSTER_4,CLUSTER_11
f1_macro,"sklearn.metrics.f1_score(y_train,y_pred,average=""macro"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_train,y_pred,average=""weighted"")",CLUSTER_4,CLUSTER_11
f1_samples,"sklearn.metrics.f1_score(y_train,y_pred,average=""samples"")",CLUSTER_4,CLUSTER_11
f1_micro,"sklearn.metrics.f1_score(y_valid,pred,average=""micro"")",CLUSTER_4,CLUSTER_11
f1_macro,"sklearn.metrics.f1_score(y_valid,pred,average=""macro"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_valid,pred,average=""weighted"")",CLUSTER_4,CLUSTER_11
f1_samples,"sklearn.metrics.f1_score(y_valid,pred,average=""samples"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_sub_test,y_pred,average=""binary"")",CLUSTER_4,CLUSTER_11
f1,"sklearn.metrics.f1_score(y_valid[:,i],pred,average=""binary"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_valid,pred,average=""weighted"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_valid,pred,average=""weighted"")",CLUSTER_4,CLUSTER_11
f1_weighted,"sklearn.metrics.f1_score(y_valid,pred,average=""weighted"")",CLUSTER_4,CLUSTER_11
clf,sklearn.naive_bayes.BernoulliNB(alpha=0.005),CLUSTER_4,CLUSTER_11
clf,sklearn.naive_bayes.BernoulliNB(alpha=0.005),CLUSTER_4,CLUSTER_11
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(clf,X_train,y_train,cv=5,scoring='f1_weighted',train_sizes=np.linspace(0.1,1.0,10)",CLUSTER_4,CLUSTER_11
selector,"sklearn.feature_selection.SelectKBest(chi2,k='all')",CLUSTER_4,CLUSTER_11
selector,"sklearn.feature_selection.SelectKBest(chi2,k='all')",CLUSTER_4,CLUSTER_11
x,numpy.arange(9),CLUSTER_7,CLUSTER_3
x,numpy.arange(5),CLUSTER_7,CLUSTER_3
x,"numpy.arange(1,6)",CLUSTER_7,CLUSTER_3
heights,numpy.array(data['height(cm),CLUSTER_7,CLUSTER_3
y,numpy.zeros(10),CLUSTER_7,CLUSTER_3
y,numpy.zeros(10),CLUSTER_7,CLUSTER_3
output,numpy.empty(len(values),CLUSTER_7,CLUSTER_3
z,numpy.empty(5),CLUSTER_7,CLUSTER_3
theta,"numpy.linspace(0,np.pi,3)",CLUSTER_7,CLUSTER_3
data,pandas.read_csv('president_heights.csv'),CLUSTER_7,CLUSTER_3
prediction,numpy.array(predictions),CLUSTER_4,CLUSTER_7
boxes_squeeze,numpy.squeeze(boxes),CLUSTER_4,CLUSTER_7
classes_squeeze,numpy.squeeze(classes),CLUSTER_4,CLUSTER_7
image,"numpy.true_divide(image,255)",CLUSTER_4,CLUSTER_7
image_np_expanded,"numpy.expand_dims(image_np,axis=0)",CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttimeall,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttimett,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtimett,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
starttime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtime,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
endtimeall,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
df_feat,"pandas.DataFrame(cancer['data'],columns=cancer['feature_names'])",CLUSTER_4,CLUSTER_0
df_y,"pandas.DataFrame(y,columns=['Class'])",CLUSTER_4,CLUSTER_0
df_feat,"pandas.DataFrame(scaled_features,columns=df_feat.columns)",CLUSTER_4,CLUSTER_0
df,"pandas.concat([df_feat,df_y],axis=1)",CLUSTER_4,CLUSTER_0
x,numpy.arange(len(np.array(params[p]),CLUSTER_4,CLUSTER_0
train_labels,numpy.array(train_df.pop('Class'),CLUSTER_4,CLUSTER_0
val_labels,numpy.array(val_df.pop('Class'),CLUSTER_4,CLUSTER_0
test_labels,numpy.array(test_df.pop('Class'),CLUSTER_4,CLUSTER_0
train_features,numpy.array(train_df),CLUSTER_4,CLUSTER_0
val_features,numpy.array(val_df),CLUSTER_4,CLUSTER_0
test_features,numpy.array(test_df),CLUSTER_4,CLUSTER_0
testset,numpy.array(score),CLUSTER_4,CLUSTER_0
x,numpy.array(params[p]),CLUSTER_4,CLUSTER_0
y_1,numpy.array(means_train[best_index]),CLUSTER_4,CLUSTER_0
e_1,numpy.array(stds_train[best_index]),CLUSTER_4,CLUSTER_0
y_2,numpy.array(means_test[best_index]),CLUSTER_4,CLUSTER_0
e_2,numpy.array(stds_test[best_index]),CLUSTER_4,CLUSTER_0
y_3,numpy.array(testset[best_index]),CLUSTER_4,CLUSTER_0
testset,numpy.array(score),CLUSTER_4,CLUSTER_0
x,numpy.array(params[p]),CLUSTER_4,CLUSTER_0
y_1,numpy.array(means_train[best_index]),CLUSTER_4,CLUSTER_0
e_1,numpy.array(stds_train[best_index]),CLUSTER_4,CLUSTER_0
y_2,numpy.array(means_test[best_index]),CLUSTER_4,CLUSTER_0
e_2,numpy.array(stds_test[best_index]),CLUSTER_4,CLUSTER_0
y_3,numpy.array(testset[best_index]),CLUSTER_4,CLUSTER_0
testset,numpy.array(score),CLUSTER_4,CLUSTER_0
y_1,numpy.array(means_train[best_index]),CLUSTER_4,CLUSTER_0
e_1,numpy.array(stds_train[best_index]),CLUSTER_4,CLUSTER_0
y_2,numpy.array(means_test[best_index]),CLUSTER_4,CLUSTER_0
e_2,numpy.array(stds_test[best_index]),CLUSTER_4,CLUSTER_0
y_3,numpy.array(testset[best_index]),CLUSTER_4,CLUSTER_0
best_index,numpy.where(best_parms_mask),CLUSTER_4,CLUSTER_0
best_index,numpy.where(best_parms_mask),CLUSTER_4,CLUSTER_0
best_index,numpy.where(best_parms_mask),CLUSTER_4,CLUSTER_0
train_features,"numpy.clip(train_features,-5,5)",CLUSTER_4,CLUSTER_0
val_features,"numpy.clip(val_features,-5,5)",CLUSTER_4,CLUSTER_0
test_features,"numpy.clip(test_features,-5,5)",CLUSTER_4,CLUSTER_0
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_4,CLUSTER_0
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_4,CLUSTER_0
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_4,CLUSTER_0
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_4,CLUSTER_0
initial_bias,numpy.log([pos/neg]),CLUSTER_4,CLUSTER_0
n_jobs,"None,train_sizes=numpy.linspace(.1,1.0,5)",CLUSTER_4,CLUSTER_0
m,numpy.stack(masks[:i]+masks[i+1:]),CLUSTER_4,CLUSTER_0
m,numpy.stack(masks[:i]+masks[i+1:]),CLUSTER_4,CLUSTER_0
m,numpy.stack(masks[:i]+masks[i+1:]),CLUSTER_4,CLUSTER_0
"neg,pos",numpy.bincount(df['Class']),CLUSTER_4,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,len(params)",CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,len(params)",CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,len(params)",CLUSTER_4,CLUSTER_0
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_4,CLUSTER_0
"fn,tn,_","sklearn.metrics.roc_curve(labels,predictions)",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(labels,predictions>p)",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_train,pred_tr)",CLUSTER_4,CLUSTER_0
cm1,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_train,pred_knn_tr)",CLUSTER_4,CLUSTER_0
cm1,"sklearn.metrics.confusion_matrix(y_test,pred_knn_ts)",CLUSTER_4,CLUSTER_0
cm1,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(labels,predictions>p)",CLUSTER_4,CLUSTER_0
"train_df,test_df","sklearn.model_selection.train_test_split(df,test_size=0.2)",CLUSTER_4,CLUSTER_0
"train_df,val_df","sklearn.model_selection.train_test_split(df,test_size=0.2)",CLUSTER_4,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=1)",CLUSTER_4,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_4,CLUSTER_0
estimator,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_4,CLUSTER_0
knn,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=2,algorithm=paramtrs['algorithm'],metric=paramtrs['metric'])",CLUSTER_4,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_4,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_4,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_train,pred_tr)",CLUSTER_4,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_4,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_train,pred_knn_tr)",CLUSTER_4,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,pred_knn_ts)",CLUSTER_4,CLUSTER_0
grid_knn,"sklearn.model_selection.GridSearchCV(estimator,param_grid,cv=5,verbose=3,return_train_score=True)",CLUSTER_4,CLUSTER_0
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes)",CLUSTER_4,CLUSTER_0
a,"numpy.array([11,21,31,12,22,32,13,23,33])",CLUSTER_3,CLUSTER_6
i,"numpy.array([0,1])",CLUSTER_3,CLUSTER_6
weather_data,"pandas.DataFrame(data,index=cities)",CLUSTER_8,CLUSTER_3
weather_data,"pandas.DataFrame(data,index=cities,columns=column_names)",CLUSTER_8,CLUSTER_3
start,"datetime.datetime(2012,1,3,7,0,0,tzinfo=pytz.timezone('Europe/Moscow')",CLUSTER_11,CLUSTER_12
end,"datetime.datetime(2018,12,31,7,0,0,tzinfo=pytz.timezone('Europe/Moscow')",CLUSTER_11,CLUSTER_12
lefty,numpy.array(lefty),CLUSTER_12,CLUSTER_10
leftx,numpy.array(leftx),CLUSTER_12,CLUSTER_10
righty,numpy.array(righty),CLUSTER_12,CLUSTER_10
rightx,numpy.array(rightx),CLUSTER_12,CLUSTER_10
pts_left,"numpy.array([np.flipud(np.transpose(np.vstack([left_fitx,lefty])",CLUSTER_12,CLUSTER_10
pts_right,"numpy.array([np.transpose(np.vstack([right_fitx,righty])",CLUSTER_12,CLUSTER_10
lefty,numpy.array(lefty),CLUSTER_12,CLUSTER_10
leftx,numpy.array(leftx),CLUSTER_12,CLUSTER_10
righty,numpy.array(righty),CLUSTER_12,CLUSTER_10
rightx,numpy.array(rightx),CLUSTER_12,CLUSTER_10
pts_left,"numpy.array([np.flipud(np.transpose(np.vstack([Left.fitx,Left.Y])",CLUSTER_12,CLUSTER_10
pts_right,"numpy.array([np.transpose(np.vstack([right_fitx,Right.Y])",CLUSTER_12,CLUSTER_10
objp,"numpy.zeros((6*9,3)",CLUSTER_12,CLUSTER_10
x_idx,numpy.where((((left_peak-25),CLUSTER_12,CLUSTER_10
x_idx,numpy.where((((right_peak-25),CLUSTER_12,CLUSTER_10
x_idx,numpy.where((((xval-25),CLUSTER_12,CLUSTER_10
x_idx,numpy.where((((peak-25),CLUSTER_12,CLUSTER_10
s_binary,numpy.zeros_like(s_channel),CLUSTER_12,CLUSTER_10
b_binary,numpy.zeros_like(b_channel),CLUSTER_12,CLUSTER_10
l_binary,numpy.zeros_like(l_channel),CLUSTER_12,CLUSTER_10
combined_binary,numpy.zeros_like(s_binary),CLUSTER_12,CLUSTER_10
warp_zero,numpy.zeros_like(combined_binary),CLUSTER_12,CLUSTER_10
b_binary,numpy.zeros_like(b_channel),CLUSTER_12,CLUSTER_10
l_binary,numpy.zeros_like(l_channel),CLUSTER_12,CLUSTER_10
combined_binary,numpy.zeros_like(b_binary),CLUSTER_12,CLUSTER_10
warp_zero,numpy.zeros_like(combined_binary),CLUSTER_12,CLUSTER_10
left_peak,numpy.argmax(histogram[:640]),CLUSTER_12,CLUSTER_10
right_peak,numpy.argmax(histogram[640:]),CLUSTER_12,CLUSTER_10
peak,numpy.argmax(histogram[640:]),CLUSTER_12,CLUSTER_10
peak,numpy.argmax(histogram[:640]),CLUSTER_12,CLUSTER_10
lsort,numpy.argsort(lefty),CLUSTER_12,CLUSTER_10
rsort,numpy.argsort(righty),CLUSTER_12,CLUSTER_10
sorted_index,numpy.argsort(yvals),CLUSTER_12,CLUSTER_10
yval,"numpy.mean([i,j])",CLUSTER_12,CLUSTER_10
leftx_int,numpy.mean(Left.x_int),CLUSTER_12,CLUSTER_10
left_top,numpy.mean(Left.top),CLUSTER_12,CLUSTER_10
rightx_int,numpy.mean(Right.x_int),CLUSTER_12,CLUSTER_10
right_top,numpy.mean(Right.top),CLUSTER_12,CLUSTER_10
"x,y",numpy.nonzero(np.transpose(combined_binary),CLUSTER_12,CLUSTER_10
"x,y",numpy.nonzero(np.transpose(combined_binary),CLUSTER_12,CLUSTER_10
histogram,"numpy.sum(combined_binary[j:i,:],axis=0)",CLUSTER_12,CLUSTER_10
histogram,"numpy.sum(image[j:i,:],axis=0)",CLUSTER_12,CLUSTER_10
src,"numpy.float32([[490,482],[810,482],
[1250,720],[40,720]])",CLUSTER_12,CLUSTER_10
dst,"numpy.float32([[0,0],[1280,0],
[1250,720],[40,720]])",CLUSTER_12,CLUSTER_10
src,"numpy.float32([[490,482],[810,482],
[1250,720],[40,720]])",CLUSTER_12,CLUSTER_10
dst,"numpy.float32([[0,0],[1280,0],
[1250,720],[40,720]])",CLUSTER_12,CLUSTER_10
src,"numpy.float32([[490,482],[810,482],
[1250,720],[0,720]])",CLUSTER_12,CLUSTER_10
dst,"numpy.float32([[0,0],[1280,0],
[1250,720],[40,720]])",CLUSTER_12,CLUSTER_10
pts,"numpy.hstack((pts_left,pts_right)",CLUSTER_12,CLUSTER_10
pts,"numpy.hstack((pts_left,pts_right)",CLUSTER_12,CLUSTER_10
rightx,"numpy.append(rightx,rightx_int)",CLUSTER_12,CLUSTER_10
righty,"numpy.append(righty,720)",CLUSTER_12,CLUSTER_10
rightx,"numpy.append(rightx,right_fit[0]*0**2+right_fit[1]*0+right_fit[2])",CLUSTER_12,CLUSTER_10
righty,"numpy.append(righty,0)",CLUSTER_12,CLUSTER_10
leftx,"numpy.append(leftx,leftx_int)",CLUSTER_12,CLUSTER_10
lefty,"numpy.append(lefty,720)",CLUSTER_12,CLUSTER_10
leftx,"numpy.append(leftx,left_fit[0]*0**2+left_fit[1]*0+left_fit[2])",CLUSTER_12,CLUSTER_10
lefty,"numpy.append(lefty,0)",CLUSTER_12,CLUSTER_10
leftx,"numpy.append(leftx,leftx_int)",CLUSTER_12,CLUSTER_10
lefty,"numpy.append(lefty,720)",CLUSTER_12,CLUSTER_10
leftx,"numpy.append(leftx,left_top)",CLUSTER_12,CLUSTER_10
lefty,"numpy.append(lefty,0)",CLUSTER_12,CLUSTER_10
rightx,"numpy.append(rightx,rightx_int)",CLUSTER_12,CLUSTER_10
righty,"numpy.append(righty,720)",CLUSTER_12,CLUSTER_10
rightx,"numpy.append(rightx,right_top)",CLUSTER_12,CLUSTER_10
righty,"numpy.append(righty,0)",CLUSTER_12,CLUSTER_10
color_warp,"numpy.dstack((warp_zero,warp_zero,warp_zero)",CLUSTER_12,CLUSTER_10
color_warp,"numpy.dstack((warp_zero,warp_zero,warp_zero)",CLUSTER_12,CLUSTER_10
left_fit,"numpy.polyfit(lefty,leftx,2)",CLUSTER_12,CLUSTER_10
right_fit,"numpy.polyfit(righty,rightx,2)",CLUSTER_12,CLUSTER_10
left_fit,"numpy.polyfit(lefty,leftx,2)",CLUSTER_12,CLUSTER_10
right_fit,"numpy.polyfit(righty,rightx,2)",CLUSTER_12,CLUSTER_10
left_fit_cr,"numpy.polyfit(lefty*ym_per_pix,leftx*xm_per_pix,2)",CLUSTER_12,CLUSTER_10
right_fit_cr,"numpy.polyfit(righty*ym_per_pix,rightx*xm_per_pix,2)",CLUSTER_12,CLUSTER_10
fit_cr,"numpy.polyfit(yvals*ym_per_pix,xvals*xm_per_pix,2)",CLUSTER_12,CLUSTER_10
left_fit,"numpy.polyfit(lefty,leftx,2)",CLUSTER_12,CLUSTER_10
left_fit,"numpy.polyfit(lefty,leftx,2)",CLUSTER_12,CLUSTER_10
right_fit,"numpy.polyfit(righty,rightx,2)",CLUSTER_12,CLUSTER_10
right_fit,"numpy.polyfit(righty,rightx,2)",CLUSTER_12,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(8,4)",CLUSTER_12,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(9,6)",CLUSTER_12,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(9,6)",CLUSTER_12,CLUSTER_10
"f,((ax1,ax2,ax3),(ax4,ax5,ax6))","matplotlib.pyplot.subplots(2,3,sharey='col',sharex='row',figsize=(10,4)",CLUSTER_12,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(9,6)",CLUSTER_12,CLUSTER_10
self.x_int,collections.deque(maxlen=10),CLUSTER_12,CLUSTER_10
self.top,collections.deque(maxlen=10),CLUSTER_12,CLUSTER_10
self.fit0,collections.deque(maxlen=10),CLUSTER_12,CLUSTER_10
self.fit1,collections.deque(maxlen=10),CLUSTER_12,CLUSTER_10
self.fit2,collections.deque(maxlen=10),CLUSTER_12,CLUSTER_10
theta1,numpy.sum(x*(y-np.mean(y),CLUSTER_1,CLUSTER_10
theta1,numpy.sum(x*(y-np.mean(y),CLUSTER_1,CLUSTER_10
visualization.sel(features,f).plot(ax=matplotlib.pyplot.gca(),CLUSTER_3,CLUSTER_10
w,"numpy.arange(1,1000,.1)",CLUSTER_7,CLUSTER_3
fig,seaborn.PairGrid(fit_data),CLUSTER_7,CLUSTER_3
fit_data,"pandas.DataFrame(columns=['logMdust','Tdust','beta','logNpl','alpha','wturn'])",CLUSTER_7,CLUSTER_3
ax,"matplotlib.pyplot.axes(axisbg='
ax.set_axisbelow(True)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(11,4)",CLUSTER_1,CLUSTER_10
angulos_cero_noventa,"numpy.array((0,30,45,60,90)",CLUSTER_3,CLUSTER_6
image_id,random.choice(dataset.image_ids),CLUSTER_4,CLUSTER_7
ixs,numpy.arange(len(keep),CLUSTER_4,CLUSTER_7
roi_class_names,numpy.array(dataset.class_names),CLUSTER_4,CLUSTER_7
det_mask_specific,"numpy.array([mrcnn[""masks""][0,i,:,:,c]
fori,cinenumerate(det_class_ids)",CLUSTER_4,CLUSTER_7
det_masks,"numpy.array([utils.unmold_mask(m,det_boxes[i],image.shape)",CLUSTER_4,CLUSTER_7
positive_anchor_ix,numpy.where(target_rpn_match[:]==1),CLUSTER_4,CLUSTER_7
negative_anchor_ix,numpy.where(target_rpn_match[:]==-1),CLUSTER_4,CLUSTER_7
neutral_anchor_ix,numpy.where(target_rpn_match[:]==0),CLUSTER_4,CLUSTER_7
det_count,numpy.where(det_class_ids==0),CLUSTER_4,CLUSTER_7
roi_positive_ixs,numpy.where(roi_class_ids>0),CLUSTER_4,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[ixs]>0,2,1)",CLUSTER_4,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[roi_positive_ixs][ids]>0,1,0)",CLUSTER_4,CLUSTER_7
keep,numpy.where(roi_class_ids>0),CLUSTER_4,CLUSTER_7
ixs,numpy.where(pre_nms_class_ids==class_id),CLUSTER_4,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[keep][ixs]>0,1,0)",CLUSTER_4,CLUSTER_7
det_count,numpy.where(det_class_ids==0),CLUSTER_4,CLUSTER_7
roi_class_ids,"numpy.argmax(mrcnn[""probs""][0],axis=1)",CLUSTER_4,CLUSTER_7
sorted_anchor_ids,"numpy.argsort(rpn['rpn_class'][:,:,1].flatten()",CLUSTER_4,CLUSTER_7
proposals,"numpy.around(mrcnn[""proposals""][0]*np.array([h,w,h,w])",CLUSTER_4,CLUSTER_7
keep,"numpy.intersect1d(keep,np.where(roi_scores>=config.DETECTION_MIN_CONFIDENCE)",CLUSTER_4,CLUSTER_7
keep,"numpy.intersect1d(keep,nms_keep)",CLUSTER_4,CLUSTER_7
nms_keep,"numpy.union1d(nms_keep,class_keep)",CLUSTER_4,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,0],50)",CLUSTER_4,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,1],50)",CLUSTER_4,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,2],50)",CLUSTER_4,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,3],50)",CLUSTER_4,CLUSTER_7
_,"matplotlib.pyplot.imshow(modellib.unmold_image(activations[""input_image""][0],config)",CLUSTER_4,CLUSTER_7
"_,ax","matplotlib.pyplot.subplots(rows,cols,figsize=(size*cols,size*rows)",CLUSTER_4,CLUSTER_7
y_derivs,numpy.zeros(2),CLUSTER_1,CLUSTER_10
k1,numpy.zeros(nv),CLUSTER_1,CLUSTER_10
k2,numpy.zeros(nv),CLUSTER_1,CLUSTER_10
k3,numpy.zeros(nv),CLUSTER_1,CLUSTER_10
k4,numpy.zeros(nv),CLUSTER_1,CLUSTER_10
y_temp,numpy.zeros(nv),CLUSTER_1,CLUSTER_10
y_new,numpy.zeros((len(x),CLUSTER_1,CLUSTER_10
y_0,numpy.zeros(2),CLUSTER_1,CLUSTER_10
Delta,"numpy.full(nv,2*tol)",CLUSTER_1,CLUSTER_10
x,"numpy.full(1,a)",CLUSTER_1,CLUSTER_10
y,"numpy.full((1,nv)",CLUSTER_1,CLUSTER_10
Delta,numpy.fabs(y_2-y_11),CLUSTER_1,CLUSTER_10
h_new,numpy.fmin(h_step*(Delta.max(),CLUSTER_1,CLUSTER_10
xx,"numpy.linspace(0,2.0*np.pi,1000)",CLUSTER_1,CLUSTER_10
x,"numpy.append(x,xi)",CLUSTER_1,CLUSTER_10
df3,"pandas.DataFrame({""직급"":['사원','대리','과장','차장','부장','이사','상무','전무'],
'직급코드':['','D','K','C','B','E','S','J']})",CLUSTER_11,CLUSTER_12
df_sale,"pandas.DataFrame({""연봉"":[100,200,300,400,500,600,700,800],
'직급코드':['','D','K','C','B','E','S','J']})",CLUSTER_11,CLUSTER_12
df,"pandas.read_excel(excel_file,Sheet_name='Sheet1')",CLUSTER_11,CLUSTER_12
test_data,numpy.matrix(test_data['Lag2']),CLUSTER_7,CLUSTER_8
labels,pandas.DataFrame(data['Direction']),CLUSTER_7,CLUSTER_8
test_labels,pandas.DataFrame(test_data['Direction']),CLUSTER_7,CLUSTER_8
data,"pandas.read_csv('/Users/anthonydepalatis/Documents/School/EE379K/Lab5/Data/Weekly.csv',
usecols=['Year','Lag1','Lag2','Lag3','Lag4','Lag5','Volume','Today','Direction'])",CLUSTER_7,CLUSTER_8
clf1,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
clf2,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
confusion_matrix1,"sklearn.metrics.confusion_matrix(labels,clf1.predict(b_data)",CLUSTER_7,CLUSTER_8
confusion_matrix2,"sklearn.metrics.confusion_matrix(test_labels,clf2.predict(test_data)",CLUSTER_7,CLUSTER_8
confusion_matrix3,"sklearn.metrics.confusion_matrix(test_labels,clf3.predict(test_data)",CLUSTER_7,CLUSTER_8
confusion_matrix4,"sklearn.metrics.confusion_matrix(test_labels,clf4.predict(test_data)",CLUSTER_7,CLUSTER_8
confusion_matrix5,"sklearn.metrics.confusion_matrix(test_labels,clf5.predict(test_data)",CLUSTER_7,CLUSTER_8
confusion_matrix6,"sklearn.metrics.confusion_matrix(test_labels,clf6.predict(test_data)",CLUSTER_7,CLUSTER_8
confusion_matrix7,"sklearn.metrics.confusion_matrix(test_labels,clf7.predict(test_data)",CLUSTER_7,CLUSTER_8
lMs,"numpy.arange(9.0,11.0,0.1)",CLUSTER_1,CLUSTER_9
y0,"numpy.array([g.Mh,g.Mg,g.Ms,g.MZ])",CLUSTER_1,CLUSTER_9
zmaio,"numpy.array([0.07,2.2,3.5])",CLUSTER_1,CLUSTER_9
lM0,"numpy.array([11.8,12.38,12.76])",CLUSTER_1,CLUSTER_9
K0,"numpy.array([9.04,8.99,8.79])",CLUSTER_1,CLUSTER_9
Mhout,"numpy.zeros((Nm,Nz));Mgout=numpy.zeros((Nm,Nz)",CLUSTER_1,CLUSTER_9
Msout,"numpy.zeros((Nm,Nz));MZout=numpy.zeros((Nm,Nz)",CLUSTER_1,CLUSTER_9
lzg1,numpy.log10(1.0+zg),CLUSTER_1,CLUSTER_9
Mh,"numpy.power(10,lMh)",CLUSTER_1,CLUSTER_9
Mh,"numpy.power(10,lMh)",CLUSTER_1,CLUSTER_9
zg,"numpy.linspace(30.,0.,Nz)",CLUSTER_1,CLUSTER_9
lMh,"numpy.linspace(5.0,8.,Nm)",CLUSTER_1,CLUSTER_9
lMh,"numpy.linspace(5.0,8.,Nm)",CLUSTER_1,CLUSTER_9
lMsL,"numpy.linspace(5.5,9.5,100)",CLUSTER_1,CLUSTER_9
"lZLp,elZLp,lMsLp","numpy.loadtxt('data/lee06.txt',usecols=(1,3,4)",CLUSTER_1,CLUSTER_9
"lLVk,elLVk,lZk,elZk","numpy.loadtxt('data/kirby13_tab4.txt',usecols=(4,5,6,7)",CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(9,3)",CLUSTER_1,CLUSTER_9
lMhi,"scipy.interpolate.interp2d(lzg1,lMh,np.log10(np.maximum(Mmin,Mhout)",CLUSTER_1,CLUSTER_9
lMgi,"scipy.interpolate.interp2d(lzg1,lMh,np.log10(np.maximum(Mmin,Mgout)",CLUSTER_1,CLUSTER_9
lMsi,"scipy.interpolate.interp2d(lzg1,lMh,np.log10(np.maximum(Mmin,Msout)",CLUSTER_1,CLUSTER_9
lMZi,"scipy.interpolate.interp2d(lzg1,lMh,np.log10(np.maximum(Mmin,MZout)",CLUSTER_1,CLUSTER_9
Mout,"scipy.integrate.odeint(g.evolve,y0,t_output,rtol=1.e-5,mxstep=4000)",CLUSTER_1,CLUSTER_9
channels,"numpy.arange(vmin,vmax,delta)",CLUSTER_1,CLUSTER_9
image_12mm,"numpy.zeros([imsize_1,imsize_1])",CLUSTER_1,CLUSTER_9
"fig,axs","matplotlib.pyplot.subplots(3,3,sharey=True,figsize=(16,16)",CLUSTER_1,CLUSTER_9
y,"numpy.array([0,1,2,2,1])",CLUSTER_1,CLUSTER_10
correct_scores,"numpy.asarray([
[-0.81233741,-1.27654624,-0.70335995],
[-0.17129677,-1.18803311,-0.47310444],
[-0.51590475,-1.01354314,-0.8504215],
[-0.15419291,-0.48629638,-0.52901952],
[-0.00618733,-0.12435261,-0.15226949]])",CLUSTER_1,CLUSTER_10
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(0,10,100)",CLUSTER_12,CLUSTER_3
ts,pandas.Series(np.random.randn(1000),CLUSTER_12,CLUSTER_3
ts,"pd.Series(np.random.randn(1000),index=pandas.date_range('1/1/2020',periods=1000)",CLUSTER_12,CLUSTER_3
car_sales,pandas.read_csv('./source/car_sales.csv'),CLUSTER_12,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_3
"fig,((ax1,ax2),(ax3,ax4))","matplotlib.pyplot.subplots(nrows=2,
ncols=2,
figsize=(10,5)",CLUSTER_12,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(nrows=2,
ncols=2,
figsize=(10,5)",CLUSTER_12,CLUSTER_3
locsfill,"pandas.DataFrame(newframe,columns=['st','NAME','GEO_ID','lat','lng','api_name'])",CLUSTER_9,CLUSTER_2
df,pandas.read_csv('data/all_census_formated.csv'),CLUSTER_9,CLUSTER_2
df2,pandas.read_csv('data/mergeset.csv'),CLUSTER_9,CLUSTER_2
ll,pandas.read_csv('data/uscities.csv'),CLUSTER_9,CLUSTER_2
get,"requests.get(f""https://api.mapbox.com/geocoding/v5/mapbox.places/{url[1]}.json?types=place&country=US&access_token=pk.eyJ1IjoibWF0dGhld2xzZXNzaW9uc2FwaSIsImEiOiJjazU3NGdlZnEwMDRpM2RxYzRrdWxtajhlIn0.3KqQpLIuduwAfK8Pr8cO2A"")",CLUSTER_9,CLUSTER_2
t1,time.perf_counter(),CLUSTER_9,CLUSTER_2
t2,time.perf_counter(),CLUSTER_9,CLUSTER_2
t1,time.perf_counter(),CLUSTER_9,CLUSTER_2
t2,time.perf_counter(),CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(20,5)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_10
decoder,json.JSONDecoder(),CLUSTER_0,CLUSTER_11
start_time,time.time(),CLUSTER_0,CLUSTER_11
df_sub,pandas.DataFrame(df_workers.groupby('RecruitmentSource'),CLUSTER_7,CLUSTER_8
df_target['DateofBirth'],pandas.DataFrame(bir),CLUSTER_7,CLUSTER_8
df_p,pandas.DataFrame(X_p),CLUSTER_7,CLUSTER_8
dfloop,pandas.DataFrame(dfdict),CLUSTER_7,CLUSTER_8
active_p,pandas.DataFrame(df_active_p),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('hr_dataset.csv'),CLUSTER_7,CLUSTER_8
df_target['DateofTermination'],"pandas.to_datetime(df_target['DateofTermination'],infer_datetime_format=True)",CLUSTER_7,CLUSTER_8
birth,pandas.to_datetime(df_target['DOB']),CLUSTER_7,CLUSTER_8
df_target['DateofTermination'],pandas.to_datetime(df_target['DateofTermination']),CLUSTER_7,CLUSTER_8
df_target['DateofBirth'],pandas.to_datetime(df_target['DateofBirth']),CLUSTER_7,CLUSTER_8
hue,"df2['NumberofEmployees'],dodge=False,palette=numpy.array(pal[::-1])",CLUSTER_7,CLUSTER_8
manager_name,"numpy.unique(df2['ManagerName'],return_counts=True)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_p,y,random_state=42)",CLUSTER_7,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(models[m]['estimator'],models[m]['param'],cv=5,
scoring=score,
iid=False,
return_train_score=False,
n_jobs=2,
)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred,labels=labels)",CLUSTER_7,CLUSTER_8
categorical_transformer,"sklearn.preprocessing.OneHotEncoder(handle_unknown='ignore',sparse=False,dtype=transf_dtype)",CLUSTER_7,CLUSTER_8
categorical_transformer,"sklearn.preprocessing.OneHotEncoder(handle_unknown='ignore',sparse=False,dtype=transf_dtype)",CLUSTER_7,CLUSTER_8
preprocessor,"sklearn.compose.ColumnTransformer(transformers=[('cat',categorical_transformer,categorical)",CLUSTER_7,CLUSTER_8
preprocessor,"sklearn.compose.ColumnTransformer(transformers=[('cat',categorical_transformer,categorical)",CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x=""DiversityDesc"",y=""RecruitmentSource"",data=df_sub,\
hue='NumberofEmployees',dodge=False,palette=pal[::-1])",CLUSTER_7,CLUSTER_8
pal,seaborn.cubehelix_palette(len(avg_score['NumberofEmployees'].unique(),CLUSTER_7,CLUSTER_8
pal,seaborn.cubehelix_palette(len(df_sub['NumberofEmployees'].unique(),CLUSTER_7,CLUSTER_8
today,datetime.date.today(),CLUSTER_7,CLUSTER_8
ridge,sklearn.linear_model.Ridge(alpha=0.1),CLUSTER_7,CLUSTER_8
lasso,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(os.path.join(""data"",""news.csv"")",CLUSTER_9,CLUSTER_2
r,"requests.get(
""https://quotes.rest/qod.json"")",CLUSTER_9,CLUSTER_2
r,"requests.get(""https://news.ycombinator.com"")",CLUSTER_9,CLUSTER_2
text,"re.sub(r""[^a-zA-Z0-9]"","""",text)",CLUSTER_9,CLUSTER_2
text,"re.sub(r""[^a-zA-Z0-9]"","""",text.lower()",CLUSTER_9,CLUSTER_2
pattern,re.compile(r'<.*?>'),CLUSTER_9,CLUSTER_2
"coder_survey[""Age_bin_custom_range""]","pandas.cut(np.array(coder_survey[""Age""])",CLUSTER_1,CLUSTER_3
merged,"pandas.merge(pop,abbrevs,how='outer',left_on='state/region',right_on='abbreviation')",CLUSTER_1,CLUSTER_3
final,"pandas.merge(merged,areas,on=""state"",how=""left"")",CLUSTER_1,CLUSTER_3
pop,"pandas.read_csv(""C:\\Users\\34609\\Documents\\DataTB\\4.R\\TransPy2R\\state-population.csv"")",CLUSTER_1,CLUSTER_3
areas,"pandas.read_csv(""C:\\Users\\34609\\Documents\\DataTB\\4.R\\TransPy2R\\state-areas.csv"")",CLUSTER_1,CLUSTER_3
abbrevs,"pandas.read_csv(""C:\\Users\\34609\\Documents\\DataTB\\4.R\\TransPy2R\\state-abbrevs.csv"")",CLUSTER_1,CLUSTER_3
coder_survey,"pandas.read_csv(""C:\\Users\\34609\\Documents\\DataTB\\4.R\\TransPy2R\\fcc_2016_coder_survey_subset.csv"",encoding=""utf-8"")",CLUSTER_1,CLUSTER_3
"coder_survey[""Age_bin_round""]","numpy.array(np.floor(numpy.array(coder_survey[""Age""])",CLUSTER_1,CLUSTER_3
X,"numpy.array([[0,1,0,1],
[1,0,1,1],
[0,0,0,1],
[1,0,1,0]])",CLUSTER_4,CLUSTER_11
y,"numpy.array([0,1,0,1])",CLUSTER_4,CLUSTER_11
img,"numpy.array(Image.open(""output/tree.gv.png"")",CLUSTER_4,CLUSTER_11
y_named,"numpy.array([""blue"",""red""])",CLUSTER_4,CLUSTER_11
argmax_dec_func,numpy.argmax(logreg.decision_function(X_test),CLUSTER_4,CLUSTER_11
price_tree,numpy.exp(pred_tree),CLUSTER_4,CLUSTER_11
price_lr,numpy.exp(pred_lr),CLUSTER_4,CLUSTER_11
y_train,numpy.log(data_train.price),CLUSTER_4,CLUSTER_11
xx,"numpy.linspace(X_new[:,0].min()",CLUSTER_4,CLUSTER_11
yy,"numpy.linspace(X_new[:,1].min()",CLUSTER_4,CLUSTER_11
line,"numpy.linspace(-3,3,100)",CLUSTER_4,CLUSTER_11
X_new,"numpy.hstack([X,X[:,1:]**2])",CLUSTER_4,CLUSTER_11
"XX,YY","numpy.meshgrid(xx,yy)",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(scores_image,ax=axes.tolist()",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(scores_image,ax=axes.tolist()",CLUSTER_4,CLUSTER_11
figure,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
figure,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(12,4)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,4,figsize=(20,10)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(3,3,figsize=(15,10)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,4,figsize=(20,8)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,4,figsize=(20,8)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(13,5)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(13,5)",CLUSTER_4,CLUSTER_11
ram_prices,"pandas.read_csv(os.path.join(mglearn.datasets.DATA_PATH,
""ram_price.csv"")",CLUSTER_4,CLUSTER_11
"X,y","sklearn.datasets.make_moons(n_samples=100,noise=0.25,random_state=3)",CLUSTER_4,CLUSTER_11
"X,y","sklearn.datasets.make_moons(n_samples=100,noise=0.25,random_state=3)",CLUSTER_4,CLUSTER_11
"X,y","sklearn.datasets.make_moons(n_samples=100,noise=0.25,random_state=3)",CLUSTER_4,CLUSTER_11
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
cancer.data,cancer.target,stratify=cancer.target,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,stratify=y,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
cancer.data,cancer.target,random_state=0)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
cancer.data,cancer.target,random_state=0)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
cancer.data,cancer.target,random_state=0)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,stratify=y,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
cancer.data,cancer.target,random_state=0)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train_named,y_test_named,y_train,y_test","sklearn.model_selection.train_test_split(X,y_named,y,random_state=0)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(iris.data,iris.target,random_state=42)",CLUSTER_4,CLUSTER_11
tree,sklearn.tree.DecisionTreeClassifier(random_state=0),CLUSTER_4,CLUSTER_11
tree,"sklearn.tree.DecisionTreeClassifier(max_depth=4,random_state=0)",CLUSTER_4,CLUSTER_11
tree,sklearn.tree.DecisionTreeRegressor(),CLUSTER_4,CLUSTER_11
linear_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=7,random_state=2)",CLUSTER_4,CLUSTER_11
forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=0)",CLUSTER_4,CLUSTER_11
gbrt,sklearn.ensemble.GradientBoostingClassifier(random_state=0),CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingClassifier(random_state=0,max_depth=1)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingClassifier(random_state=0,learning_rate=0.01)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingClassifier(random_state=0,max_depth=1)",CLUSTER_4,CLUSTER_11
gbrt,sklearn.ensemble.GradientBoostingClassifier(random_state=0),CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.01,random_state=0)",CLUSTER_4,CLUSTER_11
linear_svm,sklearn.svm.LinearSVC(),CLUSTER_4,CLUSTER_11
linear_svm_3d,sklearn.svm.LinearSVC(),CLUSTER_4,CLUSTER_11
svm,"sklearn.svm.SVC(kernel=""rbf"",C=10,gamma=0.1)",CLUSTER_4,CLUSTER_11
svc,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_11
svc,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_11
svc,sklearn.svm.SVC(C=1000),CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(solver=""lbfgs"",random_state=0)",CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(solver=""lbfgs"",random_state=0,hidden_layer_sizes=[10])",CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(solver=""lbfgs"",random_state=0,hidden_layer_sizes=[10,10])",CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(solver=""lbfgs"",activation=""tanh"",
random_state=0,hidden_layer_sizes=[10,10])",CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,
hidden_layer_sizes=[n_hidden_nodes,n_hidden_nodes],
alpha=alpha)",CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(solver=""lbfgs"",random_state=i,
hidden_layer_sizes=[100,100])",CLUSTER_4,CLUSTER_11
mlp,sklearn.neural_network.MLPClassifier(random_state=42),CLUSTER_4,CLUSTER_11
mlp,sklearn.neural_network.MLPClassifier(random_state=0),CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(max_iter=1000,random_state=0)",CLUSTER_4,CLUSTER_11
mlp,"sklearn.neural_network.MLPClassifier(max_iter=1000,alpha=1,random_state=0)",CLUSTER_4,CLUSTER_11
"X,y","sklearn.datasets.make_circles(noise=0.25,factor=0.5,random_state=1)",CLUSTER_4,CLUSTER_11
iris,sklearn.datasets.load_iris(),CLUSTER_4,CLUSTER_11
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_11
norm_mean,numpy.mean(normal_dis),CLUSTER_1,CLUSTER_3
pois_mean,numpy.mean(poisson_dis),CLUSTER_1,CLUSTER_3
gam_mean,numpy.mean(gamma_dis),CLUSTER_1,CLUSTER_3
bin_mean,numpy.mean(binomial_dis),CLUSTER_1,CLUSTER_3
berno_mean,numpy.mean(bernoulli_dis),CLUSTER_1,CLUSTER_3
pare_mean,numpy.mean(pareto_dis),CLUSTER_1,CLUSTER_3
normal3_mean,numpy.mean(normal3),CLUSTER_1,CLUSTER_3
norm_std,numpy.std(normal_dis),CLUSTER_1,CLUSTER_3
pois_std,numpy.std(poisson_dis),CLUSTER_1,CLUSTER_3
gam_std,numpy.std(gamma_dis),CLUSTER_1,CLUSTER_3
bin_std,numpy.std(binomial_dis),CLUSTER_1,CLUSTER_3
berno_std,numpy.std(bernoulli_dis),CLUSTER_1,CLUSTER_3
pare_std,numpy.std(pareto_dis),CLUSTER_1,CLUSTER_3
normal3_std,numpy.std(normal3),CLUSTER_1,CLUSTER_3
r,"re.compile(""a.c"")",CLUSTER_10,CLUSTER_4
r,"re.compile(""ab."")",CLUSTER_10,CLUSTER_4
df,pandas.read_csv('final2.csv'),CLUSTER_4,CLUSTER_11
df2,pandas.read_csv('final.csv'),CLUSTER_4,CLUSTER_11
df1,"pandas.read_csv(""merge.csv"")",CLUSTER_4,CLUSTER_11
inv,random.choice(RawList),CLUSTER_11,CLUSTER_12
inv,random.choice(RawList),CLUSTER_11,CLUSTER_12
prize,pandas.DataFrame(list(D1.items(),CLUSTER_11,CLUSTER_12
prize,pandas.DataFrame(list(D1.items(),CLUSTER_11,CLUSTER_12
RawData,pandas.read_csv('槓龜王重複簽到人數_20200428_python.csv'),CLUSTER_11,CLUSTER_12
RawData,pandas.read_csv(EachFile),CLUSTER_11,CLUSTER_12
spl_1,re.search('Lottery_(\d*),CLUSTER_11,CLUSTER_12
date_today,datetime.datetime.today(),CLUSTER_11,CLUSTER_12
global_temp,pandas.read_csv('datasets/global_temperature.csv'),CLUSTER_1,CLUSTER_3
kmn,sklearn.cluster.KMeans(n_clusters=3),CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_5,CLUSTER_10
samochody,sklearn.datasets.fetch_openml('cars1'),CLUSTER_5,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(1,2)",CLUSTER_5,CLUSTER_10
demandFile,"pandas.read_csv(""Demand.csv"",header=None)",CLUSTER_8,CLUSTER_4
shiftTime,"pandas.read_csv(""shiftTime.csv"",header=None)",CLUSTER_8,CLUSTER_4
emploAttri,"pandas.read_csv(""managerRequest.csv"",header=0)",CLUSTER_8,CLUSTER_4
data,"pandas.read_csv(""train.csv"",na_values=""NaN"")",CLUSTER_7,CLUSTER_5
ax,"seaborn.countplot(x=""class"",data=titanic)",CLUSTER_7,CLUSTER_5
ax,"seaborn.distplot(data['BMI'],bins=50)",CLUSTER_7,CLUSTER_5
ax,seaborn.distplot(data['Employment_Info_1'].dropna(),CLUSTER_7,CLUSTER_5
ax,seaborn.distplot(data['Medical_History_32'].dropna(),CLUSTER_7,CLUSTER_5
titanic,"seaborn.load_dataset(""titanic"")",CLUSTER_7,CLUSTER_5
data_subset,"sklearn.preprocessing.scale(sdata[selected_features].drop(objects_with_nan,axis=0)",CLUSTER_7,CLUSTER_5
data_subset,"sklearn.preprocessing.scale(sdata[selected_features].drop(objects_with_nan,axis=0)",CLUSTER_7,CLUSTER_5
model,sklearn.manifold.TSNE(random_state=321),CLUSTER_7,CLUSTER_5
model2,sklearn.manifold.MDS(random_state=321),CLUSTER_7,CLUSTER_5
model3,"sklearn.manifold.MDS(random_state=321,metric='cosine',dissimilarity=""precomputed"")",CLUSTER_7,CLUSTER_5
svm_,"sklearn.svm.OneClassSVM(gamma=10,nu=0.01)",CLUSTER_7,CLUSTER_5
self.top100,pandas.DataFrame(),CLUSTER_12,CLUSTER_3
self.holding,pandas.DataFrame(),CLUSTER_12,CLUSTER_3
basket,pandas.DataFrame(),CLUSTER_12,CLUSTER_3
t,pandas.Timedelta('180days'),CLUSTER_12,CLUSTER_3
self.window,pandas.Timedelta('365days'),CLUSTER_12,CLUSTER_3
self.current_date,pandas.Timestamp('2016-12-3000:00:00'),CLUSTER_12,CLUSTER_3
self.top100,"pandas.merge(self.top100,self.holding,on=['firms'],suffixes=('_x','')",CLUSTER_12,CLUSTER_3
df,"pandas.read_csv(""SP500_out_2015-2018.csv"",encoding=""UTF-8"")",CLUSTER_12,CLUSTER_3
df.date,pandas.to_datetime(df.date),CLUSTER_12,CLUSTER_3
tf,time.time(),CLUSTER_6,CLUSTER_10
tf,time.time(),CLUSTER_6,CLUSTER_10
test_set1,"numpy.arange(L,R/2,dx)",CLUSTER_6,CLUSTER_10
test_set2,"numpy.arange(R/2,R,dx)",CLUSTER_6,CLUSTER_10
"bulk_set,surf_set","numpy.arange(L,R,h)",CLUSTER_6,CLUSTER_10
num,"numpy.arange(1,len(loss_bulk_record)",CLUSTER_6,CLUSTER_10
test_set,"numpy.concatenate((test_set1,test_set2)",CLUSTER_6,CLUSTER_10
yt,numpy.zeros_like(points),CLUSTER_6,CLUSTER_10
y_diff,numpy.zeros_like(points),CLUSTER_6,CLUSTER_10
ymu,numpy.zeros_like(points),CLUSTER_6,CLUSTER_10
ysig,numpy.zeros_like(points),CLUSTER_6,CLUSTER_10
u_h1,numpy.sum(dx*(vsq(ud1),CLUSTER_6,CLUSTER_10
u_l2,numpy.sum(dx*vsq(u1),CLUSTER_6,CLUSTER_10
sigma_h1,numpy.sum(dx*(vsq(sigma1),CLUSTER_6,CLUSTER_10
sigma_l2,numpy.sum(dx*vsq(sigma1),CLUSTER_6,CLUSTER_10
vsq,numpy.vectorize(sq),CLUSTER_6,CLUSTER_10
u1,numpy.vectorize(u_exact),CLUSTER_6,CLUSTER_10
ud1,numpy.vectorize(sigma_exact),CLUSTER_6,CLUSTER_10
u2,numpy.vectorize(u_exact),CLUSTER_6,CLUSTER_10
ud2,numpy.vectorize(sigma_exact),CLUSTER_6,CLUSTER_10
sigma1,numpy.vectorize(sigma_exact),CLUSTER_6,CLUSTER_10
sigma2,numpy.vectorize(sigma_exact),CLUSTER_6,CLUSTER_10
f_range,"numpy.arange(freq_h[n-1],freq_h[n+1],0.001)",CLUSTER_1,CLUSTER_9
f_range,"numpy.arange(freq_h[n-1],freq_h[n+1],0.001)",CLUSTER_1,CLUSTER_9
y,numpy.array(ddo['OP']['particles'][parameter1][0][0][0]*multi1),CLUSTER_1,CLUSTER_9
x,numpy.array(ddo['OP']['particles'][parameter2][0][0][0]*multi2),CLUSTER_1,CLUSTER_9
y,numpy.array(ddo['OP']['particles'][parameter1][0][0][0]*multi1),CLUSTER_1,CLUSTER_9
x,numpy.array(dpp_from_dE(ddo['OP']['particles'][parameter2][0][0][0]*multi2),CLUSTER_1,CLUSTER_9
dE,numpy.array(ddo['OP']['particles'][parameter2][0][0][0]*multi2),CLUSTER_1,CLUSTER_9
dpp,numpy.array(dpp_from_dE(ddo['OP']['particles'][parameter2][0][0][0]*multi2),CLUSTER_1,CLUSTER_9
y_fine,"numpy.array(range(0,30000)",CLUSTER_1,CLUSTER_9
y,"numpy.array(range(0,31)",CLUSTER_1,CLUSTER_9
x,numpy.array(ddo[key][parameter][0]*1E3),CLUSTER_1,CLUSTER_9
y_fine,"numpy.array(range(0,30000)",CLUSTER_1,CLUSTER_9
y,"numpy.array(range(0,31)",CLUSTER_1,CLUSTER_9
x,numpy.array(ddo[key][parameter][0]*1E3),CLUSTER_1,CLUSTER_9
y_fine,"numpy.array(range(0,30000)",CLUSTER_1,CLUSTER_9
y,"numpy.array(range(0,31)",CLUSTER_1,CLUSTER_9
x,numpy.array(ddo[key][parameter][0]*1E3),CLUSTER_1,CLUSTER_9
y_fine,"numpy.array(range(0,30000)",CLUSTER_1,CLUSTER_9
y,"numpy.array(range(0,31)",CLUSTER_1,CLUSTER_9
x,numpy.array(ddo[key][parameter][0]*1E3),CLUSTER_1,CLUSTER_9
s,numpy.ones(len(x),CLUSTER_1,CLUSTER_9
s,numpy.ones(len(x),CLUSTER_1,CLUSTER_9
n,numpy.argmax(ampl_h[4:]),CLUSTER_1,CLUSTER_9
n,numpy.argmax(ampl_h[4:]),CLUSTER_1,CLUSTER_9
correlation,numpy.mean(dE**2),CLUSTER_1,CLUSTER_9
mean_x,numpy.mean(x),CLUSTER_1,CLUSTER_9
mean_x,numpy.mean(x),CLUSTER_1,CLUSTER_9
mean_x,numpy.mean(x),CLUSTER_1,CLUSTER_9
mean_x,numpy.mean(x),CLUSTER_1,CLUSTER_9
dE_rms,numpy.sqrt((np.mean(dE**2),CLUSTER_1,CLUSTER_9
dpp_rms,numpy.sqrt((np.mean(dpp**2),CLUSTER_1,CLUSTER_9
dpp_pyorbit,numpy.sqrt(correlation),CLUSTER_1,CLUSTER_9
dps,"numpy.linspace(-2.5E-3,2.5E-3,num_sims)",CLUSTER_1,CLUSTER_9
dps,"numpy.linspace(-2.5E-3,2.5E-3,num_sims)",CLUSTER_1,CLUSTER_9
dps,"numpy.linspace(-2.5E-3,2.5E-3,num_sims)",CLUSTER_1,CLUSTER_9
dps,"numpy.linspace(-2.5E-3,2.5E-3,num_sims)",CLUSTER_1,CLUSTER_9
dps,"numpy.linspace(-2.5E-3,2.5E-3,num_sims)",CLUSTER_1,CLUSTER_9
hann,numpy.hanning(N_turns),CLUSTER_1,CLUSTER_9
hann,numpy.hanning(N_turns),CLUSTER_1,CLUSTER_9
freq_h,numpy.fft.rfftfreq(N_turns),CLUSTER_1,CLUSTER_9
freq_h,numpy.fft.rfftfreq(N_turns),CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
fig1,"matplotlib.pyplot.figure(facecolor='w',edgecolor='k')",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(harmonic_fn,ddo[key]['turn'][0]+1,x,method='trf',bounds=((offset_min,amp_min,-np.inf,freq_min)",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(harmonic_fn,ddo[key]['turn'][0]+1,x,method='trf',bounds=((offset_min,amp_min,-np.inf,freq_min)",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(harmonic_fn,ddo[key]['turn'][0]+1,x,method='trf',bounds=((offset_min,amp_min,-np.inf,freq_min)",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(harmonic_fn,ddo[key]['turn'][0]+1,x,method='trf',bounds=((offset_min,amp_min,-np.inf,freq_min)",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(quadratic,freq_h[n-1:n+2],ampl_h[n-1:n+2])",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(quadratic,freq_h[n-1:n+2],ampl_h[n-1:n+2])",CLUSTER_1,CLUSTER_9
important_words,json.load(f),CLUSTER_3,CLUSTER_10
coefficients,numpy.array(initial_coefficients),CLUSTER_3,CLUSTER_10
sample_feature_matrix,"numpy.array([[1.,2.,-1.],[1.,0.,1.]])",CLUSTER_3,CLUSTER_10
sample_sentiment,"numpy.array([+1,-1])",CLUSTER_3,CLUSTER_10
coefficients,numpy.zeros(194),CLUSTER_3,CLUSTER_10
coefficients,numpy.zeros(194),CLUSTER_3,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_3,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_3,CLUSTER_10
log_likelihood_all_ma,numpy.convolve(np.array(log_likelihood_all),CLUSTER_3,CLUSTER_10
score,"numpy.dot(feature_matrix,coefficients)",CLUSTER_3,CLUSTER_10
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_3,CLUSTER_10
lp,numpy.sum((indicator-1),CLUSTER_3,CLUSTER_10
mask,numpy.isinf(logexp),CLUSTER_3,CLUSTER_10
logexp,numpy.log(1.+np.exp(-scores),CLUSTER_3,CLUSTER_10
sales,"pandas.read_csv('data/sales-feb-2015.csv',index_col='Date',parse_dates=True)",CLUSTER_8,CLUSTER_3
sp500,"pandas.read_csv('data/sp500.csv',parse_dates=True,index_col='Date')",CLUSTER_8,CLUSTER_3
r,numpy.zeros(Nj),CLUSTER_1,CLUSTER_10
points,"numpy.zeros((Nj,Ni,2)",CLUSTER_1,CLUSTER_10
alpha,"numpy.linspace(0.0,-2*np.pi,Ni)",CLUSTER_1,CLUSTER_10
P_freestream,"numpy.array([rho(293.15,101325.0)",CLUSTER_1,CLUSTER_10
vetor2,"numpy.arange(0.,4.5,.5)",CLUSTER_4,CLUSTER_11
x,"numpy.arange(1,10,0.25)",CLUSTER_4,CLUSTER_11
d,"numpy.arange(1,10)",CLUSTER_4,CLUSTER_11
b,numpy.arange(10),CLUSTER_4,CLUSTER_11
vetor1,"numpy.array([0,1,2,3,4,5,6,7,8])",CLUSTER_4,CLUSTER_11
c,"numpy.array([1+2j,3+4j,5+6*1j])",CLUSTER_4,CLUSTER_11
b,"numpy.array([True,False,False,True])",CLUSTER_4,CLUSTER_11
s,"numpy.array(['Python','R','Julia'])",CLUSTER_4,CLUSTER_11
matriz,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_4,CLUSTER_11
x,"numpy.array([1,2])",CLUSTER_4,CLUSTER_11
y,"numpy.array([1.0,2.0])",CLUSTER_4,CLUSTER_11
z,"numpy.array([1,2],dtype=np.float64)",CLUSTER_4,CLUSTER_11
matriz3,"numpy.array([[24,76],[35,89]],dtype=float)",CLUSTER_4,CLUSTER_11
A,"numpy.array([15,23,63,94,75])",CLUSTER_4,CLUSTER_11
a,"numpy.array([1,2,3,4])",CLUSTER_4,CLUSTER_11
b,"numpy.array([4,2,2,4])",CLUSTER_4,CLUSTER_11
a,"numpy.array([1.2,1.5,1.6,2.5,3.5,4.5])",CLUSTER_4,CLUSTER_11
B,"numpy.array([1,2,3,4])",CLUSTER_4,CLUSTER_11
v,"numpy.array([1,2,3])",CLUSTER_4,CLUSTER_11
w,"numpy.array([5,6])",CLUSTER_4,CLUSTER_11
matriz1,"numpy.ones((2,3)",CLUSTER_4,CLUSTER_11
b,numpy.around(a),CLUSTER_4,CLUSTER_11
matriz2,numpy.matrix(lista),CLUSTER_4,CLUSTER_11
r,numpy.copy(v),CLUSTER_4,CLUSTER_11
d,"numpy.diag(np.array([1,2,3,4])",CLUSTER_4,CLUSTER_11
a,numpy.diag(np.arange(3),CLUSTER_4,CLUSTER_11
z,numpy.eye(3),CLUSTER_4,CLUSTER_11
arquivo,"numpy.loadtxt(filename,delimiter=',',usecols=(0,1,2,3)",CLUSTER_4,CLUSTER_11
"var1,var2","numpy.loadtxt(filename,delimiter=',',usecols=(0,1)",CLUSTER_4,CLUSTER_11
positive_counts,collections.Counter(),CLUSTER_12,CLUSTER_10
negative_counts,collections.Counter(),CLUSTER_12,CLUSTER_10
total_counts,collections.Counter(),CLUSTER_12,CLUSTER_10
pos_neg_ratios,collections.Counter(),CLUSTER_12,CLUSTER_10
review_counter,collections.Counter(),CLUSTER_12,CLUSTER_10
frequency_frequency,collections.Counter(),CLUSTER_12,CLUSTER_10
most_similar,collections.Counter(),CLUSTER_12,CLUSTER_10
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_10
layer_0,numpy.zeros(10),CLUSTER_12,CLUSTER_10
layer_1,numpy.zeros(5),CLUSTER_12,CLUSTER_10
layer_1,numpy.zeros(5),CLUSTER_12,CLUSTER_10
most_similar[word],"numpy.dot(mlp_full.weights_0_1[mlp_full.word2index[word]],mlp_full.weights_0_1[mlp_full.word2index[focus]])",CLUSTER_12,CLUSTER_10
"hist,edges","numpy.histogram(list(map(lambdax:x[1],pos_neg_ratios.most_common()",CLUSTER_12,CLUSTER_10
"hist,edges","numpy.histogram(list(map(lambdax:x[1],frequency_frequency.most_common()",CLUSTER_12,CLUSTER_10
start,time.time(),CLUSTER_12,CLUSTER_10
start,time.time(),CLUSTER_12,CLUSTER_10
tsne,"sklearn.manifold.TSNE(n_components=2,random_state=0)",CLUSTER_12,CLUSTER_10
city_datadf,"pandas.DataFrame({'city':city,'city_type':city_type,'fare_data':fare_data,'ride_perdata':ride_perdata,'driver_perdata':driver_perdata})",CLUSTER_1,CLUSTER_3
Result_merge1,"pandas.merge(ride_df,city_df,on='city',how='outer')",CLUSTER_1,CLUSTER_3
city_df,pandas.read_csv(file_load1),CLUSTER_1,CLUSTER_3
ride_df,pandas.read_csv(file_load2),CLUSTER_1,CLUSTER_3
factors,numpy.mat(factors),CLUSTER_4,CLUSTER_11
riskfree,numpy.mat(riskfree),CLUSTER_4,CLUSTER_11
portfolios,numpy.mat(portfolios),CLUSTER_4,CLUSTER_11
S,"numpy.mat(cov(hstack((moments1,moments2)",CLUSTER_4,CLUSTER_11
G,"numpy.mat(zeros((N*K+N+K,N*K+N+K)",CLUSTER_4,CLUSTER_11
avgExcessReturns,"numpy.mean(excessReturns,0)",CLUSTER_4,CLUSTER_11
values,"numpy.mean(u[:,i])",CLUSTER_4,CLUSTER_11
X,"numpy.hstack((ones((T,1)",CLUSTER_4,CLUSTER_11
X,"numpy.hstack((ones((T,1)",CLUSTER_4,CLUSTER_11
c,"numpy.hstack((a,b)",CLUSTER_4,CLUSTER_11
moments1,"numpy.multiply(moments1,kron(ones((1,N)",CLUSTER_4,CLUSTER_11
s,numpy.sqrt(variances),CLUSTER_4,CLUSTER_11
"temp[:,1:]",numpy.diag(values.A1),CLUSTER_4,CLUSTER_11
variances,numpy.diag(vcv[(K+1),CLUSTER_4,CLUSTER_11
out,"numpy.linalg.lstsq(X,excessReturns)",CLUSTER_4,CLUSTER_11
out,"numpy.linalg.lstsq(beta.T,avgExcessReturns.T)",CLUSTER_4,CLUSTER_11
vcv,numpy.linalg.inv(G.T),CLUSTER_4,CLUSTER_11
data,pandas.read_csv('FamaFrench.csv'),CLUSTER_4,CLUSTER_11
df,pandas.read_csv('../datasets/UN.csv'),CLUSTER_8,CLUSTER_4
df1,"pandas.DataFrame({'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']},
index=[0,1,2,3])",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame({'A':['A4','A5','A6','A7'],
'B':['B4','B5','B6','B7'],
'C':['C4','C5','C6','C7'],
'D':['D4','D5','D6','D7']},
index=[4,5,6,7])",CLUSTER_8,CLUSTER_3
df3,"pandas.DataFrame({'A':['A8','A9','A10','A11'],
'B':['B8','B9','B10','B11'],
'C':['C8','C9','C10','C11'],
'D':['D8','D9','D10','D11']},
index=[8,9,10,11])",CLUSTER_8,CLUSTER_3
left,"pandas.DataFrame({'key':['K0','K1','K2','K3'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_8,CLUSTER_3
right,"pandas.DataFrame({'key':['K0','K1','K2','K3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_8,CLUSTER_3
left,"pandas.DataFrame({'key1':['K0','K0','K1','K2'],
'key2':['K0','K1','K0','K1'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_8,CLUSTER_3
right,"pandas.DataFrame({'key1':['K0','K1','K1','K3'],
'key2':['K0','K0','K0','K0'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_8,CLUSTER_3
left,"pandas.DataFrame({'A':['A0','A1','A2'],
'B':['B0','B1','B2']},
index=['K0','K1','K2'])",CLUSTER_8,CLUSTER_3
right,"pandas.DataFrame({'C':['C0','C1','C2'],
'D':['D0','D1','D2']},
index=['K0','K2','K3'])",CLUSTER_8,CLUSTER_3
df_nans,pandas.DataFrame(train.isnull(),CLUSTER_7,CLUSTER_3
df_nans,pandas.DataFrame(train.isnull(),CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data.query(""data_type=='train'"")",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data.query(""data_type=='train'"")",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data.query(""data_type=='train'"")",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data.query(""data_type=='train'"")",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data.query(""data_type=='train'"")",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data.query(""data_type=='train'"")",CLUSTER_7,CLUSTER_3
data,"pandas.concat([train,val,test],ignore_index=True)",CLUSTER_7,CLUSTER_3
train,"pandas.read_csv('dataset/train2.tsv',sep='\t',header=None,index_col=0,names=columns)",CLUSTER_7,CLUSTER_3
val,"pandas.read_csv('dataset/val2.tsv',sep='\t',header=None,index_col=0,names=columns)",CLUSTER_7,CLUSTER_3
test,"pandas.read_csv('dataset/test2.tsv',sep='\t',header=None,index_col=0,names=columns)",CLUSTER_7,CLUSTER_3
f,"matplotlib.pyplot.figure(figsize=(20,7)",CLUSTER_7,CLUSTER_3
f,"matplotlib.pyplot.figure(figsize=(20,7)",CLUSTER_7,CLUSTER_3
x,numpy.arange(16),CLUSTER_3,CLUSTER_6
ind,"numpy.array([[0,2],
[1,3]])",CLUSTER_3,CLUSTER_6
row,"numpy.array([0,1,2])",CLUSTER_3,CLUSTER_6
col,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
X_test,"numpy.arange(0.0,5.0,0.01)",CLUSTER_7,CLUSTER_8
"movie_data[""score""]","numpy.where(list(movie_data[""imdb_score""]>=7)",CLUSTER_7,CLUSTER_8
"movie_data[""score""]","numpy.where(list(movie_data[""imdb_score""]>=7)",CLUSTER_7,CLUSTER_8
X_reg,"numpy.sort(5*rng.rand(80,1)",CLUSTER_7,CLUSTER_8
y_reg,numpy.sin(X_reg),CLUSTER_7,CLUSTER_8
y_reg,numpy.sin(X_reg),CLUSTER_7,CLUSTER_8
X_reg,"numpy.linspace(0,6,100)",CLUSTER_7,CLUSTER_8
view_data,"pandas.DataFrame(node_data[node_data_to_view],columns=col_names)",CLUSTER_7,CLUSTER_8
ml_data,"pandas.concat([movie_data_cats,movie_data_num],axis=1)",CLUSTER_7,CLUSTER_8
movie_data,"pandas.read_csv(""movie_2.csv"")",CLUSTER_7,CLUSTER_8
movie_data,"pandas.read_csv(""movie_2.csv"")",CLUSTER_7,CLUSTER_8
encoder_dict[colname],sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.4,random_state=0)",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train)",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train)",CLUSTER_7,CLUSTER_8
testing_dataset,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_8
clf,"sklearn.tree.DecisionTreeClassifier(max_depth=max_depth,
min_samples_split=min_samples_split,
min_samples_leaf=min_samples_leaf,
criterion=criterion,
max_features=max_features,
random_state=0)",CLUSTER_7,CLUSTER_8
clf_all,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeClassifier(max_depth=i),CLUSTER_7,CLUSTER_8
clf,"AdaBoostClassifier(base_estimator=sklearn.tree.DecisionTreeClassifier(max_depth=d,criterion=criterion)",CLUSTER_7,CLUSTER_8
clf,"AdaBoostClassifier(base_estimator=sklearn.tree.DecisionTreeClassifier(max_depth=8,criterion=""gini"")",CLUSTER_7,CLUSTER_8
regr_1,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_7,CLUSTER_8
regr_2,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_7,CLUSTER_8
regr_3,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_8
reg_tree,sklearn.tree.DecisionTreeRegressor(max_depth=4),CLUSTER_7,CLUSTER_8
ada_tree,sklearn.ensemble.AdaBoostRegressor(DecisionTreeRegressor(max_depth=4),CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=d,criterion=criterion)",CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=8,criterion=""gini"")",CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=n,criterion=criterion,max_depth=d,n_jobs=1,random_state=None)",CLUSTER_7,CLUSTER_8
X,pandas.get_dummies(X),CLUSTER_7,CLUSTER_8
data,pandas.read_csv('summary.csv'),CLUSTER_7,CLUSTER_8
tables,"pandas.read_html(""metadata.htm"")",CLUSTER_7,CLUSTER_8
clf,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=3)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.15,random_state=123)",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('winequality-white.csv',delimiter=';')",CLUSTER_1,CLUSTER_3
digit_test_01,"pandas.DataFrame(test0[:,0:24].reshape(20000,576)",CLUSTER_7,CLUSTER_5
symbol_test_02,"pandas.DataFrame(test0[:,24:48].reshape(20000,576)",CLUSTER_7,CLUSTER_5
digit_test_03,"pandas.DataFrame(test0[:,48:72].reshape(20000,576)",CLUSTER_7,CLUSTER_5
symbol_test_04,"pandas.DataFrame(test0[:,72:96].reshape(20000,576)",CLUSTER_7,CLUSTER_5
digit_test_05,"pandas.DataFrame(test0[:,96:120].reshape(20000,576)",CLUSTER_7,CLUSTER_5
result_digit_1,"pandas.Series(result_digit_1,name=""label1"")",CLUSTER_7,CLUSTER_5
result_symbol_2,"pandas.Series(result_symbol_2,name=""label2"")",CLUSTER_7,CLUSTER_5
result_digit_3,"pandas.Series(result_digit_3,name=""label3"")",CLUSTER_7,CLUSTER_5
result_symbol_4,"pandas.Series(result_symbol_4,name=""label4"")",CLUSTER_7,CLUSTER_5
result_digit_5,"pandas.Series(result_digit_5,name=""label5"")",CLUSTER_7,CLUSTER_5
result,"pandas.Series(result,name=""label"")",CLUSTER_7,CLUSTER_5
Total_train,"pandas.concat([Y_train,train],axis=1)",CLUSTER_7,CLUSTER_5
digit_test,"pandas.concat([digit_test_01,digit_test_03,digit_test_05],axis=0)",CLUSTER_7,CLUSTER_5
symbol_test,"pandas.concat([symbol_test_02,symbol_test_04],axis=0)",CLUSTER_7,CLUSTER_5
output,"pandas.concat([result_digit_1,result_symbol_2,result_digit_3,result_symbol_4,result_digit_5],axis=1)",CLUSTER_7,CLUSTER_5
submission,pandas.concat([pd.Series(range(20000),CLUSTER_7,CLUSTER_5
train,"pandas.read_csv(""F:/Datasets_handwritten/train_data.csv"",index_col=0)",CLUSTER_7,CLUSTER_5
Y_train,"pandas.read_csv(""F:/Datasets_handwritten/train_labels.csv"",index_col=0)",CLUSTER_7,CLUSTER_5
test,"pandas.read_csv(""F:/Datasets_handwritten/test_data.csv"",index_col=0)",CLUSTER_7,CLUSTER_5
neighbors,"numpy.arange(1,11)",CLUSTER_7,CLUSTER_5
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_5
neighbors,"numpy.arange(1,11)",CLUSTER_7,CLUSTER_5
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_5
result,numpy.zeros(length),CLUSTER_7,CLUSTER_5
knn_pred_classes,"numpy.argmax(predict_labels,axis=1)",CLUSTER_7,CLUSTER_5
Y_digit_true,"numpy.argmax(Y_digit_test_PCs,axis=1)",CLUSTER_7,CLUSTER_5
knn_pred_classes_s,"numpy.argmax(s_predict_labels,axis=1)",CLUSTER_7,CLUSTER_5
Y_symbol_true,"numpy.argmax(Y_symbol_test_PCs,axis=1)",CLUSTER_7,CLUSTER_5
Y_digit_pred_classes,"numpy.argmax(Y_digit_pred,axis=1)",CLUSTER_7,CLUSTER_5
Y_digit_true,"numpy.argmax(Y_digit_val,axis=1)",CLUSTER_7,CLUSTER_5
Y_symbol_pred_classes,"numpy.argmax(Y_symbol_pred,axis=1)",CLUSTER_7,CLUSTER_5
Y_symbol_true,"numpy.argmax(Y_symbol_val,axis=1)",CLUSTER_7,CLUSTER_5
result_digit_1,"numpy.argmax(result_digit_1,axis=1)",CLUSTER_7,CLUSTER_5
result_symbol_2,"numpy.argmax(result_symbol_2,axis=1)",CLUSTER_7,CLUSTER_5
result_digit_3,"numpy.argmax(result_digit_3,axis=1)",CLUSTER_7,CLUSTER_5
result_symbol_4,"numpy.argmax(result_symbol_4,axis=1)",CLUSTER_7,CLUSTER_5
result_digit_5,"numpy.argmax(result_digit_5,axis=1)",CLUSTER_7,CLUSTER_5
digit_sorted_dela_errors,numpy.argsort(digit_delta_pred_true_errors),CLUSTER_7,CLUSTER_5
digit_true_prob_errors,"numpy.diagonal(np.take(Y_digit_pred_errors,Y_digit_true_errors,axis=1)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
"plt.imshow(grid_data,interpolation","""none"",cmap=matplotlib.pyplot.get_cmap('gray')",CLUSTER_7,CLUSTER_5
"plt.imshow(grid_data,interpolation","""none"",cmap=matplotlib.pyplot.get_cmap('gray')",CLUSTER_7,CLUSTER_5
"plt.imshow(grid_data,interpolation","""none"",cmap=matplotlib.pyplot.get_cmap('gray')",CLUSTER_7,CLUSTER_5
"plt.imshow(grid_data,interpolation","""none"",cmap=matplotlib.pyplot.get_cmap('gray')",CLUSTER_7,CLUSTER_5
"plt.imshow(digit_test_01.iloc[0].as_matrix().reshape(24,24),cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
"plt.imshow(symbol_test_02.iloc[0].as_matrix().reshape(24,24),cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
"plt.imshow(digit_test_03.iloc[0].as_matrix().reshape(24,24),cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
"plt.imshow(symbol_test_04.iloc[0].as_matrix().reshape(24,24),cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
"plt.imshow(digit_test_05.iloc[0].as_matrix().reshape(24,24),cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
cmap,matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
cmap,matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
cmap,matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
cmap,matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(2,1)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(2,1)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(nrows,ncols,sharex=True,sharey=True)",CLUSTER_7,CLUSTER_5
g,seaborn.countplot(Total_train['label']),CLUSTER_7,CLUSTER_5
g,seaborn.countplot(Y_symbol_train),CLUSTER_7,CLUSTER_5
"X_digit_train_PCs,X_digit_test_PCs,Y_digit_train_PCs,Y_digit_test_PCs","sklearn.model_selection.train_test_split(X_digit_train_PCs,Y_digit_train,test_size=0.25,random_state=random_seed)",CLUSTER_7,CLUSTER_5
"X_symbol_train_PCs,X_symbol_test_PCs,Y_symbol_train_PCs,Y_symbol_test_PCs","sklearn.model_selection.train_test_split(X_symbol_train_PCs,Y_symbol_train,test_size=0.25,random_state=random_seed)",CLUSTER_7,CLUSTER_5
"X_digit_train,X_digit_val,Y_digit_train,Y_digit_val","sklearn.model_selection.train_test_split(X_digit_train,Y_digit_train,test_size=0.1,random_state=random_seed)",CLUSTER_7,CLUSTER_5
"X_symbol_train,X_symbol_val,Y_symbol_train,Y_symbol_val","sklearn.model_selection.train_test_split(X_symbol_train,Y_symbol_train,test_size=0.1,random_state=random_seed)",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(knn,X_digit_train_PCs,Y_digit_train_PCs,cv=5,scoring='accuracy')",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(knn,X_symbol_train_PCs,Y_symbol_train_PCs,cv=5,scoring='accuracy')",CLUSTER_7,CLUSTER_5
confusion_mtx_d,"sklearn.metrics.confusion_matrix(Y_digit_true,knn_pred_classes)",CLUSTER_7,CLUSTER_5
confusion_mtx_s,"sklearn.metrics.confusion_matrix(Y_symbol_true,knn_pred_classes_s)",CLUSTER_7,CLUSTER_5
confusion_mtx_d,"sklearn.metrics.confusion_matrix(Y_digit_true,Y_digit_pred_classes)",CLUSTER_7,CLUSTER_5
confusion_mtx_s,"sklearn.metrics.confusion_matrix(Y_symbol_true,Y_symbol_pred_classes)",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(2),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(.90),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=60),CLUSTER_7,CLUSTER_5
S_PC_2,sklearn.decomposition.PCA(2),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(.90),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=50),CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.figure(figsize=(6,4)",CLUSTER_8,CLUSTER_3
payNum,"pandas.read_csv('part-00000',sep='\t',header=None,encoding='gbk')",CLUSTER_8,CLUSTER_3
mse,numpy.mean((lm.predict(test_X),CLUSTER_11,CLUSTER_5
mse,numpy.mean((lm.predict(test_X),CLUSTER_11,CLUSTER_5
ETF_X,pandas.DataFrame(x_tmp),CLUSTER_11,CLUSTER_5
ETF_X,pandas.DataFrame(x_tmp),CLUSTER_11,CLUSTER_5
ETF_train,pandas.read_csv(filename),CLUSTER_11,CLUSTER_5
ETF_train,pandas.read_csv(filename),CLUSTER_11,CLUSTER_5
ETF_train,pandas.read_csv(filename),CLUSTER_11,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_11,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_11,CLUSTER_5
point_1,"random.randint(0,len(chromosome_1)",CLUSTER_11,CLUSTER_5
point_2,"random.randint(0,len(chromosome_1)",CLUSTER_11,CLUSTER_5
point_1,"random.randint(0,len(chromosome_1)",CLUSTER_11,CLUSTER_5
point_2,"random.randint(0,len(chromosome_1)",CLUSTER_11,CLUSTER_5
point_1,"random.randint(0,len(chromosome)",CLUSTER_11,CLUSTER_5
point_2,"random.randint(0,len(chromosome)",CLUSTER_11,CLUSTER_5
point_1,"random.randint(0,len(chromosome)",CLUSTER_11,CLUSTER_5
point_2,"random.randint(0,len(chromosome)",CLUSTER_11,CLUSTER_5
r,"random.randint(0,len(y_pred)",CLUSTER_11,CLUSTER_5
random_rate,random.random(),CLUSTER_11,CLUSTER_5
random_rate,random.random(),CLUSTER_11,CLUSTER_5
Totalstarttime,datetime.datetime.now(),CLUSTER_11,CLUSTER_5
cost,numpy.squeeze(cost),CLUSTER_1,CLUSTER_10
data['category'],"pandas.Categorical(['a','b','a','a','b'],
categories=['a','b'])",CLUSTER_8,CLUSTER_3
data,"pandas.DataFrame({'x0':[1,2,3,4,5],
'x1':[0.01,-0.01,0.25,-4.1,0.],
'y':[-1.5,0.,3.6,1.3,-2.]})",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame(data.values,columns=['one','two','three'])",CLUSTER_8,CLUSTER_3
data,"pandas.DataFrame({'x0':[1,2,3,4,5],
'x1':[0.01,-0.01,0.25,-4.1,0.],
'y':[-1.5,0.,3.6,1.3,-2.]})",CLUSTER_8,CLUSTER_3
new_data,"pandas.DataFrame({'x0':[6,7,8,9],
'x1':[3.1,-0.5,0,2.3],
'y':[1,2,3,4]})",CLUSTER_8,CLUSTER_3
data,"pandas.DataFrame({
'key1':['a','a','b','b','a','b','a','b'],
'key2':[0,1,0,1,0,1,0,0],
'v1':[1,2,3,4,5,6,7,8],
'v2':[-1,0,2.5,-0.5,4.0,-1.2,0.2,-1.7]})",CLUSTER_8,CLUSTER_3
data,"pandas.DataFrame(X,columns=['col0','col1','col2'])",CLUSTER_8,CLUSTER_3
coef,pandas.Series(coef.squeeze(),CLUSTER_8,CLUSTER_3
dummies,"pandas.get_dummies(data.category,prefix='category')",CLUSTER_8,CLUSTER_3
y,"numpy.dot(X,beta)",CLUSTER_8,CLUSTER_3
"coef,resid,_,_","numpy.linalg.lstsq(X,y)",CLUSTER_8,CLUSTER_3
colormap,"numpy.array([
""
""
""
""
colormap=colormap[:n_topics]


top_3_words_lsa=get_top_n_words(3,lsa_keys,small_document_term_matrix,small_count_vectorizer)",CLUSTER_0,CLUSTER_5
word_vectors,"numpy.zeros((n_top_words,vectorized_headlines.shape[1])",CLUSTER_0,CLUSTER_5
temp_word_vector,"numpy.zeros((1,document_term_matrix.shape[1])",CLUSTER_0,CLUSTER_5
mean_article_in_that_topic,"numpy.mean(articles_in_that_topic,axis=0)",CLUSTER_0,CLUSTER_5
vectorized_total,"numpy.sum(vectorized_headlines,axis=0)",CLUSTER_0,CLUSTER_5
articles_in_that_topic,numpy.vstack(articles_in_that_topic),CLUSTER_0,CLUSTER_5
complete_topic_matrix,numpy.vstack(yearly_topic_matrices),CLUSTER_0,CLUSTER_5
word_indices,numpy.flip(np.argsort(vectorized_total),CLUSTER_0,CLUSTER_5
word_values,numpy.flip(np.sort(vectorized_total),CLUSTER_0,CLUSTER_5
top_n_word_indices,numpy.flip(np.argsort(temp_vector_sum),CLUSTER_0,CLUSTER_5
tagged_headlines,pandas.DataFrame({'tags':tagged_headlines}),CLUSTER_0,CLUSTER_5
yearly_topic_counts,pandas.DataFrame(np.array(yearly_counts),CLUSTER_0,CLUSTER_5
raw_data,"pandas.read_csv(datafile,parse_dates=[0],infer_datetime_format=True)",CLUSTER_0,CLUSTER_5
tagged_headlines,"pandas.read_csv('abcnews-pos-tagged.csv',index_col=0)",CLUSTER_0,CLUSTER_5
count_pairs,collections.Counter(keys),CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,8)",CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(18,8)",CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(18,8)",CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(3,figsize=(18,16)",CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,8)",CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,8)",CLUSTER_0,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(14,10)",CLUSTER_0,CLUSTER_5
lsa_model,sklearn.decomposition.TruncatedSVD(n_components=n_topics),CLUSTER_0,CLUSTER_5
tsne_lsa_model,"sklearn.manifold.TSNE(n_components=2,perplexity=50,learning_rate=100,
n_iter=2000,verbose=1,random_state=0,angle=0.75)",CLUSTER_0,CLUSTER_5
tsne_lda_model,"sklearn.manifold.TSNE(n_components=2,perplexity=50,learning_rate=100,
n_iter=2000,verbose=1,random_state=0,angle=0.75)",CLUSTER_0,CLUSTER_5
lda_model,"sklearn.decomposition.LatentDirichletAllocation(n_components=n_topics,learning_method='online',
random_state=0,verbose=0)",CLUSTER_0,CLUSTER_5
big_lda_model,"sklearn.decomposition.LatentDirichletAllocation(n_components=n_topics,learning_method='online',verbose=1)",CLUSTER_0,CLUSTER_5
res_work_column_bad,numpy.array(res_work['price']),CLUSTER_7,CLUSTER_5
res_work_id,numpy.array(res_work.index),CLUSTER_7,CLUSTER_5
res_work_column[i-100000],numpy.exp(best_RF_test[n]),CLUSTER_7,CLUSTER_5
train['price'],numpy.log(train['price']),CLUSTER_7,CLUSTER_5
train,"pandas.read_csv('Train.csv',index_col='id')",CLUSTER_7,CLUSTER_5
test,"pandas.read_csv('Test.csv',index_col='id')",CLUSTER_7,CLUSTER_5
res_work,"pandas.read_csv('result_work',index_col='id')",CLUSTER_7,CLUSTER_5
test_big,"pandas.read_csv('Test.csv',index_col='id')",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=1)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=1)",CLUSTER_7,CLUSTER_5
rf_regr,"sklearn.ensemble.RandomForestRegressor(n_estimators=500,n_jobs=-1)",CLUSTER_7,CLUSTER_5
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,n_jobs=-1)",CLUSTER_7,CLUSTER_5
dic_dfs[i],pandas.DataFrame(),CLUSTER_7,CLUSTER_5
ans,pandas.DataFrame(data=(res_work_column),CLUSTER_7,CLUSTER_5
res_work,"pandas.Series(index=res_work_id,data=res_work_column)",CLUSTER_7,CLUSTER_5
data1,"pandas.concat([train['price'],train[var]],axis=1)",CLUSTER_7,CLUSTER_5
data1,"pandas.concat([train['price'],train[var]],axis=1)",CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_7,CLUSTER_5
d,"numpy.arange(0,11,1)",CLUSTER_1,CLUSTER_3
b,numpy.arange(4),CLUSTER_1,CLUSTER_3
a,numpy.arange(10),CLUSTER_1,CLUSTER_3
a,"numpy.array([20,30,40,50])",CLUSTER_1,CLUSTER_3
a,numpy.zeros((3),CLUSTER_1,CLUSTER_3
b,"numpy.ones((2,3)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(6,4)",CLUSTER_1,CLUSTER_3
z,"pandas.DataFrame(index=df.index,columns=df.columns)",CLUSTER_1,CLUSTER_3
df2,"pandas.DataFrame({'A':1.0,
'B':pd.Timestamp('20170102')",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(10,4)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({'A':['foo','bar','foo','bar','foo','bar','foo','foo'],
'B':['one','one','two','three','two','two','one','three'],
'C':np.random.randn(8)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(100,4)",CLUSTER_1,CLUSTER_3
s1,"pandas.Series([1,2,3,4,5,6],index=pd.date_range('20170102',periods=6)",CLUSTER_1,CLUSTER_3
s,"pandas.Series(['A','B','C','Aaba','Baca',np.nan,'CABA','dog','cat'])",CLUSTER_1,CLUSTER_3
ts,"pandas.Series(np.random.randint(0,500,len(rng)",CLUSTER_1,CLUSTER_3
ts,pandas.Series(np.random.randn(points),CLUSTER_1,CLUSTER_3
dates,"pandas.date_range('20170101',periods=6)",CLUSTER_1,CLUSTER_3
s1,"pd.Series([1,2,3,4,5,6],index=pandas.date_range('20170102',periods=6)",CLUSTER_1,CLUSTER_3
rng,"pandas.date_range('1/1/2017',periods=100,freq='S')",CLUSTER_1,CLUSTER_3
ts,"pd.Series(np.random.randn(points),index=pandas.date_range(startdate,periods=points)",CLUSTER_1,CLUSTER_3
precision,"sklearn.metrics.precision_score(y_true,y_pred)",CLUSTER_5,CLUSTER_6
recall,"sklearn.metrics.recall_score(y_true,y_pred)",CLUSTER_5,CLUSTER_6
y,numpy.cos(x),CLUSTER_1,CLUSTER_10
z,numpy.sin(x),CLUSTER_1,CLUSTER_10
x,"numpy.linspace(0,10*numpy.pi,10**3)",CLUSTER_1,CLUSTER_10
t,"numpy.linspace(0,2,10**3)",CLUSTER_1,CLUSTER_10
df,pandas.DataFrame(columns=headers),CLUSTER_8,CLUSTER_4
df_append,"pandas.DataFrame(table,columns=headers)",CLUSTER_8,CLUSTER_4
df,"pandas.concat([df,df_append])",CLUSTER_8,CLUSTER_4
"fig,axes","matplotlib.pyplot.subplots(6,6,sharex=True,sharey=True,figsize=(5,5)",CLUSTER_4,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(figsize=figsize,nrows=nrows,ncols=ncols,
sharey=True,sharex=True)",CLUSTER_4,CLUSTER_7
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_7
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_7
idx,numpy.arange(len(dataset.train_x),CLUSTER_4,CLUSTER_7
losses,numpy.array(losses),CLUSTER_4,CLUSTER_7
losses,numpy.array(losses),CLUSTER_4,CLUSTER_7
self.train_x,"numpy.rollaxis(self.train_x,3)",CLUSTER_4,CLUSTER_7
self.valid_x,"numpy.rollaxis(self.valid_x,3)",CLUSTER_4,CLUSTER_7
self.test_x,"numpy.rollaxis(self.test_x,3)",CLUSTER_4,CLUSTER_7
trainset,scipy.io.loadmat(data_dir+'train_32x32.mat'),CLUSTER_4,CLUSTER_7
testset,scipy.io.loadmat(data_dir+'test_32x32.mat'),CLUSTER_4,CLUSTER_7
"x,y",random.random(),CLUSTER_8,CLUSTER_4
discounted,numpy.array([val*(gamma**i),CLUSTER_2,CLUSTER_10
observations,numpy.empty(0),CLUSTER_2,CLUSTER_10
rewards,numpy.empty(0),CLUSTER_2,CLUSTER_10
actions,numpy.empty(0),CLUSTER_2,CLUSTER_10
policies,numpy.empty(0),CLUSTER_2,CLUSTER_10
observations,numpy.empty(0),CLUSTER_2,CLUSTER_10
rewards,numpy.empty(0),CLUSTER_2,CLUSTER_10
actions,numpy.empty(0),CLUSTER_2,CLUSTER_10
policies,numpy.empty(0),CLUSTER_2,CLUSTER_10
action,numpy.argmax(model_p.predict(observation),CLUSTER_2,CLUSTER_10
y,numpy.argmax(y[0]),CLUSTER_2,CLUSTER_10
"output_next_state[:,0]","numpy.clip(output_next_state[:,0],-2.4,2.4)",CLUSTER_2,CLUSTER_10
"output_next_state[:,2]","numpy.clip(output_next_state[:,2],-0.4,0.4)",CLUSTER_2,CLUSTER_10
discounted-,numpy.mean(discounted),CLUSTER_2,CLUSTER_10
x,"numpy.reshape(observation,[1,dimen])",CLUSTER_2,CLUSTER_10
discounted/,numpy.std(discounted),CLUSTER_2,CLUSTER_10
x,"numpy.hstack([x,[[action]]])",CLUSTER_2,CLUSTER_10
policies,"numpy.vstack([policies,policy])",CLUSTER_2,CLUSTER_10
observations,"numpy.vstack([observations,observation])",CLUSTER_2,CLUSTER_10
actions,"numpy.vstack([actions,action])",CLUSTER_2,CLUSTER_10
rewards,"numpy.vstack([rewards,reward])",CLUSTER_2,CLUSTER_10
prio_ucdp_full['log_best'],numpy.log(prio_ucdp_full['best']+1),CLUSTER_1,CLUSTER_3
updated_years,pandas.concat(list_sub),CLUSTER_1,CLUSTER_3
prio_full_updated,"pandas.concat([prio_full,updated_years])",CLUSTER_1,CLUSTER_3
prio_full,"pandas.merge(prio_grid,prio_cshape_codes,how='inner',on=['gid'])",CLUSTER_1,CLUSTER_3
prio_ucdp_full,"pandas.merge(prio_full_updated,ucdp_lean_agg,how='outer',on=['gid','year'])",CLUSTER_1,CLUSTER_3
ucdp,"pandas.read_csv(""data/ged181-csv.zip"")",CLUSTER_1,CLUSTER_3
prio_cshape_codes,"pandas.read_csv(""data/PRIO-GRIDYearlyVariablesfor1989-2014-2019-02-12.csv"")",CLUSTER_1,CLUSTER_3
results,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
core_samples_mask,"numpy.zeros_like(db.labels_,dtype=bool)",CLUSTER_9,CLUSTER_2
shp['Radius'],numpy.sqrt(shp['Area']/np.pi),CLUSTER_9,CLUSTER_2
district_df,pandas.DataFrame(shp),CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
cat_df,pandas.DataFrame([itemforcat_listincat_listforitemincat_list]),CLUSTER_9,CLUSTER_2
categories,pandas.DataFrame(sp_venues.groupby(['Category']),CLUSTER_9,CLUSTER_2
districts,pandas.DataFrame(sp_venues.groupby(['District']),CLUSTER_9,CLUSTER_2
coord_df,pandas.DataFrame(coordinates),CLUSTER_9,CLUSTER_2
onehot,"pandas.get_dummies(sp_venues[['Category']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
onehot,"pandas.get_dummies(sp_venues[['Category']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
sp_venues_onehot,"pandas.merge(sp_venues,onehot,left_index=True,right_index=True)",CLUSTER_9,CLUSTER_2
nationalities,pandas.read_csv('https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/664133/CH_Nationality_List_20171130_v1.csv'),CLUSTER_9,CLUSTER_2
db,"sklearn.cluster.DBSCAN(eps=0.09,min_samples=5)",CLUSTER_9,CLUSTER_2
Clus_dataSet,sklearn.preprocessing.StandardScaler(),CLUSTER_9,CLUSTER_2
y_pred,pandas.Series(y_pred),CLUSTER_7,CLUSTER_5
y_pred,pandas.Series(y_pred),CLUSTER_7,CLUSTER_5
y_pred,pandas.Series(entr_model2.predict(X_test),CLUSTER_7,CLUSTER_5
y_pred,pandas.Series(gini_model2.predict(X_test),CLUSTER_7,CLUSTER_5
potential_buyers,pandas.Series(gini_model2.predict(new_X),CLUSTER_7,CLUSTER_5
potential_buyers2,pandas.Series(best_model.predict(new_X),CLUSTER_7,CLUSTER_5
X_train,pandas.get_dummies(X_train),CLUSTER_7,CLUSTER_5
X_test,pandas.get_dummies(X_test),CLUSTER_7,CLUSTER_5
new_X,pandas.get_dummies(new_X),CLUSTER_7,CLUSTER_5
coffeeData,pandas.read_csv('RRDinerCoffeeData.csv'),CLUSTER_7,CLUSTER_5
entr_model,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',random_state=246)",CLUSTER_7,CLUSTER_5
gini_model,"sklearn.tree.DecisionTreeClassifier(criterion='gini',random_state=246)",CLUSTER_7,CLUSTER_5
entr_model2,"sklearn.tree.DecisionTreeClassifier(max_depth=3,criterion='entropy',random_state=246)",CLUSTER_7,CLUSTER_5
gini_model2,"sklearn.tree.DecisionTreeClassifier(max_depth=3,criterion='gini',random_state=246)",CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(entr_model,
out_file=None,
feature_names=NOPrediction.columns,
class_names=entr_model.classes_,
filled=True)",CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(gini_model,
out_file=None,
feature_names=NOPrediction.columns,
class_names=gini_model.classes_,
filled=True)",CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(entr_model2,
out_file=None,
feature_names=NOPrediction.columns,
class_names=entr_model2.classes_,
filled=True)",CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(gini_model2,
out_file=None,
feature_names=NOPrediction.columns,
class_names=gini_model2.classes_,
filled=True)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=246)",CLUSTER_7,CLUSTER_5
rf_model,"sklearn.ensemble.RandomForestClassifier(max_depth=3,random_state=246)",CLUSTER_7,CLUSTER_5
gs_cv,"sklearn.model_selection.GridSearchCV(rf_model,param_grid=params,cv=5)",CLUSTER_7,CLUSTER_5
train,"pandas.read_csv(""train.csv"")",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(""test.csv"")",CLUSTER_7,CLUSTER_8
add,"pandas.read_csv(""published_land_price.csv"")",CLUSTER_7,CLUSTER_8
levels,"pandas.DataFrame({'Variable':var,'Levels':l,'Datatype':t})",CLUSTER_7,CLUSTER_8
imp,"pandas.DataFrame(
model.feature_importances_,
columns=['Importance'],
index=X.columns
)",CLUSTER_7,CLUSTER_8
test,"pandas.DataFrame({'id':wine_type,'type':test_Y})",CLUSTER_7,CLUSTER_8
quality,"pandas.get_dummies(data.quality,prefix='quality')",CLUSTER_7,CLUSTER_8
data,"pandas.read_csv(""winequalityN.csv"")",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_7,CLUSTER_8
"_,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_7,CLUSTER_8
facet,"seaborn.FacetGrid(df,hue=target,aspect=4,row=row,col=col)",CLUSTER_7,CLUSTER_8
facet,"seaborn.FacetGrid(df,row=row,col=col)",CLUSTER_7,CLUSTER_8
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_7,CLUSTER_8
_,"seaborn.heatmap(
corr,
cmap=cmap,
square=True,
cbar_kws={'shrink':.9},
ax=ax,
annot=True,
annot_kws={'fontsize':12}
)",CLUSTER_7,CLUSTER_8
tree,sklearn.tree.DecisionTreeClassifier(random_state=99),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
"train_X,test_X,train_y,test_y","sklearn.model_selection.train_test_split(X,y,train_size=.7)",CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
creditData[feature],pandas.Categorical(creditData[feature]),CLUSTER_7,CLUSTER_5
df_cm,"pandas.DataFrame(cm,index=[iforiin[""No"",""Yes""]],
columns=[iforiin[""No"",""Yes""]])",CLUSTER_7,CLUSTER_5
df_cm,"pandas.DataFrame(cm,index=[iforiin[""No"",""Yes""]],
columns=[iforiin[""No"",""Yes""]])",CLUSTER_7,CLUSTER_5
df_cm,"pandas.DataFrame(cm,index=[iforiin[""No"",""Yes""]],
columns=[iforiin[""No"",""Yes""]])",CLUSTER_7,CLUSTER_5
df_cm,"pandas.DataFrame(cm,index=[iforiin[""No"",""Yes""]],
columns=[iforiin[""No"",""Yes""]])",CLUSTER_7,CLUSTER_5
df_cm,"pandas.DataFrame(cm,index=[iforiin[""No"",""Yes""]],
columns=[iforiin[""No"",""Yes""]])",CLUSTER_7,CLUSTER_5
creditData,"pandas.get_dummies(creditData,columns=oneHotCols)",CLUSTER_7,CLUSTER_5
creditData,"pandas.read_csv(""credit.csv"")",CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_predict,labels=[0,1])",CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_predict,labels=[0,1])",CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_predict,labels=[0,1])",CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_predict,labels=[0,1])",CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_predict,labels=[0,1])",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.30,random_state=1)",CLUSTER_7,CLUSTER_5
dTree,"sklearn.tree.DecisionTreeClassifier(criterion='gini',random_state=1)",CLUSTER_7,CLUSTER_5
dTreeR,"sklearn.tree.DecisionTreeClassifier(criterion='gini',max_depth=3,random_state=1)",CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(dTree,out_file=Credit_Tree_File,feature_names=list(X_train)",CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(dTreeR,out_file=Credit_Tree_FileR,feature_names=list(X_train)",CLUSTER_7,CLUSTER_5
retCode,"os.system(""dot-Tpngcredit_tree.dot-ocredit_tree.png"")",CLUSTER_7,CLUSTER_5
retCode,"os.system(""dot-Tpngcredit_treeR.dot-ocredit_treeR.png"")",CLUSTER_7,CLUSTER_5
bgcl,"sklearn.ensemble.BaggingClassifier(base_estimator=dTree,n_estimators=50,random_state=1)",CLUSTER_7,CLUSTER_5
abcl,"sklearn.ensemble.AdaBoostClassifier(n_estimators=10,random_state=1)",CLUSTER_7,CLUSTER_5
gbcl,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=50,random_state=1)",CLUSTER_7,CLUSTER_5
rfcl,"sklearn.ensemble.RandomForestClassifier(n_estimators=50,random_state=1,max_features=12)",CLUSTER_7,CLUSTER_5
self.Qta,numpy.zeros(n),CLUSTER_1,CLUSTER_10
self.Ka,"numpy.zeros(n,dtype=int)",CLUSTER_1,CLUSTER_10
self.optimalHistory,numpy.zeros(max_t),CLUSTER_1,CLUSTER_10
self.rewardHistory,numpy.zeros(max_t),CLUSTER_1,CLUSTER_10
self.Qta,numpy.zeros(n),CLUSTER_1,CLUSTER_10
self.Ka,"numpy.zeros(n,dtype=int)",CLUSTER_1,CLUSTER_10
self.optimalHistory,numpy.zeros(max_t),CLUSTER_1,CLUSTER_10
self.rewardHistory,numpy.zeros(max_t),CLUSTER_1,CLUSTER_10
self.Qta,numpy.zeros(n),CLUSTER_1,CLUSTER_10
self.Ka,"numpy.zeros(n,dtype=int)",CLUSTER_1,CLUSTER_10
self.optimalHistory,numpy.zeros(max_t),CLUSTER_1,CLUSTER_10
self.rewardHistory,numpy.zeros(max_t),CLUSTER_1,CLUSTER_10
self.averageRewardHistory,numpy.zeros(self.max_t),CLUSTER_1,CLUSTER_10
self.averageOptimalHistory,numpy.zeros(self.max_t),CLUSTER_1,CLUSTER_10
probArray,numpy.exp(self.Qta/self.tau),CLUSTER_1,CLUSTER_10
probArray,numpy.exp(self.Qta/self.tau),CLUSTER_1,CLUSTER_10
probArray,"numpy.delete(probArray,greedyAction)",CLUSTER_1,CLUSTER_10
X_new,numpy.array([[0.8]]),CLUSTER_4,CLUSTER_11
sample_weights,numpy.ones(m),CLUSTER_4,CLUSTER_11
bst_n_estimators,numpy.argmin(errors),CLUSTER_4,CLUSTER_11
cumulative_heads_ratio,"numpy.cumsum(coin_tosses,axis=0)",CLUSTER_4,CLUSTER_11
x1s,"numpy.linspace(axes[0],axes[1],100)",CLUSTER_4,CLUSTER_11
x2s,"numpy.linspace(axes[2],axes[3],100)",CLUSTER_4,CLUSTER_11
x1,"numpy.linspace(axes[0],axes[1],500)",CLUSTER_4,CLUSTER_11
"x1,x2","numpy.meshgrid(x1s,x2s)",CLUSTER_4,CLUSTER_11
cbar,matplotlib.pyplot.colorbar(ticks=[rnd_clf.feature_importances_.min(),CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,random_state=49)",CLUSTER_4,CLUSTER_11
"X,y","sklearn.datasets.make_moons(n_samples=500,noise=0.30,random_state=42)",CLUSTER_4,CLUSTER_11
rnd_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_4,CLUSTER_11
rnd_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_4,CLUSTER_11
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,max_leaf_nodes=16,n_jobs=-1,random_state=42)",CLUSTER_4,CLUSTER_11
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,n_jobs=-1,random_state=42)",CLUSTER_4,CLUSTER_11
rnd_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_4,CLUSTER_11
voting_clf,"sklearn.ensemble.VotingClassifier(
estimators=[('lr',log_clf)",CLUSTER_4,CLUSTER_11
voting_clf,"sklearn.ensemble.VotingClassifier(
estimators=[('lr',log_clf)",CLUSTER_4,CLUSTER_11
log_clf,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_4,CLUSTER_11
log_clf,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_4,CLUSTER_11
svm_clf,sklearn.svm.SVC(random_state=42),CLUSTER_4,CLUSTER_11
svm_clf,"sklearn.svm.SVC(probability=True,random_state=42)",CLUSTER_4,CLUSTER_11
svm_clf,"sklearn.svm.SVC(kernel=""rbf"",C=0.05,random_state=42)",CLUSTER_4,CLUSTER_11
bag_clf,"sklearn.ensemble.BaggingClassifier(
DecisionTreeClassifier(random_state=42)",CLUSTER_4,CLUSTER_11
bag_clf,"sklearn.ensemble.BaggingClassifier(
DecisionTreeClassifier(splitter=""random"",max_leaf_nodes=16,random_state=42)",CLUSTER_4,CLUSTER_11
bag_clf,"sklearn.ensemble.BaggingClassifier(
DecisionTreeClassifier(random_state=42)",CLUSTER_4,CLUSTER_11
tree_clf,sklearn.tree.DecisionTreeClassifier(random_state=42),CLUSTER_4,CLUSTER_11
tree_clf,"sklearn.tree.DecisionTreeClassifier(max_leaf_nodes=16,random_state=42+i)",CLUSTER_4,CLUSTER_11
iris,sklearn.datasets.load_iris(),CLUSTER_4,CLUSTER_11
ada_clf,"sklearn.ensemble.AdaBoostClassifier(
DecisionTreeClassifier(max_depth=1)",CLUSTER_4,CLUSTER_11
tree_reg1,"sklearn.tree.DecisionTreeRegressor(max_depth=2,random_state=42)",CLUSTER_4,CLUSTER_11
tree_reg2,"sklearn.tree.DecisionTreeRegressor(max_depth=2,random_state=42)",CLUSTER_4,CLUSTER_11
tree_reg3,"sklearn.tree.DecisionTreeRegressor(max_depth=2,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=3,learning_rate=1.0,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt_slow,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=200,learning_rate=0.1,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=120,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt_best,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,n_estimators=bst_n_estimators,random_state=42)",CLUSTER_4,CLUSTER_11
gbrt,"sklearn.ensemble.GradientBoostingRegressor(max_depth=2,warm_start=True,random_state=42)",CLUSTER_4,CLUSTER_11
val_error,"sklearn.metrics.mean_squared_error(y_val,y_pred)",CLUSTER_4,CLUSTER_11
dataframe,scipy.io.loadmat('../../../Data_generation_base_case/Train_DataSyn1_time_clip.mat'),CLUSTER_2,CLUSTER_0
dataframe_facies,scipy.io.loadmat('../../../Data_generation_base_case/Train_FaciesMat.mat'),CLUSTER_2,CLUSTER_0
dataframe_porosity,scipy.io.loadmat('../../../Data_generation_base_case/Train_PhiMat.mat'),CLUSTER_2,CLUSTER_0
dataframe_vclay,scipy.io.loadmat('../../../Data_generation_base_case/Train_ClayMat.mat'),CLUSTER_2,CLUSTER_0
dataframe_Sw,scipy.io.loadmat('../../../Data_generation_base_case/Train_SwMat.mat'),CLUSTER_2,CLUSTER_0
"f,axarr","matplotlib.pyplot.subplots(1,8,sharey=True)",CLUSTER_2,CLUSTER_0
"f,axarr","matplotlib.pyplot.subplots(1,3,sharey=True)",CLUSTER_2,CLUSTER_0
"f,axarr","matplotlib.pyplot.subplots(1,3,sharey=True)",CLUSTER_2,CLUSTER_0
theta,"numpy.arange(thetaStart,thetaEnd+thetaInc,thetaInc)",CLUSTER_2,CLUSTER_0
time_upscaled,"numpy.arange(0,end_time,dt)",CLUSTER_2,CLUSTER_0
time,"numpy.zeros((Vp.shape[0],Vp.shape[1]+1)",CLUSTER_2,CLUSTER_0
Vp_time,"numpy.zeros((Vp.shape[0],time_upscaled.shape[0])",CLUSTER_2,CLUSTER_0
Vs_time,"numpy.zeros((Vs.shape[0],time_upscaled.shape[0])",CLUSTER_2,CLUSTER_0
RHOB_time,"numpy.zeros((RHOB.shape[0],time_upscaled.shape[0])",CLUSTER_2,CLUSTER_0
input11,"numpy.zeros([bs,nt,3],dtype=np.float32)",CLUSTER_2,CLUSTER_0
emodel,"numpy.concatenate((Vp_time,Vs_time,RHOB_time)",CLUSTER_2,CLUSTER_0
depth_diff,numpy.mean(np.diff(depth.T),CLUSTER_2,CLUSTER_0
Vp,"numpy.reshape(Vp,(Vp.shape[0]*Vp.shape[1],Vp.shape[2])",CLUSTER_2,CLUSTER_0
Vs,"numpy.reshape(Vs,(Vs.shape[0]*Vs.shape[1],Vs.shape[2])",CLUSTER_2,CLUSTER_0
RHOB,"numpy.reshape(RHOB,(RHOB.shape[0]*RHOB.shape[1],RHOB.shape[2])",CLUSTER_2,CLUSTER_0
facies,"numpy.reshape(facies,(facies.shape[0]*facies.shape[1],facies.shape[2])",CLUSTER_2,CLUSTER_0
porosity,"numpy.reshape(porosity,(porosity.shape[0]*porosity.shape[1],porosity.shape[2])",CLUSTER_2,CLUSTER_0
vclay,"numpy.reshape(vclay,(vclay.shape[0]*vclay.shape[1],vclay.shape[2])",CLUSTER_2,CLUSTER_0
Sw,"numpy.reshape(Sw,(Sw.shape[0]*Sw.shape[1],Sw.shape[2])",CLUSTER_2,CLUSTER_0
angle,"numpy.reshape(theta,[1,ntheta])",CLUSTER_2,CLUSTER_0
seis_sample,"numpy.squeeze(seis[sample_number,:,0])",CLUSTER_2,CLUSTER_0
seis_reshaped,"numpy.swapaxes(seis,1,2)",CLUSTER_2,CLUSTER_0
seis,"numpy.transpose(np.reshape(seis11,[-1,ntheta,nt])",CLUSTER_2,CLUSTER_0
t,"numpy.linspace(-T,T,n)",CLUSTER_2,CLUSTER_0
"Vp_time[i,:]","numpy.interp(time_upscaled,time[i,:],Vp[i,:])",CLUSTER_2,CLUSTER_0
"Vs_time[i,:]","numpy.interp(time_upscaled,time[i,:],Vs[i,:])",CLUSTER_2,CLUSTER_0
"RHOB_time[i,:]","numpy.interp(time_upscaled,time[i,:],RHOB[i,:])",CLUSTER_2,CLUSTER_0
X_train,"numpy.expand_dims(X_train,axis=3)",CLUSTER_2,CLUSTER_0
X_test,"numpy.expand_dims(X_test,axis=3)",CLUSTER_2,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(seis_reshaped_normalized,
emodel,test_size=0.2,random_state=1)",CLUSTER_2,CLUSTER_0
survival,"pandas.concat([dead],axis=1,keys=['Percentage'])",CLUSTER_8,CLUSTER_4
survival_wrt_class,"pandas.concat([class_sur,class_dead,class_tot,survival_wrt_class],axis=1,keys=['SurvivalCount','DeathCount','TotalCount','Percentage'])",CLUSTER_8,CLUSTER_4
survival_wrt_sex,"pandas.concat([sex_sur,sex_dead,sex_tot,survival_wrt_sex],axis=1,keys=['SurvivalCount','DeathCount','TotalCount','Percentage'])",CLUSTER_8,CLUSTER_4
sex_class_survival_rate,"pandas.concat([sex_class_survival,sex_class_dead,total_sex_class_count,sex_class_survival_rate],axis=1,keys=['SurvivalCount','DeathCount','TotalCount','Percentage'])",CLUSTER_8,CLUSTER_4
survival_wrt_age,"pandas.concat([age_sur,age_dead,age_tot,survival_wrt_age],axis=1,keys=['SurvivalCount','DeathCount','TotalCount','Percentage'])",CLUSTER_8,CLUSTER_4
survival_female_child,"pandas.concat([chi_fem_sur,chi_fem_dead,chi_fem_tot,survival_female_child],axis=1,keys=['SurvivalCount','DeathCount','TotalCount','Percentage'])",CLUSTER_8,CLUSTER_4
survival_wrt_family_size,"pandas.concat([family_sur,family_dead,family_tot,survival_wrt_family_size],axis=1,keys=['SurvivalCount','DeathCount','TotalCount','Percentage'])",CLUSTER_8,CLUSTER_4
titanic_df,pandas.read_csv('titanic_data.csv'),CLUSTER_8,CLUSTER_4
miarray,"numpy.array([
[1,2,3,5,7],
[4,3,2,1,0],
[12,43,32,54,98]
])",CLUSTER_8,CLUSTER_3
a1,"numpy.array([1,2,3])",CLUSTER_8,CLUSTER_3
a2,"numpy.array([1,2,3])",CLUSTER_8,CLUSTER_3
arr,"numpy.array([True,False,False,True])",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame([
[1,2,3,5,7],
[4,3,2,1,0],
[12,43,32,54,98]
])",CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(d),CLUSTER_8,CLUSTER_3
df1,"pandas.DataFrame(data,
columns=list('ABCD')",CLUSTER_8,CLUSTER_3
dfC,"pandas.DataFrame({'ID':[100,200,300,400],'Calidad':['Buena','Media','Mala','Regular']})",CLUSTER_8,CLUSTER_3
df4,pandas.DataFrame({'a':np.random.randn(1000),CLUSTER_8,CLUSTER_3
df5,"pandas.DataFrame(np.random.rand(50,4)",CLUSTER_8,CLUSTER_3
miserie,"pandas.Series([1,2,3])",CLUSTER_8,CLUSTER_3
s,"pandas.Series([1,2,np.nan,4])",CLUSTER_8,CLUSTER_3
dfAll,"pandas.concat([dfPersonas,dfMasPersonas])",CLUSTER_8,CLUSTER_3
index,"pandas.date_range('20130101',periods=40,freq='D')",CLUSTER_8,CLUSTER_3
cbDF,pandas.read_clipboard(),CLUSTER_8,CLUSTER_3
dfPersonas,"pandas.read_csv('data/Personas.csv',parse_dates=['FNac'])",CLUSTER_8,CLUSTER_3
dfMasPersonas,"pandas.read_csv('data/MasPersonas.csv',parse_dates=['FNac'])",CLUSTER_8,CLUSTER_3
movies,pandas.read_csv('http://bit.ly/imdbratings'),CLUSTER_8,CLUSTER_3
dfFNA,"pandas.read_csv('data/MasPersonas.csv',parse_dates=['FNac'])",CLUSTER_8,CLUSTER_3
df1,"pandas.read_csv(""http://pythonhow.com/data/income_data.csv"")",CLUSTER_8,CLUSTER_3
movies,"pandas.read_csv('http://bit.ly/imdbratings',dtype={'genre':'category'})",CLUSTER_8,CLUSTER_3
movies,pandas.read_csv('http://bit.ly/imdbratings'),CLUSTER_8,CLUSTER_3
movies,pandas.read_csv('http://bit.ly/imdbratings'),CLUSTER_8,CLUSTER_3
dfP,"pandas.read_excel('data/Personas.xlsx',sheet_name='Hoja1')",CLUSTER_8,CLUSTER_3
df.Col3,pandas.to_datetime(df.Col3),CLUSTER_8,CLUSTER_3
img_pred,numpy.squeeze(img_pred),CLUSTER_4,CLUSTER_0
binary,numpy.vectorize(binary),CLUSTER_4,CLUSTER_0
img_pred,"numpy.expand_dims(img_pred,axis=0)",CLUSTER_4,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_0
mat,"sklearn.metrics.confusion_matrix(Y_test,Y_pred)",CLUSTER_4,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
mu,"numpy.array([2,4])",CLUSTER_1,CLUSTER_10
sig,"numpy.array([[1,0],[0,4]])",CLUSTER_1,CLUSTER_10
y,"numpy.zeros(shape=(n,rep)",CLUSTER_1,CLUSTER_10
z,numpy.zeros(rep),CLUSTER_1,CLUSTER_10
x,"numpy.dot(W,x)",CLUSTER_1,CLUSTER_10
y,"numpy.dot(W,x)",CLUSTER_1,CLUSTER_10
x,"numpy.reshape(x,(n,1)",CLUSTER_1,CLUSTER_10
Y,numpy.exp(Y),CLUSTER_1,CLUSTER_10
y,numpy.sin(x),CLUSTER_1,CLUSTER_10
x,"numpy.linspace(start=-10,stop=10,num=n)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(start=-3,stop=3,num=n)",CLUSTER_1,CLUSTER_10
x,"numpy.insert(x,0,e,axis=1)",CLUSTER_1,CLUSTER_10
X,"numpy.insert(X,0,e,axis=1)",CLUSTER_1,CLUSTER_10
accu,new_IDs[i[0]]==numpy.asarray(y_pred[i[0]]),CLUSTER_4,CLUSTER_0
normalized_images,numpy.zeros((len(gray_images),CLUSTER_4,CLUSTER_0
y_pred,"numpy.zeros(num_examples,dtype=np.int32)",CLUSTER_4,CLUSTER_0
y_pred,"numpy.zeros((num_examples,top_k)",CLUSTER_4,CLUSTER_0
y_prob,"numpy.zeros((num_examples,top_k)",CLUSTER_4,CLUSTER_0
"hist,bins","numpy.histogram(dataset,bins=n_classes)",CLUSTER_4,CLUSTER_0
"_,axes","matplotlib.pyplot.subplots(nrows=nrows,ncols=ncols)",CLUSTER_4,CLUSTER_0
samples,"numpy.array(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p'])",CLUSTER_3,CLUSTER_6
labels,"numpy.array([0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1])",CLUSTER_3,CLUSTER_6
ints,"numpy.array([0,1,2,3,4,5])",CLUSTER_3,CLUSTER_6
data,"numpy.array([
	[0,0,0,0,14],
	[0,2,6,4,2],
	[0,0,3,5,6],
	[0,3,9,2,0],
	[2,2,8,1,1],
	[7,7,0,0,0],
	[3,2,6,3,0],
	[2,5,3,2,2],
	[6,5,2,1,0],
	[0,2,2,3,7]
])",CLUSTER_3,CLUSTER_6
df,"pandas.read_csv('../../data/wiki_machine_learning.csv',sep='')",CLUSTER_9,CLUSTER_11
df.date,pandas.to_datetime(df.date),CLUSTER_9,CLUSTER_11
json_1,json.load(f),CLUSTER_10,CLUSTER_12
called,pandas.read_csv(url),CLUSTER_8,CLUSTER_4
called.index,"pandas.to_datetime(called.index,infer_datetime_format=True)",CLUSTER_8,CLUSTER_4
r,numpy.exp(-(X**2),CLUSTER_7,CLUSTER_9
xfit,"numpy.linspace(-1,3.5)",CLUSTER_7,CLUSTER_9
xfit,"numpy.linspace(-1,3.5)",CLUSTER_7,CLUSTER_9
x,"numpy.linspace(xlim[0],xlim[1],30)",CLUSTER_7,CLUSTER_9
y,"numpy.linspace(ylim[0],ylim[1],30)",CLUSTER_7,CLUSTER_9
xy,numpy.vstack([X.ravel(),CLUSTER_7,CLUSTER_9
"Y,X","numpy.meshgrid(y,x)",CLUSTER_7,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
ax,matplotlib.pyplot.subplot(projection='3d'),CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(3,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(4,6)",CLUSTER_7,CLUSTER_9
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_7,CLUSTER_9
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_7,CLUSTER_9
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_7,CLUSTER_9
clf,"sklearn.svm.SVC(kernel='rbf',C=1E6)",CLUSTER_7,CLUSTER_9
model,"sklearn.svm.SVC(kernel='linear',C=C)",CLUSTER_7,CLUSTER_9
svc,"sklearn.svm.SVC(kernel='rbf',class_weight='balanced')",CLUSTER_7,CLUSTER_9
faces,sklearn.datasets.fetch_lfw_people(min_faces_per_person=60),CLUSTER_7,CLUSTER_9
model,"sklearn.pipeline.make_pipeline(pca,svc)",CLUSTER_7,CLUSTER_9
mat,"sklearn.metrics.confusion_matrix(ytest,yfit)",CLUSTER_7,CLUSTER_9
wine_reviews,"pandas.read_csv('winemag-data-130k-v2.csv',usecols=fields)",CLUSTER_7,CLUSTER_3
iris_data,pandas.read_csv('Iris(1),CLUSTER_7,CLUSTER_3
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_3
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_3
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x=""price"",y=""points"",data=wine_reviews)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x=""price"",y=""points"",hue=""country"",data=wine_reviews_filtradas)",CLUSTER_7,CLUSTER_3
data,"pandas.read_sql_query(query,mySql_connector)",CLUSTER_8,CLUSTER_4
messages,"pandas.read_csv('smsspamcollection/SMSSpamCollection',sep='\t',names=['label','message'])",CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer(analyzer=text_process)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=32)",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('totalLendsBTC.csv'),CLUSTER_8,CLUSTER_4
df2,pandas.read_csv('vwapHourlyBTCUSD.csv'),CLUSTER_8,CLUSTER_4
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
toronto_onehot,"pandas.get_dummies(toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
geocodes_df,pandas.read_csv('https://cocl.us/Geospatial_data'),CLUSTER_9,CLUSTER_2
data,"pandas.read_html(url,header=0,flavor='bs4')",CLUSTER_9,CLUSTER_2
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
df['Neighbourhood'],"numpy.where(df['Neighbourhood']=='Notassigned',df['Borough'],df['Neighbourhood'])",CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
spId_url,requests.get('https://static.api.nexon.co.kr/fifaonline4/latest/spid.json'),CLUSTER_9,CLUSTER_2
spposition_url,requests.get('https://static.api.nexon.co.kr/fifaonline4/latest/spposition.json'),CLUSTER_9,CLUSTER_2
spId,pandas.DataFrame(spId_parsed_data),CLUSTER_9,CLUSTER_2
spposition,pandas.DataFrame(spposition_parsed_data),CLUSTER_9,CLUSTER_2
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_1
df,"pandas.DataFrame(iris.data,columns=iris.feature_names)",CLUSTER_12,CLUSTER_1
dtree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_1
a,"numpy.array([1,2,1])",CLUSTER_12,CLUSTER_1
b,"numpy.array([2,2,2])",CLUSTER_12,CLUSTER_1
c,"numpy.array([[1,2,1],
[1,2,3]])",CLUSTER_12,CLUSTER_1
d,"numpy.array([[1,1,1],
[2,2,2],
[3,3,3]])",CLUSTER_12,CLUSTER_1
theta,math.radians(two_theta/2),CLUSTER_10,CLUSTER_4
theta,math.radians(two_thetas[hkl]/2),CLUSTER_10,CLUSTER_4
s,math.sin(theta),CLUSTER_10,CLUSTER_4
slist,"re.split('\.',os.path.basename(fname)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(8,4)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(10,4)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
t_main,numpy.arange(len(x),CLUSTER_1,CLUSTER_9
t,numpy.arange(len(x),CLUSTER_1,CLUSTER_9
t2,numpy.arange(samples),CLUSTER_1,CLUSTER_9
stress_am,"numpy.arange(1,20,4)",CLUSTER_1,CLUSTER_9
syllable_am,"numpy.arange(2,20,4)",CLUSTER_1,CLUSTER_9
phoneme_am,"numpy.arange(3,20,4)",CLUSTER_1,CLUSTER_9
stress_am,"numpy.arange(1,20,4)",CLUSTER_1,CLUSTER_9
syllable_am,"numpy.arange(2,20,4)",CLUSTER_1,CLUSTER_9
phoneme_am,"numpy.arange(3,20,4)",CLUSTER_1,CLUSTER_9
E,numpy.array(energy_all),CLUSTER_1,CLUSTER_9
ss,numpy.array(X_ma),CLUSTER_1,CLUSTER_9
ss,numpy.array(X_ma),CLUSTER_1,CLUSTER_9
arr,numpy.array(final),CLUSTER_1,CLUSTER_9
band,numpy.asarray(band),CLUSTER_1,CLUSTER_9
band,numpy.asarray(band),CLUSTER_1,CLUSTER_9
band,numpy.asarray(band),CLUSTER_1,CLUSTER_9
E_mean,"numpy.mean(E_re,2)",CLUSTER_1,CLUSTER_9
s_mean,"numpy.mean(ss,0)",CLUSTER_1,CLUSTER_9
s,numpy.mean(np.array([X_ma[i]**2foriinrange(len(X_ma),CLUSTER_1,CLUSTER_9
s,numpy.mean(np.array([X_ma[i]**2foriinrange(len(X_ma),CLUSTER_1,CLUSTER_9
s_mean,"numpy.mean(ss,0)",CLUSTER_1,CLUSTER_9
s,numpy.mean(np.array([X_ma[i]**2foriinrange(len(X_ma),CLUSTER_1,CLUSTER_9
stressAm,"numpy.mean(ss,axis=1)",CLUSTER_1,CLUSTER_9
syllableAM,"numpy.mean(ss,axis=1)",CLUSTER_1,CLUSTER_9
phonemeAM,"numpy.mean(ss,axis=1)",CLUSTER_1,CLUSTER_9
idx_band,"numpy.logical_and(freqs>=low,freqs<=high)",CLUSTER_1,CLUSTER_9
idx_band,"numpy.logical_and(freqs>=low,freqs<=high)",CLUSTER_1,CLUSTER_9
idx_band,"numpy.logical_and(freqs>=low,freqs<=high)",CLUSTER_1,CLUSTER_9
x,"numpy.linspace(1,7,7)",CLUSTER_1,CLUSTER_9
y,"numpy.linspace(1,6,6)",CLUSTER_1,CLUSTER_9
x,"numpy.linspace(1,6,6)",CLUSTER_1,CLUSTER_9
y,"numpy.linspace(5,1,5)",CLUSTER_1,CLUSTER_9
f1,"numpy.hstack((out1,out2)",CLUSTER_1,CLUSTER_9
ss,"numpy.vstack((vec,vec2,vec3,vec4,vec5)",CLUSTER_1,CLUSTER_9
ss,"numpy.vstack((vec,vec2,vec3,vec4,vec5)",CLUSTER_1,CLUSTER_9
ss,"numpy.vstack((vec,vec2,vec3,vec4,vec5)",CLUSTER_1,CLUSTER_9
output2,"numpy.vstack((stressAm,syllableAM,phonemeAM)",CLUSTER_1,CLUSTER_9
ss,"numpy.vstack((vec,vec2,vec3,vec4,vec5)",CLUSTER_1,CLUSTER_9
ss2,"numpy.vstack((vec,vec2,vec3,vec4,vec5)",CLUSTER_1,CLUSTER_9
al1,numpy.angle(hilbert(s1),CLUSTER_1,CLUSTER_9
al2,numpy.angle(hilbert(s2),CLUSTER_1,CLUSTER_9
al3,numpy.angle(hilbert(s3),CLUSTER_1,CLUSTER_9
x,"numpy.average(X_ma,axis=0)",CLUSTER_1,CLUSTER_9
"T,F","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_9
"T,F","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,[low,high],btype='band')",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,low,btype='low')",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,[low,high],btype='band')",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,low,btype='low')",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,[low,high],btype='band')",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,low,btype='low')",CLUSTER_1,CLUSTER_9
y,"scipy.signal.lfilter(b,a,data)",CLUSTER_1,CLUSTER_9
y,"scipy.signal.lfilter(b,a,data)",CLUSTER_1,CLUSTER_9
z,"scipy.signal.lfilter(b,a,amplitude_envelope)",CLUSTER_1,CLUSTER_9
y,"scipy.signal.lfilter(b,a,data)",CLUSTER_1,CLUSTER_9
x,scipy.stats.zscore(x),CLUSTER_1,CLUSTER_9
analytic_signal,scipy.signal.hilbert(y),CLUSTER_1,CLUSTER_9
analytic_signal,scipy.signal.hilbert(x),CLUSTER_1,CLUSTER_9
analytic_signal,scipy.signal.hilbert(signal),CLUSTER_1,CLUSTER_9
analytic_signal,scipy.signal.hilbert(y),CLUSTER_1,CLUSTER_9
energy,"numpy.array([
sum(abs(x[i:i+frame_length]**2)",CLUSTER_1,CLUSTER_9
energy,"numpy.array([
sum(abs(x[i:i+frame_length]**2)",CLUSTER_1,CLUSTER_9
"freqs,psd","scipy.signal.welch(data,sf,window='hamming',nfft=512,scaling='density',average='mean')",CLUSTER_1,CLUSTER_9
"freqs,psd","scipy.signal.welch(data,sf,window='hamming',nfft=512,scaling='density',average='mean')",CLUSTER_1,CLUSTER_9
"freqs,psd","scipy.signal.welch(data,sf,window='hamming',nfft=512,scaling='density',average='mean')",CLUSTER_1,CLUSTER_9
bp,"scipy.integrate.simps(psd[idx_band],dx=freq_res)",CLUSTER_1,CLUSTER_9
bp/,"scipy.integrate.simps(psd,dx=freq_res)",CLUSTER_1,CLUSTER_9
bp,"scipy.integrate.simps(psd[idx_band],dx=freq_res)",CLUSTER_1,CLUSTER_9
bp/,"scipy.integrate.simps(psd,dx=freq_res)",CLUSTER_1,CLUSTER_9
bp,"scipy.integrate.simps(psd[idx_band],dx=freq_res)",CLUSTER_1,CLUSTER_9
bp/,"scipy.integrate.simps(psd,dx=freq_res)",CLUSTER_1,CLUSTER_9
"f,t,Zxx","scipy.signal.stft(ep,fs,window='hamming',nperseg=nperseg,noverlap=noverlap)",CLUSTER_1,CLUSTER_9
pd_data,"pandas.DataFrame(f1,columns=['stress_r_native','syllable','phoneme','stress_r_cn','syllable','phoneme'])",CLUSTER_1,CLUSTER_9
pd_data,"pandas.DataFrame(ss,columns=['uk_s1','uk_s2','uk_s3','uk_s4','uk_s5'])",CLUSTER_1,CLUSTER_9
df,"pandas.DataFrame(data.data,columns=data.feature_names)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df[data.feature_names],df['target'],random_state=0,test_size=0.25)",CLUSTER_5,CLUSTER_5
data,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_5
clf,"sklearn.tree.DecisionTreeClassifier(max_depth=2,random_state=0)",CLUSTER_5,CLUSTER_5
clf,"sklearn.tree.DecisionTreeClassifier(max_depth=depth,random_state=0)",CLUSTER_5,CLUSTER_5
results_gw_frozen_SL,json.load(f),CLUSTER_0,CLUSTER_9
results_gw_finetune_SL,json.load(f),CLUSTER_0,CLUSTER_9
results_vqa_frozen,json.load(f),CLUSTER_0,CLUSTER_9
train,json.load(f),CLUSTER_0,CLUSTER_9
test,json.load(f),CLUSTER_0,CLUSTER_9
val,json.load(f),CLUSTER_0,CLUSTER_9
instances_val,json.load(in_file),CLUSTER_0,CLUSTER_9
instances_train,json.load(in_file),CLUSTER_0,CLUSTER_9
instances_all,collections.defaultdict(list),CLUSTER_0,CLUSTER_9
category_lookup,collections.defaultdict(lambda:collections.defaultdict(str),CLUSTER_0,CLUSTER_9
instances,collections.defaultdict(set),CLUSTER_0,CLUSTER_9
captions_per_changeid,collections.defaultdict(),CLUSTER_0,CLUSTER_9
captions_per_compound_id,collections.defaultdict(),CLUSTER_0,CLUSTER_9
length2captions,collections.defaultdict(list),CLUSTER_0,CLUSTER_9
caption_lengths_accs,collections.defaultdict(list),CLUSTER_0,CLUSTER_9
foil_positions_per_caption,collections.defaultdict(list),CLUSTER_0,CLUSTER_9
foil_caption_rel_pos,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
foil_caption_abs_pos,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
absolute_acc,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
relative_acc,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
supercategory_captions,collections.defaultdict(list),CLUSTER_0,CLUSTER_9
supercat_acc,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
obj_frequencies,collections.defaultdict(int),CLUSTER_0,CLUSTER_9
target_obj_per_caption,collections.defaultdict(str),CLUSTER_0,CLUSTER_9
obj_acc,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
target_sum,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
objs_in_image,collections.defaultdict(list),CLUSTER_0,CLUSTER_9
obj_count_acc,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
obj_norm,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
obj_area_acc,collections.defaultdict(float),CLUSTER_0,CLUSTER_9
df,"pandas.DataFrame(caption_len_distribution,columns=['captionlen'])",CLUSTER_0,CLUSTER_9
df,"pandas.DataFrame(rel_pos_distribution,columns=['relativepos'])",CLUSTER_0,CLUSTER_9
df,"pandas.DataFrame(abs_pos_distribution,columns=['absolutepos'])",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_acc,list_obj_freq)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_acc,list_obj_freq)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_acc,list_obj_freq)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"coef,p","scipy.stats.pearsonr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_acc,list_obj_freq)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_acc,list_obj_freq)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_acc,list_obj_freq)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
"r,p","scipy.stats.spearmanr(list_obj_counts,list_obj_accs)",CLUSTER_0,CLUSTER_9
df,pandas.DataFrame(),CLUSTER_8,CLUSTER_3
gender,"pandas.DataFrame(index=ids,data=gender,columns=['gender_female'])",CLUSTER_8,CLUSTER_3
timesheet,"pandas.DataFrame(index=multiindex,columns=['hours'])",CLUSTER_8,CLUSTER_3
incidents,"pandas.DataFrame(
index=np.repeat(ids,repeats=np.random.randint(low=0,high=50,size=len(ids)",CLUSTER_8,CLUSTER_3
patrol_duty,"pandas.DataFrame(index=ids,columns=['start_date','end_date'])",CLUSTER_8,CLUSTER_3
date_range,"pandas.date_range(start='2014-01-01',end='2017-01-01',freq='W')",CLUSTER_8,CLUSTER_3
ids,numpy.arange(n),CLUSTER_8,CLUSTER_3
timedelts,"numpy.array(list(map(lambdax:pd.Timedelta(x,'d')",CLUSTER_8,CLUSTER_3
timedelts,"numpy.array(list(map(lambdax:pd.Timedelta(x,'d')",CLUSTER_8,CLUSTER_3
index,"numpy.repeat(ids,repeats=np.random.randint(low=0,high=50,size=len(ids)",CLUSTER_8,CLUSTER_3
data,"pandas.read_csv('thanksgiving.csv',encoding='Latin-1')",CLUSTER_8,CLUSTER_4
row_sz,numpy.array(row_sz);col_sz=numpy.array(col_sz),CLUSTER_6,CLUSTER_11
a,"numpy.asarray(df.iloc[:,0])",CLUSTER_6,CLUSTER_11
self.image_arr,"numpy.asarray(df.iloc[:,0])",CLUSTER_6,CLUSTER_11
self.label_arr,"numpy.asarray(df.iloc[:,1])",CLUSTER_6,CLUSTER_11
probs,numpy.mean(np.exp(log_preds),CLUSTER_6,CLUSTER_11
df,"pandas.DataFrame(classes,columns=['name','label'])",CLUSTER_6,CLUSTER_11
df_label,pandas.DataFrame(labels),CLUSTER_6,CLUSTER_11
new_labels,pandas.DataFrame(df_label[0][df['label']]),CLUSTER_6,CLUSTER_11
img,matplotlib.pyplot.imread(pic),CLUSTER_6,CLUSTER_11
since,time.time(),CLUSTER_6,CLUSTER_11
time_elapsed,time.time(),CLUSTER_6,CLUSTER_11
class_annos,scipy.io.loadmat(PATH/'devkit/cars_meta.mat'),CLUSTER_6,CLUSTER_11
train_annos,scipy.io.loadmat(PATH/'devkit/cars_train_annos.mat'),CLUSTER_6,CLUSTER_11
people,"pandas.DataFrame(np.array([jack,rose])",CLUSTER_7,CLUSTER_1
titanic,"pandas.read_csv(""ressources/data/titanic-1309-rows-biostatvanderbilt.csv"")",CLUSTER_7,CLUSTER_1
graph,"seaborn.catplot(x=""sex_is_male"",y=""survived"",hue=""pclass"",kind=""bar"",palette=""muted"",data=exploratory)",CLUSTER_7,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=67)",CLUSTER_7,CLUSTER_1
tr,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_1
dot_data,"sklearn.tree.export_graphviz(tr,out_file=None)",CLUSTER_7,CLUSTER_1
dot_file,"sklearn.tree.export_graphviz(tr,out_file=None,feature_names=X.columns,
class_names='Survived',filled=True,rounded=True)",CLUSTER_7,CLUSTER_1
self.num_boxes,"random.randrange(1,16)",CLUSTER_3,CLUSTER_10
x,"random.randrange(0,max_x)",CLUSTER_3,CLUSTER_10
y,"random.randrange(0,max_y)",CLUSTER_3,CLUSTER_10
"X_labeled[""Cluster""]",pandas.Categorical(labels),CLUSTER_7,CLUSTER_8
"X_labeled[""Anomaly""]",pandas.Categorical(labels),CLUSTER_7,CLUSTER_8
"X_labeled[""Cluster""]",pandas.Categorical(labels),CLUSTER_7,CLUSTER_8
X,"pandas.DataFrame(world_data[[""LIFE_LADDER"",""GDP_PER_PERSON"",""LIFE_EXPECTANCY"",""SOCIAL_SUPPORT""]])",CLUSTER_7,CLUSTER_8
cluster_data,"pandas.DataFrame(X_labeled.groupby(by=""Cluster"")",CLUSTER_7,CLUSTER_8
X,"pandas.DataFrame(world_data[[""LIFE_LADDER"",""GDP_PER_PERSON"",""SOCIAL_SUPPORT"",""SOCIAL_SUPPORT""]])",CLUSTER_7,CLUSTER_8
X,"pandas.DataFrame(world_data[[""LIFE_LADDER"",""GDP_PER_PERSON"",""LIFE_EXPECTANCY"",""FREEDOM_CHOICES"",""GENEROSITY"",""CORRUPTION"",""SOCIAL_SUPPORT""]])",CLUSTER_7,CLUSTER_8
cluster_data,"pandas.DataFrame(X_labeled.groupby(by=""Cluster"")",CLUSTER_7,CLUSTER_8
raw_data,"pandas.read_excel('Data.xlsx',sheet_name='Sheet1')",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(7,3,figsize=(18,30)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,1,figsize=(16,4)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(4,1,figsize=(16,24)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=num_clust,init=init_algo,n_init=5)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=num_clust,
init=init_algo,
n_init=20)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=num_clust,
init=init_algo,
n_init=20)",CLUSTER_7,CLUSTER_8
db,"sklearn.cluster.DBSCAN(eps=6,min_samples=6)",CLUSTER_7,CLUSTER_8
lof,"sklearn.neighbors.LocalOutlierFactor(n_neighbors=num_neighbors,contamination=cont_fraction)",CLUSTER_7,CLUSTER_8
x,numpy.arange(len(result1[1]),CLUSTER_3,CLUSTER_10
spins,numpy.array([]),CLUSTER_3,CLUSTER_10
spins,numpy.array([string_to_spin(e.rstrip(),CLUSTER_3,CLUSTER_10
j,"numpy.zeros((n,2)",CLUSTER_3,CLUSTER_10
h,numpy.zeros(n),CLUSTER_3,CLUSTER_10
h_new,numpy.zeros_like(h),CLUSTER_3,CLUSTER_10
hamiltonian+,"numpy.dot(h,spins)",CLUSTER_3,CLUSTER_10
h_new,numpy.copy(h),CLUSTER_3,CLUSTER_10
j_new,numpy.copy(j),CLUSTER_3,CLUSTER_10
j_new,numpy.copy(j),CLUSTER_3,CLUSTER_10
numerator,numpy.linalg.norm(flat_matrix(j),CLUSTER_3,CLUSTER_10
denominator,numpy.linalg.norm(flat_matrix(jp),CLUSTER_3,CLUSTER_10
output+,"math.log(1+data[mu,i]*math.tanh(float(h[i])",CLUSTER_3,CLUSTER_10
ax,matplotlib.pyplot.axes(),CLUSTER_3,CLUSTER_10
ax,matplotlib.pyplot.axes(),CLUSTER_3,CLUSTER_10
df,pandas.DataFrame(list(data),CLUSTER_9,CLUSTER_12
outer_salary,re.compile(self.salary_pattern),CLUSTER_9,CLUSTER_12
outer_salary,re.compile(self.salary_pattern),CLUSTER_9,CLUSTER_12
re_pattern_count,"re.compile(r""\s.*?(\d+\+)",CLUSTER_9,CLUSTER_12
re_pattern_label,"re.compile(r""\s.*?(jour|jours|heur|heurs|mois|an)",CLUSTER_9,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_9,CLUSTER_12
scaled_df,"pandas.DataFrame(scaled_df,columns=columns,index=Time)",CLUSTER_0,CLUSTER_0
stock_buy_df,"pandas.DataFrame(stocknums,index=['Day'+str(d)",CLUSTER_0,CLUSTER_0
stock_buy_df,"pandas.DataFrame(stocknums,index=['Day'+str(d)",CLUSTER_0,CLUSTER_0
asset_df,pandas.DataFrame(stock_buy_df['asset'].append(finaldays),CLUSTER_0,CLUSTER_0
finaldays,"pandas.Series([total+leftover]*5,index=index)",CLUSTER_0,CLUSTER_0
df,pandas.read_csv(fname),CLUSTER_0,CLUSTER_0
y_train,numpy.array(y_train),CLUSTER_0,CLUSTER_0
y_test,numpy.array(y_test),CLUSTER_0,CLUSTER_0
y_test,numpy.array(y_test),CLUSTER_0,CLUSTER_0
y_train,numpy.array(y_train),CLUSTER_0,CLUSTER_0
y_test,numpy.array(y_test),CLUSTER_0,CLUSTER_0
y_test,numpy.array(y_test),CLUSTER_0,CLUSTER_0
Sharpe_ratio,numpy.sqrt(252),CLUSTER_0,CLUSTER_0
stock_name,"re.findall(r'SH\d{6}',fname)",CLUSTER_0,CLUSTER_0
stock,re.findall(r'-(SH\d{6}),CLUSTER_0,CLUSTER_0
stock,re.findall(r'-(SH\d{6}),CLUSTER_0,CLUSTER_0
prev_days,collections.deque(maxlen=window),CLUSTER_0,CLUSTER_0
holdings,collections.deque(),CLUSTER_0,CLUSTER_0
holdings,collections.deque(),CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(-1.5,1)",CLUSTER_0,CLUSTER_0
f1_scores[stock],"sklearn.metrics.f1_score(y_test,ypred)",CLUSTER_0,CLUSTER_0
f1_scores[stock],"sklearn.metrics.f1_score(y_test,ypred)",CLUSTER_0,CLUSTER_0
stocks_model,ml_stocks_predictions(model=sklearn.ensemble.RandomForestClassifier(),CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(ncols=3,nrows=2,figsize=(12,14)",CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(ncols=3,nrows=2,figsize=(12,14)",CLUSTER_0,CLUSTER_0
index,"random.randint(0,len(X_train)",CLUSTER_0,CLUSTER_0
signnames,pandas.read_csv('./signnames.csv'),CLUSTER_0,CLUSTER_0
indexes,numpy.arange(len(labels),CLUSTER_0,CLUSTER_0
external_labels,"numpy.array([1,40,35,15,37,18])",CLUSTER_0,CLUSTER_0
traffic_signs,numpy.array(traffic_signs),CLUSTER_0,CLUSTER_0
X_train_Y,"numpy.empty(shape=(X_train.shape[0],X_train.shape[1],X_train.shape[2],1)",CLUSTER_0,CLUSTER_0
X_test_Y,"numpy.empty(shape=(X_test.shape[0],X_test.shape[1],X_test.shape[2],1)",CLUSTER_0,CLUSTER_0
X_valid_Y,"numpy.empty(shape=(X_valid.shape[0],X_valid.shape[1],X_valid.shape[2],1)",CLUSTER_0,CLUSTER_0
traffic_signs_test,"numpy.empty(shape=(traffic_signs.shape[0],traffic_signs.shape[1],traffic_signs.shape[2],1)",CLUSTER_0,CLUSTER_0
top5k,numpy.argsort(row),CLUSTER_0,CLUSTER_0
top5p,numpy.sort(row),CLUSTER_0,CLUSTER_0
predicted_proba,numpy.vstack(predict(traffic_signs_test),CLUSTER_0,CLUSTER_0
X_train_Y,"numpy.append(X_train_Y,np.expand_dims(agumented_img,axis=0)",CLUSTER_0,CLUSTER_0
y_train,"numpy.append(y_train,np.expand_dims(y_train[idx],axis=0)",CLUSTER_0,CLUSTER_0
class_counts,collections.Counter(y_train),CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-10,10,20)",CLUSTER_1,CLUSTER_10
df2,pandas.DataFrame(c),CLUSTER_8,CLUSTER_4
test,"pandas.concat(d,axis=1)",CLUSTER_8,CLUSTER_4
hs,"numpy.arange(0,15,bw)",CLUSTER_7,CLUSTER_8
P,"numpy.array(raw_data_stack[['x','y','val']])",CLUSTER_7,CLUSTER_8
arr,"numpy.zeros((res,res)",CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
sqr_diff,pandas.DataFrame(np.asarray(sqr_diff),CLUSTER_7,CLUSTER_8
raw_data_stack,pandas.DataFrame(arr),CLUSTER_7,CLUSTER_8
raw_dist,pandas.DataFrame(squareform(pdist(raw_data_stack),CLUSTER_7,CLUSTER_8
sqr_diff_stack,pandas.DataFrame(sqr_diff),CLUSTER_7,CLUSTER_8
raw_dist_stack,pandas.DataFrame(raw_dist),CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(data,index=[1,2,3,'A'])",CLUSTER_7,CLUSTER_8
dist,"pandas.DataFrame(squareform(pdist(df.loc[[1,2,3],['x','y']])",CLUSTER_7,CLUSTER_8
col1s,"pandas.DataFrame({'L':[1,1,1]},index=[1,2,3])",CLUSTER_7,CLUSTER_8
A_inv,pandas.DataFrame(np.linalg.pinv(A),CLUSTER_7,CLUSTER_8
data,"pandas.DataFrame(squareform(pdist(df[['x','y']])",CLUSTER_7,CLUSTER_8
Adist,pandas.DataFrame({'A':data}),CLUSTER_7,CLUSTER_8
w,"pandas.DataFrame(np.dot(A_inv,b)",CLUSTER_7,CLUSTER_8
row1s,"pandas.Series([1,1,1,0],index=[1,2,3,'L'],name='L')",CLUSTER_7,CLUSTER_8
all_semi_data,"pandas.concat([raw_data_stack['val'],raw_dist_stack['Dist'],sqr_diff_stack['Sq_Diff']],axis=1)",CLUSTER_7,CLUSTER_8
A,"pandas.concat([A,col1s],axis=1)",CLUSTER_7,CLUSTER_8
all_semi_data['Dist_Bin'],"pandas.cut(all_semi_data['Dist'],bins=range(-1,res+4,2)",CLUSTER_7,CLUSTER_8
text,"numpy.array(""Doyouwantsomecafé?"".split()",CLUSTER_4,CLUSTER_0
theta_numpy,numpy.linalg.inv(X.T.dot(X),CLUSTER_4,CLUSTER_0
housing,sklearn.datasets.fetch_california_housing(),CLUSTER_4,CLUSTER_0
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
now,datetime.datetime.utcnow(),CLUSTER_4,CLUSTER_0
now,datetime.datetime.utcnow(),CLUSTER_4,CLUSTER_0
now,datetime.datetime.utcnow(),CLUSTER_4,CLUSTER_0
"X_moons,y_moons","sklearn.datasets.make_moons(m,noise=0.1,random_state=42)",CLUSTER_4,CLUSTER_0
learning_rate,"scipy.stats.reciprocal(0.0001,0.1)",CLUSTER_4,CLUSTER_0
x,numpy.array(trainX),CLUSTER_5,CLUSTER_10
y,numpy.array(trainY),CLUSTER_5,CLUSTER_10
testx,numpy.array(testX),CLUSTER_5,CLUSTER_10
testy,numpy.array(testY),CLUSTER_5,CLUSTER_10
xp,"numpy.linspace(0,7,100)",CLUSTER_5,CLUSTER_10
xp,"numpy.linspace(0,7,100)",CLUSTER_5,CLUSTER_10
p4,"numpy.poly1d(np.polyfit(x,y,8)",CLUSTER_5,CLUSTER_10
p4,"numpy.poly1d(np.polyfit(x,y,4)",CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.axes(),CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.axes(),CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.axes(),CLUSTER_5,CLUSTER_10
axes,matplotlib.pyplot.axes(),CLUSTER_5,CLUSTER_10
r2,"sklearn.metrics.r2_score(testy,p4(testx)",CLUSTER_5,CLUSTER_10
r2,sklearn.metrics.r2_score(np.array(trainY),CLUSTER_5,CLUSTER_10
r2,"sklearn.metrics.r2_score(testy,p4(testx)",CLUSTER_5,CLUSTER_10
r2,sklearn.metrics.r2_score(np.array(trainY),CLUSTER_5,CLUSTER_10
t,"numpy.linspace(0,tmax,n)",CLUSTER_1,CLUSTER_9
y,"scipy.integrate.odeint(myModel,y0,t)",CLUSTER_1,CLUSTER_9
rewards,numpy.zeros(101),CLUSTER_1,CLUSTER_10
V,numpy.zeros(101),CLUSTER_1,CLUSTER_10
A,numpy.zeros(101),CLUSTER_1,CLUSTER_10
policy,numpy.zeros(100),CLUSTER_1,CLUSTER_10
best_action,numpy.argmax(A),CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.subplot(),CLUSTER_7,CLUSTER_8
df_class,"pandas.DataFrame([survived_class,dead_class])",CLUSTER_7,CLUSTER_8
df_sex,"pandas.DataFrame([Survived,Died])",CLUSTER_7,CLUSTER_8
df_embark,"pandas.DataFrame([survived_embark,dead_embark])",CLUSTER_7,CLUSTER_8
"X.iloc[:,1]",pandas.DataFrame(got),CLUSTER_7,CLUSTER_8
submission,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
X,"pandas.concat([X,Embarked],axis=1)",CLUSTER_7,CLUSTER_8
Embarked,"pandas.get_dummies(X.Embarked,prefix='Embarked')",CLUSTER_7,CLUSTER_8
dataset,"pandas.read_csv(""../input/train.csv"")",CLUSTER_7,CLUSTER_8
X_test,"pandas.read_csv(""../input/test.csv"")",CLUSTER_7,CLUSTER_8
labelEncoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
lr_classifier,"sklearn.linear_model.LogisticRegression(penalty='l2',random_state=0)",CLUSTER_7,CLUSTER_8
accuracies,"sklearn.model_selection.cross_val_score(estimator=lr_classifier,X=X,y=y,cv=10)",CLUSTER_7,CLUSTER_8
accuracies,"sklearn.model_selection.cross_val_score(estimator=classifier,X=X,y=y,cv=10)",CLUSTER_7,CLUSTER_8
accuracies,"sklearn.model_selection.cross_val_score(estimator=svm_classifier,X=X,y=y,cv=10)",CLUSTER_7,CLUSTER_8
accuracies,"sklearn.model_selection.cross_val_score(estimator=nb_classifier,X=X,y=y,cv=10)",CLUSTER_7,CLUSTER_8
accuracies,"sklearn.model_selection.cross_val_score(estimator=rnd_classifier,X=X,y=y,cv=10)",CLUSTER_7,CLUSTER_8
classifier,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=9,metric='minkowski',p=2)",CLUSTER_7,CLUSTER_8
svm_classifier,"sklearn.svm.SVC(kernel='rbf',random_state=0)",CLUSTER_7,CLUSTER_8
nb_classifier,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
rnd_classifier,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,criterion='entropy',random_state=0)",CLUSTER_7,CLUSTER_8
new_thrust,"random.gauss(450.,25.)",CLUSTER_3,CLUSTER_3
init_pose,"numpy.array([0.,0.,10.,0.,0.,0.])",CLUSTER_3,CLUSTER_3
init_velocities,"numpy.array([0.,0.,0.])",CLUSTER_3,CLUSTER_3
init_angle_velocities,"numpy.array([0.,0.,0.])",CLUSTER_3,CLUSTER_3
target_pos,"numpy.array([0.,0.,10.])",CLUSTER_3,CLUSTER_3
init_pose,"numpy.array([0.,0.,0.,0.,0.,0.])",CLUSTER_3,CLUSTER_3
target_pos,"numpy.array([0.,0.,20.])",CLUSTER_3,CLUSTER_3
"eps,rews",numpy.array(rewards_list),CLUSTER_3,CLUSTER_3
"eps,rews",numpy.array(rewards_list),CLUSTER_3,CLUSTER_3
cumsum,"numpy.cumsum(np.insert(x,0,0)",CLUSTER_3,CLUSTER_3
cumsum,"numpy.cumsum(np.insert(x,0,0)",CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
imgplot,matplotlib.pyplot.imshow(image.array_to_img(batch[0]),CLUSTER_2,CLUSTER_11
mnist,sklearn.datasets.fetch_openml('mnist_784'),CLUSTER_5,CLUSTER_10
mlp,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=50),CLUSTER_5,CLUSTER_10
mlp2,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(50,50)",CLUSTER_5,CLUSTER_10
mlp10,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=tuple([50]*10),CLUSTER_5,CLUSTER_10
mlp20,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=tuple([50]*20),CLUSTER_5,CLUSTER_10
mlp50,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=tuple([50]*50),CLUSTER_5,CLUSTER_10
mlp100,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=tuple([50]*100),CLUSTER_5,CLUSTER_10
mlp_B50,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple1),CLUSTER_5,CLUSTER_10
mlp_B20,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20ad,"sklearn.neural_network.MLPClassifier(solver='adam',hidden_layer_sizes=(tuple2)",CLUSTER_5,CLUSTER_10
mlp_20lb,"sklearn.neural_network.MLPClassifier(solver='lbfgs',hidden_layer_sizes=(tuple2)",CLUSTER_5,CLUSTER_10
mlp_20sgd,"sklearn.neural_network.MLPClassifier(solver='sgd',hidden_layer_sizes=(tuple2)",CLUSTER_5,CLUSTER_10
mlp_20id,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20log,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20tan,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20relu,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20_1,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20_2,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20_3,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20_4,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20_5,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_20_6,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
mlp_best,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(tuple2),CLUSTER_5,CLUSTER_10
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(mnist.data,mnist.target,train_size=0.7)",CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
sec_avant,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
temp,time.time(),CLUSTER_5,CLUSTER_10
time_best,time.time(),CLUSTER_5,CLUSTER_10
d,"numpy.arange(start=10,stop=20,step=2)",CLUSTER_3,CLUSTER_6
f,"numpy.arange(start=0,stop=1,step=0.3,dtype=float)",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3,4])",CLUSTER_3,CLUSTER_6
b,"numpy.array([1,2,3,4,5],dtype=float)",CLUSTER_3,CLUSTER_6
c,"numpy.array([True,False,True],dtype=bool)",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
b,"numpy.array([6,5,4])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,-3])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,-3])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,-3])",CLUSTER_3,CLUSTER_6
b,"numpy.array([-4,3,8])",CLUSTER_3,CLUSTER_6
a,"numpy.array([6,3,-5])",CLUSTER_3,CLUSTER_6
b,"numpy.array([-1,0,7])",CLUSTER_3,CLUSTER_6
d,"numpy.array([3,0,8,9,-10])",CLUSTER_3,CLUSTER_6
a,"numpy.array([6,3,-5])",CLUSTER_3,CLUSTER_6
b,"numpy.array([-1,0,7])",CLUSTER_3,CLUSTER_6
a,"numpy.array([0,5,-1])",CLUSTER_3,CLUSTER_6
b,"numpy.array([-4,9,3])",CLUSTER_3,CLUSTER_6
cos_angle,"numpy.dot(a,b)",CLUSTER_3,CLUSTER_6
ser,pandas.Series(randn(6),CLUSTER_8,CLUSTER_3
dframe2,pandas.DataFrame(np.arange(16),CLUSTER_8,CLUSTER_3
q_dict,collections.defaultdict(set),CLUSTER_0,CLUSTER_1
R,numpy.sum(shared_weights),CLUSTER_0,CLUSTER_1
R,numpy.sum(shared_weights),CLUSTER_0,CLUSTER_1
X,pandas.DataFrame(),CLUSTER_0,CLUSTER_1
train_qs,pandas.Series(df_train['question1'].tolist(),CLUSTER_0,CLUSTER_1
tfidf_txt,pandas.Series(train['question1'].tolist(),CLUSTER_0,CLUSTER_1
ques,"pandas.concat([df_train[['question1','question2']],\
df_test[['question1','question2']]],axis=0)",CLUSTER_0,CLUSTER_1
X_train,"pandas.concat((X_train,X_train_ab,train_leaky)",CLUSTER_0,CLUSTER_1
x_test,"pandas.concat((x_test,x_test_ab,test_leaky)",CLUSTER_0,CLUSTER_1
X_train,"pandas.concat((X_train,trn_features)",CLUSTER_0,CLUSTER_1
X_test,"pandas.concat((X_test,tst_features)",CLUSTER_0,CLUSTER_1
df_train,"pandas.read_csv('train_features.csv',encoding=""ISO-8859-1"")",CLUSTER_0,CLUSTER_1
df_train,pandas.read_csv('train.csv'),CLUSTER_0,CLUSTER_1
df_test,pandas.read_csv('test.csv'),CLUSTER_0,CLUSTER_1
df_test,"pandas.read_csv('test_features.csv',encoding=""ISO-8859-1"")",CLUSTER_0,CLUSTER_1
df_test,pandas.read_csv('test.csv'),CLUSTER_0,CLUSTER_1
trn_features,pandas.read_csv('X_train.csv'),CLUSTER_0,CLUSTER_1
train,pandas.read_csv('train.csv'),CLUSTER_0,CLUSTER_1
test,pandas.read_csv('test.csv'),CLUSTER_0,CLUSTER_1
X_train,pandas.read_csv('X_train.csv'),CLUSTER_0,CLUSTER_1
X_test,pandas.read_csv('X_test.csv'),CLUSTER_0,CLUSTER_1
counts,collections.Counter(words),CLUSTER_0,CLUSTER_1
train,pandas.read_csv('nlp_features_train.csv'),CLUSTER_0,CLUSTER_8
test,pandas.read_csv('nlp_features_test.csv'),CLUSTER_0,CLUSTER_8
cv,pandas.read_csv('nlp_features_cv.csv'),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
predicted_y,"numpy.zeros((test_len,2)",CLUSTER_0,CLUSTER_8
predicted_y,"numpy.argmax(predicted_y,axis=1)",CLUSTER_0,CLUSTER_8
predicted_y,"numpy.argmax(predict_y,axis=1)",CLUSTER_0,CLUSTER_8
predicted_y,"numpy.argmax(predict_y,axis=1)",CLUSTER_0,CLUSTER_8
predicted_y,"numpy.argmax(predict_y,axis=1)",CLUSTER_0,CLUSTER_8
C,"sklearn.metrics.confusion_matrix(test_y,predict_y)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha,penalty='l2',loss='log',random_state=43)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=best_alpha,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha,penalty='l1',loss='hinge',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=best_alpha,penalty='l2',loss='hinge',random_state=42)",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method='sigmoid')",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(xgb_clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,shuffle=True,random_state=1001)",CLUSTER_0,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(
clf,
param_distributions=params,
n_iter=5,
scoring='neg_log_loss',
n_jobs=-1,
cv=skf.split(X_train,y_train)",CLUSTER_0,CLUSTER_8
X_train,scipy.sparse.hstack(train_data),CLUSTER_0,CLUSTER_8
X_test,scipy.sparse.hstack(test_data),CLUSTER_0,CLUSTER_8
X_cv,scipy.sparse.hstack(cv_data),CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(C,annot=True,cmap=cmap,fmt="".3f"",xticklabels=labels,yticklabels=labels,annot_kws={""fontsize"":15})",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(B,annot=True,cmap=cmap,fmt="".3f"",xticklabels=labels,yticklabels=labels,annot_kws={""fontsize"":15})",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(A,annot=True,cmap=cmap,fmt="".3f"",xticklabels=labels,yticklabels=labels,annot_kws={""fontsize"":15})",CLUSTER_0,CLUSTER_8
cmap,"seaborn.light_palette(""blue"")",CLUSTER_0,CLUSTER_8
df,pandas.read_csv('../../assets/datasets/imdb_p6_sample.csv'),CLUSTER_5,CLUSTER_5
X['year'],sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
dt,sklearn.tree.DecisionTreeRegressor(),CLUSTER_5,CLUSTER_5
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
ab,sklearn.ensemble.AdaBoostRegressor(),CLUSTER_5,CLUSTER_5
gb,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_5,CLUSTER_5
user_book_matrix,"numpy.concatenate(user_book_matrix,axis=0)",CLUSTER_5,CLUSTER_1
user_book_matrix,"numpy.array_split(user_book_matrix,num_batches)",CLUSTER_5,CLUSTER_1
rating_scaled,"pandas.DataFrame(scaler.fit_transform(combined['Book-Rating'].values.reshape(-1,1)",CLUSTER_5,CLUSTER_1
pred_data,pandas.DataFrame(),CLUSTER_5,CLUSTER_1
book_rating,"pandas.merge(rating,book,on='ISBN')",CLUSTER_5,CLUSTER_1
user_rating,"pandas.merge(rating_count,book_rating,left_on='Book-Title',right_on='Book-Title',how='left')",CLUSTER_5,CLUSTER_1
rating,"pandas.read_csv('data/BX-Book-Ratings.csv',sep=';',error_bad_lines=False,encoding=""latin-1"")",CLUSTER_5,CLUSTER_1
user,"pandas.read_csv('data/BX-Users.csv',sep=';',error_bad_lines=False,encoding=""latin-1"")",CLUSTER_5,CLUSTER_1
book,"pandas.read_csv('data/BX-Books.csv',sep=';',error_bad_lines=False,encoding=""latin-1"")",CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
y,"numpy.array([3.,0.,5.,-2.,1.])",CLUSTER_1,CLUSTER_9
Y,"numpy.array([3.,0.,5.,-2.,-3.])",CLUSTER_1,CLUSTER_9
x,"numpy.array([3.,0.,5.,-2.,-2.])",CLUSTER_1,CLUSTER_9
an_array,numpy.array(data),CLUSTER_1,CLUSTER_9
vector,numpy.zeros(size**2),CLUSTER_1,CLUSTER_9
lijst,numpy.zeros(round((len(matrix),CLUSTER_1,CLUSTER_9
S,numpy.zeros(6*8),CLUSTER_1,CLUSTER_9
count_occupation,numpy.zeros(len(x),CLUSTER_1,CLUSTER_9
average_cluster_size,numpy.zeros(len(x),CLUSTER_1,CLUSTER_9
var_p,"numpy.linspace(0.1,0.5,10)",CLUSTER_1,CLUSTER_9
U,numpy.copy(matrix),CLUSTER_1,CLUSTER_9
cluster_sizes,numpy.copy(cluster_sizes_without_largest_one),CLUSTER_1,CLUSTER_9
var_p,"numpy.append(var_p,np.linspace(0.51,0.65,num=30)",CLUSTER_1,CLUSTER_9
var_p,"numpy.append(var_p,np.linspace(0.66,0.99,num=10)",CLUSTER_1,CLUSTER_9
toc,time.time(),CLUSTER_1,CLUSTER_9
tic,time.time(),CLUSTER_1,CLUSTER_9
toc,time.time(),CLUSTER_1,CLUSTER_9
tic,time.time(),CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(func,(var_beta-P_c)",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(func,(xdata)",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(func,xdata_tau,ydata_tau)",CLUSTER_1,CLUSTER_9
appearances,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
poses,pandas.DataFrame([[math.sqrt(r.pose[0]**2+r.pose[1]**2),CLUSTER_8,CLUSTER_4
y_test,numpy.asarray(y_test),CLUSTER_4,CLUSTER_0
y_pred,"numpy.argmax(y_pred_nn_output,axis=1)",CLUSTER_4,CLUSTER_0
wrong_mean,numpy.mean(y_wrong_nn_output),CLUSTER_4,CLUSTER_0
correct_mean,numpy.mean(y_correct_nn_output),CLUSTER_4,CLUSTER_0
sorted_correct,numpy.sort(y_correct_nn_output),CLUSTER_4,CLUSTER_0
sorted_wrong,numpy.sort(y_wrong_nn_output),CLUSTER_4,CLUSTER_0
y_correctly_masked_nn_output,"numpy.ma.array(np.amax(y_pred_nn_output,axis=1)",CLUSTER_4,CLUSTER_0
y_wrongfully_masked_nn_output,"numpy.ma.array(np.amax(y_pred_nn_output,axis=1)",CLUSTER_4,CLUSTER_0
"fpr_keras,tpr_keras,thresholds_keras","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_4,CLUSTER_0
allVac,"pandas.concat([BCG,DTP1,DTP3,HEPB3,HEPBB,HIB3,IPV1,MCV1,MCV2,PCV3,RCV1,ROTAC,YFV])",CLUSTER_8,CLUSTER_3
BCG,"pandas.read_csv('CSVs/vaccinations/BCG.csv',index_col=0)",CLUSTER_8,CLUSTER_3
DTP1,"pandas.read_csv('CSVs/vaccinations/DTP1.csv',index_col=0)",CLUSTER_8,CLUSTER_3
DTP3,"pandas.read_csv('CSVs/vaccinations/DTP3.csv',index_col=0)",CLUSTER_8,CLUSTER_3
HEPB3,"pandas.read_csv('CSVs/vaccinations/HEPB3.csv',index_col=0)",CLUSTER_8,CLUSTER_3
HEPBB,"pandas.read_csv('CSVs/vaccinations/HEPBB.csv',index_col=0)",CLUSTER_8,CLUSTER_3
HIB3,"pandas.read_csv('CSVs/vaccinations/HIB3.csv',index_col=0)",CLUSTER_8,CLUSTER_3
IPV1,"pandas.read_csv('CSVs/vaccinations/IPV1.csv',index_col=0)",CLUSTER_8,CLUSTER_3
MCV1,"pandas.read_csv('CSVs/vaccinations/MCV1.csv',index_col=0)",CLUSTER_8,CLUSTER_3
MCV2,"pandas.read_csv('CSVs/vaccinations/MCV2.csv',index_col=0)",CLUSTER_8,CLUSTER_3
PCV3,"pandas.read_csv('CSVs/vaccinations/PCV3.csv',index_col=0)",CLUSTER_8,CLUSTER_3
RCV1,"pandas.read_csv('CSVs/vaccinations/RCV1.csv',index_col=0)",CLUSTER_8,CLUSTER_3
ROTAC,"pandas.read_csv('CSVs/vaccinations/ROTAC.csv',index_col=0)",CLUSTER_8,CLUSTER_3
YFV,"pandas.read_csv('CSVs/vaccinations/YFV.csv',index_col=0)",CLUSTER_8,CLUSTER_3
coeffecients,"pandas.DataFrame(lm.coef_,X.columns)",CLUSTER_7,CLUSTER_5
customers,"pandas.read_csv(""EcommerceCustomers"")",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
meanPrice,numpy.mean([b.closeforbinbars]),CLUSTER_11,CLUSTER_3
stDev,"numpy.std(a=[b.closeforbinbars],ddof=0)",CLUSTER_11,CLUSTER_3
df1,"pandas.DataFrame(ts,columns=cols)",CLUSTER_11,CLUSTER_3
df_cboe,"pandas.read_excel(dls,header=12,
usecols=[0,2,3])",CLUSTER_11,CLUSTER_3
df_snp,"pandas.read_html(snpurl,header=0)",CLUSTER_11,CLUSTER_3
margin,pandas.to_numeric([w.initMarginChangeforwinwhatif]),CLUSTER_11,CLUSTER_3
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_9
targets,"numpy.array(targets_list,ndmin=2)",CLUSTER_1,CLUSTER_9
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_9
targets,numpy.zeros(output_nodes),CLUSTER_1,CLUSTER_9
hidden_inputs,"numpy.dot(self.wih,inputs)",CLUSTER_1,CLUSTER_9
final_inputs,"numpy.dot(self.who,hidden_outputs)",CLUSTER_1,CLUSTER_9
hidden_errors,"numpy.dot(self.who.T,output_errors)",CLUSTER_1,CLUSTER_9
hidden_inputs,"numpy.dot(self.wih,inputs)",CLUSTER_1,CLUSTER_9
final_inputs,"numpy.dot(self.who,hidden_outputs)",CLUSTER_1,CLUSTER_9
label,numpy.argmax(outputs),CLUSTER_1,CLUSTER_9
record,"numpy.append(label,img_data)",CLUSTER_1,CLUSTER_9
LagoonData,"numpy.full(bands_data.shape,np.nan,np.float)",CLUSTER_4,CLUSTER_11
"np.savez_compressed('../../CompressedData/SRXData',Ratios","SRX,FocusIndex=numpy.full((rows,cols)",CLUSTER_4,CLUSTER_11
"data[Band[i2],Band[i]]","numpy.divide(LagoonData[:,:,i2],LagoonData[:,:,i])",CLUSTER_4,CLUSTER_11
"LagoonData[ClassifyIndex,:]","numpy.log(n*LagoonData[ClassifyIndex,:])",CLUSTER_4,CLUSTER_11
SRX,"numpy.stack(RX,axis=2)",CLUSTER_4,CLUSTER_11
bands_data,numpy.dstack(bands_data),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(3,2,figsize=(20,10)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(3,2,figsize=(20,10)",CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_7
elapsed,time.time(),CLUSTER_4,CLUSTER_7
img,"numpy.array(img,dtype=np.uint8)",CLUSTER_4,CLUSTER_7
RED_MASK,numpy.array(PIL.Image.fromarray(np.load('data/stop_red_mask.npy'),CLUSTER_4,CLUSTER_7
WHITE_MASK,numpy.array(PIL.Image.fromarray(np.load('data/stop_white_mask.npy'),CLUSTER_4,CLUSTER_7
rot_matrix,"numpy.array(
[[math.cos(-rot)",CLUSTER_4,CLUSTER_7
patch_transformations,"numpy.zeros((model.batch_size_,8)",CLUSTER_4,CLUSTER_7
bg_imgs,"numpy.concatenate([noisy_imgs,white_imgs])",CLUSTER_4,CLUSTER_7
target_labels,numpy.zeros_like(scores),CLUSTER_4,CLUSTER_7
white_imgs,"numpy.ones((model.batch_size_/2,psize,psize,3)",CLUSTER_4,CLUSTER_7
"x_origin_shifted,y_origin_shifted","numpy.matmul(
xform_matrix,
np.array([x_origin,y_origin])",CLUSTER_4,CLUSTER_7
classes,"numpy.argmax(scores[:,:,1:],axis=2)",CLUSTER_4,CLUSTER_7
sorted_classes,"numpy.argsort(scores[:,1:],axis=1)",CLUSTER_4,CLUSTER_7
a,numpy.uint8(a),CLUSTER_4,CLUSTER_7
obj,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_6
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_6
inputs,numpy.asarray(inputs),CLUSTER_5,CLUSTER_6
targets,numpy.asarray(targets),CLUSTER_5,CLUSTER_6
acc,"sklearn.metrics.accuracy_score(ya,yp)",CLUSTER_5,CLUSTER_6
tmp,os.listdir(IMG_PATH),CLUSTER_4,CLUSTER_0
tmp2,os.listdir(IMG_PATH+d),CLUSTER_4,CLUSTER_0
tmp,os.listdir(IMG_PATH),CLUSTER_4,CLUSTER_0
tmp2,os.listdir(IMG_PATH+d),CLUSTER_4,CLUSTER_0
train,"numpy.array(train,np.float32)",CLUSTER_4,CLUSTER_0
test,"numpy.array(test,np.float32)",CLUSTER_4,CLUSTER_0
train_cls,"numpy.array(train_cls,np.int32)",CLUSTER_4,CLUSTER_0
test_cls,"numpy.array(test_cls,np.int32)",CLUSTER_4,CLUSTER_0
df_indicator,"pandas.read_csv('../data/population_data.csv',skiprows=4)",CLUSTER_8,CLUSTER_4
df_projects,"pandas.read_csv('../data/projects_data.csv',dtype=str)",CLUSTER_8,CLUSTER_4
df_projects['totalamt'],"pandas.to_numeric(df_projects['totalamt'].str.replace(',',"""")",CLUSTER_8,CLUSTER_4
bin_values,"numpy.arange(start=0,stop=n_limit,step=10)",CLUSTER_0,CLUSTER_2
bin_values,"numpy.arange(start=0,stop=50,step=1)",CLUSTER_0,CLUSTER_2
col,"numpy.where(r2c['guests']>10,'r','b')",CLUSTER_0,CLUSTER_2
col2,"numpy.where(full_dataset['guests']>10,'r','b')",CLUSTER_0,CLUSTER_2
"counts,bin_edges","numpy.histogram(x,bins=bin_values)",CLUSTER_0,CLUSTER_2
prop_type_table_1,pandas.DataFrame(nsw_extract['property_type'].unique(),CLUSTER_0,CLUSTER_2
council_1,pandas.DataFrame(geodata['council'].unique(),CLUSTER_0,CLUSTER_2
suburb_1,pandas.DataFrame(geodata['suburb'].unique(),CLUSTER_0,CLUSTER_2
book_1,pandas.read_csv('/Users/taj/GitHub/scraping/stayz_analysis/orange_large_month_summary.csv'),CLUSTER_0,CLUSTER_2
mth_book_1,pandas.read_csv('/Users/taj/GitHub/scraping/stayz_analysis/monthly_bookings.csv'),CLUSTER_0,CLUSTER_2
feat_1,pandas.read_csv('/Users/taj/GitHub/scraping/stayz/WebData/nsw_features/stayz_nsw_features_'+date_str+'.csv'),CLUSTER_0,CLUSTER_2
nsw_extract_1,pandas.read_json('/Users/taj/GitHub/scraping/stayz/WebData/nsw_extract/stayz_nsw_extract_'+date_str+'.json'),CLUSTER_0,CLUSTER_2
geodata_1,pandas.read_json('/Users/taj/GitHub/scraping/stayz/WebData/nsw_geocoded/stayz_geocoded_full.json'),CLUSTER_0,CLUSTER_2
cal_1,pandas.read_json('/Users/taj/GitHub/scraping/stayz/WebData/nsw_calendar/stayz_calendar_'+date_str+'.json'),CLUSTER_0,CLUSTER_2
calb_1,pandas.read_json('/Users/taj/GitHub/scraping/stayz/WebData/nsw_calendar/stayz_calendar_'+date_str+'.json'),CLUSTER_0,CLUSTER_2
date_str,datetime.datetime.now(),CLUSTER_0,CLUSTER_2
tt2,"re.sub('ui-state-disabled','',tt1)",CLUSTER_0,CLUSTER_2
f1,"matplotlib.pyplot.figure(num=None,figsize=(30,10)",CLUSTER_0,CLUSTER_2
f1,"matplotlib.pyplot.figure(num=None,figsize=(30,10)",CLUSTER_0,CLUSTER_2
frame1,matplotlib.pyplot.gca(),CLUSTER_0,CLUSTER_2
"fig,ax","matplotlib.pyplot.subplots(figsize=(size,size)",CLUSTER_0,CLUSTER_2
current,random.choice(list(g.nodes),CLUSTER_1,CLUSTER_9
current,random.choice(list(g.neighbors(current),CLUSTER_1,CLUSTER_9
current,random.choice(list(g.nodes),CLUSTER_1,CLUSTER_9
data,"sklearn.datasets.fetch_20newsgroups(subset='all',shuffle=True,
remove=('headers','footers','quotes')",CLUSTER_0,CLUSTER_5
scores_df,"pandas.DataFrame(columns=['train_accuracy','test_accuracy','fit_time'])",CLUSTER_0,CLUSTER_5
data_df,pandas.read_csv('clean_newsgroups.csv'),CLUSTER_0,CLUSTER_5
"train_corpus,test_corpus,train_label_nums,test_label_nums,train_label_names,test_label_names","sklearn.model_selection.train_test_split(
np.array(data_df['CleanArticle'])",CLUSTER_0,CLUSTER_5
scores,"sklearn.model_selection.cross_validate(model,tv_train_features,train_label_names,
scoring=('accuracy')",CLUSTER_0,CLUSTER_5
mnb,sklearn.naive_bayes.MultinomialNB(alpha=1),CLUSTER_0,CLUSTER_5
lr,"sklearn.linear_model.LogisticRegression(penalty='l2',max_iter=100,C=1,random_state=42)",CLUSTER_0,CLUSTER_5
svm,"sklearn.svm.LinearSVC(penalty='l2',C=1,random_state=42)",CLUSTER_0,CLUSTER_5
svm_sgd,"sklearn.linear_model.SGDClassifier(loss='hinge',penalty=""l2"",max_iter=5,random_state=42)",CLUSTER_0,CLUSTER_5
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=10,random_state=42)",CLUSTER_0,CLUSTER_5
gbc,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=10,random_state=42)",CLUSTER_0,CLUSTER_5
df,"pandas.read_csv('datasets/onlineretail.csv',header=0,encoding='unicode_escape')",CLUSTER_8,CLUSTER_4
df['InvoiceDate'],"pandas.to_datetime(df['InvoiceDate'],format='%d/%m/%Y%H:%M')",CLUSTER_8,CLUSTER_4
item_dict,collections.defaultdict(int),CLUSTER_8,CLUSTER_4
output_dict,collections.defaultdict(str),CLUSTER_8,CLUSTER_4
"left,right,sup,conf","re.search(pattern=r'([0-9\,]+)",CLUSTER_8,CLUSTER_4
df,pandas.DataFrame(index=time_index),CLUSTER_8,CLUSTER_4
time_index,"pandas.date_range('01/01/2010',periods=5,freq='M')",CLUSTER_8,CLUSTER_4
data,"pandas.read_csv('clean_bmart.csv',sep=',')",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3)",CLUSTER_5,CLUSTER_5
ley,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
model,"sklearn.svm.SVC(kernel='linear',C=1)",CLUSTER_5,CLUSTER_5
mlp,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(5),CLUSTER_5,CLUSTER_5
posteriori[class_num],math.log(class_[class_num][1]),CLUSTER_3,CLUSTER_6
posteriori[class_num]+,math.log(training[class_num][row][col][int(test_image[row][col]),CLUSTER_3,CLUSTER_6
training,"numpy.zeros(shape=(10,int(28/n)",CLUSTER_3,CLUSTER_6
answer,numpy.zeros(1000),CLUSTER_3,CLUSTER_6
test_image,numpy.zeros(shape=(int(28/n),CLUSTER_3,CLUSTER_6
posteriori,numpy.zeros(10),CLUSTER_3,CLUSTER_6
conf_matrix,"numpy.zeros(shape=(10,10)",CLUSTER_3,CLUSTER_6
answer[i],numpy.argmax(posteriori),CLUSTER_3,CLUSTER_6
conf_matrix,"numpy.around(conf_matrix,2)",CLUSTER_3,CLUSTER_6
K_test,"numpy.array([[gauss_kernel(gamma,xm,xn)",CLUSTER_1,CLUSTER_10
beta,numpy.matmul(np.linalg.inv(lam*np.eye(len(X),CLUSTER_1,CLUSTER_10
E,"numpy.mean(np.sign(np.matmul(K,beta)",CLUSTER_1,CLUSTER_10
Ut_sum,numpy.sum(Ut),CLUSTER_1,CLUSTER_10
err,numpy.sum([Ut[i]*(gt_best(X_train[i]),CLUSTER_1,CLUSTER_10
train_data,numpy.loadtxt('hw2_adaboost_train.txt'),CLUSTER_1,CLUSTER_10
test_data,numpy.loadtxt('hw2_adaboost_test.txt'),CLUSTER_1,CLUSTER_10
data,numpy.loadtxt('hw2_lssvm_all.txt'),CLUSTER_1,CLUSTER_10
response,requests.get(url),CLUSTER_10,CLUSTER_12
response,requests.get(url),CLUSTER_10,CLUSTER_12
x,"numpy.array([1,2,3])",CLUSTER_7,CLUSTER_3
df,pandas.DataFrame(Iris),CLUSTER_7,CLUSTER_3
Iris,pandas.read_csv('Iris.csv'),CLUSTER_7,CLUSTER_3
age_data['YEARS_BINNED'],"pandas.cut(age_data['YEARS_BIRTH'],bins=bin_cut)",CLUSTER_7,CLUSTER_8
app_train,pandas.read_csv(f_app),CLUSTER_7,CLUSTER_8
since,time.time(),CLUSTER_6,CLUSTER_11
time_elapsed,time.time(),CLUSTER_6,CLUSTER_11
train_frame,pandas.read_csv('./data/train.csv'),CLUSTER_6,CLUSTER_11
self.train_frame,pandas.read_csv(csv_file),CLUSTER_6,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_11
ax,"matplotlib.pyplot.subplot(1,4,i+1)",CLUSTER_6,CLUSTER_11
ax,"matplotlib.pyplot.subplot(num_images//2,2,images_so_far)",CLUSTER_6,CLUSTER_11
f,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_1,CLUSTER_10
action_data,"pandas.concat(action_data,ignore_index=True)",CLUSTER_8,CLUSTER_3
user_data,"pandas.merge(user_data,ad_backup2,on=""user_id"")",CLUSTER_8,CLUSTER_3
cleaned_action_data,"pandas.merge(action_data,ad_backup2,on=""user_id"")",CLUSTER_8,CLUSTER_3
product_data,"pandas.merge(product_data,comment_data,on=""sku_id"",how=""left"")",CLUSTER_8,CLUSTER_3
reader,"pandas.read_csv(f,iterator=True)",CLUSTER_8,CLUSTER_3
user_data,pandas.read_csv(user_file),CLUSTER_8,CLUSTER_3
product_data,pandas.read_csv(product_file),CLUSTER_8,CLUSTER_3
comment_data,pandas.read_csv(comment_file),CLUSTER_8,CLUSTER_3
behave_counter,"collections.Counter(group[""type""])",CLUSTER_8,CLUSTER_3
coefficients,numpy.array(initial_coefficients),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
score,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
derivative,"numpy.dot(errors,feature)",CLUSTER_1,CLUSTER_10
derivative,"numpy.dot(errors,feature)",CLUSTER_1,CLUSTER_10
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
lp,numpy.sum((indicator-1),CLUSTER_1,CLUSTER_10
apply_threshold,numpy.vectorize(lambdax:1.ifx>0else-1.),CLUSTER_1,CLUSTER_10
cmap_positive,matplotlib.pyplot.get_cmap('Reds'),CLUSTER_1,CLUSTER_10
cmap_negative,matplotlib.pyplot.get_cmap('Blues'),CLUSTER_1,CLUSTER_10
important_words,json.load(f),CLUSTER_1,CLUSTER_10
A,"numpy.zeros((m,n_H,n_W,n_C)",CLUSTER_1,CLUSTER_10
"A[i,h,w,c]",numpy.mean(a_prev_slice),CLUSTER_1,CLUSTER_10
X_pad,"numpy.pad(X,((0,0)",CLUSTER_1,CLUSTER_10
"fig,axarr","matplotlib.pyplot.subplots(1,2)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=[10,10])",CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
result,pandas.read_csv(path),CLUSTER_4,CLUSTER_11
index,numpy.arange(int(lgth/2),CLUSTER_4,CLUSTER_11
index,numpy.arange(int(lgth/2),CLUSTER_4,CLUSTER_11
fqy,"numpy.zeros([lgth,num_signal])",CLUSTER_4,CLUSTER_11
fqy,"numpy.zeros([lgth,num_signal])",CLUSTER_4,CLUSTER_11
f_data,"numpy.zeros([lgth,num_signal])",CLUSTER_4,CLUSTER_11
f_data,"numpy.zeros([lgth,num_signal])",CLUSTER_4,CLUSTER_11
f_data,"numpy.zeros([lgth,num_signal])",CLUSTER_4,CLUSTER_11
"f_data[:,idx]","scipy.signal.convolve(data.iloc[:,i],lpf,mode='same')",CLUSTER_4,CLUSTER_11
"f_data[:,i]","scipy.signal.convolve(data[:,i],lpf,mode='same')",CLUSTER_4,CLUSTER_11
lpf,"scipy.signal.firwin(f_size,cutoff,window='hamming')",CLUSTER_4,CLUSTER_11
lpf,"scipy.signal.firwin(f_size,cutoff,window='hamming')",CLUSTER_4,CLUSTER_11
"f_data[:,idx]","scipy.signal.medfilt(data.iloc[:,i],f_size)",CLUSTER_4,CLUSTER_11
directory,os.listdir(),CLUSTER_4,CLUSTER_11
host_idx,numpy.array(host_idx),CLUSTER_1,CLUSTER_9
logP,"numpy.log10(ceph.data[:,4])",CLUSTER_1,CLUSTER_9
like,"pm.Normal('likelihood',mu=mpred,sigma=numpy.sqrt(sig_int**2.+err**2)",CLUSTER_1,CLUSTER_9
res,"scipy.optimize.minimize(neg_log_like,(-2.,np.median(mobs)",CLUSTER_1,CLUSTER_9
citydata,"pandas.read_json(""geodata/cities.json"")",CLUSTER_8,CLUSTER_3
pts,numpy.asarray(shapes[idx].points),CLUSTER_8,CLUSTER_3
pts,"numpy.asarray(zip(a,b)",CLUSTER_8,CLUSTER_3
split_idx,numpy.where(d>.75),CLUSTER_8,CLUSTER_3
spl,numpy.where(d>1),CLUSTER_8,CLUSTER_3
d,numpy.sqrt(d),CLUSTER_8,CLUSTER_3
d,numpy.sqrt(d),CLUSTER_8,CLUSTER_3
a,numpy.append(np.cos(np.arange(100),CLUSTER_8,CLUSTER_3
b,numpy.append(np.sin(np.arange(100),CLUSTER_8,CLUSTER_3
"Fs,Qs",numpy.array(modes['Freq.(GHz),CLUSTER_12,CLUSTER_9
Fs_Hz,"numpy.array(Convert.toSI(Fs,'GHz')",CLUSTER_12,CLUSTER_9
"Fs,Qs",numpy.array(modes['Freq.(GHz),CLUSTER_12,CLUSTER_9
Fs_Hz,"numpy.array(Convert.toSI(Fs,'GHz')",CLUSTER_12,CLUSTER_9
f,matplotlib.pyplot.figure(figsize=figsize),CLUSTER_1,CLUSTER_9
ims,numpy.array(ims),CLUSTER_1,CLUSTER_9
image,numpy.expand_dims(ndimage.imread(image_path),CLUSTER_1,CLUSTER_9
raw_data,pandas.read_csv('../Bank-data.csv'),CLUSTER_7,CLUSTER_9
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
Z1,"numpy.dot(W1,X)",CLUSTER_5,CLUSTER_9
Z2,"numpy.dot(W2,A1)",CLUSTER_5,CLUSTER_9
Z3,"numpy.dot(W3,A2)",CLUSTER_5,CLUSTER_9
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_6
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=666)",CLUSTER_5,CLUSTER_6
knn_clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_5,CLUSTER_6
knn_clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_6
knn_clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=k,weights=method)",CLUSTER_5,CLUSTER_6
sk_knn_clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=4,weights=""distance"",p=1)",CLUSTER_5,CLUSTER_6
knn_clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=k,weights=""distance"",p=p)",CLUSTER_5,CLUSTER_6
start_time,time.time(),CLUSTER_6,CLUSTER_11
nhw_img,numpy.squeeze(nhwc_img.numpy(),CLUSTER_6,CLUSTER_11
nhwc_img,"numpy.transpose(features[0],axes=(1,2,0)",CLUSTER_6,CLUSTER_11
labels,os.listdir(train_audio_path),CLUSTER_4,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(14,8)",CLUSTER_4,CLUSTER_0
index,numpy.arange(len(labels),CLUSTER_4,CLUSTER_0
all_wave,numpy.array(all_wave),CLUSTER_4,CLUSTER_0
index,numpy.argmax(prob[0]),CLUSTER_4,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_0
"x_tr,x_val,y_tr,y_val",sklearn.model_selection.train_test_split(np.array(all_wave),CLUSTER_4,CLUSTER_0
index,"random.randint(0,len(x_val)",CLUSTER_4,CLUSTER_0
x,"numpy.array([[0,0],[0,1],[1,0],[1,1]])",CLUSTER_5,CLUSTER_5
y,"numpy.array([0,1,1,1])",CLUSTER_5,CLUSTER_5
deltaWeights,numpy.array([0]*training_inputs.shape[1]),CLUSTER_5,CLUSTER_5
training_inputs,"numpy.array([[0,0],[0,1],[1,0],[1,1]])",CLUSTER_5,CLUSTER_5
labels,"numpy.array([0,0,1,0])",CLUSTER_5,CLUSTER_5
labels,"numpy.array([0,1,0,0])",CLUSTER_5,CLUSTER_5
labels,"numpy.array([0,1,1,1])",CLUSTER_5,CLUSTER_5
input,"numpy.array([0,1])",CLUSTER_5,CLUSTER_5
train,"numpy.array([[0],[1]])",CLUSTER_5,CLUSTER_5
label,"numpy.array([1,0])",CLUSTER_5,CLUSTER_5
summation,"numpy.dot(self.weights[1:].T,inputs)",CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.Perceptron(),CLUSTER_5,CLUSTER_5
model1,sklearn.linear_model.Perceptron(2),CLUSTER_5,CLUSTER_5
model2,sklearn.linear_model.Perceptron(2),CLUSTER_5,CLUSTER_5
model3,sklearn.linear_model.Perceptron(2),CLUSTER_5,CLUSTER_5
model4,sklearn.linear_model.Perceptron(1),CLUSTER_5,CLUSTER_5
global_temp,pandas.read_csv('datasets/global_temperature.csv'),CLUSTER_1,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(10,4)",CLUSTER_6,CLUSTER_10
key_product_distribute,numpy.array(key_product_distribute),CLUSTER_4,CLUSTER_11
key_product_basic_info,"numpy.zeros([100,4])",CLUSTER_4,CLUSTER_11
key_product_distribute,"numpy.zeros([101,120])",CLUSTER_4,CLUSTER_11
delta_product,"numpy.zeros([100,119])",CLUSTER_4,CLUSTER_11
reduced_product_info,"numpy.zeros([100,2])",CLUSTER_4,CLUSTER_11
correlation_mat,"numpy.zeros([100,4])",CLUSTER_4,CLUSTER_11
train_data,numpy.zeros([len(train_set),CLUSTER_4,CLUSTER_11
train_label,numpy.zeros([len(train_label),CLUSTER_4,CLUSTER_11
valid_data,numpy.zeros([len(valid_set),CLUSTER_4,CLUSTER_11
valid_label,numpy.zeros([len(valid_set),CLUSTER_4,CLUSTER_11
train_data,numpy.zeros([len(train_set),CLUSTER_4,CLUSTER_11
train_label,numpy.zeros([len(train_label),CLUSTER_4,CLUSTER_11
valid_data,numpy.zeros([len(valid_set),CLUSTER_4,CLUSTER_11
valid_label,numpy.zeros([len(valid_set),CLUSTER_4,CLUSTER_11
key_product_distribute[100][i],"numpy.sum(key_product_distribute[:,i])",CLUSTER_4,CLUSTER_11
correlation_mat[i][3],numpy.sum(key_product_distribute[i][1:120]),CLUSTER_4,CLUSTER_11
buyer_file,numpy.loadtxt('buyer_basic_info.txt'),CLUSTER_4,CLUSTER_11
quantity_file,numpy.loadtxt('buyer_historical_category15_quantity.txt'),CLUSTER_4,CLUSTER_11
money_file,numpy.loadtxt('buyer_historical_category15_money.txt'),CLUSTER_4,CLUSTER_11
key_product,numpy.loadtxt('key_product_IDs.txt'),CLUSTER_4,CLUSTER_11
product_feature,numpy.loadtxt('product_features.txt'),CLUSTER_4,CLUSTER_11
trade_info,numpy.loadtxt('trade_info_training.txt'),CLUSTER_4,CLUSTER_11
product_distribute_set,numpy.loadtxt('product_distribution_training_set.txt'),CLUSTER_4,CLUSTER_11
key_product,numpy.loadtxt('key_product_distribute.txt'),CLUSTER_4,CLUSTER_11
product_info,numpy.loadtxt('reduced_product_info.txt'),CLUSTER_4,CLUSTER_11
key_product,numpy.loadtxt('key_product_distribute.txt'),CLUSTER_4,CLUSTER_11
product_info,numpy.loadtxt('reduced_product_info.txt'),CLUSTER_4,CLUSTER_11
product_info,json.load(f),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
orig,"matplotlib.pyplot.plot(timeseries,color='blue',label='Original')",CLUSTER_4,CLUSTER_11
mean,"matplotlib.pyplot.plot(rolmean,color='red',label='RollingMean')",CLUSTER_4,CLUSTER_11
std,"matplotlib.pyplot.plot(rolstd,color='black',label='RollingStd')",CLUSTER_4,CLUSTER_11
rolmean,pandas.Series(timeseries),CLUSTER_4,CLUSTER_11
rolstd,pandas.Series(timeseries),CLUSTER_4,CLUSTER_11
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_4,CLUSTER_11
data,"pandas.read_csv('key_product_distribute.txt',names=names,delim_whitespace=True,index_col='product_id')",CLUSTER_4,CLUSTER_11
rmse,"math.sqrt(mean_squared_error(inv_yHat,inv_y)",CLUSTER_5,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_5,CLUSTER_0
agg,"pandas.concat(cols,axis=1)",CLUSTER_5,CLUSTER_0
dataset,"pandas.read_csv(
'Machine_usage_groupby.csv')",CLUSTER_5,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_5,CLUSTER_0
data,"pandas.read_csv(""thanksgiving.csv"",encoding=""Latin-1"")",CLUSTER_8,CLUSTER_4
sub,"pandas.DataFrame({'serialnumber':test['serialnumber'],'cluster_number':pred})",CLUSTER_5,CLUSTER_1
dftrain,"pandas.get_dummies(dftrain,drop_first=True)",CLUSTER_5,CLUSTER_1
dftest,"pandas.get_dummies(test,drop_first=True)",CLUSTER_5,CLUSTER_1
train,pandas.read_csv('Yes_Bank_Train.csv'),CLUSTER_5,CLUSTER_1
test,pandas.read_csv('Yes_Bank_Test_int.csv'),CLUSTER_5,CLUSTER_1
sub,pandas.read_csv('sample_clusters.csv'),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=1994,shuffle=True)",CLUSTER_5,CLUSTER_1
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=400,max_features=20,max_depth=120,min_samples_split=3)",CLUSTER_5,CLUSTER_1
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(50,50,550,)",CLUSTER_5,CLUSTER_1
v[i+1],numpy.dot(np.transpose(w[i]),CLUSTER_3,CLUSTER_6
gw[i],"numpy.transpose(np.outer(g[i],v[i])",CLUSTER_3,CLUSTER_6
g[i],"numpy.multiply(np.dot(w[i+1],g[i+1])",CLUSTER_3,CLUSTER_6
f,numpy.vectorize(sigmoid),CLUSTER_3,CLUSTER_6
f,numpy.vectorize(sigmoid),CLUSTER_3,CLUSTER_6
df_lat,pandas.read_csv(csv_path),CLUSTER_9,CLUSTER_2
df,pandas.read_html(str(table),CLUSTER_9,CLUSTER_2
df['Neighbourhood'],"numpy.where(df['Neighbourhood']==""Notassigned"",df['Borough'],df['Neighbourhood'])",CLUSTER_9,CLUSTER_2
res,"requests.get(""https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M"")",CLUSTER_9,CLUSTER_2
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=TEST_SIZE,random_state=RANDOM_STATE)",CLUSTER_4,CLUSTER_0
samples,numpy.where(y_data==k),CLUSTER_4,CLUSTER_0
label,"numpy.argmax(y_data,axis=1)",CLUSTER_4,CLUSTER_0
ii,numpy.nonzero(y),CLUSTER_4,CLUSTER_0
y,numpy.bincount(y_data),CLUSTER_4,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(1,1,figsize=(12,4)",CLUSTER_4,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(5,8,figsize=(16,10)",CLUSTER_4,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(14,6)",CLUSTER_4,CLUSTER_0
g,"seaborn.countplot(y_data,order=classes)",CLUSTER_4,CLUSTER_0
X,"numpy.concatenate((Xtr,Xte)",CLUSTER_7,CLUSTER_8
Xtr,"numpy.concatenate((Xtrain,Xtest)",CLUSTER_7,CLUSTER_8
Xtr,"numpy.concatenate((Xtrain,Xtest)",CLUSTER_7,CLUSTER_8
P,numpy.zeros_like(X),CLUSTER_7,CLUSTER_8
mask,"numpy.ones(df.shape[0],dtype='int')",CLUSTER_7,CLUSTER_8
x,numpy.linspace(plt.xlim(),CLUSTER_7,CLUSTER_8
y,numpy.linspace(plt.ylim(),CLUSTER_7,CLUSTER_8
"xx,yy","numpy.meshgrid(np.linspace(x_min,x_max,100)",CLUSTER_7,CLUSTER_8
"Y,X","numpy.meshgrid(y,x)",CLUSTER_7,CLUSTER_8
cs2,"matplotlib.pyplot.contour(xx,yy,Z,cmap=ccolor,alpha=.6,axes=ax)",CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
dfhw,"pandas.read_csv(""https://dl.dropboxusercontent.com/u/75194/stats/data/01_heights_weights_genders.csv"")",CLUSTER_7,CLUSTER_8
"itrain,itest",sklearn.model_selection.train_test_split(xrange(df.shape[0]),CLUSTER_7,CLUSTER_8
clflog,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
clfsvm,"sklearn.svm.SVC(kernel=""linear"")",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(ytest,clf.predict_proba(xtest)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(ytest,clf.decision_function(xtest)",CLUSTER_7,CLUSTER_8
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_7,CLUSTER_8
cities_pd,"pandas.DataFrame(cities,columns=column_names)",CLUSTER_9,CLUSTER_2
"cities_pd[""MaxTemp""]","pandas.to_numeric(cities_pd[""MaxTemp""])",CLUSTER_9,CLUSTER_2
"cities_pd[""Lat""]","pandas.to_numeric(cities_pd[""Lat""])",CLUSTER_9,CLUSTER_2
"cities_pd[""Lng""]","pandas.to_numeric(cities_pd[""Lng""])",CLUSTER_9,CLUSTER_2
"cities_pd[""Cloudiness""]","pandas.to_numeric(cities_pd[""Cloudiness""])",CLUSTER_9,CLUSTER_2
"cities_pd[""Humidity""]","pandas.to_numeric(cities_pd[""Humidity""])",CLUSTER_9,CLUSTER_2
"cities_pd[""Windspeed""]","pandas.to_numeric(cities_pd[""Windspeed""])",CLUSTER_9,CLUSTER_2
clean,"re.sub(""[^a-zA-Z]"","""",raw)",CLUSTER_0,CLUSTER_5
tsne,"sklearn.manifold.TSNE(n_components=2,random_state=0)",CLUSTER_0,CLUSTER_5
points,"pandas.DataFrame(
[
(word,coords[0],coords[1])",CLUSTER_0,CLUSTER_5
df,"pandas.read_csv('CombinedData.csv',engine='python')",CLUSTER_0,CLUSTER_5
train_df,pandas.read_csv('data/train.csv'),CLUSTER_7,CLUSTER_8
test_df,pandas.read_csv('data/test.csv'),CLUSTER_7,CLUSTER_8
submission_binary,pandas.read_csv('data/sample_submission.csv'),CLUSTER_7,CLUSTER_8
test_label,pandas.read_csv('data/test_labels.csv'),CLUSTER_7,CLUSTER_8
submission_chains,pandas.read_csv('data/sample_submission.csv'),CLUSTER_7,CLUSTER_8
submission_combined,pandas.read_csv('data/sample_submission.csv'),CLUSTER_7,CLUSTER_8
text,"re.sub(r""what's"",""whatis"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""\'s"","""",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""\'ve"",""have"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""can't"",""cannot"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""n't"",""not"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""i'm"",""iam"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""\'d"",""would"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""\'ll"",""will"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""\'scuse"",""excuse"",text)",CLUSTER_7,CLUSTER_8
text,"re.sub('\W','',text)",CLUSTER_7,CLUSTER_8
text,"re.sub('\s+','',text)",CLUSTER_7,CLUSTER_8
logreg,sklearn.linear_model.LogisticRegression(C=12.0),CLUSTER_7,CLUSTER_8
dataset,pandas.read_csv('Wine.csv'),CLUSTER_5,CLUSTER_5
"X1,X2","numpy.meshgrid(np.arange(start=X_set[:,0].min()",CLUSTER_5,CLUSTER_5
"X1,X2","numpy.meshgrid(np.arange(start=X_set[:,0].min()",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=0)",CLUSTER_5,CLUSTER_5
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_5,CLUSTER_5
classifier,sklearn.linear_model.LogisticRegression(random_state=0),CLUSTER_5,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_5,CLUSTER_5
out_np,numpy.clip(torch_to_np(out),CLUSTER_6,CLUSTER_11
d,numpy.sqrt((i-imsize//2),CLUSTER_6,CLUSTER_11
corresp,json.load(f),CLUSTER_6,CLUSTER_11
TestModels,pandas.DataFrame(),CLUSTER_11,CLUSTER_1
data,"pandas.concat((data,weekType)",CLUSTER_11,CLUSTER_1
data,"pandas.concat((data,day_of_week)",CLUSTER_11,CLUSTER_1
weekType,"pandas.get_dummies(data['weekType'],prefix='weekType')",CLUSTER_11,CLUSTER_1
day_of_week,"pandas.get_dummies(data['day_of_week'],prefix='day_of_week')",CLUSTER_11,CLUSTER_1
data,"pandas.read_csv('energydata_Transformation.csv',parse_dates=['date'])",CLUSTER_11,CLUSTER_1
"y_true,y_pred",numpy.array(y_true),CLUSTER_11,CLUSTER_1
tmp['RMSE_Test'],"numpy.sqrt(mean_squared_error(y_test,predictions)",CLUSTER_11,CLUSTER_1
tmp['RMSE_Train'],"numpy.sqrt(mean_squared_error(y_train,predictions_trn)",CLUSTER_11,CLUSTER_1
rmse,"numpy.sqrt(mean_squared_error(test_labels,predictions)",CLUSTER_11,CLUSTER_1
sel_model,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_11,CLUSTER_1
base_model,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_11,CLUSTER_1
sel_model,sklearn.ensemble.RandomForestRegressor(),CLUSTER_11,CLUSTER_1
random_search,"sklearn.model_selection.RandomizedSearchCV(sel_model,param_grid,n_iter=20,scoring=""r2"",cv=5,n_jobs=-1,verbose=2,random_state=42)",CLUSTER_11,CLUSTER_1
tmp['MAE_Test'],"sklearn.metrics.mean_absolute_error(y_test,predictions)",CLUSTER_11,CLUSTER_1
tmp['MAE_Train'],"sklearn.metrics.mean_absolute_error(y_train,predictions_trn)",CLUSTER_11,CLUSTER_1
mae,"sklearn.metrics.mean_absolute_error(test_labels,predictions)",CLUSTER_11,CLUSTER_1
tmp['MSE_Test'],"sklearn.metrics.mean_squared_error(y_test,predictions)",CLUSTER_11,CLUSTER_1
tmp['MSE_Train'],"sklearn.metrics.mean_squared_error(y_train,predictions_trn)",CLUSTER_11,CLUSTER_1
tmp['R2_Test'],"sklearn.metrics.r2_score(y_test,predictions)",CLUSTER_11,CLUSTER_1
tmp['R2_Train'],"sklearn.metrics.r2_score(y_train,predictions_trn)",CLUSTER_11,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_11,CLUSTER_1
ridgeReg,"sklearn.linear_model.Ridge(alpha=0.05,normalize=True)",CLUSTER_11,CLUSTER_1
LassoReg,"sklearn.linear_model.Lasso(alpha=0.005,normalize=True)",CLUSTER_11,CLUSTER_1
ElasticNetReg,"sklearn.linear_model.ElasticNet(alpha=0.001,normalize=True)",CLUSTER_11,CLUSTER_1
expected_next_h,"numpy.asarray([
[0.24635157,0.28610883,0.32240467,0.35525807,0.38474904],
[0.49223563,0.55611431,0.61507696,0.66844003,0.7159181],
[0.56735664,0.66310127,0.74419266,0.80889665,0.858299]])",CLUSTER_1,CLUSTER_10
expected_next_c,"numpy.asarray([
[0.32986176,0.39145139,0.451556,0.51014116,0.56717407],
[0.66382255,0.76674007,0.87195994,0.97902709,1.08751345],
[0.74192008,0.90592151,1.07717006,1.25120233,1.42395676]])",CLUSTER_1,CLUSTER_10
expected_h,"numpy.asarray([
[[0.01764008,0.01823233,0.01882671,0.0194232],
[0.11287491,0.12146228,0.13018446,0.13902939],
[0.31358768,0.33338627,0.35304453,0.37250975]],
[[0.45767879,0.4761092,0.4936887,0.51041945],
[0.6704845,0.69350089,0.71486014,0.7346449],
[0.81733511,0.83677871,0.85403753,0.86935314]]])",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,1.2,num=N*D)",CLUSTER_1,CLUSTER_10
prev_h,"numpy.linspace(-0.3,0.7,num=N*H)",CLUSTER_1,CLUSTER_10
prev_c,"numpy.linspace(-0.4,0.9,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-2.1,1.3,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.7,2.2,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.3,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,0.6,num=N*T*D)",CLUSTER_1,CLUSTER_10
h0,"numpy.linspace(-0.4,0.8,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-0.2,0.9,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.3,0.6,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.2,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
model.params[k],"numpy.linspace(-1.4,1.3,num=v.size)",CLUSTER_1,CLUSTER_10
features,"numpy.linspace(-0.5,1.7,num=N*D)",CLUSTER_1,CLUSTER_10
start_time,time.time(),CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_3,CLUSTER_6
k_neighbors_classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=10),CLUSTER_3,CLUSTER_6
train_data,sklearn.preprocessing.scale(train_data),CLUSTER_3,CLUSTER_6
test_data,sklearn.preprocessing.scale(test_data),CLUSTER_3,CLUSTER_6
df,pandas.read_json(DATA),CLUSTER_4,CLUSTER_11
path_to_images,os.getcwd(),CLUSTER_4,CLUSTER_11
data,"pandas.read_csv(""academy_awards.csv"",encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_4
Labels,json.load(f),CLUSTER_10,CLUSTER_4
file_to_graph,json.load(file),CLUSTER_10,CLUSTER_4
all_the_nodes,json.load(data),CLUSTER_10,CLUSTER_4
relations_to_be_created,json.load(rel),CLUSTER_10,CLUSTER_4
X,"numpy.array([[3.,5.,8.],[4.,12.,15.]])",CLUSTER_3,CLUSTER_6
weights,"numpy.array([1.,4.,1.])",CLUSTER_3,CLUSTER_6
initial_weights,numpy.zeros(3),CLUSTER_3,CLUSTER_6
norms,"numpy.linalg.norm(X,axis=0)",CLUSTER_3,CLUSTER_6
new_word,"re.sub(r'[^\w\s]','',word)",CLUSTER_10,CLUSTER_4
x_final,pandas.DataFrame(),CLUSTER_11,CLUSTER_11
t_temp,pandas.DataFrame(),CLUSTER_11,CLUSTER_11
l,"pandas.merge(left=l,left_on=['timestamp_d'+str(d)",CLUSTER_11,CLUSTER_11
p,"pandas.read_pickle(""../pump_data_with_social.pkl"")",CLUSTER_11,CLUSTER_11
x,pandas.read_pickle(dir_prefix+filename),CLUSTER_11,CLUSTER_11
edited_cols,numpy.array(core+code_d+twitter_d+reddit_d+fb_d+market_d),CLUSTER_11,CLUSTER_11
social_features,numpy.array(code_d+twitter_d+reddit_d+fb_d+market_d),CLUSTER_11,CLUSTER_11
unique_cols,numpy.unique(edited_cols),CLUSTER_11,CLUSTER_11
np_array_1,"numpy.arange(1,50,3)",CLUSTER_9,CLUSTER_11
y2,numpy.asarray([g(i),CLUSTER_9,CLUSTER_11
y_3,numpy.zeros_like(x2),CLUSTER_9,CLUSTER_11
self.cosx,numpy.cos(x),CLUSTER_9,CLUSTER_11
self.sinx,numpy.sin(x),CLUSTER_9,CLUSTER_11
x_1,numpy.linspace(-2*(np.pi),CLUSTER_9,CLUSTER_11
x2,"numpy.linspace(-2*np.pi,2*np.pi,50)",CLUSTER_9,CLUSTER_11
f_vectorizado,numpy.vectorize(f),CLUSTER_9,CLUSTER_11
g1,numpy.vectorize(g),CLUSTER_9,CLUSTER_11
f22,numpy.vectorize(x.f2),CLUSTER_9,CLUSTER_11
sunspots,"numpy.loadtxt('sunspots.txt',dtype={'names':('año','numero')",CLUSTER_9,CLUSTER_11
sunspots,"numpy.loadtxt('sunspots.txt',dtype=[('year',int)",CLUSTER_9,CLUSTER_11
"year,number",numpy.loadtxt('sunspots2.txt'),CLUSTER_9,CLUSTER_11
data,numpy.load('sunspots.npy'),CLUSTER_9,CLUSTER_11
df,pandas.read_csv(file),CLUSTER_9,CLUSTER_11
tabulador,"pandas.read_excel('tabulador_pe2019.xls',header=9)",CLUSTER_9,CLUSTER_11
df_list,"pandas.read_html(html,header=1)",CLUSTER_9,CLUSTER_11
df_list,"pandas.read_html(html,header=1)",CLUSTER_9,CLUSTER_11
html,requests.get(url),CLUSTER_9,CLUSTER_11
html,requests.get(url),CLUSTER_9,CLUSTER_11
dec6,pandas.read_csv('datasets/coinmarketcap_06122017.csv'),CLUSTER_8,CLUSTER_3
current,"pandas.read_json(""https://api.coinmarketcap.com/v1/ticker/"")",CLUSTER_8,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(10,6)",CLUSTER_8,CLUSTER_3
mask,"numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_7,CLUSTER_5
"m,b","numpy.polyfit(x,y,1)",CLUSTER_7,CLUSTER_5
cols,"pandas.DataFrame([
[
func(df[acol],df[bcol])",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv(""data/water-treatment.data"",names=columns.keys()",CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(11,9)",CLUSTER_7,CLUSTER_5
columns,"collections.OrderedDict([
(""DAY"",""thedayofdatacollection"")",CLUSTER_7,CLUSTER_5
data,json.load(f),CLUSTER_4,CLUSTER_7
data,json.load(f),CLUSTER_4,CLUSTER_7
start_idx,"random.randint(0,len(img_test)",CLUSTER_4,CLUSTER_7
random_batch_idx,"random.randint(0,len(ds)",CLUSTER_4,CLUSTER_7
img_paths_sample,"random.sample(img_paths,nrows*ncols)",CLUSTER_4,CLUSTER_7
indices,numpy.arange(self.batch_size),CLUSTER_4,CLUSTER_7
xs,numpy.array(xs),CLUSTER_4,CLUSTER_7
ys,numpy.array(ys),CLUSTER_4,CLUSTER_7
batch_of_imgs,numpy.array(batch_of_imgs),CLUSTER_4,CLUSTER_7
batch_of_commands,numpy.array(batch_of_commands),CLUSTER_4,CLUSTER_7
batch_of_splines,numpy.array(batch_of_splines),CLUSTER_4,CLUSTER_7
all_zeros,numpy.zeros(len(COMMANDS),CLUSTER_4,CLUSTER_7
predicted_flatten_spline,numpy.squeeze(predicted_spline),CLUSTER_4,CLUSTER_7
input_img,"numpy.expand_dims(img,axis=0)",CLUSTER_4,CLUSTER_7
input_command,"numpy.expand_dims(command_onehot,axis=0)",CLUSTER_4,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(2,5,figsize=(45,20)",CLUSTER_4,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(nrows,ncols,figsize=(4*ncols,4*nrows)",CLUSTER_4,CLUSTER_7
Xvals,numpy.zeros(10002),CLUSTER_4,CLUSTER_11
Yvals,numpy.zeros(10002),CLUSTER_4,CLUSTER_11
MeanLoc,numpy.where(dataY==minn),CLUSTER_4,CLUSTER_11
whereL,numpy.where(L==LP),CLUSTER_4,CLUSTER_11
whereR,numpy.where(R==RP),CLUSTER_4,CLUSTER_11
Trigger,numpy.where(X==TriggerTime),CLUSTER_4,CLUSTER_11
Left,numpy.where(Xvals[0]==aaa),CLUSTER_4,CLUSTER_11
Right,numpy.where(Xvals[0]==aaa),CLUSTER_4,CLUSTER_11
ret,"numpy.cumsum(a,dtype=float)",CLUSTER_4,CLUSTER_11
baseline,numpy.mean(Y[0:Trigger]),CLUSTER_4,CLUSTER_11
aa,"numpy.loadtxt(files[5],skiprows=5,delimiter=',')",CLUSTER_4,CLUSTER_11
Hold,"numpy.loadtxt(files[q],skiprows=5,delimiter=',')",CLUSTER_4,CLUSTER_11
Hold,numpy.loadtxt(Datafiles[q]),CLUSTER_4,CLUSTER_11
folders,os.listdir(),CLUSTER_4,CLUSTER_11
"defdecode_stacked(document,pos","0,decoder=json.JSONDecoder()",CLUSTER_9,CLUSTER_3
NOT_WHITESPACE,re.compile(r'[^\s]'),CLUSTER_9,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(6,4)",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame({'A':1.,
'B':pd.Timestamp('20130102')",CLUSTER_8,CLUSTER_3
s,"pandas.Series([1,3,5,np.nan,6,8])",CLUSTER_8,CLUSTER_3
dates,"pandas.date_range('20180701',periods=6)",CLUSTER_8,CLUSTER_3
reviews,"pandas.read_csv(""data/ign.csv"")",CLUSTER_8,CLUSTER_3
x,pandas.DataFrame(crime2009),CLUSTER_5,CLUSTER_5
y,pandas.DataFrame(bachelor2009),CLUSTER_5,CLUSTER_5
df,pandas.read_csv('usa.csv'),CLUSTER_5,CLUSTER_5
my_3D_array,numpy.arange(70),CLUSTER_3,CLUSTER_6
left_mat,numpy.arange(6),CLUSTER_3,CLUSTER_6
right_mat,numpy.arange(15),CLUSTER_3,CLUSTER_6
my_vector,numpy.arange(5),CLUSTER_3,CLUSTER_6
my_2D_array,"numpy.ones(35,dtype='int_')",CLUSTER_3,CLUSTER_6
df,pandas.read_csv('2014_World_Power_Consumption'),CLUSTER_8,CLUSTER_4
usdf,pandas.read_csv('2012_Election_Data'),CLUSTER_8,CLUSTER_4
bm,"pandas.read_csv(""bigmac.csv"",parse_dates=[""Date""],index_col=[""Date"",""Country""])",CLUSTER_8,CLUSTER_4
w,"pandas.read_csv(""worldstats.csv"",index_col=[""country"",""year""])",CLUSTER_8,CLUSTER_4
sales,"pandas.read_csv(""salesmen.csv"",parse_dates=[""Date""])",CLUSTER_8,CLUSTER_4
foods,"pandas.read_csv(""foods.csv"")",CLUSTER_8,CLUSTER_4
sales,"pandas.read_csv(""quarters.csv"")",CLUSTER_8,CLUSTER_4
df_feat,"pandas.DataFrame(scaled_features,columns=df.columns[:-1])",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv('ClassifiedData',index_col=0)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,test_size=0.33,random_state=101)",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=37),CLUSTER_7,CLUSTER_5
X,"numpy.concatenate((X_dummy_features,X_numeric_imputed)",CLUSTER_5,CLUSTER_5
var_to_graph['multReg_linear'],numpy.mean((regr.predict(X_test),CLUSTER_5,CLUSTER_5
var_to_graph['multReg_poly'],numpy.mean((poly.predict(X_test),CLUSTER_5,CLUSTER_5
var_to_graph['multReg_ridge'],numpy.mean((regr.predict(X_test),CLUSTER_5,CLUSTER_5
X_dummy_features,"pandas.concat(X_dummy_features,axis=1)",CLUSTER_5,CLUSTER_5
temp_dummies,pandas.get_dummies(X_categorical[i]),CLUSTER_5,CLUSTER_5
sal['missingSalary'],pandas.isnull(sal['salary']),CLUSTER_5,CLUSTER_5
sal,pandas.read_csv('../Data/salaries_parent.csv'),CLUSTER_5,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
poly,sklearn.linear_model.LinearRegression(normalize=True),CLUSTER_5,CLUSTER_5
regr,sklearn.linear_model.Ridge(),CLUSTER_5,CLUSTER_5
poly,sklearn.preprocessing.PolynomialFeatures(2),CLUSTER_5,CLUSTER_5
scores_window,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
response,requests.get(url),CLUSTER_10,CLUSTER_12
cdf,"pandas.read_csv('College_Data',index_col=0)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_5
kmean,sklearn.cluster.KMeans(n_clusters=2),CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame([{'Name':'Chris','ItemPurchased':'Sponge','Cost':22.50},
{'Name':'Kevyn','ItemPurchased':'KittyLitter','Cost':2.50},
{'Name':'Filip','ItemPurchased':'Spoon','Cost':5.00}],
index=['Store1','Store1','Store2'])",CLUSTER_1,CLUSTER_3
staff_df,"pandas.DataFrame([{'Name':'Kelly','Role':'DirectorofHR'},
{'Name':'Sally','Role':'Courseliasion'},
{'Name':'James','Role':'Grader'}])",CLUSTER_1,CLUSTER_3
student_df,"pandas.DataFrame([{'Name':'James','School':'Business'},
{'Name':'Mike','School':'Law'},
{'Name':'Sally','School':'Engineering'}])",CLUSTER_1,CLUSTER_3
staff_df,"pandas.DataFrame([{'Name':'Kelly','Role':'DirectorofHR','Location':'StateStreet'},
{'Name':'Sally','Role':'Courseliasion','Location':'WashingtonAvenue'},
{'Name':'James','Role':'Grader','Location':'WashingtonAvenue'}])",CLUSTER_1,CLUSTER_3
student_df,"pandas.DataFrame([{'Name':'James','School':'Business','Location':'1024BilliardAvenue'},
{'Name':'Mike','School':'Law','Location':'FraternityHouse
{'Name':'Sally','School':'Engineering','Location':'512WilsonCrescent'}])",CLUSTER_1,CLUSTER_3
staff_df,"pandas.DataFrame([{'FirstName':'Kelly','LastName':'Desjardins','Role':'DirectorofHR'},
{'FirstName':'Sally','LastName':'Brooks','Role':'Courseliasion'},
{'FirstName':'James','LastName':'Wilde','Role':'Grader'}])",CLUSTER_1,CLUSTER_3
student_df,"pandas.DataFrame([{'FirstName':'James','LastName':'Hammond','School':'Business'},
{'FirstName':'Mike','LastName':'Smith','School':'Law'},
{'FirstName':'Sally','LastName':'Brooks','School':'Engineering'}])",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(['A+','A','A-','B+','B','B-','C+','C','C-','D+','D'],
index=['excellent','excellent','excellent','good','good','good','ok','ok','ok','poor','poor'])",CLUSTER_1,CLUSTER_3
ts3,"pandas.DataFrame(np.random.randint(10,100,(4,2)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame({'Count1':100+np.random.randint(-5,10,9)",CLUSTER_1,CLUSTER_3
adf['Date'],"pandas.Series({0:'December1',2:'mid-May'})",CLUSTER_1,CLUSTER_3
t1,pandas.Series(list('abc'),CLUSTER_1,CLUSTER_3
t2,pandas.Series(list('def'),CLUSTER_1,CLUSTER_3
dates,"pandas.date_range('10-01-2016',periods=9,freq='2W-SUN')",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('census.csv'),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('census.csv'),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('census.csv'),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('census.csv'),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('cars.csv'),CLUSTER_1,CLUSTER_3
ts3.index,pandas.to_datetime(ts3.index),CLUSTER_1,CLUSTER_3
avg,numpy.average(df.where(df['STNAME']==state),CLUSTER_1,CLUSTER_3
avg,numpy.average(frame['CENSUS2010POP']),CLUSTER_1,CLUSTER_3
mars_facts,pandas.read_html(facts_url),CLUSTER_9,CLUSTER_2
dfProbs,"pandas.DataFrame(X_test,columns=data_red.columns)",CLUSTER_4,CLUSTER_8
dfProbs30,"pandas.DataFrame(X_test,columns=data30.columns)",CLUSTER_4,CLUSTER_8
preds,"pandas.Series(predictions,name='preds')",CLUSTER_4,CLUSTER_8
weights,"pandas.Series(svm_clf.coef_[0],index=data_svm.columns)",CLUSTER_4,CLUSTER_8
preds30,"pandas.Series(predictions30,name='preds')",CLUSTER_4,CLUSTER_8
weights,"pandas.Series(svm_clf.coef_[0],index=data_svm.columns)",CLUSTER_4,CLUSTER_8
dummies,pandas.get_dummies(bigFrame['final_result']),CLUSTER_4,CLUSTER_8
dummies_svm,pandas.get_dummies(bigFrame['final_result']),CLUSTER_4,CLUSTER_8
dummies,pandas.get_dummies(bigFrame[bigFrame.SumClicks30==0]['final_result']),CLUSTER_4,CLUSTER_8
dummies_svm,pandas.get_dummies(bigFrame[bigFrame.SumClicks30==0]['final_result']),CLUSTER_4,CLUSTER_8
bigFrame,"pandas.merge(this_vle2,that_Info,how='inner',right_index=True,left_index=True)",CLUSTER_4,CLUSTER_8
info,pandas.read_csv('studentInfo.csv'),CLUSTER_4,CLUSTER_8
vle,pandas.read_csv('studentVle.csv'),CLUSTER_4,CLUSTER_8
alphaBin_range,"numpy.arange(.1,1,.1)",CLUSTER_4,CLUSTER_8
alphaBin_range,"numpy.arange(.1,1,.1)",CLUSTER_4,CLUSTER_8
C,"numpy.arange(.1,4.7,.5)",CLUSTER_4,CLUSTER_8
alphaBin_range,"numpy.arange(.1,1,.1)",CLUSTER_4,CLUSTER_8
alphaBin_range,"numpy.arange(.1,1,.1)",CLUSTER_4,CLUSTER_8
C,"numpy.arange(.1,4.7,.5)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
thresholds,"numpy.append(thresholds,1)",CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,recall,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,queue_rate,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(recall,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(xs,ys,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,recall,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,queue_rate,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(recall,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,recall,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,queue_rate,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(recall,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(p['thresholds'],p['precision'],color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(p['thresholds'],p['recall'],color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(p['thresholds'],p['queue_rate'],color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,recall,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,queue_rate,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(recall,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(xs,ys,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,recall,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,queue_rate,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(recall,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,recall,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(thresholds,queue_rate,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(recall,precision,color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(p['thresholds'],p['precision'],color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(p['thresholds'],p['recall'],color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
"plt.plot(p['thresholds'],p['queue_rate'],color",seaborn.color_palette(),CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate','FTest')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('Precision-RecallCurve','')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('Precision-RecallCurve','')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('Precision-RecallCurve','')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate','FTest')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('Precision-RecallCurve','')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('Precision-RecallCurve','')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('Precision-RecallCurve','')",CLUSTER_4,CLUSTER_8
leg,"matplotlib.pyplot.legend(('precision','recall','queue_rate')",CLUSTER_4,CLUSTER_8
startTmr,time.time(),CLUSTER_4,CLUSTER_8
startTmr,time.time(),CLUSTER_4,CLUSTER_8
startTmr,time.time(),CLUSTER_4,CLUSTER_8
startTmr,time.time(),CLUSTER_4,CLUSTER_8
"f_val,p_val","scipy.stats.f_oneway(SVM,NBB,NBG,KNN)",CLUSTER_4,CLUSTER_8
cv_object,"sklearn.model_selection.StratifiedShuffleSplit(test_size=0.2,n_splits=10)",CLUSTER_4,CLUSTER_8
cv_object,"sklearn.model_selection.StratifiedShuffleSplit(test_size=0.2,n_splits=10)",CLUSTER_4,CLUSTER_8
cv_object,"sklearn.model_selection.StratifiedShuffleSplit(test_size=0.2,n_splits=10)",CLUSTER_4,CLUSTER_8
cv_object,"sklearn.model_selection.StratifiedShuffleSplit(test_size=0.2,n_splits=10)",CLUSTER_4,CLUSTER_8
scl_obj,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_8
scl_obj,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_8
classify,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=n,
algorithm=algo,
weights='uniform',
metric='euclidean')",CLUSTER_4,CLUSTER_8
classifyK,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=trial,
algorithm=bClassify.algorithm,
weights='uniform',
metric='euclidean')",CLUSTER_4,CLUSTER_8
classify,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=n,
algorithm=algo,
weights='uniform',
metric='euclidean')",CLUSTER_4,CLUSTER_8
classifyK,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=trial,
algorithm=bClassify.algorithm,
weights='uniform',
metric='euclidean')",CLUSTER_4,CLUSTER_8
accuracy,"sklearn.metrics.accuracy_score(y_test,y_hat)",CLUSTER_4,CLUSTER_8
accuracy,"sklearn.metrics.accuracy_score(y_test,y_hat)",CLUSTER_4,CLUSTER_8
accuracyG30,"sklearn.metrics.accuracy_score(y_test,y_hat)",CLUSTER_4,CLUSTER_8
ber_acc,"sklearn.metrics.accuracy_score(y_test,y_hat)",CLUSTER_4,CLUSTER_8
classifyG,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_8
classifyG30,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_8
classify_ber,"sklearn.naive_bayes.BernoulliNB(alpha=i,binarize=i)",CLUSTER_4,CLUSTER_8
classify_ber,"sklearn.naive_bayes.BernoulliNB(alpha=i,binarize=i)",CLUSTER_4,CLUSTER_8
classify30_ber,"sklearn.naive_bayes.BernoulliNB(alpha=i,binarize=i)",CLUSTER_4,CLUSTER_8
classify_ber,"sklearn.naive_bayes.BernoulliNB(alpha=i,binarize=i)",CLUSTER_4,CLUSTER_8
svm_clf,"sklearn.svm.SVC(C=i,kernel=kernel,degree=3,gamma='auto')",CLUSTER_4,CLUSTER_8
svm_clf,"sklearn.svm.SVC(C=bi,kernel='linear',degree=3,gamma='auto')",CLUSTER_4,CLUSTER_8
svm_clf,"sklearn.svm.SVC(C=i,kernel=kernel,degree=3,gamma='auto')",CLUSTER_4,CLUSTER_8
svm_clf,"sklearn.svm.SVC(C=bi,kernel='linear',degree=3,gamma='auto')",CLUSTER_4,CLUSTER_8
returns_sum,collections.defaultdict(float),CLUSTER_1,CLUSTER_10
returns_count,collections.defaultdict(float),CLUSTER_1,CLUSTER_10
V,collections.defaultdict(float),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(15,5)",CLUSTER_1,CLUSTER_3
fig2,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig3,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_1,CLUSTER_3
solar_radiation,"pandas.read_csv(filename,skiprows=4,encoding='shift_jisx0213',usecols=[4])",CLUSTER_1,CLUSTER_3
TIME_AXIS,"numpy.arange(0,TIME_STEPS)",CLUSTER_1,CLUSTER_3
TIME_AXIS,"numpy.arange(0,TIME_STEPS)",CLUSTER_1,CLUSTER_3
_x,numpy.arange(no_of_dist_state),CLUSTER_1,CLUSTER_3
_y,numpy.arange(no_of_henergy_state),CLUSTER_1,CLUSTER_3
solar_energy,numpy.array([i*0.0165*1000000*0.15*1000/(60*60),CLUSTER_1,CLUSTER_3
state,"numpy.array([dist_state,henergy_state,day_state])",CLUSTER_1,CLUSTER_3
q,"numpy.zeros((no_of_dist_state,no_of_henergy_state,no_of_day_state,no_of_actions)",CLUSTER_1,CLUSTER_3
e,"numpy.zeros((no_of_dist_state,no_of_henergy_state,no_of_day_state,no_of_actions)",CLUSTER_1,CLUSTER_3
day_enp_rec,numpy.zeros(0),CLUSTER_1,CLUSTER_3
reward_rec,numpy.zeros(0),CLUSTER_1,CLUSTER_3
batt_rec,numpy.zeros(0),CLUSTER_1,CLUSTER_3
action_rec,numpy.zeros(0),CLUSTER_1,CLUSTER_3
dist_rec,numpy.zeros(0),CLUSTER_1,CLUSTER_3
qdata,"numpy.where(_qdata==q_init,0,_qdata)",CLUSTER_1,CLUSTER_3
greedy,"numpy.empty_like(q[:,:,0,0])",CLUSTER_1,CLUSTER_3
bottom,numpy.zeros_like(top),CLUSTER_1,CLUSTER_3
max_action,numpy.argmax(q_values),CLUSTER_1,CLUSTER_3
next_action,numpy.argmax(q_values),CLUSTER_1,CLUSTER_3
"greedy[i,j]","numpy.argmax(q[i,j,day_state:])",CLUSTER_1,CLUSTER_3
dist_state,"numpy.clip(dist_state,0,41)",CLUSTER_1,CLUSTER_3
tot_day_energy,"numpy.sum(senergy,axis=1)",CLUSTER_1,CLUSTER_3
henergy_state,numpy.ceil(henergy/500),CLUSTER_1,CLUSTER_3
temp,numpy.ceil(np.abs(dist/1000),CLUSTER_1,CLUSTER_3
get_day_state,numpy.vectorize(get_day_state),CLUSTER_1,CLUSTER_3
"_xx,_yy","numpy.meshgrid(_x,_y)",CLUSTER_1,CLUSTER_3
day_enp_rec,"numpy.append(day_enp_rec,next_dist)",CLUSTER_1,CLUSTER_3
reward_rec,"numpy.append(reward_rec,reward)",CLUSTER_1,CLUSTER_3
action_rec,"numpy.append(action_rec,action)",CLUSTER_1,CLUSTER_3
batt_rec,"numpy.append(batt_rec,batt)",CLUSTER_1,CLUSTER_3
dist_rec,"numpy.append(dist_rec,dist)",CLUSTER_1,CLUSTER_3
q,numpy.load(filename),CLUSTER_1,CLUSTER_3
eigvecs,numpy.array(eigvecs),CLUSTER_5,CLUSTER_10
eigvals,numpy.array(eigvals),CLUSTER_5,CLUSTER_10
reconstructions,numpy.asarray(reconstructions),CLUSTER_5,CLUSTER_10
loss,numpy.asarray(loss),CLUSTER_5,CLUSTER_10
times_mm0,numpy.asarray(times_mm0),CLUSTER_5,CLUSTER_10
times_mm1,numpy.asarray(times_mm1),CLUSTER_5,CLUSTER_10
times0,numpy.asarray(times0),CLUSTER_5,CLUSTER_10
times1,numpy.asarray(times1),CLUSTER_5,CLUSTER_10
x,"numpy.concatenate([actual[np.newaxis,:],reconstructions[:,image_idx]])",CLUSTER_5,CLUSTER_10
orders,numpy.argsort(-eigvals),CLUSTER_5,CLUSTER_10
std,"numpy.std(X,axis=0)",CLUSTER_5,CLUSTER_10
B,numpy.matrix(B),CLUSTER_5,CLUSTER_10
X,numpy.matrix(X),CLUSTER_5,CLUSTER_10
X_reconstruct,numpy.matrix(P),CLUSTER_5,CLUSTER_10
X,numpy.matrix(X),CLUSTER_5,CLUSTER_10
X_reconstruct,numpy.matrix(P),CLUSTER_5,CLUSTER_10
"eigvals,eigvecs",numpy.linalg.eigh(S),CLUSTER_5,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(20.,20.)",CLUSTER_5,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_10
app_train['CNT_CHILDREN_GROUP'],"pandas.cut(app_train['CNT_CHILDREN'].values,cut_rule,include_lowest=True)",CLUSTER_4,CLUSTER_11
app_train,pandas.read_csv(f_app),CLUSTER_4,CLUSTER_11
imgplot,matplotlib.pyplot.imshow(img),CLUSTER_7,CLUSTER_8
imgplot,matplotlib.pyplot.imshow(img),CLUSTER_7,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_7,CLUSTER_8
train_sizes,"numpy.arange(0.1,1,0.2)",CLUSTER_7,CLUSTER_8
train_sizes,"numpy.arange(0.1,1,0.2)",CLUSTER_7,CLUSTER_8
answ,"pd.DataFrame(data=numpy.vstack([y_pred_logit,y_pred_lg,train_df.loc[:idx_split,'bin_target'].values])",CLUSTER_7,CLUSTER_8
goes_events,pandas.DataFrame(goes_events),CLUSTER_7,CLUSTER_8
answ,"pandas.DataFrame(data=np.vstack([y_pred_logit,y_pred_lg,train_df.loc[:idx_split,'bin_target'].values])",CLUSTER_7,CLUSTER_8
target,"pandas.Series(full_df.index.map(lambdax:np.sum((x>big_events.start_time-np.timedelta64(horizont,'h')",CLUSTER_7,CLUSTER_8
prev_flux,pandas.Series(full_df.index.map(lambdax:goes_harp.loc[goes_harp.start_time<x].flux.sum(),CLUSTER_7,CLUSTER_8
full_df,"pandas.concat(df_list,axis=1)",CLUSTER_7,CLUSTER_8
train_df,"pandas.concat(df_list,ignore_index=True)",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
train_ohe,"pandas.concat([pd.get_dummies(train_df['Year'],prefix='Year')",CLUSTER_7,CLUSTER_8
dates_to_show,pandas.date_range(pd.Timestamp(first_date),CLUSTER_7,CLUSTER_8
t_range,"pandas.date_range(first_date,last_date,freq=str(time_stamp)",CLUSTER_7,CLUSTER_8
goes_events,"pandas.read_csv(os.path.join(DATA_PATH,'goes_events_2010_2018.csv')",CLUSTER_7,CLUSTER_8
num_mapper,"pandas.read_csv(os.path.join(DATA_PATH,'all_harps_with_noaa_ars.txt')",CLUSTER_7,CLUSTER_8
num_mapper,"pandas.read_csv('http://jsoc.stanford.edu/doc/data/hmi/harpnum_to_noaa/all_harps_with_noaa_ars.txt',sep='')",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(os.path.join(DATA_PATH+'/keys_regions',str_query+'.csv')",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(os.path.join(DATA_PATH+'/keys_regions',str_query+'.csv')",CLUSTER_7,CLUSTER_8
train_df,"pandas.read_pickle(os.path.join(DATA_PATH,'solar_train.pkl')",CLUSTER_7,CLUSTER_8
first_date,pandas.to_datetime(first_date),CLUSTER_7,CLUSTER_8
harp_list,pandas.unique(goes_events.harp_number),CLUSTER_7,CLUSTER_8
g,"seaborn.FacetGrid(train_df,hue=""bin_target"",height=4)",CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=5),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=5),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=5),CLUSTER_7,CLUSTER_8
tcv,sklearn.model_selection.TimeSeriesSplit(n_splits=5),CLUSTER_7,CLUSTER_8
score,"sklearn.model_selection.cross_val_score(logit_pipe,train_part[key_cols],train_part['bin_target'],cv=tcv,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
score,"sklearn.model_selection.cross_val_score(rf,train_part[key_cols],train_part['bin_target'],cv=tcv,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
score,"sklearn.model_selection.cross_val_score(lg,train_part[key_cols],train_part['bin_target'],cv=tcv,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
score,"sklearn.model_selection.cross_val_score(logit_pipe,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],cv=tcv,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
score,"sklearn.model_selection.cross_val_score(logit_pipe,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],cv=tcv,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
score,"sklearn.model_selection.cross_val_score(logit_pipe,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],cv=tcv,scoring='roc_auc',n_jobs=-1)",CLUSTER_7,CLUSTER_8
gs,"sklearn.model_selection.GridSearchCV(logit_pipe,param_grid,cv=tcv,scoring='roc_auc',n_jobs=-1)",CLUSTER_7,CLUSTER_8
gs,"sklearn.model_selection.GridSearchCV(logit_pipe,param_grid,cv=tcv,scoring='roc_auc',n_jobs=-1)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(lg,n_jobs=-1,param_grid=param_dist,cv=tcv,scoring=""roc_auc"",verbose=5)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(lg,n_jobs=-1,param_grid=param_dist,cv=3,scoring=""roc_auc"",verbose=5)",CLUSTER_7,CLUSTER_8
logit_2lev,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('scaler',StandardScaler()",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('transform',ct)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=3,class_weight='balanced')",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,max_depth=3,class_weight='balanced')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
ct,"sklearn.compose.ColumnTransformer(transformers=transformers,remainder='passthrough')",CLUSTER_7,CLUSTER_8
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(logit_pipe,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],
train_sizes=np.arange(0.1,1,0.2)",CLUSTER_7,CLUSTER_8
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(lg,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],
train_sizes=np.arange(0.1,1,0.2)",CLUSTER_7,CLUSTER_8
y_pred_logit,"sklearn.model_selection.cross_val_predict(logit_pipe,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],cv=3,method='predict_proba')",CLUSTER_7,CLUSTER_8
y_pred_lg,"sklearn.model_selection.cross_val_predict(lg,train_ohe.loc[:idx_split,:],train_df.loc[:idx_split,'bin_target'],cv=3,method='predict_proba')",CLUSTER_7,CLUSTER_8
trY_sf,numpy.where((np.array(trY1_sf),CLUSTER_6,CLUSTER_0
best_loss,numpy.mean(losses),CLUSTER_6,CLUSTER_0
trData,"pandas.read_csv(root_dir+""trainset.csv"",sep=',')",CLUSTER_6,CLUSTER_0
teData,"pandas.read_csv(root_dir+""testset.csv"",sep=',')",CLUSTER_6,CLUSTER_0
idx_sf,"random.sample(range(0,spls)",CLUSTER_6,CLUSTER_0
tstart,time.time(),CLUSTER_6,CLUSTER_0
elapsed,time.time(),CLUSTER_6,CLUSTER_0
tstart,time.time(),CLUSTER_6,CLUSTER_0
elapsed,time.time(),CLUSTER_6,CLUSTER_0
X_test,"pandas.read_csv(""X_test.csv"")",CLUSTER_8,CLUSTER_1
y_test,"pandas.read_csv(""y_test.csv"")",CLUSTER_8,CLUSTER_1
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
housing_df,"pandas.concat([housing_df,pd.get_dummies(housing_df.kitchenqual,prefix='kitchenqual',drop_first=True)",CLUSTER_7,CLUSTER_5
housing_df,"pandas.concat([housing_df,pd.get_dummies(housing_df.exterqual,prefix='exterqual',drop_first=True)",CLUSTER_7,CLUSTER_5
housing_df,"pandas.concat([housing_df,pd.get_dummies(housing_df.mszoning,prefix='mszoning',drop_first=True)",CLUSTER_7,CLUSTER_5
housing_df,"pandas.read_sql_query('select*fromhouseprices',con=engine)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=17)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=17)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=17)",CLUSTER_7,CLUSTER_5
img,numpy.squeeze(images[0]),CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_6,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=10,sharex=True,sharey=True,figsize=(25,4)",CLUSTER_6,CLUSTER_10
X,pandas.concat(frames),CLUSTER_5,CLUSTER_1
trainData,"pandas.read_csv(trainFile,sep="","",header=0)",CLUSTER_5,CLUSTER_1
testData,"pandas.read_csv(testFile,sep="","",header=0)",CLUSTER_5,CLUSTER_1
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=nTrees,max_depth=max_depth,random_state=0,verbose=verbose,min_samples_leaf=min_node_size)",CLUSTER_5,CLUSTER_1
gbm_clf,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=nTrees,loss='deviance',learning_rate=learning_rate,max_depth=max_depth,\
min_samples_leaf=min_node_size)",CLUSTER_5,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(7,7)",CLUSTER_2,CLUSTER_7
fig,"matplotlib.pyplot.figure(figsize=(7,7)",CLUSTER_2,CLUSTER_7
data_train,"numpy.transpose([x_train,y_train])",CLUSTER_2,CLUSTER_7
data_valid,"numpy.transpose([x_valid,y_valid])",CLUSTER_2,CLUSTER_7
data_predicted,"numpy.transpose([x_predicted,y_predicted])",CLUSTER_2,CLUSTER_7
x,"numpy.linspace(-1.5,1.5,1000)",CLUSTER_2,CLUSTER_7
y,"numpy.linspace(-1.5,1.5,1000)",CLUSTER_2,CLUSTER_7
"x,y","numpy.meshgrid(x,y)",CLUSTER_2,CLUSTER_7
donations_count,"pandas.DataFrame(
df_donations.groupby(""DonorID"")",CLUSTER_7,CLUSTER_8
temp,pandas.DataFrame(df_merged.groupby(['SchoolState']),CLUSTER_7,CLUSTER_8
coefficients_linR,pandas.DataFrame(data),CLUSTER_7,CLUSTER_8
coefficients,pandas.DataFrame(data),CLUSTER_7,CLUSTER_8
dfscores,pandas.DataFrame(fit.scores_),CLUSTER_7,CLUSTER_8
dfcolumns,pandas.DataFrame(X_.columns),CLUSTER_7,CLUSTER_8
feat_importances,"pandas.Series(rfc.feature_importances_,index=X_.columns)",CLUSTER_7,CLUSTER_8
feat_importances,"pandas.Series(clf.feature_importances_,index=X_.columns)",CLUSTER_7,CLUSTER_8
importance_series,"pandas.Series(model_xgb.feature_importances_,\
index=X_.columns)",CLUSTER_7,CLUSTER_8
feat_importances,"pandas.Series(modelext.feature_importances_,index=X_.columns)",CLUSTER_7,CLUSTER_8
featureScores,"pandas.concat([dfcolumns,dfscores],axis=1)",CLUSTER_7,CLUSTER_8
new_df,"pandas.merge(grouped,fullyfunded,how='left',left_on=['DonationReceivedYear','DonationReceivedMonth'],right_on=['DonationReceivedYear','DonationReceivedMonth'])",CLUSTER_7,CLUSTER_8
df_donations,"pandas.read_csv(""Donations.csv"")",CLUSTER_7,CLUSTER_8
df_projects,"pandas.read_csv(""Projects.csv"")",CLUSTER_7,CLUSTER_8
df_schools,"pandas.read_csv(""Schools.csv"")",CLUSTER_7,CLUSTER_8
df_merged['DonationReceivedDate'],pandas.to_datetime(df_merged['DonationReceivedDate']),CLUSTER_7,CLUSTER_8
df_merged['ProjectPostedDate'],pandas.to_datetime(df_merged['ProjectPostedDate']),CLUSTER_7,CLUSTER_8
new['ProjectExpirationDate'],pandas.to_datetime(new['ProjectExpirationDate']),CLUSTER_7,CLUSTER_8
new['ProjectFullyFundedDate'],pandas.to_datetime(new['ProjectFullyFundedDate']),CLUSTER_7,CLUSTER_8
timestamp,pandas.to_datetime('now'),CLUSTER_7,CLUSTER_8
X_predict_ffexpired_sub['log_ProjectCost'],numpy.log10(X_predict_ffexpired_sub['ProjectCost']),CLUSTER_7,CLUSTER_8
X_predict_ffexpired_sub['log_DonationAmount'],numpy.log10(X_predict_ffexpired_sub['DonationAmount']),CLUSTER_7,CLUSTER_8
color,seaborn.color_palette(),CLUSTER_7,CLUSTER_8
color,seaborn.color_palette('viridis'),CLUSTER_7,CLUSTER_8
color,seaborn.color_palette('bright'),CLUSTER_7,CLUSTER_8
color,seaborn.color_palette('viridis'),CLUSTER_7,CLUSTER_8
g,seaborn.heatmap(X_sample[top_corr_features].corr(),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(13,8)",CLUSTER_7,CLUSTER_8
"lines,labels",matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
"lines2,labels2",matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
"fig1,ax1",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
kmeans,sklearn.cluster.KMeans(n_clusters=no_of_clusters),CLUSTER_7,CLUSTER_8
gmm,sklearn.mixture.GaussianMixture(n_components=numOfClusters),CLUSTER_7,CLUSTER_8
"xTrain,xTest,yTrain,yTest","sklearn.model_selection.train_test_split(x3,y3,test_size=0.25,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train_LR,X_test_LR,y_train_LR,y_test_LR","sklearn.model_selection.train_test_split(X_,y_,test_size=0.25,random_state=123)",CLUSTER_7,CLUSTER_8
"X_train_RFC,X_test_RFC,y_train_RFC,y_test_RFC","sklearn.model_selection.train_test_split(X_,y_,test_size=0.25)",CLUSTER_7,CLUSTER_8
"xTrain,xTest,yTrain,yTest","sklearn.model_selection.train_test_split(x,y,test_size=0.25,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train_vt,X_test_vt,y_train_vt,y_test_vt","sklearn.model_selection.train_test_split(X_,y_,test_size=0.25,random_state=123)",CLUSTER_7,CLUSTER_8
linearRegressor,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
auc_score,"sklearn.metrics.roc_auc_score(y_test,y_pred_prob)",CLUSTER_7,CLUSTER_8
clf,"sklearn.tree.DecisionTreeClassifier(max_depth=5,random_state=12)",CLUSTER_7,CLUSTER_8
accuracy_LR,"sklearn.metrics.accuracy_score(y_test_LR,y_pred_LR)",CLUSTER_7,CLUSTER_8
accuracy_RFC,"sklearn.metrics.accuracy_score(y_test_RFC,y_pred_RFC)",CLUSTER_7,CLUSTER_8
accuracy_DT,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_7,CLUSTER_8
accuracy_NB,"sklearn.metrics.accuracy_score(y_test,pred_gnb)",CLUSTER_7,CLUSTER_8
accuracy_svc,"sklearn.metrics.accuracy_score(y_test,y_pred_svc)",CLUSTER_7,CLUSTER_8
accuracy_knn,"sklearn.metrics.accuracy_score(y_test,y_pred_knn)",CLUSTER_7,CLUSTER_8
accuracy_VT,"sklearn.metrics.accuracy_score(y_test_vt,pred_vt)",CLUSTER_7,CLUSTER_8
mat_LR,"sklearn.metrics.confusion_matrix(y_test_LR,y_pred_LR)",CLUSTER_7,CLUSTER_8
mat_RFC,"sklearn.metrics.confusion_matrix(y_test_RFC,y_pred_RFC)",CLUSTER_7,CLUSTER_8
mat_dtree,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_7,CLUSTER_8
mat_gnb,"sklearn.metrics.confusion_matrix(y_test,pred_gnb)",CLUSTER_7,CLUSTER_8
mat_svc,"sklearn.metrics.confusion_matrix(y_test,y_pred_svc)",CLUSTER_7,CLUSTER_8
mat_knn,"sklearn.metrics.confusion_matrix(y_test,y_pred_knn)",CLUSTER_7,CLUSTER_8
mat_vt,"sklearn.metrics.confusion_matrix(y_test_vt,pred_vt)",CLUSTER_7,CLUSTER_8
cls_LR,"sklearn.metrics.classification_report(y_test_LR,y_pred_LR,target_names=ylabels)",CLUSTER_7,CLUSTER_8
cls_RFC,"sklearn.metrics.classification_report(y_test_RFC,y_pred_RFC,target_names=ylabels)",CLUSTER_7,CLUSTER_8
cls_dtree,"sklearn.metrics.classification_report(y_test,pred,target_names=ylabels)",CLUSTER_7,CLUSTER_8
cls_gnb,"sklearn.metrics.classification_report(y_test,pred_gnb,target_names=ylabels)",CLUSTER_7,CLUSTER_8
cls_svc,"sklearn.metrics.classification_report(y_test,y_pred_svc,target_names=ylabels)",CLUSTER_7,CLUSTER_8
cls_knn,"sklearn.metrics.classification_report(y_test,y_pred_knn,target_names=ylabels)",CLUSTER_7,CLUSTER_8
cls_vt,"sklearn.metrics.classification_report(y_test_vt,pred_vt,target_names=ylabels)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,y_pred_prob)",CLUSTER_7,CLUSTER_8
rfc,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_7,CLUSTER_8
log_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=7),CLUSTER_7,CLUSTER_8
lr,"sklearn.linear_model.LogisticRegression(C=10,penalty='l1')",CLUSTER_7,CLUSTER_8
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_7,CLUSTER_8
sl,"sklearn.metrics.silhouette_score(X_sample,labels)",CLUSTER_7,CLUSTER_8
modelext,sklearn.ensemble.ExtraTreesClassifier(),CLUSTER_7,CLUSTER_8
bestfeatures,"sklearn.feature_selection.SelectKBest(score_func=chi2,k=10)",CLUSTER_7,CLUSTER_8
svc,"sklearn.svm.SVC(kernel='linear',probability=True)",CLUSTER_7,CLUSTER_8
svm_clf,sklearn.svm.SVC(probability=True),CLUSTER_7,CLUSTER_8
rnd_clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
voting_clf,"sklearn.ensemble.VotingClassifier(estimators=[('lr',log_clf)",CLUSTER_7,CLUSTER_8
size,numpy.shape(data),CLUSTER_5,CLUSTER_5
raw_data,"numpy.genfromtxt(data_path,delimiter=',')",CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=10),CLUSTER_5,CLUSTER_5
pddata,pandas.DataFrame(data=X_train_pca),CLUSTER_5,CLUSTER_5
pddata,pandas.DataFrame(data=new_data),CLUSTER_5,CLUSTER_5
ticks,"numpy.arange(0,10,1)",CLUSTER_5,CLUSTER_5
ticks,"numpy.arange(0,10,1)",CLUSTER_5,CLUSTER_5
X_train,sklearn.preprocessing.scale(X_train),CLUSTER_5,CLUSTER_5
X_test,sklearn.preprocessing.scale(X_test),CLUSTER_5,CLUSTER_5
X_deploy,sklearn.preprocessing.scale(X_deploy),CLUSTER_5,CLUSTER_5
fs,sklearn.feature_selection.SelectKBest(k=10),CLUSTER_5,CLUSTER_5
clf_neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
clf_svm_linear,sklearn.svm.LinearSVC(C=20.0),CLUSTER_5,CLUSTER_5
clf_svm,"sklearn.svm.SVC(C=5.0,kernel='rbf')",CLUSTER_5,CLUSTER_5
clf_dt,sklearn.tree.DecisionTreeClassifier(min_samples_split=2),CLUSTER_5,CLUSTER_5
clf_dt_IG,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',min_samples_split=2)",CLUSTER_5,CLUSTER_5
clf_dt_BGKN,sklearn.ensemble.BaggingClassifier(KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
clf_dt_BGDT,"sklearn.ensemble.BaggingClassifier(DecisionTreeClassifier(criterion='entropy',min_samples_split=2)",CLUSTER_5,CLUSTER_5
clf_dt_RF,sklearn.ensemble.RandomForestClassifier(),CLUSTER_5,CLUSTER_5
clf_dt_AD,sklearn.ensemble.AdaBoostClassifier(),CLUSTER_5,CLUSTER_5
clf_NB,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_5
clf_dt_LDA,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(),CLUSTER_5,CLUSTER_5
clf_dt_QDA,sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis(),CLUSTER_5,CLUSTER_5
data,requests.get(page_URL),CLUSTER_9,CLUSTER_2
data,requests.get(URL_temp),CLUSTER_9,CLUSTER_2
regex,re.compile('[^a-zA-Z]'),CLUSTER_9,CLUSTER_2
df,"pandas.DataFrame({'Nomi':[elemento[0]forelementoincomplete_list],
'Genere':[elemento[1]forelementoincomplete_list],
'Recensioni':[elemento[2]forelementoincomplete_list],
'Voti':[elemento[3]forelementoincomplete_list],
'Scrittada':[elemento[4]forelementoincomplete_list]})",CLUSTER_9,CLUSTER_2
writer,"pandas.ExcelWriter('RISTORANTE_18.xlsx',engine='xlsxwriter')",CLUSTER_9,CLUSTER_2
partial_dataframe,"pandas.read_excel(""RISTORANTE_18.xlsx"")",CLUSTER_9,CLUSTER_2
n_cluster,"numpy.arange(10,20)",CLUSTER_5,CLUSTER_8
ind,numpy.arange(nb_examples),CLUSTER_5,CLUSTER_8
y,"numpy.arange(0,len(scores['mean'])",CLUSTER_5,CLUSTER_8
sil,numpy.array(silhouette_score_list),CLUSTER_5,CLUSTER_8
score,numpy.array(x),CLUSTER_5,CLUSTER_8
mean[i],numpy.mean(scores[i]),CLUSTER_5,CLUSTER_8
img,"numpy.reshape(images,(len(images)",CLUSTER_5,CLUSTER_8
std[i],numpy.std(scores[i]),CLUSTER_5,CLUSTER_8
d,"numpy.log(dist[:,k-1:k]/dist[:,0:k-1])",CLUSTER_5,CLUSTER_8
"points,labels",numpy.loadtxt('data/clustering.txt'),CLUSTER_5,CLUSTER_8
clf,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=0)",CLUSTER_5,CLUSTER_8
X,sklearn.datasets.fetch_20newsgroups_vectorized(),CLUSTER_5,CLUSTER_8
X,pandas.DataFrame(X),CLUSTER_5,CLUSTER_8
temp,"pandas.DataFrame({
""dim.reductionmethod"":list(methods.keys()",CLUSTER_5,CLUSTER_8
neighb,sklearn.neighbors.NearestNeighbors(n_neighbors=k+1),CLUSTER_5,CLUSTER_8
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_8
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_8
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_8
data,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_8
data,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_8
dataa,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_8
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_8
pca1,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_8
pca,sklearn.decomposition.PCA(item),CLUSTER_5,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_5,CLUSTER_8
pca,"sklearn.decomposition.PCA(n_components=60,random_state=0)",CLUSTER_5,CLUSTER_8
iso,"sklearn.manifold.Isomap(n_neighbors=5,n_components=3,eigen_solver='dense')",CLUSTER_5,CLUSTER_8
ica,sklearn.decomposition.FastICA(n_components=3),CLUSTER_5,CLUSTER_8
rkf,"sklearn.model_selection.RepeatedKFold(n_splits=5,n_repeats=3,random_state=0)",CLUSTER_5,CLUSTER_8
logreg,"sklearn.linear_model.LogisticRegression(solver='lbfgs',multi_class='multinomial')",CLUSTER_5,CLUSTER_8
"t1,val1","scipy.stats.ttest_ind(scores[0],scores[1])",CLUSTER_5,CLUSTER_8
"t2,val2","scipy.stats.ttest_ind(scores[2],scores[0])",CLUSTER_5,CLUSTER_8
clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=4,weights='distance',n_jobs=-1)",CLUSTER_5,CLUSTER_8
app_train,pandas.read_csv(f_app),CLUSTER_7,CLUSTER_8
k2,pandas.DataFrame(k2),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_5,CLUSTER_5
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=4),CLUSTER_5,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test,y_predicted)",CLUSTER_5,CLUSTER_5
f1,"sklearn.metrics.f1_score(y_test,y_predicted,average='weighted')",CLUSTER_5,CLUSTER_5
precision,"sklearn.metrics.precision_score(y_test,y_predicted,average='weighted')",CLUSTER_5,CLUSTER_5
recall,"sklearn.metrics.recall_score(y_test,y_predicted,average='weighted')",CLUSTER_5,CLUSTER_5
partial_train_data,"numpy.concatenate(
[train_data[:i*num_val_samples],
train_data[(i+1)",CLUSTER_2,CLUSTER_7
partial_train_targets,"numpy.concatenate(
[train_targets[:i*num_val_samples],
train_targets[(i+1)",CLUSTER_2,CLUSTER_7
partial_train_data,"numpy.concatenate(
[train_data[:i*num_val_samples],
train_data[(i+1)",CLUSTER_2,CLUSTER_7
partial_train_targets,"numpy.concatenate(
[train_targets[:i*num_val_samples],
train_targets[(i+1)",CLUSTER_2,CLUSTER_7
rf,numpy.array(Rf),CLUSTER_4,CLUSTER_11
ar,numpy.array(ar),CLUSTER_4,CLUSTER_11
br,numpy.array(br),CLUSTER_4,CLUSTER_11
relevance_train,"pandas.read_csv('relevance_train.csv',sep='\t')",CLUSTER_4,CLUSTER_11
relevance_test,pandas.read_csv('relevance_test.csv'),CLUSTER_4,CLUSTER_11
queries,"pandas.read_csv('queries.csv',index_col=""QueryId"")",CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
wwd,collections.defaultdict(lambda:0),CLUSTER_4,CLUSTER_11
wwq,collections.defaultdict(lambda:0),CLUSTER_4,CLUSTER_11
df_compart_bikes,pandas.read_csv('comp_bikes_mod.csv'),CLUSTER_7,CLUSTER_5
df_compart_bikes['dteday'],pandas.to_datetime(df_compart_bikes.dteday),CLUSTER_7,CLUSTER_5
reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
R_2,"sklearn.metrics.r2_score(saida_regressao,previsao)",CLUSTER_7,CLUSTER_5
R_2,"sklearn.metrics.r2_score(saida_regressao,previsao_arvore)",CLUSTER_7,CLUSTER_5
arvore_regressora,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(arvore_regressora,out_file=None)",CLUSTER_7,CLUSTER_5
b,"pandas.pivot(a,index='ROOM',columns='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot(a,index='ROOM',columns='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index='ROOM',columns='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index='ROOM',columns='MONTH',values='RENT',
aggfunc=np.mean)",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index='ROOM',columns='MONTH',values='RENT',
aggfunc=np.sum)",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index='ROOM',columns='MONTH',values='RENT',
aggfunc=np.sum,
margins=True,margins_name='TOTAL')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index=['ROOM','NAME'],columns='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,columns=['ROOM','NAME'],index='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
a,pandas.read_excel('house_rent_no_duplicate.xlsx'),CLUSTER_8,CLUSTER_3
a,pandas.read_excel('house_rent_duplicate.xlsx'),CLUSTER_8,CLUSTER_3
merged,"pandas.merge(df_f,df1_f,on=[""SQ_CANDIDATO"",'SG_PARTIDO',""NM_CANDIDATO""])",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv('Votos_Somados.csv',decimal=',')",CLUSTER_8,CLUSTER_4
df1,"pandas.read_csv('Despesas_Consolidadas.csv',decimal=',')",CLUSTER_8,CLUSTER_4
rmse,numpy.sqrt(np.mean(scores),CLUSTER_3,CLUSTER_6
X,numpy.load('data/X_white.npy'),CLUSTER_3,CLUSTER_6
y,numpy.load('data/y_white.npy'),CLUSTER_3,CLUSTER_6
end,time.perf_counter(),CLUSTER_3,CLUSTER_6
start,time.perf_counter(),CLUSTER_3,CLUSTER_6
start,time.perf_counter(),CLUSTER_3,CLUSTER_6
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,random_state=0)",CLUSTER_3,CLUSTER_6
rfr,"sklearn.ensemble.RandomForestRegressor(random_state=0,n_estimators=10)",CLUSTER_3,CLUSTER_6
rfr,"sklearn.ensemble.RandomForestRegressor(**bp,random_state=0)",CLUSTER_3,CLUSTER_6
grid,"sklearn.model_selection.GridSearchCV(rfr,params,cv=5,n_jobs=-1,
verbose=1)",CLUSTER_3,CLUSTER_6
dd1,"pandas.DataFrame(sd1.values,columns=['Activity','Start','End','Duration'])",CLUSTER_4,CLUSTER_11
dd2,"pandas.DataFrame(sd2.values,columns=['Activity','Start','End','Duration'])",CLUSTER_4,CLUSTER_11
data,"pandas.read_csv(fpath,sep=',',names=cols,skiprows=0)",CLUSTER_4,CLUSTER_11
augmented,json.load(fopen),CLUSTER_0,CLUSTER_7
name_to_variable,collections.OrderedDict(),CLUSTER_0,CLUSTER_7
assignment_map,collections.OrderedDict(),CLUSTER_0,CLUSTER_7
m,re.match('^(.*),CLUSTER_0,CLUSTER_7
string,re.sub('[^A-Za-z0-9\-\/(),CLUSTER_0,CLUSTER_7
string,"re.sub(r'[]+','',string)",CLUSTER_0,CLUSTER_7
vw_pred,numpy.loadtxt('vw_valid_10mln_pred1.csv'),CLUSTER_7,CLUSTER_8
test_labels,"numpy.loadtxt(os.path.join(PATH_TO_DATA,
'stackoverflow_10mln_test_labels.txt')",CLUSTER_7,CLUSTER_8
one_hot_example,pandas.DataFrame([{i:0foriinrange(10),CLUSTER_7,CLUSTER_8
encoded_categorical_columns,pandas.DataFrame(onehot_encoder.fit_transform(df[categorical_columns]),CLUSTER_7,CLUSTER_8
hashing_example,pandas.DataFrame([{i:0.0foriinrange(hash_space),CLUSTER_7,CLUSTER_8
mapped_education,pandas.Series(label_encoder.fit_transform(df['education']),CLUSTER_7,CLUSTER_8
data_demo,pandas.read_csv('../../data/weights_heights.csv'),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('../../data/bank_train.csv'),CLUSTER_7,CLUSTER_8
labels,"pandas.read_csv('../../data/bank_train_target.csv',header=None)",CLUSTER_7,CLUSTER_8
logit,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
auc,"sklearn.metrics.roc_auc_score(test_labels,test_prediction)",CLUSTER_7,CLUSTER_8
roc_curve,"sklearn.metrics.roc_curve(test_labels,test_prediction)",CLUSTER_7,CLUSTER_8
M,"sklearn.metrics.confusion_matrix(test_labels_mult,test_prediction_mult)",CLUSTER_7,CLUSTER_8
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
topic_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_7,CLUSTER_8
newsgroups,sklearn.datasets.fetch_20newsgroups('../../data/news_data'),CLUSTER_7,CLUSTER_8
reviews_train,"sklearn.datasets.load_files(os.path.join(path_to_movies,'train')",CLUSTER_7,CLUSTER_8
reviews_test,"sklearn.datasets.load_files(os.path.join(path_to_movies,'test')",CLUSTER_7,CLUSTER_8
ycols,pandas.DataFrame(),CLUSTER_5,CLUSTER_1
df,"pandas.read_csv(""https://docs.google.com/spreadsheets/d/1pmBtSw7v_tU_dIX1-4E8_Q7wC43fDs6LGDQzN49-ffk/export?format=csv"")",CLUSTER_5,CLUSTER_1
yarr,numpy.array(y),CLUSTER_5,CLUSTER_1
ycols['pitchType'],numpy.unique(dfnum['pitchType']),CLUSTER_5,CLUSTER_1
pca,sklearn.decomposition.PCA(n_components=8),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
r,random.random(),CLUSTER_5,CLUSTER_1
b,random.random(),CLUSTER_5,CLUSTER_1
g,random.random(),CLUSTER_5,CLUSTER_1
content,requests.get(URL+FILENAME),CLUSTER_6,CLUSTER_10
val_loss,"numpy.sum(np.multiply(losses,nums)",CLUSTER_6,CLUSTER_10
canvas,"numpy.empty((28*n,28*n)",CLUSTER_2,CLUSTER_7
x_axis,"numpy.linspace(-1,1,n)",CLUSTER_2,CLUSTER_7
y_axis,"numpy.linspace(-1,1,n)",CLUSTER_2,CLUSTER_7
results_list,os.listdir('/headless/ray_results/'+exp_name),CLUSTER_4,CLUSTER_11
x,numpy.arange(int(env.env_params.horizon),CLUSTER_4,CLUSTER_11
y,"numpy.arange(0,int(left_length)",CLUSTER_4,CLUSTER_11
vel_map_,numpy.zeros(int(left_length),CLUSTER_4,CLUSTER_11
v,numpy.mean(env.k.vehicle.get_speed(env.k.vehicle.get_ids(),CLUSTER_4,CLUSTER_11
vel_mean,"numpy.mean(vel_list,axis=0)",CLUSTER_4,CLUSTER_11
outflow_mean,"numpy.mean(outflow_list,axis=0)",CLUSTER_4,CLUSTER_11
vel_map_list,"numpy.vstack((vel_map_list,vel_map_)",CLUSTER_4,CLUSTER_11
"xx,yy","numpy.meshgrid(x,y)",CLUSTER_4,CLUSTER_11
vel_mean,numpy.load(data_path+'ppo_trained_'+str(num_trials),CLUSTER_4,CLUSTER_11
outflow_mean,numpy.load(data_path+'ppo_trained_'+str(num_trials),CLUSTER_4,CLUSTER_11
vel_map_mean,numpy.load(data_path+'ppo_trained_'+str(num_trials),CLUSTER_4,CLUSTER_11
human_vel_mean,numpy.load(data_path+'human_'+str(num_trials),CLUSTER_4,CLUSTER_11
human_outflow_mean,numpy.load(data_path+'human_'+str(num_trials),CLUSTER_4,CLUSTER_11
human_vel_map_mean,numpy.load(data_path+'human_'+str(num_trials),CLUSTER_4,CLUSTER_11
vel_map_mean,"numpy.nanmean(vel_map_lists,axis=0)",CLUSTER_4,CLUSTER_11
"vel_fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1)",CLUSTER_4,CLUSTER_11
"outflow_fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1)",CLUSTER_4,CLUSTER_11
"space_fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=1,figsize=(10,10)",CLUSTER_4,CLUSTER_11
df,pandas.DataFrame({'A':np.random.randn(365),CLUSTER_7,CLUSTER_3
v1,"pandas.Series(np.random.normal(0,10,1000)",CLUSTER_7,CLUSTER_3
v2,"pandas.Series(2*v1+np.random.normal(60,15,1000)",CLUSTER_7,CLUSTER_3
index,"pandas.date_range('1/1/2017',periods=365)",CLUSTER_7,CLUSTER_3
iris,pandas.read_csv('iris.csv'),CLUSTER_7,CLUSTER_3
iris,pandas.read_csv('iris.csv'),CLUSTER_7,CLUSTER_3
"plt.hist(v1,alpha","0.7,bins=numpy.arange(-50,150,5)",CLUSTER_7,CLUSTER_3
"plt.hist(v2,alpha","0.7,bins=numpy.arange(-50,150,5)",CLUSTER_7,CLUSTER_3
v3,"numpy.concatenate((v1,v2)",CLUSTER_7,CLUSTER_3
grid,"seaborn.jointplot(v1,v2,alpha=0.4)",CLUSTER_7,CLUSTER_3
current_time,"time.strftime(""%Y-%m-%d%H:%M:%S"",time.gmtime()",CLUSTER_8,CLUSTER_12
past,time.time(),CLUSTER_8,CLUSTER_12
present,time.time(),CLUSTER_8,CLUSTER_12
writer,"pandas.ExcelWriter('/'.join([PATH,new_file_name_regexp+'.xlsx'])",CLUSTER_8,CLUSTER_12
x,numpy.asarray(x),CLUSTER_2,CLUSTER_7
y_target,"numpy.zeros((1,2)",CLUSTER_2,CLUSTER_7
ifnp.argmax(y_target),=numpy.argmax(output_),CLUSTER_2,CLUSTER_7
truth,"numpy.concatenate(truth,axis=0)",CLUSTER_0,CLUSTER_5
svm_prediction,"numpy.concatenate(svm_prediction,axis=0)",CLUSTER_0,CLUSTER_5
truth,"numpy.concatenate(truth,axis=0)",CLUSTER_0,CLUSTER_5
svm_prediction,"numpy.concatenate(svm_prediction,axis=0)",CLUSTER_0,CLUSTER_5
truth,"numpy.concatenate(truth,axis=0)",CLUSTER_0,CLUSTER_5
svm_prediction,"numpy.concatenate(svm_prediction,axis=0)",CLUSTER_0,CLUSTER_5
test_results,numpy.sum(svm_prediction==truth),CLUSTER_0,CLUSTER_5
train_results,numpy.sum(Y_hat==Y),CLUSTER_0,CLUSTER_5
test_results,numpy.sum(svm_prediction==truth),CLUSTER_0,CLUSTER_5
train_results,numpy.sum(Y_hat==Y),CLUSTER_0,CLUSTER_5
test_results,numpy.sum(svm_prediction==truth),CLUSTER_0,CLUSTER_5
train_results,numpy.sum(Y_hat==Y),CLUSTER_0,CLUSTER_5
results,"pandas.DataFrame(columns=('name','accuracy')",CLUSTER_0,CLUSTER_5
results,"pandas.DataFrame(columns=('name','accuracy')",CLUSTER_0,CLUSTER_5
results,"pandas.DataFrame(columns=('name','accuracy')",CLUSTER_0,CLUSTER_5
svm_ct,"pandas.crosstab(best[1],best[0],margins=True)",CLUSTER_0,CLUSTER_5
svm,"sklearn.svm.SVC(C=C[c],kernel='linear')",CLUSTER_0,CLUSTER_5
svm,"sklearn.svm.SVC(C=C[c],kernel='poly',degree=degree[d],coef0=coef[r],gamma='auto')",CLUSTER_0,CLUSTER_5
svm,"sklearn.svm.SVC(C=C[c],kernel='rbf',gamma=gamma[g])",CLUSTER_0,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True)",CLUSTER_0,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True)",CLUSTER_0,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True)",CLUSTER_0,CLUSTER_5
"svm_fpr,svm_tpr,svm_thresholds","sklearn.metrics.roc_curve(best[0],best[1],pos_label=1)",CLUSTER_0,CLUSTER_5
roc_auc,"sklearn.metrics.auc(svm_fpr,svm_tpr)",CLUSTER_0,CLUSTER_5
axis,matplotlib.pyplot.gca(),CLUSTER_0,CLUSTER_5
trainAcc,"matplotlib.pyplot.plot(C,tracc,label=name+'-TrainingError',ls='dashed',linewidth=2)",CLUSTER_0,CLUSTER_5
testACC,"matplotlib.pyplot.plot(C,tstacc,label=name+'-TestingError',color=color,linewidth=2)",CLUSTER_0,CLUSTER_5
churn_df,"pandas.read_csv(""ChurnData.csv"")",CLUSTER_5,CLUSTER_9
tick_marks,numpy.arange(len(classes),CLUSTER_5,CLUSTER_9
X,"numpy.asarray(churn_df[['tenure','age','address','income','ed','employ','equip']])",CLUSTER_5,CLUSTER_9
y,numpy.asarray(churn_df['churn']),CLUSTER_5,CLUSTER_9
X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=4)",CLUSTER_5,CLUSTER_9
LR,"sklearn.linear_model.LogisticRegression(C=0.01,solver='liblinear')",CLUSTER_5,CLUSTER_9
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,yhat,labels=[1,0])",CLUSTER_5,CLUSTER_9
"x[...,0]","numpy.dot(x[...,:3],[0.299,0.587,0.114])",CLUSTER_5,CLUSTER_7
x,"numpy.delete(x,[1,2],3)",CLUSTER_5,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_7
index,"random.randint(0,len(X_train)",CLUSTER_5,CLUSTER_7
index,"random.randint(0,len(X_predict)",CLUSTER_5,CLUSTER_7
cnt,collections.Counter(list),CLUSTER_10,CLUSTER_4
cnt,"collections.Counter({1:3,2:4})",CLUSTER_10,CLUSTER_4
cnt,collections.Counter(list),CLUSTER_10,CLUSTER_4
cnt,"collections.Counter({1:3,2:4})",CLUSTER_10,CLUSTER_4
cnt,collections.Counter(list),CLUSTER_10,CLUSTER_4
favs,"collections.Counter(nameforname,colourincolours)",CLUSTER_10,CLUSTER_4
c,collections.Counter('Amazingtutorial!'),CLUSTER_10,CLUSTER_4
nums,collections.defaultdict(int),CLUSTER_10,CLUSTER_4
count,collections.defaultdict(int),CLUSTER_10,CLUSTER_4
od,collections.OrderedDict(),CLUSTER_10,CLUSTER_4
od,collections.OrderedDict(cnt.most_common(),CLUSTER_10,CLUSTER_4
colours,"collections.OrderedDict([(""Red"",198)",CLUSTER_10,CLUSTER_4
deq,collections.deque(list),CLUSTER_10,CLUSTER_4
deq,collections.deque(list),CLUSTER_10,CLUSTER_4
deq,collections.deque(list),CLUSTER_10,CLUSTER_4
d,collections.deque(),CLUSTER_10,CLUSTER_4
d,collections.deque(range(5),CLUSTER_10,CLUSTER_4
d,"collections.deque([0,1,2,3,5],maxlen=5)",CLUSTER_10,CLUSTER_4
d,"collections.deque([1,2,3,4,5])",CLUSTER_10,CLUSTER_4
Student,"collections.namedtuple('Student','fname,lname,age')",CLUSTER_10,CLUSTER_4
Animal,"collections.namedtuple(""Animals"",'nameagetype')",CLUSTER_10,CLUSTER_4
Animal,"collections.namedtuple('Animal','nameagetype')",CLUSTER_10,CLUSTER_4
Animal,"collections.namedtuple('Animal','nameagetype')",CLUSTER_10,CLUSTER_4
Animal,"collections.namedtuple('Animal','nameagetype')",CLUSTER_10,CLUSTER_4
chain_map,"collections.ChainMap(dict1,dict2)",CLUSTER_10,CLUSTER_4
chain_map,"collections.ChainMap(dict1,dict2)",CLUSTER_10,CLUSTER_4
df1['salesafterfirstdiff.'],numpy.log(df1['sales']),CLUSTER_5,CLUSTER_5
df1['salesafterseconddiff.'],numpy.log(df1['salesafterfirstdiff.']),CLUSTER_5,CLUSTER_5
df2['salesafterfirstdiff.'],numpy.log(df2['sales']),CLUSTER_5,CLUSTER_5
df2['salesafterseconddiff.'],numpy.log(df2['salesafterfirstdiff.']),CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""Amberville.csv"")",CLUSTER_5,CLUSTER_5
df1,"pandas.read_csv(""wood.csv"")",CLUSTER_5,CLUSTER_5
df2,"pandas.read_csv(""Mudramark.csv"")",CLUSTER_5,CLUSTER_5
df['week'],pandas.to_datetime(df['week']),CLUSTER_5,CLUSTER_5
df1['week'],pandas.to_datetime(df1['week']),CLUSTER_5,CLUSTER_5
df2['week'],pandas.to_datetime(df2['week']),CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(actual,farima)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(actual,farima)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(actual,farima)",CLUSTER_5,CLUSTER_5
mae,"sklearn.metrics.mean_absolute_error(actual,farima)",CLUSTER_5,CLUSTER_5
mae,"sklearn.metrics.mean_absolute_error(actual,farima)",CLUSTER_5,CLUSTER_5
mae,"sklearn.metrics.mean_absolute_error(actual,farima)",CLUSTER_5,CLUSTER_5
df,pandas.read_csv('911.csv'),CLUSTER_7,CLUSTER_3
df['timeStamp'],pandas.to_datetime(df['timeStamp']),CLUSTER_7,CLUSTER_3
"y_train,y_test)","sklearn.model_selection.train_test_split(X,y,
test_size=0.25,
random_state=1)",CLUSTER_5,CLUSTER_1
reg_2,sklearn.ensemble.RandomForestRegressor(random_state=1),CLUSTER_5,CLUSTER_1
reg_1,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
data,"pandas.read_csv(""diamonds.txt"",delimiter=""\t"")",CLUSTER_5,CLUSTER_1
city_data,"pandas.read_csv(""../output_data/cities.csv"")",CLUSTER_9,CLUSTER_2
response,requests.get(search_url),CLUSTER_9,CLUSTER_2
dataframe,"pandas.read_csv(name_f,sep=',',usecols=[1],engine='python',skipfooter=3)",CLUSTER_7,CLUSTER_9
tick_marks,numpy.arange(len(states),CLUSTER_7,CLUSTER_9
n_states,"numpy.arange(1,50)",CLUSTER_7,CLUSTER_9
r,"scipy.stats.norm(markov_model.means_[i],np.sqrt(markov_model.covars_[i,0])",CLUSTER_7,CLUSTER_9
X_output,"scipy.stats.norm(markov_model.means_[X_state],np.sqrt(markov_model.covars_[X_state][:,0])",CLUSTER_7,CLUSTER_9
data,"numpy.pad(data,padding,mode='constant',constant_values=1)",CLUSTER_4,CLUSTER_11
labels,"numpy.loadtxt(labels_file,str,delimiter='\t')",CLUSTER_4,CLUSTER_11
mu,numpy.load(caffe_root+'python/caffe/imagenet/ilsvrc_2012_mean.npy'),CLUSTER_4,CLUSTER_11
_,"matplotlib.pyplot.hist(feat.flat[feat.flat>0],bins=100)",CLUSTER_4,CLUSTER_11
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
sss,sklearn.linear_model.Perceptron(),CLUSTER_5,CLUSTER_10
classifier,sklearn.svm.SVC(),CLUSTER_5,CLUSTER_10
df,"pandas.read_csv('the-counted-2015.csv',encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
sbj_monthly_feats,"pandas.DataFrame(deathdates[['artistname','deathmonth']])",CLUSTER_11,CLUSTER_12
res,pandas.DataFrame(),CLUSTER_11,CLUSTER_12
ctrl_features,"pandas.DataFrame(ctrl_list,columns=['ctrl_name'])",CLUSTER_11,CLUSTER_12
res,pandas.concat([ctrl_features.reset_index(),CLUSTER_11,CLUSTER_12
sbj_reviews,pandas.read_csv(f_sbj_reviews),CLUSTER_11,CLUSTER_12
ctl_reviews,pandas.read_csv(f_ctl_reviews),CLUSTER_11,CLUSTER_12
sbj_reviews['reviewTime'],pandas.to_datetime(sbj_reviews['strReviewTime']),CLUSTER_11,CLUSTER_12
sbj_reviews['deathdate'],pandas.to_datetime(sbj_reviews['deathdate']),CLUSTER_11,CLUSTER_12
ctl_reviews['reviewTime'],pandas.to_datetime(ctl_reviews['strReviewTime']),CLUSTER_11,CLUSTER_12
diff,numpy.linalg.norm(np.array(feature),CLUSTER_11,CLUSTER_12
fig,"matplotlib.pyplot.figure(figsize=(30,10)",CLUSTER_6,CLUSTER_11
ax,"matplotlib.pyplot.subplot(1,batch_size,i+1)",CLUSTER_6,CLUSTER_11
img,numpy.squeeze(images[idx]),CLUSTER_6,CLUSTER_11
image,"numpy.transpose(image,(1,2,0)",CLUSTER_6,CLUSTER_11
x,"numpy.array([
[0,1,0.5,10],
[2,2.5,1,-8],
[4,0,5,6],
[15,1,2,3]],dtype=np.float32)",CLUSTER_2,CLUSTER_7
avg_temperature,"numpy.mean(data,axis=0)",CLUSTER_1,CLUSTER_10
data,"numpy.loadtxt(fname='data/weather-01.csv',delimiter=',')",CLUSTER_1,CLUSTER_10
image,matplotlib.pyplot.imshow(data),CLUSTER_1,CLUSTER_10
min_plot,matplotlib.pyplot.plot(min_temperature),CLUSTER_1,CLUSTER_10
max_plot,matplotlib.pyplot.plot(max_temperature),CLUSTER_1,CLUSTER_10
blank,"numpy.zeros((1,1)",CLUSTER_3,CLUSTER_6
blank,"numpy.zeros((1,1)",CLUSTER_3,CLUSTER_6
df_metrics,"pandas.DataFrame(columns=['ARI_Louvain','ARI_kmeans','ARI_HC',
'AMI_Louvain','AMI_kmeans','AMI_HC',
'Homogeneity_Louvain','Homogeneity_kmeans','Homogeneity_HC'])",CLUSTER_5,CLUSTER_1
adata.obs['kmeans'],"pandas.Series(kmeans.labels_,index=adata.obs.index)",CLUSTER_5,CLUSTER_1
adata.obs['hc'],"pandas.Series(hc.labels_,index=adata.obs.index)",CLUSTER_5,CLUSTER_1
metadata,"pandas.read_csv('./input/metadata.tsv',sep='\t',index_col=0)",CLUSTER_5,CLUSTER_1
kmeans,"sklearn.cluster.KMeans(n_clusters=num_clusters,random_state=2019)",CLUSTER_5,CLUSTER_1
hc,sklearn.cluster.AgglomerativeClustering(n_clusters=num_clusters),CLUSTER_5,CLUSTER_1
gross['release_year'],pandas.DatetimeIndex(gross['release_date']),CLUSTER_7,CLUSTER_1
genre_dummies,"pandas.get_dummies(gross['genre'],drop_first=True)",CLUSTER_7,CLUSTER_1
bs_dummies,pandas.get_dummies(bs_genre),CLUSTER_7,CLUSTER_1
gross,"pandas.read_csv('datasets/disney_movies_total_gross.csv',parse_dates=['release_date'])",CLUSTER_7,CLUSTER_1
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_1
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_1
inds,"numpy.arange(0,len(gross['genre'])",CLUSTER_7,CLUSTER_1
bs_action_reps,numpy.empty(size),CLUSTER_7,CLUSTER_1
bs_adventure_reps,numpy.empty(size),CLUSTER_7,CLUSTER_1
confidence_interval_action,"numpy.percentile(bs_action_reps,[2.5,97.5])",CLUSTER_7,CLUSTER_1
confidence_interval_adventure,"numpy.percentile(bs_adventure_reps,[2.5,97.5])",CLUSTER_7,CLUSTER_1
df_gini_income,"pandas.read_excel(""gini_income.xlsx"")",CLUSTER_12,CLUSTER_3
df_gini_expenditure,"pandas.read_excel(""gnini_expenditure.xls"")",CLUSTER_12,CLUSTER_3
df_gini_expenditure2,"pandas.read_excel(""gnini_expenditure.xls"",""เขตพื้นที่"")",CLUSTER_12,CLUSTER_3
gdp_percapita,"pandas.read_excel(""GDP_per_capita_thb.xlsx"")",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_12,CLUSTER_3
self.metric,"sklearn.metrics.roc_auc_score(self.y_true,self.y_score)",CLUSTER_10,CLUSTER_4
price,numpy.zeros(days),CLUSTER_11,CLUSTER_3
shock,numpy.zeros(days),CLUSTER_11,CLUSTER_3
drift,numpy.zeros(days),CLUSTER_11,CLUSTER_3
simulations,numpy.zeros(runs),CLUSTER_11,CLUSTER_3
q,"numpy.percentile(simulations,1)",CLUSTER_11,CLUSTER_3
returns_fig,seaborn.PairGrid(tech_rets.dropna(),CLUSTER_11,CLUSTER_3
returns_fig,seaborn.PairGrid(closing_df),CLUSTER_11,CLUSTER_3
start,"datetime.datetime(end.year-1,end.month,end.day)",CLUSTER_11,CLUSTER_3
end,datetime.datetime.now(),CLUSTER_11,CLUSTER_3
Y_A_06M,numpy.genfromtxt('Y_A_06M.txt'),CLUSTER_12,CLUSTER_10
Y_M_06M,numpy.genfromtxt('Y_M_06M.txt'),CLUSTER_12,CLUSTER_10
Y_D_06M,numpy.genfromtxt('Y_D_06M.txt'),CLUSTER_12,CLUSTER_10
ShR_06M,numpy.genfromtxt('ShR_06M.txt'),CLUSTER_12,CLUSTER_10
Y_A_12M,numpy.genfromtxt('Y_A_12M.txt'),CLUSTER_12,CLUSTER_10
Y_M_12M,numpy.genfromtxt('Y_M_12M.txt'),CLUSTER_12,CLUSTER_10
Y_D_12M,numpy.genfromtxt('Y_D_12M.txt'),CLUSTER_12,CLUSTER_10
ShR_12M,numpy.genfromtxt('ShR_12M.txt'),CLUSTER_12,CLUSTER_10
thresholds,numpy.arange(np.min(decision_score),CLUSTER_5,CLUSTER_10
y_predict,"numpy.array(decision_score>=threshold,dtype='int')",CLUSTER_5,CLUSTER_10
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=666)",CLUSTER_5,CLUSTER_10
log_reg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
"precisions,recalls,thresholds","sklearn.metrics.precision_recall_curve(y_test,decision_score)",CLUSTER_5,CLUSTER_10
iris,"pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data',names=['sepal_length','sepal_width','petal_length','petal_width','label'])",CLUSTER_8,CLUSTER_1
sel,sklearn.feature_selection.VarianceThreshold(threshold=.5),CLUSTER_8,CLUSTER_1
X_sb,"sklearn.feature_selection.SelectKBest(chi2,k=2)",CLUSTER_8,CLUSTER_1
X_sp,"sklearn.feature_selection.SelectPercentile(chi2,percentile=50)",CLUSTER_8,CLUSTER_1
X_sp,"sklearn.feature_selection.SelectPercentile(chi2,percentile=75)",CLUSTER_8,CLUSTER_1
clf,"sklearn.svm.LinearSVC(C=0.01,penalty=""l1"",dual=False)",CLUSTER_8,CLUSTER_1
model,"sklearn.feature_selection.SelectFromModel(clf,prefit=True)",CLUSTER_8,CLUSTER_1
r,"re.findall(val,data)",CLUSTER_10,CLUSTER_4
dir,"os.listdir(""2018"")",CLUSTER_10,CLUSTER_12
x,"numpy.arange(0.,30.0)",CLUSTER_3,CLUSTER_10
train_X,"numpy.float32(np.linspace(-1,1,100)",CLUSTER_2,CLUSTER_7
train_X,"numpy.linspace(-1,1,100)",CLUSTER_2,CLUSTER_7
json_parsed,json.loads(json_str),CLUSTER_10,CLUSTER_12
start_date,"datetime.datetime.strptime(START_DATE,'%Y-%m-%d')",CLUSTER_10,CLUSTER_12
end_date,"datetime.datetime.strptime(END_DATE,'%Y-%m-%d')",CLUSTER_10,CLUSTER_12
"defdatetime_gen_fn(start_date,end_date,delta",datetime.timedelta(days=1),CLUSTER_10,CLUSTER_12
epoch_list,numpy.arange(max_epoch+1),CLUSTER_3,CLUSTER_10
"f,axarr","matplotlib.pyplot.subplots(2,2,figsize=(15,10)",CLUSTER_3,CLUSTER_10
"f,axarr","matplotlib.pyplot.subplots(2,1,figsize=(15,10)",CLUSTER_3,CLUSTER_10
x,"numpy.expand_dims(x,axis=0)",CLUSTER_12,CLUSTER_9
twtr_auth,json.load(f),CLUSTER_9,CLUSTER_12
c,collections.Counter(item),CLUSTER_9,CLUSTER_12
c,collections.Counter(data),CLUSTER_9,CLUSTER_12
df,"pandas.DataFrame([[screen_name,tweet_ID,text]],columns=['screen_name','tweet_ID','text'])",CLUSTER_9,CLUSTER_12
df,"pandas.DataFrame(columns=['screen_name','tweet_ID','text'])",CLUSTER_9,CLUSTER_12
integration,"scipy.integrate.dblquad(f,0,2/4,p,q)",CLUSTER_1,CLUSTER_9
"a,b","scipy.integrate.quad(invexp,0,np.inf)",CLUSTER_1,CLUSTER_9
x,"numpy.arange(-10,10,0.1)",CLUSTER_1,CLUSTER_9
arr,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
arr,"numpy.array([[3,2],[6,4]])",CLUSTER_1,CLUSTER_9
arr,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
arr,"numpy.array([[3,2],[6,4]])",CLUSTER_1,CLUSTER_9
arr,numpy.array(),CLUSTER_1,CLUSTER_9
iarr,scipy.linalg.inv(arr),CLUSTER_1,CLUSTER_9
b,scipy.linalg.eigvals(a),CLUSTER_1,CLUSTER_9
ascent,scipy.misc.ascent(),CLUSTER_1,CLUSTER_9
panda,scipy.misc.face(),CLUSTER_1,CLUSTER_9
panda_rotate,"scipy.ndimage.rotate(panda,90)",CLUSTER_1,CLUSTER_9
panda_rotate,"scipy.ndimage.rotate(panda,120)",CLUSTER_1,CLUSTER_9
result,"scipy.ndimage.zoom(ascent,3.0)",CLUSTER_1,CLUSTER_9
result,"scipy.ndimage.zoom(ascent,5.0)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
"cap_handle,","matplotlib.pyplot.plot(tp_pivot['Capomulin'],color='red',marker='o',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle1,","matplotlib.pyplot.plot(tp_pivot['Capomulin'],color='red',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle,","matplotlib.pyplot.plot(tp_pivot['Infubinol'],color='blue',marker='^',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle1,","matplotlib.pyplot.plot(tp_pivot['Infubinol'],color='blue',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle,","matplotlib.pyplot.plot(tp_pivot['Ketapril'],color='green',marker='s',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle1,","matplotlib.pyplot.plot(tp_pivot['Ketapril'],color='green',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle,","matplotlib.pyplot.plot(tp_pivot['Placebo'],color='black',marker='D',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle1,","matplotlib.pyplot.plot(tp_pivot['Placebo'],color='black',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle_met,","matplotlib.pyplot.plot(met_pivot['Capomulin'],color='red',marker='o',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle1_met,","matplotlib.pyplot.plot(met_pivot['Capomulin'],color='red',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle_met,","matplotlib.pyplot.plot(met_pivot['Infubinol'],color='blue',marker='^',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle1_met,","matplotlib.pyplot.plot(met_pivot['Infubinol'],color='blue',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle_met,","matplotlib.pyplot.plot(met_pivot['Ketapril'],color='green',marker='s',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle1_met,","matplotlib.pyplot.plot(met_pivot['Ketapril'],color='green',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle_met,","matplotlib.pyplot.plot(met_pivot['Placebo'],color='black',marker='D',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle1_met,","matplotlib.pyplot.plot(met_pivot['Placebo'],color='black',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle_mouse,","matplotlib.pyplot.plot(mouse_pivot['Capomulin'],color='red',marker='o',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle1_mouse,","matplotlib.pyplot.plot(mouse_pivot['Capomulin'],color='red',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle_mouse,","matplotlib.pyplot.plot(mouse_pivot['Infubinol'],color='blue',marker='^',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle1_mouse,","matplotlib.pyplot.plot(mouse_pivot['Infubinol'],color='blue',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle_mouse,","matplotlib.pyplot.plot(mouse_pivot['Ketapril'],color='green',marker='s',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle1_mouse,","matplotlib.pyplot.plot(mouse_pivot['Ketapril'],color='green',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle_mouse,","matplotlib.pyplot.plot(mouse_pivot['Placebo'],color='black',marker='D',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle1_mouse,","matplotlib.pyplot.plot(mouse_pivot['Placebo'],color='black',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
gb_drug_timepoint_mean_df,pandas.DataFrame(gb_drug_timepoint_mean),CLUSTER_1,CLUSTER_3
tv3_sem_df,pandas.DataFrame(tv3_sem),CLUSTER_1,CLUSTER_3
met_sit_df,pandas.DataFrame(met_sit_ft),CLUSTER_1,CLUSTER_3
met_sit_sem_df,pandas.DataFrame(met_sit_ft_sem),CLUSTER_1,CLUSTER_3
mouse_count_df,pandas.DataFrame(mouse_count_ft),CLUSTER_1,CLUSTER_3
drug_perc_change,"pandas.DataFrame({""Drugs"":[""Capomulin"",""Infubinol"",""Ketapril"",""Placebo""],""PercentChanges"":[cap_perc_change,inf_perc_change,ket_perc_change,pla_perc_change]})",CLUSTER_1,CLUSTER_3
comb_data_df,"pandas.merge(ctd,mdd,on=""MouseID"",how=""outer"")",CLUSTER_1,CLUSTER_3
mdd,pandas.read_csv(mouse_drug_data_to_load),CLUSTER_1,CLUSTER_3
ctd,pandas.read_csv(clinical_trial_data_to_load),CLUSTER_1,CLUSTER_3
x_axis,numpy.arange(len(drugs_pt),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('cleaned_data.zip'),CLUSTER_1,CLUSTER_3
match_arr,numpy.array(match_df[j]),CLUSTER_7,CLUSTER_8
x_1,"numpy.linspace(f_l_1,f_r_1,1500)",CLUSTER_7,CLUSTER_8
x_2,"numpy.linspace(f_l_2,f_r_2,1500)",CLUSTER_7,CLUSTER_8
x_1_2,"numpy.linspace(f_l_1_2,f_r_1_2,1500)",CLUSTER_7,CLUSTER_8
x_test,"numpy.linspace(-9,-1,100)",CLUSTER_7,CLUSTER_8
m_x,numpy.linspace(m_mean-(5*m_std),CLUSTER_7,CLUSTER_8
nm_x,numpy.linspace(nm_mean-(5*nm_std),CLUSTER_7,CLUSTER_8
>>>x,"numpy.linspace(-2,2,num=20)",CLUSTER_7,CLUSTER_8
exp_energies,"numpy.loadtxt('EXPERIMENT_AME2016.dat',usecols=(3,4,5)",CLUSTER_7,CLUSTER_8
"hist,bins","numpy.histogram(bin_count,bins=i,density=True)",CLUSTER_7,CLUSTER_8
"histogram_1,bins_1","numpy.histogram(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
"histogram_2,bins_2","numpy.histogram(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
"histogram_1,bins_1","numpy.histogram(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
"histogram_2,bins_2","numpy.histogram(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
"histogram_1,bins_1","numpy.histogram(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
"histogram_2,bins_2","numpy.histogram(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
edges_1,"numpy.histogram_bin_edges(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
edges_2,"numpy.histogram_bin_edges(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
edges_1,"numpy.histogram_bin_edges(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
edges_2,"numpy.histogram_bin_edges(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
edges_1,"numpy.histogram_bin_edges(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
edges_2,"numpy.histogram_bin_edges(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
e_df,pandas.DataFrame(exp_energies),CLUSTER_7,CLUSTER_8
match_e_df,pandas.DataFrame(columns=e_df.columns),CLUSTER_7,CLUSTER_8
match_df,pandas.DataFrame(columns=df.columns),CLUSTER_7,CLUSTER_8
no_match_df,pandas.DataFrame(columns=df.columns),CLUSTER_7,CLUSTER_8
df_normalized,pandas.DataFrame(x_scaled),CLUSTER_7,CLUSTER_8
df1_normalized,pandas.DataFrame(df1_scaled),CLUSTER_7,CLUSTER_8
df2_normalized,pandas.DataFrame(df2_scaled),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('dme_LO.csv'),CLUSTER_7,CLUSTER_8
>>>y_int,"scipy.integrate.cumtrapz(y,x,initial=0)",CLUSTER_7,CLUSTER_8
y_int,"scipy.integrate.simps(b,a)",CLUSTER_7,CLUSTER_8
I_1,"scipy.integrate.quad(KDEpdf_1,f_l_1,f_r_1)",CLUSTER_7,CLUSTER_8
I_2,"scipy.integrate.quad(KDEpdf_2,f_l_2,f_r_2)",CLUSTER_7,CLUSTER_8
I_1_2,"scipy.integrate.quad(min_of_each,f_l_1_2,f_r_1_2)",CLUSTER_7,CLUSTER_8
m_pdf,"scipy.integrate.quad(pdf_func,-np.inf,np.inf,args=(m_mean,m_std)",CLUSTER_7,CLUSTER_8
nm_pdf,"scipy.integrate.quad(pdf_func,-np.inf,np.inf,args=(m_mean,m_std)",CLUSTER_7,CLUSTER_8
ovl,"scipy.integrate.quad(ovl_eq,-np.inf,np.inf,args=(m_mean,m_std,nm_mean,nm_std)",CLUSTER_7,CLUSTER_8
rv,scipy.stats.norm(),CLUSTER_7,CLUSTER_8
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
importances,"pandas.Series(rf.feature_importances_,X_train.columns)",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(file,parse_dates=True,keep_date_col=True,low_memory=False,nrows=4000000)",CLUSTER_7,CLUSTER_5
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y)",CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.make_pipeline(
ce.OrdinalEncoder()",CLUSTER_7,CLUSTER_5
processor,"sklearn.pipeline.make_pipeline(
ce.OrdinalEncoder()",CLUSTER_7,CLUSTER_5
transformers,"sklearn.pipeline.make_pipeline(
ce.OrdinalEncoder()",CLUSTER_7,CLUSTER_5
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=42,n_jobs=-1)",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""./train_downsampled.csv"")",CLUSTER_11,CLUSTER_5
df,"pandas.read_csv(""./feature_engineered_data_1.csv"",delimiter='\t')",CLUSTER_11,CLUSTER_5
arr,numpy.array([f_list]),CLUSTER_11,CLUSTER_5
stdev,numpy.std(arr),CLUSTER_11,CLUSTER_5
clf,"sklearn.svm.SVC(C=0.1,kernel='rbf')",CLUSTER_11,CLUSTER_5
clf,"sklearn.svm.SVC(C=1.0,kernel='linear')",CLUSTER_11,CLUSTER_5
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_11,CLUSTER_5
prfs_result,"sklearn.metrics.precision_recall_fscore_support(test_y,predict,average='binary')",CLUSTER_11,CLUSTER_5
prfs_result,"sklearn.metrics.precision_recall_fscore_support(test_y,predict,average='binary')",CLUSTER_11,CLUSTER_5
prfs_result,"sklearn.metrics.precision_recall_fscore_support(test_y.values,predict,average='binary')",CLUSTER_11,CLUSTER_5
start,time.time(),CLUSTER_11,CLUSTER_5
end,time.time(),CLUSTER_11,CLUSTER_5
start,time.time(),CLUSTER_11,CLUSTER_5
end,time.time(),CLUSTER_11,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_11,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_11,CLUSTER_5
glacier,"pandas.DataFrame(
{'name':'UpperGrindelwaldGlacier',
'lon':8.11933,
'lat':46.6143},index=['UGG'])",CLUSTER_8,CLUSTER_4
histalp,"pandas.DataFrame(
{'name':'HistAlpreferencelocation',
'lon':8.08333333333175,
'lat':46.58333333333195},index=['HISTALP'])",CLUSTER_8,CLUSTER_4
stations,"pandas.read_csv(path,index_col=0)",CLUSTER_8,CLUSTER_4
stations,"pandas.read_csv(path,index_col=0)",CLUSTER_8,CLUSTER_4
precip_avg_slf,"pandas.read_csv(path,index_col=0,squeeze=True,names=['yearly_precip'])",CLUSTER_8,CLUSTER_4
stations,"pandas.read_csv(path,index_col=0)",CLUSTER_8,CLUSTER_4
clients,numpy.transpose(client_data),CLUSTER_7,CLUSTER_5
minimum_price,pandas.Series(prices),CLUSTER_7,CLUSTER_5
data,pandas.read_csv('housing.csv'),CLUSTER_7,CLUSTER_5
score,"sklearn.metrics.r2_score(y_true,y_predict)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_5
scoring_fnc,sklearn.metrics.make_scorer(performance_metric),CLUSTER_7,CLUSTER_5
regressor,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_5
grid,"sklearn.model_selection.GridSearchCV(regressor,param_grid=params,scoring=scoring_fnc,cv=cv_sets)",CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(ncols=2),CLUSTER_7,CLUSTER_5
gmm,sklearn.mixture.BayesianGaussianMixture(n_components=2),CLUSTER_7,CLUSTER_5
gmm,sklearn.mixture.BayesianGaussianMixture(n_components=2),CLUSTER_7,CLUSTER_5
f_score,"sklearn.metrics.fbeta_score(real_edge,A.flatten()",CLUSTER_7,CLUSTER_5
f_score,"sklearn.metrics.fbeta_score(real_edge,A.flatten()",CLUSTER_7,CLUSTER_5
core_samples,"numpy.zeros_like(labels,dtype=bool)",CLUSTER_7,CLUSTER_5
core_samples,"numpy.zeros_like(labels,dtype=bool)",CLUSTER_7,CLUSTER_5
var1,"numpy.cumsum(np.round(pca.explained_variance_ratio_,decimals=4)",CLUSTER_7,CLUSTER_5
col,"numpy.linspace(0,1,len(unique_labels)",CLUSTER_7,CLUSTER_5
unique_labels,numpy.unique(labels),CLUSTER_7,CLUSTER_5
unique_labels,numpy.unique(labels),CLUSTER_7,CLUSTER_5
my_scaled_data_transformed_pd,pandas.DataFrame(my_scaled_data_transformed),CLUSTER_7,CLUSTER_5
DB_PCA_df,"pandas.DataFrame(DB_PCA,columns=[""ClusterLabel"",""Unlabelled"",""Blast"",""Healthy""])",CLUSTER_7,CLUSTER_5
DB_PCA_df,"pandas.DataFrame(DB_PCA,columns=[""ClusterLabel"",""Unlabelled"",""Blast"",""Healthy""])",CLUSTER_7,CLUSTER_5
my_scaled_data_transformed_pd_meta,"pandas.concat([my_scaled_data_transformed_pd,my_data[meta_headers]],axis=1)",CLUSTER_7,CLUSTER_5
DB_PCA_df_melted,"pandas.melt(DB_PCA_df,value_vars=[""Unlabelled"",""Blast"",""Healthy""],id_vars=""ClusterLabel"")",CLUSTER_7,CLUSTER_5
tsne_db_df_50_melted,"pandas.melt(tsne_db_df_50,value_vars=[""Unlabelled"",""Blast"",""Healthy""],id_vars=""ClusterLabel"")",CLUSTER_7,CLUSTER_5
DB_PCA_df_melted,"pandas.melt(DB_PCA_df,value_vars=[""Unlabelled"",""Blast"",""Healthy""],id_vars=""ClusterLabel"")",CLUSTER_7,CLUSTER_5
my_data,"pandas.read_csv(filename,index_col=0)",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(hue=""variable"",y=""value"",x=""ClusterLabel"",data=DB_PCA_df_melted,log='y')",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(hue=""variable"",y=""value"",x=""ClusterLabel"",data=tsne_db_df_50_melted,log='y')",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(hue=""variable"",y=""value"",x=""ClusterLabel"",data=DB_PCA_df_melted,log='y')",CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=5),CLUSTER_7,CLUSTER_5
my_scaled_data,sklearn.preprocessing.scale(my_data[my_data_data_headers]),CLUSTER_7,CLUSTER_5
dbsc,"sklearn.cluster.DBSCAN(eps=.6,min_samples=10)",CLUSTER_7,CLUSTER_5
dbsc,"sklearn.cluster.DBSCAN(eps=eps_,min_samples=10,algorithm=algo,metric=met)",CLUSTER_7,CLUSTER_5
rot,"numpy.linspace(0,np.pi/6)",CLUSTER_3,CLUSTER_6
rot,"numpy.linspace(0,np.pi)",CLUSTER_3,CLUSTER_6
ft_noise,numpy.load(MODEL+'_ft_noise.npy'),CLUSTER_3,CLUSTER_6
ft_l2_m,numpy.load(MODEL+'_ft_bim_l2_mcls_100k.npy'),CLUSTER_3,CLUSTER_6
ft_l2_t,numpy.load(MODEL+'_ft_bim_l2_one_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_l2_t_all,numpy.load(MODEL+'_ft_bim_l2_all_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_noise,numpy.load(MODEL+'_ft_noise.npy'),CLUSTER_3,CLUSTER_6
ft_inf,numpy.load(MODEL+'_ft_bim_inf_mcls.npy'),CLUSTER_3,CLUSTER_6
ft_inf_t,numpy.load(MODEL+'_ft_bim_inf_one_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_inf_t_all,numpy.load(MODEL+'_ft_bim_inf_all_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_adef_wd0_mcls,numpy.load(path_to_data+'wd_0e+00_adef_data_to_plot_fullbatch_mcls.npy'),CLUSTER_3,CLUSTER_6
ft_adef_wd1_mcls,numpy.load(path_to_data+'wd_1e-02_adef_data_to_plot_fullbatch_mcls.npy'),CLUSTER_3,CLUSTER_6
ft_adef_wd0_tgt,numpy.load(path_to_data+'wd_0e+00_adef_data_to_plot_fullbatch_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_adef_wd1_tgt,numpy.load(path_to_data+'wd_1e-02_adef_data_to_plot_fullbatch_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_rot_wd,"numpy.load(os.path.join(PATH,MODEL+""_ft_rot30_test.npy"")",CLUSTER_3,CLUSTER_6
ft_rot_no_wd,"numpy.load(os.path.join(PATH,MODEL+""_ft_rot30_test.npy"")",CLUSTER_3,CLUSTER_6
ft_rot_wd,"numpy.load(os.path.join(PATH,MODEL+""_ft_rot180_test.npy"")",CLUSTER_3,CLUSTER_6
ft_rot_no_wd,"numpy.load(os.path.join(PATH,MODEL+""_ft_rot180_test.npy"")",CLUSTER_3,CLUSTER_6
Y_test,numpy.vstack((np.arange(X_test.shape[0]),CLUSTER_5,CLUSTER_6
X_train,"numpy.genfromtxt('data/X_train.txt',delimiter=None)",CLUSTER_5,CLUSTER_6
Y_train,"numpy.genfromtxt('data/Y_train.txt',delimiter=None)",CLUSTER_5,CLUSTER_6
X_test,"numpy.genfromtxt('data/X_test.txt',delimiter=None)",CLUSTER_5,CLUSTER_6
expression,"pandas.DataFrame(scipy.io.mmread(data_path+""count.mtx"")",CLUSTER_5,CLUSTER_9
gene_dataset_name,"pandas.DataFrame(gene_names,columns=[""ENSG""])",CLUSTER_5,CLUSTER_9
raw_qc,"pandas.concat((raw_qc_8,raw_qc_4)",CLUSTER_5,CLUSTER_9
exp_data,"pandas.merge(exp_data_1,\
exp_data_2,how=""inner"",on=""GS"")",CLUSTER_5,CLUSTER_9
exp_data,"pandas.merge(exp_data,\
exp_data_3,how=""inner"",on=""GS"")",CLUSTER_5,CLUSTER_9
ordered_corres,"pandas.merge(gene_dataset_name,\
gene_correspondance,how=""inner"",on=""ENSG"",left_index=True)",CLUSTER_5,CLUSTER_9
micro_array_result,"pandas.merge(ordered_corres,exp_data,how=""inner"",on=""GS"",right_index=True)",CLUSTER_5,CLUSTER_9
exp_data_1,"pandas.read_csv(data_path+""gene_data/GSE8835_CD4_CD8.tab"",delimiter=""\t"")",CLUSTER_5,CLUSTER_9
exp_data_2,"pandas.read_csv(data_path+""gene_data/GSE29618_Bcells_mDC.tab"",delimiter=""\t"")",CLUSTER_5,CLUSTER_9
exp_data_3,"pandas.read_csv(data_path+""gene_data/GSE22886_Bcells_mDC.tab"",delimiter=""\t"")",CLUSTER_5,CLUSTER_9
gene_correspondance,"pandas.read_csv(data_path+""de/new_rownames.tab"",delimiter=""\t"")",CLUSTER_5,CLUSTER_9
design,"pandas.read_csv(data_path+""design.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
normalized_qc,"pandas.read_csv(data_path+""full_qc.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
barcodes,"pandas.read_csv(data_path+""barcodes.csv"",index_col=1)",CLUSTER_5,CLUSTER_9
batch,"pandas.read_csv(data_path+""batch.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
raw_qc_8,"pandas.read_csv(data_path+""molecule_qc_8k.txt"",index_col=0,sep=""\t"")",CLUSTER_5,CLUSTER_9
raw_qc_4,"pandas.read_csv(data_path+""molecule_qc_4k.txt"",index_col=0,sep=""\t"")",CLUSTER_5,CLUSTER_9
bio,"pandas.read_csv(data_path+""bio.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
micro_array_result,"pandas.read_csv(data_path+""de/gene_info.csv"")",CLUSTER_5,CLUSTER_9
gene_names,"numpy.array(pd.read_csv(data_path+""michael_gene_names.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
p,numpy.array(stats.p_adjust(FloatVector(p),CLUSTER_5,CLUSTER_9
p,numpy.array(stats.p_adjust(FloatVector(p),CLUSTER_5,CLUSTER_9
p,numpy.array(stats.p_adjust(FloatVector(p),CLUSTER_5,CLUSTER_9
score-,"numpy.mean(np.sum(data_test,axis=-1)",CLUSTER_5,CLUSTER_9
p_ZIFA,"numpy.exp(-zifa.params[""decay_coef""]*X_ZIFA_log**2)",CLUSTER_5,CLUSTER_9
data_train,numpy.log(1+X_train),CLUSTER_5,CLUSTER_9
data_test,numpy.log(1+X_test),CLUSTER_5,CLUSTER_9
plt.axhline(y,numpy.log10(0.05),CLUSTER_5,CLUSTER_9
plt.axhline(y,numpy.log10(0.05),CLUSTER_5,CLUSTER_9
de_expression,numpy.copy(expression.as_matrix(),CLUSTER_5,CLUSTER_9
list_clusters,"numpy.unique(bio[""x""])",CLUSTER_5,CLUSTER_9
"_,batch","numpy.unique(batch,return_inverse=True)",CLUSTER_5,CLUSTER_9
c_train,"numpy.loadtxt(data_path+""label_train"")",CLUSTER_5,CLUSTER_9
c_test,"numpy.loadtxt(data_path+""label_test"")",CLUSTER_5,CLUSTER_9
b_train,"numpy.loadtxt(data_path+""b_train"")",CLUSTER_5,CLUSTER_9
b_test,"numpy.loadtxt(data_path+""b_test"")",CLUSTER_5,CLUSTER_9
X_train,"numpy.load(data_path+""de/data_train.npy"")",CLUSTER_5,CLUSTER_9
X_test,"numpy.load(data_path+""de/data_test.npy"")",CLUSTER_5,CLUSTER_9
r_train,"numpy.load(data_path+""design_train.npy"")",CLUSTER_5,CLUSTER_9
r_test,"numpy.load(data_path+""design_test.npy"")",CLUSTER_5,CLUSTER_9
mean_MAGIC,"numpy.load(data_path+""imputation/X_zero_MAGIC.npy"")",CLUSTER_5,CLUSTER_9
r,"requests.get(""https://kr-geschaefte.zug.ch/gast/geschaefte?commit=Filtern&geschaeft_filter%5Babgeschlossen_bis%5D=&geschaeft_filter%5Babgeschlossen_von%5D=&geschaeft_filter%5Barten_refs%5D%5B%5D=&geschaeft_filter%5Beingereicht_bis%5D=&geschaeft_filter%5Beingereicht_von%5D=&geschaeft_filter%5Bfrist_bis%5D=&geschaeft_filter%5Bhistorische_staende_refs%5D%5B%5D=&geschaeft_filter%5Bkommissionen_refs%5D%5B%5D=&geschaeft_filter%5Bstaende_refs%5D%5B%5D=&geschaeft_filter%5Bstatus_ids%5D%5B%5D=haengig&geschaeft_filter%5Bstatus_ids%5D%5B%5D=abgeschlossen&geschaeft_filter%5Bstatus_ids%5D%5B%5D=&geschaeft_filter%5Btitel%5D=&geschaeft_filter%5Bzustaendig_refs%5D%5B%5D=&page=1&utf8=✓"")",CLUSTER_9,CLUSTER_2
r,requests.get(url+str(seite),CLUSTER_9,CLUSTER_2
rg,"requests.get(""https://kr-geschaefte.zug.ch/gast/geschaefte/1997"")",CLUSTER_9,CLUSTER_2
rg,requests.get(geschaeft),CLUSTER_9,CLUSTER_2
rp,requests.get(url_p),CLUSTER_9,CLUSTER_2
df_a,pandas.DataFrame(alle_seiten),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(alle_seiten),CLUSTER_9,CLUSTER_2
df_g,pandas.DataFrame(eingang_list),CLUSTER_9,CLUSTER_2
df_g,pandas.DataFrame(eingang_list),CLUSTER_9,CLUSTER_2
df_mit_dat,"pandas.merge(df_a,df_g,how=""left"",on=""GeschäftsNR"")",CLUSTER_9,CLUSTER_2
"df_g[""Einreichedatum""]","pandas.to_datetime(df_g[""Einreichedatum""],format='%d.%m.%Y')",CLUSTER_9,CLUSTER_2
df,"pandas.concat([steam_games,app_id],axis=1,sort=False)",CLUSTER_8,CLUSTER_3
steam_games,"pandas.read_csv('steam_games_all_fields.csv',index_col=1,delimiter='\t')",CLUSTER_8,CLUSTER_3
df['game_ID'],"pandas.to_numeric(df['game_ID'],downcast='signed')",CLUSTER_8,CLUSTER_3
df['number_of_review'],"pandas.to_numeric(df['number_of_review'],downcast='integer')",CLUSTER_8,CLUSTER_3
df['score'],pandas.to_numeric(df['score']),CLUSTER_8,CLUSTER_3
draw_korea_raw_stacked,pandas.DataFrame(draw_korea_raw.stack(),CLUSTER_9,CLUSTER_3
pop,"pandas.merge(pop,draw_korea,how='left',on=['ID'])",CLUSTER_9,CLUSTER_3
pop,"pandas.pivot_table(population,
index=['광역시도','시도'],
columns=['구분'],
values=['인구수','20-39세','65세이상'])",CLUSTER_9,CLUSTER_3
population,"pandas.read_excel('../data/05.population_raw_data.xlsx',header=1)",CLUSTER_9,CLUSTER_3
draw_korea_raw,"pandas.read_excel('../data/05.draw_korea_raw.xlsx',
encoding=""EUC-KR"")",CLUSTER_9,CLUSTER_3
masked_mapdata,numpy.ma.masked_where(np.isnan(mapdata),CLUSTER_9,CLUSTER_3
masked_mapdata,numpy.ma.masked_where(np.isnan(mapdata),CLUSTER_9,CLUSTER_3
masked_mapdata,numpy.ma.masked_where(np.isnan(mapdata),CLUSTER_9,CLUSTER_3
cb,"matplotlib.pyplot.colorbar(shrink=.1,aspect=10)",CLUSTER_9,CLUSTER_3
cb,"matplotlib.pyplot.colorbar(shrink=.1,aspect=10)",CLUSTER_9,CLUSTER_3
geo_str,"json.load(open(geo_path,encoding='utf-8')",CLUSTER_9,CLUSTER_3
boxplot,seaborn.boxplot(data=gpa),CLUSTER_4,CLUSTER_11
mergedGraph,"seaborn.relplot(x=""cs65"",y=""contributions"",
ci=None,kind=""line"",data=mergedDf,aspect=2)",CLUSTER_4,CLUSTER_11
gpa,"pandas.read_csv(""grades.csv"")",CLUSTER_4,CLUSTER_11
piazza,"pandas.read_csv(""piazza.csv"")",CLUSTER_4,CLUSTER_11
gpa,"pandas.read_csv(""grades.csv"")",CLUSTER_4,CLUSTER_11
mergedDf,"pandas.read_csv(""combinedGPAPiazza.csv"")",CLUSTER_4,CLUSTER_11
all_months_data,pandas.DataFrame(),CLUSTER_0,CLUSTER_11
all_months_data,"pandas.concat([df,all_months_data])",CLUSTER_0,CLUSTER_11
df,pandas.read_csv('./Sales_Data/Sales_August_2019.csv'),CLUSTER_0,CLUSTER_11
df,pandas.read_csv('./Sales_Data/'+file),CLUSTER_0,CLUSTER_11
df1,pandas.read_csv('complete_data.csv'),CLUSTER_0,CLUSTER_11
df2['OrderDate'],pandas.to_datetime(df2['OrderDate']),CLUSTER_0,CLUSTER_11
df2['QuantityOrdered'],pandas.to_numeric(df2['QuantityOrdered']),CLUSTER_0,CLUSTER_11
df2['PriceEach'],pandas.to_numeric(df2['PriceEach']),CLUSTER_0,CLUSTER_11
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_11
count,collections.Counter(),CLUSTER_0,CLUSTER_11
patch,matplotlib.pyplot.imshow(frames[0]),CLUSTER_12,CLUSTER_10
data_train,"pandas.read_csv('data/train.csv',dtype=int)",CLUSTER_5,CLUSTER_5
data_test,"pandas.read_csv('data/test.csv',dtype=int)",CLUSTER_5,CLUSTER_5
Tree_model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_5
Tree_models,"sklearn.tree.DecisionTreeClassifier(min_samples_leaf=5,max_depth=12)",CLUSTER_5,CLUSTER_5
tree_model,"sklearn.tree.DecisionTreeClassifier(max_depth=1,class_weight=""balanced"")",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=200,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=300,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=200,max_depth=20,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
conf_mx,sklearn.metrics.confusion_matrix(Tree_model.predict(X_train),CLUSTER_5,CLUSTER_5
conf_mx,sklearn.metrics.confusion_matrix(Tree_model.predict(X_train),CLUSTER_5,CLUSTER_5
gd_sr,"sklearn.model_selection.GridSearchCV(estimator=Tree_model,param_grid=grid_param,scoring='accuracy',cv=5,n_jobs=-1)",CLUSTER_5,CLUSTER_5
gd_sr_ada,"sklearn.model_selection.GridSearchCV(ada_clf,param_grid=param_grid,scoring='accuracy',cv=5,n_jobs=-1)",CLUSTER_5,CLUSTER_5
gd_sr,"sklearn.model_selection.GridSearchCV(estimator=rnd_clf,param_grid=grid_param,scoring='accuracy',cv=5,n_jobs=-1)",CLUSTER_5,CLUSTER_5
gd_sr,"sklearn.model_selection.GridSearchCV(estimator=et_clf,param_grid=grid_param,scoring='accuracy',cv=5,n_jobs=-1)",CLUSTER_5,CLUSTER_5
gb_clf,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=100,learning_rate=0.2,
max_depth=1,random_state=0)",CLUSTER_5,CLUSTER_5
ada_clf,sklearn.ensemble.AdaBoostClassifier(n_estimators=300),CLUSTER_5,CLUSTER_5
ada_clf,sklearn.ensemble.AdaBoostClassifier(base_estimator=tree_model),CLUSTER_5,CLUSTER_5
ada_clf,sklearn.ensemble.AdaBoostClassifier(DecisionTreeClassifier(max_depth=2),CLUSTER_5,CLUSTER_5
all_accuracies,"sklearn.model_selection.cross_val_score(estimator=x,X=X_train,y=y_train,cv=5)",CLUSTER_5,CLUSTER_5
all_accuracies1,"sklearn.model_selection.cross_val_score(estimator=Tree_model,X=X_train,y=y_train,cv=5)",CLUSTER_5,CLUSTER_5
all_accuracies,"sklearn.model_selection.cross_val_score(estimator=ada_clf,X=X_train,y=y_train,cv=5)",CLUSTER_5,CLUSTER_5
et_clf,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=100,max_depth=10,
min_samples_split=2,bootstrap=True,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
et_clf,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=100,max_depth=2,
min_samples_split=2,min_samples_leaf=5,bootstrap=True,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
et_clf,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=300,max_depth=2,
min_samples_split=2,min_samples_leaf=5,bootstrap=True,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
et_clf,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=200,max_depth=20,
min_samples_split=2,min_samples_leaf=5,bootstrap=True,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
coin,"random.randint(0,1)",CLUSTER_3,CLUSTER_10
frame_starts,"numpy.arange(0,num_beats-frame_length,frame_hop)",CLUSTER_4,CLUSTER_11
flat_features,"numpy.reshape(features,(features.shape[0],features.shape[1]*features.shape[2])",CLUSTER_4,CLUSTER_11
flattened_array,"numpy.reshape(framed_array,(framed_array.shape[0],framed_array.shape[1]*framed_array.shape[2])",CLUSTER_4,CLUSTER_11
fftm_patch,numpy.fft.fftshift(np.abs(np.fft.fft2(chroma_patch.transpose(),CLUSTER_4,CLUSTER_11
pca,"sklearn.decomposition.PCA(n_components=20,whiten=True,copy=True)",CLUSTER_4,CLUSTER_11
kd_tree,sklearn.neighbors.KDTree(match_chroma.all_features),CLUSTER_4,CLUSTER_11
face,numpy.asarray(face),CLUSTER_7,CLUSTER_3
faces,numpy.asarray(faces),CLUSTER_7,CLUSTER_3
emotion_label_arg,numpy.argmax(emotion_classifier.predict(gray_face),CLUSTER_7,CLUSTER_3
faces,"numpy.expand_dims(faces,-1)",CLUSTER_7,CLUSTER_3
gray_face,"numpy.expand_dims(gray_face,0)",CLUSTER_7,CLUSTER_3
gray_face,"numpy.expand_dims(gray_face,-1)",CLUSTER_7,CLUSTER_3
emotions,pandas.get_dummies(df['emotion']),CLUSTER_7,CLUSTER_3
df,"pandas.read_csv(""fer2013.csv"")",CLUSTER_7,CLUSTER_3
data,pandas.read_csv('logistic_features.csv'),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_4,CLUSTER_11
labels,numpy.append(np.ones((len(all_positive_tweets),CLUSTER_4,CLUSTER_11
feature,numpy.zeros(len(lexicon),CLUSTER_0,CLUSTER_5
count,collections.Counter(lexicon),CLUSTER_0,CLUSTER_5
dataset,pandas.read_csv('filtered_tweets.csv'),CLUSTER_0,CLUSTER_5
temp,"re.sub(r""[^A-Za-z]"","""",line)",CLUSTER_0,CLUSTER_5
model1,"sklearn.ensemble.RandomForestClassifier(max_depth=None,random_state=0)",CLUSTER_0,CLUSTER_5
model2,"sklearn.svm.LinearSVC(random_state=0,tol=1e-5,max_iter=10000)",CLUSTER_0,CLUSTER_5
model3,"sklearn.ensemble.AdaBoostClassifier(n_estimators=100,random_state=0)",CLUSTER_0,CLUSTER_5
model4,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=[64,256,64],activation='relu',learning_rate='adaptive')",CLUSTER_0,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(dataset,dataset.iloc[:,12],test_size=0.20,random_state=42)",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model1,test_features,y_test,
cmap=plt.cm.Blues,
normalize='true',
values_format='.2g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model1,test_features,y_test,
cmap=plt.cm.Blues,
normalize=None,
values_format='.5g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model2,test_features,y_test,
cmap=plt.cm.Blues,
normalize='true',
values_format='.2g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model2,test_features,y_test,
cmap=plt.cm.Blues,
normalize=None,
values_format='.5g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model3,test_features,y_test,
cmap=plt.cm.Blues,
normalize='true',
values_format='.2g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model3,test_features,y_test,
cmap=plt.cm.Blues,
normalize=None,
values_format='.5g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model4,test_features,y_test,
cmap=plt.cm.Blues,
normalize='true',
values_format='.2g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model4,test_features,y_test,
cmap=plt.cm.Blues,
normalize=None,
values_format='.5g')",CLUSTER_0,CLUSTER_5
fpd,"pandas.concat([flow[0],flow[1],flow[2]])",CLUSTER_1,CLUSTER_9
opd,"pandas.concat([occupancy[0],occupancy[1],occupancy[2]])",CLUSTER_1,CLUSTER_9
spd,"pandas.concat([speed[0],speed[1],speed[2]])",CLUSTER_1,CLUSTER_9
mvpd,"pandas.concat([fpd,spd,opd],axis=1)",CLUSTER_1,CLUSTER_9
resultdf,"pandas.concat([ndf,pdf])",CLUSTER_1,CLUSTER_9
x,"pandas.cut(pdf['chi2'],ws_range)",CLUSTER_1,CLUSTER_9
timestamp,"pandas.read_csv('timestamp.tsv',header=None,sep='\t')",CLUSTER_1,CLUSTER_9
flow,"pandas.read_csv('flow.tsv',header=None,sep='\t')",CLUSTER_1,CLUSTER_9
occupancy,"pandas.read_csv('occupancy.tsv',header=None,sep='\t')",CLUSTER_1,CLUSTER_9
speed,"pandas.read_csv('speed.tsv',header=None,sep='\t')",CLUSTER_1,CLUSTER_9
ws_range,"numpy.arange(0,27780+1,10)",CLUSTER_1,CLUSTER_9
petrol,pandas.read_csv('data/petrol_brent.csv'),CLUSTER_7,CLUSTER_3
petrol['Date'],"pandas.to_datetime(petrol['Date'],format='%d.%m.%Y')",CLUSTER_7,CLUSTER_3
petrol[col],pandas.to_numeric(petrol[col]),CLUSTER_7,CLUSTER_3
petrol['Vol'],pandas.to_numeric(petrol['Vol'].apply(volume_change),CLUSTER_7,CLUSTER_3
petrol['Var_%'],pandas.to_numeric(petrol['Var_%'].apply(var_reformatting),CLUSTER_7,CLUSTER_3
df,pandas.read_csv(csv_path),CLUSTER_6,CLUSTER_0
height,numpy.array(image_arr),CLUSTER_6,CLUSTER_0
width,numpy.array(image_arr),CLUSTER_6,CLUSTER_0
new_img,numpy.array(new_image),CLUSTER_6,CLUSTER_0
orig_img,numpy.array(image_arr),CLUSTER_6,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(16,8)",CLUSTER_6,CLUSTER_0
svc,"sklearn.svm.SVC(gamma=""scale"")",CLUSTER_7,CLUSTER_8
clf,"sklearn.svm.SVC(kernel=""linear"",C=10,gamma=0.001,)",CLUSTER_7,CLUSTER_8
grid_search,sklearn.model_selection.GridSearchCV(svm.SVC(kernel='rbf'),CLUSTER_7,CLUSTER_8
X_train,"pandas.read_csv(""/Users/fahad/project_repo/data/final/X_train.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
y_train,"pandas.read_csv(""/Users/fahad/project_repo/data/final/y_train.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
MSFT_10_X_test,"pandas.read_csv(""/Users/fahad/project_repo/data/final/MSFT/MSFT_10_X_test.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
MSFT_10_y_test,"pandas.read_csv(""/Users/fahad/project_repo/data/final/MSFT/MSFT_10_y_test.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
MSFT_14_X_test,"pandas.read_csv(""/Users/fahad/project_repo/data/final/MSFT/MSFT_14_X_test.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
MSFT_14_y_test,"pandas.read_csv(""/Users/fahad/project_repo/data/final/MSFT/MSFT_14_y_test.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_8
precision,"sklearn.metrics.precision_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
precision,"sklearn.metrics.precision_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
recall,"sklearn.metrics.recall_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
recall,"sklearn.metrics.recall_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
f1,"sklearn.metrics.f1_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
f1,"sklearn.metrics.f1_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
kappa,"sklearn.metrics.cohen_kappa_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
kappa,"sklearn.metrics.cohen_kappa_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
auc,"sklearn.metrics.roc_auc_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
auc,"sklearn.metrics.roc_auc_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
description,"pandas.DataFrame({'shape':[i.shapeforiinall_train],'columns':[i.columns.valuesforiinall_train]},\
index=names)",CLUSTER_4,CLUSTER_8
most_demanded_product_1,pandas.DataFrame(columns=['R'+str(i),CLUSTER_4,CLUSTER_8
d,pandas.DataFrame(columns=['D'+str(i),CLUSTER_4,CLUSTER_8
product_division1,"pandas.DataFrame({'Product_Name':product_name,'Total_Demand':total_demand})",CLUSTER_4,CLUSTER_8
product_division2,"pandas.DataFrame({'Product_Name':product_name2,'Total_Demand':total_demand2})",CLUSTER_4,CLUSTER_8
product_division3,"pandas.DataFrame({'Product_Name':product_name3,'Total_Demand':total_demand3})",CLUSTER_4,CLUSTER_8
final_Data,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
new_data,pandas.DataFrame({str(i),CLUSTER_4,CLUSTER_8
product_wise_capacity,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
new_data_1,pandas.DataFrame({str(i),CLUSTER_4,CLUSTER_8
most_demanded_product_1,"pandas.concat([most_demanded_product_1,d],axis=1)",CLUSTER_4,CLUSTER_8
final_Data,"pandas.concat([final_Data,new_data],axis=0)",CLUSTER_4,CLUSTER_8
product_wise_capacity,"pandas.concat([product_wise_capacity,new_data_1],axis=0)",CLUSTER_4,CLUSTER_8
product_division1,"pandas.concat([product_division1,final_Data],axis=1)",CLUSTER_4,CLUSTER_8
product_division2,"pandas.concat([product_division2,final_Data],axis=1)",CLUSTER_4,CLUSTER_8
product_division3,"pandas.concat([product_division3,final_Data],axis=1)",CLUSTER_4,CLUSTER_8
product_division1,"pandas.concat([product_division1,product_wise_capacity],axis=1)",CLUSTER_4,CLUSTER_8
product_division2,"pandas.concat([product_division2,product_wise_capacity],axis=1)",CLUSTER_4,CLUSTER_8
product_division3,"pandas.concat([product_division3,product_wise_capacity],axis=1)",CLUSTER_4,CLUSTER_8
test_ship_new,"pandas.concat([test_ship1a,test_ship1b,test_ship1c,test_ship2a,test_ship2b,test_ship2c,test_ship3a,test_ship3b,test_ship3c],axis=0)",CLUSTER_4,CLUSTER_8
sample_demand,"pandas.read_csv(os.path.join(sample_root,'demand_forecast.csv')",CLUSTER_4,CLUSTER_8
sample_ship,"pandas.read_csv(os.path.join(sample_root,'shipping_region.csv')",CLUSTER_4,CLUSTER_8
test_demand,"pandas.read_csv(os.path.join(test_root,'demand_forecast.csv')",CLUSTER_4,CLUSTER_8
test_seq,"pandas.read_csv(os.path.join(test_root,'manufacture_sequence.csv')",CLUSTER_4,CLUSTER_8
test_ship,"pandas.read_csv(os.path.join(test_root,'shipping_region.csv')",CLUSTER_4,CLUSTER_8
historical_demand,"pandas.read_csv(os.path.join(train_root,'historical_demand.csv')",CLUSTER_4,CLUSTER_8
production_cost,"pandas.read_csv(os.path.join(train_root,'production_cost.csv')",CLUSTER_4,CLUSTER_8
demand_price,"pandas.read_csv(os.path.join(train_root,'demand_price.csv')",CLUSTER_4,CLUSTER_8
fixed_cost,"pandas.read_csv(os.path.join(train_root,'fixed_cost.csv')",CLUSTER_4,CLUSTER_8
changeover_cost,"pandas.read_csv(os.path.join(train_root,'changeover_cost.csv')",CLUSTER_4,CLUSTER_8
delivery_cost,"pandas.read_csv(os.path.join(train_root,'delivery_cost.csv')",CLUSTER_4,CLUSTER_8
changeover_days,"pandas.read_csv(os.path.join(train_root,'changeover_days.csv')",CLUSTER_4,CLUSTER_8
production_capacity,"pandas.read_csv(os.path.join(train_root,'production_capacity.csv')",CLUSTER_4,CLUSTER_8
test_demand,pandas.read_csv('/home/yash/Desktop/sample_av/demand_forecast.csv'),CLUSTER_4,CLUSTER_8
manufacture_sequence_real,"pandas.read_csv('/home/yash/Downloads/manufacture_sequence2.csv',index_col=None)",CLUSTER_4,CLUSTER_8
total_production,"pandas.read_excel('/home/yash/Downloads/manufacture_sequence2_final.xlsx',sheetname=3)",CLUSTER_4,CLUSTER_8
test_ship_new['Shipping_to_region_quantity'],numpy.floor(test_ship_new['Shipping_to_region_quantity']),CLUSTER_4,CLUSTER_8
non_zero_capacity,numpy.unique(production_capacity.sort_values('Product'),CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_4,CLUSTER_8
start,time.time(),CLUSTER_4,CLUSTER_8
end,time.time(),CLUSTER_4,CLUSTER_8
courses_eng,pandas.read_csv('courses_eng.csv'),CLUSTER_0,CLUSTER_8
reviews_eng_courses,pandas.read_csv('reviews_eng_courses.csv'),CLUSTER_0,CLUSTER_8
regex,"re.compile(""['A-Za-z\-]+"")",CLUSTER_0,CLUSTER_8
"train,test","sklearn.model_selection.train_test_split(balanced,test_size=0.2,random_state=42)",CLUSTER_0,CLUSTER_8
logreg,"sklearn.linear_model.LogisticRegression(n_jobs=1,C=1e5)",CLUSTER_0,CLUSTER_8
cnt,collections.Counter(lemmata),CLUSTER_0,CLUSTER_8
"digits,target",sklearn.datasets.load_digits(return_X_y=True),CLUSTER_5,CLUSTER_10
predictions,numpy.zeros(target_sample.size),CLUSTER_5,CLUSTER_10
indices_of_class,"numpy.concatenate((indices_of_class1[:min_length],indices_of_class2[:min_length])",CLUSTER_5,CLUSTER_10
indices_of_class1,numpy.nonzero(target==class1),CLUSTER_5,CLUSTER_10
indices_of_class2,numpy.nonzero(target==class2),CLUSTER_5,CLUSTER_10
car_sales_filled_train,"pandas.DataFrame(filled_X_train,
columns=[""Make"",""Colour"",""Doors"",""Odometer(KM)",CLUSTER_5,CLUSTER_5
car_sales_filled_test,"pandas.DataFrame(filled_X_test,
columns=[""Make"",""Colour"",""Doors"",""Odometer(KM)",CLUSTER_5,CLUSTER_5
boston_df,"pandas.DataFrame(boston[""data""],columns=boston[""feature_names""])",CLUSTER_5,CLUSTER_5
"boston_df[""target""]","pandas.Series(boston[""target""])",CLUSTER_5,CLUSTER_5
dummies,"pandas.get_dummies(car_sales[[""Make"",""Colour"",""Doors""]])",CLUSTER_5,CLUSTER_5
heart_disease,"pandas.read_csv(""heart-disease.csv"")",CLUSTER_5,CLUSTER_5
car_sales,"pandas.read_csv(""car-sales-extended.csv"")",CLUSTER_5,CLUSTER_5
car_sales_missing,"pandas.read_csv(""car-sales-extended-missing-data.csv"")",CLUSTER_5,CLUSTER_5
car_sales_missing,"pandas.read_csv(""car-sales-extended-missing-data.csv"")",CLUSTER_5,CLUSTER_5
heart_disease,"pandas.read_csv(""heart-disease.csv"")",CLUSTER_5,CLUSTER_5
clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_5,CLUSTER_5
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=i),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(transformed_X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_5
model,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
model,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
one_hot,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
one_hot,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
one_hot,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
one_hot,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
transformer,"sklearn.compose.ColumnTransformer([(""one_hot"",one_hot,categorical_features)",CLUSTER_5,CLUSTER_5
transformer,"sklearn.compose.ColumnTransformer([(""one_hot"",one_hot,categorical_features)",CLUSTER_5,CLUSTER_5
transformer,"sklearn.compose.ColumnTransformer([(""one_hot"",one_hot,categorical_features)",CLUSTER_5,CLUSTER_5
imputer,"sklearn.compose.ColumnTransformer([
(""cat_imputer"",cat_imputer,cat_features)",CLUSTER_5,CLUSTER_5
transformer,"sklearn.compose.ColumnTransformer([(""one_hot"",one_hot,categorical_features)",CLUSTER_5,CLUSTER_5
cat_imputer,"sklearn.impute.SimpleImputer(strategy=""constant"",fill_value=""missing"")",CLUSTER_5,CLUSTER_5
door_imputer,"sklearn.impute.SimpleImputer(strategy=""constant"",fill_value=4)",CLUSTER_5,CLUSTER_5
num_imputer,"sklearn.impute.SimpleImputer(strategy=""mean"")",CLUSTER_5,CLUSTER_5
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.Ridge(),CLUSTER_5,CLUSTER_5
clf,sklearn.svm.LinearSVC(dual=False),CLUSTER_5,CLUSTER_5
relative_value,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
relative_value_by_countries,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
relative_value,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
relative_value_by_countries,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_train),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_train),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_train),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result,pandas.DataFrame(predictions),CLUSTER_4,CLUSTER_8
CATEGORICAL_VARIABLES,pandas.Series(X_full.columns[X_full.apply(lambdax:(type(x.iloc[0]),CLUSTER_4,CLUSTER_8
X_full,"pandas.concat([X,final_test])",CLUSTER_4,CLUSTER_8
X_full,"pandas.concat([X,final_test])",CLUSTER_4,CLUSTER_8
relative_value_by_countries,"pandas.concat([relative_value_by_countries,
relative_value_by_countries_columns],
axis=0)",CLUSTER_4,CLUSTER_8
relative_value_by_countries,"pandas.concat([relative_value_by_countries,
relative_value_by_countries_columns],
axis=0)",CLUSTER_4,CLUSTER_8
X_full,"pandas.get_dummies(X_full,columns=CATEGORICAL_VARIABLES,drop_first=True)",CLUSTER_4,CLUSTER_8
Y,"pandas.read_csv(PATH_DATA+""Y_train.csv"",sep="";"")",CLUSTER_4,CLUSTER_8
X,"pandas.read_csv(PATH_DATA+""Train.csv"",sep="";"")",CLUSTER_4,CLUSTER_8
final_test,"pandas.read_csv(PATH_DATA+""Test.csv"",sep="";"")",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH_lr,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
new_data,"pandas.DataFrame(data=data,columns=['Country','Year','Status',
'BMI','winsorized_Adult_Mortality',
'winsorized_Infant_Deaths','winsorized_Alcohol',
'winsorized_Percentage_Exp','winsorized_HepatitisB',
'winsorized_Under_Five_Deaths','winsorized_Polio',
'winsorized_Tot_Exp','winsorized_Diphtheria','winsorized_HIV',
'winsorized_GDP','winsorized_Population',
'winsorized_thinness_10_19_years','winsorized_thinness_5_9_years',
'winsorized_Income_Comp_Of_Resources','winsorized_Schooling',
'winsorized_Measles',
'winsorized_Life_Expectancy'])",CLUSTER_7,CLUSTER_8
Y,"pandas.DataFrame(data=new_data,columns=['Life_Expectancy'])",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('/content/drive/MyDrive/Smartbrige/LifeExpectancyData.csv'),CLUSTER_7,CLUSTER_8
data,pandas.read_csv(body),CLUSTER_7,CLUSTER_8
"q75,q25","numpy.percentile(data[variable],[75,25])",CLUSTER_7,CLUSTER_8
"q75,q25","numpy.percentile(variable,[75,25])",CLUSTER_7,CLUSTER_8
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_8
preprocessor,"sklearn.compose.ColumnTransformer(
transformers=[
('cat',categorical_transformer,categorical_features)",CLUSTER_7,CLUSTER_8
models,"collections.OrderedDict([
(""LinearRegression"",Pipeline([
('preprocessor',preprocessor)",CLUSTER_7,CLUSTER_8
scores,collections.OrderedDict(sorted(scores.items(),CLUSTER_7,CLUSTER_8
scores[name],sklearn.metrics.r2_score(model.predict(X_test),CLUSTER_7,CLUSTER_8
categorical_transformer,"sklearn.pipeline.Pipeline(steps=[
('onehot',OneHotEncoder(handle_unknown='ignore')",CLUSTER_7,CLUSTER_8
numeric_transformer,"sklearn.pipeline.Pipeline(steps=[
('imputer',SimpleImputer(strategy='median')",CLUSTER_7,CLUSTER_8
RFRegressor,"sklearn.pipeline.Pipeline([
('preprocessor',preprocessor)",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(ID,columns=['businessID'])",CLUSTER_9,CLUSTER_2
data_final,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
dataset,pandas.DataFrame([data]),CLUSTER_9,CLUSTER_2
data_final,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
dataset,pandas.DataFrame([data]),CLUSTER_9,CLUSTER_2
data_final,"pandas.concat([dataset,data_final],axis=0)",CLUSTER_9,CLUSTER_2
data_final,"pandas.concat([dataset,data_final],axis=0)",CLUSTER_9,CLUSTER_2
df,pandas.read_pickle('business_ID'),CLUSTER_9,CLUSTER_2
response,"requests.get(url,headers=headers,params=PARAMETERS)",CLUSTER_9,CLUSTER_2
res,"requests.get(url_rev,headers=headers)",CLUSTER_9,CLUSTER_2
res_new,"requests.get(url_rev,headers=headers)",CLUSTER_9,CLUSTER_2
df_bow_origin,pandas.DataFrame(bows[ori]),CLUSTER_0,CLUSTER_9
df_tfidf,pandas.DataFrame(model[bows[ori]]),CLUSTER_0,CLUSTER_9
sim_df,pandas.DataFrame(list(sims),CLUSTER_0,CLUSTER_9
important_words,json.load(f),CLUSTER_1,CLUSTER_10
coefficients,numpy.array(initial_coefficients),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
score,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
derivative,"numpy.dot(errors,feature)",CLUSTER_1,CLUSTER_10
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
lp,numpy.sum((indicator-1),CLUSTER_1,CLUSTER_10
apply_threshold,numpy.vectorize(lambdax:1.ifx>0else-1.),CLUSTER_1,CLUSTER_10
cmap_positive,matplotlib.pyplot.get_cmap('Reds'),CLUSTER_1,CLUSTER_10
cmap_negative,matplotlib.pyplot.get_cmap('Blues'),CLUSTER_1,CLUSTER_10
df,pandas.read_csv('../input/RegularSeasonDetailedResults.csv'),CLUSTER_4,CLUSTER_11
ax,"matplotlib.pyplot.subplot(111,polar=True)",CLUSTER_4,CLUSTER_11
state_zero,numpy.array([1ifi==0else0foriinrange(G.number_of_nodes(),CLUSTER_2,CLUSTER_10
state,"numpy.reshape(state,[1,num_states])",CLUSTER_2,CLUSTER_10
next_state,"numpy.reshape(next_state,[1,num_states])",CLUSTER_2,CLUSTER_10
df_accidentes,"pandas.read_csv(""X.csv"")",CLUSTER_7,CLUSTER_1
kmeans,sklearn.cluster.KMeans(n_clusters=2),CLUSTER_7,CLUSTER_1
app_train,pandas.read_csv(f_app),CLUSTER_8,CLUSTER_11
all_embs,numpy.stack(embeddings_index.values(),CLUSTER_0,CLUSTER_8
out_df,"pandas.DataFrame({""qid"":test_df[""qid""].values})",CLUSTER_0,CLUSTER_8
train_df,"pandas.read_csv(""../input/train.csv"")",CLUSTER_0,CLUSTER_8
test_df,"pandas.read_csv(""../input/test.csv"")",CLUSTER_0,CLUSTER_8
"train_df,val_df","sklearn.model_selection.train_test_split(train_df,test_size=0.08,random_state=2018)",CLUSTER_0,CLUSTER_8
state_value,"numpy.mean([self.get_qvalue(state,action)",CLUSTER_12,CLUSTER_11
df,pandas.read_csv('yelp800K.csv'),CLUSTER_0,CLUSTER_8
roc,numpy.array([]),CLUSTER_0,CLUSTER_8
roc,"numpy.append(roc,round(roc_auc_score(ytest,pred)",CLUSTER_0,CLUSTER_8
vocab,collections.Counter(),CLUSTER_0,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(sequences,labels,test_size=0.2,random_state=42)",CLUSTER_0,CLUSTER_8
"fpr,tpr,threshold","sklearn.metrics.roc_curve(ytest,pred)",CLUSTER_0,CLUSTER_8
lstm_score,"sklearn.metrics.f1_score(y_test,model_1.predict_classes(x_test)",CLUSTER_0,CLUSTER_8
BiLSTM_score,"sklearn.metrics.f1_score(y_test,model_2.predict_classes(x_test)",CLUSTER_0,CLUSTER_8
data,sklearn.datasets.load_files(path),CLUSTER_4,CLUSTER_0
dog_files,numpy.array(data['filenames']),CLUSTER_4,CLUSTER_0
human_files,"numpy.array(glob(""lfw/lfw/*/*"")",CLUSTER_4,CLUSTER_0
prediction,numpy.argmax(model.predict(img_tensor),CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(dog_breed_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(VGG16_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(xception_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
bottleneck_features,numpy.load('bottleneck_features/DogVGG16Data.npz'),CLUSTER_4,CLUSTER_0
bottleneck_features,numpy.load('bottleneck_features/DogXceptionData.npz'),CLUSTER_4,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,)",CLUSTER_4,CLUSTER_0
"X,y","sklearn.datasets.make_classification(
n_samples=10000,n_features=10,n_informative=5,n_redundant=5,
random_state=42)",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,test_size=0.3,random_state=42)",CLUSTER_8,CLUSTER_1
SVM_classifier,sklearn.svm.LinearSVC(),CLUSTER_8,CLUSTER_1
model,sklearn.svm.LinearSVC(),CLUSTER_8,CLUSTER_1
"fpr,tpr,tresh","sklearn.metrics.roc_curve(y_test,probs)",CLUSTER_8,CLUSTER_1
calibrated,"sklearn.calibration.CalibratedClassifierCV(model,method='sigmoid',cv=5)",CLUSTER_8,CLUSTER_1
"fraction,mean","sklearn.calibration.calibration_curve(y_test,probs,n_bins=20)",CLUSTER_8,CLUSTER_1
"fop,mpv","sklearn.calibration.calibration_curve(y_test,probs,n_bins=15,normalize=True)",CLUSTER_8,CLUSTER_1
df,pandas.read_csv(original_data),CLUSTER_8,CLUSTER_3
origin,pandas.read_csv(original_data),CLUSTER_8,CLUSTER_3
stolen,pandas.read_csv(output_file),CLUSTER_8,CLUSTER_3
origin,pandas.read_csv(original_data),CLUSTER_8,CLUSTER_3
origin,pandas.read_csv(original_data),CLUSTER_8,CLUSTER_3
df,"pandas.concat(dfs,axis=1,keys=keys)",CLUSTER_12,CLUSTER_11
df,"pandas.concat(dfs,axis=1,keys=keys)",CLUSTER_12,CLUSTER_11
df,"pandas.read_csv(path_csv,sep=r'\s+')",CLUSTER_12,CLUSTER_11
arr,"numpy.arange(1,60)",CLUSTER_1,CLUSTER_3
y_data,numpy.array([[0]]*20+[[1]]*20+[[2]]*20),CLUSTER_1,CLUSTER_3
batch_s,numpy.empty(shape),CLUSTER_1,CLUSTER_3
x_data_temp,"numpy.vstack((x_data_temp,x_data[i*50000:(i+1)",CLUSTER_1,CLUSTER_3
y_data_temp,"numpy.vstack((y_data_temp,y_data[i:i+1])",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccX_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccY_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccZ_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Cur_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Son_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Vol_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccX_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccY_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccZ_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Cur_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Son_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Vol_""+str(i)",CLUSTER_1,CLUSTER_3
data_all,"numpy.loadtxt(""data_all"",delimiter="","",dtype=np.float32,skiprows=1)",CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(data),CLUSTER_1,CLUSTER_3
evs,numpy.linalg.eigvals(a),CLUSTER_3,CLUSTER_6
cost,numpy.squeeze(cost),CLUSTER_1,CLUSTER_10
reviews,pandas.read_csv(fp),CLUSTER_0,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
reviews['final_review'],reviews['Rating'],test_size=0.25)",CLUSTER_0,CLUSTER_11
tag_map,collections.defaultdict(lambda:wn.NOUN),CLUSTER_0,CLUSTER_11
SVM,sklearn.svm.LinearSVC(),CLUSTER_0,CLUSTER_11
grid,"sklearn.model_selection.GridSearchCV(SVM,parameters,cv=3)",CLUSTER_0,CLUSTER_11
train,"numpy.array(train_df,dtype='float32')",CLUSTER_4,CLUSTER_0
test,"numpy.array(test_df,dtype='float32')",CLUSTER_4,CLUSTER_0
train_df,pandas.read_csv('../input/fashionmnist/fashion-mnist_train.csv'),CLUSTER_4,CLUSTER_0
test_df,pandas.read_csv('../input/fashionmnist/fashion-mnist_test.csv'),CLUSTER_4,CLUSTER_0
"X_train,X_validate,y_train,y_validate","sklearn.model_selection.train_test_split(x_train,y_train,test_size=0.2,random_state=5000)",CLUSTER_4,CLUSTER_0
preds,numpy.exp(preds),CLUSTER_5,CLUSTER_1
y_train,numpy.log1p(train['price']+1),CLUSTER_5,CLUSTER_1
train,pandas.read_table('../../dat/train.tsv'),CLUSTER_5,CLUSTER_1
test,pandas.read_table('../../dat/test.tsv'),CLUSTER_5,CLUSTER_1
cv,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=42)",CLUSTER_5,CLUSTER_1
model,"sklearn.linear_model.Ridge(
solver='auto',
fit_intercept=True,
alpha=0.5,
max_iter=100,
normalize=False,
tol=0.05)",CLUSTER_5,CLUSTER_1
vectorizer,"sklearn.pipeline.FeatureUnion([
('name',CountVectorizer(
ngram_range=(1,2)",CLUSTER_5,CLUSTER_1
vectorizer,"sklearn.pipeline.FeatureUnion([
('name',CountVectorizer(
ngram_range=(1,2)",CLUSTER_5,CLUSTER_1
dummies,"pandas.get_dummies(data_obj.Embarked,prefix=""Embarked"")",CLUSTER_7,CLUSTER_3
data,"pandas.read_csv(""https://raw.githubusercontent.com/HrantDavtyan/Data_Scraping/master/Week%202/Datasets/Titanic.csv"")",CLUSTER_7,CLUSTER_3
data_obj.Sex,"numpy.where(data_obj.Sex==""male"",1,0)",CLUSTER_7,CLUSTER_3
data_x,"numpy.arange(30,181,30)",CLUSTER_1,CLUSTER_10
control,"numpy.array([24,23.3,23.8,23.5,23.6,23.4])",CLUSTER_1,CLUSTER_10
col,"numpy.array([u'
labels=numpy.array([""5\u03BCg/ml"",""10\u03BCg/ml"",""15\u03BCg/ml"",
""20\u03BCg/ml"",""40\u03BCg/ml"",""50\u03BCg/ml"",""80\u03BCg/ml""])",CLUSTER_1,CLUSTER_10
data_y_corr,numpy.zeros(len(data_y),CLUSTER_1,CLUSTER_10
mean_x,numpy.mean(data_x),CLUSTER_1,CLUSTER_10
mean_y,numpy.mean(data_y),CLUSTER_1,CLUSTER_10
m,numpy.sum((data_y-mean_y),CLUSTER_1,CLUSTER_10
D_calc,numpy.sum((data_x-mean_x),CLUSTER_1,CLUSTER_10
sum_d2,numpy.sum((data_y-m*data_x-c),CLUSTER_1,CLUSTER_10
dm,numpy.sqrt(sum_d2/(D_calc*(n-2),CLUSTER_1,CLUSTER_10
dc,numpy.sqrt(((1/n),CLUSTER_1,CLUSTER_10
fit_x,numpy.linspace(np.min(data_x),CLUSTER_1,CLUSTER_10
"concentration,data_y","numpy.loadtxt(""ZnFeO_small_yellow.csv"",delimiter=';',unpack=True)",CLUSTER_1,CLUSTER_10
scaled_df,"pandas.DataFrame(scaled_df,columns=colnames)",CLUSTER_6,CLUSTER_5
scaled_df1,"pandas.DataFrame(scaled_df1,columns=colnames)",CLUSTER_6,CLUSTER_5
scaled_df2,"pandas.DataFrame(scaled_df2,columns=colnames)",CLUSTER_6,CLUSTER_5
train_df,"pandas.read_csv(os.path.join(DIR,'netflow_day-03.csv')",CLUSTER_6,CLUSTER_5
train_df,"pandas.read_csv(os.path.join(DIR,'netflow_day-03.csv')",CLUSTER_6,CLUSTER_5
"x_train,x_valid,y_train,y_valid","sklearn.model_selection.train_test_split(train_df.iloc[:100000],train_df.iloc[:100000],test_size=0.33,random_state=42)",CLUSTER_6,CLUSTER_5
"x_train,x_valid,y_train,y_valid","sklearn.model_selection.train_test_split(scaled_df1.iloc[:100000],scaled_df1.iloc[:100000],test_size=0.33,random_state=42)",CLUSTER_6,CLUSTER_5
"x_train,x_valid,y_train,y_valid","sklearn.model_selection.train_test_split(scaled_df1.iloc[:100000],scaled_df1.iloc[:100000],test_size=0.33,random_state=42)",CLUSTER_6,CLUSTER_5
loss_hist,numpy.zeros(epochs),CLUSTER_6,CLUSTER_5
val_loss_hist,numpy.zeros(epochs),CLUSTER_6,CLUSTER_5
val_loss,"numpy.sum(np.multiply(losses,nums)",CLUSTER_6,CLUSTER_5
val_loss,"numpy.sum(np.multiply(losses,nums)",CLUSTER_6,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_6,CLUSTER_5
scaler1,sklearn.preprocessing.MinMaxScaler(),CLUSTER_6,CLUSTER_5
scaler2,sklearn.preprocessing.RobustScaler(),CLUSTER_6,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_5
"fig,(ax1,ax2,ax3,ax4)","matplotlib.pyplot.subplots(ncols=4,figsize=(16,5)",CLUSTER_6,CLUSTER_5
normalised_df,"pandas.DataFrame(index=np.arange(1,13,1)",CLUSTER_1,CLUSTER_10
normalized_moviebyyear_df,pandas.DataFrame(),CLUSTER_1,CLUSTER_10
movies_df,pandas.read_csv('tmdb-movies.csv'),CLUSTER_1,CLUSTER_10
normalised_df,"pd.DataFrame(index=numpy.arange(1,13,1)",CLUSTER_1,CLUSTER_10
df,"pandas.read_csv(DATA_DIR/'stumbleupon.tsv',sep='\t')",CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(n_estimators=20),CLUSTER_7,CLUSTER_5
levels,numpy.arange(n_classes+1),CLUSTER_7,CLUSTER_5
fast_oscillation,numpy.sin(5*x),CLUSTER_7,CLUSTER_5
slow_oscillation,numpy.sin(0.5*x),CLUSTER_7,CLUSTER_5
xfit,"numpy.linspace(0,10,1000)",CLUSTER_7,CLUSTER_5
"xx,yy","numpy.meshgrid(np.linspace(*xlim,num=200)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_7,CLUSTER_5
"X,y","sklearn.datasets.make_blobs(n_samples=300,centers=4,
random_state=0,cluster_std=1.0)",CLUSTER_7,CLUSTER_5
tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
bag,"sklearn.ensemble.BaggingClassifier(tree,n_estimators=100,max_samples=0.8,
random_state=1)",CLUSTER_7,CLUSTER_5
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=0)",CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(n_estimators=1000),CLUSTER_7,CLUSTER_5
forest,sklearn.ensemble.RandomForestRegressor(200),CLUSTER_7,CLUSTER_5
digits,sklearn.datasets.load_digits(),CLUSTER_7,CLUSTER_5
mat,"sklearn.metrics.confusion_matrix(ytest,ypred)",CLUSTER_7,CLUSTER_5
"X,y",sklearn.datasets.make_classification(n_samples=80000),CLUSTER_5,CLUSTER_10
rt_lm,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
rf_lm,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
grd_lm,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
rf,"sklearn.ensemble.RandomForestClassifier(max_depth=3,n_estimators=n_estimator)",CLUSTER_5,CLUSTER_10
rf_enc,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_10
grd_enc,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.5)",CLUSTER_5,CLUSTER_10
"X_train,X_train_lr,y_train,y_train_lr","sklearn.model_selection.train_test_split(X_train,
y_train,
test_size=0.5)",CLUSTER_5,CLUSTER_10
"fpr_rt_lm,tpr_rt_lm,_","sklearn.metrics.roc_curve(y_test,y_pred_rt)",CLUSTER_5,CLUSTER_10
"fpr_rf_lm,tpr_rf_lm,_","sklearn.metrics.roc_curve(y_test,y_pred_rf_lm)",CLUSTER_5,CLUSTER_10
"fpr_grd_lm,tpr_grd_lm,_","sklearn.metrics.roc_curve(y_test,y_pred_grd_lm)",CLUSTER_5,CLUSTER_10
"fpr_grd,tpr_grd,_","sklearn.metrics.roc_curve(y_test,y_pred_grd)",CLUSTER_5,CLUSTER_10
"fpr_rf,tpr_rf,_","sklearn.metrics.roc_curve(y_test,y_pred_rf)",CLUSTER_5,CLUSTER_10
pipeline,"sklearn.pipeline.make_pipeline(rt,rt_lm)",CLUSTER_5,CLUSTER_10
stars,"pandas.qcut(res[(""mean_score"",""Score"")",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""happiness.csv"")",CLUSTER_8,CLUSTER_3
a,"numpy.eye(4,k=1)",CLUSTER_3,CLUSTER_6
t_train,numpy.eye(10),CLUSTER_2,CLUSTER_7
t_test,numpy.eye(10),CLUSTER_2,CLUSTER_7
brand_mean_price_mileage,"pandas.DataFrame(mean_mileage,columns=['mean_mileage'])",CLUSTER_8,CLUSTER_4
bmp_series,pandas.Series(brand_mean_price),CLUSTER_8,CLUSTER_4
mean_price,pandas.Series(brand_mean_price),CLUSTER_8,CLUSTER_4
mean_mileage,pandas.Series(brand_mean_mileage),CLUSTER_8,CLUSTER_4
autos,"pandas.read_csv(""autos.csv"",encoding=""Latin-1"")",CLUSTER_8,CLUSTER_4
roll,"random.randint(1,6)",CLUSTER_3,CLUSTER_10
x,"numpy.linspace(0,1,300)",CLUSTER_3,CLUSTER_10
"v[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"v[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
"v[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"v[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
"s[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"s[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
num_complete_minibatches,math.floor(m/mini_batch_size),CLUSTER_5,CLUSTER_9
rvotes,"re.compile(r'<ahref=""\/film\/.*\/votes\/"">\s*\d{1,2}\.\d{1,2}')",CLUSTER_9,CLUSTER_2
rrate,"re.compile(r'\d{1,2}\.\d{1,2}')",CLUSTER_9,CLUSTER_2
response,"requests.get(url,headers={'User-Afent':header})",CLUSTER_9,CLUSTER_2
df,"pandas.read_json('resources/News_Category_Dataset_v2.json',lines=True)",CLUSTER_5,CLUSTER_1
pipe,"sklearn.pipeline.Pipeline([(""cleaner"",predictors()",CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_5,CLUSTER_1
classifier,sklearn.linear_model.LogisticRegression(max_iter=4000),CLUSTER_5,CLUSTER_1
grid_search,"sklearn.model_selection.GridSearchCV(pipe,param_grid=new_grid,n_jobs=1,cv=3,verbose=3,refit=True)",CLUSTER_5,CLUSTER_1
tables,pandas.DataFrame(tables[1]),CLUSTER_9,CLUSTER_2
tables,pandas.read_html(url_facts),CLUSTER_9,CLUSTER_2
file_df,"pandas.DataFrame(data_list[1:],columns=data_list[0])",CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(25,10)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(25,10)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(25,10)",CLUSTER_4,CLUSTER_11
output_df,pandas.DataFrame(Income_dict.values(),CLUSTER_8,CLUSTER_1
Algo_input,"pandas.read_csv(""Algo_data_input.csv"")",CLUSTER_8,CLUSTER_1
wage_join,"pandas.to_numeric(''.join(map(str,living_wage_split)",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,target,random_state=42)",CLUSTER_8,CLUSTER_1
model,sklearn.svm.SVC(kernel='linear'),CLUSTER_8,CLUSTER_1
Q_optimal,"numpy.array(Q_optimal,dtype=np.float32)",CLUSTER_7,CLUSTER_8
next_actions,numpy.zeros([len(next_states),CLUSTER_7,CLUSTER_8
next_state_next_action,numpy.zeros([np.shape(next_states),CLUSTER_7,CLUSTER_8
best_actions,numpy.zeros([np.shape(train),CLUSTER_7,CLUSTER_8
Q_predicted,numpy.zeros([np.shape(train),CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='C',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='U',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='J',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='A',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
n_nodes_hl1,numpy.shape(train),CLUSTER_7,CLUSTER_8
n_nodes_hl2,numpy.shape(train),CLUSTER_7,CLUSTER_8
NUM_STATES,numpy.shape(train),CLUSTER_7,CLUSTER_8
NUM_DIM,numpy.shape(train),CLUSTER_7,CLUSTER_8
num_nodes,numpy.shape(train),CLUSTER_7,CLUSTER_8
next_actions,"numpy.delete(next_actions,-1,axis=1)",CLUSTER_7,CLUSTER_8
"train,test","sklearn.model_selection.train_test_split(df,test_size=0.5)",CLUSTER_7,CLUSTER_8
df[data[i]],pandas.Categorical((pd.factorize(df[data[i]]),CLUSTER_7,CLUSTER_8
train[rewards[i]],pandas.Categorical((pd.factorize(train[rewards[i]]),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(df),CLUSTER_7,CLUSTER_8
curr_state_current_action,"pandas.DataFrame(np.column_stack((current_states,train[actions])",CLUSTER_7,CLUSTER_8
next_state_next_action0,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,0])",CLUSTER_7,CLUSTER_8
next_state_next_action1,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,1])",CLUSTER_7,CLUSTER_8
next_state_next_action2,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,2])",CLUSTER_7,CLUSTER_8
next_state_next_action3,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,3])",CLUSTER_7,CLUSTER_8
next_state_next_action4,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,4])",CLUSTER_7,CLUSTER_8
next_state_next_action5,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,5])",CLUSTER_7,CLUSTER_8
next_state_next_action6,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,6])",CLUSTER_7,CLUSTER_8
med_age,pandas.DataFrame(),CLUSTER_7,CLUSTER_5
sub,"pandas.DataFrame({'PassengerId':PassengerId,'Survived':prediction})",CLUSTER_7,CLUSTER_5
train_df['Cabin'],pandas.Series([i[0]ifpd.notnull(i),CLUSTER_7,CLUSTER_5
test_df['Cabin'],pandas.Series([i[0]ifpd.notnull(i),CLUSTER_7,CLUSTER_5
dataset['AgeBin'],"pandas.cut(dataset['Age'],5,labels=[1,2,3,4,5])",CLUSTER_7,CLUSTER_5
train_df,"pandas.get_dummies(train_df,columns=['Sex','Embarked','Pclass','Title','AgeBin','FareBin','Cabin'],drop_first=True)",CLUSTER_7,CLUSTER_5
test_df,"pandas.get_dummies(test_df,columns=['Sex','Embarked','Pclass','Title','AgeBin','FareBin','Cabin'],drop_first=True)",CLUSTER_7,CLUSTER_5
dataset['FareBin'],"pandas.qcut(dataset['Fare'],4,labels=[1,2,3,4])",CLUSTER_7,CLUSTER_5
train_df,pandas.read_csv('../input/train.csv'),CLUSTER_7,CLUSTER_5
gen_df,pandas.read_csv('../input/gender_submission.csv'),CLUSTER_7,CLUSTER_5
test_df,pandas.read_csv('../input/test.csv'),CLUSTER_7,CLUSTER_5
ageplt,"seaborn.FacetGrid(train_df,hue='Survived',aspect=4)",CLUSTER_7,CLUSTER_5
fareplt,"seaborn.FacetGrid(train_df,hue='Survived',aspect=5)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.20,random_state=1)",CLUSTER_7,CLUSTER_5
rmodel,sklearn.ensemble.RandomForestClassifier(n_estimators=50),CLUSTER_7,CLUSTER_5
voting,"sklearn.ensemble.VotingClassifier(estimators=[('logi',logmodel)",CLUSTER_7,CLUSTER_5
amodel,sklearn.ensemble.AdaBoostClassifier(n_estimators=100),CLUSTER_7,CLUSTER_5
gmodel,sklearn.ensemble.GradientBoostingClassifier(n_estimators=100),CLUSTER_7,CLUSTER_5
logmodel,sklearn.linear_model.LogisticRegression(max_iter=100),CLUSTER_7,CLUSTER_5
modelsvc,"sklearn.svm.SVC(probability=True,gamma='auto')",CLUSTER_7,CLUSTER_5
dmodel,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
img,"numpy.empty([h,w,3])",CLUSTER_8,CLUSTER_3
GRAY_IM,"numpy.empty([h,w])",CLUSTER_8,CLUSTER_3
Matrix_TEST,numpy.load(filename_Matrix_TEST),CLUSTER_8,CLUSTER_3
classFrequencies,numpy.zeros(K),CLUSTER_1,CLUSTER_10
theta,"numpy.zeros((K,dim)",CLUSTER_1,CLUSTER_10
ordre,numpy.argsort(labels_for_final_accuracy_measurement),CLUSTER_1,CLUSTER_10
"affectations[:,i]/","numpy.sum(affectations[:,i])",CLUSTER_1,CLUSTER_10
LogLikelihood,"numpy.log(np.max(affectations,axis=0)",CLUSTER_1,CLUSTER_10
df,pandas.DataFrame(dict),CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(filedict),CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(filedict),CLUSTER_1,CLUSTER_3
obj,"pandas.Series([4,7,-5,3])",CLUSTER_1,CLUSTER_3
obj2,"pandas.Series([4,7,-5,3],index=['d','b','a','c'])",CLUSTER_1,CLUSTER_3
df,pandas.read_csv(filename),CLUSTER_1,CLUSTER_3
categorical_sample_points,"numpy.arange(0,10)",CLUSTER_4,CLUSTER_7
tiled_images,"numpy.concatenate(image_rows,axis=1)",CLUSTER_4,CLUSTER_7
continuous_sample_points,"numpy.linspace(-1.0,1.0,10)",CLUSTER_4,CLUSTER_7
start_time,time.time(),CLUSTER_4,CLUSTER_7
start_time,time.time(),CLUSTER_4,CLUSTER_7
start_time,time.time(),CLUSTER_4,CLUSTER_7
start_time,time.time(),CLUSTER_4,CLUSTER_7
X0,"numpy.array((1,2)",CLUSTER_1,CLUSTER_9
tspan,"numpy.array((0,40)",CLUSTER_1,CLUSTER_9
X0,"numpy.array([2,0])",CLUSTER_1,CLUSTER_9
tspan,"numpy.array([0,40])",CLUSTER_1,CLUSTER_9
X0,"numpy.array([2,0])",CLUSTER_1,CLUSTER_9
tspan,"numpy.array([0,40])",CLUSTER_1,CLUSTER_9
dt,numpy.zeros(len(te),CLUSTER_1,CLUSTER_9
"teval,h","numpy.linspace(*tspan,500,retstep=True)",CLUSTER_1,CLUSTER_9
"teval,h","numpy.linspace(*tspan,1500,retstep=True)",CLUSTER_1,CLUSTER_9
"teval,h","numpy.linspace(*tspan,1500,retstep=True)",CLUSTER_1,CLUSTER_9
periods,numpy.diff(sol.t_events[0]),CLUSTER_1,CLUSTER_9
periods,numpy.diff(sol.t_events[0]),CLUSTER_1,CLUSTER_9
periods,numpy.diff(sol.t_events[0]),CLUSTER_1,CLUSTER_9
d,numpy.diff(periods),CLUSTER_1,CLUSTER_9
periods,numpy.diff(sol.t_events[0]),CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,X0,max_step=h)",CLUSTER_1,CLUSTER_9
sol2,"scipy.integrate.solve_ivp(dXdt,tspan,sol.y[:,-1],max_step=h)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,X0,max_step=h,events=[max_x_event,min_x_event],
dense_output=True)",CLUSTER_1,CLUSTER_9
sol2,"scipy.integrate.solve_ivp(dXdt,tspan,X0,max_step=h,events=max_x_event)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,X0,max_step=h,events=max_x_event,dense_output=True)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,last_step,max_step=h,events=max_x_event,dense_output=True)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(ode,tspan,X0,max_step=h,events=max_x_event,dense_output=True)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,last_step,max_step=h,events=max_x_event,dense_output=True)",CLUSTER_1,CLUSTER_9
TitanicRawData,pandas.read_csv(url),CLUSTER_5,CLUSTER_1
TitanicRawData,pandas.read_csv(url),CLUSTER_5,CLUSTER_1
TitanicRawData,pandas.read_csv(url),CLUSTER_5,CLUSTER_1
TitanicRawData['age'].fillna(value,numpy.mean(TitanicRawData['age']),CLUSTER_5,CLUSTER_1
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
pvals,"sklearn.feature_selection.f_regression(X,y)",CLUSTER_5,CLUSTER_1
y_train,numpy.array(moviecomments['Y'][:5000]),CLUSTER_4,CLUSTER_1
y_test,numpy.array(moviecomments['Y'][5000:size]),CLUSTER_4,CLUSTER_1
y_last,numpy.array(moviecomments['Y'][size:]),CLUSTER_4,CLUSTER_1
naverdata,"pandas.read_csv(""/kaggle/input/dfc615k/ko_data.csv"",sep="","",encoding=""ms949"")",CLUSTER_4,CLUSTER_1
naversample,"pandas.read_csv(""/kaggle/input/dfc615k/ko_sample.csv"",sep="","",encoding=""ms949"")",CLUSTER_4,CLUSTER_1
moviecomments,"pandas.read_csv(""/kaggle/input/naverdata3/naverfile3.csv"",sep="","")",CLUSTER_4,CLUSTER_1
cm,sklearn.metrics.confusion_matrix([to_bool(x),CLUSTER_4,CLUSTER_1
"sns.heatmap(cm,cmap","seaborn.light_palette(
""navy"",as_cmap=True)",CLUSTER_4,CLUSTER_1
ground_truth_communities,"pandas.read_csv(base_dir+""email-Eu-core-department-labels.txt"",header=None,names=['node','community'],sep='\s+')",CLUSTER_12,CLUSTER_11
particles,"pandas.read_csv(base_dir+""eu.csv"")",CLUSTER_12,CLUSTER_11
persons,"pandas.read_csv(base_dir+""persons.csv"")",CLUSTER_12,CLUSTER_11
boston_df,pandas.read_csv('boston.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=0)",CLUSTER_5,CLUSTER_5
rl_model,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
li,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
li_pca,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
lscv,sklearn.linear_model.LassoCV(),CLUSTER_5,CLUSTER_5
models,"sklearn.feature_selection.SelectFromModel(lscv,prefit=True)",CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_5
df['Semester'],"numpy.where(df['Quarter'].isin([1,2])",CLUSTER_5,CLUSTER_5
df['Is_weekend'],"numpy.where(df['Dayofweek'].isin([5,6])",CLUSTER_5,CLUSTER_5
df['Is_weekday'],"numpy.where(df['Dayofweek'].isin([0,1,2,3,4])",CLUSTER_5,CLUSTER_5
sub['Vehicles'],numpy.expm1(pred),CLUSTER_5,CLUSTER_5
train['Vehicles'],numpy.log1p(train['Vehicles']),CLUSTER_5,CLUSTER_5
train,"pandas.get_dummies(train,columns=[col])",CLUSTER_5,CLUSTER_5
test,"pandas.get_dummies(test,columns=[col])",CLUSTER_5,CLUSTER_5
train,"pandas.read_csv('train_aWnotuB.csv',parse_dates=['DateTime'])",CLUSTER_5,CLUSTER_5
test,"pandas.read_csv('test_BdBKkAj_L87Nc3S.csv',parse_dates=['DateTime'])",CLUSTER_5,CLUSTER_5
sub,pandas.read_csv('sample_submission_KVKNmI7.csv'),CLUSTER_5,CLUSTER_5
df['Year'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Month'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Day'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Dayofweek'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['DayOfyear'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Week'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Quarter'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_month_start'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_month_end'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_quarter_start'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_quarter_end'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_year_start'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_year_end'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Hour'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
"train_features,test_features,train_labels,test_labels","sklearn.model_selection.train_test_split(X,y,test_size=0.2,shuffle=True)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=figsize)",CLUSTER_5,CLUSTER_5
POLmonthyearERC,"pandas.read_csv('queries_results/Poland/POL_USA/POL-USAmonthyeareventRCcountSUMaToneAVGaTonne.csv',header=0,sep='*,*',dtype={'EventRootCode':str})",CLUSTER_7,CLUSTER_3
eventcodes,"pandas.read_csv('cameo.csv',header=0,dtype=str,sep='*,*')",CLUSTER_7,CLUSTER_3
"POLmonthyearERC[""Time""]","pandas.to_datetime(POLmonthyearERC['MonthYear'],format='%Y%m')",CLUSTER_7,CLUSTER_3
g,"seaborn.barplot(s.EVENTDESCRIPTION,s.Count,palette='rainbow')",CLUSTER_7,CLUSTER_3
convert,"numpy.ndarray((image.shape[0],image.shape[1])",CLUSTER_4,CLUSTER_6
temperature_store_df,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_feat_imp,pandas.DataFrame(gb_regressor.feature_importances_),CLUSTER_7,CLUSTER_8
plot_df,"pandas.DataFrame([test_dates,plot_y_pred,plot_y_test])",CLUSTER_7,CLUSTER_8
eval_df,"pandas.DataFrame([[mlp_pred,gru_pred,gru_drop_pred,gru_stack_pred,gb_val_pred[0],y_val[0]]])",CLUSTER_7,CLUSTER_8
xmas_data_df,"pandas.get_dummies(data=xmas_data_df,columns=['next_week'],prefix='nw')",CLUSTER_7,CLUSTER_8
stores_df,"pandas.get_dummies(data=stores_df,columns=['Type'],prefix='type')",CLUSTER_7,CLUSTER_8
merged_df,"pandas.merge(xmas_data_df,features_df,on=['Store','Date'])",CLUSTER_7,CLUSTER_8
merged_all_df,"pandas.merge(merged_df,stores_df,on='Store')",CLUSTER_7,CLUSTER_8
data_df,pandas.read_csv('./data/train.csv'),CLUSTER_7,CLUSTER_8
features_df,pandas.read_csv('./data/features.csv'),CLUSTER_7,CLUSTER_8
stores_df,pandas.read_csv('./data/stores.csv'),CLUSTER_7,CLUSTER_8
cpi_df.index,pandas.to_datetime(cpi_df.index),CLUSTER_7,CLUSTER_8
data_df.Date,pandas.to_datetime(data_df.Date),CLUSTER_7,CLUSTER_8
features_df.Date,pandas.to_datetime(features_df.Date),CLUSTER_7,CLUSTER_8
plot_df.Date,pandas.to_datetime(plot_df.Date),CLUSTER_7,CLUSTER_8
data_rows,"numpy.arange(lookback,data_np.shape[0]-delay)",CLUSTER_7,CLUSTER_8
X_np,numpy.zeros((len(data_rows),CLUSTER_7,CLUSTER_8
y_np,numpy.zeros((len(data_rows),CLUSTER_7,CLUSTER_8
mask,"numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_7,CLUSTER_8
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_7,CLUSTER_8
date_cutoff,"datetime.date(2011,12,30)",CLUSTER_7,CLUSTER_8
date_start_windowing,"datetime.date(2011,11,25)",CLUSTER_7,CLUSTER_8
date_validation_week,"datetime.date(2011,12,23)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
y_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=0.7,test_size=0.3,random_state=1,shuffle=False)",CLUSTER_7,CLUSTER_8
gb_regressor,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=400,random_state=1)",CLUSTER_7,CLUSTER_8
gb_mae,"sklearn.metrics.mean_absolute_error(tree_dict['1_1']['y_test'],tree_dict['1_1']['y_pred'])",CLUSTER_7,CLUSTER_8
store,"pandas.HDFStore('../output/sra.h5',mode='r')",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_11
X_src,"numpy.zeros((1,1)",CLUSTER_5,CLUSTER_9
X,"numpy.concatenate((np.random.normal(0,1,int(0.3*N)",CLUSTER_5,CLUSTER_9
X,"numpy.concatenate((np.random.normal(0,1,int(0.3*N)",CLUSTER_5,CLUSTER_9
X_plot,"numpy.linspace(-5,10,1000)",CLUSTER_5,CLUSTER_9
bins,"numpy.linspace(-5,10,10)",CLUSTER_5,CLUSTER_9
X_plot,"numpy.linspace(-6,6,1000)",CLUSTER_5,CLUSTER_9
X_plot,"numpy.linspace(-5,10,1000)",CLUSTER_5,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(2,2,sharex=True,sharey=True)",CLUSTER_5,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(2,3,sharex=True,sharey=True)",CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
kde,"sklearn.neighbors.KernelDensity(kernel='tophat',bandwidth=0.75)",CLUSTER_5,CLUSTER_9
kde,"sklearn.neighbors.KernelDensity(kernel='gaussian',bandwidth=0.75)",CLUSTER_5,CLUSTER_9
log_dens,sklearn.neighbors.KernelDensity(kernel=kernel),CLUSTER_5,CLUSTER_9
kde,"sklearn.neighbors.KernelDensity(kernel=kernel,bandwidth=0.5)",CLUSTER_5,CLUSTER_9
ax,matplotlib.pyplot.axes(projection=ccrs.PlateCarree(),CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('Examples/australia/data/WellCoordinates_250km_grid.csv'),CLUSTER_1,CLUSTER_3
frame,pandas.read_csv(recordings+date+filename),CLUSTER_8,CLUSTER_3
train_loss,numpy.zeros(niter),CLUSTER_4,CLUSTER_6
scratch_train_loss,numpy.zeros(niter),CLUSTER_4,CLUSTER_6
response,requests.get(dataset_url),CLUSTER_5,CLUSTER_9
x,numpy.array(filtered_df[exp_var]),CLUSTER_5,CLUSTER_9
y,numpy.array(filtered_df[int_var]),CLUSTER_5,CLUSTER_9
df,"pandas.DataFrame(dataframe,index=dataframe[""Index""])",CLUSTER_5,CLUSTER_9
"rho,p","scipy.stats.pearsonr(df[exp_var],df[int_var])",CLUSTER_5,CLUSTER_9
"rho,_","scipy.stats.pearsonr(filtered_df[exp_var],filtered_df[int_var])",CLUSTER_5,CLUSTER_9
zscores,scipy.stats.zscore(unfiltered_df[int_var]),CLUSTER_5,CLUSTER_9
model,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
song_df,"pandas.merge(song_df_1,song_df_2.drop_duplicates(['song_id'])",CLUSTER_5,CLUSTER_1
song_df_2,pandas.read_csv(songs_metadata_file),CLUSTER_5,CLUSTER_1
song_df_1,"pandas.read_table(triplets_file,header=None)",CLUSTER_5,CLUSTER_1
"train_data,test_data","sklearn.model_selection.train_test_split(song_df,test_size=0.20,random_state=0)",CLUSTER_5,CLUSTER_1
drinks,pandas.read_csv(url),CLUSTER_8,CLUSTER_4
drinks,"pandas.read_csv(url,dtype={'beer_servings':float})",CLUSTER_8,CLUSTER_4
orders,pandas.read_table(url),CLUSTER_8,CLUSTER_4
aug_hist_df,pandas.DataFrame(history_of_augmented_model.history),CLUSTER_1,CLUSTER_3
nonaug_hist_df,pandas.DataFrame(history_of_nonaugmented_model.history),CLUSTER_1,CLUSTER_3
rescaled_images,numpy.array(rescaled_images),CLUSTER_4,CLUSTER_11
image,numpy.asarray(Image.open(image_path),CLUSTER_4,CLUSTER_11
x_train,numpy.concatenate(frames),CLUSTER_5,CLUSTER_1
y_train,numpy.concatenate(frame1),CLUSTER_5,CLUSTER_1
dataframe,pandas.read_csv(io.BytesIO(uploaded['sonar.csv']),CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(estimator,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
df_dd,"pandas.merge(dfa,dfb,on=""ID"")",CLUSTER_1,CLUSTER_3
dfb,"pandas.read_csv(""data/hypo_b.dat"",header=None,delim_whitespace=True,
names=[""ID"",""YY"",""MM"",""DD"",""HH"",""MI"",""SE"",""latb"",""lonb"",""c"",""d"",""e""])",CLUSTER_1,CLUSTER_3
dfa,"pandas.read_csv(""data/hypo_a.dat"",header=None,delim_whitespace=True,
names=[""ID"",""YY"",""MM"",""DD"",""HH"",""MI"",""SE"",""lata"",""lona"",""c"",""d"",""e""])",CLUSTER_1,CLUSTER_3
lon,"numpy.array(dfm[""lonb""])",CLUSTER_1,CLUSTER_3
lat,"numpy.array(dfm[""latb""])",CLUSTER_1,CLUSTER_3
lon,"numpy.array(df_dd[""lonb""])",CLUSTER_1,CLUSTER_3
lat,"numpy.array(df_dd[""latb""])",CLUSTER_1,CLUSTER_3
lon,"numpy.array(df_dd[""lona""])",CLUSTER_1,CLUSTER_3
lat,"numpy.array(df_dd[""lata""])",CLUSTER_1,CLUSTER_3
lon,numpy.array(df[col_lon]),CLUSTER_1,CLUSTER_3
lat,numpy.array(df[col_lat]),CLUSTER_1,CLUSTER_3
df_train,pandas.read_csv('../kaggle/train.csv'),CLUSTER_7,CLUSTER_3
df_test,pandas.read_csv('../kaggle/test.csv'),CLUSTER_7,CLUSTER_3
df_train['Date'],"pandas.to_datetime(df_train['Date'],format=
'%Y-%m-%d')",CLUSTER_7,CLUSTER_3
df_test['Date'],"pandas.to_datetime(df_test['Date'],format=
'%Y-%m-%d')",CLUSTER_7,CLUSTER_3
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(10,6)",CLUSTER_7,CLUSTER_5
data,"sklearn.datasets.make_blobs(n_samples=200,n_features=2,centers=4,cluster_std=1.8,random_state=101)",CLUSTER_7,CLUSTER_5
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame(np.random.randn(1000,2)",CLUSTER_1,CLUSTER_3
df1,"pandas.read_csv('df1',index_col=0)",CLUSTER_1,CLUSTER_3
df2,pandas.read_csv('df2'),CLUSTER_1,CLUSTER_3
birth,"random.randint(1900,2000)",CLUSTER_3,CLUSTER_10
death,"random.randint(birth,2000)",CLUSTER_3,CLUSTER_10
data,"pandas.DataFrame(data,columns=data_X_cols)",CLUSTER_5,CLUSTER_1
log,pandas.DataFrame(columns=log_cols),CLUSTER_5,CLUSTER_1
log_entry,"pandas.DataFrame([results],columns=log_cols)",CLUSTER_5,CLUSTER_1
log_entry,"pandas.DataFrame([results],columns=log_cols)",CLUSTER_5,CLUSTER_1
log_entry,"pandas.DataFrame([results1_2],columns=log_cols)",CLUSTER_5,CLUSTER_1
data,"pandas.read_csv(""creditcard.csv"")",CLUSTER_5,CLUSTER_1
prfs,"sklearn.metrics.precision_recall_fscore_support(Y_test,y_pred,labels=[0])",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([
('scaling',StandardScaler()",CLUSTER_5,CLUSTER_1
skfolds,"sklearn.model_selection.StratifiedKFold(n_splits=n,random_state=42)",CLUSTER_5,CLUSTER_1
start,datetime.datetime.now(),CLUSTER_5,CLUSTER_1
end,datetime.datetime.now(),CLUSTER_5,CLUSTER_1
df,pandas.read_csv('training_data_5.csv'),CLUSTER_1,CLUSTER_3
df_val,pandas.read_csv('validation_data_05.csv'),CLUSTER_1,CLUSTER_3
fig1,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig2,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig21,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig3,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig4,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig5,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig6,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig6,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig8,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig9,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig10,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig11,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig12,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig13,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig14,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig15,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig16,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig19,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig20,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig21,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
x_train,"numpy.concatenate([q_tmp,v_tmp,T_tmp],axis=1)",CLUSTER_1,CLUSTER_3
x_val,"numpy.concatenate([q_tmp,v_tmp,T_tmp],axis=1)",CLUSTER_1,CLUSTER_3
df,pandas.read_excel('Class_Bundle_Sample_File.xlsx'),CLUSTER_1,CLUSTER_3
start_time,time.time(),CLUSTER_1,CLUSTER_3
end_time,time.time(),CLUSTER_1,CLUSTER_3
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('gbm-data.csv'),CLUSTER_5,CLUSTER_5
model,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=learning_rate,n_estimators=250,verbose=True,random_state=241)",CLUSTER_5,CLUSTER_5
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=min_loss_index,random_state=241)",CLUSTER_5,CLUSTER_5
test_loss,"sklearn.metrics.log_loss(y_test,y_pred)",CLUSTER_5,CLUSTER_5
"(trainData,testData,trainLabels,testLabels)",sklearn.model_selection.train_test_split(np.array(mnist.data),CLUSTER_5,CLUSTER_10
"(trainData,valData,trainLabels,valLabels)","sklearn.model_selection.train_test_split(trainData,trainLabels,
test_size=0.1,random_state=84)",CLUSTER_5,CLUSTER_10
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_10
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=kVals[i]),CLUSTER_5,CLUSTER_10
mnist,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
imgdata,"numpy.array(image,dtype='float')",CLUSTER_5,CLUSTER_10
i,numpy.argmax(accuracies),CLUSTER_5,CLUSTER_10
dd,"pandas.DataFrame({""Predictions"":predictions,""Actual"":y_test})",CLUSTER_4,CLUSTER_1
data_df,"pandas.read_csv(
data,delimiter="","",skiprows=0,header=None)",CLUSTER_4,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,random_state=1,stratify=y)",CLUSTER_4,CLUSTER_1
dfp,pandas.read_csv('plate_id.csv'),CLUSTER_8,CLUSTER_4
dfs,pandas.read_csv('stock_concentration.csv'),CLUSTER_8,CLUSTER_4
df,pandas.DataFrame(),CLUSTER_0,CLUSTER_3
test,pandas.DataFrame(data=d),CLUSTER_0,CLUSTER_3
test,pandas.DataFrame(data=d),CLUSTER_0,CLUSTER_3
test,"pandas.DataFrame(d_values,columns=d_labels)",CLUSTER_0,CLUSTER_3
df,pandas.DataFrame(),CLUSTER_0,CLUSTER_3
test,"pandas.DataFrame(d_values,columns=d_labels)",CLUSTER_0,CLUSTER_3
orig_data,"pandas.read_csv('ratings_critics_review.csv',encoding='ISO-8859-1')",CLUSTER_0,CLUSTER_3
critic,"pandas.read_csv('Criticreviews.csv',encoding=""ISO-8859-1"")",CLUSTER_0,CLUSTER_3
movie_name,"numpy.repeat(movies_dict[i].replace('_','')",CLUSTER_0,CLUSTER_3
movie_name,"numpy.repeat(movies_dict[i].replace('_','')",CLUSTER_0,CLUSTER_3
words,"re.findall(r""\w+"",orig_data['top_critic'][i])",CLUSTER_0,CLUSTER_3
dtm_nmf,sklearn.preprocessing.Normalizer(copy=False),CLUSTER_5,CLUSTER_5
nmf_model,sklearn.decomposition.NMF(2),CLUSTER_5,CLUSTER_5
df,pandas.DataFrame(mat),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y)",CLUSTER_5,CLUSTER_5
fig1,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_5,CLUSTER_5
X,pandas.get_dummies(X),CLUSTER_5,CLUSTER_5
brain,pandas.read_csv('Resources/brain_categorical.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_5,CLUSTER_5
X_minmax,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
y_minmax,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
clusterer,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=10)",CLUSTER_5,CLUSTER_10
sample_silhouette_values,"sklearn.metrics.silhouette_samples(X,cluster_labels)",CLUSTER_5,CLUSTER_10
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels)",CLUSTER_5,CLUSTER_10
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_5,CLUSTER_10
dataset,"numpy.loadtxt(raw_data,delimiter="","")",CLUSTER_5,CLUSTER_10
data_consistency,"pandas.DataFrame(data_df.groupby(['IndicatorCode','Year'])",CLUSTER_8,CLUSTER_4
data_df,pandas.concat(data),CLUSTER_8,CLUSTER_4
data_df,pandas.concat(data),CLUSTER_8,CLUSTER_4
indicators_df,pandas.read_csv('indicators.csv'),CLUSTER_8,CLUSTER_4
self.theta_,numpy.linalg.inv(X_b.T.dot(X_b),CLUSTER_5,CLUSTER_5
self.theta_,numpy.linalg.pinv(X_b),CLUSTER_5,CLUSTER_5
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
lr_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
sgd,sklearn.linear_model.SGDRegressor(penalty=None),CLUSTER_5,CLUSTER_5
sgd_l2,"sklearn.linear_model.SGDRegressor(penalty=""l2"")",CLUSTER_5,CLUSTER_5
sgd_l1,"sklearn.linear_model.SGDRegressor(penalty=""l1"")",CLUSTER_5,CLUSTER_5
sgd_elastic_net,"sklearn.linear_model.SGDRegressor(penalty=""elasticnet"",l1_ratio=0.15)",CLUSTER_5,CLUSTER_5
housing,sklearn.datasets.fetch_california_housing(),CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(X,columns=housing[""feature_names""])",CLUSTER_5,CLUSTER_5
y_df,"pandas.DataFrame(np.c_[y_test,ann.predict(X_test)",CLUSTER_5,CLUSTER_5
y_df,"pandas.DataFrame(np.c_[y_test,y_pred],columns=[""y_actual"",""y_pred""])",CLUSTER_5,CLUSTER_5
pipe,"sklearn.pipeline.Pipeline([
(""std_scaler"",StandardScaler()",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(estimator=pipe,param_grid=param_grid,
scoring=""neg_mean_squared_error"",n_jobs=-1,cv=5)",CLUSTER_5,CLUSTER_5
grid_search,sklearn.model_selection.GridSearchCV(estimator=RandomForestRegressor(),CLUSTER_5,CLUSTER_5
grid_search,GridSearchCV(estimator=sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
nyc_crime_raw,"pandas.read_csv('NYC_Crime_2014.csv',header=4)",CLUSTER_7,CLUSTER_8
regression,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
regression,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_10
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_10
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_10
idx,numpy.arange(X.shape[0]),CLUSTER_12,CLUSTER_10
X_test,"numpy.arange(0.0,5.0,0.01)",CLUSTER_12,CLUSTER_10
X_test,"numpy.arange(-100.0,100.0,0.01)",CLUSTER_12,CLUSTER_10
y,numpy.array([np.pi*np.sin(X),CLUSTER_12,CLUSTER_10
idx,numpy.where(y==i),CLUSTER_12,CLUSTER_10
X,"numpy.sort(5*rng.rand(80,1)",CLUSTER_12,CLUSTER_10
X,"numpy.sort(200*rng.rand(100,1)",CLUSTER_12,CLUSTER_10
y,numpy.sin(X),CLUSTER_12,CLUSTER_10
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,plot_step)",CLUSTER_12,CLUSTER_10
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=plt.cm.Paired)",CLUSTER_12,CLUSTER_10
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_10
regr_1,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_12,CLUSTER_10
regr_2,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_12,CLUSTER_10
regr_1,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_12,CLUSTER_10
regr_2,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_12,CLUSTER_10
regr_3,sklearn.tree.DecisionTreeRegressor(max_depth=8),CLUSTER_12,CLUSTER_10
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,max_depth=4)",CLUSTER_3,CLUSTER_6
self.feature_indexes,"numpy.zeros(s,dtype=np.int32)",CLUSTER_3,CLUSTER_6
self.zero_fractions,"numpy.zeros(s,dtype=np.float64)",CLUSTER_3,CLUSTER_6
self.one_fractions,"numpy.zeros(s,dtype=np.float64)",CLUSTER_3,CLUSTER_6
self.pweights,"numpy.zeros(s,dtype=np.float64)",CLUSTER_3,CLUSTER_6
phi,numpy.zeros(X.shape[0]+1),CLUSTER_3,CLUSTER_6
x_missing,"numpy.zeros(X.shape[0],dtype=np.bool)",CLUSTER_3,CLUSTER_6
phi,"numpy.zeros((X.shape[0],X.shape[1]+1)",CLUSTER_3,CLUSTER_6
x_missing,"numpy.zeros(X.shape[1],dtype=np.bool)",CLUSTER_3,CLUSTER_6
x,numpy.ones(X.shape[1]),CLUSTER_3,CLUSTER_6
start,time.time(),CLUSTER_3,CLUSTER_6
start,time.time(),CLUSTER_3,CLUSTER_6
start,time.time(),CLUSTER_3,CLUSTER_6
vocab,numpy.array(vectorizer.get_feature_names(),CLUSTER_12,CLUSTER_6
clf,"sklearn.decomposition.NMF(n_components=10,random_state=1)",CLUSTER_12,CLUSTER_6
"U,s,V","sklearn.decomposition.randomized_svd(dtm,10)",CLUSTER_12,CLUSTER_6
response,requests.get(target_url),CLUSTER_9,CLUSTER_2
response,requests.get(first_link),CLUSTER_9,CLUSTER_2
response,requests.get(i),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(arrange_data),CLUSTER_9,CLUSTER_2
temp,pandas.DataFrame(),CLUSTER_4,CLUSTER_1
word_count,pandas.DataFrame({'word':tf_vectorizer.get_feature_names(),CLUSTER_4,CLUSTER_1
topic_dist,pandas.DataFrame(lda_tf.transform(tf),CLUSTER_4,CLUSTER_1
data,"pandas.read_json(file,lines=True)",CLUSTER_4,CLUSTER_1
lda_tf,"sklearn.decomposition.LatentDirichletAllocation(n_components=10,random_state=0)",CLUSTER_4,CLUSTER_1
lda2,"sklearn.decomposition.LatentDirichletAllocation(n_components=80,random_state=0)",CLUSTER_4,CLUSTER_1
lda3,"sklearn.decomposition.LatentDirichletAllocation(n_components=30,random_state=0)",CLUSTER_4,CLUSTER_1
A,"numpy.genfromtxt(CSVFile,delimiter=';')",CLUSTER_1,CLUSTER_9
"f,((ax1,ax2),(ax3,ax4))","matplotlib.pyplot.subplots(2,2,figsize=(15,5)",CLUSTER_1,CLUSTER_9
Games_Log,"pandas.read_csv(""game_log.csv"")",CLUSTER_8,CLUSTER_4
Park_Codes,"pandas.read_csv(""park_codes.csv"")",CLUSTER_8,CLUSTER_4
Person_Code,"pandas.read_csv(""person_codes.csv"")",CLUSTER_8,CLUSTER_4
Team_Codes,"pandas.read_csv(""team_codes.csv"")",CLUSTER_8,CLUSTER_4
Games_Log,"pandas.read_csv(""game_log.csv"")",CLUSTER_8,CLUSTER_4
Park_Codes,"pandas.read_csv(""park_codes.csv"")",CLUSTER_8,CLUSTER_4
Person_Code,"pandas.read_csv(""person_codes.csv"")",CLUSTER_8,CLUSTER_4
Team_Codes,"pandas.read_csv(""team_codes.csv"")",CLUSTER_8,CLUSTER_4
Appearance,"pandas.read_csv(""appearance_type.csv"")",CLUSTER_8,CLUSTER_4
X_train,"numpy.array(train_data['sqft_living'],dtype=pd.Series)",CLUSTER_7,CLUSTER_8
y_train,"numpy.array(train_data['price'],dtype=pd.Series)",CLUSTER_7,CLUSTER_8
X_test,"numpy.array(test_data['sqft_living'],dtype=pd.Series)",CLUSTER_7,CLUSTER_8
y_test,"numpy.array(test_data['price'],dtype=pd.Series)",CLUSTER_7,CLUSTER_8
evaluation,"pandas.DataFrame({'Model':[],
'Details':[],
'RootMeanSquaredError(RMSE)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('kc_house_data.csv'),CLUSTER_7,CLUSTER_8
"train_data,test_data","sklearn.model_selection.train_test_split(df,train_size=0.8,random_state=3)",CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(19,12.5)",CLUSTER_7,CLUSTER_8
Choc,pandas.read_csv('C:\\Users\\cocob\\Downloads\\flavors_of_cacao.csv'),CLUSTER_7,CLUSTER_8
bnb,sklearn.naive_bayes.BernoulliNB(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,target,test_size=0.2,random_state=20)",CLUSTER_7,CLUSTER_8
hotel_page,requests.get(direktlink_hotel),CLUSTER_9,CLUSTER_2
hotel_page,requests.get(directlink_hotel),CLUSTER_9,CLUSTER_2
df_all_countries,pandas.DataFrame(all_countries),CLUSTER_9,CLUSTER_2
df_all_countries_neu,pandas.DataFrame(all_countries_neu),CLUSTER_9,CLUSTER_2
df_all_hotels_country,pandas.DataFrame(all_hotels_country),CLUSTER_9,CLUSTER_2
df_all_hotels_country,pandas.DataFrame(all_hotels_country),CLUSTER_9,CLUSTER_2
df_hoteldetails,pandas.DataFrame(hoteldetails),CLUSTER_9,CLUSTER_2
df_hoteldetails,pandas.DataFrame(hoteldetails),CLUSTER_9,CLUSTER_2
df_hoteldetails,pandas.DataFrame(hoteldetails),CLUSTER_9,CLUSTER_2
df_median,pandas.DataFrame(median),CLUSTER_9,CLUSTER_2
df_dict_bewertung,pandas.DataFrame(bewertung),CLUSTER_9,CLUSTER_2
df_all_hotels_country_total,"pandas.concat([df1,df2],ignore_index=True)",CLUSTER_9,CLUSTER_2
df_details_alle_hotels_total,"pandas.concat([df_1,df_2,df_3],ignore_index=True)",CLUSTER_9,CLUSTER_2
df1,"pandas.read_csv(""Alle_Hotels_pro_Land_Österreich_bis_TC.csv"")",CLUSTER_9,CLUSTER_2
df2,"pandas.read_csv(""Alle_Hotels_pro_Land_Übersicht_Swasiland_bis_Gibraltar.csv"")",CLUSTER_9,CLUSTER_2
df,pandas.read_csv(path),CLUSTER_9,CLUSTER_2
df,pandas.read_csv(path),CLUSTER_9,CLUSTER_2
df,pandas.read_csv(path),CLUSTER_9,CLUSTER_2
df_1,pandas.read_csv('Details_alle_Hotels_total_Teil_1.csv'),CLUSTER_9,CLUSTER_2
df_2,pandas.read_csv('Details_alle_Hotels_total_Teil_2.csv'),CLUSTER_9,CLUSTER_2
df_3,pandas.read_csv('Details_alle_Hotels_total_Teil_3.csv'),CLUSTER_9,CLUSTER_2
df_total,pandas.read_csv(path_complete),CLUSTER_9,CLUSTER_2
WindowWidth,"numpy.array([128,256,512,1024,2048,4096])",CLUSTER_11,CLUSTER_11
startIndex,numpy.array([]),CLUSTER_11,CLUSTER_11
goalIndex,numpy.array([]),CLUSTER_11,CLUSTER_11
t,numpy.array([]),CLUSTER_11,CLUSTER_11
Output,numpy.array(PdArray[0]),CLUSTER_11,CLUSTER_11
TrimArray,numpy.array([]),CLUSTER_11,CLUSTER_11
index,numpy.where(Output[0]==36290413),CLUSTER_11,CLUSTER_11
Output,"numpy.vstack((Output,AddingArray)",CLUSTER_11,CLUSTER_11
Output,"numpy.vstack((Output,PdArray[i+1])",CLUSTER_11,CLUSTER_11
startIndex,"numpy.append(startIndex,CalcSearchIndexFromTime(obj,startTime)",CLUSTER_11,CLUSTER_11
goalIndex,"numpy.append(goalIndex,CalcSearchIndexFromTime(obj,goalTime)",CLUSTER_11,CLUSTER_11
t,"numpy.append(t,array[i].hour*3600*1000+array[i].minute*60*1000+array[i].second*1000+array[i].microsecond*0.001)",CLUSTER_11,CLUSTER_11
TrimArray,"numpy.append(TrimArray,PandasObject.ix[0:])",CLUSTER_11,CLUSTER_11
TrimArray,"numpy.append(TrimArray,PandasObject[i:i+1])",CLUSTER_11,CLUSTER_11
TrimArray,"numpy.append(TrimArray,TimeArray[i+1:i+2])",CLUSTER_11,CLUSTER_11
l,os.listdir(DataPath),CLUSTER_11,CLUSTER_11
data,pandas.read_csv(csv_file),CLUSTER_11,CLUSTER_11
data,"pandas.read_csv(LabelPath+'spa_First_2.csv',encoding='Shift_JIS')",CLUSTER_11,CLUSTER_11
array,"pandas.to_datetime(data['
t=np.array([])",CLUSTER_11,CLUSTER_11
combos,"pandas.DataFrame(cartesian([gres,gpas,[1,2,3,4],[1.]])",CLUSTER_7,CLUSTER_5
combos,"pandas.concat([combos,dummy_ranks],axis=1)",CLUSTER_7,CLUSTER_5
dummy_ranks,"pandas.get_dummies(df['prestige'],prefix='prestige')",CLUSTER_7,CLUSTER_5
dummy_ranks,"pandas.get_dummies(combos['prestige'],prefix='prestige')",CLUSTER_7,CLUSTER_5
df_raw,"pandas.read_csv(""../assets/admissions.csv"")",CLUSTER_7,CLUSTER_5
out,"numpy.zeros([n,len(arrays)",CLUSTER_7,CLUSTER_5
n,numpy.prod([x.sizeforxinarrays]),CLUSTER_7,CLUSTER_5
"out[:,0]","numpy.repeat(arrays[0],m)",CLUSTER_7,CLUSTER_5
gres,numpy.linspace(data['gre'].min(),CLUSTER_7,CLUSTER_5
gpas,numpy.linspace(data['gpa'].min(),CLUSTER_7,CLUSTER_5
lr,sklearn.linear_model.LogisticRegression(random_state=99),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data[train_cols],data['admit'],test_size=0.2,random_state=11)",CLUSTER_7,CLUSTER_5
data,"pandas.concat([data,sex,pclass,embarked],axis=1)",CLUSTER_7,CLUSTER_5
sex,"pandas.get_dummies(data['Sex'],drop_first=True)",CLUSTER_7,CLUSTER_5
pclass,"pandas.get_dummies(data['Pclass'],drop_first=True)",CLUSTER_7,CLUSTER_5
embarked,"pandas.get_dummies(data['Embarked'],drop_first=True)",CLUSTER_7,CLUSTER_5
data,pandas.read_csv('C:/Users/sachi/Downloads/titanic_train.csv'),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30)",CLUSTER_7,CLUSTER_5
model,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n_neighbors),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=11),CLUSTER_7,CLUSTER_5
model,sklearn.svm.SVC(kernel='linear'),CLUSTER_7,CLUSTER_5
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_7,CLUSTER_5
drinks,pandas.read_csv('http://bit.ly/drinksbycountry'),CLUSTER_8,CLUSTER_4
complaints,pandas.read_csv('../data/311-service-requests.csv'),CLUSTER_1,CLUSTER_3
arr,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_3
data,pandas.DataFrame(data),CLUSTER_7,CLUSTER_8
df1,"pandas.DataFrame({'Actual_price':y_test,'Predicted_price':prediction})",CLUSTER_7,CLUSTER_8
result,"pandas.DataFrame(result,columns=['price'])",CLUSTER_7,CLUSTER_8
df,"pandas.concat([new_data,result],axis=1)",CLUSTER_7,CLUSTER_8
data,"pandas.read_csv(r""F:\Data_Sets\house_price.csv"")",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(r""C:\Users\sathishkumar\Downloads\predictivedata\house_price_prediction.csv"")",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=0)",CLUSTER_7,CLUSTER_8
grid_model,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=parameters,cv=2,n_jobs=-1)",CLUSTER_7,CLUSTER_8
test_score,"sklearn.metrics.r2_score(y_test,prediction)",CLUSTER_7,CLUSTER_8
prediction,"pandas.DataFrame(prediction,columns=[""rf_pred""])",CLUSTER_5,CLUSTER_1
x_combine_2,pandas.get_dummies(x_combine),CLUSTER_5,CLUSTER_1
data,"pandas.read_csv(""emission_train.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
test,"pandas.read_csv(""emission_test.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
data,"pandas.read_csv(""emission_train.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
predict,"pandas.read_csv(""emission_predicted.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
predict,"pandas.read_csv(""emission_predicted.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
ridge,sklearn.linear_model.Ridge(alpha=10000),CLUSTER_5,CLUSTER_1
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_1
loans_df,"pandas.get_dummies(loans_df,columns=[""Bank"",""State"",""City""])",CLUSTER_8,CLUSTER_1
loans_df,pandas.read_csv(file_path),CLUSTER_8,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
a,pandas.DataFrame(daily_counts),CLUSTER_7,CLUSTER_3
df_merged,"pandas.concat(list_df,axis=0,ignore_index=True)",CLUSTER_7,CLUSTER_3
df_0th,"pandas.concat(list_0rows,axis=0,ignore_index=True)",CLUSTER_7,CLUSTER_3
a.index,pandas.to_datetime(a.index),CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(15.0*x,10.0*x)",CLUSTER_7,CLUSTER_3
preds_with_true_labels,"numpy.array(list(zip(y_predicted_probs,y_true_labels)",CLUSTER_5,CLUSTER_5
scores_table,"pandas.DataFrame({'f1':f1_scores,
'precision':precisions,
'recall':recalls,
'probability':thresholds})",CLUSTER_5,CLUSTER_5
feat_imp,"pandas.DataFrame({'feat':model_catb_final.feature_names_,'importance':model_catb_final.get_feature_importance()",CLUSTER_5,CLUSTER_5
pred_df,"pandas.DataFrame({'Id':data_test['Id'],cred_default:pd.Series(predicted,dtype='bool')",CLUSTER_5,CLUSTER_5
df,"pandas.concat([df,pd.get_dummies(df[cat_colname],prefix=cat_colname)",CLUSTER_5,CLUSTER_5
data_train,pandas.read_csv('./data/train-kaggle.csv'),CLUSTER_5,CLUSTER_5
data_test,pandas.read_csv('./data/test-kaggle.csv'),CLUSTER_5,CLUSTER_5
figure,"matplotlib.pyplot.figure(figsize=(15,5)",CLUSTER_5,CLUSTER_5
cv,"sklearn.model_selection.KFold(n_splits=3,random_state=21,shuffle=True)",CLUSTER_5,CLUSTER_5
rs,"sklearn.model_selection.RandomizedSearchCV(model_catb,params,scoring='f1',cv=cv,n_jobs=-1)",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
fLat,numpy.radians(data.LocationLat),CLUSTER_4,CLUSTER_11
fLon,numpy.radians(data.LocationLng),CLUSTER_4,CLUSTER_11
sLat,numpy.radians(lat),CLUSTER_4,CLUSTER_11
sLon,numpy.radians(lng),CLUSTER_4,CLUSTER_11
a,numpy.sin(dLat/2.0),CLUSTER_4,CLUSTER_11
data_split,"numpy.array_split(data,partitions)",CLUSTER_4,CLUSTER_11
data_split,"numpy.array_split(data,partitions)",CLUSTER_4,CLUSTER_11
collision_T,"collision_T.assign(distance=pandas.Series(
distance(collision_T,long_event.LocationLat,long_event.LocationLng,idx)",CLUSTER_4,CLUSTER_11
collision,"pandas.concat([collison_W,collision_T])",CLUSTER_4,CLUSTER_11
long_event,"pandas.read_hdf('../../long_events_.h5',key='LN_300')",CLUSTER_4,CLUSTER_11
long_events_,"pandas.read_hdf(filepath,key=key)",CLUSTER_4,CLUSTER_11
In_LN,"pandas.read_hdf('../../long_events.h5',key='LN_300')",CLUSTER_4,CLUSTER_11
data_set,"pandas.read_hdf('../../data_set.h5',key='DS_new')",CLUSTER_4,CLUSTER_11
list_num_factors,"numpy.asarray([1,2,3,4])",CLUSTER_4,CLUSTER_11
list_num_groups,"numpy.asarray([2,3,4,5,6])",CLUSTER_4,CLUSTER_11
elbos2,numpy.asarray(elbos2),CLUSTER_4,CLUSTER_11
linx,numpy.asarray([np.min(_x),CLUSTER_4,CLUSTER_11
z,"numpy.zeros((num_nodes,num_communities)",CLUSTER_4,CLUSTER_11
predictor,"numpy.dot(x,A.T)",CLUSTER_4,CLUSTER_11
z,"numpy.ones((num_nodes,num_groups)",CLUSTER_4,CLUSTER_11
best_idx,"numpy.argmax(model['z'].mean,axis=1)",CLUSTER_4,CLUSTER_11
"m,c","numpy.polyfit(_x,_y,1)",CLUSTER_4,CLUSTER_11
hyperparameters,json.load(fp),CLUSTER_4,CLUSTER_11
kmeans,sklearn.cluster.KMeans(num_communities),CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(ncols=n_pictures,figsize=(4*n_pictures,4)",CLUSTER_6,CLUSTER_11
mean,"numpy.array([0.5,0.5,0.5])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.5,0.5,0.5])",CLUSTER_6,CLUSTER_11
mean,"numpy.array([0.5,0.5,0.5])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.5,0.5,0.5])",CLUSTER_6,CLUSTER_11
self.train_y,"numpy.zeros(n1,dtype=np.uint8)",CLUSTER_6,CLUSTER_11
self.val_y,"numpy.zeros(n2,dtype=np.uint8)",CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
since,time.time(),CLUSTER_6,CLUSTER_11
time_elapsed,time.time(),CLUSTER_6,CLUSTER_11
self.df,pandas.read_csv(train_csv_path_and_file),CLUSTER_6,CLUSTER_11
self.df_test,pandas.read_csv(test_csv_path_and_file),CLUSTER_6,CLUSTER_11
user31_data,"pandas.read_csv(os.path.join(PATH_TO_DATA,
'10users/user0031.csv')",CLUSTER_4,CLUSTER_11
dd1,pandas.read_csv(path+d1),CLUSTER_1,CLUSTER_3
dd2,pandas.read_csv(path+d2),CLUSTER_1,CLUSTER_3
dd3,pandas.read_csv(path+d3),CLUSTER_1,CLUSTER_3
dd,json.loads(f.read(),CLUSTER_1,CLUSTER_3
dd,json.loads(f.read(),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,15)",CLUSTER_1,CLUSTER_3
yy,numpy.array(df6[ii].dropna(),CLUSTER_1,CLUSTER_3
xx,numpy.array(df[ii].dropna(),CLUSTER_1,CLUSTER_3
yy,numpy.array(df5[ii].dropna(),CLUSTER_1,CLUSTER_3
xx1,numpy.array(df2[ii].dropna(),CLUSTER_1,CLUSTER_3
yy1,numpy.array(df5[ii].dropna(),CLUSTER_1,CLUSTER_3
xx1,numpy.array(df2[ii].dropna(),CLUSTER_1,CLUSTER_3
yy,numpy.array(df5[ii].dropna(),CLUSTER_1,CLUSTER_3
xx1,numpy.array(df2[ii].dropna(),CLUSTER_1,CLUSTER_3
yy,numpy.array(df5[ii].dropna(),CLUSTER_1,CLUSTER_3
X,"pandas.concat([full_data[:train_data.shape[0]][cat_columns],full_data[:train_data.shape[0]][con_columns]],axis=1)",CLUSTER_7,CLUSTER_8
sample_submission,pandas.read_csv('sample_submission.csv'),CLUSTER_7,CLUSTER_8
train_data,pandas.read_csv('train_2016_v2.csv'),CLUSTER_7,CLUSTER_8
properties_data,pandas.read_csv('properties_2016.csv'),CLUSTER_7,CLUSTER_8
zillow_dict,"pandas.read_excel('zillow_data_dictionary.xlsx',sheetname=None)",CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
OHE,sklearn.preprocessing.OneHotEncoder(),CLUSTER_7,CLUSTER_8
SSL,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
"full_data[i],_",scipy.stats.boxcox(full_data[i]+20),CLUSTER_7,CLUSTER_8
linear_reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
counts,collections.Counter(snp_counts),CLUSTER_10,CLUSTER_4
X,"numpy.arange(1,17,1)",CLUSTER_1,CLUSTER_3
Y,"numpy.arange(100,1100,100)",CLUSTER_1,CLUSTER_3
X,"numpy.arange(1,17,1)",CLUSTER_1,CLUSTER_3
Y,"numpy.arange(100,1100,100)",CLUSTER_1,CLUSTER_3
z,"numpy.empty(shape=(10,16)",CLUSTER_1,CLUSTER_3
"X,Y","numpy.meshgrid(X,Y)",CLUSTER_1,CLUSTER_3
"X,Y","numpy.meshgrid(X,Y)",CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(data=d),CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(df,dtype='float64')",CLUSTER_5,CLUSTER_1
out,"pandas.Series(result[0:4],index=labels)",CLUSTER_5,CLUSTER_1
df,pandas.read_csv('global_covid_confirmed_daily_updates.csv'),CLUSTER_5,CLUSTER_1
df.index,pandas.to_datetime(df.index),CLUSTER_5,CLUSTER_1
error,"sklearn.metrics.mean_squared_error(test['India'],predictions)",CLUSTER_5,CLUSTER_1
self.pos,"numpy.array([0,0])",CLUSTER_3,CLUSTER_6
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,stratify=y,random_state=random_seed,test_size=0.3)",CLUSTER_5,CLUSTER_10
continuous_pipeline,sklearn.pipeline.Pipeline(steps=pipeline_steps),CLUSTER_5,CLUSTER_10
xgb_clf_pipeline,"sklearn.pipeline.Pipeline(steps=[('features',FeatureUnion(featurisers)",CLUSTER_5,CLUSTER_10
xgb_hist_clf_pipeline,"sklearn.pipeline.Pipeline(steps=[('features',FeatureUnion(featurisers)",CLUSTER_5,CLUSTER_10
lgbm_clf_pipeline,"sklearn.pipeline.Pipeline(steps=[('features',FeatureUnion(featurisers)",CLUSTER_5,CLUSTER_10
left,"random.randint(0,w-new_w)",CLUSTER_3,CLUSTER_6
top,"random.randint(0,h-new_h)",CLUSTER_3,CLUSTER_6
area,random.uniform(*self.scale),CLUSTER_3,CLUSTER_6
"left,top","random.randint(0,w-self.crop_size[0])",CLUSTER_3,CLUSTER_6
"left,top","random.randint(0,x.size[0]-csize[0])",CLUSTER_3,CLUSTER_6
"left,top","random.randint(0,x.size[0]-csize[0])",CLUSTER_3,CLUSTER_6
%timeit-n10a,numpy.array(PIL.Image.open(il.items[0]),CLUSTER_3,CLUSTER_6
a,"numpy.array([250,20,254],dtype='uint8')",CLUSTER_1,CLUSTER_9
a,"numpy.array([250,20,254],dtype='int')",CLUSTER_1,CLUSTER_9
f,numpy.array(e),CLUSTER_1,CLUSTER_9
imgint,"numpy.array(img,dtype='int')",CLUSTER_1,CLUSTER_9
kernel,"numpy.array([[0,0,0],
[0,1,0],
[0,0,0]])",CLUSTER_1,CLUSTER_9
kernel,"numpy.ones((k,k)",CLUSTER_1,CLUSTER_9
c,"numpy.clip(b,0,255)",CLUSTER_1,CLUSTER_9
img2,"numpy.clip(img2,0,255)",CLUSTER_1,CLUSTER_9
all,"numpy.hstack([
cv2.LUT(img,mullut(0.7)",CLUSTER_1,CLUSTER_9
hb,matplotlib.pyplot.hist(b.ravel(),CLUSTER_1,CLUSTER_9
hg,matplotlib.pyplot.hist(g.ravel(),CLUSTER_1,CLUSTER_9
hr,matplotlib.pyplot.hist(r.ravel(),CLUSTER_1,CLUSTER_9
losses,numpy.array(losses),CLUSTER_5,CLUSTER_10
yhat,numpy.array(yhat),CLUSTER_5,CLUSTER_10
"X,Y,coef","sklearn.datasets.make_regression(n_samples=500,n_features=1,bias=3.7,noise=8.5,coef=True)",CLUSTER_5,CLUSTER_10
r,"random.randint(0,len(datain)",CLUSTER_3,CLUSTER_6
y,numpy.array([d['y']fordindatain]),CLUSTER_3,CLUSTER_6
DX_train,numpy.array([d['x']fordinX_train]),CLUSTER_3,CLUSTER_6
DX_test,numpy.array([d['x']fordinX_test]),CLUSTER_3,CLUSTER_6
x1,"numpy.array([transformin([""أرحام"",""""])",CLUSTER_3,CLUSTER_6
x,numpy.zeros(20*512),CLUSTER_3,CLUSTER_6
y,numpy.zeros(4*30),CLUSTER_3,CLUSTER_6
by,numpy.zeros(120),CLUSTER_3,CLUSTER_6
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.05)",CLUSTER_3,CLUSTER_6
univ,pandas.read_csv('University.csv'),CLUSTER_7,CLUSTER_3
univ['Full_Time_Enrollment'],pandas.to_numeric(univ['Full_Time_Enrollment']),CLUSTER_7,CLUSTER_3
univ['Average_Monthly_Search_Volume'],pandas.to_numeric(univ['Average_Monthly_Search_Volume']),CLUSTER_7,CLUSTER_3
univ['Endowment_per_Full_Time_Student'],pandas.to_numeric(univ['Endowment_per_Full_Time_Student']),CLUSTER_7,CLUSTER_3
biggest['Full_Time_Enrollment'],pandas.to_numeric(biggest['Full_Time_Enrollment']),CLUSTER_7,CLUSTER_3
g,"seaborn.FacetGrid(univ,col=""Prof_G_Categorization"",hue=""Prof_G_Categorization"")",CLUSTER_7,CLUSTER_3
ax,"seaborn.boxplot(x=""Prof_G_Categorization"",y=""Full_Time_Enrollment"",data=univ)",CLUSTER_7,CLUSTER_3
g,"seaborn.jointplot(x=""Full_Time_Enrollment"",y=""Endowment_per_Full_Time_Student"",data=thrive,
kind=""reg"",truncate=False,
xlim=(0,60000)",CLUSTER_7,CLUSTER_3
g,"seaborn.jointplot(x=""Full_Time_Enrollment"",y=""Endowment_per_Full_Time_Student"",data=struggle,
kind=""reg"",truncate=False,
xlim=(0,60000)",CLUSTER_7,CLUSTER_3
ax,"seaborn.lmplot(y='Eduation_Score',x='Rank',data=univ,
col='Prof_G_Categorization',hue='Prof_G_Categorization'
)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x=""Vulnerability_Score"",y=""Average_Undergraduate_Tuition_and_Fees"",hue=""Prof_G_Categorization"",data=top_ranked)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x=""Vulnerability_Score"",y=""Full_Time_Enrollment"",hue=""Prof_G_Categorization"",data=biggest)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x=""Vulnerability_Score"",y=""Full_Time_Enrollment"",hue=""Prof_G_Categorization"",data=smallest)",CLUSTER_7,CLUSTER_3
ax2,"seaborn.scatterplot(x=""Average_Monthly_Search_Volume"",y=""Vulnerability_Score"",hue=""Prof_G_Categorization"",data=univ)",CLUSTER_7,CLUSTER_3
axp,"seaborn.scatterplot(y='Eduation_Score',x='Rank',data=univ,hue='Prof_G_Categorization',palette=['blue','orange','green','red'])",CLUSTER_7,CLUSTER_3
L,matplotlib.pyplot.legend(prop={'size':9.5}),CLUSTER_7,CLUSTER_3
all_features[i],numpy.cbrt(all_features[i]),CLUSTER_7,CLUSTER_8
"submission.iloc[:,1]",numpy.floor(np.expm1(y_pred),CLUSTER_7,CLUSTER_8
"df_train[""cc_cons""]","numpy.log1p(df_train[""cc_cons""])",CLUSTER_7,CLUSTER_8
all_features[i],numpy.log1p(all_features[i]),CLUSTER_7,CLUSTER_8
rmse,"numpy.sqrt(-cross_val_score(model,X,train_labels,scoring=""neg_mean_squared_error"",cv=kf)",CLUSTER_7,CLUSTER_8
data,pandas.DataFrame(df),CLUSTER_7,CLUSTER_8
skewness,pandas.DataFrame({'Skew':high_skew}),CLUSTER_7,CLUSTER_8
skewness,pandas.DataFrame({'Skew':high_skew}),CLUSTER_7,CLUSTER_8
skewness,pandas.DataFrame({'Skew':high_skew}),CLUSTER_7,CLUSTER_8
df_labels,pandas.DataFrame(train_labels),CLUSTER_7,CLUSTER_8
data,"pandas.concat([df_train['cc_cons'],df_train['cc_cons_apr']],axis=1)",CLUSTER_7,CLUSTER_8
all_features,"pandas.concat([train_features,test_features])",CLUSTER_7,CLUSTER_8
all_features,pandas.get_dummies(all_features),CLUSTER_7,CLUSTER_8
df_train,pandas.read_csv('./dataset/train.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv('./dataset/test_9K3DBWQ.csv'),CLUSTER_7,CLUSTER_8
all_features,pandas.read_csv('./dataset/all_feature_210719.csv'),CLUSTER_7,CLUSTER_8
all_features,pandas.read_csv('./dataset/all_features_final_210719.csv'),CLUSTER_7,CLUSTER_8
submission,"pandas.read_csv(""./dataset/sample_submission_iwBpW0t.csv"")",CLUSTER_7,CLUSTER_8
df_dict,pandas.read_excel('./dataset/Data_Dictionary.xlsx'),CLUSTER_7,CLUSTER_8
ax,"seaborn.boxplot(data=all_features[numeric],orient=""h"",palette=""Set1"")",CLUSTER_7,CLUSTER_8
ax,"seaborn.boxplot(data=all_features[numeric],orient=""h"",palette=""Set1"")",CLUSTER_7,CLUSTER_8
ax,"seaborn.boxplot(data=all_features[numeric],orient=""h"",palette=""Set1"")",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"fig,axs","matplotlib.pyplot.subplots(ncols=2,nrows=0,figsize=(12,120)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=1200,
max_depth=15,
min_samples_split=5,
min_samples_leaf=5,
max_features=None,
oob_score=True,
random_state=42)",CLUSTER_7,CLUSTER_8
gbr,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=6000,
learning_rate=0.01,
max_depth=4,
max_features='sqrt',
min_samples_leaf=15,
min_samples_split=10,
loss='huber',
random_state=42)",CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_splits=3,random_state=42,shuffle=True)",CLUSTER_7,CLUSTER_8
ridge,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_7,CLUSTER_8
svr,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_7,CLUSTER_8
scaler_x,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
df1,pandas.DataFrame({'A':['a'+str(x),CLUSTER_8,CLUSTER_4
df2,pandas.DataFrame({'A':['a'+str(x),CLUSTER_8,CLUSTER_4
df3,pandas.DataFrame({'D':['d'+str(x),CLUSTER_8,CLUSTER_4
df4,pandas.DataFrame({'D':['d'+str(x),CLUSTER_8,CLUSTER_4
left,pandas.DataFrame({'idx':['i'+str(x),CLUSTER_8,CLUSTER_4
right,pandas.DataFrame({'idx':['i'+str(x),CLUSTER_8,CLUSTER_4
fig,"matplotlib.pyplot.figure(figsize=(14,12)",CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(2,1,figsize=(10,8)",CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_1,CLUSTER_10
time_2_sync,"numpy.empty((npts,npts)",CLUSTER_1,CLUSTER_10
n1,numpy.empty(T),CLUSTER_1,CLUSTER_10
n2,numpy.empty(T),CLUSTER_1,CLUSTER_10
unit_range,"numpy.linspace(0.0,1.0,npts)",CLUSTER_1,CLUSTER_10
unitrange,"numpy.linspace(0,1,npts)",CLUSTER_1,CLUSTER_10
unitrange,"numpy.linspace(0,1,npts)",CLUSTER_1,CLUSTER_10
forest_prediction,numpy.expm1(forest_model.predict(X_test_transformed),CLUSTER_7,CLUSTER_8
alphas,"numpy.logspace(-5,2,100)",CLUSTER_7,CLUSTER_8
alphas,"numpy.logspace(1,2,10)",CLUSTER_7,CLUSTER_8
train_sizes,"numpy.linspace(0.05,1,20)",CLUSTER_7,CLUSTER_8
X_train_real,"numpy.hstack((X_train_сarat_log,X_train_x_log,X_train[:,[7,8,4,5]])",CLUSTER_7,CLUSTER_8
X_test_real,"numpy.hstack((X_test_сarat_log,X_test_x_log,X_test[:,[7,8,4,5]])",CLUSTER_7,CLUSTER_8
X_train_transformed,"numpy.hstack((X_train_real_scaled,X_train_cut_ohe,X_train_color_ohe,X_train_clarity_ohe)",CLUSTER_7,CLUSTER_8
X_test_transformed,"numpy.hstack((X_test_real_scaled,X_test_cut_ohe,X_test_color_ohe,X_test_clarity_ohe)",CLUSTER_7,CLUSTER_8
X_train_transformed_add,"numpy.hstack((X_train_transformed,X_train_additional_scaled)",CLUSTER_7,CLUSTER_8
X_test_transformed_add,"numpy.hstack((X_test_transformed,X_test_additional_scaled)",CLUSTER_7,CLUSTER_8
log_vect,numpy.vectorize(np.log1p),CLUSTER_7,CLUSTER_8
diamonds_df,pandas.read_csv('../../data/diamonds.csv'),CLUSTER_7,CLUSTER_8
ax,"seaborn.distplot(sub_df['price'],kde=False,ax=axes[idx//3,idx%3])",CLUSTER_7,CLUSTER_8
ax,"seaborn.distplot(sub_df['price'],kde=False,ax=axes[idx//3,idx%3])",CLUSTER_7,CLUSTER_8
ax,"seaborn.distplot(sub_df['price'],kde=False,ax=axes[idx//3,idx%3])",CLUSTER_7,CLUSTER_8
ridge_cv,"sklearn.linear_model.RidgeCV(alphas=alphas,scoring=mean_absolute_exp_error,cv=cv)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.Ridge(random_state=4444),CLUSTER_7,CLUSTER_8
model,"sklearn.linear_model.Ridge(alpha=52.140083,random_state=4444)",CLUSTER_7,CLUSTER_8
pure_ridge,"sklearn.linear_model.Ridge(random_state=4444,alpha=0.00001)",CLUSTER_7,CLUSTER_8
poly_ridge,"sklearn.linear_model.Ridge(random_state=4444,alpha=52.140083)",CLUSTER_7,CLUSTER_8
lasso_cv,"sklearn.linear_model.LassoCV(alphas=alphas,cv=cv,random_state=4444)",CLUSTER_7,CLUSTER_8
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,random_state=4444)",CLUSTER_7,CLUSTER_8
forest_model,"sklearn.ensemble.RandomForestRegressor(n_estimators=200,random_state=4444)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=4444,shuffle=True)",CLUSTER_7,CLUSTER_8
"X_train_boosting,X_valid_boosting,y_train_boosting,y_valid_boosting","sklearn.model_selection.train_test_split(
X_train_transformed,y_train_log,test_size=0.3,random_state=4444)",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=4444)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
label_bin,sklearn.preprocessing.LabelBinarizer(),CLUSTER_7,CLUSTER_8
X_train_additional,sklearn.preprocessing.PolynomialFeatures(),CLUSTER_7,CLUSTER_8
X_test_additional,sklearn.preprocessing.PolynomialFeatures(),CLUSTER_7,CLUSTER_8
score_ridge,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(ridge_cv.predict(X_test_transformed)",CLUSTER_7,CLUSTER_8
score_lasso,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(lasso_cv.predict(X_test_transformed)",CLUSTER_7,CLUSTER_8
score_ridge,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(ridge_cv.predict(X_test_transformed_add)",CLUSTER_7,CLUSTER_8
score_lasso,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(lasso_cv.predict(X_test_transformed_add)",CLUSTER_7,CLUSTER_8
score,"sklearn.metrics.mean_absolute_error(y_test,forest_prediction)",CLUSTER_7,CLUSTER_8
score,sklearn.metrics.mean_absolute_error(np.expm1(y_valid_boosting),CLUSTER_7,CLUSTER_8
score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(predictions)",CLUSTER_7,CLUSTER_8
pure_ridge_score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(pure_ridge.predict(X_test_transformed)",CLUSTER_7,CLUSTER_8
poly_ridge_score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(poly_ridge.predict(X_test_transformed_add)",CLUSTER_7,CLUSTER_8
forest_score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(forest_model.predict(X_test_transformed)",CLUSTER_7,CLUSTER_8
boosting_score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(boosting_model.predict(dvalid)",CLUSTER_7,CLUSTER_8
"N_train,val_train,val_test","sklearn.model_selection.learning_curve(model,X,y,train_sizes=train_sizes,cv=5,scoring=mean_absolute_exp_error,random_state=4444)",CLUSTER_7,CLUSTER_8
"val_train,val_test","sklearn.model_selection.validation_curve(model,X_train_transformed_add,y_train_log,'alpha',alphas,cv=cv,scoring=mean_absolute_exp_error)",CLUSTER_7,CLUSTER_8
"val_train,val_test","sklearn.model_selection.validation_curve(model,X_train_transformed,y_train_log,'n_estimators',n_estimators,cv=cv,scoring=mean_absolute_exp_error)",CLUSTER_7,CLUSTER_8
brow,"numpy.array(train.loc[:,""Browser_Used""])",CLUSTER_5,CLUSTER_1
dev,"numpy.array(train.loc[:,""Device_Used""])",CLUSTER_5,CLUSTER_1
label,"numpy.array(train.loc[:,""Is_Response""])",CLUSTER_5,CLUSTER_1
prediction,numpy.array(prediction),CLUSTER_5,CLUSTER_1
loan_id,"numpy.ravel(test.loc[:,['User_ID']])",CLUSTER_5,CLUSTER_1
ans,"pandas.DataFrame(prediction,loan_id,columns=['Is_Response'])",CLUSTER_5,CLUSTER_1
combine,"pandas.concat([train,test])",CLUSTER_5,CLUSTER_1
train,pandas.read_csv('train.csv'),CLUSTER_5,CLUSTER_1
test,pandas.read_csv('test.csv'),CLUSTER_5,CLUSTER_1
test,"pandas.read_csv(""test.csv"")",CLUSTER_5,CLUSTER_1
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data[cols],data[target_col].values,test_size=0.3,random_state=142)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data[most_important_features.index],data[target_col],test_size=0.3,random_state=142)",CLUSTER_5,CLUSTER_5
correlated_indices,numpy.where((corr_matrix>=0.8),CLUSTER_5,CLUSTER_5
sorted_idx,numpy.argsort(feature_importance_values),CLUSTER_5,CLUSTER_5
sorted_idx,numpy.argsort(feature_importance_values),CLUSTER_5,CLUSTER_5
important_feature_series,"pandas.Series(feature_importance_values,index=important_features)",CLUSTER_5,CLUSTER_5
data,"pandas.get_dummies(data,columns=cat_col)",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv(""data.csv"",encoding='unicode_escape')",CLUSTER_5,CLUSTER_5
cv,"5,error_score=sklearn.metrics.make_scorer(accuracy_score)",CLUSTER_5,CLUSTER_5
"""min_samples_leaf"":[2,4,5,6]}],cv","5,error_score=sklearn.metrics.make_scorer(accuracy_score)",CLUSTER_5,CLUSTER_5
best_gdr,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.4,n_estimators=30)",CLUSTER_5,CLUSTER_5
best_tree,"sklearn.ensemble.RandomForestClassifier(max_depth=4,min_samples_leaf=4,n_estimators=50)",CLUSTER_5,CLUSTER_5
gdr_grid_search,sklearn.model_selection.GridSearchCV(GradientBoostingClassifier(),CLUSTER_5,CLUSTER_5
grid_search_tree,sklearn.model_selection.GridSearchCV(RandomForestClassifier(),CLUSTER_5,CLUSTER_5
zs,"numpy.arange(-5,5,0.1)",CLUSTER_7,CLUSTER_8
X,"numpy.concatenate((Xtr,Xte)",CLUSTER_7,CLUSTER_8
"xx,yy","numpy.meshgrid(np.linspace(x_min,x_max,100)",CLUSTER_7,CLUSTER_8
cs2,"matplotlib.pyplot.contour(xx,yy,Z,cmap=ccolor,alpha=.6,axes=ax)",CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
dflog,"pandas.read_csv(""data/01_heights_weights_genders.csv"")",CLUSTER_7,CLUSTER_8
c0,seaborn.color_palette(),CLUSTER_7,CLUSTER_8
c1,seaborn.color_palette(),CLUSTER_7,CLUSTER_8
c2,seaborn.color_palette(),CLUSTER_7,CLUSTER_8
gs,"sklearn.model_selection.GridSearchCV(clf,param_grid=parameters,cv=n_folds)",CLUSTER_7,CLUSTER_8
"Xlr,Xtestlr,ylr,ytestlr","sklearn.model_selection.train_test_split(dflog[['Height','Weight']].values,
(dflog.Gender==""Male"")",CLUSTER_7,CLUSTER_8
"Xtrain,Xtest,ytrain,ytest","sklearn.model_selection.train_test_split(X,y,train_size=train_size)",CLUSTER_7,CLUSTER_8
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
clf,sklearn.linear_model.LogisticRegression(C=c),CLUSTER_7,CLUSTER_8
clf1,sklearn.linear_model.LogisticRegression(C=0.1),CLUSTER_7,CLUSTER_8
clf2,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
clf_2,sklearn.linear_model.LogisticRegression(C=0.001),CLUSTER_7,CLUSTER_8
new_rides,numpy.mean(fiveso),CLUSTER_1,CLUSTER_10
b,"random.randint(2,zm)",CLUSTER_3,CLUSTER_4
r,"random.randint(2,n-2)",CLUSTER_3,CLUSTER_4
k_prywatny,"random.randint(2,p-2)",CLUSTER_3,CLUSTER_4
j,"random.randint(2,p-2)",CLUSTER_3,CLUSTER_4
x,math.floor(math.sqrt(n),CLUSTER_3,CLUSTER_4
spraw,math.floor(math.sqrt(y),CLUSTER_3,CLUSTER_4
ifx,=math.sqrt(n),CLUSTER_3,CLUSTER_4
ifspraw,=math.sqrt(y),CLUSTER_3,CLUSTER_4
statinfo,os.stat(filepath),CLUSTER_2,CLUSTER_7
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_2,CLUSTER_7
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_2,CLUSTER_7
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_2,CLUSTER_7
df,"pandas.DataFrame(data=pitcher_team_cleaned,columns=['Team','Pitcher'])",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame(data=line_odds_cleaned,columns=['Line','Odds'])",CLUSTER_8,CLUSTER_3
df3,"pandas.DataFrame(data=over_unders_cleaned,columns=['Over_Under','Total','Price'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_excel(""Ejemplo.xlsx"")",CLUSTER_7,CLUSTER_9
"normality_plot,stat","scipy.stats.probplot(modelo.resid,plot=plt,rvalue=True)",CLUSTER_7,CLUSTER_9
SW,scipy.stats.shapiro(modelo.resid),CLUSTER_7,CLUSTER_9
orden,random.sample(range(26),CLUSTER_7,CLUSTER_9
df,pandas.read_csv('logreturns.csv'),CLUSTER_8,CLUSTER_4
stats,"requests.get(requestStr,auth=HTTPBasicAuth(userid,password)",CLUSTER_9,CLUSTER_2
stats,"requests.get(requestStr,auth=HTTPBasicAuth(userid,password)",CLUSTER_9,CLUSTER_2
settings,json.load(open('../APIsettings/config.json'),CLUSTER_9,CLUSTER_2
settings,json.load(open('../APIsettings/config.json'),CLUSTER_9,CLUSTER_2
players_df,"pandas.DataFrame(players,columns=ncolumns)",CLUSTER_9,CLUSTER_2
self.feats,collections.defaultdict(int),CLUSTER_10,CLUSTER_4
train,"pandas.merge(train,label,on='ID')",CLUSTER_7,CLUSTER_5
train,pandas.read_csv('./train.csv'),CLUSTER_7,CLUSTER_5
label,"pandas.read_csv('./challenge_output_data_training_file_nba_challenge.csv',sep=';')",CLUSTER_7,CLUSTER_5
test,pandas.read_csv('./test.csv'),CLUSTER_7,CLUSTER_5
test,pandas.read_csv('./test.csv'),CLUSTER_7,CLUSTER_5
feat,numpy.sort(model.feature_importances_),CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_7,CLUSTER_5
"df_train,df_val","sklearn.model_selection.train_test_split(train,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_5
pdat,"numpy.array([parsec['logTe'],parsec['Ksmag'],np.log10(parsec['Zini']/0.02)",CLUSTER_7,CLUSTER_5
model,numpy.array([radii]),CLUSTER_7,CLUSTER_5
model,numpy.array([x]),CLUSTER_7,CLUSTER_5
parage,numpy.asarray(parages.copy(),CLUSTER_7,CLUSTER_5
devs,numpy.asarray(devs),CLUSTER_7,CLUSTER_5
bloopage,numpy.asarray(parages),CLUSTER_7,CLUSTER_5
mp_radii,numpy.asarray(mp_radii),CLUSTER_7,CLUSTER_5
mp_surfden,numpy.asarray(mp_surfden),CLUSTER_7,CLUSTER_5
mp_radii,numpy.asarray(mp_radii),CLUSTER_7,CLUSTER_5
mp_surfden,numpy.asarray(mp_surfden),CLUSTER_7,CLUSTER_5
young_radii,numpy.asarray(young_radii),CLUSTER_7,CLUSTER_5
young_surfden,numpy.asarray(young_surfden),CLUSTER_7,CLUSTER_5
yless_radii,numpy.asarray(yless_radii),CLUSTER_7,CLUSTER_5
yless_surfden,numpy.asarray(yless_surfden),CLUSTER_7,CLUSTER_5
ymed_radii,numpy.asarray(ymed_radii),CLUSTER_7,CLUSTER_5
ymed_surfden,numpy.asarray(ymed_surfden),CLUSTER_7,CLUSTER_5
omed_radii,numpy.asarray(omed_radii),CLUSTER_7,CLUSTER_5
omed_surfden,numpy.asarray(omed_surfden),CLUSTER_7,CLUSTER_5
old_radii,numpy.asarray(old_radii),CLUSTER_7,CLUSTER_5
old_surfden,numpy.asarray(old_surfden),CLUSTER_7,CLUSTER_5
rgb,numpy.where(parsecall['label']==3),CLUSTER_7,CLUSTER_5
clnr,numpy.where((r13['FE_H']>-9999.0),CLUSTER_7,CLUSTER_5
bloop,numpy.where((r13['TEFF']>=4100),CLUSTER_7,CLUSTER_5
young,numpy.where(np.asarray(parages),CLUSTER_7,CLUSTER_5
young,numpy.where(parage[bloop_cut]<=np.log10(0.5*10**9),CLUSTER_7,CLUSTER_5
yless,numpy.where((parage[bloop_cut]>np.log10(0.5*10**9),CLUSTER_7,CLUSTER_5
ymed,numpy.where((parage[bloop_cut]>np.log10(2.0*10**9),CLUSTER_7,CLUSTER_5
omed,numpy.where((parage[bloop_cut]>np.log10(7*10**9),CLUSTER_7,CLUSTER_5
old,numpy.where(parage[bloop_cut]>np.log10(10.5*10**9),CLUSTER_7,CLUSTER_5
fd,numpy.where(bloopr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(bloopr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(bloopr13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(bloopr13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(bloopr13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
metal_poor,numpy.where(bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
m_int1,numpy.where((bloopr13['FE_H']>=-0.87833154),CLUSTER_7,CLUSTER_5
m_int2,numpy.where((bloopr13['FE_H']>=-0.7067915),CLUSTER_7,CLUSTER_5
metal_rich,numpy.where(bloopr13['FE_H']>=-0.5933316),CLUSTER_7,CLUSTER_5
fd,numpy.where(mpr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mpr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(mpr13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(mpr13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(mpr13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mp_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(mint1r13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mint1r13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(mint1r13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(mint1r13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(mint1r13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mint1_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(mint2r13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mint2r13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(mint2r13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(mint2r13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(mint2r13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mint2_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(mrr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mrr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(mrr13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(mrr13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(mrr13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mr_surfden),CLUSTER_7,CLUSTER_5
mp_young,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
mp_yless,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
mp_ymed,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
mp_omed,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
mp_old,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
fd,numpy.where(mpomedr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mpomedr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mp_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13young['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13young['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13young['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13young['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13young['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(young_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13yless['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13yless['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13yless['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13yless['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13yless['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(yless_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13ymed['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13ymed['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13ymed['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13ymed['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13ymed['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(ymed_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13omed['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13omed['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13omed['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13omed['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13omed['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(omed_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13old['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13old['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13old['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13old['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13old['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(old_surfden),CLUSTER_7,CLUSTER_5
cpsi,numpy.cos(np.radians(psi),CLUSTER_7,CLUSTER_5
spsi,numpy.cos(np.radians(psi),CLUSTER_7,CLUSTER_5
lgteff_new,numpy.log10(teff_new),CLUSTER_7,CLUSTER_5
young,np.where(np.asarray(parages)[bloop_cut]<=numpy.log10(0.5*10**9),CLUSTER_7,CLUSTER_5
young,np.where(parage[bloop_cut]<=numpy.log10(0.5*10**9),CLUSTER_7,CLUSTER_5
yless,np.where((parage[bloop_cut]>numpy.log10(0.5*10**9))&(parage[bloop_cut]<=numpy.log10(2.0*10**9),CLUSTER_7,CLUSTER_5
ymed,np.where((parage[bloop_cut]>numpy.log10(2.0*10**9))&(parage[bloop_cut]<=numpy.log10(7*10**9),CLUSTER_7,CLUSTER_5
omed,np.where((parage[bloop_cut]>numpy.log10(7*10**9))&(parage[bloop_cut]<=numpy.log10(10.5*10**9),CLUSTER_7,CLUSTER_5
field_areas,"numpy.multiply(np.pi*np.square(numpy.multiply(field_ang,0.875)",CLUSTER_7,CLUSTER_5
ell_r,numpy.sqrt(np.square(x*cpsi-y*spsi),CLUSTER_7,CLUSTER_5
CMERR,numpy.sqrt((cfeERR),CLUSTER_7,CLUSTER_5
NMERR,numpy.sqrt((nfeERR),CLUSTER_7,CLUSTER_5
ffacERR,numpy.sqrt((x_CERR),CLUSTER_7,CLUSTER_5
radius,"numpy.linspace(0,7,num=1000)",CLUSTER_7,CLUSTER_5
radii_rm30dor,"numpy.delete(radii,0)",CLUSTER_7,CLUSTER_5
surfden_rm30dor,"numpy.delete(surfden,0)",CLUSTER_7,CLUSTER_5
mint1_radii,numpy.delete(np.asarray(mint1_radii),CLUSTER_7,CLUSTER_5
mint1_surfden,numpy.delete(np.asarray(mint1_surfden),CLUSTER_7,CLUSTER_5
mint2_radii,numpy.delete(np.asarray(mint2_radii),CLUSTER_7,CLUSTER_5
mint2_surfden,numpy.delete(np.asarray(mint2_surfden),CLUSTER_7,CLUSTER_5
mr_radii,numpy.delete(np.asarray(mr_radii),CLUSTER_7,CLUSTER_5
mr_surfden,numpy.delete(np.asarray(mr_surfden),CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_7,CLUSTER_5
pca_transform,sklearn.decomposition.PCA(n_components=3),CLUSTER_7,CLUSTER_5
variants_train,"pandas.read_csv('/Users/cory/Desktop/Kaggle/msk/training_variants.txt',index_col=0,verbose=True)",CLUSTER_5,CLUSTER_5
variants_test,"pandas.read_csv('/Users/cory/Desktop/Kaggle/all/stage2_test_variants.csv',index_col=0,verbose=True)",CLUSTER_5,CLUSTER_5
text_train,"pandas.read_table('/Users/cory/Desktop/Kaggle/msk/training_text.txt',sep='\|\|',engine='python',verbose=True)",CLUSTER_5,CLUSTER_5
text_test,"pandas.read_table('/Users/cory/Desktop/Kaggle/all/stage2_test_text.csv',sep='\|\|',engine='python',verbose=True)",CLUSTER_5,CLUSTER_5
text_clf,"sklearn.pipeline.Pipeline([('vect',CountVectorizer()",CLUSTER_5,CLUSTER_5
"X_train,X_test","sklearn.model_selection.train_test_split(Train,train_size=.7)",CLUSTER_5,CLUSTER_5
results,"pandas.DataFrame(columns=['mae','rmse'],index=model_name_list)",CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
results,"pandas.DataFrame(index=X_test.index,columns=['estimate'])",CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
observation,"pandas.Series({'Intercept':1,'mother_edu':4,'failures':0,
'higher_edu':1,'studytime':3,
'father_edu':1,'absences':1})",CLUSTER_7,CLUSTER_8
observation,"pandas.Series({'Intercept':1,'mother_edu':2,'failures':2,
'higher_edu':1,'studytime':2,
'father_edu':3,'absences':4})",CLUSTER_7,CLUSTER_8
observation,"pandas.Series({'Intercept':1,'mother_edu':4,'failures':0,
'higher_edu':1,'studytime':3,
'father_edu':1,'absences':1})",CLUSTER_7,CLUSTER_8
observation,"pandas.Series({'Intercept':1,'mother_edu':4,'failures':0,
'higher_edu':1,'studytime':3,
'father_edu':1,'absences':1})",CLUSTER_7,CLUSTER_8
dummy_df,pandas.get_dummies(category_df),CLUSTER_7,CLUSTER_8
df,pandas.get_dummies(df),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('data/student-mat.csv'),CLUSTER_7,CLUSTER_8
actual,numpy.array(y_test),CLUSTER_7,CLUSTER_8
"results.ix[row[0],'estimate']",numpy.dot(np.array(var_means),CLUSTER_7,CLUSTER_8
mean_loc,"numpy.dot(var_means,test_observation)",CLUSTER_7,CLUSTER_8
mean_loc,"numpy.dot(var_means,new_observation)",CLUSTER_7,CLUSTER_8
mean_loc,"numpy.dot(var_means,test_observation)",CLUSTER_7,CLUSTER_8
mean_loc,"numpy.dot(var_means,new_observation)",CLUSTER_7,CLUSTER_8
mae,numpy.mean(abs(predictions-true),CLUSTER_7,CLUSTER_8
mae,numpy.mean(abs(predictions-y_test),CLUSTER_7,CLUSTER_8
baseline_mae,numpy.mean(abs(baseline-y_test),CLUSTER_7,CLUSTER_8
mae,numpy.mean(abs(errors),CLUSTER_7,CLUSTER_8
rmse,numpy.sqrt(np.mean((predictions-true),CLUSTER_7,CLUSTER_8
rmse,numpy.sqrt(np.mean((predictions-y_test),CLUSTER_7,CLUSTER_8
baseline_rmse,numpy.sqrt(np.mean((baseline-y_test),CLUSTER_7,CLUSTER_8
rmse,numpy.sqrt(np.mean(errors**2),CLUSTER_7,CLUSTER_8
"pm.plot_posterior_predictive_glm(trace,eval","numpy.linspace(var_min,var_max,100)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-5,5,num=500)",CLUSTER_7,CLUSTER_8
baseline,numpy.median(y_train),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,2,1)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,2,2)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,2,1)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,2,2)",CLUSTER_7,CLUSTER_8
g,seaborn.PairGrid(X_train),CLUSTER_7,CLUSTER_8
cmap,"seaborn.cubehelix_palette(light=1,dark=0.1,
hue=0.5,as_cmap=True)",CLUSTER_7,CLUSTER_8
"r,_","scipy.stats.pearsonr(x,y)",CLUSTER_7,CLUSTER_8
model1,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
model2,"sklearn.linear_model.ElasticNet(alpha=1.0,l1_ratio=0.5)",CLUSTER_7,CLUSTER_8
model3,sklearn.ensemble.RandomForestRegressor(n_estimators=50),CLUSTER_7,CLUSTER_8
model4,sklearn.ensemble.ExtraTreesRegressor(n_estimators=50),CLUSTER_7,CLUSTER_8
model6,sklearn.ensemble.GradientBoostingRegressor(n_estimators=20),CLUSTER_7,CLUSTER_8
model5,"sklearn.svm.SVR(kernel='rbf',degree=3,C=1.0,gamma='auto')",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df,labels,
test_size=0.25,
random_state=42)",CLUSTER_7,CLUSTER_8
click,"pandas.read_csv(url_click,sep='\t',thousands='.',decimal=',',header=None)",CLUSTER_12,CLUSTER_3
tokenized_verses,numpy.array(tokenized_verses),CLUSTER_0,CLUSTER_6
Config,"collections.namedtuple('Config',
field_names=""batch_size,n_epochs,lr,gradient_accumulation_steps,n_warmup,max_norm,dropout,log_dir,device"")",CLUSTER_0,CLUSTER_6
temp_GDF_Y['TempGrps'],"pandas.cut(temp_GDF_Y['Monthly_Temp'],temp_quartiles,labels=grp_names)",CLUSTER_11,CLUSTER_8
temp_GDF_Y['TempGrps'],"pandas.cut(temp_GDF_Y['Year'],bins,labels=group_names)",CLUSTER_11,CLUSTER_8
temp_flatDF,"pandas.melt(tempDF,id_vars=['Country','Year'],var_name='Month',value_name=""Monthly_Temp"")",CLUSTER_11,CLUSTER_8
temp_flatDF,"pandas.melt(tempDF,id_vars=['Country','Year'],var_name='Month',value_name=""Monthly_Temp"")",CLUSTER_11,CLUSTER_8
co2_flatDF,"pandas.melt(co2DF,id_vars=['Year'],var_name='Month',value_name=""Monthly_Co2"")",CLUSTER_11,CLUSTER_8
aer_flatDF,"pandas.melt(aerDF,id_vars=['Year'],var_name='Month',value_name=""Monthly_AER"")",CLUSTER_11,CLUSTER_8
tsi_flatDF,"pandas.melt(tsiDF,id_vars=['Year'],var_name='Month',value_name=""Monthly_TSI"")",CLUSTER_11,CLUSTER_8
temp_co2,"pandas.merge(temp_GDF_YM,co2_flatDF,left_on=['Year','Month'],right_on=['Year','Month'],\
how='inner',suffixes=['_temp','_co2'])",CLUSTER_11,CLUSTER_8
temp_2var,"pandas.merge(temp_co2,aer_flatDF,left_on=['Year','Month'],right_on=['Year','Month'],\
how='inner')",CLUSTER_11,CLUSTER_8
temp_3var,"pandas.merge(temp_2var,tsi_flatDF,left_on=['Year','Month'],right_on=['Year','Month'],\
how='inner')",CLUSTER_11,CLUSTER_8
tempDF,"pandas.read_csv(os.path.join(data_path,temp_dataFile)",CLUSTER_11,CLUSTER_8
tempDF,"pandas.read_csv(os.path.join(data_path,temp_dataFile)",CLUSTER_11,CLUSTER_8
co2DF,"pandas.read_csv(os.path.join(data_path,co2_dataFile)",CLUSTER_11,CLUSTER_8
aerDF,"pandas.read_csv(os.path.join(data_path,aer_dataFile)",CLUSTER_11,CLUSTER_8
tsiDF,"pandas.read_csv(os.path.join(data_path,tsi_dataFile)",CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
"fig,axs","matplotlib.pyplot.subplots(1,3,figsize=(20,7)",CLUSTER_11,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(17,13)",CLUSTER_11,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(17,13)",CLUSTER_11,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(17,13)",CLUSTER_11,CLUSTER_8
box_ax,"seaborn.boxplot(x=""TempGrps"",y=""Monthly_Temp"",data=temp_GDF_Y,palette='RdYlBu_r')",CLUSTER_11,CLUSTER_8
distPlt_Temp,"seaborn.distplot(temp_GDF_Y['Monthly_Temp'],color=""

distPlt_Temp.set(xlabel='AvgTemperature(degC)",CLUSTER_11,CLUSTER_8
g,"seaborn.lineplot(x_axis1,y_axis1,color='

ax1=g.axes
ax1.set_xticklabels(ax1.get_xticks()",CLUSTER_11,CLUSTER_8
regPlot_ax,"seaborn.regplot(x=""Year"",y=""Monthly_Temp"",data=temp_GDF_Y,ci=95,x_estimator=np.mean,\
scatter_kws={""color"":""

regPlot_ax.set(xlabel='Years',ylabel='Avg.Temperature(DegC)",CLUSTER_11,CLUSTER_8
simpPlt_ax,"seaborn.relplot('Year','Monthly_Temp',data=temp_GDF_Y,\
hue='Z_SCORE',palette='nipy_spectral',s=85)",CLUSTER_11,CLUSTER_8
"(slope,intercept,r_value,p_value,std_err)","scipy.stats.linregress(x_axis,y_axis)",CLUSTER_11,CLUSTER_8
reslt,"scipy.stats.f_oneway(group1,group2,group3,group4)",CLUSTER_11,CLUSTER_8
X,"numpy.linspace(-2,2,7)",CLUSTER_5,CLUSTER_5
X,"numpy.linspace(-2,2,7)",CLUSTER_5,CLUSTER_5
x_val,"numpy.linspace(-2,2,100)",CLUSTER_5,CLUSTER_5
X,"numpy.linspace(-2,2,7)",CLUSTER_5,CLUSTER_5
x_vals,"numpy.linspace(-2,2,100)",CLUSTER_5,CLUSTER_5
tr,"numpy.linspace(-1.9,1.9,50)",CLUSTER_5,CLUSTER_5
X,"numpy.linspace(-2,2,7)",CLUSTER_5,CLUSTER_5
x_values,"numpy.linspace(-2,2,100)",CLUSTER_5,CLUSTER_5
df,"pandas.get_dummies(df,columns=['gluc','cholesterol'])",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv('data/mlbootcamp5_train.csv',index_col='id',sep=';')",CLUSTER_5,CLUSTER_5
d,"pandas.read_csv('data/mlbootcamp5_train.csv',index_col='id',sep=';')",CLUSTER_5,CLUSTER_5
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(df_c,df['cardio'],train_size=0.7,test_size=0.3,random_state=17)",CLUSTER_5,CLUSTER_5
tree_grid,"sklearn.model_selection.GridSearchCV(tr,tree_params,cv=5,verbose=True)",CLUSTER_5,CLUSTER_5
tr_grid,"sklearn.model_selection.GridSearchCV(tr,t_params,cv=5,verbose=True)",CLUSTER_5,CLUSTER_5
tr,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=3,random_state=17)",CLUSTER_5,CLUSTER_5
trr,"sklearn.tree.DecisionTreeClassifier(max_depth=3,random_state=17)",CLUSTER_5,CLUSTER_5
muts_x_sample_df,pandas.DataFrame(index=set(nonimmune_df.sample_name),CLUSTER_8,CLUSTER_4
coverage_all_total,"pandas.DataFrame(index=all_cells,columns=all_muts)",CLUSTER_8,CLUSTER_4
coverage_all_variant,"pandas.DataFrame(index=all_cells,columns=all_muts)",CLUSTER_8,CLUSTER_4
muts_x_sample_df_ratios,pandas.DataFrame(index=list(muts_x_sample_df_variant.index),CLUSTER_8,CLUSTER_4
muts_x_sample_df_ratios,pandas.DataFrame(index=list(muts_x_sample_df_variant.index),CLUSTER_8,CLUSTER_4
coverage_run_old,pandas.read_csv('/Users/lincoln.harris/Desktop/coverage_run_all.csv'),CLUSTER_8,CLUSTER_4
nonimmune_df,"pandas.read_csv('/Users/lincoln.harris/Desktop/laud_process_new_cells/sample_cell_key.csv',index_col=0)",CLUSTER_8,CLUSTER_4
coverage_run_new,pandas.read_csv('/Users/lincoln.harris/Desktop/laud_process_new_cells/new_nonimmune_cells_cerebra_out_3.21.20.csv'),CLUSTER_8,CLUSTER_4
X,"numpy.concatenate([X,np.apply_along_axis(shift,1,X)",CLUSTER_5,CLUSTER_9
Y,"numpy.concatenate([y,y],axis=0)",CLUSTER_5,CLUSTER_9
X_red,sklearn.manifold.SpectralEmbedding(n_components=2),CLUSTER_5,CLUSTER_9
digits,sklearn.datasets.load_digits(n_class=10),CLUSTER_5,CLUSTER_9
clustering,"sklearn.cluster.KMeans(init='k-means++',n_clusters=10,n_init=10)",CLUSTER_5,CLUSTER_9
array,"numpy.array([1,4,5,8],float)",CLUSTER_8,CLUSTER_3
array,"numpy.array([[1,2,3],[4,5,6]],float)",CLUSTER_8,CLUSTER_3
array,"numpy.array([1,4,5,8],float)",CLUSTER_8,CLUSTER_3
two_D_array,"numpy.array([[1,2,3],[4,5,6]],float)",CLUSTER_8,CLUSTER_3
array_1,"numpy.array([1,2,3],float)",CLUSTER_8,CLUSTER_3
array_2,"numpy.array([5,2,6],float)",CLUSTER_8,CLUSTER_3
array_1,"numpy.array([[1,2],[3,4]],float)",CLUSTER_8,CLUSTER_3
array_2,"numpy.array([[5,6],[7,8]],float)",CLUSTER_8,CLUSTER_3
array_1,"numpy.array([1,2,3],float)",CLUSTER_8,CLUSTER_3
array_2,"numpy.array([[6],[7],[8]],float)",CLUSTER_8,CLUSTER_3
football,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
football,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
football,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
football,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
series,"pandas.Series(['Dave','Cheng-Han','Udacity',42,-1789710578])",CLUSTER_8,CLUSTER_3
series,"pandas.Series(['Dave','Cheng-Han',359,9001],
index=['Instructor','CurriculumManager',
'CourseNumber','PowerLevel'])",CLUSTER_8,CLUSTER_3
series,"pandas.Series(['Dave','Cheng-Han',359,9001],
index=['Instructor','CurriculumManager',
'CourseNumber','PowerLevel'])",CLUSTER_8,CLUSTER_3
cuteness,"pandas.Series([1,2,3,4,5],index=['Cockroach','Fish','MiniPig',
'Puppy','Kitten'])",CLUSTER_8,CLUSTER_3
olympic_medal_counts_df,"pandas.DataFrame({
'countryName':Series(countries)",CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(olympic_medal_counts),CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame({
'country_name':countries,
'gold':Series(gold)",CLUSTER_8,CLUSTER_3
olympic_points_df,"pandas.DataFrame({
'country_name':Series(countries)",CLUSTER_8,CLUSTER_3
points,"numpy.dot(df[['gold','silver','bronze']],[4,2,1])",CLUSTER_8,CLUSTER_3
train,"pandas.concat([train,wind_train],axis=1)",CLUSTER_7,CLUSTER_9
test,"pandas.concat([test,wind_test],axis=1)",CLUSTER_7,CLUSTER_9
wind_train,pandas.get_dummies(train['NumberOfWindows']),CLUSTER_7,CLUSTER_9
wind_test,pandas.get_dummies(test['NumberOfWindows']),CLUSTER_7,CLUSTER_9
train,pandas.read_csv('train_data.csv'),CLUSTER_7,CLUSTER_9
test,pandas.read_csv('test_data.csv'),CLUSTER_7,CLUSTER_9
sub,pandas.read_csv('sample_submission(1),CLUSTER_7,CLUSTER_9
response,requests.get(target_url),CLUSTER_9,CLUSTER_2
response,requests.get(first_link),CLUSTER_9,CLUSTER_2
response,requests.get(link),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(arrange_data),CLUSTER_9,CLUSTER_2
img,numpy.array(img),CLUSTER_9,CLUSTER_2
img,numpy.array(img),CLUSTER_9,CLUSTER_2
x,"numpy.expand_dims(x,axis=0)",CLUSTER_2,CLUSTER_7
n_rows,math.ceil(filters/n_columns),CLUSTER_2,CLUSTER_7
x,"numpy.array([x_green,x_red],dtype=float)",CLUSTER_1,CLUSTER_9
y,"numpy.array([435.833,614.95])",CLUSTER_1,CLUSTER_9
X,"numpy.column_stack((x,x**2)",CLUSTER_1,CLUSTER_9
Hg,numpy.loadtxt(fname),CLUSTER_1,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(3),CLUSTER_1,CLUSTER_9
logT,"numpy.arange(3.5,6.6,0.1)",CLUSTER_1,CLUSTER_10
fit,numpy.poly1d(coe),CLUSTER_1,CLUSTER_10
coe,numpy.polyfit(np.log10(rho),CLUSTER_1,CLUSTER_10
coeff_names,numpy.array(list(regression_coefficients[0].keys(),CLUSTER_12,CLUSTER_5
coeff_samples,numpy.array(coeff_samples),CLUSTER_12,CLUSTER_5
all_kfold_scores,"numpy.array([x_kfold_scores,poly2_kfold_scores,poly4_kfold_scores])",CLUSTER_12,CLUSTER_5
si,numpy.argsort(np.abs(BikeOLSModel.coef_[0]),CLUSTER_12,CLUSTER_5
bottom_percentile,"numpy.percentile(coeff_samples,q=significance_level/2,axis=0)",CLUSTER_12,CLUSTER_5
top_percentile,"numpy.percentile(coeff_samples,q=1-significance_level/2,axis=0)",CLUSTER_12,CLUSTER_5
all_interactions,pandas.DataFrame(poly_model.fit_transform(df),CLUSTER_12,CLUSTER_5
X_kfold_train,"pandas.DataFrame(X_train.values[train_index],columns=X_train.columns)",CLUSTER_12,CLUSTER_5
X_kfold_test,"pandas.DataFrame(X_train.values[test_index],columns=X_train.columns)",CLUSTER_12,CLUSTER_5
higher_orders_train,"pandas.concat(higher_orders_train,axis=1)",CLUSTER_12,CLUSTER_5
higher_orders_test,"pandas.concat(higher_orders_test,axis=1)",CLUSTER_12,CLUSTER_5
poly_train,pandas.concat([dataset_train.reset_index(),CLUSTER_12,CLUSTER_5
poly_test,pandas.concat([dataset_test.reset_index(),CLUSTER_12,CLUSTER_5
BSS_train,pandas.read_csv('data/BSS_train.csv'),CLUSTER_12,CLUSTER_5
BSS_test,pandas.read_csv('data/BSS_test.csv'),CLUSTER_12,CLUSTER_5
train_r2_score,"sklearn.metrics.r2_score(y_train,BikeOLSModel.predict(X_train)",CLUSTER_12,CLUSTER_5
test_r2_score,"sklearn.metrics.r2_score(y_test,BikeOLSModel.predict(X_test)",CLUSTER_12,CLUSTER_5
poly_model,"sklearn.preprocessing.PolynomialFeatures(k,include_bias=False)",CLUSTER_12,CLUSTER_5
poly_model,"sklearn.preprocessing.PolynomialFeatures(2,include_bias=False,interaction_only=True)",CLUSTER_12,CLUSTER_5
BikeRRModel,"sklearn.linear_model.RidgeCV(cv=5,alphas=lambdas,fit_intercept=True)",CLUSTER_12,CLUSTER_5
BikeLRModel,"sklearn.linear_model.LassoCV(cv=5,alphas=lambdas,fit_intercept=True)",CLUSTER_12,CLUSTER_5
BikeOLSModel,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
BikeOLSPolyModel,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
kfold,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
poly2,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
poly4,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
base_model,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
poly2_model,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
poly4_model,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_5
MLR_scores,sklearn.model_selection.cross_val_score(LinearRegression(),CLUSTER_12,CLUSTER_5
k_fold,sklearn.model_selection.KFold(n_splits=5),CLUSTER_12,CLUSTER_5
feat_imp,pandas.Series(alg.get_booster(),CLUSTER_7,CLUSTER_8
train,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
test,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x='Age',y='Purchase',hue='Gender',data=train)",CLUSTER_7,CLUSTER_8
mars_facts,pandas.read_html(facts_url),CLUSTER_11,CLUSTER_12
ff,numpy.array(f),CLUSTER_4,CLUSTER_0
fin,numpy.array(final),CLUSTER_4,CLUSTER_0
cate1,numpy.array(cate),CLUSTER_4,CLUSTER_0
fram1,numpy.array(fram),CLUSTER_4,CLUSTER_0
x,numpy.array(image2),CLUSTER_4,CLUSTER_0
new_new,"numpy.concatenate((data,fin)",CLUSTER_4,CLUSTER_0
max_train1,"numpy.argmax(predictions_train,axis=1)",CLUSTER_4,CLUSTER_0
max_test,"numpy.argmax(predictions_test,axis=1)",CLUSTER_4,CLUSTER_0
image1,"numpy.resize(im[sss],(28,28,3)",CLUSTER_4,CLUSTER_0
av,"numpy.append(fram1,cate1,axis=1)",CLUSTER_4,CLUSTER_0
new_new,"numpy.load(""new.npy"",allow_pickle=True)",CLUSTER_4,CLUSTER_0
ab,pandas.read_csv('test.csv'),CLUSTER_4,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(x,y,test_size=0.2)",CLUSTER_4,CLUSTER_0
accuracy_train,"sklearn.metrics.accuracy_score(ytrain,max_train1)",CLUSTER_4,CLUSTER_0
accuracy_test,"sklearn.metrics.accuracy_score(ytest,max_test)",CLUSTER_4,CLUSTER_0
precision_train,"sklearn.metrics.precision_score(ytrain,max_train1,average='weighted')",CLUSTER_4,CLUSTER_0
precision_test,"sklearn.metrics.precision_score(ytest,max_test,average='weighted')",CLUSTER_4,CLUSTER_0
recall_train,"sklearn.metrics.recall_score(ytrain,max_train1,average='weighted')",CLUSTER_4,CLUSTER_0
recall_test,"sklearn.metrics.recall_score(ytest,max_test,average='weighted')",CLUSTER_4,CLUSTER_0
f1score_train,"sklearn.metrics.f1_score(ytrain,max_train1,average='weighted')",CLUSTER_4,CLUSTER_0
f1score_test,"sklearn.metrics.f1_score(ytest,max_test,average='weighted')",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(ytrain,max_train1)",CLUSTER_4,CLUSTER_0
cm_test,"sklearn.metrics.confusion_matrix(ytest,max_test)",CLUSTER_4,CLUSTER_0
x,"numpy.zeros(4,dtype=np.int)",CLUSTER_3,CLUSTER_6
data,"numpy.zeros(4,dtype={'names':('name','age','weight')",CLUSTER_3,CLUSTER_6
data2,"numpy.zeros(4,dtype=[('name','U10')",CLUSTER_3,CLUSTER_6
df3,pandas.DataFrame(df3),CLUSTER_1,CLUSTER_3
df4,"pandas.DataFrame(df4,index=[1,2,3,4,5])",CLUSTER_1,CLUSTER_3
df,"pandas.read_csv('crime_in_Seoul.csv',engine='python',index_col='관서명',encoding='euc-kr',thousands=',')",CLUSTER_1,CLUSTER_3
dfTuple,"pandas.DataFrame(tupAppend,columns=['CellIdx','Sentence'])",CLUSTER_11,CLUSTER_1
result_pd,"pandas.DataFrame({
""class"":labels,
""precision"":precision,
""recall"":recall,
""f1-score"":fscore,
""support"":support
})",CLUSTER_11,CLUSTER_1
df_3Col,"pandas.merge(dfout,df,how='inner',left_on='CellIdx',right_on='new_id')",CLUSTER_11,CLUSTER_1
dfTrain,"pandas.read_csv(""dfTrain.csv"")",CLUSTER_11,CLUSTER_1
dfTest,"pandas.read_csv(""dfTest.csv"")",CLUSTER_11,CLUSTER_1
dfRemoveStartsWithRow,"pandas.read_csv(""startsWith.csv"")",CLUSTER_11,CLUSTER_1
dfout,pandas.read_csv(fnToSave),CLUSTER_11,CLUSTER_1
text_clf,"sklearn.pipeline.Pipeline([
('vect',CountVectorizer(ngram_range=(1,2)",CLUSTER_11,CLUSTER_1
"precision,recall,fscore,support","sklearn.metrics.precision_recall_fscore_support(dftest.Area,predicted,labels=labels)",CLUSTER_11,CLUSTER_1
data,pandas.read_csv('housing.csv'),CLUSTER_5,CLUSTER_1
score,"sklearn.metrics.r2_score(y_true,y_predict)",CLUSTER_5,CLUSTER_1
scoring_fnc,sklearn.metrics.make_scorer(performance_metric),CLUSTER_5,CLUSTER_1
regressor,sklearn.tree.DecisionTreeRegressor(),CLUSTER_5,CLUSTER_1
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
labels,numpy.array(labels),CLUSTER_6,CLUSTER_11
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
conv_features,numpy.concatenate([[feat]forfeatinconv_features]),CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,50)",CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,50)",CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,50)",CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(30,30)",CLUSTER_6,CLUSTER_11
titanic,"pandas.read_csv(""C:/Users/GOLUVERMA/Desktop/sachin'sppts/titanic.csv"")",CLUSTER_7,CLUSTER_5
t1['sex'],sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_5
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(n_estimators=45),CLUSTER_7,CLUSTER_5
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=40,criterion='entropy')",CLUSTER_7,CLUSTER_5
dt,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_7,CLUSTER_5
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/august_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/september_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/october_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/november_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/december_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/january_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/february_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/march_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/april_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/may_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/june_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/july_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
x,"numpy.arange(0,9,9/50)",CLUSTER_1,CLUSTER_9
result_array,"numpy.array([np.power(x,m)",CLUSTER_1,CLUSTER_9
A,"numpy.empty([0,N])",CLUSTER_1,CLUSTER_9
A,numpy.transpose(A),CLUSTER_1,CLUSTER_9
L_tl,numpy.sqrt(A_tl),CLUSTER_1,CLUSTER_9
A,"numpy.append(A,result_array,axis=0)",CLUSTER_1,CLUSTER_9
L,numpy.eye(len(A),CLUSTER_1,CLUSTER_9
p,numpy.poly1d(np.flip(w),CLUSTER_1,CLUSTER_9
c,"scipy.linalg.solve_triangular(R,b_new,lower=True)",CLUSTER_1,CLUSTER_9
x_w,"scipy.linalg.solve_triangular(R.T,c,lower=False)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
res,"pandas.DataFrame(index=['Daily','Weekly','Monthly','Quarterly','Annually','Hold'])",CLUSTER_4,CLUSTER_11
table,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
table_print,"pandas.DataFrame(table,copy=True)",CLUSTER_4,CLUSTER_11
w_b,"pandas.Series(index=returns.columns,data=1)",CLUSTER_4,CLUSTER_11
benchmark_returns,"pandas.Series(index=used_returns.index,data=np.dot(used_returns.values,w_b.values)",CLUSTER_4,CLUSTER_11
sigmas,"pandas.read_csv(datadir+'sigmas.csv.gz',index_col=0,parse_dates=[0])",CLUSTER_4,CLUSTER_11
returns,"pandas.read_csv(datadir+'returns.csv.gz',index_col=0,parse_dates=[0])",CLUSTER_4,CLUSTER_11
volumes,"pandas.read_csv(datadir+'volumes.csv.gz',index_col=0,parse_dates=[0])",CLUSTER_4,CLUSTER_11
benchmark_returns,"pd.Series(index=used_returns.index,data=numpy.dot(used_returns.values,w_b.values)",CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
Y,numpy.log(Y),CLUSTER_7,CLUSTER_8
df_submission,"pandas.DataFrame({'id':id_test,'price_doc':y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
df_all,"pandas.concat([train,test])",CLUSTER_7,CLUSTER_8
df_all,"pandas.concat([df_numeric,df_obj],axis=1)",CLUSTER_7,CLUSTER_8
df_obj[c],pandas.factorize(df_obj[c]),CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(PATH+""train.csv"",parse_dates=['timestamp'])",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(PATH+""test.csv"",parse_dates=['timestamp'])",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2)",CLUSTER_7,CLUSTER_8
reg,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.GradientBoostingRegressor(loss='quantile',alpha=alpha,
n_estimators=10,max_depth=3,
learning_rate=.1,min_samples_leaf=9,
min_samples_split=9)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
clf,"sklearn.neural_network.MLPRegressor(solver='lbfgs',alpha=1e-5,
hidden_layer_sizes=(7,)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=0)",CLUSTER_7,CLUSTER_8
X_scaled,pandas.DataFrame(self.scaler.transform(X[self.columns]),CLUSTER_5,CLUSTER_1
summary_table,"pandas.DataFrame(columns=['Featurename'],data=feature_name)",CLUSTER_5,CLUSTER_1
data_preprocessed,pandas.read_csv('Absenteeism_preprocessed.csv'),CLUSTER_5,CLUSTER_1
targets,numpy.where(data_preprocessed['AbsenteeismTimeinHours']>data_preprocessed['AbsenteeismTimeinHours'].median(),CLUSTER_5,CLUSTER_1
self.mean_,numpy.mean(X[self.columns]),CLUSTER_5,CLUSTER_1
summary_table['coefficient'],numpy.transpose(reg.coef_),CLUSTER_5,CLUSTER_1
self.var_,numpy.var(X[self.columns]),CLUSTER_5,CLUSTER_1
summary_table['oddratio'],numpy.exp(summary_table.coefficient),CLUSTER_5,CLUSTER_1
self.scaler,"sklearn.preprocessing.StandardScaler(copy,with_mean,with_std)",CLUSTER_5,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_inputs,targets,train_size=0.8,random_state=20)",CLUSTER_5,CLUSTER_1
reg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
train_store,"pandas.merge(train,store,how='left',on='Store')",CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(""./data/train.csv"",parse_dates=True,index_col='Date')",CLUSTER_7,CLUSTER_8
store,"pandas.read_csv(""./data/store.csv"")",CLUSTER_7,CLUSTER_8
"fig,axis","matplotlib.pyplot.subplots(1,1,figsize=(12,6)",CLUSTER_7,CLUSTER_8
g,"seaborn.FacetGrid(train_store.groupby(['DayOfWeek','StoreType','Month'],as_index=False)",CLUSTER_7,CLUSTER_8
g,"seaborn.FacetGrid(train_store.groupby(['Promo','Promo2','DayOfWeek'],as_index=False)",CLUSTER_7,CLUSTER_8
sub_train,pandas.DataFrame(app_train['WEEKDAY_APPR_PROCESS_START']),CLUSTER_8,CLUSTER_11
sub_train,pandas.DataFrame(app_train['WEEKDAY_APPR_PROCESS_START']),CLUSTER_8,CLUSTER_11
sub_train,pandas.get_dummies(sub_train),CLUSTER_8,CLUSTER_11
app_train,pandas.read_csv(f_app_train),CLUSTER_8,CLUSTER_11
gamma,"numpy.asarray([1.0,2.0,3.0])",CLUSTER_1,CLUSTER_10
beta,"numpy.asarray([11.0,12.0,13.0])",CLUSTER_1,CLUSTER_10
beta,numpy.zeros(D3),CLUSTER_1,CLUSTER_10
gamma,numpy.ones(D3),CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
weight_scales,"numpy.logspace(-4,0,num=20)",CLUSTER_1,CLUSTER_10
fig1,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_2,CLUSTER_7
fig2,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_2,CLUSTER_7
fig3,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_2,CLUSTER_7
fig4,"matplotlib.pyplot.figure(figsize=(12,12/5*2)",CLUSTER_2,CLUSTER_7
fig5,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_2,CLUSTER_7
fig6,"matplotlib.pyplot.figure(figsize=(6,3)",CLUSTER_2,CLUSTER_7
fig7,"matplotlib.pyplot.figure(figsize=(6,3)",CLUSTER_2,CLUSTER_7
fig8,"matplotlib.pyplot.figure(figsize=(2.5*cols,2.5*rows)",CLUSTER_2,CLUSTER_7
predicted_label,numpy.argmax(prob),CLUSTER_2,CLUSTER_7
predicted_label,numpy.argmax(prob),CLUSTER_2,CLUSTER_7
iftest_labels[i],=numpy.argmax(predictions[i]),CLUSTER_2,CLUSTER_7
iftest_labels[i]!,numpy.argmax(predictions[i]),CLUSTER_2,CLUSTER_7
glb,"pandas.concat([glb,us],ignore_index=True)",CLUSTER_8,CLUSTER_4
glb,"pandas.concat([tmp,tmp_num],axis=1)",CLUSTER_8,CLUSTER_4
glb,pandas.read_csv('compustat_10_glb.csv'),CLUSTER_8,CLUSTER_4
us,pandas.read_csv('compustat_10_us.csv'),CLUSTER_8,CLUSTER_4
curcd,pandas.read_csv('compustat_curcd_10.csv'),CLUSTER_8,CLUSTER_4
currtr,pandas.read_csv('compustat_currtr_10.csv'),CLUSTER_8,CLUSTER_4
glb,pandas.read_csv('compustat_10_glbus.csv'),CLUSTER_8,CLUSTER_4
curr,pandas.read_csv('exchange_rate_10.csv'),CLUSTER_8,CLUSTER_4
dose,"numpy.array([-.86,-.3,-.05,.73])",CLUSTER_1,CLUSTER_10
deaths,"numpy.array([0,1,3,5])",CLUSTER_1,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(2,5,figsize=(14,6)",CLUSTER_1,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(1,4,figsize=(12,6)",CLUSTER_1,CLUSTER_10
X_data,"numpy.concatenate((X_pos,X_neg)",CLUSTER_4,CLUSTER_7
Y_data,"numpy.concatenate((Y_pos,Y_neg)",CLUSTER_4,CLUSTER_7
Y_pos,"numpy.ones((num_data,1)",CLUSTER_4,CLUSTER_7
Y_neg,"numpy.ones((num_data,1)",CLUSTER_4,CLUSTER_7
plot_index,"numpy.argsort(predictionsoutput[:,0])",CLUSTER_4,CLUSTER_7
X_pos,"numpy.expand_dims(X_pos,axis=2)",CLUSTER_4,CLUSTER_7
X,"numpy.expand_dims(test['inputs'][plot_index[ii]],axis=0)",CLUSTER_4,CLUSTER_7
starttime,time.time(),CLUSTER_4,CLUSTER_7
starttime,time.time(),CLUSTER_4,CLUSTER_7
train,"pandas.read_csv('hw11t4v0_train.txt',sep='\t')",CLUSTER_5,CLUSTER_5
target,pandas.read_csv('hw11t4v0_target.txt'),CLUSTER_5,CLUSTER_5
test,"pandas.read_csv('hw11t4v0_test.txt',sep='\t')",CLUSTER_5,CLUSTER_5
target_test,pandas.read_csv('hw11t4v0_target_test.txt'),CLUSTER_5,CLUSTER_5
concatenated_data,"numpy.concatenate([train,test],axis=0)",CLUSTER_5,CLUSTER_5
error+,numpy.mean((predictions-target_test),CLUSTER_5,CLUSTER_5
attendance['key_guess'],"numpy.where(attendance['school_name']==school,fixed_guess,attendance['key_guess'])",CLUSTER_8,CLUSTER_11
attendance,pandas.DataFrame(),CLUSTER_8,CLUSTER_11
keys,pandas.read_csv('../data/intermediary/scorecard/names/broward.csv'),CLUSTER_8,CLUSTER_11
raw_attendance,pandas.read_csv('../data/input/foia/broward.csv'),CLUSTER_8,CLUSTER_11
DEFAULT_BEGIN,"datetime.datetime(1970,1,1)",CLUSTER_10,CLUSTER_12
DEFAULT_BEGIN,"datetime.datetime(1970,1,1)",CLUSTER_10,CLUSTER_12
self.DEFAULT_BEGIN,"datetime.datetime(1980,1,1)",CLUSTER_10,CLUSTER_12
DEFAULT_BEGIN,"datetime.datetime(1970,1,1)",CLUSTER_10,CLUSTER_12
interval.begin,"datetime.datetime(2016,1,1)",CLUSTER_10,CLUSTER_12
DEFAULT_BEGIN,"datetime.datetime(1970,1,1)",CLUSTER_10,CLUSTER_12
DEFAULT_END,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
end,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
TimeInterval,"collections.namedtuple('TimeInterval',['begin','end'])",CLUSTER_10,CLUSTER_12
self.start,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
running_time,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
imgs,"numpy.array([
image.img_to_array(image.load_img(img_path,target_size=(224,224)",CLUSTER_4,CLUSTER_11
sents,"numpy.array([
sent2ixs(""agroupofmenarestanding."".split("""")",CLUSTER_4,CLUSTER_11
vfs,numpy.array([_visual_features[image_index]]*len(sents),CLUSTER_4,CLUSTER_11
logprobs,numpy.log(prs),CLUSTER_4,CLUSTER_11
ix2word,"numpy.load('preprocessed_flickr30k/ix2word.npy',allow_pickle=True)",CLUSTER_4,CLUSTER_11
df,"pandas.DataFrame(
np.ones([len(img_paths)",CLUSTER_4,CLUSTER_11
ids,numpy.arange(labels.shape[0]),CLUSTER_2,CLUSTER_7
shfl1,numpy.arange(X_data.shape[0]),CLUSTER_2,CLUSTER_7
shfl2,numpy.arange(X_data.shape[0]),CLUSTER_2,CLUSTER_7
data_choice,numpy.concatenate([labels_dic[label]forlabelinlabels_dic.keys(),CLUSTER_2,CLUSTER_7
mean_image,numpy.mean(X_train),CLUSTER_2,CLUSTER_7
fig,"matplotlib.pyplot.figure(figsize=(10,5,)",CLUSTER_2,CLUSTER_7
data,pandas.read_csv('irrigation_machine.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=4)",CLUSTER_5,CLUSTER_5
service_key,json.load(sk_json),CLUSTER_10,CLUSTER_12
j,json.loads(res),CLUSTER_10,CLUSTER_12
j,json.loads(res),CLUSTER_10,CLUSTER_12
j,json.loads(res),CLUSTER_10,CLUSTER_12
tmFc,"time.strftime('%Y%m%d',time.localtime(time.time()",CLUSTER_10,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
music,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
X,pandas.DataFrame(music.loudness),CLUSTER_5,CLUSTER_9
X,pandas.DataFrame(music.loudness),CLUSTER_5,CLUSTER_9
X,pandas.DataFrame(music.duration),CLUSTER_5,CLUSTER_9
X,pandas.DataFrame(music.duration),CLUSTER_5,CLUSTER_9
T,"numpy.arange(0,50,0.1)",CLUSTER_5,CLUSTER_9
T,"numpy.arange(0,50,0.1)",CLUSTER_5,CLUSTER_9
T,"numpy.arange(0,50,0.1)",CLUSTER_5,CLUSTER_9
T,"numpy.arange(0,50,0.1)",CLUSTER_5,CLUSTER_9
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=10),CLUSTER_5,CLUSTER_9
knn_w,"sklearn.neighbors.KNeighborsRegressor(n_neighbors=10,weights='distance')",CLUSTER_5,CLUSTER_9
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=10),CLUSTER_5,CLUSTER_9
knn_w,"sklearn.neighbors.KNeighborsRegressor(n_neighbors=10,weights='distance')",CLUSTER_5,CLUSTER_9
score,"sklearn.model_selection.cross_val_score(knn,X,Y,cv=5)",CLUSTER_5,CLUSTER_9
score_w,"sklearn.model_selection.cross_val_score(knn_w,X,Y,cv=5)",CLUSTER_5,CLUSTER_9
score,"sklearn.model_selection.cross_val_score(knn,X,Y,cv=5)",CLUSTER_5,CLUSTER_9
score_w,"sklearn.model_selection.cross_val_score(knn_w,X,Y,cv=5)",CLUSTER_5,CLUSTER_9
range_list,"numpy.arange(0,50,5)",CLUSTER_4,CLUSTER_0
train_filenames_tmp,numpy.array(os.listdir(),CLUSTER_4,CLUSTER_0
test_filenames_tmp,numpy.array(os.listdir(),CLUSTER_4,CLUSTER_0
x_train,"numpy.zeros((n_train,image_width,image_height,channels)",CLUSTER_4,CLUSTER_0
y_train,"numpy.zeros((n_train,1)",CLUSTER_4,CLUSTER_0
x_test,"numpy.zeros((n_test,image_width,image_height,channels)",CLUSTER_4,CLUSTER_0
y_test,"numpy.zeros((n_test,1)",CLUSTER_4,CLUSTER_0
max_voting_accuracies,"numpy.zeros((51,1)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.zeros((10000,5)",CLUSTER_4,CLUSTER_0
average_accuracies,"numpy.zeros((51,1)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.zeros((10000,5)",CLUSTER_4,CLUSTER_0
basic_stacking_accuracies,"numpy.zeros((51,1)",CLUSTER_4,CLUSTER_0
pred,"numpy.argmax(pred,axis=1)",CLUSTER_4,CLUSTER_0
index,"numpy.argmax(pred_part,axis=2)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.argmax(pred_new,axis=2)",CLUSTER_4,CLUSTER_0
index,"numpy.argmax(pred_part,axis=2)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.argmax(pred_new,axis=2)",CLUSTER_4,CLUSTER_0
test_accuracy,"numpy.sum(np.equal(pred,y_test)",CLUSTER_4,CLUSTER_0
max_voting_accuracies[k],"numpy.sum(np.equal(pred_new,y_test)",CLUSTER_4,CLUSTER_0
max_voting_accuracy,"numpy.sum(np.equal(pred_new,y_test)",CLUSTER_4,CLUSTER_0
pred,"numpy.expand_dims(pred,axis=1)",CLUSTER_4,CLUSTER_0
pred,"numpy.expand_dims(pred,axis=1)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.expand_dims(pred_new,axis=1)",CLUSTER_4,CLUSTER_0
pred,"numpy.expand_dims(pred,axis=1)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.expand_dims(pred_new,axis=1)",CLUSTER_4,CLUSTER_0
Q,"numpy.zeros((NS,NA)",CLUSTER_2,CLUSTER_7
window,numpy.ones(int(window_size),CLUSTER_2,CLUSTER_7
window,numpy.ones(int(window_size),CLUSTER_2,CLUSTER_7
NS,numpy.prod(o_cells),CLUSTER_2,CLUSTER_7
energy,pandas.read_csv(data_dir+'energydata_complete.csv'),CLUSTER_7,CLUSTER_3
prediction_df,"pandas.DataFrame({""prediction"":prediction})",CLUSTER_5,CLUSTER_5
prediction_df_1,"pandas.DataFrame({""prediction"":prediction})",CLUSTER_5,CLUSTER_5
prediction_df,"pandas.DataFrame({""prediction"":prediction})",CLUSTER_5,CLUSTER_5
prediction_df_1,"pandas.DataFrame({""prediction"":prediction})",CLUSTER_5,CLUSTER_5
training_result,"pandas.concat([prediction_df,target],axis=1)",CLUSTER_5,CLUSTER_5
training_result,"pandas.concat([prediction_df_1,actual_class_test],axis=1)",CLUSTER_5,CLUSTER_5
training_result,"pandas.concat([prediction_df,target],axis=1)",CLUSTER_5,CLUSTER_5
training_result,"pandas.concat([prediction_df_1,actual_class_test],axis=1)",CLUSTER_5,CLUSTER_5
users,"pandas.read_csv(""data/users.csv"")",CLUSTER_5,CLUSTER_5
survey,pandas.read_csv('data/survey.csv'),CLUSTER_5,CLUSTER_5
iris_df,"pandas.read_csv(url,names=(""sepallength"",""sepalwidth"",""petallength"",""petalwidth"",""class"")",CLUSTER_5,CLUSTER_5
data_R2,"pandas.read_csv(""./data/dataR2.csv"")",CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_5,CLUSTER_5
clf2,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_5,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_5,CLUSTER_5
clf2,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_5,CLUSTER_5
weather_data,pandas.DataFrame(weather_dict),CLUSTER_9,CLUSTER_2
response,requests.get(query_url+city),CLUSTER_9,CLUSTER_2
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
t,time.time(),CLUSTER_4,CLUSTER_0
elapsed_time_train,time.time(),CLUSTER_4,CLUSTER_0
t,time.time(),CLUSTER_4,CLUSTER_0
elapsed_time_train,time.time(),CLUSTER_4,CLUSTER_0
t,time.time(),CLUSTER_4,CLUSTER_0
elapsed_time_train,time.time(),CLUSTER_4,CLUSTER_0
y_autoenc,"numpy.dot(int_rep,B_auto)",CLUSTER_4,CLUSTER_0
y,"numpy.dot(x_train,B_t)",CLUSTER_4,CLUSTER_0
B_t,numpy.transpose(B_auto),CLUSTER_4,CLUSTER_0
x_train2,"numpy.tanh((np.dot(x_train,B_t)",CLUSTER_4,CLUSTER_0
x_test2,"numpy.tanh((np.dot(x_test,B_t)",CLUSTER_4,CLUSTER_0
mask,"numpy.array(proj_edge_dist_map<dist_to_edge,dtype='uint8')",CLUSTER_1,CLUSTER_10
mask,"numpy.array(proj_edge_dist_map<dist_to_edge,dtype='uint8')",CLUSTER_1,CLUSTER_10
proj_edge_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_edge_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_vert_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_vert_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
distances,numpy.zeros(len(edge_list),CLUSTER_1,CLUSTER_10
eucl_edge_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_edge_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_vert_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_vert_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
distances,numpy.zeros(len(edge_list),CLUSTER_1,CLUSTER_10
distances,numpy.zeros((len(edge_list),CLUSTER_1,CLUSTER_10
proj_edge_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_edge_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_vert_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_vert_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
distances,numpy.zeros(len(edge_list),CLUSTER_1,CLUSTER_10
eucl_edge_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_edge_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_vert_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_vert_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
distances,numpy.zeros(len(edge_list),CLUSTER_1,CLUSTER_10
distances,numpy.zeros((len(edge_list),CLUSTER_1,CLUSTER_10
r,numpy.sqrt((x1-x2),CLUSTER_1,CLUSTER_10
M,"numpy.float32([[1,0,150],[0,1,50]])",CLUSTER_1,CLUSTER_10
M,"numpy.float32([[1,0,100],[0,1,100]])",CLUSTER_1,CLUSTER_10
ref_nodes,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\src\Resources\default\ref_nodes.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
trial_1_data,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\data\processed\2019-01-16_10-45-35\trial_1\position_log_files\pos_log_file.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
dat0,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\Data\processed\2019-06-20_15-23-03\trial_26\position_log_files\pos_log_file_0.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
dat1,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\Data\processed\2019-06-20_15-23-03\trial_26\position_log_files\pos_log_file_1.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
top_nodes,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\src\Resources\default\node_pos_top.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
bot_nodes,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\src\Resources\default\node_pos_bottom.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
eucl_edge_dist_map,numpy.load('cache/eucl_edge_dist_map_top.npy'),CLUSTER_1,CLUSTER_10
eucl_edge_id_map,numpy.load('cache/eucl_edge_id_map_top.npy'),CLUSTER_1,CLUSTER_10
eucl_vert_dist_map,numpy.load('cache/eucl_vert_dist_map_top.npy'),CLUSTER_1,CLUSTER_10
eucl_vert_id_map,numpy.load('cache/eucl_vert_id_map_top.npy'),CLUSTER_1,CLUSTER_10
proj_edge_id_map,numpy.load('cache/proj_edge_id_map_top.npy'),CLUSTER_1,CLUSTER_10
proj_edge_dist_map,numpy.load('cache/proj_edge_dist_map_top.npy'),CLUSTER_1,CLUSTER_10
proj_vert_dist_map,numpy.load('cache/proj_vert_dist_map_top.npy'),CLUSTER_1,CLUSTER_10
proj_vert_id_map,numpy.load('cache/proj_vert_id_map_top.npy'),CLUSTER_1,CLUSTER_10
eucl_edge_dist_map,numpy.load('cache/eucl_edge_dist_map_bot.npy'),CLUSTER_1,CLUSTER_10
eucl_edge_id_map,numpy.load('cache/eucl_edge_id_map_bot.npy'),CLUSTER_1,CLUSTER_10
eucl_vert_dist_map,numpy.load('cache/eucl_vert_dist_map_bot.npy'),CLUSTER_1,CLUSTER_10
eucl_vert_id_map,numpy.load('cache/eucl_vert_id_map_bot.npy'),CLUSTER_1,CLUSTER_10
proj_edge_id_map,numpy.load('cache/proj_edge_id_map_bot.npy'),CLUSTER_1,CLUSTER_10
proj_edge_dist_map,numpy.load('cache/proj_edge_dist_map_bot.npy'),CLUSTER_1,CLUSTER_10
proj_vert_dist_map,numpy.load('cache/proj_vert_dist_map_bot.npy'),CLUSTER_1,CLUSTER_10
proj_vert_id_map,numpy.load('cache/proj_vert_id_map_bot.npy'),CLUSTER_1,CLUSTER_10
dist,math.sqrt(dx*dx+dy*dy),CLUSTER_1,CLUSTER_10
im,matplotlib.pyplot.imshow(image),CLUSTER_1,CLUSTER_10
im,matplotlib.pyplot.imshow(image),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(40,24)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(2,5,figsize=(40,24)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(40,24)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(2,5,figsize=(40,24)",CLUSTER_1,CLUSTER_10
dataset,pandas.read_csv('Data.csv'),CLUSTER_5,CLUSTER_5
labelencoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
labelencoder_y,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[0]),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
distmatrix,"scipy.spatial.distance_matrix(assigned_points_coords,unassigned_points_coords)",CLUSTER_0,CLUSTER_9
full_d_matrix,"scipy.spatial.distance_matrix(all_points_coords,all_points_coords)",CLUSTER_0,CLUSTER_9
dtest,"scipy.spatial.distance_matrix([a1,a2,a3,a4],[a2,a4])",CLUSTER_0,CLUSTER_9
X_toy,"numpy.array([[-1,-1],[-2,-1],[-3,-2],[1,1],[2,1],[3,2]])",CLUSTER_0,CLUSTER_9
a1,numpy.asarray(s.iloc[[0]]),CLUSTER_0,CLUSTER_9
df_BNG_90['label'],numpy.full((len(df_BNG_90),CLUSTER_0,CLUSTER_9
cols_for_min_2,"numpy.full((1,len(assigned_points)",CLUSTER_0,CLUSTER_9
min_dists,"numpy.full((1,len(assigned_points)",CLUSTER_0,CLUSTER_9
cols_for_min_2,"numpy.full((1,len(assigned_points)",CLUSTER_0,CLUSTER_9
min_dists,"numpy.full((1,len(assigned_points)",CLUSTER_0,CLUSTER_9
a,"numpy.argmax(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmax(dtest[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmin(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmin(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmin(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmin(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
A_i_arr_view,"numpy.around(A_i_arr,3)",CLUSTER_0,CLUSTER_9
n_i_arr,"numpy.add(np.multiply(A_i_arr,3)",CLUSTER_0,CLUSTER_9
n_i_arr_toy,"numpy.add(np.multiply(A_i_arr_toy,3)",CLUSTER_0,CLUSTER_9
threshold_10,"numpy.percentile(df_BNG['Ai'],10)",CLUSTER_0,CLUSTER_9
j_to_i,math.exp(-gamma*dist_matrix[i][j]),CLUSTER_0,CLUSTER_9
indices_df,pandas.DataFrame(indices),CLUSTER_0,CLUSTER_9
distmatrix_df,pandas.DataFrame(distmatrix),CLUSTER_0,CLUSTER_9
full_d_matrix_df,pandas.DataFrame(full_d_matrix),CLUSTER_0,CLUSTER_9
s,"pandas.DataFrame(np.random.randn(8,4)",CLUSTER_0,CLUSTER_9
json_dic_data,json.load(json_data),CLUSTER_0,CLUSTER_9
nbrs,"sklearn.neighbors.NearestNeighbors(n_neighbors=2001,algorithm='auto')",CLUSTER_0,CLUSTER_9
nbrs_toy,"sklearn.neighbors.NearestNeighbors(n_neighbors=4,algorithm='auto')",CLUSTER_0,CLUSTER_9
tr_df,pandas.read_pickle('/home/baode/huangzc/tencent/data/train_preliminary/3shuru.pkl'),CLUSTER_4,CLUSTER_0
ts_df,pandas.read_pickle('/home/baode/huangzc/tencent/data/test/3shuru.pkl'),CLUSTER_4,CLUSTER_0
wv_matrix,"numpy.concatenate([row,wv_matrix],axis=0)",CLUSTER_4,CLUSTER_0
wv_matrix,numpy.load(TRAIN_DIR+'gensim_%s.npy'%col),CLUSTER_4,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_0
tmp,time.time(),CLUSTER_4,CLUSTER_0
frame,pandas.read_csv('../data/test.csv'),CLUSTER_8,CLUSTER_3
token_dic,collections.defaultdict(int),CLUSTER_8,CLUSTER_3
nonzeroy,numpy.array(nonzero[0]),CLUSTER_12,CLUSTER_9
nonzerox,numpy.array(nonzero[1]),CLUSTER_12,CLUSTER_9
hist_features,"numpy.concatenate((ch1_hist[0],ch2_hist[0],ch3_hist[0])",CLUSTER_12,CLUSTER_9
hist_features,"numpy.concatenate((channel1_hist[0],channel2_hist[0],channel3_hist[0])",CLUSTER_12,CLUSTER_9
X,"numpy.concatenate((car_feats,noncar_feats)",CLUSTER_12,CLUSTER_9
heat,"numpy.zeros_like(multi_detection_image[:,:,0])",CLUSTER_12,CLUSTER_9
hot,"numpy.zeros_like(image[:,:,0])",CLUSTER_12,CLUSTER_9
heatmap,"numpy.clip(heat,0,255)",CLUSTER_12,CLUSTER_9
heat_map,"numpy.clip(hot,0,255)",CLUSTER_12,CLUSTER_9
hogs_feats,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_12,CLUSTER_9
y,numpy.hstack((np.ones(len(car_feats),CLUSTER_12,CLUSTER_9
hog_features,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_12,CLUSTER_9
img,numpy.copy(image),CLUSTER_12,CLUSTER_9
draw_img,numpy.copy(img),CLUSTER_12,CLUSTER_9
track_example,numpy.copy(test_images[4]),CLUSTER_12,CLUSTER_9
multi_detection_image,numpy.copy(test_images[4]),CLUSTER_12,CLUSTER_9
ch1_hist,"numpy.histogram(img[:,:,0],bins=bins)",CLUSTER_12,CLUSTER_9
ch2_hist,"numpy.histogram(img[:,:,1],bins=bins)",CLUSTER_12,CLUSTER_9
ch3_hist,"numpy.histogram(img[:,:,2],bins=bins)",CLUSTER_12,CLUSTER_9
channel1_hist,"numpy.histogram(img[:,:,0],bins=nbins)",CLUSTER_12,CLUSTER_9
channel2_hist,"numpy.histogram(img[:,:,1],bins=nbins)",CLUSTER_12,CLUSTER_9
channel3_hist,"numpy.histogram(img[:,:,2],bins=nbins)",CLUSTER_12,CLUSTER_9
t,time.time(),CLUSTER_12,CLUSTER_9
t2,time.time(),CLUSTER_12,CLUSTER_9
t,time.time(),CLUSTER_12,CLUSTER_9
t2,time.time(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_12,CLUSTER_9
end,time.time(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_12,CLUSTER_9
end,time.time(),CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,9)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(4,4)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,3)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,9)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_12,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,4)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,9)",CLUSTER_12,CLUSTER_9
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_X,y,test_size=0.2,random_state=rand_state)",CLUSTER_12,CLUSTER_9
svc,sklearn.svm.LinearSVC(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_2,CLUSTER_0
df,"pandas.read_csv('poker_training_data.csv',delimiter=',')",CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_10
y_pos,numpy.arange(len(names),CLUSTER_6,CLUSTER_10
image,numpy.array(image),CLUSTER_6,CLUSTER_10
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_10
sd,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_10
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_10
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_10
probs,numpy.array(probability.topk(topk),CLUSTER_6,CLUSTER_10
performance,numpy.array(probs),CLUSTER_6,CLUSTER_10
image,"numpy.clip(image,0,1)",CLUSTER_6,CLUSTER_10
image,"numpy.transpose(image,(2,0,1)",CLUSTER_6,CLUSTER_10
cat_to_name,json.load(f),CLUSTER_6,CLUSTER_10
distance,numpy.sqrt(x_distance**2+y_distance**2+z_distance**2),CLUSTER_3,CLUSTER_6
df,"pandas.read_csv('olympics.csv',index_col=0,skiprows=1)",CLUSTER_8,CLUSTER_4
census_df,pandas.read_csv('census.csv'),CLUSTER_8,CLUSTER_4
df,pandas.read_csv(url),CLUSTER_5,CLUSTER_5
X,numpy.asarray(stemming(X),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=42)",CLUSTER_5,CLUSTER_5
clf,"sklearn.svm.SVC(kernel=""linear"",decision_function_shape=decision_shape[k],C=C_Params[j],gamma=gamma_params[j])",CLUSTER_5,CLUSTER_5
clf,"sklearn.svm.SVC(kernel=kernel_param[i],decision_function_shape='ovr',C=10.0,gamma='scale')",CLUSTER_5,CLUSTER_5
enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
train_df,"pandas.read_csv(""../KB_NLP/raw_data/train.csv"")",CLUSTER_4,CLUSTER_11
test_df,"pandas.read_csv(""../KB_NLP/raw_data/public_test.csv"")",CLUSTER_4,CLUSTER_11
doublespace_pattern,re.compile('\s+'),CLUSTER_4,CLUSTER_11
weather_data,pandas.DataFrame(weatherpy_dict),CLUSTER_9,CLUSTER_2
response,"requests.get(f""{url}&q={city}"")",CLUSTER_9,CLUSTER_2
start_time,time.time(),CLUSTER_7,CLUSTER_8
elapsed_time_secs,time.time(),CLUSTER_7,CLUSTER_8
start_time,time.time(),CLUSTER_7,CLUSTER_8
elapsed_time_secs,time.time(),CLUSTER_7,CLUSTER_8
start_time,time.time(),CLUSTER_7,CLUSTER_8
elapsed_time_secs,time.time(),CLUSTER_7,CLUSTER_8
start_time,time.time(),CLUSTER_7,CLUSTER_8
elapsed_time_secs,time.time(),CLUSTER_7,CLUSTER_8
start_time,time.time(),CLUSTER_7,CLUSTER_8
k_folds,"sklearn.model_selection.KFold(n_splits=n_folds,random_state=seed)",CLUSTER_7,CLUSTER_8
k_folds,"sklearn.model_selection.KFold(n_splits=n_folds,random_state=seed)",CLUSTER_7,CLUSTER_8
result_saida,"sklearn.model_selection.cross_val_score(modelo
,preditoras_treino
,alvo_treino
,cv=k_folds

,scoring='accuracy'

)",CLUSTER_7,CLUSTER_8
result_saida,"sklearn.model_selection.cross_val_score(modelo
,preditoras_treino
,alvo_treino
,cv=k_folds

,scoring='accuracy'

)",CLUSTER_7,CLUSTER_8
"preditoras_treino,preditoras_teste,alvo_treino,alvo_teste","sklearn.model_selection.train_test_split(
preditoras
,alvo
,test_size=test_size
,random_state=seed
)",CLUSTER_7,CLUSTER_8
"preditoras_treino,preditoras_teste,alvo_treino,alvo_teste","sklearn.model_selection.train_test_split(
preditoras
,alvo
,test_size=test_size
,random_state=seed
)",CLUSTER_7,CLUSTER_8
acuracia,"sklearn.metrics.accuracy_score(y_true=alvo_teste,y_pred=alvo_predito)",CLUSTER_7,CLUSTER_8
modelo,sklearn.pipeline.Pipeline(steps=pipelines),CLUSTER_7,CLUSTER_8
modelo,sklearn.pipeline.Pipeline(steps=pipelines),CLUSTER_7,CLUSTER_8
modelo,sklearn.pipeline.Pipeline(steps=pipelines),CLUSTER_7,CLUSTER_8
pipe,sklearn.pipeline.Pipeline(steps=pipelines),CLUSTER_7,CLUSTER_8
model_01,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
model_02,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
model_04,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
model_05,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(),CLUSTER_7,CLUSTER_8
modelo,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(solver='svd'),CLUSTER_7,CLUSTER_8
modelo,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(solver='svd'),CLUSTER_7,CLUSTER_8
model_06,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
model_03,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_8
dados,"pandas.read_csv(filepath_or_buffer=url,names=colunas,delimiter=',')",CLUSTER_7,CLUSTER_8
dados,"pandas.read_csv(filepath_or_buffer=url,names=colunas,delimiter=',')",CLUSTER_7,CLUSTER_8
datafram_comp,"pandas.DataFrame(data=array_comp,columns=[colunas])",CLUSTER_7,CLUSTER_8
x_data,numpy.arange(min(data),CLUSTER_7,CLUSTER_8
ticks,"numpy.arange(0,QtdTotalElementos,1)",CLUSTER_7,CLUSTER_8
pos,numpy.arange(numBoxes),CLUSTER_7,CLUSTER_8
KNeighborsClassifier__n_neighbors,"numpy.arange(1,50,2)",CLUSTER_7,CLUSTER_8
array_final,numpy.array(medias),CLUSTER_7,CLUSTER_8
ids,numpy.array(input_data[colunas_nominais].astype(dtype='str'),CLUSTER_7,CLUSTER_8
dados['ClasseNumerica'],"numpy.where(dados['Classe']=='good',1,0)",CLUSTER_7,CLUSTER_8
dados['ClasseNumerica'],"numpy.where(dados['Classe']=='good',1,0)",CLUSTER_7,CLUSTER_8
prediction_series,numpy.where(pd.Series(predictions),CLUSTER_7,CLUSTER_8
handles,"[plt.plot([],[],color=plt.cm.brg(i/2.),ls="""",marker=""o"",markersize=numpy.sqrt(10)",CLUSTER_7,CLUSTER_8
array_comp,"numpy.column_stack([algoritmos,
acuracia_COM_VALID_CRUZADA,
desviopadrao_COM_VALID_CRUZADA,
acuracia_SEM_VALID_CRUZADA,
desviopadrao_SEM_VALID_CRUZADA])",CLUSTER_7,CLUSTER_8
boxplot,matplotlib.pyplot.boxplot(resultados),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(1,figsize=(17,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(1,figsize=(17,8)",CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(17,7)",CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
xtickNames,"matplotlib.pyplot.setp(ax,xticklabels=modelos_nome)",CLUSTER_7,CLUSTER_8
xtickNames,"matplotlib.pyplot.setp(ax,xticklabels=algoritmos)",CLUSTER_7,CLUSTER_8
xtickNames,"matplotlib.pyplot.setp(ax,xticklabels=modelos_nome)",CLUSTER_7,CLUSTER_8
density_est,scipy.stats.gaussian_kde(data),CLUSTER_7,CLUSTER_8
boxplot,"seaborn.boxplot(data=resultados,orient=""v"",width=0.6,fliersize=2,linewidth=0.7,saturation=0.9,ax=ax)",CLUSTER_7,CLUSTER_8
values,json.loads(data),CLUSTER_7,CLUSTER_8
all_time_head_to_head,pandas.DataFrame(),CLUSTER_11,CLUSTER_2
all_time_head_to_head,pandas.concat(frames),CLUSTER_11,CLUSTER_2
eventid,"pandas.read_sql_query('selecteventidfrom_0_original_data.tournament_id_dictionary',db)",CLUSTER_11,CLUSTER_2
teamid,"pandas.read_sql_query(""selectteam1idfrom_0_original_data.match_fixtureswheretournament_id='""+k+""'"",db)",CLUSTER_11,CLUSTER_2
opponentid,"pandas.read_sql_query(""selectteam2idfrom_0_original_data.match_fixtures\
wheretournament_id='""+k+""'andteam1id='""+n+""'"",db)",CLUSTER_11,CLUSTER_2
"fig,axis","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(getdata),CLUSTER_9,CLUSTER_2
df2,pandas.DataFrame(df['ticker']['markets']),CLUSTER_9,CLUSTER_2
getdata,requests.get('https://api.cryptonator.com/api/full/btc-usd'),CLUSTER_9,CLUSTER_2
num,"random.randint(1,100)",CLUSTER_10,CLUSTER_4
Xtr,"pandas.read_csv(path1,header=None)",CLUSTER_5,CLUSTER_5
Ytr,pandas.read_csv(path2),CLUSTER_5,CLUSTER_5
Xte,"pandas.read_csv(path3,header=None)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(Xtr.values,Ytr['Prediction'].values,test_size=0.2)",CLUSTER_5,CLUSTER_5
df_total_6,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_corr,"pandas.DataFrame(get_top_abs_correlations(df_high_end_cust,60)",CLUSTER_7,CLUSTER_8
X_sm,"pandas.DataFrame(X_sm,columns=X.columns)",CLUSTER_7,CLUSTER_8
pcs_df,"pandas.DataFrame({'PC1':pca.components_[0],'PC2':pca.components_[1],'Feature':colnames})",CLUSTER_7,CLUSTER_8
cv_results,pandas.DataFrame(grid_search.cv_results_),CLUSTER_7,CLUSTER_8
df_imp_cols,"pandas.DataFrame({'Column':X_train_1.columns,'Importance':clf_gini.feature_importances_})",CLUSTER_7,CLUSTER_8
df_imp_cols,"pandas.DataFrame({'Column':X_train_1.columns,'Importance':clf_gini.feature_importances_})",CLUSTER_7,CLUSTER_8
y_train_series,pandas.Series(y_train),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(""telecom_churn_data.csv"",low_memory=False)",CLUSTER_7,CLUSTER_8
df['date_of_last_rech_9'],pandas.to_datetime(df['date_of_last_rech_9']),CLUSTER_7,CLUSTER_8
df['date_of_last_rech_8'],pandas.to_datetime(df['date_of_last_rech_8']),CLUSTER_7,CLUSTER_8
df['date_of_last_rech_7'],pandas.to_datetime(df['date_of_last_rech_7']),CLUSTER_7,CLUSTER_8
df['date_of_last_rech_6'],pandas.to_datetime(df['date_of_last_rech_6']),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,axes",matplotlib.pyplot.subplots(nrows=2),CLUSTER_7,CLUSTER_8
indices,numpy.argsort(importances),CLUSTER_7,CLUSTER_8
diff,numpy.sum((points-median),CLUSTER_7,CLUSTER_8
diff,numpy.sqrt(diff),CLUSTER_7,CLUSTER_8
"q_high,q_low","numpy.percentile(df_high_end_cust[li_plot_num_feats[i]],[max_q,min_q])",CLUSTER_7,CLUSTER_8
"q_high,q_low","numpy.percentile(df[li_plot_num_feats[i]],[max_q,min_q])",CLUSTER_7,CLUSTER_8
"q_high,q_low","numpy.percentile(df[li_plot_num_feats[i]],[max_q,min_q])",CLUSTER_7,CLUSTER_8
corrmat,numpy.corrcoef(df_train_pca.transpose(),CLUSTER_7,CLUSTER_8
median,"numpy.median(points,axis=0)",CLUSTER_7,CLUSTER_8
med_abs_deviation,numpy.median(diff),CLUSTER_7,CLUSTER_8
"X_train_1,X_test_1,y_train,y_test","sklearn.model_selection.train_test_split(X_sm,y_sm,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
pca,"sklearn.decomposition.PCA(svd_solver='randomized',random_state=42)",CLUSTER_7,CLUSTER_8
pca_again,sklearn.decomposition.PCA(0.95),CLUSTER_7,CLUSTER_8
pca_final,sklearn.decomposition.IncrementalPCA(n_components=21),CLUSTER_7,CLUSTER_8
learner_pca,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
learner_pca2,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
confusion,"sklearn.metrics.confusion_matrix(y_test,y_pred_class)",CLUSTER_7,CLUSTER_8
confusion,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion,"sklearn.metrics.confusion_matrix(y_test,predictions)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(estimator=dtree,param_grid=param_grid,
cv=n_folds,verbose=1)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(estimator=rf,param_grid=param_grid,
cv=3,n_jobs=-1,verbose=1)",CLUSTER_7,CLUSTER_8
dtree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
clf_gini,"sklearn.tree.DecisionTreeClassifier(criterion=""gini"",
random_state=100,
max_depth=10,
min_samples_leaf=50,
min_samples_split=100)",CLUSTER_7,CLUSTER_8
clf_gini,"sklearn.tree.DecisionTreeClassifier(criterion=""gini"",
random_state=100,
max_depth=15,
min_samples_leaf=50,
min_samples_split=50)",CLUSTER_7,CLUSTER_8
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
rfc,"sklearn.ensemble.RandomForestClassifier(bootstrap=True,
max_depth=10,
min_samples_leaf=100,
min_samples_split=200,
max_features=5,
n_estimators=300)",CLUSTER_7,CLUSTER_8
xlabels,"numpy.arange(xlabel_min,xlabel_max+1)",CLUSTER_4,CLUSTER_11
xlabels,"numpy.arange(xlabel_min,xlabel_max+1)",CLUSTER_4,CLUSTER_11
xlabels,"numpy.arange(xlabel_min,xlabel_max+1)",CLUSTER_4,CLUSTER_11
base_size,"numpy.array([1,1/scale/golden_ratio])",CLUSTER_4,CLUSTER_11
a,"numpy.array([0.133,0.171,0.165,0.138])",CLUSTER_4,CLUSTER_11
b,"numpy.array([243,292,299,-221])",CLUSTER_4,CLUSTER_11
k,"numpy.array([482,1020,611,521])",CLUSTER_4,CLUSTER_11
g,"numpy.array([917,1680,1340,1680])",CLUSTER_4,CLUSTER_11
f_k,"numpy.array([0.00258,0.00215,0.00173,0.00113])",CLUSTER_4,CLUSTER_11
phi,numpy.arccos(h_c_low_factor/h_c_high_factor*overlap_freq**(-3),CLUSTER_4,CLUSTER_11
h_h_f,numpy.sqrt(fT_tmp*S_h_f),CLUSTER_4,CLUSTER_11
f,"numpy.logspace(-5,-2,100)",CLUSTER_4,CLUSTER_11
current_path,os.getcwd(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=figsize)",CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
x,"numpy.arange(1,day_count_for_current_country+1)",CLUSTER_11,CLUSTER_1
day_array,"numpy.arange(1,day_count)",CLUSTER_11,CLUSTER_1
x,"numpy.arange(0,len(y)",CLUSTER_11,CLUSTER_1
ticks,numpy.arange((-1*max_pop),CLUSTER_11,CLUSTER_1
time_range,"numpy.arange(1,180,1)",CLUSTER_11,CLUSTER_1
deftoy_model(C,"25,P=0.0025,D=10,fatality_rate=0.03,initial_real_cases=2000,initial_recovered=200,initial_deceased=50,country=""France"",time_range=numpy.arange(1,180,1)",CLUSTER_11,CLUSTER_1
text_x,numpy.argmax(np.array(trace),CLUSTER_11,CLUSTER_1
a,numpy.mean(np.diff(y),CLUSTER_11,CLUSTER_1
a,numpy.mean(np.diff(y),CLUSTER_11,CLUSTER_1
a,numpy.mean(np.diff(y),CLUSTER_11,CLUSTER_1
a,numpy.mean(np.diff(y),CLUSTER_11,CLUSTER_1
x_new,"numpy.linspace(x[0],x[-1],len(x)",CLUSTER_11,CLUSTER_1
f,numpy.poly1d(coefs),CLUSTER_11,CLUSTER_1
"coefs,residual,rank,singular_values,rcond","numpy.polyfit(x,y,degree,full=True)",CLUSTER_11,CLUSTER_1
api_data,pandas.DataFrame(),CLUSTER_11,CLUSTER_1
temp_data,"pandas.DataFrame(data[""stats""][""history""])",CLUSTER_11,CLUSTER_1
age_distribution,"pandas.DataFrame(columns=[""CountryorArea"",""Sex"",""Age"",""Value"",""Year""])",CLUSTER_11,CLUSTER_1
fatality_per_age_category,"pandas.DataFrame(
[{""Age"":""0-9"",""Fatalityrate"":0},
{""Age"":""10-19"",""Fatalityrate"":0.2},
{""Age"":""20-29"",""Fatalityrate"":0.2},
{""Age"":""30-39"",""Fatalityrate"":0.2},
{""Age"":""40-49"",""Fatalityrate"":0.4},
{""Age"":""50-59"",""Fatalityrate"":1.3},
{""Age"":""60-69"",""Fatalityrate"":3.6},
{""Age"":""70-79"",""Fatalityrate"":8.0},
{""Age"":""80+"",""Fatalityrate"":14.8}],
columns=[""Age"",""Fatalityrate""]
)",CLUSTER_11,CLUSTER_1
deaths_in_all_countries,"pandas.DataFrame(columns=[""Country"",""Population"",""Female"",""Male"",""Femaledeaths"",""Maledeaths"",""Totaldeaths"",""Year""])",CLUSTER_11,CLUSTER_1
raw_data,"pandas.read_csv(""coronavirus.csv"",header=0)",CLUSTER_11,CLUSTER_1
age_distribution_raw_data,"pandas.read_excel(""age_distribution.xlsx"",header=0)",CLUSTER_11,CLUSTER_1
svr,"sklearn.svm.SVR(kernel=""rbf"",C=10000,gamma=0.01,epsilon=.001)",CLUSTER_11,CLUSTER_1
r,"requests.get(url=api_url,params=api_params)",CLUSTER_11,CLUSTER_1
df,"pandas.read_csv(file,encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
can_df['Year'],pandas.to_numeric(can_df['Year']),CLUSTER_8,CLUSTER_3
can_df['Refugees(incl.refugee-likesituations)'],pandas.to_numeric(can_df['Refugees(incl.refugee-likesituations),CLUSTER_8,CLUSTER_3
can_df['TotalPopulation'],pandas.to_numeric(can_df['TotalPopulation']),CLUSTER_8,CLUSTER_3
values,numpy.where(alpha_channel!=0),CLUSTER_4,CLUSTER_11
ind,"numpy.argwhere(new_sunglasses[:,:,3]>0)",CLUSTER_4,CLUSTER_11
image_copy,numpy.copy(image),CLUSTER_4,CLUSTER_11
key_pts_frame,pandas.read_csv('/data/training_frames_keypoints.csv'),CLUSTER_4,CLUSTER_11
"X_full,y_full",numpy.asarray(X_full),CLUSTER_7,CLUSTER_5
X_out_test,numpy.asarray(X_out_test),CLUSTER_7,CLUSTER_5
g,seaborn.countplot(sorted(y_full),CLUSTER_7,CLUSTER_5
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_7,CLUSTER_5
clf_1,"sklearn.linear_model.SGDClassifier(alpha=1e-5,n_iter=70,penalty='elasticnet')",CLUSTER_7,CLUSTER_5
clf_2,sklearn.linear_model.LassoCV(),CLUSTER_7,CLUSTER_5
clf_3,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_5
to_idf,"sklearn.pipeline.Pipeline([('count_vect',CountVectorizer()",CLUSTER_7,CLUSTER_5
data,json.loads(open('data/train.json'),CLUSTER_7,CLUSTER_5
test_data,json.loads(open('data/test.json'),CLUSTER_7,CLUSTER_5
df_param,"pandas.DataFrame(df_normalizado,columns=df.columns[:-1])",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""ClassifiedData"",index_col=0)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(df_param,df['TARGETCLASS'],test_size=.3)",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=10),CLUSTER_7,CLUSTER_5
ecom,"pandas.read_csv(""EcommercePurchases"")",CLUSTER_8,CLUSTER_4
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
Z1,"numpy.dot(W1,X)",CLUSTER_5,CLUSTER_9
Z2,"numpy.dot(W2,A1)",CLUSTER_5,CLUSTER_9
Z3,"numpy.dot(W3,A2)",CLUSTER_5,CLUSTER_9
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(40,5)",CLUSTER_5,CLUSTER_9
ax1,"matplotlib.pyplot.subplot(111,polar=True)",CLUSTER_5,CLUSTER_9
ax1,"matplotlib.pyplot.subplot(111,polar=True)",CLUSTER_5,CLUSTER_9
panss_p_n_g_imputed_mean,"numpy.mean(panss_p_n_g_imputed,axis=0)",CLUSTER_5,CLUSTER_9
panss_p_n_g_imputed_std,"numpy.std(panss_p_n_g_imputed,axis=0)",CLUSTER_5,CLUSTER_9
	data,pandas.read_csv(path),CLUSTER_5,CLUSTER_9
two_labels,pandas.read_excel('comparison_between_pn_kmeans_and_png_kmeans.xlsx'),CLUSTER_5,CLUSTER_9
panss_p_n_g_imputed_standardized,sklearn.preprocessing.scale(panss_p_n_g_imputed),CLUSTER_5,CLUSTER_9
kmeans_fit,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_5,CLUSTER_9
interactions,pandas.DataFrame(index=data.index),CLUSTER_7,CLUSTER_8
selected_features,pandas.DataFrame(model.inverse_transform(X_new),CLUSTER_7,CLUSTER_8
new_models_dataframe2,"pandas.DataFrame({'CVMean':xyz,'Std':std},index=classifiers)",CLUSTER_7,CLUSTER_8
box,"pandas.DataFrame(accuracy,index=[classifiers])",CLUSTER_7,CLUSTER_8
interactions,pandas.DataFrame(index=data_test.index),CLUSTER_7,CLUSTER_8
a,pandas.Series(),CLUSTER_7,CLUSTER_8
feat_imp,"pandas.Series(alg.feature_importances_,predictors)",CLUSTER_7,CLUSTER_8
feat_imp,"pandas.Series(alg.feature_importances_,predictors)",CLUSTER_7,CLUSTER_8
train_df['Fare_Range'],"pandas.qcut(train_df['Fare'],4)",CLUSTER_7,CLUSTER_8
test_df['Fare_Range'],"pandas.qcut(test_df['Fare'],4)",CLUSTER_7,CLUSTER_8
train_df,"pandas.read_csv(PATH+""/train.csv"")",CLUSTER_7,CLUSTER_8
test_df,"pandas.read_csv(PATH+""/test.csv"")",CLUSTER_7,CLUSTER_8
gender_submission,"pandas.read_csv(PATH+""/gender_submission.csv"")",CLUSTER_7,CLUSTER_8
submission,pandas.read_csv('../data/gender_submission.csv'),CLUSTER_7,CLUSTER_8
submission,pandas.read_csv('../data/gender_submission.csv'),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(2,2,figsize=(20,15)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(20,8)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(20,8)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(1,3,figsize=(20,8)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,6)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,10)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(2,2,figsize=(15,12)",CLUSTER_7,CLUSTER_8
logistic,"sklearn.linear_model.LogisticRegression(C=1,penalty=""l1"",random_state=7)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(kernel='rbf',C=1,gamma=0.1)",CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(kernel='linear',C=0.1,gamma=0.1)",CLUSTER_7,CLUSTER_8
gd,GridSearchCV(estimator=sklearn.svm.SVC(),CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(kernel='linear',C=0.4,gamma=0.1)",CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_7,CLUSTER_8
gd,GridSearchCV(estimator=sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_7,CLUSTER_8
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,random_state=0)",CLUSTER_7,CLUSTER_8
model,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_7,CLUSTER_8
model,BaggingClassifier(base_estimator=sklearn.neighbors.KNeighborsClassifier(n_neighbors=4),CLUSTER_7,CLUSTER_8
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
model,BaggingClassifier(base_estimator=sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
"train,test","sklearn.model_selection.train_test_split(train_df,test_size=0.2,random_state=0,stratify=train_df['Survived'])",CLUSTER_7,CLUSTER_8
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
label_enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
label_enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
model,"sklearn.feature_selection.SelectFromModel(logistic,prefit=True)",CLUSTER_7,CLUSTER_8
kfold,"sklearn.model_selection.KFold(n_splits=10,random_state=22)",CLUSTER_7,CLUSTER_8
cv_result,"sklearn.model_selection.cross_val_score(model,X,Y,cv=kfold,scoring=""accuracy"")",CLUSTER_7,CLUSTER_8
cross,"sklearn.model_selection.cross_val_score(ensemble_lin_rbf,X,Y,cv=10,scoring=""accuracy"")",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(model,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(model,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(ada,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(grad,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
cv_score,"sklearn.model_selection.cross_val_score(alg,dtrain[predictors],dtrain['Survived'],cv=cv_folds,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(xgboost,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
cv_score,"sklearn.model_selection.cross_val_score(alg,dtrain[predictors],dtrain['Survived'],cv=cv_folds,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(svm.SVC(kernel='rbf'),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(svm.SVC(kernel='linear'),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(KNeighborsClassifier(n_neighbors=9),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(RandomForestClassifier(n_estimators=100),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(LogisticRegression(),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(GaussianNB(),CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_predict(ada,X,Y,cv=10)",CLUSTER_7,CLUSTER_8
gd,sklearn.model_selection.GridSearchCV(estimator=svm.SVC(),CLUSTER_7,CLUSTER_8
gd,sklearn.model_selection.GridSearchCV(estimator=RandomForestClassifier(random_state=0),CLUSTER_7,CLUSTER_8
gsearch1,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,min_samples_split=9,min_samples_leaf=10,max_depth=5,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch2,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch3,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch4,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,n_estimators=60,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch5,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10,max_features=3)",CLUSTER_7,CLUSTER_8
gsearch1,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=5,
min_child_weight=1,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch2,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch2b,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch3,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch4,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0.2,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch5,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0.2,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch6,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=51,max_depth=4,
min_child_weight=4,gamma=0,subsample=0.8,colsample_bytree=0.85,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch7,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=51,max_depth=4,
min_child_weight=4,gamma=0,subsample=0.8,colsample_bytree=0.85,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gd,sklearn.model_selection.GridSearchCV(estimator=AdaBoostClassifier(),CLUSTER_7,CLUSTER_8
ensemble_lin_rbf,"sklearn.ensemble.VotingClassifier(estimators=[('KNN',KNeighborsClassifier(n_neighbors=4)",CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.BaggingClassifier(base_estimator=KNeighborsClassifier(n_neighbors=4),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.BaggingClassifier(base_estimator=DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
ada,"sklearn.ensemble.AdaBoostClassifier(n_estimators=200,random_state=0,learning_rate=0.1)",CLUSTER_7,CLUSTER_8
gd,GridSearchCV(estimator=sklearn.ensemble.AdaBoostClassifier(),CLUSTER_7,CLUSTER_8
ada,"sklearn.ensemble.AdaBoostClassifier(n_estimators=400,random_state=0,learning_rate=0.05)",CLUSTER_7,CLUSTER_8
model,"sklearn.ensemble.AdaBoostClassifier(n_estimators=200,learning_rate=0.05,random_state=0)",CLUSTER_7,CLUSTER_8
ada,"sklearn.ensemble.AdaBoostClassifier(n_estimators=400,random_state=0,learning_rate=0.05)",CLUSTER_7,CLUSTER_8
grad,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=500,random_state=0,learning_rate=0.1)",CLUSTER_7,CLUSTER_8
gbm0,sklearn.ensemble.GradientBoostingClassifier(random_state=10),CLUSTER_7,CLUSTER_8
gsearch1,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,min_samples_split=9,min_samples_leaf=10,max_depth=5,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch2,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch3,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch4,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=60,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch5,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10,max_features=3)",CLUSTER_7,CLUSTER_8
gbm_tuned_1,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10,max_features=3)",CLUSTER_7,CLUSTER_8
model,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=500,learning_rate=0.1,random_state=0)",CLUSTER_7,CLUSTER_8
gbm_tuned_1,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.05,

n_estimators=200,
max_depth=4,
min_samples_split=10,
min_samples_leaf=8,
subsample=0.8,
random_state=10,
max_features=13)",CLUSTER_7,CLUSTER_8
t,"numpy.linspace(0,time_to_plot,num_samples)",CLUSTER_1,CLUSTER_9
fft_output,numpy.fft.rfft(signal),CLUSTER_1,CLUSTER_9
inventory,"pandas.DataFrame({'Fruit':fruits,'Qty':qtys,'Price':[2.99,1.99,3.99,2.99]})",CLUSTER_8,CLUSTER_4
fruits,"pandas.Series(['Apple','Banana','Cherry','Orange'],name=""Fruit"")",CLUSTER_8,CLUSTER_4
qtys,"pandas.Series([5,7,2,9])",CLUSTER_8,CLUSTER_4
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
x,numpy.arange(len(ts),CLUSTER_12,CLUSTER_6
momentum_list,"numpy.log(data.history(context.security_list,""close"",context.momentum_window,""1d"")",CLUSTER_12,CLUSTER_6
"slope,intercept,r_value,p_value,std_err","scipy.stats.linregress(x,ts)",CLUSTER_12,CLUSTER_6
dateTime,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
line_x,"numpy.arange(0,12,0.1)",CLUSTER_1,CLUSTER_10
surf_x,"numpy.arange(-2,8,0.1)",CLUSTER_1,CLUSTER_10
surf_y,"numpy.arange(-2,6,0.1)",CLUSTER_1,CLUSTER_10
line_x,"numpy.arange(0,12,0.1)",CLUSTER_1,CLUSTER_10
surf_x,"numpy.arange(-2,8,0.1)",CLUSTER_1,CLUSTER_10
surf_y,"numpy.arange(-2,6,0.1)",CLUSTER_1,CLUSTER_10
line_x,"numpy.arange(0,12,0.1)",CLUSTER_1,CLUSTER_10
surf_x,"numpy.arange(-2,8,0.1)",CLUSTER_1,CLUSTER_10
surf_y,"numpy.arange(-2,6,0.1)",CLUSTER_1,CLUSTER_10
line_x,"numpy.arange(0,12,0.1)",CLUSTER_1,CLUSTER_10
surf_x,"numpy.arange(-2,8,0.1)",CLUSTER_1,CLUSTER_10
surf_y,"numpy.arange(-2,6,0.1)",CLUSTER_1,CLUSTER_10
w_pri,"numpy.array([-0.62369285,-0.743176,0.24227395])",CLUSTER_1,CLUSTER_10
beta,"numpy.array([0.01,0.01,0.01])",CLUSTER_1,CLUSTER_10
w_pri,"numpy.array([1,-1])",CLUSTER_1,CLUSTER_10
beta,"numpy.array([0.01,0.01,0.01])",CLUSTER_1,CLUSTER_10
w_pri,"numpy.array([-1,5])",CLUSTER_1,CLUSTER_10
beta,"numpy.array([0.01,0.01,0.01])",CLUSTER_1,CLUSTER_10
w_pri,"numpy.array([-1,1,3])",CLUSTER_1,CLUSTER_10
beta,"numpy.array([0.01,0.01,0.01])",CLUSTER_1,CLUSTER_10
ind_neg,numpy.where(tt<0),CLUSTER_1,CLUSTER_10
ind_neg,numpy.where(tt<0),CLUSTER_1,CLUSTER_10
data_11,"numpy.concatenate((data_1,ones_1[:,np.newaxis])",CLUSTER_1,CLUSTER_10
data_22,"numpy.concatenate((data_2,ones_2[:,np.newaxis])",CLUSTER_1,CLUSTER_10
tag,"numpy.concatenate((1*ones_1,-1*ones_2)",CLUSTER_1,CLUSTER_10
data_total,"numpy.concatenate((data_11,data_22)",CLUSTER_1,CLUSTER_10
data_total_nobias,"numpy.concatenate((data_1,data_2)",CLUSTER_1,CLUSTER_10
ones_1,numpy.ones(np.shape(data_1),CLUSTER_1,CLUSTER_10
summ,"numpy.sum(data_total[ind,:]*tag[ind,np.newaxis],0)",CLUSTER_1,CLUSTER_10
summ,"numpy.sum(data_total_nobias[ind,:]*tag[ind,np.newaxis],0)",CLUSTER_1,CLUSTER_10
summ,"numpy.sum(data_total[ind_neg,:][:,[0,2]]*tag[ind_neg,np.newaxis],0)",CLUSTER_1,CLUSTER_10
summ,"numpy.sum(data_total[ind_neg,:]*tag[ind_neg,np.newaxis],0)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(surf_x,surf_y)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(surf_x,surf_y)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(surf_x,surf_y)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(surf_x,surf_y)",CLUSTER_1,CLUSTER_10
summ_norm,"numpy.linalg.norm(summ,ord=2)",CLUSTER_1,CLUSTER_10
summ_norm,"numpy.linalg.norm(summ,ord=2)",CLUSTER_1,CLUSTER_10
summ_norm,"numpy.linalg.norm(summ,ord=2)",CLUSTER_1,CLUSTER_10
summ_norm,"numpy.linalg.norm(summ,ord=2)",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
merge_data,"pandas.merge(clinical_trial,mouse_drug,on=""MouseID"",how=""left"")",CLUSTER_1,CLUSTER_3
mouse_drug,pandas.read_csv(mouse_drug_data_to_load),CLUSTER_1,CLUSTER_3
clinical_trial,pandas.read_csv(clinical_trial_data_to_load),CLUSTER_1,CLUSTER_3
df,"pandas.read_hdf('../database/all_data_comp.h5','table')",CLUSTER_5,CLUSTER_5
MSE,sklearn.metrics.mean_squared_error(tpot.predict(X_test_13),CLUSTER_5,CLUSTER_5
MSE_perc,sklearn.metrics.mean_squared_error(tpot.predict(X_13),CLUSTER_5,CLUSTER_5
MSE_13,sklearn.metrics.mean_squared_error(tpot.predict(X_test_13),CLUSTER_5,CLUSTER_5
MSE_24,sklearn.metrics.mean_squared_error(tpot.predict(X_test_24),CLUSTER_5,CLUSTER_5
t1,time.time(),CLUSTER_5,CLUSTER_5
X_13,"numpy.array(df[[
var_names['ae1_frp'],
var_names['ae3_frp'],
var_names['me1_frp'],
var_names['me3_frp'],
var_names['ae1_rpm'],
var_names['ae3_rpm'],
var_names['me1_rpm'],
var_names['me3_rpm'],
]][date_begin:date_end])",CLUSTER_5,CLUSTER_5
X_24,"numpy.array(df[[
var_names['ae2_frp'],
var_names['ae4_frp'],
var_names['me2_frp'],
var_names['me4_frp'],
var_names['ae2_rpm'],
var_names['ae4_rpm'],
var_names['me2_rpm'],
var_names['me4_rpm'],
]][date_begin:date_end])",CLUSTER_5,CLUSTER_5
X_13,numpy.array(df[eng_13][date_begin:date_end]),CLUSTER_5,CLUSTER_5
X_24,numpy.array(df[eng_24][date_begin:date_end]),CLUSTER_5,CLUSTER_5
y_13,numpy.array(df[var_names['fo_booster_13']][date_begin:date_end]),CLUSTER_5,CLUSTER_5
y_24,numpy.array(df[var_names['fo_booster_24']][date_begin:date_end]),CLUSTER_5,CLUSTER_5
err,numpy.array(tpot_13.predict(X_13),CLUSTER_5,CLUSTER_5
train_label,numpy.array([train_data[i][0]+2*train_data[i][1]foriinrange(100),CLUSTER_5,CLUSTER_5
eval_label,numpy.array([11]),CLUSTER_5,CLUSTER_5
x,"numpy.linspace(n1,n2,n2-n1)",CLUSTER_5,CLUSTER_5
x,"numpy.linspace(n1,n2,n2-n1)",CLUSTER_5,CLUSTER_5
"X_train_13,X_test_13,y_train_13,y_test_13","sklearn.model_selection.train_test_split(X_13,y_13,train_size=0.75,test_size=0.25)",CLUSTER_5,CLUSTER_5
"X_train_13,X_test_13,y_train_13,y_test_13","sklearn.model_selection.train_test_split(X_13,y_13,train_size=0.75,test_size=0.25)",CLUSTER_5,CLUSTER_5
"X_train_13,X_test_13,y_train_13,y_test_13","sklearn.model_selection.train_test_split(X_13,y_13,train_size=0.75,test_size=0.25)",CLUSTER_5,CLUSTER_5
"X_train_24,X_test_24,y_train_24,y_test_24","sklearn.model_selection.train_test_split(X_13,y_13,train_size=0.75,test_size=0.25)",CLUSTER_5,CLUSTER_5
StackingEstimator(estimator,sklearn.linear_model.LassoLarsCV(normalize=False),CLUSTER_5,CLUSTER_5
exported_pipeline,"sklearn.pipeline.make_pipeline(
PolynomialFeatures(degree=2,include_bias=False,interaction_only=False)",CLUSTER_5,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(students,columns=['Name','Age','City','Country'])",CLUSTER_8,CLUSTER_4
data,"pandas.merge(hits,truth,on='hit_id',how='left')",CLUSTER_11,CLUSTER_1
births,pandas.read_csv('births.csv'),CLUSTER_7,CLUSTER_3
births.index,"pandas.to_datetime(10000*births.year+100*births.month+births.day,format='%Y%m%d')",CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,4)",CLUSTER_7,CLUSTER_3
quartiles,"numpy.percentile(births['births'],[25,50,75])",CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
data,numpy.array(data),CLUSTER_1,CLUSTER_3
almR[count],"scipy.integrate.simps(scipy.integrate.simps(mapr*(leg[count,:].reshape(Nmax,1)",CLUSTER_3,CLUSTER_6
almP[count],scipy.integrate.simps(scipy.integrate.simps((mapt+1j*mapp),CLUSTER_3,CLUSTER_6
almM[count],scipy.integrate.simps(scipy.integrate.simps((mapt-1j*mapp),CLUSTER_3,CLUSTER_6
ulm[count],"scipy.integrate.simps(scipy.integrate.simps(mapr*(leg[count,:].reshape(Nmax,1)",CLUSTER_3,CLUSTER_6
vlm[count],"scipy.integrate.simps(scipy.integrate.simps((mapt*(dt_leg[count,:].reshape(Nmax,1)",CLUSTER_3,CLUSTER_6
wlm[count],"scipy.integrate.simps(scipy.integrate.simps((mapp*(dt_leg[count,:].reshape(Nmax,1)",CLUSTER_3,CLUSTER_6
_index,numpy.arange(npix),CLUSTER_3,CLUSTER_6
ell,numpy.arange(ellmax+1),CLUSTER_3,CLUSTER_6
ell,numpy.arange(ellmax+1),CLUSTER_3,CLUSTER_6
vt,"numpy.array([ct*cp,ct*sp,-st])",CLUSTER_3,CLUSTER_6
vp,"numpy.array([-sp,cp,0.0*cp])",CLUSTER_3,CLUSTER_6
vtR,"numpy.array([ctR*cpR,ctR*spR,-stR])",CLUSTER_3,CLUSTER_6
vpR,"numpy.array([-spR,cpR,0.0*cpR])",CLUSTER_3,CLUSTER_6
vt,"numpy.array([ct*cp,ct*sp,-st])",CLUSTER_3,CLUSTER_6
vp,"numpy.array([-sp,cp,0.0*cp])",CLUSTER_3,CLUSTER_6
vtR,"numpy.array([ctR*cpR,ctR*spR,-stR])",CLUSTER_3,CLUSTER_6
vpR,"numpy.array([-spR,cpR,0.0*cpR])",CLUSTER_3,CLUSTER_6
newCoefs,"numpy.zeros(coefs.shape[0],dtype=complex)",CLUSTER_3,CLUSTER_6
almNew,numpy.zeros(int(lmax-t+1),CLUSTER_3,CLUSTER_6
ps,numpy.zeros(lmax+1),CLUSTER_3,CLUSTER_6
thetaNew,numpy.zeros(_numPix),CLUSTER_3,CLUSTER_6
phiNew,numpy.zeros(_numPix),CLUSTER_3,CLUSTER_6
thetaNew,numpy.zeros(_numPix),CLUSTER_3,CLUSTER_6
phiNew,numpy.zeros(_numPix),CLUSTER_3,CLUSTER_6
thetaNew,numpy.zeros(12*NSIDE**2),CLUSTER_3,CLUSTER_6
phiNew,numpy.zeros(12*NSIDE**2),CLUSTER_3,CLUSTER_6
newCoefs,"numpy.zeros(_maxind,dtype=complex)",CLUSTER_3,CLUSTER_6
leg,"numpy.zeros((maxIndex,theta.size)",CLUSTER_3,CLUSTER_6
leg_d1,"numpy.zeros((maxIndex,theta.size)",CLUSTER_3,CLUSTER_6
dp_leg,"numpy.zeros((maxIndex,theta.size)",CLUSTER_3,CLUSTER_6
ellArr,numpy.zeros(maxIndex),CLUSTER_3,CLUSTER_6
emmArr,numpy.zeros(maxIndex),CLUSTER_3,CLUSTER_6
pspec,numpy.zeros(lmax),CLUSTER_3,CLUSTER_6
almSynth,numpy.zeros(maxNum),CLUSTER_3,CLUSTER_6
ellSynth,numpy.zeros(maxNum),CLUSTER_3,CLUSTER_6
almR,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
almP,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
almM,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
ulm,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
vlm,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
wlm,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
index,numpy.where((ellArr==ell),CLUSTER_3,CLUSTER_6
index,numpy.where((ellArr==ell),CLUSTER_3,CLUSTER_6
index,numpy.where((ellArr==ell),CLUSTER_3,CLUSTER_6
index,numpy.where((ellArr==ell),CLUSTER_3,CLUSTER_6
values,numpy.fromiter((np.sum(data[index==i]),CLUSTER_3,CLUSTER_6
counts,"numpy.ones(_numPix,dtype=np.int)",CLUSTER_3,CLUSTER_6
onesMap,numpy.ones(map_trans[0].shape[0]),CLUSTER_3,CLUSTER_6
e1map,"numpy.full(_numPix,hp.UNSEEN,dtype=complex)",CLUSTER_3,CLUSTER_6
existance,"numpy.full(_numPix,False,dtype=np.bool)",CLUSTER_3,CLUSTER_6
e1map,"numpy.full(_numPix,hp.UNSEEN,dtype=np.float)",CLUSTER_3,CLUSTER_6
existance,"numpy.full(_numPix,False,dtype=np.bool)",CLUSTER_3,CLUSTER_6
e1map,numpy.full(hp.nside2npix(NSIDE),CLUSTER_3,CLUSTER_6
existance,numpy.full(hp.nside2npix(NSIDE),CLUSTER_3,CLUSTER_6
THETAROT,numpy.arcsin(np.sqrt(y**2+z**2),CLUSTER_3,CLUSTER_6
THETAROT,numpy.arcsin(np.sqrt(y**2+z**2),CLUSTER_3,CLUSTER_6
PHIROT,"numpy.arctan2(z,y)",CLUSTER_3,CLUSTER_6
PHIROT,"numpy.arctan2(z,y)",CLUSTER_3,CLUSTER_6
"ct,cp,st,sp",numpy.cos(t),CLUSTER_3,CLUSTER_6
"ctR,cpR,stR,spR",numpy.cos(trot),CLUSTER_3,CLUSTER_6
"ct,cp,st,sp",numpy.cos(t),CLUSTER_3,CLUSTER_6
"ctR,cpR,stR,spR",numpy.cos(trot),CLUSTER_3,CLUSTER_6
cost,numpy.cos(theta),CLUSTER_3,CLUSTER_6
z,numpy.cos(theta),CLUSTER_3,CLUSTER_6
z,numpy.cos(theta),CLUSTER_3,CLUSTER_6
cosmp,numpy.cos(emm*phi),CLUSTER_3,CLUSTER_6
lr,numpy.cos(thRot),CLUSTER_3,CLUSTER_6
sint,numpy.sin(theta),CLUSTER_3,CLUSTER_6
y,numpy.sin(theta),CLUSTER_3,CLUSTER_6
y,numpy.sin(theta),CLUSTER_3,CLUSTER_6
sinmp,numpy.sin(emm*phi),CLUSTER_3,CLUSTER_6
norm,numpy.sqrt(ellArr*(ellArr+1),CLUSTER_3,CLUSTER_6
theta,"numpy.linspace(0,pi-1e-4,Nmax)",CLUSTER_3,CLUSTER_6
phi,"numpy.linspace(-pi+1e-4,pi-1e-4,Nmax)",CLUSTER_3,CLUSTER_6
theta,"numpy.linspace(1e-4,pi-1e-4,Nmax)",CLUSTER_3,CLUSTER_6
phi,"numpy.linspace(-pi+1e-4,pi-1e-4,Nmax)",CLUSTER_3,CLUSTER_6
"PHI,THETA","numpy.meshgrid(phi,theta)",CLUSTER_3,CLUSTER_6
"PHI,THETA","numpy.meshgrid(phi,theta)",CLUSTER_3,CLUSTER_6
l,numpy.array(l),CLUSTER_4,CLUSTER_11
df,"pandas.DataFrame(data,columns=['img']+['c%d'%iforiinrange(10)",CLUSTER_4,CLUSTER_11
data1,"pandas.read_csv(""turnover.csv"")",CLUSTER_4,CLUSTER_11
energies,numpy.empty([len(algorithms),CLUSTER_3,CLUSTER_6
hf_energies,numpy.empty(len(pts),CLUSTER_3,CLUSTER_6
distances,numpy.empty(len(pts),CLUSTER_3,CLUSTER_6
dipoles,numpy.empty([len(algorithms),CLUSTER_3,CLUSTER_6
eval_counts,numpy.empty(len(pts),CLUSTER_3,CLUSTER_6
"fig,(ax0,ax1)","matplotlib.pyplot.subplots(nrows=2,sharex=True,figsize=(6,6)",CLUSTER_5,CLUSTER_5
results,pandas.DataFrame(search.cv_results_),CLUSTER_5,CLUSTER_5
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_5
logistic,"sklearn.linear_model.SGDClassifier(loss='log',penalty='l1',max_iter=100,tol=1e-5,random_state=0)",CLUSTER_5,CLUSTER_5
pipe,"sklearn.pipeline.Pipeline(steps=[('pca',pca)",CLUSTER_5,CLUSTER_5
search,"sklearn.model_selection.GridSearchCV(pipe,param_grid,iid=False,cv=5,return_train_score=False)",CLUSTER_5,CLUSTER_5
train_data,"pandas.read_csv(path_to_data,sep="""",header=None)",CLUSTER_6,CLUSTER_11
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_6,CLUSTER_11
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_6,CLUSTER_11
dists,"numpy.zeros((num_pred,num_data)",CLUSTER_1,CLUSTER_9
y_pred,numpy.zeros(num_pred),CLUSTER_1,CLUSTER_9
y_pred,numpy.zeros(num_pred),CLUSTER_1,CLUSTER_9
features,"numpy.zeros((steps,3)",CLUSTER_1,CLUSTER_9
train_ind,"numpy.ones(l,dtype=bool)",CLUSTER_1,CLUSTER_9
closest_x,numpy.argsort(dst),CLUSTER_1,CLUSTER_9
test_ind,numpy.logical_not(train_ind),CLUSTER_1,CLUSTER_9
Y,numpy.hstack((np.zeros(num_observations),CLUSTER_1,CLUSTER_9
X,"numpy.vstack((x1,x2)",CLUSTER_1,CLUSTER_9
t0,time.time(),CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
t0,time.time(),CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
y_pred[j],"scipy.stats.mode(closest_y,None)",CLUSTER_1,CLUSTER_9
y_pred[j],"scipy.stats.mode(closest_y,None)",CLUSTER_1,CLUSTER_9
country,pandas.get_dummies(df['country']),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('ab_data.csv'),CLUSTER_1,CLUSTER_3
df_country,pandas.read_csv('countries.csv'),CLUSTER_1,CLUSTER_3
p_diffs,numpy.asarray(p_diffs),CLUSTER_1,CLUSTER_3
df2['ab_page'],"numpy.where(df2['group']=='treatment',1,0)",CLUSTER_1,CLUSTER_3
noteIn,"numpy.array(noteIn,dtype=float)",CLUSTER_5,CLUSTER_0
noteOut,"numpy.array(noteOut,dtype=float)",CLUSTER_5,CLUSTER_0
noteIn,"numpy.array(noteIn,dtype=float)",CLUSTER_5,CLUSTER_0
noteOut,"numpy.array(noteOut,dtype=float)",CLUSTER_5,CLUSTER_0
result,"numpy.array([intToNote[indexPitch],intToLength[indexLength]])",CLUSTER_5,CLUSTER_0
result,"numpy.array([intToNote[indexPitch],intToLength[indexLength]])",CLUSTER_5,CLUSTER_0
fake,"numpy.zeros((batch_size,1)",CLUSTER_5,CLUSTER_0
dout,"numpy.concatenate((catNote,catLength)",CLUSTER_5,CLUSTER_0
pattern,"numpy.concatenate((pattern,append)",CLUSTER_5,CLUSTER_0
real,"numpy.ones((batch_size,1)",CLUSTER_5,CLUSTER_0
indexPitch,numpy.argmax(array),CLUSTER_5,CLUSTER_0
indexLength,numpy.argmax(array),CLUSTER_5,CLUSTER_0
din,"numpy.reshape(reshape,(inputSize,seqLength,categories)",CLUSTER_5,CLUSTER_0
din,"numpy.reshape(reshape,(inputSize,seqLength,categories)",CLUSTER_5,CLUSTER_0
prediction_input,"numpy.reshape(pattern,(1,seqLength,categories)",CLUSTER_5,CLUSTER_0
append,numpy.reshape(np.array([indexPitch/float(npitches),CLUSTER_5,CLUSTER_0
shape,numpy.shape(noteIn),CLUSTER_5,CLUSTER_0
cik_df,"pandas.read_sql(text(""selectcik,sic,sic_description,company_name,tickerfromcikwherecik=:cik"")",CLUSTER_8,CLUSTER_4
mean_acc,numpy.zeros((Ks-1),CLUSTER_5,CLUSTER_5
std_acc,numpy.zeros((Ks-1),CLUSTER_5,CLUSTER_5
std_acc[n-1],numpy.std(yhat==y_test),CLUSTER_5,CLUSTER_5
df,pandas.read_csv('teleCust1000t.csv'),CLUSTER_5,CLUSTER_5
X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=4)",CLUSTER_5,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n),CLUSTER_5,CLUSTER_5
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,yhat)",CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('/home/urwa/Documents/side_projects/urban/data/featureData/com_jfk.csv'),CLUSTER_5,CLUSTER_5
train_r2,sklearn.metrics.r2_score(y_train.detach(),CLUSTER_5,CLUSTER_5
test_r2,sklearn.metrics.r2_score(y_test.detach(),CLUSTER_5,CLUSTER_5
train_r2,sklearn.metrics.r2_score(y_train.detach(),CLUSTER_5,CLUSTER_5
test_r2,sklearn.metrics.r2_score(y_test.detach(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.30,random_state=42)",CLUSTER_5,CLUSTER_5
text,"re.sub(r""i'm"",""iam"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""he's"",""heis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""she's"",""sheis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""it's"",""itis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""that's"",""thatis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""what's"",""thatis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""where's"",""whereis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""how's"",""howis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'ll"",""will"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'ve"",""have"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'d"",""would"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""won't"",""willnot"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""can't"",""cannot"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""n't"",""not"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""n'"",""ng"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""'bout"",""about"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""'til"",""until"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""[-()",CLUSTER_0,CLUSTER_7
counter,collections.Counter(words),CLUSTER_0,CLUSTER_7
probs_df,"pandas.DataFrame(np.hstack([probs,y_test.values.reshape(-1,1)",CLUSTER_5,CLUSTER_1
X_fs_df,"pandas.DataFrame(X_fs,columns=features)",CLUSTER_5,CLUSTER_1
ft_pipeline,"sklearn.pipeline.Pipeline([
('cat',experiment_2.get_categorical_pipeline()",CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.2,stratify=y,random_state=1)",CLUSTER_5,CLUSTER_1
cb,matplotlib.pyplot.colorbar(),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(8,5)",CLUSTER_4,CLUSTER_11
imgplot,"matplotlib.pyplot.imshow(X[0],cmap=""gray"")",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.subplot(rows,cols,i+1)",CLUSTER_4,CLUSTER_11
loc,"numpy.arange(1,num_labels+1)",CLUSTER_4,CLUSTER_11
X,"numpy.array(X,dtype='float64')",CLUSTER_4,CLUSTER_11
y,numpy.array(y),CLUSTER_4,CLUSTER_11
X,"numpy.reshape(X,(400,(92*112)",CLUSTER_4,CLUSTER_11
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_4,CLUSTER_11
pca,sklearn.decomposition.PCA(n_components=0.99),CLUSTER_4,CLUSTER_11
clf,sklearn.linear_model.LogisticRegression(C=.001),CLUSTER_4,CLUSTER_11
clf,sklearn.linear_model.LogisticRegression(C=.01),CLUSTER_4,CLUSTER_11
"X_train,X_temp,y_train,y_temp","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_11
"X_val,X_test,y_val,y_test","sklearn.model_selection.train_test_split(X_temp,y_temp,test_size=0.5,random_state=42)",CLUSTER_4,CLUSTER_11
X_sample_scaled,sklearn.preprocessing.scale(X_sample),CLUSTER_4,CLUSTER_11
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_11
clf,sklearn.svm.LinearSVC(C=.001),CLUSTER_4,CLUSTER_11
clf,sklearn.svm.LinearSVC(C=.001),CLUSTER_4,CLUSTER_11
positions,"numpy.ndarray((n+1,self.ndim)",CLUSTER_1,CLUSTER_10
reference,"numpy.array([[0.,0.],[-1.,0.],[-1.,-1.],[-2.,-1.],
[-2.,0.],[-2.,1.],[-1.,1.],[-1.,2.],
[0.,2.],[1.,2.],[0.,2.]])",CLUSTER_1,CLUSTER_10
step,numpy.zeros(ndim),CLUSTER_1,CLUSTER_10
ys_2,"numpy.power(ys,2)",CLUSTER_1,CLUSTER_10
new_1,numpy.array(new_1),CLUSTER_1,CLUSTER_9
x,numpy.where(parabola==255),CLUSTER_1,CLUSTER_9
y,numpy.where(parabola==255),CLUSTER_1,CLUSTER_9
"values,freq","numpy.unique(img,return_counts=True)",CLUSTER_1,CLUSTER_9
"params,_","scipy.optimize.curve_fit(f=parabola_eqn_2,xdata=x,ydata=y)",CLUSTER_1,CLUSTER_9
window,"numpy.cumsum(np.insert(x_array,0,0)",CLUSTER_1,CLUSTER_9
average,numpy.average(y_data),CLUSTER_1,CLUSTER_9
average_weight,numpy.average(weighted_mean),CLUSTER_1,CLUSTER_9
y_data,"numpy.load(""6_dataset.pickle.npy"")",CLUSTER_1,CLUSTER_9
peaks,"scipy.signal.find_peaks(stretched_weighted_mean,width=3,distance=200,prominence=3,wlen=150)",CLUSTER_1,CLUSTER_9
test_df,"pandas.read_csv(""../data/test_WyRytb0.csv"")",CLUSTER_1,CLUSTER_3
sample_sub,"pandas.read_csv(""../data/sample_submission_CH2mq5Z.csv"")",CLUSTER_1,CLUSTER_3
df,"pandas.read_csv(""../data/train/train.csv"")",CLUSTER_1,CLUSTER_3
y,numpy.array([i*-2+1+np.random.normal(),CLUSTER_1,CLUSTER_9
y_hat,numpy.array([a+b*iforiinx]),CLUSTER_1,CLUSTER_9
y_fit,numpy.array([a+b*iforiinx_val]),CLUSTER_1,CLUSTER_9
y_hat,numpy.array([a+b*iforiinx]),CLUSTER_1,CLUSTER_9
y_fit,numpy.array([a+b*iforiinx_val]),CLUSTER_1,CLUSTER_9
residuals,numpy.zeros(len(y),CLUSTER_1,CLUSTER_9
ci_lo,numpy.zeros(len(x_val),CLUSTER_1,CLUSTER_9
ci_hi,numpy.zeros(len(x_val),CLUSTER_1,CLUSTER_9
resid,numpy.zeros(len(y),CLUSTER_1,CLUSTER_9
ci_lo,numpy.zeros(len(x_val),CLUSTER_1,CLUSTER_9
ci_hi,numpy.zeros(len(x_val),CLUSTER_1,CLUSTER_9
a,numpy.mean(y),CLUSTER_1,CLUSTER_9
a,numpy.mean(y),CLUSTER_1,CLUSTER_9
Sxy,numpy.sum(x*y),CLUSTER_1,CLUSTER_9
Sxx,numpy.sum(x**2),CLUSTER_1,CLUSTER_9
SSE,numpy.sum((y-y_hat),CLUSTER_1,CLUSTER_9
SSR,numpy.sum((y_hat-np.mean(y),CLUSTER_1,CLUSTER_9
tms,numpy.sum((y-np.mean(y),CLUSTER_1,CLUSTER_9
Sxy,numpy.sum(x*y),CLUSTER_1,CLUSTER_9
Sxx,numpy.sum(x**2),CLUSTER_1,CLUSTER_9
SSE,numpy.sum((y-y_hat),CLUSTER_1,CLUSTER_9
SSR,numpy.sum((y_hat-np.mean(y),CLUSTER_1,CLUSTER_9
tms,numpy.sum((y-np.mean(y),CLUSTER_1,CLUSTER_9
x_val,numpy.linspace(min(x),CLUSTER_1,CLUSTER_9
x_val,numpy.linspace(min(x),CLUSTER_1,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_9
"fig,((ax0,ax1),(ax2,_))","matplotlib.pyplot.subplots(nrows=2,ncols=2)",CLUSTER_1,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_9
"fig,((ax0,ax1),(ax2,_))","matplotlib.pyplot.subplots(nrows=2,ncols=2)",CLUSTER_1,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_9
r,math.sqrt(Rsq),CLUSTER_1,CLUSTER_9
SE_b,math.sqrt(MSE/Sxx),CLUSTER_1,CLUSTER_9
SE_b,math.sqrt(MSE/Sxx),CLUSTER_1,CLUSTER_9
SE_a,math.sqrt(MSE*(1/len(y),CLUSTER_1,CLUSTER_9
"w_shap,p_shap",scipy.stats.shapiro(residuals),CLUSTER_1,CLUSTER_9
data,pandas.read_csv('data/telecom_data.csv'),CLUSTER_7,CLUSTER_3
train_df,pandas.DataFrame(metadata),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(metadata),CLUSTER_7,CLUSTER_8
required_plots_df,"pandas.DataFrame(predictions_LR,columns=['predictions_LR'])",CLUSTER_7,CLUSTER_8
train_plot_df,pandas.DataFrame(np.array(y_train_pred),CLUSTER_7,CLUSTER_8
df_stop_words,"pandas.read_csv(""stop_words.txt"",delimiter=',')",CLUSTER_7,CLUSTER_8
df_stop_words,"pandas.read_csv(""stop_words.txt"",delimiter=',')",CLUSTER_7,CLUSTER_8
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_8
required_plots_df['true_labels'],numpy.array(labels_test),CLUSTER_7,CLUSTER_8
train_plot_df['labels_train'],numpy.array(labels_train),CLUSTER_7,CLUSTER_8
sorted_index,numpy.argsort(similarity),CLUSTER_7,CLUSTER_8
"mu,sd",numpy.mean(a),CLUSTER_7,CLUSTER_8
params,"numpy.logspace(-4,4,num=9)",CLUSTER_7,CLUSTER_8
processed_feature,"re.sub(r'\W','',str(tweets[sentence])",CLUSTER_7,CLUSTER_8
processed_feature,"re.sub(r'\s+[a-zA-Z]\s+','',processed_feature)",CLUSTER_7,CLUSTER_8
processed_feature,"re.sub(r'\s+','',processed_feature,flags=re.I)",CLUSTER_7,CLUSTER_8
processed_feature,"re.sub(r'^b\s+','',processed_feature)",CLUSTER_7,CLUSTER_8
train3,"scipy.sparse.hstack((train1,train2)",CLUSTER_7,CLUSTER_8
test_curve,"matplotlib.pyplot.errorbar(params,test_mean_hp,color=sns.xkcd_rgb[""palered""],yerr=test_ci_hp)",CLUSTER_7,CLUSTER_8
train_curve,"matplotlib.pyplot.errorbar(params,train_mean_hp,color=sns.xkcd_rgb[""denimblue""],yerr=train_ci_hp)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(15,6)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_7,CLUSTER_8
p1,"seaborn.countplot(x=""year"",data=df,ax=axes[0])",CLUSTER_7,CLUSTER_8
p2,"seaborn.countplot(x=""year"",data=df,hue='label',ax=axes[1])",CLUSTER_7,CLUSTER_8
p1,"seaborn.countplot(x=""claimant"",data=claimant_df,ax=axes[0])",CLUSTER_7,CLUSTER_8
p2,"seaborn.countplot(x=""claimant"",data=claimant_df,hue='label',ax=axes[1])",CLUSTER_7,CLUSTER_8
p1,"seaborn.countplot(x=""true_labels"",data=required_plots_df,ax=axes[0])",CLUSTER_7,CLUSTER_8
p2,"seaborn.countplot(x=""predictions_LR"",data=required_plots_df,ax=axes[1])",CLUSTER_7,CLUSTER_8
"features_train,features_test,labels_train,labels_test","sklearn.model_selection.train_test_split(train3,y,test_size=0.3,random_state=10)",CLUSTER_7,CLUSTER_8
"features_train,features_test,target_train,target_test","sklearn.model_selection.train_test_split(features,target,test_size=0.3,stratify=target)",CLUSTER_7,CLUSTER_8
"features_train,features_test,target_train,target_test","sklearn.model_selection.train_test_split(features,target,test_size=0.3,stratify=target)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
classifier,"sklearn.linear_model.LogisticRegression(C=params['c'],solver='liblinear')",CLUSTER_7,CLUSTER_8
classifier,"sklearn.linear_model.LogisticRegression(C=params[i],solver='liblinear')",CLUSTER_7,CLUSTER_8
selector,"sklearn.feature_selection.SelectPercentile(f_classif,percentile=10)",CLUSTER_7,CLUSTER_8
conf_mat_train,"sklearn.metrics.confusion_matrix(train_plot_df['labels_train'],train_plot_df['y_train_pred'])",CLUSTER_7,CLUSTER_8
conf_mat_train,"sklearn.metrics.confusion_matrix(required_plots_df['true_labels'],required_plots_df['predictions_LR'])",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.StratifiedKFold(n_splits=10,random_state=2017)",CLUSTER_7,CLUSTER_8
train_score,"sklearn.metrics.accuracy_score(target_train,train_target_pred)",CLUSTER_7,CLUSTER_8
test_score,"sklearn.metrics.accuracy_score(target_test,test_target_pred)",CLUSTER_7,CLUSTER_8
mashed_str,"re.sub("",\Z"","""",mashed_str)",CLUSTER_0,CLUSTER_11
parsed_lines,"re.split('\n',parsed_content)",CLUSTER_0,CLUSTER_11
parsed_words1,"re.split('[\t]+',parsed_line)",CLUSTER_0,CLUSTER_11
parsed_words2,"re.split('\,',parsed_words1[1])",CLUSTER_0,CLUSTER_11
dataset_desc_list,"re.split('[]+',dataset_desc)",CLUSTER_0,CLUSTER_11
org_url_dict,json.load(f),CLUSTER_0,CLUSTER_11
result_json,json.load(f),CLUSTER_0,CLUSTER_11
rsc_data,"pandas.Series({
'name':dataset_name,
'description':dataset_desc_list,
'attribution':package_author,
'column_field_name':'',
'columns_name':'',
'type':'file',
'categories':group_list,
'domain_category':group_domain,
'domain_tags':tag_list,
'provenance':'official',
'download_count':download_count,
'page_views_last_month':page_views_last_month,
'page_views_last_week':page_views_last_week,
'page_views_total':page_views_total,
'page_views_total_log':page_views_total_log,
'domain':domain_name,
'mash':mash_list,
'big_mash':big_mash_list
})",CLUSTER_0,CLUSTER_11
pd_data_init,"pandas.DataFrame(index=[],columns=[
'name',
'description',
'attribution',
'column_field_name',
'columns_name',
'type',
'categories',
'domain_category',
'domain_tags',
'provenance',
'download_count',
'page_views_last_month',
'page_views_last_week',
'page_views_total',
'page_views_total_log',
'domain',
'mash',
'big_mash'
])",CLUSTER_0,CLUSTER_11
amount,"random.randint(1,maxValue)",CLUSTER_10,CLUSTER_4
"fig,ax","matplotlib.pyplot.subplots(10,10,figsize=(8,8)",CLUSTER_7,CLUSTER_9
n_components,"numpy.arange(1,21)",CLUSTER_7,CLUSTER_9
n_components,"numpy.arange(50,210,10)",CLUSTER_7,CLUSTER_9
X_stretched,"numpy.dot(X,rng.randn(2,2)",CLUSTER_7,CLUSTER_9
angle,"numpy.degrees(np.arctan2(U[1,0],U[0,0])",CLUSTER_7,CLUSTER_9
"U,s,Vt",numpy.linalg.svd(covariance),CLUSTER_7,CLUSTER_9
kmeans,"sklearn.cluster.KMeans(4,random_state=0)",CLUSTER_7,CLUSTER_9
kmeans,"sklearn.cluster.KMeans(n_clusters=4,random_state=0)",CLUSTER_7,CLUSTER_9
kmeans,"sklearn.cluster.KMeans(n_clusters=4,random_state=0)",CLUSTER_7,CLUSTER_9
"Xmoon,ymoon","sklearn.datasets.make_moons(200,noise=.05,random_state=0)",CLUSTER_7,CLUSTER_9
digits,sklearn.datasets.load_digits(),CLUSTER_7,CLUSTER_9
pca,"sklearn.decomposition.PCA(0.99,whiten=True)",CLUSTER_7,CLUSTER_9
word_to_vec_map[currWordFromGlove],"numpy.array(line[1:],dtype=np.float64)",CLUSTER_0,CLUSTER_3
X,numpy.asarray(phrases),CLUSTER_0,CLUSTER_3
Y,"numpy.asarray(emoji,dtype=(int)",CLUSTER_0,CLUSTER_3
avgReturn,"numpy.zeros((50,)",CLUSTER_0,CLUSTER_3
pred,"numpy.zeros((m,1)",CLUSTER_0,CLUSTER_3
b,"numpy.zeros((n_y,)",CLUSTER_0,CLUSTER_3
XReturn,"numpy.zeros((m,max_len)",CLUSTER_0,CLUSTER_3
embeddingMatrix,"numpy.zeros((vocabularyLength,embeddingLength)",CLUSTER_0,CLUSTER_3
Z,"numpy.dot(W,avg)",CLUSTER_0,CLUSTER_3
z,"numpy.dot(W,avg)",CLUSTER_0,CLUSTER_3
dW,"numpy.dot(dz.reshape(n_y,1)",CLUSTER_0,CLUSTER_3
pred[j],numpy.argmax(A),CLUSTER_0,CLUSTER_3
val,numpy.argmax(output[0]),CLUSTER_0,CLUSTER_3
exp,numpy.exp(z),CLUSTER_0,CLUSTER_3
Y,numpy.eye(C),CLUSTER_0,CLUSTER_3
newarray,numpy.eye(5),CLUSTER_0,CLUSTER_3
newarray1,numpy.eye(5),CLUSTER_0,CLUSTER_3
filetest,pandas.read_csv('data/emojify_data.csv'),CLUSTER_0,CLUSTER_3
y,"numpy.array([3,6,9,12])",CLUSTER_3,CLUSTER_6
vector_for_char_a,"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
bh,"numpy.zeros((hidden_size,1)",CLUSTER_8,CLUSTER_3
by,"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
x,"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
x,"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
hprev,"numpy.zeros((hidden_size,1)",CLUSTER_8,CLUSTER_3
hprev,"numpy.zeros((hidden_size,1)",CLUSTER_8,CLUSTER_3
"dWxh,dWhh,dWhy",numpy.zeros_like(Wxh),CLUSTER_8,CLUSTER_3
"dbh,dby",numpy.zeros_like(bh),CLUSTER_8,CLUSTER_3
dhnext,numpy.zeros_like(hs[0]),CLUSTER_8,CLUSTER_3
"mWxh,mWhh,mWhy",numpy.zeros_like(Wxh),CLUSTER_8,CLUSTER_3
"mbh,mby",numpy.zeros_like(bh),CLUSTER_8,CLUSTER_3
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_8,CLUSTER_3
dWhy+,"numpy.dot(dy,hs[t].T)",CLUSTER_8,CLUSTER_3
dh,"numpy.dot(Why.T,dy)",CLUSTER_8,CLUSTER_3
dWxh+,"numpy.dot(dhraw,xs[t].T)",CLUSTER_8,CLUSTER_3
dWhh+,"numpy.dot(dhraw,hs[t-1].T)",CLUSTER_8,CLUSTER_3
dhnext,"numpy.dot(Whh.T,dhraw)",CLUSTER_8,CLUSTER_3
y,"numpy.dot(Why,h)",CLUSTER_8,CLUSTER_3
ps[t],numpy.exp(ys[t]),CLUSTER_8,CLUSTER_3
p,numpy.exp(y),CLUSTER_8,CLUSTER_3
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_8,CLUSTER_3
h,"numpy.tanh(np.dot(Wxh,x)",CLUSTER_8,CLUSTER_3
hs[-1],numpy.copy(hprev),CLUSTER_8,CLUSTER_3
dy,numpy.copy(ps[t]),CLUSTER_8,CLUSTER_3
data,"numpy.column_stack((tt,xk,qk)",CLUSTER_1,CLUSTER_9
response,requests.get('https://jsonplaceholder.typicode.com/todos'),CLUSTER_9,CLUSTER_2
response,requests.get('https://api.github.com/events'),CLUSTER_9,CLUSTER_2
data,pandas.DataFrame(results),CLUSTER_9,CLUSTER_2
data,pandas.DataFrame(response.json(),CLUSTER_9,CLUSTER_2
flattened,pandas.DataFrame(dict(data[column]),CLUSTER_9,CLUSTER_2
data,"pandas.concat([data,flattened],axis=1)",CLUSTER_9,CLUSTER_2
ds,pandas.read_csv('./anonymized_data.csv'),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
ages,"pandas.DataFrame({""age"":[18,22,25,27,7,21,23,37,30,61,45,41,9,18,80,100]})",CLUSTER_4,CLUSTER_11
"ages[""equal_width_age""]","pandas.cut(ages[""age""],4)",CLUSTER_4,CLUSTER_11
"ages[""customized_age_grd""]","pandas.cut(ages[""age""],bin)",CLUSTER_4,CLUSTER_11
"ages[""equal_freq_age""]","pandas.qcut(ages[""age""],4)",CLUSTER_4,CLUSTER_11
app_train['CNT_CHILDREN_GROUP'],"pandas.cut(app_train['CNT_CHILDREN'].values,cut_rule,include_lowest=True)",CLUSTER_4,CLUSTER_11
app_train,pandas.read_csv(f_app),CLUSTER_4,CLUSTER_11
df,pandas.read_csv('newsdataset1.csv'),CLUSTER_8,CLUSTER_4
l,pandas.DataFrame(difference),CLUSTER_8,CLUSTER_3
my_predict,pandas.DataFrame(list(returns(signals),CLUSTER_8,CLUSTER_3
ticker_df,pandas.read_csv('stock_data/ticker_data.csv'),CLUSTER_8,CLUSTER_3
factor_df,pandas.read_csv('stock_data/factor_data.csv'),CLUSTER_8,CLUSTER_3
x,"numpy.ndarray.astype(x,""float32"")",CLUSTER_8,CLUSTER_3
my_weights,numpy.zeros(1000),CLUSTER_8,CLUSTER_3
sharpe_ratio,numpy.sqrt(252),CLUSTER_8,CLUSTER_3
features_dir,os.getcwd(),CLUSTER_4,CLUSTER_11
monkey,os.listdir(features_dir),CLUSTER_4,CLUSTER_11
def_scores,"pandas.DataFrame(dat,columns=cols,index=mindex)",CLUSTER_4,CLUSTER_11
scores_frame,"pandas.DataFrame(dat,columns=cols,index=mindex)",CLUSTER_4,CLUSTER_11
mortality_percents,"pandas.concat([live_percent,dead_percent],axis=1)",CLUSTER_4,CLUSTER_11
scores_report,"sklearn.metrics.classification_report(y_true,y_pred)",CLUSTER_4,CLUSTER_11
scores_report,"sklearn.metrics.classification_report(y_true,y_pred)",CLUSTER_4,CLUSTER_11
scores_report,"sklearn.metrics.classification_report(y_true,y_pred)",CLUSTER_4,CLUSTER_11
scores_report,"sklearn.metrics.classification_report(y_true,y_pred)",CLUSTER_4,CLUSTER_11
"surv_f1,mort_f1","sklearn.metrics.f1_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv_f1,mort_f1","sklearn.metrics.f1_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv_f1,mort_f1","sklearn.metrics.f1_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv,mort","sklearn.metrics.recall_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv,mort","sklearn.metrics.recall_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv,mort","sklearn.metrics.recall_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
default_scores,"sklearn.model_selection.cross_val_score(Tree,X_train,y_train,cv=5,scoring='f1')",CLUSTER_4,CLUSTER_11
default_scores,"sklearn.model_selection.cross_val_score(Tree,X_train,y_train,cv=5,scoring='f1_macro')",CLUSTER_4,CLUSTER_11
default_scores,"sklearn.model_selection.cross_val_score(Tree,X_train,y_train,cv=5,scoring='recall')",CLUSTER_4,CLUSTER_11
default_scores,"sklearn.model_selection.cross_val_score(Tree,X_train,y_train,cv=5,scoring='recall_macro')",CLUSTER_4,CLUSTER_11
optimized_scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='f1')",CLUSTER_4,CLUSTER_11
optimized_scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='f1_macro')",CLUSTER_4,CLUSTER_11
optimized_scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='recall')",CLUSTER_4,CLUSTER_11
optimized_scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='recall_macro')",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.20,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.30,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.30,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=testes_size,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.20,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.50,random_state=42)",CLUSTER_4,CLUSTER_11
clf,"sklearn.model_selection.GridSearchCV(classifiers[key][0],classifiers[key][1],cv=5,
scoring=score)",CLUSTER_4,CLUSTER_11
clf,"sklearn.model_selection.GridSearchCV(classifiers[key][0],classifiers[key][1],cv=5,
scoring=score)",CLUSTER_4,CLUSTER_11
LSVC,sklearn.svm.LinearSVC(),CLUSTER_4,CLUSTER_11
LSVC,sklearn.svm.LinearSVC(random_state=42),CLUSTER_4,CLUSTER_11
SVC,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_11
SVC,sklearn.svm.SVC(random_state=42),CLUSTER_4,CLUSTER_11
MLP,sklearn.neural_network.MLPClassifier(),CLUSTER_4,CLUSTER_11
MLP,sklearn.neural_network.MLPClassifier(random_state=42),CLUSTER_4,CLUSTER_11
classifiers[key][0],"sklearn.neural_network.MLPClassifier(random_state=42,
hidden_layer_sizes=(input_layer,middle_layer)",CLUSTER_4,CLUSTER_11
Tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_11
Tree,sklearn.tree.DecisionTreeClassifier(random_state=42),CLUSTER_4,CLUSTER_11
Tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_11
Kneighb,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_11
Kneighb,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_11
df2_stand,"pandas.DataFrame({'type':['TV','radio','newspaper'],'coef':regr2.coef_})",CLUSTER_7,CLUSTER_5
df2_unstand,"pandas.DataFrame({'type':['TV','radio','newspaper'],'coef':regr.coef_})",CLUSTER_7,CLUSTER_5
exog,pandas.DataFrame({'TV':x_mesh.flatten(),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv('http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv',index_col=0)",CLUSTER_7,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr2,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr3,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr4,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr5,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_7,CLUSTER_5
x_mesh,"numpy.arange(0,300)",CLUSTER_7,CLUSTER_5
y_mesh,"numpy.arange(0,50)",CLUSTER_7,CLUSTER_5
x_mesh,"numpy.arange(0,300)",CLUSTER_7,CLUSTER_5
y_mesh,"numpy.arange(0,50)",CLUSTER_7,CLUSTER_5
x_mesh,"numpy.arange(0,300)",CLUSTER_7,CLUSTER_5
y_mesh,"numpy.arange(0,50)",CLUSTER_7,CLUSTER_5
num_iterations_array,"numpy.arange(0,10)",CLUSTER_7,CLUSTER_5
num_iterations_array,"numpy.arange(0,10)",CLUSTER_7,CLUSTER_5
num_iterations_array,"numpy.arange(0,10)",CLUSTER_7,CLUSTER_5
learning_rates,"numpy.logspace(-4,-3,100)",CLUSTER_7,CLUSTER_5
"x_mesh,y_mesh","numpy.meshgrid(x_mesh,y_mesh)",CLUSTER_7,CLUSTER_5
"x_mesh,y_mesh","numpy.meshgrid(x_mesh,y_mesh)",CLUSTER_7,CLUSTER_5
"x_mesh,y_mesh","numpy.meshgrid(x_mesh,y_mesh)",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
price,"pandas.DataFrame({ticker:data['AdjClose']forticker,datainall_data.items()",CLUSTER_1,CLUSTER_3
volume,"pandas.DataFrame({ticker:data['Volume']forticker,datainall_data.items()",CLUSTER_1,CLUSTER_3
"figure3,ax3",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"figure1,ax1",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"figure2,ax2",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"figure3,ax3",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
labels,"numpy.array([1,2,3,0,2,1])",CLUSTER_1,CLUSTER_9
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
corona_data,pandas.read_csv(dir_path+data_filename),CLUSTER_8,CLUSTER_3
targets,numpy.array(targets),CLUSTER_5,CLUSTER_10
results,numpy.zeros((len(sequences),CLUSTER_5,CLUSTER_10
data,"numpy.concatenate((training_data,testing_data)",CLUSTER_5,CLUSTER_10
targets,"numpy.concatenate((training_targets,testing_targets)",CLUSTER_5,CLUSTER_10
data,"numpy.concatenate((training_data,testing_data)",CLUSTER_5,CLUSTER_10
targets,"numpy.concatenate((training_targets,testing_targets)",CLUSTER_5,CLUSTER_10
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(data,targets,test_size=0.2)",CLUSTER_5,CLUSTER_10
collections1,"requests.get(
collection_url,
parameters={'load_amount':10,
'offset':0}
)",CLUSTER_8,CLUSTER_2
events0,"requests.get(calendar_url,parameters={'date':'2018-11'})",CLUSTER_8,CLUSTER_2
dataset,pandas.read_csv('Position_Salaries.csv'),CLUSTER_5,CLUSTER_5
X_grid,numpy.arange(min(sc_X.inverse_transform(X),CLUSTER_5,CLUSTER_5
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
sc_Y,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
regressor,sklearn.svm.SVR(kernel='rbf'),CLUSTER_5,CLUSTER_5
intr_features,"pandas.DataFrame(res,columns=['Attack','Defense','Attack^2','AttackxDefense','Defense^2'])",CLUSTER_5,CLUSTER_9
new_df,"pandas.DataFrame([[95,75],[121,120],[77,60]],
columns=['Attack','Defense'])",CLUSTER_5,CLUSTER_9
new_intr_features,"pandas.DataFrame(new_res,
columns=['Attack','Defense',
'Attack^2','AttackxDefense','Defense^2'])",CLUSTER_5,CLUSTER_9
fcc_survey_df['Age_bin_custom_range'],pandas.cut(np.array(fcc_survey_df['Age']),CLUSTER_5,CLUSTER_9
fcc_survey_df['Age_bin_custom_label'],pandas.cut(np.array(fcc_survey_df['Age']),CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_quantile_range'],"pandas.qcut(fcc_survey_df['Income'],
q=quantile_list)",CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_quantile_label'],"pandas.qcut(fcc_survey_df['Income'],
q=quantile_list,labels=quantile_labels)",CLUSTER_5,CLUSTER_9
poke_df,"pandas.read_csv('datasets/Pokemon.csv',encoding='utf-8')",CLUSTER_5,CLUSTER_9
popsong_df,"pandas.read_csv('datasets/song_views.csv',encoding='utf-8')",CLUSTER_5,CLUSTER_9
items_popularity,"pandas.read_csv('datasets/item_popularity.csv',encoding='utf-8')",CLUSTER_5,CLUSTER_9
fcc_survey_df,"pandas.read_csv('datasets/fcc_2016_coder_survey_subset.csv',encoding='utf-8')",CLUSTER_5,CLUSTER_9
qvl,"matplotlib.pyplot.axvline(quantile,color='r')",CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
watched,numpy.array(popsong_df['listen_count']),CLUSTER_5,CLUSTER_9
items_popularity['popularity_scale_10'],numpy.array(np.round((items_popularity['pop_percent']*10),CLUSTER_5,CLUSTER_9
items_popularity['popularity_scale_100'],numpy.array(np.round((items_popularity['pop_percent']*100),CLUSTER_5,CLUSTER_9
fcc_survey_df['Age_bin_round'],numpy.array(np.floor(numpy.array(fcc_survey_df['Age']),CLUSTER_5,CLUSTER_9
income,numpy.array(fcc_survey_df['Income']),CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_log'],numpy.log((1+fcc_survey_df['Income']),CLUSTER_5,CLUSTER_9
"l,opt_lambda",scipy.stats.boxcox(income_clean),CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_boxcox_lambda_0'],scipy.stats.boxcox((1+fcc_survey_df['Income']),CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_boxcox_lambda_opt'],"scipy.stats.boxcox(fcc_survey_df['Income'],
lmbda=opt_lambda)",CLUSTER_5,CLUSTER_9
bn,sklearn.preprocessing.Binarizer(threshold=0.9),CLUSTER_5,CLUSTER_9
pf,"sklearn.preprocessing.PolynomialFeatures(degree=2,interaction_only=False,include_bias=False)",CLUSTER_5,CLUSTER_9
ls1,os.listdir('color'),CLUSTER_2,CLUSTER_6
ls2,os.listdir('color/'+i),CLUSTER_2,CLUSTER_6
ls1,os.listdir('color'),CLUSTER_2,CLUSTER_6
ls2,os.listdir('color/'+i),CLUSTER_2,CLUSTER_6
xvap,os.listdir('I_want_to_test_it/'),CLUSTER_2,CLUSTER_6
im1,numpy.asarray(sm.imread('color/'+i+'/'+j),CLUSTER_2,CLUSTER_6
im1,numpy.asarray(sm.imread('I_want_to_test_it/'+i),CLUSTER_2,CLUSTER_6
X,"numpy.zeros((count,256,256,3)",CLUSTER_2,CLUSTER_6
Y,"numpy.zeros((count,1)",CLUSTER_2,CLUSTER_6
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
reduced['bin'],"pandas.cut(reduced['price'],bins)",CLUSTER_1,CLUSTER_9
mean_price_and_count,"pandas.merge(listings_price,listings_number,
left_index=True,right_index=True,
suffixes=('_mean','_count')",CLUSTER_1,CLUSTER_9
mean_price_and_count,"pandas.merge(listings_price,listings_number,
left_on=""host_id"",right_on=""host_id"",
suffixes=('_mean','_count')",CLUSTER_1,CLUSTER_9
listings_and_price_with_review,"pandas.merge(listings_and_price_with_review,
num_reviews,
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
listings_with_reviews,"pandas.merge(listings,listings_and_price_with_review[['listing_id','count']].rename(columns={'count':'num_reviews'})",CLUSTER_1,CLUSTER_9
listings_and_comment_length,"pandas.merge(listings,mean_length_by_listing,
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
listings_and_comment_length,"pandas.merge(listings,reviews,
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
host_year_reviews,"pandas.merge(reviews,listings_with_reviews,
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
listing_multireviewers,"pandas.merge(listings_with_reviews[['listing_id','neighbourhood']],
multireviews[['listing_id','reviewer_id']],
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
listings,"pandas.read_csv(""./data/Edinburgh_AirBnb_listings_2.csv"")",CLUSTER_1,CLUSTER_9
reviews,"pandas.read_csv(""./data/Edinburgh_reviews_reduced.csv"")",CLUSTER_1,CLUSTER_9
allnbh_distances,"scipy.spatial.distance_matrix(coords,coords,p=2)",CLUSTER_1,CLUSTER_9
allnbh_distances,"scipy.spatial.distance_matrix(coords,coords,p=2)",CLUSTER_1,CLUSTER_9
mask,"numpy.ones(allnbh_distances.shape,dtype=bool)",CLUSTER_1,CLUSTER_9
bins,"numpy.linspace(0,21,22)",CLUSTER_1,CLUSTER_9
bins,"numpy.linspace(
np.min(reduced.price)",CLUSTER_1,CLUSTER_9
"hist,bin_edges","numpy.histogram(listings['minimum_nights'][listings.room_type==room_type],bins)",CLUSTER_1,CLUSTER_9
pbb,seaborn.color_palette(wavelength_to_rgb(clip(400+0.35*(pb_centers-pb_centers.min(),CLUSTER_10,CLUSTER_4
label_indices,numpy.where(labels==label),CLUSTER_2,CLUSTER_7
mis_idxs_list,numpy.where(misclassified==True),CLUSTER_2,CLUSTER_7
labels_int_vec,"numpy.argmax(labels,axis=1)",CLUSTER_2,CLUSTER_7
label_unique,numpy.sort(np.unique(labels),CLUSTER_2,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_7
aucs,numpy.array(aucs),CLUSTER_5,CLUSTER_1
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
cv,"sklearn.model_selection.StratifiedKFold(n_splits=num_splits,
shuffle=True,
random_state=seed)",CLUSTER_5,CLUSTER_1
auc,"sklearn.model_selection.cross_val_score(estimator,X=pc,y=labels,
cv=cv,scoring=""roc_auc"",
n_jobs=-1,verbose=3)",CLUSTER_5,CLUSTER_1
scores,numpy.zeros((len(n_clusters_range),CLUSTER_5,CLUSTER_10
n_clusters_range,"numpy.linspace(2,n_samples,10)",CLUSTER_5,CLUSTER_10
n_clusters_range,"numpy.linspace(2,100,10)",CLUSTER_5,CLUSTER_10
t0,time.time(),CLUSTER_5,CLUSTER_10
t0,time.time(),CLUSTER_5,CLUSTER_10
lag,"numpy.arange(-mid_idx,mid_idx+1)",CLUSTER_1,CLUSTER_10
signal,numpy.array(data_str.split(),CLUSTER_1,CLUSTER_10
spike,numpy.zeros(2*len(w),CLUSTER_1,CLUSTER_10
acf,"numpy.correlate(w,w,mode=""full"")",CLUSTER_1,CLUSTER_10
b,"numpy.correlate(spike,w)",CLUSTER_1,CLUSTER_10
acf,"numpy.correlate(tr,tr,mode=""full"")",CLUSTER_1,CLUSTER_10
tr_filtered,"numpy.convolve(f,tr)",CLUSTER_1,CLUSTER_10
A,"numpy.squeeze([np.roll(acf,i)",CLUSTER_1,CLUSTER_10
A,"numpy.squeeze([np.roll(acf,i)",CLUSTER_1,CLUSTER_10
f,"numpy.insert(f,0,np.zeros(alpha-1)",CLUSTER_1,CLUSTER_10
f,"numpy.insert(f,0,1)",CLUSTER_1,CLUSTER_10
b,"numpy.pad(acf[mid_idx+alpha:],pad_width=(0,alpha)",CLUSTER_1,CLUSTER_10
f,"numpy.linalg.solve(A,b)",CLUSTER_1,CLUSTER_10
f,"numpy.linalg.solve(A,b)",CLUSTER_1,CLUSTER_10
history2,"json.load(open(his_file,'r')",CLUSTER_2,CLUSTER_11
steps_per_epoch,numpy.ceil(train_gen.samples/batch_size),CLUSTER_2,CLUSTER_11
car_data,"pandas.DataFrame({""CarMake"":series,""Color"":colors})",CLUSTER_8,CLUSTER_4
series,"pandas.Series([""BMW"",""Toyota"",""Audi""])",CLUSTER_8,CLUSTER_4
colors,"pandas.Series([""Red"",""Blue"",""White""])",CLUSTER_8,CLUSTER_4
animals,"pandas.Series(['Tiger','Pandas','Lion','Snake'],index=[0,2,2,5])",CLUSTER_8,CLUSTER_4
car_sales,pandas.read_csv('car-sales.csv'),CLUSTER_8,CLUSTER_4
advertising,"pandas.read_csv(""C:/Users/sudha/Desktop/csv/advertising.csv"")",CLUSTER_7,CLUSTER_8
MSE,"numpy.sqrt(mean_squared_error(y_test,y_pred)",CLUSTER_7,CLUSTER_8
corrs,"numpy.corrcoef(x_train,y_train)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
"x_train_lm,x_test_lm,y_train_lm,y_test_lm","sklearn.model_selection.train_test_split(x,y,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
r_squared,"sklearn.metrics.r2_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
xx,numpy.array(xx),CLUSTER_3,CLUSTER_6
yy,numpy.array(yy),CLUSTER_3,CLUSTER_6
r_yy,numpy.array(r_yy),CLUSTER_3,CLUSTER_6
y_p,numpy.array(xMat*ws),CLUSTER_3,CLUSTER_6
y,"numpy.array([1,2])",CLUSTER_3,CLUSTER_6
a,"numpy.array([[1,2],[3,4]])",CLUSTER_3,CLUSTER_6
b,"numpy.array([2,3])",CLUSTER_3,CLUSTER_6
X,"numpy.empty((M,x.shape[0])",CLUSTER_3,CLUSTER_6
err,"numpy.dot(X,w.reshape(w.shape[0],1)",CLUSTER_3,CLUSTER_6
err,"numpy.dot(X,w.reshape(w.shape[0],1)",CLUSTER_3,CLUSTER_6
predict_y,"numpy.dot(X,W_k.reshape(W_k.shape[0],1)",CLUSTER_3,CLUSTER_6
X,numpy.transpose(X),CLUSTER_3,CLUSTER_6
X,numpy.float64(X),CLUSTER_3,CLUSTER_6
x,numpy.float64(x),CLUSTER_3,CLUSTER_6
y,numpy.float64(y),CLUSTER_3,CLUSTER_6
xMat,numpy.mat(xArr),CLUSTER_3,CLUSTER_6
yMat,numpy.mat(yArr),CLUSTER_3,CLUSTER_6
xMat,numpy.mat(xArr),CLUSTER_3,CLUSTER_6
yMat,numpy.mat(yArr),CLUSTER_3,CLUSTER_6
weights,numpy.mat(np.eye(m),CLUSTER_3,CLUSTER_6
y,numpy.mat(y),CLUSTER_3,CLUSTER_6
y,math.sin(x),CLUSTER_3,CLUSTER_6
correct,numpy.squeeze(predicted.eq(labels.data.view_as(predicted),CLUSTER_6,CLUSTER_10
preds,numpy.squeeze(net(images),CLUSTER_6,CLUSTER_10
img,numpy.squeeze(images[idx]),CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(30,10)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(30,10)",CLUSTER_6,CLUSTER_10
titanic_df,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_3
cabin_df,pandas.DataFrame(levels),CLUSTER_7,CLUSTER_3
fig,"seaborn.FacetGrid(titanic_df,hue=""Sex"",aspect=4)",CLUSTER_7,CLUSTER_3
fig,"seaborn.FacetGrid(titanic_df,hue=""person"",aspect=4)",CLUSTER_7,CLUSTER_3
fig,"seaborn.FacetGrid(titanic_df,hue=""Pclass"",aspect=4)",CLUSTER_7,CLUSTER_3
movies,"pandas.concat([movies_sheet1,movies_sheet2,movies_sheet3])",CLUSTER_1,CLUSTER_3
movies,pandas.read_excel(file),CLUSTER_1,CLUSTER_3
movies_sheet1,"pandas.read_excel(file,sheet_name=0,index_col=0)",CLUSTER_1,CLUSTER_3
movies_sheet2,"pandas.read_excel(file,sheet_name=1,index_col=0)",CLUSTER_1,CLUSTER_3
movies_sheet3,"pandas.read_excel(file,sheet_name=2,index_col=0)",CLUSTER_1,CLUSTER_3
movies_subset_columns,"pandas.read_excel(file,parse_cols=6)",CLUSTER_1,CLUSTER_3
pima,"pandas.read_csv(url,header=None,names=col_names)",CLUSTER_8,CLUSTER_1
mnb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_8,CLUSTER_1
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_8,CLUSTER_1
xx,"numpy.linspace(0,1,1000)",CLUSTER_5,CLUSTER_9
dfX,"pandas.DataFrame(boston.data,columns=boston.feature_names)",CLUSTER_5,CLUSTER_9
dfy,"pandas.DataFrame(boston.target,columns=[""MEDV""])",CLUSTER_5,CLUSTER_9
df,"pandas.concat([dfX,dfy],axis=1)",CLUSTER_5,CLUSTER_9
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_9
C,"numpy.zeros((n_row,n_row)",CLUSTER_1,CLUSTER_9
C_new,"numpy.zeros((n_row,n_row)",CLUSTER_1,CLUSTER_9
m1,numpy.identity(n_row),CLUSTER_1,CLUSTER_9
m2,numpy.identity(n_row),CLUSTER_1,CLUSTER_9
X,"numpy.apply_along_axis(demean,1,X)",CLUSTER_1,CLUSTER_9
eigenvalues,"numpy.roots([a,-b,c])",CLUSTER_1,CLUSTER_9
"U,V",numpy.linalg.eig(C),CLUSTER_1,CLUSTER_9
C_new,numpy.linalg.inv(eigenvectors),CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(12,4)",CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(12,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(12,4)",CLUSTER_1,CLUSTER_9
X,"scipy.io.loadmat(""datafile.mat"")",CLUSTER_1,CLUSTER_9
sal,"pandas.read_csv('C:/Users/Surajkumar/Desktop/MLClub/Salaries.csv',low_memory=False)",CLUSTER_8,CLUSTER_3
np_img,numpy.array(img),CLUSTER_2,CLUSTER_7
np_img,"numpy.asarray([np_img],dtype=np.int32)",CLUSTER_2,CLUSTER_7
img_arr,"numpy.asarray(result_val,np.uint8)",CLUSTER_2,CLUSTER_7
result_val,"numpy.clip(result_val,0,255)",CLUSTER_2,CLUSTER_7
data_dict,"numpy.load(vgg16_npy_path,encoding='latin1')",CLUSTER_2,CLUSTER_7
start_time,time.time(),CLUSTER_2,CLUSTER_7
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
shown_images,"numpy.array([[1.,1.]])",CLUSTER_5,CLUSTER_10
dist,numpy.sum((X[i]-shown_images),CLUSTER_5,CLUSTER_10
ax,matplotlib.pyplot.subplot(111),CLUSTER_5,CLUSTER_10
tsne,"sklearn.manifold.TSNE(n_components=2,random_state=0,init='pca',learning_rate=200.,early_exaggeration=12.)",CLUSTER_5,CLUSTER_10
top_ch,numpy.arange(len(self.vocab),CLUSTER_6,CLUSTER_6
encoded_text,numpy.array([char2int[char]forcharintext]),CLUSTER_6,CLUSTER_6
x,numpy.array([[self.char2int[x]]]),CLUSTER_6,CLUSTER_6
one_hot,numpy.zeros((np.multiply(*arr.shape),CLUSTER_6,CLUSTER_6
y,numpy.zeros_like(x),CLUSTER_6,CLUSTER_6
kernel,"numpy.ones((3,3)",CLUSTER_1,CLUSTER_10
sure_fg,numpy.uint8(sure_fg),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_1,CLUSTER_10
x_data,numpy.arange(size),CLUSTER_12,CLUSTER_3
x,numpy.arange(100),CLUSTER_12,CLUSTER_3
x_data,numpy.arange(20),CLUSTER_12,CLUSTER_3
names,"numpy.arange(100,200)",CLUSTER_12,CLUSTER_3
tooltip,"dd,names=numpy.arange(100,200)",CLUSTER_12,CLUSTER_3
x_data,numpy.arange(10),CLUSTER_12,CLUSTER_3
y,numpy.cumsum(np.random.randn(n),CLUSTER_12,CLUSTER_3
y,"numpy.cumsum(np.random.randn(2,100)",CLUSTER_12,CLUSTER_3
line.y,"numpy.cumsum(np.random.randn(2,100)",CLUSTER_12,CLUSTER_3
x,"numpy.linspace(0.0,10.0,n)",CLUSTER_12,CLUSTER_3
all_images,os.listdir(SOURCE),CLUSTER_2,CLUSTER_7
news_data,"sklearn.datasets.fetch_20newsgroups(subset='all',random_state=156)",CLUSTER_8,CLUSTER_1
train_news,"sklearn.datasets.fetch_20newsgroups(subset='train',
remove=('headers','footers','quotes')",CLUSTER_8,CLUSTER_1
test_news,"sklearn.datasets.fetch_20newsgroups(subset='test',
remove=('headers','footers','quotes')",CLUSTER_8,CLUSTER_1
lr_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
lr_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
lr_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
lr_clf,sklearn.linear_model.LogisticRegression(C=10),CLUSTER_8,CLUSTER_1
gs_ridge,"RidgeCV(alphas=numpy.logspace(-2,2)",CLUSTER_5,CLUSTER_1
new_x_train,"numpy.vstack((meta1,meta2,meta3,meta4,meta5)",CLUSTER_5,CLUSTER_1
new_x_test,"numpy.vstack((
gs_ridge.predict(x_test)",CLUSTER_5,CLUSTER_1
df,"pandas.get_dummies(df,['month','day'])",CLUSTER_5,CLUSTER_1
df,pandas.read_csv(r'C:\Users\student\Desktop\forestfires.csv'),CLUSTER_5,CLUSTER_1
nknn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=17),CLUSTER_5,CLUSTER_1
gs_ridge,"sklearn.linear_model.RidgeCV(alphas=np.logspace(-2,2)",CLUSTER_5,CLUSTER_1
meta_ridge,"sklearn.linear_model.RidgeCV(np.logspace(-2,2)",CLUSTER_5,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(df,y)",CLUSTER_5,CLUSTER_1
"x_train_a,x_train_b,y_train_a,y_train_b","sklearn.model_selection.train_test_split(x_train,y_train)",CLUSTER_5,CLUSTER_1
gs_knn1,sklearn.model_selection.GridSearchCV(KNeighborsRegressor(),CLUSTER_5,CLUSTER_1
gs_knn2,sklearn.model_selection.GridSearchCV(KNeighborsRegressor(),CLUSTER_5,CLUSTER_1
gs_rf1,"sklearn.model_selection.GridSearchCV(RandomForestRegressor(n_estimators=30,n_jobs=-1)",CLUSTER_5,CLUSTER_1
gs_rf2,"sklearn.model_selection.GridSearchCV(RandomForestRegressor(n_estimators=100,n_jobs=-1)",CLUSTER_5,CLUSTER_1
gs_nrf,sklearn.model_selection.GridSearchCV(RandomForestRegressor(n_estimators=30),CLUSTER_5,CLUSTER_1
x,"numpy.array([2,3,7,8])",CLUSTER_5,CLUSTER_5
y,"numpy.array([1,6,5,7])",CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
t_array,numpy.array(t_array),CLUSTER_1,CLUSTER_10
q_array,numpy.array(q_array),CLUSTER_1,CLUSTER_10
v_array,numpy.array(v_array),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(nrows=2,ncols=1,figsize=(6,7)",CLUSTER_1,CLUSTER_10
df,pandas.read_csv(datafile),CLUSTER_8,CLUSTER_4
json_data,json.dumps(merged_json),CLUSTER_8,CLUSTER_4
json_data,json.dumps(merged_json),CLUSTER_8,CLUSTER_4
merged_json,json.loads(merged.to_json(),CLUSTER_8,CLUSTER_4
merged_json,json.loads(merged.to_json(),CLUSTER_8,CLUSTER_4
fs_images,numpy.array(fs_images),CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(""sample_data/styles_sample.csv"",sep=',',error_bad_lines=False)",CLUSTER_4,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(k,n,figsize=(20,4*k)",CLUSTER_4,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=k,init=""k-means++"",n_init=10,max_iter=50)",CLUSTER_4,CLUSTER_0
df,"pandas.DataFrame({'Actual':y_test,'Predicted':y_pred})",CLUSTER_7,CLUSTER_5
dataset,"pandas.read_csv('house.txt',names=['Area','Bed','Price'])",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
puf,"pandas.read_csv(""../tax-calculator/puf.csv"")",CLUSTER_8,CLUSTER_3
s,numpy.std(data),CLUSTER_1,CLUSTER_10
u,numpy.median(data),CLUSTER_1,CLUSTER_10
incomes,"numpy.append(incomes,[1000000000])",CLUSTER_1,CLUSTER_10
toronto_df1,"pandas.DataFrame({""PostalCode"":postalCodeList,
""Borough"":boroughList,
""Neighbourhood"":neighbourhoodList})",CLUSTER_9,CLUSTER_2
coordinates,pandas.read_csv('http://cocl.us/Geospatial_data'),CLUSTER_9,CLUSTER_2
data,requests.get('https://en.wikipedia.org/w/index.php?title=List_of_postal_codes_of_Canada:_M&oldid=945633050'),CLUSTER_9,CLUSTER_2
X,"numpy.zeros((n_sentences,embedding_dim)",CLUSTER_3,CLUSTER_6
vetor_y1,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_y2,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_P,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_x1,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_x2,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_P,numpy.zeros(100),CLUSTER_1,CLUSTER_10
gamma1,numpy.exp(lngamma1),CLUSTER_1,CLUSTER_10
gamma2,numpy.exp(lngamma2),CLUSTER_1,CLUSTER_10
vetor_x1,"numpy.linspace(0,1,100)",CLUSTER_1,CLUSTER_10
vetor_y1,"numpy.linspace(0,1,100)",CLUSTER_1,CLUSTER_10
sol,numpy.zeros_like(M),CLUSTER_12,CLUSTER_9
sol,numpy.zeros_like(M),CLUSTER_12,CLUSTER_9
r,numpy.sqrt(area/np.pi),CLUSTER_12,CLUSTER_9
x,"numpy.linspace(0,10,num=100)",CLUSTER_12,CLUSTER_9
x,"numpy.linspace(0,1)",CLUSTER_12,CLUSTER_9
M,"numpy.linspace(0,2*np.pi,N)",CLUSTER_12,CLUSTER_9
M,"numpy.linspace(0,2*np.pi,N)",CLUSTER_12,CLUSTER_9
sol[ii],"scipy.optimize.newton(F,sol[ii-1],args=(0.249,M[ii])",CLUSTER_12,CLUSTER_9
sol[ii],"scipy.optimize.newton(F,sol[ii-1],args=(ee,M[ii])",CLUSTER_12,CLUSTER_9
data_scaled,"pandas.DataFrame(data_scaled,columns=('WeeksToDeparture','std_wtd','MaxTemperatureC',
'MeanTemperatureC','MinTemperatureC','MeanDewPointC',
'MeanHumidity','MeanVisibilityKm','MeanWindSpeedKm/h',
'CloudCover')",CLUSTER_7,CLUSTER_5
X_encoded,"pandas.merge(
X_encoded,external_data,how='left',
left_on=['DateOfDeparture','Arrival'],
right_on=['DateOfDeparture','Arrival'],
sort=False)",CLUSTER_7,CLUSTER_5
X_encoded,"pandas.merge(
X_encoded,external_data,how='left',
left_on=['DateOfDeparture','Arrival'],
right_on=['DateOfDeparture','Arrival'],
sort=False)",CLUSTER_7,CLUSTER_5
data_weather,pandas.read_csv('submissions/starting_kit/external_data.csv'),CLUSTER_7,CLUSTER_5
data_weather,"pandas.read_csv(os.path.join(path,'external_data.csv')",CLUSTER_7,CLUSTER_5
X_encoded['DateOfDeparture'],pandas.to_datetime(X_encoded['DateOfDeparture']),CLUSTER_7,CLUSTER_5
X_encoded['DateOfDeparture'],pandas.to_datetime(X_encoded['DateOfDeparture']),CLUSTER_7,CLUSTER_5
"X_encoded.loc[:,'WeeksToDeparture':'CloudCover']",sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X_array,y_array,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(
model,X_train,y_train,cv=5,scoring='neg_mean_squared_error')",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(
lasso,X_train,y_train,cv=5,scoring='neg_mean_squared_error')",CLUSTER_7,CLUSTER_5
regressor,sklearn.ensemble.RandomForestRegressor(),CLUSTER_7,CLUSTER_5
self.reg,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,max_depth=30,max_features=50)",CLUSTER_7,CLUSTER_5
score,sklearn.metrics.make_scorer(accuracy_score),CLUSTER_7,CLUSTER_5
grid_obj,"sklearn.model_selection.GridSearchCV(regressor,parameters,scoring=score)",CLUSTER_7,CLUSTER_5
df,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
dates,"pandas.date_range('20200101',periods=df.shape[0],freq='m')",CLUSTER_8,CLUSTER_3
entradas_treino,"numpy.concatenate((entradas[:35],entradas[50:85],entradas[100:135])",CLUSTER_3,CLUSTER_6
saidas_treino,"numpy.concatenate((saidas[:35],saidas[50:85],saidas[100:135])",CLUSTER_3,CLUSTER_6
entradas_teste,"numpy.concatenate((entradas[35:50],entradas[85:100],entradas[135:])",CLUSTER_3,CLUSTER_6
saidas_teste,"numpy.concatenate((saidas[35:50],saidas[85:100],saidas[135:])",CLUSTER_3,CLUSTER_6
entradas,"numpy.genfromtxt(""iris.data"",delimiter="","",usecols=(0,1,2,3)",CLUSTER_3,CLUSTER_6
saidas,"numpy.genfromtxt(""iris.data"",delimiter="","",usecols=(4)",CLUSTER_3,CLUSTER_6
x_plt,"numpy.arange(0,2*np.pi,10e-2)",CLUSTER_1,CLUSTER_9
Ns,"numpy.arange(5,30)",CLUSTER_1,CLUSTER_9
r,"numpy.array(r_init,dtype=float)",CLUSTER_1,CLUSTER_9
ab,"numpy.zeros((3,N)",CLUSTER_1,CLUSTER_9
b,numpy.zeros(N),CLUSTER_1,CLUSTER_9
us,numpy.zeros_like(ts),CLUSTER_1,CLUSTER_9
us,numpy.zeros_like(ts),CLUSTER_1,CLUSTER_9
dI,numpy.fabs(I-old_I),CLUSTER_1,CLUSTER_9
log_errs,numpy.log(errs),CLUSTER_1,CLUSTER_9
"xs,h","numpy.linspace(a,b,N,retstep=True)",CLUSTER_1,CLUSTER_9
xs_local,"numpy.linspace(xs[i-1],xs[i])",CLUSTER_1,CLUSTER_9
xs_local,"numpy.linspace(xs[i-1],xs[i])",CLUSTER_1,CLUSTER_9
xs,"numpy.linspace(a,b,N)",CLUSTER_1,CLUSTER_9
"ts,h","numpy.linspace(a,b,N,retstep=True)",CLUSTER_1,CLUSTER_9
"ts,h","numpy.linspace(a,b,N,retstep=True)",CLUSTER_1,CLUSTER_9
df,numpy.diff(fs),CLUSTER_1,CLUSTER_9
"a,b","numpy.polyfit(hs,errs,deg=1)",CLUSTER_1,CLUSTER_9
"a,b,c","numpy.polyfit(hs,errs,deg=2)",CLUSTER_1,CLUSTER_9
delta_r,numpy.linalg.solve(J(r),CLUSTER_1,CLUSTER_9
approx,"matplotlib.pyplot.plot(hs,a*hs**2+b*hs+c,'b')",CLUSTER_1,CLUSTER_9
table1_1,"pandas.concat([table1.iloc[:,0:2],table1.iloc[:,4:21]],axis=1)",CLUSTER_8,CLUSTER_3
table1_1,"pandas.concat([table1_1_1,table1_1_2],axis=1)",CLUSTER_8,CLUSTER_3
table1_1,"pandas.melt(table1_1,id_vars=['Type','Category'],var_name='Year',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table2_1,"pandas.melt(table2,id_vars=['RiskLevel','Category'],var_name='Year',value_name='n_of_risk_level_change')",CLUSTER_8,CLUSTER_3
table3_1,"pandas.melt(table3_1,id_vars=['Category'],var_name='Red_List_category',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table4_1,"pandas.melt(table4_1,id_vars=['Animal/plant','Class','Group'],var_name='Red_List_category',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table5_1,"pandas.melt(table5_1,id_vars=['Continent','Country'],var_name='Category',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table6_1,"pandas.melt(tabl6_1,id_vars=['Animal/plant','Continent','Sub_Continent','Country'],var_name='Red_List_category',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table5_GDP,"pandas.merge(left=table5_GDP,right=GDP,how='left')",CLUSTER_8,CLUSTER_3
GDP,"pandas.read_csv('dataset/GDP.csv',header=None)",CLUSTER_8,CLUSTER_3
table1,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table1')",CLUSTER_8,CLUSTER_3
table2,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table2',header=1)",CLUSTER_8,CLUSTER_3
table3,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table3a',header=8)",CLUSTER_8,CLUSTER_3
table4,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table4ab',header=0)",CLUSTER_8,CLUSTER_3
table5,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table5',header=1)",CLUSTER_8,CLUSTER_3
table6,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table6ab',header=1)",CLUSTER_8,CLUSTER_3
table9,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table9')",CLUSTER_8,CLUSTER_3
unemployment,pandas.read_csv(file),CLUSTER_8,CLUSTER_3
cases,pandas.read_csv(file),CLUSTER_8,CLUSTER_3
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
b1,"numpy.zeros((n_h,1)",CLUSTER_1,CLUSTER_9
b2,"numpy.zeros((n_y,1)",CLUSTER_1,CLUSTER_9
parameters['b'+str(l)],"numpy.zeros((layer_dims[l],1)",CLUSTER_1,CLUSTER_9
Z,"numpy.dot(W,A)",CLUSTER_1,CLUSTER_9
dW,"numpy.dot(dZ,A_prev.T)",CLUSTER_1,CLUSTER_9
dA_prev,"numpy.dot(W.T,dZ)",CLUSTER_1,CLUSTER_9
cost,numpy.squeeze(cost),CLUSTER_1,CLUSTER_9
db,"numpy.sum(dZ,axis=1,keepdims=True)",CLUSTER_1,CLUSTER_9
x,"numpy.arange(-2.0,7.0,delta)",CLUSTER_1,CLUSTER_9
y,"numpy.arange(-2.0,7.0,delta)",CLUSTER_1,CLUSTER_9
delta,numpy.array(d),CLUSTER_1,CLUSTER_9
resp,"compute_responsibilities(data=numpy.array([[1.,2.],[-1.,-2.]]),weights=numpy.array([0.3,0.7])",CLUSTER_1,CLUSTER_9
resp,"compute_responsibilities(data=numpy.array([[1.,2.],[-1.,-2.],[0,0]]),weights=numpy.array([0.3,0.7])",CLUSTER_1,CLUSTER_9
data_tmp,"numpy.array([[1.,2.],[-1.,-2.]])",CLUSTER_1,CLUSTER_9
resp,"compute_responsibilities(data=data_tmp,weights=numpy.array([0.3,0.7])",CLUSTER_1,CLUSTER_9
data_tmp,"numpy.array([[1.,2.],[-1.,-2.]])",CLUSTER_1,CLUSTER_9
resp,"compute_responsibilities(data=data_tmp,weights=numpy.array([0.3,0.7])",CLUSTER_1,CLUSTER_9
Z,numpy.zeros(num_clusters),CLUSTER_1,CLUSTER_9
resp,"numpy.zeros((num_data,num_clusters)",CLUSTER_1,CLUSTER_9
weighted_sum,"numpy.zeros((num_dim,num_dim)",CLUSTER_1,CLUSTER_9
resp,"numpy.zeros((num_data,num_clusters)",CLUSTER_1,CLUSTER_9
p,numpy.zeros(K),CLUSTER_1,CLUSTER_9
exponent_term,"numpy.dot(delta.T,numpy.dot(np.linalg.inv(covs[k])",CLUSTER_1,CLUSTER_9
assignments[i],numpy.argmax(p),CLUSTER_1,CLUSTER_9
counts,"numpy.sum(resp,axis=0)",CLUSTER_1,CLUSTER_9
Z[k]+,numpy.log(weights[k]),CLUSTER_1,CLUSTER_9
sigmax,numpy.sqrt(cov[0][0]),CLUSTER_1,CLUSTER_9
sigmay,numpy.sqrt(cov[1][1]),CLUSTER_1,CLUSTER_9
d,numpy.vstack(data),CLUSTER_1,CLUSTER_9
"X,Y","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_9
cov,numpy.diag([images['red'].var(),CLUSTER_1,CLUSTER_9
ans,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
all_data,"pandas.concat([data,test_data])",CLUSTER_5,CLUSTER_5
all_data_ready,"pandas.concat([all_data_num,all_data_cat],axis=1,join_axes=[all_data_num.index])",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv('./data/ech_apprentissage.csv',sep=';',index_col='id')",CLUSTER_5,CLUSTER_5
test_data,"pandas.read_csv('./data/ech_test.csv',sep=';',index_col='id')",CLUSTER_5,CLUSTER_5
enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
x,"numpy.array([1,2])",CLUSTER_1,CLUSTER_9
m,"numpy.array([4,5])",CLUSTER_1,CLUSTER_9
w,"numpy.diag([1,2])",CLUSTER_1,CLUSTER_9
color_select,numpy.copy(image),CLUSTER_1,CLUSTER_10
line_image,numpy.copy(image),CLUSTER_1,CLUSTER_10
"XX,YY","numpy.meshgrid(np.arange(0,xsize)",CLUSTER_1,CLUSTER_10
fit_left,"numpy.polyfit((left_bottom[0],apex[0])",CLUSTER_1,CLUSTER_10
fit_right,"numpy.polyfit((right_bottom[0],apex[0])",CLUSTER_1,CLUSTER_10
fit_bottom,"numpy.polyfit((left_bottom[0],right_bottom[0])",CLUSTER_1,CLUSTER_10
df_features,"pandas.DataFrame(columns=['object_id','mean0','stddev0','med0','max0','min0','kurt0',
'mean1','stddev1','med1','max1','min1','kurt1',
'mean2','stddev2','med2','max2','min2','kurt2',
'mean3','stddev3','med3','max3','min3','kurt3',
'mean4','stddev4','med4','max4','min4','kurt4',
'mean5','stddev5','med5','max5','min5','kurt5'])",CLUSTER_8,CLUSTER_3
ig_training_features,"pandas.concat([df_ts_features,df_metadata],axis=1)",CLUSTER_8,CLUSTER_3
ig_test_features,"pandas.concat([df_ts_features,df_metadata],axis=1)",CLUSTER_8,CLUSTER_3
ig_training_set,pandas.read_csv('~/Desktop/Classes/ee660/data/ig_training_set.csv'),CLUSTER_8,CLUSTER_3
ig_test_set,pandas.read_csv('~/Desktop/Classes/ee660/data/ig_test_set.csv'),CLUSTER_8,CLUSTER_3
ig_training_set_metadata,pandas.read_csv('~/Desktop/Classes/ee660/data/ig_training_set_metadata.csv'),CLUSTER_8,CLUSTER_3
ig_test_set_metadata,pandas.read_csv('~/Desktop/Classes/ee660/data/ig_test_set_metadata.csv'),CLUSTER_8,CLUSTER_3
eg_training_set,pandas.read_csv('~/Desktop/Classes/ee660/data/eg_training_set.csv'),CLUSTER_8,CLUSTER_3
eg_test_set,pandas.read_csv('~/Desktop/Classes/ee660/data/eg_test_set.csv'),CLUSTER_8,CLUSTER_3
eg_training_set_metadata,pandas.read_csv('~/Desktop/Classes/ee660/data/eg_training_set_metadata.csv'),CLUSTER_8,CLUSTER_3
eg_test_set_metadata,pandas.read_csv('~/Desktop/Classes/ee660/data/eg_test_set_metadata.csv'),CLUSTER_8,CLUSTER_3
kmeans,"sklearn.cluster.KMeans(init='k-means++',n_clusters=number_of_components)",CLUSTER_5,CLUSTER_5
gmm_silhoute_score,"sklearn.metrics.silhouette_score(data,gmm_labels,metric='euclidean')",CLUSTER_5,CLUSTER_5
kmeans_silhoute_score,"sklearn.metrics.silhouette_score(data,kmeans_labels,metric='euclidean')",CLUSTER_5,CLUSTER_5
HC_silhoute_score,"sklearn.metrics.silhouette_score(data,HC.labels_,metric='euclidean')",CLUSTER_5,CLUSTER_5
data.brand,pandas.Categorical(data.brand),CLUSTER_5,CLUSTER_5
data,pandas.read_csv('cars.csv'),CLUSTER_5,CLUSTER_5
angle,"numpy.degrees(np.arctan2(U[1,0],U[0,0])",CLUSTER_5,CLUSTER_5
"U,s,Vt",numpy.linalg.svd(covariance),CLUSTER_5,CLUSTER_5
gmm,"sklearn.mixture.GaussianMixture(n_components=number_of_components,covariance_type='full',verbose=0,verbose_interval=10,max_iter=5000)",CLUSTER_5,CLUSTER_5
gmm,"sklearn.mixture.GaussianMixture(n_components=number_of_components,covariance_type='full',random_state=0)",CLUSTER_5,CLUSTER_5
gmm,"sklearn.mixture.GaussianMixture(n_components=number_of_components,covariance_type='spherical',verbose=0,verbose_interval=10,max_iter=5000)",CLUSTER_5,CLUSTER_5
HC,"sklearn.cluster.AgglomerativeClustering(n_clusters=number_of_components,linkage='ward',connectivity=KeepXNearestPointsConnected)",CLUSTER_5,CLUSTER_5
HC,"sklearn.cluster.AgglomerativeClustering(n_clusters=number_of_components,linkage='ward',connectivity=KeepXNearestPointsConnected)",CLUSTER_5,CLUSTER_5
KeepXNearestPointsConnected,"sklearn.neighbors.kneighbors_graph(data.values,n_neighbors=number_of_components,include_self=False)",CLUSTER_5,CLUSTER_5
KeepXNearestPointsConnected,"sklearn.neighbors.kneighbors_graph(data.values,n_neighbors=10,include_self=False)",CLUSTER_5,CLUSTER_5
Tsub,"numpy.linspace(T3-20,T3)",CLUSTER_1,CLUSTER_10
Tvap,"numpy.linspace(T3,T3+20)",CLUSTER_1,CLUSTER_10
Tvap_sea,"numpy.linspace(T3-5,304)",CLUSTER_1,CLUSTER_10
outliers,pandas.DataFrame(olrs),CLUSTER_7,CLUSTER_3
car_data,"pandas.read_csv('car.csv',index_col=0)",CLUSTER_7,CLUSTER_3
car_data['Power_bhp'],"pandas.to_numeric(car_data['Power_bhp'],errors='coerce')",CLUSTER_7,CLUSTER_3
car_data['Mileage'],"pandas.to_numeric(car_data['Mileage'],errors='coerce')",CLUSTER_7,CLUSTER_3
plt1,"sns.countplot(car_data['Name'],order=pandas.value_counts(car_data['Name'])",CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_7,CLUSTER_3
survive,"seaborn.countplot(x='Fuel_Type',hue='Transmission',palette='Set3',data=car_data)",CLUSTER_7,CLUSTER_3
plt1,seaborn.countplot(car_data['Power']),CLUSTER_7,CLUSTER_3
plt1,"seaborn.countplot(car_data['Name'],order=pd.value_counts(car_data['Name'])",CLUSTER_7,CLUSTER_3
tips,seaborn.load_dataset('tips'),CLUSTER_7,CLUSTER_3
alldata,pandas.read_csv('/home/thiago/Downloads/creditcard.csv'),CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,20)",CLUSTER_7,CLUSTER_3
df_agg,"pandas.concat([df_agg,df_NTUerr],axis=1)",CLUSTER_7,CLUSTER_9
df1,"pandas.read_csv(""CoolingTowerDay1-All.csv"")",CLUSTER_7,CLUSTER_9
df2,"pandas.read_csv(""CoolingTowerDay2-All.csv"")",CLUSTER_7,CLUSTER_9
hs_T,"numpy.array([40,50,60,70,80,90,100,110,120,130])",CLUSTER_7,CLUSTER_9
hs_h,"numpy.array([15.230,20.301,26.46,34.09,43.69,55.93,71.73,92.34,119.54,155.9])",CLUSTER_7,CLUSTER_9
gmeans,numpy.array([g1b['GasFlow'].mean(),CLUSTER_7,CLUSTER_9
gerrs,numpy.array([g1b['GasFlow-err'].mean(),CLUSTER_7,CLUSTER_9
LGfitx,numpy.sort(df['L/G']),CLUSTER_7,CLUSTER_9
SSres,numpy.sum(res**2),CLUSTER_7,CLUSTER_9
SStot,numpy.sum(sst**2),CLUSTER_7,CLUSTER_9
ss_res,"numpy.sum(LGweights*(df['NTU']-NTULGfit(df['L/G'],*LGfit)",CLUSTER_7,CLUSTER_9
ss_tot,numpy.sum(LGweights*(df['NTU']-df['NTU'].mean(),CLUSTER_7,CLUSTER_9
p_wb,"numpy.exp(-6096.9385*T_wb**-1+\
21.2409642-2.711193*10**-2*T_wb+\
1.673952*10**-5*T_wb**2+\
2.433502*np.log(T_wb)",CLUSTER_7,CLUSTER_9
p_wb,"numpy.exp(-6096.9385*T_wb**-1+\
21.2409642-2.711193*10**-2*T_wb+\
1.673952*10**-5*T_wb**2+\
2.433502*np.log(T_wb)",CLUSTER_7,CLUSTER_9
fit_err,numpy.sqrt(np.diagonal(hsat_cov),CLUSTER_7,CLUSTER_9
dp,"numpy.sqrt(dp_wb**2+\
(-P*(T-T_wb)",CLUSTER_7,CLUSTER_9
drho,numpy.sqrt((0.378/(287.1*T),CLUSTER_7,CLUSTER_9
dV,numpy.sqrt((np.pi/4*0.095**2),CLUSTER_7,CLUSTER_9
dG,"numpy.sqrt(V**2*drho**2+\
rho**2*dV**2
)",CLUSTER_7,CLUSTER_9
LGfit_err,numpy.sqrt(np.diagonal(LGcov),CLUSTER_7,CLUSTER_9
hs_Tdata,"numpy.linspace(hs_T[0],hs_T[-1],100)",CLUSTER_7,CLUSTER_9
"hsat_fit,hsat_cov","scipy.optimize.curve_fit(hsat,hs_T,hs_h,[0,0])",CLUSTER_7,CLUSTER_9
"LGfit,LGcov","scipy.optimize.curve_fit(NTULGfit,df_agg['L/G'],df_agg['NTU'],
sigma=LGweights,
absolute_sigma=True)",CLUSTER_7,CLUSTER_9
cbar,matplotlib.pyplot.colorbar(),CLUSTER_7,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
"fig,axs","matplotlib.pyplot.subplots(2,3,sharey=True,sharex=True,figsize=[11,6])",CLUSTER_7,CLUSTER_9
start,time.time(),CLUSTER_10,CLUSTER_12
end,time.time(),CLUSTER_10,CLUSTER_12
start,time.time(),CLUSTER_10,CLUSTER_12
end,time.time(),CLUSTER_10,CLUSTER_12
start,time.time(),CLUSTER_10,CLUSTER_12
end,time.time(),CLUSTER_10,CLUSTER_12
cities_df,"pandas.read_csv(""../Resources/KCMetroCities_Lat_Lng.csv"")",CLUSTER_9,CLUSTER_2
restaurant_address,"requests.get(base_url,params=params)",CLUSTER_9,CLUSTER_2
df,"pandas.concat([df_train,df_test])",CLUSTER_7,CLUSTER_8
df_train,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv(data_path+'titanic_test.csv'),CLUSTER_7,CLUSTER_8
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
df_fixed['Fare'],scipy.stats.boxcox(df_fixed['Fare']),CLUSTER_7,CLUSTER_8
text,"re.sub(r""[^A-Za-z0-9^,!.\/'+-=]"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""what's"",""whatis"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'s"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'ve"",""have"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""n't"",""not"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""i'm"",""iam"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'d"",""would"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'ll"",""will"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r"","","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\."","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""!"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\/"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\^"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\+"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\-"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\="","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""'"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""(\d+)",CLUSTER_8,CLUSTER_4
text,"re.sub(r"":"","":"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""eg"",""eg"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""bg"",""bg"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\0s"",""0"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""911"",""911"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""e-mail"",""email"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\s{2,}"","""",text)",CLUSTER_8,CLUSTER_4
r,requests.get(adres),CLUSTER_10,CLUSTER_4
data,json.loads(r.text),CLUSTER_10,CLUSTER_4
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_6,CLUSTER_11
x2,"random.randint(1,10)",CLUSTER_10,CLUSTER_12
x3,random.random(),CLUSTER_10,CLUSTER_12
x1,"random.randrange(1,10)",CLUSTER_10,CLUSTER_12
now,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
now,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
date1,"datetime.datetime.strptime(myStr1,""%Y-%m-%d"")",CLUSTER_10,CLUSTER_12
date2,"datetime.datetime.strptime(myStr2,""%d-%m-%Y%H:%M:%S"")",CLUSTER_10,CLUSTER_12
date1,"datetime.datetime.strptime(str1,""%Y-%m-%d"")",CLUSTER_10,CLUSTER_12
dd,numpy.asarray(Train.Count),CLUSTER_7,CLUSTER_8
merge,"pandas.merge(test,test_original,on=('day','month','year')",CLUSTER_7,CLUSTER_8
prediction,"pandas.merge(merge,temp2,on='Hour',how='left')",CLUSTER_7,CLUSTER_8
merge,"pandas.merge(test,test_original,on=('day','month','year')",CLUSTER_7,CLUSTER_8
prediction,"pandas.merge(merge,temp2,on='Hour',how='left')",CLUSTER_7,CLUSTER_8
train,pandas.read_csv('Train_SU63ISt.csv'),CLUSTER_7,CLUSTER_8
test,pandas.read_csv('Test_0qrQsBZ.csv'),CLUSTER_7,CLUSTER_8
temp2,"pandas.read_csv(""GROUPby.csv"")",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('Holtlinear.csv'),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('Holtwinters.csv'),CLUSTER_7,CLUSTER_8
train['Datetime'],"pandas.to_datetime(train['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
test['Datetime'],"pandas.to_datetime(test['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
train_original['Datetime'],"pandas.to_datetime(train_original['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
test_original['Datetime'],"pandas.to_datetime(test_original['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
train.index,"pandas.to_datetime(train.Datetime,format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
test.index,"pandas.to_datetime(test['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
train.index,"pandas.to_datetime(train['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
"fig,axs","matplotlib.pyplot.subplots(4,1,figsize=(20,20)",CLUSTER_7,CLUSTER_8
rms,"math.sqrt(mean_squared_error(valid.Count,y_naive.Naive)",CLUSTER_7,CLUSTER_8
rms_MA,"math.sqrt(mean_squared_error(valid.Count,y_mavg.forecast)",CLUSTER_7,CLUSTER_8
rms_exp,"math.sqrt(mean_squared_error(valid.Count,y_exp.SES)",CLUSTER_7,CLUSTER_8
rms_holt,"math.sqrt(mean_squared_error(valid.Count,y_holt_linear.holt_linear)",CLUSTER_7,CLUSTER_8
rms,"math.sqrt(mean_squared_error(valid.Count,y_holt_winter.Holt_Winter)",CLUSTER_7,CLUSTER_8
self.dfExpected,"pandas.DataFrame(expected,columns=self.dfObserved.columns,index=self.dfObserved.index)",CLUSTER_4,CLUSTER_0
df_to_plot_race,"pandas.DataFrame(data=sorted_by_value,columns=['Emoji','P-value'])",CLUSTER_4,CLUSTER_0
self.dfObserved,"pandas.crosstab(Y,X)",CLUSTER_4,CLUSTER_0
counts_df_ran,"pandas.read_csv(path_counts_ran,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
users_df_ran,"pandas.read_csv(path_users_ran,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
counts_df_lon,"pandas.read_csv(path_counts_lon,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
users_df_lon,"pandas.read_csv(path_users_lon,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
counts_df_joh,"pandas.read_csv(path_counts_joh,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
users_df_joh,"pandas.read_csv(path_users_joh,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
counts_df_nyc,"pandas.read_csv(path_counts_nyc,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
users_df_nyc,"pandas.read_csv(path_users_nyc,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,12)",CLUSTER_4,CLUSTER_0
"chi2,p,dof,expected",scipy.stats.chi2_contingency(self.dfObserved.values),CLUSTER_4,CLUSTER_0
x_linespace,"numpy.linspace(0,4*pi,num=20)",CLUSTER_4,CLUSTER_0
data,pandas.read_csv('diabetes2.csv'),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,shuffle=True)",CLUSTER_7,CLUSTER_5
model,sklearn.svm.SVC(gamma='scale'),CLUSTER_7,CLUSTER_5
model1,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model2,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
model3,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline([
('nomalizer',StandardScaler()",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_validate(pipeline,X_train,y_train)",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_validate(pipeline,X_train,y_train)",CLUSTER_7,CLUSTER_5
adaboost,sklearn.ensemble.AdaBoostClassifier(base_estimator=DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
adaboost,sklearn.ensemble.AdaBoostClassifier(base_estimator=LogisticRegression(),CLUSTER_8,CLUSTER_1
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_8,CLUSTER_1
adaboost,AdaBoostClassifier(base_estimator=sklearn.tree.DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
"('abc',AdaBoostClassifier(base_estimator",sklearn.tree.DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
"('abc',AdaBoostClassifier(base_estimator",sklearn.tree.DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
pipeline,"make_pipeline(MinMaxScaler(),AdaBoostClassifier(n_estimators=100,base_estimator=sklearn.tree.DecisionTreeClassifier()",CLUSTER_8,CLUSTER_1
digits,sklearn.datasets.load_digits(),CLUSTER_8,CLUSTER_1
"trainX,testX,trainY,testY","sklearn.model_selection.train_test_split(digits.data,digits.target)",CLUSTER_8,CLUSTER_1
"trainX,testX,trainY,testY","sklearn.model_selection.train_test_split(digits.data,digits.target)",CLUSTER_8,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
adaboost,AdaBoostClassifier(base_estimator=sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
gbt,sklearn.ensemble.GradientBoostingClassifier(n_estimators=100),CLUSTER_8,CLUSTER_1
vc,"sklearn.ensemble.VotingClassifier(estimators=estimators,voting='hard')",CLUSTER_8,CLUSTER_1
vcc,"sklearn.ensemble.VotingClassifier(estimators=estimators,voting='soft',weights=[1,5,4,1])",CLUSTER_8,CLUSTER_1
gs,"sklearn.model_selection.GridSearchCV(vc,param_grid={'weights':[[1,5,4,1],[1,4,5,1]]},cv=5)",CLUSTER_8,CLUSTER_1
gs,"sklearn.model_selection.GridSearchCV(pipeline,param_grid={'adaboostclassifier__base_estimator':[DecisionTreeClassifier()",CLUSTER_8,CLUSTER_1
pipeline,sklearn.pipeline.make_pipeline(MinMaxScaler(),CLUSTER_8,CLUSTER_1
RHO,"numpy.zeros((nb_x_classes,nb_x_classes+1)",CLUSTER_2,CLUSTER_7
z,"numpy.zeros(n,dtype=int)",CLUSTER_2,CLUSTER_7
q_arr,numpy.zeros(nb_x_classes),CLUSTER_2,CLUSTER_7
x_convert,"numpy.zeros(n,dtype=int)",CLUSTER_2,CLUSTER_7
x_hat,"numpy.zeros(n,dtype=np.int)",CLUSTER_2,CLUSTER_7
m[context_str],"numpy.zeros(nb_z_classes,dtype=np.int)",CLUSTER_2,CLUSTER_7
x_convert[i],"numpy.dot(mask,x_temp[i:i+order])",CLUSTER_2,CLUSTER_7
EXP,"numpy.dot(PI_INV,LAMBDA*(PI[:,z[i]].reshape((nb_x_classes,1)",CLUSTER_2,CLUSTER_7
score,"numpy.dot(m_vector,EXP)",CLUSTER_2,CLUSTER_7
LAMBDA,"numpy.ones((nb_x_classes,nb_x_classes)",CLUSTER_2,CLUSTER_7
MAP,"numpy.ones((nb_x_classes,nb_x_classes+1)",CLUSTER_2,CLUSTER_7
mask,numpy.ones((order),CLUSTER_2,CLUSTER_7
LAMBDA,"numpy.ones((nb_x_classes,nb_x_classes)",CLUSTER_2,CLUSTER_7
L,"numpy.matmul(PI_INV,RHO)",CLUSTER_2,CLUSTER_7
"img_quantize[i,j]","numpy.argmax(img[i,j]<q_arr)",CLUSTER_2,CLUSTER_7
x_hat[i],numpy.argmin(score),CLUSTER_2,CLUSTER_7
x_temp,numpy.hstack((np.zeros(order-1),CLUSTER_2,CLUSTER_7
PI_sum,numpy.copy(PI),CLUSTER_2,CLUSTER_7
x_temp,numpy.copy(x),CLUSTER_2,CLUSTER_7
imarray,numpy.array(im),CLUSTER_2,CLUSTER_7
C,"numpy.zeros((n-2*k,2*k*nb_z_classes)",CLUSTER_2,CLUSTER_7
Y,"numpy.dot(Z[k:n-k],L_new)",CLUSTER_2,CLUSTER_7
x,"numpy.ones((states,states)",CLUSTER_2,CLUSTER_7
error,numpy.absolute(a-b),CLUSTER_2,CLUSTER_7
error,numpy.absolute(a-b),CLUSTER_2,CLUSTER_7
x,numpy.hstack(tuple(x),CLUSTER_2,CLUSTER_7
z,numpy.hstack(tuple(z),CLUSTER_2,CLUSTER_7
c_i,"numpy.vstack((Z[i-k:i,],Z[i+1:i+k+1,])",CLUSTER_2,CLUSTER_7
PI_INV,numpy.linalg.inv(PI),CLUSTER_2,CLUSTER_7
PI_INV,numpy.linalg.inv(PI),CLUSTER_2,CLUSTER_7
PI_dict,scipy.io.loadmat('PARAM/'+true_or_assumed+'_PI.mat'),CLUSTER_2,CLUSTER_7
TRANS_dict,scipy.io.loadmat('PARAM/'+true_or_assumed+'_TRANS.mat'),CLUSTER_2,CLUSTER_7
article_labels,"numpy.argmax(article_dists,axis=1)",CLUSTER_5,CLUSTER_5
top_i,numpy.argsort(topic_dists[comp]),CLUSTER_5,CLUSTER_5
articles,pandas.read_csv('all.csv'),CLUSTER_5,CLUSTER_5
as_topics,"sklearn.decomposition.LatentDirichletAllocation(n_components=10,random_state=0,n_jobs=6)",CLUSTER_5,CLUSTER_5
talks,"pandas.read_csv(""talks.tsv"",sep=""\t"",header=0)",CLUSTER_8,CLUSTER_4
colors,seaborn.color_palette(),CLUSTER_10,CLUSTER_4
iris,sklearn.datasets.load_iris(),CLUSTER_10,CLUSTER_4
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,n_jobs=-1)",CLUSTER_10,CLUSTER_4
coeffdf,"pandas.DataFrame({'Word':basicwords,
'Coefficient':basiccoeffs})",CLUSTER_8,CLUSTER_1
advcoeffdf,"pandas.DataFrame({'Words':advwords,
'Coefficient':advcoeffs})",CLUSTER_8,CLUSTER_1
data,pandas.read_csv('Combined_News_DJIA.csv'),CLUSTER_8,CLUSTER_1
basicmodel,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
advancedmodel,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
p2kfatc_qtdamostra_loc_exec,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_extpython_tp_total[0:1]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_extpython_tp_total[4:5]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_mssql_tp_total[0:1]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_mssql_tp_total[4:5]),CLUSTER_5,CLUSTER_9
p2kfatc_qtdamostra_loc_exec10,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_extpython_tp_total[0:1]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_extpython_tp_total[10:]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_mssql_tp_total[0:1]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_mssql_tp_total[10:]),CLUSTER_5,CLUSTER_9
pivot_df_desempenho,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
df,pandas.DataFrame(x_scaled),CLUSTER_5,CLUSTER_9
df_desempenho_mssql,"pandas.read_csv(""dados_desempenho_mssql.csv"",sep="";"")",CLUSTER_5,CLUSTER_9
df_desempenho_extpython,"pandas.read_csv(""dados_desempenho_ext_python.csv"",sep=""|"")",CLUSTER_5,CLUSTER_9
"pivot_df_desempenho_mssql_tp_python[""sem""]","numpy.apply_along_axis(sts.sem,axis=1,arr=pivot_df_desempenho_mssql_tp_python_tmp.as_matrix()",CLUSTER_5,CLUSTER_9
"pivot_df_desempenho_mssql_tp_total[""sem""]","numpy.apply_along_axis(sts.sem,axis=1,arr=pivot_df_desempenho_mssql_tp_total_tmp.as_matrix()",CLUSTER_5,CLUSTER_9
"pivot_df_desempenho_extpython_tp_python[""sem""]","numpy.apply_along_axis(sts.sem,axis=1,arr=pivot_df_desempenho_extpython_tp_python_tmp.as_matrix()",CLUSTER_5,CLUSTER_9
"pivot_df_desempenho_extpython_tp_total[""sem""]","numpy.apply_along_axis(sts.sem,axis=1,arr=pivot_df_desempenho_extpython_tp_total_tmp.as_matrix()",CLUSTER_5,CLUSTER_9
chi_med_total,"scipy.stats.chisquare(pivot_df_desempenho[""media_extpython_tp_total""],
pivot_df_desempenho[""media_mssql_tp_total""])",CLUSTER_5,CLUSTER_9
chi_med_python,"scipy.stats.chisquare(pivot_df_desempenho[""media_extpython_tp_python""],
pivot_df_desempenho[""media_mssql_tp_python""])",CLUSTER_5,CLUSTER_9
tstat,"scipy.stats.ttest_ind(df_desempenho_extpython.query(""qtd_amostra==1000"")",CLUSTER_5,CLUSTER_9
min_max_scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0.1,1)",CLUSTER_5,CLUSTER_9
Se,math.sqrt(MSE),CLUSTER_5,CLUSTER_9
data,"pandas.read_csv(os.path.join(data_path,'ratings.csv')",CLUSTER_10,CLUSTER_2
data_movies,"pandas.read_csv(os.path.join(data_path,'movies.csv')",CLUSTER_10,CLUSTER_2
data_baltic,"pandas.read_csv(os.path.join(data_path,'power.csv')",CLUSTER_10,CLUSTER_2
table,pandas.read_html(io.StringIO(page.content.decode('UTF-8'),CLUSTER_10,CLUSTER_2
page,"requests.get(""https://fortrader.org/quotes"")",CLUSTER_10,CLUSTER_2
df,"pandas.read_csv('./ex2data1.txt',dtype=np.float64,header=None)",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv('./ex2data1.txt',dtype=np.float64,header=None)",CLUSTER_5,CLUSTER_5
theta,numpy.array(initial_theta),CLUSTER_5,CLUSTER_5
st,"numpy.array([1,45,85])",CLUSTER_5,CLUSTER_5
st,"numpy.array([1,45,85])",CLUSTER_5,CLUSTER_5
st,"numpy.array([1,45,85])",CLUSTER_5,CLUSTER_5
grad_,numpy.zeros(theta.shape[0]),CLUSTER_5,CLUSTER_5
initial_theta,numpy.zeros(n+1),CLUSTER_5,CLUSTER_5
J_history,numpy.zeros(num_iters),CLUSTER_5,CLUSTER_5
theta,numpy.zeros(n),CLUSTER_5,CLUSTER_5
J_history,numpy.zeros(num_iters),CLUSTER_5,CLUSTER_5
initial_theta,numpy.zeros(X.shape[1]+1),CLUSTER_5,CLUSTER_5
theta,numpy.zeros(n),CLUSTER_5,CLUSTER_5
J_history,numpy.zeros(num_iters),CLUSTER_5,CLUSTER_5
X,"numpy.concatenate((np.ones((m,1)",CLUSTER_5,CLUSTER_5
grad_,"numpy.dot(X.T,hx-y)",CLUSTER_5,CLUSTER_5
hx,"numpy.dot(X,theta)",CLUSTER_5,CLUSTER_5
J,numpy.sum(-y*np.log(hx),CLUSTER_5,CLUSTER_5
clf,"sklearn.linear_model.SGDClassifier(loss='log',n_iter=6000,random_state=100)",CLUSTER_5,CLUSTER_5
clf,"sklearn.linear_model.LogisticRegression(C=10,solver='lbfgs')",CLUSTER_5,CLUSTER_5
data,"sklearn.datasets.make_blobs(n_samples=300,n_features=2,centers=n+2,cluster_std=1.5,
center_box=(-10.0,10.0)",CLUSTER_5,CLUSTER_10
clf,"sklearn.ensemble.RandomTreesEmbedding(n_estimators=100,max_depth=10)",CLUSTER_5,CLUSTER_10
cluster,"sklearn.cluster.AgglomerativeClustering(n_clusters=i+2,affinity=""precomputed"",linkage=""complete"")",CLUSTER_5,CLUSTER_10
cluster,"sklearn.cluster.AgglomerativeClustering(n_clusters=i+2,affinity=""precomputed"",linkage=""complete"")",CLUSTER_5,CLUSTER_10
cluster,"sklearn.cluster.AgglomerativeClustering(n_clusters=i+2,affinity=""euclidean"",linkage=""ward"")",CLUSTER_5,CLUSTER_10
cluster,"sklearn.cluster.AgglomerativeClustering(n_clusters=i+2,affinity=""precomputed"",linkage=""average"")",CLUSTER_5,CLUSTER_10
colors,"numpy.array(['red','orange','blue','yellow'])",CLUSTER_5,CLUSTER_10
d,"numpy.zeros([n_sample,n_sample])",CLUSTER_5,CLUSTER_10
d,"numpy.zeros([n_sample,n_sample])",CLUSTER_5,CLUSTER_10
node_depth,numpy.zeros(n_nodes),CLUSTER_5,CLUSTER_10
is_leaves,numpy.zeros(n_nodes),CLUSTER_5,CLUSTER_10
prob,"numpy.zeros([n_sample,n_sample])",CLUSTER_5,CLUSTER_10
df1,"pandas.read_csv(line1+""/전처리된거+서울경기.csv"",engine='python')",CLUSTER_9,CLUSTER_11
f_list1,os.listdir(line2),CLUSTER_9,CLUSTER_11
response,requests.get(URL),CLUSTER_9,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,13)",CLUSTER_9,CLUSTER_11
labels,"numpy.array([1,2,3,0,2,1])",CLUSTER_1,CLUSTER_9
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
rf_df,"pandas.DataFrame({'accuracy':cross_val_score(random_forest_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
dt_df,"pandas.DataFrame({'accuracy':cross_val_score(decision_tree_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
iris_data,pandas.read_csv('iris-data.csv'),CLUSTER_7,CLUSTER_5
iris_data,"pandas.read_csv('iris-data.csv',na_values=['NA'])",CLUSTER_7,CLUSTER_5
iris_data_clean,pandas.read_csv('iris-data-clean.csv'),CLUSTER_7,CLUSTER_5
iris_data_clean,pandas.read_csv('iris-data-clean.csv'),CLUSTER_7,CLUSTER_5
iris_data_clean,pandas.read_csv('iris-data-clean.csv'),CLUSTER_7,CLUSTER_5
testing_classes),"sklearn.model_selection.train_test_split(all_inputs,all_labels,test_size=0.25,random_state=1)",CLUSTER_7,CLUSTER_5
testing_classes),"sklearn.model_selection.train_test_split(all_inputs,all_labels,test_size=0.25)",CLUSTER_7,CLUSTER_5
testing_classes),"sklearn.model_selection.train_test_split(all_inputs,all_labels,test_size=0.25)",CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(max_depth=1),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
mask,numpy.zeros(len(labels),CLUSTER_7,CLUSTER_5
cross_validation,sklearn.model_selection.StratifiedKFold(n_splits=10),CLUSTER_7,CLUSTER_5
cross_validation,sklearn.model_selection.StratifiedKFold(n_splits=10),CLUSTER_7,CLUSTER_5
cross_validation,sklearn.model_selection.StratifiedKFold(n_splits=10),CLUSTER_7,CLUSTER_5
cv_scores,"sklearn.model_selection.cross_val_score(decision_tree_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
cv_scores,"sklearn.model_selection.cross_val_score(decision_tree_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
dt_scores,"sklearn.model_selection.cross_val_score(decision_tree_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
rf_classifier_scores,"sklearn.model_selection.cross_val_score(random_forest_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(decision_tree_classifier,
param_grid=parameter_grid,
cv=cross_validation)",CLUSTER_7,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(decision_tree_classifier,
param_grid=parameter_grid,
cv=cross_validation)",CLUSTER_7,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(random_forest_classifier,
param_grid=parameter_grid,
cv=cross_validation)",CLUSTER_7,CLUSTER_5
out_file,"sklearn.tree.export_graphviz(decision_tree_classifier,out_file=out_file)",CLUSTER_7,CLUSTER_5
random_forest_classifier,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
random_forest_classifier,"sklearn.ensemble.RandomForestClassifier(criterion='gini',max_features=3,n_estimators=50)",CLUSTER_7,CLUSTER_5
"count,bin_edges",numpy.histogram(df_can['2013']),CLUSTER_1,CLUSTER_3
"count,bin_edges",numpy.histogram(df_can['2013']),CLUSTER_1,CLUSTER_3
"count,bin_edges","numpy.histogram(df_t,15)",CLUSTER_1,CLUSTER_3
"count,bin_edges","numpy.histogram(df_t,15)",CLUSTER_1,CLUSTER_3
"count,binedges","numpy.histogram(df_cof,15)",CLUSTER_1,CLUSTER_3
df_can,"pandas.read_excel('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx',
sheet_name='CanadabyCitizenship',
skiprows=range(20)",CLUSTER_1,CLUSTER_3
mergedDf,pandas.DataFrame(),CLUSTER_4,CLUSTER_0
bonsai,pandas.read_csv(path),CLUSTER_4,CLUSTER_0
exl,pandas.read_fwf(path),CLUSTER_4,CLUSTER_0
cleanData,numpy.array(example[:-1]forexampleintrainingData),CLUSTER_4,CLUSTER_0
cleanData,numpy.array(example[:-1]forexampleintestData),CLUSTER_4,CLUSTER_0
dictionary[key],numpy.array(dictionary[key]),CLUSTER_4,CLUSTER_0
trainEndIndex,math.floor(len(labelledStrides[exercise]),CLUSTER_4,CLUSTER_0
model,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=5,weights='distance',metric=DTWDistance)",CLUSTER_4,CLUSTER_0
report,"sklearn.metrics.classification_report(testClasses,results,output_dict=True)",CLUSTER_4,CLUSTER_0
htt_wt,"pandas.DataFrame(X,columns=ht_wt.columns)",CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame(columns=['Publishers','total-heroes','total-villans','total-neutral','total-unknown'])",CLUSTER_5,CLUSTER_1
heroes,"pandas.concat([heroes_without_htwt,htt_wt],axis=1)",CLUSTER_5,CLUSTER_1
heroes,pandas.read_csv('heroes_information.csv'),CLUSTER_5,CLUSTER_1
powers,pandas.read_csv('super_hero_powers.csv'),CLUSTER_5,CLUSTER_1
imputer,sklearn.impute.SimpleImputer(strategy='median'),CLUSTER_5,CLUSTER_1
groups,"pandas.DataFrame(columns=['size','sum','mean','std'])",CLUSTER_8,CLUSTER_3
Top15['bins'],"pandas.cut(Top15['%Renewable'],5)",CLUSTER_8,CLUSTER_3
df,"pandas.merge(pandas.merge(energy,GDP,on='Country')",CLUSTER_8,CLUSTER_3
df_all,"pandas.merge(pandas.merge(energy,GDP,on='Country')",CLUSTER_8,CLUSTER_3
df_not_all,"pandas.merge(pandas.merge(energy,GDP,on='Country')",CLUSTER_8,CLUSTER_3
GDP,"pandas.read_csv('world_bank.csv',skiprows=4)",CLUSTER_8,CLUSTER_3
energy,pandas.read_excel('EnergyIndicators.xls'),CLUSTER_8,CLUSTER_3
ScimEn,pandas.read_excel('scimagojr-3.xlsx'),CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""./data/crime.csv"",encoding=""ISO-8859-1"")",CLUSTER_1,CLUSTER_3
"df[""OCCURRED_ON_DATE""]","pandas.to_datetime(df.OCCURRED_ON_DATE,infer_datetime_format=True)",CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
sequence_1,"numpy.arange(start=2,stop=10,step=2)",CLUSTER_3,CLUSTER_6
sequence_1,"numpy.arange(2,10,2)",CLUSTER_3,CLUSTER_6
a,numpy.arange(5),CLUSTER_3,CLUSTER_6
b,"numpy.arange(0,50,10)",CLUSTER_3,CLUSTER_6
array1,"numpy.arange(0,10,2)",CLUSTER_3,CLUSTER_6
array1,"numpy.array([1.,2.,3.])",CLUSTER_3,CLUSTER_6
matrix1,"numpy.array(
[[1.,2.,3.],
[4.,5.,6.],
[7.,8.,9.]]
)",CLUSTER_3,CLUSTER_6
array_tuple,"numpy.array((1,2,3)",CLUSTER_3,CLUSTER_6
matrix_mixed,"numpy.array(
[(1,2,3)",CLUSTER_3,CLUSTER_6
matrix1_32,"numpy.array(
[[1.,2.,3.],
[4.,5.,6.],
[7.,8.,9.]],
dtype=np.float32
)",CLUSTER_3,CLUSTER_6
array_complex,"numpy.array([[2.+3.j,1.]],dtype=np.complex)",CLUSTER_3,CLUSTER_6
matrix_complex,"numpy.array(
[[2.+1.j,1.],
[0.,1.j]],
dtype=np.complex
)",CLUSTER_3,CLUSTER_6
A,"numpy.array(
[[1.,3.],
[2.,4.]]
)",CLUSTER_3,CLUSTER_6
B,"numpy.array(
[[10.,0.],
[10.,20.]]
)",CLUSTER_3,CLUSTER_6
mat,"numpy.array([[2.,1.],[1,2.]])",CLUSTER_3,CLUSTER_6
vec,"numpy.array([1.,0.])",CLUSTER_3,CLUSTER_6
vec,"numpy.array([1/3,1/2])",CLUSTER_3,CLUSTER_6
array1,"numpy.array([10.,10.])",CLUSTER_3,CLUSTER_6
array2,"numpy.array([15,30])",CLUSTER_3,CLUSTER_6
an_array,numpy.array([]),CLUSTER_3,CLUSTER_6
array_zeros,numpy.zeros(3),CLUSTER_3,CLUSTER_6
matrix_zeros,numpy.zeros(shape),CLUSTER_3,CLUSTER_6
array3,numpy.zeros(n),CLUSTER_3,CLUSTER_6
"matrix3,matrix3_loop",numpy.zeros(shape),CLUSTER_3,CLUSTER_6
array_ones,numpy.ones(3),CLUSTER_3,CLUSTER_6
matrix_ones,numpy.ones(shape),CLUSTER_3,CLUSTER_6
a,"numpy.ones(3,dtype=np.int32)",CLUSTER_3,CLUSTER_6
b,numpy.ones(n),CLUSTER_3,CLUSTER_6
sequence_2,"numpy.linspace(start=2,stop=8,num=4)",CLUSTER_3,CLUSTER_6
sequence_2,"numpy.linspace(2,8,4)",CLUSTER_3,CLUSTER_6
sequence_3,"numpy.linspace(0,100,200)",CLUSTER_3,CLUSTER_6
b,"numpy.linspace(0,5,3)",CLUSTER_3,CLUSTER_6
array1,"numpy.linspace(5,20,10)",CLUSTER_3,CLUSTER_6
array2,"numpy.linspace(0,5,10)",CLUSTER_3,CLUSTER_6
an_array,"numpy.append(an_array,i)",CLUSTER_3,CLUSTER_6
x,numpy.loadtxt('u_out.dat'),CLUSTER_3,CLUSTER_6
"x,y",numpy.loadtxt('uv_out.dat'),CLUSTER_3,CLUSTER_6
"x,y","numpy.loadtxt('uv_out_2.dat',unpack=True)",CLUSTER_3,CLUSTER_6
"x,y","numpy.loadtxt('A_out.dat',usecols=(0,1)",CLUSTER_3,CLUSTER_6
M,numpy.loadtxt('A_out.dat'),CLUSTER_3,CLUSTER_6
"e_vals,e_vecs",numpy.linalg.eig(A),CLUSTER_3,CLUSTER_6
x,"numpy.linalg.solve(A,b)",CLUSTER_3,CLUSTER_6
fig,"matplotlib.pyplot.figure(figsize=(15,4)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,4)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(10,6)",CLUSTER_7,CLUSTER_5
"f,axes","matplotlib.pyplot.subplots(ncols=3,figsize=(15,6)",CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(15,4)",CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(x=""projectCount"",y=""projectCount"",hue=""turnover"",data=df,estimator=lambdax:len(x)",CLUSTER_7,CLUSTER_5
ax,seaborn.kdeplot(df.loc[(df['turnover']==0),CLUSTER_7,CLUSTER_5
ax,seaborn.kdeplot(df.loc[(df['turnover']==1),CLUSTER_7,CLUSTER_5
ax,seaborn.kdeplot(df.loc[(df['turnover']==0),CLUSTER_7,CLUSTER_5
ax,seaborn.kdeplot(df.loc[(df['turnover']==1),CLUSTER_7,CLUSTER_5
kmeans,"sklearn.cluster.KMeans(n_clusters=3,random_state=2)",CLUSTER_7,CLUSTER_5
X,"numpy.arange(-16,16)",CLUSTER_5,CLUSTER_5
X_test,"numpy.zeros(shape=(n_test_games,1)",CLUSTER_5,CLUSTER_5
clipped_preds,"numpy.clip(preds,0.05,0.95)",CLUSTER_5,CLUSTER_5
df_wins,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
df_losses,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
df_for_predictions,"pandas.concat((df_wins,df_losses)",CLUSTER_5,CLUSTER_5
df_dummy,"pandas.merge(left=df_tour,right=df_winseeds,how='left',on=['Season','Wteam'])",CLUSTER_5,CLUSTER_5
df_concat,"pandas.merge(left=df_dummy,right=df_lossseeds,on=['Season','Lteam'])",CLUSTER_5,CLUSTER_5
df_seeds,pandas.read_csv(data_dir+'TourneySeeds.csv'),CLUSTER_5,CLUSTER_5
df_tour,pandas.read_csv(data_dir+'TourneyCompactResults.csv'),CLUSTER_5,CLUSTER_5
df_sample_sub,pandas.read_csv(data_dir+'sample_submission.csv'),CLUSTER_5,CLUSTER_5
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
clf,"sklearn.model_selection.GridSearchCV(logreg,params,scoring='neg_log_loss',refit=True)",CLUSTER_5,CLUSTER_5
beta,"numpy.array([1,0.1,10])",CLUSTER_8,CLUSTER_3
y,"numpy.dot(x,beta)",CLUSTER_8,CLUSTER_3
y_true,"numpy.dot(x,beta)",CLUSTER_8,CLUSTER_3
x,"numpy.linspace(0,10,100)",CLUSTER_8,CLUSTER_3
x,"numpy.linspace(0,20,nsample)",CLUSTER_8,CLUSTER_3
x,"numpy.column_stack((x,x**2)",CLUSTER_8,CLUSTER_3
x,"numpy.column_stack((x,np.sin(x)",CLUSTER_8,CLUSTER_3
data,pandas.DataFrame(data1),CLUSTER_7,CLUSTER_5
data1,"pandas.read_csv(r""C:\Users\rishy\Desktop\rr\lgdata.csv"")",CLUSTER_7,CLUSTER_5
y,numpy.asarray(a),CLUSTER_7,CLUSTER_5
reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_5
weather_data,pandas.DataFrame(weather_dict),CLUSTER_9,CLUSTER_2
response,"requests.get(f""{url}&q={city}"")",CLUSTER_9,CLUSTER_2
"trn_y,val_y",numpy.array(trn_y),CLUSTER_6,CLUSTER_9
top_3,numpy.array(labels),CLUSTER_6,CLUSTER_9
test_y,numpy.zeros(len(test_x),CLUSTER_6,CLUSTER_9
data,"numpy.pad(data,((0,self.n_segments-data.shape[0])",CLUSTER_6,CLUSTER_9
train,pandas.read_csv(PATH/'train.csv'),CLUSTER_6,CLUSTER_9
test,pandas.read_csv(PATH/'sample_submission.csv'),CLUSTER_6,CLUSTER_9
"X,y","sklearn.datasets.make_classification(n_samples=10000,
n_features=10,
n_classes=2,
n_informative=3,
random_state=3)",CLUSTER_5,CLUSTER_10
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
"false_positive_rate,true_positive_rate,threshold","sklearn.metrics.roc_curve(y_test,y_score)",CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.1,random_state=1)",CLUSTER_5,CLUSTER_10
box_scores,"numpy.multiply(box_confidence,box_class_probs)",CLUSTER_4,CLUSTER_0
r,requests.get(url),CLUSTER_10,CLUSTER_12
similarity_df,"pandas.DataFrame(similarities,columns=entity_names,index=entity_names)",CLUSTER_0,CLUSTER_1
similarity_df,"pandas.DataFrame(similarities,columns=entity_names,index=entity_names)",CLUSTER_0,CLUSTER_1
review_df,"pandas.read_csv('./dataset/labeledTrainData.tsv',header=0,sep=""\t"",quoting=3)",CLUSTER_0,CLUSTER_1
review_df,"pandas.read_csv('./dataset/labeledTrainData.tsv',header=0,sep=""\t"",quoting=3)",CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feature_df,class_df,\
test_size=0.3,\
random_state=156)",CLUSTER_0,CLUSTER_1
accuracy,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_0,CLUSTER_1
accuracy,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_0,CLUSTER_1
accuracy,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_0,CLUSTER_1
precision,"sklearn.metrics.precision_score(y_test,pred)",CLUSTER_0,CLUSTER_1
precision,"sklearn.metrics.precision_score(y_test,pred)",CLUSTER_0,CLUSTER_1
precision,"sklearn.metrics.precision_score(y_test,pred)",CLUSTER_0,CLUSTER_1
recall,"sklearn.metrics.recall_score(y_test,pred)",CLUSTER_0,CLUSTER_1
recall,"sklearn.metrics.recall_score(y_test,pred)",CLUSTER_0,CLUSTER_1
recall,"sklearn.metrics.recall_score(y_test,pred)",CLUSTER_0,CLUSTER_1
confusion,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_0,CLUSTER_1
confusion,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_0,CLUSTER_1
confusion,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_0,CLUSTER_1
f1,"sklearn.metrics.f1_score(y_test,pred)",CLUSTER_0,CLUSTER_1
f1,"sklearn.metrics.f1_score(y_test,pred)",CLUSTER_0,CLUSTER_1
f1,"sklearn.metrics.f1_score(y_test,pred)",CLUSTER_0,CLUSTER_1
roc_auc,"sklearn.metrics.roc_auc_score(y_test,pred)",CLUSTER_0,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([
('cnt_vect',CountVectorizer(stop_words='english',ngram_range=(1,2)",CLUSTER_0,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([
('tfidf_vect',TfidfVectorizer(stop_words='english',ngram_range=(1,2)",CLUSTER_0,CLUSTER_1
"plt.imshow(X_train[0],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_2,CLUSTER_10
"plt.imshow(X_train[1],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_2,CLUSTER_10
"plt.imshow(X_train[2],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_2,CLUSTER_10
"plt.imshow(X_train[3],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_2,CLUSTER_10
X_fit,"numpy.linspace(0,1,100)",CLUSTER_7,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
mcr,"pandas.DataFrame({'MisclassificationRate':Misclassification},Models)",CLUSTER_8,CLUSTER_3
roc_df,pandas.DataFrame(),CLUSTER_8,CLUSTER_3
roc_df,"pandas.concat([roc_df,tmp.ROCInfo])",CLUSTER_8,CLUSTER_3
site_index,numpy.arange(-0.5*(M-1),CLUSTER_1,CLUSTER_10
x,"numpy.arange(0,len(w)",CLUSTER_1,CLUSTER_10
H,"numpy.diag(np.ones(shape=(M-1,)",CLUSTER_1,CLUSTER_10
fftx,numpy.fft.fft(np.sort(w),CLUSTER_1,CLUSTER_10
fft_freq,numpy.fft.fftfreq(len(w),CLUSTER_1,CLUSTER_10
input_ids,"numpy.zeros(shape=(n_batch,max_sen_lenght)",CLUSTER_6,CLUSTER_6
input_ids,"numpy.zeros(shape=(n_batch,max_sen_lenght)",CLUSTER_6,CLUSTER_6
lm_labels,"numpy.full(shape=(n_batch,max_sen_lenght)",CLUSTER_6,CLUSTER_6
lm_labels,"numpy.full(shape=(n_batch,max_sen_lenght)",CLUSTER_6,CLUSTER_6
token2num,json.load(f),CLUSTER_6,CLUSTER_6
fig1,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
label,numpy.load(l_p),CLUSTER_1,CLUSTER_9
label1,numpy.load(l1_path),CLUSTER_1,CLUSTER_9
label2,numpy.load(l2_path),CLUSTER_1,CLUSTER_9
label3,numpy.load(l3_path),CLUSTER_1,CLUSTER_9
label4,numpy.load(l4_path),CLUSTER_1,CLUSTER_9
label5,numpy.load(l5_path),CLUSTER_1,CLUSTER_9
j,"pandas.DataFrame({'XX':['Primera','Segunda','Tercera'],'Totales':[primera,segunda,tercera]})",CLUSTER_1,CLUSTER_3
CVM,"pandas.DataFrame({'Vivos':Vivos,'Muertos':Muertos},index=index)",CLUSTER_1,CLUSTER_3
entrena,"pandas.read_csv(""train.csv"")",CLUSTER_1,CLUSTER_3
"line,","matplotlib.pyplot.plot(x,np.cos(x)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(0,10)",CLUSTER_1,CLUSTER_10
texts,numpy.array([article.raw_textforarticleinp.data_source.articles]),CLUSTER_5,CLUSTER_10
labels,numpy.array([article.labelforarticleinp.data_source.articles]),CLUSTER_5,CLUSTER_10
texts_test,numpy.array([article.raw_textforarticleintest_data_source.articles]),CLUSTER_5,CLUSTER_10
labels_test,numpy.array([article.labelforarticleintest_data_source.articles]),CLUSTER_5,CLUSTER_10
train_acc,"sklearn.metrics.accuracy_score(y_train,model.predict(X_train)",CLUSTER_5,CLUSTER_10
test_acc,"sklearn.metrics.accuracy_score(y_test,labels_prediction)",CLUSTER_5,CLUSTER_10
test_acc,"sklearn.metrics.accuracy_score(y_test,fitted_model.predict(X_test)",CLUSTER_5,CLUSTER_10
train_loss,"sklearn.metrics.log_loss(y_train,model.predict_proba(X_train)",CLUSTER_5,CLUSTER_10
test_loss,"sklearn.metrics.log_loss(y_test,labels_probs)",CLUSTER_5,CLUSTER_10
model,"sklearn.svm.SVC(kernel=kernel,
C=c,
random_state=42,
decision_function_shape='ovr',

class_weight=class_weight,
probability=True,
gamma=gamma)",CLUSTER_5,CLUSTER_10
SVC_opt,"sklearn.svm.SVC(kernel=best_param['kernel'],
C=best_param['C'],
random_state=42,
decision_function_shape='ovr',

class_weight=best_param['class_weight'],
probability=True,
gamma=best_param['gamma'])",CLUSTER_5,CLUSTER_10
start,time.time(),CLUSTER_5,CLUSTER_10
end,time.time(),CLUSTER_5,CLUSTER_10
pdf,"pandas.read_sql(selectQuery,pconn)",CLUSTER_8,CLUSTER_4
missing_data,pandas.DataFrame({'MissingRatio':all_data_na}),CLUSTER_5,CLUSTER_1
missing_data,pandas.DataFrame({'MissingRatio':all_data_na}),CLUSTER_5,CLUSTER_1
temp,"pandas.crosstab(date1['customer_id'],date1['购买了商品+'])",CLUSTER_5,CLUSTER_1
temp,"pandas.crosstab(date1['customer_id'],date1['购买了商品+'])",CLUSTER_5,CLUSTER_1
temp,"pandas.crosstab(date1['customer_id'],date1['购买了商品+'])",CLUSTER_5,CLUSTER_1
all_data,"pandas.merge(all_data,goods_feature[['goods_id','Goods_clustering_kind']],on='goods_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(customer_id,temp,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,temp,on=['customer_id'],how='left')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,temp,on=['customer_id'],how='left')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_buy_goods_num,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_total_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_real_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_happy_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_number,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_son_real_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_son_happy_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,last_time,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,q,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,Location,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,Longtitude,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,Latitude,on='customer_id')",CLUSTER_5,CLUSTER_1
all_customer,"pandas.merge(all_customer,submit_df,on=['customer_id'],how='left',copy=False)",CLUSTER_5,CLUSTER_1
all_data,"pandas.read_csv('D:/new_date.csv',low_memory=False)",CLUSTER_5,CLUSTER_1
goods_feature,pandas.read_csv('goods_feature.csv'),CLUSTER_5,CLUSTER_1
all_data['order_pay_time'],pandas.to_datetime(all_data['order_pay_time']),CLUSTER_5,CLUSTER_1
output['order_pay_date_jiange'],pandas.to_datetime('2013-12-31'),CLUSTER_5,CLUSTER_1
y_true,numpy.array(y_true),CLUSTER_5,CLUSTER_1
y_pred,numpy.array(y_pred),CLUSTER_5,CLUSTER_1
y_true,numpy.array(y_true),CLUSTER_5,CLUSTER_1
y_pred,numpy.array(y_pred),CLUSTER_5,CLUSTER_1
p,"numpy.clip(y_pred,eps,1-eps)",CLUSTER_5,CLUSTER_1
p,"numpy.clip(y_pred,eps,1-eps)",CLUSTER_5,CLUSTER_1
p,"numpy.clip(y_pred,eps,1-eps)",CLUSTER_5,CLUSTER_1
loss,numpy.sum(-y_true*np.log(p),CLUSTER_5,CLUSTER_1
loss,numpy.sum(-labels*np.log(p),CLUSTER_5,CLUSTER_1
loss,numpy.sum(-y_true*np.log(p),CLUSTER_5,CLUSTER_1
label,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=42,stratify=y)",CLUSTER_5,CLUSTER_1
xs,numpy.array(xs),CLUSTER_1,CLUSTER_10
ys,numpy.array(ys),CLUSTER_1,CLUSTER_10
yerr,numpy.array(yerr),CLUSTER_1,CLUSTER_10
wine_data,sklearn.datasets.load_wine(),CLUSTER_5,CLUSTER_1
wine_data,sklearn.datasets.load_wine(),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feat_data,
labels,
test_size=0.3,
random_state=101)",CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feat_data,
labels,
test_size=0.3,
random_state=101)",CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
onehot_y_train,pandas.get_dummies(y_train),CLUSTER_5,CLUSTER_1
one_hot_y_test,pandas.get_dummies(y_test),CLUSTER_5,CLUSTER_1
raw_data,"pandas.read_csv(""./data.csv"")",CLUSTER_7,CLUSTER_3
g,seaborn.PairGrid(data=data0),CLUSTER_7,CLUSTER_3
g,seaborn.PairGrid(data=data1),CLUSTER_7,CLUSTER_3
g,seaborn.PairGrid(data=data2),CLUSTER_7,CLUSTER_3
arr,"numpy.array([0.0foriinrange(0,300)",CLUSTER_0,CLUSTER_1
df_non_red_features,pandas.DataFrame(features),CLUSTER_0,CLUSTER_1
df_fluency_features,pandas.DataFrame(fluency_features),CLUSTER_0,CLUSTER_1
df_new_non_red_features,"pandas.concat([df_non_red_features,pd.DataFrame(new_features)",CLUSTER_0,CLUSTER_1
df_new_fluency_features,"pandas.concat([df_fluency_features,pd.DataFrame(new_features)",CLUSTER_0,CLUSTER_1
train_data,"pandas.read_csv(""q4_train_set.csv"")",CLUSTER_0,CLUSTER_1
test_data,"pandas.read_csv(""q4_test_set.csv"")",CLUSTER_0,CLUSTER_1
r_coeff,"scipy.stats.pearsonr(pred,y)",CLUSTER_0,CLUSTER_1
mse,"sklearn.metrics.mean_squared_error(pred,y)",CLUSTER_0,CLUSTER_1
clf,sklearn.linear_model.LinearRegression(),CLUSTER_0,CLUSTER_1
vp_data,"pandas.DataFrame({'idx':data.index,x:data[x],y:data[y],'hue_class':0})",CLUSTER_7,CLUSTER_3
vp_data,"pandas.DataFrame({x:data_unharmonized[x],y:data_unharmonized[y],'Legend':'Unharmonized'})",CLUSTER_7,CLUSTER_3
fit_resid_df,"pandas.DataFrame({'Residual':resid,'Fitted_Value':fitted_y,'Site':ex_data['Site'],'DX':ex_data['DX']})",CLUSTER_7,CLUSTER_3
combat_es,"pandas.DataFrame(model_es,index=features)",CLUSTER_7,CLUSTER_3
unh_es,"pandas.DataFrame(model_unh_es,index=features)",CLUSTER_7,CLUSTER_3
lmm_es,"pandas.DataFrame(lm_model_es,index=features)",CLUSTER_7,CLUSTER_3
models,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
model_params,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
models_unh,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
model_unh_params,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
lm_models,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
lm_model_params,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
data,"pandas.read_csv(""../../input/data.csv"",index_col=0)",CLUSTER_7,CLUSTER_3
harmonized_features,"pandas.read_csv(""harmonized_masked.csv"",index_col=0)",CLUSTER_7,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(ncols=2,nrows=2,figsize=(13,4)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(fitted_y,resid,hue=hue_col,data=fit_resid_df)",CLUSTER_7,CLUSTER_3
ax_vp,"seaborn.violinplot(y=y,x=x,data=vp_data,hue='hue_class',split=True,scale=scale)",CLUSTER_7,CLUSTER_3
ax_h_uh,"seaborn.violinplot(y=y,x=x,data=vp_data,hue='Legend',split=True,scale=scale)",CLUSTER_7,CLUSTER_3
se,math.sqrt(((n1+n2-1),CLUSTER_7,CLUSTER_3
hw_percents,numpy.array(hw_percents),CLUSTER_3,CLUSTER_6
lab_percents,numpy.array(lab_percents),CLUSTER_3,CLUSTER_6
lab_total,numpy.ones(10),CLUSTER_3,CLUSTER_6
ratings,pandas.DataFrame(df.groupby('title'),CLUSTER_7,CLUSTER_8
ratings['Noofraters'],pandas.DataFrame(df.groupby('title'),CLUSTER_7,CLUSTER_8
corr_starwars,"pandas.DataFrame(similar_to_starwars,columns=['CorrelationFactor'])",CLUSTER_7,CLUSTER_8
corr_movie,"pandas.DataFrame(similar_to_movie,columns=['Correlation'])",CLUSTER_7,CLUSTER_8
df,"pandas.merge(df,movie_titles,on='item_id')",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('ml-100k/u.data',sep='\t',names=col_names)",CLUSTER_7,CLUSTER_8
movie_titles,"pandas.read_csv('ml-100k/u.item',sep=""\|"",header=None,engine='python')",CLUSTER_7,CLUSTER_8
admits,pandas.read_csv('admission_data.csv'),CLUSTER_8,CLUSTER_4
prod_long,"pandas.read_csv(""/Users/johannesmauritzen/research/solar_prod/prod_long.csv"")",CLUSTER_7,CLUSTER_3
prod_wide,"pandas.read_csv(""/Users/johannesmauritzen/research/solar_prod/prod_wide.csv"")",CLUSTER_7,CLUSTER_3
"prod_long[""prod_end_date""]","pandas.to_datetime(prod_long[""prod_end_date""])",CLUSTER_7,CLUSTER_3
"prod_wide[""prod_end_date""]","pandas.to_datetime(prod_wide[""prod_end_date""])",CLUSTER_7,CLUSTER_3
"prod_wide[""complete_date""]","pandas.to_datetime(prod_wide[""complete_date""])",CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
self.indexes,numpy.arange(len(self.files),CLUSTER_4,CLUSTER_0
x_flat,numpy.array([vec.flatten(),CLUSTER_4,CLUSTER_0
vecs,numpy.array([get_vec(i),CLUSTER_4,CLUSTER_0
X,"numpy.empty((self.batch_size,*self.dim,self.n_channels)",CLUSTER_4,CLUSTER_0
vec,"numpy.reshape(pred,512)",CLUSTER_4,CLUSTER_0
"sample_x,sample_y",numpy.squeeze(sample_x),CLUSTER_4,CLUSTER_0
pred0,numpy.squeeze(pred[ind]),CLUSTER_4,CLUSTER_0
"embedded_x,embedded_y","numpy.split(embedded_samp,2,axis=1)",CLUSTER_4,CLUSTER_0
"embedded_x,embedded_y,embedded_z","numpy.split(embedded_flat_samp,3,axis=1)",CLUSTER_4,CLUSTER_0
x_train,"numpy.expand_dims(x_train,axis=3)",CLUSTER_4,CLUSTER_0
x_test,"numpy.expand_dims(x_test,axis=3)",CLUSTER_4,CLUSTER_0
"X[i,]",numpy.expand_dims(np.load(file),CLUSTER_4,CLUSTER_0
vec/,numpy.linalg.norm(vec),CLUSTER_4,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=2,init='random',perplexity=400,n_jobs=-1,verbose=1)",CLUSTER_4,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=3,init='random',perplexity=400,n_jobs=-1,verbose=1)",CLUSTER_4,CLUSTER_0
text,"pandas.DataFrame(df[""texts""])",CLUSTER_7,CLUSTER_5
y,pandas.DataFrame(df[0]),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""C:/Users/delll/Desktop/train.csv"",header=None)",CLUSTER_7,CLUSTER_5
df_new,"sklearn.feature_selection.SelectKBest(chi2,k=2)",CLUSTER_7,CLUSTER_5
shuffle,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=9,random_state=6)",CLUSTER_7,CLUSTER_5
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_5
model7,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_5
f1_DTree,"sklearn.metrics.f1_score(pre_DTree,y_test,average=""weighted"")",CLUSTER_7,CLUSTER_5
f1_RandT,"sklearn.metrics.f1_score(pre_RandT,y_test,average=""weighted"")",CLUSTER_7,CLUSTER_5
f1_Voti,"sklearn.metrics.f1_score(pre_Voti,y_test,average=""weighted"")",CLUSTER_7,CLUSTER_5
model1,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_5
svc1,"sklearn.svm.SVC(kernel=""poly"")",CLUSTER_7,CLUSTER_5
model6,"sklearn.svm.SVC(kernel=""rbf"")",CLUSTER_7,CLUSTER_5
DTree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
RandT,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,n_jobs=2,random_state=7)",CLUSTER_7,CLUSTER_5
Voti,sklearn.ensemble.VotingClassifier(estimater),CLUSTER_7,CLUSTER_5
model4,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_5
model5,sklearn.cluster.KMeans(),CLUSTER_7,CLUSTER_5
model8,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
%timegss,"pandas.read_hdf('../homeworks/gss.hdf5','gss')",CLUSTER_7,CLUSTER_3
df_events,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_10
"X_train_price,X_test_price,y_train_price,y_test_price","sklearn.model_selection.train_test_split(
X_price,y_price,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_10
"X_train_30,X_test_30,y_train_30,y_test_30","sklearn.model_selection.train_test_split(X_30,y_30,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_10
"X_train_90,X_test_90,y_train_90,y_test_90","sklearn.model_selection.train_test_split(X_90,y_90,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_10
"X_train_price,X_test_price,y_train_price,y_test_price","sklearn.model_selection.train_test_split(
X_price,y_price,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_10
time_start,datetime.datetime.utcnow(),CLUSTER_10,CLUSTER_12
time_end,datetime.datetime.utcnow(),CLUSTER_10,CLUSTER_12
coefs,"pandas.Series(index=words,data=weights)",CLUSTER_5,CLUSTER_5
model,"sklearn.pipeline.Pipeline(
[
('vect',TfidfVectorizer()",CLUSTER_5,CLUSTER_5
df_corpus,"pandas.read_pickle(""df_corpus.pkl"")",CLUSTER_0,CLUSTER_5
data_dtm,"pandas.read_pickle(""df_DTM.pkl"")",CLUSTER_0,CLUSTER_5
"unique,counts","numpy.unique(predicted,return_counts=True)",CLUSTER_0,CLUSTER_5
"unique,counts","numpy.unique(predicted,return_counts=True)",CLUSTER_0,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data_dtm,df_corpus['categoria'],test_size=0.4,random_state=1)",CLUSTER_0,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(text_tf,df_corpus['categoria'],test_size=0.4,random_state=123)",CLUSTER_0,CLUSTER_5
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_0,CLUSTER_5
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_0,CLUSTER_5
x,"numpy.expand_dims(x,axis=0)",CLUSTER_12,CLUSTER_9
obj,"pandas.Series(['c','a','d','a','a','b','b','c','c','a','b'])",CLUSTER_8,CLUSTER_2
resp,requests.get(url),CLUSTER_8,CLUSTER_2
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df_m,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df_f,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df_m,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df_f,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
monthly_df,"pandas.DataFrame(
dict((column_name+""_""+period,survey_scenario.simulation.calculate_add(column_name,period)",CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
undecompsed_revdisp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df1,pandas.DataFrame({'revdisp_mensuel_annuel':revdisp_oy.sum(1),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
to_change,pandas.Series(marginal_rate),CLUSTER_1,CLUSTER_3
u_ir_m_rsa_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel_rsa_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_c_ir,"pandas.Series(survey_scenario.simulation.calculate_add('utility_compensated_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_ir_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_ir_a,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_annuel','2009')",CLUSTER_1,CLUSTER_3
weight_1,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_1,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
u_es_c_ir,"pandas.Series(survey_scenario.simulation.calculate_add('utility_es_compensated_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_es_ir_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_es_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_es_ir_a,"pandas.Series(survey_scenario.simulation.calculate_add('utility_es_ir_annuel','2009')",CLUSTER_1,CLUSTER_3
weight_1,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_1,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_1,CLUSTER_3
decote_monthly,"pandas.Series(survey_scenario.simulation.calculate_add(""decote_mensuel_times_12"")",CLUSTER_1,CLUSTER_3
decote_annual,"pandas.Series(survey_scenario.simulation.calculate_add(""decote"")",CLUSTER_1,CLUSTER_3
poids,pandas.Series(weight_foyers),CLUSTER_1,CLUSTER_3
poids,pandas.Series(weight_foyers),CLUSTER_1,CLUSTER_3
lambda_compensation_menage,"pandas.Series(switch_entity('lambda_compensation','menage')",CLUSTER_1,CLUSTER_3
poids_menage,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
poids_menage,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
poids_menage,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
u_ir_m_rsa_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel_rsa_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_c_ir,"pandas.Series(survey_scenario.simulation.calculate_add('utility_compensated_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_ir_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_ir_a,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_annuel','2009')",CLUSTER_1,CLUSTER_3
weight_menages,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
hist1,"((u_ir_m-u_ir_a))[((u_ir_m-u_ir_a))!=0].hist(bins=7000,figsize=(25,12),weights=pandas.Series(weight_menages)",CLUSTER_1,CLUSTER_3
hist2,"((u_c_ir-u_ir_a))[((u_c_ir-u_ir_a))!=0].hist(bins=7000,figsize=(25,12),weights=pandas.Series(weight_menages)",CLUSTER_1,CLUSTER_3
outliers,pandas.Series(np.abs(((u_ir_m-u_ir_a),CLUSTER_1,CLUSTER_3
is_decote_different,pandas.Series(np.abs(decote-decote_mensuel),CLUSTER_1,CLUSTER_3
irpp_mensuel,"pandas.Series(survey_scenario.simulation.calculate(""irpp_mensuel"",'2009-{}'.format(month)",CLUSTER_1,CLUSTER_3
to_change,pandas.Series(marginal_rate),CLUSTER_1,CLUSTER_3
to_change,"pandas.Series(rates.marginal_rate(irpp_test_case,rbg_test_case)",CLUSTER_1,CLUSTER_3
monetary_gain_ir,pandas.Series(monetary_gain_ir),CLUSTER_1,CLUSTER_3
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
diff_in_income,"pandas.Series(
np.abs(survey_scenario.simulation.calculate(""revdisp_mensuel_annuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_money_gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_annuelle+,"pandas.Series(
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_annuelle+,"pandas.Series(
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_annuelle+,"pandas.Series(
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_ir_mensuel_rsa_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp,pandas.Series(gain_m),CLUSTER_1,CLUSTER_3
passage_a_la_retraite,pandas.Series(is_retired),CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['revdisp_mensuel_annuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('revdisp_mensuel_annuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""rev_trav_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""salaire_imposable"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""pen_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""psoc_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""ppe"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""impo_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""retraite_imposable"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,9)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,9)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,9)",CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_m[((df_m.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_m[((df_m.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_f[((df_f.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_f[((df_f.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_m[((df_m.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_m[((df_m.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_f[((df_f.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_f[((df_f.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_f[((df_f.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_f[((df_f.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_m[((df_m.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_m[((df_m.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_f[((df_f.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_f[((df_f.yearly_income>0),CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((1,1)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(15,5)",CLUSTER_1,CLUSTER_3
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_1,CLUSTER_3
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_1,CLUSTER_3
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(nb_subplots_lines,2,sharey=True,figsize=(20,15)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(15,5)",CLUSTER_1,CLUSTER_3
"fig,axe","matplotlib.pyplot.subplots(6,2,figsize=(20,20)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(nb_subplots_lines,2,sharey=True,figsize=(20,15)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(20,7)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(20,7)",CLUSTER_1,CLUSTER_3
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_1,CLUSTER_3
ax2,matplotlib.pyplot.twinx(),CLUSTER_1,CLUSTER_3
ax2,matplotlib.pyplot.twinx(),CLUSTER_1,CLUSTER_3
ax2,matplotlib.pyplot.twinx(),CLUSTER_1,CLUSTER_3
ax2,matplotlib.pyplot.twinx(),CLUSTER_1,CLUSTER_3
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_1,CLUSTER_3
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_1,CLUSTER_3
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_1,CLUSTER_3
a,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_3
b,"numpy.array([True,True,False])",CLUSTER_1,CLUSTER_3
month_income,numpy.zeros(simulation.persons.count),CLUSTER_1,CLUSTER_3
month_income,numpy.zeros(simulation.persons.count),CLUSTER_1,CLUSTER_3
month_income,numpy.zeros(simulation.persons.count),CLUSTER_1,CLUSTER_3
month_rbg,numpy.zeros(59874),CLUSTER_1,CLUSTER_3
month_rbg,numpy.zeros(59874),CLUSTER_1,CLUSTER_3
below_collection_thrshld,"numpy.zeros(weight_foyers.shape[0],dtype=bool)",CLUSTER_1,CLUSTER_3
monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_money_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
mean_gain,numpy.zeros(1),CLUSTER_1,CLUSTER_3
mean_gain,numpy.zeros(1),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
mean_gain,numpy.zeros(1),CLUSTER_1,CLUSTER_3
mean_gain,numpy.zeros(1),CLUSTER_1,CLUSTER_3
monetary_gain_ir_rsa,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
c,numpy.zeros(1),CLUSTER_1,CLUSTER_3
is_retired,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_inactive,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_retired,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_inactive,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_retire_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
target_array,numpy.empty(entity.count),CLUSTER_1,CLUSTER_3
target_array,numpy.empty(entity.count),CLUSTER_1,CLUSTER_3
target_array,numpy.empty(simulation.persons.count),CLUSTER_1,CLUSTER_3
target_array,numpy.empty(simulation.persons.count),CLUSTER_1,CLUSTER_3
target_array_by_role[role],"target_array=numpy.empty(entity.count,dtype='int64')",CLUSTER_1,CLUSTER_3
target_array_by_role[role],"target_array=numpy.empty(entity.count,dtype=array.dtype)",CLUSTER_1,CLUSTER_3
u_monetary_gain_ir+,"numpy.mean(
(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_monetary_gain+,"numpy.mean(
pd.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_monetary_gain_ir+,"numpy.mean(
(survey_scenario.simulation.calculate(""utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_monetary_gain+,"numpy.mean(
pd.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_1,CLUSTER_3
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_1,CLUSTER_3
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_1,CLUSTER_3
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_1,CLUSTER_3
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_1,CLUSTER_3
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_1,CLUSTER_3
age,numpy.floor(agm/12),CLUSTER_1,CLUSTER_3
"count,division",numpy.histogram(df[(df.yearly_income>0),CLUSTER_1,CLUSTER_3
bins,"numpy.histogram(np.hstack((winners,loosers)",CLUSTER_1,CLUSTER_3
bins,"numpy.histogram(np.hstack((winners,loosers)",CLUSTER_1,CLUSTER_3
bins,"numpy.histogram(np.hstack((weight_1,weight_2)",CLUSTER_1,CLUSTER_3
bins,numpy.histogram(np.hstack(((u_ir_m-u_ir_a),CLUSTER_1,CLUSTER_3
bins,numpy.histogram(np.hstack(((u_es_ir_m-u_es_ir_a),CLUSTER_1,CLUSTER_3
bins,numpy.histogram(np.hstack(((u_ir_m-u_ir_a),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('grades.csv'),CLUSTER_1,CLUSTER_9
output,"matplotlib.pyplot.hist([chi_squared_df2,chi_squared_df5],bins=50,histtype='step',
label=['2degreesoffreedom','5degreesoffreedom'])",CLUSTER_1,CLUSTER_9
start_time,time.time(),CLUSTER_5,CLUSTER_1
start,time.time(),CLUSTER_5,CLUSTER_1
end,time.time(),CLUSTER_5,CLUSTER_1
start,time.time(),CLUSTER_5,CLUSTER_1
end,time.time(),CLUSTER_5,CLUSTER_1
time_taken_list,numpy.array(time_taken_list),CLUSTER_5,CLUSTER_1
vectors,numpy.asarray(vectors),CLUSTER_5,CLUSTER_1
labels,numpy.asarray(labels),CLUSTER_5,CLUSTER_1
vectors,numpy.asarray(vectors),CLUSTER_5,CLUSTER_1
time_mean,numpy.mean(time_taken_list),CLUSTER_5,CLUSTER_1
time_std,numpy.std(time_taken_list),CLUSTER_5,CLUSTER_1
train_times_table,pandas.DataFrame(train_time_values),CLUSTER_5,CLUSTER_1
tsne,"sklearn.manifold.TSNE(n_components=num_dimensions,random_state=0)",CLUSTER_5,CLUSTER_1
x,"numpy.arange(-1,200)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-10,10,1000)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(0,1,100002)",CLUSTER_7,CLUSTER_8
values_A,numpy.hstack(([0]*(1055-28),CLUSTER_7,CLUSTER_8
values_B,numpy.hstack(([0]*(1057-45),CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
h,"matplotlib.pyplot.hist(y,bins=range(48)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(5,3.75)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_7,CLUSTER_8
deltas,pandas.Series(delta_distribution),CLUSTER_7,CLUSTER_8
deltas2,pandas.Series(delta_distribution2),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_null,pandas.Series(x_null),CLUSTER_7,CLUSTER_8
deltas,pandas.Series(delta_distribution),CLUSTER_7,CLUSTER_8
dist,"scipy.stats.beta(a,b)",CLUSTER_7,CLUSTER_8
dist,"scipy.stats.binom(n,b)",CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(1),CLUSTER_1,CLUSTER_3
"fig,ax1",matplotlib.pyplot.subplots(dpi=300),CLUSTER_1,CLUSTER_3
MAC270,"pandas.DataFrame(Student_list,columns=['Student_name','Age','Gender','City','Major','Test_score'])",CLUSTER_1,CLUSTER_3
X,numpy.array(train_image),CLUSTER_5,CLUSTER_5
y,"numpy.array(train.drop(['Id','Genre'],axis=1)",CLUSTER_5,CLUSTER_5
classes,numpy.array(train.columns[2:]),CLUSTER_5,CLUSTER_5
classes,numpy.array(train.columns[2:]),CLUSTER_5,CLUSTER_5
classes,numpy.array(train.columns[2:]),CLUSTER_5,CLUSTER_5
classes,numpy.array(train.columns[2:]),CLUSTER_5,CLUSTER_5
top_3,numpy.argsort(proba[0]),CLUSTER_5,CLUSTER_5
top_3,numpy.argsort(proba[0]),CLUSTER_5,CLUSTER_5
top_3,numpy.argsort(proba[0]),CLUSTER_5,CLUSTER_5
top_3,numpy.argsort(proba[0]),CLUSTER_5,CLUSTER_5
train,pandas.read_csv('./Multi_Label_dataset/train.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42,test_size=0.1)",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv('ex2data1.txt',sep="","",header=None)",CLUSTER_5,CLUSTER_1
X,"numpy.array(data.iloc[:,0:2])",CLUSTER_5,CLUSTER_1
y,"numpy.array(data.iloc[:,2:3])",CLUSTER_5,CLUSTER_1
y_Pred,"numpy.where(y_Pred<=0.654,0,1)",CLUSTER_5,CLUSTER_1
z,"numpy.dot(X,self.theta)",CLUSTER_5,CLUSTER_1
z,"numpy.dot(X,coeff)",CLUSTER_5,CLUSTER_1
self.theta,numpy.ones(X.shape[1]),CLUSTER_5,CLUSTER_1
"xTrain,xTest,yTrain,yTest","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_1
results,"sklearn.metrics.confusion_matrix(true_y,pred_y)",CLUSTER_5,CLUSTER_1
df,"pandas.read_csv(os.getenv(""PUIDATA"")",CLUSTER_8,CLUSTER_11
df['date'],pandas.to_datetime(df['starttime']),CLUSTER_8,CLUSTER_11
df_1['birthyear'],pandas.to_numeric(df_1['birthyear']),CLUSTER_8,CLUSTER_11
error_o,numpy.sqrt(counts_o),CLUSTER_8,CLUSTER_11
error_u,numpy.sqrt(counts_u),CLUSTER_8,CLUSTER_11
error_o,numpy.sqrt(counts_o),CLUSTER_8,CLUSTER_11
error_u,numpy.sqrt(counts_u),CLUSTER_8,CLUSTER_11
puidata,"os.getenv(""PUIDATA"")",CLUSTER_8,CLUSTER_11
puidata,"os.getenv(""PUIDATA"")",CLUSTER_8,CLUSTER_11
off_m,numpy.array([df.valuesfordfinoff_plays]),CLUSTER_7,CLUSTER_5
def_m,numpy.array([df.valuesfordfindef_plays]),CLUSTER_7,CLUSTER_5
rus_m,numpy.array([df.valuesfordfinrus_plays]),CLUSTER_7,CLUSTER_5
y_train,"numpy.array(list(map(pdf,y_train.clip(y_min,y_max)",CLUSTER_7,CLUSTER_5
y_test,"numpy.array(list(map(pdf,y_test)",CLUSTER_7,CLUSTER_5
off_def,"numpy.concatenate([off_def_rel_comp,off_def_ed],axis=3)",CLUSTER_7,CLUSTER_5
def_rus,"numpy.concatenate([def_rus_rel_comp,def_rus_ed],axis=3)",CLUSTER_7,CLUSTER_5
x,"numpy.concatenate(features,axis=3)",CLUSTER_7,CLUSTER_5
dir_rad,numpy.deg2rad(data.Dir),CLUSTER_7,CLUSTER_5
off_def_ed,"numpy.sqrt(np.square(off_def_rel_comp[:,:,:,:2])",CLUSTER_7,CLUSTER_5
def_rus_ed,"numpy.sqrt(np.square(def_rus_rel_comp[:,:,:,:2])",CLUSTER_7,CLUSTER_5
off_m,"numpy.expand_dims(off_m,axis=def_axis)",CLUSTER_7,CLUSTER_5
def_m,"numpy.expand_dims(def_m,axis=off_axis)",CLUSTER_7,CLUSTER_5
rus_m,"numpy.expand_dims(rus_m,off_axis)",CLUSTER_7,CLUSTER_5
rus_m,"numpy.expand_dims(rus_m,def_axis)",CLUSTER_7,CLUSTER_5
off_def_ed,"numpy.expand_dims(off_def_ed,3)",CLUSTER_7,CLUSTER_5
def_rus_ed,"numpy.expand_dims(def_rus_ed,3)",CLUSTER_7,CLUSTER_5
hist,pandas.DataFrame(history.history),CLUSTER_7,CLUSTER_5
raw_data,"pandas.read_csv(""../data/fe_data.csv"",index_col=[1])",CLUSTER_7,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(16,8)",CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y)",CLUSTER_7,CLUSTER_5
missing_data,"pandas.concat([total,percent],axis=1,keys=['Total','Percent'])",CLUSTER_7,CLUSTER_11
listings,"pandas.merge(listings,listings_details[target_columns],on='id',how='left')",CLUSTER_7,CLUSTER_11
listings,"pandas.read_csv(""Desktop/Asheville/listings.csv"",index_col=""id"")",CLUSTER_7,CLUSTER_11
listings_details,"pandas.read_csv(""Desktop/Asheville/listings_details.csv"",index_col=""id"",low_memory=False)",CLUSTER_7,CLUSTER_11
reviews,"pandas.read_csv(""Desktop/Asheville/reviews.csv"")",CLUSTER_7,CLUSTER_11
reviews_details,"pandas.read_csv(""Desktop/Asheville/reviews_details.csv"")",CLUSTER_7,CLUSTER_11
neighbourhoods,"pandas.read_csv(""Desktop/Asheville/neighbourhoods.csv"")",CLUSTER_7,CLUSTER_11
calendar,"pandas.read_csv(""Desktop/Asheville/calendar.csv"")",CLUSTER_7,CLUSTER_11
calendar_new['date'],pandas.to_datetime(calendar_new['date']),CLUSTER_7,CLUSTER_11
calendar['date'],pandas.to_datetime(calendar['date']),CLUSTER_7,CLUSTER_11
calendar['date'],pandas.to_datetime(calendar['date']),CLUSTER_7,CLUSTER_11
listings['host_response_rate'],pandas.to_numeric(listings['host_response_rate'].str.strip('%'),CLUSTER_7,CLUSTER_11
entries,os.listdir('Desktop/Asheville/'),CLUSTER_7,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,15)",CLUSTER_7,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_7,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_11
dfountput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','

forkey,valueindftest[4].items()",CLUSTER_7,CLUSTER_8
Guangzhou,"pandas.read_csv(""D:/Math546Timeseries/finalprojects/PM2.5DataofFiveChineseCitiesDataSet/GuangzhouPM20100101_20151231.csv"")",CLUSTER_7,CLUSTER_8
Guangzhou['Time'],pandas.to_datetime(Guangzhou['year'].map(str),CLUSTER_7,CLUSTER_8
by_hour.index,"pandas.to_datetime(by_hour.index,
format='%d-%m-%Y%H:%M:%S')",CLUSTER_7,CLUSTER_8
data_13,by_hour[(by_hour['Time']>=pandas.to_datetime('20140101030000'))&(by_hour['Time']<=pandas.to_datetime('20151231030000'),CLUSTER_7,CLUSTER_8
data,by_hour[(by_hour['Time']>=pandas.to_datetime('20140101030000'))&(by_hour['Time']<=pandas.to_datetime('20140201030000'),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(9,6)",CLUSTER_7,CLUSTER_8
orig,"matplotlib.pyplot.plot(timeseries,color='blue',label='Original')",CLUSTER_7,CLUSTER_8
mean,"matplotlib.pyplot.plot(rolmean,color='red',label='Rollingmean')",CLUSTER_7,CLUSTER_8
std,"matplotlib.pyplot.plot(rolstd,color='black',label='Rollingstd')",CLUSTER_7,CLUSTER_8
orig,"matplotlib.pyplot.plot(test,color='blue',label='Original')",CLUSTER_7,CLUSTER_8
pred,"matplotlib.pyplot.plot(predict_ARMA,color='red',label='Prediction')",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(20,5)",CLUSTER_7,CLUSTER_8
anc_imgs,"numpy.array(anc_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
pos_imgs,"numpy.array(pos_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
neg_imgs,"numpy.array(neg_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
anc_imgs,"numpy.array(anc_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
pos_imgs,"numpy.array(pos_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
neg_imgs,"numpy.array(neg_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
tmp_imgs,"numpy.array(tmp_imgs,dtype=np.float32)",CLUSTER_2,CLUSTER_0
tmp_imgs,"numpy.array(tmp_imgs,dtype=np.float32)",CLUSTER_2,CLUSTER_0
tmp_imgs,"numpy.array(tmp_imgs,dtype=np.float32)",CLUSTER_2,CLUSTER_0
zeros,"numpy.zeros((batch_size,3,1)",CLUSTER_2,CLUSTER_0
zeros,"numpy.zeros((batch_size,3,1)",CLUSTER_2,CLUSTER_0
train_imgs,numpy.zeros(shape=(len(train_df),CLUSTER_2,CLUSTER_0
val_imgs,numpy.zeros(shape=(len(val_df),CLUSTER_2,CLUSTER_0
test_imgs,numpy.zeros(shape=(len(test_df),CLUSTER_2,CLUSTER_0
lr_reducer,ReduceLROnPlateau(factor=numpy.sqrt(0.1),CLUSTER_2,CLUSTER_0
train_df,pandas.read_csv('./data/triplet/train.csv'),CLUSTER_2,CLUSTER_0
val_df,pandas.read_csv('./data/triplet/validation.csv'),CLUSTER_2,CLUSTER_0
test_df,pandas.read_csv('./data/triplet/test.csv'),CLUSTER_2,CLUSTER_0
train_df,pandas.read_csv('./data/triplet/train.csv'),CLUSTER_2,CLUSTER_0
val_df,pandas.read_csv('./data/triplet/validation.csv'),CLUSTER_2,CLUSTER_0
test_df,pandas.read_csv('./data/triplet/test.csv'),CLUSTER_2,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,7)",CLUSTER_2,CLUSTER_0
data,"pandas.read_csv(""data.tsv"",sep=""\t"")",CLUSTER_5,CLUSTER_5
imputer,sklearn.impute.SimpleImputer(strategy='median'),CLUSTER_5,CLUSTER_5
labelencoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
"l,o",sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
n_inside,numpy.sum(circle(x_points),CLUSTER_3,CLUSTER_6
x_array,"numpy.linspace(0,1,100)",CLUSTER_3,CLUSTER_6
k_array,"numpy.linspace(0,20,100)",CLUSTER_3,CLUSTER_6
importances_rf,"pandas.Series(rf.feature_importances_,index=x.columns)",CLUSTER_7,CLUSTER_8
importances_rf_best,"pandas.Series(rf_best.feature_importances_,index=x.columns)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('spotify_dat.csv'),CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=200,min_samples_leaf=5,random_state=SEED,n_jobs=-1)",CLUSTER_7,CLUSTER_8
rf2,sklearn.ensemble.RandomForestRegressor(random_state=SEED),CLUSTER_7,CLUSTER_8
rf_best,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,min_samples_leaf=1,max_depth=4,
random_state=SEED,n_jobs=-1)",CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
gb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=4,n_estimators=400,random_state=SEED)",CLUSTER_7,CLUSTER_8
dt,"sklearn.tree.DecisionTreeRegressor(max_depth=6,min_samples_leaf=5,random_state=3)",CLUSTER_7,CLUSTER_8
CV_rf,"sklearn.model_selection.GridSearchCV(estimator=rf2,param_grid=param_grid,cv=5,n_jobs=-1)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=SEED)",CLUSTER_7,CLUSTER_8
gdf_to_df,pandas.DataFrame(gdf.drop(columns='geometry'),CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame(gdf.drop(['geometry','OBJECTID'],axis=1)",CLUSTER_7,CLUSTER_5
f_imp,"pandas.DataFrame(data={'importance':m.feature_importances_,'features':X_train.columns})",CLUSTER_7,CLUSTER_5
df,pandas.get_dummies(df),CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(30,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(10,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(15,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(25,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(20,10)",CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
geojson,requests.get(url),CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,n_jobs=-2)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=5,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=10,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=25,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=25,max_features=0.5,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=25,max_features=0.5,min_samples_split=0.1)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=25,max_features=0.5,min_samples_split=0.1,oob_score=True)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df.drop(['fatalCount','OBJECTID_1','crashSever','lons','meshblockI','areaUnitID','crashFinan','tlaID','lats','seriousInj','crashRPSH','crashLoc_1','minorInjur','northing','crashSHDes','cornerRoad','crashRPDis','crashDista','crashRPRS','tlaName','easting'],axis=1)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df_imp,y,test_size=0.33,random_state=42)",CLUSTER_7,CLUSTER_5
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=4,shuffle=True)",CLUSTER_5,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=4,shuffle=True)",CLUSTER_5,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=4,shuffle=True)",CLUSTER_5,CLUSTER_0
tick_marks,numpy.arange(len(classes),CLUSTER_5,CLUSTER_0
cm,numpy.zeros((len(experiments),CLUSTER_5,CLUSTER_0
train_results,"numpy.empty((train_samples,num_models)",CLUSTER_5,CLUSTER_0
val_results,"numpy.empty((val_samples,num_models)",CLUSTER_5,CLUSTER_0
train_results,"numpy.empty((train_samples,num_models)",CLUSTER_5,CLUSTER_0
val_results,"numpy.empty((test_samples,num_models)",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val[0].round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val[0].round()",CLUSTER_5,CLUSTER_0
cm_fold,"sklearn.metrics.confusion_matrix(target_val,predict_val[0].round()",CLUSTER_5,CLUSTER_0
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=10),CLUSTER_5,CLUSTER_0
clf,sklearn.ensemble.AdaBoostClassifier(n_estimators=10),CLUSTER_5,CLUSTER_0
clf,sklearn.ensemble.GradientBoostingClassifier(n_estimators=10),CLUSTER_5,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_5,CLUSTER_0
svc,"sklearn.svm.LinearSVC(class_weight='balanced',verbose=1)",CLUSTER_5,CLUSTER_0
exp_df,pandas.DataFrame(experiments),CLUSTER_5,CLUSTER_0
results,"pandas.DataFrame(np.concatenate([val_results,target_val_ts.values.reshape(-1,1)",CLUSTER_5,CLUSTER_0
results,pandas.DataFrame(np.concatenate([loader.get_test_index(),CLUSTER_5,CLUSTER_0
results,pandas.DataFrame({'SK_ID_CURR':loader.get_test_index(),CLUSTER_5,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(class_weight='balanced',C=0.01)",CLUSTER_5,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(class_weight='balanced'),CLUSTER_5,CLUSTER_0
df_new,pandas.DataFrame(),CLUSTER_0,CLUSTER_0
df_train,"pandas.read_csv(train_path,encoding='utf-8')",CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv(test_path,encoding='utf-8')",CLUSTER_0,CLUSTER_0
data_train,pandas.read_csv(train_seg_path),CLUSTER_0,CLUSTER_0
data_test,pandas.read_csv(test_seg_path),CLUSTER_0,CLUSTER_0
data_train_merge,pandas.read_csv(train_seg_merge_path),CLUSTER_0,CLUSTER_0
data_test_merge,pandas.read_csv(test_seg_merge_path),CLUSTER_0,CLUSTER_0
encoder_embedding,"numpy.zeros((num_input_en,embed_size)",CLUSTER_0,CLUSTER_0
decoder_embedding,"numpy.zeros((num_input_de,embed_size)",CLUSTER_0,CLUSTER_0
attention_plot,"numpy.zeros((max_length_targ,max_length_inp)",CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_0,CLUSTER_0
w,"re.sub(r""([?.!,¿])",CLUSTER_0,CLUSTER_0
w,"re.sub(r'[""""]+',"""",w)",CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_0,CLUSTER_0
"input_tensor_train,input_tensor_val,target_tensor_train,target_tensor_val","sklearn.model_selection.train_test_split(tensor_input[:dataset_num],tensor_target[:dataset_num],test_size=0.2)",CLUSTER_0,CLUSTER_0
t1e,time.time(),CLUSTER_4,CLUSTER_7
t1,time.time(),CLUSTER_4,CLUSTER_7
t2,time.time(),CLUSTER_4,CLUSTER_7
t2e,time.time(),CLUSTER_4,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(6,6,sharex=True,sharey=True,figsize=(5,5)",CLUSTER_4,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(figsize=figsize,nrows=nrows,ncols=ncols,
sharey=True,sharex=True)",CLUSTER_4,CLUSTER_7
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_7
idx,numpy.arange(num_examples),CLUSTER_4,CLUSTER_7
self.label_mask,numpy.zeros_like(self.train_y),CLUSTER_4,CLUSTER_7
self.train_x,"numpy.rollaxis(self.train_x,3)",CLUSTER_4,CLUSTER_7
self.valid_x,"numpy.rollaxis(self.valid_x,3)",CLUSTER_4,CLUSTER_7
self.test_x,"numpy.rollaxis(self.test_x,3)",CLUSTER_4,CLUSTER_7
trainset,scipy.io.loadmat(data_dir+'train_32x32.mat'),CLUSTER_4,CLUSTER_7
testset,scipy.io.loadmat(data_dir+'test_32x32.mat'),CLUSTER_4,CLUSTER_7
df,"pandas.get_dummies(df,columns=['weather','shape'])",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(data_location,low_memory=False)",CLUSTER_7,CLUSTER_5
df['reportedTimestamp'],pandas.to_datetime(df['reportedTimestamp']),CLUSTER_7,CLUSTER_5
df['eventDate'],pandas.to_datetime(df['eventDate']),CLUSTER_7,CLUSTER_5
ax.set(xticks,numpy.arange(cm.shape[1]),CLUSTER_7,CLUSTER_5
yticks,numpy.arange(cm.shape[0]),CLUSTER_7,CLUSTER_5
predictions,numpy.array(predictions),CLUSTER_7,CLUSTER_5
class_names,"numpy.array(['Unexplained','Explained','Probable'])",CLUSTER_7,CLUSTER_5
scores,"precision_recall_fscore_support(y_test,y_pred,average='macro',labels=numpy.unique(y_pred)",CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_7,CLUSTER_5
scores,"sklearn.metrics.precision_recall_fscore_support(y_test,y_pred,average='macro',labels=np.unique(y_pred)",CLUSTER_7,CLUSTER_5
acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_5
posts,"pandas.DataFrame(posts,columns=['title','score','id','subreddit','url','num_comments','body','created','user'])",CLUSTER_8,CLUSTER_4
user_df,"pandas.DataFrame({'Users':d_users,'Karma':d_karma})",CLUSTER_8,CLUSTER_4
d_frame,pandas.DataFrame(d_posts),CLUSTER_8,CLUSTER_4
posts,"pandas.DataFrame(posts,columns=['title','score','id','subreddit','url','num_comments','body','created','user'])",CLUSTER_8,CLUSTER_4
c_user_df,"pandas.DataFrame({'Users':c_users,'Karma':c_karma})",CLUSTER_8,CLUSTER_4
Depressed,"pandas.DataFrame({'Text':d_normalized_posts,'Category':""Depressed""})",CLUSTER_8,CLUSTER_4
Control,"pandas.DataFrame({'Text':c_normalized_posts,'Category':""Control""})",CLUSTER_8,CLUSTER_4
Full,"pandas.concat([Depressed,Control])",CLUSTER_8,CLUSTER_4
remove_list,"pandas.read_csv(""Depression_related.csv"")",CLUSTER_8,CLUSTER_4
new_word,"re.sub(r'[^\w\s]','',word)",CLUSTER_8,CLUSTER_4
x,numpy.array(selected['MappedFixationPointX']),CLUSTER_7,CLUSTER_5
y,numpy.array(selected['MappedFixationPointY']),CLUSTER_7,CLUSTER_5
Eyetracking_data,"pandas.read_csv('metro_data.csv',encoding='latin1',sep="";"")",CLUSTER_7,CLUSTER_5
new_data,"pandas.DataFrame(columns=['STATE/UT','YEAR','TIME','ACCIDENTS'],index=np.arange(10000)",CLUSTER_5,CLUSTER_5
data,pandas.read_csv('road-accidents-in-india/only_road_accidents_data3.csv'),CLUSTER_5,CLUSTER_5
data,pandas.read_csv('road-accidents-in-india/only_road_accidents_data3.csv'),CLUSTER_5,CLUSTER_5
new_data,"pd.DataFrame(columns=['STATE/UT','YEAR','TIME','ACCIDENTS'],index=numpy.arange(10000)",CLUSTER_5,CLUSTER_5
X_data,numpy.array([t[0]fortine]),CLUSTER_5,CLUSTER_5
Y_data,numpy.array([y[1]foryine]),CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
df,pandas.read_csv('data.csv'),CLUSTER_8,CLUSTER_1
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""weatherHistory.csv"")",CLUSTER_5,CLUSTER_5
mean_img,"numpy.mean(
cm.load(fl[:-12]+'mmap')",CLUSTER_4,CLUSTER_11
mean_img,"numpy.mean(
cm.load(fl[:-12]+'.tif')",CLUSTER_4,CLUSTER_11
mean_img,"numpy.mean(
cm.load(fl[:-12]+'hdf5')",CLUSTER_4,CLUSTER_11
bord_px_rig,numpy.ceil(np.max(mc.shifts_rig),CLUSTER_4,CLUSTER_11
bord_px_els,numpy.ceil(np.maximum(np.max(np.abs(mc.x_shifts_els),CLUSTER_4,CLUSTER_11
final_size,"numpy.subtract(mc.total_template_els.shape,2*bord_px_els)",CLUSTER_4,CLUSTER_11
"lq,hq","numpy.nanpercentile(mean_img,[.5,99.5])",CLUSTER_4,CLUSTER_11
t0,time.time(),CLUSTER_4,CLUSTER_11
axes,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
axes,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
bt_v,"pandas.read_csv(""application_data/IS_variable.csv"")",CLUSTER_5,CLUSTER_1
pkg_matrix,"numpy.zeros((4,4)",CLUSTER_5,CLUSTER_1
ram_matrix,"numpy.zeros((4,4)",CLUSTER_5,CLUSTER_1
total_matrix,"numpy.zeros((4,4)",CLUSTER_5,CLUSTER_1
pkg_var_matrix,"numpy.zeros((4,26)",CLUSTER_5,CLUSTER_1
ram_var_matrix,"numpy.zeros((4,26)",CLUSTER_5,CLUSTER_1
total_var_matrix,"numpy.zeros((4,26)",CLUSTER_5,CLUSTER_1
pkg_matrix,"sklearn.metrics.confusion_matrix(bt_v['a'],bt_v['Perf_node01_power_energy_pkg_'])",CLUSTER_5,CLUSTER_1
ram_matrix,"sklearn.metrics.confusion_matrix(bt_v['b'],bt_v['Perf_node01_power_energy_ram_'])",CLUSTER_5,CLUSTER_1
total_matrix,"sklearn.metrics.confusion_matrix(bt_v['c'],bt_v['Perf_node01_power_energy_total_'])",CLUSTER_5,CLUSTER_1
tem_matrix,"sklearn.metrics.confusion_matrix(bt_v['Perf_node01_power_energy_pkg_'],bt_v['variable'])",CLUSTER_5,CLUSTER_1
tem_matrix,"sklearn.metrics.confusion_matrix(bt_v['Perf_node01_power_energy_ram_'],bt_v['variable'])",CLUSTER_5,CLUSTER_1
tem_matrix,"sklearn.metrics.confusion_matrix(bt_v['Perf_node01_power_energy_total_'],bt_v['variable'])",CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame(raw_data,columns=['first_name','last_name','age','preTestScore','postTestScore'])",CLUSTER_8,CLUSTER_3
df,pandas.read_csv('../data/example.csv'),CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',header=None)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',names=['UID','FirstName','LastName','Age','Pre-TestScore','Post-TestScore'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',index_col='UID',names=['UID','FirstName','LastName','Age','Pre-TestScore','Post-TestScore'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',index_col=['FirstName','LastName'],names=['UID','FirstName','LastName','Age','Pre-TestScore','Post-TestScore'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',na_values=['.'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',na_values=sentinels)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',na_values=sentinels,skiprows=3)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',thousands=',')",CLUSTER_8,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
p,"numpy.arange(0,5.1,0.1)",CLUSTER_1,CLUSTER_3
year_options,pandas.DatetimeIndex(df.reset_index(),CLUSTER_11,CLUSTER_3
"df[""Date_Y""]","pandas.DatetimeIndex(df[""Date""])",CLUSTER_11,CLUSTER_3
df,"pandas.read_sql_query(""SELECT*FROMfinal_test_dataWHEREDate"",conn)",CLUSTER_11,CLUSTER_3
df,"pandas.read_sql_query(""SELECT*FROM{}"".format(datasetD)",CLUSTER_11,CLUSTER_3
df_ta,"pandas.read_sql_query(""SELECT*FROM{}WHEREDate>='{}'ANDDate<='{}'"".format(datasetD,start_date,end_date)",CLUSTER_11,CLUSTER_3
df_raw_prices,"pandas.read_sql_query(""SELECT*FROMraw_pricesWHEREDate>='{}'ANDDate<='{}'"".format(start_date,end_date)",CLUSTER_11,CLUSTER_3
df['Date'],pandas.to_datetime(df['Date']),CLUSTER_11,CLUSTER_3
date,pandas.to_datetime(clickData['points'][0]['customdata']),CLUSTER_11,CLUSTER_3
df_ta['Date'],pandas.to_datetime(df_ta['Date']),CLUSTER_11,CLUSTER_3
df_raw_prices['Date'],pandas.to_datetime(df_raw_prices['Date']),CLUSTER_11,CLUSTER_3
df,pandas.read_csv('data_processed.csv'),CLUSTER_5,CLUSTER_5
trainingSet,pandas.read_csv('trainingSet.csv'),CLUSTER_5,CLUSTER_5
testSet,pandas.read_csv('testSet.csv'),CLUSTER_5,CLUSTER_5
Y,numpy.array(trainingSet['Value']),CLUSTER_5,CLUSTER_5
X,numpy.array(trainSet_X),CLUSTER_5,CLUSTER_5
Y,numpy.array(testSet['Value']),CLUSTER_5,CLUSTER_5
X,numpy.array(testSet_X),CLUSTER_5,CLUSTER_5
CM,"numpy.zeros((4,4)",CLUSTER_5,CLUSTER_5
clf,"sklearn.neighbors.KNeighborsClassifier(k,weights='uniform')",CLUSTER_5,CLUSTER_5
clf,"sklearn.neighbors.KNeighborsClassifier(5,weights='uniform')",CLUSTER_5,CLUSTER_5
kf,sklearn.model_selection.KFold(n_splits=5),CLUSTER_5,CLUSTER_5
customer,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
pca_df,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df,"pandas.get_dummies(df,prefix_sep='_',drop_first=False)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('customer2.csv'),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=i,init='k-means++',)",CLUSTER_7,CLUSTER_8
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_7,CLUSTER_8
suicides_sgmales_elderly,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='male'),CLUSTER_11,CLUSTER_3
suicides_sgfemales_elderly,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='female'),CLUSTER_11,CLUSTER_3
suicides_sgmales_seniors,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='male'),CLUSTER_11,CLUSTER_3
suicides_sgfemales_seniors,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='female'),CLUSTER_11,CLUSTER_3
suicides_sgmales_adults,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='male'),CLUSTER_11,CLUSTER_3
suicides_sgfemales_adults,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='female'),CLUSTER_11,CLUSTER_3
suicides,"pandas.read_csv('WHO_suicide_statistics.csv',sep=',')",CLUSTER_11,CLUSTER_3
sgdata,"pandas.read_csv('sg_combineddata.csv',sep=',')",CLUSTER_11,CLUSTER_3
sgdata['Year'],pandas.to_datetime(sgdata.Year),CLUSTER_11,CLUSTER_3
x,"numpy.arange(1,30+0.1,0.1)",CLUSTER_1,CLUSTER_9
x,"numpy.arange(1,30+0.1,0.1)",CLUSTER_1,CLUSTER_9
x2,"numpy.array([a1.x,b1.x])",CLUSTER_1,CLUSTER_9
b,numpy.around(a1.fun[0]),CLUSTER_1,CLUSTER_9
b2,numpy.around(b1.fun),CLUSTER_1,CLUSTER_9
b1,"scipy.optimize.differential_evolution(h,a2)",CLUSTER_1,CLUSTER_9
a1,"scipy.optimize.minimize(h,30,method=""BFGS"")",CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(2,4)",CLUSTER_1,CLUSTER_10
vocab,numpy.array(vectorizer.get_feature_names(),CLUSTER_5,CLUSTER_9
"%timeu,s,v","numpy.linalg.svd(vectors,full_matrices=False)",CLUSTER_5,CLUSTER_9
newsgroups_train,"sklearn.datasets.fetch_20newsgroups(subset='train',categories=categories,remove=remove)",CLUSTER_5,CLUSTER_9
newsgroups_test,"sklearn.datasets.fetch_20newsgroups(subset='test',categories=categories,remove=remove)",CLUSTER_5,CLUSTER_9
clf,"sklearn.decomposition.NMF(n_components=d,random_state=1)",CLUSTER_5,CLUSTER_9
"%timeu,s,v","sklearn.decomposition.randomized_svd(vectors,10)",CLUSTER_5,CLUSTER_9
"%timeU,s,Vh","scipy.linalg.svd(vectors,full_matrices=False)",CLUSTER_5,CLUSTER_9
RMSE,numpy.sqrt(mse),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(""baseballs(1)",CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3,random_state=1)",CLUSTER_7,CLUSTER_8
mae,"sklearn.metrics.mean_absolute_error(y_test,y_pred)",CLUSTER_7,CLUSTER_8
mse,"sklearn.metrics.mean_squared_error(y_test,y_pred)",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame({'Actual':y_test,'Predicted':y_pred})",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv(""http://bit.ly/w-data"")",CLUSTER_5,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,
test_size=0.5,random_state=0)",CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
X,"pandas.DataFrame(boston.data,columns=boston.feature_names)",CLUSTER_5,CLUSTER_1
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_1
testdata,"numpy.zeros([100,1000])",CLUSTER_3,CLUSTER_6
result_tuple,"collections.namedtuple('DDLOutput',['created_table','query'])",CLUSTER_10,CLUSTER_4
series,pandas.Series(np.arange(30),CLUSTER_8,CLUSTER_3
series,pandas.Series(np.arange(10),CLUSTER_8,CLUSTER_3
df_obj,pandas.DataFrame(np.random.rand(36),CLUSTER_8,CLUSTER_3
df_obj_1,pandas.DataFrame(np.arange(36),CLUSTER_8,CLUSTER_3
x,"numpy.arange(1,10)",CLUSTER_7,CLUSTER_3
d,"numpy.matrix(df.iloc[:,7:].fillna(0)",CLUSTER_7,CLUSTER_3
"u,s,vt","numpy.linalg.svd(d-col_means,full_matrices=False)",CLUSTER_7,CLUSTER_3
weights,"pandas.DataFrame({
'labels':df.iloc[:,7:].columns,
'PC1weights':np.array(vt[0,:])",CLUSTER_7,CLUSTER_3
df,pandas.read_csv('https://gist.githubusercontent.com/surajrampure/76bef6c3561b6d99fb87106cb91ef2b1/raw/c19e1300a1f8cc36ba93713261fcdcea00f4e8ed/nba_19_stats.csv'),CLUSTER_7,CLUSTER_3
models,sklearn.multiclass.OneVsRestClassifier(MultinomialNB(),CLUSTER_5,CLUSTER_5
kbest,"sklearn.feature_selection.SelectKBest(chi2,k=30)",CLUSTER_5,CLUSTER_5
cv_pipe,"sklearn.pipeline.Pipeline([
('kbest',SelectKBest(chi2,k=30)",CLUSTER_5,CLUSTER_5
df_submit,"pandas.concat([id_test,pd.DataFrame(Y_test_prob,columns=toxic_classes)",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv('../data/train.csv',na_filter=False)",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv('../data/test.csv',na_filter=False)",CLUSTER_5,CLUSTER_5
res,requests.get('http://www.gutenberg.org/cache/epub/1112/pg1112.txt'),CLUSTER_10,CLUSTER_12
res,requests.get('http://inventwithpython.com/page_that_does_not_exist'),CLUSTER_10,CLUSTER_12
res,requests.get('http://inventwithpython.com/page_that_does_not_exist'),CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':'成都',
'language':'zh-Hans',
'unit':'c'
},timeout=1)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/life/suggestion.json',params={
'key':'mbghskqqeagdjdqt',
'location':'成都',
'language':'zh-Hans',
'unit':'c'
},timeout=1)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':'成都',
'language':'zh-Hans',
'unit':'c'
},timeout=1)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':location,
'language':'zh-Hans',
'unit':'c'
},timeout=60)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':location,
'language':'zh-Hans',
'unit':'c'
},timeout=60)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':location,
'language':'zh-Hans',
'unit':'c'
},timeout=60)",CLUSTER_10,CLUSTER_12
weather_data,json.loads(result.text),CLUSTER_10,CLUSTER_12
weather_data,json.loads(result.text),CLUSTER_10,CLUSTER_12
weather_data,json.loads(result.text),CLUSTER_10,CLUSTER_12
weather_data,json.loads(result),CLUSTER_10,CLUSTER_12
weather_data,json.loads(result),CLUSTER_10,CLUSTER_12
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_5,CLUSTER_10
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_10
df_coeff,pandas.DataFrame(data_col_coeff),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""Advertising.csv"")",CLUSTER_7,CLUSTER_5
grids,seaborn.PairGrid(df),CLUSTER_7,CLUSTER_5
g,seaborn.PairGrid(df),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=1)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_op,y,test_size=0.3,random_state=1)",CLUSTER_7,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
model1,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
test_images_dir,os.listdir('data/test'),CLUSTER_2,CLUSTER_0
train_images,os.listdir('data/train/'+'/images'),CLUSTER_2,CLUSTER_0
train_mask,os.listdir('data/train/'+'/masks'),CLUSTER_2,CLUSTER_0
f,"numpy.array((
[0,-1,0],
[-1,5,-1],
[0,-1,0])",CLUSTER_2,CLUSTER_0
output,"numpy.zeros((iH,iW)",CLUSTER_2,CLUSTER_0
f,"numpy.ones((size,size)",CLUSTER_2,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_2,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_2,CLUSTER_0
ax_orig,"matplotlib.pyplot.subplot2grid(layout,(0,0)",CLUSTER_2,CLUSTER_0
ax_filt,"matplotlib.pyplot.subplot2grid(layout,(0,1)",CLUSTER_2,CLUSTER_0
df_timeseries,pandas.read_csv(response_as_file),CLUSTER_9,CLUSTER_2
r,requests.get(url),CLUSTER_9,CLUSTER_2
features,numpy.array(features),CLUSTER_4,CLUSTER_11
labels,numpy.array(labels),CLUSTER_4,CLUSTER_11
ifeatures,numpy.array(ifeatures),CLUSTER_4,CLUSTER_11
labels,numpy.array(labels),CLUSTER_4,CLUSTER_11
sfeatures,"numpy.array(sfeatures,dtype=float)",CLUSTER_4,CLUSTER_11
canvas,"numpy.zeros((h,2*w+128,3)",CLUSTER_4,CLUSTER_11
fs,numpy.concatenate([mh.features.haralick(img),CLUSTER_4,CLUSTER_11
concatenated,numpy.concatenate(alldescriptors),CLUSTER_4,CLUSTER_11
C,numpy.exp(-2.*(X**2+Y**2),CLUSTER_4,CLUSTER_11
hist,numpy.log1p(hist),CLUSTER_4,CLUSTER_11
allfeatures,"numpy.hstack([sfeatures,ifeatures])",CLUSTER_4,CLUSTER_11
hist,numpy.bincount(pixels.ravel(),CLUSTER_4,CLUSTER_11
clf,"sklearn.pipeline.Pipeline([('preproc',StandardScaler()",CLUSTER_4,CLUSTER_11
clf,"sklearn.pipeline.Pipeline([('preproc',StandardScaler()",CLUSTER_4,CLUSTER_11
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_11
cv,"sklearn.model_selection.KFold(n_splits=5,
shuffle=True,random_state=123)",CLUSTER_4,CLUSTER_11
cv,sklearn.model_selection.LeaveOneOut(),CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(
clf,features,labels,cv=cv)",CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(
clf,features,labels,cv=cv)",CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(
clf,ifeatures,labels,n_jobs=-1,cv=cv)",CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(
clf,sfeatures,labels,cv=cv)",CLUSTER_4,CLUSTER_11
score_SURF_global,"sklearn.model_selection.cross_val_score(
clf,allfeatures,labels,cv=cv)",CLUSTER_4,CLUSTER_11
grid,sklearn.model_selection.GridSearchCV(LogisticRegression(),CLUSTER_4,CLUSTER_11
km,sklearn.cluster.KMeans(k),CLUSTER_4,CLUSTER_11
df,pandas.read_csv('./movie_data.csv'),CLUSTER_0,CLUSTER_1
docs,"numpy.array([
'Thesunisshining',
'Theweatherissweet',
'Thesunisshining,theweatherissweet,andoneandoneistwo'])",CLUSTER_0,CLUSTER_1
idf_is,numpy.log((n_docs+1),CLUSTER_0,CLUSTER_1
text,"re.sub('<[^>]*>','',text)",CLUSTER_0,CLUSTER_1
text,"re.sub('[\W]+','',text.lower()",CLUSTER_0,CLUSTER_1
emoticons,re.findall('(?::|;|=),CLUSTER_0,CLUSTER_1
"parser.add_argument('--hosts',type","list,default=json.loads(os.environ['SM_HOSTS'])",CLUSTER_10,CLUSTER_4
search_range,"numpy.arange(1e-3,10,1e-3)",CLUSTER_4,CLUSTER_11
x_tst_knn_gt,"numpy.zeros((N_tst,N)",CLUSTER_4,CLUSTER_11
dist_gt,numpy.zeros(N),CLUSTER_4,CLUSTER_11
sp_gt,"numpy.zeros((N_tst,N)",CLUSTER_4,CLUSTER_11
nns_len,numpy.zeros(N_tst),CLUSTER_4,CLUSTER_11
sp_approx,"numpy.zeros((N_tst,self.N)",CLUSTER_4,CLUSTER_11
non_nan_index,"numpy.where(x_tst_knn[j,:]>=0)",CLUSTER_4,CLUSTER_11
x_tst_knn,"numpy.ones((N_tst,K)",CLUSTER_4,CLUSTER_11
min_ind,numpy.argmin(y),CLUSTER_4,CLUSTER_11
min_ind,numpy.argmin(y),CLUSTER_4,CLUSTER_11
"x_tst_knn_gt[i_tst,:]",numpy.argsort(dist_gt),CLUSTER_4,CLUSTER_11
dist_rand,"numpy.mean(dist_rand,axis=0)",CLUSTER_4,CLUSTER_11
contrast,"numpy.mean(contrast,axis=0)",CLUSTER_4,CLUSTER_11
dist_knn,"numpy.mean(dist_knn,axis=0)",CLUSTER_4,CLUSTER_11
x_trn,"numpy.reshape(x_trn,(-1,2048)",CLUSTER_4,CLUSTER_11
h,"numpy.floor((np.dot(w,x)",CLUSTER_4,CLUSTER_11
y,"numpy.log(f_h(dist_knn,r)",CLUSTER_4,CLUSTER_11
y,"numpy.log(f_h(1/contrast,r)",CLUSTER_4,CLUSTER_11
x_trn,numpy.vstack(x_trn),CLUSTER_4,CLUSTER_11
nns,numpy.unique(nns),CLUSTER_4,CLUSTER_11
dist_rand,numpy.load('eps0.1/dist_rand.npy'),CLUSTER_4,CLUSTER_11
contrast,numpy.load('eps0.1/contrast.npy'),CLUSTER_4,CLUSTER_11
dist_knn,numpy.load('eps0.1/dist_knn.npy'),CLUSTER_4,CLUSTER_11
dist_gt[i_trn],"numpy.linalg.norm(x_trn[i_trn,:]-x_tst[i_tst,:],2)",CLUSTER_4,CLUSTER_11
sp_err_inf_val,"numpy.linalg.norm(val_sp_gt-sp_approx,ord=np.inf,axis=1)",CLUSTER_4,CLUSTER_11
sp_err_inf_val,"numpy.linalg.norm(sp_gt-sp_approx,ord=np.inf,axis=1)",CLUSTER_4,CLUSTER_11
sp_err_inf_val,"numpy.linalg.norm(sp_gt-sp_approx,ord=np.inf,axis=1)",CLUSTER_4,CLUSTER_11
sp_err_inf_val,"numpy.linalg.norm(val_sp_gt-sp_approx,ord=np.inf,axis=1)",CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
end1,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
val_end1,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
end2,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
val_end2,time.time(),CLUSTER_4,CLUSTER_11
start2,time.time(),CLUSTER_4,CLUSTER_11
end2,time.time(),CLUSTER_4,CLUSTER_11
start5,time.time(),CLUSTER_4,CLUSTER_11
end5,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_build_hash,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_query,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_approx_value,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_build_hash,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_query,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_approx_value,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_query,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_approx_value,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_query,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_approx_value,time.time(),CLUSTER_4,CLUSTER_11
start2,time.time(),CLUSTER_4,CLUSTER_11
end2,time.time(),CLUSTER_4,CLUSTER_11
start5,time.time(),CLUSTER_4,CLUSTER_11
end5,time.time(),CLUSTER_4,CLUSTER_11
rex,re.compile('n[0-9]+'),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_6,CLUSTER_10
filter_vals,"numpy.array([[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1]])",CLUSTER_6,CLUSTER_10
filters,"numpy.array([filter_1,filter_2,filter_3,filter_4])",CLUSTER_6,CLUSTER_10
messages,"pandas.read_csv('SMSSpamCollection',sep='\t',names=['label','message'])",CLUSTER_7,CLUSTER_5
spam_detect_model,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer(analyzer=text_processing)",CLUSTER_7,CLUSTER_5
pipeline2,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer(analyzer=text_processing)",CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame({'lower':lower,'upper':upper,'centre':centre},index=idx)",CLUSTER_8,CLUSTER_9
ls8_df,"pandas.read_csv('LS8OLI.rsr',header=0)",CLUSTER_8,CLUSTER_9
s2a,"pandas.read_csv('S2AMSI.rsr',header=0)",CLUSTER_8,CLUSTER_9
xbar,"numpy.average(s2a['SR_WL'],weights=s2a[col])",CLUSTER_8,CLUSTER_9
target_mean_wavelength,"numpy.average(ls8_df['SR_WL'],weights=ls8_df['coastal'])",CLUSTER_8,CLUSTER_9
target_mean_wavelength,"numpy.average(ls8_df['SR_WL'],weights=ls8_df['coastal'])",CLUSTER_8,CLUSTER_9
spline,"scipy.interpolate.UnivariateSpline(ls8_df['SR_WL'],ls8_df['coastal']-ls8_df['coastal'].max()",CLUSTER_8,CLUSTER_9
spline,"scipy.interpolate.UnivariateSpline(s2a['SR_WL'],s2a[col]-s2a[col].max()",CLUSTER_8,CLUSTER_9
spline,"scipy.interpolate.UnivariateSpline(ls8_df['SR_WL'],ls8_df['cirrus']-ls8_df['cirrus'].max()",CLUSTER_8,CLUSTER_9
spline,"scipy.interpolate.UnivariateSpline(ls8_df['SR_WL'],ls8_df['nir']-ls8_df['nir'].max()",CLUSTER_8,CLUSTER_9
df,"pandas.read_csv(""house-votes-84.csv"")",CLUSTER_8,CLUSTER_11
X,"numpy.array([[1,2],
[5,8],
[1.5,1.8],
[8,8],
[1,0.6],
[9,11]])",CLUSTER_5,CLUSTER_9
xx,"numpy.linspace(0,12)",CLUSTER_5,CLUSTER_9
df,"pandas.DataFrame(data,
columns=['Country','Capital','Population'])",CLUSTER_5,CLUSTER_9
models,"pandas.DataFrame({
'Model':['LogisticRegression','SupportVectorMachines','KNN',
'RandomForest','NaiveBayes','DecisionTree'],
'Score':[acc_lr,acc_svc,acc_knn,
acc_random_forest,acc_gaussian,acc_decision_tree]})",CLUSTER_5,CLUSTER_9
df,pandas.read_csv(path),CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.5)",CLUSTER_5,CLUSTER_9
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_9
lm,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
kmeans,"sklearn.cluster.KMeans(n_clusters=3,init='k-means++',max_iter=300,n_init=10,random_state=0)",CLUSTER_5,CLUSTER_9
svc,sklearn.svm.SVC(probability=True),CLUSTER_5,CLUSTER_9
clf,"sklearn.svm.SVC(kernel='linear',C=1.0)",CLUSTER_5,CLUSTER_9
h0,"matplotlib.pyplot.plot(xx,yy,'k-',label=""nonweighteddiv"")",CLUSTER_5,CLUSTER_9
acc_svc,"sklearn.metrics.accuracy_score(y_test,predictions_svm)",CLUSTER_5,CLUSTER_9
acc_gaussian,"sklearn.metrics.accuracy_score(y_test,predictions)",CLUSTER_5,CLUSTER_9
acc_knn,"sklearn.metrics.accuracy_score(y_test,predictions_knn)",CLUSTER_5,CLUSTER_9
acc_decision_tree,"sklearn.metrics.accuracy_score(y_test,predictions_dt)",CLUSTER_5,CLUSTER_9
acc_random_forest,"sklearn.metrics.accuracy_score(y_test,predictions_rf)",CLUSTER_5,CLUSTER_9
acc_lr,"sklearn.metrics.accuracy_score(y_test,predictions_lr)",CLUSTER_5,CLUSTER_9
gaussian,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_9
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_5,CLUSTER_9
decision_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_9
random_forest,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_5,CLUSTER_9
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_9
crimedata_df,"pandas.read_csv(""../Source/crimedata_2017_1.csv"")",CLUSTER_9,CLUSTER_2
"crimedata_df[""DateReported""]","pandas.to_datetime(crimedata_df[""DateReported""])",CLUSTER_9,CLUSTER_2
response,"requests.get(url,params=params)",CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_7,CLUSTER_3
t,"numpy.array([theta_0[i],theta_1[j]])",CLUSTER_7,CLUSTER_3
theta,"numpy.zeros((2,1)",CLUSTER_7,CLUSTER_3
cost_values,numpy.zeros((len(theta_0),CLUSTER_7,CLUSTER_3
error,numpy.dot(X.transpose(),CLUSTER_7,CLUSTER_3
y_pred,numpy.dot(theta.transpose(),CLUSTER_7,CLUSTER_3
theta,numpy.squeeze(theta),CLUSTER_7,CLUSTER_3
theta_0,"numpy.linspace(-10,10,100)",CLUSTER_7,CLUSTER_3
theta_1,"numpy.linspace(-1,4,100)",CLUSTER_7,CLUSTER_3
X,"numpy.append(np.ones((m,1)",CLUSTER_7,CLUSTER_3
data,"pandas.read_csv(""food_truck_data.txt"")",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x='Population',y='Profit',data=data)",CLUSTER_7,CLUSTER_3
counts,collections.Counter(x),CLUSTER_3,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(6,6,)",CLUSTER_6,CLUSTER_10
action,numpy.argmax(q_values.detach(),CLUSTER_6,CLUSTER_10
best_action,numpy.argmax(policy_next_state_values[0].numpy(),CLUSTER_6,CLUSTER_10
average_reward,numpy.mean(results_score[-TARGET_PERIOD:]),CLUSTER_6,CLUSTER_10
state,"numpy.reshape(state,[1,observation_space])",CLUSTER_6,CLUSTER_10
state_next,"numpy.reshape(state_next,[1,observation_space])",CLUSTER_6,CLUSTER_10
action,random.randrange(self.action_space),CLUSTER_6,CLUSTER_10
batch,"random.sample(memory,BATCH_SIZE)",CLUSTER_6,CLUSTER_10
self.memory,collections.deque(maxlen=MEMORY_SIZE),CLUSTER_6,CLUSTER_10
Alfabeto,"numpy.array([""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",
""J"",""K"",""L"",""M"",""N"",""Ñ"",""O"",""P"",""Q"",
""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z"",""""])",CLUSTER_3,CLUSTER_3
poblacion,numpy.array(['_'for_inrange(len(Target),CLUSTER_3,CLUSTER_3
fitness_array,"numpy.array(Fitness,copy=True)",CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_max,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_max_porcentaje,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_medio,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_medio_porcentaje,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_targets,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_targets_porcentaje,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Fitness,numpy.zeros(NPOB),CLUSTER_3,CLUSTER_3
Coincidencias,numpy.zeros(NPOB),CLUSTER_3,CLUSTER_3
padres,numpy.zeros(NumPadres),CLUSTER_3,CLUSTER_3
indices_cromosomas_perfectos,numpy.where(Coincidencias==ITAR_TARGET),CLUSTER_3,CLUSTER_3
padres[i],numpy.argmax(fitness_array),CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_max,"numpy.append(Stats_num_coincidencias_max,num_coincidencias_max)",CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_max_porcentaje,"numpy.append(Stats_num_coincidencias_max_porcentaje,num_coincidencias_max_porcentaje)",CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_medio,"numpy.append(Stats_num_coincidencias_medio,num_coincidencias_medio)",CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_medio_porcentaje,"numpy.append(Stats_num_coincidencias_medio_porcentaje,num_coincidencias_medio_porcentaje)",CLUSTER_3,CLUSTER_3
Stats_num_targets,"numpy.append(Stats_num_targets,num_targets)",CLUSTER_3,CLUSTER_3
Stats_num_targets_porcentaje,"numpy.append(Stats_num_targets_porcentaje,num_targets_porcentaje)",CLUSTER_3,CLUSTER_3
T_Inicio,time.time(),CLUSTER_3,CLUSTER_3
T_Final,time.time(),CLUSTER_3,CLUSTER_3
counts_sim,"numpy.array([
np.histogram(simulated_data[:,i],bins=bins)",CLUSTER_1,CLUSTER_9
KL,"numpy.array([entropy(pk=counts,qk=counts_sim[i])",CLUSTER_1,CLUSTER_9
dolphin_network,"numpy.zeros((N,N)",CLUSTER_1,CLUSTER_9
"μs,σs",numpy.empty(N),CLUSTER_1,CLUSTER_9
KL_percentile,"numpy.percentile(KL,5)",CLUSTER_1,CLUSTER_9
dolphin_data,"numpy.loadtxt('../data/dolphins/out.dolphins',comments='%',dtype=int)",CLUSTER_1,CLUSTER_9
"counts,bins",numpy.histogram(real_data),CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(2,1,sharex=True)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(8,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(8,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(8,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_1,CLUSTER_9
"red,blue,green","seaborn.color_palette('Set1',3)",CLUSTER_1,CLUSTER_9
ax,"seaborn.kdeplot(μs,σs,shade=True,cmap='viridis')",CLUSTER_1,CLUSTER_9
sales,"pandas.read_csv(""../../assets/datasets/sales.csv"")",CLUSTER_7,CLUSTER_5
df,pandas.read_csv(r'..\Datasets\titanic.csv'),CLUSTER_8,CLUSTER_3
data_y,numpy.array(trace.data),CLUSTER_1,CLUSTER_9
max_data,numpy.zeros(100001),CLUSTER_1,CLUSTER_9
max_data,numpy.fromiter((max(value),CLUSTER_1,CLUSTER_9
data_x,"numpy.linspace(trace.start_frequency,trace.stop_frequency,len(data_y)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
dataset,pandas.read_excel(r'E:\\Electronics_data.xlsx'),CLUSTER_0,CLUSTER_1
doc,"re.sub(r'[^a-zA-Z\s]','',doc,re.I|re.A)",CLUSTER_0,CLUSTER_1
contractions_re,re.compile('(%s),CLUSTER_0,CLUSTER_1
lr,"sklearn.linear_model.LogisticRegression(penalty='l2',max_iter=500,C=1,solver='lbfgs',random_state=42)",CLUSTER_0,CLUSTER_1
response,"requests.get(cli_web,stream=True)",CLUSTER_9,CLUSTER_2
res,requests.get('http://sumomo-ch.com/archives.html'),CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data,files=files)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data,files=files)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data,files=files)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
write,pandas.DataFrame(av_data),CLUSTER_9,CLUSTER_2
write,pandas.DataFrame(av_data),CLUSTER_9,CLUSTER_2
write,pandas.DataFrame(av_data),CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict_facetoken,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
av_girl,os.listdir('av_girl_data'),CLUSTER_9,CLUSTER_2
dir_file,os.listdir('av_girl_data/'+name[0]),CLUSTER_9,CLUSTER_2
av_girl,os.listdir('av_girl_data'),CLUSTER_9,CLUSTER_2
av_girl,os.listdir('av_girl_data/not_sure'),CLUSTER_9,CLUSTER_2
B,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_9
a,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_1,CLUSTER_9
b,"numpy.array([[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
c,"numpy.array((1,2,3)",CLUSTER_1,CLUSTER_9
d,"numpy.array((4,5,6)",CLUSTER_1,CLUSTER_9
mean,numpy.zeros(m),CLUSTER_1,CLUSTER_9
x1,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x2,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x1,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x2,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x1,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x2,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
"X1,X2","numpy.meshgrid(x1,x2)",CLUSTER_1,CLUSTER_9
"X1,X2","numpy.meshgrid(x1,x2)",CLUSTER_1,CLUSTER_9
"X1,X2","numpy.meshgrid(x1,x2)",CLUSTER_1,CLUSTER_9
sigma,numpy.eye(m),CLUSTER_1,CLUSTER_9
C1,"pandas.Series([1,2,3,4],index=['A','B','C','D'])",CLUSTER_1,CLUSTER_9
C2,"pandas.Series((1,2,3)",CLUSTER_1,CLUSTER_9
C3,"pandas.Series({1:'A',2:'B'})",CLUSTER_1,CLUSTER_9
C4,"pandas.Series(np.array([1,2,3])",CLUSTER_1,CLUSTER_9
D1,"pandas.DataFrame([[1,2,3],[4,5,6],[7,8,9]],index=['i1','i2','i3'],columns=['c1','c2','c3'])",CLUSTER_1,CLUSTER_9
D2,"pandas.DataFrame(C1,columns=['c1'])",CLUSTER_1,CLUSTER_9
D3,"pandas.DataFrame({'key1':[1,2,3],'key2':[4,5,6]})",CLUSTER_1,CLUSTER_9
D4,"pandas.DataFrame(np.array([[1,2,3],[4,5,6]])",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
data,"pandas.DataFrame(lst,columns=['Variable','Value','All','Good','Bad'])",CLUSTER_7,CLUSTER_8
random_result,"pandas.DataFrame(columns=['model','accuracy','precision','recall','f1_score','roc_auc_score'])",CLUSTER_7,CLUSTER_8
iv_result,"pandas.DataFrame(columns=['model','accuracy','precision','recall','f1_score','roc_auc_score'])",CLUSTER_7,CLUSTER_8
iv_gridsearch_result,"pandas.DataFrame(columns=['model','accuracy','precision','recall','f1_score','roc_auc_score'])",CLUSTER_7,CLUSTER_8
data['loans_latest_time'],pandas.Series(b),CLUSTER_7,CLUSTER_8
data['latest_query_time'],pandas.Series(b),CLUSTER_7,CLUSTER_8
column_headers,"pandas.Series(column_headers,name='feature')",CLUSTER_7,CLUSTER_8
d,"pandas.Series(d,name='iv_value')",CLUSTER_7,CLUSTER_8
iv_result,"pandas.concat([column_headers,d],axis=1)",CLUSTER_7,CLUSTER_8
df['new_feature'],"pandas.qcut(df[feature],10,duplicates='drop')",CLUSTER_7,CLUSTER_8
_data,"pandas.read_csv(r'D:\文档\kaggle\coding\数据科学-datawhale\data.csv',engine='python')",CLUSTER_7,CLUSTER_8
data['latest_query_time'],"pandas.to_datetime(data['latest_query_time'],format='%Y-%m-%d%H:%M:%S.%f')",CLUSTER_7,CLUSTER_8
data['loans_latest_time'],"pandas.to_datetime(data['loans_latest_time'],format='%Y-%m-%d%H:%M:%S.%f')",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_random_forest_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
data['WoE'],numpy.log(data['DistributionGood']/data['DistributionBad']),CLUSTER_7,CLUSTER_8
random_forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_depth=4,n_jobs=-1,oob_score=True,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_depth=4,n_jobs=-1,oob_score=True,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_depth=4,n_jobs=-1,oob_score=True,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_depth=4,n_jobs=-1,oob_score=True,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
sclf_without_prob,"sklearn.ensemble.StackingClassifier(classifiers=[xgb_best,svc_best,dt_bset,
rf_best,lr_best],
meta_classifier=lr_gridsearch.best_estimator_
)",CLUSTER_7,CLUSTER_8
sclf_with_prob,"sklearn.ensemble.StackingClassifier(classifiers=[xgb_best,svc_best,dt_bset,
rf_best,lr_best],
meta_classifier=lr_gridsearch.best_estimator_,
use_probas=True,
)",CLUSTER_7,CLUSTER_8
lr_gridsearch,"sklearn.model_selection.GridSearchCV(logistic,param_grid=lr_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
svc_gridsearch,"sklearn.model_selection.GridSearchCV(svc,param_grid=svc_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
dt_gridsearch,"sklearn.model_selection.GridSearchCV(dt,param_grid=dt_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
rf_gridsearch,"sklearn.model_selection.GridSearchCV(rf,param_grid=rf_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
xgb_gridsearch,"sklearn.model_selection.GridSearchCV(xgb,param_grid=xgb_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
grid_without_prob,"sklearn.model_selection.GridSearchCV(sclf_without_prob,
param_grid={'meta_classifier__C':[0.0001,0.001,0.01,0.1,1.0,5,10],
'meta_classifier__penalty':['l1','l2']},
cv=5,n_jobs=-1,scoring='recall',
verbose=1,)",CLUSTER_7,CLUSTER_8
grid_with_prob,"sklearn.model_selection.GridSearchCV(sclf_without_prob,
param_grid={'meta_classifier__C':[0.0001,0.001,0.01,0.1,1.0,5,10],
'meta_classifier__penalty':['l1','l2']},
cv=5,n_jobs=-1,scoring='recall',
verbose=1,)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_random_forest_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
logistic_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_without_prob_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_with_prob_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
F1,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_without_prob_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_with_prob_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_without_prob_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_with_prob_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_without_prob_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_with_prob_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
svc_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
dt_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
rf_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
xgb_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
logistic_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
svc_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
dt_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
rf_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
xgb_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
logistic_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
svc_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
dt_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
rf_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
xgb_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
grid_without_prob_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
grid_with_prob_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
"logistic_fpr_score_random,logistic_tpr_score_random,logistic_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"svc_fpr_score_random,svc_tpr_score_random,svc_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"dt_fpr_score_random,dt_tpr_score_random,dt_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"rf_fpr_score_random,rf_tpr_score_random,rf_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"xgb_fpr_score_random,xgb_tpr_score_random,xgb_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"logistic_fpr_score_iv,logistic_tpr_score_iv,logistic_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"svc_fpr_score_iv,svc_tpr_score_iv,svc_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"dt_fpr_score_iv,dt_tpr_score_iv,dt_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"rf_fpr_score_iv,rf_tpr_score_iv,rf_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"xgb_fpr_score_iv,xgb_tpr_score_iv,xgb_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"logistic_fpr_score_iv,logistic_tpr_score_iv,logistic_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"svc_fpr_score_iv,svc_tpr_score_iv,svc_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"dt_fpr_score_iv,dt_tpr_score_iv,dt_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"rf_fpr_score_iv,rf_tpr_score_iv,rf_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"xgb_fpr_score_iv,xgb_tpr_score_iv,xgb_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"grid_without_prob_fpr_score_iv,grid_without_prob_tpr_score_iv,grid_without_prob_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"grid_with_prob_fpr_score_iv,grid_with_prob_tpr_score_iv,grid_with_prob_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
logistic,"sklearn.linear_model.LogisticRegression(n_jobs=-1,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
logistic,"sklearn.linear_model.LogisticRegression(n_jobs=-1,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
logistic,"sklearn.linear_model.LogisticRegression(n_jobs=-1,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
svc,"sklearn.svm.SVC(random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
svc,"sklearn.svm.SVC(random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
svc,"sklearn.svm.SVC(random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
dt,"sklearn.tree.DecisionTreeClassifier(max_depth=5,random_state=666)",CLUSTER_7,CLUSTER_8
dt,"sklearn.tree.DecisionTreeClassifier(max_depth=5,random_state=666)",CLUSTER_7,CLUSTER_8
dt,"sklearn.tree.DecisionTreeClassifier(max_depth=5,random_state=666)",CLUSTER_7,CLUSTER_8
lr_best,"sklearn.pipeline.Pipeline([('standardscaler',StandardScaler()",CLUSTER_7,CLUSTER_8
svc_best,"sklearn.pipeline.Pipeline([('standardscaler',StandardScaler()",CLUSTER_7,CLUSTER_8
lr_best,"sklearn.pipeline.Pipeline([('standardscaler',StandardScaler()",CLUSTER_7,CLUSTER_8
svc_best,"sklearn.pipeline.Pipeline([('standardscaler',StandardScaler()",CLUSTER_7,CLUSTER_8
x_values,"numpy.arange(1,pca.n_features_+1)",CLUSTER_7,CLUSTER_5
sorted_idx,numpy.argsort(weights),CLUSTER_7,CLUSTER_5
cumulative_explained_variance_ratio,numpy.cumsum(explained_variance_ratio),CLUSTER_7,CLUSTER_5
missing_num[feature],numpy.sum(missing_flag),CLUSTER_7,CLUSTER_5
non_missing_rows_flag,"numpy.logical_not(azdias.loc[:,'CAMEO_INTL_2015'].isna()",CLUSTER_7,CLUSTER_5
non_missing_rows_flag,"numpy.logical_not(df.loc[:,'CAMEO_INTL_2015'].isna()",CLUSTER_7,CLUSTER_5
nan_per_col.hist(bins,"numpy.linspace(0,1e6,101)",CLUSTER_7,CLUSTER_5
nan_per_col.hist(bins,"numpy.linspace(0,2e5,21)",CLUSTER_7,CLUSTER_5
missing_per_row.plot.hist(bins,"numpy.linspace(0,50,26)",CLUSTER_7,CLUSTER_5
scaled_df,"pandas.DataFrame(scaled_data,columns=azdias.columns)",CLUSTER_7,CLUSTER_5
transformed_df,"pandas.DataFrame(transformed_data,columns=[f'PC{i}'foriinrange(1,transformed_data.shape[1]+1)",CLUSTER_7,CLUSTER_5
decade_feat,"pandas.Series(['DECADE','person','interval',[]],index=feat_info.columns)",CLUSTER_7,CLUSTER_5
movement_feat,"pandas.Series(['MOVEMENT','person','interval',[]],index=feat_info.columns)",CLUSTER_7,CLUSTER_5
wealth_feat,"pandas.Series(['WEALTH','micro-cell','interval',[]],index=feat_info.columns)",CLUSTER_7,CLUSTER_5
lifestage_feat,"pandas.Series(['LIFE_STAGE','micro-cell','interval',[]],index=feat_info.columns)",CLUSTER_7,CLUSTER_5
azdias,"pandas.read_csv('Udacity_AZDIAS_Subset.csv',delimiter=';')",CLUSTER_7,CLUSTER_5
feat_info,"pandas.read_csv('AZDIAS_Feature_Summary.csv',delimiter=';')",CLUSTER_7,CLUSTER_5
sclr,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=20),CLUSTER_7,CLUSTER_5
cluster_model,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_7,CLUSTER_5
final_model,sklearn.cluster.KMeans(n_clusters=final_cluster_count),CLUSTER_7,CLUSTER_5
df_activities,"pandas.read_csv(runkeeper_file,parse_dates=True,index_col='Date')",CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(8,5)",CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_7,CLUSTER_3
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(2,sharex=True,figsize=(12,8)",CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_3
myTitanic,seaborn.load_dataset('titanic'),CLUSTER_10,CLUSTER_4
myTips,seaborn.load_dataset('tips'),CLUSTER_10,CLUSTER_4
output,numpy.array(outputlist),CLUSTER_7,CLUSTER_5
scale,"numpy.array([5e4,1e5,5e5,1e6,2e6])",CLUSTER_7,CLUSTER_5
scale,"numpy.array([1e5,5e5,1e6,5e6,1e7])",CLUSTER_7,CLUSTER_5
scale,"numpy.array([1e5,5e5,1e6,2e6,5e6])",CLUSTER_7,CLUSTER_5
countdf['fractionaloccup.'],numpy.asarray(chipcount),CLUSTER_7,CLUSTER_5
d,"numpy.where(c>0.3*a,1,0)",CLUSTER_7,CLUSTER_5
d,"numpy.where(c>0.3*ab,1,0)",CLUSTER_7,CLUSTER_5
outputidx,numpy.where(output!=0),CLUSTER_7,CLUSTER_5
Z,numpy.reshape(kernel(positions),CLUSTER_7,CLUSTER_5
lengthtot,numpy.sum(tempdf['SequenceLength']),CLUSTER_7,CLUSTER_5
genetot,numpy.sum(tempdf['GeneCount']),CLUSTER_7,CLUSTER_5
"plt.hist(inputdf['numberofcells'],bins","numpy.logspace(-1,3,15)",CLUSTER_7,CLUSTER_5
positions,numpy.vstack([X.ravel(),CLUSTER_7,CLUSTER_5
values,"numpy.vstack([m1,m2])",CLUSTER_7,CLUSTER_5
CS,"matplotlib.pyplot.contour(X,Y,Z)",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
f,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
frame,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_5
legend,"matplotlib.pyplot.legend(['bulk','minimeta'])",CLUSTER_7,CLUSTER_5
sc,"matplotlib.pyplot.scatter(df['k5_x'],df['k5_y'],c=z,s=df['SequenceLength']/5e2,alpha=0.2,cmap=cm)",CLUSTER_7,CLUSTER_5
ax3,"matplotlib.pyplot.subplot(gs[1,0])",CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
countdf,"pandas.DataFrame(columns=[lineage[8:],'counts','chip','fractionaloccup.','mean_occup.','numberofcells','num_contigs','length','genes'])",CLUSTER_7,CLUSTER_5
dcsummary,"pandas.DataFrame([info],columns=['Contigs','Length(bp)",CLUSTER_7,CLUSTER_5
dbscandf,"pandas.DataFrame(columns=['cluster
'dominantphylum','dominantspecies','chipcounts',
'fractionaloccup.','numberofcells','num_contigs',
'length','genes','CRISPRS','NoCOG','mu_x','mu_y','sig_x','sig_y'])",CLUSTER_7,CLUSTER_5
dfjoiner,"pandas.DataFrame([0],columns=['funct_occurence'])",CLUSTER_7,CLUSTER_5
dfjoiner,"pandas.DataFrame([0],columns=['funct_occurence'])",CLUSTER_7,CLUSTER_5
chip,pandas.DataFrame(columns=cols),CLUSTER_7,CLUSTER_5
df_contigorigin,pandas.read_pickle(expt_name+'_contigorigin'),CLUSTER_7,CLUSTER_5
df,pandas.read_pickle(expt_name+'maindf_AR_wellcounts'),CLUSTER_7,CLUSTER_5
chip,pandas.read_pickle(expt_name+'ARasChip'),CLUSTER_7,CLUSTER_5
chip2,pandas.read_pickle(expt_name+'normalizedARasChip'),CLUSTER_7,CLUSTER_5
chip_abs,pandas.read_pickle(expt_name+'absolutecoverageARasChip'),CLUSTER_7,CLUSTER_5
chip_conc,pandas.read_pickle(expt_name+'DNAconcasChip'),CLUSTER_7,CLUSTER_5
COGassembly,pandas.read_pickle(expt_name+'_COGassembly_All'),CLUSTER_7,CLUSTER_5
mh,pandas.read_pickle(expt_name+'megahit_maindf'),CLUSTER_7,CLUSTER_5
mS,pandas.read_pickle(expt_name+'metaSpades_maindf'),CLUSTER_7,CLUSTER_5
mm,pandas.read_pickle(expt_name+'minimeta_maindf'),CLUSTER_7,CLUSTER_5
df,pandas.read_pickle(expt_name+'All_maindf'),CLUSTER_7,CLUSTER_5
COGfun,pandas.read_table('COGreffiles/fun2003-2014.tab'),CLUSTER_7,CLUSTER_5
palette,"seaborn.color_palette('deep',np.unique(labels)",CLUSTER_7,CLUSTER_5
barcolortype,"seaborn.color_palette(""deep"",10)",CLUSTER_7,CLUSTER_5
barcolortype,"seaborn.color_palette(""deep"",len(output)",CLUSTER_7,CLUSTER_5
barcolortype,"seaborn.color_palette(""deep"",10)",CLUSTER_7,CLUSTER_5
palette,"seaborn.diverging_palette(10,220,l=59,n=len(ghb5)",CLUSTER_7,CLUSTER_5
start_time,time.time(),CLUSTER_7,CLUSTER_5
end_time,time.time(),CLUSTER_7,CLUSTER_5
start_time,time.time(),CLUSTER_7,CLUSTER_5
end_time,time.time(),CLUSTER_7,CLUSTER_5
start_time,time.time(),CLUSTER_7,CLUSTER_5
end_time,time.time(),CLUSTER_7,CLUSTER_5
ghb4,collections.Counter(ghb3),CLUSTER_7,CLUSTER_5
listcount,collections.Counter(sublist),CLUSTER_7,CLUSTER_5
listcount,collections.Counter(sublist),CLUSTER_7,CLUSTER_5
kernel,scipy.stats.gaussian_kde(values),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_7
data,"sklearn.datasets.make_blobs(n_samples=100,n_features=3,centers=2,random_state=101)",CLUSTER_5,CLUSTER_7
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_7
J_plus,"numpy.zeros((num_parameters,1)",CLUSTER_3,CLUSTER_6
J_minus,"numpy.zeros((num_parameters,1)",CLUSTER_3,CLUSTER_6
gradapprox,"numpy.zeros((num_parameters,1)",CLUSTER_3,CLUSTER_6
Z1,"numpy.dot(W1,X)",CLUSTER_3,CLUSTER_6
Z2,"numpy.dot(W2,A1)",CLUSTER_3,CLUSTER_6
Z3,"numpy.dot(W3,A2)",CLUSTER_3,CLUSTER_6
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_3,CLUSTER_6
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_3,CLUSTER_6
logprobs,numpy.multiply(-np.log(A3),CLUSTER_3,CLUSTER_6
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_3,CLUSTER_6
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_3,CLUSTER_6
thetaplus,numpy.copy(parameters_values),CLUSTER_3,CLUSTER_6
thetaminus,numpy.copy(parameters_values),CLUSTER_3,CLUSTER_6
numerator,numpy.linalg.norm(grad-gradapprox),CLUSTER_3,CLUSTER_6
denominator,numpy.linalg.norm(numpy.linalg.norm(grad),CLUSTER_3,CLUSTER_6
numerator,numpy.linalg.norm(grad-gradapprox),CLUSTER_3,CLUSTER_6
denominator,numpy.linalg.norm(numpy.linalg.norm(grad),CLUSTER_3,CLUSTER_6
df,"pandas.read_csv(""gapminder_gdp_oceania.csv"")",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""gapminder_gdp_oceania.csv"",index_col=""country"")",CLUSTER_8,CLUSTER_3
data,"pandas.read_csv('gapminder_gdp_europe.csv',index_col='country')",CLUSTER_8,CLUSTER_3
indices,numpy.arange(data.shape[0]),CLUSTER_0,CLUSTER_0
coefs,"numpy.asarray(values[1:],dtype='float32')",CLUSTER_0,CLUSTER_0
data_train,pandas.read_csv('train.csv'),CLUSTER_0,CLUSTER_0
data_train,pandas.read_csv('train.csv'),CLUSTER_0,CLUSTER_0
string,"re.sub(r""\\"","""",string)",CLUSTER_0,CLUSTER_0
string,"re.sub(r""\'"","""",string)",CLUSTER_0,CLUSTER_0
string,"re.sub(r""\"""","""",string)",CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(data,labels,test_size=0.20,random_state=42)",CLUSTER_0,CLUSTER_0
"x_test,x_val,y_test,y_val","sklearn.model_selection.train_test_split(x_test,y_test,test_size=0.50,random_state=42)",CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test_s,x_pred)",CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test_s,x_pred)",CLUSTER_0,CLUSTER_0
data,pandas.read_csv('student_data.csv'),CLUSTER_1,CLUSTER_3
X,"numpy.array(data[[""gre"",""gpa""]])",CLUSTER_1,CLUSTER_3
y,"numpy.array(data[""admit""])",CLUSTER_1,CLUSTER_3
del_w,numpy.zeros(weights.shape),CLUSTER_1,CLUSTER_3
loss,numpy.mean((out-targets),CLUSTER_1,CLUSTER_3
accuracy,numpy.mean(predictions==targets_test),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('E:/Python/Data_Assignment_3/employee_compensation.csv'),CLUSTER_8,CLUSTER_4
df_GDP,pandas.DataFrame(GDP),CLUSTER_7,CLUSTER_9
data_frame_time_srs,"pandas.DataFrame(time_srs,columns=[""values""])",CLUSTER_7,CLUSTER_9
GDP,"pandas.read_csv('../GDP/GDP.csv',parse_dates=True,skiprows=1)",CLUSTER_7,CLUSTER_9
data,pandas.read_pickle('./dataGDP.pkl'),CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_9
x,"numpy.arange(1,len(lag_array)",CLUSTER_7,CLUSTER_9
volatility,numpy.array(volatility[col_name].tolist(),CLUSTER_7,CLUSTER_9
x_axis,numpy.asarray(x_axis),CLUSTER_7,CLUSTER_9
zero_crossings,numpy.where(np.diff(np.sign(y_axis),CLUSTER_7,CLUSTER_9
diff,numpy.diff(times),CLUSTER_7,CLUSTER_9
mask,"numpy.ma.less_equal(diff,0)",CLUSTER_7,CLUSTER_9
masked_diff,"numpy.ma.masked_array(diff,mask)",CLUSTER_7,CLUSTER_9
sqrt_delta_sigma,math.sqrt(delta),CLUSTER_7,CLUSTER_9
peaks,"scipy.signal.find_peaks(wave,height=border)",CLUSTER_7,CLUSTER_9
result.csv(filename,"time.strftime(""%Y%m%d"")",CLUSTER_11,CLUSTER_5
"data[""year""]","pandas.DatetimeIndex(data[""date""])",CLUSTER_11,CLUSTER_5
&(data.year!,"pandas.Period('1969',freq='A-DEC')",CLUSTER_11,CLUSTER_5
data,"pandas.concat([data,age],axis=1)",CLUSTER_11,CLUSTER_5
data['date'],pandas.to_datetime(Date_final),CLUSTER_11,CLUSTER_5
new_arr,numpy.array(d*10**9),CLUSTER_5,CLUSTER_0
pred_diams,"numpy.array(find_points(y_pred,point)",CLUSTER_5,CLUSTER_0
real_diams,numpy.array(pred_d[np.where(y_test[point]==1),CLUSTER_5,CLUSTER_0
G,numpy.zeros(N),CLUSTER_5,CLUSTER_0
A,"numpy.zeros((M,N)",CLUSTER_5,CLUSTER_0
B,"numpy.zeros((M+N,N)",CLUSTER_5,CLUSTER_0
y_,numpy.zeros(M+N),CLUSTER_5,CLUSTER_0
B,"numpy.zeros((M+N,N)",CLUSTER_5,CLUSTER_0
y_,numpy.zeros(M+N),CLUSTER_5,CLUSTER_0
B,"numpy.zeros((M+N,N)",CLUSTER_5,CLUSTER_0
y_,numpy.zeros(M+N),CLUSTER_5,CLUSTER_0
w,numpy.zeros(N),CLUSTER_5,CLUSTER_0
B,"numpy.zeros((M+N,N)",CLUSTER_5,CLUSTER_0
y_,numpy.zeros(M+N),CLUSTER_5,CLUSTER_0
y_try,numpy.zeros(300),CLUSTER_5,CLUSTER_0
"i,",numpy.where(a1==max(a1),CLUSTER_5,CLUSTER_0
"i,",numpy.where(a2==max(a2),CLUSTER_5,CLUSTER_0
"i,",numpy.where(a3==max(a3),CLUSTER_5,CLUSTER_0
a,numpy.zeros_like(d),CLUSTER_5,CLUSTER_0
G,"numpy.linspace(G_min,G_max,N)",CLUSTER_5,CLUSTER_0
pred_d,"numpy.linspace(d_min,d_max,num=Num_diam)",CLUSTER_5,CLUSTER_0
new_train,"numpy.hstack([X_train,linear_pred_for_tr])",CLUSTER_5,CLUSTER_0
new_test,"numpy.hstack([X_test,linear_pred_for_test])",CLUSTER_5,CLUSTER_0
new_test,"numpy.hstack([[X_try],linear_pred_for_test])",CLUSTER_5,CLUSTER_0
w,numpy.load('newspectr/real_freq.npy'),CLUSTER_5,CLUSTER_0
clf,sklearn.linear_model.LassoCV(),CLUSTER_5,CLUSTER_0
clf,sklearn.linear_model.Ridge(alpha=5e-7),CLUSTER_5,CLUSTER_0
"a2,rnorm","scipy.optimize.nnls(B,y_)",CLUSTER_5,CLUSTER_0
"a2,rnorm","scipy.optimize.nnls(B,y_)",CLUSTER_5,CLUSTER_0
"a2,rnorm","scipy.optimize.nnls(B,y_)",CLUSTER_5,CLUSTER_0
"a2,rnorm","scipy.optimize.nnls(B,y_)",CLUSTER_5,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.33,random_state=42)",CLUSTER_5,CLUSTER_0
extrm,"scipy.signal.argrelextrema(y_pred[point],np.greater)",CLUSTER_5,CLUSTER_0
extrm,"scipy.signal.argrelextrema(y_pred[point],np.greater)",CLUSTER_5,CLUSTER_0
tick_marks,numpy.arange(len(classes),CLUSTER_11,CLUSTER_10
Y_pred_classes,"numpy.argmax(Y_pred,axis=1)",CLUSTER_11,CLUSTER_10
"unique,counts","numpy.unique(y,return_counts=True)",CLUSTER_11,CLUSTER_10
"unique,counts","numpy.unique(Y_pred_classes,return_counts=True)",CLUSTER_11,CLUSTER_10
x_npz,"numpy.load(""x_Pneumothorax_balanced_224.npz"")",CLUSTER_11,CLUSTER_10
y_npz,"numpy.load(""y_Pneumothorax_balanced_224.npz"")",CLUSTER_11,CLUSTER_10
"X_train,X_valtest,y_train,y_valtest","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=1,stratify=y)",CLUSTER_11,CLUSTER_10
"X_test,X_val,y_test,y_val","sklearn.model_selection.train_test_split(X_valtest,y_valtest,test_size=0.5,random_state=1,stratify=y_valtest)",CLUSTER_11,CLUSTER_10
current_datetime,datetime.datetime.now(),CLUSTER_11,CLUSTER_10
cnf_matrix,"sklearn.metrics.confusion_matrix(np.argmax(validation_generator.y,axis=1)",CLUSTER_11,CLUSTER_10
"fpr0,tpr0,thresholds0","sklearn.metrics.roc_curve(validation_generator.y[:,0],Y_pred[:,0])",CLUSTER_11,CLUSTER_10
"fpr1,tpr1,thresholds1","sklearn.metrics.roc_curve(validation_generator.y[:,1],Y_pred[:,1])",CLUSTER_11,CLUSTER_10
roc_auc0,"sklearn.metrics.auc(fpr0,tpr0)",CLUSTER_11,CLUSTER_10
roc_auc1,"sklearn.metrics.auc(fpr1,tpr1)",CLUSTER_11,CLUSTER_10
swap,"numpy.array([[0,1],[1,0]],dtype=complex)",CLUSTER_1,CLUSTER_9
ch,"numpy.zeros(n_nodes,dtype=complex)",CLUSTER_1,CLUSTER_9
ch2,"numpy.zeros(n_nodes,dtype=float)",CLUSTER_1,CLUSTER_9
Step1,"numpy.identity(n_nodes,dtype=complex)",CLUSTER_1,CLUSTER_9
Step2,"numpy.identity(n_nodes,dtype=complex)",CLUSTER_1,CLUSTER_9
cwd,os.getcwd(),CLUSTER_4,CLUSTER_7
datetime_rec,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
dataset,"pandas.read_csv('Market_Basket_Optimisation.csv',header=None)",CLUSTER_1,CLUSTER_3
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3,2,3,4,3,4,5,6])",CLUSTER_3,CLUSTER_6
b,"numpy.array([7,2,10,2,7,4,9,4,9,8])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3,4,5])",CLUSTER_3,CLUSTER_6
b,"numpy.array([5,6,7,8,9])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3,2,3,4,3,4,5,6])",CLUSTER_3,CLUSTER_6
b,"numpy.array([7,2,10,2,7,4,9,4,9,8])",CLUSTER_3,CLUSTER_6
a,"numpy.array([2,6,1,9,10,3,27])",CLUSTER_3,CLUSTER_6
a,"numpy.array([5,7,9,8,6,4,5])",CLUSTER_3,CLUSTER_6
b,"numpy.array([6,3,4,8,9,7,1])",CLUSTER_3,CLUSTER_6
a,"numpy.array([5,7,9,8,6,4,5])",CLUSTER_3,CLUSTER_6
b,"numpy.array([6,3,4,8,9,7,1])",CLUSTER_3,CLUSTER_6
index,numpy.where((a>=5),CLUSTER_3,CLUSTER_6
index,"numpy.where(np.logical_and(a>=5,a<=10)",CLUSTER_3,CLUSTER_6
pair_max,"numpy.vectorize(maxx,otypes=[float])",CLUSTER_3,CLUSTER_6
hdb_crimes_aggregate,"pandas.pivot_table(df,index=['hdb_c'],values='id',columns=['offence_category'],aggfunc='count')",CLUSTER_5,CLUSTER_9
df_all,"pandas.read_csv('crimes_lahore_final2014to2016labeledbysayyab.csv',dtype=""object"")",CLUSTER_5,CLUSTER_9
df_all['Timestamp'],"pandas.to_datetime(df_all['Timestamp'],infer_datetime_format=True)",CLUSTER_5,CLUSTER_9
db,"sklearn.cluster.DBSCAN(eps=.000007840,min_samples=9,metric='haversine')",CLUSTER_5,CLUSTER_9
tmp,"re.split('\s{2,}',text)",CLUSTER_10,CLUSTER_4
coronavirus,"pandas.DataFrame(columns=['Province/State','Country/Region','LastUpdate','Confirmed','Deaths','Recovered'])",CLUSTER_4,CLUSTER_11
dates,"pandas.DataFrame({'date':dates,'count':nan})",CLUSTER_4,CLUSTER_11
dates,"pandas.DataFrame({'date':dates,'count':nan})",CLUSTER_4,CLUSTER_11
dates,"pandas.DataFrame({'date':dates,'count':nan})",CLUSTER_4,CLUSTER_11
dates,"pandas.DataFrame({'date':dates,'count':nan})",CLUSTER_4,CLUSTER_11
suisse,"pandas.concat([pd.read_csv('/mnt/datastore/data/medias/media_suisse_fr.csv',header=None)",CLUSTER_4,CLUSTER_11
dates,"pandas.date_range(start='01/22/2020',end=pd.datetime.now()",CLUSTER_4,CLUSTER_11
coronavirus_merge,"pandas.pivot_table(coronavirus_merge,values=['Infections','Deces','Guerisons','GTrend','Tweets'],index=['date'],columns=['country'])",CLUSTER_4,CLUSTER_11
coronavirus_by_country,"pandas.pivot_table(coronavirus_count,values=['Infections','Deces','Guerisons'],index=['date'],
columns=['Pays'])",CLUSTER_4,CLUSTER_11
all_countries,"pandas.read_csv(""https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv"")",CLUSTER_4,CLUSTER_11
coronavirus,"pandas.read_csv(""/mnt/datastore/data/coronavirus_2020-03-16.csv"",sep="";"")",CLUSTER_4,CLUSTER_11
daily_report,pandas.read_csv(url),CLUSTER_4,CLUSTER_11
allemagne,"pandas.read_csv('/mnt/datastore/data/medias/media_allemagne.csv',header=None)",CLUSTER_4,CLUSTER_11
france,"pandas.read_csv('/mnt/datastore/data/medias/media_france.csv',header=None)",CLUSTER_4,CLUSTER_11
italy,"pandas.read_csv('/mnt/datastore/data/medias/media_italy.csv',header=None)",CLUSTER_4,CLUSTER_11
interest,pandas.read_csv('/mnt/datastore/data/gtrend_by_country.csv'),CLUSTER_4,CLUSTER_11
interest,pandas.read_csv('/mnt/datastore/data/gtrend_by_country.csv'),CLUSTER_4,CLUSTER_11
interest,pandas.read_csv('/mnt/datastore/data/gtrend_by_country.csv'),CLUSTER_4,CLUSTER_11
interest,pandas.read_csv('/mnt/datastore/data/gtrend_by_country.csv'),CLUSTER_4,CLUSTER_11
medias_it,"pandas.read_csv('/mnt/datastore/data/medias/media_italy.csv',header=None)",CLUSTER_4,CLUSTER_11
all_geo_tweets_eu_count['date'],pandas.to_datetime(all_geo_tweets_eu_count['date']),CLUSTER_4,CLUSTER_11
coronavirus['date'],pandas.to_datetime(coronavirus['Date']),CLUSTER_4,CLUSTER_11
coronavirus_count['date'],"pandas.to_datetime(coronavirus_count[['Year','Month','Day']])",CLUSTER_4,CLUSTER_11
coronavirus['LastUpdate'],pandas.to_datetime(coronavirus['LastUpdate']),CLUSTER_4,CLUSTER_11
coronavirus_count['date'],"pandas.to_datetime(coronavirus_count[['Year','Month','Day']])",CLUSTER_4,CLUSTER_11
count_FR['date'],pandas.to_datetime(count_FR['date']),CLUSTER_4,CLUSTER_11
count_IT['date'],pandas.to_datetime(count_IT['date']),CLUSTER_4,CLUSTER_11
count_CH['date'],pandas.to_datetime(count_CH['date']),CLUSTER_4,CLUSTER_11
count_DE['date'],pandas.to_datetime(count_DE['date']),CLUSTER_4,CLUSTER_11
count_US['date'],pandas.to_datetime(count_US['date']),CLUSTER_4,CLUSTER_11
medias['date'],pandas.to_datetime(pandas.to_datetime(medias['date']),CLUSTER_4,CLUSTER_11
interest['date'],pandas.to_datetime(interest['date']),CLUSTER_4,CLUSTER_11
tweet_count['date'],pandas.to_datetime(tweet_count['date']),CLUSTER_4,CLUSTER_11
interest_it['date'],pandas.to_datetime(interest_it['date']),CLUSTER_4,CLUSTER_11
interest_it['date'],pandas.to_datetime(interest_it['date']),CLUSTER_4,CLUSTER_11
medias_it['date'],pandas.to_datetime(medias_it['date']),CLUSTER_4,CLUSTER_11
medias_it['date'],pandas.to_datetime(medias_it['date']),CLUSTER_4,CLUSTER_11
count_IT['date'],pandas.to_datetime(count_IT['date']),CLUSTER_4,CLUSTER_11
,numpy.empty(dates.size),CLUSTER_4,CLUSTER_11
,numpy.empty(dates.size),CLUSTER_4,CLUSTER_11
,numpy.empty(dates.size),CLUSTER_4,CLUSTER_11
,numpy.empty(dates.size),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
sns_cmap,"seaborn.light_palette(""Navy"",as_cmap=True)",CLUSTER_4,CLUSTER_11
sns_cmap,"seaborn.light_palette(""Navy"",as_cmap=True)",CLUSTER_4,CLUSTER_11
sns_cmap,"seaborn.light_palette(""Navy"",as_cmap=True)",CLUSTER_4,CLUSTER_11
classes,os.listdir(CORPUS_PATH),CLUSTER_4,CLUSTER_0
X_train,numpy.concatenate(image_list),CLUSTER_4,CLUSTER_0
labels,numpy.concatenate(label_list),CLUSTER_4,CLUSTER_0
class_votes,numpy.zeros(num_classes),CLUSTER_8,CLUSTER_3
data,pandas.read_csv('01_homework_dataset.csv'),CLUSTER_8,CLUSTER_3
rotatedval_complete,"numpy.array((X3,Y3,Z3)",CLUSTER_8,CLUSTER_3
Y1,numpy.cos(alpha),CLUSTER_8,CLUSTER_3
X2,numpy.cos(beta),CLUSTER_8,CLUSTER_3
X3,numpy.cos(delta),CLUSTER_8,CLUSTER_3
alpha,numpy.radians(-Pitch),CLUSTER_8,CLUSTER_3
beta,numpy.radians(-Roll),CLUSTER_8,CLUSTER_3
delta,numpy.radians(-Azimuth),CLUSTER_8,CLUSTER_3
Z1,numpy.sin(alpha),CLUSTER_8,CLUSTER_3
Y3,numpy.sin(delta),CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame(
[
(10,1,5,90,0,0)",CLUSTER_8,CLUSTER_3
info,"pandas.DataFrame({""ID"":['apms','lit','y2h'],""nodos"":nodos,""enlaces"":enlaces,""dirigido"":dirigido,""kmean"":kmean,
""kmin"":kmin,""kmax"":kmax,""densidad"":densidad,""clusteringglobal"":clusteringglobal,
""clusteringlocal"":clusteringlocal,""diametro"":diametro})",CLUSTER_1,CLUSTER_9
"k,pk",numpy.array(gord),CLUSTER_1,CLUSTER_9
"k,pk",numpy.array(gord),CLUSTER_1,CLUSTER_9
logx,numpy.log10(bins),CLUSTER_1,CLUSTER_9
logy,numpy.log10(pk),CLUSTER_1,CLUSTER_9
grados,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
grados,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
gradosporgrado,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
gradosporgrado2,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
out,"scipy.optimize.leastsq(errfunc,pinit,args=(logx,logy)",CLUSTER_1,CLUSTER_9
X_grad,numpy.zeros(X.shape),CLUSTER_4,CLUSTER_11
Theta_grad,numpy.zeros(Theta.shape),CLUSTER_4,CLUSTER_11
my_ratings,numpy.zeros(n_m),CLUSTER_4,CLUSTER_11
grad,numpy.concatenate([X_grad.ravel(),CLUSTER_4,CLUSTER_11
initial_parameters,numpy.concatenate([X.ravel(),CLUSTER_4,CLUSTER_11
p,"numpy.dot(X,Theta.T)",CLUSTER_4,CLUSTER_11
ix,numpy.argsort(my_predictions),CLUSTER_4,CLUSTER_11
J,numpy.sum(np.square(X.dot(Theta.T),CLUSTER_4,CLUSTER_11
Y,"numpy.hstack([my_ratings[:,None],Y])",CLUSTER_4,CLUSTER_11
R,numpy.hstack([(my_ratings>0),CLUSTER_4,CLUSTER_11
res,"scipy.optimize.minimize(lambdax:cofiCostFunc(x,Ynorm,R,num_users,
num_movies,num_features,lambda_)",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join('Data','ex8_movies.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join('Data','ex8_movieParams.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join('Data','ex8_movies.mat')",CLUSTER_4,CLUSTER_11
cb,matplotlib.pyplot.colorbar(),CLUSTER_1,CLUSTER_10
x,"numpy.arange(0,N)",CLUSTER_1,CLUSTER_10
y,"numpy.arange(0,N)",CLUSTER_1,CLUSTER_10
Vc,"numpy.zeros((N,N)",CLUSTER_1,CLUSTER_10
V,"numpy.zeros((N,N,Ns)",CLUSTER_1,CLUSTER_10
conv_l,"numpy.zeros((Ns,1)",CLUSTER_1,CLUSTER_10
Ex,"numpy.zeros((N,N)",CLUSTER_1,CLUSTER_10
Ey,"numpy.zeros((N,N)",CLUSTER_1,CLUSTER_10
cost,numpy.zeros(iters),CLUSTER_4,CLUSTER_11
term,"numpy.multiply(error,X[:,j])",CLUSTER_4,CLUSTER_11
inner,numpy.power(((X*theta.T),CLUSTER_4,CLUSTER_11
x,numpy.linspace(mydata.Population.min(),CLUSTER_4,CLUSTER_11
X,numpy.matrix(X),CLUSTER_4,CLUSTER_11
y,numpy.matrix(y),CLUSTER_4,CLUSTER_11
theta,"numpy.matrix(np.array([0,0])",CLUSTER_4,CLUSTER_11
temp,numpy.matrix(np.zeros(theta.shape),CLUSTER_4,CLUSTER_11
X2,numpy.matrix(X2.values),CLUSTER_4,CLUSTER_11
y2,numpy.matrix(y2.values),CLUSTER_4,CLUSTER_11
theta2,"numpy.matrix(np.array([0,0,0])",CLUSTER_4,CLUSTER_11
mydata,"pandas.read_csv(path,header=None,names=['Population','Profit'])",CLUSTER_4,CLUSTER_11
mydata2,"pandas.read_csv(path,header=None,names=['Size','Bedrooms','Price'])",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
path,os.getcwd(),CLUSTER_4,CLUSTER_11
path,os.getcwd(),CLUSTER_4,CLUSTER_11
review_text,"re.sub(""[^a-zA-Z]"","""",review_text)",CLUSTER_5,CLUSTER_1
train,"pandas.read_csv(r'C:\Laury\Kaggle_Sentiment/labeledTrainData.tsv',header=0,delimiter=""\t"",quoting=3)",CLUSTER_5,CLUSTER_1
test,"pandas.read_csv(r'C:\Laury\Kaggle_Sentiment/testData.tsv',header=0,delimiter=""\t"",quoting=3)",CLUSTER_5,CLUSTER_1
df,"pandas.read_csv('https://github.com/prasertcbs/tutorial/raw/master/mtcars.csv',nrows=10,index_col=0)",CLUSTER_8,CLUSTER_4
df2,"pandas.read_csv('https://github.com/prasertcbs/tutorial/raw/master/gapminder.csv',index_col=[0,1])",CLUSTER_8,CLUSTER_4
df3,pandas.read_csv('https://github.com/prasertcbs/tutorial/raw/master/gapminder.csv'),CLUSTER_8,CLUSTER_4
tips,seaborn.load_dataset('tips'),CLUSTER_3,CLUSTER_6
ldf,"pandas.DataFrame(l1,columns=['query'])",CLUSTER_0,CLUSTER_1
temp,"pandas.DataFrame(X,columns=temp_name)",CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""Corpus_1.csv"")",CLUSTER_0,CLUSTER_1
text,"re.sub(r'[0-9]*','',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(""[
text=re.sub(r'\s\s+','',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(r'[0-9]*','',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(""[
text=re.sub(r'\s\s+','',text)",CLUSTER_0,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_0,CLUSTER_1
WORDS,"collections.Counter(words(open('big_ml.txt',encoding=""utf8"")",CLUSTER_0,CLUSTER_1
inputs,"numpy.array([[0.5,-0.2,0.1]])",CLUSTER_1,CLUSTER_3
targets,numpy.array([[0.4]]),CLUSTER_1,CLUSTER_3
test_w_i_h,"numpy.array([[0.1,-0.2],
[0.4,0.5],
[-0.3,0.2]])",CLUSTER_1,CLUSTER_3
test_w_h_o,"numpy.array([[0.3],
[-0.1]])",CLUSTER_1,CLUSTER_3
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_1,CLUSTER_3
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_1,CLUSTER_3
rides,pandas.read_csv(data_path),CLUSTER_1,CLUSTER_3
dates,pandas.to_datetime(rides.loc[test_data.index]['dteday']),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_1,CLUSTER_3
y,"pandas.Series(shuffle_csv[""class""])",CLUSTER_6,CLUSTER_3
csv_file,"pandas.read_csv(file_name,names=ref_names)",CLUSTER_6,CLUSTER_3
df,"pandas.DataFrame({'Name':name,
'Role':role,
'AreaofInterest':area}
)",CLUSTER_9,CLUSTER_2
url,requests.get('https://www.sfu.ca/computing/people/faculty.html'),CLUSTER_9,CLUSTER_2
temp,"re.sub('<.*?>','',temp)",CLUSTER_9,CLUSTER_2
output,"json.loads(output,strict=False)",CLUSTER_0,CLUSTER_6
output,"json.loads(output,strict=False)",CLUSTER_0,CLUSTER_6
d,collections.defaultdict(list),CLUSTER_0,CLUSTER_6
arr,numpy.array(data),CLUSTER_0,CLUSTER_6
arr,numpy.hstack(arr),CLUSTER_0,CLUSTER_6
rs,"re.match(pattern,string1)",CLUSTER_10,CLUSTER_4
rs_2,"re.match(ptn_2,string1)",CLUSTER_10,CLUSTER_4
m,re.match(r'([\w]+),CLUSTER_10,CLUSTER_4
m,"re.match(r""(\w+)",CLUSTER_10,CLUSTER_4
m,"re.match(r""(\d+)",CLUSTER_10,CLUSTER_4
m,"re.match(r""(\d+)",CLUSTER_10,CLUSTER_4
m,re.search('(?P<name>.*),CLUSTER_10,CLUSTER_4
mm_1,re.search('(?P<name>[\w]+),CLUSTER_10,CLUSTER_4
mm_2,re.search(r'(?P<name>[\w]+),CLUSTER_10,CLUSTER_4
s,re.search('(Sergey\'snumber),CLUSTER_10,CLUSTER_4
match,"re.search(""(nn)",CLUSTER_10,CLUSTER_4
m,"re.search(""(nn)",CLUSTER_10,CLUSTER_4
m_1,re.finditer(r'(?P<first>[.]+),CLUSTER_10,CLUSTER_4
m_2,re.finditer(r'(?:[.]+),CLUSTER_10,CLUSTER_4
r,"re.compile(r""var(\w+|\d+)",CLUSTER_10,CLUSTER_4
p,re.compile(r'[\d]+'),CLUSTER_10,CLUSTER_4
m,"re.compile(r""(?P<first>[(])",CLUSTER_10,CLUSTER_4
pattern,"re.compile(""o[gh]"")",CLUSTER_10,CLUSTER_4
p,re.compile(r'(?P<food1>[\w]+),CLUSTER_10,CLUSTER_4
p,re.compile(r'(?:[\w]+),CLUSTER_10,CLUSTER_4
vertices,"numpy.array([[[0,height],[440,320],[520,320],[width,height]]],dtype=np.int32)",CLUSTER_4,CLUSTER_11
vertices,"numpy.array([[[0,height],[440,320],[520,320],[width,height]]],dtype=np.int32)",CLUSTER_4,CLUSTER_11
vertices,"numpy.array([[[0,height],[440,320],[520,320],[width,height]]],dtype=np.int32)",CLUSTER_4,CLUSTER_11
ori_line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
mask,numpy.zeros_like(img),CLUSTER_4,CLUSTER_11
mean_slope,numpy.mean(slopes),CLUSTER_4,CLUSTER_11
mean_intercept,numpy.mean(intercepts),CLUSTER_4,CLUSTER_11
mean_slope,numpy.mean(keep_slopes),CLUSTER_4,CLUSTER_11
mean_intercept,numpy.mean(keep_intercepts),CLUSTER_4,CLUSTER_11
std_slope,numpy.std(slopes),CLUSTER_4,CLUSTER_11
img_files,os.listdir(img_dir),CLUSTER_4,CLUSTER_11
imgs,os.listdir(img_dir),CLUSTER_4,CLUSTER_11
x,numpy.arange(7),CLUSTER_1,CLUSTER_9
true_variances,"numpy.array([0,662,9501,251,284,1872,555])",CLUSTER_1,CLUSTER_9
Y_total,numpy.array(scaled_Y_parts),CLUSTER_1,CLUSTER_9
thisP,numpy.array(P_models),CLUSTER_1,CLUSTER_9
avg_rsq,numpy.array(rsqs),CLUSTER_1,CLUSTER_9
A,"numpy.array([[-1,0,0,1,0,0,0],
[0,-1,0,1,0,0,0],
[1,1,0,-1,0,0,0],
[-1,0,0,0,1,0,0],
[0,0,-1,0,1,0,0],
[1,0,1,0,-1,0,0],
[0,-1,0,0,0,1,0],
[0,0,-1,0,0,1,0],
[0,1,1,0,0,-1,0],
[-1,0,0,0,0,0,1],
[0,-1,0,0,0,0,1],
[0,0,-1,0,0,0,1],
[0,0,0,-1,0,0,1],
[0,0,0,0,-1,0,1],
[0,0,0,0,0,-1,1],
[1,1,1,0,0,0,-1],
[0,0,0,1,1,0,-1],
[0,0,0,1,0,1,-1],
[0,0,0,0,1,1,-1],
[1,0,0,0,0,1,-1],
[0,1,0,0,1,0,-1],
[0,0,1,1,0,0,-1],
[0,0,-1,0,1,1,-1],
[0,-1,0,1,0,1,-1],
[-1,0,0,1,1,0,-1]])",CLUSTER_1,CLUSTER_9
B,"numpy.array([[0,0,0,0,0,-1,1],
[0,0,0,0,-1,0,1],
[0,0,0,-1,0,0,1],
[0,0,-1,0,1,1,-1],
[0,-1,0,1,0,1,-1],
[-1,0,0,1,1,0,-1],
[1,1,1,-1,-1,-1,1],
])",CLUSTER_1,CLUSTER_9
fixed_b,numpy.array(b),CLUSTER_1,CLUSTER_9
actual_rsq_biases,numpy.array(rsq_est),CLUSTER_1,CLUSTER_9
actual_rsq_biases,numpy.array(rsq_est),CLUSTER_1,CLUSTER_9
biases,"numpy.zeros((maxs.shape[1],7)",CLUSTER_1,CLUSTER_9
preds,"numpy.dot(Xcomb.T[N_R:],wts)",CLUSTER_1,CLUSTER_9
alphas,"numpy.logspace(-4,3,20)",CLUSTER_1,CLUSTER_9
XX,numpy.corrcoef(np.vstack(X_parts),CLUSTER_1,CLUSTER_9
XX_orthog,numpy.corrcoef(np.vstack(X_parts),CLUSTER_1,CLUSTER_9
X_parts,"numpy.vsplit(cat_orthog_X_parts.T,np.cumsum(P_parts)",CLUSTER_1,CLUSTER_9
"wts,res,ranks,sings","numpy.linalg.lstsq(Xcomb.T[:N_R],zY_total[:N_R])",CLUSTER_1,CLUSTER_9
"cat_orthog_X_parts,_,_",numpy.linalg.svd(np.vstack(X_parts),CLUSTER_1,CLUSTER_9
res,"scipy.optimize.fmin_slsqp(minfun,np.zeros(7)",CLUSTER_1,CLUSTER_9
REQUEST,"json.dumps({
'body':{
'name':'JaneDoe',
'phone':'888-555-5245',
'address':'123BellviewDrive,Somewhere,NC'
}
})",CLUSTER_10,CLUSTER_4
REQUEST,"json.dumps({
'body':{
'name':'JaneandJohnDoe',
'address':'321ViewbellLane,SomewhereElse,SC'
},
'path':{
'contact_id':globals()",CLUSTER_10,CLUSTER_4
req,json.loads(REQUEST),CLUSTER_10,CLUSTER_4
req,json.loads(REQUEST),CLUSTER_10,CLUSTER_4
req,json.loads(REQUEST),CLUSTER_10,CLUSTER_4
req,json.loads(REQUEST),CLUSTER_10,CLUSTER_4
resp,requests.get(URL+'/contacts?name=billi'),CLUSTER_10,CLUSTER_4
resp,requests.get(URL+'/contacts'),CLUSTER_10,CLUSTER_4
post_resp,"requests.post(URL+'/contacts',json={
'name':'AliceAdams',
'phone':'919-555-6712',
'address':'42WallabyWay,Sydney,NC'
})",CLUSTER_10,CLUSTER_4
put_resp,"requests.put(URL+'/contacts/'+first_contact_id,{
'phone':'919-444-5601'
})",CLUSTER_10,CLUSTER_4
y,"numpy.zeros((1,Ty)",CLUSTER_4,CLUSTER_11
x,"numpy.expand_dims(x,axis=0)",CLUSTER_4,CLUSTER_11
X,"numpy.load(""./XY_train/X.npy"")",CLUSTER_4,CLUSTER_11
Y,"numpy.load(""./XY_train/Y.npy"")",CLUSTER_4,CLUSTER_11
X_dev,"numpy.load(""./XY_dev/X_dev.npy"")",CLUSTER_4,CLUSTER_11
Y_dev,"numpy.load(""./XY_dev/Y_dev.npy"")",CLUSTER_4,CLUSTER_11
final_df,pandas.read_csv(final_data),CLUSTER_8,CLUSTER_4
mean_saleprice,pandas.DataFrame(train.groupby(['GrLivArea']),CLUSTER_5,CLUSTER_9
index,"pandas.DataFrame(test.Id,columns=['Id'])",CLUSTER_5,CLUSTER_9
index,"pandas.DataFrame(test.Id,columns=['Id'])",CLUSTER_5,CLUSTER_9
pred,pandas.DataFrame(clf.predict(Xte),CLUSTER_5,CLUSTER_9
index,"pandas.DataFrame(test.Id,columns=['Id'])",CLUSTER_5,CLUSTER_9
pred1,pandas.DataFrame(clf.predict(test_fin),CLUSTER_5,CLUSTER_9
pred2,pandas.DataFrame(clf2.predict(test_fin_ridge),CLUSTER_5,CLUSTER_9
pred3,pandas.DataFrame(clf3.predict(test_fin_ridge),CLUSTER_5,CLUSTER_9
pred_final_1,pandas.DataFrame(np.exp(pred_1),CLUSTER_5,CLUSTER_9
pred_final_2,pandas.DataFrame(np.exp(pred_2),CLUSTER_5,CLUSTER_9
pred_Lasso,pandas.DataFrame(np.exp(pred3),CLUSTER_5,CLUSTER_9
pred_xg,pandas.DataFrame(np.exp(pred_xg),CLUSTER_5,CLUSTER_9
all_data,"all_data=pandas.concat((train.loc[:,'MSSubClass':'SaleCondition'],test.loc[:,'MSSubClass':'SaleCondition'])",CLUSTER_5,CLUSTER_9
tr_te,"pandas.concat((train_clf4,test_clf4)",CLUSTER_5,CLUSTER_9
train_str_dum,pandas.get_dummies(train_str),CLUSTER_5,CLUSTER_9
test_str_dum,pandas.get_dummies(test_str),CLUSTER_5,CLUSTER_9
new_train,"pandas.merge(train_flo,train_str_dum,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
new_test,"pandas.merge(test_flo,test_str_dum,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
train_clf2,"pandas.merge(train_clf2,train[['LotFrontage','MasVnrArea','GarageYrBlt']],left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
train_clf3,"pandas.merge(train_clf2,pd.DataFrame(train_clf2_pca)",CLUSTER_5,CLUSTER_9
test_clf2,"pandas.merge(test_clf2,test[['LotFrontage','MasVnrArea','GarageYrBlt']],left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
test_clf3,"pandas.merge(test_clf2,pd.DataFrame(clus.transform(test_clf2)",CLUSTER_5,CLUSTER_9
pred_submit,"pandas.merge(index,pred_final,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
pred_Lasso_submit,"pandas.merge(index,pred_Lasso,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
pred_xg_submit,"pandas.merge(index,pred_xg,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
pred_xg_lasso_submit,"pandas.merge(index,pred_final_2,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
train,"pandas.read_csv(""../input/train.csv"")",CLUSTER_5,CLUSTER_9
test,"pandas.read_csv(""../input/test.csv"")",CLUSTER_5,CLUSTER_9
sample_index,numpy.arange(X.shape[0]),CLUSTER_5,CLUSTER_9
sample_index,numpy.arange(X.shape[0]),CLUSTER_5,CLUSTER_9
y,numpy.array(pd.DataFrame(np.log(train.SalePrice),CLUSTER_5,CLUSTER_9
y2,numpy.array(pd.DataFrame(np.log(train.SalePrice),CLUSTER_5,CLUSTER_9
data_new[i],numpy.array(data_new[i]),CLUSTER_5,CLUSTER_9
test_new[i],numpy.array(test_new[i]),CLUSTER_5,CLUSTER_9
train_np,numpy.array(train_clf3),CLUSTER_5,CLUSTER_9
train_fin,"numpy.array(Select.fit_transform(train_clf4,y)",CLUSTER_5,CLUSTER_9
test_fin,numpy.array(Select.transform(test_clf4),CLUSTER_5,CLUSTER_9
train_fin_ridge,numpy.array(robust_scaler.fit_transform(train_clf3),CLUSTER_5,CLUSTER_9
test_fin_ridge,numpy.array(robust_scaler.transform(test_clf3),CLUSTER_5,CLUSTER_9
pred_oob,numpy.zeros(xtrain.shape[0]),CLUSTER_5,CLUSTER_9
pred_test,numpy.zeros(xtest.shape[0]),CLUSTER_5,CLUSTER_9
pred,numpy.zeros(xte.shape[0]),CLUSTER_5,CLUSTER_9
number_of_batches,numpy.ceil(X.shape[0]/batch_size),CLUSTER_5,CLUSTER_9
train[skewed_feats],numpy.log1p(train[skewed_feats]),CLUSTER_5,CLUSTER_9
test[skewed_feats],numpy.log1p(test[skewed_feats]),CLUSTER_5,CLUSTER_9
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_9
clus,sklearn.decomposition.KernelPCA(n_components=25),CLUSTER_5,CLUSTER_9
corr1,scipy.stats.pearsonr(np.array(pd.DataFrame(data[i]),CLUSTER_5,CLUSTER_9
corr2,scipy.stats.pearsonr(np.array(pd.DataFrame(data[i]**3),CLUSTER_5,CLUSTER_9
Select,"sklearn.feature_selection.SelectKBest(f_regression,k=268)",CLUSTER_5,CLUSTER_9
clf2,sklearn.linear_model.Ridge(alpha=21),CLUSTER_5,CLUSTER_9
clf3,"sklearn.linear_model.LassoCV(alphas=[1,0.1,0.001,0.0005])",CLUSTER_5,CLUSTER_9
robust_scaler,sklearn.preprocessing.RobustScaler(),CLUSTER_5,CLUSTER_9
tmp,scipy.sparse.csr_matrix(tr_te),CLUSTER_5,CLUSTER_9
xtr_te,"scipy.sparse.hstack(sparse_data,format='csr')",CLUSTER_5,CLUSTER_9
outputDf,"pandas.DataFrame(data=output,index=[''])",CLUSTER_8,CLUSTER_1
summary_df,"pandas.DataFrame(index=['NoofSamples','NoofFeatures'])",CLUSTER_8,CLUSTER_1
rundata,pandas.DataFrame(metricslist),CLUSTER_8,CLUSTER_1
data_train,"sklearn.datasets.fetch_20newsgroups(subset='train',categories=categories,
shuffle=True,random_state=42,
remove=remove)",CLUSTER_8,CLUSTER_1
data_test,"sklearn.datasets.fetch_20newsgroups(subset='test',categories=categories,
shuffle=True,random_state=42,
remove=remove)",CLUSTER_8,CLUSTER_1
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(data_train.data,data_train.target,test_size=0.33,random_state=42)",CLUSTER_8,CLUSTER_1
grid[:3],"numpy.array(np.meshgrid(x,y,z,indexing='ij')",CLUSTER_12,CLUSTER_9
s_offsets,"numpy.array([0.25,0.2,0.15,0.1,0.05,0.01])",CLUSTER_12,CLUSTER_9
ang_offsets,"numpy.array([-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9,-10,10])",CLUSTER_12,CLUSTER_9
appended_coords,numpy.array(self.points[0].pos),CLUSTER_12,CLUSTER_9
dom_bound,"numpy.array([xmin,xmax,ymin,ymax,zmin,zmax])",CLUSTER_12,CLUSTER_9
xs,numpy.array(xs),CLUSTER_12,CLUSTER_9
ys,numpy.array(ys),CLUSTER_12,CLUSTER_9
zs,numpy.array(zs),CLUSTER_12,CLUSTER_9
dom_bound,"numpy.array([xmin,xmax,ymin,ymax,zmin,zmax])",CLUSTER_12,CLUSTER_9
lcs_candidates,numpy.array(lcs_candidates),CLUSTER_12,CLUSTER_9
t,numpy.asarray(t),CLUSTER_12,CLUSTER_9
p,numpy.asarray(p),CLUSTER_12,CLUSTER_9
h,numpy.asarray(h),CLUSTER_12,CLUSTER_9
ps,numpy.asarray(ps),CLUSTER_12,CLUSTER_9
grid,"numpy.zeros((12,x.shape[0],y.shape[0],z.shape[0])",CLUSTER_12,CLUSTER_9
mask_c,"numpy.zeros(mask_a.shape,dtype=np.bool)",CLUSTER_12,CLUSTER_9
presences,numpy.zeros((len(lcs_candidates),CLUSTER_12,CLUSTER_9
ret,numpy.empty(x.shape),CLUSTER_12,CLUSTER_9
xi3_sinusoid,"numpy.empty((nx,ny,nz,3)",CLUSTER_12,CLUSTER_9
seps,numpy.empty(n),CLUSTER_12,CLUSTER_9
interpoint_dist,numpy.empty(n),CLUSTER_12,CLUSTER_9
interpoint_dist,numpy.empty(n),CLUSTER_12,CLUSTER_9
hessian,"numpy.empty((x.shape[0],y.shape[0],z.shape[0],3,3)",CLUSTER_12,CLUSTER_9
d0,"numpy.empty((mf_ps.shape[0]-1,mf_ps.shape[0])",CLUSTER_12,CLUSTER_9
d1,"numpy.empty((mf_ps.shape[0]-1,mf_ps.shape[0])",CLUSTER_12,CLUSTER_9
d2,"numpy.empty((mf_ps.shape[0]-1,mf_ps.shape[0])",CLUSTER_12,CLUSTER_9
qvarrs,"numpy.empty((*xs[::10].shape,3)",CLUSTER_12,CLUSTER_9
init_pos,"numpy.empty((Ncores,3)",CLUSTER_12,CLUSTER_9
mask_d,"numpy.empty((nx,ny,nz)",CLUSTER_12,CLUSTER_9
innerprod,"numpy.empty((nx,ny,nz)",CLUSTER_12,CLUSTER_9
t,numpy.ones(pos.shape[1:]),CLUSTER_12,CLUSTER_9
h,numpy.ones(pos.shape[1:]),CLUSTER_12,CLUSTER_9
to_be_added,"numpy.ones(n,dtype=np.bool)",CLUSTER_12,CLUSTER_9
"mask_d[i,j,k]","numpy.any(np.less_equal([d*dps[0]fordindps],0)",CLUSTER_12,CLUSTER_9
indices,numpy.argsort(lambda3s),CLUSTER_12,CLUSTER_9
div,"numpy.ceil(np.linspace(0,x.shape[0],nproc+1)",CLUSTER_12,CLUSTER_9
mask_b,"numpy.less_equal(np.sum(xi3*np.sum(hess_lm3*xi3[...,np.newaxis],axis=3)",CLUSTER_12,CLUSTER_9
mask_a,"numpy.logical_and(np.greater(lm3,1)",CLUSTER_12,CLUSTER_9
h,"numpy.minimum(h,tf-t)",CLUSTER_12,CLUSTER_9
self.A,numpy.sqrt(3),CLUSTER_12,CLUSTER_9
self.B,numpy.sqrt(2),CLUSTER_12,CLUSTER_9
dists,"numpy.sqrt(np.min(d0**2+d1**2+d2**2,axis=0)",CLUSTER_12,CLUSTER_9
dists_mf,"numpy.sqrt(np.min(d0**2+d1**2+d2**2,axis=0)",CLUSTER_12,CLUSTER_9
d0,"numpy.subtract.outer(mf_ps[...,0],ps[...,0])",CLUSTER_12,CLUSTER_9
d1,"numpy.subtract.outer(mf_ps[...,1],ps[...,1])",CLUSTER_12,CLUSTER_9
d2,"numpy.subtract.outer(mf_ps[...,2],ps[...,2])",CLUSTER_12,CLUSTER_9
d0[j],"numpy.subtract.outer(mf_ps[j,0],mf_ps[...,0])",CLUSTER_12,CLUSTER_9
d1[j],"numpy.subtract.outer(mf_ps[j,1],mf_ps[...,1])",CLUSTER_12,CLUSTER_9
d2[j],"numpy.subtract.outer(mf_ps[j,2],mf_ps[...,2])",CLUSTER_12,CLUSTER_9
"x,dx","numpy.linspace(xmin,xmax,nx,retstep=True)",CLUSTER_12,CLUSTER_9
"y,dy","numpy.linspace(ymin,ymax,ny,retstep=True)",CLUSTER_12,CLUSTER_9
"z,dz","numpy.linspace(zmin,zmax,nz,retstep=True)",CLUSTER_12,CLUSTER_9
plane_tols,"numpy.linspace(plane_tol,0.2,11)",CLUSTER_12,CLUSTER_9
dist_tol_factors,"numpy.linspace(1,maxfac,11)",CLUSTER_12,CLUSTER_9
xv,"numpy.linspace(xmin,xmax,4)",CLUSTER_12,CLUSTER_9
yv,"numpy.linspace(ymin,ymax,4)",CLUSTER_12,CLUSTER_9
zv,"numpy.linspace(zmin,zmax,4)",CLUSTER_12,CLUSTER_9
appended_coords,"numpy.vstack((appended_coords,p.pos)",CLUSTER_12,CLUSTER_9
appended_coords,"numpy.vstack((appended_coords,p.pos)",CLUSTER_12,CLUSTER_9
mf_ps,"numpy.vstack((xs,ys,zs)",CLUSTER_12,CLUSTER_9
grad,"numpy.gradient(lm,dx,dy,dz,edge_order=2)",CLUSTER_12,CLUSTER_9
tmp_grad,"numpy.gradient(grad_k,dx,dy,dz,edge_order=2)",CLUSTER_12,CLUSTER_9
interpoint_dist,"numpy.delete(interpoint_dist,i,0)",CLUSTER_12,CLUSTER_9
interpoint_dist,"numpy.delete(interpoint_dist,np.divmod(i+1,n)",CLUSTER_12,CLUSTER_9
seps[i],"numpy.linalg.norm(set_suggestion[np.divmod(i+1,n)",CLUSTER_12,CLUSTER_9
"u,s,v",numpy.linalg.svd(jac),CLUSTER_12,CLUSTER_9
t_start,time.time(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_12,CLUSTER_9
img_list,numpy.asarray(img_list),CLUSTER_4,CLUSTER_0
temp,numpy.frombuffer(canvas.tostring_rgb(),CLUSTER_4,CLUSTER_0
temp,numpy.frombuffer(canvas.tostring_rgb(),CLUSTER_4,CLUSTER_0
mask_list,"numpy.moveaxis(values_list[3],2,0)",CLUSTER_4,CLUSTER_0
eventlist,"numpy.load(EVENTPATH+f'vid{v:03}_sub{s:02}_eventlist.npy',allow_pickle=True)",CLUSTER_4,CLUSTER_0
eventlist,"numpy.load(EVENTPATH+f'vid{v:03}_sub{s:02}_eventlist.npy',allow_pickle=True)",CLUSTER_4,CLUSTER_0
masked_array,"numpy.ma.masked_where(total_mask==0,total_mask)",CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,gridspec_kw={'height_ratios':[5,1],'wspace':0,'hspace':0.05},dpi=200)",CLUSTER_4,CLUSTER_0
"fix,ax","matplotlib.pyplot.subplots(figsize=(14.4,9)",CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,gridspec_kw={'height_ratios':[5,1],'wspace':0,'hspace':0.05},dpi=200)",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(txtloc,sep='\t')",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(txtloc,sep='\t')",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(txtloc,sep='\t')",CLUSTER_4,CLUSTER_0
ax,"seaborn.lineplot(x='x',y='y',hue='event_tracker',marker=""o"",alpha=0.5,sort=False,lw=1,data=df)",CLUSTER_4,CLUSTER_0
r,requests.get(url),CLUSTER_9,CLUSTER_2
tokens,"re.findall('\w+',sentence)",CLUSTER_9,CLUSTER_2
df,pandas.read_csv('titanic.csv'),CLUSTER_7,CLUSTER_3
lm,"seaborn.lmplot(x='Age',y='Fare',data=df,hue='Sex',fit_reg=False)",CLUSTER_7,CLUSTER_3
expected_next_h,"numpy.asarray([
[0.24635157,0.28610883,0.32240467,0.35525807,0.38474904],
[0.49223563,0.55611431,0.61507696,0.66844003,0.7159181],
[0.56735664,0.66310127,0.74419266,0.80889665,0.858299]])",CLUSTER_1,CLUSTER_10
expected_next_c,"numpy.asarray([
[0.32986176,0.39145139,0.451556,0.51014116,0.56717407],
[0.66382255,0.76674007,0.87195994,0.97902709,1.08751345],
[0.74192008,0.90592151,1.07717006,1.25120233,1.42395676]])",CLUSTER_1,CLUSTER_10
expected_h,"numpy.asarray([
[[0.01764008,0.01823233,0.01882671,0.0194232],
[0.11287491,0.12146228,0.13018446,0.13902939],
[0.31358768,0.33338627,0.35304453,0.37250975]],
[[0.45767879,0.4761092,0.4936887,0.51041945],
[0.6704845,0.69350089,0.71486014,0.7346449],
[0.81733511,0.83677871,0.85403753,0.86935314]]])",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,1.2,num=N*D)",CLUSTER_1,CLUSTER_10
prev_h,"numpy.linspace(-0.3,0.7,num=N*H)",CLUSTER_1,CLUSTER_10
prev_c,"numpy.linspace(-0.4,0.9,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-2.1,1.3,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.7,2.2,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.3,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,0.6,num=N*T*D)",CLUSTER_1,CLUSTER_10
h0,"numpy.linspace(-0.4,0.8,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-0.2,0.9,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.3,0.6,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.2,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
model.params[k],"numpy.linspace(-1.4,1.3,num=v.size)",CLUSTER_1,CLUSTER_10
features,"numpy.linspace(-0.5,1.7,num=N*D)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(1,figsize=(18,10)",CLUSTER_5,CLUSTER_10
fig,"matplotlib.pyplot.figure(1,figsize=(18,10)",CLUSTER_5,CLUSTER_10
PCA_var,sklearn.decomposition.PCA(n_components=3),CLUSTER_5,CLUSTER_10
cm,"sklearn.metrics.confusion_matrix(y_test,y_predic)",CLUSTER_5,CLUSTER_10
tick_marks,numpy.arange(len(class_labels_),CLUSTER_5,CLUSTER_10
class_labels_,"numpy.array(['Group1','Group2','Group3'])",CLUSTER_5,CLUSTER_10
data,"numpy.loadtxt(fname=f,delimiter=',',dtype='double')",CLUSTER_5,CLUSTER_10
labels_,"numpy.loadtxt(fname=f,delimiter=',',dtype='string')",CLUSTER_5,CLUSTER_10
data,"numpy.loadtxt(fname=f,delimiter=',',dtype='double')",CLUSTER_5,CLUSTER_10
df_org,pandas.read_csv(r'D:\ML_WORK\Kaggle\Titanic\train.csv'),CLUSTER_7,CLUSTER_3
M,numpy.linalg.inv(D),CLUSTER_1,CLUSTER_9
"w,v",scipy.linalg.eig(M),CLUSTER_1,CLUSTER_9
"X,y","sklearn.datasets.make_s_curve(n_samples=1000,noise=.6,random_state=0)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
y_pos,numpy.arange(len(objects),CLUSTER_4,CLUSTER_0
X_train_left_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_right_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_up_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_down_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_left_down_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_right_up_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_left_up_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_right_down_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
x,"numpy.roll(a,-1,axis=1)",CLUSTER_4,CLUSTER_0
x,"numpy.roll(a,1,axis=1)",CLUSTER_4,CLUSTER_0
x,"numpy.roll(a,-1,axis=0)",CLUSTER_4,CLUSTER_0
x,"numpy.roll(a,1,axis=0)",CLUSTER_4,CLUSTER_0
big_image,"numpy.append(big_image,images[i],axis=0)",CLUSTER_4,CLUSTER_0
input_files,os.listdir(test_image_dir),CLUSTER_4,CLUSTER_0
y,"numpy.dot(x,w)",CLUSTER_2,CLUSTER_7
y,"ed.Normal(loc=numpy.dot(X,M)",CLUSTER_2,CLUSTER_7
bbox,"numpy.array(((280,710)",CLUSTER_12,CLUSTER_3
"plt.scatter(xy_cam[xy_cam_mask,0],xy_cam[xy_cam_mask,1],c",numpy.log1p(r[xy_cam_mask]),CLUSTER_12,CLUSTER_3
xyz_homogen,"numpy.pad(xyz,((0,0)",CLUSTER_12,CLUSTER_3
r,"numpy.linalg.norm(xyz[:,:2],axis=1)",CLUSTER_12,CLUSTER_3
res,requests.get(mwe_url),CLUSTER_10,CLUSTER_2
df,pandas.DataFrame(catalog),CLUSTER_10,CLUSTER_2
doc_df,"pandas.concat(
[df.filter(regex=(""^document"")",CLUSTER_10,CLUSTER_2
features_of_players,"pandas.DataFrame({'quadrant':player_data['playerx'],'playerz':player_data['playerz']})",CLUSTER_8,CLUSTER_1
player_data,"pandas.read_csv(data_filename,delimiter=',')",CLUSTER_8,CLUSTER_1
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,5,figsize=(15,15)",CLUSTER_6,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(1,5,figsize=(15,15)",CLUSTER_6,CLUSTER_11
vertices,"numpy.array([[(0,imshape[0])",CLUSTER_4,CLUSTER_11
vertices,"numpy.array([[(150,imshape[0])",CLUSTER_4,CLUSTER_11
vertices,"numpy.array([[(150,540)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
mask,numpy.zeros_like(img),CLUSTER_4,CLUSTER_11
images,"os.listdir(""test_images/"")",CLUSTER_4,CLUSTER_11
X,pandas.DataFrame(preprocessing.scale(X),CLUSTER_7,CLUSTER_8
data,"pandas.read_csv(""/data/collegescorecard/merged_2011_PP.csv"",encoding=""ISO-8859-1"")",CLUSTER_7,CLUSTER_8
model,sklearn.cluster.KMeans(n_clusters=15),CLUSTER_7,CLUSTER_8
pca_model,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
team_stat,pandas.read_csv(DIRECTORY+'team_stats.csv'),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(20,15)",CLUSTER_7,CLUSTER_8
z,"numpy.linspace(0,32,100)",CLUSTER_7,CLUSTER_8
z,"numpy.linspace(15,70,100)",CLUSTER_7,CLUSTER_8
z,"numpy.linspace(5,10,100)",CLUSTER_7,CLUSTER_8
action,random.choice(list(action_mapping.keys(),CLUSTER_1,CLUSTER_10
env.episodes,"random.sample(env.episodes,2)",CLUSTER_1,CLUSTER_10
ax,"matplotlib.pyplot.subplot(1,3,i+1)",CLUSTER_1,CLUSTER_10
time_start,time.time(),CLUSTER_0,CLUSTER_1
time_end,time.time(),CLUSTER_0,CLUSTER_1
strains['strain_text'],pandas.Series(dtype='str'),CLUSTER_0,CLUSTER_1
dataset,"pandas.read_csv('/content/quoracsv',engine='python',
usecols=['question1','question2','is_duplicate'],
skiprows=random.sample(range(1,data_size)",CLUSTER_0,CLUSTER_1
strains,pandas.read_json('/content/leafly.json'),CLUSTER_0,CLUSTER_1
skiprows,"random.sample(range(1,data_size)",CLUSTER_0,CLUSTER_1
embeddings,numpy.zeros((len(vocabulary.items(),CLUSTER_0,CLUSTER_1
strains['predictions'],"numpy.around(predictions,3)",CLUSTER_0,CLUSTER_1
text,"re.sub('[^a-z]','',text)",CLUSTER_0,CLUSTER_1
"train,validation","sklearn.model_selection.train_test_split(dataset,test_size=0.2)",CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_6,CLUSTER_10
"line,","matplotlib.pyplot.plot(x[:,0],x@a)",CLUSTER_6,CLUSTER_10
s,"re.sub('[0-9]+','0',s)",CLUSTER_5,CLUSTER_10
s,"re.sub('[\W_]+','',s)",CLUSTER_5,CLUSTER_10
nparr0,numpy.array(logistic.coef_[0]),CLUSTER_5,CLUSTER_10
nparr1,numpy.array(logistic.coef_[1]),CLUSTER_5,CLUSTER_10
nparr2,numpy.array(logistic.coef_[2]),CLUSTER_5,CLUSTER_10
nparr3,numpy.array(logistic.coef_[3]),CLUSTER_5,CLUSTER_10
nparr0_2,numpy.array(logistic2.coef_[0]),CLUSTER_5,CLUSTER_10
nparr1_2,numpy.array(logistic2.coef_[1]),CLUSTER_5,CLUSTER_10
nparr2_2,numpy.array(logistic2.coef_[2]),CLUSTER_5,CLUSTER_10
nparr3_2,numpy.array(logistic2.coef_[3]),CLUSTER_5,CLUSTER_10
npR,numpy.array(R_values),CLUSTER_5,CLUSTER_10
rows,"numpy.concatenate((five0,five1,five2,five3)",CLUSTER_5,CLUSTER_10
rows2,"numpy.concatenate((five0_2,five1_2,five2_2,five3_2)",CLUSTER_5,CLUSTER_10
nonzeros,"numpy.concatenate((nparr0[0],nparr1[0],nparr2[0],nparr3[0])",CLUSTER_5,CLUSTER_10
nparr0,numpy.nonzero(logistic.coef_[0]),CLUSTER_5,CLUSTER_10
nparr1,numpy.nonzero(logistic.coef_[1]),CLUSTER_5,CLUSTER_10
nparr2,numpy.nonzero(logistic.coef_[2]),CLUSTER_5,CLUSTER_10
nparr3,numpy.nonzero(logistic.coef_[3]),CLUSTER_5,CLUSTER_10
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_10
logistic,sklearn.linear_model.LogisticRegression(penalty='l2'),CLUSTER_5,CLUSTER_10
lgstc,"sklearn.linear_model.LogisticRegression(penalty='l2',C=cval)",CLUSTER_5,CLUSTER_10
logistic,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
logistic2,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
loge,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
logb,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
logistic,"sklearn.linear_model.LogisticRegression(penalty='l1',C=cval,tol=0.01)",CLUSTER_5,CLUSTER_10
logistic2,"sklearn.linear_model.LogisticRegression(penalty='l2',tol=0.01)",CLUSTER_5,CLUSTER_10
logistic,sklearn.linear_model.LogisticRegression(C=100),CLUSTER_5,CLUSTER_10
mnb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_5,CLUSTER_10
scoree,"sklearn.metrics.f1_score(dev_labels,loge_pred,average=""weighted"")",CLUSTER_5,CLUSTER_10
scoreb,"sklearn.metrics.f1_score(dev_labels,logb_pred,average=""weighted"")",CLUSTER_5,CLUSTER_10
score,"sklearn.metrics.f1_score(dev_labels,log2_pred,average=""weighted"")",CLUSTER_5,CLUSTER_10
newsgroups_train,"sklearn.datasets.fetch_20newsgroups(subset='train',
remove=('headers','footers','quotes')",CLUSTER_5,CLUSTER_10
newsgroups_test,"sklearn.datasets.fetch_20newsgroups(subset='test',
remove=('headers','footers','quotes')",CLUSTER_5,CLUSTER_10
v4,"numpy.arange(1,8)",CLUSTER_1,CLUSTER_10
x,"numpy.arange(1,5)",CLUSTER_1,CLUSTER_10
A,"numpy.arange(1,13)",CLUSTER_1,CLUSTER_10
B,numpy.arange(8),CLUSTER_1,CLUSTER_10
A,numpy.arange(6),CLUSTER_1,CLUSTER_10
v3,"numpy.array([1,3,5])",CLUSTER_1,CLUSTER_10
y,"numpy.array([2,4,6,8])",CLUSTER_1,CLUSTER_10
v1,"numpy.array([3,4])",CLUSTER_1,CLUSTER_10
v2,"numpy.array([4,-3])",CLUSTER_1,CLUSTER_10
A,"numpy.array([[1,3,2],
[1,0,0],
[1,2,2]])",CLUSTER_1,CLUSTER_10
B,"numpy.array([[1,0,5],
[7,5,0],
[2,1,1]])",CLUSTER_1,CLUSTER_10
A,"numpy.array([[4,7],
[2,6]])",CLUSTER_1,CLUSTER_10
A,"numpy.array([[1.,-2.],
[3.,2.]])",CLUSTER_1,CLUSTER_10
x,"numpy.array([[3.],[1.]])",CLUSTER_1,CLUSTER_10
A,"numpy.array([[1,2,3],
[2,5,2],
[6,-3,1]])",CLUSTER_1,CLUSTER_10
b,"numpy.array([6,4,2])",CLUSTER_1,CLUSTER_10
v2,numpy.ones(3),CLUSTER_1,CLUSTER_10
x_vals,"numpy.linspace(0,5,50)",CLUSTER_1,CLUSTER_10
x_vals,"numpy.linspace(0,800,10)",CLUSTER_1,CLUSTER_10
I,numpy.eye(2),CLUSTER_1,CLUSTER_10
A_inv,numpy.linalg.inv(A),CLUSTER_1,CLUSTER_10
x,"numpy.linalg.solve(A,b)",CLUSTER_1,CLUSTER_10
"fix,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
expected_next_h,"numpy.asarray([
[0.24635157,0.28610883,0.32240467,0.35525807,0.38474904],
[0.49223563,0.55611431,0.61507696,0.66844003,0.7159181],
[0.56735664,0.66310127,0.74419266,0.80889665,0.858299]])",CLUSTER_1,CLUSTER_10
expected_next_c,"numpy.asarray([
[0.32986176,0.39145139,0.451556,0.51014116,0.56717407],
[0.66382255,0.76674007,0.87195994,0.97902709,1.08751345],
[0.74192008,0.90592151,1.07717006,1.25120233,1.42395676]])",CLUSTER_1,CLUSTER_10
expected_h,"numpy.asarray([
[[0.01764008,0.01823233,0.01882671,0.0194232],
[0.11287491,0.12146228,0.13018446,0.13902939],
[0.31358768,0.33338627,0.35304453,0.37250975]],
[[0.45767879,0.4761092,0.4936887,0.51041945],
[0.6704845,0.69350089,0.71486014,0.7346449],
[0.81733511,0.83677871,0.85403753,0.86935314]]])",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,1.2,num=N*D)",CLUSTER_1,CLUSTER_10
prev_h,"numpy.linspace(-0.3,0.7,num=N*H)",CLUSTER_1,CLUSTER_10
prev_c,"numpy.linspace(-0.4,0.9,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-2.1,1.3,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.7,2.2,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.3,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,0.6,num=N*T*D)",CLUSTER_1,CLUSTER_10
h0,"numpy.linspace(-0.4,0.8,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-0.2,0.9,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.3,0.6,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.2,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
model.params[k],"numpy.linspace(-1.4,1.3,num=v.size)",CLUSTER_1,CLUSTER_10
features,"numpy.linspace(-0.5,1.7,num=N*D)",CLUSTER_1,CLUSTER_10
mean,numpy.mean(bucket),CLUSTER_3,CLUSTER_6
mean,numpy.mean(bucket),CLUSTER_3,CLUSTER_6
batchMean,numpy.mean(randomDataAvgs),CLUSTER_3,CLUSTER_6
batchMean,numpy.mean(randomDataAvgs),CLUSTER_3,CLUSTER_6
rangeList,numpy.ptp(bucket),CLUSTER_3,CLUSTER_6
prcp_df,pandas.DataFrame(combined_obj),CLUSTER_11,CLUSTER_3
date,"datetime.date(2017,8,23)",CLUSTER_11,CLUSTER_3
iris,"pandas.read_csv(""iris.csv"")",CLUSTER_7,CLUSTER_8
glass,"pandas.read_csv(""glass.csv"")",CLUSTER_7,CLUSTER_8
lens,"pandas.read_csv(""contactlenses.csv"")",CLUSTER_7,CLUSTER_8
anneal,"pandas.read_csv(""anneal.csv"")",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,40)",CLUSTER_7,CLUSTER_8
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
new_df,pandas.DataFrame(columns=cols),CLUSTER_5,CLUSTER_5
t_df,pandas.DataFrame([model_dict]),CLUSTER_5,CLUSTER_5
features,pandas.read_csv('hr_features.csv'),CLUSTER_5,CLUSTER_5
labels,pandas.read_csv('hr_labels.csv'),CLUSTER_5,CLUSTER_5
"x_train,x_test",numpy.array(features[:split]),CLUSTER_5,CLUSTER_5
"y_train,y_test",numpy.array(labels[:split]),CLUSTER_5,CLUSTER_5
cf,"sklearn.metrics.confusion_matrix(y_test,evals)",CLUSTER_5,CLUSTER_5
new_score,"sklearn.metrics.roc_auc_score(y_test,new_preds)",CLUSTER_5,CLUSTER_5
new_score,"sklearn.metrics.roc_auc_score(y_test,new_pred)",CLUSTER_5,CLUSTER_5
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
toronto_onehot,"pandas.get_dummies(toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
Canada_df,"pandas.merge(left=df,right=geo_df)",CLUSTER_9,CLUSTER_2
df,"pandas.read_csv('iso_3166-1_alpha-2_codes.txt',sep=';',header=None,names=['Postcode','Borough','Neighborhood'])",CLUSTER_9,CLUSTER_2
geo_df,pandas.read_csv('http://cocl.us/Geospatial_data'),CLUSTER_9,CLUSTER_2
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
year_bins,"numpy.arange(1910,2020,10)",CLUSTER_1,CLUSTER_10
baby_names.select('Count').hist(bins,"numpy.arange(0,1000,50)",CLUSTER_1,CLUSTER_10
df,"pandas.read_csv('olympics.csv',index_col=0,skiprows=1)",CLUSTER_8,CLUSTER_4
census_df,pandas.read_csv('census.csv'),CLUSTER_8,CLUSTER_4
sal,pandas.read_csv('Salaries.csv'),CLUSTER_8,CLUSTER_4
data1,"pandas.read_csv(r""C:\Users\Administrator\Desktop\picture\1\1.csv"",header=0,index_col=None)",CLUSTER_7,CLUSTER_3
data2,"pandas.read_csv(r""C:\Users\Administrator\Desktop\picture\1\2.csv"",header=0,index_col=None)",CLUSTER_7,CLUSTER_3
data3,"pandas.read_csv(r""C:\Users\Administrator\Desktop\picture\1\3.csv"",header=0,index_col=None)",CLUSTER_7,CLUSTER_3
data4,"pandas.read_csv(r""C:\Users\Administrator\Desktop\picture\1\4.csv"",header=0,index_col=None)",CLUSTER_7,CLUSTER_3
ax,seaborn.boxplot(data=data1),CLUSTER_7,CLUSTER_3
ax,seaborn.boxplot(data=data2),CLUSTER_7,CLUSTER_3
ax,seaborn.boxplot(data=data3),CLUSTER_7,CLUSTER_3
ax,seaborn.boxplot(data=data4),CLUSTER_7,CLUSTER_3
iris,"seaborn.load_dataset(""iris"")",CLUSTER_7,CLUSTER_3
ax2,matplotlib.pyplot.subplot(221),CLUSTER_7,CLUSTER_3
ax2,matplotlib.pyplot.subplot(222),CLUSTER_7,CLUSTER_3
ax2,matplotlib.pyplot.subplot(223),CLUSTER_7,CLUSTER_3
ax2,matplotlib.pyplot.subplot(224),CLUSTER_7,CLUSTER_3
future_dates_df,"pandas.DataFrame(index=future_dates[1:],columns=df.columns)",CLUSTER_1,CLUSTER_3
future_df,"pandas.concat([df,future_dates_df])",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('monthly-milk-production-pounds-p.csv'),CLUSTER_1,CLUSTER_3
df['Month'],pandas.to_datetime(df['Month']),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_1,CLUSTER_3
content,"pandas.read_csv(filename,encoding='gb18030')",CLUSTER_0,CLUSTER_3
with_jieba_cut,collections.Counter(jieba.cut(articles[110]),CLUSTER_0,CLUSTER_3
words_count,collections.Counter(TOKEN),CLUSTER_0,CLUSTER_3
words_count_2,collections.Counter(TOKEN_2_GRAM),CLUSTER_0,CLUSTER_3
g1,pandas.DataFrame(titanic.groupby('sex'),CLUSTER_8,CLUSTER_3
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_5,CLUSTER_10
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_10
labeldf,"pandas.DataFrame(label_list,date_list)",CLUSTER_11,CLUSTER_3
gtrends,"pandas.merge(gtrends,weather,""inner"")",CLUSTER_11,CLUSTER_3
gtrends,"pandas.read_csv(""data/googletrends.csv"")",CLUSTER_11,CLUSTER_3
weather,"pandas.read_csv(""data/NOAAweatherdata.csv"",skiprows=4)",CLUSTER_11,CLUSTER_3
"gtrends[""date_num""]","pandas.to_datetime(gtrends[""month""],yearfirst=True)",CLUSTER_11,CLUSTER_3
"weather[""date_num""]","pandas.to_datetime(weather[""Date""],yearfirst=True)",CLUSTER_11,CLUSTER_3
labels,"numpy.array(['RelativeFreq:{0}|Date:{1}'.format(i[1][0],i[0])",CLUSTER_11,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(14,7)",CLUSTER_11,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,3,sharey=False,sharex=False,figsize=(14,7)",CLUSTER_11,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(14,7)",CLUSTER_11,CLUSTER_3
result,"pandas.concat([movies_per_year,votes_per_year],axis=1)",CLUSTER_3,CLUSTER_3
pdmovies,"pandas.read_csv(""movies.csv"")",CLUSTER_3,CLUSTER_3
X,"numpy.array([[0,0,1],
[0,1,1],
[1,0,1],
[1,1,1]])",CLUSTER_8,CLUSTER_3
y,"numpy.array([[0],
[1],
[1],
[0]])",CLUSTER_8,CLUSTER_3
X,"numpy.array([[0,0,1],
[0,1,1],
[1,0,1],
[1,1,1]])",CLUSTER_8,CLUSTER_3
y,"numpy.array([[0,0,1,1]])",CLUSTER_8,CLUSTER_3
syn0+,"numpy.dot(l0.T,l1_delta)",CLUSTER_8,CLUSTER_3
text,"numpy.array(""Doyouwantsomecafé?"".split()",CLUSTER_4,CLUSTER_7
theta_numpy,numpy.linalg.inv(X.T.dot(X),CLUSTER_4,CLUSTER_7
housing,sklearn.datasets.fetch_california_housing(),CLUSTER_4,CLUSTER_7
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_7
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_7
now,datetime.datetime.utcnow(),CLUSTER_4,CLUSTER_7
df,"pandas.concat([state_dummies,data],axis=1)",CLUSTER_5,CLUSTER_5
state_dummies,"pandas.get_dummies(data.state,prefix='state')",CLUSTER_5,CLUSTER_5
data,pandas.read_csv('Notebook_step3_output.csv'),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_scaled,y,test_size=0.25,random_state=1)",CLUSTER_5,CLUSTER_5
y1,numpy.array(adr),CLUSTER_5,CLUSTER_5
x1,"numpy.column_stack((leadtime,arrivaldateweekno,mealcat,reservedroomtypecat)",CLUSTER_5,CLUSTER_5
atest,"numpy.column_stack((t_leadtime,t_arrivaldateweekno,t_mealcat,t_reservedroomtypecat)",CLUSTER_5,CLUSTER_5
arrivaldatemonthcat,pandas.Series(arrivaldatemonth),CLUSTER_5,CLUSTER_5
mealcat,pandas.Series(mealcat),CLUSTER_5,CLUSTER_5
countrycat,pandas.Series(countrycat),CLUSTER_5,CLUSTER_5
marketsegmentcat,pandas.Series(marketsegmentcat),CLUSTER_5,CLUSTER_5
distributionchannelcat,pandas.Series(distributionchannelcat),CLUSTER_5,CLUSTER_5
reservedroomtypecat,pandas.Series(reservedroomtypecat),CLUSTER_5,CLUSTER_5
assignedroomtypecat,pandas.Series(assignedroomtypecat),CLUSTER_5,CLUSTER_5
deposittypecat,pandas.Series(deposittypecat),CLUSTER_5,CLUSTER_5
customertypecat,pandas.Series(customertypecat),CLUSTER_5,CLUSTER_5
reservationstatuscat,pandas.Series(reservationstatuscat),CLUSTER_5,CLUSTER_5
t_arrivaldatemonthcat,pandas.Series(t_arrivaldatemonth),CLUSTER_5,CLUSTER_5
t_mealcat,pandas.Series(t_mealcat),CLUSTER_5,CLUSTER_5
t_countrycat,pandas.Series(t_countrycat),CLUSTER_5,CLUSTER_5
t_marketsegmentcat,pandas.Series(t_marketsegmentcat),CLUSTER_5,CLUSTER_5
t_distributionchannelcat,pandas.Series(t_distributionchannelcat),CLUSTER_5,CLUSTER_5
t_reservedroomtypecat,pandas.Series(t_reservedroomtypecat),CLUSTER_5,CLUSTER_5
t_assignedroomtypecat,pandas.Series(t_assignedroomtypecat),CLUSTER_5,CLUSTER_5
t_deposittypecat,pandas.Series(t_deposittypecat),CLUSTER_5,CLUSTER_5
t_customertypecat,pandas.Series(t_customertypecat),CLUSTER_5,CLUSTER_5
t_reservationstatuscat,pandas.Series(t_reservationstatuscat),CLUSTER_5,CLUSTER_5
train_df,pandas.read_csv('H1full.csv'),CLUSTER_5,CLUSTER_5
h2data,pandas.read_csv('H2full.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(x1,y1)",CLUSTER_5,CLUSTER_5
tree_reg,sklearn.tree.DecisionTreeRegressor(max_depth=4),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,4)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
nonzeroy,numpy.array(nonzero[0]),CLUSTER_1,CLUSTER_9
nonzerox,numpy.array(nonzero[1]),CLUSTER_1,CLUSTER_9
hist_features,"numpy.concatenate((channel1_hist[0],channel2_hist[0],channel3_hist[0])",CLUSTER_1,CLUSTER_9
heat,"numpy.zeros_like(image[:,:,0])",CLUSTER_1,CLUSTER_9
heat,"numpy.zeros_like(_img[:,:,0])",CLUSTER_1,CLUSTER_9
heatmap,"numpy.clip(heat,0,255)",CLUSTER_1,CLUSTER_9
heatmap,"numpy.clip(heat,0,255)",CLUSTER_1,CLUSTER_9
hog_features,numpy.ravel(hog_features),CLUSTER_1,CLUSTER_9
hog_features,numpy.ravel(hog_features),CLUSTER_1,CLUSTER_9
hog_features,numpy.ravel(hog_features),CLUSTER_1,CLUSTER_9
y,numpy.hstack((np.ones(len(car_features),CLUSTER_1,CLUSTER_9
hog_features,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_1,CLUSTER_9
hog_features,numpy.hstack((hog_feat1),CLUSTER_1,CLUSTER_9
X,"numpy.vstack((car_features,notcar_features)",CLUSTER_1,CLUSTER_9
X,"numpy.vstack((car_features,notcar_features)",CLUSTER_1,CLUSTER_9
draw_img,numpy.copy(img),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(image),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(image),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(image),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(img),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(image),CLUSTER_1,CLUSTER_9
draw_img,numpy.copy(img),CLUSTER_1,CLUSTER_9
channel1_hist,"numpy.histogram(img[:,:,0],bins=nbins,range=bins_range)",CLUSTER_1,CLUSTER_9
channel2_hist,"numpy.histogram(img[:,:,1],bins=nbins,range=bins_range)",CLUSTER_1,CLUSTER_9
channel3_hist,"numpy.histogram(img[:,:,2],bins=nbins,range=bins_range)",CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
t2,time.time(),CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
t2,time.time(),CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
t2,time.time(),CLUSTER_1,CLUSTER_9
svc,sklearn.svm.LinearSVC(),CLUSTER_1,CLUSTER_9
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_1,CLUSTER_9
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_1,CLUSTER_9
data,pandas.DataFrame(dt),CLUSTER_7,CLUSTER_8
cat_df,pandas.DataFrame(df.select_dtypes(include=['object']),CLUSTER_7,CLUSTER_8
cat_df,pandas.DataFrame(df.select_dtypes(include=['object']),CLUSTER_7,CLUSTER_8
cat_df,pandas.DataFrame(df.select_dtypes(include=['object']),CLUSTER_7,CLUSTER_8
num_df,"pandas.DataFrame(df.select_dtypes(include=['float64','int64','int32'])",CLUSTER_7,CLUSTER_8
num_df,"pandas.DataFrame(df.select_dtypes(include=['float64','int64','int32'])",CLUSTER_7,CLUSTER_8
num_df,"pandas.DataFrame(df.select_dtypes(include=['float64','int64','int32'])",CLUSTER_7,CLUSTER_8
dfr,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
Z,pandas.get_dummies(df),CLUSTER_7,CLUSTER_8
pos,pandas.get_dummies(y_test),CLUSTER_7,CLUSTER_8
"df[""AGE_VEHQ""]","pandas.qcut(df.AGE_VEH,3,labels=[""inf14ans"",""entre14_19ans"",""sup19ans""])",CLUSTER_7,CLUSTER_8
"df[""AGE_CLIENTQ""]","pandas.qcut(df.AGE_CLIENT,4,labels=[""inf44ans"",""entre45_55ans"",""entre55_66ans"",""sup66ans""])",CLUSTER_7,CLUSTER_8
"df[""ANCIENQ""]","pandas.qcut(df.AGE_CLIENT,4,labels=[""inf12ans"",""entre12_17ans"",""entre17_26ans"",""sup26ans""])",CLUSTER_7,CLUSTER_8
"df[""PERMISQ""]","pandas.qcut(df.PERMIS,3,labels=[""inf24ans"",""entre25_37ans"",""sup37ans""])",CLUSTER_7,CLUSTER_8
"df[""DUR_CONTQ""]","pandas.qcut(df.DUR_CONT,3,labels=[""inf11ans"",""entre11_17ans"",""sup17ans""])",CLUSTER_7,CLUSTER_8
dt,"pandas.read_table(""..\\ResiliationContratAuto.txt"",sep='|',encoding=""ISO-8859-1"")",CLUSTER_7,CLUSTER_8
df[d],"pandas.to_datetime(df[d],unit='d')",CLUSTER_7,CLUSTER_8
"df[""MMJECHPP""]","pandas.to_datetime(df[""MMJECHPP""],format='%m%d')",CLUSTER_7,CLUSTER_8
"df[""DT_NAI""]","pandas.to_timedelta(df[""DT_NAI""],unit='d')",CLUSTER_7,CLUSTER_8
ind,numpy.arange(len(labels),CLUSTER_7,CLUSTER_8
"df[""CONTRAT""]","numpy.where(df[""CONTRAT""].str.contains(""RESIL"")",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,50)",CLUSTER_7,CLUSTER_8
algo,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
algo,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.neural_network.MLPClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.svm.LinearSVC(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=0)",CLUSTER_7,CLUSTER_8
today,datetime.date.today(),CLUSTER_7,CLUSTER_8
acc_train,"sklearn.metrics.accuracy_score(y_train,y_pred1)",CLUSTER_7,CLUSTER_8
acc_test,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
acc_train,"sklearn.metrics.accuracy_score(y_train,y_pred1)",CLUSTER_7,CLUSTER_8
acc_test,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
mc,"sklearn.metrics.confusion_matrix(y,y_hat)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
specificite,"sklearn.metrics.make_scorer(specificity,greater_is_better=True)",CLUSTER_7,CLUSTER_8
specificite,"sklearn.metrics.make_scorer(specificity,greater_is_better=True)",CLUSTER_7,CLUSTER_8
sensib,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
se,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_7,CLUSTER_8
taille,"numpy.arange(start=1,stop=26681,step=1)",CLUSTER_7,CLUSTER_8
index,numpy.argsort(score),CLUSTER_7,CLUSTER_8
cpos,numpy.cumsum(sort_pos),CLUSTER_7,CLUSTER_8
npos,numpy.sum(pos),CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(importance,columns=['feature','fscore'])",CLUSTER_7,CLUSTER_8
lrmodel,sklearn.linear_model.LinearRegression(),CLUSTER_10,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y)",CLUSTER_10,CLUSTER_4
submission_train_1,pandas.DataFrame(dataset_blend_train_2),CLUSTER_7,CLUSTER_8
submission_test_1,pandas.DataFrame(dataset_blend_test_2),CLUSTER_7,CLUSTER_8
submission_df,"pandas.DataFrame(data={'Id':id_test,'SalePrice':y_submission})",CLUSTER_7,CLUSTER_8
dg_pca_train,pandas.read_csv('dg_pca_train.csv'),CLUSTER_7,CLUSTER_8
dg_pca_test,pandas.read_csv('dg_pca_test.csv'),CLUSTER_7,CLUSTER_8
id_test,pandas.read_csv('id_test.csv'),CLUSTER_7,CLUSTER_8
id_train,pandas.read_csv('id_train.csv'),CLUSTER_7,CLUSTER_8
score_train,pandas.read_csv('score_train.csv'),CLUSTER_7,CLUSTER_8
dataset_blend_train,"numpy.zeros((X.shape[0],len(clfs)",CLUSTER_7,CLUSTER_8
dataset_blend_test,"numpy.zeros((X_predict.shape[0],len(clfs)",CLUSTER_7,CLUSTER_8
dataset_blend_test_j,"numpy.zeros((X_predict.shape[0],len(skf)",CLUSTER_7,CLUSTER_8
dataset_blend_train_2,"numpy.zeros((X.shape[0],len(clfs)",CLUSTER_7,CLUSTER_8
dataset_blend_test_2,"numpy.zeros((X_predict.shape[0],len(clfs)",CLUSTER_7,CLUSTER_8
dataset_blend_test_j,"numpy.zeros((X_predict.shape[0],len(skf)",CLUSTER_7,CLUSTER_8
dataset_blend_test,"numpy.hstack((dataset_blend_test_1,dataset_blend_test_2)",CLUSTER_7,CLUSTER_8
dataset_blend_train,"numpy.hstack((dataset_blend_train_1,dataset_blend_train_2)",CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_folds,True,50)",CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_folds,True,50)",CLUSTER_7,CLUSTER_8
clf,"sklearn.svm.SVR(C=1.0,gamma=0.1)",CLUSTER_7,CLUSTER_8
clf,sklearn.svm.SVR(),CLUSTER_7,CLUSTER_8
clf,sklearn.model_selection.GridSearchCV(svm.SVR(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(dataset_blend_train,y,test_size=0.2,random_state=123)",CLUSTER_7,CLUSTER_8
X,"numpy.concatenate((X,b)",CLUSTER_7,CLUSTER_8
core_samples,"numpy.zeros_like(labels,dtype=bool)",CLUSTER_7,CLUSTER_8
"""""""log_air_passengers",numpy.log(df2['min_price']),CLUSTER_7,CLUSTER_8
df3,pandas.DataFrame(df2.groupby(level=0),CLUSTER_7,CLUSTER_8
month_names,"pandas.date_range(start='2016-01-01',periods=12,freq='MS')",CLUSTER_7,CLUSTER_8
df1,"pandas.read_csv(r""C:\Users\Sony\Desktop\CMO_MSP_Mandi.csv"")",CLUSTER_7,CLUSTER_8
df2,"pandas.read_csv(r""C:\Users\Sony\Desktop\Monthly_data_cmo.csv"",index_col=0,parse_dates=[[2,3]],infer_datetime_format=True)",CLUSTER_7,CLUSTER_8
df1.index,"pandas.to_datetime(df1.index,format='%Y')",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_7,CLUSTER_8
dbscan,"sklearn.cluster.DBSCAN(eps=3,min_samples=4)",CLUSTER_7,CLUSTER_8
X,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
ohe,sklearn.preprocessing.OneHotEncoder(),CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
a,pandas.read_csv('df_a.csv'),CLUSTER_1,CLUSTER_3
b,pandas.read_csv('df_b.csv'),CLUSTER_1,CLUSTER_3
c,pandas.read_csv('df_c.csv'),CLUSTER_1,CLUSTER_3
d,pandas.read_csv('df_d.csv'),CLUSTER_1,CLUSTER_3
e,pandas.read_csv('df_e.csv'),CLUSTER_1,CLUSTER_3
f,pandas.read_csv('df_f.csv'),CLUSTER_1,CLUSTER_3
g,pandas.read_csv('df_g.csv'),CLUSTER_1,CLUSTER_3
h,pandas.read_csv('df_h.csv'),CLUSTER_1,CLUSTER_3
i,pandas.read_csv('df_i.csv'),CLUSTER_1,CLUSTER_3
j,pandas.read_csv('df_j.csv'),CLUSTER_1,CLUSTER_3
k,pandas.read_csv('df_k.csv'),CLUSTER_1,CLUSTER_3
l,pandas.read_csv('df_l.csv'),CLUSTER_1,CLUSTER_3
m,pandas.read_csv('df_m.csv'),CLUSTER_1,CLUSTER_3
mat,"pandas.read_csv(""data/student-mat.csv"")",CLUSTER_7,CLUSTER_3
ax2,"plt.colorbar(contours,cax=cax,ax=ax,ticks=numpy.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
cost,numpy.zeros_like(cm),CLUSTER_7,CLUSTER_8
cm,"numpy.around(cm,decimals=2)",CLUSTER_7,CLUSTER_8
n_samples,numpy.median(cnts),CLUSTER_7,CLUSTER_8
"X,Y","numpy.meshgrid(np.arange(0,n_classes,1)",CLUSTER_7,CLUSTER_8
df_resampled,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_resampled,"pandas.concat([df_resampled,df_target_resampled],axis=0)",CLUSTER_7,CLUSTER_8
df_remap['quality2'],"pandas.cut(df.quality,bins=3,labels=[1,2,3])",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('/home/cneiderer/Metis/Neiderer_Metis/Project3/data/winequality-red.csv',delimiter=';')",CLUSTER_7,CLUSTER_8
ax,"seaborn.distplot(df[col][df.quality==q],hist=False,label=label,ax=ax)",CLUSTER_7,CLUSTER_8
cmap,"seaborn.diverging_palette(10,133,sep=80,n=20)",CLUSTER_7,CLUSTER_8
ax,"seaborn.heatmap(Z,ax=ax,cmap='RdYlGn',annot=True,cbar_ax=cax,
vmin=0,vmax=1,cbar_kws={'ticks':np.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
ax2,"matplotlib.pyplot.colorbar(contours,cax=cax,ax=ax,ticks=np.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
"target_fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_7,CLUSTER_8
"corr_fig,ax","matplotlib.pyplot.subplots(figsize=(14,10)",CLUSTER_7,CLUSTER_8
"kde_fig,axes","matplotlib.pyplot.subplots(3,4,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"gnb_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"svm0_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"svm1_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"knn_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"lr_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
svm0,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
svm1,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
knn1,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
knn2,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
pipe3,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_7,CLUSTER_8
lr3,"sklearn.linear_model.LogisticRegression(C=1e3,
class_weight='balanced',
random_state=129,
multi_class='multinomial',
solver='newton-cg',max_iter=1000)",CLUSTER_7,CLUSTER_8
nb1,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
sampleData,"pandas.read_csv('C:/Users/jpkee/Desktop/PythonProjects/MasterDataAnalysiswithPython-Introtopandas/data/sample_data.csv',index_col=0)",CLUSTER_8,CLUSTER_4
movies,"pandas.read_csv('C:/Users/jpkee/Desktop/PythonProjects/MasterDataAnalysiswithPython-Introtopandas/data/movie.csv',index_col='title')",CLUSTER_8,CLUSTER_4
bikes,"pandas.read_csv('C:/Users/jpkee/Desktop/PythonProjects/MasterDataAnalysiswithPython-Introtopandas/data/bikes.csv',parse_dates=['starttime','stoptime'])",CLUSTER_8,CLUSTER_4
r,requests.get(url),CLUSTER_10,CLUSTER_12
w1,"np.random.uniform(low=-numpy.sqrt(6/(784+500)),high=numpy.sqrt(6/(784+500)",CLUSTER_9,CLUSTER_2
w2,"np.random.uniform(low=-numpy.sqrt(6/(500+10)),high=numpy.sqrt(6/(500+10)",CLUSTER_9,CLUSTER_2
b1,"np.random.uniform(low=-numpy.sqrt(6/(1+500)),high=numpy.sqrt(6/(1+500)",CLUSTER_9,CLUSTER_2
b2,"np.random.uniform(low=-numpy.sqrt(6/(1+10)),high=numpy.sqrt(6/(1+10)",CLUSTER_9,CLUSTER_2
req,"requests.request('POST',_url,json=json)",CLUSTER_9,CLUSTER_2
result,"pandas.DataFrame({'actual':actual,'predict':predict})",CLUSTER_9,CLUSTER_2
result,pandas.DataFrame({'accuracy':accuracy}),CLUSTER_9,CLUSTER_2
data,"numpy.linspace(-5,5,100)",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('data/Race-COVID.csv'),CLUSTER_1,CLUSTER_3
case,"numpy.array([white,black,latin,asian,aian,nhpi,other,unknown])",CLUSTER_1,CLUSTER_3
case,"numpy.array([white,black,latin,asian,aian,nhpi,other])",CLUSTER_1,CLUSTER_3
case,"numpy.array([white,black,latin,asian,aian,nhpi,other,unknown])",CLUSTER_1,CLUSTER_3
case,"numpy.array([white,black,latin,asian,other,unknown])",CLUSTER_1,CLUSTER_3
total,numpy.sum(df['Cases_Total']),CLUSTER_1,CLUSTER_3
white,numpy.sum(df['Cases_White']),CLUSTER_1,CLUSTER_3
black,numpy.sum(df['Cases_Black']),CLUSTER_1,CLUSTER_3
latin,numpy.sum(df['Cases_LatinX']),CLUSTER_1,CLUSTER_3
asian,numpy.sum(df['Cases_Asian']),CLUSTER_1,CLUSTER_3
aian,numpy.sum(df['Cases_AIAN']),CLUSTER_1,CLUSTER_3
nhpi,numpy.sum(df['Cases_NHPI']),CLUSTER_1,CLUSTER_3
unknown,numpy.sum(df['Cases_Unknown']),CLUSTER_1,CLUSTER_3
total,numpy.sum(df['Deaths_Total']),CLUSTER_1,CLUSTER_3
white,numpy.sum(df['Deaths_White']),CLUSTER_1,CLUSTER_3
black,numpy.sum(df['Deaths_Black']),CLUSTER_1,CLUSTER_3
latin,numpy.sum(df['Deaths_LatinX']),CLUSTER_1,CLUSTER_3
asian,numpy.sum(df['Deaths_Asian']),CLUSTER_1,CLUSTER_3
aian,numpy.sum(df['Deaths_AIAN']),CLUSTER_1,CLUSTER_3
nhpi,numpy.sum(df['Deaths_NHPI']),CLUSTER_1,CLUSTER_3
unknown,numpy.sum(df['Deaths_Unknown']),CLUSTER_1,CLUSTER_3
total,numpy.sum(df['Deaths_Total']),CLUSTER_1,CLUSTER_3
white,numpy.sum(df['Deaths_White']),CLUSTER_1,CLUSTER_3
black,numpy.sum(df['Deaths_Black']),CLUSTER_1,CLUSTER_3
latin,numpy.sum(df['Deaths_LatinX']),CLUSTER_1,CLUSTER_3
asian,numpy.sum(df['Deaths_Asian']),CLUSTER_1,CLUSTER_3
unknown,numpy.sum(df['Deaths_Unknown']),CLUSTER_1,CLUSTER_3
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_1,CLUSTER_3
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_1,CLUSTER_3
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_1,CLUSTER_3
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_1,CLUSTER_3
df_lookup,"pandas.DataFrame(0,index=np.arange(len(table)",CLUSTER_8,CLUSTER_3
df_lookup,"pd.DataFrame(0,index=numpy.arange(len(table)",CLUSTER_8,CLUSTER_3
trueMat,numpy.array(true),CLUSTER_5,CLUSTER_1
utilMat,numpy.array(train),CLUSTER_5,CLUSTER_1
Usk,"numpy.dot(U,s_root)",CLUSTER_5,CLUSTER_1
skV,"numpy.dot(s_root,V)",CLUSTER_5,CLUSTER_1
UsV,"numpy.dot(Usk,skV)",CLUSTER_5,CLUSTER_1
item_means,"numpy.mean(masked_arr,axis=0)",CLUSTER_5,CLUSTER_1
mask,numpy.isnan(utilMat),CLUSTER_5,CLUSTER_1
x,"numpy.tile(item_means,(utilMat.shape[0],1)",CLUSTER_5,CLUSTER_1
s,numpy.diag(s),CLUSTER_5,CLUSTER_1
"U,s,V","numpy.linalg.svd(utilMat,full_matrices=False)",CLUSTER_5,CLUSTER_1
masked_arr,"numpy.ma.masked_array(utilMat,mask)",CLUSTER_5,CLUSTER_1
UsV,"numpy.ma.masked_where(trueMat==1,UsV)",CLUSTER_5,CLUSTER_1
products_to_join,pandas.DataFrame(train['customerID']),CLUSTER_5,CLUSTER_1
test['products'],pandas.Series(pred),CLUSTER_5,CLUSTER_1
test['products'],pandas.Series(pred),CLUSTER_5,CLUSTER_1
train,"pandas.get_dummies(train,columns=['product_code'],prefix=prod_dict)",CLUSTER_5,CLUSTER_1
product_joined,"pandas.merge(train,cnt_srs,on='product_code',how='inner')",CLUSTER_5,CLUSTER_1
train,"pandas.merge(products_to_join,products_less.drop_duplicates(subset=['customerID'],keep='last')",CLUSTER_5,CLUSTER_1
train,pandas.read_csv('products.csv'),CLUSTER_5,CLUSTER_1
test,pandas.read_csv('sampleSubmission.csv'),CLUSTER_5,CLUSTER_1
s_root,scipy.linalg.sqrtm(s),CLUSTER_5,CLUSTER_1
svd,"sklearn.decomposition.TruncatedSVD(n_components=14,n_iter=7,random_state=42)",CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame({
'contry':['Kazakhstan','Russia','Belarus','Ukraine'],
'population':[17.04,143.5,9.5,45.5],
'square':[2724902,17125191,207600,603628]
})",CLUSTER_8,CLUSTER_4
df,"pandas.DataFrame({
'country':['Kazakhstan','Russia','Belarus','Ukraine'],
'population':[17.04,143.5,9.5,45.5],
'square':[2724902,17125191,207600,603628]
},index=['KZ','RU','BY','UA'])",CLUSTER_8,CLUSTER_4
my_series,"pandas.Series([5,6,7,8,9,10])",CLUSTER_8,CLUSTER_4
my_series2,"pandas.Series([5,6,7,8,9,10],index=['a','b','c','d','e','f'])",CLUSTER_8,CLUSTER_4
my_series3,"pandas.Series({'a':5,'b':6,'c':7,'d':8})",CLUSTER_8,CLUSTER_4
titanic_df,pandas.read_csv('titanic.csv'),CLUSTER_8,CLUSTER_4
pass_data,pandas.read_csv('titanic.csv'),CLUSTER_8,CLUSTER_4
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
train,"pandas.read_csv(""fichier_csv/train.csv"",sep=';',header=None)",CLUSTER_1,CLUSTER_3
train.columns,"pandas.read_csv(""fichier_csv/names.csv"",sep=';')",CLUSTER_1,CLUSTER_3
test,"pandas.read_csv(""fichier_csv/test.csv"",sep=';',header=None)",CLUSTER_1,CLUSTER_3
test.columns,"pandas.read_csv(""fichier_csv/names.csv"",sep=';')",CLUSTER_1,CLUSTER_3
eval_,"pandas.read_csv(""fichier_csv/eval.csv"",sep=';',header=None)",CLUSTER_1,CLUSTER_3
eval_.columns,"pandas.read_csv(""fichier_csv/names.csv"",sep=';')",CLUSTER_1,CLUSTER_3
debut_ClassifierLineaireRandom,time.time(),CLUSTER_1,CLUSTER_3
fin_ClassifierLineaireRandom,time.time(),CLUSTER_1,CLUSTER_3
debut_ClassifierKNN,time.time(),CLUSTER_1,CLUSTER_3
fin_ClassifierKNN,time.time(),CLUSTER_1,CLUSTER_3
debut_ClassifierPerceptron,time.time(),CLUSTER_1,CLUSTER_3
fin_ClassifierPerceptron,time.time(),CLUSTER_1,CLUSTER_3
debut_ClassifierPerceptronKernel,time.time(),CLUSTER_1,CLUSTER_3
fin_ClassifierPerceptronKernel,time.time(),CLUSTER_1,CLUSTER_3
df_pca_3d,"pandas.DataFrame(data=pca_3d,index=df_3d.index,columns=[""PC1"",""PC2""])",CLUSTER_7,CLUSTER_5
df_tsne_3d,"pandas.DataFrame(data=tsne_3d,index=df_3d.index,columns=[""tSNE1"",""tSNE2""])",CLUSTER_7,CLUSTER_5
df_3d,"pandas.read_pickle('../output/df_3d_zero.pkl.gz',compression='gzip')",CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_5
tsne,"sklearn.manifold.TSNE(n_components=2,n_iter=300)",CLUSTER_7,CLUSTER_5
ax,"seaborn.scatterplot(x=""PC1"",y=""PC2"",data=df_pca_3d,hue=df_3d[""Target""])",CLUSTER_7,CLUSTER_5
ax,"seaborn.scatterplot(x=""tSNE1"",y=""tSNE2"",data=df_tsne_3d,hue=df_3d[""Target""])",CLUSTER_7,CLUSTER_5
code+,"random.choice([s1,s2])",CLUSTER_11,CLUSTER_12
new_list,"random.sample(old_list,5)",CLUSTER_11,CLUSTER_12
arr,"numpy.array([1,2,3])",CLUSTER_2,CLUSTER_7
arr,"numpy.array([[1,2,3],[1,2,3]])",CLUSTER_2,CLUSTER_7
arr,"numpy.array([[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]])",CLUSTER_2,CLUSTER_7
arr,"numpy.array([1,2,3])",CLUSTER_2,CLUSTER_7
arr,"numpy.array([1,2,3],dtype=np.float32)",CLUSTER_2,CLUSTER_7
arr2,"numpy.array([4,5,6,7],dtype=np.float32)",CLUSTER_2,CLUSTER_7
words_matrix,pandas.DataFrame(newsgroups_counts.toarray(),CLUSTER_7,CLUSTER_1
tfidf_matrix,pandas.DataFrame(newsgroups_tfidf.toarray(),CLUSTER_7,CLUSTER_1
countries,"pandas.read_csv(""countries.csv"")",CLUSTER_7,CLUSTER_1
tfidf_matrix,"pd.DataFrame(newsgroups_tfidf.toarray(),columns=numpy.array(count_vectorizer.get_feature_names()",CLUSTER_7,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline(steps=[
(""imputer"",SimpleImputer(strategy=""median"")",CLUSTER_7,CLUSTER_1
newsgroups,"sklearn.datasets.fetch_20newsgroups(subset=""train"",categories=categories,shuffle=True,random_state=42)",CLUSTER_7,CLUSTER_1
newsgroups,"sklearn.datasets.fetch_20newsgroups(subset=""train"",categories=categories,shuffle=True,random_state=42)",CLUSTER_7,CLUSTER_1
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_3
targets,"numpy.array(targets_list,ndmin=2)",CLUSTER_1,CLUSTER_3
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_3
test_w_i_h,"numpy.array([[0.1,0.4,-0.3],
[-0.2,0.5,0.2]])",CLUSTER_1,CLUSTER_3
test_w_h_o,"numpy.array([[0.3,-0.1]])",CLUSTER_1,CLUSTER_3
hidden_inputs,"numpy.dot(self.weights_input_to_hidden,inputs)",CLUSTER_1,CLUSTER_3
final_inputs,"numpy.dot(self.weights_hidden_to_output,hidden_outputs)",CLUSTER_1,CLUSTER_3
del_weight_h_o,"numpy.dot(output_grad,hidden_outputs.T)",CLUSTER_1,CLUSTER_3
hidden_inputs,"numpy.dot(self.weights_input_to_hidden,inputs)",CLUSTER_1,CLUSTER_3
final_inputs,"numpy.dot(self.weights_hidden_to_output,hidden_outputs)",CLUSTER_1,CLUSTER_3
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_1,CLUSTER_3
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_1,CLUSTER_3
rides,pandas.read_csv(data_path),CLUSTER_1,CLUSTER_3
dates,pandas.to_datetime(rides.ix[test_data.index]['dteday']),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_3
"test_df.loc[:,'cluster']",pandas.Series(cluster),CLUSTER_0,CLUSTER_5
test_df,"pandas.read_csv(""data/test.csv"",low_memory=False)",CLUSTER_0,CLUSTER_5
n_estimators,"numpy.arange(2,200,step=5)",CLUSTER_0,CLUSTER_5
n_estimators,"numpy.arange(2,50,step=2)",CLUSTER_0,CLUSTER_5
n_estimators,"numpy.arange(2,20,step=1)",CLUSTER_0,CLUSTER_5
tweet_text,numpy.array(text),CLUSTER_0,CLUSTER_5
text,"re.sub(r""(?:\@|http?\://)",CLUSTER_0,CLUSTER_5
text,"re.sub(r""(?:\@|https?\://)",CLUSTER_0,CLUSTER_5
text,"re.sub(r""""""[\'\""]"""""",'',text)",CLUSTER_0,CLUSTER_5
tokens_regexp,"re.compile(r""""""(%s)",CLUSTER_0,CLUSTER_5
km_model,sklearn.cluster.KMeans(n_clusters=clusters),CLUSTER_0,CLUSTER_5
data,json.load(data_file),CLUSTER_10,CLUSTER_4
data,json.load(data_file),CLUSTER_10,CLUSTER_4
sol1,"scipy.integrate.odeint(ec_mov,[1,0,0,0.5],t1,args=(0.05,)",CLUSTER_3,CLUSTER_6
sol2,"scipy.integrate.odeint(ec_mov,[1,0,0,0.5],t2,args=(0.05,)",CLUSTER_3,CLUSTER_6
sol3,"scipy.integrate.odeint(ec_mov,[1,0,0,0.5],t3,args=(0.05,)",CLUSTER_3,CLUSTER_6
sol4,"scipy.integrate.odeint(ec_mov,[1,0,0,1],t4,args=(alpha,)",CLUSTER_3,CLUSTER_6
sol4_2,"scipy.integrate.odeint(ec_mov,[.99,sqrt(1-.99**2)",CLUSTER_3,CLUSTER_6
tiempos,"numpy.arange(x[0],x[1]+h,h)",CLUSTER_3,CLUSTER_6
sol,numpy.zeros((len(tiempos),CLUSTER_3,CLUSTER_6
t1,"numpy.linspace(0,30)",CLUSTER_3,CLUSTER_6
t2,"numpy.linspace(0,30,10)",CLUSTER_3,CLUSTER_6
t3,"numpy.linspace(0,30,1000)",CLUSTER_3,CLUSTER_6
t4,"numpy.linspace(0,2*pi*50,5000)",CLUSTER_3,CLUSTER_6
fig,"matplotlib.pyplot.figure(figsize=(4,4)",CLUSTER_2,CLUSTER_7
ax,matplotlib.pyplot.subplot(gs[i]),CLUSTER_2,CLUSTER_7
summarytable,"pandas.DataFrame({""UniqueItems"":[unique_items],""AveragePrice"":[average_price],""TotalNumberofPurchases"":[total_price],""TotalRevenue"":[total_purchases]})",CLUSTER_8,CLUSTER_4
df,"pandas.DataFrame({""Gender"":[""Male"",""Female"",""Other/Non-Disclosed""],""PercentageofPlayers"":[male_percentage,female_percentage,other_percentage],""TotalCount"":[male_count,female_count,other_count]},columns=[""Gender"",""PercentageofPlayers"",""TotalCount""])",CLUSTER_8,CLUSTER_4
df2,"pandas.DataFrame({""PurchaseCount"":gender_count,""AveragePurchasePrice"":gender_average,""TotalPurchaseValue"":gender_purchase_total,""PurchaseTotalPerPerson,Average"":purchase_total_per_person})",CLUSTER_8,CLUSTER_4
df3,"pandas.DataFrame({""TotalCount"":age_demographics_count,""PercentageofPlayers"":age_percentage})",CLUSTER_8,CLUSTER_4
df4,"pandas.DataFrame({""PurchaseCount"":total_count,""AveragePurchasePrice"":average,""TotalPurchaseValue"":total,""AveragePurchasePerPerson"":per_person_data})",CLUSTER_8,CLUSTER_4
df5,"pandas.DataFrame({""PurchaseCount"":top_count,""AveragePurchasePrice"":top_mean_count,""TotalPurchaseValue"":top_total_value})",CLUSTER_8,CLUSTER_4
df6,"pandas.DataFrame({""PurchaseCount"":most_profitable_items,""ItemPrice"":most_profit_price,""TotalPurchaseValue"":most_profit_total})",CLUSTER_8,CLUSTER_4
demographic,"pandas.cut(purchase_data[""Age""],bins_for_ages,labels=categorize_existing_players)",CLUSTER_8,CLUSTER_4
"purchase_data[""AgeRanges""]","pandas.cut(purchase_data[""Age""],bins_for_ages,labels=categorize_existing_players)",CLUSTER_8,CLUSTER_4
purchase_data,pandas.read_csv(file_to_load),CLUSTER_8,CLUSTER_4
yhat,"numpy.argmax(sess.run(score,feed_dict={X:x_tst})",CLUSTER_1,CLUSTER_3
x_val,"numpy.delete(arr=x_train,obj=tr_indices,axis=0)",CLUSTER_1,CLUSTER_3
y_val,"numpy.delete(arr=y_train,obj=tr_indices,axis=0)",CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(weather_data),CLUSTER_8,CLUSTER_4
df,"pandas.DataFrame(weather_data,columns=['Day','Temperature','Windspeed','Event'])",CLUSTER_8,CLUSTER_4
df,pandas.DataFrame(weather_data),CLUSTER_8,CLUSTER_4
india_weather,"pandas.DataFrame({
'city':['mumbai','delhi','bangalore'],
'temperature':[32,45,30],
'humidity':[80,60,78]
})",CLUSTER_8,CLUSTER_4
us_weather,"pandas.DataFrame({
'city':['newyork','chicago','orlando'],
'temperature':[21,14,65],
'humidity':[68,65,75]
})",CLUSTER_8,CLUSTER_4
temperature_df,"pandas.DataFrame({
'city':['mumbai','delhi','bangalore'],
'temperature':[32,38,35]
})",CLUSTER_8,CLUSTER_4
windspeed_df,"pandas.DataFrame({
'city':['mumbai','delhi','bangalore'],
'windspeed':[7,8,12]
})",CLUSTER_8,CLUSTER_4
s,"pandas.Series(['Humid','Dry','Rain'],name='event')",CLUSTER_8,CLUSTER_4
df,"pandas.concat([india_weather,us_weather],ignore_index=True)",CLUSTER_8,CLUSTER_4
df,"pandas.concat([india_weather,us_weather],keys=['india','us'])",CLUSTER_8,CLUSTER_4
df,"pandas.concat([temperature_df,windspeed_df],axis=1)",CLUSTER_8,CLUSTER_4
df,"pandas.concat([temperature_df,s],axis=1)",CLUSTER_8,CLUSTER_4
df,pandas.read_csv('weather_data.csv'),CLUSTER_8,CLUSTER_4
df,"pandas.read_csv('weather_data.csv',skiprows=1,names=['day','temperature','windspeed','event'])",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv('weather_data.csv',skiprows=1,names=['day','temperature','windspeed','event'],nrows=3)",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv('weather_data.csv',na_values=['notavailable','n.a.'])",CLUSTER_8,CLUSTER_4
df,pandas.read_csv('city_weather.csv'),CLUSTER_8,CLUSTER_4
crash_type_summary_stats,"pandas.DataFrame(columns=[""Cause"",
""TotalCount"",
""ClusteredCount"",
""NoiseCount"",
""Std.DistanceSum"",
""Std.DistanceMean""
])",CLUSTER_11,CLUSTER_11
multvarcluster_roads_df,"pandas.merge(segroutes_df,mvc_df,on=""OBJECTID"")",CLUSTER_11,CLUSTER_11
merged_routes_df,"pandas.merge(segroutes_mvt_df,mvc_df,on=""OBJECTID"")",CLUSTER_11,CLUSTER_11
crash_type_summary_stats,"pandas.read_csv(os.path.join(workspace_dir,""crash_type_summary_stats.csv"")",CLUSTER_11,CLUSTER_11
cmf_df,pandas.read_excel(cmf_xls),CLUSTER_11,CLUSTER_11
simple_plot,"seaborn.lmplot(x=aadt_field,y=crash_field,data=df,fit_reg=True)",CLUSTER_11,CLUSTER_11
single_plot_wreglines,"seaborn.lmplot(x=aadt_field,y=crash_field,data=df,fit_reg=True,ci=ci,hue=regline_case_field)",CLUSTER_11,CLUSTER_11
multi_plot_wreglines,"seaborn.lmplot(x=aadt_field,y=crash_field,data=df,fit_reg=True,ci=ci,col=regline_case_field)",CLUSTER_11,CLUSTER_11
dataset,pandas.read_csv('fiuba-trocafone-tp1-final-set\events.csv'),CLUSTER_11,CLUSTER_11
clientes_nuevos['timestamp'],pandas.to_datetime(clientes_nuevos['timestamp']),CLUSTER_11,CLUSTER_11
mes_minimo['flag_compra'],"numpy.where(mes_minimo['event']=='conversion','1','0')",CLUSTER_11,CLUSTER_11
df_zonas,pandas.concat(zonas),CLUSTER_9,CLUSTER_2
df,"pandas.read_html(url,match=zona)",CLUSTER_9,CLUSTER_2
purchase_data,pandas.read_csv(file_to_load),CLUSTER_8,CLUSTER_3
embedding,"pandas.DataFrame(data=data,index=keys)",CLUSTER_1,CLUSTER_3
bag2d,numpy.array([vec(word),CLUSTER_1,CLUSTER_3
bag2d,numpy.array([vec(word),CLUSTER_1,CLUSTER_3
i,numpy.argmin(delta),CLUSTER_1,CLUSTER_3
delta,"numpy.sum(diff*diff,axis=1)",CLUSTER_1,CLUSTER_3
doc2vec,"numpy.sum(vdoc,axis=0)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_1,CLUSTER_3
audits,"numpy.arange(0,10,1)",CLUSTER_12,CLUSTER_10
penalties,numpy.zeros(audits.shape[0]),CLUSTER_12,CLUSTER_10
ratios,numpy.zeros(cs.shape[0]),CLUSTER_12,CLUSTER_10
cs,"numpy.linspace(300000,1000000,num=2000)",CLUSTER_12,CLUSTER_10
t,"numpy.arange(0,30,dt)",CLUSTER_1,CLUSTER_10
s1,numpy.sin(2*np.pi*10*t),CLUSTER_1,CLUSTER_10
s2,numpy.sin(2*np.pi*10*t),CLUSTER_1,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(2,1)",CLUSTER_1,CLUSTER_10
data,"pandas.read_csv(""https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/06_Stats/Wind_Stats/wind.data"",sep='\s+')",CLUSTER_8,CLUSTER_3
data['Date'],"pandas.to_datetime(data[['Mo','Dy','Yr']])",CLUSTER_8,CLUSTER_3
xticks,"numpy.linspace(X_min[0],X_max[0],100)",CLUSTER_12,CLUSTER_5
yticks,"numpy.linspace(X_min[1],X_max[1],100)",CLUSTER_12,CLUSTER_5
"xx,yy","numpy.meshgrid(xticks,yticks)",CLUSTER_12,CLUSTER_5
X,"pandas.DataFrame(iris.data,columns=iris.feature_names)",CLUSTER_12,CLUSTER_5
df,"pandas.read_csv(""dt_data.csv"",index_col=0)",CLUSTER_12,CLUSTER_5
ax,matplotlib.pyplot.gca(),CLUSTER_12,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_5
model,sklearn.tree.DecisionTreeClassifier(max_depth=2),CLUSTER_12,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(max_depth=3),CLUSTER_12,CLUSTER_5
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_5
dfconf['Upper_Value'],numpy.exp(dfconf['Upper_Value']),CLUSTER_8,CLUSTER_3
dfconf['Lower_Value'],numpy.exp(dfconf['Lower_Value']),CLUSTER_8,CLUSTER_3
dfconf,pandas.DataFrame(conf),CLUSTER_8,CLUSTER_3
dfconf['Actual'],"pandas.DataFrame([2877,2730,3072,3306,2836,2713,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan],index=dfconf.index)",CLUSTER_8,CLUSTER_3
"forecast,stderr,conf","pandas.Series(model.forecast(steps=12,alpha=0.05)",CLUSTER_8,CLUSTER_3
"xx,yy","numpy.meshgrid(np.linspace(x_min,x_max,101)",CLUSTER_0,CLUSTER_3
df,"pandas.read_csv(args.data_file,header=0)",CLUSTER_0,CLUSTER_3
df_reduced,"pandas.read_csv(args.reduced_data_file,header=0)",CLUSTER_0,CLUSTER_3
x,"numpy.arange(-10,11,1)",CLUSTER_1,CLUSTER_10
x,"numpy.arange(-10,11,1)",CLUSTER_1,CLUSTER_10
x,"numpy.arange(-10,11,1)",CLUSTER_1,CLUSTER_10
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
sorter,numpy.argsort(jla['zcmb']),CLUSTER_5,CLUSTER_9
sorter1,numpy.argsort(logx_valsub),CLUSTER_5,CLUSTER_9
sorter,numpy.argsort(logx_vals),CLUSTER_5,CLUSTER_9
sorter,numpy.argsort(logx_vals),CLUSTER_5,CLUSTER_9
sorter,numpy.argsort(logx_vals),CLUSTER_5,CLUSTER_9
xvals,"numpy.reshape(logx_vals.values,(len(logx_vals)",CLUSTER_5,CLUSTER_9
yvals,"numpy.reshape(jla.mb.values,(len(logx_vals)",CLUSTER_5,CLUSTER_9
yerr,"numpy.reshape(jla.dmb.values,(len(logx_vals)",CLUSTER_5,CLUSTER_9
logx_vals,"numpy.log10(jla[""zcmb""])",CLUSTER_5,CLUSTER_9
logx_vals,"numpy.log10(jla[""zcmb""])",CLUSTER_5,CLUSTER_9
logx_vals,"numpy.log10(jla[""zcmb""])",CLUSTER_5,CLUSTER_9
err,numpy.sqrt(np.diag(pcov),CLUSTER_5,CLUSTER_9
err2,numpy.sqrt(np.diag(pcov2),CLUSTER_5,CLUSTER_9
err2,numpy.sqrt(np.diag(pcov2),CLUSTER_5,CLUSTER_9
test,numpy.setdiff1d(np.arange(Nall),CLUSTER_5,CLUSTER_9
jla,"pandas.read_csv(""drive/MyDrive/dsps/data/jla_likelihood_v6/data/jla_lcparams.txt"",sep="""")",CLUSTER_5,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(line,logx_vals,y_vals,p0=[5,0])",CLUSTER_5,CLUSTER_9
"popt2,pcov2","scipy.optimize.curve_fit(line,logx_vals,y_vals,sigma=jla.dmb,p0=[5,0])",CLUSTER_5,CLUSTER_9
"popt3,pcov3","scipy.optimize.curve_fit(line,logx_valsub,y_valsub)",CLUSTER_5,CLUSTER_9
"popt4,pcov4","scipy.optimize.curve_fit(quad,logx_vals,y_vals,p0=[5,1,0])",CLUSTER_5,CLUSTER_9
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test,yerr_train,yerr_test","sklearn.model_selection.train_test_split(
logx_vals,y_vals,uncertanties,test_size=0.33,random_state=42)",CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test,yerr_train,yerr_test","sklearn.model_selection.train_test_split(
xvals,yvals,yerr,test_size=0.33,random_state=42)",CLUSTER_5,CLUSTER_9
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_4,CLUSTER_11
df,"pandas.DataFrame(cancer['data'],columns=cancer['feature_names'])",CLUSTER_7,CLUSTER_5
df_comp,"pandas.DataFrame(pca.components_,columns=cancer['feature_names'])",CLUSTER_7,CLUSTER_5
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(tips,col=""time"",row=""smoker"")",CLUSTER_1,CLUSTER_10
g,"seaborn.FacetGrid(tips,col=""time"",row=""smoker"")",CLUSTER_1,CLUSTER_10
g,"seaborn.FacetGrid(tips,col=""time"",row=""smoker"",hue='sex')",CLUSTER_1,CLUSTER_10
g,"seaborn.JointGrid(x=""total_bill"",y=""tip"",data=tips)",CLUSTER_1,CLUSTER_10
g,"seaborn.JointGrid(x=""total_bill"",y=""tip"",data=tips)",CLUSTER_1,CLUSTER_10
g,seaborn.PairGrid(iris),CLUSTER_1,CLUSTER_10
g,seaborn.PairGrid(iris),CLUSTER_1,CLUSTER_10
iris,seaborn.load_dataset('iris'),CLUSTER_1,CLUSTER_10
tips,seaborn.load_dataset('tips'),CLUSTER_1,CLUSTER_10
html,requests.get(url),CLUSTER_9,CLUSTER_2
resultTable,pandas.DataFrame(myList),CLUSTER_9,CLUSTER_2
myList,"numpy.column_stack([SNoList,StateList,AdminCapitaList,LegisCapitalList,JudisCapitalList,YearList,FormerCapitalList])",CLUSTER_9,CLUSTER_2
ax2,"plt.colorbar(contours,cax=cax,ax=ax,ticks=numpy.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
cost,numpy.zeros_like(cm),CLUSTER_7,CLUSTER_8
cm,"numpy.around(cm,decimals=2)",CLUSTER_7,CLUSTER_8
n_samples,numpy.median(cnts),CLUSTER_7,CLUSTER_8
"X,Y","numpy.meshgrid(np.arange(0,n_classes,1)",CLUSTER_7,CLUSTER_8
df_resampled,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_resampled,"pandas.concat([df_resampled,df_target_resampled],axis=0)",CLUSTER_7,CLUSTER_8
df_remap['quality2'],"pandas.cut(df.quality,bins=3,labels=[1,2,3])",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('/home/cneiderer/Metis/Neiderer_Metis/Project3/data/winequality-red.csv',delimiter=';')",CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(cnts.index,cnts)",CLUSTER_7,CLUSTER_8
ax,"seaborn.heatmap(Z,ax=ax,cmap='RdYlGn',annot=True,cbar_ax=cax,
vmin=0,vmax=1,cbar_kws={'ticks':np.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
ax2,"matplotlib.pyplot.colorbar(contours,cax=cax,ax=ax,ticks=np.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
svm0,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
svm1,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
knn1,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
knn2,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
pipe3,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_7,CLUSTER_8
lr3,"sklearn.linear_model.LogisticRegression(C=1e3,
class_weight='balanced',
random_state=129,
multi_class='multinomial',
solver='newton-cg',max_iter=1000)",CLUSTER_7,CLUSTER_8
nb1,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
cities,pandas.read_csv('cities.csv'),CLUSTER_1,CLUSTER_3
self.worldmap,"numpy.zeros((200,200,3)",CLUSTER_12,CLUSTER_9
output_image,"numpy.zeros((img.shape[0]+data.worldmap.shape[0],img.shape[1]*2,3)",CLUSTER_12,CLUSTER_9
	idx_in_front,numpy.where(np.abs(Rover.obs_angles-bearing),CLUSTER_12,CLUSTER_9
color_select,"numpy.zeros_like(img[:,:,0])",CLUSTER_12,CLUSTER_9
color_select,"numpy.zeros_like(img[:,:,0])",CLUSTER_12,CLUSTER_9
x_pix_world,numpy.clip(np.int_(xpix_tran),CLUSTER_12,CLUSTER_9
y_pix_world,numpy.clip(np.int_(ypix_tran),CLUSTER_12,CLUSTER_9
mean_dir,numpy.mean(angles),CLUSTER_12,CLUSTER_9
obs_map,numpy.absolute(np.float32(threshed),CLUSTER_12,CLUSTER_9
angles,"numpy.arctan2(y_pixel,x_pixel)",CLUSTER_12,CLUSTER_9
dist,numpy.sqrt(x_pixel**2+y_pixel**2),CLUSTER_12,CLUSTER_9
source,"numpy.float32([[14,140],[301,140],[200,96],[118,96]])",CLUSTER_12,CLUSTER_9
destination,"numpy.float32([[image.shape[1]/2-dst_size,image.shape[0]-bottom_offset],
[image.shape[1]/2+dst_size,image.shape[0]-bottom_offset],
[image.shape[1]/2+dst_size,image.shape[0]-2*dst_size-bottom_offset],
[image.shape[1]/2-dst_size,image.shape[0]-2*dst_size-bottom_offset],
])",CLUSTER_12,CLUSTER_9
ground_truth_3d,"numpy.dstack((ground_truth*0,ground_truth*255,ground_truth*0)",CLUSTER_12,CLUSTER_9
"output_image[img.shape[0]:,0:data.worldmap.shape[1]]",numpy.flipud(map_add),CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,3)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,9)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,3)",CLUSTER_12,CLUSTER_9
df,"pandas.read_csv('../test_dataset/robot_log.csv',delimiter=';',decimal='.')",CLUSTER_12,CLUSTER_9
data,"pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data',names=column_names)",CLUSTER_5,CLUSTER_1
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
sgdc,sklearn.linear_model.SGDClassifier(),CLUSTER_5,CLUSTER_1
df,"pandas.read_csv('./LifeExpectancy.csv',skiprows=4,header=""infer"")",CLUSTER_1,CLUSTER_3
p0,matplotlib.pyplot.plot(Afghanistan),CLUSTER_1,CLUSTER_3
p1,matplotlib.pyplot.plot(Nepal),CLUSTER_1,CLUSTER_3
p2,matplotlib.pyplot.plot(NewZealand),CLUSTER_1,CLUSTER_3
p3,matplotlib.pyplot.plot(Netherlands),CLUSTER_1,CLUSTER_3
wmt,pandas.read_csv('./../data/WMT.csv'),CLUSTER_7,CLUSTER_3
wmt.ds,pandas.to_datetime(wmt.ds),CLUSTER_7,CLUSTER_3
myTime,time.time(),CLUSTER_7,CLUSTER_3
myTime,time.time(),CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,2)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
cm,matplotlib.pyplot.get_cmap('jet'),CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.array([56,52,4,150,30,0,0,0,39,17,0,
63,54,9,185,37,0,0,0,44,17,2,
112,106,6,1598,29,293,281,8,99,12,1])",CLUSTER_1,CLUSTER_3
xx,numpy.ones_like(zz),CLUSTER_1,CLUSTER_3
yy,numpy.ones_like(zz),CLUSTER_1,CLUSTER_3
z,numpy.ones_like(xx),CLUSTER_1,CLUSTER_3
"xx,yy",numpy.meshgrid(range(50),CLUSTER_1,CLUSTER_3
mean1,numpy.array(data1.mean(),CLUSTER_3,CLUSTER_3
mean2,numpy.array(data2.mean(),CLUSTER_3,CLUSTER_3
dif1,numpy.array(data1-mean1),CLUSTER_3,CLUSTER_3
dif2,numpy.array(data2-mean2),CLUSTER_3,CLUSTER_3
Euclidean,"numpy.array(np.power(abs(train.sub(numpy.array(numpy.array(test.loc[[j],:])",CLUSTER_3,CLUSTER_3
K_neighbours,"numpy.array([trainLabel[j]forjinnp.argpartition(Euclidean,i)",CLUSTER_3,CLUSTER_3
w1,numpy.dot(np.linalg.pinv(cov),CLUSTER_3,CLUSTER_3
predictedY,"numpy.dot(test_data,w1)",CLUSTER_3,CLUSTER_3
predictedY,"numpy.dot(test_data,w1)",CLUSTER_3,CLUSTER_3
output,pandas.DataFrame(output),CLUSTER_3,CLUSTER_3
output,"pandas.concat([data1,data2],ignore_index=True)",CLUSTER_3,CLUSTER_3
output,"pandas.concat([data1,data2,data3,data4,data5,data6],ignore_index=True)",CLUSTER_3,CLUSTER_3
output,"pandas.concat([data1,data2,data3],ignore_index=True)",CLUSTER_3,CLUSTER_3
output,"pandas.concat([data1,data2],ignore_index=True)",CLUSTER_3,CLUSTER_3
output,"pandas.read_csv(filename,delimiter=',',header=None)",CLUSTER_3,CLUSTER_3
w0,math.log(p1),CLUSTER_3,CLUSTER_3
hospital_read_df,pandas.read_csv('data/cms_hospital_readmissions.csv'),CLUSTER_7,CLUSTER_3
perm_samp,numpy.empty(size),CLUSTER_7,CLUSTER_3
comb_data,"numpy.concatenate((data1,data2)",CLUSTER_7,CLUSTER_3
perm_samp[i],numpy.sum(permuted_data[:len(data1),CLUSTER_7,CLUSTER_3
p,numpy.sum(perm_replicates>(sum(data1),CLUSTER_7,CLUSTER_3
p,numpy.sum(perm_replicates>(sum(data2),CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_3
df,"pandas.read_excel(""ENB2012_data.xlsx"")",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_5
reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
model,"sklearn.pipeline.Pipeline([('poly',PolynomialFeatures(degree=2)",CLUSTER_7,CLUSTER_5
model,"sklearn.pipeline.Pipeline([
('scale',StandardScaler()",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(other_path,header=None)",CLUSTER_8,CLUSTER_4
df,"pandas.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame({'col1':[1,2,3,np.nan],
'col2':[np.nan,555,666,444],
'col3':['abc','def','ghi','xyz']})",CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
train['PAY_LAST_3_CAT'],"pandas.qcut(train['PAY_LAST_3'],q=3,labels=['PAY_EARLY','PAY_REG','PAY_LATE'])",CLUSTER_7,CLUSTER_5
train['PAY_FIRST_3_CAT'],"pandas.qcut(train['PAY_FIRST_3'],q=3,labels=['PAY_EARLY','PAY_REG','PAY_LATE'])",CLUSTER_7,CLUSTER_5
train['PAY_AVG_CAT'],"pandas.qcut(train['PAY_AVG'],q=3,labels=['PAY_EARLY','PAY_REG','PAY_LATE'])",CLUSTER_7,CLUSTER_5
x,"pandas.qcut(train['PAY_LAST_3'],q=3)",CLUSTER_7,CLUSTER_5
train['PAY_TREND_CAT'],"pandas.qcut(train['PAY_TREND'],q=2,labels=['DEC','INC'])",CLUSTER_7,CLUSTER_5
train['PAY_LAST_2_CAT'],"pandas.qcut(train.apply(avg_payments(['PAY_DEC','PAY_NOV'])",CLUSTER_7,CLUSTER_5
train,pandas.read_csv('data/train_clean.csv'),CLUSTER_7,CLUSTER_5
test,"pandas.read_csv('data/test_clean.csv',sep=';')",CLUSTER_7,CLUSTER_5
pay_sum_acc,"sklearn.metrics.accuracy_score(prediction,train['DEFAULTPAYMENTJAN'])",CLUSTER_7,CLUSTER_5
pay_sum_acc_norm,"sklearn.metrics.accuracy_score(prediction_norm,train['DEFAULTPAYMENTJAN'])",CLUSTER_7,CLUSTER_5
"df[""year""]",pandas.DatetimeIndex(df.fundedDate),CLUSTER_8,CLUSTER_3
"df[""month""]",pandas.DatetimeIndex(df.fundedDate),CLUSTER_8,CLUSTER_3
company,"pandas.pivot_table(data=df,index=""company"",aggfunc=""count"",margins=True)",CLUSTER_8,CLUSTER_3
df,"pandas.read_excel(""CaseStudy-VCfundingdata.xlsx"",sheet_name=""FundingData"")",CLUSTER_8,CLUSTER_3
new_df,"pandas.read_excel(""CaseStudy-VCfundingdata.xlsx"",sheet_name=""FundingData"")",CLUSTER_8,CLUSTER_3
df_2,"pandas.read_excel(""CaseStudy-VCfundingdata.xlsx"",sheet_name=""StateMap"")",CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(),CLUSTER_11,CLUSTER_3
fruits_df,"pandas.DataFrame(fruits,columns=['Fruit'])",CLUSTER_11,CLUSTER_3
people_df,"pandas.DataFrame(people,columns=['Name','Age','BloodGroup'])",CLUSTER_11,CLUSTER_3
people_df,pandas.DataFrame(people),CLUSTER_11,CLUSTER_3
df1,"pandas.DataFrame({
'id':[1,2,3,4,5],
'name':['a','b','c','d','e'],
'sub':['sub1','sub2','sub3','sub4','sub5']
})",CLUSTER_11,CLUSTER_3
df2,"pandas.DataFrame({
'id':[1,2,3,4,5],
'name':['b','c','d','e','f'],
'sub':['sub3','sub4','sub5','sub6','sub7']
})",CLUSTER_11,CLUSTER_3
df1,"pandas.DataFrame({
'emp_id':[1,2,3,4,5],
'emp_name':['a','b','c','d','e'],
'sub':['sub1','sub2','sub3','sub4','sub5']
})",CLUSTER_11,CLUSTER_3
df2,"pandas.DataFrame({
'dept_id':[1,2,3,4,5],
'dept_name':['b','c','d','e','f'],
'sub':['sub3','sub4','sub5','sub6','sub7']
})",CLUSTER_11,CLUSTER_3
df3,"pandas.DataFrame({'id':[10],
'name':['z'],
'sub':['sub10']})",CLUSTER_11,CLUSTER_3
cmp_df,pandas.DataFrame(company_df),CLUSTER_11,CLUSTER_3
people_df,"pandas.DataFrame(people,columns=['Name','Score','BloodGroup'])",CLUSTER_11,CLUSTER_3
df1_st,"pandas.DataFrame(myList1,columns=['Star_ID','Loc_ID','pmRA','pmDE','Field','Jmag','Hmag'])",CLUSTER_11,CLUSTER_3
df2_st,"pandas.DataFrame(myList2,columns=['Star_ID','Loc_ID','pmRA','pmDE','Field','Jmag','Hmag'])",CLUSTER_11,CLUSTER_3
my_series,pandas.Series(dicts),CLUSTER_11,CLUSTER_3
s1,pandas.Series(dicts1),CLUSTER_11,CLUSTER_3
df_onlyleft,"pandas.merge(left=df1_x,right=df2_x,on='ID',how='left',indicator=True)",CLUSTER_11,CLUSTER_3
df3_st,"pandas.merge(df1_st,df2_st,on='Star_ID')",CLUSTER_11,CLUSTER_3
csv_df,pandas.read_csv('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/supermarkets.csv'),CLUSTER_11,CLUSTER_3
txt_df,"pandas.read_csv('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/supermarkets-semi-colons.txt',sep=';')",CLUSTER_11,CLUSTER_3
web_df,pandas.read_csv('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/supermarkets.csv'),CLUSTER_11,CLUSTER_3
market_df,pandas.read_csv('http://pythonhow.com/supermarkets.csv'),CLUSTER_11,CLUSTER_3
air_df,pandas.read_csv('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/AirQualityUCI.csv'),CLUSTER_11,CLUSTER_3
excel_df,"pandas.read_excel('https://github.com/insaid2018/Term-1/blob/master/Data/Casestudy/supermarkets.xlsx?raw=true',sheet_name=0)",CLUSTER_11,CLUSTER_3
json_df,pandas.read_json('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/supermarkets.json'),CLUSTER_11,CLUSTER_3
air_df['Date'],"pandas.to_datetime(air_df['Date'],format='%m/%d/%Y')",CLUSTER_11,CLUSTER_3
air_df['Time'],"pandas.to_datetime(air_df['Time'],format='%H:%M:%S')",CLUSTER_11,CLUSTER_3
timestamp,"pandas.to_datetime(""09:00:00"",format='%H:%M:%S')",CLUSTER_11,CLUSTER_3
datestamp,"pandas.to_datetime(""01/01/2005"",format='%d/%m/%Y')",CLUSTER_11,CLUSTER_3
a,numpy.arange(12),CLUSTER_11,CLUSTER_3
arr,numpy.array(capitals),CLUSTER_11,CLUSTER_3
tips,seaborn.load_dataset('tips'),CLUSTER_11,CLUSTER_3
dummy_label,pandas.get_dummies(train_labels),CLUSTER_5,CLUSTER_0
dummy_vote_label,pandas.get_dummies(vote),CLUSTER_5,CLUSTER_0
test_rss,"pandas.read_csv(path+'/Training_rss_21Aug17.csv',header=0)",CLUSTER_5,CLUSTER_0
test_coord,"pandas.read_csv(path+'/Training_coordinates_21Aug17.csv',header=0)",CLUSTER_5,CLUSTER_0
train_rss,"pandas.read_csv(path+'/Test_rss_21Aug17.csv',header=0)",CLUSTER_5,CLUSTER_0
train_coord,"pandas.read_csv(path+'/Test_coordinates_21Aug17.csv',header=0)",CLUSTER_5,CLUSTER_0
sample_x,numpy.array(sample_x),CLUSTER_5,CLUSTER_0
sample_y,numpy.array(sample_y),CLUSTER_5,CLUSTER_0
train_labels,numpy.asarray(building_floors_str),CLUSTER_5,CLUSTER_0
train_labels,numpy.asarray(dummy_label),CLUSTER_5,CLUSTER_0
test_labels,numpy.asarray(test_ch.map(str),CLUSTER_5,CLUSTER_0
test_labels,numpy.asarray(pd.get_dummies(test_labels),CLUSTER_5,CLUSTER_0
vote,numpy.asarray(vote),CLUSTER_5,CLUSTER_0
vote_labels,numpy.asarray(dummy_vote_label),CLUSTER_5,CLUSTER_0
ifnp.all(vote_labels[i]),=numpy.all(test_labels[i]),CLUSTER_5,CLUSTER_0
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_5,CLUSTER_0
"train_x,val_x,train_y,val_y","sklearn.model_selection.train_test_split(train_Xx,train_Yy,test_size=0.2)",CLUSTER_5,CLUSTER_0
index,random.randrange(len(x),CLUSTER_5,CLUSTER_0
name_path,os.listdir(data_path),CLUSTER_4,CLUSTER_6
temp,"os.listdir(os.path.join(data_path,v)",CLUSTER_4,CLUSTER_6
filenames,os.listdir(path),CLUSTER_4,CLUSTER_6
filenames,os.listdir(path),CLUSTER_4,CLUSTER_6
autolib_df,pandas.read_csv(url),CLUSTER_1,CLUSTER_3
new_autolib_data_df,pandas.read_csv('new_autolib.csv'),CLUSTER_1,CLUSTER_3
X_train_scaled,pandas.DataFrame(scaler.fit_transform(X_train),CLUSTER_7,CLUSTER_5
X_test_scaled,pandas.DataFrame(scaler.transform(X_test),CLUSTER_7,CLUSTER_5
features,"pandas.DataFrame(tree_sel.feature_importances_,
index=X_train.columns,
columns=['Importance'])",CLUSTER_7,CLUSTER_5
scores,"pandas.DataFrame({'roc_auc_score':roc_scores,'f1_score':f1_scores,'accuracy':acc_scores},
index=labels)",CLUSTER_7,CLUSTER_5
data,"pandas.get_dummies(data,columns=col_for_dum)",CLUSTER_7,CLUSTER_5
data,"pandas.read_excel('defaultofcreditcardclients.xls',header=1)",CLUSTER_7,CLUSTER_5
estimators,"numpy.arange(25,425,25)",CLUSTER_7,CLUSTER_5
depth,"numpy.arange(3,25)",CLUSTER_7,CLUSTER_5
min_l,"numpy.arange(3,10)",CLUSTER_7,CLUSTER_5
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_5
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
val_train_mean,"numpy.mean(val_train,axis=1)",CLUSTER_7,CLUSTER_5
val_test_mean,"numpy.mean(val_test,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
val_train_std,"numpy.std(val_train,axis=1)",CLUSTER_7,CLUSTER_5
val_test_std,"numpy.std(val_test,axis=1)",CLUSTER_7,CLUSTER_5
n_jobs,"1,train_sizes=numpy.linspace(.1,1.0,10)",CLUSTER_7,CLUSTER_5
n_jobs,"-1,train_sizes=numpy.linspace(.1,1.0,10)",CLUSTER_7,CLUSTER_5
learn_rate,"numpy.linspace(0.01,1.0,10)",CLUSTER_7,CLUSTER_5
tsne_model,"sklearn.manifold.TSNE(2,random_state=17)",CLUSTER_7,CLUSTER_5
tsne_model,"sklearn.manifold.TSNE(2,random_state=17)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
score_acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,grid_logit.predict(X_test_new)",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,grid_boosting.predict(X_test_new)",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,grid_forest.predict(X_test_new)",CLUSTER_7,CLUSTER_5
score_f1,"sklearn.metrics.f1_score(y_test,y_pred,average='weighted')",CLUSTER_7,CLUSTER_5
score_roc,"sklearn.metrics.roc_auc_score(y_test,y_roc)",CLUSTER_7,CLUSTER_5
forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=50,random_state=17,
class_weight='balanced')",CLUSTER_7,CLUSTER_5
boosting,sklearn.ensemble.GradientBoostingClassifier(random_state=17),CLUSTER_7,CLUSTER_5
logit,"sklearn.linear_model.LogisticRegression(random_state=17,class_weight='balanced')",CLUSTER_7,CLUSTER_5
tree_sel,sklearn.tree.DecisionTreeClassifier(random_state=17),CLUSTER_7,CLUSTER_5
sss,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=5,test_size=0.3,random_state=17)",CLUSTER_7,CLUSTER_5
grid_logit,"sklearn.model_selection.GridSearchCV(logit,logit_parameters,n_jobs=-1,scoring='roc_auc',cv=sss)",CLUSTER_7,CLUSTER_5
grid_boosting,"sklearn.model_selection.GridSearchCV(boosting,boosting_parameters,n_jobs=-1,scoring='roc_auc',cv=sss)",CLUSTER_7,CLUSTER_5
grid_forest,"sklearn.model_selection.GridSearchCV(forest,forest_parameters,n_jobs=-1,scoring='roc_auc',cv=sss)",CLUSTER_7,CLUSTER_5
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes,scoring=scoring)",CLUSTER_7,CLUSTER_5
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes,scoring=scoring)",CLUSTER_7,CLUSTER_5
"val_train,val_test","sklearn.model_selection.validation_curve(estimator,X,y,cv_param_name,
cv_param_values,cv=cv,
scoring=scoring)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,y_score[i])",CLUSTER_7,CLUSTER_5
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_7,CLUSTER_5
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
df1,"pandas.read_csv(""http://cocl.us/Geospatial_data"")",CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
K_gradient,"numpy.einsum(""ijk,i,j->ijk"",R[1],d,d)",CLUSTER_5,CLUSTER_5
K_gradient,"numpy.einsum(""ijk,i,j->ijk"",R[1],diag_X,diag_Y)",CLUSTER_5,CLUSTER_5
K,"numpy.einsum(""ij,i,j->ij"",R,diag_X,diag_Y)",CLUSTER_5,CLUSTER_5
d,numpy.diag(R[0]),CLUSTER_5,CLUSTER_5
K,numpy.diag(d),CLUSTER_5,CLUSTER_5
d,numpy.diag(R),CLUSTER_5,CLUSTER_5
K,numpy.diag(d),CLUSTER_5,CLUSTER_5
K,numpy.diag(diag_X),CLUSTER_5,CLUSTER_5
inputs,numpy.array(int_text[0:inputs_to_use]),CLUSTER_2,CLUSTER_7
targets,numpy.array(int_text[1:inputs_to_use+1]),CLUSTER_2,CLUSTER_7
inputs,"numpy.split(inputs,batches,1)",CLUSTER_2,CLUSTER_7
targets,"numpy.split(targets,batches,1)",CLUSTER_2,CLUSTER_7
data,"pandas.read_csv(""globalterrorismdb_0718dist_.csv"",encoding=""iso-8859-1"",low_memory=False)",CLUSTER_1,CLUSTER_3
kmeans_model,"sklearn.cluster.KMeans(n_clusters=num_clusters,n_init=5,max_iter=400,random_state=1,n_jobs=1)",CLUSTER_5,CLUSTER_10
df,pandas.read_csv('../01.Data_Collection/films.csv'),CLUSTER_8,CLUSTER_3
actor,pandas.read_csv('../01.Data_Collection/actor_code.csv'),CLUSTER_8,CLUSTER_3
toronto,pandas.DataFrame(columns=column_names),CLUSTER_9,CLUSTER_2
extracting_data,requests.get(url),CLUSTER_9,CLUSTER_2
df,"pandas.read_csv('df_comprehensive.csv',index_col=0)",CLUSTER_7,CLUSTER_3
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6','pca7'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5','pca6','pca7'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6','pca7','pca8'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5','pca6','pca7','pca8'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6','pca7','pca8','pca9'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5','pca6','pca7','pca8','pca9'])",CLUSTER_7,CLUSTER_8
proj,pandas.DataFrame(test_proj),CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(""fashion-mnist_train.csv"")",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(""fashion-mnist_test.csv"")",CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(2,5,figsize=(8,3)",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=1),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=4),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=5),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=6),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=7),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=8),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=9),CLUSTER_7,CLUSTER_8
tsne,"sklearn.manifold.TSNE(n_components=2,init='random',random_state=0)",CLUSTER_7,CLUSTER_8
v3,"numpy.array([1.0,0.2])",CLUSTER_1,CLUSTER_10
e_3,"numpy.matrix([[7],[0]])",CLUSTER_1,CLUSTER_10
e_4,"numpy.matrix([[0],[-2]])",CLUSTER_1,CLUSTER_10
transfusion,pandas.read_csv('datasets/transfusion.data'),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
transfusion.drop(columns='target')",CLUSTER_5,CLUSTER_1
tpot_auc_score,"sklearn.metrics.roc_auc_score(y_test,tpot.predict_proba(X_test)",CLUSTER_5,CLUSTER_1
logreg_auc_score,"sklearn.metrics.roc_auc_score(y_test,logreg.predict_proba(X_test_normed)",CLUSTER_5,CLUSTER_1
df_['monetary_log'],numpy.log(df_['Monetary(c.c.blood),CLUSTER_5,CLUSTER_1
logreg,"sklearn.linear_model.LogisticRegression(
solver='liblinear',
random_state=42
)",CLUSTER_5,CLUSTER_1
q_50,numpy.percentile(app_train[~app_train['AMT_ANNUITY'].isnull(),CLUSTER_4,CLUSTER_11
app_train,pandas.read_csv(f_app),CLUSTER_4,CLUSTER_11
mode_get,scipy.stats.mode(app_train[~app_train['AMT_GOODS_PRICE'].isnull(),CLUSTER_4,CLUSTER_11
start_time,time.time(),CLUSTER_4,CLUSTER_11
today,datetime.date.today(),CLUSTER_11,CLUSTER_12
delta,datetime.timedelta(days=100),CLUSTER_11,CLUSTER_12
n,"numpy.arange(0,30,2)",CLUSTER_11,CLUSTER_12
s,numpy.arange(13),CLUSTER_11,CLUSTER_12
r,numpy.arange(36),CLUSTER_11,CLUSTER_12
x,numpy.array(mylist),CLUSTER_11,CLUSTER_12
y,"numpy.array([4,5,6])",CLUSTER_11,CLUSTER_12
m,"numpy.array([[7,8,9],[10,11,12]])",CLUSTER_11,CLUSTER_12
z,"numpy.array([y,y**2])",CLUSTER_11,CLUSTER_12
z,"numpy.array([y,y**2])",CLUSTER_11,CLUSTER_12
a,"numpy.array([-4,-2,1,3,5])",CLUSTER_11,CLUSTER_12
p,"numpy.ones([2,3],int)",CLUSTER_11,CLUSTER_12
o,"numpy.linspace(0,4,9)",CLUSTER_11,CLUSTER_12
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_10
y,numpy.sin(2*np.pi*(x-0.01*i),CLUSTER_12,CLUSTER_10
x,"numpy.linspace(0,2,1000)",CLUSTER_12,CLUSTER_10
raw_tea_df,"pandas.read_csv(""./scraper/tea.csv"")",CLUSTER_8,CLUSTER_3
figure,"matplotlib.pyplot.figure(figsize=(8,15)",CLUSTER_5,CLUSTER_10
ax,matplotlib.pyplot.subplot(len(datasets),CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.4,random_state=42)",CLUSTER_5,CLUSTER_10
X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_10
"X,y","sklearn.datasets.make_classification(n_features=2,n_redundant=0,n_informative=2,
random_state=1,n_clusters_per_class=1)",CLUSTER_5,CLUSTER_10
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(2,4,figsize=(20,8)",CLUSTER_5,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(2,4,figsize=(20,8)",CLUSTER_5,CLUSTER_10
line,"numpy.linspace(-3,3,100)",CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,stratify=y,random_state=42)",CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(canser.data,canser.target,random_state=0)",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0)",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,hidden_layer_sizes=[10])",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,hidden_layer_sizes=[10,10])",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,
activation='tanh',hidden_layer_sizes=[10,10])",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,
hidden_layer_sizes=[n_hidden_nodes,n_hidden_nodes],
alpha=alpha)",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=i,hidden_layer_sizes=[100,100])",CLUSTER_5,CLUSTER_10
mlp,sklearn.neural_network.MLPClassifier(random_state=0),CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(random_state=0,max_iter=1000)",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(random_state=0,max_iter=1000,alpha=1)",CLUSTER_5,CLUSTER_10
"X,y","sklearn.datasets.make_moons(n_samples=100,noise=0.25,random_state=3)",CLUSTER_5,CLUSTER_10
canser,sklearn.datasets.load_breast_cancer(),CLUSTER_5,CLUSTER_10
X,"numpy.array(gen_data(n_samples,0.7)",CLUSTER_4,CLUSTER_0
X,"numpy.array(gen_data(n_samples,1)",CLUSTER_4,CLUSTER_0
test,"numpy.array(gen_data(2,1)",CLUSTER_4,CLUSTER_0
X,"numpy.zeros((n_chars,len(cat)",CLUSTER_4,CLUSTER_0
X_new,"numpy.zeros((X.shape[0],)",CLUSTER_4,CLUSTER_0
X_new,"numpy.copy(X[:,0])",CLUSTER_4,CLUSTER_0
train,"pandas.read_csv(""train_cab.csv"",na_values={""pickup_datetime"":""43""})",CLUSTER_7,CLUSTER_5
test,"pandas.read_csv(""test.csv"")",CLUSTER_7,CLUSTER_5
train['pickup_datetime'],"pandas.to_datetime(train['pickup_datetime'],format='%Y-%m-%d%H:%M:%SUTC')",CLUSTER_7,CLUSTER_5
"test[""pickup_datetime""]","pandas.to_datetime(test[""pickup_datetime""],format=""%Y-%m-%d%H:%M:%SUTC"")",CLUSTER_7,CLUSTER_5
"train[""fare_amount""]","pandas.to_numeric(train[""fare_amount""],errors=""coerce"")",CLUSTER_7,CLUSTER_5
train['fare_amount'],numpy.log1p(train['fare_amount']),CLUSTER_7,CLUSTER_5
train['distance'],numpy.log1p(train['distance']),CLUSTER_7,CLUSTER_5
test['distance'],numpy.log1p(test['distance']),CLUSTER_7,CLUSTER_5
RMSE_test_LR,"numpy.sqrt(mean_squared_error(y_test,pred_test_LR)",CLUSTER_7,CLUSTER_5
RMSE_train_LR,"numpy.sqrt(mean_squared_error(y_train,pred_train_LR)",CLUSTER_7,CLUSTER_5
RMSE_train_DT,"numpy.sqrt(mean_squared_error(y_train,pred_train_DT)",CLUSTER_7,CLUSTER_5
RMSE_test_DT,"numpy.sqrt(mean_squared_error(y_test,pred_test_DT)",CLUSTER_7,CLUSTER_5
RMSE_train_RF,"numpy.sqrt(mean_squared_error(y_train,pred_train_RF)",CLUSTER_7,CLUSTER_5
RMSE_test_RF,"numpy.sqrt(mean_squared_error(y_test,pred_test_RF)",CLUSTER_7,CLUSTER_5
RMSE_train_GB,"numpy.sqrt(mean_squared_error(y_train,pred_train_GB)",CLUSTER_7,CLUSTER_5
RMSE_test_GB,"numpy.sqrt(mean_squared_error(y_test,pred_test_GB)",CLUSTER_7,CLUSTER_5
RRF_rmse,"numpy.sqrt(mean_squared_error(y_test,predictions_RRF)",CLUSTER_7,CLUSTER_5
gb_rmse,"numpy.sqrt(mean_squared_error(y_test,predictions_gb)",CLUSTER_7,CLUSTER_5
GRF_rmse,"numpy.sqrt(mean_squared_error(y_test,predictions_GRF)",CLUSTER_7,CLUSTER_5
Ggb_rmse,"numpy.sqrt(mean_squared_error(y_test,predictions_Ggb)",CLUSTER_7,CLUSTER_5
fit_DT,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_7,CLUSTER_5
fit_RF,sklearn.ensemble.RandomForestRegressor(n_estimators=200),CLUSTER_7,CLUSTER_5
rf,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_7,CLUSTER_5
RRF,sklearn.ensemble.RandomForestRegressor(random_state=0),CLUSTER_7,CLUSTER_5
regr,sklearn.ensemble.RandomForestRegressor(random_state=0),CLUSTER_7,CLUSTER_5
regr,sklearn.ensemble.RandomForestRegressor(random_state=0),CLUSTER_7,CLUSTER_5
fit_GB,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_7,CLUSTER_5
gb,sklearn.ensemble.GradientBoostingRegressor(random_state=42),CLUSTER_7,CLUSTER_5
gb,sklearn.ensemble.GradientBoostingRegressor(random_state=0),CLUSTER_7,CLUSTER_5
gb,sklearn.ensemble.GradientBoostingRegressor(random_state=0),CLUSTER_7,CLUSTER_5
fit_LR,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train.iloc[:,train.columns!='fare_amount'],
train.iloc[:,0],test_size=0.20,random_state=1)",CLUSTER_7,CLUSTER_5
RRF_r2,"sklearn.metrics.r2_score(y_test,predictions_RRF)",CLUSTER_7,CLUSTER_5
gb_r2,"sklearn.metrics.r2_score(y_test,predictions_gb)",CLUSTER_7,CLUSTER_5
GRF_r2,"sklearn.metrics.r2_score(y_test,predictions_GRF)",CLUSTER_7,CLUSTER_5
Ggb_r2,"sklearn.metrics.r2_score(y_test,predictions_Ggb)",CLUSTER_7,CLUSTER_5
gridcv_rf,"sklearn.model_selection.GridSearchCV(regr,param_grid=grid_search,cv=5)",CLUSTER_7,CLUSTER_5
gridcv_gb,"sklearn.model_selection.GridSearchCV(gb,param_grid=grid_search,cv=5)",CLUSTER_7,CLUSTER_5
gridcv_rf,"sklearn.model_selection.GridSearchCV(regr,param_grid=grid_search,cv=5)",CLUSTER_7,CLUSTER_5
a,math.sin(dlat/2),CLUSTER_7,CLUSTER_5
randomcv_rf,"sklearn.model_selection.RandomizedSearchCV(RRF,param_distributions=rand_grid,n_iter=5,cv=5,random_state=0)",CLUSTER_7,CLUSTER_5
randomcv_gb,"sklearn.model_selection.RandomizedSearchCV(gb,param_distributions=rand_grid,n_iter=5,cv=5,random_state=0)",CLUSTER_7,CLUSTER_5
dframe,pandas.DataFrame(fips_sentiment),CLUSTER_0,CLUSTER_11
df,"pandas.read_csv(""us_cities.csv"")",CLUSTER_0,CLUSTER_11
Tweet1,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
t,json.loads(tweet),CLUSTER_0,CLUSTER_11
t,json.loads(tweet),CLUSTER_0,CLUSTER_11
t,json.loads(tweet),CLUSTER_0,CLUSTER_11
match,"re.match(pattern,city)",CLUSTER_0,CLUSTER_11
text,"re.sub('\[.*?\]','',text)",CLUSTER_0,CLUSTER_11
text,re.sub('[%s]'%re.escape(string.punctuation),CLUSTER_0,CLUSTER_11
text,"re.sub('\w*\d\w*','',text)",CLUSTER_0,CLUSTER_11
text,"re.sub('[‘’“”…]','',parsed_tweet[""cleaned_text""])",CLUSTER_0,CLUSTER_11
text,"re.sub('\n','',text)",CLUSTER_0,CLUSTER_11
recovered,"numpy.zeros((n,1)",CLUSTER_4,CLUSTER_11
dead,"numpy.zeros((n,1)",CLUSTER_4,CLUSTER_11
collision,"numpy.zeros((n,n)",CLUSTER_4,CLUSTER_11
inf_sum,numpy.zeros(np.int(t_tot/delT),CLUSTER_4,CLUSTER_11
infidx,"numpy.where(color[:,0]==1)",CLUSTER_4,CLUSTER_11
healthyidx,"numpy.where(color[:,1]==1)",CLUSTER_4,CLUSTER_11
deadidx,"numpy.where(color[:,3]==1)",CLUSTER_4,CLUSTER_11
recovidx,"numpy.where(color[:,2]==1)",CLUSTER_4,CLUSTER_11
phi,numpy.arctan2((pos1[1]-pos0[1]),CLUSTER_4,CLUSTER_11
th0,"numpy.arctan2(v[k,1],v[k,0])",CLUSTER_4,CLUSTER_11
th1,"numpy.arctan2(v[j,1],v[j,0])",CLUSTER_4,CLUSTER_11
t_rec,numpy.ceil(t_recovery*np.ones(n),CLUSTER_4,CLUSTER_11
v0_mag,"numpy.sqrt(v[k,0]**2+v[k,1]**2)",CLUSTER_4,CLUSTER_11
v1_mag,"numpy.sqrt(v[j,0]**2+v[j,1]**2)",CLUSTER_4,CLUSTER_11
t,"numpy.linspace(0,t_tot,np.int(t_tot/delT)",CLUSTER_4,CLUSTER_11
v,numpy.hstack((speed*np.cos(th),CLUSTER_4,CLUSTER_11
color,"numpy.hstack([infected,healthy,recovered]*(1-dead)",CLUSTER_4,CLUSTER_11
color,"numpy.hstack((color,dead)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(2,1,figsize=(5,10)",CLUSTER_4,CLUSTER_11
x,numpy.arange(len(feature_names),CLUSTER_5,CLUSTER_5
x,numpy.arange(len(feature_names),CLUSTER_5,CLUSTER_5
x,numpy.arange(len(feature_names),CLUSTER_5,CLUSTER_5
data,"pandas.read_csv(""SpeedDatingData.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_5
X,sklearn.preprocessing.scale(features),CLUSTER_5,CLUSTER_5
Y,sklearn.preprocessing.scale(features),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_5,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
proj,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(12,5)",CLUSTER_5,CLUSTER_5
_,"matplotlib.pyplot.xticks(x+0.5,feature_names,rotation=30)",CLUSTER_5,CLUSTER_5
_,"matplotlib.pyplot.xticks(x+0.5,feature_names,rotation=30)",CLUSTER_5,CLUSTER_5
_,"matplotlib.pyplot.xticks(x+0.5,feature_names,rotation=30)",CLUSTER_5,CLUSTER_5
logreg,sklearn.linear_model.LogisticRegression(C=1),CLUSTER_5,CLUSTER_5
logreg_men,sklearn.linear_model.LogisticRegression(C=1),CLUSTER_5,CLUSTER_5
logreg_women,sklearn.linear_model.LogisticRegression(C=1),CLUSTER_5,CLUSTER_5
response,"requests.get(url=url,headers=headers)",CLUSTER_10,CLUSTER_12
detail_page_text,"requests.get(url=detail_url,headers=headers)",CLUSTER_10,CLUSTER_12
traindf['cleaned'],numpy.array(corpus),CLUSTER_0,CLUSTER_5
testdf['cleaned'],numpy.array(corpus_test),CLUSTER_0,CLUSTER_5
train_upsampled,"pandas.concat([train_minority_upsampled,train_majority])",CLUSTER_0,CLUSTER_5
traindf,pandas.read_csv('data/train.csv'),CLUSTER_0,CLUSTER_5
testdf,pandas.read_csv('data/test.csv'),CLUSTER_0,CLUSTER_5
tweet,"re.sub('[^a-zA-Z]','',tweet)",CLUSTER_0,CLUSTER_5
tweet,re.sub('((www\.[^\s]+),CLUSTER_0,CLUSTER_5
tweet,"re.sub('@[^\s]+','AT_USER',tweet)",CLUSTER_0,CLUSTER_5
tweet,"re.sub(r'
tweet=tweet.split()",CLUSTER_0,CLUSTER_5
tweet,"re.sub('[^a-zA-Z]','',tweet)",CLUSTER_0,CLUSTER_5
tweet,re.sub('((www\.[^\s]+),CLUSTER_0,CLUSTER_5
tweet,"re.sub('@[^\s]+','AT_USER',tweet)",CLUSTER_0,CLUSTER_5
tweet,"re.sub(r'
tweet=tweet.split()",CLUSTER_0,CLUSTER_5
"X_train_bow,X_val_bow,y_train,y_val","sklearn.model_selection.train_test_split(train_upsampled_bow,train_upsampled['label'],test_size=0.2,random_state=42)",CLUSTER_0,CLUSTER_5
rf_bow,"sklearn.ensemble.RandomForestClassifier(n_estimators=400,random_state=11)",CLUSTER_0,CLUSTER_5
sample_df,"pandas.DataFrame(sample_numpy_data,index=dates_index,columns=list('ABCD')",CLUSTER_1,CLUSTER_3
dates_index,"pandas.date_range(starting_date,periods=6)",CLUSTER_1,CLUSTER_3
sample_numpy_data,numpy.array(np.arange(24),CLUSTER_1,CLUSTER_3
train_loss,"numpy.array([i[""train_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
valid_loss,"numpy.array([i[""valid_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_train_loss,"numpy.array([i[""train_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_str_train_loss,"numpy.array([i[""train_loss""]foriinnet1_stretch.train_history_])",CLUSTER_4,CLUSTER_8
net1_str_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_stretch.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_train_loss,"numpy.array([i[""train_loss""]foriinnet1_eq.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_eq.train_history_])",CLUSTER_4,CLUSTER_8
net1_adapteq_train_loss,"numpy.array([i[""train_loss""]foriinnet1_adapteq.train_history_])",CLUSTER_4,CLUSTER_8
net1_adapteq_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_adapteq.train_history_])",CLUSTER_4,CLUSTER_8
net1_train_loss,"numpy.array([i[""train_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_train_loss,"numpy.array([i[""train_loss""]foriinnet1_eq.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_eq.train_history_])",CLUSTER_4,CLUSTER_8
net1_augmentation_train_loss,"numpy.array([i[""train_loss""]foriinnet1_augmentation.train_history_])",CLUSTER_4,CLUSTER_8
net1_augmentation_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_augmentation.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_augmentation_train_loss,"numpy.array([i[""train_loss""]foriinnet1_eq_augmentation.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_augmentation_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_eq_augmentation.train_history_])",CLUSTER_4,CLUSTER_8
train_loss,"numpy.array([i[""train_loss""]foriinnet1_dropout.train_history_])",CLUSTER_4,CLUSTER_8
valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_dropout.train_history_])",CLUSTER_4,CLUSTER_8
X_stretch,numpy.empty_like(X),CLUSTER_4,CLUSTER_8
X_eq,numpy.empty_like(X),CLUSTER_4,CLUSTER_8
X_adapteq,numpy.empty_like(X),CLUSTER_4,CLUSTER_8
hpfX,numpy.empty_like(X),CLUSTER_4,CLUSTER_8
X,numpy.vstack(df['Image'].values),CLUSTER_4,CLUSTER_8
"p_lowbound,p_upperbound","numpy.percentile(img,(1,99)",CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,16)",CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_4,CLUSTER_8
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_2,CLUSTER_7
self.time_start,time.time(),CLUSTER_2,CLUSTER_7
C,"pandas.DataFrame([""CAC40"",""DAX"",""FTSE""],columns=[""Index""])",CLUSTER_8,CLUSTER_3
Indices,"pandas.read_csv(""data/hsbc_bcs_bac.csv"")",CLUSTER_8,CLUSTER_3
Indices,"pandas.read_csv(""data/hsbc_bcs_bac.csv"")",CLUSTER_8,CLUSTER_3
"Temp[""Return""]","numpy.log(Temp[""close""]/Temp[""close""].shift(1)",CLUSTER_8,CLUSTER_3
sunspot,pandas.read_csv('dados/sunspot.csv'),CLUSTER_1,CLUSTER_3
airline,pandas.read_csv('dados/airline_passengers.csv'),CLUSTER_1,CLUSTER_3
aws,pandas.read_csv('dados/wine_sales.csv'),CLUSTER_1,CLUSTER_3
sp500,pandas.read_csv('dados/sp500.csv'),CLUSTER_1,CLUSTER_3
usd,pandas.read_csv('dados/usa_accident_death.csv'),CLUSTER_1,CLUSTER_3
hit,pandas.read_csv('dados/internet_traffic.csv'),CLUSTER_1,CLUSTER_3
dmt,pandas.read_csv('dados/daily_temp.csv'),CLUSTER_1,CLUSTER_3
execucoes,numpy.arange(qtd_execucoes),CLUSTER_1,CLUSTER_3
neuronios,"numpy.arange(2,26)",CLUSTER_1,CLUSTER_3
dim_tot,numpy.array(parameter.shape),CLUSTER_1,CLUSTER_3
W1_dim,numpy.array(W1.shape),CLUSTER_1,CLUSTER_3
b1_dim,numpy.array(b1.shape),CLUSTER_1,CLUSTER_3
W2_dim,numpy.array(W2.shape),CLUSTER_1,CLUSTER_3
b2_dim,numpy.array(b2.shape),CLUSTER_1,CLUSTER_3
velocidade,"numpy.zeros((qtd_particulas,atributos_dim_sum)",CLUSTER_1,CLUSTER_3
pbest,"numpy.zeros((qtd_particulas,atributos_dim_sum)",CLUSTER_1,CLUSTER_3
mse_treino,"numpy.zeros((qtd_execucoes,len(y_I)",CLUSTER_1,CLUSTER_3
mse_teste,"numpy.zeros((qtd_execucoes,len(y_I)",CLUSTER_1,CLUSTER_3
pos_indexes,numpy.where(diffs>0),CLUSTER_1,CLUSTER_3
neg_indexes,numpy.where(diffs<0),CLUSTER_1,CLUSTER_3
zero_indexes,numpy.where(diffs==0),CLUSTER_1,CLUSTER_3
params_stack,numpy.concatenate(tuple(params_list),CLUSTER_1,CLUSTER_3
Z1,"numpy.dot(W1,X)",CLUSTER_1,CLUSTER_3
Z2,"numpy.dot(W2,A1)",CLUSTER_1,CLUSTER_3
dZ1,"numpy.dot(W2.T,dZ2)",CLUSTER_1,CLUSTER_3
step_size[neg_indexes],"numpy.maximum(step_size[neg_indexes]*learning_rate_min,step_size.min()",CLUSTER_1,CLUSTER_3
step_size[pos_indexes],"numpy.minimum(step_size[pos_indexes]*learning_rate_max,step_size.max()",CLUSTER_1,CLUSTER_3
diffs,"numpy.multiply(grad_old,grad_new)",CLUSTER_1,CLUSTER_3
grad_new[pos_indexes],numpy.multiply(-np.sign(grad_new[pos_indexes]),CLUSTER_1,CLUSTER_3
grad_new[zero_indexes],numpy.multiply(-np.sign(grad_new[zero_indexes]),CLUSTER_1,CLUSTER_3
X_treino_temp,"numpy.vstack((X_treino,X_validacao)",CLUSTER_1,CLUSTER_3
y_treino_temp,"numpy.vstack((y_treino,y_validacao)",CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
inputs,numpy.asarray(inputs),CLUSTER_4,CLUSTER_0
inputs,numpy.asarray(inputs),CLUSTER_4,CLUSTER_0
axes,"matplotlib.pyplot.subplot(rows,cols,i)",CLUSTER_7,CLUSTER_3
X_train,numpy.array(raw_data_X),CLUSTER_3,CLUSTER_10
y_train,numpy.array(raw_data_y),CLUSTER_3,CLUSTER_10
x,"numpy.array([8.093607318,3.365731514])",CLUSTER_3,CLUSTER_10
nearest,numpy.argsort(distances),CLUSTER_3,CLUSTER_10
d,math.sqrt(np.sum((x_train-x),CLUSTER_3,CLUSTER_10
votes,collections.Counter(topK_y),CLUSTER_3,CLUSTER_10
experiments_dir,os.getcwd(),CLUSTER_4,CLUSTER_7
_outputs_shape,numpy.prod(image_size),CLUSTER_4,CLUSTER_7
tf.keras.layers.Dense(units,numpy.product(c),CLUSTER_4,CLUSTER_7
TRI_2008,"pandas.read_csv(""C:/Users/Luckbug/Code/emissions/TRI/TRI_2008_US.csv"")",CLUSTER_8,CLUSTER_4
x2,"numpy.linspace(0,1,100)",CLUSTER_1,CLUSTER_10
dados_new,pandas.DataFrame(),CLUSTER_8,CLUSTER_3
dados_new,"pandas.concat([dados_new,dados_selecao])",CLUSTER_8,CLUSTER_3
dados,"pandas.read_csv('aluguel_residencial.csv',sep=';')",CLUSTER_8,CLUSTER_3
aluguel_amostra,"pandas.read_csv('aluguel_amostra.csv',sep=';')",CLUSTER_8,CLUSTER_3
english_words_counter,collections.Counter([wordforsentenceinenglish_sentencesforwordinsentence.split(),CLUSTER_2,CLUSTER_7
french_words_counter,collections.Counter([wordforsentenceinfrench_sentencesforwordinsentence.split(),CLUSTER_2,CLUSTER_7
sentences,"numpy.array([sentence[0],x[0]])",CLUSTER_2,CLUSTER_7
"X,y","sklearn.datasets.make_blobs(n_samples=500,
n_features=2,
centers=4,
cluster_std=1,
center_box=(-10.0,10.0)",CLUSTER_5,CLUSTER_10
"X,y","sklearn.datasets.make_blobs(n_samples=500,
n_features=2,
centers=4,
cluster_std=1,
center_box=(-10.0,10.0)",CLUSTER_5,CLUSTER_10
clusterer,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=10)",CLUSTER_5,CLUSTER_10
sample_silhouette_values,"sklearn.metrics.silhouette_samples(X,cluster_labels)",CLUSTER_5,CLUSTER_10
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels)",CLUSTER_5,CLUSTER_10
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_5,CLUSTER_10
y,pandas.Period('2016'),CLUSTER_8,CLUSTER_3
m,pandas.Period('2017-12'),CLUSTER_8,CLUSTER_3
d,"pandas.Period('2016-02-28',freq='D')",CLUSTER_8,CLUSTER_3
h,"pandas.Period('2017-08-1523:00:00',freq='H')",CLUSTER_8,CLUSTER_3
q1,"pandas.Period('2017Q1',freq='Q-JAN')",CLUSTER_8,CLUSTER_3
w,"pandas.Period('2017-07-05',freq='W')",CLUSTER_8,CLUSTER_3
w2,"pandas.Period('2017-08-15',freq='W')",CLUSTER_8,CLUSTER_3
r,"pandas.PeriodIndex(start='2016-01',freq='3M',periods=10)",CLUSTER_8,CLUSTER_3
df.index,"pandas.PeriodIndex(df.index,freq=""Q-JAN"")",CLUSTER_8,CLUSTER_3
ps,pandas.Series(np.random.randn(len(idx),CLUSTER_8,CLUSTER_3
r,"pandas.period_range('2011','2017',freq='q')",CLUSTER_8,CLUSTER_3
r,"pandas.period_range('2011','2017',freq='q-jan')",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""wmt.csv"")",CLUSTER_8,CLUSTER_3
T,"numpy.array([[9.8999e-01,9.00000e-01,0.00000e-00,1.00000e-02,0.00000e+00],
[1.00000e-02,0.00000e+00,0.00000e+00,0.00000e+00,0.00000e+00],
[0.0000,1.00000e-01,9.98999e-01,9.90000e-01,1.00000e+00],
[0.00000e+00,0.00000e+00,1.00000e-03,0.00000e+00,0.00000e+00],
[0.00001e+00,0.00000e+00,1.00000e-06,0.00000e+00,0.00000e+00]])",CLUSTER_1,CLUSTER_3
initial_state,"numpy.array([1.0,0.0,0.0,0.0,0.0])",CLUSTER_1,CLUSTER_3
R,"numpy.array([[-30.0,-600,0.0,-3000,0.0],
[-200.0,0.0,0.0,0.0,0.0],
[0.0,-30000,-20,-100,-30000],
[0.0,0.0,-1000,0.0,0.0],
[-100000,0.0,-50000,0.0,0.0]])",CLUSTER_1,CLUSTER_3
s_list,"numpy.concatenate((s_list,np.reshape(s,(s.shape[0],1)",CLUSTER_1,CLUSTER_3
s,"numpy.matmul(T,s)",CLUSTER_1,CLUSTER_3
s_prime,"numpy.matmul(T,s)",CLUSTER_1,CLUSTER_3
s_list,"numpy.reshape(s,(s.shape[0],1)",CLUSTER_1,CLUSTER_3
delta_s,"numpy.subtract(s,s_prime)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_1,CLUSTER_3
train,pandas.read_csv('train.csv'),CLUSTER_5,CLUSTER_5
test,pandas.read_csv('test.csv'),CLUSTER_5,CLUSTER_5
df_test,pandas.read_csv('test.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=1,stratify=y)",CLUSTER_5,CLUSTER_5
etc,sklearn.ensemble.ExtraTreesClassifier(n_estimators=1000),CLUSTER_5,CLUSTER_5
etc,sklearn.ensemble.ExtraTreesClassifier(n_estimators=1000),CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(te_ary,columns=te.columns_)",CLUSTER_8,CLUSTER_4
c,collections.Counter(list),CLUSTER_10,CLUSTER_4
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_6,CLUSTER_10
filter_vals,"numpy.array([[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1]])",CLUSTER_6,CLUSTER_10
filters,"numpy.array([filter_1,filter_2,filter_3,filter_4])",CLUSTER_6,CLUSTER_10
df,pandas.DataFrame(friend_list),CLUSTER_8,CLUSTER_4
list,os.listdir(rootdir),CLUSTER_11,CLUSTER_12
init_date,"datetime.date(1970,1,1)",CLUSTER_11,CLUSTER_12
start_date,"datetime.date(1990,1,1)",CLUSTER_11,CLUSTER_12
end_date,"datetime.date(2012,12,25)",CLUSTER_11,CLUSTER_12
result,"numpy.zeros((7,79,94)",CLUSTER_11,CLUSTER_12
f_w.variables['lat'][:],numpy.zeros((79),CLUSTER_11,CLUSTER_12
f_w.variables['lon'][:],numpy.zeros((94),CLUSTER_11,CLUSTER_12
f_w.variables['time'][:],numpy.zeros((7),CLUSTER_11,CLUSTER_12
rand_ind,random.choice(range(len(s),CLUSTER_4,CLUSTER_7
s_list[rand_ind],random.choice(string.ascii_lowercase+'0123456789'),CLUSTER_4,CLUSTER_7
target_similarity,numpy.array([x[1]forxinbatch_data]),CLUSTER_4,CLUSTER_7
address1,numpy.array([address2onehot(x[0]),CLUSTER_4,CLUSTER_7
address2,numpy.array([address2onehot(x[1]),CLUSTER_4,CLUSTER_7
test_queries_ix,numpy.array([address2onehot(x),CLUSTER_4,CLUSTER_7
test_references_ix,numpy.array([address2onehot(x),CLUSTER_4,CLUSTER_7
test_query,numpy.repeat(np.array([query]),CLUSTER_4,CLUSTER_7
df,"pandas.read_csv(""ml-latest-small/ratings.csv"")",CLUSTER_8,CLUSTER_4
power_df,"pandas.read_csv(""power.csv"")",CLUSTER_8,CLUSTER_4
sports_ru_tb,pandas.read_html('https://www.sports.ru/bundesliga/table/'),CLUSTER_8,CLUSTER_4
data,pandas.read_csv('data_breast.csv'),CLUSTER_7,CLUSTER_5
pd_table,pandas.read_csv(StringIO(table.as_csv(),CLUSTER_7,CLUSTER_5
pd_table,pandas.read_csv(StringIO(table.as_csv(),CLUSTER_7,CLUSTER_5
model_tree_o,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_logreg,"sklearn.linear_model.LogisticRegression(penalty='l1',C=0.1,solver='liblinear')",CLUSTER_7,CLUSTER_5
model_logreg_o,"sklearn.linear_model.LogisticRegression(penalty='l1',C=0.1,solver='liblinear')",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=42)",CLUSTER_7,CLUSTER_5
"X_train_o,X_test_o,y_train_o,y_test_o","sklearn.model_selection.train_test_split(X_resampled_o,y_resampled_o,test_size=0.33,
random_state=42)",CLUSTER_7,CLUSTER_5
"precision,recall,thresholds","sklearn.metrics.precision_recall_curve(y_test,
[i[1]foriinlogreg_prediction_proba])",CLUSTER_7,CLUSTER_5
daypage,"requests.get('http://mars.nasa.gov/msl/multimedia/raw',
params={'s':day,'camera':'FHAZ'})",CLUSTER_12,CLUSTER_11
content,requests.get(url),CLUSTER_12,CLUSTER_11
submission,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
joined,"pandas.concat([train_data,test_data],ignore_index=True)",CLUSTER_7,CLUSTER_8
joined[column],"pandas.factorize(joined[column].values,sort=True)",CLUSTER_7,CLUSTER_8
train_data,"pandas.read_csv(""train.csv"")",CLUSTER_7,CLUSTER_8
prediction,numpy.exp(model.predict(test_data),CLUSTER_7,CLUSTER_8
target,numpy.log(target+shift),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(np.log(train_data['loss']),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(np.log(train_data['loss']+shift),CLUSTER_7,CLUSTER_8
"fg,ax","matplotlib.pyplot.subplots(nrows=1,ncols=n_cols,figsize=(12,8)",CLUSTER_7,CLUSTER_8
"fg,ax","matplotlib.pyplot.subplots(nrows=1,ncols=n_cols,sharey=True,figsize=(12,8)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LinearRegression(n_jobs=-1),CLUSTER_7,CLUSTER_8
error,"sklearn.metrics.mean_absolute_error(y_true,np.exp(model.predict(test_data)",CLUSTER_7,CLUSTER_8
my_array1,numpy.array(my_list1),CLUSTER_3,CLUSTER_6
my_array2,numpy.array(my_lists),CLUSTER_3,CLUSTER_6
dataframe,"pandas.read_csv(""C:/Users/FC/Documents/Deep_Learning_Project_Four/sonar.csv"",header=None)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
dfCrimesByTemp,pandas.DataFrame(dfCrimesByTemp),CLUSTER_9,CLUSTER_2
dfTempNorm,pandas.DataFrame(dfTempNorm),CLUSTER_9,CLUSTER_2
dfTempByHour,pandas.DataFrame(dfTempByHour),CLUSTER_9,CLUSTER_2
dfCrimesByWeather,pandas.DataFrame(dfCrimesByWeather),CLUSTER_9,CLUSTER_2
dfWeatherNorm,pandas.DataFrame(dfWeatherNorm),CLUSTER_9,CLUSTER_2
dfWeatherByHour,pandas.DataFrame(dfWeatherByHour),CLUSTER_9,CLUSTER_2
dfSevenMaybeOutdoor,pandas.DataFrame(dfSevenMaybeOutdoor),CLUSTER_9,CLUSTER_2
dfSevenOutdoor,pandas.DataFrame(dfSevenOutdoor),CLUSTER_9,CLUSTER_2
dfSevenIndoor,pandas.DataFrame(dfSevenIndoor),CLUSTER_9,CLUSTER_2
dfSouthPrecinct,pandas.DataFrame(dfSouthPrecinct),CLUSTER_9,CLUSTER_2
dfNorthPrecinct,pandas.DataFrame(dfNorthPrecinct),CLUSTER_9,CLUSTER_2
dfCrimesByWeather,pandas.DataFrame(dfCrimesByWeather),CLUSTER_9,CLUSTER_2
dfWeatherNorm,pandas.DataFrame(dfWeatherNorm),CLUSTER_9,CLUSTER_2
dfWeatherByHour,pandas.DataFrame(dfWeatherByHour),CLUSTER_9,CLUSTER_2
dfSevenPrecincts,pandas.DataFrame(dfSevenPrecincts),CLUSTER_9,CLUSTER_2
dfPrecinct,"pandas.DataFrame(columns=['Precinct','R-Squared','P-Value','Crime'])",CLUSTER_9,CLUSTER_2
dfTempNormalized,"pandas.merge(dfTempByHour,dfCrimesByTemp,on='Temperature')",CLUSTER_9,CLUSTER_2
dfWeatherNormalized,"pandas.merge(dfCrimesByWeather,dfWeatherByHour,on=weatherType)",CLUSTER_9,CLUSTER_2
dfWeatherNormalized,"pandas.merge(dfCrimesByWeather,dfWeatherByHour,on=weatherType)",CLUSTER_9,CLUSTER_2
crimeData,"pandas.read_csv(""rows.csv_accessType=DOWNLOAD"")",CLUSTER_9,CLUSTER_2
weather,"pandas.read_json(""DarkSky_Data.json"")",CLUSTER_9,CLUSTER_2
weather['datetime'],"pandas.to_datetime(weather['time'],unit='s',utc=True)",CLUSTER_9,CLUSTER_2
crime['datetime'],pandas.to_datetime((crime['CMPLNT_FR_DT']+''+crime['CMPLNT_FR_TM']),CLUSTER_9,CLUSTER_2
x,sklearn.preprocessing.StandardScaler(),CLUSTER_10,CLUSTER_4
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_10,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train_data,class_data,test_size=0.2)",CLUSTER_10,CLUSTER_4
plain,"numpy.zeros((ns,ntr)",CLUSTER_1,CLUSTER_10
cipher,"numpy.zeros((ns,ntr)",CLUSTER_1,CLUSTER_10
cipher,"numpy.zeros((ns,ntr)",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
imgplot,"matplotlib.pyplot.imshow(plain,cmap='gray')",CLUSTER_1,CLUSTER_10
imgplot,"matplotlib.pyplot.imshow(cipher,cmap='gray')",CLUSTER_1,CLUSTER_10
imgplot,"matplotlib.pyplot.imshow(plain,cmap='gray')",CLUSTER_1,CLUSTER_10
imgplot,"matplotlib.pyplot.imshow(cipher,cmap='gray')",CLUSTER_1,CLUSTER_10
address_indexes_arr,numpy.asarray(address_indexes),CLUSTER_9,CLUSTER_2
has_field,numpy.logical_not(pd.isnull(df[fld]),CLUSTER_9,CLUSTER_2
input_df,"pandas.DataFrame(keys,columns=['key','street','city','state','zip'])",CLUSTER_9,CLUSTER_2
matching,pandas.DataFrame({'idx':pd.Series(address_indexes_arr[matched_df.reset_index(),CLUSTER_9,CLUSTER_2
ad_ix_df,pandas.DataFrame({'idx':address_indexes_arr[matched_df.reset_index(),CLUSTER_9,CLUSTER_2
cols,"pandas.Series(tmp_df.columns,index=tmp_df.columns)",CLUSTER_9,CLUSTER_2
idx,"pandas.isnull(geocoded_df[['Case.File.Date','Judgment.Date']]
)",CLUSTER_9,CLUSTER_2
eviction_df,"pandas.read_sql('SELECT*FROMevictions',connstr)",CLUSTER_9,CLUSTER_2
df,"pandas.read_sql_table('GeocodedAddresses2',connstr)",CLUSTER_9,CLUSTER_2
sess,requests.Session(),CLUSTER_9,CLUSTER_2
encoder_input_data,"numpy.zeros(
(len(input_texts)",CLUSTER_5,CLUSTER_5
decoder_input_data,"numpy.zeros(
(len(input_texts)",CLUSTER_5,CLUSTER_5
decoder_target_data,"numpy.zeros(
(len(input_texts)",CLUSTER_5,CLUSTER_5
target_seq,"numpy.zeros((1,1,num_decoder_tokens)",CLUSTER_5,CLUSTER_5
target_seq,"numpy.zeros((1,1,num_decoder_tokens)",CLUSTER_5,CLUSTER_5
sampled_token_index,"numpy.argmax(output_tokens[0,-1,:])",CLUSTER_5,CLUSTER_5
df,pandas.read_pickle('train_df.pkl'),CLUSTER_5,CLUSTER_5
result_vector,"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
bh,"numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
by,"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
hs[-1],"hprev=numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
hprev,"numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
hprev,"numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
x,"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
h,"numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
x,"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
"dWxh,dWhh,dWhy",numpy.zeros_like(Wxh),CLUSTER_3,CLUSTER_6
"dbh,dby",numpy.zeros_like(bh),CLUSTER_3,CLUSTER_6
"dWxh,dWhh,dWhy",numpy.zeros_like(Wxh),CLUSTER_3,CLUSTER_6
"dbh,dby",numpy.zeros_like(bh),CLUSTER_3,CLUSTER_6
dhnext,numpy.zeros_like(hs[0]),CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
dWhy,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dWhy,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWhy,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWhy,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWxh,"numpy.dot(dhraw,xs[t].T)",CLUSTER_3,CLUSTER_6
dWhh,"numpy.dot(dhraw,hs[t-1].T)",CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
dWhy+,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWxh+,"numpy.dot(dhraw,xs[t].T)",CLUSTER_3,CLUSTER_6
dWhh+,"numpy.dot(dhraw,hs[t-1].T)",CLUSTER_3,CLUSTER_6
y,"numpy.dot(Why,h)",CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
dWhy+,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWxh+,"numpy.dot(dhraw,xs[t].T)",CLUSTER_3,CLUSTER_6
dWhh+,"numpy.dot(dhraw,hs[t-1].T)",CLUSTER_3,CLUSTER_6
dhnext,"numpy.dot(Whh.T,dhraw)",CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
p,numpy.exp(y),CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
h,"numpy.tanh(np.dot(Wxh,x)",CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
hs[-1],numpy.copy(hprev),CLUSTER_3,CLUSTER_6
hs[-1],numpy.copy(hprev),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
hs[-1],numpy.copy(hprev),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
hs[-1],numpy.copy(hprev),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
author_df,pandas.DataFrame(author_u),CLUSTER_9,CLUSTER_2
book,pandas.read_csv('data/books_c.csv'),CLUSTER_9,CLUSTER_2
data,"pandas.read_sql_query(
'''
SELECTcustomers.FirstName,customers.LastName,invoices.CustomerId,customers.country,invoices.Total,invoices.InvoiceDate
FROMcustomers
LEFTJOINinvoices
ONcustomers.CustomerId=invoices.CustomerId
''',
conn
)",CLUSTER_9,CLUSTER_2
df,pandas.read_csv('H:/Study/AI-MLAssignments/Day07/general_data.csv'),CLUSTER_1,CLUSTER_9
"stats,p","scipy.stats.pearsonr(df.MonthlyIncome,df.Attrition)",CLUSTER_1,CLUSTER_9
"corr,_","scipy.stats.pearsonr(df.Attrition,df.Age)",CLUSTER_1,CLUSTER_9
"x,y","scipy.stats.pearsonr(df.Attrition,df.Education)",CLUSTER_1,CLUSTER_9
"pyu,kyu","scipy.stats.pearsonr(df.Attrition,df.Gender)",CLUSTER_1,CLUSTER_9
"tri,p","scipy.stats.pearsonr(df.Attrition,df.DistanceFromHome)",CLUSTER_1,CLUSTER_9
"k,j","scipy.stats.pearsonr(df.Attrition,df.YearsWithCurrManager)",CLUSTER_1,CLUSTER_9
"stat,r","scipy.stats.pearsonr(df.Attrition,df.NumCompaniesWorked)",CLUSTER_1,CLUSTER_9
"stats,p","scipy.stats.pearsonr(df.Attrition,df.YearsSinceLastPromotion)",CLUSTER_1,CLUSTER_9
"corr,_","scipy.stats.pearsonr(df.Attrition,df.PercentSalaryHike)",CLUSTER_1,CLUSTER_9
"corr,_","scipy.stats.pearsonr(df.Attrition,df.TotalWorkingYears)",CLUSTER_1,CLUSTER_9
"f,axarr","matplotlib.pyplot.subplots(3,4,figsize=(15,15)",CLUSTER_1,CLUSTER_3
xs,"numpy.array([-1.0,0.0,1.0,2.0,3.0,4.0],dtype=float)",CLUSTER_1,CLUSTER_3
ys,"numpy.array([-3.0,-1.0,1.0,3.0,5.0,7.0],dtype=float)",CLUSTER_1,CLUSTER_3
xs,"numpy.array([1.0,2.0,3.0,4.0,5.0,6.0],dtype=float)",CLUSTER_1,CLUSTER_3
ys,"numpy.array([1.0,1.5,2.0,2.5,3.0,3.5],dtype=float)",CLUSTER_1,CLUSTER_3
openArray,"numpy.array([1,2,3,3],dtype='float64')",CLUSTER_9,CLUSTER_2
highArray,"numpy.array([2,3,4,3],dtype='float64')",CLUSTER_9,CLUSTER_2
lowArray,"numpy.array([0.5,1.5,2.5,1.5],dtype='float64')",CLUSTER_9,CLUSTER_2
closeArray,"numpy.array([1.5,2.5,3.5,2.5],dtype='float64')",CLUSTER_9,CLUSTER_2
EMA,"pandas.Series(ta.EMA(closeArray,2)",CLUSTER_9,CLUSTER_2
candleDF,pandas.concat([pd.Series(openArray),CLUSTER_9,CLUSTER_2
timeIndex,"pandas.date_range(""20180808"",periods=len(closeArray)",CLUSTER_9,CLUSTER_2
"fig,(ax)","matplotlib.pyplot.subplots(1,1,sharex=True,figsize=(15,7)",CLUSTER_9,CLUSTER_2
r,"requests.get(""http://bbs.fxdayu.com"")",CLUSTER_9,CLUSTER_2
t,numpy.arange(x_values.shape[0]),CLUSTER_4,CLUSTER_11
local_average,numpy.zeros(L),CLUSTER_4,CLUSTER_11
energy_local_diff,"numpy.concatenate((energy_local_diff,np.array([0])",CLUSTER_4,CLUSTER_11
log_energy_local_diff,"numpy.concatenate((log_energy_local_diff,np.array([0])",CLUSTER_4,CLUSTER_11
nov,"numpy.concatenate((nov,np.array([0])",CLUSTER_4,CLUSTER_11
energy_local,"numpy.convolve(x**2,w**2,'same')",CLUSTER_4,CLUSTER_11
nov,"numpy.sum(Y_diff,axis=0)",CLUSTER_4,CLUSTER_11
amplitude,numpy.log(1+gamma*np.abs(X),CLUSTER_4,CLUSTER_11
Y,numpy.log(1+gamma*np.abs(X),CLUSTER_4,CLUSTER_11
novelty_energy,numpy.copy(energy_local_diff),CLUSTER_4,CLUSTER_11
novelty_log_energy,numpy.copy(log_energy_local_diff),CLUSTER_4,CLUSTER_11
energy_local_diff,numpy.diff(energy_local),CLUSTER_4,CLUSTER_11
log_energy_local_diff,numpy.diff(np.log(1+gamma*energy_local),CLUSTER_4,CLUSTER_11
Y_diff,"numpy.diff(Y,n=1)",CLUSTER_4,CLUSTER_11
w,scipy.signal.hann(H),CLUSTER_4,CLUSTER_11
df,pandas.read_csv('Iris.csv'),CLUSTER_12,CLUSTER_5
"X1,X2","numpy.meshgrid(np.arange(start=X_set[:,0].min()",CLUSTER_12,CLUSTER_5
sc_x,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_5
classifier,sklearn.tree.DecisionTreeClassifier(max_depth=5),CLUSTER_12,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y,classifier.predict(x)",CLUSTER_12,CLUSTER_5
sqrt_disc,numpy.sqrt(b**2-4*a*c),CLUSTER_3,CLUSTER_6
r2,pandas.DataFrame(km.cluster_centers_),CLUSTER_7,CLUSTER_8
r1,pandas.Series(km.labels_),CLUSTER_7,CLUSTER_8
merge_AB,"pandas.concat([merged_sub_base_uae_14_day_trial,merged_sub_low_uae_no_trial],axis=0)",CLUSTER_7,CLUSTER_8
merge_AB_under,"pandas.concat([X_under,y_under],axis=1)",CLUSTER_7,CLUSTER_8
r,"pandas.concat([r2,r1],axis=1)",CLUSTER_7,CLUSTER_8
merge_AB,"pandas.get_dummies(merge_AB,prefix=['plan_type'],drop_first=True)",CLUSTER_7,CLUSTER_8
dummy_df,"pandas.get_dummies(data,columns=categorical,
prefix=categorical,
prefix_sep='_',
dummy_na=False,
drop_first=False)",CLUSTER_7,CLUSTER_8
merged_sub,"pandas.get_dummies(merged_sub,prefix=['package_type','preferred_genre','intended_use','male_TF','attribution_technical','attribution_survey','plan_type','payment_type'],columns=['package_type','preferred_genre','intended_use','male_TF','attribution_technical','attribution_survey','plan_type','payment_type'])",CLUSTER_7,CLUSTER_8
subs,pandas.read_pickle('C:/Users/ytw23/Downloads/subscribers'),CLUSTER_7,CLUSTER_8
engag,pandas.read_pickle('C:/Users/ytw23/Downloads/engagement'),CLUSTER_7,CLUSTER_8
cs,pandas.read_pickle(r'customer_service_reps'),CLUSTER_7,CLUSTER_8
data,pandas.read_pickle('C:/Users/ytw23/Downloads/subscribers'),CLUSTER_7,CLUSTER_8
revenue,numpy.array(X['revenue_net']),CLUSTER_7,CLUSTER_8
expected_revenue,"numpy.dot(y_pred,revenue)",CLUSTER_7,CLUSTER_8
norm,scipy.stats.norm(),CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=i,random_state=1)",CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=5,random_state=1)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33)",CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=i,max_depth=j)",CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=110,max_depth=4)",CLUSTER_7,CLUSTER_8
dist,math.sqrt((self.x-landmarks[i][0]),CLUSTER_3,CLUSTER_4
dist,math.sqrt((self.x-landmarks[i][0]),CLUSTER_3,CLUSTER_4
dist+,"random.gauss(0.0,self.sense_noise)",CLUSTER_3,CLUSTER_4
self.x,random.random(),CLUSTER_3,CLUSTER_4
self.y,random.random(),CLUSTER_3,CLUSTER_4
self.orientation,random.random(),CLUSTER_3,CLUSTER_4
beta+,random.random(),CLUSTER_3,CLUSTER_4
features,"np.append(arr=numpy.ones((506,1)",CLUSTER_7,CLUSTER_5
features,"numpy.append(arr=np.ones((506,1)",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv(""https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data"",delim_whitespace=True,names=['crime_rate','ZN','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','TAX','PTRATIO','BLACK','LSTAT','MEDV'])",CLUSTER_7,CLUSTER_5
modelFinal,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
R_Sq,"sklearn.metrics.r2_score(ytest,Y_Predict)",CLUSTER_7,CLUSTER_5
Mean_sq,"sklearn.metrics.mean_squared_error(Y_Predict,ytest)",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(8,4)",CLUSTER_3,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_10
"fig,axes",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2)",CLUSTER_3,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2)",CLUSTER_3,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(figsize=(12,3)",CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_3,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_3,CLUSTER_10
x,"numpy.linspace(0,5,11)",CLUSTER_3,CLUSTER_10
data,"random.sample(range(1,1000)",CLUSTER_3,CLUSTER_10
taxi_tickets,pandas.read_csv('taxi_ticket_data/taxi_tickets_by_ward.csv'),CLUSTER_7,CLUSTER_3
taxi_bus_st['IssueDate'],pandas.to_datetime(taxi_bus_st['IssueDate']),CLUSTER_7,CLUSTER_3
model80_score,"pandas.DataFrame({'Model':['LogRegression','RandomForest','KNNeighbors'],
'Normal':[LRG_score,RFC_score,KNN_score],
'Hyper':[LRG_best_score,RFC_best_score,KNN_best_score]})",CLUSTER_7,CLUSTER_8
report_LRG,"pandas.DataFrame(classification_report(y_test,yp_LRG,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
report_RFC,"pandas.DataFrame(classification_report(y_test,yp_RFC,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
report_KNN,"pandas.DataFrame(classification_report(y_test,yp_KNN,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
model90_score,"pandas.DataFrame({'Model':['LogRegression','RandomForest','KNNeighbors'],
'Normal':[LRG1_score,RFC1_score,KNN1_score],
'Hyper':[LRG1_best_score,RFC1_best_score,KNN1_best_score]})",CLUSTER_7,CLUSTER_8
report_LRG1,"pandas.DataFrame(classification_report(y1_test,yp_LRG1,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
report_RFC1,"pandas.DataFrame(classification_report(y1_test,yp_RFC1,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
report_KNN1,"pandas.DataFrame(classification_report(y1_test,yp_KNN1,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
df,"pandas.concat([df_test,df_surv],axis=1)",CLUSTER_7,CLUSTER_8
df_titanic,"pandas.concat([df_train,df],ignore_index=True)",CLUSTER_7,CLUSTER_8
fill_male,"pandas.concat([mcat0,mcat1,mcat2,mcat3,mcat4])",CLUSTER_7,CLUSTER_8
fill_female,"pandas.concat([fcat0,fcat1,fcat2,fcat3,fcat4])",CLUSTER_7,CLUSTER_8
fill_age,"pandas.concat([fill_male,fill_female])",CLUSTER_7,CLUSTER_8
df_train,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_8
df_surv,pandas.read_csv('gender_submission.csv'),CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_8
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_8
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,train_size=0.8,shuffle=False)",CLUSTER_7,CLUSTER_8
"x1_train,x1_test,y1_train,y1_test","sklearn.model_selection.train_test_split(x1,y1,train_size=0.9,shuffle=False)",CLUSTER_7,CLUSTER_8
LRG,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
LRG_best,"sklearn.linear_model.LogisticRegression(solver='liblinear',penalty='l1',max_iter=10)",CLUSTER_7,CLUSTER_8
LRG1,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
LRG1_best,"sklearn.linear_model.LogisticRegression(solver='liblinear',penalty='l2',max_iter=100)",CLUSTER_7,CLUSTER_8
df_titanic['Embarked'],sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
df_titanic['Sex'],sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
RFC,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
RFC_best,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,min_samples_split=5,min_samples_leaf=1,max_depth=10)",CLUSTER_7,CLUSTER_8
RFC1,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
RFC1_best,"sklearn.ensemble.RandomForestClassifier(n_estimators=1000,min_samples_split=10,min_samples_leaf=2,max_depth=20)",CLUSTER_7,CLUSTER_8
KNN,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
KNN_best,"sklearn.neighbors.KNeighborsClassifier(p=1,n_neighbors=7,leaf_size=49)",CLUSTER_7,CLUSTER_8
KNN1,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
KNN1_best,"sklearn.neighbors.KNeighborsClassifier(p=1,n_neighbors=8,leaf_size=34)",CLUSTER_7,CLUSTER_8
cm_LRG,"sklearn.metrics.confusion_matrix(y_test,yp_LRG)",CLUSTER_7,CLUSTER_8
cm_RFC,"sklearn.metrics.confusion_matrix(y_test,yp_RFC)",CLUSTER_7,CLUSTER_8
cm_KNN,"sklearn.metrics.confusion_matrix(y_test,yp_KNN)",CLUSTER_7,CLUSTER_8
cm_LRG1,"sklearn.metrics.confusion_matrix(y1_test,yp_LRG1)",CLUSTER_7,CLUSTER_8
cm_RFC1,"sklearn.metrics.confusion_matrix(y1_test,yp_RFC1)",CLUSTER_7,CLUSTER_8
cm_KNN1,"sklearn.metrics.confusion_matrix(y1_test,yp_KNN1)",CLUSTER_7,CLUSTER_8
RSCV_LRG,"sklearn.model_selection.RandomizedSearchCV(estimator=LRG,param_distributions=LRG_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_RFC,"sklearn.model_selection.RandomizedSearchCV(estimator=RFC,param_distributions=RFC_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_KNN,"sklearn.model_selection.RandomizedSearchCV(estimator=KNN,param_distributions=KNN_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_LRG1,"sklearn.model_selection.RandomizedSearchCV(estimator=LRG1,param_distributions=LRG_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_RFC1,"sklearn.model_selection.RandomizedSearchCV(estimator=RFC1,param_distributions=RFC_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_KNN1,"sklearn.model_selection.RandomizedSearchCV(estimator=KNN1,param_distributions=KNN_param,cv=5)",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(item,columns=te.columns_)",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(item.astype(""int"")",CLUSTER_7,CLUSTER_3
product,"pandas.DataFrame(product,columns=['productrecommendation'])",CLUSTER_7,CLUSTER_3
df,"pandas.read_csv('MarketBasketAnalysis/GroceryStoreDataSet.csv',header=None)",CLUSTER_7,CLUSTER_3
mask,numpy.zeros_like(dftable),CLUSTER_7,CLUSTER_3
"f,ax","matplotlib.pyplot.subplots(figsize=(7,5)",CLUSTER_7,CLUSTER_3
pal,"seaborn.color_palette(""RdBu"",n_colors=4)",CLUSTER_7,CLUSTER_3
ax,"seaborn.heatmap(dftable,mask=mask,vmax=4,square=True,annot=True,cmap=pal)",CLUSTER_7,CLUSTER_3
Ar,numpy.zeros((len(u),CLUSTER_3,CLUSTER_6
SVD,"numpy.linalg.svd(A,full_matrices=False)",CLUSTER_3,CLUSTER_6
"u,s,v","numpy.linalg.svd(x,full_matrices=False)",CLUSTER_3,CLUSTER_6
x,scipy.misc.face(),CLUSTER_3,CLUSTER_6
songs_info_pd['publish_year'],pandas.DatetimeIndex(songs_info_pd['publish_time']),CLUSTER_1,CLUSTER_3
user_action_pd,"pandas.read_csv('../data/mars_tianchi_user_actions.csv',header=None)",CLUSTER_1,CLUSTER_3
songs_info_pd,"pandas.read_csv('../data/mars_tianchi_songs.csv',header=None)",CLUSTER_1,CLUSTER_3
user_action_pd['gmt_create'],"pandas.to_datetime(user_action_pd['gmt_create'],unit='s')",CLUSTER_1,CLUSTER_3
songs_info_pd['publish_time'],pandas.to_datetime(songs_info_pd['publish_time'].astype(str),CLUSTER_1,CLUSTER_3
songs_info_pd['publish_time'],pandas.to_datetime(songs_info_pd['publish_time'].astype(str),CLUSTER_1,CLUSTER_3
reviews,"pandas.read_csv(""../input/wine-reviews/winemag-data-130k-v2.csv"",index_col=0)",CLUSTER_8,CLUSTER_4
"orig_mean,orig_std,orig_max,orig_min",numpy.mean(num_nodes),CLUSTER_6,CLUSTER_10
"orig_mean,orig_std,orig_max,orig_min",numpy.mean(num_nodes),CLUSTER_6,CLUSTER_10
"orig_mean,orig_std,orig_max,orig_min",numpy.mean(num_nodes),CLUSTER_6,CLUSTER_10
"orig_mean,orig_std,orig_max,orig_min",numpy.mean(num_nodes),CLUSTER_6,CLUSTER_10
ecom,pandas.read_csv('EcommercePurchases'),CLUSTER_8,CLUSTER_4
unique_incidents_sub_weekly_train.index,numpy.arange(len(unique_incidents_sub_weekly_train),CLUSTER_11,CLUSTER_8
unique_incidents_sub_weekly_test.index,numpy.arange(len(unique_incidents_sub_weekly_test),CLUSTER_11,CLUSTER_8
incidents,pandas.read_csv('../data/sf-police-calls-for-service-and-incidents/police-department-incidents.csv'),CLUSTER_11,CLUSTER_8
incidents['DateTime'],pandas.to_datetime(pandas.to_datetime(incidents['Date']),CLUSTER_11,CLUSTER_8
unique_incidents_sub.index,pandas.to_datetime(unique_incidents_sub['DateTime']),CLUSTER_11,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_11,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,6)",CLUSTER_11,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,6)",CLUSTER_11,CLUSTER_8
a,"numpy.zeros([x.shape[0],34])",CLUSTER_2,CLUSTER_7
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
daily_df,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_std,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_mean,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
stat_table,pandas.DataFrame(index=tickers),CLUSTER_7,CLUSTER_9
mvsk_moments,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_function,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_data,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
daily_df,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_std,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_mean,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
stat_table,pandas.DataFrame(index=tickers),CLUSTER_7,CLUSTER_9
mvsk_moments,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_function,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_data,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
daily_df,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_std,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_mean,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
stat_table,pandas.DataFrame(index=tickers),CLUSTER_7,CLUSTER_9
mvsk_moments,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_function,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_data,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
btc_usd,pandas.read_csv('BTC-USDmax.csv'),CLUSTER_7,CLUSTER_9
djia,pandas.read_csv('DJIAmax.csv'),CLUSTER_7,CLUSTER_9
S_and_P,pandas.read_csv('SandPmax.csv'),CLUSTER_7,CLUSTER_9
MSCI_World,pandas.read_csv('URTHmax.csv'),CLUSTER_7,CLUSTER_9
T_Bill,pandas.read_csv('BILmax.csv'),CLUSTER_7,CLUSTER_9
DBV,pandas.read_csv('DBVmax.csv'),CLUSTER_7,CLUSTER_9
CEW,pandas.read_csv('CEWmax.csv'),CLUSTER_7,CLUSTER_9
ACWI,pandas.read_csv('ACWImax.csv'),CLUSTER_7,CLUSTER_9
AGG,pandas.read_csv('AGGmax.csv'),CLUSTER_7,CLUSTER_9
usd_eur,pandas.read_csv('usd_eur_quandl.csv'),CLUSTER_7,CLUSTER_9
usd_eur.Date,"pandas.to_datetime(usd_eur.Date,format='%m/%d/%Y')",CLUSTER_7,CLUSTER_9
df.Date,"pandas.to_datetime(df.Date,format='%Y/%m/%d')",CLUSTER_7,CLUSTER_9
df.Date,"pandas.to_datetime(df.Date,format='%Y/%m/%d')",CLUSTER_7,CLUSTER_9
df.Date,"pandas.to_datetime(df.Date,format='%Y/%m/%d')",CLUSTER_7,CLUSTER_9
cont_data,"numpy.arange(-0.05,0.05,0.0001)",CLUSTER_7,CLUSTER_9
temp_cont_data,"numpy.arange(-2,2,0.0001)",CLUSTER_7,CLUSTER_9
cont_data,"numpy.arange(-0.05,0.05,0.0001)",CLUSTER_7,CLUSTER_9
temp_cont_data,"numpy.arange(-2,2,0.0001)",CLUSTER_7,CLUSTER_9
cont_data,"numpy.arange(-0.05,0.05,0.0001)",CLUSTER_7,CLUSTER_9
temp_cont_data,"numpy.arange(-2,2,0.0001)",CLUSTER_7,CLUSTER_9
stat_table['Mean'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Min'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Max'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Variance'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Skewness'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Kurtosis'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Mean'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Min'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Max'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Variance'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Skewness'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Kurtosis'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Mean'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Min'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Max'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Variance'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Skewness'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Kurtosis'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['z-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['p-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['z-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['p-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['z-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['p-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
start,"datetime.datetime(2011,1,21)",CLUSTER_7,CLUSTER_9
end,"datetime.datetime(2019,1,20)",CLUSTER_7,CLUSTER_9
start,"datetime.datetime(2014,1,21)",CLUSTER_7,CLUSTER_9
end,"datetime.datetime(2019,1,20)",CLUSTER_7,CLUSTER_9
start,"datetime.datetime(2016,1,21)",CLUSTER_7,CLUSTER_9
end,"datetime.datetime(2019,1,20)",CLUSTER_7,CLUSTER_9
industry_titles,"pandas.DataFrame([['POPESTIMATE2010','Population']],columns=industry_titles.columns)",CLUSTER_0,CLUSTER_5
industry_titles,"pandas.DataFrame([['Cropland','Cropland'],
['Desert','Desert'],
['Grassland','Grassland'],
['Other','Other'],
['Woodland','Woodland'],
['Urban','Urban'],
['Water','Water']],columns=industry_titles.columns)",CLUSTER_0,CLUSTER_5
clust_result,"pandas.DataFrame(clustering.labels_,index=X.columns,columns=['cluster'])",CLUSTER_0,CLUSTER_5
edges,pandas.DataFrame(demean(cor_mat),CLUSTER_0,CLUSTER_5
nodes_size,pandas.DataFrame(np.sqrt(X.sum(),CLUSTER_0,CLUSTER_5
pos_df,"pandas.DataFrame(pos,index=['x','y'])",CLUSTER_0,CLUSTER_5
df,pandas.concat(df_list),CLUSTER_0,CLUSTER_5
X,"pandas.concat([county_pop.loc[X.index],county_LU.loc[X.index],X],axis=1,sort=True)",CLUSTER_0,CLUSTER_5
clust_result,"pandas.concat([clust_result,industry_titles.set_index('industry_code')",CLUSTER_0,CLUSTER_5
nodes,"pandas.concat([nodes_size,clust_result],axis=1,sort=False)",CLUSTER_0,CLUSTER_5
nodes_wpos,"pandas.concat([nodes_s,pos_df],axis=1,sort=False)",CLUSTER_0,CLUSTER_5
main_tables,pandas.concat([pd.read_csv('./../../../../../media/miglesia/Elements/corr_st_data/CHI_COM_W4_O4_E2_I4_main_table_2011_2012.csv'),CLUSTER_0,CLUSTER_5
merged,pandas.concat([population.set_index('CHIIDCOM'),CLUSTER_0,CLUSTER_5
b,"8;population['log_dens_cat']=pandas.cut(population['log_dens'],b)",CLUSTER_0,CLUSTER_5
bins,"pandas.cut(population['log_dens'],b,retbins=True)",CLUSTER_0,CLUSTER_5
agglevel_titles,pandas.read_csv(path+'agglevel_titles.csv'),CLUSTER_0,CLUSTER_5
area_titles,pandas.read_csv(path+'area_titles.csv'),CLUSTER_0,CLUSTER_5
industry_titles,pandas.read_csv(path+'industry_titles.csv'),CLUSTER_0,CLUSTER_5
df_y,pandas.read_csv(path+str(y),CLUSTER_0,CLUSTER_5
df_cnt,"pandas.read_csv('./data/naics_area_cnt_02_07.csv',index_col=[0,1])",CLUSTER_0,CLUSTER_5
county_LU,"pandas.read_csv('./data/US_land_use/land_use_frac.csv',index_col=0)",CLUSTER_0,CLUSTER_5
county_pop,"pandas.read_csv('./data/co-est2017-alldata.csv',encoding='latin-1')",CLUSTER_0,CLUSTER_5
population,pandas.read_csv('./data/pop_dist_comuna.csv'),CLUSTER_0,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(1,3,figsize=(24,8)",CLUSTER_0,CLUSTER_5
nodes_['color_mfg_srv'],"numpy.select(conditions,choices,default='

edges_max_d_triangles.to_csv('edges_max_d_triangles.csv',index=False)",CLUSTER_0,CLUSTER_5
clustering,"sklearn.cluster.SpectralClustering(n_clusters=10,
assign_labels=""discretize"",
random_state=0)",CLUSTER_0,CLUSTER_5
cor_mat,numpy.log10(X),CLUSTER_0,CLUSTER_5
cov_mat,numpy.log10(X),CLUSTER_0,CLUSTER_5
df_indu_prc_area,numpy.log10(df_agglv_yravg),CLUSTER_0,CLUSTER_5
df_indu_prc_area,numpy.log10(df_agglv_yravg),CLUSTER_0,CLUSTER_5
population['log_dens'],numpy.log10(population['densidad']),CLUSTER_0,CLUSTER_5
x_len,numpy.arange(len(y_loss),CLUSTER_2,CLUSTER_7
favorite_retweet_table,pandas.DataFrame(data_list),CLUSTER_9,CLUSTER_2
data_twitter_clean,"pandas.melt(data_twitter_clean,id_vars=columns_to_stay,value_vars=columns_to_melt,
var_name='stages',value_name='dog_stage')",CLUSTER_9,CLUSTER_2
df_twitter,"pandas.merge(data_twitter_clean,
images_clean,
how='left',on=['tweet_id'])",CLUSTER_9,CLUSTER_2
df_twitter_master,"pandas.merge(df_twitter,json_clean,
how='left',on=['tweet_id'])",CLUSTER_9,CLUSTER_2
data_twitter,pandas.read_csv('twitter-archive-enhanced.csv'),CLUSTER_9,CLUSTER_2
images,"pandas.read_table('images_prediction/image-predictions.tsv',
sep='\t')",CLUSTER_9,CLUSTER_2
data_twitter_clean['timestamp'],pandas.to_datetime(data_twitter_clean['timestamp']),CLUSTER_9,CLUSTER_2
r,requests.get(url),CLUSTER_9,CLUSTER_2
data,json.loads(line),CLUSTER_9,CLUSTER_2
idlat,numpy.where(abs(pointCoords[0]-lat),CLUSTER_1,CLUSTER_9
idlon,numpy.where(abs(pointCoords[1]-lon),CLUSTER_1,CLUSTER_9
ts,"numpy.squeeze(myvar[:,idlat,idlon])",CLUSTER_1,CLUSTER_9
ts_CDOfilt,"numpy.squeeze(myvar_CDOfilt[:,idlat,idlon])",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,4)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,4)",CLUSTER_1,CLUSTER_9
t,"matplotlib.pyplot.text(1/max5[i,0],max5[i,1],'%.0fdays'%round(max5[i,2])",CLUSTER_1,CLUSTER_9
t,"matplotlib.pyplot.text(1/max5_f[i,0],max5_f[i,1],'%.0fdays'%round(max5_f[i,2])",CLUSTER_1,CLUSTER_9
t,"matplotlib.pyplot.text(1/max5_CDOf[i,0],max5_CDOf[i,1],'%.0fdays'%round(max5_CDOf[i,2])",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,[low,high],btype='band')",CLUSTER_1,CLUSTER_9
y,"scipy.signal.lfilter(b,a,data)",CLUSTER_1,CLUSTER_9
wiki_movies_raw,json.load(file),CLUSTER_9,CLUSTER_3
wiki_movies_df,pandas.DataFrame(wiki_movies_raw),CLUSTER_9,CLUSTER_3
wiki_movies_df,pandas.DataFrame(clean_movies),CLUSTER_9,CLUSTER_3
wiki_movies_df,pandas.DataFrame(clean_movies),CLUSTER_9,CLUSTER_3
movies_df,"pandas.merge(wiki_movies_df,kaggle_metadata,on='imdb_id',suffixes=['_wiki','_kaggle'])",CLUSTER_9,CLUSTER_3
movies_with_ratings_df,"pandas.merge(movies_df,rating_counts,left_on='kaggle_id',right_index=True,how='left')",CLUSTER_9,CLUSTER_3
kaggle_metadata,"pandas.read_csv(f'{file_dir}movies_metadata.csv',low_memory=False)",CLUSTER_9,CLUSTER_3
ratings,pandas.read_csv(f'{file_dir}ratings.csv'),CLUSTER_9,CLUSTER_3
wiki_movies_df['release_date'],pandas.to_datetime(release_date.str.extract(f'({date_form_one}|{date_form_two}|{date_form_three}|{date_form_four}),CLUSTER_9,CLUSTER_3
kaggle_metadata['release_date'],pandas.to_datetime(kaggle_metadata['release_date']),CLUSTER_9,CLUSTER_3
ratings['timestamp'],"pandas.to_datetime(ratings['timestamp'],unit='s')",CLUSTER_9,CLUSTER_3
kaggle_metadata['id'],"pandas.to_numeric(kaggle_metadata['id'],errors='raise')",CLUSTER_9,CLUSTER_3
kaggle_metadata['popularity'],"pandas.to_numeric(kaggle_metadata['popularity'],errors='raise')",CLUSTER_9,CLUSTER_3
s,"re.sub('\$|\s|[a-zA-Z]','',s)",CLUSTER_9,CLUSTER_3
s,"re.sub('\$|\s|[a-zA-Z]','',s)",CLUSTER_9,CLUSTER_3
s,"re.sub('\$|,','',s)",CLUSTER_9,CLUSTER_3
start_time,time.time(),CLUSTER_9,CLUSTER_3
hist,pandas.Series(counts),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('survey_short_columns.csv'),CLUSTER_7,CLUSTER_8
tmp,"pandas.read_csv('roles.csv',sep=';',index_col=0)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('Data/taxi_data.csv'),CLUSTER_0,CLUSTER_5
X,"numpy.array(df[['LON','LAT']],dtype='float64')",CLUSTER_0,CLUSTER_5
X,"numpy.array(df[['LON','LAT']],dtype='float64')",CLUSTER_0,CLUSTER_5
dummy,"numpy.array([-1,-1,-1,2,3,4,5,-1])",CLUSTER_0,CLUSTER_5
new,numpy.array([(counter+2),CLUSTER_0,CLUSTER_5
no_outliers,numpy.array([(counter+2),CLUSTER_0,CLUSTER_5
no_outliers,numpy.array([(counter+2),CLUSTER_0,CLUSTER_5
X_train,"numpy.array(df_train[['LON','LAT']],dtype='float64')",CLUSTER_0,CLUSTER_5
y_train,numpy.array(df_train['CLUSTER_HDBSCAN']),CLUSTER_0,CLUSTER_5
X_predict,"numpy.array(df_predict[['LON','LAT']],dtype='float64')",CLUSTER_0,CLUSTER_5
unique_clusters,numpy.unique(class_predictions),CLUSTER_0,CLUSTER_5
unique_clusters,numpy.unique(class_predictions),CLUSTER_0,CLUSTER_5
data[x]['unique_classes'],numpy.unique(class_predictions),CLUSTER_0,CLUSTER_5
class_predictions,numpy.load('Data/sample_clusters.npy'),CLUSTER_0,CLUSTER_5
class_predictions,numpy.load('Data/sample_clusters_improved.npy'),CLUSTER_0,CLUSTER_5
model,"sklearn.cluster.KMeans(n_clusters=3,random_state=17,
max_iter=x,n_init=1)",CLUSTER_0,CLUSTER_5
model,"sklearn.cluster.KMeans(n_clusters=k,random_state=17)",CLUSTER_0,CLUSTER_5
model,"sklearn.cluster.KMeans(n_clusters=k,random_state=1)",CLUSTER_0,CLUSTER_5
model,"sklearn.cluster.DBSCAN(eps=0.01,min_samples=5)",CLUSTER_0,CLUSTER_5
curr_silhouette,"sklearn.metrics.silhouette_score(X,class_predictions)",CLUSTER_0,CLUSTER_5
"X_blobs,_","sklearn.datasets.make_blobs(n_samples=1000,centers=10,n_features=2,
cluster_std=0.5,random_state=4)",CLUSTER_0,CLUSTER_5
"X_blobs,_","sklearn.datasets.make_blobs(n_samples=1000,centers=50,
n_features=2,cluster_std=1,random_state=4)",CLUSTER_0,CLUSTER_5
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_0,CLUSTER_5
data,collections.defaultdict(dict),CLUSTER_0,CLUSTER_5
popup,"re.sub(r'[^a-zA-Z]+','',row.NAME)",CLUSTER_0,CLUSTER_5
df,pandas.DataFrame([list(x.seq),CLUSTER_5,CLUSTER_5
distances,pandas.DataFrame(manhattan_distances(data.toarray(),CLUSTER_5,CLUSTER_5
pathsdf,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
df,pandas.DataFrame([list(x.seq),CLUSTER_5,CLUSTER_5
names,pandas.Series([x.idforxinfastas]),CLUSTER_5,CLUSTER_5
names,pandas.Series([x.idforxinfastas]),CLUSTER_5,CLUSTER_5
primersheet['GC'],pandas.Series([GC(i),CLUSTER_5,CLUSTER_5
repeats,"pandas.Series(repeats,name='%repeats')",CLUSTER_5,CLUSTER_5
pairs,"pandas.concat([pathsdf[0],pathsdf[1]],
axis=1,join='inner')",CLUSTER_5,CLUSTER_5
x,"pandas.concat([pathsdf[i],pathsdf[i+1]],
axis=1,join='inner')",CLUSTER_5,CLUSTER_5
primersheet,"pandas.concat([rxns['Source'],
rxns['Target'],
rxns['newcodon'].str.cat([rxns['baseprimer']])",CLUSTER_5,CLUSTER_5
arr,numpy.array([]),CLUSTER_5,CLUSTER_5
arr,numpy.array([]),CLUSTER_5,CLUSTER_5
array,numpy.asarray(array),CLUSTER_5,CLUSTER_5
arr,"numpy.append(arr,i)",CLUSTER_5,CLUSTER_5
arr,"numpy.append(arr,mt.Tm_NN(primer)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,3.5)",CLUSTER_5,CLUSTER_5
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
OneHotEncoder,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
skf,"sklearn.model_selection.KFold(n_splits=config['N_USED_FOLDS'],shuffle=True,random_state=SEED)",CLUSTER_10,CLUSTER_7
data,"numpy.array(file[""/numres""])",CLUSTER_1,CLUSTER_10
imag,numpy.array(file[rl]),CLUSTER_1,CLUSTER_10
real,numpy.array(file[im]),CLUSTER_1,CLUSTER_10
cn,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
c1,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
c2,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
c3,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
c4,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
index,numpy.int32(i/toff),CLUSTER_1,CLUSTER_10
t,"numpy.linspace(0,5000,1e3)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(14,10)",CLUSTER_1,CLUSTER_10
df,"pandas.read_csv(database,delimiter=';')",CLUSTER_7,CLUSTER_3
image,numpy.array(image),CLUSTER_4,CLUSTER_0
data,numpy.array(data),CLUSTER_4,CLUSTER_0
labels,numpy.array(labels),CLUSTER_4,CLUSTER_0
X_test,numpy.array(data),CLUSTER_4,CLUSTER_0
y_test,pandas.read_csv('Test.csv'),CLUSTER_4,CLUSTER_0
cur_path,os.getcwd(),CLUSTER_4,CLUSTER_0
images,os.listdir(path),CLUSTER_4,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,labels,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_0
input_df,"pandas.DataFrame([[input_json['machine']['temperature'],input_json['machine']['pressure'],input_json['ambient']['temperature'],input_json['ambient']['humidity']]])",CLUSTER_5,CLUSTER_1
temp_data,pandas.read_csv('temperature_data.csv'),CLUSTER_5,CLUSTER_1
clf1,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_1
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.35,random_state=0)",CLUSTER_5,CLUSTER_1
input_json,json.loads(input_str),CLUSTER_5,CLUSTER_1
x,numpy.arange(9),CLUSTER_7,CLUSTER_8
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_8
val_scores_mean,"numpy.mean(val_scores,axis=1)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv(TRAIN_DATASET),CLUSTER_7,CLUSTER_8
"slope,intercept,r_value,p_value,std_err","scipy.stats.linregress(x_axis,y_axis)",CLUSTER_7,CLUSTER_8
"popt,pcov","scipy.optimize.curve_fit(func,x_axis,y_axis)",CLUSTER_7,CLUSTER_8
r,"random.randint(0,len(x_axis)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,target,test_size=0.25,random_state=random_state)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
model,sklearn.tree.DecisionTreeRegressor(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.Ridge(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.Lasso(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.ElasticNet(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.GradientBoostingRegressor(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.RandomForestRegressor(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.AdaBoostRegressor(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.svm.SVR(),CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=random_state)",CLUSTER_7,CLUSTER_8
"train_sizes,train_scores,val_scores","sklearn.model_selection.learning_curve(model,X_train,y_train,cv=cv,
scoring=scoring,n_jobs=n_jobs,verbose=1)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('Input/Pokemon.csv'),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
proyect_data,pandas.read_csv('/Users/juandediegosuanzes/desktop/ih_datamadpt0420_project_m1/data/raw/proyect_data.csv'),CLUSTER_8,CLUSTER_4
tables,"pandas.read_sql_query(""""""SELECTnameFROMsqlite_masterWHEREtype='table'"""""",engine)",CLUSTER_8,CLUSTER_4
"X_train,y_train","sklearn.datasets.load_svmlight_file(""a9atrain.txt"")",CLUSTER_3,CLUSTER_10
"X_test,y_test","sklearn.datasets.load_svmlight_file(""a9atest.txt"")",CLUSTER_3,CLUSTER_10
x_,numpy.array(X_train.toarray(),CLUSTER_3,CLUSTER_10
y_,"numpy.array(y_train,np.float32)",CLUSTER_3,CLUSTER_10
xt_,numpy.array(X_test.toarray(),CLUSTER_3,CLUSTER_10
yt_,"numpy.array(y_test,np.float32)",CLUSTER_3,CLUSTER_10
	gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	test_loss_history,"numpy.zeros((iteration,1)",CLUSTER_3,CLUSTER_10
	v,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	Theta_gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	test_loss_history,"numpy.zeros((iteration,1)",CLUSTER_3,CLUSTER_10
	Theta_gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	test_loss_history,"numpy.zeros((iteration,1)",CLUSTER_3,CLUSTER_10
	Theta_gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	delta_theta,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	test_loss_history,"numpy.zeros((iteration,1)",CLUSTER_3,CLUSTER_10
	Theta_gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	m_t,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
t_nag,"numpy.zeros((1,124)",CLUSTER_3,CLUSTER_10
t_rmsprop,"numpy.zeros((1,124)",CLUSTER_3,CLUSTER_10
t_adadelta,"numpy.zeros((1,124)",CLUSTER_3,CLUSTER_10
t_adam,"numpy.zeros((1,124)",CLUSTER_3,CLUSTER_10
X_,"numpy.hstack([x_,np.ones((x_.shape[0],1)",CLUSTER_3,CLUSTER_10
Xt_,"numpy.hstack([xt_,np.zeros((xt_.shape[0],1)",CLUSTER_3,CLUSTER_10
	e_t,math.exp(Xi.dot(Theta.T),CLUSTER_3,CLUSTER_10
		index,"random.randint(0,y.shape[0]-10)",CLUSTER_3,CLUSTER_10
		index,"random.randint(0,y.shape[0]-10)",CLUSTER_3,CLUSTER_10
		index,"random.randint(0,y.shape[0]-10)",CLUSTER_3,CLUSTER_10
		index,"random.randint(0,y.shape[0]-10)",CLUSTER_3,CLUSTER_10
ts_pre,"pandas.read_csv('../PIRdata/1monthPIRsleep.csv',parse_dates=True,index_col=0)",CLUSTER_7,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((9,1)",CLUSTER_7,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((9,1)",CLUSTER_7,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((9,1)",CLUSTER_7,CLUSTER_3
decisions,"numpy.array([l0,l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13,
l14,l15,l16,l17,l18,l19,l20,l21,l22,l23,l24,l25,
l26,l27,l28,l29,l30,l31,l32,l33,l34,l35,l36,l37,
l38,l39,l40,l41,l42,l43,l44,l45,l46,l47,l48,l49,
l50,l51,l52,l53,l54,l55,l56,l57,l58,l59,l60,l61,
l62,l63,l64,l65,l66,l67,l68,l69,l70,l71,l72,l73,
l74,l75,l76,l77,l78,l79,l80,l81,l82,l83,l84,l85,
l86,l87,l88,l89,l90,l91,l92,l93,l94,l95,l96,l97,
l98,l99])",CLUSTER_3,CLUSTER_6
decisions,numpy.array(decisions),CLUSTER_3,CLUSTER_6
X,"numpy.zeros((nvars,)",CLUSTER_3,CLUSTER_6
average_daily_P,"numpy.zeros((nvars,)",CLUSTER_3,CLUSTER_6
reliability+,numpy.sum(X<Pcrit),CLUSTER_3,CLUSTER_6
utility,"numpy.sum(alpha*decisions*np.power(delta,np.arange(nvars)",CLUSTER_3,CLUSTER_6
inertia,numpy.sum(np.abs(np.diff(decisions),CLUSTER_3,CLUSTER_6
Pcrit,scipy.optimize.brentq(lambdax:x**q/(1+x**q),CLUSTER_3,CLUSTER_6
df,"pandas.read_csv('olympics.csv',index_col=0,skiprows=1)",CLUSTER_8,CLUSTER_4
census_df,pandas.read_csv('census.csv'),CLUSTER_8,CLUSTER_4
data_matrix,"numpy.array([[10,60,10,90],
[20,50,40,70],
[30,50,30,40],
[20,50,20,60],
[10,60,30,10]])",CLUSTER_5,CLUSTER_10
data_matrix,"numpy.array([[10,60,90],
[20,50,70],
[30,50,40],
[20,50,60],
[10,60,10]])",CLUSTER_5,CLUSTER_10
centered_data,"numpy.empty([5,3])",CLUSTER_5,CLUSTER_10
mean,"numpy.mean(data_matrix,axis=0)",CLUSTER_5,CLUSTER_10
covariance,"numpy.cov(centered_data,rowvar=False)",CLUSTER_5,CLUSTER_10
proj_matrix,"numpy.column_stack((eigenvectors[:,2],eigenvectors[:,1])",CLUSTER_5,CLUSTER_10
"eigenvalues,eigenvectors",numpy.linalg.eigh(covariance),CLUSTER_5,CLUSTER_10
norm,"numpy.linalg.norm(data_matrix,axis=1)",CLUSTER_5,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_10
df,pandas.DataFrame(treated_cards),CLUSTER_8,CLUSTER_4
n,numpy.arange(immagini.shape[0]),CLUSTER_4,CLUSTER_0
immagini,numpy.array(data),CLUSTER_4,CLUSTER_0
label,numpy.array(labels),CLUSTER_4,CLUSTER_0
x_train,numpy.array(list(x_train),CLUSTER_4,CLUSTER_0
x_test,numpy.array(list(x_test),CLUSTER_4,CLUSTER_0
dati,"pandas.DataFrame(data=d,columns=[""immagini"",""labels""])",CLUSTER_4,CLUSTER_0
infette,"os.listdir(cellule+""/Parasitized"")",CLUSTER_4,CLUSTER_0
sane,"os.listdir(cellule+""/Uninfected"")",CLUSTER_4,CLUSTER_0
img,"matplotlib.pyplot.imread(cellule+""/""+""Parasitized""+""/""+infette[i+1])",CLUSTER_4,CLUSTER_0
img,"matplotlib.pyplot.imread(cellule+""/""+""Uninfected""+""/""+sane[i+1])",CLUSTER_4,CLUSTER_0
img_read,"matplotlib.pyplot.imread(cellule+""/Parasitized/""+img)",CLUSTER_4,CLUSTER_0
img_read,"matplotlib.pyplot.imread(cellule+""/Uninfected/""+img)",CLUSTER_4,CLUSTER_0
"train,test","sklearn.model_selection.train_test_split(dati,test_size=0.3,stratify=dati[""labels""])",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv('1coinUSD.csv',header=None)",CLUSTER_8,CLUSTER_9
self.current_density_points_to_bin,numpy.array([-1for_inrange(var.shape[0]),CLUSTER_8,CLUSTER_9
self.current_velocity_points_to_bin,numpy.array([-1for_inrange(var.shape[0]),CLUSTER_8,CLUSTER_9
self.current_density_bin_to_points,numpy.array(self.current_density_bin_to_points),CLUSTER_8,CLUSTER_9
self.init_density,"numpy.array([0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.5200622,0.4259711,0.05396671,0.,0.,0.,0.,0.])",CLUSTER_8,CLUSTER_9
self.current_velocity,numpy.zeros(self.n),CLUSTER_8,CLUSTER_9
self.current_velocity_table,"numpy.zeros((self.n_v,self.n)",CLUSTER_8,CLUSTER_9
self.current_density,numpy.zeros(self.n),CLUSTER_8,CLUSTER_9
new_velocity,numpy.zeros(self.n),CLUSTER_8,CLUSTER_9
self.x,numpy.zeros(N),CLUSTER_8,CLUSTER_9
indicies,"numpy.nonzero(np.logical_and(current_var>=g[0],current_var<g[1])",CLUSTER_8,CLUSTER_9
indicies,"numpy.nonzero(np.logical_and(var>=g[0],var<g[1])",CLUSTER_8,CLUSTER_9
indicies,numpy.nonzero(current_density),CLUSTER_8,CLUSTER_9
new_velocity[indicies],"numpy.divide(np.multiply(prev_density[indicies],prev_velocity[indicies])",CLUSTER_8,CLUSTER_9
integral,"numpy.multiply(self.current_velocity_table[:,i],self.mean_velocity_in_bin)",CLUSTER_8,CLUSTER_9
self.density,"scipy.sparse.vstack(self.density,format='csr')",CLUSTER_8,CLUSTER_9
self.velocity,"scipy.sparse.vstack(self.velocity,format='csr')",CLUSTER_8,CLUSTER_9
self.new_density,"scipy.sparse.vstack(self.new_density,format='csr')",CLUSTER_8,CLUSTER_9
self.n,"math.floor(math.pow(T,0.34)",CLUSTER_8,CLUSTER_9
dataset,pandas.read_csv('Position_Salaries.csv'),CLUSTER_5,CLUSTER_5
X_grid,numpy.arange(min(X),CLUSTER_5,CLUSTER_5
regressor,sklearn.tree.DecisionTreeRegressor(random_state=0),CLUSTER_5,CLUSTER_5
train_imgs,"numpy.asfarray(train_data[:,1:])",CLUSTER_7,CLUSTER_8
test_imgs,"numpy.asfarray(test_data[:,1:])",CLUSTER_7,CLUSTER_8
train_labels,"numpy.asfarray(train_data[:,:1])",CLUSTER_7,CLUSTER_8
test_labels,"numpy.asfarray(test_data[:,:1])",CLUSTER_7,CLUSTER_8
corr_mat,"numpy.corrcoef(x,y)",CLUSTER_7,CLUSTER_8
train_data,"numpy.loadtxt(data_path+""mnist_train.csv"",
delimiter="","")",CLUSTER_7,CLUSTER_8
test_data,"numpy.loadtxt(data_path+""mnist_test.csv"",
delimiter="","")",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(3,4)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(3,5)",CLUSTER_7,CLUSTER_8
iris,"seaborn.load_dataset(""iris"")",CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
iris,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_8
cv_results,"sklearn.model_selection.cross_validate(clf,X,y,cv=3,return_train_score=True)",CLUSTER_7,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(test_imgs,pred,test_labels)",CLUSTER_7,CLUSTER_8
faces,sklearn.datasets.fetch_lfw_people(min_faces_per_person=40),CLUSTER_7,CLUSTER_8
sample_list_1,random.sample(range(100),CLUSTER_10,CLUSTER_4
feature_imp,pandas.DataFrame(model.feature_importances_),CLUSTER_8,CLUSTER_1
data,pandas.read_excel('INX_Future_Inc_Employee_Performance_CDS_Project2_Data_V1.8-Copy.xls'),CLUSTER_8,CLUSTER_1
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=40)",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.24,random_state=0)",CLUSTER_8,CLUSTER_1
enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
apcs,"pandas.read_csv(apc_file,sep="","")",CLUSTER_8,CLUSTER_3
apcs,pandas.read_csv(value),CLUSTER_8,CLUSTER_3
X_test,"numpy.arange(0.0,10,0.01)",CLUSTER_5,CLUSTER_10
X,"numpy.sort(10*rng.rand(80,1)",CLUSTER_5,CLUSTER_10
y,numpy.sin(X),CLUSTER_5,CLUSTER_10
clf_0,sklearn.tree.DecisionTreeRegressor(max_depth=1),CLUSTER_5,CLUSTER_10
clf_1,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_5,CLUSTER_10
clf_2,sklearn.tree.DecisionTreeRegressor(max_depth=3),CLUSTER_5,CLUSTER_10
clf_3,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_5,CLUSTER_10
pred_idx,numpy.argmax(y_hat[idx]),CLUSTER_2,CLUSTER_10
true_idx,numpy.argmax(y_test[idx]),CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,5)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_2,CLUSTER_10
parameters_tmp['Wy'],"numpy.zeros((2,5)",CLUSTER_3,CLUSTER_6
parameters_tmp['by'],"numpy.zeros((2,1)",CLUSTER_3,CLUSTER_6
data,json.load(json_file),CLUSTER_1,CLUSTER_10
res,collections.defaultdict(list),CLUSTER_1,CLUSTER_10
res,collections.defaultdict(list),CLUSTER_1,CLUSTER_10
y_pos,numpy.arange(len(semisortedinfo[[*data][1]]),CLUSTER_1,CLUSTER_10
y_pos,numpy.arange(len(semisortedinfo[p]),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,15)",CLUSTER_1,CLUSTER_10
df,pandas.read_csv('../data/Part01/application_train.csv'),CLUSTER_7,CLUSTER_9
y,"numpy.arange(1,1+len(x)",CLUSTER_7,CLUSTER_9
y,"numpy.arange(1,n+1)",CLUSTER_7,CLUSTER_9
x,numpy.sort(df['AMT_INCOME_TOTAL']),CLUSTER_7,CLUSTER_9
x,numpy.sort(df['REGION_POPULATION_RELATIVE']),CLUSTER_7,CLUSTER_9
x,numpy.sort(data),CLUSTER_7,CLUSTER_9
x_train,"numpy.pad(x_train,((0,0)",CLUSTER_4,CLUSTER_0
x_test,"numpy.pad(x_test,((0,0)",CLUSTER_4,CLUSTER_0
x_val,"numpy.pad(x_val,((0,0)",CLUSTER_4,CLUSTER_0
program_starts,time.time(),CLUSTER_4,CLUSTER_0
now,time.time(),CLUSTER_4,CLUSTER_0
categorical,pandas.get_dummies(data[categorical.columns]),CLUSTER_5,CLUSTER_1
data,"pandas.read_csv('23OCT_23NOV_10.193.123.18_final.csv.csv',header=0,encoding='UTF-16')",CLUSTER_5,CLUSTER_1
ridge_alphas,"numpy.logspace(0,5,100)",CLUSTER_7,CLUSTER_8
l1_ratios,"numpy.linspace(0.01,1.0,50)",CLUSTER_7,CLUSTER_8
merge_base,"pandas.DataFrame(df1,columns=['Country','year'])",CLUSTER_7,CLUSTER_8
merge_base,"pandas.DataFrame(df2,columns=['Country','year'])",CLUSTER_7,CLUSTER_8
df3_indicators,"pandas.DataFrame(df3,columns=['Country','year'])",CLUSTER_7,CLUSTER_8
method_coefs,"pandas.DataFrame({'Variable':X.columns,
'Coefficient':best_regulari.coef_,
'AbsoluteCoefficient':np.abs(best_regulari.coef_)",CLUSTER_7,CLUSTER_8
feature_importance,"pandas.DataFrame({'Feature':X.columns,'Importance':best_model.feature_importances_})",CLUSTER_7,CLUSTER_8
acled,pandas.concat(acled),CLUSTER_7,CLUSTER_8
merge_base,"pandas.merge(merge_base,df1_i,on=['Country','year'],how='left')",CLUSTER_7,CLUSTER_8
merge_base,"pandas.merge(merge_base,df2_i,on=['Country','year'],how='left')",CLUSTER_7,CLUSTER_8
df3_indicators,"pandas.merge(df3_indicators,df3_i,on=['Country','year'],how='left')",CLUSTER_7,CLUSTER_8
data,"pandas.merge(acled_eventtype_total,df2_indicators,on=['Country','year'])",CLUSTER_7,CLUSTER_8
acled_africa,pandas.read_csv('Desktop/ECON628-01-RPanlilio/ACLED-Africa.csv'),CLUSTER_7,CLUSTER_8
acled_asia,pandas.read_csv('Desktop/ECON628-01-RPanlilio/ACLED-Asia.csv'),CLUSTER_7,CLUSTER_8
df1,pandas.read_csv('Desktop/ECON628-01-RPanlilio/poverryandequity.csv'),CLUSTER_7,CLUSTER_8
df2,pandas.read_csv('Desktop/ECON628-01-RPanlilio/indexofeconomicfreedom.csv'),CLUSTER_7,CLUSTER_8
df3,pandas.read_csv('Desktop/ECON628-01-RPanlilio/resourcestatistics.csv'),CLUSTER_7,CLUSTER_8
acled['date'],pandas.to_datetime(acled['EventDate']),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(10,6)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,10)",CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x=""Country"",y=""TotalEvents"",data=acled_country)",CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x=""year"",y=""TotalEvents"",data=acled_year)",CLUSTER_7,CLUSTER_8
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
ridge,sklearn.linear_model.Ridge(alpha=optimal_ridge.alpha_),CLUSTER_7,CLUSTER_8
lasso,sklearn.linear_model.Lasso(alpha=optimal_lasso.alpha_),CLUSTER_7,CLUSTER_8
enet,"sklearn.linear_model.ElasticNet(alpha=optimal_enet.alpha_,l1_ratio=optimal_enet.l1_ratio_)",CLUSTER_7,CLUSTER_8
optimal_ridge,"sklearn.linear_model.RidgeCV(alphas=ridge_alphas,cv=10)",CLUSTER_7,CLUSTER_8
optimal_lasso,"sklearn.linear_model.LassoCV(n_alphas=300,cv=10,verbose=1)",CLUSTER_7,CLUSTER_8
optimal_enet,"sklearn.linear_model.ElasticNetCV(l1_ratio=l1_ratios,n_alphas=300,cv=5,verbose=1)",CLUSTER_7,CLUSTER_8
dtr,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_8
forest,sklearn.ensemble.RandomForestRegressor(),CLUSTER_7,CLUSTER_8
data,sklearn.datasets.load_files(path),CLUSTER_4,CLUSTER_0
dog_files,numpy.array(data['filenames']),CLUSTER_4,CLUSTER_0
human_files,"numpy.array(glob(""/data/lfw/*/*"")",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(dog_breed_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(VGG16_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(Inception_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
bottleneck_features,numpy.load('/data/bottleneck_features/DogVGG16Data.npz'),CLUSTER_4,CLUSTER_0
bottleneck_features,numpy.load('/data/bottleneck_features/DogInceptionV3Data.npz'),CLUSTER_4,CLUSTER_0
img,matplotlib.pyplot.imread(img_path),CLUSTER_4,CLUSTER_0
tp,numpy.cumsum(pca.explained_variance_ratio_),CLUSTER_7,CLUSTER_5
df,pandas.DataFrame(scale(df),CLUSTER_7,CLUSTER_5
corr_cell,"pandas.DataFrame(reduced_data_pca,index=df.index)",CLUSTER_7,CLUSTER_5
_,matplotlib.pyplot.bar(range(len(lpa),CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(20,7)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,8)",CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=5),CLUSTER_7,CLUSTER_5
isomap,sklearn.manifold.Isomap(n_neighbors=10),CLUSTER_7,CLUSTER_5
tsne,sklearn.manifold.TSNE(n_components=2),CLUSTER_7,CLUSTER_5
_,"seaborn.clustermap(corr_feature,linewidths=0.1,vmax=1.0,square=True,linecolor='white',annot=False,figsize=(6,6)",CLUSTER_7,CLUSTER_5
g,"seaborn.clustermap(corr_cell,linewidths=0.01,vmax=1.0,linecolor='white',
row_colors=row_colors,col_colors=row_colors,
cmap=""vlag"",
annot=False,figsize=(14,14)",CLUSTER_7,CLUSTER_5
g,"seaborn.clustermap(corr_cell,linewidths=0.01,vmax=1.0,linecolor='white',
row_colors=row_colors,col_colors=row_colors,cmap=""vlag"",
metric='correlation',
annot=False,figsize=(12,12)",CLUSTER_7,CLUSTER_5
network_pal,seaborn.husl_palette(len(u_celltypes),CLUSTER_7,CLUSTER_5
mask,"numpy.where(img==classes_dict[img_label_str],255,0)",CLUSTER_1,CLUSTER_10
mask,"numpy.where(label_array[:,:,layer]==img_label,255,0)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=4,figsize=(50,30)",CLUSTER_1,CLUSTER_10
errors_one,"pandas.Series([5,10,5,10,5,10,5,10,5,10,5,10,5,10,5,10,5,10])",CLUSTER_8,CLUSTER_3
errors_two,"pandas.Series([5,10,5,10,5,10,5,10,5,10,5,10,5,10,5,10,5,1000])",CLUSTER_8,CLUSTER_3
dc_listings,"pandas.read_csv(""dc_airbnb.csv"")",CLUSTER_8,CLUSTER_3
mae_one,numpy.mean(errors_one),CLUSTER_8,CLUSTER_3
mae_two,numpy.mean(errors_two),CLUSTER_8,CLUSTER_3
mae,numpy.absolute(test_df['predicted_price']-test_df['price']),CLUSTER_8,CLUSTER_3
rmse,numpy.sqrt(mse),CLUSTER_8,CLUSTER_3
rmse_one,numpy.sqrt(np.square(errors_one),CLUSTER_8,CLUSTER_3
rmse_two,numpy.sqrt(np.square(errors_two),CLUSTER_8,CLUSTER_3
mse,numpy.square(test_df['predicted_price']-test_df['price']),CLUSTER_8,CLUSTER_3
test_df['squared_error'],numpy.square(test_df['predicted_price']-test_df['price']),CLUSTER_8,CLUSTER_3
r,"requests.delete(""http://httpbin.org/delete"")",CLUSTER_10,CLUSTER_4
r,"requests.get(""http://httpbin.org/get"")",CLUSTER_10,CLUSTER_4
r,"requests.get(""http://httpbin.org/get"",params=payload)",CLUSTER_10,CLUSTER_4
r,requests.get('https://github.com/timeline.json'),CLUSTER_10,CLUSTER_4
r,requests.get('http://httpbin.org/get'),CLUSTER_10,CLUSTER_4
r,"requests.head(""http://httpbin.org/get"")",CLUSTER_10,CLUSTER_4
r,"requests.options(""http://httpbin.org/get"")",CLUSTER_10,CLUSTER_4
r,"requests.post('http://httpbin.org/post',data={'key':'value'})",CLUSTER_10,CLUSTER_4
r,"requests.put(""http://httpbin.org/put"")",CLUSTER_10,CLUSTER_4
df,"pandas.DataFrame(X,index=y)",CLUSTER_5,CLUSTER_9
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_9
p,numpy.array(p),CLUSTER_11,CLUSTER_11
q,numpy.array(q),CLUSTER_11,CLUSTER_11
p,numpy.array(p),CLUSTER_11,CLUSTER_11
q,numpy.array(q),CLUSTER_11,CLUSTER_11
fftDataE,numpy.array([]),CLUSTER_11,CLUSTER_11
fftDataD,numpy.array([]),CLUSTER_11,CLUSTER_11
DistributePowerDataE,numpy.array([]),CLUSTER_11,CLUSTER_11
DistributePowerDataD,numpy.array([]),CLUSTER_11,CLUSTER_11
ArrayKLD,numpy.array([]),CLUSTER_11,CLUSTER_11
PowerDataE,numpy.imag(fftDataE),CLUSTER_11,CLUSTER_11
PowerDataD,numpy.imag(fftDataD),CLUSTER_11,CLUSTER_11
fftDataE,"numpy.append(fftDataE,fftpack.fft(window[i])",CLUSTER_11,CLUSTER_11
fftDataD,"numpy.append(fftDataD,fftpack.fft(reconstructData[i])",CLUSTER_11,CLUSTER_11
DistributePowerDataE,"numpy.append(DistributePowerDataE,PowerDataE[i]/(np.sum(PowerDataE[i])",CLUSTER_11,CLUSTER_11
DistributePowerDataD,"numpy.append(DistributePowerDataD,PowerDataD[i]/(np.sum(PowerDataD[i])",CLUSTER_11,CLUSTER_11
ArrayKLD,"numpy.append(ArrayKLD,kld(DistributePowerDataE[i],DistributePowerDataD[i])",CLUSTER_11,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(30,15)",CLUSTER_11,CLUSTER_11
df.review_count.hist(bins,"numpy.arange(0,40000,400)",CLUSTER_7,CLUSTER_9
a,"numpy.array([1,2,3,4,5])",CLUSTER_7,CLUSTER_9
b,"numpy.array([1,2,3,4,5])",CLUSTER_7,CLUSTER_9
df,"pandas.read_csv(""all.csv"",header=None,
names=[""rating"",'review_count','isbn','booktype','author_url','year','genre_urls','dir','rating_count','name'],
)",CLUSTER_7,CLUSTER_9
a,numpy.arange(5),CLUSTER_3,CLUSTER_6
x,"numpy.arange(2,101)",CLUSTER_3,CLUSTER_6
x,"numpy.arange(10,22)",CLUSTER_3,CLUSTER_6
x,"numpy.arange(0,32)",CLUSTER_3,CLUSTER_6
x,numpy.arange(4),CLUSTER_3,CLUSTER_6
x1,"numpy.arange(1,7)",CLUSTER_3,CLUSTER_6
x2,"numpy.arange(1,7)",CLUSTER_3,CLUSTER_6
x,"numpy.arange(1,7)",CLUSTER_3,CLUSTER_6
x,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
x,"numpy.array([1,2,3,4,5,6,7,8,9])",CLUSTER_3,CLUSTER_6
arr,"numpy.array([[0.,1.,2.,3.],
[4.,5.,6.,7.],
[8.,9.,10.,11.],
[12.,13.,14.,15.]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([[5,10,15],[20,25,30],[35,40,45]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([[1,2,3],
[4,5,6]])",CLUSTER_3,CLUSTER_6
y,"numpy.array([[7,8,9],
[10,11,12]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([3,6,9,25,10,8])",CLUSTER_3,CLUSTER_6
a,"numpy.array([0.0,10.0,20.0,30.0])",CLUSTER_3,CLUSTER_6
b,"numpy.array([1.0,2.0,3.0])",CLUSTER_3,CLUSTER_6
res,numpy.asarray(x),CLUSTER_3,CLUSTER_6
x,"numpy.zeros([5,5,5],dtype=int)",CLUSTER_3,CLUSTER_6
a,"numpy.zeros(10,dtype=int)",CLUSTER_3,CLUSTER_6
x,"numpy.zeros((4,4)",CLUSTER_3,CLUSTER_6
res,"numpy.zeros((6,6)",CLUSTER_3,CLUSTER_6
x,"numpy.ones([3,2],dtype=float)",CLUSTER_3,CLUSTER_6
y,numpy.ones(5),CLUSTER_3,CLUSTER_6
x,"numpy.full([2,5],6)",CLUSTER_3,CLUSTER_6
b,"numpy.full([10],5)",CLUSTER_3,CLUSTER_6
mea,numpy.mean(L),CLUSTER_3,CLUSTER_6
b,"numpy.reshape(b,[3,1])",CLUSTER_3,CLUSTER_6
std,numpy.std(L),CLUSTER_3,CLUSTER_6
var,numpy.var(L),CLUSTER_3,CLUSTER_6
"x1,x2,x3","numpy.split(x,[4,6])",CLUSTER_3,CLUSTER_6
"arr1,arr2","numpy.split(arr,2,axis=1)",CLUSTER_3,CLUSTER_6
my_new_str,"re.sub(""(\\W|+)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(r'\s+','',my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(r""\b\d+\b"","""",my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(""\d+"","""",my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(r""[^a-zA-Z0-9]+"",'',my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(r'\b\w{1,2}\b','',my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,re.sub(r'\b('+r'|'.join(stopwords.words('english'),CLUSTER_10,CLUSTER_4
my_new_str,"re.sub('+','',my_new_str)",CLUSTER_10,CLUSTER_4
files,"os.listdir(""X:/xxxx/xxxx/xxxxx/"")",CLUSTER_10,CLUSTER_4
mask,numpy.zeros_like(x),CLUSTER_1,CLUSTER_10
mask,numpy.zeros_like(x),CLUSTER_1,CLUSTER_10
x,numpy.array([]),CLUSTER_0,CLUSTER_1
y,numpy.array([]),CLUSTER_0,CLUSTER_1
preds,model.predict(x=numpy.array([word_idxs]),CLUSTER_0,CLUSTER_1
startind,numpy.argmax(prob),CLUSTER_0,CLUSTER_1
idx,numpy.argmax(prob),CLUSTER_0,CLUSTER_1
preds[0],"numpy.divide(preds[0],1*sum(preds[0])",CLUSTER_0,CLUSTER_1
speech_text,"re.sub(r'SPEECH\d+','',speech_text)",CLUSTER_0,CLUSTER_1
speech_text,"re.sub(r'\d+/\d+/\d+','',speech_text)",CLUSTER_0,CLUSTER_1
speech_text,"re.sub(r"";|-|\.\.+|\?|'|–|``|’|,|\$|"",'',speech_text)",CLUSTER_0,CLUSTER_1
speech_text,"re.sub(""\.\S+"",""."",speech_text)",CLUSTER_0,CLUSTER_1
ngramdict,collections.Counter([]),CLUSTER_0,CLUSTER_1
ngramdict+,collections.Counter(unigram),CLUSTER_0,CLUSTER_1
"ngramdict,n1gramdict",collections.Counter([]),CLUSTER_0,CLUSTER_1
ngramdict+,collections.Counter(ngram),CLUSTER_0,CLUSTER_1
n1gramdict+,collections.Counter(n1gram),CLUSTER_0,CLUSTER_1
"train_data,test_data","sklearn.model_selection.train_test_split(tokenized_sent_list,test_size=0.20,random_state=100)",CLUSTER_0,CLUSTER_1
p+,math.log(mle_dict[nwords]),CLUSTER_0,CLUSTER_1
prob+,math.log(prob1),CLUSTER_0,CLUSTER_1
enc,sklearn.preprocessing.OneHotEncoder(handle_unknown='ignore'),CLUSTER_0,CLUSTER_1
X_train_cont_scaled,"pandas.DataFrame(X_train_cont_scaled,columns=X_train_cont.columns)",CLUSTER_7,CLUSTER_5
X_test_cont_scaled,"pandas.DataFrame(X_test_cont_scaled,columns=X_test_cont.columns)",CLUSTER_7,CLUSTER_5
df_base,pandas.DataFrame({'ID':np.repeat(dow_id_all.ID.unique(),CLUSTER_7,CLUSTER_5
df,"pandas.concat([df,dow],axis=1)",CLUSTER_7,CLUSTER_5
X_train_scaled,"pandas.concat([X_train_dummy,X_train_cont_scaled],axis=1)",CLUSTER_7,CLUSTER_5
X_test_scaled,"pandas.concat([X_test_dummy,X_test_cont_scaled],axis=1)",CLUSTER_7,CLUSTER_5
dow,pandas.get_dummies(df['Dayoftheweek']),CLUSTER_7,CLUSTER_5
df_merge,"pandas.merge(df_base,dow_id_all,how='left',on=['ID','Day_of_the_week'])",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv('../../data/01_raw/Absenteeism_at_work.csv',delimiter=';')",CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
selector,"sklearn.feature_selection.RFE(linreg,n_features_to_select=15)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
lasso,sklearn.linear_model.LassoCV(eps=0.001),CLUSTER_7,CLUSTER_5
df,pandas.DataFrame({'A':'foobarfoobarfoobarfoofoo'.split(),CLUSTER_8,CLUSTER_3
b_is_two_dataframe,pandas.DataFrame(df.groupby('B'),CLUSTER_8,CLUSTER_3
b_is_two_dataframe_2,pandas.DataFrame(df.groupby('B'),CLUSTER_8,CLUSTER_3
s1,pandas.Series(np.random.randn(5),CLUSTER_8,CLUSTER_3
s2,pandas.Series(np.random.randn(5),CLUSTER_8,CLUSTER_3
data,numpy.array(data),CLUSTER_12,CLUSTER_6
predicted_class_indices,"numpy.argmax(pred,axis=1)",CLUSTER_4,CLUSTER_11
data,"pandas.read_excel('fbi_ny_2013.xls',sheet_name=0,header=1,skiprows=3,skip_footer=3,
index_col=0,thousands=None)",CLUSTER_7,CLUSTER_8
df,numpy.cbrt(df),CLUSTER_7,CLUSTER_8
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
sklearn_pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_7,CLUSTER_8
suppliers,"pandas.read_csv('./data/northwind-mongo-master/suppliers.csv',usecols=['SupplierID','CompanyName','City'])",CLUSTER_8,CLUSTER_3
products,"pandas.read_csv('./data/northwind-mongo-master/products.csv',usecols=['ProductID','ProductName','SupplierID'])",CLUSTER_8,CLUSTER_3
df,pandas.read_csv('fraud_data.csv'),CLUSTER_5,CLUSTER_1
df,pandas.read_csv('fraud_data.csv'),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_5,CLUSTER_1
dummy_majority,sklearn.dummy.DummyClassifier(strategy='most_frequent'),CLUSTER_5,CLUSTER_1
recall_score,"sklearn.metrics.recall_score(y_test,dummy_majority.predict(X_test)",CLUSTER_5,CLUSTER_1
recall_score,"sklearn.metrics.recall_score(y_test,svm_predicted)",CLUSTER_5,CLUSTER_1
precision_score,"sklearn.metrics.precision_score(y_test,svm_predicted)",CLUSTER_5,CLUSTER_1
svm,sklearn.svm.SVC(),CLUSTER_5,CLUSTER_1
svm,"sklearn.svm.SVC(C=1e9,gamma=1e-07)",CLUSTER_5,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
"precision,recall,thresholds","sklearn.metrics.precision_recall_curve(y_test,y_scores_lr)",CLUSTER_5,CLUSTER_1
"fpr_lr,tpr_lr,_","sklearn.metrics.roc_curve(y_test,y_scores_lr)",CLUSTER_5,CLUSTER_1
roc_auc_lr,"sklearn.metrics.auc(fpr_lr,tpr_lr)",CLUSTER_5,CLUSTER_1
grid_lr_rec,"sklearn.model_selection.GridSearchCV(lr,param_grid=grid_values,scoring='recall')",CLUSTER_5,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,5)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_10
data,json.load(open(fname),CLUSTER_3,CLUSTER_6
result,json.load(open(fname),CLUSTER_3,CLUSTER_6
data,"json.load(open('./bounds/{}/pac-bayes-{}-{}.json'.format(model,seed,algorithm)",CLUSTER_3,CLUSTER_6
terms_f,"json.load(open('./bounds/{}/pac-bayes-{}-{}-det.json'.format(model,seed,algorithm)",CLUSTER_3,CLUSTER_6
data,"json.load(open('./bounds/{}/pac-bayes-{}.json'.format(model,seed)",CLUSTER_3,CLUSTER_6
data_f,"json.load(open('./bounds/{}/pac-bayes-{}-det.json'.format(model,seed)",CLUSTER_3,CLUSTER_6
lowest_val_loss,numpy.finfo(np.float(0.),CLUSTER_3,CLUSTER_6
best_bound,numpy.finfo(np.float(0.),CLUSTER_3,CLUSTER_6
df,"pandas.DataFrame(open_file,index=[file])",CLUSTER_11,CLUSTER_11
complete_birds_df,pandas.concat(df_list),CLUSTER_11,CLUSTER_11
complete_birds_df.index,pandas.to_datetime(complete_birds_df.index),CLUSTER_11,CLUSTER_11
complete_birds_df.index,pandas.to_datetime(complete_birds_df.index),CLUSTER_11,CLUSTER_11
text,"re.sub('\[.*?\]','',text)",CLUSTER_11,CLUSTER_11
text,"re.sub('\\\\n','',text)",CLUSTER_11,CLUSTER_11
text,"re.sub('\\\\[\w\d]{3}',"""",text)",CLUSTER_11,CLUSTER_11
text,"re.sub('\sand\s|,and\s','',text)",CLUSTER_11,CLUSTER_11
text,"re.sub('BrownPelican','BrownPelican',text)",CLUSTER_11,CLUSTER_11
text,"re.sub('GrayFlycatcher','GrayFlycatcher(1)",CLUSTER_11,CLUSTER_11
text,"re.sub('WesternWoodPewee','WesternWoodPewee(1)",CLUSTER_11,CLUSTER_11
text,"re.sub('Yellow-headedBlackbirdWesternMeadowlark','WesternMeadowlark',text)",CLUSTER_11,CLUSTER_11
file,"re.sub('.docx','',file)",CLUSTER_11,CLUSTER_11
l,"re.findall('\d+',temp)",CLUSTER_11,CLUSTER_11
reg,re.compile('[\.Ss\s][p\s]eciesseen'),CLUSTER_11,CLUSTER_11
match,"re.search(pattern,text)",CLUSTER_10,CLUSTER_4
X,"numpy.array([[-1,-1],[-2,-1],[-3,-2],[1,1],[2,1],[3,2]])",CLUSTER_5,CLUSTER_6
Y,"numpy.array([1,1,1,2,2,2])",CLUSTER_5,CLUSTER_6
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_6
clf_pf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_6
df,pandas.read_csv(ingredient_data_fp),CLUSTER_8,CLUSTER_4
positive_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
negative_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
total_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
pos_neg_ratios,collections.Counter(),CLUSTER_12,CLUSTER_6
review_counter,collections.Counter(),CLUSTER_12,CLUSTER_6
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
center,"numpy.array([center_x,center_y])",CLUSTER_4,CLUSTER_11
img_arr,numpy.array(img_arr),CLUSTER_4,CLUSTER_11
else:y,numpy.zeros(ft_data[name].shape[0]),CLUSTER_4,CLUSTER_11
par,"numpy.concatenate(([num+1,i],fit_gaussian(data)",CLUSTER_4,CLUSTER_11
inp_data,"pd.DataFrame(columns=numpy.concatenate((['target'],ft_data[cl_names[0]].columns.values)",CLUSTER_4,CLUSTER_11
par,"numpy.concatenate(([img_num+1,polar],fit_gaussian(data)",CLUSTER_4,CLUSTER_11
"Y,X",numpy.indices(data.shape),CLUSTER_4,CLUSTER_11
y,numpy.ones(ft_data[name].shape[0]),CLUSTER_4,CLUSTER_11
over,numpy.ceil((float(numb),CLUSTER_4,CLUSTER_11
x,numpy.stack(np.meshgrid(np.arange(data.shape[0]),CLUSTER_4,CLUSTER_11
X_tr,"numpy.vstack((X_tr,tmp_X_tr)",CLUSTER_4,CLUSTER_11
X_tt,"numpy.vstack((X_tt,tmp_X_tt)",CLUSTER_4,CLUSTER_11
y_tr,"numpy.append(y_tr,tmp_y_tr)",CLUSTER_4,CLUSTER_11
y_tt,"numpy.append(y_tt,tmp_y_tt)",CLUSTER_4,CLUSTER_11
col_slice,"numpy.append(flat_slice.columns.values,[opa+str(int(j)",CLUSTER_4,CLUSTER_11
"a,b","numpy.linalg.eigvalsh([[s[0],s[2]],[s[2],s[1]]])",CLUSTER_4,CLUSTER_11
"a,b","numpy.linalg.eigvalsh([[s[0],s[2]],[s[2],s[1]]])",CLUSTER_4,CLUSTER_11
"p,success","scipy.optimize.leastsq(errorfunction,para)",CLUSTER_4,CLUSTER_11
img_names,os.listdir(dir_name),CLUSTER_4,CLUSTER_11
params,"pandas.DataFrame(columns=['img_num','polar','height','amplitude','center_x','center_y','sig_x','sig_y','sig_xy'])",CLUSTER_4,CLUSTER_11
ellip_par,"pandas.DataFrame(data={'minor_ax':a_ar,'eps':eps_ar,'area':area_ar},index=idx)",CLUSTER_4,CLUSTER_11
inp_data,"pandas.DataFrame(columns=np.concatenate((['target'],ft_data[cl_names[0]].columns.values)",CLUSTER_4,CLUSTER_11
targ,pandas.DataFrame(data={'target':np.ones(len(idx),CLUSTER_4,CLUSTER_11
else:targ,pandas.DataFrame(data={'target':np.zeros(len(idx),CLUSTER_4,CLUSTER_11
params,"pandas.DataFrame(columns=['img_num','polar','height','amplitude','center_x','center_y','sig_x','sig_y','sig_xy'])",CLUSTER_4,CLUSTER_11
params,"pandas.DataFrame(columns=['img_num','polar','height','amplitude','center_x','center_y','sig_x','sig_y','sig_xy'])",CLUSTER_4,CLUSTER_11
y_tr,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
y_tt,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
X_tr,pandas.DataFrame(columns=ft_data[cl_names[0]].columns),CLUSTER_4,CLUSTER_11
X_tt,pandas.DataFrame(columns=ft_data[cl_names[0]].columns),CLUSTER_4,CLUSTER_11
pol_par,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
par_slice,"pandas.DataFrame(par_slice.drop(['img_num','polar'],axis=1)",CLUSTER_4,CLUSTER_11
flat_slice,pandas.DataFrame(index=[i]),CLUSTER_4,CLUSTER_11
flat_slice,"pandas.DataFrame(np.append(flat_slice.values,par_slice.loc[j].values)",CLUSTER_4,CLUSTER_11
ellip_par,pandas.DataFrame(data={'min_ax'+str(i),CLUSTER_4,CLUSTER_11
params,"pandas.concat([img_num,params,cov_xy],axis=1,join='inner')",CLUSTER_4,CLUSTER_11
feat,"pandas.concat([feat,ellip_par],axis=1)",CLUSTER_4,CLUSTER_11
app_data,"pandas.concat([targ,ft_data[name]],axis=1)",CLUSTER_4,CLUSTER_11
pol_par,"pandas.concat([pol_par,flat_slice])",CLUSTER_4,CLUSTER_11
feat,"pandas.concat([feat,ellip_par],axis=1)",CLUSTER_4,CLUSTER_11
par,"pandas.read_csv(os.path.join(dir_name,img_name)",CLUSTER_4,CLUSTER_11
else:dat_params[name],pandas.read_csv('C:/Artem/NEWS/params/'+str(numb),CLUSTER_4,CLUSTER_11
imgs,"pandas.read_csv('D:/NEWSdm/crops/dust_fog/0_cluster_1.csv',header=None)",CLUSTER_4,CLUSTER_11
"f,axes","matplotlib.pyplot.subplots(2,4,figsize=(24,12)",CLUSTER_4,CLUSTER_11
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,8)",CLUSTER_4,CLUSTER_11
"X_tr,X_tt,y_tr,y_tt","sklearn.model_selection.train_test_split(X,y,test_size=test_size)",CLUSTER_4,CLUSTER_11
"tmp_X_tr,tmp_X_tt,tmp_y_tr,tmp_y_tt","sklearn.model_selection.train_test_split(X,y,test_size=test_size,shuffle=False)",CLUSTER_4,CLUSTER_11
train['CategoricalAge'],"pandas.cut(train['Age'],5)",CLUSTER_7,CLUSTER_8
train['CategoricalFare'],"pandas.qcut(train['Fare'],4)",CLUSTER_7,CLUSTER_8
train,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
test,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_8
oof_train,"numpy.zeros((ntrain,)",CLUSTER_7,CLUSTER_8
oof_test,"numpy.zeros((ntest,)",CLUSTER_7,CLUSTER_8
oof_test_skf,"numpy.empty((NFOLDS,ntest)",CLUSTER_7,CLUSTER_8
title_search,re.search('([A-Za-z]+),CLUSTER_7,CLUSTER_8
g,"seaborn.pairplot(train[[u'Survived',u'Pclass',u'Sex',u'Age',u'Parch',u'Fare',u'Embarked',
u'Family_Size',u'Title']],hue='Survived',palette='seismic',size=1.2,diag_kind='kde',diag_kws=dict(shade=True)",CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_splits=NFOLDS,random_state=SEED)",CLUSTER_7,CLUSTER_8
band_info,"pandas.DataFrame([
(1,""Aerosol"",""0.43-0.45"",0.440,""30"",""Coastalaerosol"")",CLUSTER_8,CLUSTER_3
fig,matplotlib.pyplot.figure(figsize=single_fig_size),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(figsize=single_fig_size),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(figsize=single_fig_size),CLUSTER_1,CLUSTER_10
target,"numpy.mean(out_normed[start:end],axis=0)",CLUSTER_1,CLUSTER_10
line_train,"matplotlib.pyplot.plot(err_train,'b',err_val,'r')",CLUSTER_5,CLUSTER_10
xlab,matplotlib.pyplot.xlabel('Iterations'),CLUSTER_5,CLUSTER_10
ylab,matplotlib.pyplot.ylabel('Error'),CLUSTER_5,CLUSTER_10
X,sklearn.preprocessing.normalize(X),CLUSTER_5,CLUSTER_10
data,"numpy.loadtxt(f,delimiter=';')",CLUSTER_5,CLUSTER_10
data,"numpy.loadtxt(f,delimiter=';')",CLUSTER_5,CLUSTER_10
R,"numpy.array([[Z[i],-Z[i]],[1,1]])",CLUSTER_1,CLUSTER_10
Lp,"numpy.array([[0,0],[0,c[i]]])",CLUSTER_1,CLUSTER_10
R,"numpy.array([[Z[i],-Z[i]],[1,1]])",CLUSTER_1,CLUSTER_10
Lm,"numpy.array([[-c[i],0],[0,0]])",CLUSTER_1,CLUSTER_10
xg,numpy.zeros((N+1),CLUSTER_1,CLUSTER_10
M,"numpy.zeros((N+1,N+1)",CLUSTER_1,CLUSTER_10
K,"numpy.zeros((N+1,N+1)",CLUSTER_1,CLUSTER_10
Ap,"numpy.zeros((ne,2,2)",CLUSTER_1,CLUSTER_10
Am,"numpy.zeros((ne,2,2)",CLUSTER_1,CLUSTER_10
Z,numpy.zeros(ne),CLUSTER_1,CLUSTER_10
rho,numpy.zeros(ne),CLUSTER_1,CLUSTER_10
mu,numpy.zeros(ne),CLUSTER_1,CLUSTER_10
Q,"numpy.zeros((ne,N+1,2)",CLUSTER_1,CLUSTER_10
Qnew,"numpy.zeros((ne,N+1,2)",CLUSTER_1,CLUSTER_10
k1,"numpy.zeros((ne,N+1,2)",CLUSTER_1,CLUSTER_10
k2,"numpy.zeros((ne,N+1,2)",CLUSTER_1,CLUSTER_10
Qs,numpy.zeros(xg.size),CLUSTER_1,CLUSTER_10
Qv,numpy.zeros(xg.size),CLUSTER_1,CLUSTER_10
Minv,numpy.identity(N+1),CLUSTER_1,CLUSTER_10
x,"numpy.reshape(xg,(N+1,ne)",CLUSTER_1,CLUSTER_10
"Q[:,:,0]",numpy.exp(-1/sig**2*((x-x0),CLUSTER_1,CLUSTER_10
c,numpy.sqrt(mu/rho),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(10,6)",CLUSTER_1,CLUSTER_10
best_iter,numpy.argmin(cv_data['test-Logloss-mean']),CLUSTER_8,CLUSTER_3
"fifa_data[""overall_cat""]","pandas.cut(fifa_data[""Overall""],bins=[0.,50,60,70,80,90,100],
labels=[1,2,3,4,5,6])",CLUSTER_5,CLUSTER_1
fifa_data,"pandas.read_csv(""data.csv"")",CLUSTER_5,CLUSTER_1
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_1
num_pipeline,"sklearn.pipeline.Pipeline([
('imputer',SimpleImputer(strategy=""median"")",CLUSTER_5,CLUSTER_1
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_5,CLUSTER_1
tree_rmse,numpy.sqrt(tree_mse),CLUSTER_5,CLUSTER_1
tree_rmse_scores,numpy.sqrt(-scores),CLUSTER_5,CLUSTER_1
lin_rmse_scores,numpy.sqrt(-lin_scores),CLUSTER_5,CLUSTER_1
forest_rmse_scores,numpy.sqrt(-forest_scores),CLUSTER_5,CLUSTER_1
final_rmse,numpy.sqrt(final_mse),CLUSTER_5,CLUSTER_1
lin_mse,"sklearn.metrics.mean_squared_error(fifa_labels,fifa_predictions)",CLUSTER_5,CLUSTER_1
tree_mse,"sklearn.metrics.mean_squared_error(fifa_labels,fifa_predictions)",CLUSTER_5,CLUSTER_1
final_mse,"sklearn.metrics.mean_squared_error(y_test,final_predictions)",CLUSTER_5,CLUSTER_1
tree_reg,sklearn.tree.DecisionTreeRegressor(),CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(tree_reg,fifa_data_final,fifa_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_5,CLUSTER_1
lin_scores,"sklearn.model_selection.cross_val_score(lin_reg,fifa_data_final,fifa_labels,scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_5,CLUSTER_1
forest_scores,"sklearn.model_selection.cross_val_score(forest_reg,fifa_data_final,fifa_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_5,CLUSTER_1
forest_reg,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,random_state=42)",CLUSTER_5,CLUSTER_1
forest_reg,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_5,CLUSTER_1
grid_search,"sklearn.model_selection.GridSearchCV(forest_reg,param_grid,cv=5,
scoring='neg_mean_squared_error',
return_train_score=True)",CLUSTER_5,CLUSTER_1
scale,scipy.stats.sem(squared_errors),CLUSTER_5,CLUSTER_1
data_out,"pandas.DataFrame(list(zip(list_lr,list_epochs,list_batch,
list_neurons_dense,list_activation,list_optimizer,
list_loss,list_acc,list_prec,list_rec,
list_f1,list_time)",CLUSTER_8,CLUSTER_3
data_out,"pandas.DataFrame(list(zip(list_lr,list_epochs,list_batch,
list_neurons_dense,list_activation,list_optimizer,
list_loss,list_acc,list_prec,list_rec,
list_f1,list_time)",CLUSTER_8,CLUSTER_3
activation,random.choice(activation_list),CLUSTER_8,CLUSTER_3
optimizer,random.choice(optimizer_list),CLUSTER_8,CLUSTER_3
epochs,"random.randrange(1,128)",CLUSTER_8,CLUSTER_3
batch,"random.randrange(1,512)",CLUSTER_8,CLUSTER_3
neurons_dense,"random.randrange(1,1200)",CLUSTER_8,CLUSTER_3
dx,"pandas.DataFrame({'chisquare':chi2_stats,'pvalues':chi2_pvalues})",CLUSTER_1,CLUSTER_9
dataset,"pandas.read_csv(url,names=names)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.20)",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_5,CLUSTER_5
fit,"numpy.polyfit(x,y,deg=1)",CLUSTER_1,CLUSTER_3
new_df,"pandas.DataFrame({'1980s':df_80s,'1990s':df_90s,'2000s':df_00s})",CLUSTER_1,CLUSTER_3
df_tot,pandas.DataFrame(df_can[years].sum(axis=0),CLUSTER_1,CLUSTER_3
df_total,pandas.DataFrame(df_countries.sum(axis=1),CLUSTER_1,CLUSTER_3
df_can,"pandas.read_excel('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx',
sheet_name='CanadabyCitizenship',
skiprows=range(20)",CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
df,"pandas.read_excel('../data/OnlineRetail.xlsx',sheet_name='OnlineRetail')",CLUSTER_5,CLUSTER_5
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_5,CLUSTER_5
kmeans,sklearn.cluster.KMeans(n_clusters=n_cluster),CLUSTER_5,CLUSTER_5
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_5,CLUSTER_5
silhouette_avg,"sklearn.metrics.silhouette_score(
normalized_df[['TotalSales','OrderCount','AvgOrderValue']],
kmeans.labels_
)",CLUSTER_5,CLUSTER_5
elexon,"pandas.read_csv('~/git/forecast/projects/elexon/data/clean.csv',index_col=0,parse_dates=True)",CLUSTER_8,CLUSTER_4
alldata_x,numpy.array(alldata_x),CLUSTER_4,CLUSTER_0
alldata_y,numpy.array(alldata_y),CLUSTER_4,CLUSTER_0
combined,"numpy.array([gen_imgs[0],gen_imgs[1],gen_imgs[2],gen_imgs[3],gen_imgs[4],gen_imgs[5],gen_imgs[6],gen_imgs[7],gen_imgs[8],gen_imgs[9]])",CLUSTER_4,CLUSTER_0
combined,"numpy.array([y_train[0],y_train[1],y_train[2],y_train[3],y_train[4],y_train[5],y_train[6],y_train[7],y_train[8],y_train[9]])",CLUSTER_4,CLUSTER_0
combined,"numpy.array([X_train[0],X_train[1],X_train[2],X_train[3],X_train[4],X_train[5],X_train[6],X_train[7],X_train[8],X_train[9]])",CLUSTER_4,CLUSTER_0
combined,"numpy.hstack(combined.reshape(10,384,384,3)",CLUSTER_4,CLUSTER_0
combined,"numpy.hstack(combined.reshape(10,384,384,3)",CLUSTER_4,CLUSTER_0
combined,"numpy.hstack(combined.reshape(10,384,384,3)",CLUSTER_4,CLUSTER_0
tile_sizes,"numpy.loadtxt(path+'tile_sizes.txt',dtype='int')",CLUSTER_4,CLUSTER_0
frame,numpy.load(frame),CLUSTER_4,CLUSTER_0
tile_index,random.choice(images_sampled[i]),CLUSTER_4,CLUSTER_0
index_list,random.sample(images_sampled.keys(),CLUSTER_4,CLUSTER_0
mse,numpy.mean((img1-img2),CLUSTER_4,CLUSTER_0
current_struct_time,time.gmtime(current_time),CLUSTER_10,CLUSTER_12
current_time,time.time(),CLUSTER_10,CLUSTER_12
nye_2017,"datetime.datetime(year=2017,month=12,day=31,hour=12,minute=59,second=59)",CLUSTER_10,CLUSTER_12
sabbatical,"datetime.datetime(year=2017,month=9,day=1)",CLUSTER_10,CLUSTER_12
march3,"datetime.datetime(year=2010,month=3,day=3)",CLUSTER_10,CLUSTER_12
mystery_date,"datetime.datetime(2015,12,31,0,0)",CLUSTER_10,CLUSTER_12
datetime_object,datetime.datetime.fromtimestamp(1433213314.0),CLUSTER_10,CLUSTER_12
post[2],datetime.datetime.fromtimestamp(float(post[2]),CLUSTER_10,CLUSTER_12
now,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
today,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
today,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
dezember12,"datetime.datetime.strptime(""Dec12,2017"",""%b%d,%Y"")",CLUSTER_10,CLUSTER_12
march1,"datetime.datetime.strptime(""Mar1,2017"",""%b%d,%Y"")",CLUSTER_10,CLUSTER_12
mystery_date,"datetime.datetime.strptime(mystery_date_formatted_string,""%I:%M%pon%A%B%d,%Y"")",CLUSTER_10,CLUSTER_12
diff,"datetime.timedelta(weeks=6,days=0,minutes=20)",CLUSTER_10,CLUSTER_12
train,"pandas.read_csv('data/features-train.csv',index_col='Id')",CLUSTER_0,CLUSTER_3
test,"pandas.read_csv('data/features-test.csv',index_col='Id')",CLUSTER_0,CLUSTER_3
scores,numpy.zeros(num_agents),CLUSTER_3,CLUSTER_6
actions,"numpy.clip(actions,-1,1)",CLUSTER_3,CLUSTER_6
currentTime,"datetime.datetime.strptime(tweetObj['created_at'],timeFormat)",CLUSTER_4,CLUSTER_11
lambdatweet:crisisTime<,"datetime.datetime.strptime(tweet[""retweeted_status""][""created_at""],timeFormat)",CLUSTER_4,CLUSTER_11
crisisTime,datetime.datetime.utcfromtimestamp(crisisMoment),CLUSTER_4,CLUSTER_11
timeIntervalStep,"datetime.timedelta(0,60)",CLUSTER_4,CLUSTER_11
tweetObj,json.loads(decoded_line),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"features_set_2,labels_2",numpy.array(features_set_2),CLUSTER_4,CLUSTER_0
"features_set_2,labels_2",numpy.array(features_set_2),CLUSTER_4,CLUSTER_0
max_labels_pred_test,"numpy.argmax(labels_pred_test,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_test,"numpy.argmax(labels,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_pred_test,"numpy.argmax(labels_pred_test,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_test,"numpy.argmax(labels_2,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_pred_test,"numpy.argmax(labels_pred_test,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_test,"numpy.argmax(labels_2,axis=1)",CLUSTER_4,CLUSTER_0
features_set,"numpy.reshape(features_set,(16692,200,3)",CLUSTER_4,CLUSTER_0
features_set_2,"numpy.reshape(features_set_2,(1317,200,3)",CLUSTER_4,CLUSTER_0
features_set_2,"numpy.reshape(features_set_2,(1317,200,3)",CLUSTER_4,CLUSTER_0
features_set,"numpy.reshape(features_set,(4173,600)",CLUSTER_4,CLUSTER_0
features_set_2,"numpy.reshape(features_set_2,(1317,600)",CLUSTER_4,CLUSTER_0
data,pandas.read_csv('WISDM_ar_latest/WISDM_ar_v1.1/WISDM_ar_v1.1.csv'),CLUSTER_4,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(validations,predictions)",CLUSTER_4,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(validations,predictions)",CLUSTER_4,CLUSTER_0
label_encoded,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_0
max_labels_perwindow,"scipy.stats.mode(y_train[""Encodedactivity""][i:i+200])",CLUSTER_4,CLUSTER_0
max_labels_perwindow,"scipy.stats.mode(y_test[""Encodedactivity""][i:i+200])",CLUSTER_4,CLUSTER_0
max_labels_perwindow,"scipy.stats.mode(y_test[""ActivityEncoded""][i:i+200])",CLUSTER_4,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_0
q,collections.deque(reachable_ocean),CLUSTER_10,CLUSTER_4
train['log_revenue'],numpy.log1p(train['revenue']),CLUSTER_0,CLUSTER_8
train['log_budget'],numpy.log1p(train['budget']),CLUSTER_0,CLUSTER_8
test['log_budget'],numpy.log1p(test['budget']),CLUSTER_0,CLUSTER_8
train,pandas.read_csv('data/train.csv'),CLUSTER_0,CLUSTER_8
test,pandas.read_csv('data/test.csv'),CLUSTER_0,CLUSTER_8
train['release_date'],pandas.to_datetime(train['release_date']),CLUSTER_0,CLUSTER_8
test['release_date'],pandas.to_datetime(test['release_date']),CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,6)",CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,6)",CLUSTER_0,CLUSTER_8
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_0,CLUSTER_8
mapping_recon2_genes,"pandas.read_csv('../data/hgnc_to_entrez.txt',sep='\t')",CLUSTER_8,CLUSTER_4
IEMinfo,"pandas.read_excel('../data/IEM_compendium.xlsx',sheet_name='mappedIEMssuppletable',header=0)",CLUSTER_8,CLUSTER_4
some_nans_bools,pandas.isnull(informative_df),CLUSTER_8,CLUSTER_3
df_nans,pandas.isnull(df[nan_columns]),CLUSTER_8,CLUSTER_3
df1,"pandas.read_csv(""http://mlr.cs.umass.edu/ml/machine-learning-databases/autos/imports-85.data"",header=None)",CLUSTER_8,CLUSTER_3
df1['price'],pandas.to_numeric(df1['price']),CLUSTER_8,CLUSTER_3
df1['price'],pandas.to_numeric(df1['price']),CLUSTER_8,CLUSTER_3
column_idx_matches,"numpy.array([column_matches(df,column,match_value)",CLUSTER_8,CLUSTER_3
rows,"numpy.concatenate(matches[:,1])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../../data/mlbootcamp5_train.csv',sep=';',index_col='id')",CLUSTER_12,CLUSTER_3
x_ticks,numpy.arange(25),CLUSTER_1,CLUSTER_10
x,"numpy.arange(0,len(nu_ch)",CLUSTER_1,CLUSTER_10
indexes_los,numpy.arange(npix),CLUSTER_1,CLUSTER_10
nu_ch,numpy.array(file['frequencies']),CLUSTER_1,CLUSTER_10
obs_maps+,numpy.array(file[c]),CLUSTER_1,CLUSTER_10
obs_maps,"numpy.array([[obs_maps[i]-np.mean(obs_maps[i],axis=0)",CLUSTER_1,CLUSTER_10
FF_col,numpy.array([nu_ch**(-2.13),CLUSTER_1,CLUSTER_10
sync_A,numpy.array([nu_ch**(-3.2),CLUSTER_1,CLUSTER_10
sync_B,numpy.array([nu_ch**(-2.6),CLUSTER_1,CLUSTER_10
map_input,numpy.array(file['cosmological_signal']),CLUSTER_1,CLUSTER_10
map_input,numpy.array(file['cosmological_signal']),CLUSTER_1,CLUSTER_10
map_input,numpy.array(file['cosmological_signal']),CLUSTER_1,CLUSTER_10
obs_maps,numpy.zeros((len(nu_ch),CLUSTER_1,CLUSTER_10
npix,numpy.shape(file['cosmological_signal']),CLUSTER_1,CLUSTER_10
C_ij,numpy.cov(X),CLUSTER_1,CLUSTER_10
"eigenval,eigenvec",numpy.linalg.eigh(C_ij),CLUSTER_1,CLUSTER_10
piA,numpy.linalg.inv(Ae.T@Ae),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,6)",CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_10
random_indices,"numpy.arange(0,Space_Position.shape[0])",CLUSTER_6,CLUSTER_10
Space_Position,numpy.array(position_vis),CLUSTER_6,CLUSTER_10
vis,numpy.zeros(np.shape(fft_now),CLUSTER_6,CLUSTER_10
"x_len,y_len",numpy.shape(images),CLUSTER_6,CLUSTER_10
sum_flux_obs,numpy.sum(ifft_obs.real.T[int(x_len/2),CLUSTER_6,CLUSTER_10
sum_flux_model,numpy.sum(images.real.T[int(x_len/2),CLUSTER_6,CLUSTER_10
x,"numpy.linspace(xmin,xmax,x_len)",CLUSTER_6,CLUSTER_10
y,"numpy.linspace(ymin,ymax,y_len)",CLUSTER_6,CLUSTER_10
"xx,yy","numpy.meshgrid(x,y,indexing='ij')",CLUSTER_6,CLUSTER_10
fft_now,numpy.fft.fft2(images),CLUSTER_6,CLUSTER_10
fft_now,numpy.fft.fft2(images),CLUSTER_6,CLUSTER_10
fft_now,numpy.fft.fftshift(fft_now),CLUSTER_6,CLUSTER_10
fft_now,numpy.fft.fftshift(fft_now),CLUSTER_6,CLUSTER_10
model_vis,numpy.fft.fftshift(np.fft.fft2(model),CLUSTER_6,CLUSTER_10
model_vis,numpy.fft.fftshift(np.fft.fft2(model),CLUSTER_6,CLUSTER_10
model_vis,numpy.fft.fftshift(np.fft.fft2(model),CLUSTER_6,CLUSTER_10
model_vis,numpy.fft.fftshift(np.fft.fft2(model),CLUSTER_6,CLUSTER_10
ifft,numpy.fft.ifft2(shift_ifft2),CLUSTER_6,CLUSTER_10
ifft_obs,numpy.fft.ifft2(vis_obs_shift),CLUSTER_6,CLUSTER_10
ifft_F,numpy.fft.ifft2(d_vis),CLUSTER_6,CLUSTER_10
ifft_F,numpy.fft.ifft2(d_vis),CLUSTER_6,CLUSTER_10
shift_ifft2,numpy.fft.ifftshift(fft_now),CLUSTER_6,CLUSTER_10
vis_obs_shift,numpy.fft.ifftshift(vis_obs),CLUSTER_6,CLUSTER_10
vis_F,numpy.fft.ifftshift(d_vis),CLUSTER_6,CLUSTER_10
vis_F,numpy.fft.ifftshift(d_vis),CLUSTER_6,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(1,2,figsize=(10,3)",CLUSTER_6,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(1,3,figsize=(10,3)",CLUSTER_6,CLUSTER_10
transform_df,"pandas.concat([
transform_df,
pd.get_dummies(transform_df.select_dtypes(include=['category'])",CLUSTER_5,CLUSTER_5
df,"pandas.concat([df,pd.get_dummies(df.select_dtypes(include=['category'])",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""AmesHousing.tsv"",delimiter=""\t"")",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""AmesHousing.tsv"",delimiter=""\t"")",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""AmesHousing.tsv"",delimiter=""\t"")",CLUSTER_5,CLUSTER_5
avg_rmse,"numpy.mean([rmse_one,rmse_two])",CLUSTER_5,CLUSTER_5
avg_rmse,numpy.mean(rmse_values),CLUSTER_5,CLUSTER_5
rmse,numpy.sqrt(mse),CLUSTER_5,CLUSTER_5
rmse,numpy.sqrt(mse),CLUSTER_5,CLUSTER_5
rmse,numpy.sqrt(mse),CLUSTER_5,CLUSTER_5
rmse_one,numpy.sqrt(mse_one),CLUSTER_5,CLUSTER_5
rmse_two,numpy.sqrt(mse_two),CLUSTER_5,CLUSTER_5
rmse,numpy.sqrt(mse),CLUSTER_5,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=k,shuffle=True)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions)",CLUSTER_5,CLUSTER_5
mse_one,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions_one)",CLUSTER_5,CLUSTER_5
mse_two,"sklearn.metrics.mean_squared_error(train[""SalePrice""],predictions_two)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions)",CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
alphas,"numpy.logspace(-1,5,20)",CLUSTER_7,CLUSTER_8
"eig_val,eig_vec",numpy.linalg.eig(RR),CLUSTER_7,CLUSTER_8
"eig_val,eig_vec",numpy.linalg.eig(RR),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
enroll_df,pandas.DataFrame(stats.items(),CLUSTER_7,CLUSTER_8
dfEig,"pandas.DataFrame(eig_vec,index=x.columns,columns=pc_label)",CLUSTER_7,CLUSTER_8
dfEig,"pandas.DataFrame(eig_vec,index=x.columns,columns=pc_label)",CLUSTER_7,CLUSTER_8
ridge_models,"pandas.DataFrame(
[(alpha,
""RidgeRegressionwithalpha=%f""%alpha,
compute_error(Ridge(alpha=alpha)",CLUSTER_7,CLUSTER_8
pred_df,"pandas.DataFrame(list(zip(X_test.index,pred)",CLUSTER_7,CLUSTER_8
pred_df,"pandas.DataFrame(list(zip(X_test.index,pred)",CLUSTER_7,CLUSTER_8
test,"pandas.DataFrame({'ClaimMonth':['July'],'ClaimYear':[2019],'Enrolled':[4981]})",CLUSTER_7,CLUSTER_8
df,"pandas.concat([df,pd.get_dummies(dataframe[feat],prefix=feat)",CLUSTER_7,CLUSTER_8
df,"pandas.concat([dataframe,df],axis=1,sort=False)",CLUSTER_7,CLUSTER_8
claim_df,"pandas.read_csv('./claimdata.csv',parse_dates=['ClaimDate'])",CLUSTER_7,CLUSTER_8
pet_df,"pandas.read_csv('./petdata.csv',parse_dates=['EnrollDate','CancelDate'])",CLUSTER_7,CLUSTER_8
claim_df,"pandas.read_csv('./claimdata.csv',parse_dates=['ClaimDate'])",CLUSTER_7,CLUSTER_8
july,"datetime.datetime.strptime('2019-07-31','%Y-%m-%d')",CLUSTER_7,CLUSTER_8
july_ids['ClaimDate'],"datetime.datetime.strptime('2019-07-31','%Y-%m-%d')",CLUSTER_7,CLUSTER_8
gs_dt,"sklearn.model_selection.GridSearchCV(pipe,
param_grid,
scoring='neg_mean_absolute_error',
return_train_score=True,
cv=cv,n_jobs=5,verbose=3,error_score='raise')",CLUSTER_7,CLUSTER_8
gs_dt,"sklearn.model_selection.GridSearchCV(pipe,
param_grid,
scoring='neg_mean_absolute_error',
return_train_score=True,
cv=cv,n_jobs=5,verbose=3,error_score='raise')",CLUSTER_7,CLUSTER_8
gs_dt,"sklearn.model_selection.GridSearchCV(pipe,
param_grid,
scoring='neg_mean_absolute_error',
return_train_score=True,
cv=cv,n_jobs=2,verbose=3,error_score='raise')",CLUSTER_7,CLUSTER_8
gs_dt2,"sklearn.model_selection.GridSearchCV(pipe,
param_grid,
scoring='explained_variance',
return_train_score=True,
cv=cv,n_jobs=5,verbose=3,error_score='raise')",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.2,random_state=42)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.2,random_state=42)",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.ShuffleSplit(n_splits=100,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.ShuffleSplit(n_splits=100,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
('features',FeatureUnion([
('numeric_feats',ColumnSelector(cols=numerical)",CLUSTER_7,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
('features',FeatureUnion([
('numeric_feats',ColumnSelector(cols=numerical)",CLUSTER_7,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
('features',FeatureUnion([
('numeric_feats',ColumnSelector(cols=numerical)",CLUSTER_7,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
('features',FeatureUnion([
('numeric_feats',ColumnSelector(cols=numerical)",CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=i,
init='k-means++',
n_init=10,
max_iter=300,
random_state=0)",CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=i,
init='k-means++',
n_init=10,
max_iter=300,
random_state=0)",CLUSTER_7,CLUSTER_8
self.bk_active_links,"numpy.zeros(self.size,dtype=np.int)",CLUSTER_1,CLUSTER_10
self.state,"numpy.zeros(self.size,dtype=np.int8)",CLUSTER_1,CLUSTER_10
"soi,",numpy.where(self.state==1),CLUSTER_1,CLUSTER_10
"susceptible,",numpy.where(self.state==0),CLUSTER_1,CLUSTER_10
beta,"numpy.linspace(0,0.3,20)",CLUSTER_1,CLUSTER_10
alsX,numpy.array(docX),CLUSTER_11,CLUSTER_0
alsY,numpy.array(docY),CLUSTER_11,CLUSTER_0
high_win,numpy.array([]),CLUSTER_11,CLUSTER_0
high_lost,numpy.array([]),CLUSTER_11,CLUSTER_0
low_win,numpy.array([]),CLUSTER_11,CLUSTER_0
low_lost,numpy.array([]),CLUSTER_11,CLUSTER_0
high_win,"numpy.append(high_win,numpy.array(temp_check[i])",CLUSTER_11,CLUSTER_0
high_lost,"numpy.append(high_lost,numpy.array(temp_check[i])",CLUSTER_11,CLUSTER_0
low_win,"numpy.append(low_win,numpy.array(temp_check[i])",CLUSTER_11,CLUSTER_0
low_lost,"numpy.append(low_lost,numpy.array(temp_check[i])",CLUSTER_11,CLUSTER_0
result,pandas.DataFrame(high_predicted),CLUSTER_11,CLUSTER_0
data,pandas.read_csv(file_name),CLUSTER_11,CLUSTER_0
data['date'],"pandas.to_datetime(data['date'],format='%Y-%m-%d')",CLUSTER_11,CLUSTER_0
starttime,time.time(),CLUSTER_11,CLUSTER_0
reviews,"pandas.read_csv(""../input/wine-reviews/winemag-data-130k-v2.csv"",index_col=0)",CLUSTER_8,CLUSTER_4
df,pandas.DataFrame(menuList),CLUSTER_1,CLUSTER_3
randnum,random.random(),CLUSTER_6,CLUSTER_6
randnum,random.random(),CLUSTER_6,CLUSTER_6
epoch_start_time,time.time(),CLUSTER_6,CLUSTER_6
epoch_start_time,time.time(),CLUSTER_6,CLUSTER_6
start_time,time.time(),CLUSTER_6,CLUSTER_6
total_time,time.time(),CLUSTER_6,CLUSTER_6
self.rgbColors,"numpy.array([[0,255,0],[255,255,255],[0,0,0],[255,0,0],[0,0,255],[255,255,0],[0,255,255],[255,0,255],[51,51,255],[102,102,0],[255,0,127],[160,32,240],[238,130,238]])",CLUSTER_1,CLUSTER_9
tmpImg,numpy.zeros(img.shape),CLUSTER_1,CLUSTER_9
feats,"numpy.zeros((filteredImg[0].shape[0],filteredImg[0].shape[1],dim)",CLUSTER_1,CLUSTER_9
output,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_1,CLUSTER_9
output,"numpy.zeros((img.shape[0],img.shape[1])",CLUSTER_1,CLUSTER_9
ref_feats[i],"numpy.mean(ref_feats[i],axis=0)",CLUSTER_1,CLUSTER_9
ref_feats[i],"numpy.mean(ref_feats[i],axis=0)",CLUSTER_1,CLUSTER_9
ref_feats[i],"numpy.mean(ref_feats[i],axis=0)",CLUSTER_1,CLUSTER_9
ref_feats[i],"numpy.mean(ref_feats[i],axis=0)",CLUSTER_1,CLUSTER_9
kernel,"numpy.real(gabor_kernel(frequency,theta=theta,sigma_x=sigma,sigma_y=sigma)",CLUSTER_1,CLUSTER_9
self.centroids[item],"numpy.average(self.clusters[item],axis=0)",CLUSTER_1,CLUSTER_9
self.centroids[item],"numpy.average(self.clusters[item],axis=0)",CLUSTER_1,CLUSTER_9
df_assetCodes,"pandas.DataFrame({'level_0':assetCodes_index,'assetCode':assetCodes_expanded})",CLUSTER_11,CLUSTER_5
news_df_expanded,"pandas.merge(df_assetCodes,news_df[news_cols],left_on='level_0',right_index=True,suffixes=(['','_old'])",CLUSTER_11,CLUSTER_5
market_df['day_change'],"numpy.divide(np.subtract(market_df['close'],market_df['open'])",CLUSTER_11,CLUSTER_5
predictions,numpy.divide(predictions-np.min(predictions),CLUSTER_11,CLUSTER_5
market_df['dollar_volume'],"numpy.multiply(market_df['volume'],np.divide(np.add(market_df['open'],market_df['close'])",CLUSTER_11,CLUSTER_5
"market_df[""change_""+time+""_""+adj]","numpy.subtract(market_df['returns'+time+'Prev'+adj+'1'],market_df['returns'+time+'Prev'+adj+'10'])",CLUSTER_11,CLUSTER_5
error,"numpy.subtract(y_pred,y_true)",CLUSTER_11,CLUSTER_5
"plt.hist(y_true,bins","numpy.linspace(-0.5,0.5,150)",CLUSTER_11,CLUSTER_5
"plt.hist(y_pred,bins","numpy.linspace(-0.5,0.5,150)",CLUSTER_11,CLUSTER_5
"plt.hist(error,bins","numpy.linspace(-0.25,0.25,100)",CLUSTER_11,CLUSTER_5
"train,validate,test",numpy.split(merged_data.sample(frac=1),CLUSTER_11,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_11,CLUSTER_5
accuracy,sklearn.metrics.accuracy_score(np.array(y_true),CLUSTER_11,CLUSTER_5
MSE,"sklearn.metrics.mean_squared_error(y_true,y_pred)",CLUSTER_11,CLUSTER_5
U_rv,scipy.stats.uniform(),CLUSTER_1,CLUSTER_9
U_rv_fixed,"scipy.stats.uniform(1,scale=4)",CLUSTER_1,CLUSTER_9
mmap,"numpy.memmap('mymmap',dtype='float64',mode='w+',shape=(10000,10000)",CLUSTER_8,CLUSTER_3
mmap,"numpy.memmap('mymmap',dtype='float64',shape=(10000,10000)",CLUSTER_8,CLUSTER_3
arr,numpy.arange(8),CLUSTER_8,CLUSTER_3
arr,numpy.arange(15),CLUSTER_8,CLUSTER_3
arr,numpy.arange(15),CLUSTER_8,CLUSTER_3
arr,numpy.arange(12),CLUSTER_8,CLUSTER_3
arr,numpy.arange(6),CLUSTER_8,CLUSTER_3
arr,numpy.arange(3),CLUSTER_8,CLUSTER_3
arr,numpy.arange(10),CLUSTER_8,CLUSTER_3
arr,numpy.arange(5),CLUSTER_8,CLUSTER_3
arr,numpy.arange(10),CLUSTER_8,CLUSTER_3
arr,numpy.arange(15),CLUSTER_8,CLUSTER_3
arr,numpy.arange(3),CLUSTER_8,CLUSTER_3
arr,numpy.arange(10),CLUSTER_8,CLUSTER_3
arr1,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_8,CLUSTER_3
arr2,"numpy.array([[7,8,9],[10,11,12]])",CLUSTER_8,CLUSTER_3
col,"numpy.array([1.28,-0.42,0.44,1.6])",CLUSTER_8,CLUSTER_3
sarr,"numpy.array([(1.5,6)",CLUSTER_8,CLUSTER_3
data,"numpy.array([((1,2)",CLUSTER_8,CLUSTER_3
values,"numpy.array([5,0,1,3,2])",CLUSTER_8,CLUSTER_3
first_name,"numpy.array(['Bob','Jane','Steve','Bill','Barbara'])",CLUSTER_8,CLUSTER_3
last_name,"numpy.array(['Jones','Arnold','Arnold','Jones','Walters'])",CLUSTER_8,CLUSTER_3
values,"numpy.array(['2:first','2:second','1:first','1:second','1:third'])",CLUSTER_8,CLUSTER_3
key,"numpy.array([2,2,1,1,1])",CLUSTER_8,CLUSTER_3
arr,"numpy.array([0,1,7,12,15])",CLUSTER_8,CLUSTER_3
arr,"numpy.array([0,0,0,1,1,1,1])",CLUSTER_8,CLUSTER_3
bins,"numpy.array([0,100,1000,5000,10000])",CLUSTER_8,CLUSTER_3
X,"numpy.array([[8.82768214,3.82222409,-1.14276475,2.04411587],
[3.82222409,6.75272284,0.83909108,2.08293758],
[-1.14276475,0.83909108,5.01690521,0.79573241],
[2.04411587,2.08293758,0.79573241,6.24095859]])",CLUSTER_8,CLUSTER_3
arr,"numpy.zeros((4,4)",CLUSTER_8,CLUSTER_3
arr,"numpy.zeros((4,3)",CLUSTER_8,CLUSTER_3
arr,"numpy.zeros(4,dtype=dtype)",CLUSTER_8,CLUSTER_3
sorter,"numpy.lexsort((first_name,last_name)",CLUSTER_8,CLUSTER_3
ints,"numpy.ones(10,dtype=np.uint16)",CLUSTER_8,CLUSTER_3
floats,"numpy.ones(10,dtype=np.float32)",CLUSTER_8,CLUSTER_3
other_arr,"numpy.ones((3,5)",CLUSTER_8,CLUSTER_3
arr_c,"numpy.ones((1000,1000)",CLUSTER_8,CLUSTER_3
arr_f,"numpy.ones((1000,1000)",CLUSTER_8,CLUSTER_3
data,"numpy.floor(np.random.uniform(0,10000,size=50)",CLUSTER_8,CLUSTER_3
add_them,"numpy.frompyfunc(add_elements,2,1)",CLUSTER_8,CLUSTER_3
arr,numpy.multiply.outer(np.arange(4),CLUSTER_8,CLUSTER_3
result,"numpy.subtract.outer(randn(3,4)",CLUSTER_8,CLUSTER_3
Xm,numpy.matrix(X),CLUSTER_8,CLUSTER_3
add_them,"numpy.vectorize(add_elements,otypes=[np.float64])",CLUSTER_8,CLUSTER_3
"first,second,third","numpy.split(arr,[1,3])",CLUSTER_8,CLUSTER_3
a,numpy.arange(27),CLUSTER_3,CLUSTER_6
b,numpy.arange(5),CLUSTER_3,CLUSTER_6
c,"numpy.arange(5,10)",CLUSTER_3,CLUSTER_6
a,numpy.arange(6),CLUSTER_3,CLUSTER_6
a,numpy.arange(6),CLUSTER_3,CLUSTER_6
a,numpy.arange(27),CLUSTER_3,CLUSTER_6
a,numpy.array(100),CLUSTER_3,CLUSTER_6
a,numpy.array([100]),CLUSTER_3,CLUSTER_6
a,numpy.array([[100]]),CLUSTER_3,CLUSTER_6
a,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_3,CLUSTER_6
a,"numpy.array([[0,1,2,3,4,5]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([('Rex',9,81.0)",CLUSTER_3,CLUSTER_6
Address,"collections.namedtuple('Address',('name','age','weight')",CLUSTER_3,CLUSTER_6
xml_files,os.listdir(Annotations),CLUSTER_10,CLUSTER_4
eip,"numpy.arange(0,3*np.pi,0.1)",CLUSTER_1,CLUSTER_9
eip,"numpy.arange(0,3*np.pi,0.1)",CLUSTER_1,CLUSTER_9
eip,"numpy.arange(0,3*np.pi,0.1)",CLUSTER_1,CLUSTER_9
eip_list,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([0,2,0,1])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1,2])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1.0,2.0])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1,2],dtype=np.int64)",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4]],dtype=np.float64)",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([[5,6],[7,8]],dtype=np.float64)",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([[5,6],[7,8]])",CLUSTER_1,CLUSTER_9
eip_in,"numpy.array([9,10])",CLUSTER_1,CLUSTER_9
eip_out,"numpy.array([11,12])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([1,0,1])",CLUSTER_1,CLUSTER_9
eip_in,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
mlblr_in,"numpy.array([1,0,1])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([1,0,1])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([4,5])",CLUSTER_1,CLUSTER_9
eip_in,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[0,1],[1,0],[2,0]])",CLUSTER_1,CLUSTER_9
eip,"numpy.zeros((2,2)",CLUSTER_1,CLUSTER_9
mlblr_in,numpy.empty_like(eip),CLUSTER_1,CLUSTER_9
mlblr,"numpy.ones((1,2)",CLUSTER_1,CLUSTER_9
eip,"numpy.full((2,2)",CLUSTER_1,CLUSTER_9
eip_out,numpy.cos(eip),CLUSTER_1,CLUSTER_9
eip_out,numpy.cos(eip),CLUSTER_1,CLUSTER_9
mlblr,numpy.sin(eip),CLUSTER_1,CLUSTER_9
eip_in,numpy.sin(eip),CLUSTER_1,CLUSTER_9
eip_in,numpy.sin(eip),CLUSTER_1,CLUSTER_9
mlblr_out,"numpy.tile(mlblr_in,(4,1)",CLUSTER_1,CLUSTER_9
mlblr,numpy.eye(2),CLUSTER_1,CLUSTER_9
unrate,pandas.read_excel('uer-20150702-tyejjd8j.xlsx'),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,6)",CLUSTER_1,CLUSTER_3
newsgroups_train,sklearn.datasets.fetch_20newsgroups(subset='train'),CLUSTER_8,CLUSTER_1
df,pandas.DataFrame(columns=['text']),CLUSTER_8,CLUSTER_1
df_features,"pandas.DataFrame(norm_features,index=df.index.tolist()",CLUSTER_8,CLUSTER_1
nmf,sklearn.decomposition.NMF(n_components=40),CLUSTER_8,CLUSTER_1
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_8,CLUSTER_1
y_guess,"numpy.zeros(n_samples,dtype=np.int)",CLUSTER_4,CLUSTER_6
y_truth,"numpy.argmax(y_test[:n_samples],axis=-1)",CLUSTER_4,CLUSTER_6
y_guess[c*BATCHSIZE:(c+1)*BATCHSIZE],"numpy.argmax(predicted_label_probs,axis=-1)",CLUSTER_4,CLUSTER_6
data,"numpy.genfromtxt(""../../datasets/raw/veg/vegetation.grid"",skip_header=6,skip_footer=18)",CLUSTER_4,CLUSTER_11
rain,"numpy.genfromtxt(""../../datasets/raw/rain/2019123120191231.grid"",skip_header=6,skip_footer=18)",CLUSTER_4,CLUSTER_11
temp,"numpy.genfromtxt(""../../datasets/raw/temp/2019103120191031.grid"",skip_header=6,skip_footer=18)",CLUSTER_4,CLUSTER_11
fire,"pandas.read_csv(""../../datasets/raw/fire/fire_nrt_V1_95405.csv"")",CLUSTER_4,CLUSTER_11
item_features,scipy.sparse.load_npz('data/item_features_matrix.npz'),CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame({'id1':id1,'id2':id2,'distance':M})",CLUSTER_5,CLUSTER_1
df,pandas.read_csv('data/Interactions.csv'),CLUSTER_5,CLUSTER_1
I,"scipy.sparse.coo_matrix((data,(row,col)",CLUSTER_5,CLUSTER_1
svd,"sklearn.decomposition.TruncatedSVD(n_components=300,n_iter=7,random_state=42)",CLUSTER_5,CLUSTER_1
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_11
ax,"matplotlib.pyplot.subplot(num_images//2,2,images_so_far)",CLUSTER_6,CLUSTER_11
since,time.time(),CLUSTER_6,CLUSTER_11
time_elapsed,time.time(),CLUSTER_6,CLUSTER_11
new_thrust,"random.gauss(450.,25.)",CLUSTER_3,CLUSTER_3
init_pose,"numpy.array([0.,0.,10.,0.,0.,0.])",CLUSTER_3,CLUSTER_3
init_velocities,"numpy.array([0.,0.,0.])",CLUSTER_3,CLUSTER_3
init_angle_velocities,"numpy.array([0.,0.,0.])",CLUSTER_3,CLUSTER_3
target_pos,"numpy.array([0.,0.,10.])",CLUSTER_3,CLUSTER_3
init_pos,"numpy.array([0.,0.,0.,0.,0.,0.])",CLUSTER_3,CLUSTER_3
target_pos,"numpy.array([0.,0.,100.])",CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_3,CLUSTER_3
DF,"pandas.read_csv(FILE,index_col=False)",CLUSTER_3,CLUSTER_3
DF,"pandas.read_csv(FILE,index_col=False)",CLUSTER_3,CLUSTER_3
fig,"pandas.DataFrame(data,index=[0])",CLUSTER_0,CLUSTER_0
list_length_train,pandas.Series(list_length_train),CLUSTER_0,CLUSTER_0
list_length_valid,pandas.Series(list_length_valid),CLUSTER_0,CLUSTER_0
list_length_test,pandas.Series(list_length_test),CLUSTER_0,CLUSTER_0
data_csv,pandas.read_csv('G:/my_code/python/mathematical_expression_recognition/Mathematical_Expression_Recognition_train/train.csv'),CLUSTER_0,CLUSTER_0
"X_data,X_valid,y_data,y_valid","sklearn.model_selection.train_test_split(img_dirpath,label,test_size=10000,random_state=17)",CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_data,y_data,test_size=10000,random_state=17)",CLUSTER_0,CLUSTER_0
self.imgs,"numpy.zeros((self.n,self.img_h,self.img_w)",CLUSTER_0,CLUSTER_0
label_length,"numpy.zeros((self.batch_size,1)",CLUSTER_0,CLUSTER_0
label_length,"numpy.zeros((batch_size,1)",CLUSTER_0,CLUSTER_0
Y_data,"numpy.empty([self.batch_size,self.max_text_len])",CLUSTER_0,CLUSTER_0
Y_data,"numpy.empty([batch_size,max_text_len])",CLUSTER_0,CLUSTER_0
X_data,"numpy.ones([self.batch_size,self.img_w,self.img_h,1])",CLUSTER_0,CLUSTER_0
input_length,"numpy.ones((self.batch_size,1)",CLUSTER_0,CLUSTER_0
X_data,"numpy.ones([batch_size,img_w,img_h,1])",CLUSTER_0,CLUSTER_0
input_length,"numpy.ones((batch_size,1)",CLUSTER_0,CLUSTER_0
img,"numpy.expand_dims(img,-1)",CLUSTER_0,CLUSTER_0
img_pred,"numpy.expand_dims(img_pred,axis=-1)",CLUSTER_0,CLUSTER_0
img_pred,"numpy.expand_dims(img_pred,axis=0)",CLUSTER_0,CLUSTER_0
img,"numpy.expand_dims(img,-1)",CLUSTER_0,CLUSTER_0
img,"numpy.expand_dims(img,axis=0)",CLUSTER_0,CLUSTER_0
img_pred,"numpy.expand_dims(img_pred,axis=-1)",CLUSTER_0,CLUSTER_0
img_pred,"numpy.expand_dims(img_pred,axis=0)",CLUSTER_0,CLUSTER_0
sum_character_train,collections.defaultdict(int),CLUSTER_0,CLUSTER_0
sum_character_valid,collections.defaultdict(int),CLUSTER_0,CLUSTER_0
sum_character_test,collections.defaultdict(int),CLUSTER_0,CLUSTER_0
seq+,random.choice(digits),CLUSTER_0,CLUSTER_0
seq+,random.choice(operators),CLUSTER_0,CLUSTER_0
seq+,random.choice(digits),CLUSTER_0,CLUSTER_0
seq+,random.choice(operators),CLUSTER_0,CLUSTER_0
seq+,random.choice(digits),CLUSTER_0,CLUSTER_0
k,"random.randint(0,2)",CLUSTER_0,CLUSTER_0
x_new,"numpy.linspace(0,3,1000)",CLUSTER_5,CLUSTER_5
log_reg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_5
m,pandas.DataFrame(new_random),CLUSTER_7,CLUSTER_5
X_Cluster_centroid,pandas.DataFrame(X_cc),CLUSTER_7,CLUSTER_5
y_,pandas.DataFrame(y_smoke_resample_train),CLUSTER_7,CLUSTER_5
resamp,pandas.concat([pd.DataFrame(X_smoke_resample_train),CLUSTER_7,CLUSTER_5
data,"pandas.read_csv(""train_2v.csv"")",CLUSTER_7,CLUSTER_5
param_range,"numpy.arange(1,41,2)",CLUSTER_7,CLUSTER_5
param_range,"numpy.arange(1,41,2)",CLUSTER_7,CLUSTER_5
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
"values,indices","numpy.histogram(d.bmi,bins=25)",CLUSTER_7,CLUSTER_5
"X_train_No_smoke,X_test_No_smoke,y_train_No_smoke,y_test_No_smoke","sklearn.model_selection.train_test_split(X_No_smoke,y_No_smoke,test_size=0.1,random_state=1)",CLUSTER_7,CLUSTER_5
"X_train_smoke,X_test_smoke,y_train_smoke,y_test_smoke","sklearn.model_selection.train_test_split(X_smoke,y_smoke,test_size=0.1,random_state=1)",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(12,12)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
model_smoke_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_No_smoke_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_smoke_tree_Undersampling,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_smoke_tree_Resampling,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_smoke_tree_Resampling_2,"sklearn.tree.DecisionTreeClassifier(max_depth=7,criterion=""gini"")",CLUSTER_7,CLUSTER_5
model_No_smoke_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_No_smoke_tree_Undersampling,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_No_smoke_tree_Resampling,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_No_smoke_tree_Resampling_2,"sklearn.tree.DecisionTreeClassifier(max_depth=7,criterion=""gini"")",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_smoke)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_No_smoke)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_smoke_Undersampling)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_smoke_boost_Undersampling)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_smoke_Resampling)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_svm_smoke)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_svm_smoke_2)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_smoke,y_pred_smoke_Resampling_2)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_No_smoke)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_No_smoke_Undersampling)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_No_smoke_Resampling)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_svm_No_smoke)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_No_smoke_Resampling_2)",CLUSTER_7,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test_No_smoke,y_pred_svm_No_smoke_2)",CLUSTER_7,CLUSTER_5
conf_mat_smoke_tree,"sklearn.metrics.confusion_matrix(y_true=y_test_smoke,y_pred=y_pred_smoke)",CLUSTER_7,CLUSTER_5
conf_mat_No_smoke_tree,"sklearn.metrics.confusion_matrix(y_true=y_test_No_smoke,y_pred=y_pred_No_smoke)",CLUSTER_7,CLUSTER_5
conf_mat_smoke_tree_Undersampling,"sklearn.metrics.confusion_matrix(y_true=y_test_smoke,y_pred=y_pred_smoke_Undersampling)",CLUSTER_7,CLUSTER_5
conf_mat_smoke_boost_Undersampling,"sklearn.metrics.confusion_matrix(y_true=y_test_smoke,y_pred=y_pred_smoke_boost_Undersampling)",CLUSTER_7,CLUSTER_5
conf_mat_smoke_tree_Resampling,"sklearn.metrics.confusion_matrix(y_true=y_test_smoke,y_pred=y_pred_smoke_Resampling)",CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=10),CLUSTER_5,CLUSTER_5
pddata,pandas.DataFrame(data=X_train_pca),CLUSTER_5,CLUSTER_5
pddata,pandas.DataFrame(data=new_data),CLUSTER_5,CLUSTER_5
ticks,"numpy.arange(0,10,1)",CLUSTER_5,CLUSTER_5
ticks,"numpy.arange(0,10,1)",CLUSTER_5,CLUSTER_5
X_train,sklearn.preprocessing.scale(X_train),CLUSTER_5,CLUSTER_5
X_test,sklearn.preprocessing.scale(X_test),CLUSTER_5,CLUSTER_5
X_deploy,sklearn.preprocessing.scale(X_deploy),CLUSTER_5,CLUSTER_5
fs,sklearn.feature_selection.SelectKBest(k=10),CLUSTER_5,CLUSTER_5
clf_neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
clf_svm_linear,sklearn.svm.LinearSVC(C=20.0),CLUSTER_5,CLUSTER_5
clf_svm,"sklearn.svm.SVC(C=5.0,kernel='rbf')",CLUSTER_5,CLUSTER_5
clf_dt,sklearn.tree.DecisionTreeClassifier(min_samples_split=2),CLUSTER_5,CLUSTER_5
clf_dt_IG,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',min_samples_split=2)",CLUSTER_5,CLUSTER_5
clf_dt_BGKN,sklearn.ensemble.BaggingClassifier(KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
clf_dt_BGDT,"sklearn.ensemble.BaggingClassifier(DecisionTreeClassifier(criterion='entropy',min_samples_split=2)",CLUSTER_5,CLUSTER_5
clf_dt_RF,sklearn.ensemble.RandomForestClassifier(),CLUSTER_5,CLUSTER_5
clf_dt_AD,sklearn.ensemble.AdaBoostClassifier(),CLUSTER_5,CLUSTER_5
clf_NB,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_5
clf_dt_LDA,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(),CLUSTER_5,CLUSTER_5
clf_dt_QDA,sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis(),CLUSTER_5,CLUSTER_5
data,requests.get(page_URL),CLUSTER_9,CLUSTER_2
data,requests.get(URL_temp),CLUSTER_9,CLUSTER_2
regex,re.compile('[^a-zA-Z]'),CLUSTER_9,CLUSTER_2
df,"pandas.DataFrame({'Nomi':[elemento[0]forelementoincomplete_list],
'Genere':[elemento[1]forelementoincomplete_list],
'Recensioni':[elemento[2]forelementoincomplete_list],
'Voti':[elemento[3]forelementoincomplete_list],
'Scrittada':[elemento[4]forelementoincomplete_list]})",CLUSTER_9,CLUSTER_2
writer,"pandas.ExcelWriter('RISTORANTE_18.xlsx',engine='xlsxwriter')",CLUSTER_9,CLUSTER_2
partial_dataframe,"pandas.read_excel(""RISTORANTE_18.xlsx"")",CLUSTER_9,CLUSTER_2
n_cluster,"numpy.arange(10,20)",CLUSTER_5,CLUSTER_8
ind,numpy.arange(nb_examples),CLUSTER_5,CLUSTER_8
y,"numpy.arange(0,len(scores['mean'])",CLUSTER_5,CLUSTER_8
sil,numpy.array(silhouette_score_list),CLUSTER_5,CLUSTER_8
score,numpy.array(x),CLUSTER_5,CLUSTER_8
mean[i],numpy.mean(scores[i]),CLUSTER_5,CLUSTER_8
img,"numpy.reshape(images,(len(images)",CLUSTER_5,CLUSTER_8
std[i],numpy.std(scores[i]),CLUSTER_5,CLUSTER_8
d,"numpy.log(dist[:,k-1:k]/dist[:,0:k-1])",CLUSTER_5,CLUSTER_8
"points,labels",numpy.loadtxt('data/clustering.txt'),CLUSTER_5,CLUSTER_8
clf,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=0)",CLUSTER_5,CLUSTER_8
X,sklearn.datasets.fetch_20newsgroups_vectorized(),CLUSTER_5,CLUSTER_8
X,pandas.DataFrame(X),CLUSTER_5,CLUSTER_8
temp,"pandas.DataFrame({
""dim.reductionmethod"":list(methods.keys()",CLUSTER_5,CLUSTER_8
neighb,sklearn.neighbors.NearestNeighbors(n_neighbors=k+1),CLUSTER_5,CLUSTER_8
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_8
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_8
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_8
data,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_8
data,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_8
dataa,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_8
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_8
pca1,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_8
pca,sklearn.decomposition.PCA(item),CLUSTER_5,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_5,CLUSTER_8
pca,"sklearn.decomposition.PCA(n_components=60,random_state=0)",CLUSTER_5,CLUSTER_8
iso,"sklearn.manifold.Isomap(n_neighbors=5,n_components=3,eigen_solver='dense')",CLUSTER_5,CLUSTER_8
ica,sklearn.decomposition.FastICA(n_components=3),CLUSTER_5,CLUSTER_8
rkf,"sklearn.model_selection.RepeatedKFold(n_splits=5,n_repeats=3,random_state=0)",CLUSTER_5,CLUSTER_8
logreg,"sklearn.linear_model.LogisticRegression(solver='lbfgs',multi_class='multinomial')",CLUSTER_5,CLUSTER_8
"t1,val1","scipy.stats.ttest_ind(scores[0],scores[1])",CLUSTER_5,CLUSTER_8
"t2,val2","scipy.stats.ttest_ind(scores[2],scores[0])",CLUSTER_5,CLUSTER_8
clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=4,weights='distance',n_jobs=-1)",CLUSTER_5,CLUSTER_8
app_train,pandas.read_csv(f_app),CLUSTER_7,CLUSTER_8
k2,pandas.DataFrame(k2),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_5,CLUSTER_5
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=4),CLUSTER_5,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test,y_predicted)",CLUSTER_5,CLUSTER_5
f1,"sklearn.metrics.f1_score(y_test,y_predicted,average='weighted')",CLUSTER_5,CLUSTER_5
precision,"sklearn.metrics.precision_score(y_test,y_predicted,average='weighted')",CLUSTER_5,CLUSTER_5
recall,"sklearn.metrics.recall_score(y_test,y_predicted,average='weighted')",CLUSTER_5,CLUSTER_5
partial_train_data,"numpy.concatenate(
[train_data[:i*num_val_samples],
train_data[(i+1)",CLUSTER_2,CLUSTER_7
partial_train_targets,"numpy.concatenate(
[train_targets[:i*num_val_samples],
train_targets[(i+1)",CLUSTER_2,CLUSTER_7
partial_train_data,"numpy.concatenate(
[train_data[:i*num_val_samples],
train_data[(i+1)",CLUSTER_2,CLUSTER_7
partial_train_targets,"numpy.concatenate(
[train_targets[:i*num_val_samples],
train_targets[(i+1)",CLUSTER_2,CLUSTER_7
rf,numpy.array(Rf),CLUSTER_4,CLUSTER_11
ar,numpy.array(ar),CLUSTER_4,CLUSTER_11
br,numpy.array(br),CLUSTER_4,CLUSTER_11
relevance_train,"pandas.read_csv('relevance_train.csv',sep='\t')",CLUSTER_4,CLUSTER_11
relevance_test,pandas.read_csv('relevance_test.csv'),CLUSTER_4,CLUSTER_11
queries,"pandas.read_csv('queries.csv',index_col=""QueryId"")",CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
wwd,collections.defaultdict(lambda:0),CLUSTER_4,CLUSTER_11
wwq,collections.defaultdict(lambda:0),CLUSTER_4,CLUSTER_11
df_compart_bikes,pandas.read_csv('comp_bikes_mod.csv'),CLUSTER_7,CLUSTER_5
df_compart_bikes['dteday'],pandas.to_datetime(df_compart_bikes.dteday),CLUSTER_7,CLUSTER_5
reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
R_2,"sklearn.metrics.r2_score(saida_regressao,previsao)",CLUSTER_7,CLUSTER_5
R_2,"sklearn.metrics.r2_score(saida_regressao,previsao_arvore)",CLUSTER_7,CLUSTER_5
arvore_regressora,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(arvore_regressora,out_file=None)",CLUSTER_7,CLUSTER_5
b,"pandas.pivot(a,index='ROOM',columns='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot(a,index='ROOM',columns='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index='ROOM',columns='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index='ROOM',columns='MONTH',values='RENT',
aggfunc=np.mean)",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index='ROOM',columns='MONTH',values='RENT',
aggfunc=np.sum)",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index='ROOM',columns='MONTH',values='RENT',
aggfunc=np.sum,
margins=True,margins_name='TOTAL')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,index=['ROOM','NAME'],columns='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
b,"pandas.pivot_table(a,columns=['ROOM','NAME'],index='MONTH',values='RENT')",CLUSTER_8,CLUSTER_3
a,pandas.read_excel('house_rent_no_duplicate.xlsx'),CLUSTER_8,CLUSTER_3
a,pandas.read_excel('house_rent_duplicate.xlsx'),CLUSTER_8,CLUSTER_3
merged,"pandas.merge(df_f,df1_f,on=[""SQ_CANDIDATO"",'SG_PARTIDO',""NM_CANDIDATO""])",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv('Votos_Somados.csv',decimal=',')",CLUSTER_8,CLUSTER_4
df1,"pandas.read_csv('Despesas_Consolidadas.csv',decimal=',')",CLUSTER_8,CLUSTER_4
rmse,numpy.sqrt(np.mean(scores),CLUSTER_3,CLUSTER_6
X,numpy.load('data/X_white.npy'),CLUSTER_3,CLUSTER_6
y,numpy.load('data/y_white.npy'),CLUSTER_3,CLUSTER_6
end,time.perf_counter(),CLUSTER_3,CLUSTER_6
start,time.perf_counter(),CLUSTER_3,CLUSTER_6
start,time.perf_counter(),CLUSTER_3,CLUSTER_6
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,random_state=0)",CLUSTER_3,CLUSTER_6
rfr,"sklearn.ensemble.RandomForestRegressor(random_state=0,n_estimators=10)",CLUSTER_3,CLUSTER_6
rfr,"sklearn.ensemble.RandomForestRegressor(**bp,random_state=0)",CLUSTER_3,CLUSTER_6
grid,"sklearn.model_selection.GridSearchCV(rfr,params,cv=5,n_jobs=-1,
verbose=1)",CLUSTER_3,CLUSTER_6
dd1,"pandas.DataFrame(sd1.values,columns=['Activity','Start','End','Duration'])",CLUSTER_4,CLUSTER_11
dd2,"pandas.DataFrame(sd2.values,columns=['Activity','Start','End','Duration'])",CLUSTER_4,CLUSTER_11
data,"pandas.read_csv(fpath,sep=',',names=cols,skiprows=0)",CLUSTER_4,CLUSTER_11
augmented,json.load(fopen),CLUSTER_0,CLUSTER_7
name_to_variable,collections.OrderedDict(),CLUSTER_0,CLUSTER_7
assignment_map,collections.OrderedDict(),CLUSTER_0,CLUSTER_7
m,re.match('^(.*),CLUSTER_0,CLUSTER_7
string,re.sub('[^A-Za-z0-9\-\/(),CLUSTER_0,CLUSTER_7
string,"re.sub(r'[]+','',string)",CLUSTER_0,CLUSTER_7
vw_pred,numpy.loadtxt('vw_valid_10mln_pred1.csv'),CLUSTER_7,CLUSTER_8
test_labels,"numpy.loadtxt(os.path.join(PATH_TO_DATA,
'stackoverflow_10mln_test_labels.txt')",CLUSTER_7,CLUSTER_8
one_hot_example,pandas.DataFrame([{i:0foriinrange(10),CLUSTER_7,CLUSTER_8
encoded_categorical_columns,pandas.DataFrame(onehot_encoder.fit_transform(df[categorical_columns]),CLUSTER_7,CLUSTER_8
hashing_example,pandas.DataFrame([{i:0.0foriinrange(hash_space),CLUSTER_7,CLUSTER_8
mapped_education,pandas.Series(label_encoder.fit_transform(df['education']),CLUSTER_7,CLUSTER_8
data_demo,pandas.read_csv('../../data/weights_heights.csv'),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('../../data/bank_train.csv'),CLUSTER_7,CLUSTER_8
labels,"pandas.read_csv('../../data/bank_train_target.csv',header=None)",CLUSTER_7,CLUSTER_8
logit,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
auc,"sklearn.metrics.roc_auc_score(test_labels,test_prediction)",CLUSTER_7,CLUSTER_8
roc_curve,"sklearn.metrics.roc_curve(test_labels,test_prediction)",CLUSTER_7,CLUSTER_8
M,"sklearn.metrics.confusion_matrix(test_labels_mult,test_prediction_mult)",CLUSTER_7,CLUSTER_8
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
topic_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_7,CLUSTER_8
newsgroups,sklearn.datasets.fetch_20newsgroups('../../data/news_data'),CLUSTER_7,CLUSTER_8
reviews_train,"sklearn.datasets.load_files(os.path.join(path_to_movies,'train')",CLUSTER_7,CLUSTER_8
reviews_test,"sklearn.datasets.load_files(os.path.join(path_to_movies,'test')",CLUSTER_7,CLUSTER_8
ycols,pandas.DataFrame(),CLUSTER_5,CLUSTER_1
df,"pandas.read_csv(""https://docs.google.com/spreadsheets/d/1pmBtSw7v_tU_dIX1-4E8_Q7wC43fDs6LGDQzN49-ffk/export?format=csv"")",CLUSTER_5,CLUSTER_1
yarr,numpy.array(y),CLUSTER_5,CLUSTER_1
ycols['pitchType'],numpy.unique(dfnum['pitchType']),CLUSTER_5,CLUSTER_1
pca,sklearn.decomposition.PCA(n_components=8),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
r,random.random(),CLUSTER_5,CLUSTER_1
b,random.random(),CLUSTER_5,CLUSTER_1
g,random.random(),CLUSTER_5,CLUSTER_1
content,requests.get(URL+FILENAME),CLUSTER_6,CLUSTER_10
val_loss,"numpy.sum(np.multiply(losses,nums)",CLUSTER_6,CLUSTER_10
canvas,"numpy.empty((28*n,28*n)",CLUSTER_2,CLUSTER_7
x_axis,"numpy.linspace(-1,1,n)",CLUSTER_2,CLUSTER_7
y_axis,"numpy.linspace(-1,1,n)",CLUSTER_2,CLUSTER_7
results_list,os.listdir('/headless/ray_results/'+exp_name),CLUSTER_4,CLUSTER_11
x,numpy.arange(int(env.env_params.horizon),CLUSTER_4,CLUSTER_11
y,"numpy.arange(0,int(left_length)",CLUSTER_4,CLUSTER_11
vel_map_,numpy.zeros(int(left_length),CLUSTER_4,CLUSTER_11
v,numpy.mean(env.k.vehicle.get_speed(env.k.vehicle.get_ids(),CLUSTER_4,CLUSTER_11
vel_mean,"numpy.mean(vel_list,axis=0)",CLUSTER_4,CLUSTER_11
outflow_mean,"numpy.mean(outflow_list,axis=0)",CLUSTER_4,CLUSTER_11
vel_map_list,"numpy.vstack((vel_map_list,vel_map_)",CLUSTER_4,CLUSTER_11
"xx,yy","numpy.meshgrid(x,y)",CLUSTER_4,CLUSTER_11
vel_mean,numpy.load(data_path+'ppo_trained_'+str(num_trials),CLUSTER_4,CLUSTER_11
outflow_mean,numpy.load(data_path+'ppo_trained_'+str(num_trials),CLUSTER_4,CLUSTER_11
vel_map_mean,numpy.load(data_path+'ppo_trained_'+str(num_trials),CLUSTER_4,CLUSTER_11
human_vel_mean,numpy.load(data_path+'human_'+str(num_trials),CLUSTER_4,CLUSTER_11
human_outflow_mean,numpy.load(data_path+'human_'+str(num_trials),CLUSTER_4,CLUSTER_11
human_vel_map_mean,numpy.load(data_path+'human_'+str(num_trials),CLUSTER_4,CLUSTER_11
vel_map_mean,"numpy.nanmean(vel_map_lists,axis=0)",CLUSTER_4,CLUSTER_11
"vel_fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1)",CLUSTER_4,CLUSTER_11
"outflow_fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1)",CLUSTER_4,CLUSTER_11
"space_fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=1,figsize=(10,10)",CLUSTER_4,CLUSTER_11
df,pandas.DataFrame({'A':np.random.randn(365),CLUSTER_7,CLUSTER_3
v1,"pandas.Series(np.random.normal(0,10,1000)",CLUSTER_7,CLUSTER_3
v2,"pandas.Series(2*v1+np.random.normal(60,15,1000)",CLUSTER_7,CLUSTER_3
index,"pandas.date_range('1/1/2017',periods=365)",CLUSTER_7,CLUSTER_3
iris,pandas.read_csv('iris.csv'),CLUSTER_7,CLUSTER_3
iris,pandas.read_csv('iris.csv'),CLUSTER_7,CLUSTER_3
"plt.hist(v1,alpha","0.7,bins=numpy.arange(-50,150,5)",CLUSTER_7,CLUSTER_3
"plt.hist(v2,alpha","0.7,bins=numpy.arange(-50,150,5)",CLUSTER_7,CLUSTER_3
v3,"numpy.concatenate((v1,v2)",CLUSTER_7,CLUSTER_3
grid,"seaborn.jointplot(v1,v2,alpha=0.4)",CLUSTER_7,CLUSTER_3
current_time,"time.strftime(""%Y-%m-%d%H:%M:%S"",time.gmtime()",CLUSTER_8,CLUSTER_12
past,time.time(),CLUSTER_8,CLUSTER_12
present,time.time(),CLUSTER_8,CLUSTER_12
writer,"pandas.ExcelWriter('/'.join([PATH,new_file_name_regexp+'.xlsx'])",CLUSTER_8,CLUSTER_12
x,numpy.asarray(x),CLUSTER_2,CLUSTER_7
y_target,"numpy.zeros((1,2)",CLUSTER_2,CLUSTER_7
ifnp.argmax(y_target),=numpy.argmax(output_),CLUSTER_2,CLUSTER_7
truth,"numpy.concatenate(truth,axis=0)",CLUSTER_0,CLUSTER_5
svm_prediction,"numpy.concatenate(svm_prediction,axis=0)",CLUSTER_0,CLUSTER_5
truth,"numpy.concatenate(truth,axis=0)",CLUSTER_0,CLUSTER_5
svm_prediction,"numpy.concatenate(svm_prediction,axis=0)",CLUSTER_0,CLUSTER_5
truth,"numpy.concatenate(truth,axis=0)",CLUSTER_0,CLUSTER_5
svm_prediction,"numpy.concatenate(svm_prediction,axis=0)",CLUSTER_0,CLUSTER_5
test_results,numpy.sum(svm_prediction==truth),CLUSTER_0,CLUSTER_5
train_results,numpy.sum(Y_hat==Y),CLUSTER_0,CLUSTER_5
test_results,numpy.sum(svm_prediction==truth),CLUSTER_0,CLUSTER_5
train_results,numpy.sum(Y_hat==Y),CLUSTER_0,CLUSTER_5
test_results,numpy.sum(svm_prediction==truth),CLUSTER_0,CLUSTER_5
train_results,numpy.sum(Y_hat==Y),CLUSTER_0,CLUSTER_5
results,"pandas.DataFrame(columns=('name','accuracy')",CLUSTER_0,CLUSTER_5
results,"pandas.DataFrame(columns=('name','accuracy')",CLUSTER_0,CLUSTER_5
results,"pandas.DataFrame(columns=('name','accuracy')",CLUSTER_0,CLUSTER_5
svm_ct,"pandas.crosstab(best[1],best[0],margins=True)",CLUSTER_0,CLUSTER_5
svm,"sklearn.svm.SVC(C=C[c],kernel='linear')",CLUSTER_0,CLUSTER_5
svm,"sklearn.svm.SVC(C=C[c],kernel='poly',degree=degree[d],coef0=coef[r],gamma='auto')",CLUSTER_0,CLUSTER_5
svm,"sklearn.svm.SVC(C=C[c],kernel='rbf',gamma=gamma[g])",CLUSTER_0,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True)",CLUSTER_0,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True)",CLUSTER_0,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True)",CLUSTER_0,CLUSTER_5
"svm_fpr,svm_tpr,svm_thresholds","sklearn.metrics.roc_curve(best[0],best[1],pos_label=1)",CLUSTER_0,CLUSTER_5
roc_auc,"sklearn.metrics.auc(svm_fpr,svm_tpr)",CLUSTER_0,CLUSTER_5
axis,matplotlib.pyplot.gca(),CLUSTER_0,CLUSTER_5
trainAcc,"matplotlib.pyplot.plot(C,tracc,label=name+'-TrainingError',ls='dashed',linewidth=2)",CLUSTER_0,CLUSTER_5
testACC,"matplotlib.pyplot.plot(C,tstacc,label=name+'-TestingError',color=color,linewidth=2)",CLUSTER_0,CLUSTER_5
churn_df,"pandas.read_csv(""ChurnData.csv"")",CLUSTER_5,CLUSTER_9
tick_marks,numpy.arange(len(classes),CLUSTER_5,CLUSTER_9
X,"numpy.asarray(churn_df[['tenure','age','address','income','ed','employ','equip']])",CLUSTER_5,CLUSTER_9
y,numpy.asarray(churn_df['churn']),CLUSTER_5,CLUSTER_9
X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=4)",CLUSTER_5,CLUSTER_9
LR,"sklearn.linear_model.LogisticRegression(C=0.01,solver='liblinear')",CLUSTER_5,CLUSTER_9
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,yhat,labels=[1,0])",CLUSTER_5,CLUSTER_9
"x[...,0]","numpy.dot(x[...,:3],[0.299,0.587,0.114])",CLUSTER_5,CLUSTER_7
x,"numpy.delete(x,[1,2],3)",CLUSTER_5,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_7
index,"random.randint(0,len(X_train)",CLUSTER_5,CLUSTER_7
index,"random.randint(0,len(X_predict)",CLUSTER_5,CLUSTER_7
cnt,collections.Counter(list),CLUSTER_10,CLUSTER_4
cnt,"collections.Counter({1:3,2:4})",CLUSTER_10,CLUSTER_4
cnt,collections.Counter(list),CLUSTER_10,CLUSTER_4
cnt,"collections.Counter({1:3,2:4})",CLUSTER_10,CLUSTER_4
cnt,collections.Counter(list),CLUSTER_10,CLUSTER_4
favs,"collections.Counter(nameforname,colourincolours)",CLUSTER_10,CLUSTER_4
c,collections.Counter('Amazingtutorial!'),CLUSTER_10,CLUSTER_4
nums,collections.defaultdict(int),CLUSTER_10,CLUSTER_4
count,collections.defaultdict(int),CLUSTER_10,CLUSTER_4
od,collections.OrderedDict(),CLUSTER_10,CLUSTER_4
od,collections.OrderedDict(cnt.most_common(),CLUSTER_10,CLUSTER_4
colours,"collections.OrderedDict([(""Red"",198)",CLUSTER_10,CLUSTER_4
deq,collections.deque(list),CLUSTER_10,CLUSTER_4
deq,collections.deque(list),CLUSTER_10,CLUSTER_4
deq,collections.deque(list),CLUSTER_10,CLUSTER_4
d,collections.deque(),CLUSTER_10,CLUSTER_4
d,collections.deque(range(5),CLUSTER_10,CLUSTER_4
d,"collections.deque([0,1,2,3,5],maxlen=5)",CLUSTER_10,CLUSTER_4
d,"collections.deque([1,2,3,4,5])",CLUSTER_10,CLUSTER_4
Student,"collections.namedtuple('Student','fname,lname,age')",CLUSTER_10,CLUSTER_4
Animal,"collections.namedtuple(""Animals"",'nameagetype')",CLUSTER_10,CLUSTER_4
Animal,"collections.namedtuple('Animal','nameagetype')",CLUSTER_10,CLUSTER_4
Animal,"collections.namedtuple('Animal','nameagetype')",CLUSTER_10,CLUSTER_4
Animal,"collections.namedtuple('Animal','nameagetype')",CLUSTER_10,CLUSTER_4
chain_map,"collections.ChainMap(dict1,dict2)",CLUSTER_10,CLUSTER_4
chain_map,"collections.ChainMap(dict1,dict2)",CLUSTER_10,CLUSTER_4
df1['salesafterfirstdiff.'],numpy.log(df1['sales']),CLUSTER_5,CLUSTER_5
df1['salesafterseconddiff.'],numpy.log(df1['salesafterfirstdiff.']),CLUSTER_5,CLUSTER_5
df2['salesafterfirstdiff.'],numpy.log(df2['sales']),CLUSTER_5,CLUSTER_5
df2['salesafterseconddiff.'],numpy.log(df2['salesafterfirstdiff.']),CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""Amberville.csv"")",CLUSTER_5,CLUSTER_5
df1,"pandas.read_csv(""wood.csv"")",CLUSTER_5,CLUSTER_5
df2,"pandas.read_csv(""Mudramark.csv"")",CLUSTER_5,CLUSTER_5
df['week'],pandas.to_datetime(df['week']),CLUSTER_5,CLUSTER_5
df1['week'],pandas.to_datetime(df1['week']),CLUSTER_5,CLUSTER_5
df2['week'],pandas.to_datetime(df2['week']),CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(actual,farima)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(actual,farima)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(actual,farima)",CLUSTER_5,CLUSTER_5
mae,"sklearn.metrics.mean_absolute_error(actual,farima)",CLUSTER_5,CLUSTER_5
mae,"sklearn.metrics.mean_absolute_error(actual,farima)",CLUSTER_5,CLUSTER_5
mae,"sklearn.metrics.mean_absolute_error(actual,farima)",CLUSTER_5,CLUSTER_5
df,pandas.read_csv('911.csv'),CLUSTER_7,CLUSTER_3
df['timeStamp'],pandas.to_datetime(df['timeStamp']),CLUSTER_7,CLUSTER_3
"y_train,y_test)","sklearn.model_selection.train_test_split(X,y,
test_size=0.25,
random_state=1)",CLUSTER_5,CLUSTER_1
reg_2,sklearn.ensemble.RandomForestRegressor(random_state=1),CLUSTER_5,CLUSTER_1
reg_1,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
data,"pandas.read_csv(""diamonds.txt"",delimiter=""\t"")",CLUSTER_5,CLUSTER_1
city_data,"pandas.read_csv(""../output_data/cities.csv"")",CLUSTER_9,CLUSTER_2
response,requests.get(search_url),CLUSTER_9,CLUSTER_2
dataframe,"pandas.read_csv(name_f,sep=',',usecols=[1],engine='python',skipfooter=3)",CLUSTER_7,CLUSTER_9
tick_marks,numpy.arange(len(states),CLUSTER_7,CLUSTER_9
n_states,"numpy.arange(1,50)",CLUSTER_7,CLUSTER_9
r,"scipy.stats.norm(markov_model.means_[i],np.sqrt(markov_model.covars_[i,0])",CLUSTER_7,CLUSTER_9
X_output,"scipy.stats.norm(markov_model.means_[X_state],np.sqrt(markov_model.covars_[X_state][:,0])",CLUSTER_7,CLUSTER_9
data,"numpy.pad(data,padding,mode='constant',constant_values=1)",CLUSTER_4,CLUSTER_11
labels,"numpy.loadtxt(labels_file,str,delimiter='\t')",CLUSTER_4,CLUSTER_11
mu,numpy.load(caffe_root+'python/caffe/imagenet/ilsvrc_2012_mean.npy'),CLUSTER_4,CLUSTER_11
_,"matplotlib.pyplot.hist(feat.flat[feat.flat>0],bins=100)",CLUSTER_4,CLUSTER_11
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
sss,sklearn.linear_model.Perceptron(),CLUSTER_5,CLUSTER_10
classifier,sklearn.svm.SVC(),CLUSTER_5,CLUSTER_10
df,"pandas.read_csv('the-counted-2015.csv',encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
sbj_monthly_feats,"pandas.DataFrame(deathdates[['artistname','deathmonth']])",CLUSTER_11,CLUSTER_12
res,pandas.DataFrame(),CLUSTER_11,CLUSTER_12
ctrl_features,"pandas.DataFrame(ctrl_list,columns=['ctrl_name'])",CLUSTER_11,CLUSTER_12
res,pandas.concat([ctrl_features.reset_index(),CLUSTER_11,CLUSTER_12
sbj_reviews,pandas.read_csv(f_sbj_reviews),CLUSTER_11,CLUSTER_12
ctl_reviews,pandas.read_csv(f_ctl_reviews),CLUSTER_11,CLUSTER_12
sbj_reviews['reviewTime'],pandas.to_datetime(sbj_reviews['strReviewTime']),CLUSTER_11,CLUSTER_12
sbj_reviews['deathdate'],pandas.to_datetime(sbj_reviews['deathdate']),CLUSTER_11,CLUSTER_12
ctl_reviews['reviewTime'],pandas.to_datetime(ctl_reviews['strReviewTime']),CLUSTER_11,CLUSTER_12
diff,numpy.linalg.norm(np.array(feature),CLUSTER_11,CLUSTER_12
fig,"matplotlib.pyplot.figure(figsize=(30,10)",CLUSTER_6,CLUSTER_11
ax,"matplotlib.pyplot.subplot(1,batch_size,i+1)",CLUSTER_6,CLUSTER_11
img,numpy.squeeze(images[idx]),CLUSTER_6,CLUSTER_11
image,"numpy.transpose(image,(1,2,0)",CLUSTER_6,CLUSTER_11
x,"numpy.array([
[0,1,0.5,10],
[2,2.5,1,-8],
[4,0,5,6],
[15,1,2,3]],dtype=np.float32)",CLUSTER_2,CLUSTER_7
avg_temperature,"numpy.mean(data,axis=0)",CLUSTER_1,CLUSTER_10
data,"numpy.loadtxt(fname='data/weather-01.csv',delimiter=',')",CLUSTER_1,CLUSTER_10
image,matplotlib.pyplot.imshow(data),CLUSTER_1,CLUSTER_10
min_plot,matplotlib.pyplot.plot(min_temperature),CLUSTER_1,CLUSTER_10
max_plot,matplotlib.pyplot.plot(max_temperature),CLUSTER_1,CLUSTER_10
blank,"numpy.zeros((1,1)",CLUSTER_3,CLUSTER_6
blank,"numpy.zeros((1,1)",CLUSTER_3,CLUSTER_6
df_metrics,"pandas.DataFrame(columns=['ARI_Louvain','ARI_kmeans','ARI_HC',
'AMI_Louvain','AMI_kmeans','AMI_HC',
'Homogeneity_Louvain','Homogeneity_kmeans','Homogeneity_HC'])",CLUSTER_5,CLUSTER_1
adata.obs['kmeans'],"pandas.Series(kmeans.labels_,index=adata.obs.index)",CLUSTER_5,CLUSTER_1
adata.obs['hc'],"pandas.Series(hc.labels_,index=adata.obs.index)",CLUSTER_5,CLUSTER_1
metadata,"pandas.read_csv('./input/metadata.tsv',sep='\t',index_col=0)",CLUSTER_5,CLUSTER_1
kmeans,"sklearn.cluster.KMeans(n_clusters=num_clusters,random_state=2019)",CLUSTER_5,CLUSTER_1
hc,sklearn.cluster.AgglomerativeClustering(n_clusters=num_clusters),CLUSTER_5,CLUSTER_1
gross['release_year'],pandas.DatetimeIndex(gross['release_date']),CLUSTER_7,CLUSTER_1
genre_dummies,"pandas.get_dummies(gross['genre'],drop_first=True)",CLUSTER_7,CLUSTER_1
bs_dummies,pandas.get_dummies(bs_genre),CLUSTER_7,CLUSTER_1
gross,"pandas.read_csv('datasets/disney_movies_total_gross.csv',parse_dates=['release_date'])",CLUSTER_7,CLUSTER_1
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_1
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_1
inds,"numpy.arange(0,len(gross['genre'])",CLUSTER_7,CLUSTER_1
bs_action_reps,numpy.empty(size),CLUSTER_7,CLUSTER_1
bs_adventure_reps,numpy.empty(size),CLUSTER_7,CLUSTER_1
confidence_interval_action,"numpy.percentile(bs_action_reps,[2.5,97.5])",CLUSTER_7,CLUSTER_1
confidence_interval_adventure,"numpy.percentile(bs_adventure_reps,[2.5,97.5])",CLUSTER_7,CLUSTER_1
df_gini_income,"pandas.read_excel(""gini_income.xlsx"")",CLUSTER_12,CLUSTER_3
df_gini_expenditure,"pandas.read_excel(""gnini_expenditure.xls"")",CLUSTER_12,CLUSTER_3
df_gini_expenditure2,"pandas.read_excel(""gnini_expenditure.xls"",""เขตพื้นที่"")",CLUSTER_12,CLUSTER_3
gdp_percapita,"pandas.read_excel(""GDP_per_capita_thb.xlsx"")",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_12,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_12,CLUSTER_3
self.metric,"sklearn.metrics.roc_auc_score(self.y_true,self.y_score)",CLUSTER_10,CLUSTER_4
price,numpy.zeros(days),CLUSTER_11,CLUSTER_3
shock,numpy.zeros(days),CLUSTER_11,CLUSTER_3
drift,numpy.zeros(days),CLUSTER_11,CLUSTER_3
simulations,numpy.zeros(runs),CLUSTER_11,CLUSTER_3
q,"numpy.percentile(simulations,1)",CLUSTER_11,CLUSTER_3
returns_fig,seaborn.PairGrid(tech_rets.dropna(),CLUSTER_11,CLUSTER_3
returns_fig,seaborn.PairGrid(closing_df),CLUSTER_11,CLUSTER_3
start,"datetime.datetime(end.year-1,end.month,end.day)",CLUSTER_11,CLUSTER_3
end,datetime.datetime.now(),CLUSTER_11,CLUSTER_3
Y_A_06M,numpy.genfromtxt('Y_A_06M.txt'),CLUSTER_12,CLUSTER_10
Y_M_06M,numpy.genfromtxt('Y_M_06M.txt'),CLUSTER_12,CLUSTER_10
Y_D_06M,numpy.genfromtxt('Y_D_06M.txt'),CLUSTER_12,CLUSTER_10
ShR_06M,numpy.genfromtxt('ShR_06M.txt'),CLUSTER_12,CLUSTER_10
Y_A_12M,numpy.genfromtxt('Y_A_12M.txt'),CLUSTER_12,CLUSTER_10
Y_M_12M,numpy.genfromtxt('Y_M_12M.txt'),CLUSTER_12,CLUSTER_10
Y_D_12M,numpy.genfromtxt('Y_D_12M.txt'),CLUSTER_12,CLUSTER_10
ShR_12M,numpy.genfromtxt('ShR_12M.txt'),CLUSTER_12,CLUSTER_10
thresholds,numpy.arange(np.min(decision_score),CLUSTER_5,CLUSTER_10
y_predict,"numpy.array(decision_score>=threshold,dtype='int')",CLUSTER_5,CLUSTER_10
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=666)",CLUSTER_5,CLUSTER_10
log_reg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
"precisions,recalls,thresholds","sklearn.metrics.precision_recall_curve(y_test,decision_score)",CLUSTER_5,CLUSTER_10
iris,"pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data',names=['sepal_length','sepal_width','petal_length','petal_width','label'])",CLUSTER_8,CLUSTER_1
sel,sklearn.feature_selection.VarianceThreshold(threshold=.5),CLUSTER_8,CLUSTER_1
X_sb,"sklearn.feature_selection.SelectKBest(chi2,k=2)",CLUSTER_8,CLUSTER_1
X_sp,"sklearn.feature_selection.SelectPercentile(chi2,percentile=50)",CLUSTER_8,CLUSTER_1
X_sp,"sklearn.feature_selection.SelectPercentile(chi2,percentile=75)",CLUSTER_8,CLUSTER_1
clf,"sklearn.svm.LinearSVC(C=0.01,penalty=""l1"",dual=False)",CLUSTER_8,CLUSTER_1
model,"sklearn.feature_selection.SelectFromModel(clf,prefit=True)",CLUSTER_8,CLUSTER_1
r,"re.findall(val,data)",CLUSTER_10,CLUSTER_4
dir,"os.listdir(""2018"")",CLUSTER_10,CLUSTER_12
x,"numpy.arange(0.,30.0)",CLUSTER_3,CLUSTER_10
train_X,"numpy.float32(np.linspace(-1,1,100)",CLUSTER_2,CLUSTER_7
train_X,"numpy.linspace(-1,1,100)",CLUSTER_2,CLUSTER_7
json_parsed,json.loads(json_str),CLUSTER_10,CLUSTER_12
start_date,"datetime.datetime.strptime(START_DATE,'%Y-%m-%d')",CLUSTER_10,CLUSTER_12
end_date,"datetime.datetime.strptime(END_DATE,'%Y-%m-%d')",CLUSTER_10,CLUSTER_12
"defdatetime_gen_fn(start_date,end_date,delta",datetime.timedelta(days=1),CLUSTER_10,CLUSTER_12
epoch_list,numpy.arange(max_epoch+1),CLUSTER_3,CLUSTER_10
"f,axarr","matplotlib.pyplot.subplots(2,2,figsize=(15,10)",CLUSTER_3,CLUSTER_10
"f,axarr","matplotlib.pyplot.subplots(2,1,figsize=(15,10)",CLUSTER_3,CLUSTER_10
x,"numpy.expand_dims(x,axis=0)",CLUSTER_12,CLUSTER_9
twtr_auth,json.load(f),CLUSTER_9,CLUSTER_12
c,collections.Counter(item),CLUSTER_9,CLUSTER_12
c,collections.Counter(data),CLUSTER_9,CLUSTER_12
df,"pandas.DataFrame([[screen_name,tweet_ID,text]],columns=['screen_name','tweet_ID','text'])",CLUSTER_9,CLUSTER_12
df,"pandas.DataFrame(columns=['screen_name','tweet_ID','text'])",CLUSTER_9,CLUSTER_12
integration,"scipy.integrate.dblquad(f,0,2/4,p,q)",CLUSTER_1,CLUSTER_9
"a,b","scipy.integrate.quad(invexp,0,np.inf)",CLUSTER_1,CLUSTER_9
x,"numpy.arange(-10,10,0.1)",CLUSTER_1,CLUSTER_9
arr,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
arr,"numpy.array([[3,2],[6,4]])",CLUSTER_1,CLUSTER_9
arr,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
arr,"numpy.array([[3,2],[6,4]])",CLUSTER_1,CLUSTER_9
arr,numpy.array(),CLUSTER_1,CLUSTER_9
iarr,scipy.linalg.inv(arr),CLUSTER_1,CLUSTER_9
b,scipy.linalg.eigvals(a),CLUSTER_1,CLUSTER_9
ascent,scipy.misc.ascent(),CLUSTER_1,CLUSTER_9
panda,scipy.misc.face(),CLUSTER_1,CLUSTER_9
panda_rotate,"scipy.ndimage.rotate(panda,90)",CLUSTER_1,CLUSTER_9
panda_rotate,"scipy.ndimage.rotate(panda,120)",CLUSTER_1,CLUSTER_9
result,"scipy.ndimage.zoom(ascent,3.0)",CLUSTER_1,CLUSTER_9
result,"scipy.ndimage.zoom(ascent,5.0)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
"cap_handle,","matplotlib.pyplot.plot(tp_pivot['Capomulin'],color='red',marker='o',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle1,","matplotlib.pyplot.plot(tp_pivot['Capomulin'],color='red',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle,","matplotlib.pyplot.plot(tp_pivot['Infubinol'],color='blue',marker='^',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle1,","matplotlib.pyplot.plot(tp_pivot['Infubinol'],color='blue',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle,","matplotlib.pyplot.plot(tp_pivot['Ketapril'],color='green',marker='s',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle1,","matplotlib.pyplot.plot(tp_pivot['Ketapril'],color='green',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle,","matplotlib.pyplot.plot(tp_pivot['Placebo'],color='black',marker='D',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle1,","matplotlib.pyplot.plot(tp_pivot['Placebo'],color='black',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle_met,","matplotlib.pyplot.plot(met_pivot['Capomulin'],color='red',marker='o',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle1_met,","matplotlib.pyplot.plot(met_pivot['Capomulin'],color='red',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle_met,","matplotlib.pyplot.plot(met_pivot['Infubinol'],color='blue',marker='^',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle1_met,","matplotlib.pyplot.plot(met_pivot['Infubinol'],color='blue',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle_met,","matplotlib.pyplot.plot(met_pivot['Ketapril'],color='green',marker='s',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle1_met,","matplotlib.pyplot.plot(met_pivot['Ketapril'],color='green',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle_met,","matplotlib.pyplot.plot(met_pivot['Placebo'],color='black',marker='D',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle1_met,","matplotlib.pyplot.plot(met_pivot['Placebo'],color='black',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle_mouse,","matplotlib.pyplot.plot(mouse_pivot['Capomulin'],color='red',marker='o',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"cap_handle1_mouse,","matplotlib.pyplot.plot(mouse_pivot['Capomulin'],color='red',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle_mouse,","matplotlib.pyplot.plot(mouse_pivot['Infubinol'],color='blue',marker='^',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"inf_handle1_mouse,","matplotlib.pyplot.plot(mouse_pivot['Infubinol'],color='blue',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle_mouse,","matplotlib.pyplot.plot(mouse_pivot['Ketapril'],color='green',marker='s',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"ket_handle1_mouse,","matplotlib.pyplot.plot(mouse_pivot['Ketapril'],color='green',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle_mouse,","matplotlib.pyplot.plot(mouse_pivot['Placebo'],color='black',marker='D',linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
"pla_handle1_mouse,","matplotlib.pyplot.plot(mouse_pivot['Placebo'],color='black',marker='|',markersize=12,linestyle='dashed',linewidth=0.5)",CLUSTER_1,CLUSTER_3
gb_drug_timepoint_mean_df,pandas.DataFrame(gb_drug_timepoint_mean),CLUSTER_1,CLUSTER_3
tv3_sem_df,pandas.DataFrame(tv3_sem),CLUSTER_1,CLUSTER_3
met_sit_df,pandas.DataFrame(met_sit_ft),CLUSTER_1,CLUSTER_3
met_sit_sem_df,pandas.DataFrame(met_sit_ft_sem),CLUSTER_1,CLUSTER_3
mouse_count_df,pandas.DataFrame(mouse_count_ft),CLUSTER_1,CLUSTER_3
drug_perc_change,"pandas.DataFrame({""Drugs"":[""Capomulin"",""Infubinol"",""Ketapril"",""Placebo""],""PercentChanges"":[cap_perc_change,inf_perc_change,ket_perc_change,pla_perc_change]})",CLUSTER_1,CLUSTER_3
comb_data_df,"pandas.merge(ctd,mdd,on=""MouseID"",how=""outer"")",CLUSTER_1,CLUSTER_3
mdd,pandas.read_csv(mouse_drug_data_to_load),CLUSTER_1,CLUSTER_3
ctd,pandas.read_csv(clinical_trial_data_to_load),CLUSTER_1,CLUSTER_3
x_axis,numpy.arange(len(drugs_pt),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('cleaned_data.zip'),CLUSTER_1,CLUSTER_3
match_arr,numpy.array(match_df[j]),CLUSTER_7,CLUSTER_8
x_1,"numpy.linspace(f_l_1,f_r_1,1500)",CLUSTER_7,CLUSTER_8
x_2,"numpy.linspace(f_l_2,f_r_2,1500)",CLUSTER_7,CLUSTER_8
x_1_2,"numpy.linspace(f_l_1_2,f_r_1_2,1500)",CLUSTER_7,CLUSTER_8
x_test,"numpy.linspace(-9,-1,100)",CLUSTER_7,CLUSTER_8
m_x,numpy.linspace(m_mean-(5*m_std),CLUSTER_7,CLUSTER_8
nm_x,numpy.linspace(nm_mean-(5*nm_std),CLUSTER_7,CLUSTER_8
>>>x,"numpy.linspace(-2,2,num=20)",CLUSTER_7,CLUSTER_8
exp_energies,"numpy.loadtxt('EXPERIMENT_AME2016.dat',usecols=(3,4,5)",CLUSTER_7,CLUSTER_8
"hist,bins","numpy.histogram(bin_count,bins=i,density=True)",CLUSTER_7,CLUSTER_8
"histogram_1,bins_1","numpy.histogram(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
"histogram_2,bins_2","numpy.histogram(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
"histogram_1,bins_1","numpy.histogram(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
"histogram_2,bins_2","numpy.histogram(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
"histogram_1,bins_1","numpy.histogram(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
"histogram_2,bins_2","numpy.histogram(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
edges_1,"numpy.histogram_bin_edges(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
edges_2,"numpy.histogram_bin_edges(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
edges_1,"numpy.histogram_bin_edges(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
edges_2,"numpy.histogram_bin_edges(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
edges_1,"numpy.histogram_bin_edges(out_1,bins=bin_number(out_1)",CLUSTER_7,CLUSTER_8
edges_2,"numpy.histogram_bin_edges(out_2,bins=bin_number(out_2)",CLUSTER_7,CLUSTER_8
e_df,pandas.DataFrame(exp_energies),CLUSTER_7,CLUSTER_8
match_e_df,pandas.DataFrame(columns=e_df.columns),CLUSTER_7,CLUSTER_8
match_df,pandas.DataFrame(columns=df.columns),CLUSTER_7,CLUSTER_8
no_match_df,pandas.DataFrame(columns=df.columns),CLUSTER_7,CLUSTER_8
df_normalized,pandas.DataFrame(x_scaled),CLUSTER_7,CLUSTER_8
df1_normalized,pandas.DataFrame(df1_scaled),CLUSTER_7,CLUSTER_8
df2_normalized,pandas.DataFrame(df2_scaled),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('dme_LO.csv'),CLUSTER_7,CLUSTER_8
>>>y_int,"scipy.integrate.cumtrapz(y,x,initial=0)",CLUSTER_7,CLUSTER_8
y_int,"scipy.integrate.simps(b,a)",CLUSTER_7,CLUSTER_8
I_1,"scipy.integrate.quad(KDEpdf_1,f_l_1,f_r_1)",CLUSTER_7,CLUSTER_8
I_2,"scipy.integrate.quad(KDEpdf_2,f_l_2,f_r_2)",CLUSTER_7,CLUSTER_8
I_1_2,"scipy.integrate.quad(min_of_each,f_l_1_2,f_r_1_2)",CLUSTER_7,CLUSTER_8
m_pdf,"scipy.integrate.quad(pdf_func,-np.inf,np.inf,args=(m_mean,m_std)",CLUSTER_7,CLUSTER_8
nm_pdf,"scipy.integrate.quad(pdf_func,-np.inf,np.inf,args=(m_mean,m_std)",CLUSTER_7,CLUSTER_8
ovl,"scipy.integrate.quad(ovl_eq,-np.inf,np.inf,args=(m_mean,m_std,nm_mean,nm_std)",CLUSTER_7,CLUSTER_8
rv,scipy.stats.norm(),CLUSTER_7,CLUSTER_8
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
importances,"pandas.Series(rf.feature_importances_,X_train.columns)",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(file,parse_dates=True,keep_date_col=True,low_memory=False,nrows=4000000)",CLUSTER_7,CLUSTER_5
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y)",CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.make_pipeline(
ce.OrdinalEncoder()",CLUSTER_7,CLUSTER_5
processor,"sklearn.pipeline.make_pipeline(
ce.OrdinalEncoder()",CLUSTER_7,CLUSTER_5
transformers,"sklearn.pipeline.make_pipeline(
ce.OrdinalEncoder()",CLUSTER_7,CLUSTER_5
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=42,n_jobs=-1)",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""./train_downsampled.csv"")",CLUSTER_11,CLUSTER_5
df,"pandas.read_csv(""./feature_engineered_data_1.csv"",delimiter='\t')",CLUSTER_11,CLUSTER_5
arr,numpy.array([f_list]),CLUSTER_11,CLUSTER_5
stdev,numpy.std(arr),CLUSTER_11,CLUSTER_5
clf,"sklearn.svm.SVC(C=0.1,kernel='rbf')",CLUSTER_11,CLUSTER_5
clf,"sklearn.svm.SVC(C=1.0,kernel='linear')",CLUSTER_11,CLUSTER_5
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_11,CLUSTER_5
prfs_result,"sklearn.metrics.precision_recall_fscore_support(test_y,predict,average='binary')",CLUSTER_11,CLUSTER_5
prfs_result,"sklearn.metrics.precision_recall_fscore_support(test_y,predict,average='binary')",CLUSTER_11,CLUSTER_5
prfs_result,"sklearn.metrics.precision_recall_fscore_support(test_y.values,predict,average='binary')",CLUSTER_11,CLUSTER_5
start,time.time(),CLUSTER_11,CLUSTER_5
end,time.time(),CLUSTER_11,CLUSTER_5
start,time.time(),CLUSTER_11,CLUSTER_5
end,time.time(),CLUSTER_11,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_11,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_11,CLUSTER_5
glacier,"pandas.DataFrame(
{'name':'UpperGrindelwaldGlacier',
'lon':8.11933,
'lat':46.6143},index=['UGG'])",CLUSTER_8,CLUSTER_4
histalp,"pandas.DataFrame(
{'name':'HistAlpreferencelocation',
'lon':8.08333333333175,
'lat':46.58333333333195},index=['HISTALP'])",CLUSTER_8,CLUSTER_4
stations,"pandas.read_csv(path,index_col=0)",CLUSTER_8,CLUSTER_4
stations,"pandas.read_csv(path,index_col=0)",CLUSTER_8,CLUSTER_4
precip_avg_slf,"pandas.read_csv(path,index_col=0,squeeze=True,names=['yearly_precip'])",CLUSTER_8,CLUSTER_4
stations,"pandas.read_csv(path,index_col=0)",CLUSTER_8,CLUSTER_4
clients,numpy.transpose(client_data),CLUSTER_7,CLUSTER_5
minimum_price,pandas.Series(prices),CLUSTER_7,CLUSTER_5
data,pandas.read_csv('housing.csv'),CLUSTER_7,CLUSTER_5
score,"sklearn.metrics.r2_score(y_true,y_predict)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_5
scoring_fnc,sklearn.metrics.make_scorer(performance_metric),CLUSTER_7,CLUSTER_5
regressor,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_5
grid,"sklearn.model_selection.GridSearchCV(regressor,param_grid=params,scoring=scoring_fnc,cv=cv_sets)",CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(ncols=2),CLUSTER_7,CLUSTER_5
gmm,sklearn.mixture.BayesianGaussianMixture(n_components=2),CLUSTER_7,CLUSTER_5
gmm,sklearn.mixture.BayesianGaussianMixture(n_components=2),CLUSTER_7,CLUSTER_5
f_score,"sklearn.metrics.fbeta_score(real_edge,A.flatten()",CLUSTER_7,CLUSTER_5
f_score,"sklearn.metrics.fbeta_score(real_edge,A.flatten()",CLUSTER_7,CLUSTER_5
core_samples,"numpy.zeros_like(labels,dtype=bool)",CLUSTER_7,CLUSTER_5
core_samples,"numpy.zeros_like(labels,dtype=bool)",CLUSTER_7,CLUSTER_5
var1,"numpy.cumsum(np.round(pca.explained_variance_ratio_,decimals=4)",CLUSTER_7,CLUSTER_5
col,"numpy.linspace(0,1,len(unique_labels)",CLUSTER_7,CLUSTER_5
unique_labels,numpy.unique(labels),CLUSTER_7,CLUSTER_5
unique_labels,numpy.unique(labels),CLUSTER_7,CLUSTER_5
my_scaled_data_transformed_pd,pandas.DataFrame(my_scaled_data_transformed),CLUSTER_7,CLUSTER_5
DB_PCA_df,"pandas.DataFrame(DB_PCA,columns=[""ClusterLabel"",""Unlabelled"",""Blast"",""Healthy""])",CLUSTER_7,CLUSTER_5
DB_PCA_df,"pandas.DataFrame(DB_PCA,columns=[""ClusterLabel"",""Unlabelled"",""Blast"",""Healthy""])",CLUSTER_7,CLUSTER_5
my_scaled_data_transformed_pd_meta,"pandas.concat([my_scaled_data_transformed_pd,my_data[meta_headers]],axis=1)",CLUSTER_7,CLUSTER_5
DB_PCA_df_melted,"pandas.melt(DB_PCA_df,value_vars=[""Unlabelled"",""Blast"",""Healthy""],id_vars=""ClusterLabel"")",CLUSTER_7,CLUSTER_5
tsne_db_df_50_melted,"pandas.melt(tsne_db_df_50,value_vars=[""Unlabelled"",""Blast"",""Healthy""],id_vars=""ClusterLabel"")",CLUSTER_7,CLUSTER_5
DB_PCA_df_melted,"pandas.melt(DB_PCA_df,value_vars=[""Unlabelled"",""Blast"",""Healthy""],id_vars=""ClusterLabel"")",CLUSTER_7,CLUSTER_5
my_data,"pandas.read_csv(filename,index_col=0)",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(hue=""variable"",y=""value"",x=""ClusterLabel"",data=DB_PCA_df_melted,log='y')",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(hue=""variable"",y=""value"",x=""ClusterLabel"",data=tsne_db_df_50_melted,log='y')",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(hue=""variable"",y=""value"",x=""ClusterLabel"",data=DB_PCA_df_melted,log='y')",CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=5),CLUSTER_7,CLUSTER_5
my_scaled_data,sklearn.preprocessing.scale(my_data[my_data_data_headers]),CLUSTER_7,CLUSTER_5
dbsc,"sklearn.cluster.DBSCAN(eps=.6,min_samples=10)",CLUSTER_7,CLUSTER_5
dbsc,"sklearn.cluster.DBSCAN(eps=eps_,min_samples=10,algorithm=algo,metric=met)",CLUSTER_7,CLUSTER_5
rot,"numpy.linspace(0,np.pi/6)",CLUSTER_3,CLUSTER_6
rot,"numpy.linspace(0,np.pi)",CLUSTER_3,CLUSTER_6
ft_noise,numpy.load(MODEL+'_ft_noise.npy'),CLUSTER_3,CLUSTER_6
ft_l2_m,numpy.load(MODEL+'_ft_bim_l2_mcls_100k.npy'),CLUSTER_3,CLUSTER_6
ft_l2_t,numpy.load(MODEL+'_ft_bim_l2_one_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_l2_t_all,numpy.load(MODEL+'_ft_bim_l2_all_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_noise,numpy.load(MODEL+'_ft_noise.npy'),CLUSTER_3,CLUSTER_6
ft_inf,numpy.load(MODEL+'_ft_bim_inf_mcls.npy'),CLUSTER_3,CLUSTER_6
ft_inf_t,numpy.load(MODEL+'_ft_bim_inf_one_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_inf_t_all,numpy.load(MODEL+'_ft_bim_inf_all_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_adef_wd0_mcls,numpy.load(path_to_data+'wd_0e+00_adef_data_to_plot_fullbatch_mcls.npy'),CLUSTER_3,CLUSTER_6
ft_adef_wd1_mcls,numpy.load(path_to_data+'wd_1e-02_adef_data_to_plot_fullbatch_mcls.npy'),CLUSTER_3,CLUSTER_6
ft_adef_wd0_tgt,numpy.load(path_to_data+'wd_0e+00_adef_data_to_plot_fullbatch_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_adef_wd1_tgt,numpy.load(path_to_data+'wd_1e-02_adef_data_to_plot_fullbatch_tgt.npy'),CLUSTER_3,CLUSTER_6
ft_rot_wd,"numpy.load(os.path.join(PATH,MODEL+""_ft_rot30_test.npy"")",CLUSTER_3,CLUSTER_6
ft_rot_no_wd,"numpy.load(os.path.join(PATH,MODEL+""_ft_rot30_test.npy"")",CLUSTER_3,CLUSTER_6
ft_rot_wd,"numpy.load(os.path.join(PATH,MODEL+""_ft_rot180_test.npy"")",CLUSTER_3,CLUSTER_6
ft_rot_no_wd,"numpy.load(os.path.join(PATH,MODEL+""_ft_rot180_test.npy"")",CLUSTER_3,CLUSTER_6
Y_test,numpy.vstack((np.arange(X_test.shape[0]),CLUSTER_5,CLUSTER_6
X_train,"numpy.genfromtxt('data/X_train.txt',delimiter=None)",CLUSTER_5,CLUSTER_6
Y_train,"numpy.genfromtxt('data/Y_train.txt',delimiter=None)",CLUSTER_5,CLUSTER_6
X_test,"numpy.genfromtxt('data/X_test.txt',delimiter=None)",CLUSTER_5,CLUSTER_6
expression,"pandas.DataFrame(scipy.io.mmread(data_path+""count.mtx"")",CLUSTER_5,CLUSTER_9
gene_dataset_name,"pandas.DataFrame(gene_names,columns=[""ENSG""])",CLUSTER_5,CLUSTER_9
raw_qc,"pandas.concat((raw_qc_8,raw_qc_4)",CLUSTER_5,CLUSTER_9
exp_data,"pandas.merge(exp_data_1,\
exp_data_2,how=""inner"",on=""GS"")",CLUSTER_5,CLUSTER_9
exp_data,"pandas.merge(exp_data,\
exp_data_3,how=""inner"",on=""GS"")",CLUSTER_5,CLUSTER_9
ordered_corres,"pandas.merge(gene_dataset_name,\
gene_correspondance,how=""inner"",on=""ENSG"",left_index=True)",CLUSTER_5,CLUSTER_9
micro_array_result,"pandas.merge(ordered_corres,exp_data,how=""inner"",on=""GS"",right_index=True)",CLUSTER_5,CLUSTER_9
exp_data_1,"pandas.read_csv(data_path+""gene_data/GSE8835_CD4_CD8.tab"",delimiter=""\t"")",CLUSTER_5,CLUSTER_9
exp_data_2,"pandas.read_csv(data_path+""gene_data/GSE29618_Bcells_mDC.tab"",delimiter=""\t"")",CLUSTER_5,CLUSTER_9
exp_data_3,"pandas.read_csv(data_path+""gene_data/GSE22886_Bcells_mDC.tab"",delimiter=""\t"")",CLUSTER_5,CLUSTER_9
gene_correspondance,"pandas.read_csv(data_path+""de/new_rownames.tab"",delimiter=""\t"")",CLUSTER_5,CLUSTER_9
design,"pandas.read_csv(data_path+""design.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
normalized_qc,"pandas.read_csv(data_path+""full_qc.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
barcodes,"pandas.read_csv(data_path+""barcodes.csv"",index_col=1)",CLUSTER_5,CLUSTER_9
batch,"pandas.read_csv(data_path+""batch.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
raw_qc_8,"pandas.read_csv(data_path+""molecule_qc_8k.txt"",index_col=0,sep=""\t"")",CLUSTER_5,CLUSTER_9
raw_qc_4,"pandas.read_csv(data_path+""molecule_qc_4k.txt"",index_col=0,sep=""\t"")",CLUSTER_5,CLUSTER_9
bio,"pandas.read_csv(data_path+""bio.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
micro_array_result,"pandas.read_csv(data_path+""de/gene_info.csv"")",CLUSTER_5,CLUSTER_9
gene_names,"numpy.array(pd.read_csv(data_path+""michael_gene_names.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
p,numpy.array(stats.p_adjust(FloatVector(p),CLUSTER_5,CLUSTER_9
p,numpy.array(stats.p_adjust(FloatVector(p),CLUSTER_5,CLUSTER_9
p,numpy.array(stats.p_adjust(FloatVector(p),CLUSTER_5,CLUSTER_9
score-,"numpy.mean(np.sum(data_test,axis=-1)",CLUSTER_5,CLUSTER_9
p_ZIFA,"numpy.exp(-zifa.params[""decay_coef""]*X_ZIFA_log**2)",CLUSTER_5,CLUSTER_9
data_train,numpy.log(1+X_train),CLUSTER_5,CLUSTER_9
data_test,numpy.log(1+X_test),CLUSTER_5,CLUSTER_9
plt.axhline(y,numpy.log10(0.05),CLUSTER_5,CLUSTER_9
plt.axhline(y,numpy.log10(0.05),CLUSTER_5,CLUSTER_9
de_expression,numpy.copy(expression.as_matrix(),CLUSTER_5,CLUSTER_9
list_clusters,"numpy.unique(bio[""x""])",CLUSTER_5,CLUSTER_9
"_,batch","numpy.unique(batch,return_inverse=True)",CLUSTER_5,CLUSTER_9
c_train,"numpy.loadtxt(data_path+""label_train"")",CLUSTER_5,CLUSTER_9
c_test,"numpy.loadtxt(data_path+""label_test"")",CLUSTER_5,CLUSTER_9
b_train,"numpy.loadtxt(data_path+""b_train"")",CLUSTER_5,CLUSTER_9
b_test,"numpy.loadtxt(data_path+""b_test"")",CLUSTER_5,CLUSTER_9
X_train,"numpy.load(data_path+""de/data_train.npy"")",CLUSTER_5,CLUSTER_9
X_test,"numpy.load(data_path+""de/data_test.npy"")",CLUSTER_5,CLUSTER_9
r_train,"numpy.load(data_path+""design_train.npy"")",CLUSTER_5,CLUSTER_9
r_test,"numpy.load(data_path+""design_test.npy"")",CLUSTER_5,CLUSTER_9
mean_MAGIC,"numpy.load(data_path+""imputation/X_zero_MAGIC.npy"")",CLUSTER_5,CLUSTER_9
r,"requests.get(""https://kr-geschaefte.zug.ch/gast/geschaefte?commit=Filtern&geschaeft_filter%5Babgeschlossen_bis%5D=&geschaeft_filter%5Babgeschlossen_von%5D=&geschaeft_filter%5Barten_refs%5D%5B%5D=&geschaeft_filter%5Beingereicht_bis%5D=&geschaeft_filter%5Beingereicht_von%5D=&geschaeft_filter%5Bfrist_bis%5D=&geschaeft_filter%5Bhistorische_staende_refs%5D%5B%5D=&geschaeft_filter%5Bkommissionen_refs%5D%5B%5D=&geschaeft_filter%5Bstaende_refs%5D%5B%5D=&geschaeft_filter%5Bstatus_ids%5D%5B%5D=haengig&geschaeft_filter%5Bstatus_ids%5D%5B%5D=abgeschlossen&geschaeft_filter%5Bstatus_ids%5D%5B%5D=&geschaeft_filter%5Btitel%5D=&geschaeft_filter%5Bzustaendig_refs%5D%5B%5D=&page=1&utf8=✓"")",CLUSTER_9,CLUSTER_2
r,requests.get(url+str(seite),CLUSTER_9,CLUSTER_2
rg,"requests.get(""https://kr-geschaefte.zug.ch/gast/geschaefte/1997"")",CLUSTER_9,CLUSTER_2
rg,requests.get(geschaeft),CLUSTER_9,CLUSTER_2
rp,requests.get(url_p),CLUSTER_9,CLUSTER_2
df_a,pandas.DataFrame(alle_seiten),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(alle_seiten),CLUSTER_9,CLUSTER_2
df_g,pandas.DataFrame(eingang_list),CLUSTER_9,CLUSTER_2
df_g,pandas.DataFrame(eingang_list),CLUSTER_9,CLUSTER_2
df_mit_dat,"pandas.merge(df_a,df_g,how=""left"",on=""GeschäftsNR"")",CLUSTER_9,CLUSTER_2
"df_g[""Einreichedatum""]","pandas.to_datetime(df_g[""Einreichedatum""],format='%d.%m.%Y')",CLUSTER_9,CLUSTER_2
df,"pandas.concat([steam_games,app_id],axis=1,sort=False)",CLUSTER_8,CLUSTER_3
steam_games,"pandas.read_csv('steam_games_all_fields.csv',index_col=1,delimiter='\t')",CLUSTER_8,CLUSTER_3
df['game_ID'],"pandas.to_numeric(df['game_ID'],downcast='signed')",CLUSTER_8,CLUSTER_3
df['number_of_review'],"pandas.to_numeric(df['number_of_review'],downcast='integer')",CLUSTER_8,CLUSTER_3
df['score'],pandas.to_numeric(df['score']),CLUSTER_8,CLUSTER_3
draw_korea_raw_stacked,pandas.DataFrame(draw_korea_raw.stack(),CLUSTER_9,CLUSTER_3
pop,"pandas.merge(pop,draw_korea,how='left',on=['ID'])",CLUSTER_9,CLUSTER_3
pop,"pandas.pivot_table(population,
index=['광역시도','시도'],
columns=['구분'],
values=['인구수','20-39세','65세이상'])",CLUSTER_9,CLUSTER_3
population,"pandas.read_excel('../data/05.population_raw_data.xlsx',header=1)",CLUSTER_9,CLUSTER_3
draw_korea_raw,"pandas.read_excel('../data/05.draw_korea_raw.xlsx',
encoding=""EUC-KR"")",CLUSTER_9,CLUSTER_3
masked_mapdata,numpy.ma.masked_where(np.isnan(mapdata),CLUSTER_9,CLUSTER_3
masked_mapdata,numpy.ma.masked_where(np.isnan(mapdata),CLUSTER_9,CLUSTER_3
masked_mapdata,numpy.ma.masked_where(np.isnan(mapdata),CLUSTER_9,CLUSTER_3
cb,"matplotlib.pyplot.colorbar(shrink=.1,aspect=10)",CLUSTER_9,CLUSTER_3
cb,"matplotlib.pyplot.colorbar(shrink=.1,aspect=10)",CLUSTER_9,CLUSTER_3
geo_str,"json.load(open(geo_path,encoding='utf-8')",CLUSTER_9,CLUSTER_3
boxplot,seaborn.boxplot(data=gpa),CLUSTER_4,CLUSTER_11
mergedGraph,"seaborn.relplot(x=""cs65"",y=""contributions"",
ci=None,kind=""line"",data=mergedDf,aspect=2)",CLUSTER_4,CLUSTER_11
gpa,"pandas.read_csv(""grades.csv"")",CLUSTER_4,CLUSTER_11
piazza,"pandas.read_csv(""piazza.csv"")",CLUSTER_4,CLUSTER_11
gpa,"pandas.read_csv(""grades.csv"")",CLUSTER_4,CLUSTER_11
mergedDf,"pandas.read_csv(""combinedGPAPiazza.csv"")",CLUSTER_4,CLUSTER_11
all_months_data,pandas.DataFrame(),CLUSTER_0,CLUSTER_11
all_months_data,"pandas.concat([df,all_months_data])",CLUSTER_0,CLUSTER_11
df,pandas.read_csv('./Sales_Data/Sales_August_2019.csv'),CLUSTER_0,CLUSTER_11
df,pandas.read_csv('./Sales_Data/'+file),CLUSTER_0,CLUSTER_11
df1,pandas.read_csv('complete_data.csv'),CLUSTER_0,CLUSTER_11
df2['OrderDate'],pandas.to_datetime(df2['OrderDate']),CLUSTER_0,CLUSTER_11
df2['QuantityOrdered'],pandas.to_numeric(df2['QuantityOrdered']),CLUSTER_0,CLUSTER_11
df2['PriceEach'],pandas.to_numeric(df2['PriceEach']),CLUSTER_0,CLUSTER_11
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_11
count,collections.Counter(),CLUSTER_0,CLUSTER_11
patch,matplotlib.pyplot.imshow(frames[0]),CLUSTER_12,CLUSTER_10
data_train,"pandas.read_csv('data/train.csv',dtype=int)",CLUSTER_5,CLUSTER_5
data_test,"pandas.read_csv('data/test.csv',dtype=int)",CLUSTER_5,CLUSTER_5
Tree_model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_5
Tree_models,"sklearn.tree.DecisionTreeClassifier(min_samples_leaf=5,max_depth=12)",CLUSTER_5,CLUSTER_5
tree_model,"sklearn.tree.DecisionTreeClassifier(max_depth=1,class_weight=""balanced"")",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=200,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=300,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,max_depth=2,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=200,max_depth=20,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
conf_mx,sklearn.metrics.confusion_matrix(Tree_model.predict(X_train),CLUSTER_5,CLUSTER_5
conf_mx,sklearn.metrics.confusion_matrix(Tree_model.predict(X_train),CLUSTER_5,CLUSTER_5
gd_sr,"sklearn.model_selection.GridSearchCV(estimator=Tree_model,param_grid=grid_param,scoring='accuracy',cv=5,n_jobs=-1)",CLUSTER_5,CLUSTER_5
gd_sr_ada,"sklearn.model_selection.GridSearchCV(ada_clf,param_grid=param_grid,scoring='accuracy',cv=5,n_jobs=-1)",CLUSTER_5,CLUSTER_5
gd_sr,"sklearn.model_selection.GridSearchCV(estimator=rnd_clf,param_grid=grid_param,scoring='accuracy',cv=5,n_jobs=-1)",CLUSTER_5,CLUSTER_5
gd_sr,"sklearn.model_selection.GridSearchCV(estimator=et_clf,param_grid=grid_param,scoring='accuracy',cv=5,n_jobs=-1)",CLUSTER_5,CLUSTER_5
gb_clf,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=100,learning_rate=0.2,
max_depth=1,random_state=0)",CLUSTER_5,CLUSTER_5
ada_clf,sklearn.ensemble.AdaBoostClassifier(n_estimators=300),CLUSTER_5,CLUSTER_5
ada_clf,sklearn.ensemble.AdaBoostClassifier(base_estimator=tree_model),CLUSTER_5,CLUSTER_5
ada_clf,sklearn.ensemble.AdaBoostClassifier(DecisionTreeClassifier(max_depth=2),CLUSTER_5,CLUSTER_5
all_accuracies,"sklearn.model_selection.cross_val_score(estimator=x,X=X_train,y=y_train,cv=5)",CLUSTER_5,CLUSTER_5
all_accuracies1,"sklearn.model_selection.cross_val_score(estimator=Tree_model,X=X_train,y=y_train,cv=5)",CLUSTER_5,CLUSTER_5
all_accuracies,"sklearn.model_selection.cross_val_score(estimator=ada_clf,X=X_train,y=y_train,cv=5)",CLUSTER_5,CLUSTER_5
et_clf,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=100,max_depth=10,
min_samples_split=2,bootstrap=True,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
et_clf,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=100,max_depth=2,
min_samples_split=2,min_samples_leaf=5,bootstrap=True,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
et_clf,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=300,max_depth=2,
min_samples_split=2,min_samples_leaf=5,bootstrap=True,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
et_clf,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=200,max_depth=20,
min_samples_split=2,min_samples_leaf=5,bootstrap=True,n_jobs=-1,oob_score=True)",CLUSTER_5,CLUSTER_5
coin,"random.randint(0,1)",CLUSTER_3,CLUSTER_10
frame_starts,"numpy.arange(0,num_beats-frame_length,frame_hop)",CLUSTER_4,CLUSTER_11
flat_features,"numpy.reshape(features,(features.shape[0],features.shape[1]*features.shape[2])",CLUSTER_4,CLUSTER_11
flattened_array,"numpy.reshape(framed_array,(framed_array.shape[0],framed_array.shape[1]*framed_array.shape[2])",CLUSTER_4,CLUSTER_11
fftm_patch,numpy.fft.fftshift(np.abs(np.fft.fft2(chroma_patch.transpose(),CLUSTER_4,CLUSTER_11
pca,"sklearn.decomposition.PCA(n_components=20,whiten=True,copy=True)",CLUSTER_4,CLUSTER_11
kd_tree,sklearn.neighbors.KDTree(match_chroma.all_features),CLUSTER_4,CLUSTER_11
face,numpy.asarray(face),CLUSTER_7,CLUSTER_3
faces,numpy.asarray(faces),CLUSTER_7,CLUSTER_3
emotion_label_arg,numpy.argmax(emotion_classifier.predict(gray_face),CLUSTER_7,CLUSTER_3
faces,"numpy.expand_dims(faces,-1)",CLUSTER_7,CLUSTER_3
gray_face,"numpy.expand_dims(gray_face,0)",CLUSTER_7,CLUSTER_3
gray_face,"numpy.expand_dims(gray_face,-1)",CLUSTER_7,CLUSTER_3
emotions,pandas.get_dummies(df['emotion']),CLUSTER_7,CLUSTER_3
df,"pandas.read_csv(""fer2013.csv"")",CLUSTER_7,CLUSTER_3
data,pandas.read_csv('logistic_features.csv'),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_4,CLUSTER_11
labels,numpy.append(np.ones((len(all_positive_tweets),CLUSTER_4,CLUSTER_11
feature,numpy.zeros(len(lexicon),CLUSTER_0,CLUSTER_5
count,collections.Counter(lexicon),CLUSTER_0,CLUSTER_5
dataset,pandas.read_csv('filtered_tweets.csv'),CLUSTER_0,CLUSTER_5
temp,"re.sub(r""[^A-Za-z]"","""",line)",CLUSTER_0,CLUSTER_5
model1,"sklearn.ensemble.RandomForestClassifier(max_depth=None,random_state=0)",CLUSTER_0,CLUSTER_5
model2,"sklearn.svm.LinearSVC(random_state=0,tol=1e-5,max_iter=10000)",CLUSTER_0,CLUSTER_5
model3,"sklearn.ensemble.AdaBoostClassifier(n_estimators=100,random_state=0)",CLUSTER_0,CLUSTER_5
model4,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=[64,256,64],activation='relu',learning_rate='adaptive')",CLUSTER_0,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(dataset,dataset.iloc[:,12],test_size=0.20,random_state=42)",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model1,test_features,y_test,
cmap=plt.cm.Blues,
normalize='true',
values_format='.2g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model1,test_features,y_test,
cmap=plt.cm.Blues,
normalize=None,
values_format='.5g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model2,test_features,y_test,
cmap=plt.cm.Blues,
normalize='true',
values_format='.2g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model2,test_features,y_test,
cmap=plt.cm.Blues,
normalize=None,
values_format='.5g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model3,test_features,y_test,
cmap=plt.cm.Blues,
normalize='true',
values_format='.2g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model3,test_features,y_test,
cmap=plt.cm.Blues,
normalize=None,
values_format='.5g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model4,test_features,y_test,
cmap=plt.cm.Blues,
normalize='true',
values_format='.2g')",CLUSTER_0,CLUSTER_5
disp,"sklearn.metrics.plot_confusion_matrix(model4,test_features,y_test,
cmap=plt.cm.Blues,
normalize=None,
values_format='.5g')",CLUSTER_0,CLUSTER_5
fpd,"pandas.concat([flow[0],flow[1],flow[2]])",CLUSTER_1,CLUSTER_9
opd,"pandas.concat([occupancy[0],occupancy[1],occupancy[2]])",CLUSTER_1,CLUSTER_9
spd,"pandas.concat([speed[0],speed[1],speed[2]])",CLUSTER_1,CLUSTER_9
mvpd,"pandas.concat([fpd,spd,opd],axis=1)",CLUSTER_1,CLUSTER_9
resultdf,"pandas.concat([ndf,pdf])",CLUSTER_1,CLUSTER_9
x,"pandas.cut(pdf['chi2'],ws_range)",CLUSTER_1,CLUSTER_9
timestamp,"pandas.read_csv('timestamp.tsv',header=None,sep='\t')",CLUSTER_1,CLUSTER_9
flow,"pandas.read_csv('flow.tsv',header=None,sep='\t')",CLUSTER_1,CLUSTER_9
occupancy,"pandas.read_csv('occupancy.tsv',header=None,sep='\t')",CLUSTER_1,CLUSTER_9
speed,"pandas.read_csv('speed.tsv',header=None,sep='\t')",CLUSTER_1,CLUSTER_9
ws_range,"numpy.arange(0,27780+1,10)",CLUSTER_1,CLUSTER_9
petrol,pandas.read_csv('data/petrol_brent.csv'),CLUSTER_7,CLUSTER_3
petrol['Date'],"pandas.to_datetime(petrol['Date'],format='%d.%m.%Y')",CLUSTER_7,CLUSTER_3
petrol[col],pandas.to_numeric(petrol[col]),CLUSTER_7,CLUSTER_3
petrol['Vol'],pandas.to_numeric(petrol['Vol'].apply(volume_change),CLUSTER_7,CLUSTER_3
petrol['Var_%'],pandas.to_numeric(petrol['Var_%'].apply(var_reformatting),CLUSTER_7,CLUSTER_3
df,pandas.read_csv(csv_path),CLUSTER_6,CLUSTER_0
height,numpy.array(image_arr),CLUSTER_6,CLUSTER_0
width,numpy.array(image_arr),CLUSTER_6,CLUSTER_0
new_img,numpy.array(new_image),CLUSTER_6,CLUSTER_0
orig_img,numpy.array(image_arr),CLUSTER_6,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(16,8)",CLUSTER_6,CLUSTER_0
svc,"sklearn.svm.SVC(gamma=""scale"")",CLUSTER_7,CLUSTER_8
clf,"sklearn.svm.SVC(kernel=""linear"",C=10,gamma=0.001,)",CLUSTER_7,CLUSTER_8
grid_search,sklearn.model_selection.GridSearchCV(svm.SVC(kernel='rbf'),CLUSTER_7,CLUSTER_8
X_train,"pandas.read_csv(""/Users/fahad/project_repo/data/final/X_train.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
y_train,"pandas.read_csv(""/Users/fahad/project_repo/data/final/y_train.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
MSFT_10_X_test,"pandas.read_csv(""/Users/fahad/project_repo/data/final/MSFT/MSFT_10_X_test.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
MSFT_10_y_test,"pandas.read_csv(""/Users/fahad/project_repo/data/final/MSFT/MSFT_10_y_test.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
MSFT_14_X_test,"pandas.read_csv(""/Users/fahad/project_repo/data/final/MSFT/MSFT_14_X_test.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
MSFT_14_y_test,"pandas.read_csv(""/Users/fahad/project_repo/data/final/MSFT/MSFT_14_y_test.csv"",index_col=0)",CLUSTER_7,CLUSTER_8
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_8
precision,"sklearn.metrics.precision_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
precision,"sklearn.metrics.precision_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
recall,"sklearn.metrics.recall_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
recall,"sklearn.metrics.recall_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
f1,"sklearn.metrics.f1_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
f1,"sklearn.metrics.f1_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
kappa,"sklearn.metrics.cohen_kappa_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
kappa,"sklearn.metrics.cohen_kappa_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
auc,"sklearn.metrics.roc_auc_score(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
auc,"sklearn.metrics.roc_auc_score(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(MSFT_10_y_test,predictions)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(MSFT_14_y_test,predictions_2)",CLUSTER_7,CLUSTER_8
description,"pandas.DataFrame({'shape':[i.shapeforiinall_train],'columns':[i.columns.valuesforiinall_train]},\
index=names)",CLUSTER_4,CLUSTER_8
most_demanded_product_1,pandas.DataFrame(columns=['R'+str(i),CLUSTER_4,CLUSTER_8
d,pandas.DataFrame(columns=['D'+str(i),CLUSTER_4,CLUSTER_8
product_division1,"pandas.DataFrame({'Product_Name':product_name,'Total_Demand':total_demand})",CLUSTER_4,CLUSTER_8
product_division2,"pandas.DataFrame({'Product_Name':product_name2,'Total_Demand':total_demand2})",CLUSTER_4,CLUSTER_8
product_division3,"pandas.DataFrame({'Product_Name':product_name3,'Total_Demand':total_demand3})",CLUSTER_4,CLUSTER_8
final_Data,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
new_data,pandas.DataFrame({str(i),CLUSTER_4,CLUSTER_8
product_wise_capacity,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
new_data_1,pandas.DataFrame({str(i),CLUSTER_4,CLUSTER_8
most_demanded_product_1,"pandas.concat([most_demanded_product_1,d],axis=1)",CLUSTER_4,CLUSTER_8
final_Data,"pandas.concat([final_Data,new_data],axis=0)",CLUSTER_4,CLUSTER_8
product_wise_capacity,"pandas.concat([product_wise_capacity,new_data_1],axis=0)",CLUSTER_4,CLUSTER_8
product_division1,"pandas.concat([product_division1,final_Data],axis=1)",CLUSTER_4,CLUSTER_8
product_division2,"pandas.concat([product_division2,final_Data],axis=1)",CLUSTER_4,CLUSTER_8
product_division3,"pandas.concat([product_division3,final_Data],axis=1)",CLUSTER_4,CLUSTER_8
product_division1,"pandas.concat([product_division1,product_wise_capacity],axis=1)",CLUSTER_4,CLUSTER_8
product_division2,"pandas.concat([product_division2,product_wise_capacity],axis=1)",CLUSTER_4,CLUSTER_8
product_division3,"pandas.concat([product_division3,product_wise_capacity],axis=1)",CLUSTER_4,CLUSTER_8
test_ship_new,"pandas.concat([test_ship1a,test_ship1b,test_ship1c,test_ship2a,test_ship2b,test_ship2c,test_ship3a,test_ship3b,test_ship3c],axis=0)",CLUSTER_4,CLUSTER_8
sample_demand,"pandas.read_csv(os.path.join(sample_root,'demand_forecast.csv')",CLUSTER_4,CLUSTER_8
sample_ship,"pandas.read_csv(os.path.join(sample_root,'shipping_region.csv')",CLUSTER_4,CLUSTER_8
test_demand,"pandas.read_csv(os.path.join(test_root,'demand_forecast.csv')",CLUSTER_4,CLUSTER_8
test_seq,"pandas.read_csv(os.path.join(test_root,'manufacture_sequence.csv')",CLUSTER_4,CLUSTER_8
test_ship,"pandas.read_csv(os.path.join(test_root,'shipping_region.csv')",CLUSTER_4,CLUSTER_8
historical_demand,"pandas.read_csv(os.path.join(train_root,'historical_demand.csv')",CLUSTER_4,CLUSTER_8
production_cost,"pandas.read_csv(os.path.join(train_root,'production_cost.csv')",CLUSTER_4,CLUSTER_8
demand_price,"pandas.read_csv(os.path.join(train_root,'demand_price.csv')",CLUSTER_4,CLUSTER_8
fixed_cost,"pandas.read_csv(os.path.join(train_root,'fixed_cost.csv')",CLUSTER_4,CLUSTER_8
changeover_cost,"pandas.read_csv(os.path.join(train_root,'changeover_cost.csv')",CLUSTER_4,CLUSTER_8
delivery_cost,"pandas.read_csv(os.path.join(train_root,'delivery_cost.csv')",CLUSTER_4,CLUSTER_8
changeover_days,"pandas.read_csv(os.path.join(train_root,'changeover_days.csv')",CLUSTER_4,CLUSTER_8
production_capacity,"pandas.read_csv(os.path.join(train_root,'production_capacity.csv')",CLUSTER_4,CLUSTER_8
test_demand,pandas.read_csv('/home/yash/Desktop/sample_av/demand_forecast.csv'),CLUSTER_4,CLUSTER_8
manufacture_sequence_real,"pandas.read_csv('/home/yash/Downloads/manufacture_sequence2.csv',index_col=None)",CLUSTER_4,CLUSTER_8
total_production,"pandas.read_excel('/home/yash/Downloads/manufacture_sequence2_final.xlsx',sheetname=3)",CLUSTER_4,CLUSTER_8
test_ship_new['Shipping_to_region_quantity'],numpy.floor(test_ship_new['Shipping_to_region_quantity']),CLUSTER_4,CLUSTER_8
non_zero_capacity,numpy.unique(production_capacity.sort_values('Product'),CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_4,CLUSTER_8
start,time.time(),CLUSTER_4,CLUSTER_8
end,time.time(),CLUSTER_4,CLUSTER_8
courses_eng,pandas.read_csv('courses_eng.csv'),CLUSTER_0,CLUSTER_8
reviews_eng_courses,pandas.read_csv('reviews_eng_courses.csv'),CLUSTER_0,CLUSTER_8
regex,"re.compile(""['A-Za-z\-]+"")",CLUSTER_0,CLUSTER_8
"train,test","sklearn.model_selection.train_test_split(balanced,test_size=0.2,random_state=42)",CLUSTER_0,CLUSTER_8
logreg,"sklearn.linear_model.LogisticRegression(n_jobs=1,C=1e5)",CLUSTER_0,CLUSTER_8
cnt,collections.Counter(lemmata),CLUSTER_0,CLUSTER_8
"digits,target",sklearn.datasets.load_digits(return_X_y=True),CLUSTER_5,CLUSTER_10
predictions,numpy.zeros(target_sample.size),CLUSTER_5,CLUSTER_10
indices_of_class,"numpy.concatenate((indices_of_class1[:min_length],indices_of_class2[:min_length])",CLUSTER_5,CLUSTER_10
indices_of_class1,numpy.nonzero(target==class1),CLUSTER_5,CLUSTER_10
indices_of_class2,numpy.nonzero(target==class2),CLUSTER_5,CLUSTER_10
car_sales_filled_train,"pandas.DataFrame(filled_X_train,
columns=[""Make"",""Colour"",""Doors"",""Odometer(KM)",CLUSTER_5,CLUSTER_5
car_sales_filled_test,"pandas.DataFrame(filled_X_test,
columns=[""Make"",""Colour"",""Doors"",""Odometer(KM)",CLUSTER_5,CLUSTER_5
boston_df,"pandas.DataFrame(boston[""data""],columns=boston[""feature_names""])",CLUSTER_5,CLUSTER_5
"boston_df[""target""]","pandas.Series(boston[""target""])",CLUSTER_5,CLUSTER_5
dummies,"pandas.get_dummies(car_sales[[""Make"",""Colour"",""Doors""]])",CLUSTER_5,CLUSTER_5
heart_disease,"pandas.read_csv(""heart-disease.csv"")",CLUSTER_5,CLUSTER_5
car_sales,"pandas.read_csv(""car-sales-extended.csv"")",CLUSTER_5,CLUSTER_5
car_sales_missing,"pandas.read_csv(""car-sales-extended-missing-data.csv"")",CLUSTER_5,CLUSTER_5
car_sales_missing,"pandas.read_csv(""car-sales-extended-missing-data.csv"")",CLUSTER_5,CLUSTER_5
heart_disease,"pandas.read_csv(""heart-disease.csv"")",CLUSTER_5,CLUSTER_5
clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_5,CLUSTER_5
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=i),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(transformed_X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_5
model,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
model,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
one_hot,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
one_hot,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
one_hot,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
one_hot,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
transformer,"sklearn.compose.ColumnTransformer([(""one_hot"",one_hot,categorical_features)",CLUSTER_5,CLUSTER_5
transformer,"sklearn.compose.ColumnTransformer([(""one_hot"",one_hot,categorical_features)",CLUSTER_5,CLUSTER_5
transformer,"sklearn.compose.ColumnTransformer([(""one_hot"",one_hot,categorical_features)",CLUSTER_5,CLUSTER_5
imputer,"sklearn.compose.ColumnTransformer([
(""cat_imputer"",cat_imputer,cat_features)",CLUSTER_5,CLUSTER_5
transformer,"sklearn.compose.ColumnTransformer([(""one_hot"",one_hot,categorical_features)",CLUSTER_5,CLUSTER_5
cat_imputer,"sklearn.impute.SimpleImputer(strategy=""constant"",fill_value=""missing"")",CLUSTER_5,CLUSTER_5
door_imputer,"sklearn.impute.SimpleImputer(strategy=""constant"",fill_value=4)",CLUSTER_5,CLUSTER_5
num_imputer,"sklearn.impute.SimpleImputer(strategy=""mean"")",CLUSTER_5,CLUSTER_5
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.Ridge(),CLUSTER_5,CLUSTER_5
clf,sklearn.svm.LinearSVC(dual=False),CLUSTER_5,CLUSTER_5
relative_value,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
relative_value_by_countries,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
relative_value,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
relative_value_by_countries,pandas.DataFrame(),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_train),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_train),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_train),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result_comparison,pandas.DataFrame(y_test),CLUSTER_4,CLUSTER_8
result,pandas.DataFrame(predictions),CLUSTER_4,CLUSTER_8
CATEGORICAL_VARIABLES,pandas.Series(X_full.columns[X_full.apply(lambdax:(type(x.iloc[0]),CLUSTER_4,CLUSTER_8
X_full,"pandas.concat([X,final_test])",CLUSTER_4,CLUSTER_8
X_full,"pandas.concat([X,final_test])",CLUSTER_4,CLUSTER_8
relative_value_by_countries,"pandas.concat([relative_value_by_countries,
relative_value_by_countries_columns],
axis=0)",CLUSTER_4,CLUSTER_8
relative_value_by_countries,"pandas.concat([relative_value_by_countries,
relative_value_by_countries_columns],
axis=0)",CLUSTER_4,CLUSTER_8
X_full,"pandas.get_dummies(X_full,columns=CATEGORICAL_VARIABLES,drop_first=True)",CLUSTER_4,CLUSTER_8
Y,"pandas.read_csv(PATH_DATA+""Y_train.csv"",sep="";"")",CLUSTER_4,CLUSTER_8
X,"pandas.read_csv(PATH_DATA+""Train.csv"",sep="";"")",CLUSTER_4,CLUSTER_8
final_test,"pandas.read_csv(PATH_DATA+""Test.csv"",sep="";"")",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
(""imputer"",Imputer()",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
random_search,"sklearn.model_selection.RandomizedSearchCV(pipe,param_distributions=param_dist,
n_iter=N_ITER_SEARCH_lr,n_jobs=N_JOBS,scoring=""roc_auc"")",CLUSTER_4,CLUSTER_8
new_data,"pandas.DataFrame(data=data,columns=['Country','Year','Status',
'BMI','winsorized_Adult_Mortality',
'winsorized_Infant_Deaths','winsorized_Alcohol',
'winsorized_Percentage_Exp','winsorized_HepatitisB',
'winsorized_Under_Five_Deaths','winsorized_Polio',
'winsorized_Tot_Exp','winsorized_Diphtheria','winsorized_HIV',
'winsorized_GDP','winsorized_Population',
'winsorized_thinness_10_19_years','winsorized_thinness_5_9_years',
'winsorized_Income_Comp_Of_Resources','winsorized_Schooling',
'winsorized_Measles',
'winsorized_Life_Expectancy'])",CLUSTER_7,CLUSTER_8
Y,"pandas.DataFrame(data=new_data,columns=['Life_Expectancy'])",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('/content/drive/MyDrive/Smartbrige/LifeExpectancyData.csv'),CLUSTER_7,CLUSTER_8
data,pandas.read_csv(body),CLUSTER_7,CLUSTER_8
"q75,q25","numpy.percentile(data[variable],[75,25])",CLUSTER_7,CLUSTER_8
"q75,q25","numpy.percentile(variable,[75,25])",CLUSTER_7,CLUSTER_8
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_8
preprocessor,"sklearn.compose.ColumnTransformer(
transformers=[
('cat',categorical_transformer,categorical_features)",CLUSTER_7,CLUSTER_8
models,"collections.OrderedDict([
(""LinearRegression"",Pipeline([
('preprocessor',preprocessor)",CLUSTER_7,CLUSTER_8
scores,collections.OrderedDict(sorted(scores.items(),CLUSTER_7,CLUSTER_8
scores[name],sklearn.metrics.r2_score(model.predict(X_test),CLUSTER_7,CLUSTER_8
categorical_transformer,"sklearn.pipeline.Pipeline(steps=[
('onehot',OneHotEncoder(handle_unknown='ignore')",CLUSTER_7,CLUSTER_8
numeric_transformer,"sklearn.pipeline.Pipeline(steps=[
('imputer',SimpleImputer(strategy='median')",CLUSTER_7,CLUSTER_8
RFRegressor,"sklearn.pipeline.Pipeline([
('preprocessor',preprocessor)",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(ID,columns=['businessID'])",CLUSTER_9,CLUSTER_2
data_final,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
dataset,pandas.DataFrame([data]),CLUSTER_9,CLUSTER_2
data_final,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
dataset,pandas.DataFrame([data]),CLUSTER_9,CLUSTER_2
data_final,"pandas.concat([dataset,data_final],axis=0)",CLUSTER_9,CLUSTER_2
data_final,"pandas.concat([dataset,data_final],axis=0)",CLUSTER_9,CLUSTER_2
df,pandas.read_pickle('business_ID'),CLUSTER_9,CLUSTER_2
response,"requests.get(url,headers=headers,params=PARAMETERS)",CLUSTER_9,CLUSTER_2
res,"requests.get(url_rev,headers=headers)",CLUSTER_9,CLUSTER_2
res_new,"requests.get(url_rev,headers=headers)",CLUSTER_9,CLUSTER_2
df_bow_origin,pandas.DataFrame(bows[ori]),CLUSTER_0,CLUSTER_9
df_tfidf,pandas.DataFrame(model[bows[ori]]),CLUSTER_0,CLUSTER_9
sim_df,pandas.DataFrame(list(sims),CLUSTER_0,CLUSTER_9
important_words,json.load(f),CLUSTER_1,CLUSTER_10
coefficients,numpy.array(initial_coefficients),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
initial_coefficients,numpy.zeros(194),CLUSTER_1,CLUSTER_10
score,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
derivative,"numpy.dot(errors,feature)",CLUSTER_1,CLUSTER_10
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
scores,"numpy.dot(feature_matrix,coefficients)",CLUSTER_1,CLUSTER_10
lp,numpy.sum((indicator-1),CLUSTER_1,CLUSTER_10
apply_threshold,numpy.vectorize(lambdax:1.ifx>0else-1.),CLUSTER_1,CLUSTER_10
cmap_positive,matplotlib.pyplot.get_cmap('Reds'),CLUSTER_1,CLUSTER_10
cmap_negative,matplotlib.pyplot.get_cmap('Blues'),CLUSTER_1,CLUSTER_10
df,pandas.read_csv('../input/RegularSeasonDetailedResults.csv'),CLUSTER_4,CLUSTER_11
ax,"matplotlib.pyplot.subplot(111,polar=True)",CLUSTER_4,CLUSTER_11
state_zero,numpy.array([1ifi==0else0foriinrange(G.number_of_nodes(),CLUSTER_2,CLUSTER_10
state,"numpy.reshape(state,[1,num_states])",CLUSTER_2,CLUSTER_10
next_state,"numpy.reshape(next_state,[1,num_states])",CLUSTER_2,CLUSTER_10
df_accidentes,"pandas.read_csv(""X.csv"")",CLUSTER_7,CLUSTER_1
kmeans,sklearn.cluster.KMeans(n_clusters=2),CLUSTER_7,CLUSTER_1
app_train,pandas.read_csv(f_app),CLUSTER_8,CLUSTER_11
all_embs,numpy.stack(embeddings_index.values(),CLUSTER_0,CLUSTER_8
out_df,"pandas.DataFrame({""qid"":test_df[""qid""].values})",CLUSTER_0,CLUSTER_8
train_df,"pandas.read_csv(""../input/train.csv"")",CLUSTER_0,CLUSTER_8
test_df,"pandas.read_csv(""../input/test.csv"")",CLUSTER_0,CLUSTER_8
"train_df,val_df","sklearn.model_selection.train_test_split(train_df,test_size=0.08,random_state=2018)",CLUSTER_0,CLUSTER_8
state_value,"numpy.mean([self.get_qvalue(state,action)",CLUSTER_12,CLUSTER_11
df,pandas.read_csv('yelp800K.csv'),CLUSTER_0,CLUSTER_8
roc,numpy.array([]),CLUSTER_0,CLUSTER_8
roc,"numpy.append(roc,round(roc_auc_score(ytest,pred)",CLUSTER_0,CLUSTER_8
vocab,collections.Counter(),CLUSTER_0,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(sequences,labels,test_size=0.2,random_state=42)",CLUSTER_0,CLUSTER_8
"fpr,tpr,threshold","sklearn.metrics.roc_curve(ytest,pred)",CLUSTER_0,CLUSTER_8
lstm_score,"sklearn.metrics.f1_score(y_test,model_1.predict_classes(x_test)",CLUSTER_0,CLUSTER_8
BiLSTM_score,"sklearn.metrics.f1_score(y_test,model_2.predict_classes(x_test)",CLUSTER_0,CLUSTER_8
data,sklearn.datasets.load_files(path),CLUSTER_4,CLUSTER_0
dog_files,numpy.array(data['filenames']),CLUSTER_4,CLUSTER_0
human_files,"numpy.array(glob(""lfw/lfw/*/*"")",CLUSTER_4,CLUSTER_0
prediction,numpy.argmax(model.predict(img_tensor),CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(dog_breed_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(VGG16_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(xception_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
bottleneck_features,numpy.load('bottleneck_features/DogVGG16Data.npz'),CLUSTER_4,CLUSTER_0
bottleneck_features,numpy.load('bottleneck_features/DogXceptionData.npz'),CLUSTER_4,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,)",CLUSTER_4,CLUSTER_0
"X,y","sklearn.datasets.make_classification(
n_samples=10000,n_features=10,n_informative=5,n_redundant=5,
random_state=42)",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,test_size=0.3,random_state=42)",CLUSTER_8,CLUSTER_1
SVM_classifier,sklearn.svm.LinearSVC(),CLUSTER_8,CLUSTER_1
model,sklearn.svm.LinearSVC(),CLUSTER_8,CLUSTER_1
"fpr,tpr,tresh","sklearn.metrics.roc_curve(y_test,probs)",CLUSTER_8,CLUSTER_1
calibrated,"sklearn.calibration.CalibratedClassifierCV(model,method='sigmoid',cv=5)",CLUSTER_8,CLUSTER_1
"fraction,mean","sklearn.calibration.calibration_curve(y_test,probs,n_bins=20)",CLUSTER_8,CLUSTER_1
"fop,mpv","sklearn.calibration.calibration_curve(y_test,probs,n_bins=15,normalize=True)",CLUSTER_8,CLUSTER_1
df,pandas.read_csv(original_data),CLUSTER_8,CLUSTER_3
origin,pandas.read_csv(original_data),CLUSTER_8,CLUSTER_3
stolen,pandas.read_csv(output_file),CLUSTER_8,CLUSTER_3
origin,pandas.read_csv(original_data),CLUSTER_8,CLUSTER_3
origin,pandas.read_csv(original_data),CLUSTER_8,CLUSTER_3
df,"pandas.concat(dfs,axis=1,keys=keys)",CLUSTER_12,CLUSTER_11
df,"pandas.concat(dfs,axis=1,keys=keys)",CLUSTER_12,CLUSTER_11
df,"pandas.read_csv(path_csv,sep=r'\s+')",CLUSTER_12,CLUSTER_11
arr,"numpy.arange(1,60)",CLUSTER_1,CLUSTER_3
y_data,numpy.array([[0]]*20+[[1]]*20+[[2]]*20),CLUSTER_1,CLUSTER_3
batch_s,numpy.empty(shape),CLUSTER_1,CLUSTER_3
x_data_temp,"numpy.vstack((x_data_temp,x_data[i*50000:(i+1)",CLUSTER_1,CLUSTER_3
y_data_temp,"numpy.vstack((y_data_temp,y_data[i:i+1])",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccX_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccY_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccZ_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Cur_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Son_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Vol_""+str(i*6)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccX_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccY_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_AccZ_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Cur_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Son_""+str(i)",CLUSTER_1,CLUSTER_3
Data,"numpy.loadtxt(""data/signal/Result_Vol_""+str(i)",CLUSTER_1,CLUSTER_3
data_all,"numpy.loadtxt(""data_all"",delimiter="","",dtype=np.float32,skiprows=1)",CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(data),CLUSTER_1,CLUSTER_3
evs,numpy.linalg.eigvals(a),CLUSTER_3,CLUSTER_6
cost,numpy.squeeze(cost),CLUSTER_1,CLUSTER_10
reviews,pandas.read_csv(fp),CLUSTER_0,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
reviews['final_review'],reviews['Rating'],test_size=0.25)",CLUSTER_0,CLUSTER_11
tag_map,collections.defaultdict(lambda:wn.NOUN),CLUSTER_0,CLUSTER_11
SVM,sklearn.svm.LinearSVC(),CLUSTER_0,CLUSTER_11
grid,"sklearn.model_selection.GridSearchCV(SVM,parameters,cv=3)",CLUSTER_0,CLUSTER_11
train,"numpy.array(train_df,dtype='float32')",CLUSTER_4,CLUSTER_0
test,"numpy.array(test_df,dtype='float32')",CLUSTER_4,CLUSTER_0
train_df,pandas.read_csv('../input/fashionmnist/fashion-mnist_train.csv'),CLUSTER_4,CLUSTER_0
test_df,pandas.read_csv('../input/fashionmnist/fashion-mnist_test.csv'),CLUSTER_4,CLUSTER_0
"X_train,X_validate,y_train,y_validate","sklearn.model_selection.train_test_split(x_train,y_train,test_size=0.2,random_state=5000)",CLUSTER_4,CLUSTER_0
preds,numpy.exp(preds),CLUSTER_5,CLUSTER_1
y_train,numpy.log1p(train['price']+1),CLUSTER_5,CLUSTER_1
train,pandas.read_table('../../dat/train.tsv'),CLUSTER_5,CLUSTER_1
test,pandas.read_table('../../dat/test.tsv'),CLUSTER_5,CLUSTER_1
cv,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=42)",CLUSTER_5,CLUSTER_1
model,"sklearn.linear_model.Ridge(
solver='auto',
fit_intercept=True,
alpha=0.5,
max_iter=100,
normalize=False,
tol=0.05)",CLUSTER_5,CLUSTER_1
vectorizer,"sklearn.pipeline.FeatureUnion([
('name',CountVectorizer(
ngram_range=(1,2)",CLUSTER_5,CLUSTER_1
vectorizer,"sklearn.pipeline.FeatureUnion([
('name',CountVectorizer(
ngram_range=(1,2)",CLUSTER_5,CLUSTER_1
dummies,"pandas.get_dummies(data_obj.Embarked,prefix=""Embarked"")",CLUSTER_7,CLUSTER_3
data,"pandas.read_csv(""https://raw.githubusercontent.com/HrantDavtyan/Data_Scraping/master/Week%202/Datasets/Titanic.csv"")",CLUSTER_7,CLUSTER_3
data_obj.Sex,"numpy.where(data_obj.Sex==""male"",1,0)",CLUSTER_7,CLUSTER_3
data_x,"numpy.arange(30,181,30)",CLUSTER_1,CLUSTER_10
control,"numpy.array([24,23.3,23.8,23.5,23.6,23.4])",CLUSTER_1,CLUSTER_10
col,"numpy.array([u'
labels=numpy.array([""5\u03BCg/ml"",""10\u03BCg/ml"",""15\u03BCg/ml"",
""20\u03BCg/ml"",""40\u03BCg/ml"",""50\u03BCg/ml"",""80\u03BCg/ml""])",CLUSTER_1,CLUSTER_10
data_y_corr,numpy.zeros(len(data_y),CLUSTER_1,CLUSTER_10
mean_x,numpy.mean(data_x),CLUSTER_1,CLUSTER_10
mean_y,numpy.mean(data_y),CLUSTER_1,CLUSTER_10
m,numpy.sum((data_y-mean_y),CLUSTER_1,CLUSTER_10
D_calc,numpy.sum((data_x-mean_x),CLUSTER_1,CLUSTER_10
sum_d2,numpy.sum((data_y-m*data_x-c),CLUSTER_1,CLUSTER_10
dm,numpy.sqrt(sum_d2/(D_calc*(n-2),CLUSTER_1,CLUSTER_10
dc,numpy.sqrt(((1/n),CLUSTER_1,CLUSTER_10
fit_x,numpy.linspace(np.min(data_x),CLUSTER_1,CLUSTER_10
"concentration,data_y","numpy.loadtxt(""ZnFeO_small_yellow.csv"",delimiter=';',unpack=True)",CLUSTER_1,CLUSTER_10
scaled_df,"pandas.DataFrame(scaled_df,columns=colnames)",CLUSTER_6,CLUSTER_5
scaled_df1,"pandas.DataFrame(scaled_df1,columns=colnames)",CLUSTER_6,CLUSTER_5
scaled_df2,"pandas.DataFrame(scaled_df2,columns=colnames)",CLUSTER_6,CLUSTER_5
train_df,"pandas.read_csv(os.path.join(DIR,'netflow_day-03.csv')",CLUSTER_6,CLUSTER_5
train_df,"pandas.read_csv(os.path.join(DIR,'netflow_day-03.csv')",CLUSTER_6,CLUSTER_5
"x_train,x_valid,y_train,y_valid","sklearn.model_selection.train_test_split(train_df.iloc[:100000],train_df.iloc[:100000],test_size=0.33,random_state=42)",CLUSTER_6,CLUSTER_5
"x_train,x_valid,y_train,y_valid","sklearn.model_selection.train_test_split(scaled_df1.iloc[:100000],scaled_df1.iloc[:100000],test_size=0.33,random_state=42)",CLUSTER_6,CLUSTER_5
"x_train,x_valid,y_train,y_valid","sklearn.model_selection.train_test_split(scaled_df1.iloc[:100000],scaled_df1.iloc[:100000],test_size=0.33,random_state=42)",CLUSTER_6,CLUSTER_5
loss_hist,numpy.zeros(epochs),CLUSTER_6,CLUSTER_5
val_loss_hist,numpy.zeros(epochs),CLUSTER_6,CLUSTER_5
val_loss,"numpy.sum(np.multiply(losses,nums)",CLUSTER_6,CLUSTER_5
val_loss,"numpy.sum(np.multiply(losses,nums)",CLUSTER_6,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_6,CLUSTER_5
scaler1,sklearn.preprocessing.MinMaxScaler(),CLUSTER_6,CLUSTER_5
scaler2,sklearn.preprocessing.RobustScaler(),CLUSTER_6,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_5
"fig,(ax1,ax2,ax3,ax4)","matplotlib.pyplot.subplots(ncols=4,figsize=(16,5)",CLUSTER_6,CLUSTER_5
normalised_df,"pandas.DataFrame(index=np.arange(1,13,1)",CLUSTER_1,CLUSTER_10
normalized_moviebyyear_df,pandas.DataFrame(),CLUSTER_1,CLUSTER_10
movies_df,pandas.read_csv('tmdb-movies.csv'),CLUSTER_1,CLUSTER_10
normalised_df,"pd.DataFrame(index=numpy.arange(1,13,1)",CLUSTER_1,CLUSTER_10
df,"pandas.read_csv(DATA_DIR/'stumbleupon.tsv',sep='\t')",CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(n_estimators=20),CLUSTER_7,CLUSTER_5
levels,numpy.arange(n_classes+1),CLUSTER_7,CLUSTER_5
fast_oscillation,numpy.sin(5*x),CLUSTER_7,CLUSTER_5
slow_oscillation,numpy.sin(0.5*x),CLUSTER_7,CLUSTER_5
xfit,"numpy.linspace(0,10,1000)",CLUSTER_7,CLUSTER_5
"xx,yy","numpy.meshgrid(np.linspace(*xlim,num=200)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_7,CLUSTER_5
"X,y","sklearn.datasets.make_blobs(n_samples=300,centers=4,
random_state=0,cluster_std=1.0)",CLUSTER_7,CLUSTER_5
tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
bag,"sklearn.ensemble.BaggingClassifier(tree,n_estimators=100,max_samples=0.8,
random_state=1)",CLUSTER_7,CLUSTER_5
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=0)",CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(n_estimators=1000),CLUSTER_7,CLUSTER_5
forest,sklearn.ensemble.RandomForestRegressor(200),CLUSTER_7,CLUSTER_5
digits,sklearn.datasets.load_digits(),CLUSTER_7,CLUSTER_5
mat,"sklearn.metrics.confusion_matrix(ytest,ypred)",CLUSTER_7,CLUSTER_5
"X,y",sklearn.datasets.make_classification(n_samples=80000),CLUSTER_5,CLUSTER_10
rt_lm,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
rf_lm,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
grd_lm,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
rf,"sklearn.ensemble.RandomForestClassifier(max_depth=3,n_estimators=n_estimator)",CLUSTER_5,CLUSTER_10
rf_enc,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_10
grd_enc,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.5)",CLUSTER_5,CLUSTER_10
"X_train,X_train_lr,y_train,y_train_lr","sklearn.model_selection.train_test_split(X_train,
y_train,
test_size=0.5)",CLUSTER_5,CLUSTER_10
"fpr_rt_lm,tpr_rt_lm,_","sklearn.metrics.roc_curve(y_test,y_pred_rt)",CLUSTER_5,CLUSTER_10
"fpr_rf_lm,tpr_rf_lm,_","sklearn.metrics.roc_curve(y_test,y_pred_rf_lm)",CLUSTER_5,CLUSTER_10
"fpr_grd_lm,tpr_grd_lm,_","sklearn.metrics.roc_curve(y_test,y_pred_grd_lm)",CLUSTER_5,CLUSTER_10
"fpr_grd,tpr_grd,_","sklearn.metrics.roc_curve(y_test,y_pred_grd)",CLUSTER_5,CLUSTER_10
"fpr_rf,tpr_rf,_","sklearn.metrics.roc_curve(y_test,y_pred_rf)",CLUSTER_5,CLUSTER_10
pipeline,"sklearn.pipeline.make_pipeline(rt,rt_lm)",CLUSTER_5,CLUSTER_10
stars,"pandas.qcut(res[(""mean_score"",""Score"")",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""happiness.csv"")",CLUSTER_8,CLUSTER_3
a,"numpy.eye(4,k=1)",CLUSTER_3,CLUSTER_6
t_train,numpy.eye(10),CLUSTER_2,CLUSTER_7
t_test,numpy.eye(10),CLUSTER_2,CLUSTER_7
brand_mean_price_mileage,"pandas.DataFrame(mean_mileage,columns=['mean_mileage'])",CLUSTER_8,CLUSTER_4
bmp_series,pandas.Series(brand_mean_price),CLUSTER_8,CLUSTER_4
mean_price,pandas.Series(brand_mean_price),CLUSTER_8,CLUSTER_4
mean_mileage,pandas.Series(brand_mean_mileage),CLUSTER_8,CLUSTER_4
autos,"pandas.read_csv(""autos.csv"",encoding=""Latin-1"")",CLUSTER_8,CLUSTER_4
roll,"random.randint(1,6)",CLUSTER_3,CLUSTER_10
x,"numpy.linspace(0,1,300)",CLUSTER_3,CLUSTER_10
"v[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"v[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
"v[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"v[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
"s[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"s[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
num_complete_minibatches,math.floor(m/mini_batch_size),CLUSTER_5,CLUSTER_9
rvotes,"re.compile(r'<ahref=""\/film\/.*\/votes\/"">\s*\d{1,2}\.\d{1,2}')",CLUSTER_9,CLUSTER_2
rrate,"re.compile(r'\d{1,2}\.\d{1,2}')",CLUSTER_9,CLUSTER_2
response,"requests.get(url,headers={'User-Afent':header})",CLUSTER_9,CLUSTER_2
df,"pandas.read_json('resources/News_Category_Dataset_v2.json',lines=True)",CLUSTER_5,CLUSTER_1
pipe,"sklearn.pipeline.Pipeline([(""cleaner"",predictors()",CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_5,CLUSTER_1
classifier,sklearn.linear_model.LogisticRegression(max_iter=4000),CLUSTER_5,CLUSTER_1
grid_search,"sklearn.model_selection.GridSearchCV(pipe,param_grid=new_grid,n_jobs=1,cv=3,verbose=3,refit=True)",CLUSTER_5,CLUSTER_1
tables,pandas.DataFrame(tables[1]),CLUSTER_9,CLUSTER_2
tables,pandas.read_html(url_facts),CLUSTER_9,CLUSTER_2
file_df,"pandas.DataFrame(data_list[1:],columns=data_list[0])",CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(25,10)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(25,10)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(25,10)",CLUSTER_4,CLUSTER_11
output_df,pandas.DataFrame(Income_dict.values(),CLUSTER_8,CLUSTER_1
Algo_input,"pandas.read_csv(""Algo_data_input.csv"")",CLUSTER_8,CLUSTER_1
wage_join,"pandas.to_numeric(''.join(map(str,living_wage_split)",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,target,random_state=42)",CLUSTER_8,CLUSTER_1
model,sklearn.svm.SVC(kernel='linear'),CLUSTER_8,CLUSTER_1
Q_optimal,"numpy.array(Q_optimal,dtype=np.float32)",CLUSTER_7,CLUSTER_8
next_actions,numpy.zeros([len(next_states),CLUSTER_7,CLUSTER_8
next_state_next_action,numpy.zeros([np.shape(next_states),CLUSTER_7,CLUSTER_8
best_actions,numpy.zeros([np.shape(train),CLUSTER_7,CLUSTER_8
Q_predicted,numpy.zeros([np.shape(train),CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='C',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='U',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='J',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='A',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
df['GENDER'],"numpy.where(df['GENDER']=='',df['GENDER'].mode()",CLUSTER_7,CLUSTER_8
n_nodes_hl1,numpy.shape(train),CLUSTER_7,CLUSTER_8
n_nodes_hl2,numpy.shape(train),CLUSTER_7,CLUSTER_8
NUM_STATES,numpy.shape(train),CLUSTER_7,CLUSTER_8
NUM_DIM,numpy.shape(train),CLUSTER_7,CLUSTER_8
num_nodes,numpy.shape(train),CLUSTER_7,CLUSTER_8
next_actions,"numpy.delete(next_actions,-1,axis=1)",CLUSTER_7,CLUSTER_8
"train,test","sklearn.model_selection.train_test_split(df,test_size=0.5)",CLUSTER_7,CLUSTER_8
df[data[i]],pandas.Categorical((pd.factorize(df[data[i]]),CLUSTER_7,CLUSTER_8
train[rewards[i]],pandas.Categorical((pd.factorize(train[rewards[i]]),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(df),CLUSTER_7,CLUSTER_8
curr_state_current_action,"pandas.DataFrame(np.column_stack((current_states,train[actions])",CLUSTER_7,CLUSTER_8
next_state_next_action0,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,0])",CLUSTER_7,CLUSTER_8
next_state_next_action1,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,1])",CLUSTER_7,CLUSTER_8
next_state_next_action2,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,2])",CLUSTER_7,CLUSTER_8
next_state_next_action3,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,3])",CLUSTER_7,CLUSTER_8
next_state_next_action4,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,4])",CLUSTER_7,CLUSTER_8
next_state_next_action5,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,5])",CLUSTER_7,CLUSTER_8
next_state_next_action6,"pandas.DataFrame(np.column_stack((next_states,next_actions[:,6])",CLUSTER_7,CLUSTER_8
med_age,pandas.DataFrame(),CLUSTER_7,CLUSTER_5
sub,"pandas.DataFrame({'PassengerId':PassengerId,'Survived':prediction})",CLUSTER_7,CLUSTER_5
train_df['Cabin'],pandas.Series([i[0]ifpd.notnull(i),CLUSTER_7,CLUSTER_5
test_df['Cabin'],pandas.Series([i[0]ifpd.notnull(i),CLUSTER_7,CLUSTER_5
dataset['AgeBin'],"pandas.cut(dataset['Age'],5,labels=[1,2,3,4,5])",CLUSTER_7,CLUSTER_5
train_df,"pandas.get_dummies(train_df,columns=['Sex','Embarked','Pclass','Title','AgeBin','FareBin','Cabin'],drop_first=True)",CLUSTER_7,CLUSTER_5
test_df,"pandas.get_dummies(test_df,columns=['Sex','Embarked','Pclass','Title','AgeBin','FareBin','Cabin'],drop_first=True)",CLUSTER_7,CLUSTER_5
dataset['FareBin'],"pandas.qcut(dataset['Fare'],4,labels=[1,2,3,4])",CLUSTER_7,CLUSTER_5
train_df,pandas.read_csv('../input/train.csv'),CLUSTER_7,CLUSTER_5
gen_df,pandas.read_csv('../input/gender_submission.csv'),CLUSTER_7,CLUSTER_5
test_df,pandas.read_csv('../input/test.csv'),CLUSTER_7,CLUSTER_5
ageplt,"seaborn.FacetGrid(train_df,hue='Survived',aspect=4)",CLUSTER_7,CLUSTER_5
fareplt,"seaborn.FacetGrid(train_df,hue='Survived',aspect=5)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.20,random_state=1)",CLUSTER_7,CLUSTER_5
rmodel,sklearn.ensemble.RandomForestClassifier(n_estimators=50),CLUSTER_7,CLUSTER_5
voting,"sklearn.ensemble.VotingClassifier(estimators=[('logi',logmodel)",CLUSTER_7,CLUSTER_5
amodel,sklearn.ensemble.AdaBoostClassifier(n_estimators=100),CLUSTER_7,CLUSTER_5
gmodel,sklearn.ensemble.GradientBoostingClassifier(n_estimators=100),CLUSTER_7,CLUSTER_5
logmodel,sklearn.linear_model.LogisticRegression(max_iter=100),CLUSTER_7,CLUSTER_5
modelsvc,"sklearn.svm.SVC(probability=True,gamma='auto')",CLUSTER_7,CLUSTER_5
dmodel,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
img,"numpy.empty([h,w,3])",CLUSTER_8,CLUSTER_3
GRAY_IM,"numpy.empty([h,w])",CLUSTER_8,CLUSTER_3
Matrix_TEST,numpy.load(filename_Matrix_TEST),CLUSTER_8,CLUSTER_3
classFrequencies,numpy.zeros(K),CLUSTER_1,CLUSTER_10
theta,"numpy.zeros((K,dim)",CLUSTER_1,CLUSTER_10
ordre,numpy.argsort(labels_for_final_accuracy_measurement),CLUSTER_1,CLUSTER_10
"affectations[:,i]/","numpy.sum(affectations[:,i])",CLUSTER_1,CLUSTER_10
LogLikelihood,"numpy.log(np.max(affectations,axis=0)",CLUSTER_1,CLUSTER_10
df,pandas.DataFrame(dict),CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(filedict),CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(filedict),CLUSTER_1,CLUSTER_3
obj,"pandas.Series([4,7,-5,3])",CLUSTER_1,CLUSTER_3
obj2,"pandas.Series([4,7,-5,3],index=['d','b','a','c'])",CLUSTER_1,CLUSTER_3
df,pandas.read_csv(filename),CLUSTER_1,CLUSTER_3
categorical_sample_points,"numpy.arange(0,10)",CLUSTER_4,CLUSTER_7
tiled_images,"numpy.concatenate(image_rows,axis=1)",CLUSTER_4,CLUSTER_7
continuous_sample_points,"numpy.linspace(-1.0,1.0,10)",CLUSTER_4,CLUSTER_7
start_time,time.time(),CLUSTER_4,CLUSTER_7
start_time,time.time(),CLUSTER_4,CLUSTER_7
start_time,time.time(),CLUSTER_4,CLUSTER_7
start_time,time.time(),CLUSTER_4,CLUSTER_7
X0,"numpy.array((1,2)",CLUSTER_1,CLUSTER_9
tspan,"numpy.array((0,40)",CLUSTER_1,CLUSTER_9
X0,"numpy.array([2,0])",CLUSTER_1,CLUSTER_9
tspan,"numpy.array([0,40])",CLUSTER_1,CLUSTER_9
X0,"numpy.array([2,0])",CLUSTER_1,CLUSTER_9
tspan,"numpy.array([0,40])",CLUSTER_1,CLUSTER_9
dt,numpy.zeros(len(te),CLUSTER_1,CLUSTER_9
"teval,h","numpy.linspace(*tspan,500,retstep=True)",CLUSTER_1,CLUSTER_9
"teval,h","numpy.linspace(*tspan,1500,retstep=True)",CLUSTER_1,CLUSTER_9
"teval,h","numpy.linspace(*tspan,1500,retstep=True)",CLUSTER_1,CLUSTER_9
periods,numpy.diff(sol.t_events[0]),CLUSTER_1,CLUSTER_9
periods,numpy.diff(sol.t_events[0]),CLUSTER_1,CLUSTER_9
periods,numpy.diff(sol.t_events[0]),CLUSTER_1,CLUSTER_9
d,numpy.diff(periods),CLUSTER_1,CLUSTER_9
periods,numpy.diff(sol.t_events[0]),CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,X0,max_step=h)",CLUSTER_1,CLUSTER_9
sol2,"scipy.integrate.solve_ivp(dXdt,tspan,sol.y[:,-1],max_step=h)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,X0,max_step=h,events=[max_x_event,min_x_event],
dense_output=True)",CLUSTER_1,CLUSTER_9
sol2,"scipy.integrate.solve_ivp(dXdt,tspan,X0,max_step=h,events=max_x_event)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,X0,max_step=h,events=max_x_event,dense_output=True)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,last_step,max_step=h,events=max_x_event,dense_output=True)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(ode,tspan,X0,max_step=h,events=max_x_event,dense_output=True)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.solve_ivp(dXdt,tspan,last_step,max_step=h,events=max_x_event,dense_output=True)",CLUSTER_1,CLUSTER_9
TitanicRawData,pandas.read_csv(url),CLUSTER_5,CLUSTER_1
TitanicRawData,pandas.read_csv(url),CLUSTER_5,CLUSTER_1
TitanicRawData,pandas.read_csv(url),CLUSTER_5,CLUSTER_1
TitanicRawData['age'].fillna(value,numpy.mean(TitanicRawData['age']),CLUSTER_5,CLUSTER_1
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
pvals,"sklearn.feature_selection.f_regression(X,y)",CLUSTER_5,CLUSTER_1
y_train,numpy.array(moviecomments['Y'][:5000]),CLUSTER_4,CLUSTER_1
y_test,numpy.array(moviecomments['Y'][5000:size]),CLUSTER_4,CLUSTER_1
y_last,numpy.array(moviecomments['Y'][size:]),CLUSTER_4,CLUSTER_1
naverdata,"pandas.read_csv(""/kaggle/input/dfc615k/ko_data.csv"",sep="","",encoding=""ms949"")",CLUSTER_4,CLUSTER_1
naversample,"pandas.read_csv(""/kaggle/input/dfc615k/ko_sample.csv"",sep="","",encoding=""ms949"")",CLUSTER_4,CLUSTER_1
moviecomments,"pandas.read_csv(""/kaggle/input/naverdata3/naverfile3.csv"",sep="","")",CLUSTER_4,CLUSTER_1
cm,sklearn.metrics.confusion_matrix([to_bool(x),CLUSTER_4,CLUSTER_1
"sns.heatmap(cm,cmap","seaborn.light_palette(
""navy"",as_cmap=True)",CLUSTER_4,CLUSTER_1
ground_truth_communities,"pandas.read_csv(base_dir+""email-Eu-core-department-labels.txt"",header=None,names=['node','community'],sep='\s+')",CLUSTER_12,CLUSTER_11
particles,"pandas.read_csv(base_dir+""eu.csv"")",CLUSTER_12,CLUSTER_11
persons,"pandas.read_csv(base_dir+""persons.csv"")",CLUSTER_12,CLUSTER_11
boston_df,pandas.read_csv('boston.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=0)",CLUSTER_5,CLUSTER_5
rl_model,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
li,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
li_pca,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
lscv,sklearn.linear_model.LassoCV(),CLUSTER_5,CLUSTER_5
models,"sklearn.feature_selection.SelectFromModel(lscv,prefit=True)",CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_5
df['Semester'],"numpy.where(df['Quarter'].isin([1,2])",CLUSTER_5,CLUSTER_5
df['Is_weekend'],"numpy.where(df['Dayofweek'].isin([5,6])",CLUSTER_5,CLUSTER_5
df['Is_weekday'],"numpy.where(df['Dayofweek'].isin([0,1,2,3,4])",CLUSTER_5,CLUSTER_5
sub['Vehicles'],numpy.expm1(pred),CLUSTER_5,CLUSTER_5
train['Vehicles'],numpy.log1p(train['Vehicles']),CLUSTER_5,CLUSTER_5
train,"pandas.get_dummies(train,columns=[col])",CLUSTER_5,CLUSTER_5
test,"pandas.get_dummies(test,columns=[col])",CLUSTER_5,CLUSTER_5
train,"pandas.read_csv('train_aWnotuB.csv',parse_dates=['DateTime'])",CLUSTER_5,CLUSTER_5
test,"pandas.read_csv('test_BdBKkAj_L87Nc3S.csv',parse_dates=['DateTime'])",CLUSTER_5,CLUSTER_5
sub,pandas.read_csv('sample_submission_KVKNmI7.csv'),CLUSTER_5,CLUSTER_5
df['Year'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Month'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Day'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Dayofweek'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['DayOfyear'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Week'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Quarter'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_month_start'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_month_end'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_quarter_start'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_quarter_end'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_year_start'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Is_year_end'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
df['Hour'],pandas.to_datetime(df['DateTime']),CLUSTER_5,CLUSTER_5
"train_features,test_features,train_labels,test_labels","sklearn.model_selection.train_test_split(X,y,test_size=0.2,shuffle=True)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=figsize)",CLUSTER_5,CLUSTER_5
POLmonthyearERC,"pandas.read_csv('queries_results/Poland/POL_USA/POL-USAmonthyeareventRCcountSUMaToneAVGaTonne.csv',header=0,sep='*,*',dtype={'EventRootCode':str})",CLUSTER_7,CLUSTER_3
eventcodes,"pandas.read_csv('cameo.csv',header=0,dtype=str,sep='*,*')",CLUSTER_7,CLUSTER_3
"POLmonthyearERC[""Time""]","pandas.to_datetime(POLmonthyearERC['MonthYear'],format='%Y%m')",CLUSTER_7,CLUSTER_3
g,"seaborn.barplot(s.EVENTDESCRIPTION,s.Count,palette='rainbow')",CLUSTER_7,CLUSTER_3
convert,"numpy.ndarray((image.shape[0],image.shape[1])",CLUSTER_4,CLUSTER_6
temperature_store_df,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_feat_imp,pandas.DataFrame(gb_regressor.feature_importances_),CLUSTER_7,CLUSTER_8
plot_df,"pandas.DataFrame([test_dates,plot_y_pred,plot_y_test])",CLUSTER_7,CLUSTER_8
eval_df,"pandas.DataFrame([[mlp_pred,gru_pred,gru_drop_pred,gru_stack_pred,gb_val_pred[0],y_val[0]]])",CLUSTER_7,CLUSTER_8
xmas_data_df,"pandas.get_dummies(data=xmas_data_df,columns=['next_week'],prefix='nw')",CLUSTER_7,CLUSTER_8
stores_df,"pandas.get_dummies(data=stores_df,columns=['Type'],prefix='type')",CLUSTER_7,CLUSTER_8
merged_df,"pandas.merge(xmas_data_df,features_df,on=['Store','Date'])",CLUSTER_7,CLUSTER_8
merged_all_df,"pandas.merge(merged_df,stores_df,on='Store')",CLUSTER_7,CLUSTER_8
data_df,pandas.read_csv('./data/train.csv'),CLUSTER_7,CLUSTER_8
features_df,pandas.read_csv('./data/features.csv'),CLUSTER_7,CLUSTER_8
stores_df,pandas.read_csv('./data/stores.csv'),CLUSTER_7,CLUSTER_8
cpi_df.index,pandas.to_datetime(cpi_df.index),CLUSTER_7,CLUSTER_8
data_df.Date,pandas.to_datetime(data_df.Date),CLUSTER_7,CLUSTER_8
features_df.Date,pandas.to_datetime(features_df.Date),CLUSTER_7,CLUSTER_8
plot_df.Date,pandas.to_datetime(plot_df.Date),CLUSTER_7,CLUSTER_8
data_rows,"numpy.arange(lookback,data_np.shape[0]-delay)",CLUSTER_7,CLUSTER_8
X_np,numpy.zeros((len(data_rows),CLUSTER_7,CLUSTER_8
y_np,numpy.zeros((len(data_rows),CLUSTER_7,CLUSTER_8
mask,"numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_7,CLUSTER_8
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_7,CLUSTER_8
date_cutoff,"datetime.date(2011,12,30)",CLUSTER_7,CLUSTER_8
date_start_windowing,"datetime.date(2011,11,25)",CLUSTER_7,CLUSTER_8
date_validation_week,"datetime.date(2011,12,23)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
y_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=0.7,test_size=0.3,random_state=1,shuffle=False)",CLUSTER_7,CLUSTER_8
gb_regressor,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=400,random_state=1)",CLUSTER_7,CLUSTER_8
gb_mae,"sklearn.metrics.mean_absolute_error(tree_dict['1_1']['y_test'],tree_dict['1_1']['y_pred'])",CLUSTER_7,CLUSTER_8
store,"pandas.HDFStore('../output/sra.h5',mode='r')",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_11
X_src,"numpy.zeros((1,1)",CLUSTER_5,CLUSTER_9
X,"numpy.concatenate((np.random.normal(0,1,int(0.3*N)",CLUSTER_5,CLUSTER_9
X,"numpy.concatenate((np.random.normal(0,1,int(0.3*N)",CLUSTER_5,CLUSTER_9
X_plot,"numpy.linspace(-5,10,1000)",CLUSTER_5,CLUSTER_9
bins,"numpy.linspace(-5,10,10)",CLUSTER_5,CLUSTER_9
X_plot,"numpy.linspace(-6,6,1000)",CLUSTER_5,CLUSTER_9
X_plot,"numpy.linspace(-5,10,1000)",CLUSTER_5,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(2,2,sharex=True,sharey=True)",CLUSTER_5,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(2,3,sharex=True,sharey=True)",CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
kde,"sklearn.neighbors.KernelDensity(kernel='tophat',bandwidth=0.75)",CLUSTER_5,CLUSTER_9
kde,"sklearn.neighbors.KernelDensity(kernel='gaussian',bandwidth=0.75)",CLUSTER_5,CLUSTER_9
log_dens,sklearn.neighbors.KernelDensity(kernel=kernel),CLUSTER_5,CLUSTER_9
kde,"sklearn.neighbors.KernelDensity(kernel=kernel,bandwidth=0.5)",CLUSTER_5,CLUSTER_9
ax,matplotlib.pyplot.axes(projection=ccrs.PlateCarree(),CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('Examples/australia/data/WellCoordinates_250km_grid.csv'),CLUSTER_1,CLUSTER_3
frame,pandas.read_csv(recordings+date+filename),CLUSTER_8,CLUSTER_3
train_loss,numpy.zeros(niter),CLUSTER_4,CLUSTER_6
scratch_train_loss,numpy.zeros(niter),CLUSTER_4,CLUSTER_6
response,requests.get(dataset_url),CLUSTER_5,CLUSTER_9
x,numpy.array(filtered_df[exp_var]),CLUSTER_5,CLUSTER_9
y,numpy.array(filtered_df[int_var]),CLUSTER_5,CLUSTER_9
df,"pandas.DataFrame(dataframe,index=dataframe[""Index""])",CLUSTER_5,CLUSTER_9
"rho,p","scipy.stats.pearsonr(df[exp_var],df[int_var])",CLUSTER_5,CLUSTER_9
"rho,_","scipy.stats.pearsonr(filtered_df[exp_var],filtered_df[int_var])",CLUSTER_5,CLUSTER_9
zscores,scipy.stats.zscore(unfiltered_df[int_var]),CLUSTER_5,CLUSTER_9
model,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
song_df,"pandas.merge(song_df_1,song_df_2.drop_duplicates(['song_id'])",CLUSTER_5,CLUSTER_1
song_df_2,pandas.read_csv(songs_metadata_file),CLUSTER_5,CLUSTER_1
song_df_1,"pandas.read_table(triplets_file,header=None)",CLUSTER_5,CLUSTER_1
"train_data,test_data","sklearn.model_selection.train_test_split(song_df,test_size=0.20,random_state=0)",CLUSTER_5,CLUSTER_1
drinks,pandas.read_csv(url),CLUSTER_8,CLUSTER_4
drinks,"pandas.read_csv(url,dtype={'beer_servings':float})",CLUSTER_8,CLUSTER_4
orders,pandas.read_table(url),CLUSTER_8,CLUSTER_4
aug_hist_df,pandas.DataFrame(history_of_augmented_model.history),CLUSTER_1,CLUSTER_3
nonaug_hist_df,pandas.DataFrame(history_of_nonaugmented_model.history),CLUSTER_1,CLUSTER_3
rescaled_images,numpy.array(rescaled_images),CLUSTER_4,CLUSTER_11
image,numpy.asarray(Image.open(image_path),CLUSTER_4,CLUSTER_11
x_train,numpy.concatenate(frames),CLUSTER_5,CLUSTER_1
y_train,numpy.concatenate(frame1),CLUSTER_5,CLUSTER_1
dataframe,pandas.read_csv(io.BytesIO(uploaded['sonar.csv']),CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(estimator,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
df_dd,"pandas.merge(dfa,dfb,on=""ID"")",CLUSTER_1,CLUSTER_3
dfb,"pandas.read_csv(""data/hypo_b.dat"",header=None,delim_whitespace=True,
names=[""ID"",""YY"",""MM"",""DD"",""HH"",""MI"",""SE"",""latb"",""lonb"",""c"",""d"",""e""])",CLUSTER_1,CLUSTER_3
dfa,"pandas.read_csv(""data/hypo_a.dat"",header=None,delim_whitespace=True,
names=[""ID"",""YY"",""MM"",""DD"",""HH"",""MI"",""SE"",""lata"",""lona"",""c"",""d"",""e""])",CLUSTER_1,CLUSTER_3
lon,"numpy.array(dfm[""lonb""])",CLUSTER_1,CLUSTER_3
lat,"numpy.array(dfm[""latb""])",CLUSTER_1,CLUSTER_3
lon,"numpy.array(df_dd[""lonb""])",CLUSTER_1,CLUSTER_3
lat,"numpy.array(df_dd[""latb""])",CLUSTER_1,CLUSTER_3
lon,"numpy.array(df_dd[""lona""])",CLUSTER_1,CLUSTER_3
lat,"numpy.array(df_dd[""lata""])",CLUSTER_1,CLUSTER_3
lon,numpy.array(df[col_lon]),CLUSTER_1,CLUSTER_3
lat,numpy.array(df[col_lat]),CLUSTER_1,CLUSTER_3
df_train,pandas.read_csv('../kaggle/train.csv'),CLUSTER_7,CLUSTER_3
df_test,pandas.read_csv('../kaggle/test.csv'),CLUSTER_7,CLUSTER_3
df_train['Date'],"pandas.to_datetime(df_train['Date'],format=
'%Y-%m-%d')",CLUSTER_7,CLUSTER_3
df_test['Date'],"pandas.to_datetime(df_test['Date'],format=
'%Y-%m-%d')",CLUSTER_7,CLUSTER_3
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(10,6)",CLUSTER_7,CLUSTER_5
data,"sklearn.datasets.make_blobs(n_samples=200,n_features=2,centers=4,cluster_std=1.8,random_state=101)",CLUSTER_7,CLUSTER_5
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame(np.random.randn(1000,2)",CLUSTER_1,CLUSTER_3
df1,"pandas.read_csv('df1',index_col=0)",CLUSTER_1,CLUSTER_3
df2,pandas.read_csv('df2'),CLUSTER_1,CLUSTER_3
birth,"random.randint(1900,2000)",CLUSTER_3,CLUSTER_10
death,"random.randint(birth,2000)",CLUSTER_3,CLUSTER_10
data,"pandas.DataFrame(data,columns=data_X_cols)",CLUSTER_5,CLUSTER_1
log,pandas.DataFrame(columns=log_cols),CLUSTER_5,CLUSTER_1
log_entry,"pandas.DataFrame([results],columns=log_cols)",CLUSTER_5,CLUSTER_1
log_entry,"pandas.DataFrame([results],columns=log_cols)",CLUSTER_5,CLUSTER_1
log_entry,"pandas.DataFrame([results1_2],columns=log_cols)",CLUSTER_5,CLUSTER_1
data,"pandas.read_csv(""creditcard.csv"")",CLUSTER_5,CLUSTER_1
prfs,"sklearn.metrics.precision_recall_fscore_support(Y_test,y_pred,labels=[0])",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([
('scaling',StandardScaler()",CLUSTER_5,CLUSTER_1
skfolds,"sklearn.model_selection.StratifiedKFold(n_splits=n,random_state=42)",CLUSTER_5,CLUSTER_1
start,datetime.datetime.now(),CLUSTER_5,CLUSTER_1
end,datetime.datetime.now(),CLUSTER_5,CLUSTER_1
df,pandas.read_csv('training_data_5.csv'),CLUSTER_1,CLUSTER_3
df_val,pandas.read_csv('validation_data_05.csv'),CLUSTER_1,CLUSTER_3
fig1,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig2,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig21,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig3,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig4,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig5,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig6,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig6,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig8,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig9,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig10,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig11,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig12,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig13,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig14,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig15,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig16,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig19,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig20,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig21,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
x_train,"numpy.concatenate([q_tmp,v_tmp,T_tmp],axis=1)",CLUSTER_1,CLUSTER_3
x_val,"numpy.concatenate([q_tmp,v_tmp,T_tmp],axis=1)",CLUSTER_1,CLUSTER_3
df,pandas.read_excel('Class_Bundle_Sample_File.xlsx'),CLUSTER_1,CLUSTER_3
start_time,time.time(),CLUSTER_1,CLUSTER_3
end_time,time.time(),CLUSTER_1,CLUSTER_3
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('gbm-data.csv'),CLUSTER_5,CLUSTER_5
model,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=learning_rate,n_estimators=250,verbose=True,random_state=241)",CLUSTER_5,CLUSTER_5
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=min_loss_index,random_state=241)",CLUSTER_5,CLUSTER_5
test_loss,"sklearn.metrics.log_loss(y_test,y_pred)",CLUSTER_5,CLUSTER_5
"(trainData,testData,trainLabels,testLabels)",sklearn.model_selection.train_test_split(np.array(mnist.data),CLUSTER_5,CLUSTER_10
"(trainData,valData,trainLabels,valLabels)","sklearn.model_selection.train_test_split(trainData,trainLabels,
test_size=0.1,random_state=84)",CLUSTER_5,CLUSTER_10
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_10
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=kVals[i]),CLUSTER_5,CLUSTER_10
mnist,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
imgdata,"numpy.array(image,dtype='float')",CLUSTER_5,CLUSTER_10
i,numpy.argmax(accuracies),CLUSTER_5,CLUSTER_10
dd,"pandas.DataFrame({""Predictions"":predictions,""Actual"":y_test})",CLUSTER_4,CLUSTER_1
data_df,"pandas.read_csv(
data,delimiter="","",skiprows=0,header=None)",CLUSTER_4,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,random_state=1,stratify=y)",CLUSTER_4,CLUSTER_1
dfp,pandas.read_csv('plate_id.csv'),CLUSTER_8,CLUSTER_4
dfs,pandas.read_csv('stock_concentration.csv'),CLUSTER_8,CLUSTER_4
df,pandas.DataFrame(),CLUSTER_0,CLUSTER_3
test,pandas.DataFrame(data=d),CLUSTER_0,CLUSTER_3
test,pandas.DataFrame(data=d),CLUSTER_0,CLUSTER_3
test,"pandas.DataFrame(d_values,columns=d_labels)",CLUSTER_0,CLUSTER_3
df,pandas.DataFrame(),CLUSTER_0,CLUSTER_3
test,"pandas.DataFrame(d_values,columns=d_labels)",CLUSTER_0,CLUSTER_3
orig_data,"pandas.read_csv('ratings_critics_review.csv',encoding='ISO-8859-1')",CLUSTER_0,CLUSTER_3
critic,"pandas.read_csv('Criticreviews.csv',encoding=""ISO-8859-1"")",CLUSTER_0,CLUSTER_3
movie_name,"numpy.repeat(movies_dict[i].replace('_','')",CLUSTER_0,CLUSTER_3
movie_name,"numpy.repeat(movies_dict[i].replace('_','')",CLUSTER_0,CLUSTER_3
words,"re.findall(r""\w+"",orig_data['top_critic'][i])",CLUSTER_0,CLUSTER_3
dtm_nmf,sklearn.preprocessing.Normalizer(copy=False),CLUSTER_5,CLUSTER_5
nmf_model,sklearn.decomposition.NMF(2),CLUSTER_5,CLUSTER_5
df,pandas.DataFrame(mat),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y)",CLUSTER_5,CLUSTER_5
fig1,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_5,CLUSTER_5
X,pandas.get_dummies(X),CLUSTER_5,CLUSTER_5
brain,pandas.read_csv('Resources/brain_categorical.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_5,CLUSTER_5
X_minmax,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
y_minmax,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
clusterer,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=10)",CLUSTER_5,CLUSTER_10
sample_silhouette_values,"sklearn.metrics.silhouette_samples(X,cluster_labels)",CLUSTER_5,CLUSTER_10
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels)",CLUSTER_5,CLUSTER_10
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_5,CLUSTER_10
dataset,"numpy.loadtxt(raw_data,delimiter="","")",CLUSTER_5,CLUSTER_10
data_consistency,"pandas.DataFrame(data_df.groupby(['IndicatorCode','Year'])",CLUSTER_8,CLUSTER_4
data_df,pandas.concat(data),CLUSTER_8,CLUSTER_4
data_df,pandas.concat(data),CLUSTER_8,CLUSTER_4
indicators_df,pandas.read_csv('indicators.csv'),CLUSTER_8,CLUSTER_4
self.theta_,numpy.linalg.inv(X_b.T.dot(X_b),CLUSTER_5,CLUSTER_5
self.theta_,numpy.linalg.pinv(X_b),CLUSTER_5,CLUSTER_5
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
lr_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
sgd,sklearn.linear_model.SGDRegressor(penalty=None),CLUSTER_5,CLUSTER_5
sgd_l2,"sklearn.linear_model.SGDRegressor(penalty=""l2"")",CLUSTER_5,CLUSTER_5
sgd_l1,"sklearn.linear_model.SGDRegressor(penalty=""l1"")",CLUSTER_5,CLUSTER_5
sgd_elastic_net,"sklearn.linear_model.SGDRegressor(penalty=""elasticnet"",l1_ratio=0.15)",CLUSTER_5,CLUSTER_5
housing,sklearn.datasets.fetch_california_housing(),CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(X,columns=housing[""feature_names""])",CLUSTER_5,CLUSTER_5
y_df,"pandas.DataFrame(np.c_[y_test,ann.predict(X_test)",CLUSTER_5,CLUSTER_5
y_df,"pandas.DataFrame(np.c_[y_test,y_pred],columns=[""y_actual"",""y_pred""])",CLUSTER_5,CLUSTER_5
pipe,"sklearn.pipeline.Pipeline([
(""std_scaler"",StandardScaler()",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(estimator=pipe,param_grid=param_grid,
scoring=""neg_mean_squared_error"",n_jobs=-1,cv=5)",CLUSTER_5,CLUSTER_5
grid_search,sklearn.model_selection.GridSearchCV(estimator=RandomForestRegressor(),CLUSTER_5,CLUSTER_5
grid_search,GridSearchCV(estimator=sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_5
nyc_crime_raw,"pandas.read_csv('NYC_Crime_2014.csv',header=4)",CLUSTER_7,CLUSTER_8
regression,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
regression,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_10
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_10
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_10
idx,numpy.arange(X.shape[0]),CLUSTER_12,CLUSTER_10
X_test,"numpy.arange(0.0,5.0,0.01)",CLUSTER_12,CLUSTER_10
X_test,"numpy.arange(-100.0,100.0,0.01)",CLUSTER_12,CLUSTER_10
y,numpy.array([np.pi*np.sin(X),CLUSTER_12,CLUSTER_10
idx,numpy.where(y==i),CLUSTER_12,CLUSTER_10
X,"numpy.sort(5*rng.rand(80,1)",CLUSTER_12,CLUSTER_10
X,"numpy.sort(200*rng.rand(100,1)",CLUSTER_12,CLUSTER_10
y,numpy.sin(X),CLUSTER_12,CLUSTER_10
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,plot_step)",CLUSTER_12,CLUSTER_10
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=plt.cm.Paired)",CLUSTER_12,CLUSTER_10
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_10
regr_1,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_12,CLUSTER_10
regr_2,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_12,CLUSTER_10
regr_1,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_12,CLUSTER_10
regr_2,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_12,CLUSTER_10
regr_3,sklearn.tree.DecisionTreeRegressor(max_depth=8),CLUSTER_12,CLUSTER_10
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,max_depth=4)",CLUSTER_3,CLUSTER_6
self.feature_indexes,"numpy.zeros(s,dtype=np.int32)",CLUSTER_3,CLUSTER_6
self.zero_fractions,"numpy.zeros(s,dtype=np.float64)",CLUSTER_3,CLUSTER_6
self.one_fractions,"numpy.zeros(s,dtype=np.float64)",CLUSTER_3,CLUSTER_6
self.pweights,"numpy.zeros(s,dtype=np.float64)",CLUSTER_3,CLUSTER_6
phi,numpy.zeros(X.shape[0]+1),CLUSTER_3,CLUSTER_6
x_missing,"numpy.zeros(X.shape[0],dtype=np.bool)",CLUSTER_3,CLUSTER_6
phi,"numpy.zeros((X.shape[0],X.shape[1]+1)",CLUSTER_3,CLUSTER_6
x_missing,"numpy.zeros(X.shape[1],dtype=np.bool)",CLUSTER_3,CLUSTER_6
x,numpy.ones(X.shape[1]),CLUSTER_3,CLUSTER_6
start,time.time(),CLUSTER_3,CLUSTER_6
start,time.time(),CLUSTER_3,CLUSTER_6
start,time.time(),CLUSTER_3,CLUSTER_6
vocab,numpy.array(vectorizer.get_feature_names(),CLUSTER_12,CLUSTER_6
clf,"sklearn.decomposition.NMF(n_components=10,random_state=1)",CLUSTER_12,CLUSTER_6
"U,s,V","sklearn.decomposition.randomized_svd(dtm,10)",CLUSTER_12,CLUSTER_6
response,requests.get(target_url),CLUSTER_9,CLUSTER_2
response,requests.get(first_link),CLUSTER_9,CLUSTER_2
response,requests.get(i),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(arrange_data),CLUSTER_9,CLUSTER_2
temp,pandas.DataFrame(),CLUSTER_4,CLUSTER_1
word_count,pandas.DataFrame({'word':tf_vectorizer.get_feature_names(),CLUSTER_4,CLUSTER_1
topic_dist,pandas.DataFrame(lda_tf.transform(tf),CLUSTER_4,CLUSTER_1
data,"pandas.read_json(file,lines=True)",CLUSTER_4,CLUSTER_1
lda_tf,"sklearn.decomposition.LatentDirichletAllocation(n_components=10,random_state=0)",CLUSTER_4,CLUSTER_1
lda2,"sklearn.decomposition.LatentDirichletAllocation(n_components=80,random_state=0)",CLUSTER_4,CLUSTER_1
lda3,"sklearn.decomposition.LatentDirichletAllocation(n_components=30,random_state=0)",CLUSTER_4,CLUSTER_1
A,"numpy.genfromtxt(CSVFile,delimiter=';')",CLUSTER_1,CLUSTER_9
"f,((ax1,ax2),(ax3,ax4))","matplotlib.pyplot.subplots(2,2,figsize=(15,5)",CLUSTER_1,CLUSTER_9
Games_Log,"pandas.read_csv(""game_log.csv"")",CLUSTER_8,CLUSTER_4
Park_Codes,"pandas.read_csv(""park_codes.csv"")",CLUSTER_8,CLUSTER_4
Person_Code,"pandas.read_csv(""person_codes.csv"")",CLUSTER_8,CLUSTER_4
Team_Codes,"pandas.read_csv(""team_codes.csv"")",CLUSTER_8,CLUSTER_4
Games_Log,"pandas.read_csv(""game_log.csv"")",CLUSTER_8,CLUSTER_4
Park_Codes,"pandas.read_csv(""park_codes.csv"")",CLUSTER_8,CLUSTER_4
Person_Code,"pandas.read_csv(""person_codes.csv"")",CLUSTER_8,CLUSTER_4
Team_Codes,"pandas.read_csv(""team_codes.csv"")",CLUSTER_8,CLUSTER_4
Appearance,"pandas.read_csv(""appearance_type.csv"")",CLUSTER_8,CLUSTER_4
X_train,"numpy.array(train_data['sqft_living'],dtype=pd.Series)",CLUSTER_7,CLUSTER_8
y_train,"numpy.array(train_data['price'],dtype=pd.Series)",CLUSTER_7,CLUSTER_8
X_test,"numpy.array(test_data['sqft_living'],dtype=pd.Series)",CLUSTER_7,CLUSTER_8
y_test,"numpy.array(test_data['price'],dtype=pd.Series)",CLUSTER_7,CLUSTER_8
evaluation,"pandas.DataFrame({'Model':[],
'Details':[],
'RootMeanSquaredError(RMSE)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('kc_house_data.csv'),CLUSTER_7,CLUSTER_8
"train_data,test_data","sklearn.model_selection.train_test_split(df,train_size=0.8,random_state=3)",CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(19,12.5)",CLUSTER_7,CLUSTER_8
Choc,pandas.read_csv('C:\\Users\\cocob\\Downloads\\flavors_of_cacao.csv'),CLUSTER_7,CLUSTER_8
bnb,sklearn.naive_bayes.BernoulliNB(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,target,test_size=0.2,random_state=20)",CLUSTER_7,CLUSTER_8
hotel_page,requests.get(direktlink_hotel),CLUSTER_9,CLUSTER_2
hotel_page,requests.get(directlink_hotel),CLUSTER_9,CLUSTER_2
df_all_countries,pandas.DataFrame(all_countries),CLUSTER_9,CLUSTER_2
df_all_countries_neu,pandas.DataFrame(all_countries_neu),CLUSTER_9,CLUSTER_2
df_all_hotels_country,pandas.DataFrame(all_hotels_country),CLUSTER_9,CLUSTER_2
df_all_hotels_country,pandas.DataFrame(all_hotels_country),CLUSTER_9,CLUSTER_2
df_hoteldetails,pandas.DataFrame(hoteldetails),CLUSTER_9,CLUSTER_2
df_hoteldetails,pandas.DataFrame(hoteldetails),CLUSTER_9,CLUSTER_2
df_hoteldetails,pandas.DataFrame(hoteldetails),CLUSTER_9,CLUSTER_2
df_median,pandas.DataFrame(median),CLUSTER_9,CLUSTER_2
df_dict_bewertung,pandas.DataFrame(bewertung),CLUSTER_9,CLUSTER_2
df_all_hotels_country_total,"pandas.concat([df1,df2],ignore_index=True)",CLUSTER_9,CLUSTER_2
df_details_alle_hotels_total,"pandas.concat([df_1,df_2,df_3],ignore_index=True)",CLUSTER_9,CLUSTER_2
df1,"pandas.read_csv(""Alle_Hotels_pro_Land_Österreich_bis_TC.csv"")",CLUSTER_9,CLUSTER_2
df2,"pandas.read_csv(""Alle_Hotels_pro_Land_Übersicht_Swasiland_bis_Gibraltar.csv"")",CLUSTER_9,CLUSTER_2
df,pandas.read_csv(path),CLUSTER_9,CLUSTER_2
df,pandas.read_csv(path),CLUSTER_9,CLUSTER_2
df,pandas.read_csv(path),CLUSTER_9,CLUSTER_2
df_1,pandas.read_csv('Details_alle_Hotels_total_Teil_1.csv'),CLUSTER_9,CLUSTER_2
df_2,pandas.read_csv('Details_alle_Hotels_total_Teil_2.csv'),CLUSTER_9,CLUSTER_2
df_3,pandas.read_csv('Details_alle_Hotels_total_Teil_3.csv'),CLUSTER_9,CLUSTER_2
df_total,pandas.read_csv(path_complete),CLUSTER_9,CLUSTER_2
WindowWidth,"numpy.array([128,256,512,1024,2048,4096])",CLUSTER_11,CLUSTER_11
startIndex,numpy.array([]),CLUSTER_11,CLUSTER_11
goalIndex,numpy.array([]),CLUSTER_11,CLUSTER_11
t,numpy.array([]),CLUSTER_11,CLUSTER_11
Output,numpy.array(PdArray[0]),CLUSTER_11,CLUSTER_11
TrimArray,numpy.array([]),CLUSTER_11,CLUSTER_11
index,numpy.where(Output[0]==36290413),CLUSTER_11,CLUSTER_11
Output,"numpy.vstack((Output,AddingArray)",CLUSTER_11,CLUSTER_11
Output,"numpy.vstack((Output,PdArray[i+1])",CLUSTER_11,CLUSTER_11
startIndex,"numpy.append(startIndex,CalcSearchIndexFromTime(obj,startTime)",CLUSTER_11,CLUSTER_11
goalIndex,"numpy.append(goalIndex,CalcSearchIndexFromTime(obj,goalTime)",CLUSTER_11,CLUSTER_11
t,"numpy.append(t,array[i].hour*3600*1000+array[i].minute*60*1000+array[i].second*1000+array[i].microsecond*0.001)",CLUSTER_11,CLUSTER_11
TrimArray,"numpy.append(TrimArray,PandasObject.ix[0:])",CLUSTER_11,CLUSTER_11
TrimArray,"numpy.append(TrimArray,PandasObject[i:i+1])",CLUSTER_11,CLUSTER_11
TrimArray,"numpy.append(TrimArray,TimeArray[i+1:i+2])",CLUSTER_11,CLUSTER_11
l,os.listdir(DataPath),CLUSTER_11,CLUSTER_11
data,pandas.read_csv(csv_file),CLUSTER_11,CLUSTER_11
data,"pandas.read_csv(LabelPath+'spa_First_2.csv',encoding='Shift_JIS')",CLUSTER_11,CLUSTER_11
array,"pandas.to_datetime(data['
t=np.array([])",CLUSTER_11,CLUSTER_11
combos,"pandas.DataFrame(cartesian([gres,gpas,[1,2,3,4],[1.]])",CLUSTER_7,CLUSTER_5
combos,"pandas.concat([combos,dummy_ranks],axis=1)",CLUSTER_7,CLUSTER_5
dummy_ranks,"pandas.get_dummies(df['prestige'],prefix='prestige')",CLUSTER_7,CLUSTER_5
dummy_ranks,"pandas.get_dummies(combos['prestige'],prefix='prestige')",CLUSTER_7,CLUSTER_5
df_raw,"pandas.read_csv(""../assets/admissions.csv"")",CLUSTER_7,CLUSTER_5
out,"numpy.zeros([n,len(arrays)",CLUSTER_7,CLUSTER_5
n,numpy.prod([x.sizeforxinarrays]),CLUSTER_7,CLUSTER_5
"out[:,0]","numpy.repeat(arrays[0],m)",CLUSTER_7,CLUSTER_5
gres,numpy.linspace(data['gre'].min(),CLUSTER_7,CLUSTER_5
gpas,numpy.linspace(data['gpa'].min(),CLUSTER_7,CLUSTER_5
lr,sklearn.linear_model.LogisticRegression(random_state=99),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data[train_cols],data['admit'],test_size=0.2,random_state=11)",CLUSTER_7,CLUSTER_5
data,"pandas.concat([data,sex,pclass,embarked],axis=1)",CLUSTER_7,CLUSTER_5
sex,"pandas.get_dummies(data['Sex'],drop_first=True)",CLUSTER_7,CLUSTER_5
pclass,"pandas.get_dummies(data['Pclass'],drop_first=True)",CLUSTER_7,CLUSTER_5
embarked,"pandas.get_dummies(data['Embarked'],drop_first=True)",CLUSTER_7,CLUSTER_5
data,pandas.read_csv('C:/Users/sachi/Downloads/titanic_train.csv'),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30)",CLUSTER_7,CLUSTER_5
model,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n_neighbors),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=11),CLUSTER_7,CLUSTER_5
model,sklearn.svm.SVC(kernel='linear'),CLUSTER_7,CLUSTER_5
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_7,CLUSTER_5
drinks,pandas.read_csv('http://bit.ly/drinksbycountry'),CLUSTER_8,CLUSTER_4
complaints,pandas.read_csv('../data/311-service-requests.csv'),CLUSTER_1,CLUSTER_3
arr,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_3
data,pandas.DataFrame(data),CLUSTER_7,CLUSTER_8
df1,"pandas.DataFrame({'Actual_price':y_test,'Predicted_price':prediction})",CLUSTER_7,CLUSTER_8
result,"pandas.DataFrame(result,columns=['price'])",CLUSTER_7,CLUSTER_8
df,"pandas.concat([new_data,result],axis=1)",CLUSTER_7,CLUSTER_8
data,"pandas.read_csv(r""F:\Data_Sets\house_price.csv"")",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(r""C:\Users\sathishkumar\Downloads\predictivedata\house_price_prediction.csv"")",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=0)",CLUSTER_7,CLUSTER_8
grid_model,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=parameters,cv=2,n_jobs=-1)",CLUSTER_7,CLUSTER_8
test_score,"sklearn.metrics.r2_score(y_test,prediction)",CLUSTER_7,CLUSTER_8
prediction,"pandas.DataFrame(prediction,columns=[""rf_pred""])",CLUSTER_5,CLUSTER_1
x_combine_2,pandas.get_dummies(x_combine),CLUSTER_5,CLUSTER_1
data,"pandas.read_csv(""emission_train.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
test,"pandas.read_csv(""emission_test.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
data,"pandas.read_csv(""emission_train.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
predict,"pandas.read_csv(""emission_predicted.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
predict,"pandas.read_csv(""emission_predicted.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_1
ridge,sklearn.linear_model.Ridge(alpha=10000),CLUSTER_5,CLUSTER_1
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_1
loans_df,"pandas.get_dummies(loans_df,columns=[""Bank"",""State"",""City""])",CLUSTER_8,CLUSTER_1
loans_df,pandas.read_csv(file_path),CLUSTER_8,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
a,pandas.DataFrame(daily_counts),CLUSTER_7,CLUSTER_3
df_merged,"pandas.concat(list_df,axis=0,ignore_index=True)",CLUSTER_7,CLUSTER_3
df_0th,"pandas.concat(list_0rows,axis=0,ignore_index=True)",CLUSTER_7,CLUSTER_3
a.index,pandas.to_datetime(a.index),CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(15.0*x,10.0*x)",CLUSTER_7,CLUSTER_3
preds_with_true_labels,"numpy.array(list(zip(y_predicted_probs,y_true_labels)",CLUSTER_5,CLUSTER_5
scores_table,"pandas.DataFrame({'f1':f1_scores,
'precision':precisions,
'recall':recalls,
'probability':thresholds})",CLUSTER_5,CLUSTER_5
feat_imp,"pandas.DataFrame({'feat':model_catb_final.feature_names_,'importance':model_catb_final.get_feature_importance()",CLUSTER_5,CLUSTER_5
pred_df,"pandas.DataFrame({'Id':data_test['Id'],cred_default:pd.Series(predicted,dtype='bool')",CLUSTER_5,CLUSTER_5
df,"pandas.concat([df,pd.get_dummies(df[cat_colname],prefix=cat_colname)",CLUSTER_5,CLUSTER_5
data_train,pandas.read_csv('./data/train-kaggle.csv'),CLUSTER_5,CLUSTER_5
data_test,pandas.read_csv('./data/test-kaggle.csv'),CLUSTER_5,CLUSTER_5
figure,"matplotlib.pyplot.figure(figsize=(15,5)",CLUSTER_5,CLUSTER_5
cv,"sklearn.model_selection.KFold(n_splits=3,random_state=21,shuffle=True)",CLUSTER_5,CLUSTER_5
rs,"sklearn.model_selection.RandomizedSearchCV(model_catb,params,scoring='f1',cv=cv,n_jobs=-1)",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
fLat,numpy.radians(data.LocationLat),CLUSTER_4,CLUSTER_11
fLon,numpy.radians(data.LocationLng),CLUSTER_4,CLUSTER_11
sLat,numpy.radians(lat),CLUSTER_4,CLUSTER_11
sLon,numpy.radians(lng),CLUSTER_4,CLUSTER_11
a,numpy.sin(dLat/2.0),CLUSTER_4,CLUSTER_11
data_split,"numpy.array_split(data,partitions)",CLUSTER_4,CLUSTER_11
data_split,"numpy.array_split(data,partitions)",CLUSTER_4,CLUSTER_11
collision_T,"collision_T.assign(distance=pandas.Series(
distance(collision_T,long_event.LocationLat,long_event.LocationLng,idx)",CLUSTER_4,CLUSTER_11
collision,"pandas.concat([collison_W,collision_T])",CLUSTER_4,CLUSTER_11
long_event,"pandas.read_hdf('../../long_events_.h5',key='LN_300')",CLUSTER_4,CLUSTER_11
long_events_,"pandas.read_hdf(filepath,key=key)",CLUSTER_4,CLUSTER_11
In_LN,"pandas.read_hdf('../../long_events.h5',key='LN_300')",CLUSTER_4,CLUSTER_11
data_set,"pandas.read_hdf('../../data_set.h5',key='DS_new')",CLUSTER_4,CLUSTER_11
list_num_factors,"numpy.asarray([1,2,3,4])",CLUSTER_4,CLUSTER_11
list_num_groups,"numpy.asarray([2,3,4,5,6])",CLUSTER_4,CLUSTER_11
elbos2,numpy.asarray(elbos2),CLUSTER_4,CLUSTER_11
linx,numpy.asarray([np.min(_x),CLUSTER_4,CLUSTER_11
z,"numpy.zeros((num_nodes,num_communities)",CLUSTER_4,CLUSTER_11
predictor,"numpy.dot(x,A.T)",CLUSTER_4,CLUSTER_11
z,"numpy.ones((num_nodes,num_groups)",CLUSTER_4,CLUSTER_11
best_idx,"numpy.argmax(model['z'].mean,axis=1)",CLUSTER_4,CLUSTER_11
"m,c","numpy.polyfit(_x,_y,1)",CLUSTER_4,CLUSTER_11
hyperparameters,json.load(fp),CLUSTER_4,CLUSTER_11
kmeans,sklearn.cluster.KMeans(num_communities),CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(ncols=n_pictures,figsize=(4*n_pictures,4)",CLUSTER_6,CLUSTER_11
mean,"numpy.array([0.5,0.5,0.5])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.5,0.5,0.5])",CLUSTER_6,CLUSTER_11
mean,"numpy.array([0.5,0.5,0.5])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.5,0.5,0.5])",CLUSTER_6,CLUSTER_11
self.train_y,"numpy.zeros(n1,dtype=np.uint8)",CLUSTER_6,CLUSTER_11
self.val_y,"numpy.zeros(n2,dtype=np.uint8)",CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
since,time.time(),CLUSTER_6,CLUSTER_11
time_elapsed,time.time(),CLUSTER_6,CLUSTER_11
self.df,pandas.read_csv(train_csv_path_and_file),CLUSTER_6,CLUSTER_11
self.df_test,pandas.read_csv(test_csv_path_and_file),CLUSTER_6,CLUSTER_11
user31_data,"pandas.read_csv(os.path.join(PATH_TO_DATA,
'10users/user0031.csv')",CLUSTER_4,CLUSTER_11
dd1,pandas.read_csv(path+d1),CLUSTER_1,CLUSTER_3
dd2,pandas.read_csv(path+d2),CLUSTER_1,CLUSTER_3
dd3,pandas.read_csv(path+d3),CLUSTER_1,CLUSTER_3
dd,json.loads(f.read(),CLUSTER_1,CLUSTER_3
dd,json.loads(f.read(),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,15)",CLUSTER_1,CLUSTER_3
yy,numpy.array(df6[ii].dropna(),CLUSTER_1,CLUSTER_3
xx,numpy.array(df[ii].dropna(),CLUSTER_1,CLUSTER_3
yy,numpy.array(df5[ii].dropna(),CLUSTER_1,CLUSTER_3
xx1,numpy.array(df2[ii].dropna(),CLUSTER_1,CLUSTER_3
yy1,numpy.array(df5[ii].dropna(),CLUSTER_1,CLUSTER_3
xx1,numpy.array(df2[ii].dropna(),CLUSTER_1,CLUSTER_3
yy,numpy.array(df5[ii].dropna(),CLUSTER_1,CLUSTER_3
xx1,numpy.array(df2[ii].dropna(),CLUSTER_1,CLUSTER_3
yy,numpy.array(df5[ii].dropna(),CLUSTER_1,CLUSTER_3
X,"pandas.concat([full_data[:train_data.shape[0]][cat_columns],full_data[:train_data.shape[0]][con_columns]],axis=1)",CLUSTER_7,CLUSTER_8
sample_submission,pandas.read_csv('sample_submission.csv'),CLUSTER_7,CLUSTER_8
train_data,pandas.read_csv('train_2016_v2.csv'),CLUSTER_7,CLUSTER_8
properties_data,pandas.read_csv('properties_2016.csv'),CLUSTER_7,CLUSTER_8
zillow_dict,"pandas.read_excel('zillow_data_dictionary.xlsx',sheetname=None)",CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
OHE,sklearn.preprocessing.OneHotEncoder(),CLUSTER_7,CLUSTER_8
SSL,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
"full_data[i],_",scipy.stats.boxcox(full_data[i]+20),CLUSTER_7,CLUSTER_8
linear_reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
counts,collections.Counter(snp_counts),CLUSTER_10,CLUSTER_4
X,"numpy.arange(1,17,1)",CLUSTER_1,CLUSTER_3
Y,"numpy.arange(100,1100,100)",CLUSTER_1,CLUSTER_3
X,"numpy.arange(1,17,1)",CLUSTER_1,CLUSTER_3
Y,"numpy.arange(100,1100,100)",CLUSTER_1,CLUSTER_3
z,"numpy.empty(shape=(10,16)",CLUSTER_1,CLUSTER_3
"X,Y","numpy.meshgrid(X,Y)",CLUSTER_1,CLUSTER_3
"X,Y","numpy.meshgrid(X,Y)",CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(data=d),CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(df,dtype='float64')",CLUSTER_5,CLUSTER_1
out,"pandas.Series(result[0:4],index=labels)",CLUSTER_5,CLUSTER_1
df,pandas.read_csv('global_covid_confirmed_daily_updates.csv'),CLUSTER_5,CLUSTER_1
df.index,pandas.to_datetime(df.index),CLUSTER_5,CLUSTER_1
error,"sklearn.metrics.mean_squared_error(test['India'],predictions)",CLUSTER_5,CLUSTER_1
self.pos,"numpy.array([0,0])",CLUSTER_3,CLUSTER_6
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,stratify=y,random_state=random_seed,test_size=0.3)",CLUSTER_5,CLUSTER_10
continuous_pipeline,sklearn.pipeline.Pipeline(steps=pipeline_steps),CLUSTER_5,CLUSTER_10
xgb_clf_pipeline,"sklearn.pipeline.Pipeline(steps=[('features',FeatureUnion(featurisers)",CLUSTER_5,CLUSTER_10
xgb_hist_clf_pipeline,"sklearn.pipeline.Pipeline(steps=[('features',FeatureUnion(featurisers)",CLUSTER_5,CLUSTER_10
lgbm_clf_pipeline,"sklearn.pipeline.Pipeline(steps=[('features',FeatureUnion(featurisers)",CLUSTER_5,CLUSTER_10
left,"random.randint(0,w-new_w)",CLUSTER_3,CLUSTER_6
top,"random.randint(0,h-new_h)",CLUSTER_3,CLUSTER_6
area,random.uniform(*self.scale),CLUSTER_3,CLUSTER_6
"left,top","random.randint(0,w-self.crop_size[0])",CLUSTER_3,CLUSTER_6
"left,top","random.randint(0,x.size[0]-csize[0])",CLUSTER_3,CLUSTER_6
"left,top","random.randint(0,x.size[0]-csize[0])",CLUSTER_3,CLUSTER_6
%timeit-n10a,numpy.array(PIL.Image.open(il.items[0]),CLUSTER_3,CLUSTER_6
a,"numpy.array([250,20,254],dtype='uint8')",CLUSTER_1,CLUSTER_9
a,"numpy.array([250,20,254],dtype='int')",CLUSTER_1,CLUSTER_9
f,numpy.array(e),CLUSTER_1,CLUSTER_9
imgint,"numpy.array(img,dtype='int')",CLUSTER_1,CLUSTER_9
kernel,"numpy.array([[0,0,0],
[0,1,0],
[0,0,0]])",CLUSTER_1,CLUSTER_9
kernel,"numpy.ones((k,k)",CLUSTER_1,CLUSTER_9
c,"numpy.clip(b,0,255)",CLUSTER_1,CLUSTER_9
img2,"numpy.clip(img2,0,255)",CLUSTER_1,CLUSTER_9
all,"numpy.hstack([
cv2.LUT(img,mullut(0.7)",CLUSTER_1,CLUSTER_9
hb,matplotlib.pyplot.hist(b.ravel(),CLUSTER_1,CLUSTER_9
hg,matplotlib.pyplot.hist(g.ravel(),CLUSTER_1,CLUSTER_9
hr,matplotlib.pyplot.hist(r.ravel(),CLUSTER_1,CLUSTER_9
losses,numpy.array(losses),CLUSTER_5,CLUSTER_10
yhat,numpy.array(yhat),CLUSTER_5,CLUSTER_10
"X,Y,coef","sklearn.datasets.make_regression(n_samples=500,n_features=1,bias=3.7,noise=8.5,coef=True)",CLUSTER_5,CLUSTER_10
r,"random.randint(0,len(datain)",CLUSTER_3,CLUSTER_6
y,numpy.array([d['y']fordindatain]),CLUSTER_3,CLUSTER_6
DX_train,numpy.array([d['x']fordinX_train]),CLUSTER_3,CLUSTER_6
DX_test,numpy.array([d['x']fordinX_test]),CLUSTER_3,CLUSTER_6
x1,"numpy.array([transformin([""أرحام"",""""])",CLUSTER_3,CLUSTER_6
x,numpy.zeros(20*512),CLUSTER_3,CLUSTER_6
y,numpy.zeros(4*30),CLUSTER_3,CLUSTER_6
by,numpy.zeros(120),CLUSTER_3,CLUSTER_6
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.05)",CLUSTER_3,CLUSTER_6
univ,pandas.read_csv('University.csv'),CLUSTER_7,CLUSTER_3
univ['Full_Time_Enrollment'],pandas.to_numeric(univ['Full_Time_Enrollment']),CLUSTER_7,CLUSTER_3
univ['Average_Monthly_Search_Volume'],pandas.to_numeric(univ['Average_Monthly_Search_Volume']),CLUSTER_7,CLUSTER_3
univ['Endowment_per_Full_Time_Student'],pandas.to_numeric(univ['Endowment_per_Full_Time_Student']),CLUSTER_7,CLUSTER_3
biggest['Full_Time_Enrollment'],pandas.to_numeric(biggest['Full_Time_Enrollment']),CLUSTER_7,CLUSTER_3
g,"seaborn.FacetGrid(univ,col=""Prof_G_Categorization"",hue=""Prof_G_Categorization"")",CLUSTER_7,CLUSTER_3
ax,"seaborn.boxplot(x=""Prof_G_Categorization"",y=""Full_Time_Enrollment"",data=univ)",CLUSTER_7,CLUSTER_3
g,"seaborn.jointplot(x=""Full_Time_Enrollment"",y=""Endowment_per_Full_Time_Student"",data=thrive,
kind=""reg"",truncate=False,
xlim=(0,60000)",CLUSTER_7,CLUSTER_3
g,"seaborn.jointplot(x=""Full_Time_Enrollment"",y=""Endowment_per_Full_Time_Student"",data=struggle,
kind=""reg"",truncate=False,
xlim=(0,60000)",CLUSTER_7,CLUSTER_3
ax,"seaborn.lmplot(y='Eduation_Score',x='Rank',data=univ,
col='Prof_G_Categorization',hue='Prof_G_Categorization'
)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x=""Vulnerability_Score"",y=""Average_Undergraduate_Tuition_and_Fees"",hue=""Prof_G_Categorization"",data=top_ranked)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x=""Vulnerability_Score"",y=""Full_Time_Enrollment"",hue=""Prof_G_Categorization"",data=biggest)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x=""Vulnerability_Score"",y=""Full_Time_Enrollment"",hue=""Prof_G_Categorization"",data=smallest)",CLUSTER_7,CLUSTER_3
ax2,"seaborn.scatterplot(x=""Average_Monthly_Search_Volume"",y=""Vulnerability_Score"",hue=""Prof_G_Categorization"",data=univ)",CLUSTER_7,CLUSTER_3
axp,"seaborn.scatterplot(y='Eduation_Score',x='Rank',data=univ,hue='Prof_G_Categorization',palette=['blue','orange','green','red'])",CLUSTER_7,CLUSTER_3
L,matplotlib.pyplot.legend(prop={'size':9.5}),CLUSTER_7,CLUSTER_3
all_features[i],numpy.cbrt(all_features[i]),CLUSTER_7,CLUSTER_8
"submission.iloc[:,1]",numpy.floor(np.expm1(y_pred),CLUSTER_7,CLUSTER_8
"df_train[""cc_cons""]","numpy.log1p(df_train[""cc_cons""])",CLUSTER_7,CLUSTER_8
all_features[i],numpy.log1p(all_features[i]),CLUSTER_7,CLUSTER_8
rmse,"numpy.sqrt(-cross_val_score(model,X,train_labels,scoring=""neg_mean_squared_error"",cv=kf)",CLUSTER_7,CLUSTER_8
data,pandas.DataFrame(df),CLUSTER_7,CLUSTER_8
skewness,pandas.DataFrame({'Skew':high_skew}),CLUSTER_7,CLUSTER_8
skewness,pandas.DataFrame({'Skew':high_skew}),CLUSTER_7,CLUSTER_8
skewness,pandas.DataFrame({'Skew':high_skew}),CLUSTER_7,CLUSTER_8
df_labels,pandas.DataFrame(train_labels),CLUSTER_7,CLUSTER_8
data,"pandas.concat([df_train['cc_cons'],df_train['cc_cons_apr']],axis=1)",CLUSTER_7,CLUSTER_8
all_features,"pandas.concat([train_features,test_features])",CLUSTER_7,CLUSTER_8
all_features,pandas.get_dummies(all_features),CLUSTER_7,CLUSTER_8
df_train,pandas.read_csv('./dataset/train.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv('./dataset/test_9K3DBWQ.csv'),CLUSTER_7,CLUSTER_8
all_features,pandas.read_csv('./dataset/all_feature_210719.csv'),CLUSTER_7,CLUSTER_8
all_features,pandas.read_csv('./dataset/all_features_final_210719.csv'),CLUSTER_7,CLUSTER_8
submission,"pandas.read_csv(""./dataset/sample_submission_iwBpW0t.csv"")",CLUSTER_7,CLUSTER_8
df_dict,pandas.read_excel('./dataset/Data_Dictionary.xlsx'),CLUSTER_7,CLUSTER_8
ax,"seaborn.boxplot(data=all_features[numeric],orient=""h"",palette=""Set1"")",CLUSTER_7,CLUSTER_8
ax,"seaborn.boxplot(data=all_features[numeric],orient=""h"",palette=""Set1"")",CLUSTER_7,CLUSTER_8
ax,"seaborn.boxplot(data=all_features[numeric],orient=""h"",palette=""Set1"")",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"fig,axs","matplotlib.pyplot.subplots(ncols=2,nrows=0,figsize=(12,120)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=1200,
max_depth=15,
min_samples_split=5,
min_samples_leaf=5,
max_features=None,
oob_score=True,
random_state=42)",CLUSTER_7,CLUSTER_8
gbr,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=6000,
learning_rate=0.01,
max_depth=4,
max_features='sqrt',
min_samples_leaf=15,
min_samples_split=10,
loss='huber',
random_state=42)",CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_splits=3,random_state=42,shuffle=True)",CLUSTER_7,CLUSTER_8
ridge,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_7,CLUSTER_8
svr,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_7,CLUSTER_8
scaler_x,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
df1,pandas.DataFrame({'A':['a'+str(x),CLUSTER_8,CLUSTER_4
df2,pandas.DataFrame({'A':['a'+str(x),CLUSTER_8,CLUSTER_4
df3,pandas.DataFrame({'D':['d'+str(x),CLUSTER_8,CLUSTER_4
df4,pandas.DataFrame({'D':['d'+str(x),CLUSTER_8,CLUSTER_4
left,pandas.DataFrame({'idx':['i'+str(x),CLUSTER_8,CLUSTER_4
right,pandas.DataFrame({'idx':['i'+str(x),CLUSTER_8,CLUSTER_4
fig,"matplotlib.pyplot.figure(figsize=(14,12)",CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(2,1,figsize=(10,8)",CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_1,CLUSTER_10
time_2_sync,"numpy.empty((npts,npts)",CLUSTER_1,CLUSTER_10
n1,numpy.empty(T),CLUSTER_1,CLUSTER_10
n2,numpy.empty(T),CLUSTER_1,CLUSTER_10
unit_range,"numpy.linspace(0.0,1.0,npts)",CLUSTER_1,CLUSTER_10
unitrange,"numpy.linspace(0,1,npts)",CLUSTER_1,CLUSTER_10
unitrange,"numpy.linspace(0,1,npts)",CLUSTER_1,CLUSTER_10
forest_prediction,numpy.expm1(forest_model.predict(X_test_transformed),CLUSTER_7,CLUSTER_8
alphas,"numpy.logspace(-5,2,100)",CLUSTER_7,CLUSTER_8
alphas,"numpy.logspace(1,2,10)",CLUSTER_7,CLUSTER_8
train_sizes,"numpy.linspace(0.05,1,20)",CLUSTER_7,CLUSTER_8
X_train_real,"numpy.hstack((X_train_сarat_log,X_train_x_log,X_train[:,[7,8,4,5]])",CLUSTER_7,CLUSTER_8
X_test_real,"numpy.hstack((X_test_сarat_log,X_test_x_log,X_test[:,[7,8,4,5]])",CLUSTER_7,CLUSTER_8
X_train_transformed,"numpy.hstack((X_train_real_scaled,X_train_cut_ohe,X_train_color_ohe,X_train_clarity_ohe)",CLUSTER_7,CLUSTER_8
X_test_transformed,"numpy.hstack((X_test_real_scaled,X_test_cut_ohe,X_test_color_ohe,X_test_clarity_ohe)",CLUSTER_7,CLUSTER_8
X_train_transformed_add,"numpy.hstack((X_train_transformed,X_train_additional_scaled)",CLUSTER_7,CLUSTER_8
X_test_transformed_add,"numpy.hstack((X_test_transformed,X_test_additional_scaled)",CLUSTER_7,CLUSTER_8
log_vect,numpy.vectorize(np.log1p),CLUSTER_7,CLUSTER_8
diamonds_df,pandas.read_csv('../../data/diamonds.csv'),CLUSTER_7,CLUSTER_8
ax,"seaborn.distplot(sub_df['price'],kde=False,ax=axes[idx//3,idx%3])",CLUSTER_7,CLUSTER_8
ax,"seaborn.distplot(sub_df['price'],kde=False,ax=axes[idx//3,idx%3])",CLUSTER_7,CLUSTER_8
ax,"seaborn.distplot(sub_df['price'],kde=False,ax=axes[idx//3,idx%3])",CLUSTER_7,CLUSTER_8
ridge_cv,"sklearn.linear_model.RidgeCV(alphas=alphas,scoring=mean_absolute_exp_error,cv=cv)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.Ridge(random_state=4444),CLUSTER_7,CLUSTER_8
model,"sklearn.linear_model.Ridge(alpha=52.140083,random_state=4444)",CLUSTER_7,CLUSTER_8
pure_ridge,"sklearn.linear_model.Ridge(random_state=4444,alpha=0.00001)",CLUSTER_7,CLUSTER_8
poly_ridge,"sklearn.linear_model.Ridge(random_state=4444,alpha=52.140083)",CLUSTER_7,CLUSTER_8
lasso_cv,"sklearn.linear_model.LassoCV(alphas=alphas,cv=cv,random_state=4444)",CLUSTER_7,CLUSTER_8
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,random_state=4444)",CLUSTER_7,CLUSTER_8
forest_model,"sklearn.ensemble.RandomForestRegressor(n_estimators=200,random_state=4444)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=4444,shuffle=True)",CLUSTER_7,CLUSTER_8
"X_train_boosting,X_valid_boosting,y_train_boosting,y_valid_boosting","sklearn.model_selection.train_test_split(
X_train_transformed,y_train_log,test_size=0.3,random_state=4444)",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=4444)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
label_bin,sklearn.preprocessing.LabelBinarizer(),CLUSTER_7,CLUSTER_8
X_train_additional,sklearn.preprocessing.PolynomialFeatures(),CLUSTER_7,CLUSTER_8
X_test_additional,sklearn.preprocessing.PolynomialFeatures(),CLUSTER_7,CLUSTER_8
score_ridge,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(ridge_cv.predict(X_test_transformed)",CLUSTER_7,CLUSTER_8
score_lasso,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(lasso_cv.predict(X_test_transformed)",CLUSTER_7,CLUSTER_8
score_ridge,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(ridge_cv.predict(X_test_transformed_add)",CLUSTER_7,CLUSTER_8
score_lasso,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(lasso_cv.predict(X_test_transformed_add)",CLUSTER_7,CLUSTER_8
score,"sklearn.metrics.mean_absolute_error(y_test,forest_prediction)",CLUSTER_7,CLUSTER_8
score,sklearn.metrics.mean_absolute_error(np.expm1(y_valid_boosting),CLUSTER_7,CLUSTER_8
score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(predictions)",CLUSTER_7,CLUSTER_8
pure_ridge_score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(pure_ridge.predict(X_test_transformed)",CLUSTER_7,CLUSTER_8
poly_ridge_score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(poly_ridge.predict(X_test_transformed_add)",CLUSTER_7,CLUSTER_8
forest_score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(forest_model.predict(X_test_transformed)",CLUSTER_7,CLUSTER_8
boosting_score,"sklearn.metrics.mean_absolute_error(y_test,np.expm1(boosting_model.predict(dvalid)",CLUSTER_7,CLUSTER_8
"N_train,val_train,val_test","sklearn.model_selection.learning_curve(model,X,y,train_sizes=train_sizes,cv=5,scoring=mean_absolute_exp_error,random_state=4444)",CLUSTER_7,CLUSTER_8
"val_train,val_test","sklearn.model_selection.validation_curve(model,X_train_transformed_add,y_train_log,'alpha',alphas,cv=cv,scoring=mean_absolute_exp_error)",CLUSTER_7,CLUSTER_8
"val_train,val_test","sklearn.model_selection.validation_curve(model,X_train_transformed,y_train_log,'n_estimators',n_estimators,cv=cv,scoring=mean_absolute_exp_error)",CLUSTER_7,CLUSTER_8
brow,"numpy.array(train.loc[:,""Browser_Used""])",CLUSTER_5,CLUSTER_1
dev,"numpy.array(train.loc[:,""Device_Used""])",CLUSTER_5,CLUSTER_1
label,"numpy.array(train.loc[:,""Is_Response""])",CLUSTER_5,CLUSTER_1
prediction,numpy.array(prediction),CLUSTER_5,CLUSTER_1
loan_id,"numpy.ravel(test.loc[:,['User_ID']])",CLUSTER_5,CLUSTER_1
ans,"pandas.DataFrame(prediction,loan_id,columns=['Is_Response'])",CLUSTER_5,CLUSTER_1
combine,"pandas.concat([train,test])",CLUSTER_5,CLUSTER_1
train,pandas.read_csv('train.csv'),CLUSTER_5,CLUSTER_1
test,pandas.read_csv('test.csv'),CLUSTER_5,CLUSTER_1
test,"pandas.read_csv(""test.csv"")",CLUSTER_5,CLUSTER_1
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data[cols],data[target_col].values,test_size=0.3,random_state=142)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data[most_important_features.index],data[target_col],test_size=0.3,random_state=142)",CLUSTER_5,CLUSTER_5
correlated_indices,numpy.where((corr_matrix>=0.8),CLUSTER_5,CLUSTER_5
sorted_idx,numpy.argsort(feature_importance_values),CLUSTER_5,CLUSTER_5
sorted_idx,numpy.argsort(feature_importance_values),CLUSTER_5,CLUSTER_5
important_feature_series,"pandas.Series(feature_importance_values,index=important_features)",CLUSTER_5,CLUSTER_5
data,"pandas.get_dummies(data,columns=cat_col)",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv(""data.csv"",encoding='unicode_escape')",CLUSTER_5,CLUSTER_5
cv,"5,error_score=sklearn.metrics.make_scorer(accuracy_score)",CLUSTER_5,CLUSTER_5
"""min_samples_leaf"":[2,4,5,6]}],cv","5,error_score=sklearn.metrics.make_scorer(accuracy_score)",CLUSTER_5,CLUSTER_5
best_gdr,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.4,n_estimators=30)",CLUSTER_5,CLUSTER_5
best_tree,"sklearn.ensemble.RandomForestClassifier(max_depth=4,min_samples_leaf=4,n_estimators=50)",CLUSTER_5,CLUSTER_5
gdr_grid_search,sklearn.model_selection.GridSearchCV(GradientBoostingClassifier(),CLUSTER_5,CLUSTER_5
grid_search_tree,sklearn.model_selection.GridSearchCV(RandomForestClassifier(),CLUSTER_5,CLUSTER_5
zs,"numpy.arange(-5,5,0.1)",CLUSTER_7,CLUSTER_8
X,"numpy.concatenate((Xtr,Xte)",CLUSTER_7,CLUSTER_8
"xx,yy","numpy.meshgrid(np.linspace(x_min,x_max,100)",CLUSTER_7,CLUSTER_8
cs2,"matplotlib.pyplot.contour(xx,yy,Z,cmap=ccolor,alpha=.6,axes=ax)",CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
dflog,"pandas.read_csv(""data/01_heights_weights_genders.csv"")",CLUSTER_7,CLUSTER_8
c0,seaborn.color_palette(),CLUSTER_7,CLUSTER_8
c1,seaborn.color_palette(),CLUSTER_7,CLUSTER_8
c2,seaborn.color_palette(),CLUSTER_7,CLUSTER_8
gs,"sklearn.model_selection.GridSearchCV(clf,param_grid=parameters,cv=n_folds)",CLUSTER_7,CLUSTER_8
"Xlr,Xtestlr,ylr,ytestlr","sklearn.model_selection.train_test_split(dflog[['Height','Weight']].values,
(dflog.Gender==""Male"")",CLUSTER_7,CLUSTER_8
"Xtrain,Xtest,ytrain,ytest","sklearn.model_selection.train_test_split(X,y,train_size=train_size)",CLUSTER_7,CLUSTER_8
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
clf,sklearn.linear_model.LogisticRegression(C=c),CLUSTER_7,CLUSTER_8
clf1,sklearn.linear_model.LogisticRegression(C=0.1),CLUSTER_7,CLUSTER_8
clf2,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
clf_2,sklearn.linear_model.LogisticRegression(C=0.001),CLUSTER_7,CLUSTER_8
new_rides,numpy.mean(fiveso),CLUSTER_1,CLUSTER_10
b,"random.randint(2,zm)",CLUSTER_3,CLUSTER_4
r,"random.randint(2,n-2)",CLUSTER_3,CLUSTER_4
k_prywatny,"random.randint(2,p-2)",CLUSTER_3,CLUSTER_4
j,"random.randint(2,p-2)",CLUSTER_3,CLUSTER_4
x,math.floor(math.sqrt(n),CLUSTER_3,CLUSTER_4
spraw,math.floor(math.sqrt(y),CLUSTER_3,CLUSTER_4
ifx,=math.sqrt(n),CLUSTER_3,CLUSTER_4
ifspraw,=math.sqrt(y),CLUSTER_3,CLUSTER_4
statinfo,os.stat(filepath),CLUSTER_2,CLUSTER_7
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_2,CLUSTER_7
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_2,CLUSTER_7
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_2,CLUSTER_7
df,"pandas.DataFrame(data=pitcher_team_cleaned,columns=['Team','Pitcher'])",CLUSTER_8,CLUSTER_3
df2,"pandas.DataFrame(data=line_odds_cleaned,columns=['Line','Odds'])",CLUSTER_8,CLUSTER_3
df3,"pandas.DataFrame(data=over_unders_cleaned,columns=['Over_Under','Total','Price'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_excel(""Ejemplo.xlsx"")",CLUSTER_7,CLUSTER_9
"normality_plot,stat","scipy.stats.probplot(modelo.resid,plot=plt,rvalue=True)",CLUSTER_7,CLUSTER_9
SW,scipy.stats.shapiro(modelo.resid),CLUSTER_7,CLUSTER_9
orden,random.sample(range(26),CLUSTER_7,CLUSTER_9
df,pandas.read_csv('logreturns.csv'),CLUSTER_8,CLUSTER_4
stats,"requests.get(requestStr,auth=HTTPBasicAuth(userid,password)",CLUSTER_9,CLUSTER_2
stats,"requests.get(requestStr,auth=HTTPBasicAuth(userid,password)",CLUSTER_9,CLUSTER_2
settings,json.load(open('../APIsettings/config.json'),CLUSTER_9,CLUSTER_2
settings,json.load(open('../APIsettings/config.json'),CLUSTER_9,CLUSTER_2
players_df,"pandas.DataFrame(players,columns=ncolumns)",CLUSTER_9,CLUSTER_2
self.feats,collections.defaultdict(int),CLUSTER_10,CLUSTER_4
train,"pandas.merge(train,label,on='ID')",CLUSTER_7,CLUSTER_5
train,pandas.read_csv('./train.csv'),CLUSTER_7,CLUSTER_5
label,"pandas.read_csv('./challenge_output_data_training_file_nba_challenge.csv',sep=';')",CLUSTER_7,CLUSTER_5
test,pandas.read_csv('./test.csv'),CLUSTER_7,CLUSTER_5
test,pandas.read_csv('./test.csv'),CLUSTER_7,CLUSTER_5
feat,numpy.sort(model.feature_importances_),CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_7,CLUSTER_5
"df_train,df_val","sklearn.model_selection.train_test_split(train,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_5
pdat,"numpy.array([parsec['logTe'],parsec['Ksmag'],np.log10(parsec['Zini']/0.02)",CLUSTER_7,CLUSTER_5
model,numpy.array([radii]),CLUSTER_7,CLUSTER_5
model,numpy.array([x]),CLUSTER_7,CLUSTER_5
parage,numpy.asarray(parages.copy(),CLUSTER_7,CLUSTER_5
devs,numpy.asarray(devs),CLUSTER_7,CLUSTER_5
bloopage,numpy.asarray(parages),CLUSTER_7,CLUSTER_5
mp_radii,numpy.asarray(mp_radii),CLUSTER_7,CLUSTER_5
mp_surfden,numpy.asarray(mp_surfden),CLUSTER_7,CLUSTER_5
mp_radii,numpy.asarray(mp_radii),CLUSTER_7,CLUSTER_5
mp_surfden,numpy.asarray(mp_surfden),CLUSTER_7,CLUSTER_5
young_radii,numpy.asarray(young_radii),CLUSTER_7,CLUSTER_5
young_surfden,numpy.asarray(young_surfden),CLUSTER_7,CLUSTER_5
yless_radii,numpy.asarray(yless_radii),CLUSTER_7,CLUSTER_5
yless_surfden,numpy.asarray(yless_surfden),CLUSTER_7,CLUSTER_5
ymed_radii,numpy.asarray(ymed_radii),CLUSTER_7,CLUSTER_5
ymed_surfden,numpy.asarray(ymed_surfden),CLUSTER_7,CLUSTER_5
omed_radii,numpy.asarray(omed_radii),CLUSTER_7,CLUSTER_5
omed_surfden,numpy.asarray(omed_surfden),CLUSTER_7,CLUSTER_5
old_radii,numpy.asarray(old_radii),CLUSTER_7,CLUSTER_5
old_surfden,numpy.asarray(old_surfden),CLUSTER_7,CLUSTER_5
rgb,numpy.where(parsecall['label']==3),CLUSTER_7,CLUSTER_5
clnr,numpy.where((r13['FE_H']>-9999.0),CLUSTER_7,CLUSTER_5
bloop,numpy.where((r13['TEFF']>=4100),CLUSTER_7,CLUSTER_5
young,numpy.where(np.asarray(parages),CLUSTER_7,CLUSTER_5
young,numpy.where(parage[bloop_cut]<=np.log10(0.5*10**9),CLUSTER_7,CLUSTER_5
yless,numpy.where((parage[bloop_cut]>np.log10(0.5*10**9),CLUSTER_7,CLUSTER_5
ymed,numpy.where((parage[bloop_cut]>np.log10(2.0*10**9),CLUSTER_7,CLUSTER_5
omed,numpy.where((parage[bloop_cut]>np.log10(7*10**9),CLUSTER_7,CLUSTER_5
old,numpy.where(parage[bloop_cut]>np.log10(10.5*10**9),CLUSTER_7,CLUSTER_5
fd,numpy.where(bloopr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(bloopr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(bloopr13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(bloopr13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(bloopr13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
metal_poor,numpy.where(bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
m_int1,numpy.where((bloopr13['FE_H']>=-0.87833154),CLUSTER_7,CLUSTER_5
m_int2,numpy.where((bloopr13['FE_H']>=-0.7067915),CLUSTER_7,CLUSTER_5
metal_rich,numpy.where(bloopr13['FE_H']>=-0.5933316),CLUSTER_7,CLUSTER_5
fd,numpy.where(mpr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mpr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(mpr13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(mpr13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(mpr13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mp_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(mint1r13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mint1r13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(mint1r13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(mint1r13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(mint1r13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mint1_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(mint2r13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mint2r13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(mint2r13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(mint2r13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(mint2r13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mint2_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(mrr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mrr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(mrr13['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(mrr13['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(mrr13['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mr_surfden),CLUSTER_7,CLUSTER_5
mp_young,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
mp_yless,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
mp_ymed,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
mp_omed,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
mp_old,numpy.where((bloopr13['FE_H']<-0.87833154),CLUSTER_7,CLUSTER_5
fd,numpy.where(mpomedr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(mpomedr13['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(mp_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13young['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13young['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13young['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13young['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13young['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(young_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13yless['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13yless['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13yless['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13yless['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13yless['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(yless_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13ymed['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13ymed['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13ymed['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13ymed['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13ymed['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(ymed_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13omed['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13omed['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13omed['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13omed['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13omed['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(omed_surfden),CLUSTER_7,CLUSTER_5
fd,numpy.where(r13old['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
field_H,numpy.where(r13old['FIELD']==field_str[i]),CLUSTER_7,CLUSTER_5
fld,numpy.where(r13old['FIELD']==i),CLUSTER_7,CLUSTER_5
fnts,numpy.where(r13old['TARGET_NAME'][fld]=='FntRGB'),CLUSTER_7,CLUSTER_5
brts,numpy.where(r13old['TARGET_NAME'][fld]=='BrtRGB'),CLUSTER_7,CLUSTER_5
good,numpy.where(np.asarray(old_surfden),CLUSTER_7,CLUSTER_5
cpsi,numpy.cos(np.radians(psi),CLUSTER_7,CLUSTER_5
spsi,numpy.cos(np.radians(psi),CLUSTER_7,CLUSTER_5
lgteff_new,numpy.log10(teff_new),CLUSTER_7,CLUSTER_5
young,np.where(np.asarray(parages)[bloop_cut]<=numpy.log10(0.5*10**9),CLUSTER_7,CLUSTER_5
young,np.where(parage[bloop_cut]<=numpy.log10(0.5*10**9),CLUSTER_7,CLUSTER_5
yless,np.where((parage[bloop_cut]>numpy.log10(0.5*10**9))&(parage[bloop_cut]<=numpy.log10(2.0*10**9),CLUSTER_7,CLUSTER_5
ymed,np.where((parage[bloop_cut]>numpy.log10(2.0*10**9))&(parage[bloop_cut]<=numpy.log10(7*10**9),CLUSTER_7,CLUSTER_5
omed,np.where((parage[bloop_cut]>numpy.log10(7*10**9))&(parage[bloop_cut]<=numpy.log10(10.5*10**9),CLUSTER_7,CLUSTER_5
field_areas,"numpy.multiply(np.pi*np.square(numpy.multiply(field_ang,0.875)",CLUSTER_7,CLUSTER_5
ell_r,numpy.sqrt(np.square(x*cpsi-y*spsi),CLUSTER_7,CLUSTER_5
CMERR,numpy.sqrt((cfeERR),CLUSTER_7,CLUSTER_5
NMERR,numpy.sqrt((nfeERR),CLUSTER_7,CLUSTER_5
ffacERR,numpy.sqrt((x_CERR),CLUSTER_7,CLUSTER_5
radius,"numpy.linspace(0,7,num=1000)",CLUSTER_7,CLUSTER_5
radii_rm30dor,"numpy.delete(radii,0)",CLUSTER_7,CLUSTER_5
surfden_rm30dor,"numpy.delete(surfden,0)",CLUSTER_7,CLUSTER_5
mint1_radii,numpy.delete(np.asarray(mint1_radii),CLUSTER_7,CLUSTER_5
mint1_surfden,numpy.delete(np.asarray(mint1_surfden),CLUSTER_7,CLUSTER_5
mint2_radii,numpy.delete(np.asarray(mint2_radii),CLUSTER_7,CLUSTER_5
mint2_surfden,numpy.delete(np.asarray(mint2_surfden),CLUSTER_7,CLUSTER_5
mr_radii,numpy.delete(np.asarray(mr_radii),CLUSTER_7,CLUSTER_5
mr_surfden,numpy.delete(np.asarray(mr_surfden),CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_7,CLUSTER_5
pca_transform,sklearn.decomposition.PCA(n_components=3),CLUSTER_7,CLUSTER_5
variants_train,"pandas.read_csv('/Users/cory/Desktop/Kaggle/msk/training_variants.txt',index_col=0,verbose=True)",CLUSTER_5,CLUSTER_5
variants_test,"pandas.read_csv('/Users/cory/Desktop/Kaggle/all/stage2_test_variants.csv',index_col=0,verbose=True)",CLUSTER_5,CLUSTER_5
text_train,"pandas.read_table('/Users/cory/Desktop/Kaggle/msk/training_text.txt',sep='\|\|',engine='python',verbose=True)",CLUSTER_5,CLUSTER_5
text_test,"pandas.read_table('/Users/cory/Desktop/Kaggle/all/stage2_test_text.csv',sep='\|\|',engine='python',verbose=True)",CLUSTER_5,CLUSTER_5
text_clf,"sklearn.pipeline.Pipeline([('vect',CountVectorizer()",CLUSTER_5,CLUSTER_5
"X_train,X_test","sklearn.model_selection.train_test_split(Train,train_size=.7)",CLUSTER_5,CLUSTER_5
results,"pandas.DataFrame(columns=['mae','rmse'],index=model_name_list)",CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
results,"pandas.DataFrame(index=X_test.index,columns=['estimate'])",CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
var_weights,pandas.DataFrame(var_dict),CLUSTER_7,CLUSTER_8
observation,"pandas.Series({'Intercept':1,'mother_edu':4,'failures':0,
'higher_edu':1,'studytime':3,
'father_edu':1,'absences':1})",CLUSTER_7,CLUSTER_8
observation,"pandas.Series({'Intercept':1,'mother_edu':2,'failures':2,
'higher_edu':1,'studytime':2,
'father_edu':3,'absences':4})",CLUSTER_7,CLUSTER_8
observation,"pandas.Series({'Intercept':1,'mother_edu':4,'failures':0,
'higher_edu':1,'studytime':3,
'father_edu':1,'absences':1})",CLUSTER_7,CLUSTER_8
observation,"pandas.Series({'Intercept':1,'mother_edu':4,'failures':0,
'higher_edu':1,'studytime':3,
'father_edu':1,'absences':1})",CLUSTER_7,CLUSTER_8
dummy_df,pandas.get_dummies(category_df),CLUSTER_7,CLUSTER_8
df,pandas.get_dummies(df),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('data/student-mat.csv'),CLUSTER_7,CLUSTER_8
actual,numpy.array(y_test),CLUSTER_7,CLUSTER_8
"results.ix[row[0],'estimate']",numpy.dot(np.array(var_means),CLUSTER_7,CLUSTER_8
mean_loc,"numpy.dot(var_means,test_observation)",CLUSTER_7,CLUSTER_8
mean_loc,"numpy.dot(var_means,new_observation)",CLUSTER_7,CLUSTER_8
mean_loc,"numpy.dot(var_means,test_observation)",CLUSTER_7,CLUSTER_8
mean_loc,"numpy.dot(var_means,new_observation)",CLUSTER_7,CLUSTER_8
mae,numpy.mean(abs(predictions-true),CLUSTER_7,CLUSTER_8
mae,numpy.mean(abs(predictions-y_test),CLUSTER_7,CLUSTER_8
baseline_mae,numpy.mean(abs(baseline-y_test),CLUSTER_7,CLUSTER_8
mae,numpy.mean(abs(errors),CLUSTER_7,CLUSTER_8
rmse,numpy.sqrt(np.mean((predictions-true),CLUSTER_7,CLUSTER_8
rmse,numpy.sqrt(np.mean((predictions-y_test),CLUSTER_7,CLUSTER_8
baseline_rmse,numpy.sqrt(np.mean((baseline-y_test),CLUSTER_7,CLUSTER_8
rmse,numpy.sqrt(np.mean(errors**2),CLUSTER_7,CLUSTER_8
"pm.plot_posterior_predictive_glm(trace,eval","numpy.linspace(var_min,var_max,100)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-5,5,num=500)",CLUSTER_7,CLUSTER_8
baseline,numpy.median(y_train),CLUSTER_7,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,2,1)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,2,2)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,2,1)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,2,2)",CLUSTER_7,CLUSTER_8
g,seaborn.PairGrid(X_train),CLUSTER_7,CLUSTER_8
cmap,"seaborn.cubehelix_palette(light=1,dark=0.1,
hue=0.5,as_cmap=True)",CLUSTER_7,CLUSTER_8
"r,_","scipy.stats.pearsonr(x,y)",CLUSTER_7,CLUSTER_8
model1,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
model2,"sklearn.linear_model.ElasticNet(alpha=1.0,l1_ratio=0.5)",CLUSTER_7,CLUSTER_8
model3,sklearn.ensemble.RandomForestRegressor(n_estimators=50),CLUSTER_7,CLUSTER_8
model4,sklearn.ensemble.ExtraTreesRegressor(n_estimators=50),CLUSTER_7,CLUSTER_8
model6,sklearn.ensemble.GradientBoostingRegressor(n_estimators=20),CLUSTER_7,CLUSTER_8
model5,"sklearn.svm.SVR(kernel='rbf',degree=3,C=1.0,gamma='auto')",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df,labels,
test_size=0.25,
random_state=42)",CLUSTER_7,CLUSTER_8
click,"pandas.read_csv(url_click,sep='\t',thousands='.',decimal=',',header=None)",CLUSTER_12,CLUSTER_3
tokenized_verses,numpy.array(tokenized_verses),CLUSTER_0,CLUSTER_6
Config,"collections.namedtuple('Config',
field_names=""batch_size,n_epochs,lr,gradient_accumulation_steps,n_warmup,max_norm,dropout,log_dir,device"")",CLUSTER_0,CLUSTER_6
temp_GDF_Y['TempGrps'],"pandas.cut(temp_GDF_Y['Monthly_Temp'],temp_quartiles,labels=grp_names)",CLUSTER_11,CLUSTER_8
temp_GDF_Y['TempGrps'],"pandas.cut(temp_GDF_Y['Year'],bins,labels=group_names)",CLUSTER_11,CLUSTER_8
temp_flatDF,"pandas.melt(tempDF,id_vars=['Country','Year'],var_name='Month',value_name=""Monthly_Temp"")",CLUSTER_11,CLUSTER_8
temp_flatDF,"pandas.melt(tempDF,id_vars=['Country','Year'],var_name='Month',value_name=""Monthly_Temp"")",CLUSTER_11,CLUSTER_8
co2_flatDF,"pandas.melt(co2DF,id_vars=['Year'],var_name='Month',value_name=""Monthly_Co2"")",CLUSTER_11,CLUSTER_8
aer_flatDF,"pandas.melt(aerDF,id_vars=['Year'],var_name='Month',value_name=""Monthly_AER"")",CLUSTER_11,CLUSTER_8
tsi_flatDF,"pandas.melt(tsiDF,id_vars=['Year'],var_name='Month',value_name=""Monthly_TSI"")",CLUSTER_11,CLUSTER_8
temp_co2,"pandas.merge(temp_GDF_YM,co2_flatDF,left_on=['Year','Month'],right_on=['Year','Month'],\
how='inner',suffixes=['_temp','_co2'])",CLUSTER_11,CLUSTER_8
temp_2var,"pandas.merge(temp_co2,aer_flatDF,left_on=['Year','Month'],right_on=['Year','Month'],\
how='inner')",CLUSTER_11,CLUSTER_8
temp_3var,"pandas.merge(temp_2var,tsi_flatDF,left_on=['Year','Month'],right_on=['Year','Month'],\
how='inner')",CLUSTER_11,CLUSTER_8
tempDF,"pandas.read_csv(os.path.join(data_path,temp_dataFile)",CLUSTER_11,CLUSTER_8
tempDF,"pandas.read_csv(os.path.join(data_path,temp_dataFile)",CLUSTER_11,CLUSTER_8
co2DF,"pandas.read_csv(os.path.join(data_path,co2_dataFile)",CLUSTER_11,CLUSTER_8
aerDF,"pandas.read_csv(os.path.join(data_path,aer_dataFile)",CLUSTER_11,CLUSTER_8
tsiDF,"pandas.read_csv(os.path.join(data_path,tsi_dataFile)",CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_11,CLUSTER_8
"fig,axs","matplotlib.pyplot.subplots(1,3,figsize=(20,7)",CLUSTER_11,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(17,13)",CLUSTER_11,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(17,13)",CLUSTER_11,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(17,13)",CLUSTER_11,CLUSTER_8
box_ax,"seaborn.boxplot(x=""TempGrps"",y=""Monthly_Temp"",data=temp_GDF_Y,palette='RdYlBu_r')",CLUSTER_11,CLUSTER_8
distPlt_Temp,"seaborn.distplot(temp_GDF_Y['Monthly_Temp'],color=""

distPlt_Temp.set(xlabel='AvgTemperature(degC)",CLUSTER_11,CLUSTER_8
g,"seaborn.lineplot(x_axis1,y_axis1,color='

ax1=g.axes
ax1.set_xticklabels(ax1.get_xticks()",CLUSTER_11,CLUSTER_8
regPlot_ax,"seaborn.regplot(x=""Year"",y=""Monthly_Temp"",data=temp_GDF_Y,ci=95,x_estimator=np.mean,\
scatter_kws={""color"":""

regPlot_ax.set(xlabel='Years',ylabel='Avg.Temperature(DegC)",CLUSTER_11,CLUSTER_8
simpPlt_ax,"seaborn.relplot('Year','Monthly_Temp',data=temp_GDF_Y,\
hue='Z_SCORE',palette='nipy_spectral',s=85)",CLUSTER_11,CLUSTER_8
"(slope,intercept,r_value,p_value,std_err)","scipy.stats.linregress(x_axis,y_axis)",CLUSTER_11,CLUSTER_8
reslt,"scipy.stats.f_oneway(group1,group2,group3,group4)",CLUSTER_11,CLUSTER_8
X,"numpy.linspace(-2,2,7)",CLUSTER_5,CLUSTER_5
X,"numpy.linspace(-2,2,7)",CLUSTER_5,CLUSTER_5
x_val,"numpy.linspace(-2,2,100)",CLUSTER_5,CLUSTER_5
X,"numpy.linspace(-2,2,7)",CLUSTER_5,CLUSTER_5
x_vals,"numpy.linspace(-2,2,100)",CLUSTER_5,CLUSTER_5
tr,"numpy.linspace(-1.9,1.9,50)",CLUSTER_5,CLUSTER_5
X,"numpy.linspace(-2,2,7)",CLUSTER_5,CLUSTER_5
x_values,"numpy.linspace(-2,2,100)",CLUSTER_5,CLUSTER_5
df,"pandas.get_dummies(df,columns=['gluc','cholesterol'])",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv('data/mlbootcamp5_train.csv',index_col='id',sep=';')",CLUSTER_5,CLUSTER_5
d,"pandas.read_csv('data/mlbootcamp5_train.csv',index_col='id',sep=';')",CLUSTER_5,CLUSTER_5
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(df_c,df['cardio'],train_size=0.7,test_size=0.3,random_state=17)",CLUSTER_5,CLUSTER_5
tree_grid,"sklearn.model_selection.GridSearchCV(tr,tree_params,cv=5,verbose=True)",CLUSTER_5,CLUSTER_5
tr_grid,"sklearn.model_selection.GridSearchCV(tr,t_params,cv=5,verbose=True)",CLUSTER_5,CLUSTER_5
tr,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=3,random_state=17)",CLUSTER_5,CLUSTER_5
trr,"sklearn.tree.DecisionTreeClassifier(max_depth=3,random_state=17)",CLUSTER_5,CLUSTER_5
muts_x_sample_df,pandas.DataFrame(index=set(nonimmune_df.sample_name),CLUSTER_8,CLUSTER_4
coverage_all_total,"pandas.DataFrame(index=all_cells,columns=all_muts)",CLUSTER_8,CLUSTER_4
coverage_all_variant,"pandas.DataFrame(index=all_cells,columns=all_muts)",CLUSTER_8,CLUSTER_4
muts_x_sample_df_ratios,pandas.DataFrame(index=list(muts_x_sample_df_variant.index),CLUSTER_8,CLUSTER_4
muts_x_sample_df_ratios,pandas.DataFrame(index=list(muts_x_sample_df_variant.index),CLUSTER_8,CLUSTER_4
coverage_run_old,pandas.read_csv('/Users/lincoln.harris/Desktop/coverage_run_all.csv'),CLUSTER_8,CLUSTER_4
nonimmune_df,"pandas.read_csv('/Users/lincoln.harris/Desktop/laud_process_new_cells/sample_cell_key.csv',index_col=0)",CLUSTER_8,CLUSTER_4
coverage_run_new,pandas.read_csv('/Users/lincoln.harris/Desktop/laud_process_new_cells/new_nonimmune_cells_cerebra_out_3.21.20.csv'),CLUSTER_8,CLUSTER_4
X,"numpy.concatenate([X,np.apply_along_axis(shift,1,X)",CLUSTER_5,CLUSTER_9
Y,"numpy.concatenate([y,y],axis=0)",CLUSTER_5,CLUSTER_9
X_red,sklearn.manifold.SpectralEmbedding(n_components=2),CLUSTER_5,CLUSTER_9
digits,sklearn.datasets.load_digits(n_class=10),CLUSTER_5,CLUSTER_9
clustering,"sklearn.cluster.KMeans(init='k-means++',n_clusters=10,n_init=10)",CLUSTER_5,CLUSTER_9
array,"numpy.array([1,4,5,8],float)",CLUSTER_8,CLUSTER_3
array,"numpy.array([[1,2,3],[4,5,6]],float)",CLUSTER_8,CLUSTER_3
array,"numpy.array([1,4,5,8],float)",CLUSTER_8,CLUSTER_3
two_D_array,"numpy.array([[1,2,3],[4,5,6]],float)",CLUSTER_8,CLUSTER_3
array_1,"numpy.array([1,2,3],float)",CLUSTER_8,CLUSTER_3
array_2,"numpy.array([5,2,6],float)",CLUSTER_8,CLUSTER_3
array_1,"numpy.array([[1,2],[3,4]],float)",CLUSTER_8,CLUSTER_3
array_2,"numpy.array([[5,6],[7,8]],float)",CLUSTER_8,CLUSTER_3
array_1,"numpy.array([1,2,3],float)",CLUSTER_8,CLUSTER_3
array_2,"numpy.array([[6],[7],[8]],float)",CLUSTER_8,CLUSTER_3
football,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
football,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
football,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
football,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
series,"pandas.Series(['Dave','Cheng-Han','Udacity',42,-1789710578])",CLUSTER_8,CLUSTER_3
series,"pandas.Series(['Dave','Cheng-Han',359,9001],
index=['Instructor','CurriculumManager',
'CourseNumber','PowerLevel'])",CLUSTER_8,CLUSTER_3
series,"pandas.Series(['Dave','Cheng-Han',359,9001],
index=['Instructor','CurriculumManager',
'CourseNumber','PowerLevel'])",CLUSTER_8,CLUSTER_3
cuteness,"pandas.Series([1,2,3,4,5],index=['Cockroach','Fish','MiniPig',
'Puppy','Kitten'])",CLUSTER_8,CLUSTER_3
olympic_medal_counts_df,"pandas.DataFrame({
'countryName':Series(countries)",CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(olympic_medal_counts),CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame({
'country_name':countries,
'gold':Series(gold)",CLUSTER_8,CLUSTER_3
olympic_points_df,"pandas.DataFrame({
'country_name':Series(countries)",CLUSTER_8,CLUSTER_3
points,"numpy.dot(df[['gold','silver','bronze']],[4,2,1])",CLUSTER_8,CLUSTER_3
train,"pandas.concat([train,wind_train],axis=1)",CLUSTER_7,CLUSTER_9
test,"pandas.concat([test,wind_test],axis=1)",CLUSTER_7,CLUSTER_9
wind_train,pandas.get_dummies(train['NumberOfWindows']),CLUSTER_7,CLUSTER_9
wind_test,pandas.get_dummies(test['NumberOfWindows']),CLUSTER_7,CLUSTER_9
train,pandas.read_csv('train_data.csv'),CLUSTER_7,CLUSTER_9
test,pandas.read_csv('test_data.csv'),CLUSTER_7,CLUSTER_9
sub,pandas.read_csv('sample_submission(1),CLUSTER_7,CLUSTER_9
response,requests.get(target_url),CLUSTER_9,CLUSTER_2
response,requests.get(first_link),CLUSTER_9,CLUSTER_2
response,requests.get(link),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(arrange_data),CLUSTER_9,CLUSTER_2
img,numpy.array(img),CLUSTER_9,CLUSTER_2
img,numpy.array(img),CLUSTER_9,CLUSTER_2
x,"numpy.expand_dims(x,axis=0)",CLUSTER_2,CLUSTER_7
n_rows,math.ceil(filters/n_columns),CLUSTER_2,CLUSTER_7
x,"numpy.array([x_green,x_red],dtype=float)",CLUSTER_1,CLUSTER_9
y,"numpy.array([435.833,614.95])",CLUSTER_1,CLUSTER_9
X,"numpy.column_stack((x,x**2)",CLUSTER_1,CLUSTER_9
Hg,numpy.loadtxt(fname),CLUSTER_1,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(3),CLUSTER_1,CLUSTER_9
logT,"numpy.arange(3.5,6.6,0.1)",CLUSTER_1,CLUSTER_10
fit,numpy.poly1d(coe),CLUSTER_1,CLUSTER_10
coe,numpy.polyfit(np.log10(rho),CLUSTER_1,CLUSTER_10
coeff_names,numpy.array(list(regression_coefficients[0].keys(),CLUSTER_12,CLUSTER_5
coeff_samples,numpy.array(coeff_samples),CLUSTER_12,CLUSTER_5
all_kfold_scores,"numpy.array([x_kfold_scores,poly2_kfold_scores,poly4_kfold_scores])",CLUSTER_12,CLUSTER_5
si,numpy.argsort(np.abs(BikeOLSModel.coef_[0]),CLUSTER_12,CLUSTER_5
bottom_percentile,"numpy.percentile(coeff_samples,q=significance_level/2,axis=0)",CLUSTER_12,CLUSTER_5
top_percentile,"numpy.percentile(coeff_samples,q=1-significance_level/2,axis=0)",CLUSTER_12,CLUSTER_5
all_interactions,pandas.DataFrame(poly_model.fit_transform(df),CLUSTER_12,CLUSTER_5
X_kfold_train,"pandas.DataFrame(X_train.values[train_index],columns=X_train.columns)",CLUSTER_12,CLUSTER_5
X_kfold_test,"pandas.DataFrame(X_train.values[test_index],columns=X_train.columns)",CLUSTER_12,CLUSTER_5
higher_orders_train,"pandas.concat(higher_orders_train,axis=1)",CLUSTER_12,CLUSTER_5
higher_orders_test,"pandas.concat(higher_orders_test,axis=1)",CLUSTER_12,CLUSTER_5
poly_train,pandas.concat([dataset_train.reset_index(),CLUSTER_12,CLUSTER_5
poly_test,pandas.concat([dataset_test.reset_index(),CLUSTER_12,CLUSTER_5
BSS_train,pandas.read_csv('data/BSS_train.csv'),CLUSTER_12,CLUSTER_5
BSS_test,pandas.read_csv('data/BSS_test.csv'),CLUSTER_12,CLUSTER_5
train_r2_score,"sklearn.metrics.r2_score(y_train,BikeOLSModel.predict(X_train)",CLUSTER_12,CLUSTER_5
test_r2_score,"sklearn.metrics.r2_score(y_test,BikeOLSModel.predict(X_test)",CLUSTER_12,CLUSTER_5
poly_model,"sklearn.preprocessing.PolynomialFeatures(k,include_bias=False)",CLUSTER_12,CLUSTER_5
poly_model,"sklearn.preprocessing.PolynomialFeatures(2,include_bias=False,interaction_only=True)",CLUSTER_12,CLUSTER_5
BikeRRModel,"sklearn.linear_model.RidgeCV(cv=5,alphas=lambdas,fit_intercept=True)",CLUSTER_12,CLUSTER_5
BikeLRModel,"sklearn.linear_model.LassoCV(cv=5,alphas=lambdas,fit_intercept=True)",CLUSTER_12,CLUSTER_5
BikeOLSModel,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
BikeOLSPolyModel,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
kfold,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
poly2,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
poly4,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
base_model,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
poly2_model,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
poly4_model,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_5
MLR_scores,sklearn.model_selection.cross_val_score(LinearRegression(),CLUSTER_12,CLUSTER_5
k_fold,sklearn.model_selection.KFold(n_splits=5),CLUSTER_12,CLUSTER_5
feat_imp,pandas.Series(alg.get_booster(),CLUSTER_7,CLUSTER_8
train,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
test,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x='Age',y='Purchase',hue='Gender',data=train)",CLUSTER_7,CLUSTER_8
mars_facts,pandas.read_html(facts_url),CLUSTER_11,CLUSTER_12
ff,numpy.array(f),CLUSTER_4,CLUSTER_0
fin,numpy.array(final),CLUSTER_4,CLUSTER_0
cate1,numpy.array(cate),CLUSTER_4,CLUSTER_0
fram1,numpy.array(fram),CLUSTER_4,CLUSTER_0
x,numpy.array(image2),CLUSTER_4,CLUSTER_0
new_new,"numpy.concatenate((data,fin)",CLUSTER_4,CLUSTER_0
max_train1,"numpy.argmax(predictions_train,axis=1)",CLUSTER_4,CLUSTER_0
max_test,"numpy.argmax(predictions_test,axis=1)",CLUSTER_4,CLUSTER_0
image1,"numpy.resize(im[sss],(28,28,3)",CLUSTER_4,CLUSTER_0
av,"numpy.append(fram1,cate1,axis=1)",CLUSTER_4,CLUSTER_0
new_new,"numpy.load(""new.npy"",allow_pickle=True)",CLUSTER_4,CLUSTER_0
ab,pandas.read_csv('test.csv'),CLUSTER_4,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(x,y,test_size=0.2)",CLUSTER_4,CLUSTER_0
accuracy_train,"sklearn.metrics.accuracy_score(ytrain,max_train1)",CLUSTER_4,CLUSTER_0
accuracy_test,"sklearn.metrics.accuracy_score(ytest,max_test)",CLUSTER_4,CLUSTER_0
precision_train,"sklearn.metrics.precision_score(ytrain,max_train1,average='weighted')",CLUSTER_4,CLUSTER_0
precision_test,"sklearn.metrics.precision_score(ytest,max_test,average='weighted')",CLUSTER_4,CLUSTER_0
recall_train,"sklearn.metrics.recall_score(ytrain,max_train1,average='weighted')",CLUSTER_4,CLUSTER_0
recall_test,"sklearn.metrics.recall_score(ytest,max_test,average='weighted')",CLUSTER_4,CLUSTER_0
f1score_train,"sklearn.metrics.f1_score(ytrain,max_train1,average='weighted')",CLUSTER_4,CLUSTER_0
f1score_test,"sklearn.metrics.f1_score(ytest,max_test,average='weighted')",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(ytrain,max_train1)",CLUSTER_4,CLUSTER_0
cm_test,"sklearn.metrics.confusion_matrix(ytest,max_test)",CLUSTER_4,CLUSTER_0
x,"numpy.zeros(4,dtype=np.int)",CLUSTER_3,CLUSTER_6
data,"numpy.zeros(4,dtype={'names':('name','age','weight')",CLUSTER_3,CLUSTER_6
data2,"numpy.zeros(4,dtype=[('name','U10')",CLUSTER_3,CLUSTER_6
df3,pandas.DataFrame(df3),CLUSTER_1,CLUSTER_3
df4,"pandas.DataFrame(df4,index=[1,2,3,4,5])",CLUSTER_1,CLUSTER_3
df,"pandas.read_csv('crime_in_Seoul.csv',engine='python',index_col='관서명',encoding='euc-kr',thousands=',')",CLUSTER_1,CLUSTER_3
dfTuple,"pandas.DataFrame(tupAppend,columns=['CellIdx','Sentence'])",CLUSTER_11,CLUSTER_1
result_pd,"pandas.DataFrame({
""class"":labels,
""precision"":precision,
""recall"":recall,
""f1-score"":fscore,
""support"":support
})",CLUSTER_11,CLUSTER_1
df_3Col,"pandas.merge(dfout,df,how='inner',left_on='CellIdx',right_on='new_id')",CLUSTER_11,CLUSTER_1
dfTrain,"pandas.read_csv(""dfTrain.csv"")",CLUSTER_11,CLUSTER_1
dfTest,"pandas.read_csv(""dfTest.csv"")",CLUSTER_11,CLUSTER_1
dfRemoveStartsWithRow,"pandas.read_csv(""startsWith.csv"")",CLUSTER_11,CLUSTER_1
dfout,pandas.read_csv(fnToSave),CLUSTER_11,CLUSTER_1
text_clf,"sklearn.pipeline.Pipeline([
('vect',CountVectorizer(ngram_range=(1,2)",CLUSTER_11,CLUSTER_1
"precision,recall,fscore,support","sklearn.metrics.precision_recall_fscore_support(dftest.Area,predicted,labels=labels)",CLUSTER_11,CLUSTER_1
data,pandas.read_csv('housing.csv'),CLUSTER_5,CLUSTER_1
score,"sklearn.metrics.r2_score(y_true,y_predict)",CLUSTER_5,CLUSTER_1
scoring_fnc,sklearn.metrics.make_scorer(performance_metric),CLUSTER_5,CLUSTER_1
regressor,sklearn.tree.DecisionTreeRegressor(),CLUSTER_5,CLUSTER_1
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
labels,numpy.array(labels),CLUSTER_6,CLUSTER_11
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
conv_features,numpy.concatenate([[feat]forfeatinconv_features]),CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,50)",CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,50)",CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,50)",CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(30,30)",CLUSTER_6,CLUSTER_11
titanic,"pandas.read_csv(""C:/Users/GOLUVERMA/Desktop/sachin'sppts/titanic.csv"")",CLUSTER_7,CLUSTER_5
t1['sex'],sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_5
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(n_estimators=45),CLUSTER_7,CLUSTER_5
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=40,criterion='entropy')",CLUSTER_7,CLUSTER_5
dt,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_7,CLUSTER_5
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df,df_dummies],axis=1)",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df_dummies,"pandas.get_dummies(df['hour'],prefix='hour')",CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/august_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/september_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/october_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/november_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/december_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/january_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/february_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/march_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/april_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/may_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/june_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
df,pandas.read_hdf('/data_analytics/data/july_bus_data_cleaned.hdf'),CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(pipeline,X,y,scoring='neg_mean_squared_error',cv=3)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([('transformer',scaler)",CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
gtb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=5,n_estimators=125)",CLUSTER_5,CLUSTER_1
x,"numpy.arange(0,9,9/50)",CLUSTER_1,CLUSTER_9
result_array,"numpy.array([np.power(x,m)",CLUSTER_1,CLUSTER_9
A,"numpy.empty([0,N])",CLUSTER_1,CLUSTER_9
A,numpy.transpose(A),CLUSTER_1,CLUSTER_9
L_tl,numpy.sqrt(A_tl),CLUSTER_1,CLUSTER_9
A,"numpy.append(A,result_array,axis=0)",CLUSTER_1,CLUSTER_9
L,numpy.eye(len(A),CLUSTER_1,CLUSTER_9
p,numpy.poly1d(np.flip(w),CLUSTER_1,CLUSTER_9
c,"scipy.linalg.solve_triangular(R,b_new,lower=True)",CLUSTER_1,CLUSTER_9
x_w,"scipy.linalg.solve_triangular(R.T,c,lower=False)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
res,"pandas.DataFrame(index=['Daily','Weekly','Monthly','Quarterly','Annually','Hold'])",CLUSTER_4,CLUSTER_11
table,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
table_print,"pandas.DataFrame(table,copy=True)",CLUSTER_4,CLUSTER_11
w_b,"pandas.Series(index=returns.columns,data=1)",CLUSTER_4,CLUSTER_11
benchmark_returns,"pandas.Series(index=used_returns.index,data=np.dot(used_returns.values,w_b.values)",CLUSTER_4,CLUSTER_11
sigmas,"pandas.read_csv(datadir+'sigmas.csv.gz',index_col=0,parse_dates=[0])",CLUSTER_4,CLUSTER_11
returns,"pandas.read_csv(datadir+'returns.csv.gz',index_col=0,parse_dates=[0])",CLUSTER_4,CLUSTER_11
volumes,"pandas.read_csv(datadir+'volumes.csv.gz',index_col=0,parse_dates=[0])",CLUSTER_4,CLUSTER_11
benchmark_returns,"pd.Series(index=used_returns.index,data=numpy.dot(used_returns.values,w_b.values)",CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
y_pred,numpy.exp(predictions),CLUSTER_7,CLUSTER_8
Y,numpy.log(Y),CLUSTER_7,CLUSTER_8
df_submission,"pandas.DataFrame({'id':id_test,'price_doc':y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
df_all,"pandas.concat([train,test])",CLUSTER_7,CLUSTER_8
df_all,"pandas.concat([df_numeric,df_obj],axis=1)",CLUSTER_7,CLUSTER_8
df_obj[c],pandas.factorize(df_obj[c]),CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(PATH+""train.csv"",parse_dates=['timestamp'])",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(PATH+""test.csv"",parse_dates=['timestamp'])",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2)",CLUSTER_7,CLUSTER_8
reg,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
rmse,"math.sqrt(mean_squared_error(y_test,y_pred.astype('int64')",CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.GradientBoostingRegressor(loss='quantile',alpha=alpha,
n_estimators=10,max_depth=3,
learning_rate=.1,min_samples_leaf=9,
min_samples_split=9)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
clf,"sklearn.neural_network.MLPRegressor(solver='lbfgs',alpha=1e-5,
hidden_layer_sizes=(7,)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=0)",CLUSTER_7,CLUSTER_8
X_scaled,pandas.DataFrame(self.scaler.transform(X[self.columns]),CLUSTER_5,CLUSTER_1
summary_table,"pandas.DataFrame(columns=['Featurename'],data=feature_name)",CLUSTER_5,CLUSTER_1
data_preprocessed,pandas.read_csv('Absenteeism_preprocessed.csv'),CLUSTER_5,CLUSTER_1
targets,numpy.where(data_preprocessed['AbsenteeismTimeinHours']>data_preprocessed['AbsenteeismTimeinHours'].median(),CLUSTER_5,CLUSTER_1
self.mean_,numpy.mean(X[self.columns]),CLUSTER_5,CLUSTER_1
summary_table['coefficient'],numpy.transpose(reg.coef_),CLUSTER_5,CLUSTER_1
self.var_,numpy.var(X[self.columns]),CLUSTER_5,CLUSTER_1
summary_table['oddratio'],numpy.exp(summary_table.coefficient),CLUSTER_5,CLUSTER_1
self.scaler,"sklearn.preprocessing.StandardScaler(copy,with_mean,with_std)",CLUSTER_5,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_inputs,targets,train_size=0.8,random_state=20)",CLUSTER_5,CLUSTER_1
reg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
train_store,"pandas.merge(train,store,how='left',on='Store')",CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(""./data/train.csv"",parse_dates=True,index_col='Date')",CLUSTER_7,CLUSTER_8
store,"pandas.read_csv(""./data/store.csv"")",CLUSTER_7,CLUSTER_8
"fig,axis","matplotlib.pyplot.subplots(1,1,figsize=(12,6)",CLUSTER_7,CLUSTER_8
g,"seaborn.FacetGrid(train_store.groupby(['DayOfWeek','StoreType','Month'],as_index=False)",CLUSTER_7,CLUSTER_8
g,"seaborn.FacetGrid(train_store.groupby(['Promo','Promo2','DayOfWeek'],as_index=False)",CLUSTER_7,CLUSTER_8
sub_train,pandas.DataFrame(app_train['WEEKDAY_APPR_PROCESS_START']),CLUSTER_8,CLUSTER_11
sub_train,pandas.DataFrame(app_train['WEEKDAY_APPR_PROCESS_START']),CLUSTER_8,CLUSTER_11
sub_train,pandas.get_dummies(sub_train),CLUSTER_8,CLUSTER_11
app_train,pandas.read_csv(f_app_train),CLUSTER_8,CLUSTER_11
gamma,"numpy.asarray([1.0,2.0,3.0])",CLUSTER_1,CLUSTER_10
beta,"numpy.asarray([11.0,12.0,13.0])",CLUSTER_1,CLUSTER_10
beta,numpy.zeros(D3),CLUSTER_1,CLUSTER_10
gamma,numpy.ones(D3),CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
weight_scales,"numpy.logspace(-4,0,num=20)",CLUSTER_1,CLUSTER_10
fig1,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_2,CLUSTER_7
fig2,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_2,CLUSTER_7
fig3,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_2,CLUSTER_7
fig4,"matplotlib.pyplot.figure(figsize=(12,12/5*2)",CLUSTER_2,CLUSTER_7
fig5,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_2,CLUSTER_7
fig6,"matplotlib.pyplot.figure(figsize=(6,3)",CLUSTER_2,CLUSTER_7
fig7,"matplotlib.pyplot.figure(figsize=(6,3)",CLUSTER_2,CLUSTER_7
fig8,"matplotlib.pyplot.figure(figsize=(2.5*cols,2.5*rows)",CLUSTER_2,CLUSTER_7
predicted_label,numpy.argmax(prob),CLUSTER_2,CLUSTER_7
predicted_label,numpy.argmax(prob),CLUSTER_2,CLUSTER_7
iftest_labels[i],=numpy.argmax(predictions[i]),CLUSTER_2,CLUSTER_7
iftest_labels[i]!,numpy.argmax(predictions[i]),CLUSTER_2,CLUSTER_7
glb,"pandas.concat([glb,us],ignore_index=True)",CLUSTER_8,CLUSTER_4
glb,"pandas.concat([tmp,tmp_num],axis=1)",CLUSTER_8,CLUSTER_4
glb,pandas.read_csv('compustat_10_glb.csv'),CLUSTER_8,CLUSTER_4
us,pandas.read_csv('compustat_10_us.csv'),CLUSTER_8,CLUSTER_4
curcd,pandas.read_csv('compustat_curcd_10.csv'),CLUSTER_8,CLUSTER_4
currtr,pandas.read_csv('compustat_currtr_10.csv'),CLUSTER_8,CLUSTER_4
glb,pandas.read_csv('compustat_10_glbus.csv'),CLUSTER_8,CLUSTER_4
curr,pandas.read_csv('exchange_rate_10.csv'),CLUSTER_8,CLUSTER_4
dose,"numpy.array([-.86,-.3,-.05,.73])",CLUSTER_1,CLUSTER_10
deaths,"numpy.array([0,1,3,5])",CLUSTER_1,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(2,5,figsize=(14,6)",CLUSTER_1,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(1,4,figsize=(12,6)",CLUSTER_1,CLUSTER_10
X_data,"numpy.concatenate((X_pos,X_neg)",CLUSTER_4,CLUSTER_7
Y_data,"numpy.concatenate((Y_pos,Y_neg)",CLUSTER_4,CLUSTER_7
Y_pos,"numpy.ones((num_data,1)",CLUSTER_4,CLUSTER_7
Y_neg,"numpy.ones((num_data,1)",CLUSTER_4,CLUSTER_7
plot_index,"numpy.argsort(predictionsoutput[:,0])",CLUSTER_4,CLUSTER_7
X_pos,"numpy.expand_dims(X_pos,axis=2)",CLUSTER_4,CLUSTER_7
X,"numpy.expand_dims(test['inputs'][plot_index[ii]],axis=0)",CLUSTER_4,CLUSTER_7
starttime,time.time(),CLUSTER_4,CLUSTER_7
starttime,time.time(),CLUSTER_4,CLUSTER_7
train,"pandas.read_csv('hw11t4v0_train.txt',sep='\t')",CLUSTER_5,CLUSTER_5
target,pandas.read_csv('hw11t4v0_target.txt'),CLUSTER_5,CLUSTER_5
test,"pandas.read_csv('hw11t4v0_test.txt',sep='\t')",CLUSTER_5,CLUSTER_5
target_test,pandas.read_csv('hw11t4v0_target_test.txt'),CLUSTER_5,CLUSTER_5
concatenated_data,"numpy.concatenate([train,test],axis=0)",CLUSTER_5,CLUSTER_5
error+,numpy.mean((predictions-target_test),CLUSTER_5,CLUSTER_5
attendance['key_guess'],"numpy.where(attendance['school_name']==school,fixed_guess,attendance['key_guess'])",CLUSTER_8,CLUSTER_11
attendance,pandas.DataFrame(),CLUSTER_8,CLUSTER_11
keys,pandas.read_csv('../data/intermediary/scorecard/names/broward.csv'),CLUSTER_8,CLUSTER_11
raw_attendance,pandas.read_csv('../data/input/foia/broward.csv'),CLUSTER_8,CLUSTER_11
DEFAULT_BEGIN,"datetime.datetime(1970,1,1)",CLUSTER_10,CLUSTER_12
DEFAULT_BEGIN,"datetime.datetime(1970,1,1)",CLUSTER_10,CLUSTER_12
self.DEFAULT_BEGIN,"datetime.datetime(1980,1,1)",CLUSTER_10,CLUSTER_12
DEFAULT_BEGIN,"datetime.datetime(1970,1,1)",CLUSTER_10,CLUSTER_12
interval.begin,"datetime.datetime(2016,1,1)",CLUSTER_10,CLUSTER_12
DEFAULT_BEGIN,"datetime.datetime(1970,1,1)",CLUSTER_10,CLUSTER_12
DEFAULT_END,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
end,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
TimeInterval,"collections.namedtuple('TimeInterval',['begin','end'])",CLUSTER_10,CLUSTER_12
self.start,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
running_time,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
imgs,"numpy.array([
image.img_to_array(image.load_img(img_path,target_size=(224,224)",CLUSTER_4,CLUSTER_11
sents,"numpy.array([
sent2ixs(""agroupofmenarestanding."".split("""")",CLUSTER_4,CLUSTER_11
vfs,numpy.array([_visual_features[image_index]]*len(sents),CLUSTER_4,CLUSTER_11
logprobs,numpy.log(prs),CLUSTER_4,CLUSTER_11
ix2word,"numpy.load('preprocessed_flickr30k/ix2word.npy',allow_pickle=True)",CLUSTER_4,CLUSTER_11
df,"pandas.DataFrame(
np.ones([len(img_paths)",CLUSTER_4,CLUSTER_11
ids,numpy.arange(labels.shape[0]),CLUSTER_2,CLUSTER_7
shfl1,numpy.arange(X_data.shape[0]),CLUSTER_2,CLUSTER_7
shfl2,numpy.arange(X_data.shape[0]),CLUSTER_2,CLUSTER_7
data_choice,numpy.concatenate([labels_dic[label]forlabelinlabels_dic.keys(),CLUSTER_2,CLUSTER_7
mean_image,numpy.mean(X_train),CLUSTER_2,CLUSTER_7
fig,"matplotlib.pyplot.figure(figsize=(10,5,)",CLUSTER_2,CLUSTER_7
data,pandas.read_csv('irrigation_machine.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=4)",CLUSTER_5,CLUSTER_5
service_key,json.load(sk_json),CLUSTER_10,CLUSTER_12
j,json.loads(res),CLUSTER_10,CLUSTER_12
j,json.loads(res),CLUSTER_10,CLUSTER_12
j,json.loads(res),CLUSTER_10,CLUSTER_12
tmFc,"time.strftime('%Y%m%d',time.localtime(time.time()",CLUSTER_10,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
music,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
X,pandas.DataFrame(music.loudness),CLUSTER_5,CLUSTER_9
X,pandas.DataFrame(music.loudness),CLUSTER_5,CLUSTER_9
X,pandas.DataFrame(music.duration),CLUSTER_5,CLUSTER_9
X,pandas.DataFrame(music.duration),CLUSTER_5,CLUSTER_9
T,"numpy.arange(0,50,0.1)",CLUSTER_5,CLUSTER_9
T,"numpy.arange(0,50,0.1)",CLUSTER_5,CLUSTER_9
T,"numpy.arange(0,50,0.1)",CLUSTER_5,CLUSTER_9
T,"numpy.arange(0,50,0.1)",CLUSTER_5,CLUSTER_9
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=10),CLUSTER_5,CLUSTER_9
knn_w,"sklearn.neighbors.KNeighborsRegressor(n_neighbors=10,weights='distance')",CLUSTER_5,CLUSTER_9
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=10),CLUSTER_5,CLUSTER_9
knn_w,"sklearn.neighbors.KNeighborsRegressor(n_neighbors=10,weights='distance')",CLUSTER_5,CLUSTER_9
score,"sklearn.model_selection.cross_val_score(knn,X,Y,cv=5)",CLUSTER_5,CLUSTER_9
score_w,"sklearn.model_selection.cross_val_score(knn_w,X,Y,cv=5)",CLUSTER_5,CLUSTER_9
score,"sklearn.model_selection.cross_val_score(knn,X,Y,cv=5)",CLUSTER_5,CLUSTER_9
score_w,"sklearn.model_selection.cross_val_score(knn_w,X,Y,cv=5)",CLUSTER_5,CLUSTER_9
range_list,"numpy.arange(0,50,5)",CLUSTER_4,CLUSTER_0
train_filenames_tmp,numpy.array(os.listdir(),CLUSTER_4,CLUSTER_0
test_filenames_tmp,numpy.array(os.listdir(),CLUSTER_4,CLUSTER_0
x_train,"numpy.zeros((n_train,image_width,image_height,channels)",CLUSTER_4,CLUSTER_0
y_train,"numpy.zeros((n_train,1)",CLUSTER_4,CLUSTER_0
x_test,"numpy.zeros((n_test,image_width,image_height,channels)",CLUSTER_4,CLUSTER_0
y_test,"numpy.zeros((n_test,1)",CLUSTER_4,CLUSTER_0
max_voting_accuracies,"numpy.zeros((51,1)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.zeros((10000,5)",CLUSTER_4,CLUSTER_0
average_accuracies,"numpy.zeros((51,1)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.zeros((10000,5)",CLUSTER_4,CLUSTER_0
basic_stacking_accuracies,"numpy.zeros((51,1)",CLUSTER_4,CLUSTER_0
pred,"numpy.argmax(pred,axis=1)",CLUSTER_4,CLUSTER_0
index,"numpy.argmax(pred_part,axis=2)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.argmax(pred_new,axis=2)",CLUSTER_4,CLUSTER_0
index,"numpy.argmax(pred_part,axis=2)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.argmax(pred_new,axis=2)",CLUSTER_4,CLUSTER_0
test_accuracy,"numpy.sum(np.equal(pred,y_test)",CLUSTER_4,CLUSTER_0
max_voting_accuracies[k],"numpy.sum(np.equal(pred_new,y_test)",CLUSTER_4,CLUSTER_0
max_voting_accuracy,"numpy.sum(np.equal(pred_new,y_test)",CLUSTER_4,CLUSTER_0
pred,"numpy.expand_dims(pred,axis=1)",CLUSTER_4,CLUSTER_0
pred,"numpy.expand_dims(pred,axis=1)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.expand_dims(pred_new,axis=1)",CLUSTER_4,CLUSTER_0
pred,"numpy.expand_dims(pred,axis=1)",CLUSTER_4,CLUSTER_0
pred_new,"numpy.expand_dims(pred_new,axis=1)",CLUSTER_4,CLUSTER_0
Q,"numpy.zeros((NS,NA)",CLUSTER_2,CLUSTER_7
window,numpy.ones(int(window_size),CLUSTER_2,CLUSTER_7
window,numpy.ones(int(window_size),CLUSTER_2,CLUSTER_7
NS,numpy.prod(o_cells),CLUSTER_2,CLUSTER_7
energy,pandas.read_csv(data_dir+'energydata_complete.csv'),CLUSTER_7,CLUSTER_3
prediction_df,"pandas.DataFrame({""prediction"":prediction})",CLUSTER_5,CLUSTER_5
prediction_df_1,"pandas.DataFrame({""prediction"":prediction})",CLUSTER_5,CLUSTER_5
prediction_df,"pandas.DataFrame({""prediction"":prediction})",CLUSTER_5,CLUSTER_5
prediction_df_1,"pandas.DataFrame({""prediction"":prediction})",CLUSTER_5,CLUSTER_5
training_result,"pandas.concat([prediction_df,target],axis=1)",CLUSTER_5,CLUSTER_5
training_result,"pandas.concat([prediction_df_1,actual_class_test],axis=1)",CLUSTER_5,CLUSTER_5
training_result,"pandas.concat([prediction_df,target],axis=1)",CLUSTER_5,CLUSTER_5
training_result,"pandas.concat([prediction_df_1,actual_class_test],axis=1)",CLUSTER_5,CLUSTER_5
users,"pandas.read_csv(""data/users.csv"")",CLUSTER_5,CLUSTER_5
survey,pandas.read_csv('data/survey.csv'),CLUSTER_5,CLUSTER_5
iris_df,"pandas.read_csv(url,names=(""sepallength"",""sepalwidth"",""petallength"",""petalwidth"",""class"")",CLUSTER_5,CLUSTER_5
data_R2,"pandas.read_csv(""./data/dataR2.csv"")",CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_5,CLUSTER_5
clf2,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_5,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_5,CLUSTER_5
clf2,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_5,CLUSTER_5
weather_data,pandas.DataFrame(weather_dict),CLUSTER_9,CLUSTER_2
response,requests.get(query_url+city),CLUSTER_9,CLUSTER_2
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
t,time.time(),CLUSTER_4,CLUSTER_0
elapsed_time_train,time.time(),CLUSTER_4,CLUSTER_0
t,time.time(),CLUSTER_4,CLUSTER_0
elapsed_time_train,time.time(),CLUSTER_4,CLUSTER_0
t,time.time(),CLUSTER_4,CLUSTER_0
elapsed_time_train,time.time(),CLUSTER_4,CLUSTER_0
y_autoenc,"numpy.dot(int_rep,B_auto)",CLUSTER_4,CLUSTER_0
y,"numpy.dot(x_train,B_t)",CLUSTER_4,CLUSTER_0
B_t,numpy.transpose(B_auto),CLUSTER_4,CLUSTER_0
x_train2,"numpy.tanh((np.dot(x_train,B_t)",CLUSTER_4,CLUSTER_0
x_test2,"numpy.tanh((np.dot(x_test,B_t)",CLUSTER_4,CLUSTER_0
mask,"numpy.array(proj_edge_dist_map<dist_to_edge,dtype='uint8')",CLUSTER_1,CLUSTER_10
mask,"numpy.array(proj_edge_dist_map<dist_to_edge,dtype='uint8')",CLUSTER_1,CLUSTER_10
proj_edge_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_edge_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_vert_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_vert_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
distances,numpy.zeros(len(edge_list),CLUSTER_1,CLUSTER_10
eucl_edge_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_edge_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_vert_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_vert_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
distances,numpy.zeros(len(edge_list),CLUSTER_1,CLUSTER_10
distances,numpy.zeros((len(edge_list),CLUSTER_1,CLUSTER_10
proj_edge_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_edge_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_vert_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
proj_vert_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
distances,numpy.zeros(len(edge_list),CLUSTER_1,CLUSTER_10
eucl_edge_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_edge_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_vert_dist_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
eucl_vert_id_map,numpy.zeros(red_shape),CLUSTER_1,CLUSTER_10
distances,numpy.zeros(len(edge_list),CLUSTER_1,CLUSTER_10
distances,numpy.zeros((len(edge_list),CLUSTER_1,CLUSTER_10
r,numpy.sqrt((x1-x2),CLUSTER_1,CLUSTER_10
M,"numpy.float32([[1,0,150],[0,1,50]])",CLUSTER_1,CLUSTER_10
M,"numpy.float32([[1,0,100],[0,1,100]])",CLUSTER_1,CLUSTER_10
ref_nodes,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\src\Resources\default\ref_nodes.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
trial_1_data,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\data\processed\2019-01-16_10-45-35\trial_1\position_log_files\pos_log_file.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
dat0,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\Data\processed\2019-06-20_15-23-03\trial_26\position_log_files\pos_log_file_0.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
dat1,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\Data\processed\2019-06-20_15-23-03\trial_26\position_log_files\pos_log_file_1.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
top_nodes,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\src\Resources\default\node_pos_top.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
bot_nodes,"numpy.genfromtxt(r'C:\Users\Gebruiker\Documents\HexAnalysis\src\Resources\default\node_pos_bottom.csv',delimiter=',',skip_header=True)",CLUSTER_1,CLUSTER_10
eucl_edge_dist_map,numpy.load('cache/eucl_edge_dist_map_top.npy'),CLUSTER_1,CLUSTER_10
eucl_edge_id_map,numpy.load('cache/eucl_edge_id_map_top.npy'),CLUSTER_1,CLUSTER_10
eucl_vert_dist_map,numpy.load('cache/eucl_vert_dist_map_top.npy'),CLUSTER_1,CLUSTER_10
eucl_vert_id_map,numpy.load('cache/eucl_vert_id_map_top.npy'),CLUSTER_1,CLUSTER_10
proj_edge_id_map,numpy.load('cache/proj_edge_id_map_top.npy'),CLUSTER_1,CLUSTER_10
proj_edge_dist_map,numpy.load('cache/proj_edge_dist_map_top.npy'),CLUSTER_1,CLUSTER_10
proj_vert_dist_map,numpy.load('cache/proj_vert_dist_map_top.npy'),CLUSTER_1,CLUSTER_10
proj_vert_id_map,numpy.load('cache/proj_vert_id_map_top.npy'),CLUSTER_1,CLUSTER_10
eucl_edge_dist_map,numpy.load('cache/eucl_edge_dist_map_bot.npy'),CLUSTER_1,CLUSTER_10
eucl_edge_id_map,numpy.load('cache/eucl_edge_id_map_bot.npy'),CLUSTER_1,CLUSTER_10
eucl_vert_dist_map,numpy.load('cache/eucl_vert_dist_map_bot.npy'),CLUSTER_1,CLUSTER_10
eucl_vert_id_map,numpy.load('cache/eucl_vert_id_map_bot.npy'),CLUSTER_1,CLUSTER_10
proj_edge_id_map,numpy.load('cache/proj_edge_id_map_bot.npy'),CLUSTER_1,CLUSTER_10
proj_edge_dist_map,numpy.load('cache/proj_edge_dist_map_bot.npy'),CLUSTER_1,CLUSTER_10
proj_vert_dist_map,numpy.load('cache/proj_vert_dist_map_bot.npy'),CLUSTER_1,CLUSTER_10
proj_vert_id_map,numpy.load('cache/proj_vert_id_map_bot.npy'),CLUSTER_1,CLUSTER_10
dist,math.sqrt(dx*dx+dy*dy),CLUSTER_1,CLUSTER_10
im,matplotlib.pyplot.imshow(image),CLUSTER_1,CLUSTER_10
im,matplotlib.pyplot.imshow(image),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(40,24)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(2,5,figsize=(40,24)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(40,24)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(2,5,figsize=(40,24)",CLUSTER_1,CLUSTER_10
dataset,pandas.read_csv('Data.csv'),CLUSTER_5,CLUSTER_5
labelencoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
labelencoder_y,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[0]),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
distmatrix,"scipy.spatial.distance_matrix(assigned_points_coords,unassigned_points_coords)",CLUSTER_0,CLUSTER_9
full_d_matrix,"scipy.spatial.distance_matrix(all_points_coords,all_points_coords)",CLUSTER_0,CLUSTER_9
dtest,"scipy.spatial.distance_matrix([a1,a2,a3,a4],[a2,a4])",CLUSTER_0,CLUSTER_9
X_toy,"numpy.array([[-1,-1],[-2,-1],[-3,-2],[1,1],[2,1],[3,2]])",CLUSTER_0,CLUSTER_9
a1,numpy.asarray(s.iloc[[0]]),CLUSTER_0,CLUSTER_9
df_BNG_90['label'],numpy.full((len(df_BNG_90),CLUSTER_0,CLUSTER_9
cols_for_min_2,"numpy.full((1,len(assigned_points)",CLUSTER_0,CLUSTER_9
min_dists,"numpy.full((1,len(assigned_points)",CLUSTER_0,CLUSTER_9
cols_for_min_2,"numpy.full((1,len(assigned_points)",CLUSTER_0,CLUSTER_9
min_dists,"numpy.full((1,len(assigned_points)",CLUSTER_0,CLUSTER_9
a,"numpy.argmax(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmax(dtest[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmin(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmin(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmin(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
a_0,"numpy.argmin(distmatrix[i,:])",CLUSTER_0,CLUSTER_9
A_i_arr_view,"numpy.around(A_i_arr,3)",CLUSTER_0,CLUSTER_9
n_i_arr,"numpy.add(np.multiply(A_i_arr,3)",CLUSTER_0,CLUSTER_9
n_i_arr_toy,"numpy.add(np.multiply(A_i_arr_toy,3)",CLUSTER_0,CLUSTER_9
threshold_10,"numpy.percentile(df_BNG['Ai'],10)",CLUSTER_0,CLUSTER_9
j_to_i,math.exp(-gamma*dist_matrix[i][j]),CLUSTER_0,CLUSTER_9
indices_df,pandas.DataFrame(indices),CLUSTER_0,CLUSTER_9
distmatrix_df,pandas.DataFrame(distmatrix),CLUSTER_0,CLUSTER_9
full_d_matrix_df,pandas.DataFrame(full_d_matrix),CLUSTER_0,CLUSTER_9
s,"pandas.DataFrame(np.random.randn(8,4)",CLUSTER_0,CLUSTER_9
json_dic_data,json.load(json_data),CLUSTER_0,CLUSTER_9
nbrs,"sklearn.neighbors.NearestNeighbors(n_neighbors=2001,algorithm='auto')",CLUSTER_0,CLUSTER_9
nbrs_toy,"sklearn.neighbors.NearestNeighbors(n_neighbors=4,algorithm='auto')",CLUSTER_0,CLUSTER_9
tr_df,pandas.read_pickle('/home/baode/huangzc/tencent/data/train_preliminary/3shuru.pkl'),CLUSTER_4,CLUSTER_0
ts_df,pandas.read_pickle('/home/baode/huangzc/tencent/data/test/3shuru.pkl'),CLUSTER_4,CLUSTER_0
wv_matrix,"numpy.concatenate([row,wv_matrix],axis=0)",CLUSTER_4,CLUSTER_0
wv_matrix,numpy.load(TRAIN_DIR+'gensim_%s.npy'%col),CLUSTER_4,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_0
tmp,time.time(),CLUSTER_4,CLUSTER_0
frame,pandas.read_csv('../data/test.csv'),CLUSTER_8,CLUSTER_3
token_dic,collections.defaultdict(int),CLUSTER_8,CLUSTER_3
nonzeroy,numpy.array(nonzero[0]),CLUSTER_12,CLUSTER_9
nonzerox,numpy.array(nonzero[1]),CLUSTER_12,CLUSTER_9
hist_features,"numpy.concatenate((ch1_hist[0],ch2_hist[0],ch3_hist[0])",CLUSTER_12,CLUSTER_9
hist_features,"numpy.concatenate((channel1_hist[0],channel2_hist[0],channel3_hist[0])",CLUSTER_12,CLUSTER_9
X,"numpy.concatenate((car_feats,noncar_feats)",CLUSTER_12,CLUSTER_9
heat,"numpy.zeros_like(multi_detection_image[:,:,0])",CLUSTER_12,CLUSTER_9
hot,"numpy.zeros_like(image[:,:,0])",CLUSTER_12,CLUSTER_9
heatmap,"numpy.clip(heat,0,255)",CLUSTER_12,CLUSTER_9
heat_map,"numpy.clip(hot,0,255)",CLUSTER_12,CLUSTER_9
hogs_feats,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_12,CLUSTER_9
y,numpy.hstack((np.ones(len(car_feats),CLUSTER_12,CLUSTER_9
hog_features,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_12,CLUSTER_9
img,numpy.copy(image),CLUSTER_12,CLUSTER_9
draw_img,numpy.copy(img),CLUSTER_12,CLUSTER_9
track_example,numpy.copy(test_images[4]),CLUSTER_12,CLUSTER_9
multi_detection_image,numpy.copy(test_images[4]),CLUSTER_12,CLUSTER_9
ch1_hist,"numpy.histogram(img[:,:,0],bins=bins)",CLUSTER_12,CLUSTER_9
ch2_hist,"numpy.histogram(img[:,:,1],bins=bins)",CLUSTER_12,CLUSTER_9
ch3_hist,"numpy.histogram(img[:,:,2],bins=bins)",CLUSTER_12,CLUSTER_9
channel1_hist,"numpy.histogram(img[:,:,0],bins=nbins)",CLUSTER_12,CLUSTER_9
channel2_hist,"numpy.histogram(img[:,:,1],bins=nbins)",CLUSTER_12,CLUSTER_9
channel3_hist,"numpy.histogram(img[:,:,2],bins=nbins)",CLUSTER_12,CLUSTER_9
t,time.time(),CLUSTER_12,CLUSTER_9
t2,time.time(),CLUSTER_12,CLUSTER_9
t,time.time(),CLUSTER_12,CLUSTER_9
t2,time.time(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_12,CLUSTER_9
end,time.time(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_12,CLUSTER_9
end,time.time(),CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,9)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(4,4)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,3)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,9)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_12,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,4)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(16,9)",CLUSTER_12,CLUSTER_9
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_X,y,test_size=0.2,random_state=rand_state)",CLUSTER_12,CLUSTER_9
svc,sklearn.svm.LinearSVC(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_2,CLUSTER_0
df,"pandas.read_csv('poker_training_data.csv',delimiter=',')",CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_10
y_pos,numpy.arange(len(names),CLUSTER_6,CLUSTER_10
image,numpy.array(image),CLUSTER_6,CLUSTER_10
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_10
sd,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_10
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_10
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_10
probs,numpy.array(probability.topk(topk),CLUSTER_6,CLUSTER_10
performance,numpy.array(probs),CLUSTER_6,CLUSTER_10
image,"numpy.clip(image,0,1)",CLUSTER_6,CLUSTER_10
image,"numpy.transpose(image,(2,0,1)",CLUSTER_6,CLUSTER_10
cat_to_name,json.load(f),CLUSTER_6,CLUSTER_10
distance,numpy.sqrt(x_distance**2+y_distance**2+z_distance**2),CLUSTER_3,CLUSTER_6
df,"pandas.read_csv('olympics.csv',index_col=0,skiprows=1)",CLUSTER_8,CLUSTER_4
census_df,pandas.read_csv('census.csv'),CLUSTER_8,CLUSTER_4
df,pandas.read_csv(url),CLUSTER_5,CLUSTER_5
X,numpy.asarray(stemming(X),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=42)",CLUSTER_5,CLUSTER_5
clf,"sklearn.svm.SVC(kernel=""linear"",decision_function_shape=decision_shape[k],C=C_Params[j],gamma=gamma_params[j])",CLUSTER_5,CLUSTER_5
clf,"sklearn.svm.SVC(kernel=kernel_param[i],decision_function_shape='ovr',C=10.0,gamma='scale')",CLUSTER_5,CLUSTER_5
enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
train_df,"pandas.read_csv(""../KB_NLP/raw_data/train.csv"")",CLUSTER_4,CLUSTER_11
test_df,"pandas.read_csv(""../KB_NLP/raw_data/public_test.csv"")",CLUSTER_4,CLUSTER_11
doublespace_pattern,re.compile('\s+'),CLUSTER_4,CLUSTER_11
weather_data,pandas.DataFrame(weatherpy_dict),CLUSTER_9,CLUSTER_2
response,"requests.get(f""{url}&q={city}"")",CLUSTER_9,CLUSTER_2
start_time,time.time(),CLUSTER_7,CLUSTER_8
elapsed_time_secs,time.time(),CLUSTER_7,CLUSTER_8
start_time,time.time(),CLUSTER_7,CLUSTER_8
elapsed_time_secs,time.time(),CLUSTER_7,CLUSTER_8
start_time,time.time(),CLUSTER_7,CLUSTER_8
elapsed_time_secs,time.time(),CLUSTER_7,CLUSTER_8
start_time,time.time(),CLUSTER_7,CLUSTER_8
elapsed_time_secs,time.time(),CLUSTER_7,CLUSTER_8
start_time,time.time(),CLUSTER_7,CLUSTER_8
k_folds,"sklearn.model_selection.KFold(n_splits=n_folds,random_state=seed)",CLUSTER_7,CLUSTER_8
k_folds,"sklearn.model_selection.KFold(n_splits=n_folds,random_state=seed)",CLUSTER_7,CLUSTER_8
result_saida,"sklearn.model_selection.cross_val_score(modelo
,preditoras_treino
,alvo_treino
,cv=k_folds

,scoring='accuracy'

)",CLUSTER_7,CLUSTER_8
result_saida,"sklearn.model_selection.cross_val_score(modelo
,preditoras_treino
,alvo_treino
,cv=k_folds

,scoring='accuracy'

)",CLUSTER_7,CLUSTER_8
"preditoras_treino,preditoras_teste,alvo_treino,alvo_teste","sklearn.model_selection.train_test_split(
preditoras
,alvo
,test_size=test_size
,random_state=seed
)",CLUSTER_7,CLUSTER_8
"preditoras_treino,preditoras_teste,alvo_treino,alvo_teste","sklearn.model_selection.train_test_split(
preditoras
,alvo
,test_size=test_size
,random_state=seed
)",CLUSTER_7,CLUSTER_8
acuracia,"sklearn.metrics.accuracy_score(y_true=alvo_teste,y_pred=alvo_predito)",CLUSTER_7,CLUSTER_8
modelo,sklearn.pipeline.Pipeline(steps=pipelines),CLUSTER_7,CLUSTER_8
modelo,sklearn.pipeline.Pipeline(steps=pipelines),CLUSTER_7,CLUSTER_8
modelo,sklearn.pipeline.Pipeline(steps=pipelines),CLUSTER_7,CLUSTER_8
pipe,sklearn.pipeline.Pipeline(steps=pipelines),CLUSTER_7,CLUSTER_8
model_01,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
model_02,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
model_04,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
model_05,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(),CLUSTER_7,CLUSTER_8
modelo,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(solver='svd'),CLUSTER_7,CLUSTER_8
modelo,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(solver='svd'),CLUSTER_7,CLUSTER_8
model_06,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
model_03,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_8
dados,"pandas.read_csv(filepath_or_buffer=url,names=colunas,delimiter=',')",CLUSTER_7,CLUSTER_8
dados,"pandas.read_csv(filepath_or_buffer=url,names=colunas,delimiter=',')",CLUSTER_7,CLUSTER_8
datafram_comp,"pandas.DataFrame(data=array_comp,columns=[colunas])",CLUSTER_7,CLUSTER_8
x_data,numpy.arange(min(data),CLUSTER_7,CLUSTER_8
ticks,"numpy.arange(0,QtdTotalElementos,1)",CLUSTER_7,CLUSTER_8
pos,numpy.arange(numBoxes),CLUSTER_7,CLUSTER_8
KNeighborsClassifier__n_neighbors,"numpy.arange(1,50,2)",CLUSTER_7,CLUSTER_8
array_final,numpy.array(medias),CLUSTER_7,CLUSTER_8
ids,numpy.array(input_data[colunas_nominais].astype(dtype='str'),CLUSTER_7,CLUSTER_8
dados['ClasseNumerica'],"numpy.where(dados['Classe']=='good',1,0)",CLUSTER_7,CLUSTER_8
dados['ClasseNumerica'],"numpy.where(dados['Classe']=='good',1,0)",CLUSTER_7,CLUSTER_8
prediction_series,numpy.where(pd.Series(predictions),CLUSTER_7,CLUSTER_8
handles,"[plt.plot([],[],color=plt.cm.brg(i/2.),ls="""",marker=""o"",markersize=numpy.sqrt(10)",CLUSTER_7,CLUSTER_8
array_comp,"numpy.column_stack([algoritmos,
acuracia_COM_VALID_CRUZADA,
desviopadrao_COM_VALID_CRUZADA,
acuracia_SEM_VALID_CRUZADA,
desviopadrao_SEM_VALID_CRUZADA])",CLUSTER_7,CLUSTER_8
boxplot,matplotlib.pyplot.boxplot(resultados),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(1,figsize=(17,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(1,figsize=(17,8)",CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(17,7)",CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
xtickNames,"matplotlib.pyplot.setp(ax,xticklabels=modelos_nome)",CLUSTER_7,CLUSTER_8
xtickNames,"matplotlib.pyplot.setp(ax,xticklabels=algoritmos)",CLUSTER_7,CLUSTER_8
xtickNames,"matplotlib.pyplot.setp(ax,xticklabels=modelos_nome)",CLUSTER_7,CLUSTER_8
density_est,scipy.stats.gaussian_kde(data),CLUSTER_7,CLUSTER_8
boxplot,"seaborn.boxplot(data=resultados,orient=""v"",width=0.6,fliersize=2,linewidth=0.7,saturation=0.9,ax=ax)",CLUSTER_7,CLUSTER_8
values,json.loads(data),CLUSTER_7,CLUSTER_8
all_time_head_to_head,pandas.DataFrame(),CLUSTER_11,CLUSTER_2
all_time_head_to_head,pandas.concat(frames),CLUSTER_11,CLUSTER_2
eventid,"pandas.read_sql_query('selecteventidfrom_0_original_data.tournament_id_dictionary',db)",CLUSTER_11,CLUSTER_2
teamid,"pandas.read_sql_query(""selectteam1idfrom_0_original_data.match_fixtureswheretournament_id='""+k+""'"",db)",CLUSTER_11,CLUSTER_2
opponentid,"pandas.read_sql_query(""selectteam2idfrom_0_original_data.match_fixtures\
wheretournament_id='""+k+""'andteam1id='""+n+""'"",db)",CLUSTER_11,CLUSTER_2
"fig,axis","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(getdata),CLUSTER_9,CLUSTER_2
df2,pandas.DataFrame(df['ticker']['markets']),CLUSTER_9,CLUSTER_2
getdata,requests.get('https://api.cryptonator.com/api/full/btc-usd'),CLUSTER_9,CLUSTER_2
num,"random.randint(1,100)",CLUSTER_10,CLUSTER_4
Xtr,"pandas.read_csv(path1,header=None)",CLUSTER_5,CLUSTER_5
Ytr,pandas.read_csv(path2),CLUSTER_5,CLUSTER_5
Xte,"pandas.read_csv(path3,header=None)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(Xtr.values,Ytr['Prediction'].values,test_size=0.2)",CLUSTER_5,CLUSTER_5
df_total_6,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_corr,"pandas.DataFrame(get_top_abs_correlations(df_high_end_cust,60)",CLUSTER_7,CLUSTER_8
X_sm,"pandas.DataFrame(X_sm,columns=X.columns)",CLUSTER_7,CLUSTER_8
pcs_df,"pandas.DataFrame({'PC1':pca.components_[0],'PC2':pca.components_[1],'Feature':colnames})",CLUSTER_7,CLUSTER_8
cv_results,pandas.DataFrame(grid_search.cv_results_),CLUSTER_7,CLUSTER_8
df_imp_cols,"pandas.DataFrame({'Column':X_train_1.columns,'Importance':clf_gini.feature_importances_})",CLUSTER_7,CLUSTER_8
df_imp_cols,"pandas.DataFrame({'Column':X_train_1.columns,'Importance':clf_gini.feature_importances_})",CLUSTER_7,CLUSTER_8
y_train_series,pandas.Series(y_train),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(""telecom_churn_data.csv"",low_memory=False)",CLUSTER_7,CLUSTER_8
df['date_of_last_rech_9'],pandas.to_datetime(df['date_of_last_rech_9']),CLUSTER_7,CLUSTER_8
df['date_of_last_rech_8'],pandas.to_datetime(df['date_of_last_rech_8']),CLUSTER_7,CLUSTER_8
df['date_of_last_rech_7'],pandas.to_datetime(df['date_of_last_rech_7']),CLUSTER_7,CLUSTER_8
df['date_of_last_rech_6'],pandas.to_datetime(df['date_of_last_rech_6']),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_8
"fig,axes",matplotlib.pyplot.subplots(nrows=2),CLUSTER_7,CLUSTER_8
indices,numpy.argsort(importances),CLUSTER_7,CLUSTER_8
diff,numpy.sum((points-median),CLUSTER_7,CLUSTER_8
diff,numpy.sqrt(diff),CLUSTER_7,CLUSTER_8
"q_high,q_low","numpy.percentile(df_high_end_cust[li_plot_num_feats[i]],[max_q,min_q])",CLUSTER_7,CLUSTER_8
"q_high,q_low","numpy.percentile(df[li_plot_num_feats[i]],[max_q,min_q])",CLUSTER_7,CLUSTER_8
"q_high,q_low","numpy.percentile(df[li_plot_num_feats[i]],[max_q,min_q])",CLUSTER_7,CLUSTER_8
corrmat,numpy.corrcoef(df_train_pca.transpose(),CLUSTER_7,CLUSTER_8
median,"numpy.median(points,axis=0)",CLUSTER_7,CLUSTER_8
med_abs_deviation,numpy.median(diff),CLUSTER_7,CLUSTER_8
"X_train_1,X_test_1,y_train,y_test","sklearn.model_selection.train_test_split(X_sm,y_sm,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
pca,"sklearn.decomposition.PCA(svd_solver='randomized',random_state=42)",CLUSTER_7,CLUSTER_8
pca_again,sklearn.decomposition.PCA(0.95),CLUSTER_7,CLUSTER_8
pca_final,sklearn.decomposition.IncrementalPCA(n_components=21),CLUSTER_7,CLUSTER_8
learner_pca,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
learner_pca2,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
confusion,"sklearn.metrics.confusion_matrix(y_test,y_pred_class)",CLUSTER_7,CLUSTER_8
confusion,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
confusion,"sklearn.metrics.confusion_matrix(y_test,predictions)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(estimator=dtree,param_grid=param_grid,
cv=n_folds,verbose=1)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(estimator=rf,param_grid=param_grid,
cv=3,n_jobs=-1,verbose=1)",CLUSTER_7,CLUSTER_8
dtree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
clf_gini,"sklearn.tree.DecisionTreeClassifier(criterion=""gini"",
random_state=100,
max_depth=10,
min_samples_leaf=50,
min_samples_split=100)",CLUSTER_7,CLUSTER_8
clf_gini,"sklearn.tree.DecisionTreeClassifier(criterion=""gini"",
random_state=100,
max_depth=15,
min_samples_leaf=50,
min_samples_split=50)",CLUSTER_7,CLUSTER_8
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
rfc,"sklearn.ensemble.RandomForestClassifier(bootstrap=True,
max_depth=10,
min_samples_leaf=100,
min_samples_split=200,
max_features=5,
n_estimators=300)",CLUSTER_7,CLUSTER_8
xlabels,"numpy.arange(xlabel_min,xlabel_max+1)",CLUSTER_4,CLUSTER_11
xlabels,"numpy.arange(xlabel_min,xlabel_max+1)",CLUSTER_4,CLUSTER_11
xlabels,"numpy.arange(xlabel_min,xlabel_max+1)",CLUSTER_4,CLUSTER_11
base_size,"numpy.array([1,1/scale/golden_ratio])",CLUSTER_4,CLUSTER_11
a,"numpy.array([0.133,0.171,0.165,0.138])",CLUSTER_4,CLUSTER_11
b,"numpy.array([243,292,299,-221])",CLUSTER_4,CLUSTER_11
k,"numpy.array([482,1020,611,521])",CLUSTER_4,CLUSTER_11
g,"numpy.array([917,1680,1340,1680])",CLUSTER_4,CLUSTER_11
f_k,"numpy.array([0.00258,0.00215,0.00173,0.00113])",CLUSTER_4,CLUSTER_11
phi,numpy.arccos(h_c_low_factor/h_c_high_factor*overlap_freq**(-3),CLUSTER_4,CLUSTER_11
h_h_f,numpy.sqrt(fT_tmp*S_h_f),CLUSTER_4,CLUSTER_11
f,"numpy.logspace(-5,-2,100)",CLUSTER_4,CLUSTER_11
current_path,os.getcwd(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=figsize)",CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
x,"numpy.arange(1,day_count_for_current_country+1)",CLUSTER_11,CLUSTER_1
day_array,"numpy.arange(1,day_count)",CLUSTER_11,CLUSTER_1
x,"numpy.arange(0,len(y)",CLUSTER_11,CLUSTER_1
ticks,numpy.arange((-1*max_pop),CLUSTER_11,CLUSTER_1
time_range,"numpy.arange(1,180,1)",CLUSTER_11,CLUSTER_1
deftoy_model(C,"25,P=0.0025,D=10,fatality_rate=0.03,initial_real_cases=2000,initial_recovered=200,initial_deceased=50,country=""France"",time_range=numpy.arange(1,180,1)",CLUSTER_11,CLUSTER_1
text_x,numpy.argmax(np.array(trace),CLUSTER_11,CLUSTER_1
a,numpy.mean(np.diff(y),CLUSTER_11,CLUSTER_1
a,numpy.mean(np.diff(y),CLUSTER_11,CLUSTER_1
a,numpy.mean(np.diff(y),CLUSTER_11,CLUSTER_1
a,numpy.mean(np.diff(y),CLUSTER_11,CLUSTER_1
x_new,"numpy.linspace(x[0],x[-1],len(x)",CLUSTER_11,CLUSTER_1
f,numpy.poly1d(coefs),CLUSTER_11,CLUSTER_1
"coefs,residual,rank,singular_values,rcond","numpy.polyfit(x,y,degree,full=True)",CLUSTER_11,CLUSTER_1
api_data,pandas.DataFrame(),CLUSTER_11,CLUSTER_1
temp_data,"pandas.DataFrame(data[""stats""][""history""])",CLUSTER_11,CLUSTER_1
age_distribution,"pandas.DataFrame(columns=[""CountryorArea"",""Sex"",""Age"",""Value"",""Year""])",CLUSTER_11,CLUSTER_1
fatality_per_age_category,"pandas.DataFrame(
[{""Age"":""0-9"",""Fatalityrate"":0},
{""Age"":""10-19"",""Fatalityrate"":0.2},
{""Age"":""20-29"",""Fatalityrate"":0.2},
{""Age"":""30-39"",""Fatalityrate"":0.2},
{""Age"":""40-49"",""Fatalityrate"":0.4},
{""Age"":""50-59"",""Fatalityrate"":1.3},
{""Age"":""60-69"",""Fatalityrate"":3.6},
{""Age"":""70-79"",""Fatalityrate"":8.0},
{""Age"":""80+"",""Fatalityrate"":14.8}],
columns=[""Age"",""Fatalityrate""]
)",CLUSTER_11,CLUSTER_1
deaths_in_all_countries,"pandas.DataFrame(columns=[""Country"",""Population"",""Female"",""Male"",""Femaledeaths"",""Maledeaths"",""Totaldeaths"",""Year""])",CLUSTER_11,CLUSTER_1
raw_data,"pandas.read_csv(""coronavirus.csv"",header=0)",CLUSTER_11,CLUSTER_1
age_distribution_raw_data,"pandas.read_excel(""age_distribution.xlsx"",header=0)",CLUSTER_11,CLUSTER_1
svr,"sklearn.svm.SVR(kernel=""rbf"",C=10000,gamma=0.01,epsilon=.001)",CLUSTER_11,CLUSTER_1
r,"requests.get(url=api_url,params=api_params)",CLUSTER_11,CLUSTER_1
df,"pandas.read_csv(file,encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
can_df['Year'],pandas.to_numeric(can_df['Year']),CLUSTER_8,CLUSTER_3
can_df['Refugees(incl.refugee-likesituations)'],pandas.to_numeric(can_df['Refugees(incl.refugee-likesituations),CLUSTER_8,CLUSTER_3
can_df['TotalPopulation'],pandas.to_numeric(can_df['TotalPopulation']),CLUSTER_8,CLUSTER_3
values,numpy.where(alpha_channel!=0),CLUSTER_4,CLUSTER_11
ind,"numpy.argwhere(new_sunglasses[:,:,3]>0)",CLUSTER_4,CLUSTER_11
image_copy,numpy.copy(image),CLUSTER_4,CLUSTER_11
key_pts_frame,pandas.read_csv('/data/training_frames_keypoints.csv'),CLUSTER_4,CLUSTER_11
"X_full,y_full",numpy.asarray(X_full),CLUSTER_7,CLUSTER_5
X_out_test,numpy.asarray(X_out_test),CLUSTER_7,CLUSTER_5
g,seaborn.countplot(sorted(y_full),CLUSTER_7,CLUSTER_5
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_7,CLUSTER_5
clf_1,"sklearn.linear_model.SGDClassifier(alpha=1e-5,n_iter=70,penalty='elasticnet')",CLUSTER_7,CLUSTER_5
clf_2,sklearn.linear_model.LassoCV(),CLUSTER_7,CLUSTER_5
clf_3,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_5
to_idf,"sklearn.pipeline.Pipeline([('count_vect',CountVectorizer()",CLUSTER_7,CLUSTER_5
data,json.loads(open('data/train.json'),CLUSTER_7,CLUSTER_5
test_data,json.loads(open('data/test.json'),CLUSTER_7,CLUSTER_5
df_param,"pandas.DataFrame(df_normalizado,columns=df.columns[:-1])",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""ClassifiedData"",index_col=0)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(df_param,df['TARGETCLASS'],test_size=.3)",CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_7,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=10),CLUSTER_7,CLUSTER_5
ecom,"pandas.read_csv(""EcommercePurchases"")",CLUSTER_8,CLUSTER_4
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
Z1,"numpy.dot(W1,X)",CLUSTER_5,CLUSTER_9
Z2,"numpy.dot(W2,A1)",CLUSTER_5,CLUSTER_9
Z3,"numpy.dot(W3,A2)",CLUSTER_5,CLUSTER_9
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_5,CLUSTER_9
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_5,CLUSTER_9
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(40,5)",CLUSTER_5,CLUSTER_9
ax1,"matplotlib.pyplot.subplot(111,polar=True)",CLUSTER_5,CLUSTER_9
ax1,"matplotlib.pyplot.subplot(111,polar=True)",CLUSTER_5,CLUSTER_9
panss_p_n_g_imputed_mean,"numpy.mean(panss_p_n_g_imputed,axis=0)",CLUSTER_5,CLUSTER_9
panss_p_n_g_imputed_std,"numpy.std(panss_p_n_g_imputed,axis=0)",CLUSTER_5,CLUSTER_9
	data,pandas.read_csv(path),CLUSTER_5,CLUSTER_9
two_labels,pandas.read_excel('comparison_between_pn_kmeans_and_png_kmeans.xlsx'),CLUSTER_5,CLUSTER_9
panss_p_n_g_imputed_standardized,sklearn.preprocessing.scale(panss_p_n_g_imputed),CLUSTER_5,CLUSTER_9
kmeans_fit,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_5,CLUSTER_9
interactions,pandas.DataFrame(index=data.index),CLUSTER_7,CLUSTER_8
selected_features,pandas.DataFrame(model.inverse_transform(X_new),CLUSTER_7,CLUSTER_8
new_models_dataframe2,"pandas.DataFrame({'CVMean':xyz,'Std':std},index=classifiers)",CLUSTER_7,CLUSTER_8
box,"pandas.DataFrame(accuracy,index=[classifiers])",CLUSTER_7,CLUSTER_8
interactions,pandas.DataFrame(index=data_test.index),CLUSTER_7,CLUSTER_8
a,pandas.Series(),CLUSTER_7,CLUSTER_8
feat_imp,"pandas.Series(alg.feature_importances_,predictors)",CLUSTER_7,CLUSTER_8
feat_imp,"pandas.Series(alg.feature_importances_,predictors)",CLUSTER_7,CLUSTER_8
train_df['Fare_Range'],"pandas.qcut(train_df['Fare'],4)",CLUSTER_7,CLUSTER_8
test_df['Fare_Range'],"pandas.qcut(test_df['Fare'],4)",CLUSTER_7,CLUSTER_8
train_df,"pandas.read_csv(PATH+""/train.csv"")",CLUSTER_7,CLUSTER_8
test_df,"pandas.read_csv(PATH+""/test.csv"")",CLUSTER_7,CLUSTER_8
gender_submission,"pandas.read_csv(PATH+""/gender_submission.csv"")",CLUSTER_7,CLUSTER_8
submission,pandas.read_csv('../data/gender_submission.csv'),CLUSTER_7,CLUSTER_8
submission,pandas.read_csv('../data/gender_submission.csv'),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(2,2,figsize=(20,15)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(20,8)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(20,8)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(1,3,figsize=(20,8)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(18,6)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,10)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(2,2,figsize=(15,12)",CLUSTER_7,CLUSTER_8
logistic,"sklearn.linear_model.LogisticRegression(C=1,penalty=""l1"",random_state=7)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(kernel='rbf',C=1,gamma=0.1)",CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(kernel='linear',C=0.1,gamma=0.1)",CLUSTER_7,CLUSTER_8
gd,GridSearchCV(estimator=sklearn.svm.SVC(),CLUSTER_7,CLUSTER_8
model,"sklearn.svm.SVC(kernel='linear',C=0.4,gamma=0.1)",CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_7,CLUSTER_8
gd,GridSearchCV(estimator=sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_7,CLUSTER_8
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,random_state=0)",CLUSTER_7,CLUSTER_8
model,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_7,CLUSTER_8
model,BaggingClassifier(base_estimator=sklearn.neighbors.KNeighborsClassifier(n_neighbors=4),CLUSTER_7,CLUSTER_8
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
model,BaggingClassifier(base_estimator=sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
"train,test","sklearn.model_selection.train_test_split(train_df,test_size=0.2,random_state=0,stratify=train_df['Survived'])",CLUSTER_7,CLUSTER_8
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
label_enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
label_enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
model,"sklearn.feature_selection.SelectFromModel(logistic,prefit=True)",CLUSTER_7,CLUSTER_8
kfold,"sklearn.model_selection.KFold(n_splits=10,random_state=22)",CLUSTER_7,CLUSTER_8
cv_result,"sklearn.model_selection.cross_val_score(model,X,Y,cv=kfold,scoring=""accuracy"")",CLUSTER_7,CLUSTER_8
cross,"sklearn.model_selection.cross_val_score(ensemble_lin_rbf,X,Y,cv=10,scoring=""accuracy"")",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(model,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(model,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(ada,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(grad,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
cv_score,"sklearn.model_selection.cross_val_score(alg,dtrain[predictors],dtrain['Survived'],cv=cv_folds,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_score(xgboost,X,Y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
cv_score,"sklearn.model_selection.cross_val_score(alg,dtrain[predictors],dtrain['Survived'],cv=cv_folds,scoring='roc_auc')",CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(svm.SVC(kernel='rbf'),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(svm.SVC(kernel='linear'),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(KNeighborsClassifier(n_neighbors=9),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(RandomForestClassifier(n_estimators=100),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(LogisticRegression(),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
y_pred,sklearn.model_selection.cross_val_predict(GaussianNB(),CLUSTER_7,CLUSTER_8
result,"sklearn.model_selection.cross_val_predict(ada,X,Y,cv=10)",CLUSTER_7,CLUSTER_8
gd,sklearn.model_selection.GridSearchCV(estimator=svm.SVC(),CLUSTER_7,CLUSTER_8
gd,sklearn.model_selection.GridSearchCV(estimator=RandomForestClassifier(random_state=0),CLUSTER_7,CLUSTER_8
gsearch1,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,min_samples_split=9,min_samples_leaf=10,max_depth=5,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch2,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch3,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch4,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,n_estimators=60,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch5,"sklearn.model_selection.GridSearchCV(estimator=GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10,max_features=3)",CLUSTER_7,CLUSTER_8
gsearch1,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=5,
min_child_weight=1,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch2,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch2b,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch3,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch4,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0.2,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch5,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=43,max_depth=3,
min_child_weight=1,gamma=0.2,subsample=0.8,colsample_bytree=0.8,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch6,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=51,max_depth=4,
min_child_weight=4,gamma=0,subsample=0.8,colsample_bytree=0.85,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gsearch7,"sklearn.model_selection.GridSearchCV(estimator=XGBClassifier(learning_rate=0.1,n_estimators=51,max_depth=4,
min_child_weight=4,gamma=0,subsample=0.8,colsample_bytree=0.85,
objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=27)",CLUSTER_7,CLUSTER_8
gd,sklearn.model_selection.GridSearchCV(estimator=AdaBoostClassifier(),CLUSTER_7,CLUSTER_8
ensemble_lin_rbf,"sklearn.ensemble.VotingClassifier(estimators=[('KNN',KNeighborsClassifier(n_neighbors=4)",CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.BaggingClassifier(base_estimator=KNeighborsClassifier(n_neighbors=4),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.BaggingClassifier(base_estimator=DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
ada,"sklearn.ensemble.AdaBoostClassifier(n_estimators=200,random_state=0,learning_rate=0.1)",CLUSTER_7,CLUSTER_8
gd,GridSearchCV(estimator=sklearn.ensemble.AdaBoostClassifier(),CLUSTER_7,CLUSTER_8
ada,"sklearn.ensemble.AdaBoostClassifier(n_estimators=400,random_state=0,learning_rate=0.05)",CLUSTER_7,CLUSTER_8
model,"sklearn.ensemble.AdaBoostClassifier(n_estimators=200,learning_rate=0.05,random_state=0)",CLUSTER_7,CLUSTER_8
ada,"sklearn.ensemble.AdaBoostClassifier(n_estimators=400,random_state=0,learning_rate=0.05)",CLUSTER_7,CLUSTER_8
grad,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=500,random_state=0,learning_rate=0.1)",CLUSTER_7,CLUSTER_8
gbm0,sklearn.ensemble.GradientBoostingClassifier(random_state=10),CLUSTER_7,CLUSTER_8
gsearch1,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,min_samples_split=9,min_samples_leaf=10,max_depth=5,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch2,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch3,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,max_features='sqrt',subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch4,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=60,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10)",CLUSTER_7,CLUSTER_8
gsearch5,"GridSearchCV(estimator=sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10,max_features=3)",CLUSTER_7,CLUSTER_8
gbm_tuned_1,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.1,n_estimators=80,max_depth=4,min_samples_split=4,min_samples_leaf=5,subsample=0.8,random_state=10,max_features=3)",CLUSTER_7,CLUSTER_8
model,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=500,learning_rate=0.1,random_state=0)",CLUSTER_7,CLUSTER_8
gbm_tuned_1,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.05,

n_estimators=200,
max_depth=4,
min_samples_split=10,
min_samples_leaf=8,
subsample=0.8,
random_state=10,
max_features=13)",CLUSTER_7,CLUSTER_8
t,"numpy.linspace(0,time_to_plot,num_samples)",CLUSTER_1,CLUSTER_9
fft_output,numpy.fft.rfft(signal),CLUSTER_1,CLUSTER_9
inventory,"pandas.DataFrame({'Fruit':fruits,'Qty':qtys,'Price':[2.99,1.99,3.99,2.99]})",CLUSTER_8,CLUSTER_4
fruits,"pandas.Series(['Apple','Banana','Cherry','Orange'],name=""Fruit"")",CLUSTER_8,CLUSTER_4
qtys,"pandas.Series([5,7,2,9])",CLUSTER_8,CLUSTER_4
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
x,numpy.arange(len(ts),CLUSTER_12,CLUSTER_6
momentum_list,"numpy.log(data.history(context.security_list,""close"",context.momentum_window,""1d"")",CLUSTER_12,CLUSTER_6
"slope,intercept,r_value,p_value,std_err","scipy.stats.linregress(x,ts)",CLUSTER_12,CLUSTER_6
dateTime,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
line_x,"numpy.arange(0,12,0.1)",CLUSTER_1,CLUSTER_10
surf_x,"numpy.arange(-2,8,0.1)",CLUSTER_1,CLUSTER_10
surf_y,"numpy.arange(-2,6,0.1)",CLUSTER_1,CLUSTER_10
line_x,"numpy.arange(0,12,0.1)",CLUSTER_1,CLUSTER_10
surf_x,"numpy.arange(-2,8,0.1)",CLUSTER_1,CLUSTER_10
surf_y,"numpy.arange(-2,6,0.1)",CLUSTER_1,CLUSTER_10
line_x,"numpy.arange(0,12,0.1)",CLUSTER_1,CLUSTER_10
surf_x,"numpy.arange(-2,8,0.1)",CLUSTER_1,CLUSTER_10
surf_y,"numpy.arange(-2,6,0.1)",CLUSTER_1,CLUSTER_10
line_x,"numpy.arange(0,12,0.1)",CLUSTER_1,CLUSTER_10
surf_x,"numpy.arange(-2,8,0.1)",CLUSTER_1,CLUSTER_10
surf_y,"numpy.arange(-2,6,0.1)",CLUSTER_1,CLUSTER_10
w_pri,"numpy.array([-0.62369285,-0.743176,0.24227395])",CLUSTER_1,CLUSTER_10
beta,"numpy.array([0.01,0.01,0.01])",CLUSTER_1,CLUSTER_10
w_pri,"numpy.array([1,-1])",CLUSTER_1,CLUSTER_10
beta,"numpy.array([0.01,0.01,0.01])",CLUSTER_1,CLUSTER_10
w_pri,"numpy.array([-1,5])",CLUSTER_1,CLUSTER_10
beta,"numpy.array([0.01,0.01,0.01])",CLUSTER_1,CLUSTER_10
w_pri,"numpy.array([-1,1,3])",CLUSTER_1,CLUSTER_10
beta,"numpy.array([0.01,0.01,0.01])",CLUSTER_1,CLUSTER_10
ind_neg,numpy.where(tt<0),CLUSTER_1,CLUSTER_10
ind_neg,numpy.where(tt<0),CLUSTER_1,CLUSTER_10
data_11,"numpy.concatenate((data_1,ones_1[:,np.newaxis])",CLUSTER_1,CLUSTER_10
data_22,"numpy.concatenate((data_2,ones_2[:,np.newaxis])",CLUSTER_1,CLUSTER_10
tag,"numpy.concatenate((1*ones_1,-1*ones_2)",CLUSTER_1,CLUSTER_10
data_total,"numpy.concatenate((data_11,data_22)",CLUSTER_1,CLUSTER_10
data_total_nobias,"numpy.concatenate((data_1,data_2)",CLUSTER_1,CLUSTER_10
ones_1,numpy.ones(np.shape(data_1),CLUSTER_1,CLUSTER_10
summ,"numpy.sum(data_total[ind,:]*tag[ind,np.newaxis],0)",CLUSTER_1,CLUSTER_10
summ,"numpy.sum(data_total_nobias[ind,:]*tag[ind,np.newaxis],0)",CLUSTER_1,CLUSTER_10
summ,"numpy.sum(data_total[ind_neg,:][:,[0,2]]*tag[ind_neg,np.newaxis],0)",CLUSTER_1,CLUSTER_10
summ,"numpy.sum(data_total[ind_neg,:]*tag[ind_neg,np.newaxis],0)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(surf_x,surf_y)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(surf_x,surf_y)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(surf_x,surf_y)",CLUSTER_1,CLUSTER_10
"xx,yy","numpy.meshgrid(surf_x,surf_y)",CLUSTER_1,CLUSTER_10
summ_norm,"numpy.linalg.norm(summ,ord=2)",CLUSTER_1,CLUSTER_10
summ_norm,"numpy.linalg.norm(summ,ord=2)",CLUSTER_1,CLUSTER_10
summ_norm,"numpy.linalg.norm(summ,ord=2)",CLUSTER_1,CLUSTER_10
summ_norm,"numpy.linalg.norm(summ,ord=2)",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
merge_data,"pandas.merge(clinical_trial,mouse_drug,on=""MouseID"",how=""left"")",CLUSTER_1,CLUSTER_3
mouse_drug,pandas.read_csv(mouse_drug_data_to_load),CLUSTER_1,CLUSTER_3
clinical_trial,pandas.read_csv(clinical_trial_data_to_load),CLUSTER_1,CLUSTER_3
df,"pandas.read_hdf('../database/all_data_comp.h5','table')",CLUSTER_5,CLUSTER_5
MSE,sklearn.metrics.mean_squared_error(tpot.predict(X_test_13),CLUSTER_5,CLUSTER_5
MSE_perc,sklearn.metrics.mean_squared_error(tpot.predict(X_13),CLUSTER_5,CLUSTER_5
MSE_13,sklearn.metrics.mean_squared_error(tpot.predict(X_test_13),CLUSTER_5,CLUSTER_5
MSE_24,sklearn.metrics.mean_squared_error(tpot.predict(X_test_24),CLUSTER_5,CLUSTER_5
t1,time.time(),CLUSTER_5,CLUSTER_5
X_13,"numpy.array(df[[
var_names['ae1_frp'],
var_names['ae3_frp'],
var_names['me1_frp'],
var_names['me3_frp'],
var_names['ae1_rpm'],
var_names['ae3_rpm'],
var_names['me1_rpm'],
var_names['me3_rpm'],
]][date_begin:date_end])",CLUSTER_5,CLUSTER_5
X_24,"numpy.array(df[[
var_names['ae2_frp'],
var_names['ae4_frp'],
var_names['me2_frp'],
var_names['me4_frp'],
var_names['ae2_rpm'],
var_names['ae4_rpm'],
var_names['me2_rpm'],
var_names['me4_rpm'],
]][date_begin:date_end])",CLUSTER_5,CLUSTER_5
X_13,numpy.array(df[eng_13][date_begin:date_end]),CLUSTER_5,CLUSTER_5
X_24,numpy.array(df[eng_24][date_begin:date_end]),CLUSTER_5,CLUSTER_5
y_13,numpy.array(df[var_names['fo_booster_13']][date_begin:date_end]),CLUSTER_5,CLUSTER_5
y_24,numpy.array(df[var_names['fo_booster_24']][date_begin:date_end]),CLUSTER_5,CLUSTER_5
err,numpy.array(tpot_13.predict(X_13),CLUSTER_5,CLUSTER_5
train_label,numpy.array([train_data[i][0]+2*train_data[i][1]foriinrange(100),CLUSTER_5,CLUSTER_5
eval_label,numpy.array([11]),CLUSTER_5,CLUSTER_5
x,"numpy.linspace(n1,n2,n2-n1)",CLUSTER_5,CLUSTER_5
x,"numpy.linspace(n1,n2,n2-n1)",CLUSTER_5,CLUSTER_5
"X_train_13,X_test_13,y_train_13,y_test_13","sklearn.model_selection.train_test_split(X_13,y_13,train_size=0.75,test_size=0.25)",CLUSTER_5,CLUSTER_5
"X_train_13,X_test_13,y_train_13,y_test_13","sklearn.model_selection.train_test_split(X_13,y_13,train_size=0.75,test_size=0.25)",CLUSTER_5,CLUSTER_5
"X_train_13,X_test_13,y_train_13,y_test_13","sklearn.model_selection.train_test_split(X_13,y_13,train_size=0.75,test_size=0.25)",CLUSTER_5,CLUSTER_5
"X_train_24,X_test_24,y_train_24,y_test_24","sklearn.model_selection.train_test_split(X_13,y_13,train_size=0.75,test_size=0.25)",CLUSTER_5,CLUSTER_5
StackingEstimator(estimator,sklearn.linear_model.LassoLarsCV(normalize=False),CLUSTER_5,CLUSTER_5
exported_pipeline,"sklearn.pipeline.make_pipeline(
PolynomialFeatures(degree=2,include_bias=False,interaction_only=False)",CLUSTER_5,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(students,columns=['Name','Age','City','Country'])",CLUSTER_8,CLUSTER_4
data,"pandas.merge(hits,truth,on='hit_id',how='left')",CLUSTER_11,CLUSTER_1
births,pandas.read_csv('births.csv'),CLUSTER_7,CLUSTER_3
births.index,"pandas.to_datetime(10000*births.year+100*births.month+births.day,format='%Y%m%d')",CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,4)",CLUSTER_7,CLUSTER_3
quartiles,"numpy.percentile(births['births'],[25,50,75])",CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
data,numpy.array(data),CLUSTER_1,CLUSTER_3
almR[count],"scipy.integrate.simps(scipy.integrate.simps(mapr*(leg[count,:].reshape(Nmax,1)",CLUSTER_3,CLUSTER_6
almP[count],scipy.integrate.simps(scipy.integrate.simps((mapt+1j*mapp),CLUSTER_3,CLUSTER_6
almM[count],scipy.integrate.simps(scipy.integrate.simps((mapt-1j*mapp),CLUSTER_3,CLUSTER_6
ulm[count],"scipy.integrate.simps(scipy.integrate.simps(mapr*(leg[count,:].reshape(Nmax,1)",CLUSTER_3,CLUSTER_6
vlm[count],"scipy.integrate.simps(scipy.integrate.simps((mapt*(dt_leg[count,:].reshape(Nmax,1)",CLUSTER_3,CLUSTER_6
wlm[count],"scipy.integrate.simps(scipy.integrate.simps((mapp*(dt_leg[count,:].reshape(Nmax,1)",CLUSTER_3,CLUSTER_6
_index,numpy.arange(npix),CLUSTER_3,CLUSTER_6
ell,numpy.arange(ellmax+1),CLUSTER_3,CLUSTER_6
ell,numpy.arange(ellmax+1),CLUSTER_3,CLUSTER_6
vt,"numpy.array([ct*cp,ct*sp,-st])",CLUSTER_3,CLUSTER_6
vp,"numpy.array([-sp,cp,0.0*cp])",CLUSTER_3,CLUSTER_6
vtR,"numpy.array([ctR*cpR,ctR*spR,-stR])",CLUSTER_3,CLUSTER_6
vpR,"numpy.array([-spR,cpR,0.0*cpR])",CLUSTER_3,CLUSTER_6
vt,"numpy.array([ct*cp,ct*sp,-st])",CLUSTER_3,CLUSTER_6
vp,"numpy.array([-sp,cp,0.0*cp])",CLUSTER_3,CLUSTER_6
vtR,"numpy.array([ctR*cpR,ctR*spR,-stR])",CLUSTER_3,CLUSTER_6
vpR,"numpy.array([-spR,cpR,0.0*cpR])",CLUSTER_3,CLUSTER_6
newCoefs,"numpy.zeros(coefs.shape[0],dtype=complex)",CLUSTER_3,CLUSTER_6
almNew,numpy.zeros(int(lmax-t+1),CLUSTER_3,CLUSTER_6
ps,numpy.zeros(lmax+1),CLUSTER_3,CLUSTER_6
thetaNew,numpy.zeros(_numPix),CLUSTER_3,CLUSTER_6
phiNew,numpy.zeros(_numPix),CLUSTER_3,CLUSTER_6
thetaNew,numpy.zeros(_numPix),CLUSTER_3,CLUSTER_6
phiNew,numpy.zeros(_numPix),CLUSTER_3,CLUSTER_6
thetaNew,numpy.zeros(12*NSIDE**2),CLUSTER_3,CLUSTER_6
phiNew,numpy.zeros(12*NSIDE**2),CLUSTER_3,CLUSTER_6
newCoefs,"numpy.zeros(_maxind,dtype=complex)",CLUSTER_3,CLUSTER_6
leg,"numpy.zeros((maxIndex,theta.size)",CLUSTER_3,CLUSTER_6
leg_d1,"numpy.zeros((maxIndex,theta.size)",CLUSTER_3,CLUSTER_6
dp_leg,"numpy.zeros((maxIndex,theta.size)",CLUSTER_3,CLUSTER_6
ellArr,numpy.zeros(maxIndex),CLUSTER_3,CLUSTER_6
emmArr,numpy.zeros(maxIndex),CLUSTER_3,CLUSTER_6
pspec,numpy.zeros(lmax),CLUSTER_3,CLUSTER_6
almSynth,numpy.zeros(maxNum),CLUSTER_3,CLUSTER_6
ellSynth,numpy.zeros(maxNum),CLUSTER_3,CLUSTER_6
almR,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
almP,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
almM,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
ulm,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
vlm,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
wlm,"numpy.zeros(maxNum,dtype=complex)",CLUSTER_3,CLUSTER_6
index,numpy.where((ellArr==ell),CLUSTER_3,CLUSTER_6
index,numpy.where((ellArr==ell),CLUSTER_3,CLUSTER_6
index,numpy.where((ellArr==ell),CLUSTER_3,CLUSTER_6
index,numpy.where((ellArr==ell),CLUSTER_3,CLUSTER_6
values,numpy.fromiter((np.sum(data[index==i]),CLUSTER_3,CLUSTER_6
counts,"numpy.ones(_numPix,dtype=np.int)",CLUSTER_3,CLUSTER_6
onesMap,numpy.ones(map_trans[0].shape[0]),CLUSTER_3,CLUSTER_6
e1map,"numpy.full(_numPix,hp.UNSEEN,dtype=complex)",CLUSTER_3,CLUSTER_6
existance,"numpy.full(_numPix,False,dtype=np.bool)",CLUSTER_3,CLUSTER_6
e1map,"numpy.full(_numPix,hp.UNSEEN,dtype=np.float)",CLUSTER_3,CLUSTER_6
existance,"numpy.full(_numPix,False,dtype=np.bool)",CLUSTER_3,CLUSTER_6
e1map,numpy.full(hp.nside2npix(NSIDE),CLUSTER_3,CLUSTER_6
existance,numpy.full(hp.nside2npix(NSIDE),CLUSTER_3,CLUSTER_6
THETAROT,numpy.arcsin(np.sqrt(y**2+z**2),CLUSTER_3,CLUSTER_6
THETAROT,numpy.arcsin(np.sqrt(y**2+z**2),CLUSTER_3,CLUSTER_6
PHIROT,"numpy.arctan2(z,y)",CLUSTER_3,CLUSTER_6
PHIROT,"numpy.arctan2(z,y)",CLUSTER_3,CLUSTER_6
"ct,cp,st,sp",numpy.cos(t),CLUSTER_3,CLUSTER_6
"ctR,cpR,stR,spR",numpy.cos(trot),CLUSTER_3,CLUSTER_6
"ct,cp,st,sp",numpy.cos(t),CLUSTER_3,CLUSTER_6
"ctR,cpR,stR,spR",numpy.cos(trot),CLUSTER_3,CLUSTER_6
cost,numpy.cos(theta),CLUSTER_3,CLUSTER_6
z,numpy.cos(theta),CLUSTER_3,CLUSTER_6
z,numpy.cos(theta),CLUSTER_3,CLUSTER_6
cosmp,numpy.cos(emm*phi),CLUSTER_3,CLUSTER_6
lr,numpy.cos(thRot),CLUSTER_3,CLUSTER_6
sint,numpy.sin(theta),CLUSTER_3,CLUSTER_6
y,numpy.sin(theta),CLUSTER_3,CLUSTER_6
y,numpy.sin(theta),CLUSTER_3,CLUSTER_6
sinmp,numpy.sin(emm*phi),CLUSTER_3,CLUSTER_6
norm,numpy.sqrt(ellArr*(ellArr+1),CLUSTER_3,CLUSTER_6
theta,"numpy.linspace(0,pi-1e-4,Nmax)",CLUSTER_3,CLUSTER_6
phi,"numpy.linspace(-pi+1e-4,pi-1e-4,Nmax)",CLUSTER_3,CLUSTER_6
theta,"numpy.linspace(1e-4,pi-1e-4,Nmax)",CLUSTER_3,CLUSTER_6
phi,"numpy.linspace(-pi+1e-4,pi-1e-4,Nmax)",CLUSTER_3,CLUSTER_6
"PHI,THETA","numpy.meshgrid(phi,theta)",CLUSTER_3,CLUSTER_6
"PHI,THETA","numpy.meshgrid(phi,theta)",CLUSTER_3,CLUSTER_6
l,numpy.array(l),CLUSTER_4,CLUSTER_11
df,"pandas.DataFrame(data,columns=['img']+['c%d'%iforiinrange(10)",CLUSTER_4,CLUSTER_11
data1,"pandas.read_csv(""turnover.csv"")",CLUSTER_4,CLUSTER_11
energies,numpy.empty([len(algorithms),CLUSTER_3,CLUSTER_6
hf_energies,numpy.empty(len(pts),CLUSTER_3,CLUSTER_6
distances,numpy.empty(len(pts),CLUSTER_3,CLUSTER_6
dipoles,numpy.empty([len(algorithms),CLUSTER_3,CLUSTER_6
eval_counts,numpy.empty(len(pts),CLUSTER_3,CLUSTER_6
"fig,(ax0,ax1)","matplotlib.pyplot.subplots(nrows=2,sharex=True,figsize=(6,6)",CLUSTER_5,CLUSTER_5
results,pandas.DataFrame(search.cv_results_),CLUSTER_5,CLUSTER_5
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_5
logistic,"sklearn.linear_model.SGDClassifier(loss='log',penalty='l1',max_iter=100,tol=1e-5,random_state=0)",CLUSTER_5,CLUSTER_5
pipe,"sklearn.pipeline.Pipeline(steps=[('pca',pca)",CLUSTER_5,CLUSTER_5
search,"sklearn.model_selection.GridSearchCV(pipe,param_grid,iid=False,cv=5,return_train_score=False)",CLUSTER_5,CLUSTER_5
train_data,"pandas.read_csv(path_to_data,sep="""",header=None)",CLUSTER_6,CLUSTER_11
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_6,CLUSTER_11
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_6,CLUSTER_11
dists,"numpy.zeros((num_pred,num_data)",CLUSTER_1,CLUSTER_9
y_pred,numpy.zeros(num_pred),CLUSTER_1,CLUSTER_9
y_pred,numpy.zeros(num_pred),CLUSTER_1,CLUSTER_9
features,"numpy.zeros((steps,3)",CLUSTER_1,CLUSTER_9
train_ind,"numpy.ones(l,dtype=bool)",CLUSTER_1,CLUSTER_9
closest_x,numpy.argsort(dst),CLUSTER_1,CLUSTER_9
test_ind,numpy.logical_not(train_ind),CLUSTER_1,CLUSTER_9
Y,numpy.hstack((np.zeros(num_observations),CLUSTER_1,CLUSTER_9
X,"numpy.vstack((x1,x2)",CLUSTER_1,CLUSTER_9
t0,time.time(),CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
t0,time.time(),CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
y_pred[j],"scipy.stats.mode(closest_y,None)",CLUSTER_1,CLUSTER_9
y_pred[j],"scipy.stats.mode(closest_y,None)",CLUSTER_1,CLUSTER_9
country,pandas.get_dummies(df['country']),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('ab_data.csv'),CLUSTER_1,CLUSTER_3
df_country,pandas.read_csv('countries.csv'),CLUSTER_1,CLUSTER_3
p_diffs,numpy.asarray(p_diffs),CLUSTER_1,CLUSTER_3
df2['ab_page'],"numpy.where(df2['group']=='treatment',1,0)",CLUSTER_1,CLUSTER_3
noteIn,"numpy.array(noteIn,dtype=float)",CLUSTER_5,CLUSTER_0
noteOut,"numpy.array(noteOut,dtype=float)",CLUSTER_5,CLUSTER_0
noteIn,"numpy.array(noteIn,dtype=float)",CLUSTER_5,CLUSTER_0
noteOut,"numpy.array(noteOut,dtype=float)",CLUSTER_5,CLUSTER_0
result,"numpy.array([intToNote[indexPitch],intToLength[indexLength]])",CLUSTER_5,CLUSTER_0
result,"numpy.array([intToNote[indexPitch],intToLength[indexLength]])",CLUSTER_5,CLUSTER_0
fake,"numpy.zeros((batch_size,1)",CLUSTER_5,CLUSTER_0
dout,"numpy.concatenate((catNote,catLength)",CLUSTER_5,CLUSTER_0
pattern,"numpy.concatenate((pattern,append)",CLUSTER_5,CLUSTER_0
real,"numpy.ones((batch_size,1)",CLUSTER_5,CLUSTER_0
indexPitch,numpy.argmax(array),CLUSTER_5,CLUSTER_0
indexLength,numpy.argmax(array),CLUSTER_5,CLUSTER_0
din,"numpy.reshape(reshape,(inputSize,seqLength,categories)",CLUSTER_5,CLUSTER_0
din,"numpy.reshape(reshape,(inputSize,seqLength,categories)",CLUSTER_5,CLUSTER_0
prediction_input,"numpy.reshape(pattern,(1,seqLength,categories)",CLUSTER_5,CLUSTER_0
append,numpy.reshape(np.array([indexPitch/float(npitches),CLUSTER_5,CLUSTER_0
shape,numpy.shape(noteIn),CLUSTER_5,CLUSTER_0
cik_df,"pandas.read_sql(text(""selectcik,sic,sic_description,company_name,tickerfromcikwherecik=:cik"")",CLUSTER_8,CLUSTER_4
mean_acc,numpy.zeros((Ks-1),CLUSTER_5,CLUSTER_5
std_acc,numpy.zeros((Ks-1),CLUSTER_5,CLUSTER_5
std_acc[n-1],numpy.std(yhat==y_test),CLUSTER_5,CLUSTER_5
df,pandas.read_csv('teleCust1000t.csv'),CLUSTER_5,CLUSTER_5
X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=4)",CLUSTER_5,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n),CLUSTER_5,CLUSTER_5
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,yhat)",CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('/home/urwa/Documents/side_projects/urban/data/featureData/com_jfk.csv'),CLUSTER_5,CLUSTER_5
train_r2,sklearn.metrics.r2_score(y_train.detach(),CLUSTER_5,CLUSTER_5
test_r2,sklearn.metrics.r2_score(y_test.detach(),CLUSTER_5,CLUSTER_5
train_r2,sklearn.metrics.r2_score(y_train.detach(),CLUSTER_5,CLUSTER_5
test_r2,sklearn.metrics.r2_score(y_test.detach(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.30,random_state=42)",CLUSTER_5,CLUSTER_5
text,"re.sub(r""i'm"",""iam"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""he's"",""heis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""she's"",""sheis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""it's"",""itis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""that's"",""thatis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""what's"",""thatis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""where's"",""whereis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""how's"",""howis"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'ll"",""will"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'ve"",""have"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'d"",""would"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""won't"",""willnot"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""can't"",""cannot"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""n't"",""not"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""n'"",""ng"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""'bout"",""about"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""'til"",""until"",text)",CLUSTER_0,CLUSTER_7
text,"re.sub(r""[-()",CLUSTER_0,CLUSTER_7
counter,collections.Counter(words),CLUSTER_0,CLUSTER_7
probs_df,"pandas.DataFrame(np.hstack([probs,y_test.values.reshape(-1,1)",CLUSTER_5,CLUSTER_1
X_fs_df,"pandas.DataFrame(X_fs,columns=features)",CLUSTER_5,CLUSTER_1
ft_pipeline,"sklearn.pipeline.Pipeline([
('cat',experiment_2.get_categorical_pipeline()",CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.2,stratify=y,random_state=1)",CLUSTER_5,CLUSTER_1
cb,matplotlib.pyplot.colorbar(),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(8,5)",CLUSTER_4,CLUSTER_11
imgplot,"matplotlib.pyplot.imshow(X[0],cmap=""gray"")",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.subplot(rows,cols,i+1)",CLUSTER_4,CLUSTER_11
loc,"numpy.arange(1,num_labels+1)",CLUSTER_4,CLUSTER_11
X,"numpy.array(X,dtype='float64')",CLUSTER_4,CLUSTER_11
y,numpy.array(y),CLUSTER_4,CLUSTER_11
X,"numpy.reshape(X,(400,(92*112)",CLUSTER_4,CLUSTER_11
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_4,CLUSTER_11
pca,sklearn.decomposition.PCA(n_components=0.99),CLUSTER_4,CLUSTER_11
clf,sklearn.linear_model.LogisticRegression(C=.001),CLUSTER_4,CLUSTER_11
clf,sklearn.linear_model.LogisticRegression(C=.01),CLUSTER_4,CLUSTER_11
"X_train,X_temp,y_train,y_temp","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_11
"X_val,X_test,y_val,y_test","sklearn.model_selection.train_test_split(X_temp,y_temp,test_size=0.5,random_state=42)",CLUSTER_4,CLUSTER_11
X_sample_scaled,sklearn.preprocessing.scale(X_sample),CLUSTER_4,CLUSTER_11
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_11
clf,sklearn.svm.LinearSVC(C=.001),CLUSTER_4,CLUSTER_11
clf,sklearn.svm.LinearSVC(C=.001),CLUSTER_4,CLUSTER_11
positions,"numpy.ndarray((n+1,self.ndim)",CLUSTER_1,CLUSTER_10
reference,"numpy.array([[0.,0.],[-1.,0.],[-1.,-1.],[-2.,-1.],
[-2.,0.],[-2.,1.],[-1.,1.],[-1.,2.],
[0.,2.],[1.,2.],[0.,2.]])",CLUSTER_1,CLUSTER_10
step,numpy.zeros(ndim),CLUSTER_1,CLUSTER_10
ys_2,"numpy.power(ys,2)",CLUSTER_1,CLUSTER_10
new_1,numpy.array(new_1),CLUSTER_1,CLUSTER_9
x,numpy.where(parabola==255),CLUSTER_1,CLUSTER_9
y,numpy.where(parabola==255),CLUSTER_1,CLUSTER_9
"values,freq","numpy.unique(img,return_counts=True)",CLUSTER_1,CLUSTER_9
"params,_","scipy.optimize.curve_fit(f=parabola_eqn_2,xdata=x,ydata=y)",CLUSTER_1,CLUSTER_9
window,"numpy.cumsum(np.insert(x_array,0,0)",CLUSTER_1,CLUSTER_9
average,numpy.average(y_data),CLUSTER_1,CLUSTER_9
average_weight,numpy.average(weighted_mean),CLUSTER_1,CLUSTER_9
y_data,"numpy.load(""6_dataset.pickle.npy"")",CLUSTER_1,CLUSTER_9
peaks,"scipy.signal.find_peaks(stretched_weighted_mean,width=3,distance=200,prominence=3,wlen=150)",CLUSTER_1,CLUSTER_9
test_df,"pandas.read_csv(""../data/test_WyRytb0.csv"")",CLUSTER_1,CLUSTER_3
sample_sub,"pandas.read_csv(""../data/sample_submission_CH2mq5Z.csv"")",CLUSTER_1,CLUSTER_3
df,"pandas.read_csv(""../data/train/train.csv"")",CLUSTER_1,CLUSTER_3
y,numpy.array([i*-2+1+np.random.normal(),CLUSTER_1,CLUSTER_9
y_hat,numpy.array([a+b*iforiinx]),CLUSTER_1,CLUSTER_9
y_fit,numpy.array([a+b*iforiinx_val]),CLUSTER_1,CLUSTER_9
y_hat,numpy.array([a+b*iforiinx]),CLUSTER_1,CLUSTER_9
y_fit,numpy.array([a+b*iforiinx_val]),CLUSTER_1,CLUSTER_9
residuals,numpy.zeros(len(y),CLUSTER_1,CLUSTER_9
ci_lo,numpy.zeros(len(x_val),CLUSTER_1,CLUSTER_9
ci_hi,numpy.zeros(len(x_val),CLUSTER_1,CLUSTER_9
resid,numpy.zeros(len(y),CLUSTER_1,CLUSTER_9
ci_lo,numpy.zeros(len(x_val),CLUSTER_1,CLUSTER_9
ci_hi,numpy.zeros(len(x_val),CLUSTER_1,CLUSTER_9
a,numpy.mean(y),CLUSTER_1,CLUSTER_9
a,numpy.mean(y),CLUSTER_1,CLUSTER_9
Sxy,numpy.sum(x*y),CLUSTER_1,CLUSTER_9
Sxx,numpy.sum(x**2),CLUSTER_1,CLUSTER_9
SSE,numpy.sum((y-y_hat),CLUSTER_1,CLUSTER_9
SSR,numpy.sum((y_hat-np.mean(y),CLUSTER_1,CLUSTER_9
tms,numpy.sum((y-np.mean(y),CLUSTER_1,CLUSTER_9
Sxy,numpy.sum(x*y),CLUSTER_1,CLUSTER_9
Sxx,numpy.sum(x**2),CLUSTER_1,CLUSTER_9
SSE,numpy.sum((y-y_hat),CLUSTER_1,CLUSTER_9
SSR,numpy.sum((y_hat-np.mean(y),CLUSTER_1,CLUSTER_9
tms,numpy.sum((y-np.mean(y),CLUSTER_1,CLUSTER_9
x_val,numpy.linspace(min(x),CLUSTER_1,CLUSTER_9
x_val,numpy.linspace(min(x),CLUSTER_1,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_9
"fig,((ax0,ax1),(ax2,_))","matplotlib.pyplot.subplots(nrows=2,ncols=2)",CLUSTER_1,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_9
"fig,((ax0,ax1),(ax2,_))","matplotlib.pyplot.subplots(nrows=2,ncols=2)",CLUSTER_1,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_9
r,math.sqrt(Rsq),CLUSTER_1,CLUSTER_9
SE_b,math.sqrt(MSE/Sxx),CLUSTER_1,CLUSTER_9
SE_b,math.sqrt(MSE/Sxx),CLUSTER_1,CLUSTER_9
SE_a,math.sqrt(MSE*(1/len(y),CLUSTER_1,CLUSTER_9
"w_shap,p_shap",scipy.stats.shapiro(residuals),CLUSTER_1,CLUSTER_9
data,pandas.read_csv('data/telecom_data.csv'),CLUSTER_7,CLUSTER_3
train_df,pandas.DataFrame(metadata),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(metadata),CLUSTER_7,CLUSTER_8
required_plots_df,"pandas.DataFrame(predictions_LR,columns=['predictions_LR'])",CLUSTER_7,CLUSTER_8
train_plot_df,pandas.DataFrame(np.array(y_train_pred),CLUSTER_7,CLUSTER_8
df_stop_words,"pandas.read_csv(""stop_words.txt"",delimiter=',')",CLUSTER_7,CLUSTER_8
df_stop_words,"pandas.read_csv(""stop_words.txt"",delimiter=',')",CLUSTER_7,CLUSTER_8
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_8
required_plots_df['true_labels'],numpy.array(labels_test),CLUSTER_7,CLUSTER_8
train_plot_df['labels_train'],numpy.array(labels_train),CLUSTER_7,CLUSTER_8
sorted_index,numpy.argsort(similarity),CLUSTER_7,CLUSTER_8
"mu,sd",numpy.mean(a),CLUSTER_7,CLUSTER_8
params,"numpy.logspace(-4,4,num=9)",CLUSTER_7,CLUSTER_8
processed_feature,"re.sub(r'\W','',str(tweets[sentence])",CLUSTER_7,CLUSTER_8
processed_feature,"re.sub(r'\s+[a-zA-Z]\s+','',processed_feature)",CLUSTER_7,CLUSTER_8
processed_feature,"re.sub(r'\s+','',processed_feature,flags=re.I)",CLUSTER_7,CLUSTER_8
processed_feature,"re.sub(r'^b\s+','',processed_feature)",CLUSTER_7,CLUSTER_8
train3,"scipy.sparse.hstack((train1,train2)",CLUSTER_7,CLUSTER_8
test_curve,"matplotlib.pyplot.errorbar(params,test_mean_hp,color=sns.xkcd_rgb[""palered""],yerr=test_ci_hp)",CLUSTER_7,CLUSTER_8
train_curve,"matplotlib.pyplot.errorbar(params,train_mean_hp,color=sns.xkcd_rgb[""denimblue""],yerr=train_ci_hp)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(15,6)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_7,CLUSTER_8
p1,"seaborn.countplot(x=""year"",data=df,ax=axes[0])",CLUSTER_7,CLUSTER_8
p2,"seaborn.countplot(x=""year"",data=df,hue='label',ax=axes[1])",CLUSTER_7,CLUSTER_8
p1,"seaborn.countplot(x=""claimant"",data=claimant_df,ax=axes[0])",CLUSTER_7,CLUSTER_8
p2,"seaborn.countplot(x=""claimant"",data=claimant_df,hue='label',ax=axes[1])",CLUSTER_7,CLUSTER_8
p1,"seaborn.countplot(x=""true_labels"",data=required_plots_df,ax=axes[0])",CLUSTER_7,CLUSTER_8
p2,"seaborn.countplot(x=""predictions_LR"",data=required_plots_df,ax=axes[1])",CLUSTER_7,CLUSTER_8
"features_train,features_test,labels_train,labels_test","sklearn.model_selection.train_test_split(train3,y,test_size=0.3,random_state=10)",CLUSTER_7,CLUSTER_8
"features_train,features_test,target_train,target_test","sklearn.model_selection.train_test_split(features,target,test_size=0.3,stratify=target)",CLUSTER_7,CLUSTER_8
"features_train,features_test,target_train,target_test","sklearn.model_selection.train_test_split(features,target,test_size=0.3,stratify=target)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
classifier,"sklearn.linear_model.LogisticRegression(C=params['c'],solver='liblinear')",CLUSTER_7,CLUSTER_8
classifier,"sklearn.linear_model.LogisticRegression(C=params[i],solver='liblinear')",CLUSTER_7,CLUSTER_8
selector,"sklearn.feature_selection.SelectPercentile(f_classif,percentile=10)",CLUSTER_7,CLUSTER_8
conf_mat_train,"sklearn.metrics.confusion_matrix(train_plot_df['labels_train'],train_plot_df['y_train_pred'])",CLUSTER_7,CLUSTER_8
conf_mat_train,"sklearn.metrics.confusion_matrix(required_plots_df['true_labels'],required_plots_df['predictions_LR'])",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.StratifiedKFold(n_splits=10,random_state=2017)",CLUSTER_7,CLUSTER_8
train_score,"sklearn.metrics.accuracy_score(target_train,train_target_pred)",CLUSTER_7,CLUSTER_8
test_score,"sklearn.metrics.accuracy_score(target_test,test_target_pred)",CLUSTER_7,CLUSTER_8
mashed_str,"re.sub("",\Z"","""",mashed_str)",CLUSTER_0,CLUSTER_11
parsed_lines,"re.split('\n',parsed_content)",CLUSTER_0,CLUSTER_11
parsed_words1,"re.split('[\t]+',parsed_line)",CLUSTER_0,CLUSTER_11
parsed_words2,"re.split('\,',parsed_words1[1])",CLUSTER_0,CLUSTER_11
dataset_desc_list,"re.split('[]+',dataset_desc)",CLUSTER_0,CLUSTER_11
org_url_dict,json.load(f),CLUSTER_0,CLUSTER_11
result_json,json.load(f),CLUSTER_0,CLUSTER_11
rsc_data,"pandas.Series({
'name':dataset_name,
'description':dataset_desc_list,
'attribution':package_author,
'column_field_name':'',
'columns_name':'',
'type':'file',
'categories':group_list,
'domain_category':group_domain,
'domain_tags':tag_list,
'provenance':'official',
'download_count':download_count,
'page_views_last_month':page_views_last_month,
'page_views_last_week':page_views_last_week,
'page_views_total':page_views_total,
'page_views_total_log':page_views_total_log,
'domain':domain_name,
'mash':mash_list,
'big_mash':big_mash_list
})",CLUSTER_0,CLUSTER_11
pd_data_init,"pandas.DataFrame(index=[],columns=[
'name',
'description',
'attribution',
'column_field_name',
'columns_name',
'type',
'categories',
'domain_category',
'domain_tags',
'provenance',
'download_count',
'page_views_last_month',
'page_views_last_week',
'page_views_total',
'page_views_total_log',
'domain',
'mash',
'big_mash'
])",CLUSTER_0,CLUSTER_11
amount,"random.randint(1,maxValue)",CLUSTER_10,CLUSTER_4
"fig,ax","matplotlib.pyplot.subplots(10,10,figsize=(8,8)",CLUSTER_7,CLUSTER_9
n_components,"numpy.arange(1,21)",CLUSTER_7,CLUSTER_9
n_components,"numpy.arange(50,210,10)",CLUSTER_7,CLUSTER_9
X_stretched,"numpy.dot(X,rng.randn(2,2)",CLUSTER_7,CLUSTER_9
angle,"numpy.degrees(np.arctan2(U[1,0],U[0,0])",CLUSTER_7,CLUSTER_9
"U,s,Vt",numpy.linalg.svd(covariance),CLUSTER_7,CLUSTER_9
kmeans,"sklearn.cluster.KMeans(4,random_state=0)",CLUSTER_7,CLUSTER_9
kmeans,"sklearn.cluster.KMeans(n_clusters=4,random_state=0)",CLUSTER_7,CLUSTER_9
kmeans,"sklearn.cluster.KMeans(n_clusters=4,random_state=0)",CLUSTER_7,CLUSTER_9
"Xmoon,ymoon","sklearn.datasets.make_moons(200,noise=.05,random_state=0)",CLUSTER_7,CLUSTER_9
digits,sklearn.datasets.load_digits(),CLUSTER_7,CLUSTER_9
pca,"sklearn.decomposition.PCA(0.99,whiten=True)",CLUSTER_7,CLUSTER_9
word_to_vec_map[currWordFromGlove],"numpy.array(line[1:],dtype=np.float64)",CLUSTER_0,CLUSTER_3
X,numpy.asarray(phrases),CLUSTER_0,CLUSTER_3
Y,"numpy.asarray(emoji,dtype=(int)",CLUSTER_0,CLUSTER_3
avgReturn,"numpy.zeros((50,)",CLUSTER_0,CLUSTER_3
pred,"numpy.zeros((m,1)",CLUSTER_0,CLUSTER_3
b,"numpy.zeros((n_y,)",CLUSTER_0,CLUSTER_3
XReturn,"numpy.zeros((m,max_len)",CLUSTER_0,CLUSTER_3
embeddingMatrix,"numpy.zeros((vocabularyLength,embeddingLength)",CLUSTER_0,CLUSTER_3
Z,"numpy.dot(W,avg)",CLUSTER_0,CLUSTER_3
z,"numpy.dot(W,avg)",CLUSTER_0,CLUSTER_3
dW,"numpy.dot(dz.reshape(n_y,1)",CLUSTER_0,CLUSTER_3
pred[j],numpy.argmax(A),CLUSTER_0,CLUSTER_3
val,numpy.argmax(output[0]),CLUSTER_0,CLUSTER_3
exp,numpy.exp(z),CLUSTER_0,CLUSTER_3
Y,numpy.eye(C),CLUSTER_0,CLUSTER_3
newarray,numpy.eye(5),CLUSTER_0,CLUSTER_3
newarray1,numpy.eye(5),CLUSTER_0,CLUSTER_3
filetest,pandas.read_csv('data/emojify_data.csv'),CLUSTER_0,CLUSTER_3
y,"numpy.array([3,6,9,12])",CLUSTER_3,CLUSTER_6
vector_for_char_a,"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
bh,"numpy.zeros((hidden_size,1)",CLUSTER_8,CLUSTER_3
by,"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
x,"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
x,"numpy.zeros((vocab_size,1)",CLUSTER_8,CLUSTER_3
hprev,"numpy.zeros((hidden_size,1)",CLUSTER_8,CLUSTER_3
hprev,"numpy.zeros((hidden_size,1)",CLUSTER_8,CLUSTER_3
"dWxh,dWhh,dWhy",numpy.zeros_like(Wxh),CLUSTER_8,CLUSTER_3
"dbh,dby",numpy.zeros_like(bh),CLUSTER_8,CLUSTER_3
dhnext,numpy.zeros_like(hs[0]),CLUSTER_8,CLUSTER_3
"mWxh,mWhh,mWhy",numpy.zeros_like(Wxh),CLUSTER_8,CLUSTER_3
"mbh,mby",numpy.zeros_like(bh),CLUSTER_8,CLUSTER_3
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_8,CLUSTER_3
dWhy+,"numpy.dot(dy,hs[t].T)",CLUSTER_8,CLUSTER_3
dh,"numpy.dot(Why.T,dy)",CLUSTER_8,CLUSTER_3
dWxh+,"numpy.dot(dhraw,xs[t].T)",CLUSTER_8,CLUSTER_3
dWhh+,"numpy.dot(dhraw,hs[t-1].T)",CLUSTER_8,CLUSTER_3
dhnext,"numpy.dot(Whh.T,dhraw)",CLUSTER_8,CLUSTER_3
y,"numpy.dot(Why,h)",CLUSTER_8,CLUSTER_3
ps[t],numpy.exp(ys[t]),CLUSTER_8,CLUSTER_3
p,numpy.exp(y),CLUSTER_8,CLUSTER_3
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_8,CLUSTER_3
h,"numpy.tanh(np.dot(Wxh,x)",CLUSTER_8,CLUSTER_3
hs[-1],numpy.copy(hprev),CLUSTER_8,CLUSTER_3
dy,numpy.copy(ps[t]),CLUSTER_8,CLUSTER_3
data,"numpy.column_stack((tt,xk,qk)",CLUSTER_1,CLUSTER_9
response,requests.get('https://jsonplaceholder.typicode.com/todos'),CLUSTER_9,CLUSTER_2
response,requests.get('https://api.github.com/events'),CLUSTER_9,CLUSTER_2
data,pandas.DataFrame(results),CLUSTER_9,CLUSTER_2
data,pandas.DataFrame(response.json(),CLUSTER_9,CLUSTER_2
flattened,pandas.DataFrame(dict(data[column]),CLUSTER_9,CLUSTER_2
data,"pandas.concat([data,flattened],axis=1)",CLUSTER_9,CLUSTER_2
ds,pandas.read_csv('./anonymized_data.csv'),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
ages,"pandas.DataFrame({""age"":[18,22,25,27,7,21,23,37,30,61,45,41,9,18,80,100]})",CLUSTER_4,CLUSTER_11
"ages[""equal_width_age""]","pandas.cut(ages[""age""],4)",CLUSTER_4,CLUSTER_11
"ages[""customized_age_grd""]","pandas.cut(ages[""age""],bin)",CLUSTER_4,CLUSTER_11
"ages[""equal_freq_age""]","pandas.qcut(ages[""age""],4)",CLUSTER_4,CLUSTER_11
app_train['CNT_CHILDREN_GROUP'],"pandas.cut(app_train['CNT_CHILDREN'].values,cut_rule,include_lowest=True)",CLUSTER_4,CLUSTER_11
app_train,pandas.read_csv(f_app),CLUSTER_4,CLUSTER_11
df,pandas.read_csv('newsdataset1.csv'),CLUSTER_8,CLUSTER_4
l,pandas.DataFrame(difference),CLUSTER_8,CLUSTER_3
my_predict,pandas.DataFrame(list(returns(signals),CLUSTER_8,CLUSTER_3
ticker_df,pandas.read_csv('stock_data/ticker_data.csv'),CLUSTER_8,CLUSTER_3
factor_df,pandas.read_csv('stock_data/factor_data.csv'),CLUSTER_8,CLUSTER_3
x,"numpy.ndarray.astype(x,""float32"")",CLUSTER_8,CLUSTER_3
my_weights,numpy.zeros(1000),CLUSTER_8,CLUSTER_3
sharpe_ratio,numpy.sqrt(252),CLUSTER_8,CLUSTER_3
features_dir,os.getcwd(),CLUSTER_4,CLUSTER_11
monkey,os.listdir(features_dir),CLUSTER_4,CLUSTER_11
def_scores,"pandas.DataFrame(dat,columns=cols,index=mindex)",CLUSTER_4,CLUSTER_11
scores_frame,"pandas.DataFrame(dat,columns=cols,index=mindex)",CLUSTER_4,CLUSTER_11
mortality_percents,"pandas.concat([live_percent,dead_percent],axis=1)",CLUSTER_4,CLUSTER_11
scores_report,"sklearn.metrics.classification_report(y_true,y_pred)",CLUSTER_4,CLUSTER_11
scores_report,"sklearn.metrics.classification_report(y_true,y_pred)",CLUSTER_4,CLUSTER_11
scores_report,"sklearn.metrics.classification_report(y_true,y_pred)",CLUSTER_4,CLUSTER_11
scores_report,"sklearn.metrics.classification_report(y_true,y_pred)",CLUSTER_4,CLUSTER_11
"surv_f1,mort_f1","sklearn.metrics.f1_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv_f1,mort_f1","sklearn.metrics.f1_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv_f1,mort_f1","sklearn.metrics.f1_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv,mort","sklearn.metrics.recall_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv,mort","sklearn.metrics.recall_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
"surv,mort","sklearn.metrics.recall_score(y_true,y_pred,average=None)",CLUSTER_4,CLUSTER_11
default_scores,"sklearn.model_selection.cross_val_score(Tree,X_train,y_train,cv=5,scoring='f1')",CLUSTER_4,CLUSTER_11
default_scores,"sklearn.model_selection.cross_val_score(Tree,X_train,y_train,cv=5,scoring='f1_macro')",CLUSTER_4,CLUSTER_11
default_scores,"sklearn.model_selection.cross_val_score(Tree,X_train,y_train,cv=5,scoring='recall')",CLUSTER_4,CLUSTER_11
default_scores,"sklearn.model_selection.cross_val_score(Tree,X_train,y_train,cv=5,scoring='recall_macro')",CLUSTER_4,CLUSTER_11
optimized_scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='f1')",CLUSTER_4,CLUSTER_11
optimized_scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='f1_macro')",CLUSTER_4,CLUSTER_11
optimized_scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='recall')",CLUSTER_4,CLUSTER_11
optimized_scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='recall_macro')",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.20,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.30,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.30,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=testes_size,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.20,random_state=42)",CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_best,y,test_size=0.50,random_state=42)",CLUSTER_4,CLUSTER_11
clf,"sklearn.model_selection.GridSearchCV(classifiers[key][0],classifiers[key][1],cv=5,
scoring=score)",CLUSTER_4,CLUSTER_11
clf,"sklearn.model_selection.GridSearchCV(classifiers[key][0],classifiers[key][1],cv=5,
scoring=score)",CLUSTER_4,CLUSTER_11
LSVC,sklearn.svm.LinearSVC(),CLUSTER_4,CLUSTER_11
LSVC,sklearn.svm.LinearSVC(random_state=42),CLUSTER_4,CLUSTER_11
SVC,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_11
SVC,sklearn.svm.SVC(random_state=42),CLUSTER_4,CLUSTER_11
MLP,sklearn.neural_network.MLPClassifier(),CLUSTER_4,CLUSTER_11
MLP,sklearn.neural_network.MLPClassifier(random_state=42),CLUSTER_4,CLUSTER_11
classifiers[key][0],"sklearn.neural_network.MLPClassifier(random_state=42,
hidden_layer_sizes=(input_layer,middle_layer)",CLUSTER_4,CLUSTER_11
Tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_11
Tree,sklearn.tree.DecisionTreeClassifier(random_state=42),CLUSTER_4,CLUSTER_11
Tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_11
Kneighb,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_11
Kneighb,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_11
df2_stand,"pandas.DataFrame({'type':['TV','radio','newspaper'],'coef':regr2.coef_})",CLUSTER_7,CLUSTER_5
df2_unstand,"pandas.DataFrame({'type':['TV','radio','newspaper'],'coef':regr.coef_})",CLUSTER_7,CLUSTER_5
exog,pandas.DataFrame({'TV':x_mesh.flatten(),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv('http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv',index_col=0)",CLUSTER_7,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr2,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr3,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr4,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr5,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_7,CLUSTER_5
x_mesh,"numpy.arange(0,300)",CLUSTER_7,CLUSTER_5
y_mesh,"numpy.arange(0,50)",CLUSTER_7,CLUSTER_5
x_mesh,"numpy.arange(0,300)",CLUSTER_7,CLUSTER_5
y_mesh,"numpy.arange(0,50)",CLUSTER_7,CLUSTER_5
x_mesh,"numpy.arange(0,300)",CLUSTER_7,CLUSTER_5
y_mesh,"numpy.arange(0,50)",CLUSTER_7,CLUSTER_5
num_iterations_array,"numpy.arange(0,10)",CLUSTER_7,CLUSTER_5
num_iterations_array,"numpy.arange(0,10)",CLUSTER_7,CLUSTER_5
num_iterations_array,"numpy.arange(0,10)",CLUSTER_7,CLUSTER_5
learning_rates,"numpy.logspace(-4,-3,100)",CLUSTER_7,CLUSTER_5
"x_mesh,y_mesh","numpy.meshgrid(x_mesh,y_mesh)",CLUSTER_7,CLUSTER_5
"x_mesh,y_mesh","numpy.meshgrid(x_mesh,y_mesh)",CLUSTER_7,CLUSTER_5
"x_mesh,y_mesh","numpy.meshgrid(x_mesh,y_mesh)",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
points,"numpy.genfromtxt(""/Users/Wanlun/Documents/APMAE4990-/data/data.csv"",delimiter="","")",CLUSTER_7,CLUSTER_5
price,"pandas.DataFrame({ticker:data['AdjClose']forticker,datainall_data.items()",CLUSTER_1,CLUSTER_3
volume,"pandas.DataFrame({ticker:data['Volume']forticker,datainall_data.items()",CLUSTER_1,CLUSTER_3
"figure3,ax3",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"figure1,ax1",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"figure2,ax2",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
"figure3,ax3",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
labels,"numpy.array([1,2,3,0,2,1])",CLUSTER_1,CLUSTER_9
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
corona_data,pandas.read_csv(dir_path+data_filename),CLUSTER_8,CLUSTER_3
targets,numpy.array(targets),CLUSTER_5,CLUSTER_10
results,numpy.zeros((len(sequences),CLUSTER_5,CLUSTER_10
data,"numpy.concatenate((training_data,testing_data)",CLUSTER_5,CLUSTER_10
targets,"numpy.concatenate((training_targets,testing_targets)",CLUSTER_5,CLUSTER_10
data,"numpy.concatenate((training_data,testing_data)",CLUSTER_5,CLUSTER_10
targets,"numpy.concatenate((training_targets,testing_targets)",CLUSTER_5,CLUSTER_10
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(data,targets,test_size=0.2)",CLUSTER_5,CLUSTER_10
collections1,"requests.get(
collection_url,
parameters={'load_amount':10,
'offset':0}
)",CLUSTER_8,CLUSTER_2
events0,"requests.get(calendar_url,parameters={'date':'2018-11'})",CLUSTER_8,CLUSTER_2
dataset,pandas.read_csv('Position_Salaries.csv'),CLUSTER_5,CLUSTER_5
X_grid,numpy.arange(min(sc_X.inverse_transform(X),CLUSTER_5,CLUSTER_5
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
sc_Y,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
regressor,sklearn.svm.SVR(kernel='rbf'),CLUSTER_5,CLUSTER_5
intr_features,"pandas.DataFrame(res,columns=['Attack','Defense','Attack^2','AttackxDefense','Defense^2'])",CLUSTER_5,CLUSTER_9
new_df,"pandas.DataFrame([[95,75],[121,120],[77,60]],
columns=['Attack','Defense'])",CLUSTER_5,CLUSTER_9
new_intr_features,"pandas.DataFrame(new_res,
columns=['Attack','Defense',
'Attack^2','AttackxDefense','Defense^2'])",CLUSTER_5,CLUSTER_9
fcc_survey_df['Age_bin_custom_range'],pandas.cut(np.array(fcc_survey_df['Age']),CLUSTER_5,CLUSTER_9
fcc_survey_df['Age_bin_custom_label'],pandas.cut(np.array(fcc_survey_df['Age']),CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_quantile_range'],"pandas.qcut(fcc_survey_df['Income'],
q=quantile_list)",CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_quantile_label'],"pandas.qcut(fcc_survey_df['Income'],
q=quantile_list,labels=quantile_labels)",CLUSTER_5,CLUSTER_9
poke_df,"pandas.read_csv('datasets/Pokemon.csv',encoding='utf-8')",CLUSTER_5,CLUSTER_9
popsong_df,"pandas.read_csv('datasets/song_views.csv',encoding='utf-8')",CLUSTER_5,CLUSTER_9
items_popularity,"pandas.read_csv('datasets/item_popularity.csv',encoding='utf-8')",CLUSTER_5,CLUSTER_9
fcc_survey_df,"pandas.read_csv('datasets/fcc_2016_coder_survey_subset.csv',encoding='utf-8')",CLUSTER_5,CLUSTER_9
qvl,"matplotlib.pyplot.axvline(quantile,color='r')",CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9
watched,numpy.array(popsong_df['listen_count']),CLUSTER_5,CLUSTER_9
items_popularity['popularity_scale_10'],numpy.array(np.round((items_popularity['pop_percent']*10),CLUSTER_5,CLUSTER_9
items_popularity['popularity_scale_100'],numpy.array(np.round((items_popularity['pop_percent']*100),CLUSTER_5,CLUSTER_9
fcc_survey_df['Age_bin_round'],numpy.array(np.floor(numpy.array(fcc_survey_df['Age']),CLUSTER_5,CLUSTER_9
income,numpy.array(fcc_survey_df['Income']),CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_log'],numpy.log((1+fcc_survey_df['Income']),CLUSTER_5,CLUSTER_9
"l,opt_lambda",scipy.stats.boxcox(income_clean),CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_boxcox_lambda_0'],scipy.stats.boxcox((1+fcc_survey_df['Income']),CLUSTER_5,CLUSTER_9
fcc_survey_df['Income_boxcox_lambda_opt'],"scipy.stats.boxcox(fcc_survey_df['Income'],
lmbda=opt_lambda)",CLUSTER_5,CLUSTER_9
bn,sklearn.preprocessing.Binarizer(threshold=0.9),CLUSTER_5,CLUSTER_9
pf,"sklearn.preprocessing.PolynomialFeatures(degree=2,interaction_only=False,include_bias=False)",CLUSTER_5,CLUSTER_9
ls1,os.listdir('color'),CLUSTER_2,CLUSTER_6
ls2,os.listdir('color/'+i),CLUSTER_2,CLUSTER_6
ls1,os.listdir('color'),CLUSTER_2,CLUSTER_6
ls2,os.listdir('color/'+i),CLUSTER_2,CLUSTER_6
xvap,os.listdir('I_want_to_test_it/'),CLUSTER_2,CLUSTER_6
im1,numpy.asarray(sm.imread('color/'+i+'/'+j),CLUSTER_2,CLUSTER_6
im1,numpy.asarray(sm.imread('I_want_to_test_it/'+i),CLUSTER_2,CLUSTER_6
X,"numpy.zeros((count,256,256,3)",CLUSTER_2,CLUSTER_6
Y,"numpy.zeros((count,1)",CLUSTER_2,CLUSTER_6
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
intranbh_distances,pandas.DataFrame(average_distances),CLUSTER_1,CLUSTER_9
reduced['bin'],"pandas.cut(reduced['price'],bins)",CLUSTER_1,CLUSTER_9
mean_price_and_count,"pandas.merge(listings_price,listings_number,
left_index=True,right_index=True,
suffixes=('_mean','_count')",CLUSTER_1,CLUSTER_9
mean_price_and_count,"pandas.merge(listings_price,listings_number,
left_on=""host_id"",right_on=""host_id"",
suffixes=('_mean','_count')",CLUSTER_1,CLUSTER_9
listings_and_price_with_review,"pandas.merge(listings_and_price_with_review,
num_reviews,
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
listings_with_reviews,"pandas.merge(listings,listings_and_price_with_review[['listing_id','count']].rename(columns={'count':'num_reviews'})",CLUSTER_1,CLUSTER_9
listings_and_comment_length,"pandas.merge(listings,mean_length_by_listing,
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
listings_and_comment_length,"pandas.merge(listings,reviews,
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
host_year_reviews,"pandas.merge(reviews,listings_with_reviews,
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
listing_multireviewers,"pandas.merge(listings_with_reviews[['listing_id','neighbourhood']],
multireviews[['listing_id','reviewer_id']],
left_on='listing_id',
right_on='listing_id')",CLUSTER_1,CLUSTER_9
listings,"pandas.read_csv(""./data/Edinburgh_AirBnb_listings_2.csv"")",CLUSTER_1,CLUSTER_9
reviews,"pandas.read_csv(""./data/Edinburgh_reviews_reduced.csv"")",CLUSTER_1,CLUSTER_9
allnbh_distances,"scipy.spatial.distance_matrix(coords,coords,p=2)",CLUSTER_1,CLUSTER_9
allnbh_distances,"scipy.spatial.distance_matrix(coords,coords,p=2)",CLUSTER_1,CLUSTER_9
mask,"numpy.ones(allnbh_distances.shape,dtype=bool)",CLUSTER_1,CLUSTER_9
bins,"numpy.linspace(0,21,22)",CLUSTER_1,CLUSTER_9
bins,"numpy.linspace(
np.min(reduced.price)",CLUSTER_1,CLUSTER_9
"hist,bin_edges","numpy.histogram(listings['minimum_nights'][listings.room_type==room_type],bins)",CLUSTER_1,CLUSTER_9
pbb,seaborn.color_palette(wavelength_to_rgb(clip(400+0.35*(pb_centers-pb_centers.min(),CLUSTER_10,CLUSTER_4
label_indices,numpy.where(labels==label),CLUSTER_2,CLUSTER_7
mis_idxs_list,numpy.where(misclassified==True),CLUSTER_2,CLUSTER_7
labels_int_vec,"numpy.argmax(labels,axis=1)",CLUSTER_2,CLUSTER_7
label_unique,numpy.sort(np.unique(labels),CLUSTER_2,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_7
aucs,numpy.array(aucs),CLUSTER_5,CLUSTER_1
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
cv,"sklearn.model_selection.StratifiedKFold(n_splits=num_splits,
shuffle=True,
random_state=seed)",CLUSTER_5,CLUSTER_1
auc,"sklearn.model_selection.cross_val_score(estimator,X=pc,y=labels,
cv=cv,scoring=""roc_auc"",
n_jobs=-1,verbose=3)",CLUSTER_5,CLUSTER_1
scores,numpy.zeros((len(n_clusters_range),CLUSTER_5,CLUSTER_10
n_clusters_range,"numpy.linspace(2,n_samples,10)",CLUSTER_5,CLUSTER_10
n_clusters_range,"numpy.linspace(2,100,10)",CLUSTER_5,CLUSTER_10
t0,time.time(),CLUSTER_5,CLUSTER_10
t0,time.time(),CLUSTER_5,CLUSTER_10
lag,"numpy.arange(-mid_idx,mid_idx+1)",CLUSTER_1,CLUSTER_10
signal,numpy.array(data_str.split(),CLUSTER_1,CLUSTER_10
spike,numpy.zeros(2*len(w),CLUSTER_1,CLUSTER_10
acf,"numpy.correlate(w,w,mode=""full"")",CLUSTER_1,CLUSTER_10
b,"numpy.correlate(spike,w)",CLUSTER_1,CLUSTER_10
acf,"numpy.correlate(tr,tr,mode=""full"")",CLUSTER_1,CLUSTER_10
tr_filtered,"numpy.convolve(f,tr)",CLUSTER_1,CLUSTER_10
A,"numpy.squeeze([np.roll(acf,i)",CLUSTER_1,CLUSTER_10
A,"numpy.squeeze([np.roll(acf,i)",CLUSTER_1,CLUSTER_10
f,"numpy.insert(f,0,np.zeros(alpha-1)",CLUSTER_1,CLUSTER_10
f,"numpy.insert(f,0,1)",CLUSTER_1,CLUSTER_10
b,"numpy.pad(acf[mid_idx+alpha:],pad_width=(0,alpha)",CLUSTER_1,CLUSTER_10
f,"numpy.linalg.solve(A,b)",CLUSTER_1,CLUSTER_10
f,"numpy.linalg.solve(A,b)",CLUSTER_1,CLUSTER_10
history2,"json.load(open(his_file,'r')",CLUSTER_2,CLUSTER_11
steps_per_epoch,numpy.ceil(train_gen.samples/batch_size),CLUSTER_2,CLUSTER_11
car_data,"pandas.DataFrame({""CarMake"":series,""Color"":colors})",CLUSTER_8,CLUSTER_4
series,"pandas.Series([""BMW"",""Toyota"",""Audi""])",CLUSTER_8,CLUSTER_4
colors,"pandas.Series([""Red"",""Blue"",""White""])",CLUSTER_8,CLUSTER_4
animals,"pandas.Series(['Tiger','Pandas','Lion','Snake'],index=[0,2,2,5])",CLUSTER_8,CLUSTER_4
car_sales,pandas.read_csv('car-sales.csv'),CLUSTER_8,CLUSTER_4
advertising,"pandas.read_csv(""C:/Users/sudha/Desktop/csv/advertising.csv"")",CLUSTER_7,CLUSTER_8
MSE,"numpy.sqrt(mean_squared_error(y_test,y_pred)",CLUSTER_7,CLUSTER_8
corrs,"numpy.corrcoef(x_train,y_train)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
"x_train_lm,x_test_lm,y_train_lm,y_test_lm","sklearn.model_selection.train_test_split(x,y,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_7,CLUSTER_8
r_squared,"sklearn.metrics.r2_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
xx,numpy.array(xx),CLUSTER_3,CLUSTER_6
yy,numpy.array(yy),CLUSTER_3,CLUSTER_6
r_yy,numpy.array(r_yy),CLUSTER_3,CLUSTER_6
y_p,numpy.array(xMat*ws),CLUSTER_3,CLUSTER_6
y,"numpy.array([1,2])",CLUSTER_3,CLUSTER_6
a,"numpy.array([[1,2],[3,4]])",CLUSTER_3,CLUSTER_6
b,"numpy.array([2,3])",CLUSTER_3,CLUSTER_6
X,"numpy.empty((M,x.shape[0])",CLUSTER_3,CLUSTER_6
err,"numpy.dot(X,w.reshape(w.shape[0],1)",CLUSTER_3,CLUSTER_6
err,"numpy.dot(X,w.reshape(w.shape[0],1)",CLUSTER_3,CLUSTER_6
predict_y,"numpy.dot(X,W_k.reshape(W_k.shape[0],1)",CLUSTER_3,CLUSTER_6
X,numpy.transpose(X),CLUSTER_3,CLUSTER_6
X,numpy.float64(X),CLUSTER_3,CLUSTER_6
x,numpy.float64(x),CLUSTER_3,CLUSTER_6
y,numpy.float64(y),CLUSTER_3,CLUSTER_6
xMat,numpy.mat(xArr),CLUSTER_3,CLUSTER_6
yMat,numpy.mat(yArr),CLUSTER_3,CLUSTER_6
xMat,numpy.mat(xArr),CLUSTER_3,CLUSTER_6
yMat,numpy.mat(yArr),CLUSTER_3,CLUSTER_6
weights,numpy.mat(np.eye(m),CLUSTER_3,CLUSTER_6
y,numpy.mat(y),CLUSTER_3,CLUSTER_6
y,math.sin(x),CLUSTER_3,CLUSTER_6
correct,numpy.squeeze(predicted.eq(labels.data.view_as(predicted),CLUSTER_6,CLUSTER_10
preds,numpy.squeeze(net(images),CLUSTER_6,CLUSTER_10
img,numpy.squeeze(images[idx]),CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(30,10)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(30,10)",CLUSTER_6,CLUSTER_10
titanic_df,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_3
cabin_df,pandas.DataFrame(levels),CLUSTER_7,CLUSTER_3
fig,"seaborn.FacetGrid(titanic_df,hue=""Sex"",aspect=4)",CLUSTER_7,CLUSTER_3
fig,"seaborn.FacetGrid(titanic_df,hue=""person"",aspect=4)",CLUSTER_7,CLUSTER_3
fig,"seaborn.FacetGrid(titanic_df,hue=""Pclass"",aspect=4)",CLUSTER_7,CLUSTER_3
movies,"pandas.concat([movies_sheet1,movies_sheet2,movies_sheet3])",CLUSTER_1,CLUSTER_3
movies,pandas.read_excel(file),CLUSTER_1,CLUSTER_3
movies_sheet1,"pandas.read_excel(file,sheet_name=0,index_col=0)",CLUSTER_1,CLUSTER_3
movies_sheet2,"pandas.read_excel(file,sheet_name=1,index_col=0)",CLUSTER_1,CLUSTER_3
movies_sheet3,"pandas.read_excel(file,sheet_name=2,index_col=0)",CLUSTER_1,CLUSTER_3
movies_subset_columns,"pandas.read_excel(file,parse_cols=6)",CLUSTER_1,CLUSTER_3
pima,"pandas.read_csv(url,header=None,names=col_names)",CLUSTER_8,CLUSTER_1
mnb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_8,CLUSTER_1
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_8,CLUSTER_1
xx,"numpy.linspace(0,1,1000)",CLUSTER_5,CLUSTER_9
dfX,"pandas.DataFrame(boston.data,columns=boston.feature_names)",CLUSTER_5,CLUSTER_9
dfy,"pandas.DataFrame(boston.target,columns=[""MEDV""])",CLUSTER_5,CLUSTER_9
df,"pandas.concat([dfX,dfy],axis=1)",CLUSTER_5,CLUSTER_9
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_9
C,"numpy.zeros((n_row,n_row)",CLUSTER_1,CLUSTER_9
C_new,"numpy.zeros((n_row,n_row)",CLUSTER_1,CLUSTER_9
m1,numpy.identity(n_row),CLUSTER_1,CLUSTER_9
m2,numpy.identity(n_row),CLUSTER_1,CLUSTER_9
X,"numpy.apply_along_axis(demean,1,X)",CLUSTER_1,CLUSTER_9
eigenvalues,"numpy.roots([a,-b,c])",CLUSTER_1,CLUSTER_9
"U,V",numpy.linalg.eig(C),CLUSTER_1,CLUSTER_9
C_new,numpy.linalg.inv(eigenvectors),CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(12,4)",CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(12,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(12,4)",CLUSTER_1,CLUSTER_9
X,"scipy.io.loadmat(""datafile.mat"")",CLUSTER_1,CLUSTER_9
sal,"pandas.read_csv('C:/Users/Surajkumar/Desktop/MLClub/Salaries.csv',low_memory=False)",CLUSTER_8,CLUSTER_3
np_img,numpy.array(img),CLUSTER_2,CLUSTER_7
np_img,"numpy.asarray([np_img],dtype=np.int32)",CLUSTER_2,CLUSTER_7
img_arr,"numpy.asarray(result_val,np.uint8)",CLUSTER_2,CLUSTER_7
result_val,"numpy.clip(result_val,0,255)",CLUSTER_2,CLUSTER_7
data_dict,"numpy.load(vgg16_npy_path,encoding='latin1')",CLUSTER_2,CLUSTER_7
start_time,time.time(),CLUSTER_2,CLUSTER_7
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
shown_images,"numpy.array([[1.,1.]])",CLUSTER_5,CLUSTER_10
dist,numpy.sum((X[i]-shown_images),CLUSTER_5,CLUSTER_10
ax,matplotlib.pyplot.subplot(111),CLUSTER_5,CLUSTER_10
tsne,"sklearn.manifold.TSNE(n_components=2,random_state=0,init='pca',learning_rate=200.,early_exaggeration=12.)",CLUSTER_5,CLUSTER_10
top_ch,numpy.arange(len(self.vocab),CLUSTER_6,CLUSTER_6
encoded_text,numpy.array([char2int[char]forcharintext]),CLUSTER_6,CLUSTER_6
x,numpy.array([[self.char2int[x]]]),CLUSTER_6,CLUSTER_6
one_hot,numpy.zeros((np.multiply(*arr.shape),CLUSTER_6,CLUSTER_6
y,numpy.zeros_like(x),CLUSTER_6,CLUSTER_6
kernel,"numpy.ones((3,3)",CLUSTER_1,CLUSTER_10
sure_fg,numpy.uint8(sure_fg),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_1,CLUSTER_10
x_data,numpy.arange(size),CLUSTER_12,CLUSTER_3
x,numpy.arange(100),CLUSTER_12,CLUSTER_3
x_data,numpy.arange(20),CLUSTER_12,CLUSTER_3
names,"numpy.arange(100,200)",CLUSTER_12,CLUSTER_3
tooltip,"dd,names=numpy.arange(100,200)",CLUSTER_12,CLUSTER_3
x_data,numpy.arange(10),CLUSTER_12,CLUSTER_3
y,numpy.cumsum(np.random.randn(n),CLUSTER_12,CLUSTER_3
y,"numpy.cumsum(np.random.randn(2,100)",CLUSTER_12,CLUSTER_3
line.y,"numpy.cumsum(np.random.randn(2,100)",CLUSTER_12,CLUSTER_3
x,"numpy.linspace(0.0,10.0,n)",CLUSTER_12,CLUSTER_3
all_images,os.listdir(SOURCE),CLUSTER_2,CLUSTER_7
news_data,"sklearn.datasets.fetch_20newsgroups(subset='all',random_state=156)",CLUSTER_8,CLUSTER_1
train_news,"sklearn.datasets.fetch_20newsgroups(subset='train',
remove=('headers','footers','quotes')",CLUSTER_8,CLUSTER_1
test_news,"sklearn.datasets.fetch_20newsgroups(subset='test',
remove=('headers','footers','quotes')",CLUSTER_8,CLUSTER_1
lr_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
lr_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
lr_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
lr_clf,sklearn.linear_model.LogisticRegression(C=10),CLUSTER_8,CLUSTER_1
gs_ridge,"RidgeCV(alphas=numpy.logspace(-2,2)",CLUSTER_5,CLUSTER_1
new_x_train,"numpy.vstack((meta1,meta2,meta3,meta4,meta5)",CLUSTER_5,CLUSTER_1
new_x_test,"numpy.vstack((
gs_ridge.predict(x_test)",CLUSTER_5,CLUSTER_1
df,"pandas.get_dummies(df,['month','day'])",CLUSTER_5,CLUSTER_1
df,pandas.read_csv(r'C:\Users\student\Desktop\forestfires.csv'),CLUSTER_5,CLUSTER_1
nknn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=17),CLUSTER_5,CLUSTER_1
gs_ridge,"sklearn.linear_model.RidgeCV(alphas=np.logspace(-2,2)",CLUSTER_5,CLUSTER_1
meta_ridge,"sklearn.linear_model.RidgeCV(np.logspace(-2,2)",CLUSTER_5,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(df,y)",CLUSTER_5,CLUSTER_1
"x_train_a,x_train_b,y_train_a,y_train_b","sklearn.model_selection.train_test_split(x_train,y_train)",CLUSTER_5,CLUSTER_1
gs_knn1,sklearn.model_selection.GridSearchCV(KNeighborsRegressor(),CLUSTER_5,CLUSTER_1
gs_knn2,sklearn.model_selection.GridSearchCV(KNeighborsRegressor(),CLUSTER_5,CLUSTER_1
gs_rf1,"sklearn.model_selection.GridSearchCV(RandomForestRegressor(n_estimators=30,n_jobs=-1)",CLUSTER_5,CLUSTER_1
gs_rf2,"sklearn.model_selection.GridSearchCV(RandomForestRegressor(n_estimators=100,n_jobs=-1)",CLUSTER_5,CLUSTER_1
gs_nrf,sklearn.model_selection.GridSearchCV(RandomForestRegressor(n_estimators=30),CLUSTER_5,CLUSTER_1
x,"numpy.array([2,3,7,8])",CLUSTER_5,CLUSTER_5
y,"numpy.array([1,6,5,7])",CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
t_array,numpy.array(t_array),CLUSTER_1,CLUSTER_10
q_array,numpy.array(q_array),CLUSTER_1,CLUSTER_10
v_array,numpy.array(v_array),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(nrows=2,ncols=1,figsize=(6,7)",CLUSTER_1,CLUSTER_10
df,pandas.read_csv(datafile),CLUSTER_8,CLUSTER_4
json_data,json.dumps(merged_json),CLUSTER_8,CLUSTER_4
json_data,json.dumps(merged_json),CLUSTER_8,CLUSTER_4
merged_json,json.loads(merged.to_json(),CLUSTER_8,CLUSTER_4
merged_json,json.loads(merged.to_json(),CLUSTER_8,CLUSTER_4
fs_images,numpy.array(fs_images),CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(""sample_data/styles_sample.csv"",sep=',',error_bad_lines=False)",CLUSTER_4,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(k,n,figsize=(20,4*k)",CLUSTER_4,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=k,init=""k-means++"",n_init=10,max_iter=50)",CLUSTER_4,CLUSTER_0
df,"pandas.DataFrame({'Actual':y_test,'Predicted':y_pred})",CLUSTER_7,CLUSTER_5
dataset,"pandas.read_csv('house.txt',names=['Area','Bed','Price'])",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
puf,"pandas.read_csv(""../tax-calculator/puf.csv"")",CLUSTER_8,CLUSTER_3
s,numpy.std(data),CLUSTER_1,CLUSTER_10
u,numpy.median(data),CLUSTER_1,CLUSTER_10
incomes,"numpy.append(incomes,[1000000000])",CLUSTER_1,CLUSTER_10
toronto_df1,"pandas.DataFrame({""PostalCode"":postalCodeList,
""Borough"":boroughList,
""Neighbourhood"":neighbourhoodList})",CLUSTER_9,CLUSTER_2
coordinates,pandas.read_csv('http://cocl.us/Geospatial_data'),CLUSTER_9,CLUSTER_2
data,requests.get('https://en.wikipedia.org/w/index.php?title=List_of_postal_codes_of_Canada:_M&oldid=945633050'),CLUSTER_9,CLUSTER_2
X,"numpy.zeros((n_sentences,embedding_dim)",CLUSTER_3,CLUSTER_6
vetor_y1,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_y2,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_P,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_x1,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_x2,numpy.zeros(100),CLUSTER_1,CLUSTER_10
vetor_P,numpy.zeros(100),CLUSTER_1,CLUSTER_10
gamma1,numpy.exp(lngamma1),CLUSTER_1,CLUSTER_10
gamma2,numpy.exp(lngamma2),CLUSTER_1,CLUSTER_10
vetor_x1,"numpy.linspace(0,1,100)",CLUSTER_1,CLUSTER_10
vetor_y1,"numpy.linspace(0,1,100)",CLUSTER_1,CLUSTER_10
sol,numpy.zeros_like(M),CLUSTER_12,CLUSTER_9
sol,numpy.zeros_like(M),CLUSTER_12,CLUSTER_9
r,numpy.sqrt(area/np.pi),CLUSTER_12,CLUSTER_9
x,"numpy.linspace(0,10,num=100)",CLUSTER_12,CLUSTER_9
x,"numpy.linspace(0,1)",CLUSTER_12,CLUSTER_9
M,"numpy.linspace(0,2*np.pi,N)",CLUSTER_12,CLUSTER_9
M,"numpy.linspace(0,2*np.pi,N)",CLUSTER_12,CLUSTER_9
sol[ii],"scipy.optimize.newton(F,sol[ii-1],args=(0.249,M[ii])",CLUSTER_12,CLUSTER_9
sol[ii],"scipy.optimize.newton(F,sol[ii-1],args=(ee,M[ii])",CLUSTER_12,CLUSTER_9
data_scaled,"pandas.DataFrame(data_scaled,columns=('WeeksToDeparture','std_wtd','MaxTemperatureC',
'MeanTemperatureC','MinTemperatureC','MeanDewPointC',
'MeanHumidity','MeanVisibilityKm','MeanWindSpeedKm/h',
'CloudCover')",CLUSTER_7,CLUSTER_5
X_encoded,"pandas.merge(
X_encoded,external_data,how='left',
left_on=['DateOfDeparture','Arrival'],
right_on=['DateOfDeparture','Arrival'],
sort=False)",CLUSTER_7,CLUSTER_5
X_encoded,"pandas.merge(
X_encoded,external_data,how='left',
left_on=['DateOfDeparture','Arrival'],
right_on=['DateOfDeparture','Arrival'],
sort=False)",CLUSTER_7,CLUSTER_5
data_weather,pandas.read_csv('submissions/starting_kit/external_data.csv'),CLUSTER_7,CLUSTER_5
data_weather,"pandas.read_csv(os.path.join(path,'external_data.csv')",CLUSTER_7,CLUSTER_5
X_encoded['DateOfDeparture'],pandas.to_datetime(X_encoded['DateOfDeparture']),CLUSTER_7,CLUSTER_5
X_encoded['DateOfDeparture'],pandas.to_datetime(X_encoded['DateOfDeparture']),CLUSTER_7,CLUSTER_5
"X_encoded.loc[:,'WeeksToDeparture':'CloudCover']",sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X_array,y_array,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(
model,X_train,y_train,cv=5,scoring='neg_mean_squared_error')",CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(
lasso,X_train,y_train,cv=5,scoring='neg_mean_squared_error')",CLUSTER_7,CLUSTER_5
regressor,sklearn.ensemble.RandomForestRegressor(),CLUSTER_7,CLUSTER_5
self.reg,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,max_depth=30,max_features=50)",CLUSTER_7,CLUSTER_5
score,sklearn.metrics.make_scorer(accuracy_score),CLUSTER_7,CLUSTER_5
grid_obj,"sklearn.model_selection.GridSearchCV(regressor,parameters,scoring=score)",CLUSTER_7,CLUSTER_5
df,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
dates,"pandas.date_range('20200101',periods=df.shape[0],freq='m')",CLUSTER_8,CLUSTER_3
entradas_treino,"numpy.concatenate((entradas[:35],entradas[50:85],entradas[100:135])",CLUSTER_3,CLUSTER_6
saidas_treino,"numpy.concatenate((saidas[:35],saidas[50:85],saidas[100:135])",CLUSTER_3,CLUSTER_6
entradas_teste,"numpy.concatenate((entradas[35:50],entradas[85:100],entradas[135:])",CLUSTER_3,CLUSTER_6
saidas_teste,"numpy.concatenate((saidas[35:50],saidas[85:100],saidas[135:])",CLUSTER_3,CLUSTER_6
entradas,"numpy.genfromtxt(""iris.data"",delimiter="","",usecols=(0,1,2,3)",CLUSTER_3,CLUSTER_6
saidas,"numpy.genfromtxt(""iris.data"",delimiter="","",usecols=(4)",CLUSTER_3,CLUSTER_6
x_plt,"numpy.arange(0,2*np.pi,10e-2)",CLUSTER_1,CLUSTER_9
Ns,"numpy.arange(5,30)",CLUSTER_1,CLUSTER_9
r,"numpy.array(r_init,dtype=float)",CLUSTER_1,CLUSTER_9
ab,"numpy.zeros((3,N)",CLUSTER_1,CLUSTER_9
b,numpy.zeros(N),CLUSTER_1,CLUSTER_9
us,numpy.zeros_like(ts),CLUSTER_1,CLUSTER_9
us,numpy.zeros_like(ts),CLUSTER_1,CLUSTER_9
dI,numpy.fabs(I-old_I),CLUSTER_1,CLUSTER_9
log_errs,numpy.log(errs),CLUSTER_1,CLUSTER_9
"xs,h","numpy.linspace(a,b,N,retstep=True)",CLUSTER_1,CLUSTER_9
xs_local,"numpy.linspace(xs[i-1],xs[i])",CLUSTER_1,CLUSTER_9
xs_local,"numpy.linspace(xs[i-1],xs[i])",CLUSTER_1,CLUSTER_9
xs,"numpy.linspace(a,b,N)",CLUSTER_1,CLUSTER_9
"ts,h","numpy.linspace(a,b,N,retstep=True)",CLUSTER_1,CLUSTER_9
"ts,h","numpy.linspace(a,b,N,retstep=True)",CLUSTER_1,CLUSTER_9
df,numpy.diff(fs),CLUSTER_1,CLUSTER_9
"a,b","numpy.polyfit(hs,errs,deg=1)",CLUSTER_1,CLUSTER_9
"a,b,c","numpy.polyfit(hs,errs,deg=2)",CLUSTER_1,CLUSTER_9
delta_r,numpy.linalg.solve(J(r),CLUSTER_1,CLUSTER_9
approx,"matplotlib.pyplot.plot(hs,a*hs**2+b*hs+c,'b')",CLUSTER_1,CLUSTER_9
table1_1,"pandas.concat([table1.iloc[:,0:2],table1.iloc[:,4:21]],axis=1)",CLUSTER_8,CLUSTER_3
table1_1,"pandas.concat([table1_1_1,table1_1_2],axis=1)",CLUSTER_8,CLUSTER_3
table1_1,"pandas.melt(table1_1,id_vars=['Type','Category'],var_name='Year',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table2_1,"pandas.melt(table2,id_vars=['RiskLevel','Category'],var_name='Year',value_name='n_of_risk_level_change')",CLUSTER_8,CLUSTER_3
table3_1,"pandas.melt(table3_1,id_vars=['Category'],var_name='Red_List_category',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table4_1,"pandas.melt(table4_1,id_vars=['Animal/plant','Class','Group'],var_name='Red_List_category',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table5_1,"pandas.melt(table5_1,id_vars=['Continent','Country'],var_name='Category',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table6_1,"pandas.melt(tabl6_1,id_vars=['Animal/plant','Continent','Sub_Continent','Country'],var_name='Red_List_category',value_name='n_of_threatened')",CLUSTER_8,CLUSTER_3
table5_GDP,"pandas.merge(left=table5_GDP,right=GDP,how='left')",CLUSTER_8,CLUSTER_3
GDP,"pandas.read_csv('dataset/GDP.csv',header=None)",CLUSTER_8,CLUSTER_3
table1,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table1')",CLUSTER_8,CLUSTER_3
table2,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table2',header=1)",CLUSTER_8,CLUSTER_3
table3,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table3a',header=8)",CLUSTER_8,CLUSTER_3
table4,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table4ab',header=0)",CLUSTER_8,CLUSTER_3
table5,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table5',header=1)",CLUSTER_8,CLUSTER_3
table6,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table6ab',header=1)",CLUSTER_8,CLUSTER_3
table9,"pandas.read_excel('dataset/selected_data.xlsx',sheetname='Table9')",CLUSTER_8,CLUSTER_3
unemployment,pandas.read_csv(file),CLUSTER_8,CLUSTER_3
cases,pandas.read_csv(file),CLUSTER_8,CLUSTER_3
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
b1,"numpy.zeros((n_h,1)",CLUSTER_1,CLUSTER_9
b2,"numpy.zeros((n_y,1)",CLUSTER_1,CLUSTER_9
parameters['b'+str(l)],"numpy.zeros((layer_dims[l],1)",CLUSTER_1,CLUSTER_9
Z,"numpy.dot(W,A)",CLUSTER_1,CLUSTER_9
dW,"numpy.dot(dZ,A_prev.T)",CLUSTER_1,CLUSTER_9
dA_prev,"numpy.dot(W.T,dZ)",CLUSTER_1,CLUSTER_9
cost,numpy.squeeze(cost),CLUSTER_1,CLUSTER_9
db,"numpy.sum(dZ,axis=1,keepdims=True)",CLUSTER_1,CLUSTER_9
x,"numpy.arange(-2.0,7.0,delta)",CLUSTER_1,CLUSTER_9
y,"numpy.arange(-2.0,7.0,delta)",CLUSTER_1,CLUSTER_9
delta,numpy.array(d),CLUSTER_1,CLUSTER_9
resp,"compute_responsibilities(data=numpy.array([[1.,2.],[-1.,-2.]]),weights=numpy.array([0.3,0.7])",CLUSTER_1,CLUSTER_9
resp,"compute_responsibilities(data=numpy.array([[1.,2.],[-1.,-2.],[0,0]]),weights=numpy.array([0.3,0.7])",CLUSTER_1,CLUSTER_9
data_tmp,"numpy.array([[1.,2.],[-1.,-2.]])",CLUSTER_1,CLUSTER_9
resp,"compute_responsibilities(data=data_tmp,weights=numpy.array([0.3,0.7])",CLUSTER_1,CLUSTER_9
data_tmp,"numpy.array([[1.,2.],[-1.,-2.]])",CLUSTER_1,CLUSTER_9
resp,"compute_responsibilities(data=data_tmp,weights=numpy.array([0.3,0.7])",CLUSTER_1,CLUSTER_9
Z,numpy.zeros(num_clusters),CLUSTER_1,CLUSTER_9
resp,"numpy.zeros((num_data,num_clusters)",CLUSTER_1,CLUSTER_9
weighted_sum,"numpy.zeros((num_dim,num_dim)",CLUSTER_1,CLUSTER_9
resp,"numpy.zeros((num_data,num_clusters)",CLUSTER_1,CLUSTER_9
p,numpy.zeros(K),CLUSTER_1,CLUSTER_9
exponent_term,"numpy.dot(delta.T,numpy.dot(np.linalg.inv(covs[k])",CLUSTER_1,CLUSTER_9
assignments[i],numpy.argmax(p),CLUSTER_1,CLUSTER_9
counts,"numpy.sum(resp,axis=0)",CLUSTER_1,CLUSTER_9
Z[k]+,numpy.log(weights[k]),CLUSTER_1,CLUSTER_9
sigmax,numpy.sqrt(cov[0][0]),CLUSTER_1,CLUSTER_9
sigmay,numpy.sqrt(cov[1][1]),CLUSTER_1,CLUSTER_9
d,numpy.vstack(data),CLUSTER_1,CLUSTER_9
"X,Y","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_9
cov,numpy.diag([images['red'].var(),CLUSTER_1,CLUSTER_9
ans,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
all_data,"pandas.concat([data,test_data])",CLUSTER_5,CLUSTER_5
all_data_ready,"pandas.concat([all_data_num,all_data_cat],axis=1,join_axes=[all_data_num.index])",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv('./data/ech_apprentissage.csv',sep=';',index_col='id')",CLUSTER_5,CLUSTER_5
test_data,"pandas.read_csv('./data/ech_test.csv',sep=';',index_col='id')",CLUSTER_5,CLUSTER_5
enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
x,"numpy.array([1,2])",CLUSTER_1,CLUSTER_9
m,"numpy.array([4,5])",CLUSTER_1,CLUSTER_9
w,"numpy.diag([1,2])",CLUSTER_1,CLUSTER_9
color_select,numpy.copy(image),CLUSTER_1,CLUSTER_10
line_image,numpy.copy(image),CLUSTER_1,CLUSTER_10
"XX,YY","numpy.meshgrid(np.arange(0,xsize)",CLUSTER_1,CLUSTER_10
fit_left,"numpy.polyfit((left_bottom[0],apex[0])",CLUSTER_1,CLUSTER_10
fit_right,"numpy.polyfit((right_bottom[0],apex[0])",CLUSTER_1,CLUSTER_10
fit_bottom,"numpy.polyfit((left_bottom[0],right_bottom[0])",CLUSTER_1,CLUSTER_10
df_features,"pandas.DataFrame(columns=['object_id','mean0','stddev0','med0','max0','min0','kurt0',
'mean1','stddev1','med1','max1','min1','kurt1',
'mean2','stddev2','med2','max2','min2','kurt2',
'mean3','stddev3','med3','max3','min3','kurt3',
'mean4','stddev4','med4','max4','min4','kurt4',
'mean5','stddev5','med5','max5','min5','kurt5'])",CLUSTER_8,CLUSTER_3
ig_training_features,"pandas.concat([df_ts_features,df_metadata],axis=1)",CLUSTER_8,CLUSTER_3
ig_test_features,"pandas.concat([df_ts_features,df_metadata],axis=1)",CLUSTER_8,CLUSTER_3
ig_training_set,pandas.read_csv('~/Desktop/Classes/ee660/data/ig_training_set.csv'),CLUSTER_8,CLUSTER_3
ig_test_set,pandas.read_csv('~/Desktop/Classes/ee660/data/ig_test_set.csv'),CLUSTER_8,CLUSTER_3
ig_training_set_metadata,pandas.read_csv('~/Desktop/Classes/ee660/data/ig_training_set_metadata.csv'),CLUSTER_8,CLUSTER_3
ig_test_set_metadata,pandas.read_csv('~/Desktop/Classes/ee660/data/ig_test_set_metadata.csv'),CLUSTER_8,CLUSTER_3
eg_training_set,pandas.read_csv('~/Desktop/Classes/ee660/data/eg_training_set.csv'),CLUSTER_8,CLUSTER_3
eg_test_set,pandas.read_csv('~/Desktop/Classes/ee660/data/eg_test_set.csv'),CLUSTER_8,CLUSTER_3
eg_training_set_metadata,pandas.read_csv('~/Desktop/Classes/ee660/data/eg_training_set_metadata.csv'),CLUSTER_8,CLUSTER_3
eg_test_set_metadata,pandas.read_csv('~/Desktop/Classes/ee660/data/eg_test_set_metadata.csv'),CLUSTER_8,CLUSTER_3
kmeans,"sklearn.cluster.KMeans(init='k-means++',n_clusters=number_of_components)",CLUSTER_5,CLUSTER_5
gmm_silhoute_score,"sklearn.metrics.silhouette_score(data,gmm_labels,metric='euclidean')",CLUSTER_5,CLUSTER_5
kmeans_silhoute_score,"sklearn.metrics.silhouette_score(data,kmeans_labels,metric='euclidean')",CLUSTER_5,CLUSTER_5
HC_silhoute_score,"sklearn.metrics.silhouette_score(data,HC.labels_,metric='euclidean')",CLUSTER_5,CLUSTER_5
data.brand,pandas.Categorical(data.brand),CLUSTER_5,CLUSTER_5
data,pandas.read_csv('cars.csv'),CLUSTER_5,CLUSTER_5
angle,"numpy.degrees(np.arctan2(U[1,0],U[0,0])",CLUSTER_5,CLUSTER_5
"U,s,Vt",numpy.linalg.svd(covariance),CLUSTER_5,CLUSTER_5
gmm,"sklearn.mixture.GaussianMixture(n_components=number_of_components,covariance_type='full',verbose=0,verbose_interval=10,max_iter=5000)",CLUSTER_5,CLUSTER_5
gmm,"sklearn.mixture.GaussianMixture(n_components=number_of_components,covariance_type='full',random_state=0)",CLUSTER_5,CLUSTER_5
gmm,"sklearn.mixture.GaussianMixture(n_components=number_of_components,covariance_type='spherical',verbose=0,verbose_interval=10,max_iter=5000)",CLUSTER_5,CLUSTER_5
HC,"sklearn.cluster.AgglomerativeClustering(n_clusters=number_of_components,linkage='ward',connectivity=KeepXNearestPointsConnected)",CLUSTER_5,CLUSTER_5
HC,"sklearn.cluster.AgglomerativeClustering(n_clusters=number_of_components,linkage='ward',connectivity=KeepXNearestPointsConnected)",CLUSTER_5,CLUSTER_5
KeepXNearestPointsConnected,"sklearn.neighbors.kneighbors_graph(data.values,n_neighbors=number_of_components,include_self=False)",CLUSTER_5,CLUSTER_5
KeepXNearestPointsConnected,"sklearn.neighbors.kneighbors_graph(data.values,n_neighbors=10,include_self=False)",CLUSTER_5,CLUSTER_5
Tsub,"numpy.linspace(T3-20,T3)",CLUSTER_1,CLUSTER_10
Tvap,"numpy.linspace(T3,T3+20)",CLUSTER_1,CLUSTER_10
Tvap_sea,"numpy.linspace(T3-5,304)",CLUSTER_1,CLUSTER_10
outliers,pandas.DataFrame(olrs),CLUSTER_7,CLUSTER_3
car_data,"pandas.read_csv('car.csv',index_col=0)",CLUSTER_7,CLUSTER_3
car_data['Power_bhp'],"pandas.to_numeric(car_data['Power_bhp'],errors='coerce')",CLUSTER_7,CLUSTER_3
car_data['Mileage'],"pandas.to_numeric(car_data['Mileage'],errors='coerce')",CLUSTER_7,CLUSTER_3
plt1,"sns.countplot(car_data['Name'],order=pandas.value_counts(car_data['Name'])",CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_7,CLUSTER_3
survive,"seaborn.countplot(x='Fuel_Type',hue='Transmission',palette='Set3',data=car_data)",CLUSTER_7,CLUSTER_3
plt1,seaborn.countplot(car_data['Power']),CLUSTER_7,CLUSTER_3
plt1,"seaborn.countplot(car_data['Name'],order=pd.value_counts(car_data['Name'])",CLUSTER_7,CLUSTER_3
tips,seaborn.load_dataset('tips'),CLUSTER_7,CLUSTER_3
alldata,pandas.read_csv('/home/thiago/Downloads/creditcard.csv'),CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,20)",CLUSTER_7,CLUSTER_3
df_agg,"pandas.concat([df_agg,df_NTUerr],axis=1)",CLUSTER_7,CLUSTER_9
df1,"pandas.read_csv(""CoolingTowerDay1-All.csv"")",CLUSTER_7,CLUSTER_9
df2,"pandas.read_csv(""CoolingTowerDay2-All.csv"")",CLUSTER_7,CLUSTER_9
hs_T,"numpy.array([40,50,60,70,80,90,100,110,120,130])",CLUSTER_7,CLUSTER_9
hs_h,"numpy.array([15.230,20.301,26.46,34.09,43.69,55.93,71.73,92.34,119.54,155.9])",CLUSTER_7,CLUSTER_9
gmeans,numpy.array([g1b['GasFlow'].mean(),CLUSTER_7,CLUSTER_9
gerrs,numpy.array([g1b['GasFlow-err'].mean(),CLUSTER_7,CLUSTER_9
LGfitx,numpy.sort(df['L/G']),CLUSTER_7,CLUSTER_9
SSres,numpy.sum(res**2),CLUSTER_7,CLUSTER_9
SStot,numpy.sum(sst**2),CLUSTER_7,CLUSTER_9
ss_res,"numpy.sum(LGweights*(df['NTU']-NTULGfit(df['L/G'],*LGfit)",CLUSTER_7,CLUSTER_9
ss_tot,numpy.sum(LGweights*(df['NTU']-df['NTU'].mean(),CLUSTER_7,CLUSTER_9
p_wb,"numpy.exp(-6096.9385*T_wb**-1+\
21.2409642-2.711193*10**-2*T_wb+\
1.673952*10**-5*T_wb**2+\
2.433502*np.log(T_wb)",CLUSTER_7,CLUSTER_9
p_wb,"numpy.exp(-6096.9385*T_wb**-1+\
21.2409642-2.711193*10**-2*T_wb+\
1.673952*10**-5*T_wb**2+\
2.433502*np.log(T_wb)",CLUSTER_7,CLUSTER_9
fit_err,numpy.sqrt(np.diagonal(hsat_cov),CLUSTER_7,CLUSTER_9
dp,"numpy.sqrt(dp_wb**2+\
(-P*(T-T_wb)",CLUSTER_7,CLUSTER_9
drho,numpy.sqrt((0.378/(287.1*T),CLUSTER_7,CLUSTER_9
dV,numpy.sqrt((np.pi/4*0.095**2),CLUSTER_7,CLUSTER_9
dG,"numpy.sqrt(V**2*drho**2+\
rho**2*dV**2
)",CLUSTER_7,CLUSTER_9
LGfit_err,numpy.sqrt(np.diagonal(LGcov),CLUSTER_7,CLUSTER_9
hs_Tdata,"numpy.linspace(hs_T[0],hs_T[-1],100)",CLUSTER_7,CLUSTER_9
"hsat_fit,hsat_cov","scipy.optimize.curve_fit(hsat,hs_T,hs_h,[0,0])",CLUSTER_7,CLUSTER_9
"LGfit,LGcov","scipy.optimize.curve_fit(NTULGfit,df_agg['L/G'],df_agg['NTU'],
sigma=LGweights,
absolute_sigma=True)",CLUSTER_7,CLUSTER_9
cbar,matplotlib.pyplot.colorbar(),CLUSTER_7,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
"fig,axs","matplotlib.pyplot.subplots(2,3,sharey=True,sharex=True,figsize=[11,6])",CLUSTER_7,CLUSTER_9
start,time.time(),CLUSTER_10,CLUSTER_12
end,time.time(),CLUSTER_10,CLUSTER_12
start,time.time(),CLUSTER_10,CLUSTER_12
end,time.time(),CLUSTER_10,CLUSTER_12
start,time.time(),CLUSTER_10,CLUSTER_12
end,time.time(),CLUSTER_10,CLUSTER_12
cities_df,"pandas.read_csv(""../Resources/KCMetroCities_Lat_Lng.csv"")",CLUSTER_9,CLUSTER_2
restaurant_address,"requests.get(base_url,params=params)",CLUSTER_9,CLUSTER_2
df,"pandas.concat([df_train,df_test])",CLUSTER_7,CLUSTER_8
df_train,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv(data_path+'titanic_test.csv'),CLUSTER_7,CLUSTER_8
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
df_fixed['Fare'],scipy.stats.boxcox(df_fixed['Fare']),CLUSTER_7,CLUSTER_8
text,"re.sub(r""[^A-Za-z0-9^,!.\/'+-=]"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""what's"",""whatis"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'s"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'ve"",""have"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""n't"",""not"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""i'm"",""iam"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'d"",""would"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\'ll"",""will"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r"","","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\."","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""!"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\/"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\^"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\+"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\-"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\="","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""'"","""",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""(\d+)",CLUSTER_8,CLUSTER_4
text,"re.sub(r"":"","":"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""eg"",""eg"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""bg"",""bg"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\0s"",""0"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""911"",""911"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""e-mail"",""email"",text)",CLUSTER_8,CLUSTER_4
text,"re.sub(r""\s{2,}"","""",text)",CLUSTER_8,CLUSTER_4
r,requests.get(adres),CLUSTER_10,CLUSTER_4
data,json.loads(r.text),CLUSTER_10,CLUSTER_4
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_6,CLUSTER_11
x2,"random.randint(1,10)",CLUSTER_10,CLUSTER_12
x3,random.random(),CLUSTER_10,CLUSTER_12
x1,"random.randrange(1,10)",CLUSTER_10,CLUSTER_12
now,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
now,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
date,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
date1,"datetime.datetime.strptime(myStr1,""%Y-%m-%d"")",CLUSTER_10,CLUSTER_12
date2,"datetime.datetime.strptime(myStr2,""%d-%m-%Y%H:%M:%S"")",CLUSTER_10,CLUSTER_12
date1,"datetime.datetime.strptime(str1,""%Y-%m-%d"")",CLUSTER_10,CLUSTER_12
dd,numpy.asarray(Train.Count),CLUSTER_7,CLUSTER_8
merge,"pandas.merge(test,test_original,on=('day','month','year')",CLUSTER_7,CLUSTER_8
prediction,"pandas.merge(merge,temp2,on='Hour',how='left')",CLUSTER_7,CLUSTER_8
merge,"pandas.merge(test,test_original,on=('day','month','year')",CLUSTER_7,CLUSTER_8
prediction,"pandas.merge(merge,temp2,on='Hour',how='left')",CLUSTER_7,CLUSTER_8
train,pandas.read_csv('Train_SU63ISt.csv'),CLUSTER_7,CLUSTER_8
test,pandas.read_csv('Test_0qrQsBZ.csv'),CLUSTER_7,CLUSTER_8
temp2,"pandas.read_csv(""GROUPby.csv"")",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('Holtlinear.csv'),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('Holtwinters.csv'),CLUSTER_7,CLUSTER_8
train['Datetime'],"pandas.to_datetime(train['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
test['Datetime'],"pandas.to_datetime(test['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
train_original['Datetime'],"pandas.to_datetime(train_original['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
test_original['Datetime'],"pandas.to_datetime(test_original['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
train.index,"pandas.to_datetime(train.Datetime,format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
test.index,"pandas.to_datetime(test['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
train.index,"pandas.to_datetime(train['Datetime'],format='%d-%m-%Y%H:%M')",CLUSTER_7,CLUSTER_8
"fig,axs","matplotlib.pyplot.subplots(4,1,figsize=(20,20)",CLUSTER_7,CLUSTER_8
rms,"math.sqrt(mean_squared_error(valid.Count,y_naive.Naive)",CLUSTER_7,CLUSTER_8
rms_MA,"math.sqrt(mean_squared_error(valid.Count,y_mavg.forecast)",CLUSTER_7,CLUSTER_8
rms_exp,"math.sqrt(mean_squared_error(valid.Count,y_exp.SES)",CLUSTER_7,CLUSTER_8
rms_holt,"math.sqrt(mean_squared_error(valid.Count,y_holt_linear.holt_linear)",CLUSTER_7,CLUSTER_8
rms,"math.sqrt(mean_squared_error(valid.Count,y_holt_winter.Holt_Winter)",CLUSTER_7,CLUSTER_8
self.dfExpected,"pandas.DataFrame(expected,columns=self.dfObserved.columns,index=self.dfObserved.index)",CLUSTER_4,CLUSTER_0
df_to_plot_race,"pandas.DataFrame(data=sorted_by_value,columns=['Emoji','P-value'])",CLUSTER_4,CLUSTER_0
self.dfObserved,"pandas.crosstab(Y,X)",CLUSTER_4,CLUSTER_0
counts_df_ran,"pandas.read_csv(path_counts_ran,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
users_df_ran,"pandas.read_csv(path_users_ran,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
counts_df_lon,"pandas.read_csv(path_counts_lon,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
users_df_lon,"pandas.read_csv(path_users_lon,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
counts_df_joh,"pandas.read_csv(path_counts_joh,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
users_df_joh,"pandas.read_csv(path_users_joh,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
counts_df_nyc,"pandas.read_csv(path_counts_nyc,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
users_df_nyc,"pandas.read_csv(path_users_nyc,index_col=None,header=0,low_memory=False)",CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,12)",CLUSTER_4,CLUSTER_0
"chi2,p,dof,expected",scipy.stats.chi2_contingency(self.dfObserved.values),CLUSTER_4,CLUSTER_0
x_linespace,"numpy.linspace(0,4*pi,num=20)",CLUSTER_4,CLUSTER_0
data,pandas.read_csv('diabetes2.csv'),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,shuffle=True)",CLUSTER_7,CLUSTER_5
model,sklearn.svm.SVC(gamma='scale'),CLUSTER_7,CLUSTER_5
model1,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model2,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
model3,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline([
('nomalizer',StandardScaler()",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_validate(pipeline,X_train,y_train)",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_validate(pipeline,X_train,y_train)",CLUSTER_7,CLUSTER_5
adaboost,sklearn.ensemble.AdaBoostClassifier(base_estimator=DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
adaboost,sklearn.ensemble.AdaBoostClassifier(base_estimator=LogisticRegression(),CLUSTER_8,CLUSTER_1
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_8,CLUSTER_1
adaboost,AdaBoostClassifier(base_estimator=sklearn.tree.DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
"('abc',AdaBoostClassifier(base_estimator",sklearn.tree.DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
"('abc',AdaBoostClassifier(base_estimator",sklearn.tree.DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
pipeline,"make_pipeline(MinMaxScaler(),AdaBoostClassifier(n_estimators=100,base_estimator=sklearn.tree.DecisionTreeClassifier()",CLUSTER_8,CLUSTER_1
digits,sklearn.datasets.load_digits(),CLUSTER_8,CLUSTER_1
"trainX,testX,trainY,testY","sklearn.model_selection.train_test_split(digits.data,digits.target)",CLUSTER_8,CLUSTER_1
"trainX,testX,trainY,testY","sklearn.model_selection.train_test_split(digits.data,digits.target)",CLUSTER_8,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
adaboost,AdaBoostClassifier(base_estimator=sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
gbt,sklearn.ensemble.GradientBoostingClassifier(n_estimators=100),CLUSTER_8,CLUSTER_1
vc,"sklearn.ensemble.VotingClassifier(estimators=estimators,voting='hard')",CLUSTER_8,CLUSTER_1
vcc,"sklearn.ensemble.VotingClassifier(estimators=estimators,voting='soft',weights=[1,5,4,1])",CLUSTER_8,CLUSTER_1
gs,"sklearn.model_selection.GridSearchCV(vc,param_grid={'weights':[[1,5,4,1],[1,4,5,1]]},cv=5)",CLUSTER_8,CLUSTER_1
gs,"sklearn.model_selection.GridSearchCV(pipeline,param_grid={'adaboostclassifier__base_estimator':[DecisionTreeClassifier()",CLUSTER_8,CLUSTER_1
pipeline,sklearn.pipeline.make_pipeline(MinMaxScaler(),CLUSTER_8,CLUSTER_1
RHO,"numpy.zeros((nb_x_classes,nb_x_classes+1)",CLUSTER_2,CLUSTER_7
z,"numpy.zeros(n,dtype=int)",CLUSTER_2,CLUSTER_7
q_arr,numpy.zeros(nb_x_classes),CLUSTER_2,CLUSTER_7
x_convert,"numpy.zeros(n,dtype=int)",CLUSTER_2,CLUSTER_7
x_hat,"numpy.zeros(n,dtype=np.int)",CLUSTER_2,CLUSTER_7
m[context_str],"numpy.zeros(nb_z_classes,dtype=np.int)",CLUSTER_2,CLUSTER_7
x_convert[i],"numpy.dot(mask,x_temp[i:i+order])",CLUSTER_2,CLUSTER_7
EXP,"numpy.dot(PI_INV,LAMBDA*(PI[:,z[i]].reshape((nb_x_classes,1)",CLUSTER_2,CLUSTER_7
score,"numpy.dot(m_vector,EXP)",CLUSTER_2,CLUSTER_7
LAMBDA,"numpy.ones((nb_x_classes,nb_x_classes)",CLUSTER_2,CLUSTER_7
MAP,"numpy.ones((nb_x_classes,nb_x_classes+1)",CLUSTER_2,CLUSTER_7
mask,numpy.ones((order),CLUSTER_2,CLUSTER_7
LAMBDA,"numpy.ones((nb_x_classes,nb_x_classes)",CLUSTER_2,CLUSTER_7
L,"numpy.matmul(PI_INV,RHO)",CLUSTER_2,CLUSTER_7
"img_quantize[i,j]","numpy.argmax(img[i,j]<q_arr)",CLUSTER_2,CLUSTER_7
x_hat[i],numpy.argmin(score),CLUSTER_2,CLUSTER_7
x_temp,numpy.hstack((np.zeros(order-1),CLUSTER_2,CLUSTER_7
PI_sum,numpy.copy(PI),CLUSTER_2,CLUSTER_7
x_temp,numpy.copy(x),CLUSTER_2,CLUSTER_7
imarray,numpy.array(im),CLUSTER_2,CLUSTER_7
C,"numpy.zeros((n-2*k,2*k*nb_z_classes)",CLUSTER_2,CLUSTER_7
Y,"numpy.dot(Z[k:n-k],L_new)",CLUSTER_2,CLUSTER_7
x,"numpy.ones((states,states)",CLUSTER_2,CLUSTER_7
error,numpy.absolute(a-b),CLUSTER_2,CLUSTER_7
error,numpy.absolute(a-b),CLUSTER_2,CLUSTER_7
x,numpy.hstack(tuple(x),CLUSTER_2,CLUSTER_7
z,numpy.hstack(tuple(z),CLUSTER_2,CLUSTER_7
c_i,"numpy.vstack((Z[i-k:i,],Z[i+1:i+k+1,])",CLUSTER_2,CLUSTER_7
PI_INV,numpy.linalg.inv(PI),CLUSTER_2,CLUSTER_7
PI_INV,numpy.linalg.inv(PI),CLUSTER_2,CLUSTER_7
PI_dict,scipy.io.loadmat('PARAM/'+true_or_assumed+'_PI.mat'),CLUSTER_2,CLUSTER_7
TRANS_dict,scipy.io.loadmat('PARAM/'+true_or_assumed+'_TRANS.mat'),CLUSTER_2,CLUSTER_7
article_labels,"numpy.argmax(article_dists,axis=1)",CLUSTER_5,CLUSTER_5
top_i,numpy.argsort(topic_dists[comp]),CLUSTER_5,CLUSTER_5
articles,pandas.read_csv('all.csv'),CLUSTER_5,CLUSTER_5
as_topics,"sklearn.decomposition.LatentDirichletAllocation(n_components=10,random_state=0,n_jobs=6)",CLUSTER_5,CLUSTER_5
talks,"pandas.read_csv(""talks.tsv"",sep=""\t"",header=0)",CLUSTER_8,CLUSTER_4
colors,seaborn.color_palette(),CLUSTER_10,CLUSTER_4
iris,sklearn.datasets.load_iris(),CLUSTER_10,CLUSTER_4
rnd_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,n_jobs=-1)",CLUSTER_10,CLUSTER_4
coeffdf,"pandas.DataFrame({'Word':basicwords,
'Coefficient':basiccoeffs})",CLUSTER_8,CLUSTER_1
advcoeffdf,"pandas.DataFrame({'Words':advwords,
'Coefficient':advcoeffs})",CLUSTER_8,CLUSTER_1
data,pandas.read_csv('Combined_News_DJIA.csv'),CLUSTER_8,CLUSTER_1
basicmodel,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
advancedmodel,sklearn.linear_model.LogisticRegression(),CLUSTER_8,CLUSTER_1
p2kfatc_qtdamostra_loc_exec,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_extpython_tp_total[0:1]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_extpython_tp_total[4:5]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_mssql_tp_total[0:1]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_mssql_tp_total[4:5]),CLUSTER_5,CLUSTER_9
p2kfatc_qtdamostra_loc_exec10,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_extpython_tp_total[0:1]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_extpython_tp_total[10:]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_mssql_tp_total[0:1]),CLUSTER_5,CLUSTER_9
aux,pandas.DataFrame(pivot_df_desempenho_mssql_tp_total[10:]),CLUSTER_5,CLUSTER_9
pivot_df_desempenho,pandas.DataFrame(),CLUSTER_5,CLUSTER_9
df,pandas.DataFrame(x_scaled),CLUSTER_5,CLUSTER_9
df_desempenho_mssql,"pandas.read_csv(""dados_desempenho_mssql.csv"",sep="";"")",CLUSTER_5,CLUSTER_9
df_desempenho_extpython,"pandas.read_csv(""dados_desempenho_ext_python.csv"",sep=""|"")",CLUSTER_5,CLUSTER_9
"pivot_df_desempenho_mssql_tp_python[""sem""]","numpy.apply_along_axis(sts.sem,axis=1,arr=pivot_df_desempenho_mssql_tp_python_tmp.as_matrix()",CLUSTER_5,CLUSTER_9
"pivot_df_desempenho_mssql_tp_total[""sem""]","numpy.apply_along_axis(sts.sem,axis=1,arr=pivot_df_desempenho_mssql_tp_total_tmp.as_matrix()",CLUSTER_5,CLUSTER_9
"pivot_df_desempenho_extpython_tp_python[""sem""]","numpy.apply_along_axis(sts.sem,axis=1,arr=pivot_df_desempenho_extpython_tp_python_tmp.as_matrix()",CLUSTER_5,CLUSTER_9
"pivot_df_desempenho_extpython_tp_total[""sem""]","numpy.apply_along_axis(sts.sem,axis=1,arr=pivot_df_desempenho_extpython_tp_total_tmp.as_matrix()",CLUSTER_5,CLUSTER_9
chi_med_total,"scipy.stats.chisquare(pivot_df_desempenho[""media_extpython_tp_total""],
pivot_df_desempenho[""media_mssql_tp_total""])",CLUSTER_5,CLUSTER_9
chi_med_python,"scipy.stats.chisquare(pivot_df_desempenho[""media_extpython_tp_python""],
pivot_df_desempenho[""media_mssql_tp_python""])",CLUSTER_5,CLUSTER_9
tstat,"scipy.stats.ttest_ind(df_desempenho_extpython.query(""qtd_amostra==1000"")",CLUSTER_5,CLUSTER_9
min_max_scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0.1,1)",CLUSTER_5,CLUSTER_9
Se,math.sqrt(MSE),CLUSTER_5,CLUSTER_9
data,"pandas.read_csv(os.path.join(data_path,'ratings.csv')",CLUSTER_10,CLUSTER_2
data_movies,"pandas.read_csv(os.path.join(data_path,'movies.csv')",CLUSTER_10,CLUSTER_2
data_baltic,"pandas.read_csv(os.path.join(data_path,'power.csv')",CLUSTER_10,CLUSTER_2
table,pandas.read_html(io.StringIO(page.content.decode('UTF-8'),CLUSTER_10,CLUSTER_2
page,"requests.get(""https://fortrader.org/quotes"")",CLUSTER_10,CLUSTER_2
df,"pandas.read_csv('./ex2data1.txt',dtype=np.float64,header=None)",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv('./ex2data1.txt',dtype=np.float64,header=None)",CLUSTER_5,CLUSTER_5
theta,numpy.array(initial_theta),CLUSTER_5,CLUSTER_5
st,"numpy.array([1,45,85])",CLUSTER_5,CLUSTER_5
st,"numpy.array([1,45,85])",CLUSTER_5,CLUSTER_5
st,"numpy.array([1,45,85])",CLUSTER_5,CLUSTER_5
grad_,numpy.zeros(theta.shape[0]),CLUSTER_5,CLUSTER_5
initial_theta,numpy.zeros(n+1),CLUSTER_5,CLUSTER_5
J_history,numpy.zeros(num_iters),CLUSTER_5,CLUSTER_5
theta,numpy.zeros(n),CLUSTER_5,CLUSTER_5
J_history,numpy.zeros(num_iters),CLUSTER_5,CLUSTER_5
initial_theta,numpy.zeros(X.shape[1]+1),CLUSTER_5,CLUSTER_5
theta,numpy.zeros(n),CLUSTER_5,CLUSTER_5
J_history,numpy.zeros(num_iters),CLUSTER_5,CLUSTER_5
X,"numpy.concatenate((np.ones((m,1)",CLUSTER_5,CLUSTER_5
grad_,"numpy.dot(X.T,hx-y)",CLUSTER_5,CLUSTER_5
hx,"numpy.dot(X,theta)",CLUSTER_5,CLUSTER_5
J,numpy.sum(-y*np.log(hx),CLUSTER_5,CLUSTER_5
clf,"sklearn.linear_model.SGDClassifier(loss='log',n_iter=6000,random_state=100)",CLUSTER_5,CLUSTER_5
clf,"sklearn.linear_model.LogisticRegression(C=10,solver='lbfgs')",CLUSTER_5,CLUSTER_5
data,"sklearn.datasets.make_blobs(n_samples=300,n_features=2,centers=n+2,cluster_std=1.5,
center_box=(-10.0,10.0)",CLUSTER_5,CLUSTER_10
clf,"sklearn.ensemble.RandomTreesEmbedding(n_estimators=100,max_depth=10)",CLUSTER_5,CLUSTER_10
cluster,"sklearn.cluster.AgglomerativeClustering(n_clusters=i+2,affinity=""precomputed"",linkage=""complete"")",CLUSTER_5,CLUSTER_10
cluster,"sklearn.cluster.AgglomerativeClustering(n_clusters=i+2,affinity=""precomputed"",linkage=""complete"")",CLUSTER_5,CLUSTER_10
cluster,"sklearn.cluster.AgglomerativeClustering(n_clusters=i+2,affinity=""euclidean"",linkage=""ward"")",CLUSTER_5,CLUSTER_10
cluster,"sklearn.cluster.AgglomerativeClustering(n_clusters=i+2,affinity=""precomputed"",linkage=""average"")",CLUSTER_5,CLUSTER_10
colors,"numpy.array(['red','orange','blue','yellow'])",CLUSTER_5,CLUSTER_10
d,"numpy.zeros([n_sample,n_sample])",CLUSTER_5,CLUSTER_10
d,"numpy.zeros([n_sample,n_sample])",CLUSTER_5,CLUSTER_10
node_depth,numpy.zeros(n_nodes),CLUSTER_5,CLUSTER_10
is_leaves,numpy.zeros(n_nodes),CLUSTER_5,CLUSTER_10
prob,"numpy.zeros([n_sample,n_sample])",CLUSTER_5,CLUSTER_10
df1,"pandas.read_csv(line1+""/전처리된거+서울경기.csv"",engine='python')",CLUSTER_9,CLUSTER_11
f_list1,os.listdir(line2),CLUSTER_9,CLUSTER_11
response,requests.get(URL),CLUSTER_9,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,13)",CLUSTER_9,CLUSTER_11
labels,"numpy.array([1,2,3,0,2,1])",CLUSTER_1,CLUSTER_9
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
rf_df,"pandas.DataFrame({'accuracy':cross_val_score(random_forest_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
dt_df,"pandas.DataFrame({'accuracy':cross_val_score(decision_tree_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
iris_data,pandas.read_csv('iris-data.csv'),CLUSTER_7,CLUSTER_5
iris_data,"pandas.read_csv('iris-data.csv',na_values=['NA'])",CLUSTER_7,CLUSTER_5
iris_data_clean,pandas.read_csv('iris-data-clean.csv'),CLUSTER_7,CLUSTER_5
iris_data_clean,pandas.read_csv('iris-data-clean.csv'),CLUSTER_7,CLUSTER_5
iris_data_clean,pandas.read_csv('iris-data-clean.csv'),CLUSTER_7,CLUSTER_5
testing_classes),"sklearn.model_selection.train_test_split(all_inputs,all_labels,test_size=0.25,random_state=1)",CLUSTER_7,CLUSTER_5
testing_classes),"sklearn.model_selection.train_test_split(all_inputs,all_labels,test_size=0.25)",CLUSTER_7,CLUSTER_5
testing_classes),"sklearn.model_selection.train_test_split(all_inputs,all_labels,test_size=0.25)",CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(max_depth=1),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
decision_tree_classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
mask,numpy.zeros(len(labels),CLUSTER_7,CLUSTER_5
cross_validation,sklearn.model_selection.StratifiedKFold(n_splits=10),CLUSTER_7,CLUSTER_5
cross_validation,sklearn.model_selection.StratifiedKFold(n_splits=10),CLUSTER_7,CLUSTER_5
cross_validation,sklearn.model_selection.StratifiedKFold(n_splits=10),CLUSTER_7,CLUSTER_5
cv_scores,"sklearn.model_selection.cross_val_score(decision_tree_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
cv_scores,"sklearn.model_selection.cross_val_score(decision_tree_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
dt_scores,"sklearn.model_selection.cross_val_score(decision_tree_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
rf_classifier_scores,"sklearn.model_selection.cross_val_score(random_forest_classifier,all_inputs,all_labels,cv=10)",CLUSTER_7,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(decision_tree_classifier,
param_grid=parameter_grid,
cv=cross_validation)",CLUSTER_7,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(decision_tree_classifier,
param_grid=parameter_grid,
cv=cross_validation)",CLUSTER_7,CLUSTER_5
grid_search,"sklearn.model_selection.GridSearchCV(random_forest_classifier,
param_grid=parameter_grid,
cv=cross_validation)",CLUSTER_7,CLUSTER_5
out_file,"sklearn.tree.export_graphviz(decision_tree_classifier,out_file=out_file)",CLUSTER_7,CLUSTER_5
random_forest_classifier,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
random_forest_classifier,"sklearn.ensemble.RandomForestClassifier(criterion='gini',max_features=3,n_estimators=50)",CLUSTER_7,CLUSTER_5
"count,bin_edges",numpy.histogram(df_can['2013']),CLUSTER_1,CLUSTER_3
"count,bin_edges",numpy.histogram(df_can['2013']),CLUSTER_1,CLUSTER_3
"count,bin_edges","numpy.histogram(df_t,15)",CLUSTER_1,CLUSTER_3
"count,bin_edges","numpy.histogram(df_t,15)",CLUSTER_1,CLUSTER_3
"count,binedges","numpy.histogram(df_cof,15)",CLUSTER_1,CLUSTER_3
df_can,"pandas.read_excel('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx',
sheet_name='CanadabyCitizenship',
skiprows=range(20)",CLUSTER_1,CLUSTER_3
mergedDf,pandas.DataFrame(),CLUSTER_4,CLUSTER_0
bonsai,pandas.read_csv(path),CLUSTER_4,CLUSTER_0
exl,pandas.read_fwf(path),CLUSTER_4,CLUSTER_0
cleanData,numpy.array(example[:-1]forexampleintrainingData),CLUSTER_4,CLUSTER_0
cleanData,numpy.array(example[:-1]forexampleintestData),CLUSTER_4,CLUSTER_0
dictionary[key],numpy.array(dictionary[key]),CLUSTER_4,CLUSTER_0
trainEndIndex,math.floor(len(labelledStrides[exercise]),CLUSTER_4,CLUSTER_0
model,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=5,weights='distance',metric=DTWDistance)",CLUSTER_4,CLUSTER_0
report,"sklearn.metrics.classification_report(testClasses,results,output_dict=True)",CLUSTER_4,CLUSTER_0
htt_wt,"pandas.DataFrame(X,columns=ht_wt.columns)",CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame(columns=['Publishers','total-heroes','total-villans','total-neutral','total-unknown'])",CLUSTER_5,CLUSTER_1
heroes,"pandas.concat([heroes_without_htwt,htt_wt],axis=1)",CLUSTER_5,CLUSTER_1
heroes,pandas.read_csv('heroes_information.csv'),CLUSTER_5,CLUSTER_1
powers,pandas.read_csv('super_hero_powers.csv'),CLUSTER_5,CLUSTER_1
imputer,sklearn.impute.SimpleImputer(strategy='median'),CLUSTER_5,CLUSTER_1
groups,"pandas.DataFrame(columns=['size','sum','mean','std'])",CLUSTER_8,CLUSTER_3
Top15['bins'],"pandas.cut(Top15['%Renewable'],5)",CLUSTER_8,CLUSTER_3
df,"pandas.merge(pandas.merge(energy,GDP,on='Country')",CLUSTER_8,CLUSTER_3
df_all,"pandas.merge(pandas.merge(energy,GDP,on='Country')",CLUSTER_8,CLUSTER_3
df_not_all,"pandas.merge(pandas.merge(energy,GDP,on='Country')",CLUSTER_8,CLUSTER_3
GDP,"pandas.read_csv('world_bank.csv',skiprows=4)",CLUSTER_8,CLUSTER_3
energy,pandas.read_excel('EnergyIndicators.xls'),CLUSTER_8,CLUSTER_3
ScimEn,pandas.read_excel('scimagojr-3.xlsx'),CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""./data/crime.csv"",encoding=""ISO-8859-1"")",CLUSTER_1,CLUSTER_3
"df[""OCCURRED_ON_DATE""]","pandas.to_datetime(df.OCCURRED_ON_DATE,infer_datetime_format=True)",CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
plot,matplotlib.pyplot.gcf(),CLUSTER_1,CLUSTER_3
sequence_1,"numpy.arange(start=2,stop=10,step=2)",CLUSTER_3,CLUSTER_6
sequence_1,"numpy.arange(2,10,2)",CLUSTER_3,CLUSTER_6
a,numpy.arange(5),CLUSTER_3,CLUSTER_6
b,"numpy.arange(0,50,10)",CLUSTER_3,CLUSTER_6
array1,"numpy.arange(0,10,2)",CLUSTER_3,CLUSTER_6
array1,"numpy.array([1.,2.,3.])",CLUSTER_3,CLUSTER_6
matrix1,"numpy.array(
[[1.,2.,3.],
[4.,5.,6.],
[7.,8.,9.]]
)",CLUSTER_3,CLUSTER_6
array_tuple,"numpy.array((1,2,3)",CLUSTER_3,CLUSTER_6
matrix_mixed,"numpy.array(
[(1,2,3)",CLUSTER_3,CLUSTER_6
matrix1_32,"numpy.array(
[[1.,2.,3.],
[4.,5.,6.],
[7.,8.,9.]],
dtype=np.float32
)",CLUSTER_3,CLUSTER_6
array_complex,"numpy.array([[2.+3.j,1.]],dtype=np.complex)",CLUSTER_3,CLUSTER_6
matrix_complex,"numpy.array(
[[2.+1.j,1.],
[0.,1.j]],
dtype=np.complex
)",CLUSTER_3,CLUSTER_6
A,"numpy.array(
[[1.,3.],
[2.,4.]]
)",CLUSTER_3,CLUSTER_6
B,"numpy.array(
[[10.,0.],
[10.,20.]]
)",CLUSTER_3,CLUSTER_6
mat,"numpy.array([[2.,1.],[1,2.]])",CLUSTER_3,CLUSTER_6
vec,"numpy.array([1.,0.])",CLUSTER_3,CLUSTER_6
vec,"numpy.array([1/3,1/2])",CLUSTER_3,CLUSTER_6
array1,"numpy.array([10.,10.])",CLUSTER_3,CLUSTER_6
array2,"numpy.array([15,30])",CLUSTER_3,CLUSTER_6
an_array,numpy.array([]),CLUSTER_3,CLUSTER_6
array_zeros,numpy.zeros(3),CLUSTER_3,CLUSTER_6
matrix_zeros,numpy.zeros(shape),CLUSTER_3,CLUSTER_6
array3,numpy.zeros(n),CLUSTER_3,CLUSTER_6
"matrix3,matrix3_loop",numpy.zeros(shape),CLUSTER_3,CLUSTER_6
array_ones,numpy.ones(3),CLUSTER_3,CLUSTER_6
matrix_ones,numpy.ones(shape),CLUSTER_3,CLUSTER_6
a,"numpy.ones(3,dtype=np.int32)",CLUSTER_3,CLUSTER_6
b,numpy.ones(n),CLUSTER_3,CLUSTER_6
sequence_2,"numpy.linspace(start=2,stop=8,num=4)",CLUSTER_3,CLUSTER_6
sequence_2,"numpy.linspace(2,8,4)",CLUSTER_3,CLUSTER_6
sequence_3,"numpy.linspace(0,100,200)",CLUSTER_3,CLUSTER_6
b,"numpy.linspace(0,5,3)",CLUSTER_3,CLUSTER_6
array1,"numpy.linspace(5,20,10)",CLUSTER_3,CLUSTER_6
array2,"numpy.linspace(0,5,10)",CLUSTER_3,CLUSTER_6
an_array,"numpy.append(an_array,i)",CLUSTER_3,CLUSTER_6
x,numpy.loadtxt('u_out.dat'),CLUSTER_3,CLUSTER_6
"x,y",numpy.loadtxt('uv_out.dat'),CLUSTER_3,CLUSTER_6
"x,y","numpy.loadtxt('uv_out_2.dat',unpack=True)",CLUSTER_3,CLUSTER_6
"x,y","numpy.loadtxt('A_out.dat',usecols=(0,1)",CLUSTER_3,CLUSTER_6
M,numpy.loadtxt('A_out.dat'),CLUSTER_3,CLUSTER_6
"e_vals,e_vecs",numpy.linalg.eig(A),CLUSTER_3,CLUSTER_6
x,"numpy.linalg.solve(A,b)",CLUSTER_3,CLUSTER_6
fig,"matplotlib.pyplot.figure(figsize=(15,4)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,4)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(10,6)",CLUSTER_7,CLUSTER_5
"f,axes","matplotlib.pyplot.subplots(ncols=3,figsize=(15,6)",CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(15,4)",CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(x=""projectCount"",y=""projectCount"",hue=""turnover"",data=df,estimator=lambdax:len(x)",CLUSTER_7,CLUSTER_5
ax,seaborn.kdeplot(df.loc[(df['turnover']==0),CLUSTER_7,CLUSTER_5
ax,seaborn.kdeplot(df.loc[(df['turnover']==1),CLUSTER_7,CLUSTER_5
ax,seaborn.kdeplot(df.loc[(df['turnover']==0),CLUSTER_7,CLUSTER_5
ax,seaborn.kdeplot(df.loc[(df['turnover']==1),CLUSTER_7,CLUSTER_5
kmeans,"sklearn.cluster.KMeans(n_clusters=3,random_state=2)",CLUSTER_7,CLUSTER_5
X,"numpy.arange(-16,16)",CLUSTER_5,CLUSTER_5
X_test,"numpy.zeros(shape=(n_test_games,1)",CLUSTER_5,CLUSTER_5
clipped_preds,"numpy.clip(preds,0.05,0.95)",CLUSTER_5,CLUSTER_5
df_wins,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
df_losses,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
df_for_predictions,"pandas.concat((df_wins,df_losses)",CLUSTER_5,CLUSTER_5
df_dummy,"pandas.merge(left=df_tour,right=df_winseeds,how='left',on=['Season','Wteam'])",CLUSTER_5,CLUSTER_5
df_concat,"pandas.merge(left=df_dummy,right=df_lossseeds,on=['Season','Lteam'])",CLUSTER_5,CLUSTER_5
df_seeds,pandas.read_csv(data_dir+'TourneySeeds.csv'),CLUSTER_5,CLUSTER_5
df_tour,pandas.read_csv(data_dir+'TourneyCompactResults.csv'),CLUSTER_5,CLUSTER_5
df_sample_sub,pandas.read_csv(data_dir+'sample_submission.csv'),CLUSTER_5,CLUSTER_5
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
clf,"sklearn.model_selection.GridSearchCV(logreg,params,scoring='neg_log_loss',refit=True)",CLUSTER_5,CLUSTER_5
beta,"numpy.array([1,0.1,10])",CLUSTER_8,CLUSTER_3
y,"numpy.dot(x,beta)",CLUSTER_8,CLUSTER_3
y_true,"numpy.dot(x,beta)",CLUSTER_8,CLUSTER_3
x,"numpy.linspace(0,10,100)",CLUSTER_8,CLUSTER_3
x,"numpy.linspace(0,20,nsample)",CLUSTER_8,CLUSTER_3
x,"numpy.column_stack((x,x**2)",CLUSTER_8,CLUSTER_3
x,"numpy.column_stack((x,np.sin(x)",CLUSTER_8,CLUSTER_3
data,pandas.DataFrame(data1),CLUSTER_7,CLUSTER_5
data1,"pandas.read_csv(r""C:\Users\rishy\Desktop\rr\lgdata.csv"")",CLUSTER_7,CLUSTER_5
y,numpy.asarray(a),CLUSTER_7,CLUSTER_5
reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_5
weather_data,pandas.DataFrame(weather_dict),CLUSTER_9,CLUSTER_2
response,"requests.get(f""{url}&q={city}"")",CLUSTER_9,CLUSTER_2
"trn_y,val_y",numpy.array(trn_y),CLUSTER_6,CLUSTER_9
top_3,numpy.array(labels),CLUSTER_6,CLUSTER_9
test_y,numpy.zeros(len(test_x),CLUSTER_6,CLUSTER_9
data,"numpy.pad(data,((0,self.n_segments-data.shape[0])",CLUSTER_6,CLUSTER_9
train,pandas.read_csv(PATH/'train.csv'),CLUSTER_6,CLUSTER_9
test,pandas.read_csv(PATH/'sample_submission.csv'),CLUSTER_6,CLUSTER_9
"X,y","sklearn.datasets.make_classification(n_samples=10000,
n_features=10,
n_classes=2,
n_informative=3,
random_state=3)",CLUSTER_5,CLUSTER_10
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
"false_positive_rate,true_positive_rate,threshold","sklearn.metrics.roc_curve(y_test,y_score)",CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.1,random_state=1)",CLUSTER_5,CLUSTER_10
box_scores,"numpy.multiply(box_confidence,box_class_probs)",CLUSTER_4,CLUSTER_0
r,requests.get(url),CLUSTER_10,CLUSTER_12
similarity_df,"pandas.DataFrame(similarities,columns=entity_names,index=entity_names)",CLUSTER_0,CLUSTER_1
similarity_df,"pandas.DataFrame(similarities,columns=entity_names,index=entity_names)",CLUSTER_0,CLUSTER_1
review_df,"pandas.read_csv('./dataset/labeledTrainData.tsv',header=0,sep=""\t"",quoting=3)",CLUSTER_0,CLUSTER_1
review_df,"pandas.read_csv('./dataset/labeledTrainData.tsv',header=0,sep=""\t"",quoting=3)",CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feature_df,class_df,\
test_size=0.3,\
random_state=156)",CLUSTER_0,CLUSTER_1
accuracy,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_0,CLUSTER_1
accuracy,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_0,CLUSTER_1
accuracy,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_0,CLUSTER_1
precision,"sklearn.metrics.precision_score(y_test,pred)",CLUSTER_0,CLUSTER_1
precision,"sklearn.metrics.precision_score(y_test,pred)",CLUSTER_0,CLUSTER_1
precision,"sklearn.metrics.precision_score(y_test,pred)",CLUSTER_0,CLUSTER_1
recall,"sklearn.metrics.recall_score(y_test,pred)",CLUSTER_0,CLUSTER_1
recall,"sklearn.metrics.recall_score(y_test,pred)",CLUSTER_0,CLUSTER_1
recall,"sklearn.metrics.recall_score(y_test,pred)",CLUSTER_0,CLUSTER_1
confusion,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_0,CLUSTER_1
confusion,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_0,CLUSTER_1
confusion,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_0,CLUSTER_1
f1,"sklearn.metrics.f1_score(y_test,pred)",CLUSTER_0,CLUSTER_1
f1,"sklearn.metrics.f1_score(y_test,pred)",CLUSTER_0,CLUSTER_1
f1,"sklearn.metrics.f1_score(y_test,pred)",CLUSTER_0,CLUSTER_1
roc_auc,"sklearn.metrics.roc_auc_score(y_test,pred)",CLUSTER_0,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([
('cnt_vect',CountVectorizer(stop_words='english',ngram_range=(1,2)",CLUSTER_0,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([
('tfidf_vect',TfidfVectorizer(stop_words='english',ngram_range=(1,2)",CLUSTER_0,CLUSTER_1
"plt.imshow(X_train[0],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_2,CLUSTER_10
"plt.imshow(X_train[1],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_2,CLUSTER_10
"plt.imshow(X_train[2],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_2,CLUSTER_10
"plt.imshow(X_train[3],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_2,CLUSTER_10
X_fit,"numpy.linspace(0,1,100)",CLUSTER_7,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
mcr,"pandas.DataFrame({'MisclassificationRate':Misclassification},Models)",CLUSTER_8,CLUSTER_3
roc_df,pandas.DataFrame(),CLUSTER_8,CLUSTER_3
roc_df,"pandas.concat([roc_df,tmp.ROCInfo])",CLUSTER_8,CLUSTER_3
site_index,numpy.arange(-0.5*(M-1),CLUSTER_1,CLUSTER_10
x,"numpy.arange(0,len(w)",CLUSTER_1,CLUSTER_10
H,"numpy.diag(np.ones(shape=(M-1,)",CLUSTER_1,CLUSTER_10
fftx,numpy.fft.fft(np.sort(w),CLUSTER_1,CLUSTER_10
fft_freq,numpy.fft.fftfreq(len(w),CLUSTER_1,CLUSTER_10
input_ids,"numpy.zeros(shape=(n_batch,max_sen_lenght)",CLUSTER_6,CLUSTER_6
input_ids,"numpy.zeros(shape=(n_batch,max_sen_lenght)",CLUSTER_6,CLUSTER_6
lm_labels,"numpy.full(shape=(n_batch,max_sen_lenght)",CLUSTER_6,CLUSTER_6
lm_labels,"numpy.full(shape=(n_batch,max_sen_lenght)",CLUSTER_6,CLUSTER_6
token2num,json.load(f),CLUSTER_6,CLUSTER_6
fig1,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
label,numpy.load(l_p),CLUSTER_1,CLUSTER_9
label1,numpy.load(l1_path),CLUSTER_1,CLUSTER_9
label2,numpy.load(l2_path),CLUSTER_1,CLUSTER_9
label3,numpy.load(l3_path),CLUSTER_1,CLUSTER_9
label4,numpy.load(l4_path),CLUSTER_1,CLUSTER_9
label5,numpy.load(l5_path),CLUSTER_1,CLUSTER_9
j,"pandas.DataFrame({'XX':['Primera','Segunda','Tercera'],'Totales':[primera,segunda,tercera]})",CLUSTER_1,CLUSTER_3
CVM,"pandas.DataFrame({'Vivos':Vivos,'Muertos':Muertos},index=index)",CLUSTER_1,CLUSTER_3
entrena,"pandas.read_csv(""train.csv"")",CLUSTER_1,CLUSTER_3
"line,","matplotlib.pyplot.plot(x,np.cos(x)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(0,10)",CLUSTER_1,CLUSTER_10
texts,numpy.array([article.raw_textforarticleinp.data_source.articles]),CLUSTER_5,CLUSTER_10
labels,numpy.array([article.labelforarticleinp.data_source.articles]),CLUSTER_5,CLUSTER_10
texts_test,numpy.array([article.raw_textforarticleintest_data_source.articles]),CLUSTER_5,CLUSTER_10
labels_test,numpy.array([article.labelforarticleintest_data_source.articles]),CLUSTER_5,CLUSTER_10
train_acc,"sklearn.metrics.accuracy_score(y_train,model.predict(X_train)",CLUSTER_5,CLUSTER_10
test_acc,"sklearn.metrics.accuracy_score(y_test,labels_prediction)",CLUSTER_5,CLUSTER_10
test_acc,"sklearn.metrics.accuracy_score(y_test,fitted_model.predict(X_test)",CLUSTER_5,CLUSTER_10
train_loss,"sklearn.metrics.log_loss(y_train,model.predict_proba(X_train)",CLUSTER_5,CLUSTER_10
test_loss,"sklearn.metrics.log_loss(y_test,labels_probs)",CLUSTER_5,CLUSTER_10
model,"sklearn.svm.SVC(kernel=kernel,
C=c,
random_state=42,
decision_function_shape='ovr',

class_weight=class_weight,
probability=True,
gamma=gamma)",CLUSTER_5,CLUSTER_10
SVC_opt,"sklearn.svm.SVC(kernel=best_param['kernel'],
C=best_param['C'],
random_state=42,
decision_function_shape='ovr',

class_weight=best_param['class_weight'],
probability=True,
gamma=best_param['gamma'])",CLUSTER_5,CLUSTER_10
start,time.time(),CLUSTER_5,CLUSTER_10
end,time.time(),CLUSTER_5,CLUSTER_10
pdf,"pandas.read_sql(selectQuery,pconn)",CLUSTER_8,CLUSTER_4
missing_data,pandas.DataFrame({'MissingRatio':all_data_na}),CLUSTER_5,CLUSTER_1
missing_data,pandas.DataFrame({'MissingRatio':all_data_na}),CLUSTER_5,CLUSTER_1
temp,"pandas.crosstab(date1['customer_id'],date1['购买了商品+'])",CLUSTER_5,CLUSTER_1
temp,"pandas.crosstab(date1['customer_id'],date1['购买了商品+'])",CLUSTER_5,CLUSTER_1
temp,"pandas.crosstab(date1['customer_id'],date1['购买了商品+'])",CLUSTER_5,CLUSTER_1
all_data,"pandas.merge(all_data,goods_feature[['goods_id','Goods_clustering_kind']],on='goods_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(customer_id,temp,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,temp,on=['customer_id'],how='left')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,temp,on=['customer_id'],how='left')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_buy_goods_num,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_total_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_real_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_happy_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_number,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_son_real_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,customer_son_happy_pay,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,last_time,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,q,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,Location,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,Longtitude,on='customer_id')",CLUSTER_5,CLUSTER_1
output,"pandas.merge(output,Latitude,on='customer_id')",CLUSTER_5,CLUSTER_1
all_customer,"pandas.merge(all_customer,submit_df,on=['customer_id'],how='left',copy=False)",CLUSTER_5,CLUSTER_1
all_data,"pandas.read_csv('D:/new_date.csv',low_memory=False)",CLUSTER_5,CLUSTER_1
goods_feature,pandas.read_csv('goods_feature.csv'),CLUSTER_5,CLUSTER_1
all_data['order_pay_time'],pandas.to_datetime(all_data['order_pay_time']),CLUSTER_5,CLUSTER_1
output['order_pay_date_jiange'],pandas.to_datetime('2013-12-31'),CLUSTER_5,CLUSTER_1
y_true,numpy.array(y_true),CLUSTER_5,CLUSTER_1
y_pred,numpy.array(y_pred),CLUSTER_5,CLUSTER_1
y_true,numpy.array(y_true),CLUSTER_5,CLUSTER_1
y_pred,numpy.array(y_pred),CLUSTER_5,CLUSTER_1
p,"numpy.clip(y_pred,eps,1-eps)",CLUSTER_5,CLUSTER_1
p,"numpy.clip(y_pred,eps,1-eps)",CLUSTER_5,CLUSTER_1
p,"numpy.clip(y_pred,eps,1-eps)",CLUSTER_5,CLUSTER_1
loss,numpy.sum(-y_true*np.log(p),CLUSTER_5,CLUSTER_1
loss,numpy.sum(-labels*np.log(p),CLUSTER_5,CLUSTER_1
loss,numpy.sum(-y_true*np.log(p),CLUSTER_5,CLUSTER_1
label,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=42,stratify=y)",CLUSTER_5,CLUSTER_1
xs,numpy.array(xs),CLUSTER_1,CLUSTER_10
ys,numpy.array(ys),CLUSTER_1,CLUSTER_10
yerr,numpy.array(yerr),CLUSTER_1,CLUSTER_10
wine_data,sklearn.datasets.load_wine(),CLUSTER_5,CLUSTER_1
wine_data,sklearn.datasets.load_wine(),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feat_data,
labels,
test_size=0.3,
random_state=101)",CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feat_data,
labels,
test_size=0.3,
random_state=101)",CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
onehot_y_train,pandas.get_dummies(y_train),CLUSTER_5,CLUSTER_1
one_hot_y_test,pandas.get_dummies(y_test),CLUSTER_5,CLUSTER_1
raw_data,"pandas.read_csv(""./data.csv"")",CLUSTER_7,CLUSTER_3
g,seaborn.PairGrid(data=data0),CLUSTER_7,CLUSTER_3
g,seaborn.PairGrid(data=data1),CLUSTER_7,CLUSTER_3
g,seaborn.PairGrid(data=data2),CLUSTER_7,CLUSTER_3
arr,"numpy.array([0.0foriinrange(0,300)",CLUSTER_0,CLUSTER_1
df_non_red_features,pandas.DataFrame(features),CLUSTER_0,CLUSTER_1
df_fluency_features,pandas.DataFrame(fluency_features),CLUSTER_0,CLUSTER_1
df_new_non_red_features,"pandas.concat([df_non_red_features,pd.DataFrame(new_features)",CLUSTER_0,CLUSTER_1
df_new_fluency_features,"pandas.concat([df_fluency_features,pd.DataFrame(new_features)",CLUSTER_0,CLUSTER_1
train_data,"pandas.read_csv(""q4_train_set.csv"")",CLUSTER_0,CLUSTER_1
test_data,"pandas.read_csv(""q4_test_set.csv"")",CLUSTER_0,CLUSTER_1
r_coeff,"scipy.stats.pearsonr(pred,y)",CLUSTER_0,CLUSTER_1
mse,"sklearn.metrics.mean_squared_error(pred,y)",CLUSTER_0,CLUSTER_1
clf,sklearn.linear_model.LinearRegression(),CLUSTER_0,CLUSTER_1
vp_data,"pandas.DataFrame({'idx':data.index,x:data[x],y:data[y],'hue_class':0})",CLUSTER_7,CLUSTER_3
vp_data,"pandas.DataFrame({x:data_unharmonized[x],y:data_unharmonized[y],'Legend':'Unharmonized'})",CLUSTER_7,CLUSTER_3
fit_resid_df,"pandas.DataFrame({'Residual':resid,'Fitted_Value':fitted_y,'Site':ex_data['Site'],'DX':ex_data['DX']})",CLUSTER_7,CLUSTER_3
combat_es,"pandas.DataFrame(model_es,index=features)",CLUSTER_7,CLUSTER_3
unh_es,"pandas.DataFrame(model_unh_es,index=features)",CLUSTER_7,CLUSTER_3
lmm_es,"pandas.DataFrame(lm_model_es,index=features)",CLUSTER_7,CLUSTER_3
models,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
model_params,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
models_unh,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
model_unh_params,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
lm_models,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
lm_model_params,pandas.Series(dtype='object'),CLUSTER_7,CLUSTER_3
data,"pandas.read_csv(""../../input/data.csv"",index_col=0)",CLUSTER_7,CLUSTER_3
harmonized_features,"pandas.read_csv(""harmonized_masked.csv"",index_col=0)",CLUSTER_7,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(ncols=2,nrows=2,figsize=(13,4)",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(fitted_y,resid,hue=hue_col,data=fit_resid_df)",CLUSTER_7,CLUSTER_3
ax_vp,"seaborn.violinplot(y=y,x=x,data=vp_data,hue='hue_class',split=True,scale=scale)",CLUSTER_7,CLUSTER_3
ax_h_uh,"seaborn.violinplot(y=y,x=x,data=vp_data,hue='Legend',split=True,scale=scale)",CLUSTER_7,CLUSTER_3
se,math.sqrt(((n1+n2-1),CLUSTER_7,CLUSTER_3
hw_percents,numpy.array(hw_percents),CLUSTER_3,CLUSTER_6
lab_percents,numpy.array(lab_percents),CLUSTER_3,CLUSTER_6
lab_total,numpy.ones(10),CLUSTER_3,CLUSTER_6
ratings,pandas.DataFrame(df.groupby('title'),CLUSTER_7,CLUSTER_8
ratings['Noofraters'],pandas.DataFrame(df.groupby('title'),CLUSTER_7,CLUSTER_8
corr_starwars,"pandas.DataFrame(similar_to_starwars,columns=['CorrelationFactor'])",CLUSTER_7,CLUSTER_8
corr_movie,"pandas.DataFrame(similar_to_movie,columns=['Correlation'])",CLUSTER_7,CLUSTER_8
df,"pandas.merge(df,movie_titles,on='item_id')",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('ml-100k/u.data',sep='\t',names=col_names)",CLUSTER_7,CLUSTER_8
movie_titles,"pandas.read_csv('ml-100k/u.item',sep=""\|"",header=None,engine='python')",CLUSTER_7,CLUSTER_8
admits,pandas.read_csv('admission_data.csv'),CLUSTER_8,CLUSTER_4
prod_long,"pandas.read_csv(""/Users/johannesmauritzen/research/solar_prod/prod_long.csv"")",CLUSTER_7,CLUSTER_3
prod_wide,"pandas.read_csv(""/Users/johannesmauritzen/research/solar_prod/prod_wide.csv"")",CLUSTER_7,CLUSTER_3
"prod_long[""prod_end_date""]","pandas.to_datetime(prod_long[""prod_end_date""])",CLUSTER_7,CLUSTER_3
"prod_wide[""prod_end_date""]","pandas.to_datetime(prod_wide[""prod_end_date""])",CLUSTER_7,CLUSTER_3
"prod_wide[""complete_date""]","pandas.to_datetime(prod_wide[""complete_date""])",CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_3
self.indexes,numpy.arange(len(self.files),CLUSTER_4,CLUSTER_0
x_flat,numpy.array([vec.flatten(),CLUSTER_4,CLUSTER_0
vecs,numpy.array([get_vec(i),CLUSTER_4,CLUSTER_0
X,"numpy.empty((self.batch_size,*self.dim,self.n_channels)",CLUSTER_4,CLUSTER_0
vec,"numpy.reshape(pred,512)",CLUSTER_4,CLUSTER_0
"sample_x,sample_y",numpy.squeeze(sample_x),CLUSTER_4,CLUSTER_0
pred0,numpy.squeeze(pred[ind]),CLUSTER_4,CLUSTER_0
"embedded_x,embedded_y","numpy.split(embedded_samp,2,axis=1)",CLUSTER_4,CLUSTER_0
"embedded_x,embedded_y,embedded_z","numpy.split(embedded_flat_samp,3,axis=1)",CLUSTER_4,CLUSTER_0
x_train,"numpy.expand_dims(x_train,axis=3)",CLUSTER_4,CLUSTER_0
x_test,"numpy.expand_dims(x_test,axis=3)",CLUSTER_4,CLUSTER_0
"X[i,]",numpy.expand_dims(np.load(file),CLUSTER_4,CLUSTER_0
vec/,numpy.linalg.norm(vec),CLUSTER_4,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=2,init='random',perplexity=400,n_jobs=-1,verbose=1)",CLUSTER_4,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=3,init='random',perplexity=400,n_jobs=-1,verbose=1)",CLUSTER_4,CLUSTER_0
text,"pandas.DataFrame(df[""texts""])",CLUSTER_7,CLUSTER_5
y,pandas.DataFrame(df[0]),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""C:/Users/delll/Desktop/train.csv"",header=None)",CLUSTER_7,CLUSTER_5
df_new,"sklearn.feature_selection.SelectKBest(chi2,k=2)",CLUSTER_7,CLUSTER_5
shuffle,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=9,random_state=6)",CLUSTER_7,CLUSTER_5
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_5
model7,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_5
f1_DTree,"sklearn.metrics.f1_score(pre_DTree,y_test,average=""weighted"")",CLUSTER_7,CLUSTER_5
f1_RandT,"sklearn.metrics.f1_score(pre_RandT,y_test,average=""weighted"")",CLUSTER_7,CLUSTER_5
f1_Voti,"sklearn.metrics.f1_score(pre_Voti,y_test,average=""weighted"")",CLUSTER_7,CLUSTER_5
model1,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_5
svc1,"sklearn.svm.SVC(kernel=""poly"")",CLUSTER_7,CLUSTER_5
model6,"sklearn.svm.SVC(kernel=""rbf"")",CLUSTER_7,CLUSTER_5
DTree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
RandT,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,n_jobs=2,random_state=7)",CLUSTER_7,CLUSTER_5
Voti,sklearn.ensemble.VotingClassifier(estimater),CLUSTER_7,CLUSTER_5
model4,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_5
model5,sklearn.cluster.KMeans(),CLUSTER_7,CLUSTER_5
model8,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
%timegss,"pandas.read_hdf('../homeworks/gss.hdf5','gss')",CLUSTER_7,CLUSTER_3
df_events,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
df_query,"pandas.read_sql_query(sql_query,con)",CLUSTER_8,CLUSTER_4
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_10
"X_train_price,X_test_price,y_train_price,y_test_price","sklearn.model_selection.train_test_split(
X_price,y_price,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_10
"X_train_30,X_test_30,y_train_30,y_test_30","sklearn.model_selection.train_test_split(X_30,y_30,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_10
"X_train_90,X_test_90,y_train_90,y_test_90","sklearn.model_selection.train_test_split(X_90,y_90,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_10
"X_train_price,X_test_price,y_train_price,y_test_price","sklearn.model_selection.train_test_split(
X_price,y_price,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_10
time_start,datetime.datetime.utcnow(),CLUSTER_10,CLUSTER_12
time_end,datetime.datetime.utcnow(),CLUSTER_10,CLUSTER_12
coefs,"pandas.Series(index=words,data=weights)",CLUSTER_5,CLUSTER_5
model,"sklearn.pipeline.Pipeline(
[
('vect',TfidfVectorizer()",CLUSTER_5,CLUSTER_5
df_corpus,"pandas.read_pickle(""df_corpus.pkl"")",CLUSTER_0,CLUSTER_5
data_dtm,"pandas.read_pickle(""df_DTM.pkl"")",CLUSTER_0,CLUSTER_5
"unique,counts","numpy.unique(predicted,return_counts=True)",CLUSTER_0,CLUSTER_5
"unique,counts","numpy.unique(predicted,return_counts=True)",CLUSTER_0,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data_dtm,df_corpus['categoria'],test_size=0.4,random_state=1)",CLUSTER_0,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(text_tf,df_corpus['categoria'],test_size=0.4,random_state=123)",CLUSTER_0,CLUSTER_5
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_0,CLUSTER_5
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_0,CLUSTER_5
x,"numpy.expand_dims(x,axis=0)",CLUSTER_12,CLUSTER_9
obj,"pandas.Series(['c','a','d','a','a','b','b','c','c','a','b'])",CLUSTER_8,CLUSTER_2
resp,requests.get(url),CLUSTER_8,CLUSTER_2
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df_m,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df_f,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df_m,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df_f,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
monthly_df,"pandas.DataFrame(
dict((column_name+""_""+period,survey_scenario.simulation.calculate_add(column_name,period)",CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
undecompsed_revdisp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
df1,pandas.DataFrame({'revdisp_mensuel_annuel':revdisp_oy.sum(1),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
temp,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
revdisp_oy,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
to_change,pandas.Series(marginal_rate),CLUSTER_1,CLUSTER_3
u_ir_m_rsa_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel_rsa_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_c_ir,"pandas.Series(survey_scenario.simulation.calculate_add('utility_compensated_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_ir_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_ir_a,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_annuel','2009')",CLUSTER_1,CLUSTER_3
weight_1,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_1,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
u_es_c_ir,"pandas.Series(survey_scenario.simulation.calculate_add('utility_es_compensated_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_es_ir_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_es_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_es_ir_a,"pandas.Series(survey_scenario.simulation.calculate_add('utility_es_ir_annuel','2009')",CLUSTER_1,CLUSTER_3
weight_1,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_1,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
weight_2,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_1,CLUSTER_3
decote_monthly,"pandas.Series(survey_scenario.simulation.calculate_add(""decote_mensuel_times_12"")",CLUSTER_1,CLUSTER_3
decote_annual,"pandas.Series(survey_scenario.simulation.calculate_add(""decote"")",CLUSTER_1,CLUSTER_3
poids,pandas.Series(weight_foyers),CLUSTER_1,CLUSTER_3
poids,pandas.Series(weight_foyers),CLUSTER_1,CLUSTER_3
lambda_compensation_menage,"pandas.Series(switch_entity('lambda_compensation','menage')",CLUSTER_1,CLUSTER_3
poids_menage,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
poids_menage,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
poids_menage,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
u_ir_m_rsa_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel_rsa_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_c_ir,"pandas.Series(survey_scenario.simulation.calculate_add('utility_compensated_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_ir_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel','2009')",CLUSTER_1,CLUSTER_3
u_ir_a,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_annuel','2009')",CLUSTER_1,CLUSTER_3
weight_menages,pandas.Series(weight_menages),CLUSTER_1,CLUSTER_3
hist1,"((u_ir_m-u_ir_a))[((u_ir_m-u_ir_a))!=0].hist(bins=7000,figsize=(25,12),weights=pandas.Series(weight_menages)",CLUSTER_1,CLUSTER_3
hist2,"((u_c_ir-u_ir_a))[((u_c_ir-u_ir_a))!=0].hist(bins=7000,figsize=(25,12),weights=pandas.Series(weight_menages)",CLUSTER_1,CLUSTER_3
outliers,pandas.Series(np.abs(((u_ir_m-u_ir_a),CLUSTER_1,CLUSTER_3
is_decote_different,pandas.Series(np.abs(decote-decote_mensuel),CLUSTER_1,CLUSTER_3
irpp_mensuel,"pandas.Series(survey_scenario.simulation.calculate(""irpp_mensuel"",'2009-{}'.format(month)",CLUSTER_1,CLUSTER_3
to_change,pandas.Series(marginal_rate),CLUSTER_1,CLUSTER_3
to_change,"pandas.Series(rates.marginal_rate(irpp_test_case,rbg_test_case)",CLUSTER_1,CLUSTER_3
monetary_gain_ir,pandas.Series(monetary_gain_ir),CLUSTER_1,CLUSTER_3
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
diff_in_income,"pandas.Series(
np.abs(survey_scenario.simulation.calculate(""revdisp_mensuel_annuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_money_gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_annuelle+,"pandas.Series(
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_annuelle+,"pandas.Series(
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_annuelle+,"pandas.Series(
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_ir_mensuel_rsa_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp,pandas.Series(gain_m),CLUSTER_1,CLUSTER_3
passage_a_la_retraite,pandas.Series(is_retired),CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['revdisp_mensuel_annuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('revdisp_mensuel_annuel',""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_1,CLUSTER_3
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""rev_trav_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""salaire_imposable"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""pen_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""psoc_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""ppe"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""impo_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""retraite_imposable"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,9)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,9)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,9)",CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_m[((df_m.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_m[((df_m.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_f[((df_f.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_f[((df_f.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_m[((df_m.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_m[((df_m.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_f[((df_f.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_f[((df_f.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_f[((df_f.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_f[((df_f.yearly_rbg_by_fs>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_m[((df_m.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_m[((df_m.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df[((df.yearly_income>0),CLUSTER_1,CLUSTER_3
"n,bins,patches",matplotlib.pyplot.hist(df_f[((df_f.yearly_income>0),CLUSTER_1,CLUSTER_3
"n2,bins2,patches2",matplotlib.pyplot.hist(df_f[((df_f.yearly_income>0),CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((1,1)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,2)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(15,5)",CLUSTER_1,CLUSTER_3
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_1,CLUSTER_3
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_1,CLUSTER_3
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(nb_subplots_lines,2,sharey=True,figsize=(20,15)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(15,5)",CLUSTER_1,CLUSTER_3
"fig,axe","matplotlib.pyplot.subplots(6,2,figsize=(20,20)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(nb_subplots_lines,2,sharey=True,figsize=(20,15)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(20,7)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,sharey=True,figsize=(20,7)",CLUSTER_1,CLUSTER_3
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_1,CLUSTER_3
ax2,matplotlib.pyplot.twinx(),CLUSTER_1,CLUSTER_3
ax2,matplotlib.pyplot.twinx(),CLUSTER_1,CLUSTER_3
ax2,matplotlib.pyplot.twinx(),CLUSTER_1,CLUSTER_3
ax2,matplotlib.pyplot.twinx(),CLUSTER_1,CLUSTER_3
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_1,CLUSTER_3
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_1,CLUSTER_3
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_1,CLUSTER_3
a,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_3
b,"numpy.array([True,True,False])",CLUSTER_1,CLUSTER_3
month_income,numpy.zeros(simulation.persons.count),CLUSTER_1,CLUSTER_3
month_income,numpy.zeros(simulation.persons.count),CLUSTER_1,CLUSTER_3
month_income,numpy.zeros(simulation.persons.count),CLUSTER_1,CLUSTER_3
month_rbg,numpy.zeros(59874),CLUSTER_1,CLUSTER_3
month_rbg,numpy.zeros(59874),CLUSTER_1,CLUSTER_3
below_collection_thrshld,"numpy.zeros(weight_foyers.shape[0],dtype=bool)",CLUSTER_1,CLUSTER_3
monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_money_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
mean_gain,numpy.zeros(1),CLUSTER_1,CLUSTER_3
mean_gain,numpy.zeros(1),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
u_monetary_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
mean_gain,numpy.zeros(1),CLUSTER_1,CLUSTER_3
mean_gain,numpy.zeros(1),CLUSTER_1,CLUSTER_3
monetary_gain_ir_rsa,numpy.zeros(weight_menages.shape[0]),CLUSTER_1,CLUSTER_3
c,numpy.zeros(1),CLUSTER_1,CLUSTER_3
is_retired,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_inactive,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_retired,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_inactive,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
is_retire_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_1,CLUSTER_3
target_array,numpy.empty(entity.count),CLUSTER_1,CLUSTER_3
target_array,numpy.empty(entity.count),CLUSTER_1,CLUSTER_3
target_array,numpy.empty(simulation.persons.count),CLUSTER_1,CLUSTER_3
target_array,numpy.empty(simulation.persons.count),CLUSTER_1,CLUSTER_3
target_array_by_role[role],"target_array=numpy.empty(entity.count,dtype='int64')",CLUSTER_1,CLUSTER_3
target_array_by_role[role],"target_array=numpy.empty(entity.count,dtype=array.dtype)",CLUSTER_1,CLUSTER_3
u_monetary_gain_ir+,"numpy.mean(
(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_monetary_gain+,"numpy.mean(
pd.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_monetary_gain_ir+,"numpy.mean(
(survey_scenario.simulation.calculate(""utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
u_monetary_gain+,"numpy.mean(
pd.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_1,CLUSTER_3
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_1,CLUSTER_3
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_1,CLUSTER_3
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_1,CLUSTER_3
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_1,CLUSTER_3
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_1,CLUSTER_3
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_1,CLUSTER_3
age,numpy.floor(agm/12),CLUSTER_1,CLUSTER_3
"count,division",numpy.histogram(df[(df.yearly_income>0),CLUSTER_1,CLUSTER_3
bins,"numpy.histogram(np.hstack((winners,loosers)",CLUSTER_1,CLUSTER_3
bins,"numpy.histogram(np.hstack((winners,loosers)",CLUSTER_1,CLUSTER_3
bins,"numpy.histogram(np.hstack((weight_1,weight_2)",CLUSTER_1,CLUSTER_3
bins,numpy.histogram(np.hstack(((u_ir_m-u_ir_a),CLUSTER_1,CLUSTER_3
bins,numpy.histogram(np.hstack(((u_es_ir_m-u_es_ir_a),CLUSTER_1,CLUSTER_3
bins,numpy.histogram(np.hstack(((u_ir_m-u_ir_a),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('grades.csv'),CLUSTER_1,CLUSTER_9
output,"matplotlib.pyplot.hist([chi_squared_df2,chi_squared_df5],bins=50,histtype='step',
label=['2degreesoffreedom','5degreesoffreedom'])",CLUSTER_1,CLUSTER_9
start_time,time.time(),CLUSTER_5,CLUSTER_1
start,time.time(),CLUSTER_5,CLUSTER_1
end,time.time(),CLUSTER_5,CLUSTER_1
start,time.time(),CLUSTER_5,CLUSTER_1
end,time.time(),CLUSTER_5,CLUSTER_1
time_taken_list,numpy.array(time_taken_list),CLUSTER_5,CLUSTER_1
vectors,numpy.asarray(vectors),CLUSTER_5,CLUSTER_1
labels,numpy.asarray(labels),CLUSTER_5,CLUSTER_1
vectors,numpy.asarray(vectors),CLUSTER_5,CLUSTER_1
time_mean,numpy.mean(time_taken_list),CLUSTER_5,CLUSTER_1
time_std,numpy.std(time_taken_list),CLUSTER_5,CLUSTER_1
train_times_table,pandas.DataFrame(train_time_values),CLUSTER_5,CLUSTER_1
tsne,"sklearn.manifold.TSNE(n_components=num_dimensions,random_state=0)",CLUSTER_5,CLUSTER_1
x,"numpy.arange(-1,200)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(-10,10,1000)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(0,1,100002)",CLUSTER_7,CLUSTER_8
values_A,numpy.hstack(([0]*(1055-28),CLUSTER_7,CLUSTER_8
values_B,numpy.hstack(([0]*(1057-45),CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
b,"numpy.bincount(a,minlength=n+1)",CLUSTER_7,CLUSTER_8
h,"matplotlib.pyplot.hist(y,bins=range(48)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(5,3.75)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_7,CLUSTER_8
deltas,pandas.Series(delta_distribution),CLUSTER_7,CLUSTER_8
deltas2,pandas.Series(delta_distribution2),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_R,pandas.Series(x_R),CLUSTER_7,CLUSTER_8
x_B,pandas.Series(x_B),CLUSTER_7,CLUSTER_8
x_null,pandas.Series(x_null),CLUSTER_7,CLUSTER_8
deltas,pandas.Series(delta_distribution),CLUSTER_7,CLUSTER_8
dist,"scipy.stats.beta(a,b)",CLUSTER_7,CLUSTER_8
dist,"scipy.stats.binom(n,b)",CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(1),CLUSTER_1,CLUSTER_3
"fig,ax1",matplotlib.pyplot.subplots(dpi=300),CLUSTER_1,CLUSTER_3
MAC270,"pandas.DataFrame(Student_list,columns=['Student_name','Age','Gender','City','Major','Test_score'])",CLUSTER_1,CLUSTER_3
X,numpy.array(train_image),CLUSTER_5,CLUSTER_5
y,"numpy.array(train.drop(['Id','Genre'],axis=1)",CLUSTER_5,CLUSTER_5
classes,numpy.array(train.columns[2:]),CLUSTER_5,CLUSTER_5
classes,numpy.array(train.columns[2:]),CLUSTER_5,CLUSTER_5
classes,numpy.array(train.columns[2:]),CLUSTER_5,CLUSTER_5
classes,numpy.array(train.columns[2:]),CLUSTER_5,CLUSTER_5
top_3,numpy.argsort(proba[0]),CLUSTER_5,CLUSTER_5
top_3,numpy.argsort(proba[0]),CLUSTER_5,CLUSTER_5
top_3,numpy.argsort(proba[0]),CLUSTER_5,CLUSTER_5
top_3,numpy.argsort(proba[0]),CLUSTER_5,CLUSTER_5
train,pandas.read_csv('./Multi_Label_dataset/train.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42,test_size=0.1)",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv('ex2data1.txt',sep="","",header=None)",CLUSTER_5,CLUSTER_1
X,"numpy.array(data.iloc[:,0:2])",CLUSTER_5,CLUSTER_1
y,"numpy.array(data.iloc[:,2:3])",CLUSTER_5,CLUSTER_1
y_Pred,"numpy.where(y_Pred<=0.654,0,1)",CLUSTER_5,CLUSTER_1
z,"numpy.dot(X,self.theta)",CLUSTER_5,CLUSTER_1
z,"numpy.dot(X,coeff)",CLUSTER_5,CLUSTER_1
self.theta,numpy.ones(X.shape[1]),CLUSTER_5,CLUSTER_1
"xTrain,xTest,yTrain,yTest","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_1
results,"sklearn.metrics.confusion_matrix(true_y,pred_y)",CLUSTER_5,CLUSTER_1
df,"pandas.read_csv(os.getenv(""PUIDATA"")",CLUSTER_8,CLUSTER_11
df['date'],pandas.to_datetime(df['starttime']),CLUSTER_8,CLUSTER_11
df_1['birthyear'],pandas.to_numeric(df_1['birthyear']),CLUSTER_8,CLUSTER_11
error_o,numpy.sqrt(counts_o),CLUSTER_8,CLUSTER_11
error_u,numpy.sqrt(counts_u),CLUSTER_8,CLUSTER_11
error_o,numpy.sqrt(counts_o),CLUSTER_8,CLUSTER_11
error_u,numpy.sqrt(counts_u),CLUSTER_8,CLUSTER_11
puidata,"os.getenv(""PUIDATA"")",CLUSTER_8,CLUSTER_11
puidata,"os.getenv(""PUIDATA"")",CLUSTER_8,CLUSTER_11
off_m,numpy.array([df.valuesfordfinoff_plays]),CLUSTER_7,CLUSTER_5
def_m,numpy.array([df.valuesfordfindef_plays]),CLUSTER_7,CLUSTER_5
rus_m,numpy.array([df.valuesfordfinrus_plays]),CLUSTER_7,CLUSTER_5
y_train,"numpy.array(list(map(pdf,y_train.clip(y_min,y_max)",CLUSTER_7,CLUSTER_5
y_test,"numpy.array(list(map(pdf,y_test)",CLUSTER_7,CLUSTER_5
off_def,"numpy.concatenate([off_def_rel_comp,off_def_ed],axis=3)",CLUSTER_7,CLUSTER_5
def_rus,"numpy.concatenate([def_rus_rel_comp,def_rus_ed],axis=3)",CLUSTER_7,CLUSTER_5
x,"numpy.concatenate(features,axis=3)",CLUSTER_7,CLUSTER_5
dir_rad,numpy.deg2rad(data.Dir),CLUSTER_7,CLUSTER_5
off_def_ed,"numpy.sqrt(np.square(off_def_rel_comp[:,:,:,:2])",CLUSTER_7,CLUSTER_5
def_rus_ed,"numpy.sqrt(np.square(def_rus_rel_comp[:,:,:,:2])",CLUSTER_7,CLUSTER_5
off_m,"numpy.expand_dims(off_m,axis=def_axis)",CLUSTER_7,CLUSTER_5
def_m,"numpy.expand_dims(def_m,axis=off_axis)",CLUSTER_7,CLUSTER_5
rus_m,"numpy.expand_dims(rus_m,off_axis)",CLUSTER_7,CLUSTER_5
rus_m,"numpy.expand_dims(rus_m,def_axis)",CLUSTER_7,CLUSTER_5
off_def_ed,"numpy.expand_dims(off_def_ed,3)",CLUSTER_7,CLUSTER_5
def_rus_ed,"numpy.expand_dims(def_rus_ed,3)",CLUSTER_7,CLUSTER_5
hist,pandas.DataFrame(history.history),CLUSTER_7,CLUSTER_5
raw_data,"pandas.read_csv(""../data/fe_data.csv"",index_col=[1])",CLUSTER_7,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(16,8)",CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y)",CLUSTER_7,CLUSTER_5
missing_data,"pandas.concat([total,percent],axis=1,keys=['Total','Percent'])",CLUSTER_7,CLUSTER_11
listings,"pandas.merge(listings,listings_details[target_columns],on='id',how='left')",CLUSTER_7,CLUSTER_11
listings,"pandas.read_csv(""Desktop/Asheville/listings.csv"",index_col=""id"")",CLUSTER_7,CLUSTER_11
listings_details,"pandas.read_csv(""Desktop/Asheville/listings_details.csv"",index_col=""id"",low_memory=False)",CLUSTER_7,CLUSTER_11
reviews,"pandas.read_csv(""Desktop/Asheville/reviews.csv"")",CLUSTER_7,CLUSTER_11
reviews_details,"pandas.read_csv(""Desktop/Asheville/reviews_details.csv"")",CLUSTER_7,CLUSTER_11
neighbourhoods,"pandas.read_csv(""Desktop/Asheville/neighbourhoods.csv"")",CLUSTER_7,CLUSTER_11
calendar,"pandas.read_csv(""Desktop/Asheville/calendar.csv"")",CLUSTER_7,CLUSTER_11
calendar_new['date'],pandas.to_datetime(calendar_new['date']),CLUSTER_7,CLUSTER_11
calendar['date'],pandas.to_datetime(calendar['date']),CLUSTER_7,CLUSTER_11
calendar['date'],pandas.to_datetime(calendar['date']),CLUSTER_7,CLUSTER_11
listings['host_response_rate'],pandas.to_numeric(listings['host_response_rate'].str.strip('%'),CLUSTER_7,CLUSTER_11
entries,os.listdir('Desktop/Asheville/'),CLUSTER_7,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,15)",CLUSTER_7,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_7,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_11
dfountput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','

forkey,valueindftest[4].items()",CLUSTER_7,CLUSTER_8
Guangzhou,"pandas.read_csv(""D:/Math546Timeseries/finalprojects/PM2.5DataofFiveChineseCitiesDataSet/GuangzhouPM20100101_20151231.csv"")",CLUSTER_7,CLUSTER_8
Guangzhou['Time'],pandas.to_datetime(Guangzhou['year'].map(str),CLUSTER_7,CLUSTER_8
by_hour.index,"pandas.to_datetime(by_hour.index,
format='%d-%m-%Y%H:%M:%S')",CLUSTER_7,CLUSTER_8
data_13,by_hour[(by_hour['Time']>=pandas.to_datetime('20140101030000'))&(by_hour['Time']<=pandas.to_datetime('20151231030000'),CLUSTER_7,CLUSTER_8
data,by_hour[(by_hour['Time']>=pandas.to_datetime('20140101030000'))&(by_hour['Time']<=pandas.to_datetime('20140201030000'),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(9,6)",CLUSTER_7,CLUSTER_8
orig,"matplotlib.pyplot.plot(timeseries,color='blue',label='Original')",CLUSTER_7,CLUSTER_8
mean,"matplotlib.pyplot.plot(rolmean,color='red',label='Rollingmean')",CLUSTER_7,CLUSTER_8
std,"matplotlib.pyplot.plot(rolstd,color='black',label='Rollingstd')",CLUSTER_7,CLUSTER_8
orig,"matplotlib.pyplot.plot(test,color='blue',label='Original')",CLUSTER_7,CLUSTER_8
pred,"matplotlib.pyplot.plot(predict_ARMA,color='red',label='Prediction')",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(20,5)",CLUSTER_7,CLUSTER_8
anc_imgs,"numpy.array(anc_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
pos_imgs,"numpy.array(pos_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
neg_imgs,"numpy.array(neg_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
anc_imgs,"numpy.array(anc_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
pos_imgs,"numpy.array(pos_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
neg_imgs,"numpy.array(neg_imgs,dtype=K.floatx()",CLUSTER_2,CLUSTER_0
tmp_imgs,"numpy.array(tmp_imgs,dtype=np.float32)",CLUSTER_2,CLUSTER_0
tmp_imgs,"numpy.array(tmp_imgs,dtype=np.float32)",CLUSTER_2,CLUSTER_0
tmp_imgs,"numpy.array(tmp_imgs,dtype=np.float32)",CLUSTER_2,CLUSTER_0
zeros,"numpy.zeros((batch_size,3,1)",CLUSTER_2,CLUSTER_0
zeros,"numpy.zeros((batch_size,3,1)",CLUSTER_2,CLUSTER_0
train_imgs,numpy.zeros(shape=(len(train_df),CLUSTER_2,CLUSTER_0
val_imgs,numpy.zeros(shape=(len(val_df),CLUSTER_2,CLUSTER_0
test_imgs,numpy.zeros(shape=(len(test_df),CLUSTER_2,CLUSTER_0
lr_reducer,ReduceLROnPlateau(factor=numpy.sqrt(0.1),CLUSTER_2,CLUSTER_0
train_df,pandas.read_csv('./data/triplet/train.csv'),CLUSTER_2,CLUSTER_0
val_df,pandas.read_csv('./data/triplet/validation.csv'),CLUSTER_2,CLUSTER_0
test_df,pandas.read_csv('./data/triplet/test.csv'),CLUSTER_2,CLUSTER_0
train_df,pandas.read_csv('./data/triplet/train.csv'),CLUSTER_2,CLUSTER_0
val_df,pandas.read_csv('./data/triplet/validation.csv'),CLUSTER_2,CLUSTER_0
test_df,pandas.read_csv('./data/triplet/test.csv'),CLUSTER_2,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,7)",CLUSTER_2,CLUSTER_0
data,"pandas.read_csv(""data.tsv"",sep=""\t"")",CLUSTER_5,CLUSTER_5
imputer,sklearn.impute.SimpleImputer(strategy='median'),CLUSTER_5,CLUSTER_5
labelencoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
"l,o",sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
n_inside,numpy.sum(circle(x_points),CLUSTER_3,CLUSTER_6
x_array,"numpy.linspace(0,1,100)",CLUSTER_3,CLUSTER_6
k_array,"numpy.linspace(0,20,100)",CLUSTER_3,CLUSTER_6
importances_rf,"pandas.Series(rf.feature_importances_,index=x.columns)",CLUSTER_7,CLUSTER_8
importances_rf_best,"pandas.Series(rf_best.feature_importances_,index=x.columns)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('spotify_dat.csv'),CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=200,min_samples_leaf=5,random_state=SEED,n_jobs=-1)",CLUSTER_7,CLUSTER_8
rf2,sklearn.ensemble.RandomForestRegressor(random_state=SEED),CLUSTER_7,CLUSTER_8
rf_best,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,min_samples_leaf=1,max_depth=4,
random_state=SEED,n_jobs=-1)",CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
gb,"sklearn.ensemble.GradientBoostingRegressor(max_depth=4,n_estimators=400,random_state=SEED)",CLUSTER_7,CLUSTER_8
dt,"sklearn.tree.DecisionTreeRegressor(max_depth=6,min_samples_leaf=5,random_state=3)",CLUSTER_7,CLUSTER_8
CV_rf,"sklearn.model_selection.GridSearchCV(estimator=rf2,param_grid=param_grid,cv=5,n_jobs=-1)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=SEED)",CLUSTER_7,CLUSTER_8
gdf_to_df,pandas.DataFrame(gdf.drop(columns='geometry'),CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame(gdf.drop(['geometry','OBJECTID'],axis=1)",CLUSTER_7,CLUSTER_5
f_imp,"pandas.DataFrame(data={'importance':m.feature_importances_,'features':X_train.columns})",CLUSTER_7,CLUSTER_5
df,pandas.get_dummies(df),CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(30,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(10,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(15,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(25,5)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(20,10)",CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
geojson,requests.get(url),CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,n_jobs=-2)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=5,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=10,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=25,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=25,max_features=0.5,oob_score=True)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=25,max_features=0.5,min_samples_split=0.1)",CLUSTER_7,CLUSTER_5
m,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,min_samples_leaf=25,max_features=0.5,min_samples_split=0.1,oob_score=True)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df.drop(['fatalCount','OBJECTID_1','crashSever','lons','meshblockI','areaUnitID','crashFinan','tlaID','lats','seriousInj','crashRPSH','crashLoc_1','minorInjur','northing','crashSHDes','cornerRoad','crashRPDis','crashDista','crashRPRS','tlaName','easting'],axis=1)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df_imp,y,test_size=0.33,random_state=42)",CLUSTER_7,CLUSTER_5
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=4,shuffle=True)",CLUSTER_5,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=4,shuffle=True)",CLUSTER_5,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=4,shuffle=True)",CLUSTER_5,CLUSTER_0
tick_marks,numpy.arange(len(classes),CLUSTER_5,CLUSTER_0
cm,numpy.zeros((len(experiments),CLUSTER_5,CLUSTER_0
train_results,"numpy.empty((train_samples,num_models)",CLUSTER_5,CLUSTER_0
val_results,"numpy.empty((val_samples,num_models)",CLUSTER_5,CLUSTER_0
train_results,"numpy.empty((train_samples,num_models)",CLUSTER_5,CLUSTER_0
val_results,"numpy.empty((test_samples,num_models)",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val.round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val[0].round()",CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_val,predict_val[0].round()",CLUSTER_5,CLUSTER_0
cm_fold,"sklearn.metrics.confusion_matrix(target_val,predict_val[0].round()",CLUSTER_5,CLUSTER_0
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=10),CLUSTER_5,CLUSTER_0
clf,sklearn.ensemble.AdaBoostClassifier(n_estimators=10),CLUSTER_5,CLUSTER_0
clf,sklearn.ensemble.GradientBoostingClassifier(n_estimators=10),CLUSTER_5,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_5,CLUSTER_0
svc,"sklearn.svm.LinearSVC(class_weight='balanced',verbose=1)",CLUSTER_5,CLUSTER_0
exp_df,pandas.DataFrame(experiments),CLUSTER_5,CLUSTER_0
results,"pandas.DataFrame(np.concatenate([val_results,target_val_ts.values.reshape(-1,1)",CLUSTER_5,CLUSTER_0
results,pandas.DataFrame(np.concatenate([loader.get_test_index(),CLUSTER_5,CLUSTER_0
results,pandas.DataFrame({'SK_ID_CURR':loader.get_test_index(),CLUSTER_5,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(class_weight='balanced',C=0.01)",CLUSTER_5,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(class_weight='balanced'),CLUSTER_5,CLUSTER_0
df_new,pandas.DataFrame(),CLUSTER_0,CLUSTER_0
df_train,"pandas.read_csv(train_path,encoding='utf-8')",CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv(test_path,encoding='utf-8')",CLUSTER_0,CLUSTER_0
data_train,pandas.read_csv(train_seg_path),CLUSTER_0,CLUSTER_0
data_test,pandas.read_csv(test_seg_path),CLUSTER_0,CLUSTER_0
data_train_merge,pandas.read_csv(train_seg_merge_path),CLUSTER_0,CLUSTER_0
data_test_merge,pandas.read_csv(test_seg_merge_path),CLUSTER_0,CLUSTER_0
encoder_embedding,"numpy.zeros((num_input_en,embed_size)",CLUSTER_0,CLUSTER_0
decoder_embedding,"numpy.zeros((num_input_de,embed_size)",CLUSTER_0,CLUSTER_0
attention_plot,"numpy.zeros((max_length_targ,max_length_inp)",CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_0,CLUSTER_0
w,"re.sub(r""([?.!,¿])",CLUSTER_0,CLUSTER_0
w,"re.sub(r'[""""]+',"""",w)",CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_0,CLUSTER_0
"input_tensor_train,input_tensor_val,target_tensor_train,target_tensor_val","sklearn.model_selection.train_test_split(tensor_input[:dataset_num],tensor_target[:dataset_num],test_size=0.2)",CLUSTER_0,CLUSTER_0
t1e,time.time(),CLUSTER_4,CLUSTER_7
t1,time.time(),CLUSTER_4,CLUSTER_7
t2,time.time(),CLUSTER_4,CLUSTER_7
t2e,time.time(),CLUSTER_4,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(6,6,sharex=True,sharey=True,figsize=(5,5)",CLUSTER_4,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(figsize=figsize,nrows=nrows,ncols=ncols,
sharey=True,sharex=True)",CLUSTER_4,CLUSTER_7
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_7
idx,numpy.arange(num_examples),CLUSTER_4,CLUSTER_7
self.label_mask,numpy.zeros_like(self.train_y),CLUSTER_4,CLUSTER_7
self.train_x,"numpy.rollaxis(self.train_x,3)",CLUSTER_4,CLUSTER_7
self.valid_x,"numpy.rollaxis(self.valid_x,3)",CLUSTER_4,CLUSTER_7
self.test_x,"numpy.rollaxis(self.test_x,3)",CLUSTER_4,CLUSTER_7
trainset,scipy.io.loadmat(data_dir+'train_32x32.mat'),CLUSTER_4,CLUSTER_7
testset,scipy.io.loadmat(data_dir+'test_32x32.mat'),CLUSTER_4,CLUSTER_7
df,"pandas.get_dummies(df,columns=['weather','shape'])",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(data_location,low_memory=False)",CLUSTER_7,CLUSTER_5
df['reportedTimestamp'],pandas.to_datetime(df['reportedTimestamp']),CLUSTER_7,CLUSTER_5
df['eventDate'],pandas.to_datetime(df['eventDate']),CLUSTER_7,CLUSTER_5
ax.set(xticks,numpy.arange(cm.shape[1]),CLUSTER_7,CLUSTER_5
yticks,numpy.arange(cm.shape[0]),CLUSTER_7,CLUSTER_5
predictions,numpy.array(predictions),CLUSTER_7,CLUSTER_5
class_names,"numpy.array(['Unexplained','Explained','Probable'])",CLUSTER_7,CLUSTER_5
scores,"precision_recall_fscore_support(y_test,y_pred,average='macro',labels=numpy.unique(y_pred)",CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_7,CLUSTER_5
scores,"sklearn.metrics.precision_recall_fscore_support(y_test,y_pred,average='macro',labels=np.unique(y_pred)",CLUSTER_7,CLUSTER_5
acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_5
posts,"pandas.DataFrame(posts,columns=['title','score','id','subreddit','url','num_comments','body','created','user'])",CLUSTER_8,CLUSTER_4
user_df,"pandas.DataFrame({'Users':d_users,'Karma':d_karma})",CLUSTER_8,CLUSTER_4
d_frame,pandas.DataFrame(d_posts),CLUSTER_8,CLUSTER_4
posts,"pandas.DataFrame(posts,columns=['title','score','id','subreddit','url','num_comments','body','created','user'])",CLUSTER_8,CLUSTER_4
c_user_df,"pandas.DataFrame({'Users':c_users,'Karma':c_karma})",CLUSTER_8,CLUSTER_4
Depressed,"pandas.DataFrame({'Text':d_normalized_posts,'Category':""Depressed""})",CLUSTER_8,CLUSTER_4
Control,"pandas.DataFrame({'Text':c_normalized_posts,'Category':""Control""})",CLUSTER_8,CLUSTER_4
Full,"pandas.concat([Depressed,Control])",CLUSTER_8,CLUSTER_4
remove_list,"pandas.read_csv(""Depression_related.csv"")",CLUSTER_8,CLUSTER_4
new_word,"re.sub(r'[^\w\s]','',word)",CLUSTER_8,CLUSTER_4
x,numpy.array(selected['MappedFixationPointX']),CLUSTER_7,CLUSTER_5
y,numpy.array(selected['MappedFixationPointY']),CLUSTER_7,CLUSTER_5
Eyetracking_data,"pandas.read_csv('metro_data.csv',encoding='latin1',sep="";"")",CLUSTER_7,CLUSTER_5
new_data,"pandas.DataFrame(columns=['STATE/UT','YEAR','TIME','ACCIDENTS'],index=np.arange(10000)",CLUSTER_5,CLUSTER_5
data,pandas.read_csv('road-accidents-in-india/only_road_accidents_data3.csv'),CLUSTER_5,CLUSTER_5
data,pandas.read_csv('road-accidents-in-india/only_road_accidents_data3.csv'),CLUSTER_5,CLUSTER_5
new_data,"pd.DataFrame(columns=['STATE/UT','YEAR','TIME','ACCIDENTS'],index=numpy.arange(10000)",CLUSTER_5,CLUSTER_5
X_data,numpy.array([t[0]fortine]),CLUSTER_5,CLUSTER_5
Y_data,numpy.array([y[1]foryine]),CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
df,pandas.read_csv('data.csv'),CLUSTER_8,CLUSTER_1
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""weatherHistory.csv"")",CLUSTER_5,CLUSTER_5
mean_img,"numpy.mean(
cm.load(fl[:-12]+'mmap')",CLUSTER_4,CLUSTER_11
mean_img,"numpy.mean(
cm.load(fl[:-12]+'.tif')",CLUSTER_4,CLUSTER_11
mean_img,"numpy.mean(
cm.load(fl[:-12]+'hdf5')",CLUSTER_4,CLUSTER_11
bord_px_rig,numpy.ceil(np.max(mc.shifts_rig),CLUSTER_4,CLUSTER_11
bord_px_els,numpy.ceil(np.maximum(np.max(np.abs(mc.x_shifts_els),CLUSTER_4,CLUSTER_11
final_size,"numpy.subtract(mc.total_template_els.shape,2*bord_px_els)",CLUSTER_4,CLUSTER_11
"lq,hq","numpy.nanpercentile(mean_img,[.5,99.5])",CLUSTER_4,CLUSTER_11
t0,time.time(),CLUSTER_4,CLUSTER_11
axes,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
axes,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
bt_v,"pandas.read_csv(""application_data/IS_variable.csv"")",CLUSTER_5,CLUSTER_1
pkg_matrix,"numpy.zeros((4,4)",CLUSTER_5,CLUSTER_1
ram_matrix,"numpy.zeros((4,4)",CLUSTER_5,CLUSTER_1
total_matrix,"numpy.zeros((4,4)",CLUSTER_5,CLUSTER_1
pkg_var_matrix,"numpy.zeros((4,26)",CLUSTER_5,CLUSTER_1
ram_var_matrix,"numpy.zeros((4,26)",CLUSTER_5,CLUSTER_1
total_var_matrix,"numpy.zeros((4,26)",CLUSTER_5,CLUSTER_1
pkg_matrix,"sklearn.metrics.confusion_matrix(bt_v['a'],bt_v['Perf_node01_power_energy_pkg_'])",CLUSTER_5,CLUSTER_1
ram_matrix,"sklearn.metrics.confusion_matrix(bt_v['b'],bt_v['Perf_node01_power_energy_ram_'])",CLUSTER_5,CLUSTER_1
total_matrix,"sklearn.metrics.confusion_matrix(bt_v['c'],bt_v['Perf_node01_power_energy_total_'])",CLUSTER_5,CLUSTER_1
tem_matrix,"sklearn.metrics.confusion_matrix(bt_v['Perf_node01_power_energy_pkg_'],bt_v['variable'])",CLUSTER_5,CLUSTER_1
tem_matrix,"sklearn.metrics.confusion_matrix(bt_v['Perf_node01_power_energy_ram_'],bt_v['variable'])",CLUSTER_5,CLUSTER_1
tem_matrix,"sklearn.metrics.confusion_matrix(bt_v['Perf_node01_power_energy_total_'],bt_v['variable'])",CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame(raw_data,columns=['first_name','last_name','age','preTestScore','postTestScore'])",CLUSTER_8,CLUSTER_3
df,pandas.read_csv('../data/example.csv'),CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',header=None)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',names=['UID','FirstName','LastName','Age','Pre-TestScore','Post-TestScore'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',index_col='UID',names=['UID','FirstName','LastName','Age','Pre-TestScore','Post-TestScore'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',index_col=['FirstName','LastName'],names=['UID','FirstName','LastName','Age','Pre-TestScore','Post-TestScore'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',na_values=['.'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',na_values=sentinels)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',na_values=sentinels,skiprows=3)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../data/example.csv',thousands=',')",CLUSTER_8,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(path,encoding='latin')",CLUSTER_1,CLUSTER_3
p,"numpy.arange(0,5.1,0.1)",CLUSTER_1,CLUSTER_3
year_options,pandas.DatetimeIndex(df.reset_index(),CLUSTER_11,CLUSTER_3
"df[""Date_Y""]","pandas.DatetimeIndex(df[""Date""])",CLUSTER_11,CLUSTER_3
df,"pandas.read_sql_query(""SELECT*FROMfinal_test_dataWHEREDate"",conn)",CLUSTER_11,CLUSTER_3
df,"pandas.read_sql_query(""SELECT*FROM{}"".format(datasetD)",CLUSTER_11,CLUSTER_3
df_ta,"pandas.read_sql_query(""SELECT*FROM{}WHEREDate>='{}'ANDDate<='{}'"".format(datasetD,start_date,end_date)",CLUSTER_11,CLUSTER_3
df_raw_prices,"pandas.read_sql_query(""SELECT*FROMraw_pricesWHEREDate>='{}'ANDDate<='{}'"".format(start_date,end_date)",CLUSTER_11,CLUSTER_3
df['Date'],pandas.to_datetime(df['Date']),CLUSTER_11,CLUSTER_3
date,pandas.to_datetime(clickData['points'][0]['customdata']),CLUSTER_11,CLUSTER_3
df_ta['Date'],pandas.to_datetime(df_ta['Date']),CLUSTER_11,CLUSTER_3
df_raw_prices['Date'],pandas.to_datetime(df_raw_prices['Date']),CLUSTER_11,CLUSTER_3
df,pandas.read_csv('data_processed.csv'),CLUSTER_5,CLUSTER_5
trainingSet,pandas.read_csv('trainingSet.csv'),CLUSTER_5,CLUSTER_5
testSet,pandas.read_csv('testSet.csv'),CLUSTER_5,CLUSTER_5
Y,numpy.array(trainingSet['Value']),CLUSTER_5,CLUSTER_5
X,numpy.array(trainSet_X),CLUSTER_5,CLUSTER_5
Y,numpy.array(testSet['Value']),CLUSTER_5,CLUSTER_5
X,numpy.array(testSet_X),CLUSTER_5,CLUSTER_5
CM,"numpy.zeros((4,4)",CLUSTER_5,CLUSTER_5
clf,"sklearn.neighbors.KNeighborsClassifier(k,weights='uniform')",CLUSTER_5,CLUSTER_5
clf,"sklearn.neighbors.KNeighborsClassifier(5,weights='uniform')",CLUSTER_5,CLUSTER_5
kf,sklearn.model_selection.KFold(n_splits=5),CLUSTER_5,CLUSTER_5
customer,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
pca_df,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df,"pandas.get_dummies(df,prefix_sep='_',drop_first=False)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('customer2.csv'),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=i,init='k-means++',)",CLUSTER_7,CLUSTER_8
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_7,CLUSTER_8
suicides_sgmales_elderly,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='male'),CLUSTER_11,CLUSTER_3
suicides_sgfemales_elderly,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='female'),CLUSTER_11,CLUSTER_3
suicides_sgmales_seniors,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='male'),CLUSTER_11,CLUSTER_3
suicides_sgfemales_seniors,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='female'),CLUSTER_11,CLUSTER_3
suicides_sgmales_adults,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='male'),CLUSTER_11,CLUSTER_3
suicides_sgfemales_adults,pandas.DataFrame(suicides_singapore[(suicides_singapore.sex=='female'),CLUSTER_11,CLUSTER_3
suicides,"pandas.read_csv('WHO_suicide_statistics.csv',sep=',')",CLUSTER_11,CLUSTER_3
sgdata,"pandas.read_csv('sg_combineddata.csv',sep=',')",CLUSTER_11,CLUSTER_3
sgdata['Year'],pandas.to_datetime(sgdata.Year),CLUSTER_11,CLUSTER_3
x,"numpy.arange(1,30+0.1,0.1)",CLUSTER_1,CLUSTER_9
x,"numpy.arange(1,30+0.1,0.1)",CLUSTER_1,CLUSTER_9
x2,"numpy.array([a1.x,b1.x])",CLUSTER_1,CLUSTER_9
b,numpy.around(a1.fun[0]),CLUSTER_1,CLUSTER_9
b2,numpy.around(b1.fun),CLUSTER_1,CLUSTER_9
b1,"scipy.optimize.differential_evolution(h,a2)",CLUSTER_1,CLUSTER_9
a1,"scipy.optimize.minimize(h,30,method=""BFGS"")",CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(2,4)",CLUSTER_1,CLUSTER_10
vocab,numpy.array(vectorizer.get_feature_names(),CLUSTER_5,CLUSTER_9
"%timeu,s,v","numpy.linalg.svd(vectors,full_matrices=False)",CLUSTER_5,CLUSTER_9
newsgroups_train,"sklearn.datasets.fetch_20newsgroups(subset='train',categories=categories,remove=remove)",CLUSTER_5,CLUSTER_9
newsgroups_test,"sklearn.datasets.fetch_20newsgroups(subset='test',categories=categories,remove=remove)",CLUSTER_5,CLUSTER_9
clf,"sklearn.decomposition.NMF(n_components=d,random_state=1)",CLUSTER_5,CLUSTER_9
"%timeu,s,v","sklearn.decomposition.randomized_svd(vectors,10)",CLUSTER_5,CLUSTER_9
"%timeU,s,Vh","scipy.linalg.svd(vectors,full_matrices=False)",CLUSTER_5,CLUSTER_9
RMSE,numpy.sqrt(mse),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(""baseballs(1)",CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3,random_state=1)",CLUSTER_7,CLUSTER_8
mae,"sklearn.metrics.mean_absolute_error(y_test,y_pred)",CLUSTER_7,CLUSTER_8
mse,"sklearn.metrics.mean_squared_error(y_test,y_pred)",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame({'Actual':y_test,'Predicted':y_pred})",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv(""http://bit.ly/w-data"")",CLUSTER_5,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,
test_size=0.5,random_state=0)",CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
X,"pandas.DataFrame(boston.data,columns=boston.feature_names)",CLUSTER_5,CLUSTER_1
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_1
testdata,"numpy.zeros([100,1000])",CLUSTER_3,CLUSTER_6
result_tuple,"collections.namedtuple('DDLOutput',['created_table','query'])",CLUSTER_10,CLUSTER_4
series,pandas.Series(np.arange(30),CLUSTER_8,CLUSTER_3
series,pandas.Series(np.arange(10),CLUSTER_8,CLUSTER_3
df_obj,pandas.DataFrame(np.random.rand(36),CLUSTER_8,CLUSTER_3
df_obj_1,pandas.DataFrame(np.arange(36),CLUSTER_8,CLUSTER_3
x,"numpy.arange(1,10)",CLUSTER_7,CLUSTER_3
d,"numpy.matrix(df.iloc[:,7:].fillna(0)",CLUSTER_7,CLUSTER_3
"u,s,vt","numpy.linalg.svd(d-col_means,full_matrices=False)",CLUSTER_7,CLUSTER_3
weights,"pandas.DataFrame({
'labels':df.iloc[:,7:].columns,
'PC1weights':np.array(vt[0,:])",CLUSTER_7,CLUSTER_3
df,pandas.read_csv('https://gist.githubusercontent.com/surajrampure/76bef6c3561b6d99fb87106cb91ef2b1/raw/c19e1300a1f8cc36ba93713261fcdcea00f4e8ed/nba_19_stats.csv'),CLUSTER_7,CLUSTER_3
models,sklearn.multiclass.OneVsRestClassifier(MultinomialNB(),CLUSTER_5,CLUSTER_5
kbest,"sklearn.feature_selection.SelectKBest(chi2,k=30)",CLUSTER_5,CLUSTER_5
cv_pipe,"sklearn.pipeline.Pipeline([
('kbest',SelectKBest(chi2,k=30)",CLUSTER_5,CLUSTER_5
df_submit,"pandas.concat([id_test,pd.DataFrame(Y_test_prob,columns=toxic_classes)",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv('../data/train.csv',na_filter=False)",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv('../data/test.csv',na_filter=False)",CLUSTER_5,CLUSTER_5
res,requests.get('http://www.gutenberg.org/cache/epub/1112/pg1112.txt'),CLUSTER_10,CLUSTER_12
res,requests.get('http://inventwithpython.com/page_that_does_not_exist'),CLUSTER_10,CLUSTER_12
res,requests.get('http://inventwithpython.com/page_that_does_not_exist'),CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':'成都',
'language':'zh-Hans',
'unit':'c'
},timeout=1)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/life/suggestion.json',params={
'key':'mbghskqqeagdjdqt',
'location':'成都',
'language':'zh-Hans',
'unit':'c'
},timeout=1)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':'成都',
'language':'zh-Hans',
'unit':'c'
},timeout=1)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':location,
'language':'zh-Hans',
'unit':'c'
},timeout=60)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':location,
'language':'zh-Hans',
'unit':'c'
},timeout=60)",CLUSTER_10,CLUSTER_12
result,"requests.get('https://api.seniverse.com/v3/weather/daily.json',params={
'key':'mbghskqqeagdjdqt',
'location':location,
'language':'zh-Hans',
'unit':'c'
},timeout=60)",CLUSTER_10,CLUSTER_12
weather_data,json.loads(result.text),CLUSTER_10,CLUSTER_12
weather_data,json.loads(result.text),CLUSTER_10,CLUSTER_12
weather_data,json.loads(result.text),CLUSTER_10,CLUSTER_12
weather_data,json.loads(result),CLUSTER_10,CLUSTER_12
weather_data,json.loads(result),CLUSTER_10,CLUSTER_12
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_5,CLUSTER_10
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_10
df_coeff,pandas.DataFrame(data_col_coeff),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""Advertising.csv"")",CLUSTER_7,CLUSTER_5
grids,seaborn.PairGrid(df),CLUSTER_7,CLUSTER_5
g,seaborn.PairGrid(df),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=1)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_op,y,test_size=0.3,random_state=1)",CLUSTER_7,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
model1,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
test_images_dir,os.listdir('data/test'),CLUSTER_2,CLUSTER_0
train_images,os.listdir('data/train/'+'/images'),CLUSTER_2,CLUSTER_0
train_mask,os.listdir('data/train/'+'/masks'),CLUSTER_2,CLUSTER_0
f,"numpy.array((
[0,-1,0],
[-1,5,-1],
[0,-1,0])",CLUSTER_2,CLUSTER_0
output,"numpy.zeros((iH,iW)",CLUSTER_2,CLUSTER_0
f,"numpy.ones((size,size)",CLUSTER_2,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_2,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_2,CLUSTER_0
ax_orig,"matplotlib.pyplot.subplot2grid(layout,(0,0)",CLUSTER_2,CLUSTER_0
ax_filt,"matplotlib.pyplot.subplot2grid(layout,(0,1)",CLUSTER_2,CLUSTER_0
df_timeseries,pandas.read_csv(response_as_file),CLUSTER_9,CLUSTER_2
r,requests.get(url),CLUSTER_9,CLUSTER_2
features,numpy.array(features),CLUSTER_4,CLUSTER_11
labels,numpy.array(labels),CLUSTER_4,CLUSTER_11
ifeatures,numpy.array(ifeatures),CLUSTER_4,CLUSTER_11
labels,numpy.array(labels),CLUSTER_4,CLUSTER_11
sfeatures,"numpy.array(sfeatures,dtype=float)",CLUSTER_4,CLUSTER_11
canvas,"numpy.zeros((h,2*w+128,3)",CLUSTER_4,CLUSTER_11
fs,numpy.concatenate([mh.features.haralick(img),CLUSTER_4,CLUSTER_11
concatenated,numpy.concatenate(alldescriptors),CLUSTER_4,CLUSTER_11
C,numpy.exp(-2.*(X**2+Y**2),CLUSTER_4,CLUSTER_11
hist,numpy.log1p(hist),CLUSTER_4,CLUSTER_11
allfeatures,"numpy.hstack([sfeatures,ifeatures])",CLUSTER_4,CLUSTER_11
hist,numpy.bincount(pixels.ravel(),CLUSTER_4,CLUSTER_11
clf,"sklearn.pipeline.Pipeline([('preproc',StandardScaler()",CLUSTER_4,CLUSTER_11
clf,"sklearn.pipeline.Pipeline([('preproc',StandardScaler()",CLUSTER_4,CLUSTER_11
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_11
cv,"sklearn.model_selection.KFold(n_splits=5,
shuffle=True,random_state=123)",CLUSTER_4,CLUSTER_11
cv,sklearn.model_selection.LeaveOneOut(),CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(
clf,features,labels,cv=cv)",CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(
clf,features,labels,cv=cv)",CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(
clf,ifeatures,labels,n_jobs=-1,cv=cv)",CLUSTER_4,CLUSTER_11
scores,"sklearn.model_selection.cross_val_score(
clf,sfeatures,labels,cv=cv)",CLUSTER_4,CLUSTER_11
score_SURF_global,"sklearn.model_selection.cross_val_score(
clf,allfeatures,labels,cv=cv)",CLUSTER_4,CLUSTER_11
grid,sklearn.model_selection.GridSearchCV(LogisticRegression(),CLUSTER_4,CLUSTER_11
km,sklearn.cluster.KMeans(k),CLUSTER_4,CLUSTER_11
df,pandas.read_csv('./movie_data.csv'),CLUSTER_0,CLUSTER_1
docs,"numpy.array([
'Thesunisshining',
'Theweatherissweet',
'Thesunisshining,theweatherissweet,andoneandoneistwo'])",CLUSTER_0,CLUSTER_1
idf_is,numpy.log((n_docs+1),CLUSTER_0,CLUSTER_1
text,"re.sub('<[^>]*>','',text)",CLUSTER_0,CLUSTER_1
text,"re.sub('[\W]+','',text.lower()",CLUSTER_0,CLUSTER_1
emoticons,re.findall('(?::|;|=),CLUSTER_0,CLUSTER_1
"parser.add_argument('--hosts',type","list,default=json.loads(os.environ['SM_HOSTS'])",CLUSTER_10,CLUSTER_4
search_range,"numpy.arange(1e-3,10,1e-3)",CLUSTER_4,CLUSTER_11
x_tst_knn_gt,"numpy.zeros((N_tst,N)",CLUSTER_4,CLUSTER_11
dist_gt,numpy.zeros(N),CLUSTER_4,CLUSTER_11
sp_gt,"numpy.zeros((N_tst,N)",CLUSTER_4,CLUSTER_11
nns_len,numpy.zeros(N_tst),CLUSTER_4,CLUSTER_11
sp_approx,"numpy.zeros((N_tst,self.N)",CLUSTER_4,CLUSTER_11
non_nan_index,"numpy.where(x_tst_knn[j,:]>=0)",CLUSTER_4,CLUSTER_11
x_tst_knn,"numpy.ones((N_tst,K)",CLUSTER_4,CLUSTER_11
min_ind,numpy.argmin(y),CLUSTER_4,CLUSTER_11
min_ind,numpy.argmin(y),CLUSTER_4,CLUSTER_11
"x_tst_knn_gt[i_tst,:]",numpy.argsort(dist_gt),CLUSTER_4,CLUSTER_11
dist_rand,"numpy.mean(dist_rand,axis=0)",CLUSTER_4,CLUSTER_11
contrast,"numpy.mean(contrast,axis=0)",CLUSTER_4,CLUSTER_11
dist_knn,"numpy.mean(dist_knn,axis=0)",CLUSTER_4,CLUSTER_11
x_trn,"numpy.reshape(x_trn,(-1,2048)",CLUSTER_4,CLUSTER_11
h,"numpy.floor((np.dot(w,x)",CLUSTER_4,CLUSTER_11
y,"numpy.log(f_h(dist_knn,r)",CLUSTER_4,CLUSTER_11
y,"numpy.log(f_h(1/contrast,r)",CLUSTER_4,CLUSTER_11
x_trn,numpy.vstack(x_trn),CLUSTER_4,CLUSTER_11
nns,numpy.unique(nns),CLUSTER_4,CLUSTER_11
dist_rand,numpy.load('eps0.1/dist_rand.npy'),CLUSTER_4,CLUSTER_11
contrast,numpy.load('eps0.1/contrast.npy'),CLUSTER_4,CLUSTER_11
dist_knn,numpy.load('eps0.1/dist_knn.npy'),CLUSTER_4,CLUSTER_11
dist_gt[i_trn],"numpy.linalg.norm(x_trn[i_trn,:]-x_tst[i_tst,:],2)",CLUSTER_4,CLUSTER_11
sp_err_inf_val,"numpy.linalg.norm(val_sp_gt-sp_approx,ord=np.inf,axis=1)",CLUSTER_4,CLUSTER_11
sp_err_inf_val,"numpy.linalg.norm(sp_gt-sp_approx,ord=np.inf,axis=1)",CLUSTER_4,CLUSTER_11
sp_err_inf_val,"numpy.linalg.norm(sp_gt-sp_approx,ord=np.inf,axis=1)",CLUSTER_4,CLUSTER_11
sp_err_inf_val,"numpy.linalg.norm(val_sp_gt-sp_approx,ord=np.inf,axis=1)",CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
end1,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
val_end1,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
end2,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
val_end2,time.time(),CLUSTER_4,CLUSTER_11
start2,time.time(),CLUSTER_4,CLUSTER_11
end2,time.time(),CLUSTER_4,CLUSTER_11
start5,time.time(),CLUSTER_4,CLUSTER_11
end5,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_build_hash,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_query,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_approx_value,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_build_hash,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_query,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_approx_value,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_query,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_approx_value,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_query,time.time(),CLUSTER_4,CLUSTER_11
start,time.time(),CLUSTER_4,CLUSTER_11
runtime_approx_value,time.time(),CLUSTER_4,CLUSTER_11
start2,time.time(),CLUSTER_4,CLUSTER_11
end2,time.time(),CLUSTER_4,CLUSTER_11
start5,time.time(),CLUSTER_4,CLUSTER_11
end5,time.time(),CLUSTER_4,CLUSTER_11
rex,re.compile('n[0-9]+'),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_6,CLUSTER_10
filter_vals,"numpy.array([[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1]])",CLUSTER_6,CLUSTER_10
filters,"numpy.array([filter_1,filter_2,filter_3,filter_4])",CLUSTER_6,CLUSTER_10
messages,"pandas.read_csv('SMSSpamCollection',sep='\t',names=['label','message'])",CLUSTER_7,CLUSTER_5
spam_detect_model,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer(analyzer=text_processing)",CLUSTER_7,CLUSTER_5
pipeline2,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer(analyzer=text_processing)",CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame({'lower':lower,'upper':upper,'centre':centre},index=idx)",CLUSTER_8,CLUSTER_9
ls8_df,"pandas.read_csv('LS8OLI.rsr',header=0)",CLUSTER_8,CLUSTER_9
s2a,"pandas.read_csv('S2AMSI.rsr',header=0)",CLUSTER_8,CLUSTER_9
xbar,"numpy.average(s2a['SR_WL'],weights=s2a[col])",CLUSTER_8,CLUSTER_9
target_mean_wavelength,"numpy.average(ls8_df['SR_WL'],weights=ls8_df['coastal'])",CLUSTER_8,CLUSTER_9
target_mean_wavelength,"numpy.average(ls8_df['SR_WL'],weights=ls8_df['coastal'])",CLUSTER_8,CLUSTER_9
spline,"scipy.interpolate.UnivariateSpline(ls8_df['SR_WL'],ls8_df['coastal']-ls8_df['coastal'].max()",CLUSTER_8,CLUSTER_9
spline,"scipy.interpolate.UnivariateSpline(s2a['SR_WL'],s2a[col]-s2a[col].max()",CLUSTER_8,CLUSTER_9
spline,"scipy.interpolate.UnivariateSpline(ls8_df['SR_WL'],ls8_df['cirrus']-ls8_df['cirrus'].max()",CLUSTER_8,CLUSTER_9
spline,"scipy.interpolate.UnivariateSpline(ls8_df['SR_WL'],ls8_df['nir']-ls8_df['nir'].max()",CLUSTER_8,CLUSTER_9
df,"pandas.read_csv(""house-votes-84.csv"")",CLUSTER_8,CLUSTER_11
X,"numpy.array([[1,2],
[5,8],
[1.5,1.8],
[8,8],
[1,0.6],
[9,11]])",CLUSTER_5,CLUSTER_9
xx,"numpy.linspace(0,12)",CLUSTER_5,CLUSTER_9
df,"pandas.DataFrame(data,
columns=['Country','Capital','Population'])",CLUSTER_5,CLUSTER_9
models,"pandas.DataFrame({
'Model':['LogisticRegression','SupportVectorMachines','KNN',
'RandomForest','NaiveBayes','DecisionTree'],
'Score':[acc_lr,acc_svc,acc_knn,
acc_random_forest,acc_gaussian,acc_decision_tree]})",CLUSTER_5,CLUSTER_9
df,pandas.read_csv(path),CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.5)",CLUSTER_5,CLUSTER_9
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_9
lm,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
kmeans,"sklearn.cluster.KMeans(n_clusters=3,init='k-means++',max_iter=300,n_init=10,random_state=0)",CLUSTER_5,CLUSTER_9
svc,sklearn.svm.SVC(probability=True),CLUSTER_5,CLUSTER_9
clf,"sklearn.svm.SVC(kernel='linear',C=1.0)",CLUSTER_5,CLUSTER_9
h0,"matplotlib.pyplot.plot(xx,yy,'k-',label=""nonweighteddiv"")",CLUSTER_5,CLUSTER_9
acc_svc,"sklearn.metrics.accuracy_score(y_test,predictions_svm)",CLUSTER_5,CLUSTER_9
acc_gaussian,"sklearn.metrics.accuracy_score(y_test,predictions)",CLUSTER_5,CLUSTER_9
acc_knn,"sklearn.metrics.accuracy_score(y_test,predictions_knn)",CLUSTER_5,CLUSTER_9
acc_decision_tree,"sklearn.metrics.accuracy_score(y_test,predictions_dt)",CLUSTER_5,CLUSTER_9
acc_random_forest,"sklearn.metrics.accuracy_score(y_test,predictions_rf)",CLUSTER_5,CLUSTER_9
acc_lr,"sklearn.metrics.accuracy_score(y_test,predictions_lr)",CLUSTER_5,CLUSTER_9
gaussian,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_9
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_5,CLUSTER_9
decision_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_9
random_forest,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_5,CLUSTER_9
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_9
crimedata_df,"pandas.read_csv(""../Source/crimedata_2017_1.csv"")",CLUSTER_9,CLUSTER_2
"crimedata_df[""DateReported""]","pandas.to_datetime(crimedata_df[""DateReported""])",CLUSTER_9,CLUSTER_2
response,"requests.get(url,params=params)",CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_7,CLUSTER_3
t,"numpy.array([theta_0[i],theta_1[j]])",CLUSTER_7,CLUSTER_3
theta,"numpy.zeros((2,1)",CLUSTER_7,CLUSTER_3
cost_values,numpy.zeros((len(theta_0),CLUSTER_7,CLUSTER_3
error,numpy.dot(X.transpose(),CLUSTER_7,CLUSTER_3
y_pred,numpy.dot(theta.transpose(),CLUSTER_7,CLUSTER_3
theta,numpy.squeeze(theta),CLUSTER_7,CLUSTER_3
theta_0,"numpy.linspace(-10,10,100)",CLUSTER_7,CLUSTER_3
theta_1,"numpy.linspace(-1,4,100)",CLUSTER_7,CLUSTER_3
X,"numpy.append(np.ones((m,1)",CLUSTER_7,CLUSTER_3
data,"pandas.read_csv(""food_truck_data.txt"")",CLUSTER_7,CLUSTER_3
ax,"seaborn.scatterplot(x='Population',y='Profit',data=data)",CLUSTER_7,CLUSTER_3
counts,collections.Counter(x),CLUSTER_3,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(6,6,)",CLUSTER_6,CLUSTER_10
action,numpy.argmax(q_values.detach(),CLUSTER_6,CLUSTER_10
best_action,numpy.argmax(policy_next_state_values[0].numpy(),CLUSTER_6,CLUSTER_10
average_reward,numpy.mean(results_score[-TARGET_PERIOD:]),CLUSTER_6,CLUSTER_10
state,"numpy.reshape(state,[1,observation_space])",CLUSTER_6,CLUSTER_10
state_next,"numpy.reshape(state_next,[1,observation_space])",CLUSTER_6,CLUSTER_10
action,random.randrange(self.action_space),CLUSTER_6,CLUSTER_10
batch,"random.sample(memory,BATCH_SIZE)",CLUSTER_6,CLUSTER_10
self.memory,collections.deque(maxlen=MEMORY_SIZE),CLUSTER_6,CLUSTER_10
Alfabeto,"numpy.array([""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",
""J"",""K"",""L"",""M"",""N"",""Ñ"",""O"",""P"",""Q"",
""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z"",""""])",CLUSTER_3,CLUSTER_3
poblacion,numpy.array(['_'for_inrange(len(Target),CLUSTER_3,CLUSTER_3
fitness_array,"numpy.array(Fitness,copy=True)",CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_max,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_max_porcentaje,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_medio,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_medio_porcentaje,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_targets,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Stats_num_targets_porcentaje,numpy.zeros(1),CLUSTER_3,CLUSTER_3
Fitness,numpy.zeros(NPOB),CLUSTER_3,CLUSTER_3
Coincidencias,numpy.zeros(NPOB),CLUSTER_3,CLUSTER_3
padres,numpy.zeros(NumPadres),CLUSTER_3,CLUSTER_3
indices_cromosomas_perfectos,numpy.where(Coincidencias==ITAR_TARGET),CLUSTER_3,CLUSTER_3
padres[i],numpy.argmax(fitness_array),CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_max,"numpy.append(Stats_num_coincidencias_max,num_coincidencias_max)",CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_max_porcentaje,"numpy.append(Stats_num_coincidencias_max_porcentaje,num_coincidencias_max_porcentaje)",CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_medio,"numpy.append(Stats_num_coincidencias_medio,num_coincidencias_medio)",CLUSTER_3,CLUSTER_3
Stats_num_coincidencias_medio_porcentaje,"numpy.append(Stats_num_coincidencias_medio_porcentaje,num_coincidencias_medio_porcentaje)",CLUSTER_3,CLUSTER_3
Stats_num_targets,"numpy.append(Stats_num_targets,num_targets)",CLUSTER_3,CLUSTER_3
Stats_num_targets_porcentaje,"numpy.append(Stats_num_targets_porcentaje,num_targets_porcentaje)",CLUSTER_3,CLUSTER_3
T_Inicio,time.time(),CLUSTER_3,CLUSTER_3
T_Final,time.time(),CLUSTER_3,CLUSTER_3
counts_sim,"numpy.array([
np.histogram(simulated_data[:,i],bins=bins)",CLUSTER_1,CLUSTER_9
KL,"numpy.array([entropy(pk=counts,qk=counts_sim[i])",CLUSTER_1,CLUSTER_9
dolphin_network,"numpy.zeros((N,N)",CLUSTER_1,CLUSTER_9
"μs,σs",numpy.empty(N),CLUSTER_1,CLUSTER_9
KL_percentile,"numpy.percentile(KL,5)",CLUSTER_1,CLUSTER_9
dolphin_data,"numpy.loadtxt('../data/dolphins/out.dolphins',comments='%',dtype=int)",CLUSTER_1,CLUSTER_9
"counts,bins",numpy.histogram(real_data),CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(2,1,sharex=True)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(8,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(8,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(8,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_1,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_1,CLUSTER_9
"red,blue,green","seaborn.color_palette('Set1',3)",CLUSTER_1,CLUSTER_9
ax,"seaborn.kdeplot(μs,σs,shade=True,cmap='viridis')",CLUSTER_1,CLUSTER_9
sales,"pandas.read_csv(""../../assets/datasets/sales.csv"")",CLUSTER_7,CLUSTER_5
df,pandas.read_csv(r'..\Datasets\titanic.csv'),CLUSTER_8,CLUSTER_3
data_y,numpy.array(trace.data),CLUSTER_1,CLUSTER_9
max_data,numpy.zeros(100001),CLUSTER_1,CLUSTER_9
max_data,numpy.fromiter((max(value),CLUSTER_1,CLUSTER_9
data_x,"numpy.linspace(trace.start_frequency,trace.stop_frequency,len(data_y)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
dataset,pandas.read_excel(r'E:\\Electronics_data.xlsx'),CLUSTER_0,CLUSTER_1
doc,"re.sub(r'[^a-zA-Z\s]','',doc,re.I|re.A)",CLUSTER_0,CLUSTER_1
contractions_re,re.compile('(%s),CLUSTER_0,CLUSTER_1
lr,"sklearn.linear_model.LogisticRegression(penalty='l2',max_iter=500,C=1,solver='lbfgs',random_state=42)",CLUSTER_0,CLUSTER_1
response,"requests.get(cli_web,stream=True)",CLUSTER_9,CLUSTER_2
res,requests.get('http://sumomo-ch.com/archives.html'),CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data,files=files)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data,files=files)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data,files=files)",CLUSTER_9,CLUSTER_2
response,"requests.post(http_url,data=data)",CLUSTER_9,CLUSTER_2
write,pandas.DataFrame(av_data),CLUSTER_9,CLUSTER_2
write,pandas.DataFrame(av_data),CLUSTER_9,CLUSTER_2
write,pandas.DataFrame(av_data),CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
read,"pandas.read_sql_query('select*fromface_search',con=db)",CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict_facetoken,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
req_dict,json.JSONDecoder(),CLUSTER_9,CLUSTER_2
av_girl,os.listdir('av_girl_data'),CLUSTER_9,CLUSTER_2
dir_file,os.listdir('av_girl_data/'+name[0]),CLUSTER_9,CLUSTER_2
av_girl,os.listdir('av_girl_data'),CLUSTER_9,CLUSTER_2
av_girl,os.listdir('av_girl_data/not_sure'),CLUSTER_9,CLUSTER_2
B,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_9
a,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_1,CLUSTER_9
b,"numpy.array([[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
c,"numpy.array((1,2,3)",CLUSTER_1,CLUSTER_9
d,"numpy.array((4,5,6)",CLUSTER_1,CLUSTER_9
mean,numpy.zeros(m),CLUSTER_1,CLUSTER_9
x1,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x2,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x1,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x2,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x1,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
x2,"numpy.linspace(-5,5,N)",CLUSTER_1,CLUSTER_9
"X1,X2","numpy.meshgrid(x1,x2)",CLUSTER_1,CLUSTER_9
"X1,X2","numpy.meshgrid(x1,x2)",CLUSTER_1,CLUSTER_9
"X1,X2","numpy.meshgrid(x1,x2)",CLUSTER_1,CLUSTER_9
sigma,numpy.eye(m),CLUSTER_1,CLUSTER_9
C1,"pandas.Series([1,2,3,4],index=['A','B','C','D'])",CLUSTER_1,CLUSTER_9
C2,"pandas.Series((1,2,3)",CLUSTER_1,CLUSTER_9
C3,"pandas.Series({1:'A',2:'B'})",CLUSTER_1,CLUSTER_9
C4,"pandas.Series(np.array([1,2,3])",CLUSTER_1,CLUSTER_9
D1,"pandas.DataFrame([[1,2,3],[4,5,6],[7,8,9]],index=['i1','i2','i3'],columns=['c1','c2','c3'])",CLUSTER_1,CLUSTER_9
D2,"pandas.DataFrame(C1,columns=['c1'])",CLUSTER_1,CLUSTER_9
D3,"pandas.DataFrame({'key1':[1,2,3],'key2':[4,5,6]})",CLUSTER_1,CLUSTER_9
D4,"pandas.DataFrame(np.array([[1,2,3],[4,5,6]])",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
data,"pandas.DataFrame(lst,columns=['Variable','Value','All','Good','Bad'])",CLUSTER_7,CLUSTER_8
random_result,"pandas.DataFrame(columns=['model','accuracy','precision','recall','f1_score','roc_auc_score'])",CLUSTER_7,CLUSTER_8
iv_result,"pandas.DataFrame(columns=['model','accuracy','precision','recall','f1_score','roc_auc_score'])",CLUSTER_7,CLUSTER_8
iv_gridsearch_result,"pandas.DataFrame(columns=['model','accuracy','precision','recall','f1_score','roc_auc_score'])",CLUSTER_7,CLUSTER_8
data['loans_latest_time'],pandas.Series(b),CLUSTER_7,CLUSTER_8
data['latest_query_time'],pandas.Series(b),CLUSTER_7,CLUSTER_8
column_headers,"pandas.Series(column_headers,name='feature')",CLUSTER_7,CLUSTER_8
d,"pandas.Series(d,name='iv_value')",CLUSTER_7,CLUSTER_8
iv_result,"pandas.concat([column_headers,d],axis=1)",CLUSTER_7,CLUSTER_8
df['new_feature'],"pandas.qcut(df[feature],10,duplicates='drop')",CLUSTER_7,CLUSTER_8
_data,"pandas.read_csv(r'D:\文档\kaggle\coding\数据科学-datawhale\data.csv',engine='python')",CLUSTER_7,CLUSTER_8
data['latest_query_time'],"pandas.to_datetime(data['latest_query_time'],format='%Y-%m-%d%H:%M:%S.%f')",CLUSTER_7,CLUSTER_8
data['loans_latest_time'],"pandas.to_datetime(data['loans_latest_time'],format='%Y-%m-%d%H:%M:%S.%f')",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_random_forest_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=numpy.array(y)",CLUSTER_7,CLUSTER_8
data['WoE'],numpy.log(data['DistributionGood']/data['DistributionBad']),CLUSTER_7,CLUSTER_8
random_forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_depth=4,n_jobs=-1,oob_score=True,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_depth=4,n_jobs=-1,oob_score=True,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_depth=4,n_jobs=-1,oob_score=True,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_depth=4,n_jobs=-1,oob_score=True,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
sclf_without_prob,"sklearn.ensemble.StackingClassifier(classifiers=[xgb_best,svc_best,dt_bset,
rf_best,lr_best],
meta_classifier=lr_gridsearch.best_estimator_
)",CLUSTER_7,CLUSTER_8
sclf_with_prob,"sklearn.ensemble.StackingClassifier(classifiers=[xgb_best,svc_best,dt_bset,
rf_best,lr_best],
meta_classifier=lr_gridsearch.best_estimator_,
use_probas=True,
)",CLUSTER_7,CLUSTER_8
lr_gridsearch,"sklearn.model_selection.GridSearchCV(logistic,param_grid=lr_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
svc_gridsearch,"sklearn.model_selection.GridSearchCV(svc,param_grid=svc_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
dt_gridsearch,"sklearn.model_selection.GridSearchCV(dt,param_grid=dt_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
rf_gridsearch,"sklearn.model_selection.GridSearchCV(rf,param_grid=rf_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
xgb_gridsearch,"sklearn.model_selection.GridSearchCV(xgb,param_grid=xgb_params,
scoring='recall',n_jobs=-1,
verbose=1,cv=5)",CLUSTER_7,CLUSTER_8
grid_without_prob,"sklearn.model_selection.GridSearchCV(sclf_without_prob,
param_grid={'meta_classifier__C':[0.0001,0.001,0.01,0.1,1.0,5,10],
'meta_classifier__penalty':['l1','l2']},
cv=5,n_jobs=-1,scoring='recall',
verbose=1,)",CLUSTER_7,CLUSTER_8
grid_with_prob,"sklearn.model_selection.GridSearchCV(sclf_without_prob,
param_grid={'meta_classifier__C':[0.0001,0.001,0.01,0.1,1.0,5,10],
'meta_classifier__penalty':['l1','l2']},
cv=5,n_jobs=-1,scoring='recall',
verbose=1,)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_random_forest_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_iv_feature,y,train_size=0.7,random_state=666,stratify=np.array(y)",CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
logistic_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_accuracy_score_random,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_without_prob_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_with_prob_accuracy_score_iv,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
F1,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_f1_score_random,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_without_prob_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_with_prob_f1_score_iv,"sklearn.metrics.f1_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_precision_score_random,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_without_prob_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_with_prob_precision_score_iv,"sklearn.metrics.precision_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_recall_score_random,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
svc_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
dt_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
rf_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
xgb_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_without_prob_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_with_prob_recall_score_iv,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
logistic_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
svc_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
dt_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
rf_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
xgb_auc_score_random,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
logistic_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
svc_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
dt_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
rf_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
xgb_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
logistic_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
svc_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
dt_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
rf_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
xgb_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
grid_without_prob_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
grid_with_prob_auc_score_iv,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_7,CLUSTER_8
"logistic_fpr_score_random,logistic_tpr_score_random,logistic_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"svc_fpr_score_random,svc_tpr_score_random,svc_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"dt_fpr_score_random,dt_tpr_score_random,dt_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"rf_fpr_score_random,rf_tpr_score_random,rf_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"xgb_fpr_score_random,xgb_tpr_score_random,xgb_thresholds_score_random","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"logistic_fpr_score_iv,logistic_tpr_score_iv,logistic_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"svc_fpr_score_iv,svc_tpr_score_iv,svc_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"dt_fpr_score_iv,dt_tpr_score_iv,dt_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"rf_fpr_score_iv,rf_tpr_score_iv,rf_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"xgb_fpr_score_iv,xgb_tpr_score_iv,xgb_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"logistic_fpr_score_iv,logistic_tpr_score_iv,logistic_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"svc_fpr_score_iv,svc_tpr_score_iv,svc_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"dt_fpr_score_iv,dt_tpr_score_iv,dt_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"rf_fpr_score_iv,rf_tpr_score_iv,rf_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"xgb_fpr_score_iv,xgb_tpr_score_iv,xgb_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"grid_without_prob_fpr_score_iv,grid_without_prob_tpr_score_iv,grid_without_prob_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
"grid_with_prob_fpr_score_iv,grid_with_prob_tpr_score_iv,grid_with_prob_thresholds_score_iv","sklearn.metrics.roc_curve(y_test,scores)",CLUSTER_7,CLUSTER_8
logistic,"sklearn.linear_model.LogisticRegression(n_jobs=-1,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
logistic,"sklearn.linear_model.LogisticRegression(n_jobs=-1,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
logistic,"sklearn.linear_model.LogisticRegression(n_jobs=-1,random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
svc,"sklearn.svm.SVC(random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
svc,"sklearn.svm.SVC(random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
svc,"sklearn.svm.SVC(random_state=666,verbose=1)",CLUSTER_7,CLUSTER_8
dt,"sklearn.tree.DecisionTreeClassifier(max_depth=5,random_state=666)",CLUSTER_7,CLUSTER_8
dt,"sklearn.tree.DecisionTreeClassifier(max_depth=5,random_state=666)",CLUSTER_7,CLUSTER_8
dt,"sklearn.tree.DecisionTreeClassifier(max_depth=5,random_state=666)",CLUSTER_7,CLUSTER_8
lr_best,"sklearn.pipeline.Pipeline([('standardscaler',StandardScaler()",CLUSTER_7,CLUSTER_8
svc_best,"sklearn.pipeline.Pipeline([('standardscaler',StandardScaler()",CLUSTER_7,CLUSTER_8
lr_best,"sklearn.pipeline.Pipeline([('standardscaler',StandardScaler()",CLUSTER_7,CLUSTER_8
svc_best,"sklearn.pipeline.Pipeline([('standardscaler',StandardScaler()",CLUSTER_7,CLUSTER_8
x_values,"numpy.arange(1,pca.n_features_+1)",CLUSTER_7,CLUSTER_5
sorted_idx,numpy.argsort(weights),CLUSTER_7,CLUSTER_5
cumulative_explained_variance_ratio,numpy.cumsum(explained_variance_ratio),CLUSTER_7,CLUSTER_5
missing_num[feature],numpy.sum(missing_flag),CLUSTER_7,CLUSTER_5
non_missing_rows_flag,"numpy.logical_not(azdias.loc[:,'CAMEO_INTL_2015'].isna()",CLUSTER_7,CLUSTER_5
non_missing_rows_flag,"numpy.logical_not(df.loc[:,'CAMEO_INTL_2015'].isna()",CLUSTER_7,CLUSTER_5
nan_per_col.hist(bins,"numpy.linspace(0,1e6,101)",CLUSTER_7,CLUSTER_5
nan_per_col.hist(bins,"numpy.linspace(0,2e5,21)",CLUSTER_7,CLUSTER_5
missing_per_row.plot.hist(bins,"numpy.linspace(0,50,26)",CLUSTER_7,CLUSTER_5
scaled_df,"pandas.DataFrame(scaled_data,columns=azdias.columns)",CLUSTER_7,CLUSTER_5
transformed_df,"pandas.DataFrame(transformed_data,columns=[f'PC{i}'foriinrange(1,transformed_data.shape[1]+1)",CLUSTER_7,CLUSTER_5
decade_feat,"pandas.Series(['DECADE','person','interval',[]],index=feat_info.columns)",CLUSTER_7,CLUSTER_5
movement_feat,"pandas.Series(['MOVEMENT','person','interval',[]],index=feat_info.columns)",CLUSTER_7,CLUSTER_5
wealth_feat,"pandas.Series(['WEALTH','micro-cell','interval',[]],index=feat_info.columns)",CLUSTER_7,CLUSTER_5
lifestage_feat,"pandas.Series(['LIFE_STAGE','micro-cell','interval',[]],index=feat_info.columns)",CLUSTER_7,CLUSTER_5
azdias,"pandas.read_csv('Udacity_AZDIAS_Subset.csv',delimiter=';')",CLUSTER_7,CLUSTER_5
feat_info,"pandas.read_csv('AZDIAS_Feature_Summary.csv',delimiter=';')",CLUSTER_7,CLUSTER_5
sclr,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=20),CLUSTER_7,CLUSTER_5
cluster_model,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_7,CLUSTER_5
final_model,sklearn.cluster.KMeans(n_clusters=final_cluster_count),CLUSTER_7,CLUSTER_5
df_activities,"pandas.read_csv(runkeeper_file,parse_dates=True,index_col='Date')",CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(8,5)",CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_7,CLUSTER_3
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(2,sharex=True,figsize=(12,8)",CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_3
myTitanic,seaborn.load_dataset('titanic'),CLUSTER_10,CLUSTER_4
myTips,seaborn.load_dataset('tips'),CLUSTER_10,CLUSTER_4
output,numpy.array(outputlist),CLUSTER_7,CLUSTER_5
scale,"numpy.array([5e4,1e5,5e5,1e6,2e6])",CLUSTER_7,CLUSTER_5
scale,"numpy.array([1e5,5e5,1e6,5e6,1e7])",CLUSTER_7,CLUSTER_5
scale,"numpy.array([1e5,5e5,1e6,2e6,5e6])",CLUSTER_7,CLUSTER_5
countdf['fractionaloccup.'],numpy.asarray(chipcount),CLUSTER_7,CLUSTER_5
d,"numpy.where(c>0.3*a,1,0)",CLUSTER_7,CLUSTER_5
d,"numpy.where(c>0.3*ab,1,0)",CLUSTER_7,CLUSTER_5
outputidx,numpy.where(output!=0),CLUSTER_7,CLUSTER_5
Z,numpy.reshape(kernel(positions),CLUSTER_7,CLUSTER_5
lengthtot,numpy.sum(tempdf['SequenceLength']),CLUSTER_7,CLUSTER_5
genetot,numpy.sum(tempdf['GeneCount']),CLUSTER_7,CLUSTER_5
"plt.hist(inputdf['numberofcells'],bins","numpy.logspace(-1,3,15)",CLUSTER_7,CLUSTER_5
positions,numpy.vstack([X.ravel(),CLUSTER_7,CLUSTER_5
values,"numpy.vstack([m1,m2])",CLUSTER_7,CLUSTER_5
CS,"matplotlib.pyplot.contour(X,Y,Z)",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
f,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
frame,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_5
legend,"matplotlib.pyplot.legend(['bulk','minimeta'])",CLUSTER_7,CLUSTER_5
sc,"matplotlib.pyplot.scatter(df['k5_x'],df['k5_y'],c=z,s=df['SequenceLength']/5e2,alpha=0.2,cmap=cm)",CLUSTER_7,CLUSTER_5
ax3,"matplotlib.pyplot.subplot(gs[1,0])",CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_5
countdf,"pandas.DataFrame(columns=[lineage[8:],'counts','chip','fractionaloccup.','mean_occup.','numberofcells','num_contigs','length','genes'])",CLUSTER_7,CLUSTER_5
dcsummary,"pandas.DataFrame([info],columns=['Contigs','Length(bp)",CLUSTER_7,CLUSTER_5
dbscandf,"pandas.DataFrame(columns=['cluster
'dominantphylum','dominantspecies','chipcounts',
'fractionaloccup.','numberofcells','num_contigs',
'length','genes','CRISPRS','NoCOG','mu_x','mu_y','sig_x','sig_y'])",CLUSTER_7,CLUSTER_5
dfjoiner,"pandas.DataFrame([0],columns=['funct_occurence'])",CLUSTER_7,CLUSTER_5
dfjoiner,"pandas.DataFrame([0],columns=['funct_occurence'])",CLUSTER_7,CLUSTER_5
chip,pandas.DataFrame(columns=cols),CLUSTER_7,CLUSTER_5
df_contigorigin,pandas.read_pickle(expt_name+'_contigorigin'),CLUSTER_7,CLUSTER_5
df,pandas.read_pickle(expt_name+'maindf_AR_wellcounts'),CLUSTER_7,CLUSTER_5
chip,pandas.read_pickle(expt_name+'ARasChip'),CLUSTER_7,CLUSTER_5
chip2,pandas.read_pickle(expt_name+'normalizedARasChip'),CLUSTER_7,CLUSTER_5
chip_abs,pandas.read_pickle(expt_name+'absolutecoverageARasChip'),CLUSTER_7,CLUSTER_5
chip_conc,pandas.read_pickle(expt_name+'DNAconcasChip'),CLUSTER_7,CLUSTER_5
COGassembly,pandas.read_pickle(expt_name+'_COGassembly_All'),CLUSTER_7,CLUSTER_5
mh,pandas.read_pickle(expt_name+'megahit_maindf'),CLUSTER_7,CLUSTER_5
mS,pandas.read_pickle(expt_name+'metaSpades_maindf'),CLUSTER_7,CLUSTER_5
mm,pandas.read_pickle(expt_name+'minimeta_maindf'),CLUSTER_7,CLUSTER_5
df,pandas.read_pickle(expt_name+'All_maindf'),CLUSTER_7,CLUSTER_5
COGfun,pandas.read_table('COGreffiles/fun2003-2014.tab'),CLUSTER_7,CLUSTER_5
palette,"seaborn.color_palette('deep',np.unique(labels)",CLUSTER_7,CLUSTER_5
barcolortype,"seaborn.color_palette(""deep"",10)",CLUSTER_7,CLUSTER_5
barcolortype,"seaborn.color_palette(""deep"",len(output)",CLUSTER_7,CLUSTER_5
barcolortype,"seaborn.color_palette(""deep"",10)",CLUSTER_7,CLUSTER_5
palette,"seaborn.diverging_palette(10,220,l=59,n=len(ghb5)",CLUSTER_7,CLUSTER_5
start_time,time.time(),CLUSTER_7,CLUSTER_5
end_time,time.time(),CLUSTER_7,CLUSTER_5
start_time,time.time(),CLUSTER_7,CLUSTER_5
end_time,time.time(),CLUSTER_7,CLUSTER_5
start_time,time.time(),CLUSTER_7,CLUSTER_5
end_time,time.time(),CLUSTER_7,CLUSTER_5
ghb4,collections.Counter(ghb3),CLUSTER_7,CLUSTER_5
listcount,collections.Counter(sublist),CLUSTER_7,CLUSTER_5
listcount,collections.Counter(sublist),CLUSTER_7,CLUSTER_5
kernel,scipy.stats.gaussian_kde(values),CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_7
data,"sklearn.datasets.make_blobs(n_samples=100,n_features=3,centers=2,random_state=101)",CLUSTER_5,CLUSTER_7
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_7
J_plus,"numpy.zeros((num_parameters,1)",CLUSTER_3,CLUSTER_6
J_minus,"numpy.zeros((num_parameters,1)",CLUSTER_3,CLUSTER_6
gradapprox,"numpy.zeros((num_parameters,1)",CLUSTER_3,CLUSTER_6
Z1,"numpy.dot(W1,X)",CLUSTER_3,CLUSTER_6
Z2,"numpy.dot(W2,A1)",CLUSTER_3,CLUSTER_6
Z3,"numpy.dot(W3,A2)",CLUSTER_3,CLUSTER_6
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_3,CLUSTER_6
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_3,CLUSTER_6
logprobs,numpy.multiply(-np.log(A3),CLUSTER_3,CLUSTER_6
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_3,CLUSTER_6
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_3,CLUSTER_6
thetaplus,numpy.copy(parameters_values),CLUSTER_3,CLUSTER_6
thetaminus,numpy.copy(parameters_values),CLUSTER_3,CLUSTER_6
numerator,numpy.linalg.norm(grad-gradapprox),CLUSTER_3,CLUSTER_6
denominator,numpy.linalg.norm(numpy.linalg.norm(grad),CLUSTER_3,CLUSTER_6
numerator,numpy.linalg.norm(grad-gradapprox),CLUSTER_3,CLUSTER_6
denominator,numpy.linalg.norm(numpy.linalg.norm(grad),CLUSTER_3,CLUSTER_6
df,"pandas.read_csv(""gapminder_gdp_oceania.csv"")",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""gapminder_gdp_oceania.csv"",index_col=""country"")",CLUSTER_8,CLUSTER_3
data,"pandas.read_csv('gapminder_gdp_europe.csv',index_col='country')",CLUSTER_8,CLUSTER_3
indices,numpy.arange(data.shape[0]),CLUSTER_0,CLUSTER_0
coefs,"numpy.asarray(values[1:],dtype='float32')",CLUSTER_0,CLUSTER_0
data_train,pandas.read_csv('train.csv'),CLUSTER_0,CLUSTER_0
data_train,pandas.read_csv('train.csv'),CLUSTER_0,CLUSTER_0
string,"re.sub(r""\\"","""",string)",CLUSTER_0,CLUSTER_0
string,"re.sub(r""\'"","""",string)",CLUSTER_0,CLUSTER_0
string,"re.sub(r""\"""","""",string)",CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(data,labels,test_size=0.20,random_state=42)",CLUSTER_0,CLUSTER_0
"x_test,x_val,y_test,y_val","sklearn.model_selection.train_test_split(x_test,y_test,test_size=0.50,random_state=42)",CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test_s,x_pred)",CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test_s,x_pred)",CLUSTER_0,CLUSTER_0
data,pandas.read_csv('student_data.csv'),CLUSTER_1,CLUSTER_3
X,"numpy.array(data[[""gre"",""gpa""]])",CLUSTER_1,CLUSTER_3
y,"numpy.array(data[""admit""])",CLUSTER_1,CLUSTER_3
del_w,numpy.zeros(weights.shape),CLUSTER_1,CLUSTER_3
loss,numpy.mean((out-targets),CLUSTER_1,CLUSTER_3
accuracy,numpy.mean(predictions==targets_test),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('E:/Python/Data_Assignment_3/employee_compensation.csv'),CLUSTER_8,CLUSTER_4
df_GDP,pandas.DataFrame(GDP),CLUSTER_7,CLUSTER_9
data_frame_time_srs,"pandas.DataFrame(time_srs,columns=[""values""])",CLUSTER_7,CLUSTER_9
GDP,"pandas.read_csv('../GDP/GDP.csv',parse_dates=True,skiprows=1)",CLUSTER_7,CLUSTER_9
data,pandas.read_pickle('./dataGDP.pkl'),CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_9
x,"numpy.arange(1,len(lag_array)",CLUSTER_7,CLUSTER_9
volatility,numpy.array(volatility[col_name].tolist(),CLUSTER_7,CLUSTER_9
x_axis,numpy.asarray(x_axis),CLUSTER_7,CLUSTER_9
zero_crossings,numpy.where(np.diff(np.sign(y_axis),CLUSTER_7,CLUSTER_9
diff,numpy.diff(times),CLUSTER_7,CLUSTER_9
mask,"numpy.ma.less_equal(diff,0)",CLUSTER_7,CLUSTER_9
masked_diff,"numpy.ma.masked_array(diff,mask)",CLUSTER_7,CLUSTER_9
sqrt_delta_sigma,math.sqrt(delta),CLUSTER_7,CLUSTER_9
peaks,"scipy.signal.find_peaks(wave,height=border)",CLUSTER_7,CLUSTER_9
result.csv(filename,"time.strftime(""%Y%m%d"")",CLUSTER_11,CLUSTER_5
"data[""year""]","pandas.DatetimeIndex(data[""date""])",CLUSTER_11,CLUSTER_5
&(data.year!,"pandas.Period('1969',freq='A-DEC')",CLUSTER_11,CLUSTER_5
data,"pandas.concat([data,age],axis=1)",CLUSTER_11,CLUSTER_5
data['date'],pandas.to_datetime(Date_final),CLUSTER_11,CLUSTER_5
new_arr,numpy.array(d*10**9),CLUSTER_5,CLUSTER_0
pred_diams,"numpy.array(find_points(y_pred,point)",CLUSTER_5,CLUSTER_0
real_diams,numpy.array(pred_d[np.where(y_test[point]==1),CLUSTER_5,CLUSTER_0
G,numpy.zeros(N),CLUSTER_5,CLUSTER_0
A,"numpy.zeros((M,N)",CLUSTER_5,CLUSTER_0
B,"numpy.zeros((M+N,N)",CLUSTER_5,CLUSTER_0
y_,numpy.zeros(M+N),CLUSTER_5,CLUSTER_0
B,"numpy.zeros((M+N,N)",CLUSTER_5,CLUSTER_0
y_,numpy.zeros(M+N),CLUSTER_5,CLUSTER_0
B,"numpy.zeros((M+N,N)",CLUSTER_5,CLUSTER_0
y_,numpy.zeros(M+N),CLUSTER_5,CLUSTER_0
w,numpy.zeros(N),CLUSTER_5,CLUSTER_0
B,"numpy.zeros((M+N,N)",CLUSTER_5,CLUSTER_0
y_,numpy.zeros(M+N),CLUSTER_5,CLUSTER_0
y_try,numpy.zeros(300),CLUSTER_5,CLUSTER_0
"i,",numpy.where(a1==max(a1),CLUSTER_5,CLUSTER_0
"i,",numpy.where(a2==max(a2),CLUSTER_5,CLUSTER_0
"i,",numpy.where(a3==max(a3),CLUSTER_5,CLUSTER_0
a,numpy.zeros_like(d),CLUSTER_5,CLUSTER_0
G,"numpy.linspace(G_min,G_max,N)",CLUSTER_5,CLUSTER_0
pred_d,"numpy.linspace(d_min,d_max,num=Num_diam)",CLUSTER_5,CLUSTER_0
new_train,"numpy.hstack([X_train,linear_pred_for_tr])",CLUSTER_5,CLUSTER_0
new_test,"numpy.hstack([X_test,linear_pred_for_test])",CLUSTER_5,CLUSTER_0
new_test,"numpy.hstack([[X_try],linear_pred_for_test])",CLUSTER_5,CLUSTER_0
w,numpy.load('newspectr/real_freq.npy'),CLUSTER_5,CLUSTER_0
clf,sklearn.linear_model.LassoCV(),CLUSTER_5,CLUSTER_0
clf,sklearn.linear_model.Ridge(alpha=5e-7),CLUSTER_5,CLUSTER_0
"a2,rnorm","scipy.optimize.nnls(B,y_)",CLUSTER_5,CLUSTER_0
"a2,rnorm","scipy.optimize.nnls(B,y_)",CLUSTER_5,CLUSTER_0
"a2,rnorm","scipy.optimize.nnls(B,y_)",CLUSTER_5,CLUSTER_0
"a2,rnorm","scipy.optimize.nnls(B,y_)",CLUSTER_5,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.33,random_state=42)",CLUSTER_5,CLUSTER_0
extrm,"scipy.signal.argrelextrema(y_pred[point],np.greater)",CLUSTER_5,CLUSTER_0
extrm,"scipy.signal.argrelextrema(y_pred[point],np.greater)",CLUSTER_5,CLUSTER_0
tick_marks,numpy.arange(len(classes),CLUSTER_11,CLUSTER_10
Y_pred_classes,"numpy.argmax(Y_pred,axis=1)",CLUSTER_11,CLUSTER_10
"unique,counts","numpy.unique(y,return_counts=True)",CLUSTER_11,CLUSTER_10
"unique,counts","numpy.unique(Y_pred_classes,return_counts=True)",CLUSTER_11,CLUSTER_10
x_npz,"numpy.load(""x_Pneumothorax_balanced_224.npz"")",CLUSTER_11,CLUSTER_10
y_npz,"numpy.load(""y_Pneumothorax_balanced_224.npz"")",CLUSTER_11,CLUSTER_10
"X_train,X_valtest,y_train,y_valtest","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=1,stratify=y)",CLUSTER_11,CLUSTER_10
"X_test,X_val,y_test,y_val","sklearn.model_selection.train_test_split(X_valtest,y_valtest,test_size=0.5,random_state=1,stratify=y_valtest)",CLUSTER_11,CLUSTER_10
current_datetime,datetime.datetime.now(),CLUSTER_11,CLUSTER_10
cnf_matrix,"sklearn.metrics.confusion_matrix(np.argmax(validation_generator.y,axis=1)",CLUSTER_11,CLUSTER_10
"fpr0,tpr0,thresholds0","sklearn.metrics.roc_curve(validation_generator.y[:,0],Y_pred[:,0])",CLUSTER_11,CLUSTER_10
"fpr1,tpr1,thresholds1","sklearn.metrics.roc_curve(validation_generator.y[:,1],Y_pred[:,1])",CLUSTER_11,CLUSTER_10
roc_auc0,"sklearn.metrics.auc(fpr0,tpr0)",CLUSTER_11,CLUSTER_10
roc_auc1,"sklearn.metrics.auc(fpr1,tpr1)",CLUSTER_11,CLUSTER_10
swap,"numpy.array([[0,1],[1,0]],dtype=complex)",CLUSTER_1,CLUSTER_9
ch,"numpy.zeros(n_nodes,dtype=complex)",CLUSTER_1,CLUSTER_9
ch2,"numpy.zeros(n_nodes,dtype=float)",CLUSTER_1,CLUSTER_9
Step1,"numpy.identity(n_nodes,dtype=complex)",CLUSTER_1,CLUSTER_9
Step2,"numpy.identity(n_nodes,dtype=complex)",CLUSTER_1,CLUSTER_9
cwd,os.getcwd(),CLUSTER_4,CLUSTER_7
datetime_rec,datetime.datetime.now(),CLUSTER_4,CLUSTER_7
dataset,"pandas.read_csv('Market_Basket_Optimisation.csv',header=None)",CLUSTER_1,CLUSTER_3
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
arr,numpy.arange(9),CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3,2,3,4,3,4,5,6])",CLUSTER_3,CLUSTER_6
b,"numpy.array([7,2,10,2,7,4,9,4,9,8])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3,4,5])",CLUSTER_3,CLUSTER_6
b,"numpy.array([5,6,7,8,9])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3,2,3,4,3,4,5,6])",CLUSTER_3,CLUSTER_6
b,"numpy.array([7,2,10,2,7,4,9,4,9,8])",CLUSTER_3,CLUSTER_6
a,"numpy.array([2,6,1,9,10,3,27])",CLUSTER_3,CLUSTER_6
a,"numpy.array([5,7,9,8,6,4,5])",CLUSTER_3,CLUSTER_6
b,"numpy.array([6,3,4,8,9,7,1])",CLUSTER_3,CLUSTER_6
a,"numpy.array([5,7,9,8,6,4,5])",CLUSTER_3,CLUSTER_6
b,"numpy.array([6,3,4,8,9,7,1])",CLUSTER_3,CLUSTER_6
index,numpy.where((a>=5),CLUSTER_3,CLUSTER_6
index,"numpy.where(np.logical_and(a>=5,a<=10)",CLUSTER_3,CLUSTER_6
pair_max,"numpy.vectorize(maxx,otypes=[float])",CLUSTER_3,CLUSTER_6
hdb_crimes_aggregate,"pandas.pivot_table(df,index=['hdb_c'],values='id',columns=['offence_category'],aggfunc='count')",CLUSTER_5,CLUSTER_9
df_all,"pandas.read_csv('crimes_lahore_final2014to2016labeledbysayyab.csv',dtype=""object"")",CLUSTER_5,CLUSTER_9
df_all['Timestamp'],"pandas.to_datetime(df_all['Timestamp'],infer_datetime_format=True)",CLUSTER_5,CLUSTER_9
db,"sklearn.cluster.DBSCAN(eps=.000007840,min_samples=9,metric='haversine')",CLUSTER_5,CLUSTER_9
tmp,"re.split('\s{2,}',text)",CLUSTER_10,CLUSTER_4
coronavirus,"pandas.DataFrame(columns=['Province/State','Country/Region','LastUpdate','Confirmed','Deaths','Recovered'])",CLUSTER_4,CLUSTER_11
dates,"pandas.DataFrame({'date':dates,'count':nan})",CLUSTER_4,CLUSTER_11
dates,"pandas.DataFrame({'date':dates,'count':nan})",CLUSTER_4,CLUSTER_11
dates,"pandas.DataFrame({'date':dates,'count':nan})",CLUSTER_4,CLUSTER_11
dates,"pandas.DataFrame({'date':dates,'count':nan})",CLUSTER_4,CLUSTER_11
suisse,"pandas.concat([pd.read_csv('/mnt/datastore/data/medias/media_suisse_fr.csv',header=None)",CLUSTER_4,CLUSTER_11
dates,"pandas.date_range(start='01/22/2020',end=pd.datetime.now()",CLUSTER_4,CLUSTER_11
coronavirus_merge,"pandas.pivot_table(coronavirus_merge,values=['Infections','Deces','Guerisons','GTrend','Tweets'],index=['date'],columns=['country'])",CLUSTER_4,CLUSTER_11
coronavirus_by_country,"pandas.pivot_table(coronavirus_count,values=['Infections','Deces','Guerisons'],index=['date'],
columns=['Pays'])",CLUSTER_4,CLUSTER_11
all_countries,"pandas.read_csv(""https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv"")",CLUSTER_4,CLUSTER_11
coronavirus,"pandas.read_csv(""/mnt/datastore/data/coronavirus_2020-03-16.csv"",sep="";"")",CLUSTER_4,CLUSTER_11
daily_report,pandas.read_csv(url),CLUSTER_4,CLUSTER_11
allemagne,"pandas.read_csv('/mnt/datastore/data/medias/media_allemagne.csv',header=None)",CLUSTER_4,CLUSTER_11
france,"pandas.read_csv('/mnt/datastore/data/medias/media_france.csv',header=None)",CLUSTER_4,CLUSTER_11
italy,"pandas.read_csv('/mnt/datastore/data/medias/media_italy.csv',header=None)",CLUSTER_4,CLUSTER_11
interest,pandas.read_csv('/mnt/datastore/data/gtrend_by_country.csv'),CLUSTER_4,CLUSTER_11
interest,pandas.read_csv('/mnt/datastore/data/gtrend_by_country.csv'),CLUSTER_4,CLUSTER_11
interest,pandas.read_csv('/mnt/datastore/data/gtrend_by_country.csv'),CLUSTER_4,CLUSTER_11
interest,pandas.read_csv('/mnt/datastore/data/gtrend_by_country.csv'),CLUSTER_4,CLUSTER_11
medias_it,"pandas.read_csv('/mnt/datastore/data/medias/media_italy.csv',header=None)",CLUSTER_4,CLUSTER_11
all_geo_tweets_eu_count['date'],pandas.to_datetime(all_geo_tweets_eu_count['date']),CLUSTER_4,CLUSTER_11
coronavirus['date'],pandas.to_datetime(coronavirus['Date']),CLUSTER_4,CLUSTER_11
coronavirus_count['date'],"pandas.to_datetime(coronavirus_count[['Year','Month','Day']])",CLUSTER_4,CLUSTER_11
coronavirus['LastUpdate'],pandas.to_datetime(coronavirus['LastUpdate']),CLUSTER_4,CLUSTER_11
coronavirus_count['date'],"pandas.to_datetime(coronavirus_count[['Year','Month','Day']])",CLUSTER_4,CLUSTER_11
count_FR['date'],pandas.to_datetime(count_FR['date']),CLUSTER_4,CLUSTER_11
count_IT['date'],pandas.to_datetime(count_IT['date']),CLUSTER_4,CLUSTER_11
count_CH['date'],pandas.to_datetime(count_CH['date']),CLUSTER_4,CLUSTER_11
count_DE['date'],pandas.to_datetime(count_DE['date']),CLUSTER_4,CLUSTER_11
count_US['date'],pandas.to_datetime(count_US['date']),CLUSTER_4,CLUSTER_11
medias['date'],pandas.to_datetime(pandas.to_datetime(medias['date']),CLUSTER_4,CLUSTER_11
interest['date'],pandas.to_datetime(interest['date']),CLUSTER_4,CLUSTER_11
tweet_count['date'],pandas.to_datetime(tweet_count['date']),CLUSTER_4,CLUSTER_11
interest_it['date'],pandas.to_datetime(interest_it['date']),CLUSTER_4,CLUSTER_11
interest_it['date'],pandas.to_datetime(interest_it['date']),CLUSTER_4,CLUSTER_11
medias_it['date'],pandas.to_datetime(medias_it['date']),CLUSTER_4,CLUSTER_11
medias_it['date'],pandas.to_datetime(medias_it['date']),CLUSTER_4,CLUSTER_11
count_IT['date'],pandas.to_datetime(count_IT['date']),CLUSTER_4,CLUSTER_11
,numpy.empty(dates.size),CLUSTER_4,CLUSTER_11
,numpy.empty(dates.size),CLUSTER_4,CLUSTER_11
,numpy.empty(dates.size),CLUSTER_4,CLUSTER_11
,numpy.empty(dates.size),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
sns_cmap,"seaborn.light_palette(""Navy"",as_cmap=True)",CLUSTER_4,CLUSTER_11
sns_cmap,"seaborn.light_palette(""Navy"",as_cmap=True)",CLUSTER_4,CLUSTER_11
sns_cmap,"seaborn.light_palette(""Navy"",as_cmap=True)",CLUSTER_4,CLUSTER_11
classes,os.listdir(CORPUS_PATH),CLUSTER_4,CLUSTER_0
X_train,numpy.concatenate(image_list),CLUSTER_4,CLUSTER_0
labels,numpy.concatenate(label_list),CLUSTER_4,CLUSTER_0
class_votes,numpy.zeros(num_classes),CLUSTER_8,CLUSTER_3
data,pandas.read_csv('01_homework_dataset.csv'),CLUSTER_8,CLUSTER_3
rotatedval_complete,"numpy.array((X3,Y3,Z3)",CLUSTER_8,CLUSTER_3
Y1,numpy.cos(alpha),CLUSTER_8,CLUSTER_3
X2,numpy.cos(beta),CLUSTER_8,CLUSTER_3
X3,numpy.cos(delta),CLUSTER_8,CLUSTER_3
alpha,numpy.radians(-Pitch),CLUSTER_8,CLUSTER_3
beta,numpy.radians(-Roll),CLUSTER_8,CLUSTER_3
delta,numpy.radians(-Azimuth),CLUSTER_8,CLUSTER_3
Z1,numpy.sin(alpha),CLUSTER_8,CLUSTER_3
Y3,numpy.sin(delta),CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame(
[
(10,1,5,90,0,0)",CLUSTER_8,CLUSTER_3
info,"pandas.DataFrame({""ID"":['apms','lit','y2h'],""nodos"":nodos,""enlaces"":enlaces,""dirigido"":dirigido,""kmean"":kmean,
""kmin"":kmin,""kmax"":kmax,""densidad"":densidad,""clusteringglobal"":clusteringglobal,
""clusteringlocal"":clusteringlocal,""diametro"":diametro})",CLUSTER_1,CLUSTER_9
"k,pk",numpy.array(gord),CLUSTER_1,CLUSTER_9
"k,pk",numpy.array(gord),CLUSTER_1,CLUSTER_9
logx,numpy.log10(bins),CLUSTER_1,CLUSTER_9
logy,numpy.log10(pk),CLUSTER_1,CLUSTER_9
grados,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
grados,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
gradosporgrado,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
gradosporgrado2,collections.defaultdict(int),CLUSTER_1,CLUSTER_9
out,"scipy.optimize.leastsq(errfunc,pinit,args=(logx,logy)",CLUSTER_1,CLUSTER_9
X_grad,numpy.zeros(X.shape),CLUSTER_4,CLUSTER_11
Theta_grad,numpy.zeros(Theta.shape),CLUSTER_4,CLUSTER_11
my_ratings,numpy.zeros(n_m),CLUSTER_4,CLUSTER_11
grad,numpy.concatenate([X_grad.ravel(),CLUSTER_4,CLUSTER_11
initial_parameters,numpy.concatenate([X.ravel(),CLUSTER_4,CLUSTER_11
p,"numpy.dot(X,Theta.T)",CLUSTER_4,CLUSTER_11
ix,numpy.argsort(my_predictions),CLUSTER_4,CLUSTER_11
J,numpy.sum(np.square(X.dot(Theta.T),CLUSTER_4,CLUSTER_11
Y,"numpy.hstack([my_ratings[:,None],Y])",CLUSTER_4,CLUSTER_11
R,numpy.hstack([(my_ratings>0),CLUSTER_4,CLUSTER_11
res,"scipy.optimize.minimize(lambdax:cofiCostFunc(x,Ynorm,R,num_users,
num_movies,num_features,lambda_)",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join('Data','ex8_movies.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join('Data','ex8_movieParams.mat')",CLUSTER_4,CLUSTER_11
data,"scipy.io.loadmat(os.path.join('Data','ex8_movies.mat')",CLUSTER_4,CLUSTER_11
cb,matplotlib.pyplot.colorbar(),CLUSTER_1,CLUSTER_10
x,"numpy.arange(0,N)",CLUSTER_1,CLUSTER_10
y,"numpy.arange(0,N)",CLUSTER_1,CLUSTER_10
Vc,"numpy.zeros((N,N)",CLUSTER_1,CLUSTER_10
V,"numpy.zeros((N,N,Ns)",CLUSTER_1,CLUSTER_10
conv_l,"numpy.zeros((Ns,1)",CLUSTER_1,CLUSTER_10
Ex,"numpy.zeros((N,N)",CLUSTER_1,CLUSTER_10
Ey,"numpy.zeros((N,N)",CLUSTER_1,CLUSTER_10
cost,numpy.zeros(iters),CLUSTER_4,CLUSTER_11
term,"numpy.multiply(error,X[:,j])",CLUSTER_4,CLUSTER_11
inner,numpy.power(((X*theta.T),CLUSTER_4,CLUSTER_11
x,numpy.linspace(mydata.Population.min(),CLUSTER_4,CLUSTER_11
X,numpy.matrix(X),CLUSTER_4,CLUSTER_11
y,numpy.matrix(y),CLUSTER_4,CLUSTER_11
theta,"numpy.matrix(np.array([0,0])",CLUSTER_4,CLUSTER_11
temp,numpy.matrix(np.zeros(theta.shape),CLUSTER_4,CLUSTER_11
X2,numpy.matrix(X2.values),CLUSTER_4,CLUSTER_11
y2,numpy.matrix(y2.values),CLUSTER_4,CLUSTER_11
theta2,"numpy.matrix(np.array([0,0,0])",CLUSTER_4,CLUSTER_11
mydata,"pandas.read_csv(path,header=None,names=['Population','Profit'])",CLUSTER_4,CLUSTER_11
mydata2,"pandas.read_csv(path,header=None,names=['Size','Bedrooms','Price'])",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_4,CLUSTER_11
path,os.getcwd(),CLUSTER_4,CLUSTER_11
path,os.getcwd(),CLUSTER_4,CLUSTER_11
review_text,"re.sub(""[^a-zA-Z]"","""",review_text)",CLUSTER_5,CLUSTER_1
train,"pandas.read_csv(r'C:\Laury\Kaggle_Sentiment/labeledTrainData.tsv',header=0,delimiter=""\t"",quoting=3)",CLUSTER_5,CLUSTER_1
test,"pandas.read_csv(r'C:\Laury\Kaggle_Sentiment/testData.tsv',header=0,delimiter=""\t"",quoting=3)",CLUSTER_5,CLUSTER_1
df,"pandas.read_csv('https://github.com/prasertcbs/tutorial/raw/master/mtcars.csv',nrows=10,index_col=0)",CLUSTER_8,CLUSTER_4
df2,"pandas.read_csv('https://github.com/prasertcbs/tutorial/raw/master/gapminder.csv',index_col=[0,1])",CLUSTER_8,CLUSTER_4
df3,pandas.read_csv('https://github.com/prasertcbs/tutorial/raw/master/gapminder.csv'),CLUSTER_8,CLUSTER_4
tips,seaborn.load_dataset('tips'),CLUSTER_3,CLUSTER_6
ldf,"pandas.DataFrame(l1,columns=['query'])",CLUSTER_0,CLUSTER_1
temp,"pandas.DataFrame(X,columns=temp_name)",CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""Corpus_1.csv"")",CLUSTER_0,CLUSTER_1
text,"re.sub(r'[0-9]*','',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(""[
text=re.sub(r'\s\s+','',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(r'[0-9]*','',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(""[
text=re.sub(r'\s\s+','',text)",CLUSTER_0,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_0,CLUSTER_1
WORDS,"collections.Counter(words(open('big_ml.txt',encoding=""utf8"")",CLUSTER_0,CLUSTER_1
inputs,"numpy.array([[0.5,-0.2,0.1]])",CLUSTER_1,CLUSTER_3
targets,numpy.array([[0.4]]),CLUSTER_1,CLUSTER_3
test_w_i_h,"numpy.array([[0.1,-0.2],
[0.4,0.5],
[-0.3,0.2]])",CLUSTER_1,CLUSTER_3
test_w_h_o,"numpy.array([[0.3],
[-0.1]])",CLUSTER_1,CLUSTER_3
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_1,CLUSTER_3
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_1,CLUSTER_3
rides,pandas.read_csv(data_path),CLUSTER_1,CLUSTER_3
dates,pandas.to_datetime(rides.loc[test_data.index]['dteday']),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_3
_,matplotlib.pyplot.ylim(),CLUSTER_1,CLUSTER_3
y,"pandas.Series(shuffle_csv[""class""])",CLUSTER_6,CLUSTER_3
csv_file,"pandas.read_csv(file_name,names=ref_names)",CLUSTER_6,CLUSTER_3
df,"pandas.DataFrame({'Name':name,
'Role':role,
'AreaofInterest':area}
)",CLUSTER_9,CLUSTER_2
url,requests.get('https://www.sfu.ca/computing/people/faculty.html'),CLUSTER_9,CLUSTER_2
temp,"re.sub('<.*?>','',temp)",CLUSTER_9,CLUSTER_2
output,"json.loads(output,strict=False)",CLUSTER_0,CLUSTER_6
output,"json.loads(output,strict=False)",CLUSTER_0,CLUSTER_6
d,collections.defaultdict(list),CLUSTER_0,CLUSTER_6
arr,numpy.array(data),CLUSTER_0,CLUSTER_6
arr,numpy.hstack(arr),CLUSTER_0,CLUSTER_6
rs,"re.match(pattern,string1)",CLUSTER_10,CLUSTER_4
rs_2,"re.match(ptn_2,string1)",CLUSTER_10,CLUSTER_4
m,re.match(r'([\w]+),CLUSTER_10,CLUSTER_4
m,"re.match(r""(\w+)",CLUSTER_10,CLUSTER_4
m,"re.match(r""(\d+)",CLUSTER_10,CLUSTER_4
m,"re.match(r""(\d+)",CLUSTER_10,CLUSTER_4
m,re.search('(?P<name>.*),CLUSTER_10,CLUSTER_4
mm_1,re.search('(?P<name>[\w]+),CLUSTER_10,CLUSTER_4
mm_2,re.search(r'(?P<name>[\w]+),CLUSTER_10,CLUSTER_4
s,re.search('(Sergey\'snumber),CLUSTER_10,CLUSTER_4
match,"re.search(""(nn)",CLUSTER_10,CLUSTER_4
m,"re.search(""(nn)",CLUSTER_10,CLUSTER_4
m_1,re.finditer(r'(?P<first>[.]+),CLUSTER_10,CLUSTER_4
m_2,re.finditer(r'(?:[.]+),CLUSTER_10,CLUSTER_4
r,"re.compile(r""var(\w+|\d+)",CLUSTER_10,CLUSTER_4
p,re.compile(r'[\d]+'),CLUSTER_10,CLUSTER_4
m,"re.compile(r""(?P<first>[(])",CLUSTER_10,CLUSTER_4
pattern,"re.compile(""o[gh]"")",CLUSTER_10,CLUSTER_4
p,re.compile(r'(?P<food1>[\w]+),CLUSTER_10,CLUSTER_4
p,re.compile(r'(?:[\w]+),CLUSTER_10,CLUSTER_4
vertices,"numpy.array([[[0,height],[440,320],[520,320],[width,height]]],dtype=np.int32)",CLUSTER_4,CLUSTER_11
vertices,"numpy.array([[[0,height],[440,320],[520,320],[width,height]]],dtype=np.int32)",CLUSTER_4,CLUSTER_11
vertices,"numpy.array([[[0,height],[440,320],[520,320],[width,height]]],dtype=np.int32)",CLUSTER_4,CLUSTER_11
ori_line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
mask,numpy.zeros_like(img),CLUSTER_4,CLUSTER_11
mean_slope,numpy.mean(slopes),CLUSTER_4,CLUSTER_11
mean_intercept,numpy.mean(intercepts),CLUSTER_4,CLUSTER_11
mean_slope,numpy.mean(keep_slopes),CLUSTER_4,CLUSTER_11
mean_intercept,numpy.mean(keep_intercepts),CLUSTER_4,CLUSTER_11
std_slope,numpy.std(slopes),CLUSTER_4,CLUSTER_11
img_files,os.listdir(img_dir),CLUSTER_4,CLUSTER_11
imgs,os.listdir(img_dir),CLUSTER_4,CLUSTER_11
x,numpy.arange(7),CLUSTER_1,CLUSTER_9
true_variances,"numpy.array([0,662,9501,251,284,1872,555])",CLUSTER_1,CLUSTER_9
Y_total,numpy.array(scaled_Y_parts),CLUSTER_1,CLUSTER_9
thisP,numpy.array(P_models),CLUSTER_1,CLUSTER_9
avg_rsq,numpy.array(rsqs),CLUSTER_1,CLUSTER_9
A,"numpy.array([[-1,0,0,1,0,0,0],
[0,-1,0,1,0,0,0],
[1,1,0,-1,0,0,0],
[-1,0,0,0,1,0,0],
[0,0,-1,0,1,0,0],
[1,0,1,0,-1,0,0],
[0,-1,0,0,0,1,0],
[0,0,-1,0,0,1,0],
[0,1,1,0,0,-1,0],
[-1,0,0,0,0,0,1],
[0,-1,0,0,0,0,1],
[0,0,-1,0,0,0,1],
[0,0,0,-1,0,0,1],
[0,0,0,0,-1,0,1],
[0,0,0,0,0,-1,1],
[1,1,1,0,0,0,-1],
[0,0,0,1,1,0,-1],
[0,0,0,1,0,1,-1],
[0,0,0,0,1,1,-1],
[1,0,0,0,0,1,-1],
[0,1,0,0,1,0,-1],
[0,0,1,1,0,0,-1],
[0,0,-1,0,1,1,-1],
[0,-1,0,1,0,1,-1],
[-1,0,0,1,1,0,-1]])",CLUSTER_1,CLUSTER_9
B,"numpy.array([[0,0,0,0,0,-1,1],
[0,0,0,0,-1,0,1],
[0,0,0,-1,0,0,1],
[0,0,-1,0,1,1,-1],
[0,-1,0,1,0,1,-1],
[-1,0,0,1,1,0,-1],
[1,1,1,-1,-1,-1,1],
])",CLUSTER_1,CLUSTER_9
fixed_b,numpy.array(b),CLUSTER_1,CLUSTER_9
actual_rsq_biases,numpy.array(rsq_est),CLUSTER_1,CLUSTER_9
actual_rsq_biases,numpy.array(rsq_est),CLUSTER_1,CLUSTER_9
biases,"numpy.zeros((maxs.shape[1],7)",CLUSTER_1,CLUSTER_9
preds,"numpy.dot(Xcomb.T[N_R:],wts)",CLUSTER_1,CLUSTER_9
alphas,"numpy.logspace(-4,3,20)",CLUSTER_1,CLUSTER_9
XX,numpy.corrcoef(np.vstack(X_parts),CLUSTER_1,CLUSTER_9
XX_orthog,numpy.corrcoef(np.vstack(X_parts),CLUSTER_1,CLUSTER_9
X_parts,"numpy.vsplit(cat_orthog_X_parts.T,np.cumsum(P_parts)",CLUSTER_1,CLUSTER_9
"wts,res,ranks,sings","numpy.linalg.lstsq(Xcomb.T[:N_R],zY_total[:N_R])",CLUSTER_1,CLUSTER_9
"cat_orthog_X_parts,_,_",numpy.linalg.svd(np.vstack(X_parts),CLUSTER_1,CLUSTER_9
res,"scipy.optimize.fmin_slsqp(minfun,np.zeros(7)",CLUSTER_1,CLUSTER_9
REQUEST,"json.dumps({
'body':{
'name':'JaneDoe',
'phone':'888-555-5245',
'address':'123BellviewDrive,Somewhere,NC'
}
})",CLUSTER_10,CLUSTER_4
REQUEST,"json.dumps({
'body':{
'name':'JaneandJohnDoe',
'address':'321ViewbellLane,SomewhereElse,SC'
},
'path':{
'contact_id':globals()",CLUSTER_10,CLUSTER_4
req,json.loads(REQUEST),CLUSTER_10,CLUSTER_4
req,json.loads(REQUEST),CLUSTER_10,CLUSTER_4
req,json.loads(REQUEST),CLUSTER_10,CLUSTER_4
req,json.loads(REQUEST),CLUSTER_10,CLUSTER_4
resp,requests.get(URL+'/contacts?name=billi'),CLUSTER_10,CLUSTER_4
resp,requests.get(URL+'/contacts'),CLUSTER_10,CLUSTER_4
post_resp,"requests.post(URL+'/contacts',json={
'name':'AliceAdams',
'phone':'919-555-6712',
'address':'42WallabyWay,Sydney,NC'
})",CLUSTER_10,CLUSTER_4
put_resp,"requests.put(URL+'/contacts/'+first_contact_id,{
'phone':'919-444-5601'
})",CLUSTER_10,CLUSTER_4
y,"numpy.zeros((1,Ty)",CLUSTER_4,CLUSTER_11
x,"numpy.expand_dims(x,axis=0)",CLUSTER_4,CLUSTER_11
X,"numpy.load(""./XY_train/X.npy"")",CLUSTER_4,CLUSTER_11
Y,"numpy.load(""./XY_train/Y.npy"")",CLUSTER_4,CLUSTER_11
X_dev,"numpy.load(""./XY_dev/X_dev.npy"")",CLUSTER_4,CLUSTER_11
Y_dev,"numpy.load(""./XY_dev/Y_dev.npy"")",CLUSTER_4,CLUSTER_11
final_df,pandas.read_csv(final_data),CLUSTER_8,CLUSTER_4
mean_saleprice,pandas.DataFrame(train.groupby(['GrLivArea']),CLUSTER_5,CLUSTER_9
index,"pandas.DataFrame(test.Id,columns=['Id'])",CLUSTER_5,CLUSTER_9
index,"pandas.DataFrame(test.Id,columns=['Id'])",CLUSTER_5,CLUSTER_9
pred,pandas.DataFrame(clf.predict(Xte),CLUSTER_5,CLUSTER_9
index,"pandas.DataFrame(test.Id,columns=['Id'])",CLUSTER_5,CLUSTER_9
pred1,pandas.DataFrame(clf.predict(test_fin),CLUSTER_5,CLUSTER_9
pred2,pandas.DataFrame(clf2.predict(test_fin_ridge),CLUSTER_5,CLUSTER_9
pred3,pandas.DataFrame(clf3.predict(test_fin_ridge),CLUSTER_5,CLUSTER_9
pred_final_1,pandas.DataFrame(np.exp(pred_1),CLUSTER_5,CLUSTER_9
pred_final_2,pandas.DataFrame(np.exp(pred_2),CLUSTER_5,CLUSTER_9
pred_Lasso,pandas.DataFrame(np.exp(pred3),CLUSTER_5,CLUSTER_9
pred_xg,pandas.DataFrame(np.exp(pred_xg),CLUSTER_5,CLUSTER_9
all_data,"all_data=pandas.concat((train.loc[:,'MSSubClass':'SaleCondition'],test.loc[:,'MSSubClass':'SaleCondition'])",CLUSTER_5,CLUSTER_9
tr_te,"pandas.concat((train_clf4,test_clf4)",CLUSTER_5,CLUSTER_9
train_str_dum,pandas.get_dummies(train_str),CLUSTER_5,CLUSTER_9
test_str_dum,pandas.get_dummies(test_str),CLUSTER_5,CLUSTER_9
new_train,"pandas.merge(train_flo,train_str_dum,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
new_test,"pandas.merge(test_flo,test_str_dum,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
train_clf2,"pandas.merge(train_clf2,train[['LotFrontage','MasVnrArea','GarageYrBlt']],left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
train_clf3,"pandas.merge(train_clf2,pd.DataFrame(train_clf2_pca)",CLUSTER_5,CLUSTER_9
test_clf2,"pandas.merge(test_clf2,test[['LotFrontage','MasVnrArea','GarageYrBlt']],left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
test_clf3,"pandas.merge(test_clf2,pd.DataFrame(clus.transform(test_clf2)",CLUSTER_5,CLUSTER_9
pred_submit,"pandas.merge(index,pred_final,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
pred_Lasso_submit,"pandas.merge(index,pred_Lasso,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
pred_xg_submit,"pandas.merge(index,pred_xg,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
pred_xg_lasso_submit,"pandas.merge(index,pred_final_2,left_index=True,right_index=True)",CLUSTER_5,CLUSTER_9
train,"pandas.read_csv(""../input/train.csv"")",CLUSTER_5,CLUSTER_9
test,"pandas.read_csv(""../input/test.csv"")",CLUSTER_5,CLUSTER_9
sample_index,numpy.arange(X.shape[0]),CLUSTER_5,CLUSTER_9
sample_index,numpy.arange(X.shape[0]),CLUSTER_5,CLUSTER_9
y,numpy.array(pd.DataFrame(np.log(train.SalePrice),CLUSTER_5,CLUSTER_9
y2,numpy.array(pd.DataFrame(np.log(train.SalePrice),CLUSTER_5,CLUSTER_9
data_new[i],numpy.array(data_new[i]),CLUSTER_5,CLUSTER_9
test_new[i],numpy.array(test_new[i]),CLUSTER_5,CLUSTER_9
train_np,numpy.array(train_clf3),CLUSTER_5,CLUSTER_9
train_fin,"numpy.array(Select.fit_transform(train_clf4,y)",CLUSTER_5,CLUSTER_9
test_fin,numpy.array(Select.transform(test_clf4),CLUSTER_5,CLUSTER_9
train_fin_ridge,numpy.array(robust_scaler.fit_transform(train_clf3),CLUSTER_5,CLUSTER_9
test_fin_ridge,numpy.array(robust_scaler.transform(test_clf3),CLUSTER_5,CLUSTER_9
pred_oob,numpy.zeros(xtrain.shape[0]),CLUSTER_5,CLUSTER_9
pred_test,numpy.zeros(xtest.shape[0]),CLUSTER_5,CLUSTER_9
pred,numpy.zeros(xte.shape[0]),CLUSTER_5,CLUSTER_9
number_of_batches,numpy.ceil(X.shape[0]/batch_size),CLUSTER_5,CLUSTER_9
train[skewed_feats],numpy.log1p(train[skewed_feats]),CLUSTER_5,CLUSTER_9
test[skewed_feats],numpy.log1p(test[skewed_feats]),CLUSTER_5,CLUSTER_9
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_9
clus,sklearn.decomposition.KernelPCA(n_components=25),CLUSTER_5,CLUSTER_9
corr1,scipy.stats.pearsonr(np.array(pd.DataFrame(data[i]),CLUSTER_5,CLUSTER_9
corr2,scipy.stats.pearsonr(np.array(pd.DataFrame(data[i]**3),CLUSTER_5,CLUSTER_9
Select,"sklearn.feature_selection.SelectKBest(f_regression,k=268)",CLUSTER_5,CLUSTER_9
clf2,sklearn.linear_model.Ridge(alpha=21),CLUSTER_5,CLUSTER_9
clf3,"sklearn.linear_model.LassoCV(alphas=[1,0.1,0.001,0.0005])",CLUSTER_5,CLUSTER_9
robust_scaler,sklearn.preprocessing.RobustScaler(),CLUSTER_5,CLUSTER_9
tmp,scipy.sparse.csr_matrix(tr_te),CLUSTER_5,CLUSTER_9
xtr_te,"scipy.sparse.hstack(sparse_data,format='csr')",CLUSTER_5,CLUSTER_9
outputDf,"pandas.DataFrame(data=output,index=[''])",CLUSTER_8,CLUSTER_1
summary_df,"pandas.DataFrame(index=['NoofSamples','NoofFeatures'])",CLUSTER_8,CLUSTER_1
rundata,pandas.DataFrame(metricslist),CLUSTER_8,CLUSTER_1
data_train,"sklearn.datasets.fetch_20newsgroups(subset='train',categories=categories,
shuffle=True,random_state=42,
remove=remove)",CLUSTER_8,CLUSTER_1
data_test,"sklearn.datasets.fetch_20newsgroups(subset='test',categories=categories,
shuffle=True,random_state=42,
remove=remove)",CLUSTER_8,CLUSTER_1
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(data_train.data,data_train.target,test_size=0.33,random_state=42)",CLUSTER_8,CLUSTER_1
grid[:3],"numpy.array(np.meshgrid(x,y,z,indexing='ij')",CLUSTER_12,CLUSTER_9
s_offsets,"numpy.array([0.25,0.2,0.15,0.1,0.05,0.01])",CLUSTER_12,CLUSTER_9
ang_offsets,"numpy.array([-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9,-10,10])",CLUSTER_12,CLUSTER_9
appended_coords,numpy.array(self.points[0].pos),CLUSTER_12,CLUSTER_9
dom_bound,"numpy.array([xmin,xmax,ymin,ymax,zmin,zmax])",CLUSTER_12,CLUSTER_9
xs,numpy.array(xs),CLUSTER_12,CLUSTER_9
ys,numpy.array(ys),CLUSTER_12,CLUSTER_9
zs,numpy.array(zs),CLUSTER_12,CLUSTER_9
dom_bound,"numpy.array([xmin,xmax,ymin,ymax,zmin,zmax])",CLUSTER_12,CLUSTER_9
lcs_candidates,numpy.array(lcs_candidates),CLUSTER_12,CLUSTER_9
t,numpy.asarray(t),CLUSTER_12,CLUSTER_9
p,numpy.asarray(p),CLUSTER_12,CLUSTER_9
h,numpy.asarray(h),CLUSTER_12,CLUSTER_9
ps,numpy.asarray(ps),CLUSTER_12,CLUSTER_9
grid,"numpy.zeros((12,x.shape[0],y.shape[0],z.shape[0])",CLUSTER_12,CLUSTER_9
mask_c,"numpy.zeros(mask_a.shape,dtype=np.bool)",CLUSTER_12,CLUSTER_9
presences,numpy.zeros((len(lcs_candidates),CLUSTER_12,CLUSTER_9
ret,numpy.empty(x.shape),CLUSTER_12,CLUSTER_9
xi3_sinusoid,"numpy.empty((nx,ny,nz,3)",CLUSTER_12,CLUSTER_9
seps,numpy.empty(n),CLUSTER_12,CLUSTER_9
interpoint_dist,numpy.empty(n),CLUSTER_12,CLUSTER_9
interpoint_dist,numpy.empty(n),CLUSTER_12,CLUSTER_9
hessian,"numpy.empty((x.shape[0],y.shape[0],z.shape[0],3,3)",CLUSTER_12,CLUSTER_9
d0,"numpy.empty((mf_ps.shape[0]-1,mf_ps.shape[0])",CLUSTER_12,CLUSTER_9
d1,"numpy.empty((mf_ps.shape[0]-1,mf_ps.shape[0])",CLUSTER_12,CLUSTER_9
d2,"numpy.empty((mf_ps.shape[0]-1,mf_ps.shape[0])",CLUSTER_12,CLUSTER_9
qvarrs,"numpy.empty((*xs[::10].shape,3)",CLUSTER_12,CLUSTER_9
init_pos,"numpy.empty((Ncores,3)",CLUSTER_12,CLUSTER_9
mask_d,"numpy.empty((nx,ny,nz)",CLUSTER_12,CLUSTER_9
innerprod,"numpy.empty((nx,ny,nz)",CLUSTER_12,CLUSTER_9
t,numpy.ones(pos.shape[1:]),CLUSTER_12,CLUSTER_9
h,numpy.ones(pos.shape[1:]),CLUSTER_12,CLUSTER_9
to_be_added,"numpy.ones(n,dtype=np.bool)",CLUSTER_12,CLUSTER_9
"mask_d[i,j,k]","numpy.any(np.less_equal([d*dps[0]fordindps],0)",CLUSTER_12,CLUSTER_9
indices,numpy.argsort(lambda3s),CLUSTER_12,CLUSTER_9
div,"numpy.ceil(np.linspace(0,x.shape[0],nproc+1)",CLUSTER_12,CLUSTER_9
mask_b,"numpy.less_equal(np.sum(xi3*np.sum(hess_lm3*xi3[...,np.newaxis],axis=3)",CLUSTER_12,CLUSTER_9
mask_a,"numpy.logical_and(np.greater(lm3,1)",CLUSTER_12,CLUSTER_9
h,"numpy.minimum(h,tf-t)",CLUSTER_12,CLUSTER_9
self.A,numpy.sqrt(3),CLUSTER_12,CLUSTER_9
self.B,numpy.sqrt(2),CLUSTER_12,CLUSTER_9
dists,"numpy.sqrt(np.min(d0**2+d1**2+d2**2,axis=0)",CLUSTER_12,CLUSTER_9
dists_mf,"numpy.sqrt(np.min(d0**2+d1**2+d2**2,axis=0)",CLUSTER_12,CLUSTER_9
d0,"numpy.subtract.outer(mf_ps[...,0],ps[...,0])",CLUSTER_12,CLUSTER_9
d1,"numpy.subtract.outer(mf_ps[...,1],ps[...,1])",CLUSTER_12,CLUSTER_9
d2,"numpy.subtract.outer(mf_ps[...,2],ps[...,2])",CLUSTER_12,CLUSTER_9
d0[j],"numpy.subtract.outer(mf_ps[j,0],mf_ps[...,0])",CLUSTER_12,CLUSTER_9
d1[j],"numpy.subtract.outer(mf_ps[j,1],mf_ps[...,1])",CLUSTER_12,CLUSTER_9
d2[j],"numpy.subtract.outer(mf_ps[j,2],mf_ps[...,2])",CLUSTER_12,CLUSTER_9
"x,dx","numpy.linspace(xmin,xmax,nx,retstep=True)",CLUSTER_12,CLUSTER_9
"y,dy","numpy.linspace(ymin,ymax,ny,retstep=True)",CLUSTER_12,CLUSTER_9
"z,dz","numpy.linspace(zmin,zmax,nz,retstep=True)",CLUSTER_12,CLUSTER_9
plane_tols,"numpy.linspace(plane_tol,0.2,11)",CLUSTER_12,CLUSTER_9
dist_tol_factors,"numpy.linspace(1,maxfac,11)",CLUSTER_12,CLUSTER_9
xv,"numpy.linspace(xmin,xmax,4)",CLUSTER_12,CLUSTER_9
yv,"numpy.linspace(ymin,ymax,4)",CLUSTER_12,CLUSTER_9
zv,"numpy.linspace(zmin,zmax,4)",CLUSTER_12,CLUSTER_9
appended_coords,"numpy.vstack((appended_coords,p.pos)",CLUSTER_12,CLUSTER_9
appended_coords,"numpy.vstack((appended_coords,p.pos)",CLUSTER_12,CLUSTER_9
mf_ps,"numpy.vstack((xs,ys,zs)",CLUSTER_12,CLUSTER_9
grad,"numpy.gradient(lm,dx,dy,dz,edge_order=2)",CLUSTER_12,CLUSTER_9
tmp_grad,"numpy.gradient(grad_k,dx,dy,dz,edge_order=2)",CLUSTER_12,CLUSTER_9
interpoint_dist,"numpy.delete(interpoint_dist,i,0)",CLUSTER_12,CLUSTER_9
interpoint_dist,"numpy.delete(interpoint_dist,np.divmod(i+1,n)",CLUSTER_12,CLUSTER_9
seps[i],"numpy.linalg.norm(set_suggestion[np.divmod(i+1,n)",CLUSTER_12,CLUSTER_9
"u,s,v",numpy.linalg.svd(jac),CLUSTER_12,CLUSTER_9
t_start,time.time(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_12,CLUSTER_9
start,time.time(),CLUSTER_12,CLUSTER_9
img_list,numpy.asarray(img_list),CLUSTER_4,CLUSTER_0
temp,numpy.frombuffer(canvas.tostring_rgb(),CLUSTER_4,CLUSTER_0
temp,numpy.frombuffer(canvas.tostring_rgb(),CLUSTER_4,CLUSTER_0
mask_list,"numpy.moveaxis(values_list[3],2,0)",CLUSTER_4,CLUSTER_0
eventlist,"numpy.load(EVENTPATH+f'vid{v:03}_sub{s:02}_eventlist.npy',allow_pickle=True)",CLUSTER_4,CLUSTER_0
eventlist,"numpy.load(EVENTPATH+f'vid{v:03}_sub{s:02}_eventlist.npy',allow_pickle=True)",CLUSTER_4,CLUSTER_0
masked_array,"numpy.ma.masked_where(total_mask==0,total_mask)",CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,gridspec_kw={'height_ratios':[5,1],'wspace':0,'hspace':0.05},dpi=200)",CLUSTER_4,CLUSTER_0
"fix,ax","matplotlib.pyplot.subplots(figsize=(14.4,9)",CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,gridspec_kw={'height_ratios':[5,1],'wspace':0,'hspace':0.05},dpi=200)",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(txtloc,sep='\t')",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(txtloc,sep='\t')",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(txtloc,sep='\t')",CLUSTER_4,CLUSTER_0
ax,"seaborn.lineplot(x='x',y='y',hue='event_tracker',marker=""o"",alpha=0.5,sort=False,lw=1,data=df)",CLUSTER_4,CLUSTER_0
r,requests.get(url),CLUSTER_9,CLUSTER_2
tokens,"re.findall('\w+',sentence)",CLUSTER_9,CLUSTER_2
df,pandas.read_csv('titanic.csv'),CLUSTER_7,CLUSTER_3
lm,"seaborn.lmplot(x='Age',y='Fare',data=df,hue='Sex',fit_reg=False)",CLUSTER_7,CLUSTER_3
expected_next_h,"numpy.asarray([
[0.24635157,0.28610883,0.32240467,0.35525807,0.38474904],
[0.49223563,0.55611431,0.61507696,0.66844003,0.7159181],
[0.56735664,0.66310127,0.74419266,0.80889665,0.858299]])",CLUSTER_1,CLUSTER_10
expected_next_c,"numpy.asarray([
[0.32986176,0.39145139,0.451556,0.51014116,0.56717407],
[0.66382255,0.76674007,0.87195994,0.97902709,1.08751345],
[0.74192008,0.90592151,1.07717006,1.25120233,1.42395676]])",CLUSTER_1,CLUSTER_10
expected_h,"numpy.asarray([
[[0.01764008,0.01823233,0.01882671,0.0194232],
[0.11287491,0.12146228,0.13018446,0.13902939],
[0.31358768,0.33338627,0.35304453,0.37250975]],
[[0.45767879,0.4761092,0.4936887,0.51041945],
[0.6704845,0.69350089,0.71486014,0.7346449],
[0.81733511,0.83677871,0.85403753,0.86935314]]])",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,1.2,num=N*D)",CLUSTER_1,CLUSTER_10
prev_h,"numpy.linspace(-0.3,0.7,num=N*H)",CLUSTER_1,CLUSTER_10
prev_c,"numpy.linspace(-0.4,0.9,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-2.1,1.3,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.7,2.2,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.3,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,0.6,num=N*T*D)",CLUSTER_1,CLUSTER_10
h0,"numpy.linspace(-0.4,0.8,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-0.2,0.9,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.3,0.6,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.2,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
model.params[k],"numpy.linspace(-1.4,1.3,num=v.size)",CLUSTER_1,CLUSTER_10
features,"numpy.linspace(-0.5,1.7,num=N*D)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(1,figsize=(18,10)",CLUSTER_5,CLUSTER_10
fig,"matplotlib.pyplot.figure(1,figsize=(18,10)",CLUSTER_5,CLUSTER_10
PCA_var,sklearn.decomposition.PCA(n_components=3),CLUSTER_5,CLUSTER_10
cm,"sklearn.metrics.confusion_matrix(y_test,y_predic)",CLUSTER_5,CLUSTER_10
tick_marks,numpy.arange(len(class_labels_),CLUSTER_5,CLUSTER_10
class_labels_,"numpy.array(['Group1','Group2','Group3'])",CLUSTER_5,CLUSTER_10
data,"numpy.loadtxt(fname=f,delimiter=',',dtype='double')",CLUSTER_5,CLUSTER_10
labels_,"numpy.loadtxt(fname=f,delimiter=',',dtype='string')",CLUSTER_5,CLUSTER_10
data,"numpy.loadtxt(fname=f,delimiter=',',dtype='double')",CLUSTER_5,CLUSTER_10
df_org,pandas.read_csv(r'D:\ML_WORK\Kaggle\Titanic\train.csv'),CLUSTER_7,CLUSTER_3
M,numpy.linalg.inv(D),CLUSTER_1,CLUSTER_9
"w,v",scipy.linalg.eig(M),CLUSTER_1,CLUSTER_9
"X,y","sklearn.datasets.make_s_curve(n_samples=1000,noise=.6,random_state=0)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
y_pos,numpy.arange(len(objects),CLUSTER_4,CLUSTER_0
X_train_left_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_right_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_up_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_down_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_left_down_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_right_up_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_left_up_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
X_train_right_down_shift,numpy.zeros((len(X_train),CLUSTER_4,CLUSTER_0
x,"numpy.roll(a,-1,axis=1)",CLUSTER_4,CLUSTER_0
x,"numpy.roll(a,1,axis=1)",CLUSTER_4,CLUSTER_0
x,"numpy.roll(a,-1,axis=0)",CLUSTER_4,CLUSTER_0
x,"numpy.roll(a,1,axis=0)",CLUSTER_4,CLUSTER_0
big_image,"numpy.append(big_image,images[i],axis=0)",CLUSTER_4,CLUSTER_0
input_files,os.listdir(test_image_dir),CLUSTER_4,CLUSTER_0
y,"numpy.dot(x,w)",CLUSTER_2,CLUSTER_7
y,"ed.Normal(loc=numpy.dot(X,M)",CLUSTER_2,CLUSTER_7
bbox,"numpy.array(((280,710)",CLUSTER_12,CLUSTER_3
"plt.scatter(xy_cam[xy_cam_mask,0],xy_cam[xy_cam_mask,1],c",numpy.log1p(r[xy_cam_mask]),CLUSTER_12,CLUSTER_3
xyz_homogen,"numpy.pad(xyz,((0,0)",CLUSTER_12,CLUSTER_3
r,"numpy.linalg.norm(xyz[:,:2],axis=1)",CLUSTER_12,CLUSTER_3
res,requests.get(mwe_url),CLUSTER_10,CLUSTER_2
df,pandas.DataFrame(catalog),CLUSTER_10,CLUSTER_2
doc_df,"pandas.concat(
[df.filter(regex=(""^document"")",CLUSTER_10,CLUSTER_2
features_of_players,"pandas.DataFrame({'quadrant':player_data['playerx'],'playerz':player_data['playerz']})",CLUSTER_8,CLUSTER_1
player_data,"pandas.read_csv(data_filename,delimiter=',')",CLUSTER_8,CLUSTER_1
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,5,figsize=(15,15)",CLUSTER_6,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(1,5,figsize=(15,15)",CLUSTER_6,CLUSTER_11
vertices,"numpy.array([[(0,imshape[0])",CLUSTER_4,CLUSTER_11
vertices,"numpy.array([[(150,imshape[0])",CLUSTER_4,CLUSTER_11
vertices,"numpy.array([[(150,540)",CLUSTER_4,CLUSTER_11
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_4,CLUSTER_11
mask,numpy.zeros_like(img),CLUSTER_4,CLUSTER_11
images,"os.listdir(""test_images/"")",CLUSTER_4,CLUSTER_11
X,pandas.DataFrame(preprocessing.scale(X),CLUSTER_7,CLUSTER_8
data,"pandas.read_csv(""/data/collegescorecard/merged_2011_PP.csv"",encoding=""ISO-8859-1"")",CLUSTER_7,CLUSTER_8
model,sklearn.cluster.KMeans(n_clusters=15),CLUSTER_7,CLUSTER_8
pca_model,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
team_stat,pandas.read_csv(DIRECTORY+'team_stats.csv'),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(20,15)",CLUSTER_7,CLUSTER_8
z,"numpy.linspace(0,32,100)",CLUSTER_7,CLUSTER_8
z,"numpy.linspace(15,70,100)",CLUSTER_7,CLUSTER_8
z,"numpy.linspace(5,10,100)",CLUSTER_7,CLUSTER_8
action,random.choice(list(action_mapping.keys(),CLUSTER_1,CLUSTER_10
env.episodes,"random.sample(env.episodes,2)",CLUSTER_1,CLUSTER_10
ax,"matplotlib.pyplot.subplot(1,3,i+1)",CLUSTER_1,CLUSTER_10
time_start,time.time(),CLUSTER_0,CLUSTER_1
time_end,time.time(),CLUSTER_0,CLUSTER_1
strains['strain_text'],pandas.Series(dtype='str'),CLUSTER_0,CLUSTER_1
dataset,"pandas.read_csv('/content/quoracsv',engine='python',
usecols=['question1','question2','is_duplicate'],
skiprows=random.sample(range(1,data_size)",CLUSTER_0,CLUSTER_1
strains,pandas.read_json('/content/leafly.json'),CLUSTER_0,CLUSTER_1
skiprows,"random.sample(range(1,data_size)",CLUSTER_0,CLUSTER_1
embeddings,numpy.zeros((len(vocabulary.items(),CLUSTER_0,CLUSTER_1
strains['predictions'],"numpy.around(predictions,3)",CLUSTER_0,CLUSTER_1
text,"re.sub('[^a-z]','',text)",CLUSTER_0,CLUSTER_1
"train,validation","sklearn.model_selection.train_test_split(dataset,test_size=0.2)",CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_6,CLUSTER_10
"line,","matplotlib.pyplot.plot(x[:,0],x@a)",CLUSTER_6,CLUSTER_10
s,"re.sub('[0-9]+','0',s)",CLUSTER_5,CLUSTER_10
s,"re.sub('[\W_]+','',s)",CLUSTER_5,CLUSTER_10
nparr0,numpy.array(logistic.coef_[0]),CLUSTER_5,CLUSTER_10
nparr1,numpy.array(logistic.coef_[1]),CLUSTER_5,CLUSTER_10
nparr2,numpy.array(logistic.coef_[2]),CLUSTER_5,CLUSTER_10
nparr3,numpy.array(logistic.coef_[3]),CLUSTER_5,CLUSTER_10
nparr0_2,numpy.array(logistic2.coef_[0]),CLUSTER_5,CLUSTER_10
nparr1_2,numpy.array(logistic2.coef_[1]),CLUSTER_5,CLUSTER_10
nparr2_2,numpy.array(logistic2.coef_[2]),CLUSTER_5,CLUSTER_10
nparr3_2,numpy.array(logistic2.coef_[3]),CLUSTER_5,CLUSTER_10
npR,numpy.array(R_values),CLUSTER_5,CLUSTER_10
rows,"numpy.concatenate((five0,five1,five2,five3)",CLUSTER_5,CLUSTER_10
rows2,"numpy.concatenate((five0_2,five1_2,five2_2,five3_2)",CLUSTER_5,CLUSTER_10
nonzeros,"numpy.concatenate((nparr0[0],nparr1[0],nparr2[0],nparr3[0])",CLUSTER_5,CLUSTER_10
nparr0,numpy.nonzero(logistic.coef_[0]),CLUSTER_5,CLUSTER_10
nparr1,numpy.nonzero(logistic.coef_[1]),CLUSTER_5,CLUSTER_10
nparr2,numpy.nonzero(logistic.coef_[2]),CLUSTER_5,CLUSTER_10
nparr3,numpy.nonzero(logistic.coef_[3]),CLUSTER_5,CLUSTER_10
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_10
logistic,sklearn.linear_model.LogisticRegression(penalty='l2'),CLUSTER_5,CLUSTER_10
lgstc,"sklearn.linear_model.LogisticRegression(penalty='l2',C=cval)",CLUSTER_5,CLUSTER_10
logistic,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
logistic2,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
loge,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
logb,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
logistic,"sklearn.linear_model.LogisticRegression(penalty='l1',C=cval,tol=0.01)",CLUSTER_5,CLUSTER_10
logistic2,"sklearn.linear_model.LogisticRegression(penalty='l2',tol=0.01)",CLUSTER_5,CLUSTER_10
logistic,sklearn.linear_model.LogisticRegression(C=100),CLUSTER_5,CLUSTER_10
mnb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_5,CLUSTER_10
scoree,"sklearn.metrics.f1_score(dev_labels,loge_pred,average=""weighted"")",CLUSTER_5,CLUSTER_10
scoreb,"sklearn.metrics.f1_score(dev_labels,logb_pred,average=""weighted"")",CLUSTER_5,CLUSTER_10
score,"sklearn.metrics.f1_score(dev_labels,log2_pred,average=""weighted"")",CLUSTER_5,CLUSTER_10
newsgroups_train,"sklearn.datasets.fetch_20newsgroups(subset='train',
remove=('headers','footers','quotes')",CLUSTER_5,CLUSTER_10
newsgroups_test,"sklearn.datasets.fetch_20newsgroups(subset='test',
remove=('headers','footers','quotes')",CLUSTER_5,CLUSTER_10
v4,"numpy.arange(1,8)",CLUSTER_1,CLUSTER_10
x,"numpy.arange(1,5)",CLUSTER_1,CLUSTER_10
A,"numpy.arange(1,13)",CLUSTER_1,CLUSTER_10
B,numpy.arange(8),CLUSTER_1,CLUSTER_10
A,numpy.arange(6),CLUSTER_1,CLUSTER_10
v3,"numpy.array([1,3,5])",CLUSTER_1,CLUSTER_10
y,"numpy.array([2,4,6,8])",CLUSTER_1,CLUSTER_10
v1,"numpy.array([3,4])",CLUSTER_1,CLUSTER_10
v2,"numpy.array([4,-3])",CLUSTER_1,CLUSTER_10
A,"numpy.array([[1,3,2],
[1,0,0],
[1,2,2]])",CLUSTER_1,CLUSTER_10
B,"numpy.array([[1,0,5],
[7,5,0],
[2,1,1]])",CLUSTER_1,CLUSTER_10
A,"numpy.array([[4,7],
[2,6]])",CLUSTER_1,CLUSTER_10
A,"numpy.array([[1.,-2.],
[3.,2.]])",CLUSTER_1,CLUSTER_10
x,"numpy.array([[3.],[1.]])",CLUSTER_1,CLUSTER_10
A,"numpy.array([[1,2,3],
[2,5,2],
[6,-3,1]])",CLUSTER_1,CLUSTER_10
b,"numpy.array([6,4,2])",CLUSTER_1,CLUSTER_10
v2,numpy.ones(3),CLUSTER_1,CLUSTER_10
x_vals,"numpy.linspace(0,5,50)",CLUSTER_1,CLUSTER_10
x_vals,"numpy.linspace(0,800,10)",CLUSTER_1,CLUSTER_10
I,numpy.eye(2),CLUSTER_1,CLUSTER_10
A_inv,numpy.linalg.inv(A),CLUSTER_1,CLUSTER_10
x,"numpy.linalg.solve(A,b)",CLUSTER_1,CLUSTER_10
"fix,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
expected_next_h,"numpy.asarray([
[0.24635157,0.28610883,0.32240467,0.35525807,0.38474904],
[0.49223563,0.55611431,0.61507696,0.66844003,0.7159181],
[0.56735664,0.66310127,0.74419266,0.80889665,0.858299]])",CLUSTER_1,CLUSTER_10
expected_next_c,"numpy.asarray([
[0.32986176,0.39145139,0.451556,0.51014116,0.56717407],
[0.66382255,0.76674007,0.87195994,0.97902709,1.08751345],
[0.74192008,0.90592151,1.07717006,1.25120233,1.42395676]])",CLUSTER_1,CLUSTER_10
expected_h,"numpy.asarray([
[[0.01764008,0.01823233,0.01882671,0.0194232],
[0.11287491,0.12146228,0.13018446,0.13902939],
[0.31358768,0.33338627,0.35304453,0.37250975]],
[[0.45767879,0.4761092,0.4936887,0.51041945],
[0.6704845,0.69350089,0.71486014,0.7346449],
[0.81733511,0.83677871,0.85403753,0.86935314]]])",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,1.2,num=N*D)",CLUSTER_1,CLUSTER_10
prev_h,"numpy.linspace(-0.3,0.7,num=N*H)",CLUSTER_1,CLUSTER_10
prev_c,"numpy.linspace(-0.4,0.9,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-2.1,1.3,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.7,2.2,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.3,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-0.4,0.6,num=N*T*D)",CLUSTER_1,CLUSTER_10
h0,"numpy.linspace(-0.4,0.8,num=N*H)",CLUSTER_1,CLUSTER_10
Wx,"numpy.linspace(-0.2,0.9,num=4*D*H)",CLUSTER_1,CLUSTER_10
Wh,"numpy.linspace(-0.3,0.6,num=4*H*H)",CLUSTER_1,CLUSTER_10
b,"numpy.linspace(0.2,0.7,num=4*H)",CLUSTER_1,CLUSTER_10
model.params[k],"numpy.linspace(-1.4,1.3,num=v.size)",CLUSTER_1,CLUSTER_10
features,"numpy.linspace(-0.5,1.7,num=N*D)",CLUSTER_1,CLUSTER_10
mean,numpy.mean(bucket),CLUSTER_3,CLUSTER_6
mean,numpy.mean(bucket),CLUSTER_3,CLUSTER_6
batchMean,numpy.mean(randomDataAvgs),CLUSTER_3,CLUSTER_6
batchMean,numpy.mean(randomDataAvgs),CLUSTER_3,CLUSTER_6
rangeList,numpy.ptp(bucket),CLUSTER_3,CLUSTER_6
prcp_df,pandas.DataFrame(combined_obj),CLUSTER_11,CLUSTER_3
date,"datetime.date(2017,8,23)",CLUSTER_11,CLUSTER_3
iris,"pandas.read_csv(""iris.csv"")",CLUSTER_7,CLUSTER_8
glass,"pandas.read_csv(""glass.csv"")",CLUSTER_7,CLUSTER_8
lens,"pandas.read_csv(""contactlenses.csv"")",CLUSTER_7,CLUSTER_8
anneal,"pandas.read_csv(""anneal.csv"")",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,40)",CLUSTER_7,CLUSTER_8
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
new_df,pandas.DataFrame(columns=cols),CLUSTER_5,CLUSTER_5
t_df,pandas.DataFrame([model_dict]),CLUSTER_5,CLUSTER_5
features,pandas.read_csv('hr_features.csv'),CLUSTER_5,CLUSTER_5
labels,pandas.read_csv('hr_labels.csv'),CLUSTER_5,CLUSTER_5
"x_train,x_test",numpy.array(features[:split]),CLUSTER_5,CLUSTER_5
"y_train,y_test",numpy.array(labels[:split]),CLUSTER_5,CLUSTER_5
cf,"sklearn.metrics.confusion_matrix(y_test,evals)",CLUSTER_5,CLUSTER_5
new_score,"sklearn.metrics.roc_auc_score(y_test,new_preds)",CLUSTER_5,CLUSTER_5
new_score,"sklearn.metrics.roc_auc_score(y_test,new_pred)",CLUSTER_5,CLUSTER_5
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
toronto_onehot,"pandas.get_dummies(toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
Canada_df,"pandas.merge(left=df,right=geo_df)",CLUSTER_9,CLUSTER_2
df,"pandas.read_csv('iso_3166-1_alpha-2_codes.txt',sep=';',header=None,names=['Postcode','Borough','Neighborhood'])",CLUSTER_9,CLUSTER_2
geo_df,pandas.read_csv('http://cocl.us/Geospatial_data'),CLUSTER_9,CLUSTER_2
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
year_bins,"numpy.arange(1910,2020,10)",CLUSTER_1,CLUSTER_10
baby_names.select('Count').hist(bins,"numpy.arange(0,1000,50)",CLUSTER_1,CLUSTER_10
df,"pandas.read_csv('olympics.csv',index_col=0,skiprows=1)",CLUSTER_8,CLUSTER_4
census_df,pandas.read_csv('census.csv'),CLUSTER_8,CLUSTER_4
sal,pandas.read_csv('Salaries.csv'),CLUSTER_8,CLUSTER_4
data1,"pandas.read_csv(r""C:\Users\Administrator\Desktop\picture\1\1.csv"",header=0,index_col=None)",CLUSTER_7,CLUSTER_3
data2,"pandas.read_csv(r""C:\Users\Administrator\Desktop\picture\1\2.csv"",header=0,index_col=None)",CLUSTER_7,CLUSTER_3
data3,"pandas.read_csv(r""C:\Users\Administrator\Desktop\picture\1\3.csv"",header=0,index_col=None)",CLUSTER_7,CLUSTER_3
data4,"pandas.read_csv(r""C:\Users\Administrator\Desktop\picture\1\4.csv"",header=0,index_col=None)",CLUSTER_7,CLUSTER_3
ax,seaborn.boxplot(data=data1),CLUSTER_7,CLUSTER_3
ax,seaborn.boxplot(data=data2),CLUSTER_7,CLUSTER_3
ax,seaborn.boxplot(data=data3),CLUSTER_7,CLUSTER_3
ax,seaborn.boxplot(data=data4),CLUSTER_7,CLUSTER_3
iris,"seaborn.load_dataset(""iris"")",CLUSTER_7,CLUSTER_3
ax2,matplotlib.pyplot.subplot(221),CLUSTER_7,CLUSTER_3
ax2,matplotlib.pyplot.subplot(222),CLUSTER_7,CLUSTER_3
ax2,matplotlib.pyplot.subplot(223),CLUSTER_7,CLUSTER_3
ax2,matplotlib.pyplot.subplot(224),CLUSTER_7,CLUSTER_3
future_dates_df,"pandas.DataFrame(index=future_dates[1:],columns=df.columns)",CLUSTER_1,CLUSTER_3
future_df,"pandas.concat([df,future_dates_df])",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('monthly-milk-production-pounds-p.csv'),CLUSTER_1,CLUSTER_3
df['Month'],pandas.to_datetime(df['Month']),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_1,CLUSTER_3
content,"pandas.read_csv(filename,encoding='gb18030')",CLUSTER_0,CLUSTER_3
with_jieba_cut,collections.Counter(jieba.cut(articles[110]),CLUSTER_0,CLUSTER_3
words_count,collections.Counter(TOKEN),CLUSTER_0,CLUSTER_3
words_count_2,collections.Counter(TOKEN_2_GRAM),CLUSTER_0,CLUSTER_3
g1,pandas.DataFrame(titanic.groupby('sex'),CLUSTER_8,CLUSTER_3
digits,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_10
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_5,CLUSTER_10
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_10
labeldf,"pandas.DataFrame(label_list,date_list)",CLUSTER_11,CLUSTER_3
gtrends,"pandas.merge(gtrends,weather,""inner"")",CLUSTER_11,CLUSTER_3
gtrends,"pandas.read_csv(""data/googletrends.csv"")",CLUSTER_11,CLUSTER_3
weather,"pandas.read_csv(""data/NOAAweatherdata.csv"",skiprows=4)",CLUSTER_11,CLUSTER_3
"gtrends[""date_num""]","pandas.to_datetime(gtrends[""month""],yearfirst=True)",CLUSTER_11,CLUSTER_3
"weather[""date_num""]","pandas.to_datetime(weather[""Date""],yearfirst=True)",CLUSTER_11,CLUSTER_3
labels,"numpy.array(['RelativeFreq:{0}|Date:{1}'.format(i[1][0],i[0])",CLUSTER_11,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(14,7)",CLUSTER_11,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,3,sharey=False,sharex=False,figsize=(14,7)",CLUSTER_11,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(14,7)",CLUSTER_11,CLUSTER_3
result,"pandas.concat([movies_per_year,votes_per_year],axis=1)",CLUSTER_3,CLUSTER_3
pdmovies,"pandas.read_csv(""movies.csv"")",CLUSTER_3,CLUSTER_3
X,"numpy.array([[0,0,1],
[0,1,1],
[1,0,1],
[1,1,1]])",CLUSTER_8,CLUSTER_3
y,"numpy.array([[0],
[1],
[1],
[0]])",CLUSTER_8,CLUSTER_3
X,"numpy.array([[0,0,1],
[0,1,1],
[1,0,1],
[1,1,1]])",CLUSTER_8,CLUSTER_3
y,"numpy.array([[0,0,1,1]])",CLUSTER_8,CLUSTER_3
syn0+,"numpy.dot(l0.T,l1_delta)",CLUSTER_8,CLUSTER_3
text,"numpy.array(""Doyouwantsomecafé?"".split()",CLUSTER_4,CLUSTER_7
theta_numpy,numpy.linalg.inv(X.T.dot(X),CLUSTER_4,CLUSTER_7
housing,sklearn.datasets.fetch_california_housing(),CLUSTER_4,CLUSTER_7
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_7
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_7
now,datetime.datetime.utcnow(),CLUSTER_4,CLUSTER_7
df,"pandas.concat([state_dummies,data],axis=1)",CLUSTER_5,CLUSTER_5
state_dummies,"pandas.get_dummies(data.state,prefix='state')",CLUSTER_5,CLUSTER_5
data,pandas.read_csv('Notebook_step3_output.csv'),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_scaled,y,test_size=0.25,random_state=1)",CLUSTER_5,CLUSTER_5
y1,numpy.array(adr),CLUSTER_5,CLUSTER_5
x1,"numpy.column_stack((leadtime,arrivaldateweekno,mealcat,reservedroomtypecat)",CLUSTER_5,CLUSTER_5
atest,"numpy.column_stack((t_leadtime,t_arrivaldateweekno,t_mealcat,t_reservedroomtypecat)",CLUSTER_5,CLUSTER_5
arrivaldatemonthcat,pandas.Series(arrivaldatemonth),CLUSTER_5,CLUSTER_5
mealcat,pandas.Series(mealcat),CLUSTER_5,CLUSTER_5
countrycat,pandas.Series(countrycat),CLUSTER_5,CLUSTER_5
marketsegmentcat,pandas.Series(marketsegmentcat),CLUSTER_5,CLUSTER_5
distributionchannelcat,pandas.Series(distributionchannelcat),CLUSTER_5,CLUSTER_5
reservedroomtypecat,pandas.Series(reservedroomtypecat),CLUSTER_5,CLUSTER_5
assignedroomtypecat,pandas.Series(assignedroomtypecat),CLUSTER_5,CLUSTER_5
deposittypecat,pandas.Series(deposittypecat),CLUSTER_5,CLUSTER_5
customertypecat,pandas.Series(customertypecat),CLUSTER_5,CLUSTER_5
reservationstatuscat,pandas.Series(reservationstatuscat),CLUSTER_5,CLUSTER_5
t_arrivaldatemonthcat,pandas.Series(t_arrivaldatemonth),CLUSTER_5,CLUSTER_5
t_mealcat,pandas.Series(t_mealcat),CLUSTER_5,CLUSTER_5
t_countrycat,pandas.Series(t_countrycat),CLUSTER_5,CLUSTER_5
t_marketsegmentcat,pandas.Series(t_marketsegmentcat),CLUSTER_5,CLUSTER_5
t_distributionchannelcat,pandas.Series(t_distributionchannelcat),CLUSTER_5,CLUSTER_5
t_reservedroomtypecat,pandas.Series(t_reservedroomtypecat),CLUSTER_5,CLUSTER_5
t_assignedroomtypecat,pandas.Series(t_assignedroomtypecat),CLUSTER_5,CLUSTER_5
t_deposittypecat,pandas.Series(t_deposittypecat),CLUSTER_5,CLUSTER_5
t_customertypecat,pandas.Series(t_customertypecat),CLUSTER_5,CLUSTER_5
t_reservationstatuscat,pandas.Series(t_reservationstatuscat),CLUSTER_5,CLUSTER_5
train_df,pandas.read_csv('H1full.csv'),CLUSTER_5,CLUSTER_5
h2data,pandas.read_csv('H2full.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(x1,y1)",CLUSTER_5,CLUSTER_5
tree_reg,sklearn.tree.DecisionTreeRegressor(max_depth=4),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,4)",CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
nonzeroy,numpy.array(nonzero[0]),CLUSTER_1,CLUSTER_9
nonzerox,numpy.array(nonzero[1]),CLUSTER_1,CLUSTER_9
hist_features,"numpy.concatenate((channel1_hist[0],channel2_hist[0],channel3_hist[0])",CLUSTER_1,CLUSTER_9
heat,"numpy.zeros_like(image[:,:,0])",CLUSTER_1,CLUSTER_9
heat,"numpy.zeros_like(_img[:,:,0])",CLUSTER_1,CLUSTER_9
heatmap,"numpy.clip(heat,0,255)",CLUSTER_1,CLUSTER_9
heatmap,"numpy.clip(heat,0,255)",CLUSTER_1,CLUSTER_9
hog_features,numpy.ravel(hog_features),CLUSTER_1,CLUSTER_9
hog_features,numpy.ravel(hog_features),CLUSTER_1,CLUSTER_9
hog_features,numpy.ravel(hog_features),CLUSTER_1,CLUSTER_9
y,numpy.hstack((np.ones(len(car_features),CLUSTER_1,CLUSTER_9
hog_features,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_1,CLUSTER_9
hog_features,numpy.hstack((hog_feat1),CLUSTER_1,CLUSTER_9
X,"numpy.vstack((car_features,notcar_features)",CLUSTER_1,CLUSTER_9
X,"numpy.vstack((car_features,notcar_features)",CLUSTER_1,CLUSTER_9
draw_img,numpy.copy(img),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(image),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(image),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(image),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(img),CLUSTER_1,CLUSTER_9
else:feature_image,numpy.copy(image),CLUSTER_1,CLUSTER_9
draw_img,numpy.copy(img),CLUSTER_1,CLUSTER_9
channel1_hist,"numpy.histogram(img[:,:,0],bins=nbins,range=bins_range)",CLUSTER_1,CLUSTER_9
channel2_hist,"numpy.histogram(img[:,:,1],bins=nbins,range=bins_range)",CLUSTER_1,CLUSTER_9
channel3_hist,"numpy.histogram(img[:,:,2],bins=nbins,range=bins_range)",CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
t2,time.time(),CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
t2,time.time(),CLUSTER_1,CLUSTER_9
t,time.time(),CLUSTER_1,CLUSTER_9
t2,time.time(),CLUSTER_1,CLUSTER_9
svc,sklearn.svm.LinearSVC(),CLUSTER_1,CLUSTER_9
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_1,CLUSTER_9
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_1,CLUSTER_9
data,pandas.DataFrame(dt),CLUSTER_7,CLUSTER_8
cat_df,pandas.DataFrame(df.select_dtypes(include=['object']),CLUSTER_7,CLUSTER_8
cat_df,pandas.DataFrame(df.select_dtypes(include=['object']),CLUSTER_7,CLUSTER_8
cat_df,pandas.DataFrame(df.select_dtypes(include=['object']),CLUSTER_7,CLUSTER_8
num_df,"pandas.DataFrame(df.select_dtypes(include=['float64','int64','int32'])",CLUSTER_7,CLUSTER_8
num_df,"pandas.DataFrame(df.select_dtypes(include=['float64','int64','int32'])",CLUSTER_7,CLUSTER_8
num_df,"pandas.DataFrame(df.select_dtypes(include=['float64','int64','int32'])",CLUSTER_7,CLUSTER_8
dfr,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
Z,pandas.get_dummies(df),CLUSTER_7,CLUSTER_8
pos,pandas.get_dummies(y_test),CLUSTER_7,CLUSTER_8
"df[""AGE_VEHQ""]","pandas.qcut(df.AGE_VEH,3,labels=[""inf14ans"",""entre14_19ans"",""sup19ans""])",CLUSTER_7,CLUSTER_8
"df[""AGE_CLIENTQ""]","pandas.qcut(df.AGE_CLIENT,4,labels=[""inf44ans"",""entre45_55ans"",""entre55_66ans"",""sup66ans""])",CLUSTER_7,CLUSTER_8
"df[""ANCIENQ""]","pandas.qcut(df.AGE_CLIENT,4,labels=[""inf12ans"",""entre12_17ans"",""entre17_26ans"",""sup26ans""])",CLUSTER_7,CLUSTER_8
"df[""PERMISQ""]","pandas.qcut(df.PERMIS,3,labels=[""inf24ans"",""entre25_37ans"",""sup37ans""])",CLUSTER_7,CLUSTER_8
"df[""DUR_CONTQ""]","pandas.qcut(df.DUR_CONT,3,labels=[""inf11ans"",""entre11_17ans"",""sup17ans""])",CLUSTER_7,CLUSTER_8
dt,"pandas.read_table(""..\\ResiliationContratAuto.txt"",sep='|',encoding=""ISO-8859-1"")",CLUSTER_7,CLUSTER_8
df[d],"pandas.to_datetime(df[d],unit='d')",CLUSTER_7,CLUSTER_8
"df[""MMJECHPP""]","pandas.to_datetime(df[""MMJECHPP""],format='%m%d')",CLUSTER_7,CLUSTER_8
"df[""DT_NAI""]","pandas.to_timedelta(df[""DT_NAI""],unit='d')",CLUSTER_7,CLUSTER_8
ind,numpy.arange(len(labels),CLUSTER_7,CLUSTER_8
"df[""CONTRAT""]","numpy.where(df[""CONTRAT""].str.contains(""RESIL"")",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,50)",CLUSTER_7,CLUSTER_8
algo,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
algo,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.neural_network.MLPClassifier(),CLUSTER_7,CLUSTER_8
algo,sklearn.svm.LinearSVC(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=0)",CLUSTER_7,CLUSTER_8
today,datetime.date.today(),CLUSTER_7,CLUSTER_8
acc_train,"sklearn.metrics.accuracy_score(y_train,y_pred1)",CLUSTER_7,CLUSTER_8
acc_test,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
acc_train,"sklearn.metrics.accuracy_score(y_train,y_pred1)",CLUSTER_7,CLUSTER_8
acc_test,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
mc,"sklearn.metrics.confusion_matrix(y,y_hat)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_8
specificite,"sklearn.metrics.make_scorer(specificity,greater_is_better=True)",CLUSTER_7,CLUSTER_8
specificite,"sklearn.metrics.make_scorer(specificity,greater_is_better=True)",CLUSTER_7,CLUSTER_8
sensib,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
se,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_7,CLUSTER_8
taille,"numpy.arange(start=1,stop=26681,step=1)",CLUSTER_7,CLUSTER_8
index,numpy.argsort(score),CLUSTER_7,CLUSTER_8
cpos,numpy.cumsum(sort_pos),CLUSTER_7,CLUSTER_8
npos,numpy.sum(pos),CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(importance,columns=['feature','fscore'])",CLUSTER_7,CLUSTER_8
lrmodel,sklearn.linear_model.LinearRegression(),CLUSTER_10,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y)",CLUSTER_10,CLUSTER_4
submission_train_1,pandas.DataFrame(dataset_blend_train_2),CLUSTER_7,CLUSTER_8
submission_test_1,pandas.DataFrame(dataset_blend_test_2),CLUSTER_7,CLUSTER_8
submission_df,"pandas.DataFrame(data={'Id':id_test,'SalePrice':y_submission})",CLUSTER_7,CLUSTER_8
dg_pca_train,pandas.read_csv('dg_pca_train.csv'),CLUSTER_7,CLUSTER_8
dg_pca_test,pandas.read_csv('dg_pca_test.csv'),CLUSTER_7,CLUSTER_8
id_test,pandas.read_csv('id_test.csv'),CLUSTER_7,CLUSTER_8
id_train,pandas.read_csv('id_train.csv'),CLUSTER_7,CLUSTER_8
score_train,pandas.read_csv('score_train.csv'),CLUSTER_7,CLUSTER_8
dataset_blend_train,"numpy.zeros((X.shape[0],len(clfs)",CLUSTER_7,CLUSTER_8
dataset_blend_test,"numpy.zeros((X_predict.shape[0],len(clfs)",CLUSTER_7,CLUSTER_8
dataset_blend_test_j,"numpy.zeros((X_predict.shape[0],len(skf)",CLUSTER_7,CLUSTER_8
dataset_blend_train_2,"numpy.zeros((X.shape[0],len(clfs)",CLUSTER_7,CLUSTER_8
dataset_blend_test_2,"numpy.zeros((X_predict.shape[0],len(clfs)",CLUSTER_7,CLUSTER_8
dataset_blend_test_j,"numpy.zeros((X_predict.shape[0],len(skf)",CLUSTER_7,CLUSTER_8
dataset_blend_test,"numpy.hstack((dataset_blend_test_1,dataset_blend_test_2)",CLUSTER_7,CLUSTER_8
dataset_blend_train,"numpy.hstack((dataset_blend_train_1,dataset_blend_train_2)",CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_folds,True,50)",CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_folds,True,50)",CLUSTER_7,CLUSTER_8
clf,"sklearn.svm.SVR(C=1.0,gamma=0.1)",CLUSTER_7,CLUSTER_8
clf,sklearn.svm.SVR(),CLUSTER_7,CLUSTER_8
clf,sklearn.model_selection.GridSearchCV(svm.SVR(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(dataset_blend_train,y,test_size=0.2,random_state=123)",CLUSTER_7,CLUSTER_8
X,"numpy.concatenate((X,b)",CLUSTER_7,CLUSTER_8
core_samples,"numpy.zeros_like(labels,dtype=bool)",CLUSTER_7,CLUSTER_8
"""""""log_air_passengers",numpy.log(df2['min_price']),CLUSTER_7,CLUSTER_8
df3,pandas.DataFrame(df2.groupby(level=0),CLUSTER_7,CLUSTER_8
month_names,"pandas.date_range(start='2016-01-01',periods=12,freq='MS')",CLUSTER_7,CLUSTER_8
df1,"pandas.read_csv(r""C:\Users\Sony\Desktop\CMO_MSP_Mandi.csv"")",CLUSTER_7,CLUSTER_8
df2,"pandas.read_csv(r""C:\Users\Sony\Desktop\Monthly_data_cmo.csv"",index_col=0,parse_dates=[[2,3]],infer_datetime_format=True)",CLUSTER_7,CLUSTER_8
df1.index,"pandas.to_datetime(df1.index,format='%Y')",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_7,CLUSTER_8
dbscan,"sklearn.cluster.DBSCAN(eps=3,min_samples=4)",CLUSTER_7,CLUSTER_8
X,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
ohe,sklearn.preprocessing.OneHotEncoder(),CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
a,pandas.read_csv('df_a.csv'),CLUSTER_1,CLUSTER_3
b,pandas.read_csv('df_b.csv'),CLUSTER_1,CLUSTER_3
c,pandas.read_csv('df_c.csv'),CLUSTER_1,CLUSTER_3
d,pandas.read_csv('df_d.csv'),CLUSTER_1,CLUSTER_3
e,pandas.read_csv('df_e.csv'),CLUSTER_1,CLUSTER_3
f,pandas.read_csv('df_f.csv'),CLUSTER_1,CLUSTER_3
g,pandas.read_csv('df_g.csv'),CLUSTER_1,CLUSTER_3
h,pandas.read_csv('df_h.csv'),CLUSTER_1,CLUSTER_3
i,pandas.read_csv('df_i.csv'),CLUSTER_1,CLUSTER_3
j,pandas.read_csv('df_j.csv'),CLUSTER_1,CLUSTER_3
k,pandas.read_csv('df_k.csv'),CLUSTER_1,CLUSTER_3
l,pandas.read_csv('df_l.csv'),CLUSTER_1,CLUSTER_3
m,pandas.read_csv('df_m.csv'),CLUSTER_1,CLUSTER_3
mat,"pandas.read_csv(""data/student-mat.csv"")",CLUSTER_7,CLUSTER_3
ax2,"plt.colorbar(contours,cax=cax,ax=ax,ticks=numpy.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
cost,numpy.zeros_like(cm),CLUSTER_7,CLUSTER_8
cm,"numpy.around(cm,decimals=2)",CLUSTER_7,CLUSTER_8
n_samples,numpy.median(cnts),CLUSTER_7,CLUSTER_8
"X,Y","numpy.meshgrid(np.arange(0,n_classes,1)",CLUSTER_7,CLUSTER_8
df_resampled,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_resampled,"pandas.concat([df_resampled,df_target_resampled],axis=0)",CLUSTER_7,CLUSTER_8
df_remap['quality2'],"pandas.cut(df.quality,bins=3,labels=[1,2,3])",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('/home/cneiderer/Metis/Neiderer_Metis/Project3/data/winequality-red.csv',delimiter=';')",CLUSTER_7,CLUSTER_8
ax,"seaborn.distplot(df[col][df.quality==q],hist=False,label=label,ax=ax)",CLUSTER_7,CLUSTER_8
cmap,"seaborn.diverging_palette(10,133,sep=80,n=20)",CLUSTER_7,CLUSTER_8
ax,"seaborn.heatmap(Z,ax=ax,cmap='RdYlGn',annot=True,cbar_ax=cax,
vmin=0,vmax=1,cbar_kws={'ticks':np.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
ax2,"matplotlib.pyplot.colorbar(contours,cax=cax,ax=ax,ticks=np.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
"target_fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_7,CLUSTER_8
"corr_fig,ax","matplotlib.pyplot.subplots(figsize=(14,10)",CLUSTER_7,CLUSTER_8
"kde_fig,axes","matplotlib.pyplot.subplots(3,4,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"gnb_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"svm0_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"svm1_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"knn_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"lr_fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
svm0,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
svm1,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
knn1,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
knn2,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
pipe3,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_7,CLUSTER_8
lr3,"sklearn.linear_model.LogisticRegression(C=1e3,
class_weight='balanced',
random_state=129,
multi_class='multinomial',
solver='newton-cg',max_iter=1000)",CLUSTER_7,CLUSTER_8
nb1,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
sampleData,"pandas.read_csv('C:/Users/jpkee/Desktop/PythonProjects/MasterDataAnalysiswithPython-Introtopandas/data/sample_data.csv',index_col=0)",CLUSTER_8,CLUSTER_4
movies,"pandas.read_csv('C:/Users/jpkee/Desktop/PythonProjects/MasterDataAnalysiswithPython-Introtopandas/data/movie.csv',index_col='title')",CLUSTER_8,CLUSTER_4
bikes,"pandas.read_csv('C:/Users/jpkee/Desktop/PythonProjects/MasterDataAnalysiswithPython-Introtopandas/data/bikes.csv',parse_dates=['starttime','stoptime'])",CLUSTER_8,CLUSTER_4
r,requests.get(url),CLUSTER_10,CLUSTER_12
w1,"np.random.uniform(low=-numpy.sqrt(6/(784+500)),high=numpy.sqrt(6/(784+500)",CLUSTER_9,CLUSTER_2
w2,"np.random.uniform(low=-numpy.sqrt(6/(500+10)),high=numpy.sqrt(6/(500+10)",CLUSTER_9,CLUSTER_2
b1,"np.random.uniform(low=-numpy.sqrt(6/(1+500)),high=numpy.sqrt(6/(1+500)",CLUSTER_9,CLUSTER_2
b2,"np.random.uniform(low=-numpy.sqrt(6/(1+10)),high=numpy.sqrt(6/(1+10)",CLUSTER_9,CLUSTER_2
req,"requests.request('POST',_url,json=json)",CLUSTER_9,CLUSTER_2
result,"pandas.DataFrame({'actual':actual,'predict':predict})",CLUSTER_9,CLUSTER_2
result,pandas.DataFrame({'accuracy':accuracy}),CLUSTER_9,CLUSTER_2
data,"numpy.linspace(-5,5,100)",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('data/Race-COVID.csv'),CLUSTER_1,CLUSTER_3
case,"numpy.array([white,black,latin,asian,aian,nhpi,other,unknown])",CLUSTER_1,CLUSTER_3
case,"numpy.array([white,black,latin,asian,aian,nhpi,other])",CLUSTER_1,CLUSTER_3
case,"numpy.array([white,black,latin,asian,aian,nhpi,other,unknown])",CLUSTER_1,CLUSTER_3
case,"numpy.array([white,black,latin,asian,other,unknown])",CLUSTER_1,CLUSTER_3
total,numpy.sum(df['Cases_Total']),CLUSTER_1,CLUSTER_3
white,numpy.sum(df['Cases_White']),CLUSTER_1,CLUSTER_3
black,numpy.sum(df['Cases_Black']),CLUSTER_1,CLUSTER_3
latin,numpy.sum(df['Cases_LatinX']),CLUSTER_1,CLUSTER_3
asian,numpy.sum(df['Cases_Asian']),CLUSTER_1,CLUSTER_3
aian,numpy.sum(df['Cases_AIAN']),CLUSTER_1,CLUSTER_3
nhpi,numpy.sum(df['Cases_NHPI']),CLUSTER_1,CLUSTER_3
unknown,numpy.sum(df['Cases_Unknown']),CLUSTER_1,CLUSTER_3
total,numpy.sum(df['Deaths_Total']),CLUSTER_1,CLUSTER_3
white,numpy.sum(df['Deaths_White']),CLUSTER_1,CLUSTER_3
black,numpy.sum(df['Deaths_Black']),CLUSTER_1,CLUSTER_3
latin,numpy.sum(df['Deaths_LatinX']),CLUSTER_1,CLUSTER_3
asian,numpy.sum(df['Deaths_Asian']),CLUSTER_1,CLUSTER_3
aian,numpy.sum(df['Deaths_AIAN']),CLUSTER_1,CLUSTER_3
nhpi,numpy.sum(df['Deaths_NHPI']),CLUSTER_1,CLUSTER_3
unknown,numpy.sum(df['Deaths_Unknown']),CLUSTER_1,CLUSTER_3
total,numpy.sum(df['Deaths_Total']),CLUSTER_1,CLUSTER_3
white,numpy.sum(df['Deaths_White']),CLUSTER_1,CLUSTER_3
black,numpy.sum(df['Deaths_Black']),CLUSTER_1,CLUSTER_3
latin,numpy.sum(df['Deaths_LatinX']),CLUSTER_1,CLUSTER_3
asian,numpy.sum(df['Deaths_Asian']),CLUSTER_1,CLUSTER_3
unknown,numpy.sum(df['Deaths_Unknown']),CLUSTER_1,CLUSTER_3
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_1,CLUSTER_3
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_1,CLUSTER_3
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_1,CLUSTER_3
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_1,CLUSTER_3
df_lookup,"pandas.DataFrame(0,index=np.arange(len(table)",CLUSTER_8,CLUSTER_3
df_lookup,"pd.DataFrame(0,index=numpy.arange(len(table)",CLUSTER_8,CLUSTER_3
trueMat,numpy.array(true),CLUSTER_5,CLUSTER_1
utilMat,numpy.array(train),CLUSTER_5,CLUSTER_1
Usk,"numpy.dot(U,s_root)",CLUSTER_5,CLUSTER_1
skV,"numpy.dot(s_root,V)",CLUSTER_5,CLUSTER_1
UsV,"numpy.dot(Usk,skV)",CLUSTER_5,CLUSTER_1
item_means,"numpy.mean(masked_arr,axis=0)",CLUSTER_5,CLUSTER_1
mask,numpy.isnan(utilMat),CLUSTER_5,CLUSTER_1
x,"numpy.tile(item_means,(utilMat.shape[0],1)",CLUSTER_5,CLUSTER_1
s,numpy.diag(s),CLUSTER_5,CLUSTER_1
"U,s,V","numpy.linalg.svd(utilMat,full_matrices=False)",CLUSTER_5,CLUSTER_1
masked_arr,"numpy.ma.masked_array(utilMat,mask)",CLUSTER_5,CLUSTER_1
UsV,"numpy.ma.masked_where(trueMat==1,UsV)",CLUSTER_5,CLUSTER_1
products_to_join,pandas.DataFrame(train['customerID']),CLUSTER_5,CLUSTER_1
test['products'],pandas.Series(pred),CLUSTER_5,CLUSTER_1
test['products'],pandas.Series(pred),CLUSTER_5,CLUSTER_1
train,"pandas.get_dummies(train,columns=['product_code'],prefix=prod_dict)",CLUSTER_5,CLUSTER_1
product_joined,"pandas.merge(train,cnt_srs,on='product_code',how='inner')",CLUSTER_5,CLUSTER_1
train,"pandas.merge(products_to_join,products_less.drop_duplicates(subset=['customerID'],keep='last')",CLUSTER_5,CLUSTER_1
train,pandas.read_csv('products.csv'),CLUSTER_5,CLUSTER_1
test,pandas.read_csv('sampleSubmission.csv'),CLUSTER_5,CLUSTER_1
s_root,scipy.linalg.sqrtm(s),CLUSTER_5,CLUSTER_1
svd,"sklearn.decomposition.TruncatedSVD(n_components=14,n_iter=7,random_state=42)",CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame({
'contry':['Kazakhstan','Russia','Belarus','Ukraine'],
'population':[17.04,143.5,9.5,45.5],
'square':[2724902,17125191,207600,603628]
})",CLUSTER_8,CLUSTER_4
df,"pandas.DataFrame({
'country':['Kazakhstan','Russia','Belarus','Ukraine'],
'population':[17.04,143.5,9.5,45.5],
'square':[2724902,17125191,207600,603628]
},index=['KZ','RU','BY','UA'])",CLUSTER_8,CLUSTER_4
my_series,"pandas.Series([5,6,7,8,9,10])",CLUSTER_8,CLUSTER_4
my_series2,"pandas.Series([5,6,7,8,9,10],index=['a','b','c','d','e','f'])",CLUSTER_8,CLUSTER_4
my_series3,"pandas.Series({'a':5,'b':6,'c':7,'d':8})",CLUSTER_8,CLUSTER_4
titanic_df,pandas.read_csv('titanic.csv'),CLUSTER_8,CLUSTER_4
pass_data,pandas.read_csv('titanic.csv'),CLUSTER_8,CLUSTER_4
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
eval_label,numpy.array([(un_classifieur.predict(i),CLUSTER_1,CLUSTER_3
train,"pandas.read_csv(""fichier_csv/train.csv"",sep=';',header=None)",CLUSTER_1,CLUSTER_3
train.columns,"pandas.read_csv(""fichier_csv/names.csv"",sep=';')",CLUSTER_1,CLUSTER_3
test,"pandas.read_csv(""fichier_csv/test.csv"",sep=';',header=None)",CLUSTER_1,CLUSTER_3
test.columns,"pandas.read_csv(""fichier_csv/names.csv"",sep=';')",CLUSTER_1,CLUSTER_3
eval_,"pandas.read_csv(""fichier_csv/eval.csv"",sep=';',header=None)",CLUSTER_1,CLUSTER_3
eval_.columns,"pandas.read_csv(""fichier_csv/names.csv"",sep=';')",CLUSTER_1,CLUSTER_3
debut_ClassifierLineaireRandom,time.time(),CLUSTER_1,CLUSTER_3
fin_ClassifierLineaireRandom,time.time(),CLUSTER_1,CLUSTER_3
debut_ClassifierKNN,time.time(),CLUSTER_1,CLUSTER_3
fin_ClassifierKNN,time.time(),CLUSTER_1,CLUSTER_3
debut_ClassifierPerceptron,time.time(),CLUSTER_1,CLUSTER_3
fin_ClassifierPerceptron,time.time(),CLUSTER_1,CLUSTER_3
debut_ClassifierPerceptronKernel,time.time(),CLUSTER_1,CLUSTER_3
fin_ClassifierPerceptronKernel,time.time(),CLUSTER_1,CLUSTER_3
df_pca_3d,"pandas.DataFrame(data=pca_3d,index=df_3d.index,columns=[""PC1"",""PC2""])",CLUSTER_7,CLUSTER_5
df_tsne_3d,"pandas.DataFrame(data=tsne_3d,index=df_3d.index,columns=[""tSNE1"",""tSNE2""])",CLUSTER_7,CLUSTER_5
df_3d,"pandas.read_pickle('../output/df_3d_zero.pkl.gz',compression='gzip')",CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_5
tsne,"sklearn.manifold.TSNE(n_components=2,n_iter=300)",CLUSTER_7,CLUSTER_5
ax,"seaborn.scatterplot(x=""PC1"",y=""PC2"",data=df_pca_3d,hue=df_3d[""Target""])",CLUSTER_7,CLUSTER_5
ax,"seaborn.scatterplot(x=""tSNE1"",y=""tSNE2"",data=df_tsne_3d,hue=df_3d[""Target""])",CLUSTER_7,CLUSTER_5
code+,"random.choice([s1,s2])",CLUSTER_11,CLUSTER_12
new_list,"random.sample(old_list,5)",CLUSTER_11,CLUSTER_12
arr,"numpy.array([1,2,3])",CLUSTER_2,CLUSTER_7
arr,"numpy.array([[1,2,3],[1,2,3]])",CLUSTER_2,CLUSTER_7
arr,"numpy.array([[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]])",CLUSTER_2,CLUSTER_7
arr,"numpy.array([1,2,3])",CLUSTER_2,CLUSTER_7
arr,"numpy.array([1,2,3],dtype=np.float32)",CLUSTER_2,CLUSTER_7
arr2,"numpy.array([4,5,6,7],dtype=np.float32)",CLUSTER_2,CLUSTER_7
words_matrix,pandas.DataFrame(newsgroups_counts.toarray(),CLUSTER_7,CLUSTER_1
tfidf_matrix,pandas.DataFrame(newsgroups_tfidf.toarray(),CLUSTER_7,CLUSTER_1
countries,"pandas.read_csv(""countries.csv"")",CLUSTER_7,CLUSTER_1
tfidf_matrix,"pd.DataFrame(newsgroups_tfidf.toarray(),columns=numpy.array(count_vectorizer.get_feature_names()",CLUSTER_7,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline(steps=[
(""imputer"",SimpleImputer(strategy=""median"")",CLUSTER_7,CLUSTER_1
newsgroups,"sklearn.datasets.fetch_20newsgroups(subset=""train"",categories=categories,shuffle=True,random_state=42)",CLUSTER_7,CLUSTER_1
newsgroups,"sklearn.datasets.fetch_20newsgroups(subset=""train"",categories=categories,shuffle=True,random_state=42)",CLUSTER_7,CLUSTER_1
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_3
targets,"numpy.array(targets_list,ndmin=2)",CLUSTER_1,CLUSTER_3
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_3
test_w_i_h,"numpy.array([[0.1,0.4,-0.3],
[-0.2,0.5,0.2]])",CLUSTER_1,CLUSTER_3
test_w_h_o,"numpy.array([[0.3,-0.1]])",CLUSTER_1,CLUSTER_3
hidden_inputs,"numpy.dot(self.weights_input_to_hidden,inputs)",CLUSTER_1,CLUSTER_3
final_inputs,"numpy.dot(self.weights_hidden_to_output,hidden_outputs)",CLUSTER_1,CLUSTER_3
del_weight_h_o,"numpy.dot(output_grad,hidden_outputs.T)",CLUSTER_1,CLUSTER_3
hidden_inputs,"numpy.dot(self.weights_input_to_hidden,inputs)",CLUSTER_1,CLUSTER_3
final_inputs,"numpy.dot(self.weights_hidden_to_output,hidden_outputs)",CLUSTER_1,CLUSTER_3
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_1,CLUSTER_3
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_1,CLUSTER_3
rides,pandas.read_csv(data_path),CLUSTER_1,CLUSTER_3
dates,pandas.to_datetime(rides.ix[test_data.index]['dteday']),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_3
"test_df.loc[:,'cluster']",pandas.Series(cluster),CLUSTER_0,CLUSTER_5
test_df,"pandas.read_csv(""data/test.csv"",low_memory=False)",CLUSTER_0,CLUSTER_5
n_estimators,"numpy.arange(2,200,step=5)",CLUSTER_0,CLUSTER_5
n_estimators,"numpy.arange(2,50,step=2)",CLUSTER_0,CLUSTER_5
n_estimators,"numpy.arange(2,20,step=1)",CLUSTER_0,CLUSTER_5
tweet_text,numpy.array(text),CLUSTER_0,CLUSTER_5
text,"re.sub(r""(?:\@|http?\://)",CLUSTER_0,CLUSTER_5
text,"re.sub(r""(?:\@|https?\://)",CLUSTER_0,CLUSTER_5
text,"re.sub(r""""""[\'\""]"""""",'',text)",CLUSTER_0,CLUSTER_5
tokens_regexp,"re.compile(r""""""(%s)",CLUSTER_0,CLUSTER_5
km_model,sklearn.cluster.KMeans(n_clusters=clusters),CLUSTER_0,CLUSTER_5
data,json.load(data_file),CLUSTER_10,CLUSTER_4
data,json.load(data_file),CLUSTER_10,CLUSTER_4
sol1,"scipy.integrate.odeint(ec_mov,[1,0,0,0.5],t1,args=(0.05,)",CLUSTER_3,CLUSTER_6
sol2,"scipy.integrate.odeint(ec_mov,[1,0,0,0.5],t2,args=(0.05,)",CLUSTER_3,CLUSTER_6
sol3,"scipy.integrate.odeint(ec_mov,[1,0,0,0.5],t3,args=(0.05,)",CLUSTER_3,CLUSTER_6
sol4,"scipy.integrate.odeint(ec_mov,[1,0,0,1],t4,args=(alpha,)",CLUSTER_3,CLUSTER_6
sol4_2,"scipy.integrate.odeint(ec_mov,[.99,sqrt(1-.99**2)",CLUSTER_3,CLUSTER_6
tiempos,"numpy.arange(x[0],x[1]+h,h)",CLUSTER_3,CLUSTER_6
sol,numpy.zeros((len(tiempos),CLUSTER_3,CLUSTER_6
t1,"numpy.linspace(0,30)",CLUSTER_3,CLUSTER_6
t2,"numpy.linspace(0,30,10)",CLUSTER_3,CLUSTER_6
t3,"numpy.linspace(0,30,1000)",CLUSTER_3,CLUSTER_6
t4,"numpy.linspace(0,2*pi*50,5000)",CLUSTER_3,CLUSTER_6
fig,"matplotlib.pyplot.figure(figsize=(4,4)",CLUSTER_2,CLUSTER_7
ax,matplotlib.pyplot.subplot(gs[i]),CLUSTER_2,CLUSTER_7
summarytable,"pandas.DataFrame({""UniqueItems"":[unique_items],""AveragePrice"":[average_price],""TotalNumberofPurchases"":[total_price],""TotalRevenue"":[total_purchases]})",CLUSTER_8,CLUSTER_4
df,"pandas.DataFrame({""Gender"":[""Male"",""Female"",""Other/Non-Disclosed""],""PercentageofPlayers"":[male_percentage,female_percentage,other_percentage],""TotalCount"":[male_count,female_count,other_count]},columns=[""Gender"",""PercentageofPlayers"",""TotalCount""])",CLUSTER_8,CLUSTER_4
df2,"pandas.DataFrame({""PurchaseCount"":gender_count,""AveragePurchasePrice"":gender_average,""TotalPurchaseValue"":gender_purchase_total,""PurchaseTotalPerPerson,Average"":purchase_total_per_person})",CLUSTER_8,CLUSTER_4
df3,"pandas.DataFrame({""TotalCount"":age_demographics_count,""PercentageofPlayers"":age_percentage})",CLUSTER_8,CLUSTER_4
df4,"pandas.DataFrame({""PurchaseCount"":total_count,""AveragePurchasePrice"":average,""TotalPurchaseValue"":total,""AveragePurchasePerPerson"":per_person_data})",CLUSTER_8,CLUSTER_4
df5,"pandas.DataFrame({""PurchaseCount"":top_count,""AveragePurchasePrice"":top_mean_count,""TotalPurchaseValue"":top_total_value})",CLUSTER_8,CLUSTER_4
df6,"pandas.DataFrame({""PurchaseCount"":most_profitable_items,""ItemPrice"":most_profit_price,""TotalPurchaseValue"":most_profit_total})",CLUSTER_8,CLUSTER_4
demographic,"pandas.cut(purchase_data[""Age""],bins_for_ages,labels=categorize_existing_players)",CLUSTER_8,CLUSTER_4
"purchase_data[""AgeRanges""]","pandas.cut(purchase_data[""Age""],bins_for_ages,labels=categorize_existing_players)",CLUSTER_8,CLUSTER_4
purchase_data,pandas.read_csv(file_to_load),CLUSTER_8,CLUSTER_4
yhat,"numpy.argmax(sess.run(score,feed_dict={X:x_tst})",CLUSTER_1,CLUSTER_3
x_val,"numpy.delete(arr=x_train,obj=tr_indices,axis=0)",CLUSTER_1,CLUSTER_3
y_val,"numpy.delete(arr=y_train,obj=tr_indices,axis=0)",CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(weather_data),CLUSTER_8,CLUSTER_4
df,"pandas.DataFrame(weather_data,columns=['Day','Temperature','Windspeed','Event'])",CLUSTER_8,CLUSTER_4
df,pandas.DataFrame(weather_data),CLUSTER_8,CLUSTER_4
india_weather,"pandas.DataFrame({
'city':['mumbai','delhi','bangalore'],
'temperature':[32,45,30],
'humidity':[80,60,78]
})",CLUSTER_8,CLUSTER_4
us_weather,"pandas.DataFrame({
'city':['newyork','chicago','orlando'],
'temperature':[21,14,65],
'humidity':[68,65,75]
})",CLUSTER_8,CLUSTER_4
temperature_df,"pandas.DataFrame({
'city':['mumbai','delhi','bangalore'],
'temperature':[32,38,35]
})",CLUSTER_8,CLUSTER_4
windspeed_df,"pandas.DataFrame({
'city':['mumbai','delhi','bangalore'],
'windspeed':[7,8,12]
})",CLUSTER_8,CLUSTER_4
s,"pandas.Series(['Humid','Dry','Rain'],name='event')",CLUSTER_8,CLUSTER_4
df,"pandas.concat([india_weather,us_weather],ignore_index=True)",CLUSTER_8,CLUSTER_4
df,"pandas.concat([india_weather,us_weather],keys=['india','us'])",CLUSTER_8,CLUSTER_4
df,"pandas.concat([temperature_df,windspeed_df],axis=1)",CLUSTER_8,CLUSTER_4
df,"pandas.concat([temperature_df,s],axis=1)",CLUSTER_8,CLUSTER_4
df,pandas.read_csv('weather_data.csv'),CLUSTER_8,CLUSTER_4
df,"pandas.read_csv('weather_data.csv',skiprows=1,names=['day','temperature','windspeed','event'])",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv('weather_data.csv',skiprows=1,names=['day','temperature','windspeed','event'],nrows=3)",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv('weather_data.csv',na_values=['notavailable','n.a.'])",CLUSTER_8,CLUSTER_4
df,pandas.read_csv('city_weather.csv'),CLUSTER_8,CLUSTER_4
crash_type_summary_stats,"pandas.DataFrame(columns=[""Cause"",
""TotalCount"",
""ClusteredCount"",
""NoiseCount"",
""Std.DistanceSum"",
""Std.DistanceMean""
])",CLUSTER_11,CLUSTER_11
multvarcluster_roads_df,"pandas.merge(segroutes_df,mvc_df,on=""OBJECTID"")",CLUSTER_11,CLUSTER_11
merged_routes_df,"pandas.merge(segroutes_mvt_df,mvc_df,on=""OBJECTID"")",CLUSTER_11,CLUSTER_11
crash_type_summary_stats,"pandas.read_csv(os.path.join(workspace_dir,""crash_type_summary_stats.csv"")",CLUSTER_11,CLUSTER_11
cmf_df,pandas.read_excel(cmf_xls),CLUSTER_11,CLUSTER_11
simple_plot,"seaborn.lmplot(x=aadt_field,y=crash_field,data=df,fit_reg=True)",CLUSTER_11,CLUSTER_11
single_plot_wreglines,"seaborn.lmplot(x=aadt_field,y=crash_field,data=df,fit_reg=True,ci=ci,hue=regline_case_field)",CLUSTER_11,CLUSTER_11
multi_plot_wreglines,"seaborn.lmplot(x=aadt_field,y=crash_field,data=df,fit_reg=True,ci=ci,col=regline_case_field)",CLUSTER_11,CLUSTER_11
dataset,pandas.read_csv('fiuba-trocafone-tp1-final-set\events.csv'),CLUSTER_11,CLUSTER_11
clientes_nuevos['timestamp'],pandas.to_datetime(clientes_nuevos['timestamp']),CLUSTER_11,CLUSTER_11
mes_minimo['flag_compra'],"numpy.where(mes_minimo['event']=='conversion','1','0')",CLUSTER_11,CLUSTER_11
df_zonas,pandas.concat(zonas),CLUSTER_9,CLUSTER_2
df,"pandas.read_html(url,match=zona)",CLUSTER_9,CLUSTER_2
purchase_data,pandas.read_csv(file_to_load),CLUSTER_8,CLUSTER_3
embedding,"pandas.DataFrame(data=data,index=keys)",CLUSTER_1,CLUSTER_3
bag2d,numpy.array([vec(word),CLUSTER_1,CLUSTER_3
bag2d,numpy.array([vec(word),CLUSTER_1,CLUSTER_3
i,numpy.argmin(delta),CLUSTER_1,CLUSTER_3
delta,"numpy.sum(diff*diff,axis=1)",CLUSTER_1,CLUSTER_3
doc2vec,"numpy.sum(vdoc,axis=0)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_1,CLUSTER_3
audits,"numpy.arange(0,10,1)",CLUSTER_12,CLUSTER_10
penalties,numpy.zeros(audits.shape[0]),CLUSTER_12,CLUSTER_10
ratios,numpy.zeros(cs.shape[0]),CLUSTER_12,CLUSTER_10
cs,"numpy.linspace(300000,1000000,num=2000)",CLUSTER_12,CLUSTER_10
t,"numpy.arange(0,30,dt)",CLUSTER_1,CLUSTER_10
s1,numpy.sin(2*np.pi*10*t),CLUSTER_1,CLUSTER_10
s2,numpy.sin(2*np.pi*10*t),CLUSTER_1,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(2,1)",CLUSTER_1,CLUSTER_10
data,"pandas.read_csv(""https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/06_Stats/Wind_Stats/wind.data"",sep='\s+')",CLUSTER_8,CLUSTER_3
data['Date'],"pandas.to_datetime(data[['Mo','Dy','Yr']])",CLUSTER_8,CLUSTER_3
xticks,"numpy.linspace(X_min[0],X_max[0],100)",CLUSTER_12,CLUSTER_5
yticks,"numpy.linspace(X_min[1],X_max[1],100)",CLUSTER_12,CLUSTER_5
"xx,yy","numpy.meshgrid(xticks,yticks)",CLUSTER_12,CLUSTER_5
X,"pandas.DataFrame(iris.data,columns=iris.feature_names)",CLUSTER_12,CLUSTER_5
df,"pandas.read_csv(""dt_data.csv"",index_col=0)",CLUSTER_12,CLUSTER_5
ax,matplotlib.pyplot.gca(),CLUSTER_12,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_5
model,sklearn.tree.DecisionTreeClassifier(max_depth=2),CLUSTER_12,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(max_depth=3),CLUSTER_12,CLUSTER_5
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_5
dfconf['Upper_Value'],numpy.exp(dfconf['Upper_Value']),CLUSTER_8,CLUSTER_3
dfconf['Lower_Value'],numpy.exp(dfconf['Lower_Value']),CLUSTER_8,CLUSTER_3
dfconf,pandas.DataFrame(conf),CLUSTER_8,CLUSTER_3
dfconf['Actual'],"pandas.DataFrame([2877,2730,3072,3306,2836,2713,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan],index=dfconf.index)",CLUSTER_8,CLUSTER_3
"forecast,stderr,conf","pandas.Series(model.forecast(steps=12,alpha=0.05)",CLUSTER_8,CLUSTER_3
"xx,yy","numpy.meshgrid(np.linspace(x_min,x_max,101)",CLUSTER_0,CLUSTER_3
df,"pandas.read_csv(args.data_file,header=0)",CLUSTER_0,CLUSTER_3
df_reduced,"pandas.read_csv(args.reduced_data_file,header=0)",CLUSTER_0,CLUSTER_3
x,"numpy.arange(-10,11,1)",CLUSTER_1,CLUSTER_10
x,"numpy.arange(-10,11,1)",CLUSTER_1,CLUSTER_10
x,"numpy.arange(-10,11,1)",CLUSTER_1,CLUSTER_10
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
sorter,numpy.argsort(jla['zcmb']),CLUSTER_5,CLUSTER_9
sorter1,numpy.argsort(logx_valsub),CLUSTER_5,CLUSTER_9
sorter,numpy.argsort(logx_vals),CLUSTER_5,CLUSTER_9
sorter,numpy.argsort(logx_vals),CLUSTER_5,CLUSTER_9
sorter,numpy.argsort(logx_vals),CLUSTER_5,CLUSTER_9
xvals,"numpy.reshape(logx_vals.values,(len(logx_vals)",CLUSTER_5,CLUSTER_9
yvals,"numpy.reshape(jla.mb.values,(len(logx_vals)",CLUSTER_5,CLUSTER_9
yerr,"numpy.reshape(jla.dmb.values,(len(logx_vals)",CLUSTER_5,CLUSTER_9
logx_vals,"numpy.log10(jla[""zcmb""])",CLUSTER_5,CLUSTER_9
logx_vals,"numpy.log10(jla[""zcmb""])",CLUSTER_5,CLUSTER_9
logx_vals,"numpy.log10(jla[""zcmb""])",CLUSTER_5,CLUSTER_9
err,numpy.sqrt(np.diag(pcov),CLUSTER_5,CLUSTER_9
err2,numpy.sqrt(np.diag(pcov2),CLUSTER_5,CLUSTER_9
err2,numpy.sqrt(np.diag(pcov2),CLUSTER_5,CLUSTER_9
test,numpy.setdiff1d(np.arange(Nall),CLUSTER_5,CLUSTER_9
jla,"pandas.read_csv(""drive/MyDrive/dsps/data/jla_likelihood_v6/data/jla_lcparams.txt"",sep="""")",CLUSTER_5,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(line,logx_vals,y_vals,p0=[5,0])",CLUSTER_5,CLUSTER_9
"popt2,pcov2","scipy.optimize.curve_fit(line,logx_vals,y_vals,sigma=jla.dmb,p0=[5,0])",CLUSTER_5,CLUSTER_9
"popt3,pcov3","scipy.optimize.curve_fit(line,logx_valsub,y_valsub)",CLUSTER_5,CLUSTER_9
"popt4,pcov4","scipy.optimize.curve_fit(quad,logx_vals,y_vals,p0=[5,1,0])",CLUSTER_5,CLUSTER_9
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test,yerr_train,yerr_test","sklearn.model_selection.train_test_split(
logx_vals,y_vals,uncertanties,test_size=0.33,random_state=42)",CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test,yerr_train,yerr_test","sklearn.model_selection.train_test_split(
xvals,yvals,yerr,test_size=0.33,random_state=42)",CLUSTER_5,CLUSTER_9
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_4,CLUSTER_11
df,"pandas.DataFrame(cancer['data'],columns=cancer['feature_names'])",CLUSTER_7,CLUSTER_5
df_comp,"pandas.DataFrame(pca.components_,columns=cancer['feature_names'])",CLUSTER_7,CLUSTER_5
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(tips,col=""time"",row=""smoker"")",CLUSTER_1,CLUSTER_10
g,"seaborn.FacetGrid(tips,col=""time"",row=""smoker"")",CLUSTER_1,CLUSTER_10
g,"seaborn.FacetGrid(tips,col=""time"",row=""smoker"",hue='sex')",CLUSTER_1,CLUSTER_10
g,"seaborn.JointGrid(x=""total_bill"",y=""tip"",data=tips)",CLUSTER_1,CLUSTER_10
g,"seaborn.JointGrid(x=""total_bill"",y=""tip"",data=tips)",CLUSTER_1,CLUSTER_10
g,seaborn.PairGrid(iris),CLUSTER_1,CLUSTER_10
g,seaborn.PairGrid(iris),CLUSTER_1,CLUSTER_10
iris,seaborn.load_dataset('iris'),CLUSTER_1,CLUSTER_10
tips,seaborn.load_dataset('tips'),CLUSTER_1,CLUSTER_10
html,requests.get(url),CLUSTER_9,CLUSTER_2
resultTable,pandas.DataFrame(myList),CLUSTER_9,CLUSTER_2
myList,"numpy.column_stack([SNoList,StateList,AdminCapitaList,LegisCapitalList,JudisCapitalList,YearList,FormerCapitalList])",CLUSTER_9,CLUSTER_2
ax2,"plt.colorbar(contours,cax=cax,ax=ax,ticks=numpy.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
cost,numpy.zeros_like(cm),CLUSTER_7,CLUSTER_8
cm,"numpy.around(cm,decimals=2)",CLUSTER_7,CLUSTER_8
n_samples,numpy.median(cnts),CLUSTER_7,CLUSTER_8
"X,Y","numpy.meshgrid(np.arange(0,n_classes,1)",CLUSTER_7,CLUSTER_8
df_resampled,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_resampled,"pandas.concat([df_resampled,df_target_resampled],axis=0)",CLUSTER_7,CLUSTER_8
df_remap['quality2'],"pandas.cut(df.quality,bins=3,labels=[1,2,3])",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('/home/cneiderer/Metis/Neiderer_Metis/Project3/data/winequality-red.csv',delimiter=';')",CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(cnts.index,cnts)",CLUSTER_7,CLUSTER_8
ax,"seaborn.heatmap(Z,ax=ax,cmap='RdYlGn',annot=True,cbar_ax=cax,
vmin=0,vmax=1,cbar_kws={'ticks':np.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
ax2,"matplotlib.pyplot.colorbar(contours,cax=cax,ax=ax,ticks=np.arange(0,1.2,0.2)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(figsize=(18,12)",CLUSTER_7,CLUSTER_8
svm0,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
svm1,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
knn1,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
knn2,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
pipe3,sklearn.pipeline.make_pipeline(StandardScaler(),CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_7,CLUSTER_8
lr3,"sklearn.linear_model.LogisticRegression(C=1e3,
class_weight='balanced',
random_state=129,
multi_class='multinomial',
solver='newton-cg',max_iter=1000)",CLUSTER_7,CLUSTER_8
nb1,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
cities,pandas.read_csv('cities.csv'),CLUSTER_1,CLUSTER_3
self.worldmap,"numpy.zeros((200,200,3)",CLUSTER_12,CLUSTER_9
output_image,"numpy.zeros((img.shape[0]+data.worldmap.shape[0],img.shape[1]*2,3)",CLUSTER_12,CLUSTER_9
	idx_in_front,numpy.where(np.abs(Rover.obs_angles-bearing),CLUSTER_12,CLUSTER_9
color_select,"numpy.zeros_like(img[:,:,0])",CLUSTER_12,CLUSTER_9
color_select,"numpy.zeros_like(img[:,:,0])",CLUSTER_12,CLUSTER_9
x_pix_world,numpy.clip(np.int_(xpix_tran),CLUSTER_12,CLUSTER_9
y_pix_world,numpy.clip(np.int_(ypix_tran),CLUSTER_12,CLUSTER_9
mean_dir,numpy.mean(angles),CLUSTER_12,CLUSTER_9
obs_map,numpy.absolute(np.float32(threshed),CLUSTER_12,CLUSTER_9
angles,"numpy.arctan2(y_pixel,x_pixel)",CLUSTER_12,CLUSTER_9
dist,numpy.sqrt(x_pixel**2+y_pixel**2),CLUSTER_12,CLUSTER_9
source,"numpy.float32([[14,140],[301,140],[200,96],[118,96]])",CLUSTER_12,CLUSTER_9
destination,"numpy.float32([[image.shape[1]/2-dst_size,image.shape[0]-bottom_offset],
[image.shape[1]/2+dst_size,image.shape[0]-bottom_offset],
[image.shape[1]/2+dst_size,image.shape[0]-2*dst_size-bottom_offset],
[image.shape[1]/2-dst_size,image.shape[0]-2*dst_size-bottom_offset],
])",CLUSTER_12,CLUSTER_9
ground_truth_3d,"numpy.dstack((ground_truth*0,ground_truth*255,ground_truth*0)",CLUSTER_12,CLUSTER_9
"output_image[img.shape[0]:,0:data.worldmap.shape[1]]",numpy.flipud(map_add),CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,3)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,9)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,3)",CLUSTER_12,CLUSTER_9
df,"pandas.read_csv('../test_dataset/robot_log.csv',delimiter=';',decimal='.')",CLUSTER_12,CLUSTER_9
data,"pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data',names=column_names)",CLUSTER_5,CLUSTER_1
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
sgdc,sklearn.linear_model.SGDClassifier(),CLUSTER_5,CLUSTER_1
df,"pandas.read_csv('./LifeExpectancy.csv',skiprows=4,header=""infer"")",CLUSTER_1,CLUSTER_3
p0,matplotlib.pyplot.plot(Afghanistan),CLUSTER_1,CLUSTER_3
p1,matplotlib.pyplot.plot(Nepal),CLUSTER_1,CLUSTER_3
p2,matplotlib.pyplot.plot(NewZealand),CLUSTER_1,CLUSTER_3
p3,matplotlib.pyplot.plot(Netherlands),CLUSTER_1,CLUSTER_3
wmt,pandas.read_csv('./../data/WMT.csv'),CLUSTER_7,CLUSTER_3
wmt.ds,pandas.to_datetime(wmt.ds),CLUSTER_7,CLUSTER_3
myTime,time.time(),CLUSTER_7,CLUSTER_3
myTime,time.time(),CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,2)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_1,CLUSTER_3
cm,matplotlib.pyplot.get_cmap('jet'),CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(np.array([56,52,4,150,30,0,0,0,39,17,0,
63,54,9,185,37,0,0,0,44,17,2,
112,106,6,1598,29,293,281,8,99,12,1])",CLUSTER_1,CLUSTER_3
xx,numpy.ones_like(zz),CLUSTER_1,CLUSTER_3
yy,numpy.ones_like(zz),CLUSTER_1,CLUSTER_3
z,numpy.ones_like(xx),CLUSTER_1,CLUSTER_3
"xx,yy",numpy.meshgrid(range(50),CLUSTER_1,CLUSTER_3
mean1,numpy.array(data1.mean(),CLUSTER_3,CLUSTER_3
mean2,numpy.array(data2.mean(),CLUSTER_3,CLUSTER_3
dif1,numpy.array(data1-mean1),CLUSTER_3,CLUSTER_3
dif2,numpy.array(data2-mean2),CLUSTER_3,CLUSTER_3
Euclidean,"numpy.array(np.power(abs(train.sub(numpy.array(numpy.array(test.loc[[j],:])",CLUSTER_3,CLUSTER_3
K_neighbours,"numpy.array([trainLabel[j]forjinnp.argpartition(Euclidean,i)",CLUSTER_3,CLUSTER_3
w1,numpy.dot(np.linalg.pinv(cov),CLUSTER_3,CLUSTER_3
predictedY,"numpy.dot(test_data,w1)",CLUSTER_3,CLUSTER_3
predictedY,"numpy.dot(test_data,w1)",CLUSTER_3,CLUSTER_3
output,pandas.DataFrame(output),CLUSTER_3,CLUSTER_3
output,"pandas.concat([data1,data2],ignore_index=True)",CLUSTER_3,CLUSTER_3
output,"pandas.concat([data1,data2,data3,data4,data5,data6],ignore_index=True)",CLUSTER_3,CLUSTER_3
output,"pandas.concat([data1,data2,data3],ignore_index=True)",CLUSTER_3,CLUSTER_3
output,"pandas.concat([data1,data2],ignore_index=True)",CLUSTER_3,CLUSTER_3
output,"pandas.read_csv(filename,delimiter=',',header=None)",CLUSTER_3,CLUSTER_3
w0,math.log(p1),CLUSTER_3,CLUSTER_3
hospital_read_df,pandas.read_csv('data/cms_hospital_readmissions.csv'),CLUSTER_7,CLUSTER_3
perm_samp,numpy.empty(size),CLUSTER_7,CLUSTER_3
comb_data,"numpy.concatenate((data1,data2)",CLUSTER_7,CLUSTER_3
perm_samp[i],numpy.sum(permuted_data[:len(data1),CLUSTER_7,CLUSTER_3
p,numpy.sum(perm_replicates>(sum(data1),CLUSTER_7,CLUSTER_3
p,numpy.sum(perm_replicates>(sum(data2),CLUSTER_7,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_3
df,"pandas.read_excel(""ENB2012_data.xlsx"")",CLUSTER_7,CLUSTER_5
ax,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_5
reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
model,"sklearn.pipeline.Pipeline([('poly',PolynomialFeatures(degree=2)",CLUSTER_7,CLUSTER_5
model,"sklearn.pipeline.Pipeline([
('scale',StandardScaler()",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(other_path,header=None)",CLUSTER_8,CLUSTER_4
df,"pandas.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame({'col1':[1,2,3,np.nan],
'col2':[np.nan,555,666,444],
'col3':['abc','def','ghi','xyz']})",CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(data),CLUSTER_8,CLUSTER_3
train['PAY_LAST_3_CAT'],"pandas.qcut(train['PAY_LAST_3'],q=3,labels=['PAY_EARLY','PAY_REG','PAY_LATE'])",CLUSTER_7,CLUSTER_5
train['PAY_FIRST_3_CAT'],"pandas.qcut(train['PAY_FIRST_3'],q=3,labels=['PAY_EARLY','PAY_REG','PAY_LATE'])",CLUSTER_7,CLUSTER_5
train['PAY_AVG_CAT'],"pandas.qcut(train['PAY_AVG'],q=3,labels=['PAY_EARLY','PAY_REG','PAY_LATE'])",CLUSTER_7,CLUSTER_5
x,"pandas.qcut(train['PAY_LAST_3'],q=3)",CLUSTER_7,CLUSTER_5
train['PAY_TREND_CAT'],"pandas.qcut(train['PAY_TREND'],q=2,labels=['DEC','INC'])",CLUSTER_7,CLUSTER_5
train['PAY_LAST_2_CAT'],"pandas.qcut(train.apply(avg_payments(['PAY_DEC','PAY_NOV'])",CLUSTER_7,CLUSTER_5
train,pandas.read_csv('data/train_clean.csv'),CLUSTER_7,CLUSTER_5
test,"pandas.read_csv('data/test_clean.csv',sep=';')",CLUSTER_7,CLUSTER_5
pay_sum_acc,"sklearn.metrics.accuracy_score(prediction,train['DEFAULTPAYMENTJAN'])",CLUSTER_7,CLUSTER_5
pay_sum_acc_norm,"sklearn.metrics.accuracy_score(prediction_norm,train['DEFAULTPAYMENTJAN'])",CLUSTER_7,CLUSTER_5
"df[""year""]",pandas.DatetimeIndex(df.fundedDate),CLUSTER_8,CLUSTER_3
"df[""month""]",pandas.DatetimeIndex(df.fundedDate),CLUSTER_8,CLUSTER_3
company,"pandas.pivot_table(data=df,index=""company"",aggfunc=""count"",margins=True)",CLUSTER_8,CLUSTER_3
df,"pandas.read_excel(""CaseStudy-VCfundingdata.xlsx"",sheet_name=""FundingData"")",CLUSTER_8,CLUSTER_3
new_df,"pandas.read_excel(""CaseStudy-VCfundingdata.xlsx"",sheet_name=""FundingData"")",CLUSTER_8,CLUSTER_3
df_2,"pandas.read_excel(""CaseStudy-VCfundingdata.xlsx"",sheet_name=""StateMap"")",CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(),CLUSTER_11,CLUSTER_3
fruits_df,"pandas.DataFrame(fruits,columns=['Fruit'])",CLUSTER_11,CLUSTER_3
people_df,"pandas.DataFrame(people,columns=['Name','Age','BloodGroup'])",CLUSTER_11,CLUSTER_3
people_df,pandas.DataFrame(people),CLUSTER_11,CLUSTER_3
df1,"pandas.DataFrame({
'id':[1,2,3,4,5],
'name':['a','b','c','d','e'],
'sub':['sub1','sub2','sub3','sub4','sub5']
})",CLUSTER_11,CLUSTER_3
df2,"pandas.DataFrame({
'id':[1,2,3,4,5],
'name':['b','c','d','e','f'],
'sub':['sub3','sub4','sub5','sub6','sub7']
})",CLUSTER_11,CLUSTER_3
df1,"pandas.DataFrame({
'emp_id':[1,2,3,4,5],
'emp_name':['a','b','c','d','e'],
'sub':['sub1','sub2','sub3','sub4','sub5']
})",CLUSTER_11,CLUSTER_3
df2,"pandas.DataFrame({
'dept_id':[1,2,3,4,5],
'dept_name':['b','c','d','e','f'],
'sub':['sub3','sub4','sub5','sub6','sub7']
})",CLUSTER_11,CLUSTER_3
df3,"pandas.DataFrame({'id':[10],
'name':['z'],
'sub':['sub10']})",CLUSTER_11,CLUSTER_3
cmp_df,pandas.DataFrame(company_df),CLUSTER_11,CLUSTER_3
people_df,"pandas.DataFrame(people,columns=['Name','Score','BloodGroup'])",CLUSTER_11,CLUSTER_3
df1_st,"pandas.DataFrame(myList1,columns=['Star_ID','Loc_ID','pmRA','pmDE','Field','Jmag','Hmag'])",CLUSTER_11,CLUSTER_3
df2_st,"pandas.DataFrame(myList2,columns=['Star_ID','Loc_ID','pmRA','pmDE','Field','Jmag','Hmag'])",CLUSTER_11,CLUSTER_3
my_series,pandas.Series(dicts),CLUSTER_11,CLUSTER_3
s1,pandas.Series(dicts1),CLUSTER_11,CLUSTER_3
df_onlyleft,"pandas.merge(left=df1_x,right=df2_x,on='ID',how='left',indicator=True)",CLUSTER_11,CLUSTER_3
df3_st,"pandas.merge(df1_st,df2_st,on='Star_ID')",CLUSTER_11,CLUSTER_3
csv_df,pandas.read_csv('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/supermarkets.csv'),CLUSTER_11,CLUSTER_3
txt_df,"pandas.read_csv('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/supermarkets-semi-colons.txt',sep=';')",CLUSTER_11,CLUSTER_3
web_df,pandas.read_csv('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/supermarkets.csv'),CLUSTER_11,CLUSTER_3
market_df,pandas.read_csv('http://pythonhow.com/supermarkets.csv'),CLUSTER_11,CLUSTER_3
air_df,pandas.read_csv('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/AirQualityUCI.csv'),CLUSTER_11,CLUSTER_3
excel_df,"pandas.read_excel('https://github.com/insaid2018/Term-1/blob/master/Data/Casestudy/supermarkets.xlsx?raw=true',sheet_name=0)",CLUSTER_11,CLUSTER_3
json_df,pandas.read_json('https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Casestudy/supermarkets.json'),CLUSTER_11,CLUSTER_3
air_df['Date'],"pandas.to_datetime(air_df['Date'],format='%m/%d/%Y')",CLUSTER_11,CLUSTER_3
air_df['Time'],"pandas.to_datetime(air_df['Time'],format='%H:%M:%S')",CLUSTER_11,CLUSTER_3
timestamp,"pandas.to_datetime(""09:00:00"",format='%H:%M:%S')",CLUSTER_11,CLUSTER_3
datestamp,"pandas.to_datetime(""01/01/2005"",format='%d/%m/%Y')",CLUSTER_11,CLUSTER_3
a,numpy.arange(12),CLUSTER_11,CLUSTER_3
arr,numpy.array(capitals),CLUSTER_11,CLUSTER_3
tips,seaborn.load_dataset('tips'),CLUSTER_11,CLUSTER_3
dummy_label,pandas.get_dummies(train_labels),CLUSTER_5,CLUSTER_0
dummy_vote_label,pandas.get_dummies(vote),CLUSTER_5,CLUSTER_0
test_rss,"pandas.read_csv(path+'/Training_rss_21Aug17.csv',header=0)",CLUSTER_5,CLUSTER_0
test_coord,"pandas.read_csv(path+'/Training_coordinates_21Aug17.csv',header=0)",CLUSTER_5,CLUSTER_0
train_rss,"pandas.read_csv(path+'/Test_rss_21Aug17.csv',header=0)",CLUSTER_5,CLUSTER_0
train_coord,"pandas.read_csv(path+'/Test_coordinates_21Aug17.csv',header=0)",CLUSTER_5,CLUSTER_0
sample_x,numpy.array(sample_x),CLUSTER_5,CLUSTER_0
sample_y,numpy.array(sample_y),CLUSTER_5,CLUSTER_0
train_labels,numpy.asarray(building_floors_str),CLUSTER_5,CLUSTER_0
train_labels,numpy.asarray(dummy_label),CLUSTER_5,CLUSTER_0
test_labels,numpy.asarray(test_ch.map(str),CLUSTER_5,CLUSTER_0
test_labels,numpy.asarray(pd.get_dummies(test_labels),CLUSTER_5,CLUSTER_0
vote,numpy.asarray(vote),CLUSTER_5,CLUSTER_0
vote_labels,numpy.asarray(dummy_vote_label),CLUSTER_5,CLUSTER_0
ifnp.all(vote_labels[i]),=numpy.all(test_labels[i]),CLUSTER_5,CLUSTER_0
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_5,CLUSTER_0
"train_x,val_x,train_y,val_y","sklearn.model_selection.train_test_split(train_Xx,train_Yy,test_size=0.2)",CLUSTER_5,CLUSTER_0
index,random.randrange(len(x),CLUSTER_5,CLUSTER_0
name_path,os.listdir(data_path),CLUSTER_4,CLUSTER_6
temp,"os.listdir(os.path.join(data_path,v)",CLUSTER_4,CLUSTER_6
filenames,os.listdir(path),CLUSTER_4,CLUSTER_6
filenames,os.listdir(path),CLUSTER_4,CLUSTER_6
autolib_df,pandas.read_csv(url),CLUSTER_1,CLUSTER_3
new_autolib_data_df,pandas.read_csv('new_autolib.csv'),CLUSTER_1,CLUSTER_3
X_train_scaled,pandas.DataFrame(scaler.fit_transform(X_train),CLUSTER_7,CLUSTER_5
X_test_scaled,pandas.DataFrame(scaler.transform(X_test),CLUSTER_7,CLUSTER_5
features,"pandas.DataFrame(tree_sel.feature_importances_,
index=X_train.columns,
columns=['Importance'])",CLUSTER_7,CLUSTER_5
scores,"pandas.DataFrame({'roc_auc_score':roc_scores,'f1_score':f1_scores,'accuracy':acc_scores},
index=labels)",CLUSTER_7,CLUSTER_5
data,"pandas.get_dummies(data,columns=col_for_dum)",CLUSTER_7,CLUSTER_5
data,"pandas.read_excel('defaultofcreditcardclients.xls',header=1)",CLUSTER_7,CLUSTER_5
estimators,"numpy.arange(25,425,25)",CLUSTER_7,CLUSTER_5
depth,"numpy.arange(3,25)",CLUSTER_7,CLUSTER_5
min_l,"numpy.arange(3,10)",CLUSTER_7,CLUSTER_5
tick_marks,numpy.arange(len(classes),CLUSTER_7,CLUSTER_5
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
val_train_mean,"numpy.mean(val_train,axis=1)",CLUSTER_7,CLUSTER_5
val_test_mean,"numpy.mean(val_test,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
val_train_std,"numpy.std(val_train,axis=1)",CLUSTER_7,CLUSTER_5
val_test_std,"numpy.std(val_test,axis=1)",CLUSTER_7,CLUSTER_5
n_jobs,"1,train_sizes=numpy.linspace(.1,1.0,10)",CLUSTER_7,CLUSTER_5
n_jobs,"-1,train_sizes=numpy.linspace(.1,1.0,10)",CLUSTER_7,CLUSTER_5
learn_rate,"numpy.linspace(0.01,1.0,10)",CLUSTER_7,CLUSTER_5
tsne_model,"sklearn.manifold.TSNE(2,random_state=17)",CLUSTER_7,CLUSTER_5
tsne_model,"sklearn.manifold.TSNE(2,random_state=17)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
score_acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,grid_logit.predict(X_test_new)",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,grid_boosting.predict(X_test_new)",CLUSTER_7,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,grid_forest.predict(X_test_new)",CLUSTER_7,CLUSTER_5
score_f1,"sklearn.metrics.f1_score(y_test,y_pred,average='weighted')",CLUSTER_7,CLUSTER_5
score_roc,"sklearn.metrics.roc_auc_score(y_test,y_roc)",CLUSTER_7,CLUSTER_5
forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=50,random_state=17,
class_weight='balanced')",CLUSTER_7,CLUSTER_5
boosting,sklearn.ensemble.GradientBoostingClassifier(random_state=17),CLUSTER_7,CLUSTER_5
logit,"sklearn.linear_model.LogisticRegression(random_state=17,class_weight='balanced')",CLUSTER_7,CLUSTER_5
tree_sel,sklearn.tree.DecisionTreeClassifier(random_state=17),CLUSTER_7,CLUSTER_5
sss,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=5,test_size=0.3,random_state=17)",CLUSTER_7,CLUSTER_5
grid_logit,"sklearn.model_selection.GridSearchCV(logit,logit_parameters,n_jobs=-1,scoring='roc_auc',cv=sss)",CLUSTER_7,CLUSTER_5
grid_boosting,"sklearn.model_selection.GridSearchCV(boosting,boosting_parameters,n_jobs=-1,scoring='roc_auc',cv=sss)",CLUSTER_7,CLUSTER_5
grid_forest,"sklearn.model_selection.GridSearchCV(forest,forest_parameters,n_jobs=-1,scoring='roc_auc',cv=sss)",CLUSTER_7,CLUSTER_5
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes,scoring=scoring)",CLUSTER_7,CLUSTER_5
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes,scoring=scoring)",CLUSTER_7,CLUSTER_5
"val_train,val_test","sklearn.model_selection.validation_curve(estimator,X,y,cv_param_name,
cv_param_values,cv=cv,
scoring=scoring)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,y_score[i])",CLUSTER_7,CLUSTER_5
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_7,CLUSTER_5
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
df1,"pandas.read_csv(""http://cocl.us/Geospatial_data"")",CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
K_gradient,"numpy.einsum(""ijk,i,j->ijk"",R[1],d,d)",CLUSTER_5,CLUSTER_5
K_gradient,"numpy.einsum(""ijk,i,j->ijk"",R[1],diag_X,diag_Y)",CLUSTER_5,CLUSTER_5
K,"numpy.einsum(""ij,i,j->ij"",R,diag_X,diag_Y)",CLUSTER_5,CLUSTER_5
d,numpy.diag(R[0]),CLUSTER_5,CLUSTER_5
K,numpy.diag(d),CLUSTER_5,CLUSTER_5
d,numpy.diag(R),CLUSTER_5,CLUSTER_5
K,numpy.diag(d),CLUSTER_5,CLUSTER_5
K,numpy.diag(diag_X),CLUSTER_5,CLUSTER_5
inputs,numpy.array(int_text[0:inputs_to_use]),CLUSTER_2,CLUSTER_7
targets,numpy.array(int_text[1:inputs_to_use+1]),CLUSTER_2,CLUSTER_7
inputs,"numpy.split(inputs,batches,1)",CLUSTER_2,CLUSTER_7
targets,"numpy.split(targets,batches,1)",CLUSTER_2,CLUSTER_7
data,"pandas.read_csv(""globalterrorismdb_0718dist_.csv"",encoding=""iso-8859-1"",low_memory=False)",CLUSTER_1,CLUSTER_3
kmeans_model,"sklearn.cluster.KMeans(n_clusters=num_clusters,n_init=5,max_iter=400,random_state=1,n_jobs=1)",CLUSTER_5,CLUSTER_10
df,pandas.read_csv('../01.Data_Collection/films.csv'),CLUSTER_8,CLUSTER_3
actor,pandas.read_csv('../01.Data_Collection/actor_code.csv'),CLUSTER_8,CLUSTER_3
toronto,pandas.DataFrame(columns=column_names),CLUSTER_9,CLUSTER_2
extracting_data,requests.get(url),CLUSTER_9,CLUSTER_2
df,"pandas.read_csv('df_comprehensive.csv',index_col=0)",CLUSTER_7,CLUSTER_3
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6','pca7'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5','pca6','pca7'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6','pca7','pca8'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5','pca6','pca7','pca8'])",CLUSTER_7,CLUSTER_8
train_proj,"pandas.DataFrame(data=principal_components1,
columns=['pc_1','pc2','pc3','pc4','pc5','pc6','pca7','pca8','pca9'])",CLUSTER_7,CLUSTER_8
test_proj,"pandas.DataFrame(data=principal_components2,
columns=['pc_1','pc2','pc3','pc4','pc5','pca6','pca7','pca8','pca9'])",CLUSTER_7,CLUSTER_8
proj,pandas.DataFrame(test_proj),CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(""fashion-mnist_train.csv"")",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(""fashion-mnist_test.csv"")",CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
labels,numpy.zeros_like(clusters),CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=10,random_state=7)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(2,5,figsize=(8,3)",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
labels[mask],"scipy.stats.mode(test[""label""][mask])",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=1),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=4),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=5),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=6),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=7),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=8),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=9),CLUSTER_7,CLUSTER_8
tsne,"sklearn.manifold.TSNE(n_components=2,init='random',random_state=0)",CLUSTER_7,CLUSTER_8
v3,"numpy.array([1.0,0.2])",CLUSTER_1,CLUSTER_10
e_3,"numpy.matrix([[7],[0]])",CLUSTER_1,CLUSTER_10
e_4,"numpy.matrix([[0],[-2]])",CLUSTER_1,CLUSTER_10
transfusion,pandas.read_csv('datasets/transfusion.data'),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
transfusion.drop(columns='target')",CLUSTER_5,CLUSTER_1
tpot_auc_score,"sklearn.metrics.roc_auc_score(y_test,tpot.predict_proba(X_test)",CLUSTER_5,CLUSTER_1
logreg_auc_score,"sklearn.metrics.roc_auc_score(y_test,logreg.predict_proba(X_test_normed)",CLUSTER_5,CLUSTER_1
df_['monetary_log'],numpy.log(df_['Monetary(c.c.blood),CLUSTER_5,CLUSTER_1
logreg,"sklearn.linear_model.LogisticRegression(
solver='liblinear',
random_state=42
)",CLUSTER_5,CLUSTER_1
q_50,numpy.percentile(app_train[~app_train['AMT_ANNUITY'].isnull(),CLUSTER_4,CLUSTER_11
app_train,pandas.read_csv(f_app),CLUSTER_4,CLUSTER_11
mode_get,scipy.stats.mode(app_train[~app_train['AMT_GOODS_PRICE'].isnull(),CLUSTER_4,CLUSTER_11
start_time,time.time(),CLUSTER_4,CLUSTER_11
today,datetime.date.today(),CLUSTER_11,CLUSTER_12
delta,datetime.timedelta(days=100),CLUSTER_11,CLUSTER_12
n,"numpy.arange(0,30,2)",CLUSTER_11,CLUSTER_12
s,numpy.arange(13),CLUSTER_11,CLUSTER_12
r,numpy.arange(36),CLUSTER_11,CLUSTER_12
x,numpy.array(mylist),CLUSTER_11,CLUSTER_12
y,"numpy.array([4,5,6])",CLUSTER_11,CLUSTER_12
m,"numpy.array([[7,8,9],[10,11,12]])",CLUSTER_11,CLUSTER_12
z,"numpy.array([y,y**2])",CLUSTER_11,CLUSTER_12
z,"numpy.array([y,y**2])",CLUSTER_11,CLUSTER_12
a,"numpy.array([-4,-2,1,3,5])",CLUSTER_11,CLUSTER_12
p,"numpy.ones([2,3],int)",CLUSTER_11,CLUSTER_12
o,"numpy.linspace(0,4,9)",CLUSTER_11,CLUSTER_12
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_10
y,numpy.sin(2*np.pi*(x-0.01*i),CLUSTER_12,CLUSTER_10
x,"numpy.linspace(0,2,1000)",CLUSTER_12,CLUSTER_10
raw_tea_df,"pandas.read_csv(""./scraper/tea.csv"")",CLUSTER_8,CLUSTER_3
figure,"matplotlib.pyplot.figure(figsize=(8,15)",CLUSTER_5,CLUSTER_10
ax,matplotlib.pyplot.subplot(len(datasets),CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.4,random_state=42)",CLUSTER_5,CLUSTER_10
X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_10
"X,y","sklearn.datasets.make_classification(n_features=2,n_redundant=0,n_informative=2,
random_state=1,n_clusters_per_class=1)",CLUSTER_5,CLUSTER_10
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(2,4,figsize=(20,8)",CLUSTER_5,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(2,4,figsize=(20,8)",CLUSTER_5,CLUSTER_10
line,"numpy.linspace(-3,3,100)",CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,stratify=y,random_state=42)",CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(canser.data,canser.target,random_state=0)",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0)",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,hidden_layer_sizes=[10])",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,hidden_layer_sizes=[10,10])",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,
activation='tanh',hidden_layer_sizes=[10,10])",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=0,
hidden_layer_sizes=[n_hidden_nodes,n_hidden_nodes],
alpha=alpha)",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(solver='lbfgs',random_state=i,hidden_layer_sizes=[100,100])",CLUSTER_5,CLUSTER_10
mlp,sklearn.neural_network.MLPClassifier(random_state=0),CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(random_state=0,max_iter=1000)",CLUSTER_5,CLUSTER_10
mlp,"sklearn.neural_network.MLPClassifier(random_state=0,max_iter=1000,alpha=1)",CLUSTER_5,CLUSTER_10
"X,y","sklearn.datasets.make_moons(n_samples=100,noise=0.25,random_state=3)",CLUSTER_5,CLUSTER_10
canser,sklearn.datasets.load_breast_cancer(),CLUSTER_5,CLUSTER_10
X,"numpy.array(gen_data(n_samples,0.7)",CLUSTER_4,CLUSTER_0
X,"numpy.array(gen_data(n_samples,1)",CLUSTER_4,CLUSTER_0
test,"numpy.array(gen_data(2,1)",CLUSTER_4,CLUSTER_0
X,"numpy.zeros((n_chars,len(cat)",CLUSTER_4,CLUSTER_0
X_new,"numpy.zeros((X.shape[0],)",CLUSTER_4,CLUSTER_0
X_new,"numpy.copy(X[:,0])",CLUSTER_4,CLUSTER_0
train,"pandas.read_csv(""train_cab.csv"",na_values={""pickup_datetime"":""43""})",CLUSTER_7,CLUSTER_5
test,"pandas.read_csv(""test.csv"")",CLUSTER_7,CLUSTER_5
train['pickup_datetime'],"pandas.to_datetime(train['pickup_datetime'],format='%Y-%m-%d%H:%M:%SUTC')",CLUSTER_7,CLUSTER_5
"test[""pickup_datetime""]","pandas.to_datetime(test[""pickup_datetime""],format=""%Y-%m-%d%H:%M:%SUTC"")",CLUSTER_7,CLUSTER_5
"train[""fare_amount""]","pandas.to_numeric(train[""fare_amount""],errors=""coerce"")",CLUSTER_7,CLUSTER_5
train['fare_amount'],numpy.log1p(train['fare_amount']),CLUSTER_7,CLUSTER_5
train['distance'],numpy.log1p(train['distance']),CLUSTER_7,CLUSTER_5
test['distance'],numpy.log1p(test['distance']),CLUSTER_7,CLUSTER_5
RMSE_test_LR,"numpy.sqrt(mean_squared_error(y_test,pred_test_LR)",CLUSTER_7,CLUSTER_5
RMSE_train_LR,"numpy.sqrt(mean_squared_error(y_train,pred_train_LR)",CLUSTER_7,CLUSTER_5
RMSE_train_DT,"numpy.sqrt(mean_squared_error(y_train,pred_train_DT)",CLUSTER_7,CLUSTER_5
RMSE_test_DT,"numpy.sqrt(mean_squared_error(y_test,pred_test_DT)",CLUSTER_7,CLUSTER_5
RMSE_train_RF,"numpy.sqrt(mean_squared_error(y_train,pred_train_RF)",CLUSTER_7,CLUSTER_5
RMSE_test_RF,"numpy.sqrt(mean_squared_error(y_test,pred_test_RF)",CLUSTER_7,CLUSTER_5
RMSE_train_GB,"numpy.sqrt(mean_squared_error(y_train,pred_train_GB)",CLUSTER_7,CLUSTER_5
RMSE_test_GB,"numpy.sqrt(mean_squared_error(y_test,pred_test_GB)",CLUSTER_7,CLUSTER_5
RRF_rmse,"numpy.sqrt(mean_squared_error(y_test,predictions_RRF)",CLUSTER_7,CLUSTER_5
gb_rmse,"numpy.sqrt(mean_squared_error(y_test,predictions_gb)",CLUSTER_7,CLUSTER_5
GRF_rmse,"numpy.sqrt(mean_squared_error(y_test,predictions_GRF)",CLUSTER_7,CLUSTER_5
Ggb_rmse,"numpy.sqrt(mean_squared_error(y_test,predictions_Ggb)",CLUSTER_7,CLUSTER_5
fit_DT,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_7,CLUSTER_5
fit_RF,sklearn.ensemble.RandomForestRegressor(n_estimators=200),CLUSTER_7,CLUSTER_5
rf,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_7,CLUSTER_5
RRF,sklearn.ensemble.RandomForestRegressor(random_state=0),CLUSTER_7,CLUSTER_5
regr,sklearn.ensemble.RandomForestRegressor(random_state=0),CLUSTER_7,CLUSTER_5
regr,sklearn.ensemble.RandomForestRegressor(random_state=0),CLUSTER_7,CLUSTER_5
fit_GB,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_7,CLUSTER_5
gb,sklearn.ensemble.GradientBoostingRegressor(random_state=42),CLUSTER_7,CLUSTER_5
gb,sklearn.ensemble.GradientBoostingRegressor(random_state=0),CLUSTER_7,CLUSTER_5
gb,sklearn.ensemble.GradientBoostingRegressor(random_state=0),CLUSTER_7,CLUSTER_5
fit_LR,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train.iloc[:,train.columns!='fare_amount'],
train.iloc[:,0],test_size=0.20,random_state=1)",CLUSTER_7,CLUSTER_5
RRF_r2,"sklearn.metrics.r2_score(y_test,predictions_RRF)",CLUSTER_7,CLUSTER_5
gb_r2,"sklearn.metrics.r2_score(y_test,predictions_gb)",CLUSTER_7,CLUSTER_5
GRF_r2,"sklearn.metrics.r2_score(y_test,predictions_GRF)",CLUSTER_7,CLUSTER_5
Ggb_r2,"sklearn.metrics.r2_score(y_test,predictions_Ggb)",CLUSTER_7,CLUSTER_5
gridcv_rf,"sklearn.model_selection.GridSearchCV(regr,param_grid=grid_search,cv=5)",CLUSTER_7,CLUSTER_5
gridcv_gb,"sklearn.model_selection.GridSearchCV(gb,param_grid=grid_search,cv=5)",CLUSTER_7,CLUSTER_5
gridcv_rf,"sklearn.model_selection.GridSearchCV(regr,param_grid=grid_search,cv=5)",CLUSTER_7,CLUSTER_5
a,math.sin(dlat/2),CLUSTER_7,CLUSTER_5
randomcv_rf,"sklearn.model_selection.RandomizedSearchCV(RRF,param_distributions=rand_grid,n_iter=5,cv=5,random_state=0)",CLUSTER_7,CLUSTER_5
randomcv_gb,"sklearn.model_selection.RandomizedSearchCV(gb,param_distributions=rand_grid,n_iter=5,cv=5,random_state=0)",CLUSTER_7,CLUSTER_5
dframe,pandas.DataFrame(fips_sentiment),CLUSTER_0,CLUSTER_11
df,"pandas.read_csv(""us_cities.csv"")",CLUSTER_0,CLUSTER_11
Tweet1,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
parsed_tweet,json.loads(tweet),CLUSTER_0,CLUSTER_11
t,json.loads(tweet),CLUSTER_0,CLUSTER_11
t,json.loads(tweet),CLUSTER_0,CLUSTER_11
t,json.loads(tweet),CLUSTER_0,CLUSTER_11
match,"re.match(pattern,city)",CLUSTER_0,CLUSTER_11
text,"re.sub('\[.*?\]','',text)",CLUSTER_0,CLUSTER_11
text,re.sub('[%s]'%re.escape(string.punctuation),CLUSTER_0,CLUSTER_11
text,"re.sub('\w*\d\w*','',text)",CLUSTER_0,CLUSTER_11
text,"re.sub('[‘’“”…]','',parsed_tweet[""cleaned_text""])",CLUSTER_0,CLUSTER_11
text,"re.sub('\n','',text)",CLUSTER_0,CLUSTER_11
recovered,"numpy.zeros((n,1)",CLUSTER_4,CLUSTER_11
dead,"numpy.zeros((n,1)",CLUSTER_4,CLUSTER_11
collision,"numpy.zeros((n,n)",CLUSTER_4,CLUSTER_11
inf_sum,numpy.zeros(np.int(t_tot/delT),CLUSTER_4,CLUSTER_11
infidx,"numpy.where(color[:,0]==1)",CLUSTER_4,CLUSTER_11
healthyidx,"numpy.where(color[:,1]==1)",CLUSTER_4,CLUSTER_11
deadidx,"numpy.where(color[:,3]==1)",CLUSTER_4,CLUSTER_11
recovidx,"numpy.where(color[:,2]==1)",CLUSTER_4,CLUSTER_11
phi,numpy.arctan2((pos1[1]-pos0[1]),CLUSTER_4,CLUSTER_11
th0,"numpy.arctan2(v[k,1],v[k,0])",CLUSTER_4,CLUSTER_11
th1,"numpy.arctan2(v[j,1],v[j,0])",CLUSTER_4,CLUSTER_11
t_rec,numpy.ceil(t_recovery*np.ones(n),CLUSTER_4,CLUSTER_11
v0_mag,"numpy.sqrt(v[k,0]**2+v[k,1]**2)",CLUSTER_4,CLUSTER_11
v1_mag,"numpy.sqrt(v[j,0]**2+v[j,1]**2)",CLUSTER_4,CLUSTER_11
t,"numpy.linspace(0,t_tot,np.int(t_tot/delT)",CLUSTER_4,CLUSTER_11
v,numpy.hstack((speed*np.cos(th),CLUSTER_4,CLUSTER_11
color,"numpy.hstack([infected,healthy,recovered]*(1-dead)",CLUSTER_4,CLUSTER_11
color,"numpy.hstack((color,dead)",CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(2,1,figsize=(5,10)",CLUSTER_4,CLUSTER_11
x,numpy.arange(len(feature_names),CLUSTER_5,CLUSTER_5
x,numpy.arange(len(feature_names),CLUSTER_5,CLUSTER_5
x,numpy.arange(len(feature_names),CLUSTER_5,CLUSTER_5
data,"pandas.read_csv(""SpeedDatingData.csv"",encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_5
X,sklearn.preprocessing.scale(features),CLUSTER_5,CLUSTER_5
Y,sklearn.preprocessing.scale(features),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_5,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
proj,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(12,5)",CLUSTER_5,CLUSTER_5
_,"matplotlib.pyplot.xticks(x+0.5,feature_names,rotation=30)",CLUSTER_5,CLUSTER_5
_,"matplotlib.pyplot.xticks(x+0.5,feature_names,rotation=30)",CLUSTER_5,CLUSTER_5
_,"matplotlib.pyplot.xticks(x+0.5,feature_names,rotation=30)",CLUSTER_5,CLUSTER_5
logreg,sklearn.linear_model.LogisticRegression(C=1),CLUSTER_5,CLUSTER_5
logreg_men,sklearn.linear_model.LogisticRegression(C=1),CLUSTER_5,CLUSTER_5
logreg_women,sklearn.linear_model.LogisticRegression(C=1),CLUSTER_5,CLUSTER_5
response,"requests.get(url=url,headers=headers)",CLUSTER_10,CLUSTER_12
detail_page_text,"requests.get(url=detail_url,headers=headers)",CLUSTER_10,CLUSTER_12
traindf['cleaned'],numpy.array(corpus),CLUSTER_0,CLUSTER_5
testdf['cleaned'],numpy.array(corpus_test),CLUSTER_0,CLUSTER_5
train_upsampled,"pandas.concat([train_minority_upsampled,train_majority])",CLUSTER_0,CLUSTER_5
traindf,pandas.read_csv('data/train.csv'),CLUSTER_0,CLUSTER_5
testdf,pandas.read_csv('data/test.csv'),CLUSTER_0,CLUSTER_5
tweet,"re.sub('[^a-zA-Z]','',tweet)",CLUSTER_0,CLUSTER_5
tweet,re.sub('((www\.[^\s]+),CLUSTER_0,CLUSTER_5
tweet,"re.sub('@[^\s]+','AT_USER',tweet)",CLUSTER_0,CLUSTER_5
tweet,"re.sub(r'
tweet=tweet.split()",CLUSTER_0,CLUSTER_5
tweet,"re.sub('[^a-zA-Z]','',tweet)",CLUSTER_0,CLUSTER_5
tweet,re.sub('((www\.[^\s]+),CLUSTER_0,CLUSTER_5
tweet,"re.sub('@[^\s]+','AT_USER',tweet)",CLUSTER_0,CLUSTER_5
tweet,"re.sub(r'
tweet=tweet.split()",CLUSTER_0,CLUSTER_5
"X_train_bow,X_val_bow,y_train,y_val","sklearn.model_selection.train_test_split(train_upsampled_bow,train_upsampled['label'],test_size=0.2,random_state=42)",CLUSTER_0,CLUSTER_5
rf_bow,"sklearn.ensemble.RandomForestClassifier(n_estimators=400,random_state=11)",CLUSTER_0,CLUSTER_5
sample_df,"pandas.DataFrame(sample_numpy_data,index=dates_index,columns=list('ABCD')",CLUSTER_1,CLUSTER_3
dates_index,"pandas.date_range(starting_date,periods=6)",CLUSTER_1,CLUSTER_3
sample_numpy_data,numpy.array(np.arange(24),CLUSTER_1,CLUSTER_3
train_loss,"numpy.array([i[""train_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
valid_loss,"numpy.array([i[""valid_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_train_loss,"numpy.array([i[""train_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_str_train_loss,"numpy.array([i[""train_loss""]foriinnet1_stretch.train_history_])",CLUSTER_4,CLUSTER_8
net1_str_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_stretch.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_train_loss,"numpy.array([i[""train_loss""]foriinnet1_eq.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_eq.train_history_])",CLUSTER_4,CLUSTER_8
net1_adapteq_train_loss,"numpy.array([i[""train_loss""]foriinnet1_adapteq.train_history_])",CLUSTER_4,CLUSTER_8
net1_adapteq_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_adapteq.train_history_])",CLUSTER_4,CLUSTER_8
net1_train_loss,"numpy.array([i[""train_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_train_loss,"numpy.array([i[""train_loss""]foriinnet1_eq.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_eq.train_history_])",CLUSTER_4,CLUSTER_8
net1_augmentation_train_loss,"numpy.array([i[""train_loss""]foriinnet1_augmentation.train_history_])",CLUSTER_4,CLUSTER_8
net1_augmentation_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_augmentation.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_augmentation_train_loss,"numpy.array([i[""train_loss""]foriinnet1_eq_augmentation.train_history_])",CLUSTER_4,CLUSTER_8
net1_eq_augmentation_valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_eq_augmentation.train_history_])",CLUSTER_4,CLUSTER_8
train_loss,"numpy.array([i[""train_loss""]foriinnet1_dropout.train_history_])",CLUSTER_4,CLUSTER_8
valid_loss,"numpy.array([i[""valid_loss""]foriinnet1_dropout.train_history_])",CLUSTER_4,CLUSTER_8
X_stretch,numpy.empty_like(X),CLUSTER_4,CLUSTER_8
X_eq,numpy.empty_like(X),CLUSTER_4,CLUSTER_8
X_adapteq,numpy.empty_like(X),CLUSTER_4,CLUSTER_8
hpfX,numpy.empty_like(X),CLUSTER_4,CLUSTER_8
X,numpy.vstack(df['Image'].values),CLUSTER_4,CLUSTER_8
"p_lowbound,p_upperbound","numpy.percentile(img,(1,99)",CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,16)",CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_4,CLUSTER_8
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_2,CLUSTER_7
self.time_start,time.time(),CLUSTER_2,CLUSTER_7
C,"pandas.DataFrame([""CAC40"",""DAX"",""FTSE""],columns=[""Index""])",CLUSTER_8,CLUSTER_3
Indices,"pandas.read_csv(""data/hsbc_bcs_bac.csv"")",CLUSTER_8,CLUSTER_3
Indices,"pandas.read_csv(""data/hsbc_bcs_bac.csv"")",CLUSTER_8,CLUSTER_3
"Temp[""Return""]","numpy.log(Temp[""close""]/Temp[""close""].shift(1)",CLUSTER_8,CLUSTER_3
sunspot,pandas.read_csv('dados/sunspot.csv'),CLUSTER_1,CLUSTER_3
airline,pandas.read_csv('dados/airline_passengers.csv'),CLUSTER_1,CLUSTER_3
aws,pandas.read_csv('dados/wine_sales.csv'),CLUSTER_1,CLUSTER_3
sp500,pandas.read_csv('dados/sp500.csv'),CLUSTER_1,CLUSTER_3
usd,pandas.read_csv('dados/usa_accident_death.csv'),CLUSTER_1,CLUSTER_3
hit,pandas.read_csv('dados/internet_traffic.csv'),CLUSTER_1,CLUSTER_3
dmt,pandas.read_csv('dados/daily_temp.csv'),CLUSTER_1,CLUSTER_3
execucoes,numpy.arange(qtd_execucoes),CLUSTER_1,CLUSTER_3
neuronios,"numpy.arange(2,26)",CLUSTER_1,CLUSTER_3
dim_tot,numpy.array(parameter.shape),CLUSTER_1,CLUSTER_3
W1_dim,numpy.array(W1.shape),CLUSTER_1,CLUSTER_3
b1_dim,numpy.array(b1.shape),CLUSTER_1,CLUSTER_3
W2_dim,numpy.array(W2.shape),CLUSTER_1,CLUSTER_3
b2_dim,numpy.array(b2.shape),CLUSTER_1,CLUSTER_3
velocidade,"numpy.zeros((qtd_particulas,atributos_dim_sum)",CLUSTER_1,CLUSTER_3
pbest,"numpy.zeros((qtd_particulas,atributos_dim_sum)",CLUSTER_1,CLUSTER_3
mse_treino,"numpy.zeros((qtd_execucoes,len(y_I)",CLUSTER_1,CLUSTER_3
mse_teste,"numpy.zeros((qtd_execucoes,len(y_I)",CLUSTER_1,CLUSTER_3
pos_indexes,numpy.where(diffs>0),CLUSTER_1,CLUSTER_3
neg_indexes,numpy.where(diffs<0),CLUSTER_1,CLUSTER_3
zero_indexes,numpy.where(diffs==0),CLUSTER_1,CLUSTER_3
params_stack,numpy.concatenate(tuple(params_list),CLUSTER_1,CLUSTER_3
Z1,"numpy.dot(W1,X)",CLUSTER_1,CLUSTER_3
Z2,"numpy.dot(W2,A1)",CLUSTER_1,CLUSTER_3
dZ1,"numpy.dot(W2.T,dZ2)",CLUSTER_1,CLUSTER_3
step_size[neg_indexes],"numpy.maximum(step_size[neg_indexes]*learning_rate_min,step_size.min()",CLUSTER_1,CLUSTER_3
step_size[pos_indexes],"numpy.minimum(step_size[pos_indexes]*learning_rate_max,step_size.max()",CLUSTER_1,CLUSTER_3
diffs,"numpy.multiply(grad_old,grad_new)",CLUSTER_1,CLUSTER_3
grad_new[pos_indexes],numpy.multiply(-np.sign(grad_new[pos_indexes]),CLUSTER_1,CLUSTER_3
grad_new[zero_indexes],numpy.multiply(-np.sign(grad_new[zero_indexes]),CLUSTER_1,CLUSTER_3
X_treino_temp,"numpy.vstack((X_treino,X_validacao)",CLUSTER_1,CLUSTER_3
y_treino_temp,"numpy.vstack((y_treino,y_validacao)",CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
inputs,numpy.asarray(inputs),CLUSTER_4,CLUSTER_0
inputs,numpy.asarray(inputs),CLUSTER_4,CLUSTER_0
axes,"matplotlib.pyplot.subplot(rows,cols,i)",CLUSTER_7,CLUSTER_3
X_train,numpy.array(raw_data_X),CLUSTER_3,CLUSTER_10
y_train,numpy.array(raw_data_y),CLUSTER_3,CLUSTER_10
x,"numpy.array([8.093607318,3.365731514])",CLUSTER_3,CLUSTER_10
nearest,numpy.argsort(distances),CLUSTER_3,CLUSTER_10
d,math.sqrt(np.sum((x_train-x),CLUSTER_3,CLUSTER_10
votes,collections.Counter(topK_y),CLUSTER_3,CLUSTER_10
experiments_dir,os.getcwd(),CLUSTER_4,CLUSTER_7
_outputs_shape,numpy.prod(image_size),CLUSTER_4,CLUSTER_7
tf.keras.layers.Dense(units,numpy.product(c),CLUSTER_4,CLUSTER_7
TRI_2008,"pandas.read_csv(""C:/Users/Luckbug/Code/emissions/TRI/TRI_2008_US.csv"")",CLUSTER_8,CLUSTER_4
x2,"numpy.linspace(0,1,100)",CLUSTER_1,CLUSTER_10
dados_new,pandas.DataFrame(),CLUSTER_8,CLUSTER_3
dados_new,"pandas.concat([dados_new,dados_selecao])",CLUSTER_8,CLUSTER_3
dados,"pandas.read_csv('aluguel_residencial.csv',sep=';')",CLUSTER_8,CLUSTER_3
aluguel_amostra,"pandas.read_csv('aluguel_amostra.csv',sep=';')",CLUSTER_8,CLUSTER_3
english_words_counter,collections.Counter([wordforsentenceinenglish_sentencesforwordinsentence.split(),CLUSTER_2,CLUSTER_7
french_words_counter,collections.Counter([wordforsentenceinfrench_sentencesforwordinsentence.split(),CLUSTER_2,CLUSTER_7
sentences,"numpy.array([sentence[0],x[0]])",CLUSTER_2,CLUSTER_7
"X,y","sklearn.datasets.make_blobs(n_samples=500,
n_features=2,
centers=4,
cluster_std=1,
center_box=(-10.0,10.0)",CLUSTER_5,CLUSTER_10
"X,y","sklearn.datasets.make_blobs(n_samples=500,
n_features=2,
centers=4,
cluster_std=1,
center_box=(-10.0,10.0)",CLUSTER_5,CLUSTER_10
clusterer,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=10)",CLUSTER_5,CLUSTER_10
sample_silhouette_values,"sklearn.metrics.silhouette_samples(X,cluster_labels)",CLUSTER_5,CLUSTER_10
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels)",CLUSTER_5,CLUSTER_10
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_5,CLUSTER_10
y,pandas.Period('2016'),CLUSTER_8,CLUSTER_3
m,pandas.Period('2017-12'),CLUSTER_8,CLUSTER_3
d,"pandas.Period('2016-02-28',freq='D')",CLUSTER_8,CLUSTER_3
h,"pandas.Period('2017-08-1523:00:00',freq='H')",CLUSTER_8,CLUSTER_3
q1,"pandas.Period('2017Q1',freq='Q-JAN')",CLUSTER_8,CLUSTER_3
w,"pandas.Period('2017-07-05',freq='W')",CLUSTER_8,CLUSTER_3
w2,"pandas.Period('2017-08-15',freq='W')",CLUSTER_8,CLUSTER_3
r,"pandas.PeriodIndex(start='2016-01',freq='3M',periods=10)",CLUSTER_8,CLUSTER_3
df.index,"pandas.PeriodIndex(df.index,freq=""Q-JAN"")",CLUSTER_8,CLUSTER_3
ps,pandas.Series(np.random.randn(len(idx),CLUSTER_8,CLUSTER_3
r,"pandas.period_range('2011','2017',freq='q')",CLUSTER_8,CLUSTER_3
r,"pandas.period_range('2011','2017',freq='q-jan')",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""wmt.csv"")",CLUSTER_8,CLUSTER_3
T,"numpy.array([[9.8999e-01,9.00000e-01,0.00000e-00,1.00000e-02,0.00000e+00],
[1.00000e-02,0.00000e+00,0.00000e+00,0.00000e+00,0.00000e+00],
[0.0000,1.00000e-01,9.98999e-01,9.90000e-01,1.00000e+00],
[0.00000e+00,0.00000e+00,1.00000e-03,0.00000e+00,0.00000e+00],
[0.00001e+00,0.00000e+00,1.00000e-06,0.00000e+00,0.00000e+00]])",CLUSTER_1,CLUSTER_3
initial_state,"numpy.array([1.0,0.0,0.0,0.0,0.0])",CLUSTER_1,CLUSTER_3
R,"numpy.array([[-30.0,-600,0.0,-3000,0.0],
[-200.0,0.0,0.0,0.0,0.0],
[0.0,-30000,-20,-100,-30000],
[0.0,0.0,-1000,0.0,0.0],
[-100000,0.0,-50000,0.0,0.0]])",CLUSTER_1,CLUSTER_3
s_list,"numpy.concatenate((s_list,np.reshape(s,(s.shape[0],1)",CLUSTER_1,CLUSTER_3
s,"numpy.matmul(T,s)",CLUSTER_1,CLUSTER_3
s_prime,"numpy.matmul(T,s)",CLUSTER_1,CLUSTER_3
s_list,"numpy.reshape(s,(s.shape[0],1)",CLUSTER_1,CLUSTER_3
delta_s,"numpy.subtract(s,s_prime)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_1,CLUSTER_3
train,pandas.read_csv('train.csv'),CLUSTER_5,CLUSTER_5
test,pandas.read_csv('test.csv'),CLUSTER_5,CLUSTER_5
df_test,pandas.read_csv('test.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=1,stratify=y)",CLUSTER_5,CLUSTER_5
etc,sklearn.ensemble.ExtraTreesClassifier(n_estimators=1000),CLUSTER_5,CLUSTER_5
etc,sklearn.ensemble.ExtraTreesClassifier(n_estimators=1000),CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(te_ary,columns=te.columns_)",CLUSTER_8,CLUSTER_4
c,collections.Counter(list),CLUSTER_10,CLUSTER_4
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_6,CLUSTER_10
filter_vals,"numpy.array([[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1]])",CLUSTER_6,CLUSTER_10
filters,"numpy.array([filter_1,filter_2,filter_3,filter_4])",CLUSTER_6,CLUSTER_10
df,pandas.DataFrame(friend_list),CLUSTER_8,CLUSTER_4
list,os.listdir(rootdir),CLUSTER_11,CLUSTER_12
init_date,"datetime.date(1970,1,1)",CLUSTER_11,CLUSTER_12
start_date,"datetime.date(1990,1,1)",CLUSTER_11,CLUSTER_12
end_date,"datetime.date(2012,12,25)",CLUSTER_11,CLUSTER_12
result,"numpy.zeros((7,79,94)",CLUSTER_11,CLUSTER_12
f_w.variables['lat'][:],numpy.zeros((79),CLUSTER_11,CLUSTER_12
f_w.variables['lon'][:],numpy.zeros((94),CLUSTER_11,CLUSTER_12
f_w.variables['time'][:],numpy.zeros((7),CLUSTER_11,CLUSTER_12
rand_ind,random.choice(range(len(s),CLUSTER_4,CLUSTER_7
s_list[rand_ind],random.choice(string.ascii_lowercase+'0123456789'),CLUSTER_4,CLUSTER_7
target_similarity,numpy.array([x[1]forxinbatch_data]),CLUSTER_4,CLUSTER_7
address1,numpy.array([address2onehot(x[0]),CLUSTER_4,CLUSTER_7
address2,numpy.array([address2onehot(x[1]),CLUSTER_4,CLUSTER_7
test_queries_ix,numpy.array([address2onehot(x),CLUSTER_4,CLUSTER_7
test_references_ix,numpy.array([address2onehot(x),CLUSTER_4,CLUSTER_7
test_query,numpy.repeat(np.array([query]),CLUSTER_4,CLUSTER_7
df,"pandas.read_csv(""ml-latest-small/ratings.csv"")",CLUSTER_8,CLUSTER_4
power_df,"pandas.read_csv(""power.csv"")",CLUSTER_8,CLUSTER_4
sports_ru_tb,pandas.read_html('https://www.sports.ru/bundesliga/table/'),CLUSTER_8,CLUSTER_4
data,pandas.read_csv('data_breast.csv'),CLUSTER_7,CLUSTER_5
pd_table,pandas.read_csv(StringIO(table.as_csv(),CLUSTER_7,CLUSTER_5
pd_table,pandas.read_csv(StringIO(table.as_csv(),CLUSTER_7,CLUSTER_5
model_tree_o,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
model_logreg,"sklearn.linear_model.LogisticRegression(penalty='l1',C=0.1,solver='liblinear')",CLUSTER_7,CLUSTER_5
model_logreg_o,"sklearn.linear_model.LogisticRegression(penalty='l1',C=0.1,solver='liblinear')",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=42)",CLUSTER_7,CLUSTER_5
"X_train_o,X_test_o,y_train_o,y_test_o","sklearn.model_selection.train_test_split(X_resampled_o,y_resampled_o,test_size=0.33,
random_state=42)",CLUSTER_7,CLUSTER_5
"precision,recall,thresholds","sklearn.metrics.precision_recall_curve(y_test,
[i[1]foriinlogreg_prediction_proba])",CLUSTER_7,CLUSTER_5
daypage,"requests.get('http://mars.nasa.gov/msl/multimedia/raw',
params={'s':day,'camera':'FHAZ'})",CLUSTER_12,CLUSTER_11
content,requests.get(url),CLUSTER_12,CLUSTER_11
submission,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
joined,"pandas.concat([train_data,test_data],ignore_index=True)",CLUSTER_7,CLUSTER_8
joined[column],"pandas.factorize(joined[column].values,sort=True)",CLUSTER_7,CLUSTER_8
train_data,"pandas.read_csv(""train.csv"")",CLUSTER_7,CLUSTER_8
prediction,numpy.exp(model.predict(test_data),CLUSTER_7,CLUSTER_8
target,numpy.log(target+shift),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(np.log(train_data['loss']),CLUSTER_7,CLUSTER_8
ax,seaborn.kdeplot(np.log(train_data['loss']+shift),CLUSTER_7,CLUSTER_8
"fg,ax","matplotlib.pyplot.subplots(nrows=1,ncols=n_cols,figsize=(12,8)",CLUSTER_7,CLUSTER_8
"fg,ax","matplotlib.pyplot.subplots(nrows=1,ncols=n_cols,sharey=True,figsize=(12,8)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LinearRegression(n_jobs=-1),CLUSTER_7,CLUSTER_8
error,"sklearn.metrics.mean_absolute_error(y_true,np.exp(model.predict(test_data)",CLUSTER_7,CLUSTER_8
my_array1,numpy.array(my_list1),CLUSTER_3,CLUSTER_6
my_array2,numpy.array(my_lists),CLUSTER_3,CLUSTER_6
dataframe,"pandas.read_csv(""C:/Users/FC/Documents/Deep_Learning_Project_Four/sonar.csv"",header=None)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(pipeline,X,encoded_Y,cv=kfold)",CLUSTER_5,CLUSTER_1
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=seed)",CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_5,CLUSTER_1
dfCrimesByTemp,pandas.DataFrame(dfCrimesByTemp),CLUSTER_9,CLUSTER_2
dfTempNorm,pandas.DataFrame(dfTempNorm),CLUSTER_9,CLUSTER_2
dfTempByHour,pandas.DataFrame(dfTempByHour),CLUSTER_9,CLUSTER_2
dfCrimesByWeather,pandas.DataFrame(dfCrimesByWeather),CLUSTER_9,CLUSTER_2
dfWeatherNorm,pandas.DataFrame(dfWeatherNorm),CLUSTER_9,CLUSTER_2
dfWeatherByHour,pandas.DataFrame(dfWeatherByHour),CLUSTER_9,CLUSTER_2
dfSevenMaybeOutdoor,pandas.DataFrame(dfSevenMaybeOutdoor),CLUSTER_9,CLUSTER_2
dfSevenOutdoor,pandas.DataFrame(dfSevenOutdoor),CLUSTER_9,CLUSTER_2
dfSevenIndoor,pandas.DataFrame(dfSevenIndoor),CLUSTER_9,CLUSTER_2
dfSouthPrecinct,pandas.DataFrame(dfSouthPrecinct),CLUSTER_9,CLUSTER_2
dfNorthPrecinct,pandas.DataFrame(dfNorthPrecinct),CLUSTER_9,CLUSTER_2
dfCrimesByWeather,pandas.DataFrame(dfCrimesByWeather),CLUSTER_9,CLUSTER_2
dfWeatherNorm,pandas.DataFrame(dfWeatherNorm),CLUSTER_9,CLUSTER_2
dfWeatherByHour,pandas.DataFrame(dfWeatherByHour),CLUSTER_9,CLUSTER_2
dfSevenPrecincts,pandas.DataFrame(dfSevenPrecincts),CLUSTER_9,CLUSTER_2
dfPrecinct,"pandas.DataFrame(columns=['Precinct','R-Squared','P-Value','Crime'])",CLUSTER_9,CLUSTER_2
dfTempNormalized,"pandas.merge(dfTempByHour,dfCrimesByTemp,on='Temperature')",CLUSTER_9,CLUSTER_2
dfWeatherNormalized,"pandas.merge(dfCrimesByWeather,dfWeatherByHour,on=weatherType)",CLUSTER_9,CLUSTER_2
dfWeatherNormalized,"pandas.merge(dfCrimesByWeather,dfWeatherByHour,on=weatherType)",CLUSTER_9,CLUSTER_2
crimeData,"pandas.read_csv(""rows.csv_accessType=DOWNLOAD"")",CLUSTER_9,CLUSTER_2
weather,"pandas.read_json(""DarkSky_Data.json"")",CLUSTER_9,CLUSTER_2
weather['datetime'],"pandas.to_datetime(weather['time'],unit='s',utc=True)",CLUSTER_9,CLUSTER_2
crime['datetime'],pandas.to_datetime((crime['CMPLNT_FR_DT']+''+crime['CMPLNT_FR_TM']),CLUSTER_9,CLUSTER_2
x,sklearn.preprocessing.StandardScaler(),CLUSTER_10,CLUSTER_4
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_10,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train_data,class_data,test_size=0.2)",CLUSTER_10,CLUSTER_4
plain,"numpy.zeros((ns,ntr)",CLUSTER_1,CLUSTER_10
cipher,"numpy.zeros((ns,ntr)",CLUSTER_1,CLUSTER_10
cipher,"numpy.zeros((ns,ntr)",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
imgplot,"matplotlib.pyplot.imshow(plain,cmap='gray')",CLUSTER_1,CLUSTER_10
imgplot,"matplotlib.pyplot.imshow(cipher,cmap='gray')",CLUSTER_1,CLUSTER_10
imgplot,"matplotlib.pyplot.imshow(plain,cmap='gray')",CLUSTER_1,CLUSTER_10
imgplot,"matplotlib.pyplot.imshow(cipher,cmap='gray')",CLUSTER_1,CLUSTER_10
address_indexes_arr,numpy.asarray(address_indexes),CLUSTER_9,CLUSTER_2
has_field,numpy.logical_not(pd.isnull(df[fld]),CLUSTER_9,CLUSTER_2
input_df,"pandas.DataFrame(keys,columns=['key','street','city','state','zip'])",CLUSTER_9,CLUSTER_2
matching,pandas.DataFrame({'idx':pd.Series(address_indexes_arr[matched_df.reset_index(),CLUSTER_9,CLUSTER_2
ad_ix_df,pandas.DataFrame({'idx':address_indexes_arr[matched_df.reset_index(),CLUSTER_9,CLUSTER_2
cols,"pandas.Series(tmp_df.columns,index=tmp_df.columns)",CLUSTER_9,CLUSTER_2
idx,"pandas.isnull(geocoded_df[['Case.File.Date','Judgment.Date']]
)",CLUSTER_9,CLUSTER_2
eviction_df,"pandas.read_sql('SELECT*FROMevictions',connstr)",CLUSTER_9,CLUSTER_2
df,"pandas.read_sql_table('GeocodedAddresses2',connstr)",CLUSTER_9,CLUSTER_2
sess,requests.Session(),CLUSTER_9,CLUSTER_2
encoder_input_data,"numpy.zeros(
(len(input_texts)",CLUSTER_5,CLUSTER_5
decoder_input_data,"numpy.zeros(
(len(input_texts)",CLUSTER_5,CLUSTER_5
decoder_target_data,"numpy.zeros(
(len(input_texts)",CLUSTER_5,CLUSTER_5
target_seq,"numpy.zeros((1,1,num_decoder_tokens)",CLUSTER_5,CLUSTER_5
target_seq,"numpy.zeros((1,1,num_decoder_tokens)",CLUSTER_5,CLUSTER_5
sampled_token_index,"numpy.argmax(output_tokens[0,-1,:])",CLUSTER_5,CLUSTER_5
df,pandas.read_pickle('train_df.pkl'),CLUSTER_5,CLUSTER_5
result_vector,"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
bh,"numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
by,"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
hs[-1],"hprev=numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
hprev,"numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
hprev,"numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
x,"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
h,"numpy.zeros((hidden_size,1)",CLUSTER_3,CLUSTER_6
x,"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
xs[t],"numpy.zeros((vocab_size,1)",CLUSTER_3,CLUSTER_6
"dWxh,dWhh,dWhy",numpy.zeros_like(Wxh),CLUSTER_3,CLUSTER_6
"dbh,dby",numpy.zeros_like(bh),CLUSTER_3,CLUSTER_6
"dWxh,dWhh,dWhy",numpy.zeros_like(Wxh),CLUSTER_3,CLUSTER_6
"dbh,dby",numpy.zeros_like(bh),CLUSTER_3,CLUSTER_6
dhnext,numpy.zeros_like(hs[0]),CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
dWhy,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dWhy,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWhy,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWhy,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWxh,"numpy.dot(dhraw,xs[t].T)",CLUSTER_3,CLUSTER_6
dWhh,"numpy.dot(dhraw,hs[t-1].T)",CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
dWhy+,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWxh+,"numpy.dot(dhraw,xs[t].T)",CLUSTER_3,CLUSTER_6
dWhh+,"numpy.dot(dhraw,hs[t-1].T)",CLUSTER_3,CLUSTER_6
y,"numpy.dot(Why,h)",CLUSTER_3,CLUSTER_6
ys[t],"numpy.dot(Why,hs[t])",CLUSTER_3,CLUSTER_6
dWhy+,"numpy.dot(dy,hs[t].T)",CLUSTER_3,CLUSTER_6
dh,"numpy.dot(Why.T,dy)",CLUSTER_3,CLUSTER_6
dWxh+,"numpy.dot(dhraw,xs[t].T)",CLUSTER_3,CLUSTER_6
dWhh+,"numpy.dot(dhraw,hs[t-1].T)",CLUSTER_3,CLUSTER_6
dhnext,"numpy.dot(Whh.T,dhraw)",CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
p,numpy.exp(y),CLUSTER_3,CLUSTER_6
ps[t],numpy.exp(ys[t]),CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
h,"numpy.tanh(np.dot(Wxh,x)",CLUSTER_3,CLUSTER_6
hs[t],"numpy.tanh(np.dot(Wxh,xs[t])",CLUSTER_3,CLUSTER_6
hs[-1],numpy.copy(hprev),CLUSTER_3,CLUSTER_6
hs[-1],numpy.copy(hprev),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
hs[-1],numpy.copy(hprev),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
hs[-1],numpy.copy(hprev),CLUSTER_3,CLUSTER_6
dy,numpy.copy(ps[t]),CLUSTER_3,CLUSTER_6
author_df,pandas.DataFrame(author_u),CLUSTER_9,CLUSTER_2
book,pandas.read_csv('data/books_c.csv'),CLUSTER_9,CLUSTER_2
data,"pandas.read_sql_query(
'''
SELECTcustomers.FirstName,customers.LastName,invoices.CustomerId,customers.country,invoices.Total,invoices.InvoiceDate
FROMcustomers
LEFTJOINinvoices
ONcustomers.CustomerId=invoices.CustomerId
''',
conn
)",CLUSTER_9,CLUSTER_2
df,pandas.read_csv('H:/Study/AI-MLAssignments/Day07/general_data.csv'),CLUSTER_1,CLUSTER_9
"stats,p","scipy.stats.pearsonr(df.MonthlyIncome,df.Attrition)",CLUSTER_1,CLUSTER_9
"corr,_","scipy.stats.pearsonr(df.Attrition,df.Age)",CLUSTER_1,CLUSTER_9
"x,y","scipy.stats.pearsonr(df.Attrition,df.Education)",CLUSTER_1,CLUSTER_9
"pyu,kyu","scipy.stats.pearsonr(df.Attrition,df.Gender)",CLUSTER_1,CLUSTER_9
"tri,p","scipy.stats.pearsonr(df.Attrition,df.DistanceFromHome)",CLUSTER_1,CLUSTER_9
"k,j","scipy.stats.pearsonr(df.Attrition,df.YearsWithCurrManager)",CLUSTER_1,CLUSTER_9
"stat,r","scipy.stats.pearsonr(df.Attrition,df.NumCompaniesWorked)",CLUSTER_1,CLUSTER_9
"stats,p","scipy.stats.pearsonr(df.Attrition,df.YearsSinceLastPromotion)",CLUSTER_1,CLUSTER_9
"corr,_","scipy.stats.pearsonr(df.Attrition,df.PercentSalaryHike)",CLUSTER_1,CLUSTER_9
"corr,_","scipy.stats.pearsonr(df.Attrition,df.TotalWorkingYears)",CLUSTER_1,CLUSTER_9
"f,axarr","matplotlib.pyplot.subplots(3,4,figsize=(15,15)",CLUSTER_1,CLUSTER_3
xs,"numpy.array([-1.0,0.0,1.0,2.0,3.0,4.0],dtype=float)",CLUSTER_1,CLUSTER_3
ys,"numpy.array([-3.0,-1.0,1.0,3.0,5.0,7.0],dtype=float)",CLUSTER_1,CLUSTER_3
xs,"numpy.array([1.0,2.0,3.0,4.0,5.0,6.0],dtype=float)",CLUSTER_1,CLUSTER_3
ys,"numpy.array([1.0,1.5,2.0,2.5,3.0,3.5],dtype=float)",CLUSTER_1,CLUSTER_3
openArray,"numpy.array([1,2,3,3],dtype='float64')",CLUSTER_9,CLUSTER_2
highArray,"numpy.array([2,3,4,3],dtype='float64')",CLUSTER_9,CLUSTER_2
lowArray,"numpy.array([0.5,1.5,2.5,1.5],dtype='float64')",CLUSTER_9,CLUSTER_2
closeArray,"numpy.array([1.5,2.5,3.5,2.5],dtype='float64')",CLUSTER_9,CLUSTER_2
EMA,"pandas.Series(ta.EMA(closeArray,2)",CLUSTER_9,CLUSTER_2
candleDF,pandas.concat([pd.Series(openArray),CLUSTER_9,CLUSTER_2
timeIndex,"pandas.date_range(""20180808"",periods=len(closeArray)",CLUSTER_9,CLUSTER_2
"fig,(ax)","matplotlib.pyplot.subplots(1,1,sharex=True,figsize=(15,7)",CLUSTER_9,CLUSTER_2
r,"requests.get(""http://bbs.fxdayu.com"")",CLUSTER_9,CLUSTER_2
t,numpy.arange(x_values.shape[0]),CLUSTER_4,CLUSTER_11
local_average,numpy.zeros(L),CLUSTER_4,CLUSTER_11
energy_local_diff,"numpy.concatenate((energy_local_diff,np.array([0])",CLUSTER_4,CLUSTER_11
log_energy_local_diff,"numpy.concatenate((log_energy_local_diff,np.array([0])",CLUSTER_4,CLUSTER_11
nov,"numpy.concatenate((nov,np.array([0])",CLUSTER_4,CLUSTER_11
energy_local,"numpy.convolve(x**2,w**2,'same')",CLUSTER_4,CLUSTER_11
nov,"numpy.sum(Y_diff,axis=0)",CLUSTER_4,CLUSTER_11
amplitude,numpy.log(1+gamma*np.abs(X),CLUSTER_4,CLUSTER_11
Y,numpy.log(1+gamma*np.abs(X),CLUSTER_4,CLUSTER_11
novelty_energy,numpy.copy(energy_local_diff),CLUSTER_4,CLUSTER_11
novelty_log_energy,numpy.copy(log_energy_local_diff),CLUSTER_4,CLUSTER_11
energy_local_diff,numpy.diff(energy_local),CLUSTER_4,CLUSTER_11
log_energy_local_diff,numpy.diff(np.log(1+gamma*energy_local),CLUSTER_4,CLUSTER_11
Y_diff,"numpy.diff(Y,n=1)",CLUSTER_4,CLUSTER_11
w,scipy.signal.hann(H),CLUSTER_4,CLUSTER_11
df,pandas.read_csv('Iris.csv'),CLUSTER_12,CLUSTER_5
"X1,X2","numpy.meshgrid(np.arange(start=X_set[:,0].min()",CLUSTER_12,CLUSTER_5
sc_x,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_5
classifier,sklearn.tree.DecisionTreeClassifier(max_depth=5),CLUSTER_12,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y,classifier.predict(x)",CLUSTER_12,CLUSTER_5
sqrt_disc,numpy.sqrt(b**2-4*a*c),CLUSTER_3,CLUSTER_6
r2,pandas.DataFrame(km.cluster_centers_),CLUSTER_7,CLUSTER_8
r1,pandas.Series(km.labels_),CLUSTER_7,CLUSTER_8
merge_AB,"pandas.concat([merged_sub_base_uae_14_day_trial,merged_sub_low_uae_no_trial],axis=0)",CLUSTER_7,CLUSTER_8
merge_AB_under,"pandas.concat([X_under,y_under],axis=1)",CLUSTER_7,CLUSTER_8
r,"pandas.concat([r2,r1],axis=1)",CLUSTER_7,CLUSTER_8
merge_AB,"pandas.get_dummies(merge_AB,prefix=['plan_type'],drop_first=True)",CLUSTER_7,CLUSTER_8
dummy_df,"pandas.get_dummies(data,columns=categorical,
prefix=categorical,
prefix_sep='_',
dummy_na=False,
drop_first=False)",CLUSTER_7,CLUSTER_8
merged_sub,"pandas.get_dummies(merged_sub,prefix=['package_type','preferred_genre','intended_use','male_TF','attribution_technical','attribution_survey','plan_type','payment_type'],columns=['package_type','preferred_genre','intended_use','male_TF','attribution_technical','attribution_survey','plan_type','payment_type'])",CLUSTER_7,CLUSTER_8
subs,pandas.read_pickle('C:/Users/ytw23/Downloads/subscribers'),CLUSTER_7,CLUSTER_8
engag,pandas.read_pickle('C:/Users/ytw23/Downloads/engagement'),CLUSTER_7,CLUSTER_8
cs,pandas.read_pickle(r'customer_service_reps'),CLUSTER_7,CLUSTER_8
data,pandas.read_pickle('C:/Users/ytw23/Downloads/subscribers'),CLUSTER_7,CLUSTER_8
revenue,numpy.array(X['revenue_net']),CLUSTER_7,CLUSTER_8
expected_revenue,"numpy.dot(y_pred,revenue)",CLUSTER_7,CLUSTER_8
norm,scipy.stats.norm(),CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=i,random_state=1)",CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=5,random_state=1)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33)",CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=i,max_depth=j)",CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=110,max_depth=4)",CLUSTER_7,CLUSTER_8
dist,math.sqrt((self.x-landmarks[i][0]),CLUSTER_3,CLUSTER_4
dist,math.sqrt((self.x-landmarks[i][0]),CLUSTER_3,CLUSTER_4
dist+,"random.gauss(0.0,self.sense_noise)",CLUSTER_3,CLUSTER_4
self.x,random.random(),CLUSTER_3,CLUSTER_4
self.y,random.random(),CLUSTER_3,CLUSTER_4
self.orientation,random.random(),CLUSTER_3,CLUSTER_4
beta+,random.random(),CLUSTER_3,CLUSTER_4
features,"np.append(arr=numpy.ones((506,1)",CLUSTER_7,CLUSTER_5
features,"numpy.append(arr=np.ones((506,1)",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv(""https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data"",delim_whitespace=True,names=['crime_rate','ZN','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','TAX','PTRATIO','BLACK','LSTAT','MEDV'])",CLUSTER_7,CLUSTER_5
modelFinal,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
R_Sq,"sklearn.metrics.r2_score(ytest,Y_Predict)",CLUSTER_7,CLUSTER_5
Mean_sq,"sklearn.metrics.mean_squared_error(Y_Predict,ytest)",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(8,4)",CLUSTER_3,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_10
"fig,axes",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2)",CLUSTER_3,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2)",CLUSTER_3,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(figsize=(12,3)",CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_3,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_3,CLUSTER_10
x,"numpy.linspace(0,5,11)",CLUSTER_3,CLUSTER_10
data,"random.sample(range(1,1000)",CLUSTER_3,CLUSTER_10
taxi_tickets,pandas.read_csv('taxi_ticket_data/taxi_tickets_by_ward.csv'),CLUSTER_7,CLUSTER_3
taxi_bus_st['IssueDate'],pandas.to_datetime(taxi_bus_st['IssueDate']),CLUSTER_7,CLUSTER_3
model80_score,"pandas.DataFrame({'Model':['LogRegression','RandomForest','KNNeighbors'],
'Normal':[LRG_score,RFC_score,KNN_score],
'Hyper':[LRG_best_score,RFC_best_score,KNN_best_score]})",CLUSTER_7,CLUSTER_8
report_LRG,"pandas.DataFrame(classification_report(y_test,yp_LRG,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
report_RFC,"pandas.DataFrame(classification_report(y_test,yp_RFC,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
report_KNN,"pandas.DataFrame(classification_report(y_test,yp_KNN,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
model90_score,"pandas.DataFrame({'Model':['LogRegression','RandomForest','KNNeighbors'],
'Normal':[LRG1_score,RFC1_score,KNN1_score],
'Hyper':[LRG1_best_score,RFC1_best_score,KNN1_best_score]})",CLUSTER_7,CLUSTER_8
report_LRG1,"pandas.DataFrame(classification_report(y1_test,yp_LRG1,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
report_RFC1,"pandas.DataFrame(classification_report(y1_test,yp_RFC1,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
report_KNN1,"pandas.DataFrame(classification_report(y1_test,yp_KNN1,target_names=labels,output_dict=True)",CLUSTER_7,CLUSTER_8
df,"pandas.concat([df_test,df_surv],axis=1)",CLUSTER_7,CLUSTER_8
df_titanic,"pandas.concat([df_train,df],ignore_index=True)",CLUSTER_7,CLUSTER_8
fill_male,"pandas.concat([mcat0,mcat1,mcat2,mcat3,mcat4])",CLUSTER_7,CLUSTER_8
fill_female,"pandas.concat([fcat0,fcat1,fcat2,fcat3,fcat4])",CLUSTER_7,CLUSTER_8
fill_age,"pandas.concat([fill_male,fill_female])",CLUSTER_7,CLUSTER_8
df_train,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_8
df_surv,pandas.read_csv('gender_submission.csv'),CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,5)",CLUSTER_7,CLUSTER_8
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_8
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_8
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,train_size=0.8,shuffle=False)",CLUSTER_7,CLUSTER_8
"x1_train,x1_test,y1_train,y1_test","sklearn.model_selection.train_test_split(x1,y1,train_size=0.9,shuffle=False)",CLUSTER_7,CLUSTER_8
LRG,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
LRG_best,"sklearn.linear_model.LogisticRegression(solver='liblinear',penalty='l1',max_iter=10)",CLUSTER_7,CLUSTER_8
LRG1,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
LRG1_best,"sklearn.linear_model.LogisticRegression(solver='liblinear',penalty='l2',max_iter=100)",CLUSTER_7,CLUSTER_8
df_titanic['Embarked'],sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
df_titanic['Sex'],sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
RFC,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
RFC_best,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,min_samples_split=5,min_samples_leaf=1,max_depth=10)",CLUSTER_7,CLUSTER_8
RFC1,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
RFC1_best,"sklearn.ensemble.RandomForestClassifier(n_estimators=1000,min_samples_split=10,min_samples_leaf=2,max_depth=20)",CLUSTER_7,CLUSTER_8
KNN,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
KNN_best,"sklearn.neighbors.KNeighborsClassifier(p=1,n_neighbors=7,leaf_size=49)",CLUSTER_7,CLUSTER_8
KNN1,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
KNN1_best,"sklearn.neighbors.KNeighborsClassifier(p=1,n_neighbors=8,leaf_size=34)",CLUSTER_7,CLUSTER_8
cm_LRG,"sklearn.metrics.confusion_matrix(y_test,yp_LRG)",CLUSTER_7,CLUSTER_8
cm_RFC,"sklearn.metrics.confusion_matrix(y_test,yp_RFC)",CLUSTER_7,CLUSTER_8
cm_KNN,"sklearn.metrics.confusion_matrix(y_test,yp_KNN)",CLUSTER_7,CLUSTER_8
cm_LRG1,"sklearn.metrics.confusion_matrix(y1_test,yp_LRG1)",CLUSTER_7,CLUSTER_8
cm_RFC1,"sklearn.metrics.confusion_matrix(y1_test,yp_RFC1)",CLUSTER_7,CLUSTER_8
cm_KNN1,"sklearn.metrics.confusion_matrix(y1_test,yp_KNN1)",CLUSTER_7,CLUSTER_8
RSCV_LRG,"sklearn.model_selection.RandomizedSearchCV(estimator=LRG,param_distributions=LRG_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_RFC,"sklearn.model_selection.RandomizedSearchCV(estimator=RFC,param_distributions=RFC_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_KNN,"sklearn.model_selection.RandomizedSearchCV(estimator=KNN,param_distributions=KNN_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_LRG1,"sklearn.model_selection.RandomizedSearchCV(estimator=LRG1,param_distributions=LRG_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_RFC1,"sklearn.model_selection.RandomizedSearchCV(estimator=RFC1,param_distributions=RFC_param,cv=5)",CLUSTER_7,CLUSTER_8
RSCV_KNN1,"sklearn.model_selection.RandomizedSearchCV(estimator=KNN1,param_distributions=KNN_param,cv=5)",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(item,columns=te.columns_)",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(item.astype(""int"")",CLUSTER_7,CLUSTER_3
product,"pandas.DataFrame(product,columns=['productrecommendation'])",CLUSTER_7,CLUSTER_3
df,"pandas.read_csv('MarketBasketAnalysis/GroceryStoreDataSet.csv',header=None)",CLUSTER_7,CLUSTER_3
mask,numpy.zeros_like(dftable),CLUSTER_7,CLUSTER_3
"f,ax","matplotlib.pyplot.subplots(figsize=(7,5)",CLUSTER_7,CLUSTER_3
pal,"seaborn.color_palette(""RdBu"",n_colors=4)",CLUSTER_7,CLUSTER_3
ax,"seaborn.heatmap(dftable,mask=mask,vmax=4,square=True,annot=True,cmap=pal)",CLUSTER_7,CLUSTER_3
Ar,numpy.zeros((len(u),CLUSTER_3,CLUSTER_6
SVD,"numpy.linalg.svd(A,full_matrices=False)",CLUSTER_3,CLUSTER_6
"u,s,v","numpy.linalg.svd(x,full_matrices=False)",CLUSTER_3,CLUSTER_6
x,scipy.misc.face(),CLUSTER_3,CLUSTER_6
songs_info_pd['publish_year'],pandas.DatetimeIndex(songs_info_pd['publish_time']),CLUSTER_1,CLUSTER_3
user_action_pd,"pandas.read_csv('../data/mars_tianchi_user_actions.csv',header=None)",CLUSTER_1,CLUSTER_3
songs_info_pd,"pandas.read_csv('../data/mars_tianchi_songs.csv',header=None)",CLUSTER_1,CLUSTER_3
user_action_pd['gmt_create'],"pandas.to_datetime(user_action_pd['gmt_create'],unit='s')",CLUSTER_1,CLUSTER_3
songs_info_pd['publish_time'],pandas.to_datetime(songs_info_pd['publish_time'].astype(str),CLUSTER_1,CLUSTER_3
songs_info_pd['publish_time'],pandas.to_datetime(songs_info_pd['publish_time'].astype(str),CLUSTER_1,CLUSTER_3
reviews,"pandas.read_csv(""../input/wine-reviews/winemag-data-130k-v2.csv"",index_col=0)",CLUSTER_8,CLUSTER_4
"orig_mean,orig_std,orig_max,orig_min",numpy.mean(num_nodes),CLUSTER_6,CLUSTER_10
"orig_mean,orig_std,orig_max,orig_min",numpy.mean(num_nodes),CLUSTER_6,CLUSTER_10
"orig_mean,orig_std,orig_max,orig_min",numpy.mean(num_nodes),CLUSTER_6,CLUSTER_10
"orig_mean,orig_std,orig_max,orig_min",numpy.mean(num_nodes),CLUSTER_6,CLUSTER_10
ecom,pandas.read_csv('EcommercePurchases'),CLUSTER_8,CLUSTER_4
unique_incidents_sub_weekly_train.index,numpy.arange(len(unique_incidents_sub_weekly_train),CLUSTER_11,CLUSTER_8
unique_incidents_sub_weekly_test.index,numpy.arange(len(unique_incidents_sub_weekly_test),CLUSTER_11,CLUSTER_8
incidents,pandas.read_csv('../data/sf-police-calls-for-service-and-incidents/police-department-incidents.csv'),CLUSTER_11,CLUSTER_8
incidents['DateTime'],pandas.to_datetime(pandas.to_datetime(incidents['Date']),CLUSTER_11,CLUSTER_8
unique_incidents_sub.index,pandas.to_datetime(unique_incidents_sub['DateTime']),CLUSTER_11,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_11,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,6)",CLUSTER_11,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,6)",CLUSTER_11,CLUSTER_8
a,"numpy.zeros([x.shape[0],34])",CLUSTER_2,CLUSTER_7
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
daily_df,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_std,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_mean,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
stat_table,pandas.DataFrame(index=tickers),CLUSTER_7,CLUSTER_9
mvsk_moments,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_function,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_data,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
daily_df,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_std,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_mean,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
stat_table,pandas.DataFrame(index=tickers),CLUSTER_7,CLUSTER_9
mvsk_moments,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_function,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_data,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
daily_df,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_std,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
rolling_mean,"pandas.DataFrame(df,copy=True)",CLUSTER_7,CLUSTER_9
stat_table,pandas.DataFrame(index=tickers),CLUSTER_7,CLUSTER_9
mvsk_moments,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_function,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
pdf_data,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
btc_usd,pandas.read_csv('BTC-USDmax.csv'),CLUSTER_7,CLUSTER_9
djia,pandas.read_csv('DJIAmax.csv'),CLUSTER_7,CLUSTER_9
S_and_P,pandas.read_csv('SandPmax.csv'),CLUSTER_7,CLUSTER_9
MSCI_World,pandas.read_csv('URTHmax.csv'),CLUSTER_7,CLUSTER_9
T_Bill,pandas.read_csv('BILmax.csv'),CLUSTER_7,CLUSTER_9
DBV,pandas.read_csv('DBVmax.csv'),CLUSTER_7,CLUSTER_9
CEW,pandas.read_csv('CEWmax.csv'),CLUSTER_7,CLUSTER_9
ACWI,pandas.read_csv('ACWImax.csv'),CLUSTER_7,CLUSTER_9
AGG,pandas.read_csv('AGGmax.csv'),CLUSTER_7,CLUSTER_9
usd_eur,pandas.read_csv('usd_eur_quandl.csv'),CLUSTER_7,CLUSTER_9
usd_eur.Date,"pandas.to_datetime(usd_eur.Date,format='%m/%d/%Y')",CLUSTER_7,CLUSTER_9
df.Date,"pandas.to_datetime(df.Date,format='%Y/%m/%d')",CLUSTER_7,CLUSTER_9
df.Date,"pandas.to_datetime(df.Date,format='%Y/%m/%d')",CLUSTER_7,CLUSTER_9
df.Date,"pandas.to_datetime(df.Date,format='%Y/%m/%d')",CLUSTER_7,CLUSTER_9
cont_data,"numpy.arange(-0.05,0.05,0.0001)",CLUSTER_7,CLUSTER_9
temp_cont_data,"numpy.arange(-2,2,0.0001)",CLUSTER_7,CLUSTER_9
cont_data,"numpy.arange(-0.05,0.05,0.0001)",CLUSTER_7,CLUSTER_9
temp_cont_data,"numpy.arange(-2,2,0.0001)",CLUSTER_7,CLUSTER_9
cont_data,"numpy.arange(-0.05,0.05,0.0001)",CLUSTER_7,CLUSTER_9
temp_cont_data,"numpy.arange(-2,2,0.0001)",CLUSTER_7,CLUSTER_9
stat_table['Mean'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Min'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Max'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Variance'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Skewness'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Kurtosis'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Mean'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Min'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Max'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Variance'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Skewness'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Kurtosis'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Mean'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Min'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Max'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Variance'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Skewness'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['Kurtosis'],scipy.stats.describe(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['z-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['p-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['z-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['p-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['z-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
stat_table['p-value'],scipy.stats.kurtosistest(returns.dropna(),CLUSTER_7,CLUSTER_9
start,"datetime.datetime(2011,1,21)",CLUSTER_7,CLUSTER_9
end,"datetime.datetime(2019,1,20)",CLUSTER_7,CLUSTER_9
start,"datetime.datetime(2014,1,21)",CLUSTER_7,CLUSTER_9
end,"datetime.datetime(2019,1,20)",CLUSTER_7,CLUSTER_9
start,"datetime.datetime(2016,1,21)",CLUSTER_7,CLUSTER_9
end,"datetime.datetime(2019,1,20)",CLUSTER_7,CLUSTER_9
industry_titles,"pandas.DataFrame([['POPESTIMATE2010','Population']],columns=industry_titles.columns)",CLUSTER_0,CLUSTER_5
industry_titles,"pandas.DataFrame([['Cropland','Cropland'],
['Desert','Desert'],
['Grassland','Grassland'],
['Other','Other'],
['Woodland','Woodland'],
['Urban','Urban'],
['Water','Water']],columns=industry_titles.columns)",CLUSTER_0,CLUSTER_5
clust_result,"pandas.DataFrame(clustering.labels_,index=X.columns,columns=['cluster'])",CLUSTER_0,CLUSTER_5
edges,pandas.DataFrame(demean(cor_mat),CLUSTER_0,CLUSTER_5
nodes_size,pandas.DataFrame(np.sqrt(X.sum(),CLUSTER_0,CLUSTER_5
pos_df,"pandas.DataFrame(pos,index=['x','y'])",CLUSTER_0,CLUSTER_5
df,pandas.concat(df_list),CLUSTER_0,CLUSTER_5
X,"pandas.concat([county_pop.loc[X.index],county_LU.loc[X.index],X],axis=1,sort=True)",CLUSTER_0,CLUSTER_5
clust_result,"pandas.concat([clust_result,industry_titles.set_index('industry_code')",CLUSTER_0,CLUSTER_5
nodes,"pandas.concat([nodes_size,clust_result],axis=1,sort=False)",CLUSTER_0,CLUSTER_5
nodes_wpos,"pandas.concat([nodes_s,pos_df],axis=1,sort=False)",CLUSTER_0,CLUSTER_5
main_tables,pandas.concat([pd.read_csv('./../../../../../media/miglesia/Elements/corr_st_data/CHI_COM_W4_O4_E2_I4_main_table_2011_2012.csv'),CLUSTER_0,CLUSTER_5
merged,pandas.concat([population.set_index('CHIIDCOM'),CLUSTER_0,CLUSTER_5
b,"8;population['log_dens_cat']=pandas.cut(population['log_dens'],b)",CLUSTER_0,CLUSTER_5
bins,"pandas.cut(population['log_dens'],b,retbins=True)",CLUSTER_0,CLUSTER_5
agglevel_titles,pandas.read_csv(path+'agglevel_titles.csv'),CLUSTER_0,CLUSTER_5
area_titles,pandas.read_csv(path+'area_titles.csv'),CLUSTER_0,CLUSTER_5
industry_titles,pandas.read_csv(path+'industry_titles.csv'),CLUSTER_0,CLUSTER_5
df_y,pandas.read_csv(path+str(y),CLUSTER_0,CLUSTER_5
df_cnt,"pandas.read_csv('./data/naics_area_cnt_02_07.csv',index_col=[0,1])",CLUSTER_0,CLUSTER_5
county_LU,"pandas.read_csv('./data/US_land_use/land_use_frac.csv',index_col=0)",CLUSTER_0,CLUSTER_5
county_pop,"pandas.read_csv('./data/co-est2017-alldata.csv',encoding='latin-1')",CLUSTER_0,CLUSTER_5
population,pandas.read_csv('./data/pop_dist_comuna.csv'),CLUSTER_0,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(1,3,figsize=(24,8)",CLUSTER_0,CLUSTER_5
nodes_['color_mfg_srv'],"numpy.select(conditions,choices,default='

edges_max_d_triangles.to_csv('edges_max_d_triangles.csv',index=False)",CLUSTER_0,CLUSTER_5
clustering,"sklearn.cluster.SpectralClustering(n_clusters=10,
assign_labels=""discretize"",
random_state=0)",CLUSTER_0,CLUSTER_5
cor_mat,numpy.log10(X),CLUSTER_0,CLUSTER_5
cov_mat,numpy.log10(X),CLUSTER_0,CLUSTER_5
df_indu_prc_area,numpy.log10(df_agglv_yravg),CLUSTER_0,CLUSTER_5
df_indu_prc_area,numpy.log10(df_agglv_yravg),CLUSTER_0,CLUSTER_5
population['log_dens'],numpy.log10(population['densidad']),CLUSTER_0,CLUSTER_5
x_len,numpy.arange(len(y_loss),CLUSTER_2,CLUSTER_7
favorite_retweet_table,pandas.DataFrame(data_list),CLUSTER_9,CLUSTER_2
data_twitter_clean,"pandas.melt(data_twitter_clean,id_vars=columns_to_stay,value_vars=columns_to_melt,
var_name='stages',value_name='dog_stage')",CLUSTER_9,CLUSTER_2
df_twitter,"pandas.merge(data_twitter_clean,
images_clean,
how='left',on=['tweet_id'])",CLUSTER_9,CLUSTER_2
df_twitter_master,"pandas.merge(df_twitter,json_clean,
how='left',on=['tweet_id'])",CLUSTER_9,CLUSTER_2
data_twitter,pandas.read_csv('twitter-archive-enhanced.csv'),CLUSTER_9,CLUSTER_2
images,"pandas.read_table('images_prediction/image-predictions.tsv',
sep='\t')",CLUSTER_9,CLUSTER_2
data_twitter_clean['timestamp'],pandas.to_datetime(data_twitter_clean['timestamp']),CLUSTER_9,CLUSTER_2
r,requests.get(url),CLUSTER_9,CLUSTER_2
data,json.loads(line),CLUSTER_9,CLUSTER_2
idlat,numpy.where(abs(pointCoords[0]-lat),CLUSTER_1,CLUSTER_9
idlon,numpy.where(abs(pointCoords[1]-lon),CLUSTER_1,CLUSTER_9
ts,"numpy.squeeze(myvar[:,idlat,idlon])",CLUSTER_1,CLUSTER_9
ts_CDOfilt,"numpy.squeeze(myvar_CDOfilt[:,idlat,idlon])",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,4)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,4)",CLUSTER_1,CLUSTER_9
t,"matplotlib.pyplot.text(1/max5[i,0],max5[i,1],'%.0fdays'%round(max5[i,2])",CLUSTER_1,CLUSTER_9
t,"matplotlib.pyplot.text(1/max5_f[i,0],max5_f[i,1],'%.0fdays'%round(max5_f[i,2])",CLUSTER_1,CLUSTER_9
t,"matplotlib.pyplot.text(1/max5_CDOf[i,0],max5_CDOf[i,1],'%.0fdays'%round(max5_CDOf[i,2])",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,[low,high],btype='band')",CLUSTER_1,CLUSTER_9
y,"scipy.signal.lfilter(b,a,data)",CLUSTER_1,CLUSTER_9
wiki_movies_raw,json.load(file),CLUSTER_9,CLUSTER_3
wiki_movies_df,pandas.DataFrame(wiki_movies_raw),CLUSTER_9,CLUSTER_3
wiki_movies_df,pandas.DataFrame(clean_movies),CLUSTER_9,CLUSTER_3
wiki_movies_df,pandas.DataFrame(clean_movies),CLUSTER_9,CLUSTER_3
movies_df,"pandas.merge(wiki_movies_df,kaggle_metadata,on='imdb_id',suffixes=['_wiki','_kaggle'])",CLUSTER_9,CLUSTER_3
movies_with_ratings_df,"pandas.merge(movies_df,rating_counts,left_on='kaggle_id',right_index=True,how='left')",CLUSTER_9,CLUSTER_3
kaggle_metadata,"pandas.read_csv(f'{file_dir}movies_metadata.csv',low_memory=False)",CLUSTER_9,CLUSTER_3
ratings,pandas.read_csv(f'{file_dir}ratings.csv'),CLUSTER_9,CLUSTER_3
wiki_movies_df['release_date'],pandas.to_datetime(release_date.str.extract(f'({date_form_one}|{date_form_two}|{date_form_three}|{date_form_four}),CLUSTER_9,CLUSTER_3
kaggle_metadata['release_date'],pandas.to_datetime(kaggle_metadata['release_date']),CLUSTER_9,CLUSTER_3
ratings['timestamp'],"pandas.to_datetime(ratings['timestamp'],unit='s')",CLUSTER_9,CLUSTER_3
kaggle_metadata['id'],"pandas.to_numeric(kaggle_metadata['id'],errors='raise')",CLUSTER_9,CLUSTER_3
kaggle_metadata['popularity'],"pandas.to_numeric(kaggle_metadata['popularity'],errors='raise')",CLUSTER_9,CLUSTER_3
s,"re.sub('\$|\s|[a-zA-Z]','',s)",CLUSTER_9,CLUSTER_3
s,"re.sub('\$|\s|[a-zA-Z]','',s)",CLUSTER_9,CLUSTER_3
s,"re.sub('\$|,','',s)",CLUSTER_9,CLUSTER_3
start_time,time.time(),CLUSTER_9,CLUSTER_3
hist,pandas.Series(counts),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('survey_short_columns.csv'),CLUSTER_7,CLUSTER_8
tmp,"pandas.read_csv('roles.csv',sep=';',index_col=0)",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('Data/taxi_data.csv'),CLUSTER_0,CLUSTER_5
X,"numpy.array(df[['LON','LAT']],dtype='float64')",CLUSTER_0,CLUSTER_5
X,"numpy.array(df[['LON','LAT']],dtype='float64')",CLUSTER_0,CLUSTER_5
dummy,"numpy.array([-1,-1,-1,2,3,4,5,-1])",CLUSTER_0,CLUSTER_5
new,numpy.array([(counter+2),CLUSTER_0,CLUSTER_5
no_outliers,numpy.array([(counter+2),CLUSTER_0,CLUSTER_5
no_outliers,numpy.array([(counter+2),CLUSTER_0,CLUSTER_5
X_train,"numpy.array(df_train[['LON','LAT']],dtype='float64')",CLUSTER_0,CLUSTER_5
y_train,numpy.array(df_train['CLUSTER_HDBSCAN']),CLUSTER_0,CLUSTER_5
X_predict,"numpy.array(df_predict[['LON','LAT']],dtype='float64')",CLUSTER_0,CLUSTER_5
unique_clusters,numpy.unique(class_predictions),CLUSTER_0,CLUSTER_5
unique_clusters,numpy.unique(class_predictions),CLUSTER_0,CLUSTER_5
data[x]['unique_classes'],numpy.unique(class_predictions),CLUSTER_0,CLUSTER_5
class_predictions,numpy.load('Data/sample_clusters.npy'),CLUSTER_0,CLUSTER_5
class_predictions,numpy.load('Data/sample_clusters_improved.npy'),CLUSTER_0,CLUSTER_5
model,"sklearn.cluster.KMeans(n_clusters=3,random_state=17,
max_iter=x,n_init=1)",CLUSTER_0,CLUSTER_5
model,"sklearn.cluster.KMeans(n_clusters=k,random_state=17)",CLUSTER_0,CLUSTER_5
model,"sklearn.cluster.KMeans(n_clusters=k,random_state=1)",CLUSTER_0,CLUSTER_5
model,"sklearn.cluster.DBSCAN(eps=0.01,min_samples=5)",CLUSTER_0,CLUSTER_5
curr_silhouette,"sklearn.metrics.silhouette_score(X,class_predictions)",CLUSTER_0,CLUSTER_5
"X_blobs,_","sklearn.datasets.make_blobs(n_samples=1000,centers=10,n_features=2,
cluster_std=0.5,random_state=4)",CLUSTER_0,CLUSTER_5
"X_blobs,_","sklearn.datasets.make_blobs(n_samples=1000,centers=50,
n_features=2,cluster_std=1,random_state=4)",CLUSTER_0,CLUSTER_5
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_0,CLUSTER_5
data,collections.defaultdict(dict),CLUSTER_0,CLUSTER_5
popup,"re.sub(r'[^a-zA-Z]+','',row.NAME)",CLUSTER_0,CLUSTER_5
df,pandas.DataFrame([list(x.seq),CLUSTER_5,CLUSTER_5
distances,pandas.DataFrame(manhattan_distances(data.toarray(),CLUSTER_5,CLUSTER_5
pathsdf,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
df,pandas.DataFrame([list(x.seq),CLUSTER_5,CLUSTER_5
names,pandas.Series([x.idforxinfastas]),CLUSTER_5,CLUSTER_5
names,pandas.Series([x.idforxinfastas]),CLUSTER_5,CLUSTER_5
primersheet['GC'],pandas.Series([GC(i),CLUSTER_5,CLUSTER_5
repeats,"pandas.Series(repeats,name='%repeats')",CLUSTER_5,CLUSTER_5
pairs,"pandas.concat([pathsdf[0],pathsdf[1]],
axis=1,join='inner')",CLUSTER_5,CLUSTER_5
x,"pandas.concat([pathsdf[i],pathsdf[i+1]],
axis=1,join='inner')",CLUSTER_5,CLUSTER_5
primersheet,"pandas.concat([rxns['Source'],
rxns['Target'],
rxns['newcodon'].str.cat([rxns['baseprimer']])",CLUSTER_5,CLUSTER_5
arr,numpy.array([]),CLUSTER_5,CLUSTER_5
arr,numpy.array([]),CLUSTER_5,CLUSTER_5
array,numpy.asarray(array),CLUSTER_5,CLUSTER_5
arr,"numpy.append(arr,i)",CLUSTER_5,CLUSTER_5
arr,"numpy.append(arr,mt.Tm_NN(primer)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,3.5)",CLUSTER_5,CLUSTER_5
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
OneHotEncoder,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
skf,"sklearn.model_selection.KFold(n_splits=config['N_USED_FOLDS'],shuffle=True,random_state=SEED)",CLUSTER_10,CLUSTER_7
data,"numpy.array(file[""/numres""])",CLUSTER_1,CLUSTER_10
imag,numpy.array(file[rl]),CLUSTER_1,CLUSTER_10
real,numpy.array(file[im]),CLUSTER_1,CLUSTER_10
cn,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
c1,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
c2,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
c3,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
c4,numpy.zeros(np.int32(nt/toff),CLUSTER_1,CLUSTER_10
index,numpy.int32(i/toff),CLUSTER_1,CLUSTER_10
t,"numpy.linspace(0,5000,1e3)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(14,10)",CLUSTER_1,CLUSTER_10
df,"pandas.read_csv(database,delimiter=';')",CLUSTER_7,CLUSTER_3
image,numpy.array(image),CLUSTER_4,CLUSTER_0
data,numpy.array(data),CLUSTER_4,CLUSTER_0
labels,numpy.array(labels),CLUSTER_4,CLUSTER_0
X_test,numpy.array(data),CLUSTER_4,CLUSTER_0
y_test,pandas.read_csv('Test.csv'),CLUSTER_4,CLUSTER_0
cur_path,os.getcwd(),CLUSTER_4,CLUSTER_0
images,os.listdir(path),CLUSTER_4,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,labels,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_0
input_df,"pandas.DataFrame([[input_json['machine']['temperature'],input_json['machine']['pressure'],input_json['ambient']['temperature'],input_json['ambient']['humidity']]])",CLUSTER_5,CLUSTER_1
temp_data,pandas.read_csv('temperature_data.csv'),CLUSTER_5,CLUSTER_1
clf1,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_1
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.35,random_state=0)",CLUSTER_5,CLUSTER_1
input_json,json.loads(input_str),CLUSTER_5,CLUSTER_1
x,numpy.arange(9),CLUSTER_7,CLUSTER_8
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_8
val_scores_mean,"numpy.mean(val_scores,axis=1)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv(TRAIN_DATASET),CLUSTER_7,CLUSTER_8
"slope,intercept,r_value,p_value,std_err","scipy.stats.linregress(x_axis,y_axis)",CLUSTER_7,CLUSTER_8
"popt,pcov","scipy.optimize.curve_fit(func,x_axis,y_axis)",CLUSTER_7,CLUSTER_8
r,"random.randint(0,len(x_axis)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,target,test_size=0.25,random_state=random_state)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
model,sklearn.tree.DecisionTreeRegressor(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.Ridge(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.Lasso(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.ElasticNet(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.GradientBoostingRegressor(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.RandomForestRegressor(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.AdaBoostRegressor(random_state=random_state),CLUSTER_7,CLUSTER_8
model,sklearn.svm.SVR(),CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=cv,scoring='r2')",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=random_state)",CLUSTER_7,CLUSTER_8
"train_sizes,train_scores,val_scores","sklearn.model_selection.learning_curve(model,X_train,y_train,cv=cv,
scoring=scoring,n_jobs=n_jobs,verbose=1)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('Input/Pokemon.csv'),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_8
proyect_data,pandas.read_csv('/Users/juandediegosuanzes/desktop/ih_datamadpt0420_project_m1/data/raw/proyect_data.csv'),CLUSTER_8,CLUSTER_4
tables,"pandas.read_sql_query(""""""SELECTnameFROMsqlite_masterWHEREtype='table'"""""",engine)",CLUSTER_8,CLUSTER_4
"X_train,y_train","sklearn.datasets.load_svmlight_file(""a9atrain.txt"")",CLUSTER_3,CLUSTER_10
"X_test,y_test","sklearn.datasets.load_svmlight_file(""a9atest.txt"")",CLUSTER_3,CLUSTER_10
x_,numpy.array(X_train.toarray(),CLUSTER_3,CLUSTER_10
y_,"numpy.array(y_train,np.float32)",CLUSTER_3,CLUSTER_10
xt_,numpy.array(X_test.toarray(),CLUSTER_3,CLUSTER_10
yt_,"numpy.array(y_test,np.float32)",CLUSTER_3,CLUSTER_10
	gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	test_loss_history,"numpy.zeros((iteration,1)",CLUSTER_3,CLUSTER_10
	v,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	Theta_gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	test_loss_history,"numpy.zeros((iteration,1)",CLUSTER_3,CLUSTER_10
	Theta_gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	test_loss_history,"numpy.zeros((iteration,1)",CLUSTER_3,CLUSTER_10
	Theta_gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	delta_theta,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	test_loss_history,"numpy.zeros((iteration,1)",CLUSTER_3,CLUSTER_10
	Theta_gradient,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
	m_t,numpy.zeros(Theta.shape),CLUSTER_3,CLUSTER_10
t_nag,"numpy.zeros((1,124)",CLUSTER_3,CLUSTER_10
t_rmsprop,"numpy.zeros((1,124)",CLUSTER_3,CLUSTER_10
t_adadelta,"numpy.zeros((1,124)",CLUSTER_3,CLUSTER_10
t_adam,"numpy.zeros((1,124)",CLUSTER_3,CLUSTER_10
X_,"numpy.hstack([x_,np.ones((x_.shape[0],1)",CLUSTER_3,CLUSTER_10
Xt_,"numpy.hstack([xt_,np.zeros((xt_.shape[0],1)",CLUSTER_3,CLUSTER_10
	e_t,math.exp(Xi.dot(Theta.T),CLUSTER_3,CLUSTER_10
		index,"random.randint(0,y.shape[0]-10)",CLUSTER_3,CLUSTER_10
		index,"random.randint(0,y.shape[0]-10)",CLUSTER_3,CLUSTER_10
		index,"random.randint(0,y.shape[0]-10)",CLUSTER_3,CLUSTER_10
		index,"random.randint(0,y.shape[0]-10)",CLUSTER_3,CLUSTER_10
ts_pre,"pandas.read_csv('../PIRdata/1monthPIRsleep.csv',parse_dates=True,index_col=0)",CLUSTER_7,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((9,1)",CLUSTER_7,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((9,1)",CLUSTER_7,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((9,1)",CLUSTER_7,CLUSTER_3
decisions,"numpy.array([l0,l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13,
l14,l15,l16,l17,l18,l19,l20,l21,l22,l23,l24,l25,
l26,l27,l28,l29,l30,l31,l32,l33,l34,l35,l36,l37,
l38,l39,l40,l41,l42,l43,l44,l45,l46,l47,l48,l49,
l50,l51,l52,l53,l54,l55,l56,l57,l58,l59,l60,l61,
l62,l63,l64,l65,l66,l67,l68,l69,l70,l71,l72,l73,
l74,l75,l76,l77,l78,l79,l80,l81,l82,l83,l84,l85,
l86,l87,l88,l89,l90,l91,l92,l93,l94,l95,l96,l97,
l98,l99])",CLUSTER_3,CLUSTER_6
decisions,numpy.array(decisions),CLUSTER_3,CLUSTER_6
X,"numpy.zeros((nvars,)",CLUSTER_3,CLUSTER_6
average_daily_P,"numpy.zeros((nvars,)",CLUSTER_3,CLUSTER_6
reliability+,numpy.sum(X<Pcrit),CLUSTER_3,CLUSTER_6
utility,"numpy.sum(alpha*decisions*np.power(delta,np.arange(nvars)",CLUSTER_3,CLUSTER_6
inertia,numpy.sum(np.abs(np.diff(decisions),CLUSTER_3,CLUSTER_6
Pcrit,scipy.optimize.brentq(lambdax:x**q/(1+x**q),CLUSTER_3,CLUSTER_6
df,"pandas.read_csv('olympics.csv',index_col=0,skiprows=1)",CLUSTER_8,CLUSTER_4
census_df,pandas.read_csv('census.csv'),CLUSTER_8,CLUSTER_4
data_matrix,"numpy.array([[10,60,10,90],
[20,50,40,70],
[30,50,30,40],
[20,50,20,60],
[10,60,30,10]])",CLUSTER_5,CLUSTER_10
data_matrix,"numpy.array([[10,60,90],
[20,50,70],
[30,50,40],
[20,50,60],
[10,60,10]])",CLUSTER_5,CLUSTER_10
centered_data,"numpy.empty([5,3])",CLUSTER_5,CLUSTER_10
mean,"numpy.mean(data_matrix,axis=0)",CLUSTER_5,CLUSTER_10
covariance,"numpy.cov(centered_data,rowvar=False)",CLUSTER_5,CLUSTER_10
proj_matrix,"numpy.column_stack((eigenvectors[:,2],eigenvectors[:,1])",CLUSTER_5,CLUSTER_10
"eigenvalues,eigenvectors",numpy.linalg.eigh(covariance),CLUSTER_5,CLUSTER_10
norm,"numpy.linalg.norm(data_matrix,axis=1)",CLUSTER_5,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_10
df,pandas.DataFrame(treated_cards),CLUSTER_8,CLUSTER_4
n,numpy.arange(immagini.shape[0]),CLUSTER_4,CLUSTER_0
immagini,numpy.array(data),CLUSTER_4,CLUSTER_0
label,numpy.array(labels),CLUSTER_4,CLUSTER_0
x_train,numpy.array(list(x_train),CLUSTER_4,CLUSTER_0
x_test,numpy.array(list(x_test),CLUSTER_4,CLUSTER_0
dati,"pandas.DataFrame(data=d,columns=[""immagini"",""labels""])",CLUSTER_4,CLUSTER_0
infette,"os.listdir(cellule+""/Parasitized"")",CLUSTER_4,CLUSTER_0
sane,"os.listdir(cellule+""/Uninfected"")",CLUSTER_4,CLUSTER_0
img,"matplotlib.pyplot.imread(cellule+""/""+""Parasitized""+""/""+infette[i+1])",CLUSTER_4,CLUSTER_0
img,"matplotlib.pyplot.imread(cellule+""/""+""Uninfected""+""/""+sane[i+1])",CLUSTER_4,CLUSTER_0
img_read,"matplotlib.pyplot.imread(cellule+""/Parasitized/""+img)",CLUSTER_4,CLUSTER_0
img_read,"matplotlib.pyplot.imread(cellule+""/Uninfected/""+img)",CLUSTER_4,CLUSTER_0
"train,test","sklearn.model_selection.train_test_split(dati,test_size=0.3,stratify=dati[""labels""])",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv('1coinUSD.csv',header=None)",CLUSTER_8,CLUSTER_9
self.current_density_points_to_bin,numpy.array([-1for_inrange(var.shape[0]),CLUSTER_8,CLUSTER_9
self.current_velocity_points_to_bin,numpy.array([-1for_inrange(var.shape[0]),CLUSTER_8,CLUSTER_9
self.current_density_bin_to_points,numpy.array(self.current_density_bin_to_points),CLUSTER_8,CLUSTER_9
self.init_density,"numpy.array([0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.5200622,0.4259711,0.05396671,0.,0.,0.,0.,0.])",CLUSTER_8,CLUSTER_9
self.current_velocity,numpy.zeros(self.n),CLUSTER_8,CLUSTER_9
self.current_velocity_table,"numpy.zeros((self.n_v,self.n)",CLUSTER_8,CLUSTER_9
self.current_density,numpy.zeros(self.n),CLUSTER_8,CLUSTER_9
new_velocity,numpy.zeros(self.n),CLUSTER_8,CLUSTER_9
self.x,numpy.zeros(N),CLUSTER_8,CLUSTER_9
indicies,"numpy.nonzero(np.logical_and(current_var>=g[0],current_var<g[1])",CLUSTER_8,CLUSTER_9
indicies,"numpy.nonzero(np.logical_and(var>=g[0],var<g[1])",CLUSTER_8,CLUSTER_9
indicies,numpy.nonzero(current_density),CLUSTER_8,CLUSTER_9
new_velocity[indicies],"numpy.divide(np.multiply(prev_density[indicies],prev_velocity[indicies])",CLUSTER_8,CLUSTER_9
integral,"numpy.multiply(self.current_velocity_table[:,i],self.mean_velocity_in_bin)",CLUSTER_8,CLUSTER_9
self.density,"scipy.sparse.vstack(self.density,format='csr')",CLUSTER_8,CLUSTER_9
self.velocity,"scipy.sparse.vstack(self.velocity,format='csr')",CLUSTER_8,CLUSTER_9
self.new_density,"scipy.sparse.vstack(self.new_density,format='csr')",CLUSTER_8,CLUSTER_9
self.n,"math.floor(math.pow(T,0.34)",CLUSTER_8,CLUSTER_9
dataset,pandas.read_csv('Position_Salaries.csv'),CLUSTER_5,CLUSTER_5
X_grid,numpy.arange(min(X),CLUSTER_5,CLUSTER_5
regressor,sklearn.tree.DecisionTreeRegressor(random_state=0),CLUSTER_5,CLUSTER_5
train_imgs,"numpy.asfarray(train_data[:,1:])",CLUSTER_7,CLUSTER_8
test_imgs,"numpy.asfarray(test_data[:,1:])",CLUSTER_7,CLUSTER_8
train_labels,"numpy.asfarray(train_data[:,:1])",CLUSTER_7,CLUSTER_8
test_labels,"numpy.asfarray(test_data[:,:1])",CLUSTER_7,CLUSTER_8
corr_mat,"numpy.corrcoef(x,y)",CLUSTER_7,CLUSTER_8
train_data,"numpy.loadtxt(data_path+""mnist_train.csv"",
delimiter="","")",CLUSTER_7,CLUSTER_8
test_data,"numpy.loadtxt(data_path+""mnist_test.csv"",
delimiter="","")",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(3,4)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(3,5)",CLUSTER_7,CLUSTER_8
iris,"seaborn.load_dataset(""iris"")",CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
iris,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_8
cv_results,"sklearn.model_selection.cross_validate(clf,X,y,cv=3,return_train_score=True)",CLUSTER_7,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(test_imgs,pred,test_labels)",CLUSTER_7,CLUSTER_8
faces,sklearn.datasets.fetch_lfw_people(min_faces_per_person=40),CLUSTER_7,CLUSTER_8
sample_list_1,random.sample(range(100),CLUSTER_10,CLUSTER_4
feature_imp,pandas.DataFrame(model.feature_importances_),CLUSTER_8,CLUSTER_1
data,pandas.read_excel('INX_Future_Inc_Employee_Performance_CDS_Project2_Data_V1.8-Copy.xls'),CLUSTER_8,CLUSTER_1
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=40)",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.24,random_state=0)",CLUSTER_8,CLUSTER_1
enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
apcs,"pandas.read_csv(apc_file,sep="","")",CLUSTER_8,CLUSTER_3
apcs,pandas.read_csv(value),CLUSTER_8,CLUSTER_3
X_test,"numpy.arange(0.0,10,0.01)",CLUSTER_5,CLUSTER_10
X,"numpy.sort(10*rng.rand(80,1)",CLUSTER_5,CLUSTER_10
y,numpy.sin(X),CLUSTER_5,CLUSTER_10
clf_0,sklearn.tree.DecisionTreeRegressor(max_depth=1),CLUSTER_5,CLUSTER_10
clf_1,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_5,CLUSTER_10
clf_2,sklearn.tree.DecisionTreeRegressor(max_depth=3),CLUSTER_5,CLUSTER_10
clf_3,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_5,CLUSTER_10
pred_idx,numpy.argmax(y_hat[idx]),CLUSTER_2,CLUSTER_10
true_idx,numpy.argmax(y_test[idx]),CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,5)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_2,CLUSTER_10
parameters_tmp['Wy'],"numpy.zeros((2,5)",CLUSTER_3,CLUSTER_6
parameters_tmp['by'],"numpy.zeros((2,1)",CLUSTER_3,CLUSTER_6
data,json.load(json_file),CLUSTER_1,CLUSTER_10
res,collections.defaultdict(list),CLUSTER_1,CLUSTER_10
res,collections.defaultdict(list),CLUSTER_1,CLUSTER_10
y_pos,numpy.arange(len(semisortedinfo[[*data][1]]),CLUSTER_1,CLUSTER_10
y_pos,numpy.arange(len(semisortedinfo[p]),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,15)",CLUSTER_1,CLUSTER_10
df,pandas.read_csv('../data/Part01/application_train.csv'),CLUSTER_7,CLUSTER_9
y,"numpy.arange(1,1+len(x)",CLUSTER_7,CLUSTER_9
y,"numpy.arange(1,n+1)",CLUSTER_7,CLUSTER_9
x,numpy.sort(df['AMT_INCOME_TOTAL']),CLUSTER_7,CLUSTER_9
x,numpy.sort(df['REGION_POPULATION_RELATIVE']),CLUSTER_7,CLUSTER_9
x,numpy.sort(data),CLUSTER_7,CLUSTER_9
x_train,"numpy.pad(x_train,((0,0)",CLUSTER_4,CLUSTER_0
x_test,"numpy.pad(x_test,((0,0)",CLUSTER_4,CLUSTER_0
x_val,"numpy.pad(x_val,((0,0)",CLUSTER_4,CLUSTER_0
program_starts,time.time(),CLUSTER_4,CLUSTER_0
now,time.time(),CLUSTER_4,CLUSTER_0
categorical,pandas.get_dummies(data[categorical.columns]),CLUSTER_5,CLUSTER_1
data,"pandas.read_csv('23OCT_23NOV_10.193.123.18_final.csv.csv',header=0,encoding='UTF-16')",CLUSTER_5,CLUSTER_1
ridge_alphas,"numpy.logspace(0,5,100)",CLUSTER_7,CLUSTER_8
l1_ratios,"numpy.linspace(0.01,1.0,50)",CLUSTER_7,CLUSTER_8
merge_base,"pandas.DataFrame(df1,columns=['Country','year'])",CLUSTER_7,CLUSTER_8
merge_base,"pandas.DataFrame(df2,columns=['Country','year'])",CLUSTER_7,CLUSTER_8
df3_indicators,"pandas.DataFrame(df3,columns=['Country','year'])",CLUSTER_7,CLUSTER_8
method_coefs,"pandas.DataFrame({'Variable':X.columns,
'Coefficient':best_regulari.coef_,
'AbsoluteCoefficient':np.abs(best_regulari.coef_)",CLUSTER_7,CLUSTER_8
feature_importance,"pandas.DataFrame({'Feature':X.columns,'Importance':best_model.feature_importances_})",CLUSTER_7,CLUSTER_8
acled,pandas.concat(acled),CLUSTER_7,CLUSTER_8
merge_base,"pandas.merge(merge_base,df1_i,on=['Country','year'],how='left')",CLUSTER_7,CLUSTER_8
merge_base,"pandas.merge(merge_base,df2_i,on=['Country','year'],how='left')",CLUSTER_7,CLUSTER_8
df3_indicators,"pandas.merge(df3_indicators,df3_i,on=['Country','year'],how='left')",CLUSTER_7,CLUSTER_8
data,"pandas.merge(acled_eventtype_total,df2_indicators,on=['Country','year'])",CLUSTER_7,CLUSTER_8
acled_africa,pandas.read_csv('Desktop/ECON628-01-RPanlilio/ACLED-Africa.csv'),CLUSTER_7,CLUSTER_8
acled_asia,pandas.read_csv('Desktop/ECON628-01-RPanlilio/ACLED-Asia.csv'),CLUSTER_7,CLUSTER_8
df1,pandas.read_csv('Desktop/ECON628-01-RPanlilio/poverryandequity.csv'),CLUSTER_7,CLUSTER_8
df2,pandas.read_csv('Desktop/ECON628-01-RPanlilio/indexofeconomicfreedom.csv'),CLUSTER_7,CLUSTER_8
df3,pandas.read_csv('Desktop/ECON628-01-RPanlilio/resourcestatistics.csv'),CLUSTER_7,CLUSTER_8
acled['date'],pandas.to_datetime(acled['EventDate']),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,8)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(10,6)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,10)",CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x=""Country"",y=""TotalEvents"",data=acled_country)",CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x=""year"",y=""TotalEvents"",data=acled_year)",CLUSTER_7,CLUSTER_8
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
ridge,sklearn.linear_model.Ridge(alpha=optimal_ridge.alpha_),CLUSTER_7,CLUSTER_8
lasso,sklearn.linear_model.Lasso(alpha=optimal_lasso.alpha_),CLUSTER_7,CLUSTER_8
enet,"sklearn.linear_model.ElasticNet(alpha=optimal_enet.alpha_,l1_ratio=optimal_enet.l1_ratio_)",CLUSTER_7,CLUSTER_8
optimal_ridge,"sklearn.linear_model.RidgeCV(alphas=ridge_alphas,cv=10)",CLUSTER_7,CLUSTER_8
optimal_lasso,"sklearn.linear_model.LassoCV(n_alphas=300,cv=10,verbose=1)",CLUSTER_7,CLUSTER_8
optimal_enet,"sklearn.linear_model.ElasticNetCV(l1_ratio=l1_ratios,n_alphas=300,cv=5,verbose=1)",CLUSTER_7,CLUSTER_8
dtr,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_8
forest,sklearn.ensemble.RandomForestRegressor(),CLUSTER_7,CLUSTER_8
data,sklearn.datasets.load_files(path),CLUSTER_4,CLUSTER_0
dog_files,numpy.array(data['filenames']),CLUSTER_4,CLUSTER_0
human_files,"numpy.array(glob(""/data/lfw/*/*"")",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(dog_breed_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(VGG16_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
test_accuracy,"100*np.sum(np.array(Inception_predictions)==numpy.argmax(test_targets,axis=1)",CLUSTER_4,CLUSTER_0
bottleneck_features,numpy.load('/data/bottleneck_features/DogVGG16Data.npz'),CLUSTER_4,CLUSTER_0
bottleneck_features,numpy.load('/data/bottleneck_features/DogInceptionV3Data.npz'),CLUSTER_4,CLUSTER_0
img,matplotlib.pyplot.imread(img_path),CLUSTER_4,CLUSTER_0
tp,numpy.cumsum(pca.explained_variance_ratio_),CLUSTER_7,CLUSTER_5
df,pandas.DataFrame(scale(df),CLUSTER_7,CLUSTER_5
corr_cell,"pandas.DataFrame(reduced_data_pca,index=df.index)",CLUSTER_7,CLUSTER_5
_,matplotlib.pyplot.bar(range(len(lpa),CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(20,7)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,8)",CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=5),CLUSTER_7,CLUSTER_5
isomap,sklearn.manifold.Isomap(n_neighbors=10),CLUSTER_7,CLUSTER_5
tsne,sklearn.manifold.TSNE(n_components=2),CLUSTER_7,CLUSTER_5
_,"seaborn.clustermap(corr_feature,linewidths=0.1,vmax=1.0,square=True,linecolor='white',annot=False,figsize=(6,6)",CLUSTER_7,CLUSTER_5
g,"seaborn.clustermap(corr_cell,linewidths=0.01,vmax=1.0,linecolor='white',
row_colors=row_colors,col_colors=row_colors,
cmap=""vlag"",
annot=False,figsize=(14,14)",CLUSTER_7,CLUSTER_5
g,"seaborn.clustermap(corr_cell,linewidths=0.01,vmax=1.0,linecolor='white',
row_colors=row_colors,col_colors=row_colors,cmap=""vlag"",
metric='correlation',
annot=False,figsize=(12,12)",CLUSTER_7,CLUSTER_5
network_pal,seaborn.husl_palette(len(u_celltypes),CLUSTER_7,CLUSTER_5
mask,"numpy.where(img==classes_dict[img_label_str],255,0)",CLUSTER_1,CLUSTER_10
mask,"numpy.where(label_array[:,:,layer]==img_label,255,0)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=4,figsize=(50,30)",CLUSTER_1,CLUSTER_10
errors_one,"pandas.Series([5,10,5,10,5,10,5,10,5,10,5,10,5,10,5,10,5,10])",CLUSTER_8,CLUSTER_3
errors_two,"pandas.Series([5,10,5,10,5,10,5,10,5,10,5,10,5,10,5,10,5,1000])",CLUSTER_8,CLUSTER_3
dc_listings,"pandas.read_csv(""dc_airbnb.csv"")",CLUSTER_8,CLUSTER_3
mae_one,numpy.mean(errors_one),CLUSTER_8,CLUSTER_3
mae_two,numpy.mean(errors_two),CLUSTER_8,CLUSTER_3
mae,numpy.absolute(test_df['predicted_price']-test_df['price']),CLUSTER_8,CLUSTER_3
rmse,numpy.sqrt(mse),CLUSTER_8,CLUSTER_3
rmse_one,numpy.sqrt(np.square(errors_one),CLUSTER_8,CLUSTER_3
rmse_two,numpy.sqrt(np.square(errors_two),CLUSTER_8,CLUSTER_3
mse,numpy.square(test_df['predicted_price']-test_df['price']),CLUSTER_8,CLUSTER_3
test_df['squared_error'],numpy.square(test_df['predicted_price']-test_df['price']),CLUSTER_8,CLUSTER_3
r,"requests.delete(""http://httpbin.org/delete"")",CLUSTER_10,CLUSTER_4
r,"requests.get(""http://httpbin.org/get"")",CLUSTER_10,CLUSTER_4
r,"requests.get(""http://httpbin.org/get"",params=payload)",CLUSTER_10,CLUSTER_4
r,requests.get('https://github.com/timeline.json'),CLUSTER_10,CLUSTER_4
r,requests.get('http://httpbin.org/get'),CLUSTER_10,CLUSTER_4
r,"requests.head(""http://httpbin.org/get"")",CLUSTER_10,CLUSTER_4
r,"requests.options(""http://httpbin.org/get"")",CLUSTER_10,CLUSTER_4
r,"requests.post('http://httpbin.org/post',data={'key':'value'})",CLUSTER_10,CLUSTER_4
r,"requests.put(""http://httpbin.org/put"")",CLUSTER_10,CLUSTER_4
df,"pandas.DataFrame(X,index=y)",CLUSTER_5,CLUSTER_9
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_9
p,numpy.array(p),CLUSTER_11,CLUSTER_11
q,numpy.array(q),CLUSTER_11,CLUSTER_11
p,numpy.array(p),CLUSTER_11,CLUSTER_11
q,numpy.array(q),CLUSTER_11,CLUSTER_11
fftDataE,numpy.array([]),CLUSTER_11,CLUSTER_11
fftDataD,numpy.array([]),CLUSTER_11,CLUSTER_11
DistributePowerDataE,numpy.array([]),CLUSTER_11,CLUSTER_11
DistributePowerDataD,numpy.array([]),CLUSTER_11,CLUSTER_11
ArrayKLD,numpy.array([]),CLUSTER_11,CLUSTER_11
PowerDataE,numpy.imag(fftDataE),CLUSTER_11,CLUSTER_11
PowerDataD,numpy.imag(fftDataD),CLUSTER_11,CLUSTER_11
fftDataE,"numpy.append(fftDataE,fftpack.fft(window[i])",CLUSTER_11,CLUSTER_11
fftDataD,"numpy.append(fftDataD,fftpack.fft(reconstructData[i])",CLUSTER_11,CLUSTER_11
DistributePowerDataE,"numpy.append(DistributePowerDataE,PowerDataE[i]/(np.sum(PowerDataE[i])",CLUSTER_11,CLUSTER_11
DistributePowerDataD,"numpy.append(DistributePowerDataD,PowerDataD[i]/(np.sum(PowerDataD[i])",CLUSTER_11,CLUSTER_11
ArrayKLD,"numpy.append(ArrayKLD,kld(DistributePowerDataE[i],DistributePowerDataD[i])",CLUSTER_11,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(30,15)",CLUSTER_11,CLUSTER_11
df.review_count.hist(bins,"numpy.arange(0,40000,400)",CLUSTER_7,CLUSTER_9
a,"numpy.array([1,2,3,4,5])",CLUSTER_7,CLUSTER_9
b,"numpy.array([1,2,3,4,5])",CLUSTER_7,CLUSTER_9
df,"pandas.read_csv(""all.csv"",header=None,
names=[""rating"",'review_count','isbn','booktype','author_url','year','genre_urls','dir','rating_count','name'],
)",CLUSTER_7,CLUSTER_9
a,numpy.arange(5),CLUSTER_3,CLUSTER_6
x,"numpy.arange(2,101)",CLUSTER_3,CLUSTER_6
x,"numpy.arange(10,22)",CLUSTER_3,CLUSTER_6
x,"numpy.arange(0,32)",CLUSTER_3,CLUSTER_6
x,numpy.arange(4),CLUSTER_3,CLUSTER_6
x1,"numpy.arange(1,7)",CLUSTER_3,CLUSTER_6
x2,"numpy.arange(1,7)",CLUSTER_3,CLUSTER_6
x,"numpy.arange(1,7)",CLUSTER_3,CLUSTER_6
x,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
x,"numpy.array([1,2,3,4,5,6,7,8,9])",CLUSTER_3,CLUSTER_6
arr,"numpy.array([[0.,1.,2.,3.],
[4.,5.,6.,7.],
[8.,9.,10.,11.],
[12.,13.,14.,15.]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([[5,10,15],[20,25,30],[35,40,45]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([[1,2,3],
[4,5,6]])",CLUSTER_3,CLUSTER_6
y,"numpy.array([[7,8,9],
[10,11,12]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([3,6,9,25,10,8])",CLUSTER_3,CLUSTER_6
a,"numpy.array([0.0,10.0,20.0,30.0])",CLUSTER_3,CLUSTER_6
b,"numpy.array([1.0,2.0,3.0])",CLUSTER_3,CLUSTER_6
res,numpy.asarray(x),CLUSTER_3,CLUSTER_6
x,"numpy.zeros([5,5,5],dtype=int)",CLUSTER_3,CLUSTER_6
a,"numpy.zeros(10,dtype=int)",CLUSTER_3,CLUSTER_6
x,"numpy.zeros((4,4)",CLUSTER_3,CLUSTER_6
res,"numpy.zeros((6,6)",CLUSTER_3,CLUSTER_6
x,"numpy.ones([3,2],dtype=float)",CLUSTER_3,CLUSTER_6
y,numpy.ones(5),CLUSTER_3,CLUSTER_6
x,"numpy.full([2,5],6)",CLUSTER_3,CLUSTER_6
b,"numpy.full([10],5)",CLUSTER_3,CLUSTER_6
mea,numpy.mean(L),CLUSTER_3,CLUSTER_6
b,"numpy.reshape(b,[3,1])",CLUSTER_3,CLUSTER_6
std,numpy.std(L),CLUSTER_3,CLUSTER_6
var,numpy.var(L),CLUSTER_3,CLUSTER_6
"x1,x2,x3","numpy.split(x,[4,6])",CLUSTER_3,CLUSTER_6
"arr1,arr2","numpy.split(arr,2,axis=1)",CLUSTER_3,CLUSTER_6
my_new_str,"re.sub(""(\\W|+)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(r'\s+','',my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(r""\b\d+\b"","""",my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(""\d+"","""",my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(r""[^a-zA-Z0-9]+"",'',my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,"re.sub(r'\b\w{1,2}\b','',my_new_str)",CLUSTER_10,CLUSTER_4
my_new_str,re.sub(r'\b('+r'|'.join(stopwords.words('english'),CLUSTER_10,CLUSTER_4
my_new_str,"re.sub('+','',my_new_str)",CLUSTER_10,CLUSTER_4
files,"os.listdir(""X:/xxxx/xxxx/xxxxx/"")",CLUSTER_10,CLUSTER_4
mask,numpy.zeros_like(x),CLUSTER_1,CLUSTER_10
mask,numpy.zeros_like(x),CLUSTER_1,CLUSTER_10
x,numpy.array([]),CLUSTER_0,CLUSTER_1
y,numpy.array([]),CLUSTER_0,CLUSTER_1
preds,model.predict(x=numpy.array([word_idxs]),CLUSTER_0,CLUSTER_1
startind,numpy.argmax(prob),CLUSTER_0,CLUSTER_1
idx,numpy.argmax(prob),CLUSTER_0,CLUSTER_1
preds[0],"numpy.divide(preds[0],1*sum(preds[0])",CLUSTER_0,CLUSTER_1
speech_text,"re.sub(r'SPEECH\d+','',speech_text)",CLUSTER_0,CLUSTER_1
speech_text,"re.sub(r'\d+/\d+/\d+','',speech_text)",CLUSTER_0,CLUSTER_1
speech_text,"re.sub(r"";|-|\.\.+|\?|'|–|``|’|,|\$|"",'',speech_text)",CLUSTER_0,CLUSTER_1
speech_text,"re.sub(""\.\S+"",""."",speech_text)",CLUSTER_0,CLUSTER_1
ngramdict,collections.Counter([]),CLUSTER_0,CLUSTER_1
ngramdict+,collections.Counter(unigram),CLUSTER_0,CLUSTER_1
"ngramdict,n1gramdict",collections.Counter([]),CLUSTER_0,CLUSTER_1
ngramdict+,collections.Counter(ngram),CLUSTER_0,CLUSTER_1
n1gramdict+,collections.Counter(n1gram),CLUSTER_0,CLUSTER_1
"train_data,test_data","sklearn.model_selection.train_test_split(tokenized_sent_list,test_size=0.20,random_state=100)",CLUSTER_0,CLUSTER_1
p+,math.log(mle_dict[nwords]),CLUSTER_0,CLUSTER_1
prob+,math.log(prob1),CLUSTER_0,CLUSTER_1
enc,sklearn.preprocessing.OneHotEncoder(handle_unknown='ignore'),CLUSTER_0,CLUSTER_1
X_train_cont_scaled,"pandas.DataFrame(X_train_cont_scaled,columns=X_train_cont.columns)",CLUSTER_7,CLUSTER_5
X_test_cont_scaled,"pandas.DataFrame(X_test_cont_scaled,columns=X_test_cont.columns)",CLUSTER_7,CLUSTER_5
df_base,pandas.DataFrame({'ID':np.repeat(dow_id_all.ID.unique(),CLUSTER_7,CLUSTER_5
df,"pandas.concat([df,dow],axis=1)",CLUSTER_7,CLUSTER_5
X_train_scaled,"pandas.concat([X_train_dummy,X_train_cont_scaled],axis=1)",CLUSTER_7,CLUSTER_5
X_test_scaled,"pandas.concat([X_test_dummy,X_test_cont_scaled],axis=1)",CLUSTER_7,CLUSTER_5
dow,pandas.get_dummies(df['Dayoftheweek']),CLUSTER_7,CLUSTER_5
df_merge,"pandas.merge(df_base,dow_id_all,how='left',on=['ID','Day_of_the_week'])",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv('../../data/01_raw/Absenteeism_at_work.csv',delimiter=';')",CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
selector,"sklearn.feature_selection.RFE(linreg,n_features_to_select=15)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
lasso,sklearn.linear_model.LassoCV(eps=0.001),CLUSTER_7,CLUSTER_5
df,pandas.DataFrame({'A':'foobarfoobarfoobarfoofoo'.split(),CLUSTER_8,CLUSTER_3
b_is_two_dataframe,pandas.DataFrame(df.groupby('B'),CLUSTER_8,CLUSTER_3
b_is_two_dataframe_2,pandas.DataFrame(df.groupby('B'),CLUSTER_8,CLUSTER_3
s1,pandas.Series(np.random.randn(5),CLUSTER_8,CLUSTER_3
s2,pandas.Series(np.random.randn(5),CLUSTER_8,CLUSTER_3
data,numpy.array(data),CLUSTER_12,CLUSTER_6
predicted_class_indices,"numpy.argmax(pred,axis=1)",CLUSTER_4,CLUSTER_11
data,"pandas.read_excel('fbi_ny_2013.xls',sheet_name=0,header=1,skiprows=3,skip_footer=3,
index_col=0,thousands=None)",CLUSTER_7,CLUSTER_8
df,numpy.cbrt(df),CLUSTER_7,CLUSTER_8
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
sklearn_pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_7,CLUSTER_8
suppliers,"pandas.read_csv('./data/northwind-mongo-master/suppliers.csv',usecols=['SupplierID','CompanyName','City'])",CLUSTER_8,CLUSTER_3
products,"pandas.read_csv('./data/northwind-mongo-master/products.csv',usecols=['ProductID','ProductName','SupplierID'])",CLUSTER_8,CLUSTER_3
df,pandas.read_csv('fraud_data.csv'),CLUSTER_5,CLUSTER_1
df,pandas.read_csv('fraud_data.csv'),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_5,CLUSTER_1
dummy_majority,sklearn.dummy.DummyClassifier(strategy='most_frequent'),CLUSTER_5,CLUSTER_1
recall_score,"sklearn.metrics.recall_score(y_test,dummy_majority.predict(X_test)",CLUSTER_5,CLUSTER_1
recall_score,"sklearn.metrics.recall_score(y_test,svm_predicted)",CLUSTER_5,CLUSTER_1
precision_score,"sklearn.metrics.precision_score(y_test,svm_predicted)",CLUSTER_5,CLUSTER_1
svm,sklearn.svm.SVC(),CLUSTER_5,CLUSTER_1
svm,"sklearn.svm.SVC(C=1e9,gamma=1e-07)",CLUSTER_5,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
"precision,recall,thresholds","sklearn.metrics.precision_recall_curve(y_test,y_scores_lr)",CLUSTER_5,CLUSTER_1
"fpr_lr,tpr_lr,_","sklearn.metrics.roc_curve(y_test,y_scores_lr)",CLUSTER_5,CLUSTER_1
roc_auc_lr,"sklearn.metrics.auc(fpr_lr,tpr_lr)",CLUSTER_5,CLUSTER_1
grid_lr_rec,"sklearn.model_selection.GridSearchCV(lr,param_grid=grid_values,scoring='recall')",CLUSTER_5,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,5)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_10
data,json.load(open(fname),CLUSTER_3,CLUSTER_6
result,json.load(open(fname),CLUSTER_3,CLUSTER_6
data,"json.load(open('./bounds/{}/pac-bayes-{}-{}.json'.format(model,seed,algorithm)",CLUSTER_3,CLUSTER_6
terms_f,"json.load(open('./bounds/{}/pac-bayes-{}-{}-det.json'.format(model,seed,algorithm)",CLUSTER_3,CLUSTER_6
data,"json.load(open('./bounds/{}/pac-bayes-{}.json'.format(model,seed)",CLUSTER_3,CLUSTER_6
data_f,"json.load(open('./bounds/{}/pac-bayes-{}-det.json'.format(model,seed)",CLUSTER_3,CLUSTER_6
lowest_val_loss,numpy.finfo(np.float(0.),CLUSTER_3,CLUSTER_6
best_bound,numpy.finfo(np.float(0.),CLUSTER_3,CLUSTER_6
df,"pandas.DataFrame(open_file,index=[file])",CLUSTER_11,CLUSTER_11
complete_birds_df,pandas.concat(df_list),CLUSTER_11,CLUSTER_11
complete_birds_df.index,pandas.to_datetime(complete_birds_df.index),CLUSTER_11,CLUSTER_11
complete_birds_df.index,pandas.to_datetime(complete_birds_df.index),CLUSTER_11,CLUSTER_11
text,"re.sub('\[.*?\]','',text)",CLUSTER_11,CLUSTER_11
text,"re.sub('\\\\n','',text)",CLUSTER_11,CLUSTER_11
text,"re.sub('\\\\[\w\d]{3}',"""",text)",CLUSTER_11,CLUSTER_11
text,"re.sub('\sand\s|,and\s','',text)",CLUSTER_11,CLUSTER_11
text,"re.sub('BrownPelican','BrownPelican',text)",CLUSTER_11,CLUSTER_11
text,"re.sub('GrayFlycatcher','GrayFlycatcher(1)",CLUSTER_11,CLUSTER_11
text,"re.sub('WesternWoodPewee','WesternWoodPewee(1)",CLUSTER_11,CLUSTER_11
text,"re.sub('Yellow-headedBlackbirdWesternMeadowlark','WesternMeadowlark',text)",CLUSTER_11,CLUSTER_11
file,"re.sub('.docx','',file)",CLUSTER_11,CLUSTER_11
l,"re.findall('\d+',temp)",CLUSTER_11,CLUSTER_11
reg,re.compile('[\.Ss\s][p\s]eciesseen'),CLUSTER_11,CLUSTER_11
match,"re.search(pattern,text)",CLUSTER_10,CLUSTER_4
X,"numpy.array([[-1,-1],[-2,-1],[-3,-2],[1,1],[2,1],[3,2]])",CLUSTER_5,CLUSTER_6
Y,"numpy.array([1,1,1,2,2,2])",CLUSTER_5,CLUSTER_6
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_6
clf_pf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_6
df,pandas.read_csv(ingredient_data_fp),CLUSTER_8,CLUSTER_4
positive_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
negative_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
total_counts,collections.Counter(),CLUSTER_12,CLUSTER_6
pos_neg_ratios,collections.Counter(),CLUSTER_12,CLUSTER_6
review_counter,collections.Counter(),CLUSTER_12,CLUSTER_6
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_6
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_6
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
start,time.time(),CLUSTER_12,CLUSTER_6
center,"numpy.array([center_x,center_y])",CLUSTER_4,CLUSTER_11
img_arr,numpy.array(img_arr),CLUSTER_4,CLUSTER_11
else:y,numpy.zeros(ft_data[name].shape[0]),CLUSTER_4,CLUSTER_11
par,"numpy.concatenate(([num+1,i],fit_gaussian(data)",CLUSTER_4,CLUSTER_11
inp_data,"pd.DataFrame(columns=numpy.concatenate((['target'],ft_data[cl_names[0]].columns.values)",CLUSTER_4,CLUSTER_11
par,"numpy.concatenate(([img_num+1,polar],fit_gaussian(data)",CLUSTER_4,CLUSTER_11
"Y,X",numpy.indices(data.shape),CLUSTER_4,CLUSTER_11
y,numpy.ones(ft_data[name].shape[0]),CLUSTER_4,CLUSTER_11
over,numpy.ceil((float(numb),CLUSTER_4,CLUSTER_11
x,numpy.stack(np.meshgrid(np.arange(data.shape[0]),CLUSTER_4,CLUSTER_11
X_tr,"numpy.vstack((X_tr,tmp_X_tr)",CLUSTER_4,CLUSTER_11
X_tt,"numpy.vstack((X_tt,tmp_X_tt)",CLUSTER_4,CLUSTER_11
y_tr,"numpy.append(y_tr,tmp_y_tr)",CLUSTER_4,CLUSTER_11
y_tt,"numpy.append(y_tt,tmp_y_tt)",CLUSTER_4,CLUSTER_11
col_slice,"numpy.append(flat_slice.columns.values,[opa+str(int(j)",CLUSTER_4,CLUSTER_11
"a,b","numpy.linalg.eigvalsh([[s[0],s[2]],[s[2],s[1]]])",CLUSTER_4,CLUSTER_11
"a,b","numpy.linalg.eigvalsh([[s[0],s[2]],[s[2],s[1]]])",CLUSTER_4,CLUSTER_11
"p,success","scipy.optimize.leastsq(errorfunction,para)",CLUSTER_4,CLUSTER_11
img_names,os.listdir(dir_name),CLUSTER_4,CLUSTER_11
params,"pandas.DataFrame(columns=['img_num','polar','height','amplitude','center_x','center_y','sig_x','sig_y','sig_xy'])",CLUSTER_4,CLUSTER_11
ellip_par,"pandas.DataFrame(data={'minor_ax':a_ar,'eps':eps_ar,'area':area_ar},index=idx)",CLUSTER_4,CLUSTER_11
inp_data,"pandas.DataFrame(columns=np.concatenate((['target'],ft_data[cl_names[0]].columns.values)",CLUSTER_4,CLUSTER_11
targ,pandas.DataFrame(data={'target':np.ones(len(idx),CLUSTER_4,CLUSTER_11
else:targ,pandas.DataFrame(data={'target':np.zeros(len(idx),CLUSTER_4,CLUSTER_11
params,"pandas.DataFrame(columns=['img_num','polar','height','amplitude','center_x','center_y','sig_x','sig_y','sig_xy'])",CLUSTER_4,CLUSTER_11
params,"pandas.DataFrame(columns=['img_num','polar','height','amplitude','center_x','center_y','sig_x','sig_y','sig_xy'])",CLUSTER_4,CLUSTER_11
y_tr,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
y_tt,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
X_tr,pandas.DataFrame(columns=ft_data[cl_names[0]].columns),CLUSTER_4,CLUSTER_11
X_tt,pandas.DataFrame(columns=ft_data[cl_names[0]].columns),CLUSTER_4,CLUSTER_11
pol_par,pandas.DataFrame(),CLUSTER_4,CLUSTER_11
par_slice,"pandas.DataFrame(par_slice.drop(['img_num','polar'],axis=1)",CLUSTER_4,CLUSTER_11
flat_slice,pandas.DataFrame(index=[i]),CLUSTER_4,CLUSTER_11
flat_slice,"pandas.DataFrame(np.append(flat_slice.values,par_slice.loc[j].values)",CLUSTER_4,CLUSTER_11
ellip_par,pandas.DataFrame(data={'min_ax'+str(i),CLUSTER_4,CLUSTER_11
params,"pandas.concat([img_num,params,cov_xy],axis=1,join='inner')",CLUSTER_4,CLUSTER_11
feat,"pandas.concat([feat,ellip_par],axis=1)",CLUSTER_4,CLUSTER_11
app_data,"pandas.concat([targ,ft_data[name]],axis=1)",CLUSTER_4,CLUSTER_11
pol_par,"pandas.concat([pol_par,flat_slice])",CLUSTER_4,CLUSTER_11
feat,"pandas.concat([feat,ellip_par],axis=1)",CLUSTER_4,CLUSTER_11
par,"pandas.read_csv(os.path.join(dir_name,img_name)",CLUSTER_4,CLUSTER_11
else:dat_params[name],pandas.read_csv('C:/Artem/NEWS/params/'+str(numb),CLUSTER_4,CLUSTER_11
imgs,"pandas.read_csv('D:/NEWSdm/crops/dust_fog/0_cluster_1.csv',header=None)",CLUSTER_4,CLUSTER_11
"f,axes","matplotlib.pyplot.subplots(2,4,figsize=(24,12)",CLUSTER_4,CLUSTER_11
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,8)",CLUSTER_4,CLUSTER_11
"X_tr,X_tt,y_tr,y_tt","sklearn.model_selection.train_test_split(X,y,test_size=test_size)",CLUSTER_4,CLUSTER_11
"tmp_X_tr,tmp_X_tt,tmp_y_tr,tmp_y_tt","sklearn.model_selection.train_test_split(X,y,test_size=test_size,shuffle=False)",CLUSTER_4,CLUSTER_11
train['CategoricalAge'],"pandas.cut(train['Age'],5)",CLUSTER_7,CLUSTER_8
train['CategoricalFare'],"pandas.qcut(train['Fare'],4)",CLUSTER_7,CLUSTER_8
train,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
test,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_8
oof_train,"numpy.zeros((ntrain,)",CLUSTER_7,CLUSTER_8
oof_test,"numpy.zeros((ntest,)",CLUSTER_7,CLUSTER_8
oof_test_skf,"numpy.empty((NFOLDS,ntest)",CLUSTER_7,CLUSTER_8
title_search,re.search('([A-Za-z]+),CLUSTER_7,CLUSTER_8
g,"seaborn.pairplot(train[[u'Survived',u'Pclass',u'Sex',u'Age',u'Parch',u'Fare',u'Embarked',
u'Family_Size',u'Title']],hue='Survived',palette='seismic',size=1.2,diag_kind='kde',diag_kws=dict(shade=True)",CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_splits=NFOLDS,random_state=SEED)",CLUSTER_7,CLUSTER_8
band_info,"pandas.DataFrame([
(1,""Aerosol"",""0.43-0.45"",0.440,""30"",""Coastalaerosol"")",CLUSTER_8,CLUSTER_3
fig,matplotlib.pyplot.figure(figsize=single_fig_size),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(figsize=single_fig_size),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(figsize=single_fig_size),CLUSTER_1,CLUSTER_10
target,"numpy.mean(out_normed[start:end],axis=0)",CLUSTER_1,CLUSTER_10
line_train,"matplotlib.pyplot.plot(err_train,'b',err_val,'r')",CLUSTER_5,CLUSTER_10
xlab,matplotlib.pyplot.xlabel('Iterations'),CLUSTER_5,CLUSTER_10
ylab,matplotlib.pyplot.ylabel('Error'),CLUSTER_5,CLUSTER_10
X,sklearn.preprocessing.normalize(X),CLUSTER_5,CLUSTER_10
data,"numpy.loadtxt(f,delimiter=';')",CLUSTER_5,CLUSTER_10
data,"numpy.loadtxt(f,delimiter=';')",CLUSTER_5,CLUSTER_10
R,"numpy.array([[Z[i],-Z[i]],[1,1]])",CLUSTER_1,CLUSTER_10
Lp,"numpy.array([[0,0],[0,c[i]]])",CLUSTER_1,CLUSTER_10
R,"numpy.array([[Z[i],-Z[i]],[1,1]])",CLUSTER_1,CLUSTER_10
Lm,"numpy.array([[-c[i],0],[0,0]])",CLUSTER_1,CLUSTER_10
xg,numpy.zeros((N+1),CLUSTER_1,CLUSTER_10
M,"numpy.zeros((N+1,N+1)",CLUSTER_1,CLUSTER_10
K,"numpy.zeros((N+1,N+1)",CLUSTER_1,CLUSTER_10
Ap,"numpy.zeros((ne,2,2)",CLUSTER_1,CLUSTER_10
Am,"numpy.zeros((ne,2,2)",CLUSTER_1,CLUSTER_10
Z,numpy.zeros(ne),CLUSTER_1,CLUSTER_10
rho,numpy.zeros(ne),CLUSTER_1,CLUSTER_10
mu,numpy.zeros(ne),CLUSTER_1,CLUSTER_10
Q,"numpy.zeros((ne,N+1,2)",CLUSTER_1,CLUSTER_10
Qnew,"numpy.zeros((ne,N+1,2)",CLUSTER_1,CLUSTER_10
k1,"numpy.zeros((ne,N+1,2)",CLUSTER_1,CLUSTER_10
k2,"numpy.zeros((ne,N+1,2)",CLUSTER_1,CLUSTER_10
Qs,numpy.zeros(xg.size),CLUSTER_1,CLUSTER_10
Qv,numpy.zeros(xg.size),CLUSTER_1,CLUSTER_10
Minv,numpy.identity(N+1),CLUSTER_1,CLUSTER_10
x,"numpy.reshape(xg,(N+1,ne)",CLUSTER_1,CLUSTER_10
"Q[:,:,0]",numpy.exp(-1/sig**2*((x-x0),CLUSTER_1,CLUSTER_10
c,numpy.sqrt(mu/rho),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(10,6)",CLUSTER_1,CLUSTER_10
best_iter,numpy.argmin(cv_data['test-Logloss-mean']),CLUSTER_8,CLUSTER_3
"fifa_data[""overall_cat""]","pandas.cut(fifa_data[""Overall""],bins=[0.,50,60,70,80,90,100],
labels=[1,2,3,4,5,6])",CLUSTER_5,CLUSTER_1
fifa_data,"pandas.read_csv(""data.csv"")",CLUSTER_5,CLUSTER_1
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)",CLUSTER_5,CLUSTER_1
num_pipeline,"sklearn.pipeline.Pipeline([
('imputer',SimpleImputer(strategy=""median"")",CLUSTER_5,CLUSTER_1
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_5,CLUSTER_1
tree_rmse,numpy.sqrt(tree_mse),CLUSTER_5,CLUSTER_1
tree_rmse_scores,numpy.sqrt(-scores),CLUSTER_5,CLUSTER_1
lin_rmse_scores,numpy.sqrt(-lin_scores),CLUSTER_5,CLUSTER_1
forest_rmse_scores,numpy.sqrt(-forest_scores),CLUSTER_5,CLUSTER_1
final_rmse,numpy.sqrt(final_mse),CLUSTER_5,CLUSTER_1
lin_mse,"sklearn.metrics.mean_squared_error(fifa_labels,fifa_predictions)",CLUSTER_5,CLUSTER_1
tree_mse,"sklearn.metrics.mean_squared_error(fifa_labels,fifa_predictions)",CLUSTER_5,CLUSTER_1
final_mse,"sklearn.metrics.mean_squared_error(y_test,final_predictions)",CLUSTER_5,CLUSTER_1
tree_reg,sklearn.tree.DecisionTreeRegressor(),CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(tree_reg,fifa_data_final,fifa_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_5,CLUSTER_1
lin_scores,"sklearn.model_selection.cross_val_score(lin_reg,fifa_data_final,fifa_labels,scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_5,CLUSTER_1
forest_scores,"sklearn.model_selection.cross_val_score(forest_reg,fifa_data_final,fifa_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_5,CLUSTER_1
forest_reg,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,random_state=42)",CLUSTER_5,CLUSTER_1
forest_reg,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_5,CLUSTER_1
grid_search,"sklearn.model_selection.GridSearchCV(forest_reg,param_grid,cv=5,
scoring='neg_mean_squared_error',
return_train_score=True)",CLUSTER_5,CLUSTER_1
scale,scipy.stats.sem(squared_errors),CLUSTER_5,CLUSTER_1
data_out,"pandas.DataFrame(list(zip(list_lr,list_epochs,list_batch,
list_neurons_dense,list_activation,list_optimizer,
list_loss,list_acc,list_prec,list_rec,
list_f1,list_time)",CLUSTER_8,CLUSTER_3
data_out,"pandas.DataFrame(list(zip(list_lr,list_epochs,list_batch,
list_neurons_dense,list_activation,list_optimizer,
list_loss,list_acc,list_prec,list_rec,
list_f1,list_time)",CLUSTER_8,CLUSTER_3
activation,random.choice(activation_list),CLUSTER_8,CLUSTER_3
optimizer,random.choice(optimizer_list),CLUSTER_8,CLUSTER_3
epochs,"random.randrange(1,128)",CLUSTER_8,CLUSTER_3
batch,"random.randrange(1,512)",CLUSTER_8,CLUSTER_3
neurons_dense,"random.randrange(1,1200)",CLUSTER_8,CLUSTER_3
dx,"pandas.DataFrame({'chisquare':chi2_stats,'pvalues':chi2_pvalues})",CLUSTER_1,CLUSTER_9
dataset,"pandas.read_csv(url,names=names)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.20)",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_5,CLUSTER_5
fit,"numpy.polyfit(x,y,deg=1)",CLUSTER_1,CLUSTER_3
new_df,"pandas.DataFrame({'1980s':df_80s,'1990s':df_90s,'2000s':df_00s})",CLUSTER_1,CLUSTER_3
df_tot,pandas.DataFrame(df_can[years].sum(axis=0),CLUSTER_1,CLUSTER_3
df_total,pandas.DataFrame(df_countries.sum(axis=1),CLUSTER_1,CLUSTER_3
df_can,"pandas.read_excel('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx',
sheet_name='CanadabyCitizenship',
skiprows=range(20)",CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
df,"pandas.read_excel('../data/OnlineRetail.xlsx',sheet_name='OnlineRetail')",CLUSTER_5,CLUSTER_5
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_5,CLUSTER_5
kmeans,sklearn.cluster.KMeans(n_clusters=n_cluster),CLUSTER_5,CLUSTER_5
kmeans,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_5,CLUSTER_5
silhouette_avg,"sklearn.metrics.silhouette_score(
normalized_df[['TotalSales','OrderCount','AvgOrderValue']],
kmeans.labels_
)",CLUSTER_5,CLUSTER_5
elexon,"pandas.read_csv('~/git/forecast/projects/elexon/data/clean.csv',index_col=0,parse_dates=True)",CLUSTER_8,CLUSTER_4
alldata_x,numpy.array(alldata_x),CLUSTER_4,CLUSTER_0
alldata_y,numpy.array(alldata_y),CLUSTER_4,CLUSTER_0
combined,"numpy.array([gen_imgs[0],gen_imgs[1],gen_imgs[2],gen_imgs[3],gen_imgs[4],gen_imgs[5],gen_imgs[6],gen_imgs[7],gen_imgs[8],gen_imgs[9]])",CLUSTER_4,CLUSTER_0
combined,"numpy.array([y_train[0],y_train[1],y_train[2],y_train[3],y_train[4],y_train[5],y_train[6],y_train[7],y_train[8],y_train[9]])",CLUSTER_4,CLUSTER_0
combined,"numpy.array([X_train[0],X_train[1],X_train[2],X_train[3],X_train[4],X_train[5],X_train[6],X_train[7],X_train[8],X_train[9]])",CLUSTER_4,CLUSTER_0
combined,"numpy.hstack(combined.reshape(10,384,384,3)",CLUSTER_4,CLUSTER_0
combined,"numpy.hstack(combined.reshape(10,384,384,3)",CLUSTER_4,CLUSTER_0
combined,"numpy.hstack(combined.reshape(10,384,384,3)",CLUSTER_4,CLUSTER_0
tile_sizes,"numpy.loadtxt(path+'tile_sizes.txt',dtype='int')",CLUSTER_4,CLUSTER_0
frame,numpy.load(frame),CLUSTER_4,CLUSTER_0
tile_index,random.choice(images_sampled[i]),CLUSTER_4,CLUSTER_0
index_list,random.sample(images_sampled.keys(),CLUSTER_4,CLUSTER_0
mse,numpy.mean((img1-img2),CLUSTER_4,CLUSTER_0
current_struct_time,time.gmtime(current_time),CLUSTER_10,CLUSTER_12
current_time,time.time(),CLUSTER_10,CLUSTER_12
nye_2017,"datetime.datetime(year=2017,month=12,day=31,hour=12,minute=59,second=59)",CLUSTER_10,CLUSTER_12
sabbatical,"datetime.datetime(year=2017,month=9,day=1)",CLUSTER_10,CLUSTER_12
march3,"datetime.datetime(year=2010,month=3,day=3)",CLUSTER_10,CLUSTER_12
mystery_date,"datetime.datetime(2015,12,31,0,0)",CLUSTER_10,CLUSTER_12
datetime_object,datetime.datetime.fromtimestamp(1433213314.0),CLUSTER_10,CLUSTER_12
post[2],datetime.datetime.fromtimestamp(float(post[2]),CLUSTER_10,CLUSTER_12
now,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
today,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
today,datetime.datetime.now(),CLUSTER_10,CLUSTER_12
dezember12,"datetime.datetime.strptime(""Dec12,2017"",""%b%d,%Y"")",CLUSTER_10,CLUSTER_12
march1,"datetime.datetime.strptime(""Mar1,2017"",""%b%d,%Y"")",CLUSTER_10,CLUSTER_12
mystery_date,"datetime.datetime.strptime(mystery_date_formatted_string,""%I:%M%pon%A%B%d,%Y"")",CLUSTER_10,CLUSTER_12
diff,"datetime.timedelta(weeks=6,days=0,minutes=20)",CLUSTER_10,CLUSTER_12
train,"pandas.read_csv('data/features-train.csv',index_col='Id')",CLUSTER_0,CLUSTER_3
test,"pandas.read_csv('data/features-test.csv',index_col='Id')",CLUSTER_0,CLUSTER_3
scores,numpy.zeros(num_agents),CLUSTER_3,CLUSTER_6
actions,"numpy.clip(actions,-1,1)",CLUSTER_3,CLUSTER_6
currentTime,"datetime.datetime.strptime(tweetObj['created_at'],timeFormat)",CLUSTER_4,CLUSTER_11
lambdatweet:crisisTime<,"datetime.datetime.strptime(tweet[""retweeted_status""][""created_at""],timeFormat)",CLUSTER_4,CLUSTER_11
crisisTime,datetime.datetime.utcfromtimestamp(crisisMoment),CLUSTER_4,CLUSTER_11
timeIntervalStep,"datetime.timedelta(0,60)",CLUSTER_4,CLUSTER_11
tweetObj,json.loads(decoded_line),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"features_set_2,labels_2",numpy.array(features_set_2),CLUSTER_4,CLUSTER_0
"features_set_2,labels_2",numpy.array(features_set_2),CLUSTER_4,CLUSTER_0
max_labels_pred_test,"numpy.argmax(labels_pred_test,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_test,"numpy.argmax(labels,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_pred_test,"numpy.argmax(labels_pred_test,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_test,"numpy.argmax(labels_2,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_pred_test,"numpy.argmax(labels_pred_test,axis=1)",CLUSTER_4,CLUSTER_0
max_labels_test,"numpy.argmax(labels_2,axis=1)",CLUSTER_4,CLUSTER_0
features_set,"numpy.reshape(features_set,(16692,200,3)",CLUSTER_4,CLUSTER_0
features_set_2,"numpy.reshape(features_set_2,(1317,200,3)",CLUSTER_4,CLUSTER_0
features_set_2,"numpy.reshape(features_set_2,(1317,200,3)",CLUSTER_4,CLUSTER_0
features_set,"numpy.reshape(features_set,(4173,600)",CLUSTER_4,CLUSTER_0
features_set_2,"numpy.reshape(features_set_2,(1317,600)",CLUSTER_4,CLUSTER_0
data,pandas.read_csv('WISDM_ar_latest/WISDM_ar_v1.1/WISDM_ar_v1.1.csv'),CLUSTER_4,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(validations,predictions)",CLUSTER_4,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(validations,predictions)",CLUSTER_4,CLUSTER_0
label_encoded,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_0
max_labels_perwindow,"scipy.stats.mode(y_train[""Encodedactivity""][i:i+200])",CLUSTER_4,CLUSTER_0
max_labels_perwindow,"scipy.stats.mode(y_test[""Encodedactivity""][i:i+200])",CLUSTER_4,CLUSTER_0
max_labels_perwindow,"scipy.stats.mode(y_test[""ActivityEncoded""][i:i+200])",CLUSTER_4,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_0
q,collections.deque(reachable_ocean),CLUSTER_10,CLUSTER_4
train['log_revenue'],numpy.log1p(train['revenue']),CLUSTER_0,CLUSTER_8
train['log_budget'],numpy.log1p(train['budget']),CLUSTER_0,CLUSTER_8
test['log_budget'],numpy.log1p(test['budget']),CLUSTER_0,CLUSTER_8
train,pandas.read_csv('data/train.csv'),CLUSTER_0,CLUSTER_8
test,pandas.read_csv('data/test.csv'),CLUSTER_0,CLUSTER_8
train['release_date'],pandas.to_datetime(train['release_date']),CLUSTER_0,CLUSTER_8
test['release_date'],pandas.to_datetime(test['release_date']),CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,6)",CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,6)",CLUSTER_0,CLUSTER_8
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_0,CLUSTER_8
mapping_recon2_genes,"pandas.read_csv('../data/hgnc_to_entrez.txt',sep='\t')",CLUSTER_8,CLUSTER_4
IEMinfo,"pandas.read_excel('../data/IEM_compendium.xlsx',sheet_name='mappedIEMssuppletable',header=0)",CLUSTER_8,CLUSTER_4
some_nans_bools,pandas.isnull(informative_df),CLUSTER_8,CLUSTER_3
df_nans,pandas.isnull(df[nan_columns]),CLUSTER_8,CLUSTER_3
df1,"pandas.read_csv(""http://mlr.cs.umass.edu/ml/machine-learning-databases/autos/imports-85.data"",header=None)",CLUSTER_8,CLUSTER_3
df1['price'],pandas.to_numeric(df1['price']),CLUSTER_8,CLUSTER_3
df1['price'],pandas.to_numeric(df1['price']),CLUSTER_8,CLUSTER_3
column_idx_matches,"numpy.array([column_matches(df,column,match_value)",CLUSTER_8,CLUSTER_3
rows,"numpy.concatenate(matches[:,1])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('../../data/mlbootcamp5_train.csv',sep=';',index_col='id')",CLUSTER_12,CLUSTER_3
x_ticks,numpy.arange(25),CLUSTER_1,CLUSTER_10
x,"numpy.arange(0,len(nu_ch)",CLUSTER_1,CLUSTER_10
indexes_los,numpy.arange(npix),CLUSTER_1,CLUSTER_10
nu_ch,numpy.array(file['frequencies']),CLUSTER_1,CLUSTER_10
obs_maps+,numpy.array(file[c]),CLUSTER_1,CLUSTER_10
obs_maps,"numpy.array([[obs_maps[i]-np.mean(obs_maps[i],axis=0)",CLUSTER_1,CLUSTER_10
FF_col,numpy.array([nu_ch**(-2.13),CLUSTER_1,CLUSTER_10
sync_A,numpy.array([nu_ch**(-3.2),CLUSTER_1,CLUSTER_10
sync_B,numpy.array([nu_ch**(-2.6),CLUSTER_1,CLUSTER_10
map_input,numpy.array(file['cosmological_signal']),CLUSTER_1,CLUSTER_10
map_input,numpy.array(file['cosmological_signal']),CLUSTER_1,CLUSTER_10
map_input,numpy.array(file['cosmological_signal']),CLUSTER_1,CLUSTER_10
obs_maps,numpy.zeros((len(nu_ch),CLUSTER_1,CLUSTER_10
npix,numpy.shape(file['cosmological_signal']),CLUSTER_1,CLUSTER_10
C_ij,numpy.cov(X),CLUSTER_1,CLUSTER_10
"eigenval,eigenvec",numpy.linalg.eigh(C_ij),CLUSTER_1,CLUSTER_10
piA,numpy.linalg.inv(Ae.T@Ae),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,6)",CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_10
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_10
random_indices,"numpy.arange(0,Space_Position.shape[0])",CLUSTER_6,CLUSTER_10
Space_Position,numpy.array(position_vis),CLUSTER_6,CLUSTER_10
vis,numpy.zeros(np.shape(fft_now),CLUSTER_6,CLUSTER_10
"x_len,y_len",numpy.shape(images),CLUSTER_6,CLUSTER_10
sum_flux_obs,numpy.sum(ifft_obs.real.T[int(x_len/2),CLUSTER_6,CLUSTER_10
sum_flux_model,numpy.sum(images.real.T[int(x_len/2),CLUSTER_6,CLUSTER_10
x,"numpy.linspace(xmin,xmax,x_len)",CLUSTER_6,CLUSTER_10
y,"numpy.linspace(ymin,ymax,y_len)",CLUSTER_6,CLUSTER_10
"xx,yy","numpy.meshgrid(x,y,indexing='ij')",CLUSTER_6,CLUSTER_10
fft_now,numpy.fft.fft2(images),CLUSTER_6,CLUSTER_10
fft_now,numpy.fft.fft2(images),CLUSTER_6,CLUSTER_10
fft_now,numpy.fft.fftshift(fft_now),CLUSTER_6,CLUSTER_10
fft_now,numpy.fft.fftshift(fft_now),CLUSTER_6,CLUSTER_10
model_vis,numpy.fft.fftshift(np.fft.fft2(model),CLUSTER_6,CLUSTER_10
model_vis,numpy.fft.fftshift(np.fft.fft2(model),CLUSTER_6,CLUSTER_10
model_vis,numpy.fft.fftshift(np.fft.fft2(model),CLUSTER_6,CLUSTER_10
model_vis,numpy.fft.fftshift(np.fft.fft2(model),CLUSTER_6,CLUSTER_10
ifft,numpy.fft.ifft2(shift_ifft2),CLUSTER_6,CLUSTER_10
ifft_obs,numpy.fft.ifft2(vis_obs_shift),CLUSTER_6,CLUSTER_10
ifft_F,numpy.fft.ifft2(d_vis),CLUSTER_6,CLUSTER_10
ifft_F,numpy.fft.ifft2(d_vis),CLUSTER_6,CLUSTER_10
shift_ifft2,numpy.fft.ifftshift(fft_now),CLUSTER_6,CLUSTER_10
vis_obs_shift,numpy.fft.ifftshift(vis_obs),CLUSTER_6,CLUSTER_10
vis_F,numpy.fft.ifftshift(d_vis),CLUSTER_6,CLUSTER_10
vis_F,numpy.fft.ifftshift(d_vis),CLUSTER_6,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(1,2,figsize=(10,3)",CLUSTER_6,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(1,3,figsize=(10,3)",CLUSTER_6,CLUSTER_10
transform_df,"pandas.concat([
transform_df,
pd.get_dummies(transform_df.select_dtypes(include=['category'])",CLUSTER_5,CLUSTER_5
df,"pandas.concat([df,pd.get_dummies(df.select_dtypes(include=['category'])",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""AmesHousing.tsv"",delimiter=""\t"")",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""AmesHousing.tsv"",delimiter=""\t"")",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""AmesHousing.tsv"",delimiter=""\t"")",CLUSTER_5,CLUSTER_5
avg_rmse,"numpy.mean([rmse_one,rmse_two])",CLUSTER_5,CLUSTER_5
avg_rmse,numpy.mean(rmse_values),CLUSTER_5,CLUSTER_5
rmse,numpy.sqrt(mse),CLUSTER_5,CLUSTER_5
rmse,numpy.sqrt(mse),CLUSTER_5,CLUSTER_5
rmse,numpy.sqrt(mse),CLUSTER_5,CLUSTER_5
rmse_one,numpy.sqrt(mse_one),CLUSTER_5,CLUSTER_5
rmse_two,numpy.sqrt(mse_two),CLUSTER_5,CLUSTER_5
rmse,numpy.sqrt(mse),CLUSTER_5,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=k,shuffle=True)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions)",CLUSTER_5,CLUSTER_5
mse_one,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions_one)",CLUSTER_5,CLUSTER_5
mse_two,"sklearn.metrics.mean_squared_error(train[""SalePrice""],predictions_two)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(test[""SalePrice""],predictions)",CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
alphas,"numpy.logspace(-1,5,20)",CLUSTER_7,CLUSTER_8
"eig_val,eig_vec",numpy.linalg.eig(RR),CLUSTER_7,CLUSTER_8
"eig_val,eig_vec",numpy.linalg.eig(RR),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
enroll_df,pandas.DataFrame(stats.items(),CLUSTER_7,CLUSTER_8
dfEig,"pandas.DataFrame(eig_vec,index=x.columns,columns=pc_label)",CLUSTER_7,CLUSTER_8
dfEig,"pandas.DataFrame(eig_vec,index=x.columns,columns=pc_label)",CLUSTER_7,CLUSTER_8
ridge_models,"pandas.DataFrame(
[(alpha,
""RidgeRegressionwithalpha=%f""%alpha,
compute_error(Ridge(alpha=alpha)",CLUSTER_7,CLUSTER_8
pred_df,"pandas.DataFrame(list(zip(X_test.index,pred)",CLUSTER_7,CLUSTER_8
pred_df,"pandas.DataFrame(list(zip(X_test.index,pred)",CLUSTER_7,CLUSTER_8
test,"pandas.DataFrame({'ClaimMonth':['July'],'ClaimYear':[2019],'Enrolled':[4981]})",CLUSTER_7,CLUSTER_8
df,"pandas.concat([df,pd.get_dummies(dataframe[feat],prefix=feat)",CLUSTER_7,CLUSTER_8
df,"pandas.concat([dataframe,df],axis=1,sort=False)",CLUSTER_7,CLUSTER_8
claim_df,"pandas.read_csv('./claimdata.csv',parse_dates=['ClaimDate'])",CLUSTER_7,CLUSTER_8
pet_df,"pandas.read_csv('./petdata.csv',parse_dates=['EnrollDate','CancelDate'])",CLUSTER_7,CLUSTER_8
claim_df,"pandas.read_csv('./claimdata.csv',parse_dates=['ClaimDate'])",CLUSTER_7,CLUSTER_8
july,"datetime.datetime.strptime('2019-07-31','%Y-%m-%d')",CLUSTER_7,CLUSTER_8
july_ids['ClaimDate'],"datetime.datetime.strptime('2019-07-31','%Y-%m-%d')",CLUSTER_7,CLUSTER_8
gs_dt,"sklearn.model_selection.GridSearchCV(pipe,
param_grid,
scoring='neg_mean_absolute_error',
return_train_score=True,
cv=cv,n_jobs=5,verbose=3,error_score='raise')",CLUSTER_7,CLUSTER_8
gs_dt,"sklearn.model_selection.GridSearchCV(pipe,
param_grid,
scoring='neg_mean_absolute_error',
return_train_score=True,
cv=cv,n_jobs=5,verbose=3,error_score='raise')",CLUSTER_7,CLUSTER_8
gs_dt,"sklearn.model_selection.GridSearchCV(pipe,
param_grid,
scoring='neg_mean_absolute_error',
return_train_score=True,
cv=cv,n_jobs=2,verbose=3,error_score='raise')",CLUSTER_7,CLUSTER_8
gs_dt2,"sklearn.model_selection.GridSearchCV(pipe,
param_grid,
scoring='explained_variance',
return_train_score=True,
cv=cv,n_jobs=5,verbose=3,error_score='raise')",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.2,random_state=42)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.2,random_state=42)",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.ShuffleSplit(n_splits=100,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.ShuffleSplit(n_splits=100,test_size=.25,random_state=42)",CLUSTER_7,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
('features',FeatureUnion([
('numeric_feats',ColumnSelector(cols=numerical)",CLUSTER_7,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
('features',FeatureUnion([
('numeric_feats',ColumnSelector(cols=numerical)",CLUSTER_7,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
('features',FeatureUnion([
('numeric_feats',ColumnSelector(cols=numerical)",CLUSTER_7,CLUSTER_8
pipe,"sklearn.pipeline.Pipeline([
('features',FeatureUnion([
('numeric_feats',ColumnSelector(cols=numerical)",CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=i,
init='k-means++',
n_init=10,
max_iter=300,
random_state=0)",CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=i,
init='k-means++',
n_init=10,
max_iter=300,
random_state=0)",CLUSTER_7,CLUSTER_8
self.bk_active_links,"numpy.zeros(self.size,dtype=np.int)",CLUSTER_1,CLUSTER_10
self.state,"numpy.zeros(self.size,dtype=np.int8)",CLUSTER_1,CLUSTER_10
"soi,",numpy.where(self.state==1),CLUSTER_1,CLUSTER_10
"susceptible,",numpy.where(self.state==0),CLUSTER_1,CLUSTER_10
beta,"numpy.linspace(0,0.3,20)",CLUSTER_1,CLUSTER_10
alsX,numpy.array(docX),CLUSTER_11,CLUSTER_0
alsY,numpy.array(docY),CLUSTER_11,CLUSTER_0
high_win,numpy.array([]),CLUSTER_11,CLUSTER_0
high_lost,numpy.array([]),CLUSTER_11,CLUSTER_0
low_win,numpy.array([]),CLUSTER_11,CLUSTER_0
low_lost,numpy.array([]),CLUSTER_11,CLUSTER_0
high_win,"numpy.append(high_win,numpy.array(temp_check[i])",CLUSTER_11,CLUSTER_0
high_lost,"numpy.append(high_lost,numpy.array(temp_check[i])",CLUSTER_11,CLUSTER_0
low_win,"numpy.append(low_win,numpy.array(temp_check[i])",CLUSTER_11,CLUSTER_0
low_lost,"numpy.append(low_lost,numpy.array(temp_check[i])",CLUSTER_11,CLUSTER_0
result,pandas.DataFrame(high_predicted),CLUSTER_11,CLUSTER_0
data,pandas.read_csv(file_name),CLUSTER_11,CLUSTER_0
data['date'],"pandas.to_datetime(data['date'],format='%Y-%m-%d')",CLUSTER_11,CLUSTER_0
starttime,time.time(),CLUSTER_11,CLUSTER_0
reviews,"pandas.read_csv(""../input/wine-reviews/winemag-data-130k-v2.csv"",index_col=0)",CLUSTER_8,CLUSTER_4
df,pandas.DataFrame(menuList),CLUSTER_1,CLUSTER_3
randnum,random.random(),CLUSTER_6,CLUSTER_6
randnum,random.random(),CLUSTER_6,CLUSTER_6
epoch_start_time,time.time(),CLUSTER_6,CLUSTER_6
epoch_start_time,time.time(),CLUSTER_6,CLUSTER_6
start_time,time.time(),CLUSTER_6,CLUSTER_6
total_time,time.time(),CLUSTER_6,CLUSTER_6
self.rgbColors,"numpy.array([[0,255,0],[255,255,255],[0,0,0],[255,0,0],[0,0,255],[255,255,0],[0,255,255],[255,0,255],[51,51,255],[102,102,0],[255,0,127],[160,32,240],[238,130,238]])",CLUSTER_1,CLUSTER_9
tmpImg,numpy.zeros(img.shape),CLUSTER_1,CLUSTER_9
feats,"numpy.zeros((filteredImg[0].shape[0],filteredImg[0].shape[1],dim)",CLUSTER_1,CLUSTER_9
output,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_1,CLUSTER_9
output,"numpy.zeros((img.shape[0],img.shape[1])",CLUSTER_1,CLUSTER_9
ref_feats[i],"numpy.mean(ref_feats[i],axis=0)",CLUSTER_1,CLUSTER_9
ref_feats[i],"numpy.mean(ref_feats[i],axis=0)",CLUSTER_1,CLUSTER_9
ref_feats[i],"numpy.mean(ref_feats[i],axis=0)",CLUSTER_1,CLUSTER_9
ref_feats[i],"numpy.mean(ref_feats[i],axis=0)",CLUSTER_1,CLUSTER_9
kernel,"numpy.real(gabor_kernel(frequency,theta=theta,sigma_x=sigma,sigma_y=sigma)",CLUSTER_1,CLUSTER_9
self.centroids[item],"numpy.average(self.clusters[item],axis=0)",CLUSTER_1,CLUSTER_9
self.centroids[item],"numpy.average(self.clusters[item],axis=0)",CLUSTER_1,CLUSTER_9
df_assetCodes,"pandas.DataFrame({'level_0':assetCodes_index,'assetCode':assetCodes_expanded})",CLUSTER_11,CLUSTER_5
news_df_expanded,"pandas.merge(df_assetCodes,news_df[news_cols],left_on='level_0',right_index=True,suffixes=(['','_old'])",CLUSTER_11,CLUSTER_5
market_df['day_change'],"numpy.divide(np.subtract(market_df['close'],market_df['open'])",CLUSTER_11,CLUSTER_5
predictions,numpy.divide(predictions-np.min(predictions),CLUSTER_11,CLUSTER_5
market_df['dollar_volume'],"numpy.multiply(market_df['volume'],np.divide(np.add(market_df['open'],market_df['close'])",CLUSTER_11,CLUSTER_5
"market_df[""change_""+time+""_""+adj]","numpy.subtract(market_df['returns'+time+'Prev'+adj+'1'],market_df['returns'+time+'Prev'+adj+'10'])",CLUSTER_11,CLUSTER_5
error,"numpy.subtract(y_pred,y_true)",CLUSTER_11,CLUSTER_5
"plt.hist(y_true,bins","numpy.linspace(-0.5,0.5,150)",CLUSTER_11,CLUSTER_5
"plt.hist(y_pred,bins","numpy.linspace(-0.5,0.5,150)",CLUSTER_11,CLUSTER_5
"plt.hist(error,bins","numpy.linspace(-0.25,0.25,100)",CLUSTER_11,CLUSTER_5
"train,validate,test",numpy.split(merged_data.sample(frac=1),CLUSTER_11,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_11,CLUSTER_5
accuracy,sklearn.metrics.accuracy_score(np.array(y_true),CLUSTER_11,CLUSTER_5
MSE,"sklearn.metrics.mean_squared_error(y_true,y_pred)",CLUSTER_11,CLUSTER_5
U_rv,scipy.stats.uniform(),CLUSTER_1,CLUSTER_9
U_rv_fixed,"scipy.stats.uniform(1,scale=4)",CLUSTER_1,CLUSTER_9
mmap,"numpy.memmap('mymmap',dtype='float64',mode='w+',shape=(10000,10000)",CLUSTER_8,CLUSTER_3
mmap,"numpy.memmap('mymmap',dtype='float64',shape=(10000,10000)",CLUSTER_8,CLUSTER_3
arr,numpy.arange(8),CLUSTER_8,CLUSTER_3
arr,numpy.arange(15),CLUSTER_8,CLUSTER_3
arr,numpy.arange(15),CLUSTER_8,CLUSTER_3
arr,numpy.arange(12),CLUSTER_8,CLUSTER_3
arr,numpy.arange(6),CLUSTER_8,CLUSTER_3
arr,numpy.arange(3),CLUSTER_8,CLUSTER_3
arr,numpy.arange(10),CLUSTER_8,CLUSTER_3
arr,numpy.arange(5),CLUSTER_8,CLUSTER_3
arr,numpy.arange(10),CLUSTER_8,CLUSTER_3
arr,numpy.arange(15),CLUSTER_8,CLUSTER_3
arr,numpy.arange(3),CLUSTER_8,CLUSTER_3
arr,numpy.arange(10),CLUSTER_8,CLUSTER_3
arr1,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_8,CLUSTER_3
arr2,"numpy.array([[7,8,9],[10,11,12]])",CLUSTER_8,CLUSTER_3
col,"numpy.array([1.28,-0.42,0.44,1.6])",CLUSTER_8,CLUSTER_3
sarr,"numpy.array([(1.5,6)",CLUSTER_8,CLUSTER_3
data,"numpy.array([((1,2)",CLUSTER_8,CLUSTER_3
values,"numpy.array([5,0,1,3,2])",CLUSTER_8,CLUSTER_3
first_name,"numpy.array(['Bob','Jane','Steve','Bill','Barbara'])",CLUSTER_8,CLUSTER_3
last_name,"numpy.array(['Jones','Arnold','Arnold','Jones','Walters'])",CLUSTER_8,CLUSTER_3
values,"numpy.array(['2:first','2:second','1:first','1:second','1:third'])",CLUSTER_8,CLUSTER_3
key,"numpy.array([2,2,1,1,1])",CLUSTER_8,CLUSTER_3
arr,"numpy.array([0,1,7,12,15])",CLUSTER_8,CLUSTER_3
arr,"numpy.array([0,0,0,1,1,1,1])",CLUSTER_8,CLUSTER_3
bins,"numpy.array([0,100,1000,5000,10000])",CLUSTER_8,CLUSTER_3
X,"numpy.array([[8.82768214,3.82222409,-1.14276475,2.04411587],
[3.82222409,6.75272284,0.83909108,2.08293758],
[-1.14276475,0.83909108,5.01690521,0.79573241],
[2.04411587,2.08293758,0.79573241,6.24095859]])",CLUSTER_8,CLUSTER_3
arr,"numpy.zeros((4,4)",CLUSTER_8,CLUSTER_3
arr,"numpy.zeros((4,3)",CLUSTER_8,CLUSTER_3
arr,"numpy.zeros(4,dtype=dtype)",CLUSTER_8,CLUSTER_3
sorter,"numpy.lexsort((first_name,last_name)",CLUSTER_8,CLUSTER_3
ints,"numpy.ones(10,dtype=np.uint16)",CLUSTER_8,CLUSTER_3
floats,"numpy.ones(10,dtype=np.float32)",CLUSTER_8,CLUSTER_3
other_arr,"numpy.ones((3,5)",CLUSTER_8,CLUSTER_3
arr_c,"numpy.ones((1000,1000)",CLUSTER_8,CLUSTER_3
arr_f,"numpy.ones((1000,1000)",CLUSTER_8,CLUSTER_3
data,"numpy.floor(np.random.uniform(0,10000,size=50)",CLUSTER_8,CLUSTER_3
add_them,"numpy.frompyfunc(add_elements,2,1)",CLUSTER_8,CLUSTER_3
arr,numpy.multiply.outer(np.arange(4),CLUSTER_8,CLUSTER_3
result,"numpy.subtract.outer(randn(3,4)",CLUSTER_8,CLUSTER_3
Xm,numpy.matrix(X),CLUSTER_8,CLUSTER_3
add_them,"numpy.vectorize(add_elements,otypes=[np.float64])",CLUSTER_8,CLUSTER_3
"first,second,third","numpy.split(arr,[1,3])",CLUSTER_8,CLUSTER_3
a,numpy.arange(27),CLUSTER_3,CLUSTER_6
b,numpy.arange(5),CLUSTER_3,CLUSTER_6
c,"numpy.arange(5,10)",CLUSTER_3,CLUSTER_6
a,numpy.arange(6),CLUSTER_3,CLUSTER_6
a,numpy.arange(6),CLUSTER_3,CLUSTER_6
a,numpy.arange(27),CLUSTER_3,CLUSTER_6
a,numpy.array(100),CLUSTER_3,CLUSTER_6
a,numpy.array([100]),CLUSTER_3,CLUSTER_6
a,numpy.array([[100]]),CLUSTER_3,CLUSTER_6
a,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_3,CLUSTER_6
a,"numpy.array([[0,1,2,3,4,5]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([('Rex',9,81.0)",CLUSTER_3,CLUSTER_6
Address,"collections.namedtuple('Address',('name','age','weight')",CLUSTER_3,CLUSTER_6
xml_files,os.listdir(Annotations),CLUSTER_10,CLUSTER_4
eip,"numpy.arange(0,3*np.pi,0.1)",CLUSTER_1,CLUSTER_9
eip,"numpy.arange(0,3*np.pi,0.1)",CLUSTER_1,CLUSTER_9
eip,"numpy.arange(0,3*np.pi,0.1)",CLUSTER_1,CLUSTER_9
eip_list,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([0,2,0,1])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1,2])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1.0,2.0])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1,2],dtype=np.int64)",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4]],dtype=np.float64)",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([[5,6],[7,8]],dtype=np.float64)",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([[5,6],[7,8]])",CLUSTER_1,CLUSTER_9
eip_in,"numpy.array([9,10])",CLUSTER_1,CLUSTER_9
eip_out,"numpy.array([11,12])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2],[3,4]])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_9
eip,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
mlblr,"numpy.array([1,0,1])",CLUSTER_1,CLUSTER_9
eip_in,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_1,CLUSTER_9
mlblr_in,"numpy.array([1,0,1])",CLUSTER_1,CLUSTER_9
