varible_name,method,"AgglomerativeClustering(metric='euclidean', n_clusters=13)","KMeans(n_clusters=13, n_init='auto', random_state=0)"
conf_mat_smoke_svm_Resampling,"sklearn.metrics.confusion_matrix(y_true=y_test_smoke,y_pred=y_pred_svm_smoke)",CLUSTER_7,CLUSTER_5
conf_mat_smoke_svm_Resampling_2,"sklearn.metrics.confusion_matrix(y_true=y_test_smoke,y_pred=y_pred_svm_smoke_2)",CLUSTER_7,CLUSTER_5
conf_mat_smoke_tree_Resampling,"sklearn.metrics.confusion_matrix(y_true=y_test_smoke,y_pred=y_pred_smoke_Resampling_2)",CLUSTER_7,CLUSTER_5
conf_mat_No_smoke_tree_Undersampling,"sklearn.metrics.confusion_matrix(y_true=y_test_No_smoke,y_pred=y_pred_No_smoke_Undersampling)",CLUSTER_7,CLUSTER_5
conf_mat_No_smoke_tree_Resampling,"sklearn.metrics.confusion_matrix(y_true=y_test_No_smoke,y_pred=y_pred_No_smoke_Resampling)",CLUSTER_7,CLUSTER_5
conf_mat_No_smoke_svm_Resampling,"sklearn.metrics.confusion_matrix(y_true=y_test_No_smoke,y_pred=y_pred_svm_No_smoke)",CLUSTER_7,CLUSTER_5
conf_mat_No_smoke_tree_Resampling_2,"sklearn.metrics.confusion_matrix(y_true=y_test_No_smoke,y_pred=y_pred_No_smoke_Resampling_2)",CLUSTER_7,CLUSTER_5
conf_mat_No_smoke_svm_Resampling_2,"sklearn.metrics.confusion_matrix(y_true=y_test_No_smoke,y_pred=y_pred_svm_No_smoke_2)",CLUSTER_7,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(y_test_smoke,y_pred_smoke)",CLUSTER_7,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(y_test_smoke,y_pred_smoke_Undersampling)",CLUSTER_7,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(y_test_smoke,y_pred_smoke_boost_Undersampling)",CLUSTER_7,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(y_test_smoke,y_pred_smoke_Resampling)",CLUSTER_7,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(y_test_smoke,y_pred_svm_smoke)",CLUSTER_7,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(y_test_smoke,y_pred_svm_smoke_2)",CLUSTER_7,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(y_test_smoke,y_pred_smoke_Resampling_2)",CLUSTER_7,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(y_test_No_smoke,y_pred_No_smoke_Undersampling)",CLUSTER_7,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(y_test_No_smoke,y_pred_No_smoke_Resampling)",CLUSTER_7,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(y_test_No_smoke,y_pred_svm_No_smoke)",CLUSTER_7,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(y_test_No_smoke,y_pred_No_smoke_Resampling_2)",CLUSTER_7,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(y_test_No_smoke,y_pred_svm_No_smoke_2)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test_smoke,y_pred_smoke)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test_smoke,y_pred_smoke_Undersampling)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test_smoke,y_pred_smoke_boost_Undersampling)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test_smoke,y_pred_smoke_Resampling)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test_smoke,y_pred_svm_smoke)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test_smoke,y_pred_svm_smoke_2)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test_smoke,y_pred_smoke_Resampling_2)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test_No_smoke,y_pred_No_smoke_Undersampling)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test_No_smoke,y_pred_No_smoke_Resampling)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test_No_smoke,y_pred_svm_No_smoke)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test_No_smoke,y_pred_No_smoke_Resampling_2)",CLUSTER_7,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test_No_smoke,y_pred_svm_No_smoke_2)",CLUSTER_7,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_5
svclassifier_smoke,sklearn.svm.SVC(kernel='linear'),CLUSTER_7,CLUSTER_5
svclassifier_smoke_2,"sklearn.svm.SVC(kernel='linear',C=1.0)",CLUSTER_7,CLUSTER_5
svclassifier_No_smoke,sklearn.svm.SVC(kernel='linear'),CLUSTER_7,CLUSTER_5
svclassifier_No_smoke_2,"sklearn.svm.SVC(kernel='linear',C=1.0)",CLUSTER_7,CLUSTER_5
"train_scores,test_scores","sklearn.model_selection.validation_curve(
DecisionTreeClassifier()",CLUSTER_7,CLUSTER_5
"train_scores,test_scores","sklearn.model_selection.validation_curve(
svm.SVC(C=1.0)",CLUSTER_7,CLUSTER_5
"train_scores,test_scores","sklearn.model_selection.validation_curve(
DecisionTreeClassifier()",CLUSTER_7,CLUSTER_5
"train_scores,test_scores","sklearn.model_selection.validation_curve(
svm.SVC(C=1.0)",CLUSTER_7,CLUSTER_5
since,time.time(),CLUSTER_6,CLUSTER_11
time_elapsed,time.time(),CLUSTER_6,CLUSTER_11
wa_numa_ar_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
wa_numa_ll_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
wa_numa_ht_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
wa_numa_sk_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
wa_numa_bt_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
wa_numa_bp_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
wa_numa_rb_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
we_numa_ar_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
we_numa_ll_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
we_numa_ht_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
we_numa_sk_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
we_numa_bt_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
we_numa_bp_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
we_numa_rb_dram,numpy.arange(1),CLUSTER_1,CLUSTER_10
wa_ar_plt,"matplotlib.pyplot.subplot(1,7,1)",CLUSTER_1,CLUSTER_10
wa_ll_plt,"matplotlib.pyplot.subplot(1,7,2)",CLUSTER_1,CLUSTER_10
wa_ht_plt,"matplotlib.pyplot.subplot(1,7,3)",CLUSTER_1,CLUSTER_10
wa_sk_plt,"matplotlib.pyplot.subplot(1,7,4)",CLUSTER_1,CLUSTER_10
wa_bt_plt,"matplotlib.pyplot.subplot(1,7,5)",CLUSTER_1,CLUSTER_10
wa_bp_plt,"matplotlib.pyplot.subplot(1,7,6)",CLUSTER_1,CLUSTER_10
wa_rb_plt,"matplotlib.pyplot.subplot(1,7,7)",CLUSTER_1,CLUSTER_10
we_ar_plt,"matplotlib.pyplot.subplot(1,7,1)",CLUSTER_1,CLUSTER_10
we_ll_plt,"matplotlib.pyplot.subplot(1,7,2)",CLUSTER_1,CLUSTER_10
we_ht_plt,"matplotlib.pyplot.subplot(1,7,3)",CLUSTER_1,CLUSTER_10
we_sk_plt,"matplotlib.pyplot.subplot(1,7,4)",CLUSTER_1,CLUSTER_10
we_bt_plt,"matplotlib.pyplot.subplot(1,7,5)",CLUSTER_1,CLUSTER_10
we_bp_plt,"matplotlib.pyplot.subplot(1,7,6)",CLUSTER_1,CLUSTER_10
we_rb_plt,"matplotlib.pyplot.subplot(1,7,7)",CLUSTER_1,CLUSTER_10
nonzeroy,numpy.array(nonzero[0]),CLUSTER_1,CLUSTER_10
nonzerox,numpy.array(nonzero[1]),CLUSTER_1,CLUSTER_10
nonzeroy,numpy.array(nonzero[0]),CLUSTER_1,CLUSTER_10
nonzerox,numpy.array(nonzero[1]),CLUSTER_1,CLUSTER_10
left_line_window1,"numpy.array([np.transpose(np.vstack([left_fitx-margin,ploty])",CLUSTER_1,CLUSTER_10
left_line_window2,"numpy.array([np.flipud(np.transpose(np.vstack([left_fitx+margin,
ploty])",CLUSTER_1,CLUSTER_10
right_line_window1,"numpy.array([np.transpose(np.vstack([right_fitx-margin,ploty])",CLUSTER_1,CLUSTER_10
right_line_window2,"numpy.array([np.flipud(np.transpose(np.vstack([right_fitx+margin,
ploty])",CLUSTER_1,CLUSTER_10
template,"numpy.array(r_points+l_points,np.uint8)",CLUSTER_1,CLUSTER_10
template,"numpy.array(cv2.merge((zero_channel,template,zero_channel)",CLUSTER_1,CLUSTER_10
output,"numpy.array(cv2.merge((warped,warped,warped)",CLUSTER_1,CLUSTER_10
template,"numpy.array(r_points+l_points,np.uint8)",CLUSTER_1,CLUSTER_10
template,"numpy.array(cv2.merge((zero_channel,template,zero_channel)",CLUSTER_1,CLUSTER_10
output,"numpy.array(cv2.merge((warped,warped,warped)",CLUSTER_1,CLUSTER_10
objp,"numpy.zeros((ny*nx,3)",CLUSTER_1,CLUSTER_10
left_lane_inds,numpy.concatenate(left_lane_inds),CLUSTER_1,CLUSTER_10
right_lane_inds,numpy.concatenate(right_lane_inds),CLUSTER_1,CLUSTER_10
grad_binary,numpy.zeros_like(scaled_sobel),CLUSTER_1,CLUSTER_10
mag_binary,numpy.zeros_like(gradmag),CLUSTER_1,CLUSTER_10
dir_binary,numpy.zeros_like(absgraddir),CLUSTER_1,CLUSTER_10
color_binary,numpy.zeros_like(img),CLUSTER_1,CLUSTER_10
combined,numpy.zeros_like(dir_binary),CLUSTER_1,CLUSTER_10
combined,numpy.zeros_like(dir_binary),CLUSTER_1,CLUSTER_10
combined,numpy.zeros_like(s_binary),CLUSTER_1,CLUSTER_10
window_img,numpy.zeros_like(out_img),CLUSTER_1,CLUSTER_10
output,numpy.zeros_like(img_ref),CLUSTER_1,CLUSTER_10
l_points,numpy.zeros_like(warped),CLUSTER_1,CLUSTER_10
r_points,numpy.zeros_like(warped),CLUSTER_1,CLUSTER_10
zero_channel,numpy.zeros_like(template),CLUSTER_1,CLUSTER_10
output,numpy.zeros_like(img_ref),CLUSTER_1,CLUSTER_10
l_points,numpy.zeros_like(warped),CLUSTER_1,CLUSTER_10
r_points,numpy.zeros_like(warped),CLUSTER_1,CLUSTER_10
zero_channel,numpy.zeros_like(template),CLUSTER_1,CLUSTER_10
conv_signal,"numpy.convolve(window,image_layer)",CLUSTER_1,CLUSTER_10
conv_signal,"numpy.convolve(window,image_layer)",CLUSTER_1,CLUSTER_10
window,numpy.ones(window_width),CLUSTER_1,CLUSTER_10
window,numpy.ones(window_width),CLUSTER_1,CLUSTER_10
leftx_base,numpy.argmax(histogram[:midpoint]),CLUSTER_1,CLUSTER_10
rightx_base,numpy.argmax(histogram[midpoint:]),CLUSTER_1,CLUSTER_10
l_center,"numpy.argmax(np.convolve(window,l_sum)",CLUSTER_1,CLUSTER_10
r_center,"numpy.argmax(np.convolve(window,r_sum)",CLUSTER_1,CLUSTER_10
l_center,numpy.argmax(conv_signal[l_min_index:l_max_index]),CLUSTER_1,CLUSTER_10
r_center,numpy.argmax(conv_signal[r_min_index:r_max_index]),CLUSTER_1,CLUSTER_10
l_center,"numpy.argmax(np.convolve(window,l_sum)",CLUSTER_1,CLUSTER_10
r_center,"numpy.argmax(np.convolve(window,r_sum)",CLUSTER_1,CLUSTER_10
l_center,numpy.argmax(conv_signal[l_min_index:l_max_index]),CLUSTER_1,CLUSTER_10
r_center,numpy.argmax(conv_signal[r_min_index:r_max_index]),CLUSTER_1,CLUSTER_10
ax,numpy.ravel(ax),CLUSTER_1,CLUSTER_10
ax,numpy.ravel(ax),CLUSTER_1,CLUSTER_10
histogram,"numpy.sum(binary_warped[binary_warped.shape[0]//2:,:],axis=0)",CLUSTER_1,CLUSTER_10
l_sum,numpy.sum(image[int(3*image.shape[0]/4),CLUSTER_1,CLUSTER_10
r_sum,numpy.sum(image[int(3*image.shape[0]/4),CLUSTER_1,CLUSTER_10
image_layer,numpy.sum(image[int(image.shape[0]-(level+1),CLUSTER_1,CLUSTER_10
l_sum,numpy.sum(image[int(3*image.shape[0]/4),CLUSTER_1,CLUSTER_10
r_sum,numpy.sum(image[int(3*image.shape[0]/4),CLUSTER_1,CLUSTER_10
image_layer,numpy.sum(image[int(image.shape[0]-(level+1),CLUSTER_1,CLUSTER_10
abs_sobel,numpy.absolute(sobel),CLUSTER_1,CLUSTER_10
absgraddir,numpy.arctan2(np.absolute(sobely),CLUSTER_1,CLUSTER_10
gradmag,numpy.sqrt(sobelx**2+sobely**2),CLUSTER_1,CLUSTER_10
src,"numpy.float32([[205,img_size[1]-1],[596,450],[685,450],[1105,img_size[1]-1]])",CLUSTER_1,CLUSTER_10
dst,"numpy.float32([[offset,img_size[1]],[offset,0],
[img_size[0]-offset,0],
[img_size[0]-offset,img_size[1]]])",CLUSTER_1,CLUSTER_10
scaled_sobel,numpy.uint8(255*abs_sobel/np.max(abs_sobel),CLUSTER_1,CLUSTER_10
ploty,"numpy.linspace(0,binary_warped.shape[0]-1,binary_warped.shape[0])",CLUSTER_1,CLUSTER_10
ploty,"numpy.linspace(0,binary_warped.shape[0]-1,binary_warped.shape[0])",CLUSTER_1,CLUSTER_10
ploty,"numpy.linspace(0,warped.shape[0]-1,warped.shape[0])",CLUSTER_1,CLUSTER_10
ploty,"numpy.linspace(0,warped.shape[0]-1,warped.shape[0])",CLUSTER_1,CLUSTER_10
left_line_pts,"numpy.hstack((left_line_window1,left_line_window2)",CLUSTER_1,CLUSTER_10
right_line_pts,"numpy.hstack((right_line_window1,right_line_window2)",CLUSTER_1,CLUSTER_10
warped,numpy.copy(img),CLUSTER_1,CLUSTER_10
color_binary,numpy.dstack((np.zeros_like(sxbinary),CLUSTER_1,CLUSTER_10
out_img,"numpy.dstack((binary_warped,binary_warped,binary_warped)",CLUSTER_1,CLUSTER_10
out_img,"numpy.dstack((binary_warped,binary_warped,binary_warped)",CLUSTER_1,CLUSTER_10
warpage,"numpy.dstack((warped,warped,warped)",CLUSTER_1,CLUSTER_10
warpage,"numpy.dstack((warped,warped,warped)",CLUSTER_1,CLUSTER_10
left_fit,"numpy.polyfit(lefty,leftx,2)",CLUSTER_1,CLUSTER_10
right_fit,"numpy.polyfit(righty,rightx,2)",CLUSTER_1,CLUSTER_10
left_fit,"numpy.polyfit(lefty,leftx,2)",CLUSTER_1,CLUSTER_10
right_fit,"numpy.polyfit(righty,rightx,2)",CLUSTER_1,CLUSTER_10
left_fit,"numpy.polyfit(ypts,leftx,2)",CLUSTER_1,CLUSTER_10
right_fit,"numpy.polyfit(ypts,rightx,2)",CLUSTER_1,CLUSTER_10
left_fit_cr,"numpy.polyfit(ploty*ym_per_pix,left_fitx*xm_per_pix,2)",CLUSTER_1,CLUSTER_10
right_fit_cr,"numpy.polyfit(ploty*ym_per_pix,right_fitx*xm_per_pix,2)",CLUSTER_1,CLUSTER_10
left_fit,"numpy.polyfit(ypts,leftx,2)",CLUSTER_1,CLUSTER_10
right_fit,"numpy.polyfit(ypts,rightx,2)",CLUSTER_1,CLUSTER_10
img,matplotlib.pyplot.imread('test_images/test2.jpg'),CLUSTER_1,CLUSTER_10
img,matplotlib.pyplot.imread('test_images/test1.jpg'),CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(4,5,figsize=(40,20)",CLUSTER_1,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_1,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(24,9)",CLUSTER_1,CLUSTER_10
"f,ax","matplotlib.pyplot.subplots(2,2,figsize=(24,9)",CLUSTER_1,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(24,9)",CLUSTER_1,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(24,9)",CLUSTER_1,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(24,9)",CLUSTER_1,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(24,9)",CLUSTER_1,CLUSTER_10
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(24,9)",CLUSTER_1,CLUSTER_10
diet_data,pandas.read_csv('Datasets/diet_data.csv'),CLUSTER_5,CLUSTER_1
binarizer,sklearn.preprocessing.Binarizer(),CLUSTER_5,CLUSTER_1
binarizer,sklearn.preprocessing.Binarizer(threshold=500),CLUSTER_5,CLUSTER_1
binarizer,"sklearn.preprocessing.Binarizer(threshold=[0,100])",CLUSTER_5,CLUSTER_1
binarizer,sklearn.preprocessing.Binarizer(threshold=median_calories),CLUSTER_5,CLUSTER_1
diet_data['cals_per_oz_above_mean'],"sklearn.preprocessing.binarize(diet_data[['cals_per_oz']],
threshold=mean_calories_per_oz)",CLUSTER_5,CLUSTER_1
w,numpy.zeros(y.num_row(),CLUSTER_7,CLUSTER_8
df_train_store_mlc['CompetitionOpenSince'],numpy.where((df_train_store_mlc['CompetitionOpenSinceMonth']==0),CLUSTER_7,CLUSTER_8
df_test_store_mlc['CompetitionOpenSince'],numpy.where((df_test_store_mlc['CompetitionOpenSinceMonth']==0),CLUSTER_7,CLUSTER_8
upper_triangle,numpy.zeros_like(df_correlation.corr(),CLUSTER_7,CLUSTER_8
rmspe,numpy.sqrt(np.mean(w*(y-yhat),CLUSTER_7,CLUSTER_8
train_sizes,"numpy.linspace(0.05,1,10)",CLUSTER_7,CLUSTER_8
Y_,"numpy.vstack((y_1,y_2)",CLUSTER_7,CLUSTER_8
kaggle_preds,"pandas.DataFrame({'Id':sample_submission['Id'],'Sales':inv_boxcox(kaggle_yhat,lambdas_coxbox[0])",CLUSTER_7,CLUSTER_8
sales_coxboxed,"pandas.Series(coxboxed,index=train.Sales.index)",CLUSTER_7,CLUSTER_8
cust_coxboxed,"pandas.Series(coxboxed,index=train.Customers.index)",CLUSTER_7,CLUSTER_8
sale_per_cust_coxboxed,"pandas.Series(coxboxed,index=train.SalePerCustomer.index)",CLUSTER_7,CLUSTER_8
dataset,"pandas.concat(objs=[df_store_tr,df_store_te],axis=0)",CLUSTER_7,CLUSTER_8
full_target,"pandas.concat([y_pred_,y_1_2_true])",CLUSTER_7,CLUSTER_8
analysis_comp_dist['CompetitionDist_cut'],"pandas.cut(analysis_comp_dist['CompetitionDistance'],5)",CLUSTER_7,CLUSTER_8
dataset_preprocessed,pandas.get_dummies(dataset),CLUSTER_7,CLUSTER_8
df_train_store_mlc,"pandas.get_dummies(df_train_store_mlc,columns=[""Assortment"",""StoreType"",""PromoInterval""],
prefix=[""is_Assortment"",""is_StoreType"",""is_PromoInteval""])",CLUSTER_7,CLUSTER_8
df_test_store_mlc,"pandas.get_dummies(df_test_store_mlc,columns=[""Assortment"",""StoreType"",""PromoInterval""],
prefix=[""is_Assortment"",""is_StoreType"",""is_PromoInteval""])",CLUSTER_7,CLUSTER_8
df_train_store_mlc,"pandas.get_dummies(df_train_store_mlc,columns=['DayOfWeek'],prefix='Day')",CLUSTER_7,CLUSTER_8
df_test_store_mlc,"pandas.get_dummies(df_test_store_mlc,columns=['DayOfWeek'],prefix='Day')",CLUSTER_7,CLUSTER_8
df_store_new_2,"pandas.merge(df_store_new_1,full_target,how='left',on='Store')",CLUSTER_7,CLUSTER_8
df_train_store_mlc,"pandas.merge(train,store_mlc,how='left',on='Store')",CLUSTER_7,CLUSTER_8
df_test_store_mlc,"pandas.merge(test,store_mlc,how='left',on='Store')",CLUSTER_7,CLUSTER_8
initial_train,"pandas.read_csv(os.path.join(PATH_TO_alldata,""train.csv"")",CLUSTER_7,CLUSTER_8
initial_test,"pandas.read_csv(os.path.join(PATH_TO_alldata,""test.csv"")",CLUSTER_7,CLUSTER_8
store,"pandas.read_csv(os.path.join(PATH_TO_alldata,""store.csv"")",CLUSTER_7,CLUSTER_8
sample_submission,"pandas.read_csv(os.path.join(PATH_TO_alldata,""sample_submission.csv"")",CLUSTER_7,CLUSTER_8
"coxboxed,lam",scipy.stats.boxcox(train['Sales'].values),CLUSTER_7,CLUSTER_8
"coxboxed,lam",scipy.stats.boxcox(train['Customers'].values),CLUSTER_7,CLUSTER_8
"coxboxed,lam",scipy.stats.boxcox(train['SalePerCustomer'].values),CLUSTER_7,CLUSTER_8
y,"scipy.special.inv_boxcox(y,lambda_coxbox)",CLUSTER_7,CLUSTER_8
yhat,"scipy.special.inv_boxcox(yhat,lambda_coxbox)",CLUSTER_7,CLUSTER_8
pred_2_inv_cb,"scipy.special.inv_boxcox(pred_1,lambdas_coxbox[0])",CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
lines,"matplotlib.pyplot.plot(x,mu,'-',**kwargs)",CLUSTER_7,CLUSTER_8
"fig,axis","matplotlib.pyplot.subplots(1,1,figsize=(15,4)",CLUSTER_7,CLUSTER_8
"fig,axis","matplotlib.pyplot.subplots(1,1,figsize=(15,4)",CLUSTER_7,CLUSTER_8
"fig,axis","matplotlib.pyplot.subplots(1,1,figsize=(15,4)",CLUSTER_7,CLUSTER_8
"fig,(axis1,axis2)","matplotlib.pyplot.subplots(2,1,sharex=True,figsize=(15,8)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(17,3.5)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(2,3,figsize=(17,10)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_8
palette,"seaborn.color_palette(""Set1"",n_colors=7)",CLUSTER_7,CLUSTER_8
palette,"seaborn.color_palette(""Set1"",n_colors=7)",CLUSTER_7,CLUSTER_8
palette,"seaborn.color_palette(""Set1"",n_colors=7)",CLUSTER_7,CLUSTER_8
palette,"seaborn.color_palette(""Set1"",n_colors=3)",CLUSTER_7,CLUSTER_8
sharex,"False,palette=seaborn.color_palette(""Set1"",n_colors=2)",CLUSTER_7,CLUSTER_8
row,"""Year"",sharex=False,palette=seaborn.color_palette(""Set1"",n_colors=2)",CLUSTER_7,CLUSTER_8
palette,"seaborn.color_palette(""Set1"",n_colors=2)",CLUSTER_7,CLUSTER_8
p_x,"seaborn.distplot(data,fit=st.norm,kde=True,ax=ax1,bins=50)",CLUSTER_7,CLUSTER_8
linewidths,"0.5,cmap=seaborn.diverging_palette(-100,100,as_cmap=True)",CLUSTER_7,CLUSTER_8
prob,"scipy.stats.probplot(data,dist=st.norm,plot=ax2)",CLUSTER_7,CLUSTER_8
scoring_fun,"sklearn.metrics.make_scorer(rmspe,greater_is_better=False)",CLUSTER_7,CLUSTER_8
"X_train,X_train_test,y_train,y_train_test","sklearn.model_selection.train_test_split(df_train_store_mlc,y,
test_size=0.2,random_state=17)",CLUSTER_7,CLUSTER_8
grid,"sklearn.model_selection.RandomizedSearchCV(estimator=rfr,param_distributions=params,cv=10)",CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.KFold(n_splits=3,shuffle=True,random_state=17)",CLUSTER_7,CLUSTER_8
"N_train,val_train,val_test","sklearn.model_selection.learning_curve(reg,X,y,
train_sizes=train_sizes,
cv=KFold(n_splits=3,shuffle=True,random_state=17)",CLUSTER_7,CLUSTER_8
rfr,"sklearn.ensemble.RandomForestRegressor(n_estimators=10,
criterion='mse',
max_depth=5,
n_jobs=7,
random_state=17,
warm_start=False)",CLUSTER_7,CLUSTER_8
rfr,"sklearn.ensemble.RandomForestRegressor(n_estimators=10,
criterion='mse',
max_depth=5,
min_samples_split=2,
min_samples_leaf=1,
min_weight_fraction_leaf=0.0,
max_features='auto',
max_leaf_nodes=None,
min_impurity_decrease=0.0,
min_impurity_split=None,
bootstrap=True,
oob_score=False,
n_jobs=4,
random_state=31,
verbose=0,
warm_start=False)",CLUSTER_7,CLUSTER_8
rfr_val,"sklearn.ensemble.RandomForestRegressor(n_estimators=128,
criterion='mse',
max_depth=20,
min_samples_split=10,
min_samples_leaf=1,
min_weight_fraction_leaf=0.0,
max_features='auto',
max_leaf_nodes=None,
min_impurity_decrease=0.0,
min_impurity_split=None,
bootstrap=True,
oob_score=False,
n_jobs=7,
random_state=17,
verbose=0,
warm_start=False)",CLUSTER_7,CLUSTER_8
multi_target_forest,"sklearn.multioutput.MultiOutputClassifier(forest,n_jobs=4)",CLUSTER_7,CLUSTER_8
forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=trees,random_state=17)",CLUSTER_7,CLUSTER_8
ratio,numpy.array(Row_Ratio(DATAFRAME),CLUSTER_1,CLUSTER_3
result,numpy.array(list(TABLEAU.iloc[j]),CLUSTER_1,CLUSTER_3
ratio,numpy.array(Row_Ratio(DATAFRAME),CLUSTER_1,CLUSTER_3
result1,numpy.array(list(TABLEAU.iloc[j]),CLUSTER_1,CLUSTER_3
result2,numpy.array(list(TABLEAU.iloc[j+1]),CLUSTER_1,CLUSTER_3
TABLEAU,"pandas.DataFrame({
'x1':col_1,
'x2':col_2,
'x3':col_3,
's1':col_4,
's2':col_5,
'p':[0,0,1],
'RHS':col_7,
})",CLUSTER_1,CLUSTER_3
alfa_chapeu,numpy.mean(Y),CLUSTER_3,CLUSTER_6
alfa_chapeu,numpy.mean(Y),CLUSTER_3,CLUSTER_6
raw_data['rating_high'],"numpy.where(raw_data['rating']>=4.0,1,0)",CLUSTER_7,CLUSTER_8
raw_data,pandas.read_csv('epi_r.csv'),CLUSTER_7,CLUSTER_8
svr,sklearn.svm.SVR(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=30),CLUSTER_7,CLUSTER_8
svc,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_8
t0,time.time(),CLUSTER_7,CLUSTER_8
t0,time.time(),CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X1,Y)",CLUSTER_7,CLUSTER_8
self.a_matrix,"numpy.zeros((self.v,self.u)",CLUSTER_3,CLUSTER_6
self.s_v_list,"numpy.zeros((self.v,self.v)",CLUSTER_3,CLUSTER_6
self.s_u_list,"numpy.zeros((self.u,self.u)",CLUSTER_3,CLUSTER_6
self.a_matrix,"numpy.zeros((entrada.v,entrada.u)",CLUSTER_3,CLUSTER_6
self.a_matrix,"numpy.zeros((entrada.v,entrada.u)",CLUSTER_3,CLUSTER_6
v_exclusions,numpy.zeros(self.Input.v),CLUSTER_3,CLUSTER_6
u_exclusions,numpy.zeros(self.Input.u),CLUSTER_3,CLUSTER_6
self.m_v_edit,"numpy.zeros((self.Input.v,len(biclusters)",CLUSTER_3,CLUSTER_6
self.m_u_edit,"numpy.zeros((self.Input.u,len(biclusters)",CLUSTER_3,CLUSTER_6
v_sec,"numpy.matmul(self.a_matrix,self.a_matrix.T)",CLUSTER_3,CLUSTER_6
u_sec,"numpy.matmul(self.a_matrix.T,self.a_matrix)",CLUSTER_3,CLUSTER_6
npm1,numpy.matrix(e_a_matrix),CLUSTER_3,CLUSTER_6
npm2,numpy.matrix(self.a_matrix),CLUSTER_3,CLUSTER_6
air_visit_and_date_info,"pandas.merge(data[DATE_INFO],air_visit_data,how='inner',on='visit_date',copy=True)",CLUSTER_8,CLUSTER_9
reserved_seats_and_visitors,"pandas.merge(reserved_seats,air_visit_data,how='inner',on='visit_date')",CLUSTER_8,CLUSTER_9
air_visit_and_dates,"pandas.merge(data[DATE_INFO],air_visit_data,how='inner',on='visit_date')",CLUSTER_8,CLUSTER_9
data[AIR_VISIT_DATA]['visit_date'],pandas.to_datetime(data[AIR_VISIT_DATA]['visit_date']),CLUSTER_8,CLUSTER_9
data[DATE_INFO]['visit_date'],pandas.to_datetime(data[DATE_INFO]['visit_date']),CLUSTER_8,CLUSTER_9
data[AIR_RESERVE]['visit_datetime'],pandas.to_datetime(data[AIR_RESERVE]['visit_datetime']),CLUSTER_8,CLUSTER_9
data[AIR_RESERVE]['reserve_datetime'],pandas.to_datetime(data[AIR_RESERVE]['reserve_datetime']),CLUSTER_8,CLUSTER_9
"slope,intercept,r_value,p_value,std_err","scipy.stats.linregress(x,y)",CLUSTER_8,CLUSTER_9
random_index,"random.randint(0,data[SAMPLE_SUBMISSION].shape[0])",CLUSTER_8,CLUSTER_9
ftrs,"numpy.array(pd.read_csv(file_path,header=None)",CLUSTER_4,CLUSTER_1
lbls,"numpy.array(pd.read_csv(file_path,header=None)",CLUSTER_4,CLUSTER_1
x,numpy.hstack(x_split),CLUSTER_4,CLUSTER_1
resultsdf,pandas.DataFrame([results]),CLUSTER_4,CLUSTER_1
oh_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_4,CLUSTER_1
lbl_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_1
input_df,"pandas.read_excel('../../in/de/raven_extract.xlsx',sheet_name='raven_extract',skiprows=4,dtype=str)",CLUSTER_12,CLUSTER_3
laid_off_ratio,pandas.DataFrame(laid_off_ratio),CLUSTER_7,CLUSTER_3
data['Length'],"pandas.cut(data['Length'],bins=[0,6,12,18,24,1000000],
include_lowest=True,
labels=['<6mo','6-12mo','12-18mo','12-24mo','>24mo'])",CLUSTER_7,CLUSTER_3
data['Age'],"pandas.cut(data['Age'],bins=[0,25,35,45,100000],
include_lowest=True,
labels=['>45yrsold','36-45yrsold','26-35yrsold','<26yrsold'])",CLUSTER_7,CLUSTER_3
data,pandas.read_csv('/Users/Jade/Desktop/DataX/TrainingDatasetV3.csv'),CLUSTER_7,CLUSTER_3
df['LayoffDate'],"pandas.to_datetime(df['LayoffDate'],errors='coerce')",CLUSTER_7,CLUSTER_3
df['LayoffDate'],pandas.to_datetime(df['LayoffDate']),CLUSTER_7,CLUSTER_3
data['LayoffDate'],pandas.to_datetime(data['LayoffDate']),CLUSTER_7,CLUSTER_3
laid_off['LayoffDate'],pandas.to_datetime(laid_off['LayoffDate']),CLUSTER_7,CLUSTER_3
g,"seaborn.FacetGrid(df,col='Year')",CLUSTER_7,CLUSTER_3
g,"seaborn.FacetGrid(laid_off_scale,col='Year')",CLUSTER_7,CLUSTER_3
line,numpy.array(line),CLUSTER_1,CLUSTER_10
input_data,numpy.array(input_data),CLUSTER_1,CLUSTER_10
line,numpy.array(line),CLUSTER_1,CLUSTER_10
output_Data,numpy.array(output_data),CLUSTER_1,CLUSTER_10
weight,numpy.linalg.inv(n*l*np.identity(n),CLUSTER_1,CLUSTER_10
shuffle_idx,numpy.arange(len(iris.data),CLUSTER_3,CLUSTER_6
shuffle_idx,numpy.arange(len(digits.data),CLUSTER_3,CLUSTER_6
digits,sklearn.datasets.load_digits(),CLUSTER_3,CLUSTER_6
iris,sklearn.datasets.load_iris(),CLUSTER_3,CLUSTER_6
model,sklearn.ensemble.AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=1),CLUSTER_3,CLUSTER_6
model,sklearn.ensemble.AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=1),CLUSTER_3,CLUSTER_6
model,sklearn.ensemble.AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=3),CLUSTER_3,CLUSTER_6
model,AdaBoostClassifier(base_estimator=sklearn.tree.DecisionTreeClassifier(max_depth=1),CLUSTER_3,CLUSTER_6
model,AdaBoostClassifier(base_estimator=sklearn.tree.DecisionTreeClassifier(max_depth=1),CLUSTER_3,CLUSTER_6
model,AdaBoostClassifier(base_estimator=sklearn.tree.DecisionTreeClassifier(max_depth=3),CLUSTER_3,CLUSTER_6
model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_6
model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_6
s1,"pandas.Series(np.random.randint(1,high=5,size=100,dtype='l')",CLUSTER_8,CLUSTER_3
s2,"pandas.Series(np.random.randint(1,high=4,size=100,dtype='l')",CLUSTER_8,CLUSTER_3
s3,"pandas.Series(np.random.randint(10000,high=30001,size=100,dtype='l')",CLUSTER_8,CLUSTER_3
housemkt,"pandas.concat([s1,s2,s3],axis=1)",CLUSTER_8,CLUSTER_3
bigcolumn,"pandas.concat([s1,s2,s3],axis=0)",CLUSTER_8,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_3
Ypred,"numpy.zeros(num_test,dtype=self.ytr.dtype)",CLUSTER_3,CLUSTER_6
min_index,numpy.argmin(distances),CLUSTER_3,CLUSTER_6
acc,numpy.mean(Yval_predict==Yval),CLUSTER_3,CLUSTER_6
distances,"numpy.sum(np.abs(self.Xtr-X[i,:])",CLUSTER_3,CLUSTER_6
distances,"numpy.sqrt(np.sum(np.square(self.Xtr-X[i,:])",CLUSTER_3,CLUSTER_6
self.b,"numpy.zeros((1,1)",CLUSTER_3,CLUSTER_10
Z,"numpy.dot(X,self.W)",CLUSTER_3,CLUSTER_10
dW,numpy.dot(np.transpose(X),CLUSTER_3,CLUSTER_10
self.W,numpy.reshape(np.random.randn((num_features),CLUSTER_3,CLUSTER_10
accuracy,np.sum(Y_hat==numpy.squeeze(Y),CLUSTER_3,CLUSTER_10
db,numpy.sum(dZ),CLUSTER_3,CLUSTER_10
accuracy,numpy.sum(Y_hat==np.squeeze(Y),CLUSTER_3,CLUSTER_10
"oof_valid[val_ind,:]+",numpy.array(val_pred_prob),CLUSTER_7,CLUSTER_5
oof_test+,numpy.array(test_pred_prob),CLUSTER_7,CLUSTER_5
oof_valid,numpy.zeros((len(train),CLUSTER_7,CLUSTER_5
oof_test,numpy.zeros((len(test),CLUSTER_7,CLUSTER_5
end_train_score,numpy.mean(train_scores),CLUSTER_7,CLUSTER_5
feat_importance,pandas.DataFrame(),CLUSTER_7,CLUSTER_5
fold_importance_df,pandas.DataFrame(),CLUSTER_7,CLUSTER_5
prob,pandas.DataFrame(y_test),CLUSTER_7,CLUSTER_5
submission,pandas.DataFrame(),CLUSTER_7,CLUSTER_5
feat_importance,"pandas.concat([feat_importance,fold_importance_df],axis=0)",CLUSTER_7,CLUSTER_5
train,pandas.read_csv('/kaggle/input/zindi-crop-detection-final-tabular-data/train_final3.csv'),CLUSTER_7,CLUSTER_5
test,pandas.read_csv('/kaggle/input/zindi-crop-detection-final-tabular-data/test_final3.csv'),CLUSTER_7,CLUSTER_5
sample_sub,pandas.read_csv('/kaggle/input/zindi-crop-detection-final-tabular-data/sample_submission2.csv'),CLUSTER_7,CLUSTER_5
sub_df,pandas.read_csv('../input/sample_submission.csv'),CLUSTER_7,CLUSTER_5
kf,"sklearn.model_selection.StratifiedKFold(n_splits=num_folds,shuffle=True,random_state=seed)",CLUSTER_7,CLUSTER_5
score_fold_validation,"sklearn.metrics.log_loss(yvl,val_pred_prob)",CLUSTER_7,CLUSTER_5
score_fold_train,"sklearn.metrics.log_loss(ytr,train_pred_prob)",CLUSTER_7,CLUSTER_5
oof_score,"sklearn.metrics.log_loss(train_labels,oof_valid)",CLUSTER_7,CLUSTER_5
kf,"sklearn.model_selection.KFold(n_splits=num_folds,shuffle=True,random_state=seed)",CLUSTER_7,CLUSTER_5
counter,collections.Counter(predicted_classes),CLUSTER_7,CLUSTER_5
ind,numpy.arange(n_groups),CLUSTER_7,CLUSTER_8
ind,numpy.arange(n_groups),CLUSTER_7,CLUSTER_8
true_centers,numpy.exp(log_centers),CLUSTER_7,CLUSTER_8
true_good_data,numpy.exp(good_data),CLUSTER_7,CLUSTER_8
log_data,numpy.log(data),CLUSTER_7,CLUSTER_8
log_samples,numpy.log(samples),CLUSTER_7,CLUSTER_8
log_simdata,numpy.log(simdata_df),CLUSTER_7,CLUSTER_8
pca_squared_matrix,numpy.square(pca.components_),CLUSTER_7,CLUSTER_8
Q1,"numpy.percentile(log_data[feature],25)",CLUSTER_7,CLUSTER_8
Q3,"numpy.percentile(log_data[feature],75)",CLUSTER_7,CLUSTER_8
corr_matrix,numpy.corrcoef(data[cols].values.T),CLUSTER_7,CLUSTER_8
samples,"pandas.DataFrame(data.loc[indices],columns=data.keys()",CLUSTER_7,CLUSTER_8
outlier_sample,"pandas.DataFrame(data.loc[common_outliers],columns=data.keys()",CLUSTER_7,CLUSTER_8
reduced_data,"pandas.DataFrame(reduced_data,columns=['Dimension1','Dimension2'])",CLUSTER_7,CLUSTER_8
true_centers,pandas.DataFrame(np.round(true_centers),CLUSTER_7,CLUSTER_8
dfx,"pandas.DataFrame(np.round(pca2_simdata,4)",CLUSTER_7,CLUSTER_8
dfx,dfx.assign(Segment=pandas.DataFrame(predictions_simdata),CLUSTER_7,CLUSTER_8
data,"pandas.read_csv(""customers.csv"")",CLUSTER_7,CLUSTER_8
reg,sklearn.tree.DecisionTreeRegressor(random_state=0),CLUSTER_7,CLUSTER_8
reg,sklearn.tree.DecisionTreeRegressor(random_state=0),CLUSTER_7,CLUSTER_8
score,"sklearn.metrics.r2_score(y_test,y_predict)",CLUSTER_7,CLUSTER_8
score,"sklearn.metrics.r2_score(y_test,y_predict)",CLUSTER_7,CLUSTER_8
"statistic,p",scipy.stats.normaltest(data[feat].values),CLUSTER_7,CLUSTER_8
heat_map,"seaborn.heatmap(corr_matrix,cbar=True,annot=True,square=True,fmt='.2f',
annot_kws={'size':15},yticklabels=cols,xticklabels=cols)",CLUSTER_7,CLUSTER_8
heat_map,"seaborn.heatmap(pca_matrix,cbar=True,annot=True,square=True,fmt='.4f',
annot_kws={'size':12},yticklabels=rows,xticklabels=cols)",CLUSTER_7,CLUSTER_8
heat_map,"seaborn.heatmap(pca_squared_matrix,cmap=""YlGnBu"",cbar=True,annot=True,square=True,fmt='.4f',
annot_kws={'size':12},yticklabels=rows,xticklabels=cols)",CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=data.shape[1]),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
pca2,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
clm,"sklearn.cluster.KMeans(n_clusters=kn,random_state=0)",CLUSTER_7,CLUSTER_8
clm,"sklearn.cluster.KMeans(n_clusters=2,random_state=0)",CLUSTER_7,CLUSTER_8
score,"sklearn.metrics.silhouette_score(reduced_data,preds,random_state=10)",CLUSTER_7,CLUSTER_8
score,"sklearn.metrics.silhouette_score(reduced_data,preds,random_state=10)",CLUSTER_7,CLUSTER_8
dt,sklearn.tree.DecisionTreeClassifier(random_state=0),CLUSTER_7,CLUSTER_8
f_train_score,"sklearn.metrics.fbeta_score(y_train,predictions_train,beta=0.5)",CLUSTER_7,CLUSTER_8
f_test_score,"sklearn.metrics.fbeta_score(y_test,predictions_test,beta=0.5)",CLUSTER_7,CLUSTER_8
acc_train_score,"sklearn.metrics.accuracy_score(y_train,predictions_train)",CLUSTER_7,CLUSTER_8
acc_test_score,"sklearn.metrics.accuracy_score(y_test,predictions_test)",CLUSTER_7,CLUSTER_8
phtablo,pandas.DataFrame(sozluk),CLUSTER_7,CLUSTER_5
eksik_deger_tablo,"pandas.concat([eksik_deger,eksik_deger_yuzde],axis=1)",CLUSTER_7,CLUSTER_5
protein,"pandas.read_csv(""pdb_data_no_dups.csv"")",CLUSTER_7,CLUSTER_5
df1,"pandas.read_csv(""pdb_data_no_dups.csv"")",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv(""pdb_data_no_dups.csv"")",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(r""pdb_data_no_dups.csv"")",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv(""pdb_data_no_dups.csv"")",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(x=""classification"",y=""structureMolecularWeight"",data=df2)",CLUSTER_7,CLUSTER_5
ax,"seaborn.barplot(x=""classification"",y=""structureMolecularWeight"",hue=""macromoleculeType"",data=df2)",CLUSTER_7,CLUSTER_5
ax,"seaborn.scatterplot(x=""structureMolecularWeight"",y=""residueCount"",hue=""classification"",data=df2)",CLUSTER_7,CLUSTER_5
ax,"seaborn.scatterplot(x=""resolution"",y=""residueCount"",hue=""classification"",data=df2)",CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=123)",CLUSTER_7,CLUSTER_5
t,"numpy.arange(0.1,2.0,0.1)",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('Datafiles/Income.csv'),CLUSTER_1,CLUSTER_3
df,pandas.read_csv('breast-cancer-wisconsin.data'),CLUSTER_7,CLUSTER_5
df[column],pandas.to_numeric(df[column]),CLUSTER_7,CLUSTER_5
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
n_jobs,"1,train_sizes=numpy.linspace(.1,1.0,5)",CLUSTER_7,CLUSTER_5
train_sizes,"numpy.linspace(0.1,1.,5)",CLUSTER_7,CLUSTER_5
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,h)",CLUSTER_7,CLUSTER_5
ax,matplotlib.pyplot.subplot(len(columns),CLUSTER_7,CLUSTER_5
g,"seaborn.PairGrid(smeared_df,hue='is_malignant')",CLUSTER_7,CLUSTER_5
classifier,sklearn.linear_model.LogisticRegression(penalty='l2'),CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
log_regr,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_7,CLUSTER_5
log_regr_tmp,"sklearn.pipeline.Pipeline([('scaler',scaler)",CLUSTER_7,CLUSTER_5
"precision,recall,f1,support","sklearn.metrics.precision_recall_fscore_support(test_y,pred_y,average='binary')",CLUSTER_7,CLUSTER_5
mean,"numpy.mean(mfcc,axis=1)",CLUSTER_1,CLUSTER_9
mean,"numpy.mean(mfcc,axis=1)",CLUSTER_1,CLUSTER_9
var,"numpy.var(mfcc,axis=1)",CLUSTER_1,CLUSTER_9
var,"numpy.var(mfcc,axis=1)",CLUSTER_1,CLUSTER_9
cov,numpy.cov(mfcc),CLUSTER_1,CLUSTER_9
cov,numpy.cov(mfcc),CLUSTER_1,CLUSTER_9
sum_key,numpy.zeros(12),CLUSTER_1,CLUSTER_9
fill,numpy.zeros(len(j),CLUSTER_1,CLUSTER_9
sum_key,numpy.zeros(12),CLUSTER_1,CLUSTER_9
fill,numpy.zeros(len(j),CLUSTER_1,CLUSTER_9
ind,numpy.where(i==np.max(i),CLUSTER_1,CLUSTER_9
ind2,numpy.where(i==np.max(i),CLUSTER_1,CLUSTER_9
ind,numpy.where(sum_key==np.max(sum_key),CLUSTER_1,CLUSTER_9
ind,numpy.where(sum_key==np.max(sum_key),CLUSTER_1,CLUSTER_9
ind,numpy.where(i==np.max(i),CLUSTER_1,CLUSTER_9
ind2,numpy.where(i==np.max(i),CLUSTER_1,CLUSTER_9
ind,numpy.where(sum_key==np.max(sum_key),CLUSTER_1,CLUSTER_9
ind,numpy.where(sum_key==np.max(sum_key),CLUSTER_1,CLUSTER_9
iu1,numpy.triu_indices(12),CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,normal_cutoff,btype='high',analog=False)",CLUSTER_1,CLUSTER_9
"b,a","scipy.signal.butter(order,normal_cutoff,btype='low',analog=False)",CLUSTER_1,CLUSTER_9
y,"scipy.signal.lfilter(b,a,data)",CLUSTER_1,CLUSTER_9
y,"scipy.signal.lfilter(b,a,data)",CLUSTER_1,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_9
results,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
downtown_onehot,"pandas.get_dummies(downtown_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
neighbourhoods,"pandas.merge(df,df2,on='PostalCode',how='left')",CLUSTER_9,CLUSTER_2
df2,"pandas.read_csv(""Geospatial_Coordinates.csv"")",CLUSTER_9,CLUSTER_2
df,"pandas.read_html(wikipedia_link,header=0)",CLUSTER_9,CLUSTER_2
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
df['Neighbourhood'],"numpy.where(df['Neighbourhood']==""Notassigned"",df['Borough'],df['Neighbourhood'])",CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
df,"pandas.merge(df,songs,on='song_id',how='left')",CLUSTER_8,CLUSTER_3
df,pandas.read_csv('C:/Users/Bigdata/Desktop/recom/train.csv'),CLUSTER_8,CLUSTER_3
songs,pandas.read_csv('C:/Users/Bigdata/Desktop/recom/song_extra_info.csv'),CLUSTER_8,CLUSTER_3
df,"pandas.read_sql_query(query1,engine)",CLUSTER_7,CLUSTER_8
"hist,bins",numpy.histogram(counters[counter].dropna(),CLUSTER_7,CLUSTER_8
fig1,"matplotlib.pyplot.figure(figsize=(20,12)",CLUSTER_7,CLUSTER_8
fig1,"matplotlib.pyplot.figure(figsize=(20,12)",CLUSTER_7,CLUSTER_8
fig1,"matplotlib.pyplot.figure(figsize=(20,12)",CLUSTER_7,CLUSTER_8
axes,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_8
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,12)",CLUSTER_7,CLUSTER_8
kernel,"numpy.ones((n,n)",CLUSTER_1,CLUSTER_10
kernel,"numpy.ones((n,m)",CLUSTER_1,CLUSTER_10
df,"pandas.read_csv('candyhierarchy2017.csv',encoding='latin-1')",CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(df),CLUSTER_5,CLUSTER_9
VIF_check,"pandas.DataFrame(VIF_check,index=x_train.columns,columns=['VIF'])",CLUSTER_5,CLUSTER_9
y_test,"pandas.DataFrame(y_test,columns=['y_test'])",CLUSTER_5,CLUSTER_9
predict_value,"pandas.DataFrame(predict_value,columns=['predict_value'])",CLUSTER_5,CLUSTER_9
new_pval,pandas.Series(index=excluded),CLUSTER_5,CLUSTER_9
f_vif,"pandas.Series(f_vif,index=vif_constant.columns)",CLUSTER_5,CLUSTER_9
df_yp,"pandas.concat([y_test,predict_value],axis=1)",CLUSTER_5,CLUSTER_9
df,"pandas.read_excel(""/Users/chouhouren/Desktop/論文資料_新/建模型資料/df_實際模型.xlsx"")",CLUSTER_5,CLUSTER_9
x,numpy.array(df[result]),CLUSTER_5,CLUSTER_9
y,numpy.array(df['新總價']),CLUSTER_5,CLUSTER_9
x,"numpy.array([np.concatenate((v,[1])",CLUSTER_5,CLUSTER_9
"y_true,y_pred",numpy.array(y_true),CLUSTER_5,CLUSTER_9
y_test,numpy.exp(y[test]),CLUSTER_5,CLUSTER_9
p,numpy.exp(p),CLUSTER_5,CLUSTER_9
RMSE,"numpy.sqrt(metrics.mean_squared_error(y_test,p)",CLUSTER_5,CLUSTER_9
df_yp['命中值'],"numpy.select(命中值,choices,default=0)",CLUSTER_5,CLUSTER_9
resid_kurtosis,scipy.stats.kurtosis(e),CLUSTER_5,CLUSTER_9
resid_skew,scipy.stats.skew(e),CLUSTER_5,CLUSTER_9
y_pred_norm,sklearn.preprocessing.scale(Enter_model.fittedvalues),CLUSTER_5,CLUSTER_9
e_norm,sklearn.preprocessing.scale(e),CLUSTER_5,CLUSTER_9
linreg,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_5,CLUSTER_9
MAE,"sklearn.metrics.mean_absolute_error(y_test,p)",CLUSTER_5,CLUSTER_9
R2,"sklearn.metrics.r2_score(y_test,p)",CLUSTER_5,CLUSTER_9
tumor_mean,"pandas.DataFrame(mean_tumor_v,columns=[""TumorVolume(mm3)",CLUSTER_1,CLUSTER_9
tumor_sem,"pandas.DataFrame(tumor_sem_v,columns=[""TumorVolume(mm3)",CLUSTER_1,CLUSTER_9
meta_mean,"pandas.DataFrame(mean_meta_v,columns=[""MetastaticSites""])",CLUSTER_1,CLUSTER_9
meta_sem,"pandas.DataFrame(meta_sem_v,columns=[""MetastaticSites""])",CLUSTER_1,CLUSTER_9
mice_count,"pandas.DataFrame(count_mice_v,columns=[""MouseID""])",CLUSTER_1,CLUSTER_9
merged_data,"pandas.merge(mouse_data,clinical_data,on=""MouseID"",how=""outer"")",CLUSTER_1,CLUSTER_9
mouse_data,pandas.read_csv(mouse_drug_data_to_load),CLUSTER_1,CLUSTER_9
clinical_data,pandas.read_csv(clinical_trial_data_to_load),CLUSTER_1,CLUSTER_9
x_axis,numpy.arange(len(percent_change),CLUSTER_1,CLUSTER_9
current_dir,os.getcwd(),CLUSTER_4,CLUSTER_11
psr_unit,"numpy.array([pulsarpos.x,pulsarpos.y,pulsarpos.z])",CLUSTER_4,CLUSTER_11
years,numpy.asarray(years),CLUSTER_4,CLUSTER_11
months,numpy.asarray(months),CLUSTER_4,CLUSTER_11
days,numpy.asarray(days),CLUSTER_4,CLUSTER_11
midnights,"numpy.zeros((4,len(dates[0])",CLUSTER_4,CLUSTER_11
dist,numpy.zeros(len(xyz),CLUSTER_4,CLUSTER_11
idxs,"numpy.where(np.logical_and(mjd_times<=time+order/2,
mjd_times>=time-order/2)",CLUSTER_4,CLUSTER_11
times_raw,"numpy.concatenate((dates,midnights)",CLUSTER_4,CLUSTER_11
delay,"numpy.dot(coords,psr_unit)",CLUSTER_4,CLUSTER_11
print(times_finalalt[np.where(remainders_finalalt,=numpy.amin(remainders_finalalt),CLUSTER_4,CLUSTER_11
xyz,numpy.transpose(raw_data[3:]),CLUSTER_4,CLUSTER_11
bary_coord,numpy.transpose(barytable[3:]),CLUSTER_4,CLUSTER_11
ha,numpy.arcsin(-np.sin(az),CLUSTER_4,CLUSTER_11
dist[i]+,numpy.sqrt(vect[0]**2+vect[1]**2+vect[2]**2),CLUSTER_4,CLUSTER_11
ha_error,"numpy.sqrt(np.power(times_err*0.001,2)",CLUSTER_4,CLUSTER_11
alt_error,numpy.sqrt((((-np.cos(ha),CLUSTER_4,CLUSTER_11
x_err,numpy.sqrt(((np.sin(dec),CLUSTER_4,CLUSTER_11
y_err,numpy.sqrt(((np.sin(dec),CLUSTER_4,CLUSTER_11
z_err,numpy.sqrt((np.cos(dec),CLUSTER_4,CLUSTER_11
delay_error,numpy.sqrt((coords[0]**2),CLUSTER_4,CLUSTER_11
btime_errors,"numpy.sqrt(np.power(toas[:,1]*10**(-6)",CLUSTER_4,CLUSTER_11
err_pdot,numpy.sqrt(cov[0][0]),CLUSTER_4,CLUSTER_11
delta,numpy.diff(delta),CLUSTER_4,CLUSTER_11
times_final,"numpy.delete(times_final,6)",CLUSTER_4,CLUSTER_11
remainders_final,"numpy.delete(remainders_final,6)",CLUSTER_4,CLUSTER_11
arr1_,"numpy.delete(arr1,m)",CLUSTER_4,CLUSTER_11
arr2_,"numpy.delete(arr2,m)",CLUSTER_4,CLUSTER_11
arr3_,"numpy.delete(arr3,m)",CLUSTER_4,CLUSTER_11
functional_form,numpy.poly1d(coef),CLUSTER_4,CLUSTER_11
"[coef,cov]","numpy.polyfit(times_finalalt,remainders_finalalt,2,cov=True)",CLUSTER_4,CLUSTER_11
barytable,"numpy.loadtxt(data_file,unpack=True)",CLUSTER_4,CLUSTER_11
toas,"numpy.loadtxt(data_file,usecols=(2,3)",CLUSTER_4,CLUSTER_11
"true_period,true_period_error",numpy.loadtxt(true_period_file),CLUSTER_4,CLUSTER_11
"true_periodalt,true_periodalt_error",numpy.loadtxt(true_periodalt_file),CLUSTER_4,CLUSTER_11
interp,"scipy.interpolate.lagrange(xvals,yvals)",CLUSTER_4,CLUSTER_11
cust_df,pandas.DataFrame(df.CustomerID.unique(),CLUSTER_7,CLUSTER_8
sse_df,"pandas.DataFrame(columns=['K','SSE'])",CLUSTER_7,CLUSTER_8
df,pandas.read_excel('OnlineRetail.xlsx'),CLUSTER_7,CLUSTER_8
cust_df['Recency_log'],numpy.log(cust_df.Recency+0.1),CLUSTER_7,CLUSTER_8
cust_df['Monetary_log'],numpy.log(cust_df.Sales+0.1),CLUSTER_7,CLUSTER_8
cust_df['Frequency_log'],numpy.log(cust_df.InvoiceNo),CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=2,
n_init=10,
max_iter=300)",CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=i,n_init=10,max_iter=300)",CLUSTER_7,CLUSTER_8
grouped_single['Math'].agg(min_score1,"pandas.NamedAgg(column='col1',aggfunc=R1)",CLUSTER_8,CLUSTER_3
max_score1,"pandas.NamedAgg(column='col2',aggfunc='max')",CLUSTER_8,CLUSTER_3
range_score2,"pandas.NamedAgg(column='col3',aggfunc=R2)",CLUSTER_8,CLUSTER_3
cuts,"pandas.cut(df['Math'],bins=bins)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('data/table.csv',index_col='ID')",CLUSTER_8,CLUSTER_3
data,collections.OrderedDict(),CLUSTER_8,CLUSTER_3
dist_freq_quantitativa_personalizada,"pandas.DataFrame({'frequencia':frequencia,'porcentagem(%)",CLUSTER_7,CLUSTER_9
Frequencia,"pandas.crosstab(dados.Sexo,
dados.Cor)",CLUSTER_7,CLUSTER_9
Frequencia,"pandas.crosstab(dados.Cor,
dados.Sexo,
normalize=True)",CLUSTER_7,CLUSTER_9
Frequencia,"pandas.crosstab(dados.Cor,
dados.Sexo,
aggfunc={'mean','median','max'},
values=dados.Renda)",CLUSTER_7,CLUSTER_9
Frequencia,"pandas.crosstab(dados.Cor,
dados.Sexo,
aggfunc={'mad','var','std'},
values=dados.Renda)",CLUSTER_7,CLUSTER_9
Frequencia,"pandas.crosstab(dados['AnosdeEstudo'],
dados['Sexo'],
aggfunc={'mean','median','max','std'},
values=dados.Renda)",CLUSTER_7,CLUSTER_9
dados,pandas.read_csv('dados.csv'),CLUSTER_7,CLUSTER_9
frequencia,"pandas.value_counts(pd.cut(x=dados.Renda,bins=classes,labels=labels,include_lowest=True)",CLUSTER_7,CLUSTER_9
percentual,"pandas.value_counts(pd.cut(x=dados.Renda,bins=classes,labels=labels,include_lowest=True)",CLUSTER_7,CLUSTER_9
ax,"seaborn.boxplot(x='Idade',data=dados,orient='h')",CLUSTER_7,CLUSTER_9
ax,"seaborn.boxplot(x='Altura',data=dados,orient='h')",CLUSTER_7,CLUSTER_9
ax,"seaborn.boxplot(x='AnosdeEstudo',data=dados.query('Renda<10000')",CLUSTER_7,CLUSTER_9
ax,"seaborn.boxplot(x='Renda',data=dados.query('Renda<20000')",CLUSTER_7,CLUSTER_9
ax,"seaborn.boxplot(x='Renda',y='Cor',hue='Sexo',data=dados.query('Renda<10000')",CLUSTER_7,CLUSTER_9
df_orig,pandas.DataFrame(data),CLUSTER_8,CLUSTER_4
start_time,time.time(),CLUSTER_6,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=n_images,
sharex=True,sharey=True,figsize=(20,2.5)",CLUSTER_6,CLUSTER_10
result,"pandas.concat([df,dhf],axis=0,sort=False)",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""../../../../../Data/SequenceCSVs/DENV4_DF.csv"",header=None)",CLUSTER_5,CLUSTER_5
dhf,"pandas.read_csv(""../../../../../Data/SequenceCSVs/DENV4_DHF.csv"",header=None)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.20,random_state=42)",CLUSTER_5,CLUSTER_5
clf,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"")",CLUSTER_5,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(y_test,y_predicted)",CLUSTER_5,CLUSTER_5
f1,"sklearn.metrics.f1_score(y_test,y_predicted,average='weighted')",CLUSTER_5,CLUSTER_5
precision,"sklearn.metrics.precision_score(y_test,y_predicted,average='weighted')",CLUSTER_5,CLUSTER_5
recall,"sklearn.metrics.recall_score(y_test,y_predicted,average='weighted')",CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(randn(5,4)",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame(np.random.randn(6,2)",CLUSTER_8,CLUSTER_3
spec_data,numpy.array(frame_specs),CLUSTER_4,CLUSTER_0
sig,numpy.asarray(sig),CLUSTER_4,CLUSTER_0
dtype,numpy.dtype(dtype),CLUSTER_4,CLUSTER_0
log_spec,"numpy.maximum(log_spec,-dynamic_range)",CLUSTER_4,CLUSTER_0
power,"numpy.square(magnitude,out=magnitude)",CLUSTER_4,CLUSTER_0
i,numpy.iinfo(sig.dtype),CLUSTER_4,CLUSTER_0
start_ts,time.time(),CLUSTER_4,CLUSTER_0
end_ts,time.time(),CLUSTER_4,CLUSTER_0
data,"pandas.read_csv('../../data/winequality-white.csv',sep=';')",CLUSTER_5,CLUSTER_1
df_main_data,pandas.read_csv('EURUSDterbaru_sw_5.csv'),CLUSTER_5,CLUSTER_5
tmp_y_pred,"numpy.sum(f[1:]*x_train,axis=1)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
x,"numpy.arange(-6.0,6.0,0.01)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-5,5,100)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-8,5,100)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure('GradientDescent:LearningRate',(12,4,)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure('GradientDescent:Momentum',(16,16,)",CLUSTER_1,CLUSTER_10
df,pandas.DataFrame(data),CLUSTER_8,CLUSTER_4
df2,"pandas.DataFrame(data,columns=['AAA','CCC'])",CLUSTER_8,CLUSTER_4
initializer,tf.random_normal_initializer(stddev=numpy.sqrt(2.0/n),CLUSTER_2,CLUSTER_7
weights,numpy.load(weight_file),CLUSTER_2,CLUSTER_7
start,time.time(),CLUSTER_2,CLUSTER_7
end,time.time(),CLUSTER_2,CLUSTER_7
Graph,"collections.namedtuple('Graph',export_nodes)",CLUSTER_2,CLUSTER_7
chars,"numpy.array([vocab_to_int[c]forcintext],dtype=np.int32)",CLUSTER_2,CLUSTER_7
x,"numpy.zeros((1,1)",CLUSTER_2,CLUSTER_7
p,numpy.squeeze(preds),CLUSTER_2,CLUSTER_7
x,"numpy.stack(np.split(x,batch_size)",CLUSTER_2,CLUSTER_7
y,"numpy.stack(np.split(y,batch_size)",CLUSTER_2,CLUSTER_7
word_p,pandas.DataFrame(list(word_p.items(),CLUSTER_5,CLUSTER_5
word_n,pandas.DataFrame(list(word_n.items(),CLUSTER_5,CLUSTER_5
word_all,"pandas.merge(word_p[['TF_p','word']],word_n[['TF_n','word']],how='inner')",CLUSTER_5,CLUSTER_5
df,pandas.read_csv('data/sentiment.csv'),CLUSTER_5,CLUSTER_5
word_all['log_ratio'],numpy.log(word_all['positive']/word_all['negative']),CLUSTER_5,CLUSTER_5
X_reduced,sklearn.decomposition.PCA(n_components=2),CLUSTER_5,CLUSTER_5
svm_model,sklearn.svm.SVC(),CLUSTER_5,CLUSTER_5
conf,"sklearn.metrics.confusion_matrix(test['tag'],test['predict_svm'],labels=['P','N'])",CLUSTER_5,CLUSTER_5
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
experiences,"random.sample(self.memory,k=self.batch_size)",CLUSTER_6,CLUSTER_10
self.seed,random.seed(seed),CLUSTER_6,CLUSTER_10
self.seed,random.seed(seed),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
self.experience,"collections.namedtuple(""Experience"",field_names=[""state"",""action"",""reward"",""next_state"",""done""])",CLUSTER_6,CLUSTER_10
self.memory,collections.deque(maxlen=buffer_size),CLUSTER_6,CLUSTER_10
scores_window,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_10
r,random.random(),CLUSTER_10,CLUSTER_4
test_data_small,"os.listdir(""./test_data_small/"")",CLUSTER_4,CLUSTER_0
img,numpy.array(img),CLUSTER_4,CLUSTER_0
X_train_mean,"numpy.mean(X_train,axis=0)",CLUSTER_4,CLUSTER_0
lr_reducer,ReduceLROnPlateau(factor=numpy.sqrt(0.1),CLUSTER_4,CLUSTER_0
X_result,numpy.stack(X_result),CLUSTER_4,CLUSTER_0
n_classes,numpy.unique(y_train),CLUSTER_4,CLUSTER_0
"unique_data_values,counts_per_classes","numpy.unique(unique_data,return_counts=True)",CLUSTER_4,CLUSTER_0
"unique_data_values,counts_per_classes","numpy.unique(unique_data,return_counts=True)",CLUSTER_4,CLUSTER_0
"unique_data_values,counts_per_classes","numpy.unique(unique_data,return_counts=True)",CLUSTER_4,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_0
ax,matplotlib.pyplot.subplot(222),CLUSTER_4,CLUSTER_0
"figure,axes","matplotlib.pyplot.subplots(4,10,figsize=(25,15)",CLUSTER_4,CLUSTER_0
ids,"random.randint(0,n_train-1)",CLUSTER_4,CLUSTER_0
final_data,"numpy.ndarray(shape=(20998,49)",CLUSTER_9,CLUSTER_2
src,"numpy.array(map(lambdax:(x[1],x[0])",CLUSTER_9,CLUSTER_2
res,numpy.array([]),CLUSTER_9,CLUSTER_2
index_range,numpy.array([[i]foriinxrange(20998),CLUSTER_9,CLUSTER_2
res,"numpy.append(res,part_res,axis=0)",CLUSTER_9,CLUSTER_2
res,numpy.load('%s.npy'%nominator),CLUSTER_9,CLUSTER_2
data,"pandas.DataFrame(data=final_data,columns=columns_for_csv)",CLUSTER_9,CLUSTER_2
df1,"pandas.DataFrame(data,index)",CLUSTER_8,CLUSTER_4
ds1,"pandas.Series([2,4,6,8,10])",CLUSTER_8,CLUSTER_4
ds2,"pandas.Series([1,3,5,7,9])",CLUSTER_8,CLUSTER_4
vticks,scipy.signal.find_peaks(vlines),CLUSTER_10,CLUSTER_4
hticks,scipy.signal.find_peaks(hlines),CLUSTER_10,CLUSTER_4
hgrad,"scipy.signal.convolve2d(blurred,horiz)",CLUSTER_10,CLUSTER_4
vgrad,"scipy.signal.convolve2d(blurred,vert)",CLUSTER_10,CLUSTER_4
data,"pandas.read_csv(filename,sep='\t')",CLUSTER_0,CLUSTER_1
test,"pandas.read_csv('data/test.tsv',sep='\t')",CLUSTER_0,CLUSTER_1
result_vector,numpy.zeros(dict_size),CLUSTER_0,CLUSTER_1
"ts,nts",numpy.unique([itemforsublistinX_trainforiteminsublist.split(''),CLUSTER_0,CLUSTER_1
"ts,nts","numpy.unique([itemforsublistiny_trainforiteminsublist],return_counts=True)",CLUSTER_0,CLUSTER_1
text,"re.sub(REPLACE_BY_SPACE_RE,'',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(BAD_SYMBOLS_RE,'',text)",CLUSTER_0,CLUSTER_1
REPLACE_BY_SPACE_RE,re.compile('[/(),CLUSTER_0,CLUSTER_1
BAD_SYMBOLS_RE,"re.compile('[^0-9a-z
STOPWORDS=set(stopwords.words('english')",CLUSTER_0,CLUSTER_1
mlb,sklearn.preprocessing.MultiLabelBinarizer(classes=sorted(tags_counts.keys(),CLUSTER_0,CLUSTER_1
model,sklearn.multiclass.OneVsRestClassifier(estimator=LogisticRegression(max_iter=200),CLUSTER_0,CLUSTER_1
model,sklearn.multiclass.OneVsRestClassifier(estimator=model),CLUSTER_0,CLUSTER_1
best_model,sklearn.multiclass.OneVsRestClassifier(estimator=best_model),CLUSTER_0,CLUSTER_1
model,OneVsRestClassifier(estimator=sklearn.linear_model.LogisticRegression(max_iter=200),CLUSTER_0,CLUSTER_1
model,"sklearn.linear_model.LogisticRegression(penalty=params['penalty'],
C=params['C'],
solver='lbfgs'ifparams['penalty']=='l2'else'liblinear',
random_state=20)",CLUSTER_0,CLUSTER_1
best_model,"sklearn.linear_model.LogisticRegression(penalty='l2',
C=best['C'],
solver='lbfgs',
random_state=20)",CLUSTER_0,CLUSTER_1
"app_train[""AMT_GOODS_PRICE""]","pandas.cut(app_train[""AMT_GOODS_PRICE""],10)",CLUSTER_4,CLUSTER_5
app_train,pandas.read_csv(f_app_train),CLUSTER_4,CLUSTER_5
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_5
m2,"pandas.DataFrame(m[[""age_band"",""item_male"",""item_female"",""cost_male"",""cost_female""]].set_index(""age_band"")",CLUSTER_7,CLUSTER_3
p2,"pandas.DataFrame(pop.set_index([""year"",""gender""])",CLUSTER_7,CLUSTER_3
p3,"pandas.DataFrame(p2.groupby([""year"",""age_band"",""gender""])",CLUSTER_7,CLUSTER_3
starpu,"pandas.DataFrame(p3.groupby([""year""])",CLUSTER_7,CLUSTER_3
l3,"pandas.DataFrame(l3.set_index([""year"",""para_current""])",CLUSTER_7,CLUSTER_3
l3,"pandas.DataFrame(l3.set_index([""year"",""measure"",""para_current""])",CLUSTER_7,CLUSTER_3
sort_order,pandas.Series(dft.para_current),CLUSTER_7,CLUSTER_3
sort_order2,pandas.Series(dft.para_current),CLUSTER_7,CLUSTER_3
p2['age_band'],"numpy.select(conditions,choices,default='75+')",CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(15,35)",CLUSTER_7,CLUSTER_3
ax,"matplotlib.pyplot.subplot(5,1,i[0]+1)",CLUSTER_7,CLUSTER_3
freq,numpy.arange(len(spec),CLUSTER_3,CLUSTER_6
freq,numpy.array(labeled_psds[i][0]),CLUSTER_3,CLUSTER_6
psd,numpy.array(labeled_psds[i][1]),CLUSTER_3,CLUSTER_6
freq,numpy.array(unlabeled_psds[i][0]),CLUSTER_3,CLUSTER_6
psd,numpy.array(unlabeled_psds[i][1]),CLUSTER_3,CLUSTER_6
grid,numpy.array([s[i]foriinrange(12),CLUSTER_3,CLUSTER_6
amp,numpy.fromstring(aif.readframes(nframes),CLUSTER_3,CLUSTER_6
response,requests.get(url),CLUSTER_12,CLUSTER_10
response,requests.get(url),CLUSTER_12,CLUSTER_10
x,numpy.array(x),CLUSTER_12,CLUSTER_10
img_array,numpy.asarray(img),CLUSTER_12,CLUSTER_10
img_array,numpy.asarray(img),CLUSTER_12,CLUSTER_10
cls_token_emb,"numpy.array(f1[0][""embs""])",CLUSTER_3,CLUSTER_6
emb,"numpy.array(f1[i][""embs""])",CLUSTER_3,CLUSTER_6
all_X,numpy.array(batch),CLUSTER_3,CLUSTER_6
all_X,numpy.array(batch),CLUSTER_3,CLUSTER_6
cls_token_emb,"numpy.concatenate([cls_token_emb,emb])",CLUSTER_3,CLUSTER_6
cls_token_emb,"numpy.concatenate([cls_token_emb,prev])",CLUSTER_3,CLUSTER_6
a,numpy.ones(10),CLUSTER_3,CLUSTER_6
b,numpy.ones(10),CLUSTER_3,CLUSTER_6
all_X,"numpy.vstack([all_X,np.array(batch)",CLUSTER_3,CLUSTER_6
all_X,"numpy.vstack([all_X,np.array(batch)",CLUSTER_3,CLUSTER_6
row,"numpy.pad(row,pad_width=(0,pad_len)",CLUSTER_3,CLUSTER_6
f1,json.loads(embline),CLUSTER_3,CLUSTER_6
inputs,"numpy.array(input_list,ndmin=2)",CLUSTER_1,CLUSTER_9
targets,"numpy.array(final_list,ndmin=2)",CLUSTER_1,CLUSTER_9
inputs,"numpy.array(input_list,ndmin=2)",CLUSTER_1,CLUSTER_9
scorecard,numpy.asarray(scorecard),CLUSTER_1,CLUSTER_9
targets,numpy.zeros(outputnodes),CLUSTER_1,CLUSTER_9
hidden_inputs,"numpy.dot(self.wih,inputs)",CLUSTER_1,CLUSTER_9
final_inputs,"numpy.dot(self.who,hidden_outputs)",CLUSTER_1,CLUSTER_9
hidden_error,"numpy.dot(self.who.T,output_error)",CLUSTER_1,CLUSTER_9
hidden_inputs,"numpy.dot(self.wih,inputs)",CLUSTER_1,CLUSTER_9
final_inputs,"numpy.dot(self.who,hidden_outputs)",CLUSTER_1,CLUSTER_9
result,numpy.argmax(result),CLUSTER_1,CLUSTER_9
coeffecients,"pandas.DataFrame(lm.coef_,X.columns)",CLUSTER_7,CLUSTER_5
customers,"pandas.read_csv(""EcommerceCustomers"")",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
y,numpy.squeeze(Y),CLUSTER_7,CLUSTER_8
X,"numpy.linspace(start=0,stop=10,num=n)",CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_7,CLUSTER_8
features,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_out,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
titanic,"pandas.concat([titanic,title_dummies],axis=1)",CLUSTER_7,CLUSTER_8
titanic,"pandas.concat([titanic,embarked_dummies],axis=1)",CLUSTER_7,CLUSTER_8
titanic,"pandas.concat([titanic,cabin_dummies],axis=1)",CLUSTER_7,CLUSTER_8
titanic,"pandas.concat([titanic,Pclass_dummies],axis=1)",CLUSTER_7,CLUSTER_8
titanic,"pandas.concat([titanic,ticket_dummies],axis=1)",CLUSTER_7,CLUSTER_8
title_dummies,"pandas.get_dummies(titanic[""Title""],prefix=""Title-"")",CLUSTER_7,CLUSTER_8
embarked_dummies,"pandas.get_dummies(titanic[""Embarked""],prefix=""Embarked-"")",CLUSTER_7,CLUSTER_8
cabin_dummies,"pandas.get_dummies(titanic[""Cabin""],prefix=""Cabin-"")",CLUSTER_7,CLUSTER_8
Pclass_dummies,"pandas.get_dummies(titanic[""Pclass""],prefix=""Pclass-"")",CLUSTER_7,CLUSTER_8
ticket_dummies,"pandas.get_dummies(titanic[""Ticket""],prefix=""Ticket"")",CLUSTER_7,CLUSTER_8
titanic,"pandas.read_csv(""./Datasets/Titanic/train.csv"")",CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(""./Datasets/Titanic/train.csv"")",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(""./Datasets/Titanic/test.csv"")",CLUSTER_7,CLUSTER_8
aux,"pandas.read_csv(""./Datasets/Titanic/test.csv"")",CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=50,n_jobs=-1,max_features=""sqrt"")",CLUSTER_7,CLUSTER_8
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
forest,sklearn.ensemble.RandomForestClassifier(n_jobs=-1),CLUSTER_7,CLUSTER_8
model,"sklearn.feature_selection.SelectFromModel(clf,prefit=True)",CLUSTER_7,CLUSTER_8
cross_validation,sklearn.model_selection.StratifiedKFold(n_splits=5),CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(forest,scoring=""accuracy"",param_grid=para_grid,cv=cross_validation,verbose=1,n_jobs=-1)",CLUSTER_7,CLUSTER_8
xval,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5,scoring=scoring)",CLUSTER_7,CLUSTER_8
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
logreg_cv,sklearn.linear_model.LogisticRegressionCV(),CLUSTER_7,CLUSTER_8
page,"requests.get(""https://www.linkedin.com/jobs/view/791327763/"")",CLUSTER_0,CLUSTER_2
d,collections.OrderedDict(sorted(w_dict.items(),CLUSTER_0,CLUSTER_2
cv_df,pandas.DataFrame(cv_all.todense(),CLUSTER_0,CLUSTER_2
tips,pandas.read_csv(url),CLUSTER_7,CLUSTER_3
g,"seaborn.FacetGrid(tips,col=""time"")",CLUSTER_7,CLUSTER_3
g,"seaborn.FacetGrid(tips,col=""sex"",hue=""smoker"")",CLUSTER_7,CLUSTER_3
ttbill,seaborn.distplot(tips.total_bill),CLUSTER_7,CLUSTER_3
nhl,pandas.read_csv(local_csv),CLUSTER_7,CLUSTER_3
Arr,numpy.arange(10),CLUSTER_3,CLUSTER_6
array_data1,"numpy.array([1.4,7,8,12.3])",CLUSTER_3,CLUSTER_6
array2,numpy.array(numpy.array_data2),CLUSTER_3,CLUSTER_6
Array1,numpy.array(numpy.array_data1),CLUSTER_3,CLUSTER_6
arr1,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_3,CLUSTER_6
Arr1,numpy.array(arange(10),CLUSTER_3,CLUSTER_6
Arr_Names,"numpy.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])",CLUSTER_3,CLUSTER_6
Rand_Set,numpy.array(arange(Len1),CLUSTER_3,CLUSTER_6
Arra1,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_3,CLUSTER_6
Bool_Arr,"numpy.array([True,False,True,False,True])",CLUSTER_3,CLUSTER_6
X_Arr,"numpy.array([1,2,3,4,5])",CLUSTER_3,CLUSTER_6
Y_Arr,"numpy.array([10,20,30,40,50])",CLUSTER_3,CLUSTER_6
Arr_Stat,"numpy.array([[1,2,3],[4,5,6],[7,8,9]])",CLUSTER_3,CLUSTER_6
Arr4,"numpy.array([10,2,34,5])",CLUSTER_3,CLUSTER_6
Names_Arr,"numpy.array([""Jim"",""Bob"",""Roy"",""Rajesh"",""Roy"",""Kumar"",""Jeet"",""Roy"",""Joy""])",CLUSTER_3,CLUSTER_6
Zero_Array,"numpy.zeros((3,6)",CLUSTER_3,CLUSTER_6
Arr3_Chg,"numpy.where(Arr3>0,2,-2)",CLUSTER_3,CLUSTER_6
Arr_Mean,numpy.mean(Arr_Stat),CLUSTER_3,CLUSTER_6
Arr_Sum,numpy.sum(Arr_Stat),CLUSTER_3,CLUSTER_6
Max_XY,"numpy.maximum(x,y)",CLUSTER_3,CLUSTER_6
Sqrt_Arr,numpy.sqrt(Arr),CLUSTER_3,CLUSTER_6
Names_Arr_Unq,numpy.unique(Names_Arr),CLUSTER_3,CLUSTER_6
DATA,collections.OrderedDict(),CLUSTER_2,CLUSTER_6
data,"pandas.concat([data_date,data_raw,data_null,data_tag,week_df],axis=1,copy=False)",CLUSTER_5,CLUSTER_1
data_date,pandas.read_csv('../../preprocess_data/train_x_date.csv'),CLUSTER_5,CLUSTER_1
data_null,"pandas.read_csv('../../preprocess_data_new/train_ax_row_null.csv',nrows=33465)",CLUSTER_5,CLUSTER_1
data_tag,"pandas.read_csv('../../preprocess_data/train_x_33465.csv',usecols=['tag'])",CLUSTER_5,CLUSTER_1
data_label,"pandas.read_csv('../../preprocess_data/train_y_33465.csv',usecols=['label'])",CLUSTER_5,CLUSTER_1
rfc,"sklearn.ensemble.RandomForestClassifier(min_samples_split=100,n_jobs=20,
max_depth=50,min_samples_leaf=20,max_features='sqrt',class_weight='balanced',random_state=18)",CLUSTER_5,CLUSTER_1
gsearch2,"GridSearchCV(estimator=sklearn.ensemble.RandomForestClassifier(n_estimators=1400,n_jobs=40,min_samples_split=100,
max_features='sqrt',oob_score=True,random_state=18)",CLUSTER_5,CLUSTER_1
gsearch3,"GridSearchCV(estimator=sklearn.ensemble.RandomForestClassifier(n_estimators=1400,n_jobs=40,max_depth=70,min_samples_split=100,min_samples_leaf=20,
max_features='sqrt',oob_score=True,random_state=18)",CLUSTER_5,CLUSTER_1
gsearch1,"sklearn.model_selection.GridSearchCV(estimator=rfc,param_grid=param_test1,scoring='roc_auc',cv=5,n_jobs=4)",CLUSTER_5,CLUSTER_1
gsearch2,"sklearn.model_selection.GridSearchCV(estimator=RandomForestClassifier(n_estimators=1400,n_jobs=40,min_samples_split=100,
max_features='sqrt',oob_score=True,random_state=18)",CLUSTER_5,CLUSTER_1
gsearch3,"sklearn.model_selection.GridSearchCV(estimator=RandomForestClassifier(n_estimators=1400,n_jobs=40,max_depth=70,min_samples_split=100,min_samples_leaf=20,
max_features='sqrt',oob_score=True,random_state=18)",CLUSTER_5,CLUSTER_1
scratch_dir,os.getenv('SCRATCH'),CLUSTER_7,CLUSTER_5
scratch_dir,os.getenv('RMGpy'),CLUSTER_7,CLUSTER_5
performance,"pandas.DataFrame(data=zip(y,predictions)",CLUSTER_7,CLUSTER_5
cm_df,"pandas.DataFrame(data=cm,columns=['S','FP','F1','F2'])",CLUSTER_7,CLUSTER_5
log_reg,sklearn.linear_model.LogisticRegression(class_weight='balanced'),CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y,predictions,labels=['S','FP','F1','F2'])",CLUSTER_7,CLUSTER_5
users,"pandas.read_csv('https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user',
sep='|',index_col='user_id')",CLUSTER_8,CLUSTER_3
x,"numpy.arange(-5,5)",CLUSTER_3,CLUSTER_6
my2darr,"numpy.arange(1,13,1)",CLUSTER_3,CLUSTER_6
my2darr,"numpy.arange(1,13,1)",CLUSTER_3,CLUSTER_6
x,"numpy.arange(-2,3)",CLUSTER_3,CLUSTER_6
oneDim,"numpy.array([1.0,2,3,4,5])",CLUSTER_3,CLUSTER_6
twoDim,"numpy.array([[1,2],[3,4],[5,6],[7,8]])",CLUSTER_3,CLUSTER_6
arrFromTuple,"numpy.array([(1,'a',3.0)",CLUSTER_3,CLUSTER_6
x,"numpy.array([1,2,3,4,5])",CLUSTER_3,CLUSTER_6
x,"numpy.array([2,4,6,8,10])",CLUSTER_3,CLUSTER_6
y,"numpy.array([1,2,3,4,5])",CLUSTER_3,CLUSTER_6
my2darr,numpy.array(my2dlist),CLUSTER_3,CLUSTER_6
y,"numpy.array([-1.4,0.4,-3.2,2.5,3.4])",CLUSTER_3,CLUSTER_6
y,"numpy.array([-3.2,-1.4,0.4,2.5,3.4])",CLUSTER_3,CLUSTER_6
A,"numpy.array([[0,0,0],[10,10,10],[20,20,20],[30,30,30]])",CLUSTER_3,CLUSTER_6
B,"numpy.array([[0,1,2],[0,1,2],[0,1,2],[0,1,2]])",CLUSTER_3,CLUSTER_6
A,"numpy.array([[0,0,0],[10,10,10],[20,20,20],[30,30,30]])",CLUSTER_3,CLUSTER_6
B,"numpy.array([0,1,2])",CLUSTER_3,CLUSTER_6
A,"numpy.array([[0],[10],[20],[30]])",CLUSTER_3,CLUSTER_6
B,"numpy.array([0,1,2])",CLUSTER_3,CLUSTER_6
detC,numpy.linalg.det(C),CLUSTER_3,CLUSTER_6
"S,U",numpy.linalg.eig(C),CLUSTER_3,CLUSTER_6
invC,numpy.linalg.inv(C),CLUSTER_3,CLUSTER_6
number,"random.randint(1,100)",CLUSTER_3,CLUSTER_10
values[r][c],"random.randint(1,100)",CLUSTER_3,CLUSTER_10
lot[i],"random.randint(0,9)",CLUSTER_3,CLUSTER_10
num1,"random.randrange(0,1000)",CLUSTER_3,CLUSTER_10
num2,"random.randrange(0,1000)",CLUSTER_3,CLUSTER_10
n,"random.uniform(1.0,10.0)",CLUSTER_3,CLUSTER_10
model,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_10
results,pandas.DataFrame(results),CLUSTER_1,CLUSTER_3
start_date,"pandas.to_datetime(start,dayfirst=True)",CLUSTER_1,CLUSTER_3
end_date,"pandas.to_datetime(end,dayfirst=True)",CLUSTER_1,CLUSTER_3
first_date,pandas.to_datetime(data.index[0]),CLUSTER_1,CLUSTER_3
last_date,pandas.to_datetime(data.index[-1]),CLUSTER_1,CLUSTER_3
xs,"numpy.array([1.0,2.0,3.0,4.0,5.0,6.0],dtype=float)",CLUSTER_2,CLUSTER_7
ys,"numpy.array([1.0,1.5,2.0,2.5,3.0,3.5],dtype=float)",CLUSTER_2,CLUSTER_7
CS,"ax.contourf(timescales,timescales,cort0_crh_numeric,levels=numpy.array([0.13,0.22])",CLUSTER_1,CLUSTER_10
CS,"ax.contourf(timescales,timescales,cort0_crh_numeric,levels=numpy.array([0.02,0.031])",CLUSTER_1,CLUSTER_10
sweden_amp_levels,"numpy.array([0.13,0.22])",CLUSTER_1,CLUSTER_10
clalit_amp_levels,"numpy.array([0.13,0.22])",CLUSTER_1,CLUSTER_10
out,numpy.zeros(inp.shape[0]),CLUSTER_1,CLUSTER_10
cort_phase,numpy.zeros(n),CLUSTER_1,CLUSTER_10
cort_amp,numpy.zeros(n),CLUSTER_1,CLUSTER_10
ACTH_phase,numpy.zeros(n),CLUSTER_1,CLUSTER_10
ACTH_amp,numpy.zeros(n),CLUSTER_1,CLUSTER_10
phia_crh_numeric,"numpy.zeros([timescales.shape[0],timescales.shape[0]])",CLUSTER_1,CLUSTER_10
phip_crh_numeric,"numpy.zeros([timescales.shape[0],timescales.shape[0]])",CLUSTER_1,CLUSTER_10
P0_crh_numeric,"numpy.zeros([timescales.shape[0],timescales.shape[0]])",CLUSTER_1,CLUSTER_10
A0_crh_numeric,"numpy.zeros([timescales.shape[0],timescales.shape[0]])",CLUSTER_1,CLUSTER_10
eig_crh_numeric,"numpy.zeros([timescales.shape[0],timescales.shape[0]])",CLUSTER_1,CLUSTER_10
cort0_crh_numeric,"numpy.zeros([timescales.shape[0],timescales.shape[0]])",CLUSTER_1,CLUSTER_10
phicort_crh_numeric,"numpy.zeros([timescales.shape[0],timescales.shape[0]])",CLUSTER_1,CLUSTER_10
ACTH0_crh_numeric,"numpy.zeros([timescales.shape[0],timescales.shape[0]])",CLUSTER_1,CLUSTER_10
phiACTH_crh_numeric,"numpy.zeros([timescales.shape[0],timescales.shape[0]])",CLUSTER_1,CLUSTER_10
phase,"numpy.arctan2(amp2*sindelta,(amp1+amp2*cosdelta)",CLUSTER_1,CLUSTER_10
phase,"numpy.arctan2(amp2*sindelta,(amp1+amp2*cosdelta)",CLUSTER_1,CLUSTER_10
cosdelta,numpy.cos(delta),CLUSTER_1,CLUSTER_10
cosdelta,numpy.cos(delta),CLUSTER_1,CLUSTER_10
sweden_phase_likelihood,"numpy.log(gaussian(phicort_crh_numeric*12/2/np.pi,sweden_phase_mean,sweden_phase_std)",CLUSTER_1,CLUSTER_10
clalit_phase_likelihood,"numpy.log(gaussian(phicort_crh_numeric*12/2/np.pi,clalit_phase_mean,clalit_phase_std)",CLUSTER_1,CLUSTER_10
pregnancy_likelihood,numpy.log(gaussian(abs(eig_crh_numeric),CLUSTER_1,CLUSTER_10
sweden_amp_likelihood,"numpy.log(gaussian(cort0_crh_numeric,sweden_amp_mean,sweden_amp_std)",CLUSTER_1,CLUSTER_10
clalit_amp_likelihood,"numpy.log(gaussian(cort0_crh_numeric,clalit_amp_mean,clalit_amp_std)",CLUSTER_1,CLUSTER_10
phase,"numpy.mod(phi1+phase,2*np.pi)",CLUSTER_1,CLUSTER_10
phase,"numpy.mod(phi1+phase,2*np.pi)",CLUSTER_1,CLUSTER_10
sindelta,numpy.sin(delta),CLUSTER_1,CLUSTER_10
sindelta,numpy.sin(delta),CLUSTER_1,CLUSTER_10
amp,numpy.sqrt(amp1**2+amp2**2+2*amp1*amp2*cosdelta),CLUSTER_1,CLUSTER_10
amp,numpy.sqrt(amp1**2+amp2**2+2*amp1*amp2*cosdelta),CLUSTER_1,CLUSTER_10
inp,"numpy.logspace(-2,2,100)",CLUSTER_1,CLUSTER_10
timescales,"numpy.logspace(-0.5,1,40)",CLUSTER_1,CLUSTER_10
"a_ind,p_ind","numpy.unravel_index(np.argmax(sampled_like,axis=None)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,16)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,14)",CLUSTER_1,CLUSTER_10
ax,"matplotlib.pyplot.subplot(2,3,1)",CLUSTER_1,CLUSTER_10
ax,"matplotlib.pyplot.subplot(2,3,2)",CLUSTER_1,CLUSTER_10
ax,"matplotlib.pyplot.subplot(2,3,3)",CLUSTER_1,CLUSTER_10
ax,"matplotlib.pyplot.subplot(2,2,3)",CLUSTER_1,CLUSTER_10
ax,"matplotlib.pyplot.subplot(2,2,4)",CLUSTER_1,CLUSTER_10
data,"pandas.read_csv('sessionsbysource.tsv',sep='\t',parse_dates=[1])",CLUSTER_1,CLUSTER_9
data,"pandas.read_csv(file,sep='\t',parse_dates=[1])",CLUSTER_1,CLUSTER_9
seasonal_order,"numpy.insert(seasonal_order,3,7)",CLUSTER_1,CLUSTER_9
seasonal_order,"numpy.insert(seasonal_order,3,7)",CLUSTER_1,CLUSTER_9
seasonal_order,"numpy.insert(seasonal_order,3,7)",CLUSTER_1,CLUSTER_9
seasonal_order,"numpy.insert(seasonal_order,3,7)",CLUSTER_1,CLUSTER_9
res,"scipy.optimize.brute(test_arima,grid,args=(x,)",CLUSTER_1,CLUSTER_9
res,"scipy.optimize.brute(test_arima,grid,args=(x,)",CLUSTER_1,CLUSTER_9
rmse+,math.sqrt(r**2),CLUSTER_1,CLUSTER_9
rmse+,math.sqrt(r**2),CLUSTER_1,CLUSTER_9
x_np,numpy.array(x),CLUSTER_4,CLUSTER_7
curr_node,numpy.array([]),CLUSTER_4,CLUSTER_7
c_final,numpy.array(c_final),CLUSTER_4,CLUSTER_7
curr_node,"numpy.concatenate((s,g,cond)",CLUSTER_4,CLUSTER_7
c_samples,"numpy.float32(create_samples(G,directory)",CLUSTER_4,CLUSTER_7
start,"numpy.loadtxt(directory+""/start_node.txt"")",CLUSTER_4,CLUSTER_7
goal,"numpy.loadtxt(directory+""/goal_node.txt"")",CLUSTER_4,CLUSTER_7
cond,"numpy.loadtxt(directory+""/conditions.txt"")",CLUSTER_4,CLUSTER_7
path_,os.getcwd(),CLUSTER_4,CLUSTER_7
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(figsize=(6,9)",CLUSTER_6,CLUSTER_10
X_scaled,pandas.DataFrame(scaler.transform(X),CLUSTER_11,CLUSTER_9
X_pick_df,pandas.DataFrame(X_pick),CLUSTER_11,CLUSTER_9
X_pick_df_1,pandas.DataFrame(X_pick_1),CLUSTER_11,CLUSTER_9
X_scaled_1,pandas.DataFrame(scaler.transform(real_test_data[cols]),CLUSTER_11,CLUSTER_9
result,"pandas.DataFrame(zip(real_test_data.index,logistic[:,1])",CLUSTER_11,CLUSTER_9
X_fin,"pandas.concat([X_log,X_pick_df],axis=1)",CLUSTER_11,CLUSTER_9
X_fin_1,"pandas.concat([X_scaled_1[cols],X_pick_df_1],axis=1)",CLUSTER_11,CLUSTER_9
features,"pandas.read_csv(u'features.csv',
index_col='match_id')",CLUSTER_11,CLUSTER_9
real_test_data,"pandas.read_csv(u'features_test.csv',
index_col='match_id')",CLUSTER_11,CLUSTER_9
X_pick,"numpy.zeros((X.shape[0],N)",CLUSTER_11,CLUSTER_9
X_pick_1,"numpy.zeros((NN,N)",CLUSTER_11,CLUSTER_9
y_score_train,numpy.empty(len(clf_grid.best_estimator_.estimators_),CLUSTER_11,CLUSTER_9
y_score_test,numpy.empty(len(clf_grid.best_estimator_.estimators_),CLUSTER_11,CLUSTER_9
start_time,datetime.datetime.now(),CLUSTER_11,CLUSTER_9
clf,"sklearn.ensemble.GradientBoostingClassifier(verbose=0,
random_state=1)",CLUSTER_11,CLUSTER_9
clf_1,"sklearn.ensemble.GradientBoostingClassifier(verbose=0,
random_state=1,
n_estimators=30)",CLUSTER_11,CLUSTER_9
clf_logreg,"sklearn.linear_model.LogisticRegression(random_state=1,verbose=0)",CLUSTER_11,CLUSTER_9
y_score_train[i],"sklearn.metrics.roc_auc_score(y_train,x)",CLUSTER_11,CLUSTER_9
y_score_test[i],"sklearn.metrics.roc_auc_score(y_test,x)",CLUSTER_11,CLUSTER_9
"fpr,tpr,_","sklearn.metrics.roc_curve(y_train,y_train_score)",CLUSTER_11,CLUSTER_9
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,y_test_score)",CLUSTER_11,CLUSTER_9
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_11,CLUSTER_9
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_11,CLUSTER_9
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_11,CLUSTER_9
cm,numpy.array(cf),CLUSTER_7,CLUSTER_3
bins,"numpy.array([0,0.5,1])",CLUSTER_7,CLUSTER_3
cm,"numpy.histogram2d(actual_data,pred_val,bins=bins)",CLUSTER_7,CLUSTER_3
cf,pandas.DataFrame(result_log.pred_table(),CLUSTER_7,CLUSTER_3
cf,pandas.DataFrame(cm[0]),CLUSTER_7,CLUSTER_3
data,pandas.read_csv('2.02.Binarypredictors.csv'),CLUSTER_7,CLUSTER_3
test,pandas.read_csv('2.03.Testdataset.csv'),CLUSTER_7,CLUSTER_3
hotspot_df,pandas.read_csv('hotspot.csv'),CLUSTER_7,CLUSTER_3
hotspot_df,"pandas.read_sql_query(""SELECTNH_NAMEAS'Neighborhood',AVE_TEMP_FAS'AverageSurfaceTemperature',CANOPY_PERCENTAS'CanopyPercent',IMP_BARESOIL_PERCENTAS'ImperviousGround&BareSoilPercent',RATIO_IPAS'RatioofImpervioustoPerviousSurfaces'FROMhotspot_tableWHERECANOPY_PERCENT>0"",con)",CLUSTER_7,CLUSTER_3
plot,"seaborn.regplot(x='RatioofImpervioustoPerviousSurfaces',y='AverageSurfaceTemperature',data=hotspot_df)",CLUSTER_7,CLUSTER_3
train,pandas.read_csv('..//..//../bases/new_training_variants.csv'),CLUSTER_0,CLUSTER_1
test,pandas.read_csv('..//..//../bases/new_test_variants.csv'),CLUSTER_0,CLUSTER_1
counter_dict[classes],collections.Counter(terms_per_class[classes]),CLUSTER_0,CLUSTER_1
'''terms_per_class,collections.defaultdict(list),CLUSTER_0,CLUSTER_1
lasso,"sklearn.linear_model.Lasso(alpha=.002,random_state=3)",CLUSTER_0,CLUSTER_1
weights,numpy.ones_like(avg_distances),CLUSTER_11,CLUSTER_11
weights,numpy.ones_like(avg_distances),CLUSTER_11,CLUSTER_11
weights,numpy.ones_like(avg_distances),CLUSTER_11,CLUSTER_11
weights,numpy.ones_like(avg_distances),CLUSTER_11,CLUSTER_11
weights,numpy.ones_like(avg_distances),CLUSTER_11,CLUSTER_11
weights,numpy.ones_like(avg_distances),CLUSTER_11,CLUSTER_11
weights,numpy.ones_like(avg_distances),CLUSTER_11,CLUSTER_11
weights,numpy.ones_like(avg_distances),CLUSTER_11,CLUSTER_11
now,datetime.datetime.now(),CLUSTER_11,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_4,CLUSTER_8
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_4,CLUSTER_8
coefs,numpy.mean(np.abs(np.array(coef),CLUSTER_4,CLUSTER_8
corr,"numpy.corrcoef(squareform(confusion[0:25,0:25])",CLUSTER_4,CLUSTER_8
corr,"numpy.corrcoef(squareform(confusion[25:50,25:50])",CLUSTER_4,CLUSTER_8
up_corr,numpy.corrcoef(squareform(df_imag),CLUSTER_4,CLUSTER_8
in_corr,numpy.corrcoef(squareform(df_imag),CLUSTER_4,CLUSTER_8
to_imag_corr,numpy.corrcoef(squareform(df_to_imag),CLUSTER_4,CLUSTER_8
up_perc_to_corr,numpy.corrcoef(squareform(df_to.values),CLUSTER_4,CLUSTER_8
in_perc_to_corr,numpy.corrcoef(squareform(df_to.values),CLUSTER_4,CLUSTER_8
up_perc_to_corr_unf,"numpy.corrcoef(squareform(df_to.values[:25,:25])",CLUSTER_4,CLUSTER_8
up_perc_to_corr_fam,"numpy.corrcoef(squareform(df_to.values[25:50,25:50])",CLUSTER_4,CLUSTER_8
in_perc_to_corr_unf,"numpy.corrcoef(squareform(df_to.values[:25,:25])",CLUSTER_4,CLUSTER_8
in_perc_to_corr_fam,"numpy.corrcoef(squareform(df_to.values[25:50,25:50])",CLUSTER_4,CLUSTER_8
"unique,counts","numpy.unique(events[:,2],return_counts=True)",CLUSTER_4,CLUSTER_8
events,"numpy.genfromtxt('/Users/dannem/Documents/Ilya_study/Data/01_inv_recon_2019_May_13_1027_fixed_triggers.csv',delimiter=',')",CLUSTER_4,CLUSTER_8
conf,"numpy.load(fname,allow_pickle=True)",CLUSTER_4,CLUSTER_8
confusion_df,"pandas.DataFrame(results[2],columns=im_names,index=im_names)",CLUSTER_4,CLUSTER_8
df_to,"pandas.DataFrame(conf,columns=pr_names,index=pr_names)",CLUSTER_4,CLUSTER_8
df_imag,"pandas.DataFrame(conf['imag'][1],columns=im_names,index=im_names)",CLUSTER_4,CLUSTER_8
df_perc,pandas.DataFrame(conf['perc']),CLUSTER_4,CLUSTER_8
df,pandas.concat((image_to_df(folder1),CLUSTER_4,CLUSTER_8
lsa,"sklearn.decomposition.TruncatedSVD(n_components=2,n_iter=10)",CLUSTER_4,CLUSTER_5
lsa,"sklearn.decomposition.TruncatedSVD(n_components=2,n_iter=10)",CLUSTER_4,CLUSTER_5
tsne,sklearn.manifold.TSNE(n_components=2),CLUSTER_4,CLUSTER_5
X,pandas.DataFrame(events),CLUSTER_5,CLUSTER_1
gs,"sklearn.model_selection.GridSearchCV(rf,param,cv=5,n_jobs=-1)",CLUSTER_5,CLUSTER_1
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_5,CLUSTER_1
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=10,max_depth=60)",CLUSTER_5,CLUSTER_1
X_total_transform,"scipy.sparse.hstack([X_name_transform,X_details_transform])",CLUSTER_5,CLUSTER_1
X_total_transform,"scipy.sparse.hstack([X_name_transform,X_details_transform])",CLUSTER_5,CLUSTER_1
X_total_transform,"scipy.sparse.hstack([X_name_transform,X_details_transform])",CLUSTER_5,CLUSTER_1
X_total_transform,"scipy.sparse.hstack([X_name_transform,X_details_transform])",CLUSTER_5,CLUSTER_1
df_pca5,"pandas.DataFrame(pca_res,columns=['pca1','pca2','pca3','pca4','pca5'])",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv('../data.csv',index_col=0)",CLUSTER_5,CLUSTER_5
df_scaled,"pandas.read_csv('../preprocessed_data.csv',index_col=0)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(20,12)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(20,12)",CLUSTER_5,CLUSTER_5
ms,"sklearn.cluster.MeanShift(bandwidth=0.5,n_jobs=-1)",CLUSTER_5,CLUSTER_5
bandwidth,sklearn.cluster.estimate_bandwidth(df_scaled),CLUSTER_5,CLUSTER_5
bandwidth,sklearn.cluster.estimate_bandwidth(df_pca5),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=5),CLUSTER_5,CLUSTER_5
dataset,"pandas.read_csv(""SUV_data.csv"")",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=0)",CLUSTER_5,CLUSTER_5
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
classifier,sklearn.linear_model.LogisticRegression(random_state=0),CLUSTER_5,CLUSTER_5
"%timewB,_","scipy.optimize.curve_fit(weighted_sum,s_mon_B.s,f_out,p0=w)",CLUSTER_1,CLUSTER_9
"%timewC,_","scipy.optimize.curve_fit(weighted_sum,s_mon_C.s,f_out,p0=w)",CLUSTER_1,CLUSTER_9
"%timewB,_","scipy.optimize.curve_fit(weighted_sum,s_mon_B.s,f_out,p0=w)",CLUSTER_1,CLUSTER_9
"%timewC,_","scipy.optimize.curve_fit(weighted_sum,s_mon_C.s,f_out,p0=w)",CLUSTER_1,CLUSTER_9
new_data,"pandas.read_csv('temp.txt',sep='|')",CLUSTER_8,CLUSTER_4
precision,"sklearn.metrics.precision_score(y_true,y_pred)",CLUSTER_5,CLUSTER_6
recall,"sklearn.metrics.recall_score(y_true,y_pred)",CLUSTER_5,CLUSTER_6
df,pandas.DataFrame(df),CLUSTER_11,CLUSTER_5
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_11,CLUSTER_5
df,pandas.read_csv('Crime_Data.csv'),CLUSTER_11,CLUSTER_5
s['date'],"pandas.to_datetime(s['OccurredDate'],infer_datetime_format=True)",CLUSTER_11,CLUSTER_5
X,numpy.array(cpgroup2017w['dates']),CLUSTER_11,CLUSTER_5
y,numpy.array(cpgroup2017w['Crime_Subcategory']),CLUSTER_11,CLUSTER_5
p,numpy.poly1d(z),CLUSTER_11,CLUSTER_5
z,"numpy.polyfit(X,y,39)",CLUSTER_11,CLUSTER_5
est,sklearn.pipeline.make_pipeline(PolynomialFeatures(degree),CLUSTER_11,CLUSTER_5
p,sklearn.preprocessing.PolynomialFeatures(degree),CLUSTER_11,CLUSTER_5
p2,sklearn.preprocessing.PolynomialFeatures(degree),CLUSTER_11,CLUSTER_5
s,sklearn.preprocessing.StandardScaler(),CLUSTER_11,CLUSTER_5
s2,sklearn.preprocessing.StandardScaler(),CLUSTER_11,CLUSTER_5
est1,sklearn.linear_model.LinearRegression(),CLUSTER_11,CLUSTER_5
est2,sklearn.linear_model.LinearRegression(),CLUSTER_11,CLUSTER_5
file_shape,numpy.array(pd.read_csv(glob.glob(path),CLUSTER_1,CLUSTER_9
file_shape,numpy.array(pd.read_csv(glob.glob(path),CLUSTER_1,CLUSTER_9
file_shape,numpy.array(pd.read_csv(glob.glob(path),CLUSTER_1,CLUSTER_9
fYA_filt,numpy.array(fYAr),CLUSTER_1,CLUSTER_9
bg_list,"numpy.array([5,7,9,8,4,5,6,7,9,8])",CLUSTER_1,CLUSTER_9
bg_list,"numpy.array([5,7,9,8,4,5,6,7,9,8])",CLUSTER_1,CLUSTER_9
fYAr,numpy.zeros(fYA.shape[0]),CLUSTER_1,CLUSTER_9
fYAl,numpy.zeros(fYA.shape[0]),CLUSTER_1,CLUSTER_9
data_array_cable,numpy.empty(matrix_shape),CLUSTER_1,CLUSTER_9
data_array,numpy.empty(matrix_shape),CLUSTER_1,CLUSTER_9
plot_file,"numpy.concatenate((np.arange(0,4)",CLUSTER_1,CLUSTER_9
plot_file,"numpy.concatenate((np.arange(0,4)",CLUSTER_1,CLUSTER_9
num_files,numpy.size(file_list),CLUSTER_1,CLUSTER_9
num_files,numpy.size(file_list),CLUSTER_1,CLUSTER_9
num_files,numpy.size(file_list),CLUSTER_1,CLUSTER_9
t,"numpy.linspace(0,s,r)",CLUSTER_1,CLUSTER_9
fYAl[:filter_e],numpy.imag(fYA[:filter_e]),CLUSTER_1,CLUSTER_9
fYAr[:filter_e],numpy.real(fYA[:filter_e]),CLUSTER_1,CLUSTER_9
data_array_1,"numpy.delete(data_array,np.s_[2::2],1)",CLUSTER_1,CLUSTER_9
data_array_2,"numpy.delete(data_array_1,np.s_[1::3],1)",CLUSTER_1,CLUSTER_9
matrix_shape,"numpy.append(file_shape,num_files)",CLUSTER_1,CLUSTER_9
matrix_shape,"numpy.append(file_shape,num_files)",CLUSTER_1,CLUSTER_9
z,numpy.fft.fftfreq(r),CLUSTER_1,CLUSTER_9
ifY,numpy.fft.irfft(fYA_filt),CLUSTER_1,CLUSTER_9
fYA,numpy.fft.rfft(YA),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
leg,"matplotlib.pyplot.legend(fontsize=30,loc=3,frameon=False)",CLUSTER_1,CLUSTER_9
leg,"matplotlib.pyplot.legend(fontsize=30,loc=3,frameon=False)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.plot(x_orig,y_cable,'k-',linewidth=1,label='Cable1')",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.plot(x_orig,y_cable1,'g-',linewidth=1,label='Cable2')",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.plot(x_orig[:-1],Y_holder,'b-',linewidth=font_size,label='Holder+Carrier')",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.plot(x_orig,y_orig,'r-',linewidth=font_size,label='Holder+Carrier+Cables')",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.plot(x_orig,y_carrier,'b-',linewidth=font_size,label='Carrier')",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.plot(x_orig,y_orig,'k-',linewidth=font_size,label='WithCarrier')",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.plot(x_orig,y_bg,'g-',linewidth=font_size,label='WithoutCarrier')",CLUSTER_1,CLUSTER_9
data,"pandas.read_csv(fname,sep="""",header=Header)",CLUSTER_1,CLUSTER_9
data,"pandas.read_csv(fname,sep="","",header=1)",CLUSTER_1,CLUSTER_9
data,"pandas.read_csv(fname,sep="""",header=Header)",CLUSTER_1,CLUSTER_9
easySim,"numpy.zeros((100,100,100)",CLUSTER_3,CLUSTER_10
volume,"numpy.zeros((10,1000,1000)",CLUSTER_3,CLUSTER_10
output,numpy.zeros_like(data),CLUSTER_3,CLUSTER_10
noiseVolume,numpy.copy(volume),CLUSTER_3,CLUSTER_10
thresh,"numpy.percentile(subVol,percentile)",CLUSTER_3,CLUSTER_10
train_cat_fnames,os.listdir(train_cats_dir),CLUSTER_2,CLUSTER_7
train_dog_fnames,os.listdir(train_dogs_dir),CLUSTER_2,CLUSTER_7
fig,matplotlib.pyplot.gcf(),CLUSTER_2,CLUSTER_7
sp,"matplotlib.pyplot.subplot(nrows,ncols,i+1)",CLUSTER_2,CLUSTER_7
minIndex,numpy.where(n_pos==minValue),CLUSTER_1,CLUSTER_10
minIndex,numpy.where(n_neg==minValue),CLUSTER_1,CLUSTER_10
ind,numpy.full((n),CLUSTER_1,CLUSTER_10
ind,numpy.full((n),CLUSTER_1,CLUSTER_10
new_x,"numpy.append(new_x,x[ind],axis=0)",CLUSTER_1,CLUSTER_10
new_y,"numpy.append(new_y,y[ind],axis=0)",CLUSTER_1,CLUSTER_10
new_x,"numpy.append(new_x,x[ind],axis=0)",CLUSTER_1,CLUSTER_10
new_y,"numpy.append(new_y,y[ind],axis=0)",CLUSTER_1,CLUSTER_10
features,numpy.load('features_silico_dropped.npy'),CLUSTER_1,CLUSTER_10
classes,numpy.load('classes_silico.npy'),CLUSTER_1,CLUSTER_10
adv,"numpy.clip(adv,0,1)",CLUSTER_2,CLUSTER_7
adv,"numpy.clip(adv,0,1)",CLUSTER_2,CLUSTER_7
adv,numpy.copy(orig),CLUSTER_2,CLUSTER_7
adv,numpy.copy(orig),CLUSTER_2,CLUSTER_7
idf_str,"re.sub(""%DayOfYear%"",str(day)",CLUSTER_4,CLUSTER_11
idf_str,"re.sub(""%StartMon%"",str(convert_DayOfTheYear_ToMOnAndDay(EndDay-6)",CLUSTER_4,CLUSTER_11
idf_str,"re.sub(""%StartDay%"",str(convert_DayOfTheYear_ToMOnAndDay(EndDay-6)",CLUSTER_4,CLUSTER_11
idf_str,"re.sub(""%EndMon%"",str(convert_DayOfTheYear_ToMOnAndDay(EndDay)",CLUSTER_4,CLUSTER_11
idf_str,"re.sub(""%EndDay%"",str(convert_DayOfTheYear_ToMOnAndDay(EndDay)",CLUSTER_4,CLUSTER_11
idf_str,"re.sub(""%Hour%"",str(hr)",CLUSTER_4,CLUSTER_11
idf_str,"re.sub(""%SetPoint_Value%"",str(SetPoint)",CLUSTER_4,CLUSTER_11
variables+,"re.sub(""%SetPoint8%"",""%SetPoint{0}%"".format(day*24+hr)",CLUSTER_4,CLUSTER_11
result_GenOpt_List,"numpy.reshape(np.array(result_SetPoint.iloc[:,1:])",CLUSTER_4,CLUSTER_11
result_GenOpt_List,"numpy.reshape(np.array(result_SetPoint.iloc[:,1:])",CLUSTER_4,CLUSTER_11
data_DF,pandas.DataFrame(data_col),CLUSTER_4,CLUSTER_11
data_col,pandas.DataFrame(data_col),CLUSTER_4,CLUSTER_11
data_col,pandas.DataFrame(data_col),CLUSTER_4,CLUSTER_11
data_DF,pandas.DataFrame(data_col),CLUSTER_4,CLUSTER_11
data_col,pandas.DataFrame(data_col),CLUSTER_4,CLUSTER_11
data_col,pandas.DataFrame(data_col),CLUSTER_4,CLUSTER_11
result_SetPoint,"pandas.DataFrame(np.reshape(np.array(data.iloc[0,:-1])",CLUSTER_4,CLUSTER_11
dat_temp,"pandas.read_csv(r""E:\SetPoint_Opt\BrutalForce\bak\HrOfTheYear{0}\5ZoneFanCoilDOASCool_{1}mtr.csv"".format(day*24+hr,i)",CLUSTER_4,CLUSTER_11
dat_temp,"pandas.read_csv(r""E:\SetPoint_Opt\BrutalForce\bak\HrOfTheYear{0}\5ZoneFanCoilDOASCool_{1}mtr.csv"".format(day*24+hr,i)",CLUSTER_4,CLUSTER_11
dat_temp,"pandas.read_csv(r""E:\SetPoint_Opt\BrutalForce\bak\HrOfTheYear{0}\5ZoneFanCoilDOASCool_{1}mtr.csv"".format(day*24+hr,i)",CLUSTER_4,CLUSTER_11
data_DF,"pandas.read_csv(r""E:\SetPoint_Opt\BrutalForce\BrutalForce_Re.csv"",index_col=0)",CLUSTER_4,CLUSTER_11
dat_temp,"pandas.read_csv(r""E:\SetPoint_Opt\BrutalForce\bak\HrOfTheYear{0}\5ZoneFanCoilDOASCool_{1}mtr.csv"".format(day*24+hr,i)",CLUSTER_4,CLUSTER_11
dat_temp,"pandas.read_csv(r""E:\SetPoint_Opt\BrutalForce\bak\HrOfTheYear{0}\5ZoneFanCoilDOASCool_{1}mtr.csv"".format(day*24+hr,i)",CLUSTER_4,CLUSTER_11
dat_temp,"pandas.read_csv(r""E:\SetPoint_Opt\BrutalForce\bak\HrOfTheYear{0}\5ZoneFanCoilDOASCool_{1}mtr.csv"".format(day*24+hr,i)",CLUSTER_4,CLUSTER_11
result_SetPoint,pandas.read_csv(r'E:\SetPoint_Opt\figures.csv'),CLUSTER_4,CLUSTER_11
Data_temp,"pandas.read_csv(r""E:\SetPoint_Opt\BrutalForce\HrOfTheYear{0}\5ZoneFanCoilDOASCool_{1}Meter.csv"".format(HrOfTheYear,i)",CLUSTER_4,CLUSTER_11
Data_temp,"pandas.read_csv(r""E:\SetPoint_Opt\BrutalForce\HrOfTheYear{0}\5ZoneFanCoilDOASCool_{1}.csv"".format(HrOfTheYear,i)",CLUSTER_4,CLUSTER_11
Data_temp,"pandas.read_csv(r""E:\SetPoint_Opt\BrutalForce\bak\HrOfTheYear{0}\5ZoneFanCoilDOASCool_{1}mtr.csv"".format(HrOfTheYear,i)",CLUSTER_4,CLUSTER_11
Data_temp,"pandas.read_csv(r""E:\SetPoint_Opt\BrutalForce\bak\HrOfTheYear{0}\5ZoneFanCoilDOASCool_{1}.csv"".format(HrOfTheYear,i)",CLUSTER_4,CLUSTER_11
Data_temp,"pandas.read_csv(r""E:\SetPoint_Opt\BrutalForce\HrOfTheYear{0}-Copy\5ZoneFanCoilDOASCool_{1}out.csv"".format(HrOfTheYear,i)",CLUSTER_4,CLUSTER_11
Data_temp,"pandas.read_csv(r""E:\SetPoint_Opt\BrutalForce\HrOfTheYear{0}\5ZoneFanCoilDOASCool_{1}.csv"".format(HrOfTheYear,i)",CLUSTER_4,CLUSTER_11
data,"pandas.read_excel(r""E:\SetPoint_Opt\figures.xlsx"")",CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.subplot(),CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.subplot(),CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.subplot(),CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.subplot(),CLUSTER_4,CLUSTER_11
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
Scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_11
weather_response,requests.get(query_url),CLUSTER_9,CLUSTER_2
weather_df,"pandas.DataFrame({
""City"":new_city,
""Latitude"":latitudes,
""Temperature"":temps,
""Humidity"":humidity,
""Cloudiness"":cloudiness,
""Windspeed"":windspeed
})",CLUSTER_9,CLUSTER_2
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_10
dummy,pandas.get_dummies(dummy),CLUSTER_5,CLUSTER_5
data,"pandas.read_excel(""loan.xlsx"")",CLUSTER_5,CLUSTER_5
index,numpy.arange(7),CLUSTER_5,CLUSTER_5
index,numpy.arange(7),CLUSTER_5,CLUSTER_5
index,numpy.arange(2),CLUSTER_5,CLUSTER_5
index,numpy.arange(11),CLUSTER_5,CLUSTER_5
index,numpy.arange(4),CLUSTER_5,CLUSTER_5
index,numpy.arange(14),CLUSTER_5,CLUSTER_5
index,numpy.arange(4),CLUSTER_5,CLUSTER_5
index,numpy.arange(7),CLUSTER_5,CLUSTER_5
index,numpy.arange(7),CLUSTER_5,CLUSTER_5
index,numpy.arange(7),CLUSTER_5,CLUSTER_5
index,"numpy.arange(0,49,7)",CLUSTER_5,CLUSTER_5
index,"numpy.arange(0,49,7)",CLUSTER_5,CLUSTER_5
index,"numpy.arange(0,70,10)",CLUSTER_5,CLUSTER_5
edu,"numpy.array([0,10,20,30,40,50])",CLUSTER_5,CLUSTER_5
ren,"numpy.array([0,10,30,50,60])",CLUSTER_5,CLUSTER_5
vac,"numpy.array([0,10,20,30,40])",CLUSTER_5,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(12,2,figsize=(100,100)",CLUSTER_5,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(4,2,figsize=(30,30)",CLUSTER_5,CLUSTER_5
"fig,axis","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
"fig,axis","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
"fig,axis","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
"fig,axis","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
"fig,axis","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
"fig,axis","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,12)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,12)",CLUSTER_5,CLUSTER_5
select3,sklearn.feature_selection.SelectPercentile(percentile=70),CLUSTER_5,CLUSTER_5
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
rfe2,"sklearn.feature_selection.RFE(RandomForestClassifier(n_estimators=100,random_state=1)",CLUSTER_5,CLUSTER_5
rr,"numpy.arange(-150,200,0.1)",CLUSTER_12,CLUSTER_10
pos,numpy.zeros(n),CLUSTER_12,CLUSTER_10
vel,numpy.zeros(n),CLUSTER_12,CLUSTER_10
localBestPos,numpy.zeros(n),CLUSTER_12,CLUSTER_10
value,numpy.zeros(n),CLUSTER_12,CLUSTER_10
localBestVal,"numpy.full(n,1000)",CLUSTER_12,CLUSTER_10
X,"numpy.linspace(-5.12,5.12,pixels)",CLUSTER_12,CLUSTER_10
Y,"numpy.linspace(-5.12,5.12,pixels)",CLUSTER_12,CLUSTER_10
dist2,numpy.vectorize(dist_to_cubic),CLUSTER_12,CLUSTER_10
"X,Y","numpy.meshgrid(X,Y)",CLUSTER_12,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_10
pos[i],"random.uniform(xmin,xmax)",CLUSTER_12,CLUSTER_10
r1,"random.uniform(0,1)",CLUSTER_12,CLUSTER_10
r2,"random.uniform(0,1)",CLUSTER_12,CLUSTER_10
data_top50,pandas.read_csv('D:\\Study\\DataScience\\Data\\covid_top50.csv'),CLUSTER_7,CLUSTER_3
df,pandas.read_html('https://en.wikipedia.org/wiki/Template:2019%E2%80%9320_coronavirus_pandemic_data'),CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(time_sentences,columns=['text'])",CLUSTER_8,CLUSTER_4
"ted_df[""ViewGroup""]","pandas.cut(ted_df[""views""],bins,labels=group_labels)",CLUSTER_8,CLUSTER_4
ted_df,pandas.read_csv(csv_path),CLUSTER_8,CLUSTER_4
media_comp,"pandas.concat([disney['Open'],netflix['Open']],axis=1)",CLUSTER_11,CLUSTER_3
box_df,"pandas.concat([disney['returns'],netflix['returns']],axis=1)",CLUSTER_11,CLUSTER_3
start,"datetime.datetime(2019,1,1)",CLUSTER_11,CLUSTER_3
end,"datetime.datetime(2019,8,1)",CLUSTER_11,CLUSTER_3
use_columns,pandas.DataFrame(x.columns),CLUSTER_7,CLUSTER_5
results,"pandas.DataFrame(np.vstack((ids,probas)",CLUSTER_7,CLUSTER_5
test_results,"pandas.DataFrame(np.vstack((test_ids,test_probas)",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv('train.csv',index_col='ID')",CLUSTER_7,CLUSTER_5
test,"pandas.read_csv('test.csv',index_col='ID')",CLUSTER_7,CLUSTER_5
lasso,sklearn.linear_model.Lasso(alpha=0.001),CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_12,CLUSTER_3
traj,numpy.array(traj),CLUSTER_12,CLUSTER_3
measured,numpy.array(measured),CLUSTER_12,CLUSTER_3
df,"pandas.DataFrame(columns=['truetrajectory','measuredtrajectory','seq_length'])",CLUSTER_12,CLUSTER_3
test_df,"pandas.DataFrame(columns=['truetrajectory','measuredtrajectory','seq_length'])",CLUSTER_12,CLUSTER_3
chunk_df,"pandas.DataFrame(columns=['input_arr','target_arr','seq_length'])",CLUSTER_12,CLUSTER_3
chunk_test_df,"pandas.DataFrame(columns=['input_arr','target_arr','seq_length'])",CLUSTER_12,CLUSTER_3
df_Anteil,"pandas.DataFrame((df[""Festsetzung""].value_counts(normalize=True)",CLUSTER_11,CLUSTER_3
df,"pandas.read_csv(""Denkmalschutzobjekte_2019_09_26-Tabelle1.csv"")",CLUSTER_11,CLUSTER_3
"df[""Datum""]","pandas.to_datetime(df[""Festsetzung""],format=""%d/%m/%Y"")",CLUSTER_11,CLUSTER_3
"df[""Festsetzung""]","pandas.to_datetime(df[""Festsetzung""],format=""%d/%m/%Y"")",CLUSTER_11,CLUSTER_3
lipidResids,"numpy.arange(4255,tempTraj.topology.n_residues+1)",CLUSTER_4,CLUSTER_11
comDataDict[trajKey],"numpy.array(pt.compute(commands,pbar)",CLUSTER_4,CLUSTER_11
arrayChunks,"numpy.array_split(arr,nChunks,axis=axis)",CLUSTER_4,CLUSTER_11
data,"pandas.read_csv(""../input/boston-housing.csv"",header=None,delimiter=r""\s+"",names=column_names)",CLUSTER_8,CLUSTER_1
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3)",CLUSTER_8,CLUSTER_1
lr,sklearn.linear_model.LinearRegression(),CLUSTER_8,CLUSTER_1
rr,sklearn.linear_model.Ridge(alpha=0.5),CLUSTER_8,CLUSTER_1
df,pandas.read_csv(file_path),CLUSTER_8,CLUSTER_3
start,time.perf_counter(),CLUSTER_10,CLUSTER_12
end,time.perf_counter(),CLUSTER_10,CLUSTER_12
example_text,numpy.arange(10),CLUSTER_6,CLUSTER_10
encoded_text,numpy.array([encoder[char]forcharintext]),CLUSTER_6,CLUSTER_10
encoded_text,numpy.array([[encoded_text]]),CLUSTER_6,CLUSTER_10
one_hot,"numpy.zeros((encoded_text.size,num_uni_chars)",CLUSTER_6,CLUSTER_10
y,numpy.zeros_like(x),CLUSTER_6,CLUSTER_10
inputTest,numpy.array([[float(perEn.get(),CLUSTER_5,CLUSTER_1
inputTest,numpy.array([[float(perEn.get(),CLUSTER_5,CLUSTER_1
inputTest,numpy.array([[float(perEn.get(),CLUSTER_5,CLUSTER_1
df,"pandas.read_csv(""Data.csv"")",CLUSTER_5,CLUSTER_1
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_1
clf2,sklearn.ensemble.RandomForestClassifier(n_estimators=10),CLUSTER_5,CLUSTER_1
svc,"sklearn.svm.SVC(kernel='linear',C=C)",CLUSTER_5,CLUSTER_1
test_model,"numpy.log(ts.iloc[:93,0]+1)",CLUSTER_7,CLUSTER_8
test_model,"numpy.log(ts.iloc[:three_quarter_point,0]+1)",CLUSTER_7,CLUSTER_8
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_7,CLUSTER_8
raw_data,"pandas.read_csv(""./2019-Oct.csv"")",CLUSTER_7,CLUSTER_8
raw,"matplotlib.pyplot.subplot2grid(layout,(0,0)",CLUSTER_7,CLUSTER_8
acf,"matplotlib.pyplot.subplot2grid(layout,(0,1)",CLUSTER_7,CLUSTER_8
pacf,"matplotlib.pyplot.subplot2grid(layout,(0,2)",CLUSTER_7,CLUSTER_8
inputMovies,pandas.DataFrame(userInput),CLUSTER_1,CLUSTER_3
inputMovies,"pandas.merge(inputId,inputMovies)",CLUSTER_1,CLUSTER_3
movies_df,pandas.read_csv('movies.csv'),CLUSTER_1,CLUSTER_3
ratings_df,pandas.read_csv('ratings.csv'),CLUSTER_1,CLUSTER_3
df,"pandas.read_csv(""ex1data2.csv"")",CLUSTER_5,CLUSTER_5
reg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
start_time,time.time(),CLUSTER_10,CLUSTER_12
next_time,math.floor(time.time(),CLUSTER_10,CLUSTER_12
"ax,fig","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_7,CLUSTER_8
"fig,axs","matplotlib.pyplot.subplots(ncols=7,nrows=2,figsize=(20,10)",CLUSTER_7,CLUSTER_8
"fig,axs","matplotlib.pyplot.subplots(ncols=7,nrows=2,figsize=(20,10)",CLUSTER_7,CLUSTER_8
perc,numpy.shape(v_col),CLUSTER_7,CLUSTER_8
df[col],numpy.log1p(df[col]),CLUSTER_7,CLUSTER_8
mse_ols,"sklearn.metrics.mean_squared_error(y_test,y_pred)",CLUSTER_7,CLUSTER_8
mse_lasso,"sklearn.metrics.mean_squared_error(y_test,y_pred)",CLUSTER_7,CLUSTER_8
mse_ridge,"sklearn.metrics.mean_squared_error(y_test,y_pred)",CLUSTER_7,CLUSTER_8
df_feat,pandas.DataFrame(boston.data),CLUSTER_7,CLUSTER_8
df_tar,pandas.DataFrame(boston.target),CLUSTER_7,CLUSTER_8
df,"pandas.concat([df_feat,df_tar],axis=1)",CLUSTER_7,CLUSTER_8
ax,"seaborn.regplot(y_test,y_pred)",CLUSTER_7,CLUSTER_8
ax,"seaborn.regplot(y_test,y_pred)",CLUSTER_7,CLUSTER_8
ax,"seaborn.regplot(y_test,y_pred)",CLUSTER_7,CLUSTER_8
boston,sklearn.datasets.load_boston(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30,random_state=42)",CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
lasso,sklearn.linear_model.Lasso(),CLUSTER_7,CLUSTER_8
lasso,sklearn.linear_model.Lasso(),CLUSTER_7,CLUSTER_8
ridge,sklearn.linear_model.Ridge(),CLUSTER_7,CLUSTER_8
ridge,sklearn.linear_model.Ridge(),CLUSTER_7,CLUSTER_8
t,"numpy.arange(0,len(S)",CLUSTER_1,CLUSTER_3
IMF,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
data,"pandas.read_excel(r'F:/研究生阶段/毕业设计/RWTCd.xls',sheet_name='s')",CLUSTER_1,CLUSTER_3
data,"numpy.arange(0,1,0.01)",CLUSTER_11,CLUSTER_9
hxy,"numpy.zeros((bins,bins)",CLUSTER_11,CLUSTER_9
h2d,"numpy.zeros(12,12)",CLUSTER_11,CLUSTER_9
pos,numpy.where(y>0.5),CLUSTER_11,CLUSTER_9
pos,numpy.where(y>0.2),CLUSTER_11,CLUSTER_9
pos,numpy.where(y>0.2),CLUSTER_11,CLUSTER_9
y,numpy.sin(data),CLUSTER_11,CLUSTER_9
x,numpy.sin(data),CLUSTER_11,CLUSTER_9
y,numpy.sin(data),CLUSTER_11,CLUSTER_9
x,numpy.sin(data),CLUSTER_11,CLUSTER_9
y,numpy.sin(data),CLUSTER_11,CLUSTER_9
x,numpy.sin(data),CLUSTER_11,CLUSTER_9
y,numpy.sin(data),CLUSTER_11,CLUSTER_9
x,numpy.sin(data),CLUSTER_11,CLUSTER_9
y,numpy.sin(data),CLUSTER_11,CLUSTER_9
x,numpy.sin(data),CLUSTER_11,CLUSTER_9
y,numpy.sin(data),CLUSTER_11,CLUSTER_9
x,numpy.sin(data),CLUSTER_11,CLUSTER_9
y,numpy.sin(data),CLUSTER_11,CLUSTER_9
x,numpy.sin(data),CLUSTER_11,CLUSTER_9
y,numpy.sin(data),CLUSTER_11,CLUSTER_9
x,numpy.sin(data),CLUSTER_11,CLUSTER_9
y,numpy.sin(data),CLUSTER_11,CLUSTER_9
x,numpy.sin(data),CLUSTER_11,CLUSTER_9
RangoX,numpy.linspace(x.min(),CLUSTER_11,CLUSTER_9
RangoY,numpy.linspace(y.min(),CLUSTER_11,CLUSTER_9
hx,"numpy.histogram(x,bins=bins)",CLUSTER_11,CLUSTER_9
hy,"numpy.histogram(y,bins=bins)",CLUSTER_11,CLUSTER_9
"Pearson,Pvalue","scipy.stats.pearsonr(x,y)",CLUSTER_11,CLUSTER_9
"Pearson,Pvalue","scipy.stats.pearsonr(x,y)",CLUSTER_11,CLUSTER_9
"Pearson,Pvalue","scipy.stats.pearsonr(x,y)",CLUSTER_11,CLUSTER_9
"Pearson,Pvalue","scipy.stats.pearsonr(x,y)",CLUSTER_11,CLUSTER_9
"Pearson,Pvalue","scipy.stats.pearsonr(x,y)",CLUSTER_11,CLUSTER_9
"Pearson,Pvalue","scipy.stats.pearsonr(x,y)",CLUSTER_11,CLUSTER_9
"Pearson,Pvalue","scipy.stats.pearsonr(x,y)",CLUSTER_11,CLUSTER_9
"Spearman,PvalueS","scipy.stats.spearmanr(x,y)",CLUSTER_11,CLUSTER_9
"Spearman,Pvalue","scipy.stats.spearmanr(x,y)",CLUSTER_11,CLUSTER_9
"Spearman,Pvalue","scipy.stats.spearmanr(x,y)",CLUSTER_11,CLUSTER_9
"Spearman,Pvalue","scipy.stats.spearmanr(x,y)",CLUSTER_11,CLUSTER_9
highest_rated_by_cat,"pandas.concat(highest_rated_in_grp[df]fordfinnp.arange(0,15)",CLUSTER_8,CLUSTER_3
appstore_apps,pandas.read_csv('a3-adbaker-itunes-topapps-2.csv'),CLUSTER_8,CLUSTER_3
u_inf_range,"numpy.array([10,15,20,25,28.75])",CLUSTER_8,CLUSTER_11
evals_data,pandas.read_csv(route+'/eigenvalues.csv'),CLUSTER_8,CLUSTER_11
w,numpy.linalg.solve(X.T.dot(X),CLUSTER_1,CLUSTER_3
df,pandas.read_excel('linear_regression_class/mlr02.xls'),CLUSTER_1,CLUSTER_3
delR,"numpy.array([1.00,1.14,1.30,1.49,1.70,
1.93,2.20,2.50,2.84,3.21,
3.63,4.10,4.61,5.18,5.79,
6.47,7.20,7.98,8.83,9.73,
10.69,11.70,12.76,13.87,15.03,
16.22,17.45,18.70,19.97,21.27,
22.56,23.87,25.17,26.46,27.74,
29.00,30.24,31.45,32.65,33.82,
34.97,36.09,37.20,38.29,39.37,
40.45,41.53,42.62,43.73,44.87,
46.05,47.28,48.56,49.93,51.38,
52.93,54.61,56.42,58.38,60.53,
62.87,65.43,68.24,71.33,74.73,
78.47,82.61,87.17,92.21,97.79,
103.96,110.79,118.35,126.73,136.01,174.67])",CLUSTER_1,CLUSTER_9
tau,"numpy.zeros([n,n])",CLUSTER_1,CLUSTER_9
xtemp2,numpy.zeros([len(xtemp),CLUSTER_1,CLUSTER_9
ytemp2,numpy.zeros([len(ytemp),CLUSTER_1,CLUSTER_9
hydro_reshaped_pad,"numpy.zeros([76,len(ytemp)",CLUSTER_1,CLUSTER_9
new_temp,"numpy.zeros((76,len(yn[:,0])",CLUSTER_1,CLUSTER_9
rbcs_mask,"numpy.zeros((76,n,n)",CLUSTER_1,CLUSTER_9
rbcs_relax,"numpy.zeros((76,n,n)",CLUSTER_1,CLUSTER_9
points,numpy.vstack((yo2.ravel(),CLUSTER_1,CLUSTER_9
new_points,numpy.vstack((yn.ravel(),CLUSTER_1,CLUSTER_9
"xc,yc","numpy.meshgrid(
dx*np.arange(nx)",CLUSTER_1,CLUSTER_9
"xo,yo","numpy.meshgrid(ds_05.XC.values,ds_05.YC.values)",CLUSTER_1,CLUSTER_9
"xo2,yo2","numpy.meshgrid(xtemp2,ytemp2)",CLUSTER_1,CLUSTER_9
Tsurf,"numpy.tile(np.linspace(Tmin,Tmax,n)",CLUSTER_1,CLUSTER_9
lint,"scipy.interpolate.LinearNDInterpolator(points,values)",CLUSTER_1,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_9
df1,"pandas.DataFrame({""A"":[1,2,3],""B"":[1,2,3]})",CLUSTER_1,CLUSTER_9
df2,"pandas.DataFrame({""A"":[3,2,1],""B"":[1,2,3]})",CLUSTER_1,CLUSTER_9
"C,S",numpy.cos(X),CLUSTER_1,CLUSTER_9
"C,S",numpy.cos(X),CLUSTER_1,CLUSTER_9
"C,S",numpy.cos(X),CLUSTER_1,CLUSTER_9
X,"numpy.linspace(-np.pi,np.pi,256,endpoint=True)",CLUSTER_1,CLUSTER_9
inputs,"numpy.array([[0.5,-0.2,0.1]])",CLUSTER_1,CLUSTER_3
targets,numpy.array([[0.4]]),CLUSTER_1,CLUSTER_3
test_w_i_h,"numpy.array([[0.1,-0.2],
[0.4,0.5],
[-0.3,0.2]])",CLUSTER_1,CLUSTER_3
test_w_h_o,"numpy.array([[0.3],
[-0.1]])",CLUSTER_1,CLUSTER_3
delta_weights_i_h,numpy.zeros(self.weights_input_to_hidden.shape),CLUSTER_1,CLUSTER_3
delta_weights_h_o,numpy.zeros(self.weights_hidden_to_output.shape),CLUSTER_1,CLUSTER_3
hidden_inputs,"numpy.dot(X,self.weights_input_to_hidden)",CLUSTER_1,CLUSTER_3
final_inputs,"numpy.dot(hidden_outputs,self.weights_hidden_to_output)",CLUSTER_1,CLUSTER_3
hidden_error,"numpy.dot(self.weights_hidden_to_output,error)",CLUSTER_1,CLUSTER_3
hidden_inputs,"numpy.dot(features,self.weights_input_to_hidden)",CLUSTER_1,CLUSTER_3
final_inputs,"numpy.dot(hidden_outputs,self.weights_hidden_to_output)",CLUSTER_1,CLUSTER_3
delta_weights_i_h+,"numpy.outer(X,hidden_error_term)",CLUSTER_1,CLUSTER_3
delta_weights_h_o+,"numpy.outer(hidden_outputs,output_error_term)",CLUSTER_1,CLUSTER_3
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_1,CLUSTER_3
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_1,CLUSTER_3
rides,pandas.read_csv(data_path),CLUSTER_1,CLUSTER_3
dates,pandas.to_datetime(rides.ix[test_data.index]['dteday']),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_3
_,"matplotlib.pyplot.ylim(ymin=0,ymax=1.5)",CLUSTER_1,CLUSTER_3
frameArray,numpy.array(frame),CLUSTER_4,CLUSTER_7
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_4,CLUSTER_7
temp,"pandas.concat([X_train,y_train],axis=1)",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv('houseprice.csv',usecols=cols_to_use)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_5,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data[['BsmtQual','FireplaceQu','GarageType']],
data.SalePrice,
test_size=0.3,
random_state=0)",CLUSTER_5,CLUSTER_5
data,"pandas.DataFrame({'area':area,'pop':pop})",CLUSTER_8,CLUSTER_4
data,"pandas.Series([0.25,0.5,0.75,1.0],
index=['a','b','c','d'])",CLUSTER_8,CLUSTER_4
data,"pandas.Series(['a','b','c'],index=[1,3,5])",CLUSTER_8,CLUSTER_4
area,"pandas.Series({'California':423967,'Texas':695662,
'NewYork':141297,'Florida':170312,
'Illinois':149995})",CLUSTER_8,CLUSTER_4
pop,"pandas.Series({'California':38332521,'Texas':26448193,
'NewYork':19651127,'Florida':19552860,
'Illinois':12882135})",CLUSTER_8,CLUSTER_4
"X,Y","sklearn.datasets.make_circles(n_samples=500,noise=0.02)",CLUSTER_5,CLUSTER_10
X_,"numpy.zeros((X.shape[0],X.shape[1]+1)",CLUSTER_5,CLUSTER_10
input_df,"pandas.DataFrame([[input_json['fromuser'],input_json['touser']]])",CLUSTER_5,CLUSTER_1
temp_data,pandas.read_csv('dat.csv'),CLUSTER_5,CLUSTER_1
clf1,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_1
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.35,random_state=0)",CLUSTER_5,CLUSTER_1
test_sample,"json.dumps({""fromuser"":3,\
""touser"":2})",CLUSTER_5,CLUSTER_1
input_json,json.loads(input_str),CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame(iris.data,columns=['sepal_len','sepal_width','petal_len','petal_width'])",CLUSTER_7,CLUSTER_5
target,"pandas.DataFrame(iris.target,columns=['target'])",CLUSTER_7,CLUSTER_5
df_Xy,"pandas.concat([df,target],axis=1)",CLUSTER_7,CLUSTER_5
df_Xy,"pandas.concat([df[['proba_0','proba_1','proba_2']],target],axis=1)",CLUSTER_7,CLUSTER_5
"train_X,val_X,train_y,val_y","sklearn.model_selection.train_test_split(df,iris.target,random_state=1)",CLUSTER_7,CLUSTER_5
"train_X,val_X,train_y,val_y","sklearn.model_selection.train_test_split(df,iris.target,test_size=0.2)",CLUSTER_7,CLUSTER_5
iris,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_5
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=1)",CLUSTER_7,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(clf,df[features],iris.target,cv=5)",CLUSTER_7,CLUSTER_5
lines,"re.sub(r""([A-Z])",CLUSTER_4,CLUSTER_11
y,"numpy.zeros((1,Ty)",CLUSTER_4,CLUSTER_11
x,"numpy.expand_dims(x,axis=0)",CLUSTER_4,CLUSTER_11
X,"numpy.load(""./XY_train/X.npy"")",CLUSTER_4,CLUSTER_11
Y,"numpy.load(""./XY_train/Y.npy"")",CLUSTER_4,CLUSTER_11
X_dev,"numpy.load(""./XY_dev/X_dev.npy"")",CLUSTER_4,CLUSTER_11
Y_dev,"numpy.load(""./XY_dev/Y_dev.npy"")",CLUSTER_4,CLUSTER_11
vif,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df,"pandas.concat([pro,npro],axis=0)",CLUSTER_7,CLUSTER_8
contingency_table,"pandas.crosstab(y,X[i],margins=True)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('drive/MyDrive/train.csv'),CLUSTER_7,CLUSTER_8
df.education,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
df.gender,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
df.recruitment_channel,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
results,"sklearn.metrics.confusion_matrix(ytest,Y_predict)",CLUSTER_7,CLUSTER_8
results,"sklearn.metrics.confusion_matrix(ytest,Y_predict)",CLUSTER_7,CLUSTER_8
LR,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=2)",CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=2)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(estimator=rf,param_grid=param_grid,
cv=3,n_jobs=-1,verbose=1,return_train_score=True)",CLUSTER_7,CLUSTER_8
"fpr,tpr,_","sklearn.metrics.roc_curve(ytest,Y_predict)",CLUSTER_7,CLUSTER_8
"fpr,tpr,_","sklearn.metrics.roc_curve(ytest,Y_predict)",CLUSTER_7,CLUSTER_8
DT,sklearn.tree.DecisionTreeClassifier(random_state=2),CLUSTER_7,CLUSTER_8
NB,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
RF,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
rfc,"sklearn.ensemble.RandomForestClassifier(bootstrap=True,
max_depth=40,
n_estimators=100)",CLUSTER_7,CLUSTER_8
"f,axes","matplotlib.pyplot.subplots(1,2)",CLUSTER_7,CLUSTER_8
"stat,p,dof,expected",scipy.stats.chi2_contingency(contingency_table),CLUSTER_7,CLUSTER_8
"Xtrain,Xtest,ytrain,ytest","sklearn.model_selection.train_test_split(X,y,test_size=0.30)",CLUSTER_7,CLUSTER_8
cr,"sklearn.metrics.classification_report(ytest,Y_predict)",CLUSTER_7,CLUSTER_8
cr,"sklearn.metrics.classification_report(ytest,Y_predict)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(ytest,Y_predict)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(ytest,Y_predict)",CLUSTER_7,CLUSTER_8
arr,"numpy.cumsum(np.round(pca.explained_variance_ratio_,decimals=4)",CLUSTER_7,CLUSTER_8
X_pcad,"pandas.DataFrame(X_pca[:,0:num_var],index=X.index)",CLUSTER_7,CLUSTER_8
data,"pandas.read_csv(""finans.csv"")",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=42)",CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=6),CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
heart_disease,pandas.read_csv('_Data/heart_disease.csv'),CLUSTER_7,CLUSTER_5
cross_val_score,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5)",CLUSTER_7,CLUSTER_5
clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,
y,
test_size=0.2)",CLUSTER_7,CLUSTER_5
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,y_probs_positive)",CLUSTER_7,CLUSTER_5
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,y_test)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(3,3)",CLUSTER_7,CLUSTER_5
conf_mat,"sklearn.metrics.confusion_matrix(y_test,y_preds)",CLUSTER_7,CLUSTER_5
ax,"seaborn.heatmap(conf_mat,
annot=True,
cbar=True)",CLUSTER_7,CLUSTER_5
h,matplotlib.pyplot.hist(line_lengths),CLUSTER_0,CLUSTER_10
h,"matplotlib.pyplot.hist(total_tokens_per_line,color=""teal"")",CLUSTER_0,CLUSTER_10
c,collections.Counter(words),CLUSTER_0,CLUSTER_10
c,collections.Counter(words),CLUSTER_0,CLUSTER_10
prices.index,pandas.DatetimeIndex(prices.index),CLUSTER_8,CLUSTER_3
prices,"pandas.read_csv(r""financial_data/prices.csv"",index_col=0)",CLUSTER_8,CLUSTER_3
weights,numpy.random(),CLUSTER_8,CLUSTER_3
data,"pandas.read_csv('b1.csv',sep=';')",CLUSTER_1,CLUSTER_3
data3,"pandas.read_csv('b2.csv',sep=';')",CLUSTER_1,CLUSTER_3
"corear[i,:]",numpy.array([float(cpu),CLUSTER_12,CLUSTER_10
testar,numpy.asarray([line.strip(),CLUSTER_12,CLUSTER_10
testar,numpy.asarray([line.strip(),CLUSTER_12,CLUSTER_10
corear,numpy.zeros((len(testar),CLUSTER_12,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_10
df_final,"pandas.concat([belly_sample_otu_sort,belly_sample_name_sort],axis=1)",CLUSTER_8,CLUSTER_3
belly_metadata,"pandas.read_csv(""DataSets/Belly_Button_Biodiversity_Metadata.csv"")",CLUSTER_8,CLUSTER_3
belly_otu,"pandas.read_csv(""DataSets/belly_button_biodiversity_otu_id.csv"")",CLUSTER_8,CLUSTER_3
belly_sample,"pandas.read_csv(""DataSets/belly_button_biodiversity_samples.csv"")",CLUSTER_8,CLUSTER_3
meta_columns,"pandas.read_csv(""DataSets/metadata_columns.csv"")",CLUSTER_8,CLUSTER_3
reg1_features,"pandas.DataFrame(reg1.feature_importances_,index=X1_train.columns,columns=['Importance'])",CLUSTER_7,CLUSTER_5
results,"pandas.DataFrame(columns=['prediction','target'])",CLUSTER_7,CLUSTER_5
result,"pandas.DataFrame({'prediction':predictions,'target':targets})",CLUSTER_7,CLUSTER_5
results,"pandas.DataFrame(columns=['prediction','target'])",CLUSTER_7,CLUSTER_5
result,"pandas.DataFrame({'prediction':predictions,'target':targets})",CLUSTER_7,CLUSTER_5
results,"pandas.DataFrame(columns=['id','trip_duration'])",CLUSTER_7,CLUSTER_5
result,"pandas.DataFrame({'id':ids,'trip_duration':predictions})",CLUSTER_7,CLUSTER_5
trips,"pandas.concat([trips,weekdays],axis=1)",CLUSTER_7,CLUSTER_5
results,"pandas.concat([results,result],axis=0)",CLUSTER_7,CLUSTER_5
results,"pandas.concat([results,result],axis=0)",CLUSTER_7,CLUSTER_5
test,"pandas.concat([test,weekdays],axis=1)",CLUSTER_7,CLUSTER_5
results,"pandas.concat([results,result],axis=0)",CLUSTER_7,CLUSTER_5
weekdays,pandas.get_dummies(trips['dayofweek']),CLUSTER_7,CLUSTER_5
weekdays,pandas.get_dummies(test['dayofweek']),CLUSTER_7,CLUSTER_5
trips,"pandas.read_csv('train.csv',parse_dates=[2,3])",CLUSTER_7,CLUSTER_5
test,"pandas.read_csv('test.csv',parse_dates=[2,3])",CLUSTER_7,CLUSTER_5
theta,"numpy.arctan2(x2-x1,y2-y1)",CLUSTER_7,CLUSTER_5
theta,"numpy.arctan2(x2-x1,y2-y1)",CLUSTER_7,CLUSTER_5
trips['x1'],numpy.cos(theta),CLUSTER_7,CLUSTER_5
trips['x2'],numpy.cos(theta),CLUSTER_7,CLUSTER_5
test['x1'],numpy.cos(theta),CLUSTER_7,CLUSTER_5
test['x2'],numpy.cos(theta),CLUSTER_7,CLUSTER_5
x1,numpy.radians(-73.981920),CLUSTER_7,CLUSTER_5
y1,numpy.radians(40.768078),CLUSTER_7,CLUSTER_5
x2,numpy.radians(-73.958166),CLUSTER_7,CLUSTER_5
y2,numpy.radians(40.800572),CLUSTER_7,CLUSTER_5
x1,numpy.radians(-73.981920),CLUSTER_7,CLUSTER_5
y1,numpy.radians(40.768078),CLUSTER_7,CLUSTER_5
x2,numpy.radians(-73.958166),CLUSTER_7,CLUSTER_5
y2,numpy.radians(40.800572),CLUSTER_7,CLUSTER_5
trips['y1'],numpy.sin(theta),CLUSTER_7,CLUSTER_5
trips['y2'],numpy.sin(theta),CLUSTER_7,CLUSTER_5
test['y1'],numpy.sin(theta),CLUSTER_7,CLUSTER_5
test['y2'],numpy.sin(theta),CLUSTER_7,CLUSTER_5
"X1_train,X1_test,y1_train,y1_test","sklearn.model_selection.train_test_split(X1,y1,test_size=0.2)",CLUSTER_7,CLUSTER_5
"X2_train,X2_test,y2_train,y2_test","sklearn.model_selection.train_test_split(X2,y2,test_size=0.2)",CLUSTER_7,CLUSTER_5
"X3_train,X3_test,y3_train,y3_test","sklearn.model_selection.train_test_split(X3,y3,test_size=0.2)",CLUSTER_7,CLUSTER_5
"X4_train,X4_test,y4_train,y4_test","sklearn.model_selection.train_test_split(X4,y4,test_size=0.2)",CLUSTER_7,CLUSTER_5
t1,time.time(),CLUSTER_11,CLUSTER_12
source,"numpy.array(list(map(lambdax:to_categorical(x,num_classes=len(human_vocab)",CLUSTER_2,CLUSTER_10
s0,"numpy.zeros((m,n_s)",CLUSTER_2,CLUSTER_10
c0,"numpy.zeros((m,n_s)",CLUSTER_2,CLUSTER_10
prediction,"numpy.argmax(prediction,axis=-1)",CLUSTER_2,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_5,CLUSTER_7
"fig,axs","matplotlib.pyplot.subplots(nrows=3,ncols=6,constrained_layout=False,figsize=(12,4)",CLUSTER_5,CLUSTER_7
"fig,axs","matplotlib.pyplot.subplots(nrows=3,ncols=12,constrained_layout=False,figsize=(22,4)",CLUSTER_5,CLUSTER_7
ax.set(xticks,numpy.arange(cm.shape[1]),CLUSTER_5,CLUSTER_7
yticks,numpy.arange(cm.shape[0]),CLUSTER_5,CLUSTER_7
train_mean,numpy.mean(x_train),CLUSTER_5,CLUSTER_7
train_std,numpy.std(x_train),CLUSTER_5,CLUSTER_7
start,time.time(),CLUSTER_5,CLUSTER_7
end,time.time(),CLUSTER_5,CLUSTER_7
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_5,CLUSTER_7
y,numpy.arange(10),CLUSTER_3,CLUSTER_6
a,numpy.arange(6),CLUSTER_3,CLUSTER_6
x,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
a,"numpy.array([1,2,3,6])",CLUSTER_3,CLUSTER_6
a,"numpy.array([[1,2,3],[3,4,6.7],[5,9.0,5]])",CLUSTER_3,CLUSTER_6
b,"numpy.array([3,2,1])",CLUSTER_3,CLUSTER_6
a,"numpy.array([(10,)",CLUSTER_3,CLUSTER_6
a,"numpy.array([('abc',21,50)",CLUSTER_3,CLUSTER_6
a,"numpy.array([[30,40,70],[80,20,10],[50,90,60]])",CLUSTER_3,CLUSTER_6
wt,"numpy.array([3,5])",CLUSTER_3,CLUSTER_6
a,numpy.asarray(x),CLUSTER_3,CLUSTER_6
a,numpy.asarray(x),CLUSTER_3,CLUSTER_6
a,numpy.asarray(x),CLUSTER_3,CLUSTER_6
dt,numpy.dtype(np.int32),CLUSTER_3,CLUSTER_6
student,"numpy.dtype([('name','S20')",CLUSTER_3,CLUSTER_6
c,numpy.cos(a),CLUSTER_3,CLUSTER_6
b,numpy.sin(a),CLUSTER_3,CLUSTER_6
b,"numpy.linspace(0,2,4)",CLUSTER_3,CLUSTER_6
a,"numpy.linspace(-np.pi,np.pi,100)",CLUSTER_3,CLUSTER_6
y_pred_array,numpy.array(y_pred),CLUSTER_1,CLUSTER_9
y_val_array,numpy.array(y_val),CLUSTER_1,CLUSTER_9
y_pred,pandas.DataFrame(data=y_pred),CLUSTER_1,CLUSTER_9
X_train,"pandas.read_csv(""D:\\lab;signalprocessing\\forStudents\\medData\\train_x_resample3000_boundarysel_50pergroup.csv"")",CLUSTER_1,CLUSTER_9
y_train,"pandas.read_csv(""D:\\lab;signalprocessing\\forStudents\\medData\\train_y_resample3000_boundarysel_50pergroup.csv"")",CLUSTER_1,CLUSTER_9
X_val,"pandas.read_csv(""D:\\lab;signalprocessing\\forStudents\\medData\\scaled_validation_feature.csv"")",CLUSTER_1,CLUSTER_9
y_val,"pandas.read_csv(""D:\\lab;signalprocessing\\forStudents\\medData\\validation_label.csv"")",CLUSTER_1,CLUSTER_9
r,requests.get(url),CLUSTER_10,CLUSTER_12
er,sys.exc_info(),CLUSTER_10,CLUSTER_12
price_list_df,"pandas.DataFrame(articles[""series""][0][""data""])",CLUSTER_9,CLUSTER_2
price_list_df,"pandas.DataFrame(articles[""series""][0][""data""])",CLUSTER_9,CLUSTER_2
combined_data,"pandas.merge(oil_price_df,dow_df,on='Date')",CLUSTER_9,CLUSTER_2
dow_df,pandas.read_csv(dow_path),CLUSTER_9,CLUSTER_2
"oil_price_df[""Date""]","pandas.to_datetime(oil_price_df.loc[:,""Date""])",CLUSTER_9,CLUSTER_2
"dow_df[""Date""]","pandas.to_datetime(dow_df.loc[:,""Date""])",CLUSTER_9,CLUSTER_2
articles,requests.get(query_url),CLUSTER_9,CLUSTER_2
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_2
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_9,CLUSTER_2
latlong,"pandas.DataFrame({'Lat':[],'Long':[]})",CLUSTER_7,CLUSTER_5
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_7,CLUSTER_5
cf_list,"pandas.read_csv(""cafeterias_especiais.csv"",delimiter=';')",CLUSTER_7,CLUSTER_5
idh,"pandas.read_csv(""IDH.csv"",delimiter=';')",CLUSTER_7,CLUSTER_5
bairros,"pandas.read_csv('bairros.txt',sep=';')",CLUSTER_7,CLUSTER_5
"idh[""IDH""]","pandas.to_numeric(idh[""IDH""])",CLUSTER_7,CLUSTER_5
results,requests.get(url),CLUSTER_7,CLUSTER_5
results,requests.get(url),CLUSTER_7,CLUSTER_5
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_7,CLUSTER_5
x,numpy.arange(kclusters),CLUSTER_7,CLUSTER_5
randInd,"random.randint(0,len(stl_imgs)",CLUSTER_4,CLUSTER_11
not_y_test,"numpy.array([2,2,0,1])",CLUSTER_4,CLUSTER_11
classes,"numpy.loadtxt(os.path.join('data','stl10_binary','class_names.txt')",CLUSTER_4,CLUSTER_11
dataset,"pandas.read_csv(""time_series_covid19_confirmed_global_4_12.csv"")",CLUSTER_5,CLUSTER_5
seriesItaly,numpy.sum(np.array(seriesItaly.values),CLUSTER_5,CLUSTER_5
seriesSpain,numpy.sum(np.array(seriesSpain.values),CLUSTER_5,CLUSTER_5
seriesUsa,numpy.sum(np.array(seriesUsa.values),CLUSTER_5,CLUSTER_5
seriesBrazil,numpy.sum(np.array(seriesBrazil.values),CLUSTER_5,CLUSTER_5
model,"sklearn.pipeline.Pipeline([('poly',PolynomialFeatures(degree=d)",CLUSTER_5,CLUSTER_5
metrics[name]['overall'][metric],numpy.mean(value),CLUSTER_5,CLUSTER_5
metrics[name]['annual'][metric],numpy.mean(np.array(value),CLUSTER_5,CLUSTER_5
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=5,shuffle=True,random_state=42)",CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""/home/modak/Codebase/Projects/Pythonic3-Feel/Data/HousePrice.csv"",sep="","")",CLUSTER_5,CLUSTER_5
"xTrain,xTest,yTrain,yTest","sklearn.model_selection.train_test_split(X,Y)",CLUSTER_5,CLUSTER_5
Lreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
recordToSearch,"requests.get(gc2.sqlAPI(""DataDistillery"",""BCB"")",CLUSTER_10,CLUSTER_4
X,"numpy.array(boston.data[:,5])",CLUSTER_5,CLUSTER_10
Y,numpy.array(boston.target),CLUSTER_5,CLUSTER_10
X,numpy.array([np.ones(506),CLUSTER_5,CLUSTER_10
B,numpy.linalg.inv(X.T@X),CLUSTER_5,CLUSTER_10
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_10
toronto,pandas.DataFrame(columns=column_names),CLUSTER_9,CLUSTER_2
df_coords,"pandas.DataFrame(coords,columns=['Latitude','Longitude'])",CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
Scarborough_Avg_HousingPrice,"pandas.DataFrame({""Neighborhood"":df_2[""Neighborhood""],
""Average_Housing_Price"":[335000.0,286600.0,175000.0,225900.0,219400.0,
573900.0,225000.0,370500.0,370500.0,433500.0,279200.0,
279200.0,225000.0,370500.,255400.0,433500.0,433500.0,
435000.0,289500.0,265000.0,285900.0,239400.0,
589900.0,295000.0,380500.0,378500.0,438500.0,229200.0,
229200.0,365000.0,388500.,285400.0,493500.0,477500.0,378000.0,316600.0,195000.0,225900.0,219400.0,
573900.0,367000.0,370500.0,370500.0,363500.0,279200.0,
279200.0,271000.0,370500.,255400.0,383500.0,433500.0,335000.0,286600.0,185000.0,225900.0,219400.0,
573900.0,329000.0,370500.0,370500.0,533500.0,279200.0,
279200.0,375000.0,370500.,255400.0,493500.0,433500.0,335000.0,286600.0,165000.0,225900.0,219400.0,
573900.0,425000.0,370500.0,370500.0,433500.0,279200.0,
279200.0,195000.0,370500.,255400.0,403500.0,433500.0,335000.0,286600.0,187000.0,225900.0,219400.0,
573900.0,325000.0,370500.0,370500.0,333500.0,279200.0,
279200.0,289000.0,370500.,255400.0,413500.0,433500.0,254800.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0

]})",CLUSTER_9,CLUSTER_2
clusters,"pandas.DataFrame({""Cluster1"":df1[""Neighborhood""],
""Cluster2"":df2[""Neighborhood""],
""Cluster4"":df3[""Neighborhood""]})",CLUSTER_9,CLUSTER_2
Scarborough_school_ratings,"pandas.DataFrame({""Neighborhood"":df[""Neighborhood""],
""TopSchoolRating"":[7,9,5,8,10,10,7,10,1,2,1,2,7,2,3,2,6,
5,4,8,9,9,6,6,4,5,4,6,8,10,8,9,6,2,
10,2,5,8,9,6,6,10,8,9,1,2,3,4,5,6,9,
8,5,9,6,9,6,4,8,10,2,5,6,3,9,8,7,
7,8,5,8,9,1,5,4,7,2,3,6,6,9,4,8,7,
4,8,9,2,6,4,7,5,10,4,6,8,9,7,5,6,5,8,7,8,5,9,6,9,6,4,8,10,2,5,6,3,9,8,7,
7,8,5,8,9,1,5,4,7,2,3,6,6,9,4,8,7,
4,8,9,2,6,4,7,5,10,4,6,8,9,7,5,6,5,8,7,7,2,3,6,6,9,4,8,7,
4,8,9,2,6,4,7,5,10,4,6,8,9,7,5,6
]})",CLUSTER_9,CLUSTER_2
a,pandas.Series(nearby_venues.categories),CLUSTER_9,CLUSTER_2
Scarborough_onehot,"pandas.get_dummies(Scarborough_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
extracting_data,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
venue_results,requests.get(url),CLUSTER_9,CLUSTER_2
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=3,random_state=0)",CLUSTER_9,CLUSTER_2
downbins,"numpy.concatenate((t-dt/2.,[max(t)",CLUSTER_12,CLUSTER_9
cov,"numpy.dot(cov,cov)",CLUSTER_12,CLUSTER_9
s_all,numpy.argsort(time),CLUSTER_12,CLUSTER_9
timeup,numpy.linspace(min(t),CLUSTER_12,CLUSTER_9
flareup,"numpy.piecewise(timeup,[(timeup<=tpeak)",CLUSTER_12,CLUSTER_9
flare,"numpy.piecewise(t,[(t<=tpeak)",CLUSTER_12,CLUSTER_9
cov,numpy.triu(cov),CLUSTER_12,CLUSTER_9
dt,numpy.nanmedian(np.diff(t),CLUSTER_12,CLUSTER_9
icov,numpy.linalg.inv(cov),CLUSTER_12,CLUSTER_9
"fig,axes","matplotlib.pyplot.subplots(4,figsize=(10,7)",CLUSTER_12,CLUSTER_9
flare_table,"pandas.read_csv('https://raw.githubusercontent.com/jradavenport/GJ1243-Flares/master/data/gj1243_master_flares.tbl',
skiprows=23,delim_whitespace=True,names=['indexofflarestartin""gj1243_master_slc.dat""',
'indexofflarestopin""gj1243_master_slc.dat""','t_start','t_stop'
,'t_peak','t_rise','t_decay','fluxpeak',
'ED','Durationofrise',
'Durationofdecay','Complexflag',
'
'
'

t_starts=flare_table.loc[:,'t_start']
t_stops=flare_table.loc[:,'t_stop']
flux_peak=flare_table.loc[:,'fluxpeak']
complex_flag=flare_table['Complexflag']
ED=flare_table['ED']
flare_table['Flare_Duration']=1440.*(t_stops-t_starts)",CLUSTER_12,CLUSTER_9
df_tmp,pandas.read_csv(gp_files[k]),CLUSTER_12,CLUSTER_9
stacked_flare_vals,pandas.read_csv('stacked_flare_values.csv'),CLUSTER_12,CLUSTER_9
"flare,_,_","scipy.stats.binned_statistic(timeup,flareup,statistic='mean',
bins=downbins)",CLUSTER_12,CLUSTER_9
nsat,numpy.size(rho[sat_mask]),CLUSTER_12,CLUSTER_10
nsat,numpy.size(rho[sat_mask]),CLUSTER_12,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(14,4.5)",CLUSTER_12,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(8,5)",CLUSTER_12,CLUSTER_10
x,"numpy.arange(0,1,0.002)",CLUSTER_5,CLUSTER_9
y_mean,numpy.array(y_true),CLUSTER_5,CLUSTER_9
y_test,numpy.array(y_test),CLUSTER_5,CLUSTER_9
"C,S",numpy.cos(x),CLUSTER_5,CLUSTER_9
x,"numpy.linspace(-np.pi,np.pi,256,endpoint=True)",CLUSTER_5,CLUSTER_9
clf,"sklearn.pipeline.Pipeline([('poly',PolynomialFeatures(degree=d)",CLUSTER_5,CLUSTER_9
df2,pandas.get_dummies(df),CLUSTER_5,CLUSTER_5
df,pandas.read_csv('readonly/mushrooms.csv'),CLUSTER_5,CLUSTER_5
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,mesh_step_size)",CLUSTER_5,CLUSTER_5
verticalalignment,"'center',transform=matplotlib.pyplot.gca()",CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(pca,y,random_state=0)",CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=20),CLUSTER_5,CLUSTER_5
model,sklearn.tree.DecisionTreeClassifier(max_depth=3),CLUSTER_5,CLUSTER_5
model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_5
model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_5,CLUSTER_5
model,sklearn.svm.SVC(kernel='linear'),CLUSTER_5,CLUSTER_5
model,"sklearn.svm.SVC(kernel='rbf',C=1)",CLUSTER_5,CLUSTER_5
model,"sklearn.svm.SVC(kernel='rbf',C=10)",CLUSTER_5,CLUSTER_5
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_5
model,sklearn.neural_network.MLPClassifier(),CLUSTER_5,CLUSTER_5
A,numpy.arange(24),CLUSTER_1,CLUSTER_10
res,"requests.get(f""https://zh.wikipedia.org/wiki/{term}"")",CLUSTER_9,CLUSTER_2
request,"requests.get(f""https://www.youtube.com/results?search_query={term}"")",CLUSTER_9,CLUSTER_2
request,"requests.get(f""https://www.youtube.com/results?search_query={term}"")",CLUSTER_9,CLUSTER_2
idx,pandas.date_range(ts.index.min(),CLUSTER_11,CLUSTER_0
ts,pandas.read_csv('../../datasets/srv-1-tc-5m.csv'),CLUSTER_11,CLUSTER_0
ts.index,pandas.to_datetime(ts['ts']),CLUSTER_11,CLUSTER_0
start_time,time.time(),CLUSTER_11,CLUSTER_0
fig,matplotlib.pyplot.figure(plot_without_waiting.figure_counter),CLUSTER_11,CLUSTER_0
fig,matplotlib.pyplot.figure(plot_without_waiting.figure_counter),CLUSTER_11,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_11,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_10
clf,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_12,CLUSTER_10
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_12,CLUSTER_10
dot_data,"sklearn.tree.export_graphviz(clf,out_file=None)",CLUSTER_12,CLUSTER_10
dot_data,"sklearn.tree.export_graphviz(clf,out_file=None,
feature_names=iris.feature_names,
class_names=iris.target_names,
filled=True,rounded=True,
special_characters=True)",CLUSTER_12,CLUSTER_10
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=plt.cm.Paired)",CLUSTER_12,CLUSTER_10
idx,numpy.where(y==i),CLUSTER_12,CLUSTER_10
X,"numpy.sort(5*np.random.rand(40,1)",CLUSTER_12,CLUSTER_10
y,numpy.cos(X),CLUSTER_12,CLUSTER_10
X_test,"numpy.linspace(0,5,500)",CLUSTER_12,CLUSTER_10
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,plot_step)",CLUSTER_12,CLUSTER_10
regr_1,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_12,CLUSTER_10
regr_2,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_12,CLUSTER_10
df['status'],pandas.get_dummies(df.status),CLUSTER_7,CLUSTER_3
y,numpy.sin(x),CLUSTER_4,CLUSTER_11
x,"numpy.linspace(0,10,100)",CLUSTER_4,CLUSTER_11
use_index,math.floor(index*reduce_ratio),CLUSTER_11,CLUSTER_3
violations['hour'],numpy.floor(violations['isstime']/100),CLUSTER_11,CLUSTER_3
hot_meter_numbers,pandas.Series(grp.index),CLUSTER_11,CLUSTER_3
violations,"pandas.read_csv(""../data/raw/160c98a1-ad56-4658-8553-5ee8e7d0d953.csv.gz"",
compression='gzip',
low_memory=False)",CLUSTER_11,CLUSTER_3
meters,"pandas.read_csv(""../data/raw/d9b11b8f-67f3-48c4-8831-0f22d93166ce"")",CLUSTER_11,CLUSTER_3
violations_dictionary,"pandas.read_json(
""https://data.smartcolumbusos.com/api/v1/dataset/160c98a1-ad56-4658-8553-5ee8e7d0d953/dictionary"")",CLUSTER_11,CLUSTER_3
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,figsize=(20,5)",CLUSTER_11,CLUSTER_3
"_,ax0","matplotlib.pyplot.subplots(1,1,figsize=(20,5)",CLUSTER_11,CLUSTER_3
"_,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,figsize=(20,5)",CLUSTER_11,CLUSTER_3
ax,"seaborn.distplot(violations['isstime'],bins=24,norm_hist=True,)",CLUSTER_11,CLUSTER_3
%timedata,"pandas.concat(tp,ignore_index=True)",CLUSTER_3,CLUSTER_3
tp,"pandas.read_csv('crimes.csv',iterator=True,chunksize=100000,parse_dates=['Date'])",CLUSTER_3,CLUSTER_3
od,pandas.read_csv(str(rel_path),CLUSTER_8,CLUSTER_12
tic,time.perf_counter(),CLUSTER_8,CLUSTER_12
toc,time.perf_counter(),CLUSTER_8,CLUSTER_12
tic,time.perf_counter(),CLUSTER_8,CLUSTER_12
toc,time.perf_counter(),CLUSTER_8,CLUSTER_12
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_3
targets,"numpy.array(targets_list,ndmin=2)",CLUSTER_1,CLUSTER_3
inputs,"numpy.array(inputs_list,ndmin=2)",CLUSTER_1,CLUSTER_3
test_w_i_h,"numpy.array([[0.1,0.4,-0.3],
[-0.2,0.5,0.2]])",CLUSTER_1,CLUSTER_3
test_w_h_o,"numpy.array([[0.3,-0.1]])",CLUSTER_1,CLUSTER_3
hidden_inputs,"numpy.dot(self.weights_input_to_hidden,inputs)",CLUSTER_1,CLUSTER_3
final_inputs,"numpy.dot(self.weights_hidden_to_output,hidden_outputs)",CLUSTER_1,CLUSTER_3
hidden_errors,numpy.dot(np.transpose(self.weights_hidden_to_output),CLUSTER_1,CLUSTER_3
hidden_inputs,"numpy.dot(self.weights_input_to_hidden,inputs)",CLUSTER_1,CLUSTER_3
final_inputs,"numpy.dot(self.weights_hidden_to_output,hidden_outputs)",CLUSTER_1,CLUSTER_3
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_1,CLUSTER_3
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_1,CLUSTER_3
rides,pandas.read_csv(data_path),CLUSTER_1,CLUSTER_3
dates,pandas.to_datetime(rides.ix[test_data.index]['dteday']),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_1,CLUSTER_3
y,"numpy.array([self.class_to_index_[label]
forlabeliny],dtype=np.int32)",CLUSTER_4,CLUSTER_7
class_indices,numpy.argmax(self.predict_proba(X),CLUSTER_4,CLUSTER_7
means,"numpy.mean(Z,axis=1)",CLUSTER_4,CLUSTER_7
stds,"numpy.std(Z,axis=1)",CLUSTER_4,CLUSTER_7
W,"np.random.normal(size=(100,100),scale=numpy.sqrt(1/100)",CLUSTER_4,CLUSTER_7
z,"numpy.linspace(-5,5,200)",CLUSTER_4,CLUSTER_7
hidden2_batches,"numpy.array_split(h2_cache[shuffled_idx],n_batches)",CLUSTER_4,CLUSTER_7
y_batches,"numpy.array_split(y_train[shuffled_idx],n_batches)",CLUSTER_4,CLUSTER_7
self.classes_,numpy.unique(y),CLUSTER_4,CLUSTER_7
rnd_search,sklearn.model_selection.RandomizedSearchCV(DNNClassifier(random_state=42),CLUSTER_4,CLUSTER_7
rnd_search_bn,sklearn.model_selection.RandomizedSearchCV(DNNClassifier(random_state=42),CLUSTER_4,CLUSTER_7
rnd_search_dropout,sklearn.model_selection.RandomizedSearchCV(DNNClassifier(random_state=42),CLUSTER_4,CLUSTER_7
t0,time.time(),CLUSTER_4,CLUSTER_7
t1,time.time(),CLUSTER_4,CLUSTER_7
t0,time.time(),CLUSTER_4,CLUSTER_7
t1,time.time(),CLUSTER_4,CLUSTER_7
indep,numpy.linspace(x.min(),CLUSTER_1,CLUSTER_10
y,"numpy.linspace(x[0],x[1],300)",CLUSTER_1,CLUSTER_10
y,"numpy.linspace(x[0],x[1],300)",CLUSTER_1,CLUSTER_10
zoom,matplotlib.pyplot.plot(y),CLUSTER_1,CLUSTER_10
fig1,"matplotlib.pyplot.plot(y,g_y)",CLUSTER_1,CLUSTER_10
fig1,"matplotlib.pyplot.plot(y,y,color='red')",CLUSTER_1,CLUSTER_10
image_paths,numpy.array(image_paths_test),CLUSTER_4,CLUSTER_0
cls_pred,"numpy.argmax(y_pred,axis=1)",CLUSTER_4,CLUSTER_0
img_array,numpy.expand_dims(np.array(img_resized),CLUSTER_4,CLUSTER_0
img_array,numpy.expand_dims(np.array(img_resized),CLUSTER_4,CLUSTER_0
classes,numpy.unique(cls_train),CLUSTER_4,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_4,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(3,3)",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_true=cls_test,
y_pred=cls_pred)",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(""C:/Users/User/Desktop/BikeSharingData.csv"")",CLUSTER_7,CLUSTER_3
grid,"seaborn.FacetGrid(df,col='season')",CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_2,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_2,CLUSTER_10
results,"pandas.DataFrame(AICMin,columns=['AR[p]','DIFF[h]','MA[q]','AIC_Score'])",CLUSTER_7,CLUSTER_9
Albania_male_Population_forecasts_for_30_years_from_2015,pandas.DataFrame({'Forecast':f}),CLUSTER_7,CLUSTER_9
data,pandas.read_csv('who_suicide_statistics.csv'),CLUSTER_7,CLUSTER_9
pred,"numpy.append([0],arima_obj_fit.fittedvalues.tolist()",CLUSTER_7,CLUSTER_9
actualval,"numpy.append([0],arima_obj_fit.resid+arima_obj_fit.fittedvalues)",CLUSTER_7,CLUSTER_9
"f,ax",matplotlib.pyplot.subplots(sharex=True),CLUSTER_7,CLUSTER_9
"f,axarr","matplotlib.pyplot.subplots(1,sharex=True)",CLUSTER_7,CLUSTER_9
time,"numpy.arange(beginTime,endTime,samplingInterval)",CLUSTER_1,CLUSTER_10
values,numpy.arange(int(tpCount/2),CLUSTER_1,CLUSTER_10
amplitude1,numpy.sin(input1),CLUSTER_1,CLUSTER_10
amplitude2,numpy.sin(2*np.pi*signal2Frequency*time),CLUSTER_1,CLUSTER_10
fourierTransform,numpy.fft.fft(amplitude),CLUSTER_1,CLUSTER_10
"figure,axis","matplotlib.pyplot.subplots(4,1)",CLUSTER_1,CLUSTER_10
t,json.loads(text),CLUSTER_10,CLUSTER_4
page,requests.get(url),CLUSTER_9,CLUSTER_2
df,"pandas.DataFrame(data,columns=dfs[0].index)",CLUSTER_9,CLUSTER_2
df,"pandas.Series(data=values,index=keys)",CLUSTER_9,CLUSTER_2
df,"pandas.Series(data=values,index=keys)",CLUSTER_9,CLUSTER_2
df,"pandas.Series(data=values,index=keys)",CLUSTER_9,CLUSTER_2
df,"pandas.Series(data=values,index=keys)",CLUSTER_9,CLUSTER_2
df,"pandas.Series(data=values,index=keys)",CLUSTER_9,CLUSTER_2
df,"pandas.concat([info,valores_empresa,balanco,demonstrativos,indicadores])",CLUSTER_9,CLUSTER_2
pdh,"pandas.read_csv(""pluto.csv"")",CLUSTER_8,CLUSTER_4
dataframe,"pandas.read_csv(""news.csv"")",CLUSTER_5,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(dataframe['text'],labels,test_size=0.2,random_state=7)",CLUSTER_5,CLUSTER_1
pac,sklearn.linear_model.PassiveAggressiveClassifier(max_iter=50),CLUSTER_5,CLUSTER_1
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_5,CLUSTER_1
x,"numpy.linspace(0,14,100)",CLUSTER_2,CLUSTER_7
results,numpy.zeros((len(sequences),CLUSTER_2,CLUSTER_10
results,numpy.zeros((len(labels),CLUSTER_2,CLUSTER_10
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_7,CLUSTER_9
data,pandas.Series(data),CLUSTER_7,CLUSTER_9
data,"pandas.concat([data[yvar],data[xvars]],axis=1)",CLUSTER_7,CLUSTER_9
data,"pandas.read_csv('./y_c.csv',header=0,usecols=[1,2,3],index_col=0)",CLUSTER_7,CLUSTER_9
dat,"pandas.read_csv('./C_Y.csv',header=0,usecols=[1,2,3],index_col='时间',)",CLUSTER_7,CLUSTER_9
data,"pandas.read_csv('./data/AirPassengers.csv',index_col='Month',parse_dates=True)",CLUSTER_7,CLUSTER_9
df,"pandas.read_excel('./lvyou.xlsx',index_col=""地区"")",CLUSTER_7,CLUSTER_9
df.index,pandas.to_datetime(df.trade_date),CLUSTER_7,CLUSTER_9
Y,numpy.empty_like(y),CLUSTER_7,CLUSTER_9
garch,numpy.zeros_like(w),CLUSTER_7,CLUSTER_9
sigsq,numpy.zeros_like(w),CLUSTER_7,CLUSTER_9
log_recover,numpy.exp(diff_recover_ts),CLUSTER_7,CLUSTER_9
log_recover,numpy.exp(diff_recover_ts),CLUSTER_7,CLUSTER_9
ts_log,numpy.log(ts),CLUSTER_7,CLUSTER_9
ts_log,numpy.log(ts),CLUSTER_7,CLUSTER_9
df['ret'],numpy.log(df.close/df.close.shift(1),CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(10,4)",CLUSTER_7,CLUSTER_9
orig,"matplotlib.pyplot.plot(timeseries,color='blue',label='Original')",CLUSTER_7,CLUSTER_9
mean,"matplotlib.pyplot.plot(rolmean,color='red',label='RollingMean')",CLUSTER_7,CLUSTER_9
std,"matplotlib.pyplot.plot(rolstd,color='black',label='RollingStd')",CLUSTER_7,CLUSTER_9
ts_ax,"matplotlib.pyplot.subplot2grid(layout,(0,0)",CLUSTER_7,CLUSTER_9
acf_ax,"matplotlib.pyplot.subplot2grid(layout,(1,0)",CLUSTER_7,CLUSTER_9
pacf_ax,"matplotlib.pyplot.subplot2grid(layout,(1,1)",CLUSTER_7,CLUSTER_9
qq_ax,"matplotlib.pyplot.subplot2grid(layout,(2,0)",CLUSTER_7,CLUSTER_9
pp_ax,"matplotlib.pyplot.subplot2grid(layout,(2,1)",CLUSTER_7,CLUSTER_9
ts1_ax,"matplotlib.pyplot.subplot2grid(layout,(0,0)",CLUSTER_7,CLUSTER_9
ts2_ax,"matplotlib.pyplot.subplot2grid(layout,(1,0)",CLUSTER_7,CLUSTER_9
x_value,"numpy.array([np.min(X[:,1])",CLUSTER_1,CLUSTER_3
x_test,"numpy.array([45,85])",CLUSTER_1,CLUSTER_3
initial_theta,"numpy.zeros((n+1,1)",CLUSTER_1,CLUSTER_3
mean,"numpy.mean(X,axis=0)",CLUSTER_1,CLUSTER_3
std,"numpy.std(X,axis=0)",CLUSTER_1,CLUSTER_3
X,"numpy.append(np.ones((m,1)",CLUSTER_1,CLUSTER_3
x_test,numpy.append(np.ones(1),CLUSTER_1,CLUSTER_3
df,"pandas.read_csv(""ex2data1.txt"",header=None)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(7,7)",CLUSTER_1,CLUSTER_10
"y_hist,x_hist,ignored","matplotlib.pyplot.hist(means,bins=n_bins,range=[x_min,x_max],density=True)",CLUSTER_1,CLUSTER_10
means,numpy.zeros(n_exp),CLUSTER_1,CLUSTER_10
means[i],numpy.mean(z),CLUSTER_1,CLUSTER_10
xx,"numpy.linspace(x_min,x_max,1000)",CLUSTER_1,CLUSTER_10
one_hot,"numpy.zeros([n,c])",CLUSTER_3,CLUSTER_6
del_w[-1],"numpy.dot(delta,activations[-2].transpose()",CLUSTER_3,CLUSTER_6
del_w[-l],"numpy.dot(delta,activations[-l-1].transpose()",CLUSTER_3,CLUSTER_6
x,"numpy.split(x,n)",CLUSTER_3,CLUSTER_6
y,"numpy.split(one_hot,n)",CLUSTER_3,CLUSTER_6
x,sklearn.preprocessing.normalize(x),CLUSTER_3,CLUSTER_6
unrate,"pandas.read_csv(""unrate.csv"")",CLUSTER_8,CLUSTER_3
"unrate[""DATE""]","pandas.to_datetime(unrate[""DATE""])",CLUSTER_8,CLUSTER_3
train_df,"pandas.read_csv(""data/train.csv"")",CLUSTER_0,CLUSTER_0
test_df,"pandas.read_csv(""data/test.csv"")",CLUSTER_0,CLUSTER_0
all_embs,numpy.stack(embeddings_index.values(),CLUSTER_0,CLUSTER_0
"train_df,val_df","sklearn.model_selection.train_test_split(train_df,test_size=0.1,random_state=2018)",CLUSTER_0,CLUSTER_0
x,"re.sub('[0-9]{5,}','
x=re.sub('[0-9]{4}','
x=re.sub('[0-9]{3}','
x=re.sub('[0-9]{2}','
returnx
train_df[""question_text""]=train_df[""question_text""].progress_apply(lambdax:clean_numbers(x)",CLUSTER_0,CLUSTER_0
mispell_re,re.compile('(%s),CLUSTER_0,CLUSTER_0
congress_df,pandas.read_csv('congress-terms.csv'),CLUSTER_1,CLUSTER_3
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_3
data,pandas.read_csv('houseprice.csv'),CLUSTER_5,CLUSTER_5
X_train[variable+'_freq_imp'],numpy.where(X_train[variable].isin(rare_cat),CLUSTER_5,CLUSTER_5
X_test[variable+'_freq_imp'],numpy.where(X_test[variable].isin(rare_cat),CLUSTER_5,CLUSTER_5
X_train[variable+'_rare_imp'],numpy.where(X_train[variable].isin(rare_cat),CLUSTER_5,CLUSTER_5
X_test[variable+'_rare_imp'],numpy.where(X_test[variable].isin(rare_cat),CLUSTER_5,CLUSTER_5
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=800,random_state=39)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,data.SalePrice,test_size=0.3,
random_state=0)",CLUSTER_5,CLUSTER_5
QSP_1,pandas.read_csv('BTRQSp1data.csv'),CLUSTER_7,CLUSTER_8
fees_of_courses['Target_fees'],pandas.to_numeric(fees_of_courses['Target_fees']),CLUSTER_7,CLUSTER_8
rawNames,"pandas.DataFrame({'original_name':indiv['DELAPAZ,ALBERTO']})",CLUSTER_0,CLUSTER_3
df,pandas.DataFrame(names),CLUSTER_0,CLUSTER_3
indiv,"pandas.read_csv('/Users/Brandon/Downloads/indiv18/by_date/itcont_2018_20180930_52010302.txt',sep=""|"",nrows=5000)",CLUSTER_0,CLUSTER_3
df,"pandas.DataFrame({'Hand':['right','left','left','right','right','right','right','right','left','right'],
'Smoke':['yes','yes','no','no','yes','no','no','no','no','yes'],
'sex':['male','female','female','male','male','male','female','female','male','female'],
'weight':[80,50,48,75,68,100,40,90,88,76],
'IQ':[100,120,90,130,140,80,94,110,100,160]})",CLUSTER_8,CLUSTER_3
df,pandas.read_csv('organics.csv'),CLUSTER_7,CLUSTER_3
ax,"seaborn.countplot(data=df,x=i)",CLUSTER_7,CLUSTER_3
ax,"seaborn.countplot(data=df2,x=i)",CLUSTER_7,CLUSTER_3
experiences,"random.sample(self.memory,k=self.batch_size)",CLUSTER_6,CLUSTER_10
self.seed,random.seed(seed),CLUSTER_6,CLUSTER_10
self.seed,random.seed(seed),CLUSTER_6,CLUSTER_10
self.experience,"collections.namedtuple(""Experience"",field_names=[""state"",""action"",""reward"",""next_state"",""done""])",CLUSTER_6,CLUSTER_10
self.memory,collections.deque(maxlen=buffer_size),CLUSTER_6,CLUSTER_10
scores_window,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
x,"numpy.sort(np.random.uniform(0,1,n)",CLUSTER_2,CLUSTER_7
y,numpy.sin(x*scale),CLUSTER_2,CLUSTER_7
data,pandas.read_csv('spambase.data'),CLUSTER_5,CLUSTER_5
logistic,sklearn.naive_bayes.MultinomialNB(),CLUSTER_5,CLUSTER_5
logistic,"sklearn.linear_model.LogisticRegression(C=1,max_iter=100000)",CLUSTER_5,CLUSTER_5
logistic,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_5
logistic,sklearn.ensemble.RandomForestClassifier(),CLUSTER_5,CLUSTER_5
logistic,sklearn.svm.SVC(),CLUSTER_5,CLUSTER_5
logistic,sklearn.linear_model.PassiveAggressiveClassifier(),CLUSTER_5,CLUSTER_5
logistic,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_5,CLUSTER_5
logistic,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y)",CLUSTER_5,CLUSTER_5
sub_vol,numpy.zeros(sub_mask.shape),CLUSTER_4,CLUSTER_11
seqmat,numpy.zeros((len(stimseq),CLUSTER_4,CLUSTER_11
deltrn_feats,"numpy.zeros((nT,nD*nF)",CLUSTER_4,CLUSTER_11
sub_udwts,numpy.zeros((len(stims),CLUSTER_4,CLUSTER_11
sub_face_wts_vol,numpy.zeros(sub_mask.shape),CLUSTER_4,CLUSTER_11
sub_place_wts_vol,numpy.zeros(sub_mask.shape),CLUSTER_4,CLUSTER_11
stimseq,"numpy.repeat(np.hstack(seqdata[""runBlockInds""])",CLUSTER_4,CLUSTER_11
stimseq,"numpy.hstack([stimseq,stimseq])",CLUSTER_4,CLUSTER_11
sstimseq,"numpy.hstack([[0,0],stimseq[:-2]])",CLUSTER_4,CLUSTER_11
sub_data,"numpy.vstack((np.load(pjoin(data_dir,'subj1_semloc_data_pt1.npy')",CLUSTER_4,CLUSTER_11
sub_zdata,numpy.nan_to_num(zscore(sub_data),CLUSTER_4,CLUSTER_11
sub_mask,"numpy.load(pjoin(data_dir,'subj1_corticalmask.npy')",CLUSTER_4,CLUSTER_11
"sub_wts,sub_res,sub_rank,sub_sing","numpy.linalg.lstsq(zdeltrn,sub_zdata,rcond=0.0)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(15,5)",CLUSTER_4,CLUSTER_11
_,"matplotlib.pyplot.xlabel('Time[TR]',fontsize=fontsize)",CLUSTER_4,CLUSTER_11
_,matplotlib.pyplot.ylabel('ResponseLevel(a.u.),CLUSTER_4,CLUSTER_11
seqdata,scipy.io.loadmat(seqfile),CLUSTER_4,CLUSTER_11
"fig,axs","matplotlib.pyplot.subplots(r,c)",CLUSTER_2,CLUSTER_10
"fig,axs","matplotlib.pyplot.subplots(r,c)",CLUSTER_2,CLUSTER_10
fake,"numpy.zeros((batch_size,1)",CLUSTER_2,CLUSTER_10
fake,"numpy.zeros((batch_size,1)",CLUSTER_2,CLUSTER_10
valid,"numpy.ones((batch_size,1)",CLUSTER_2,CLUSTER_10
valid,"numpy.ones((batch_size,1)",CLUSTER_2,CLUSTER_10
X_train,"numpy.expand_dims(X_train,axis=3)",CLUSTER_2,CLUSTER_10
X_train,"numpy.expand_dims(X_train,axis=3)",CLUSTER_2,CLUSTER_10
strava,"pandas.read_csv('data/strava_export.csv',index_col='date',parse_dates=True)",CLUSTER_11,CLUSTER_3
cheetah,"pandas.read_csv('data/cheetah.csv',skipinitialspace=True)",CLUSTER_11,CLUSTER_3
cheetah.index,pandas.to_datetime(cheetah['date']+''+cheetah['time']),CLUSTER_11,CLUSTER_3
true_m,random.random(),CLUSTER_2,CLUSTER_7
true_b,random.random(),CLUSTER_2,CLUSTER_7
input_data,random.random(),CLUSTER_2,CLUSTER_7
input_data,random.random(),CLUSTER_2,CLUSTER_7
input_data,random.random(),CLUSTER_2,CLUSTER_7
t,"numpy.arange(0,np.pi,0.1)",CLUSTER_1,CLUSTER_9
x_graf,"numpy.arange(a,b,0.1)",CLUSTER_1,CLUSTER_9
t,"numpy.arange(0,np.pi,0.1)",CLUSTER_1,CLUSTER_9
x_graf,"numpy.arange(a,b,0.1)",CLUSTER_1,CLUSTER_9
x,"numpy.linspace(-0.1,1.1)",CLUSTER_1,CLUSTER_9
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
df,pandas.read_csv(file_name),CLUSTER_7,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_9
"pearson_coef,p_value","scipy.stats.pearsonr(df['wheel-base'],df['price'])",CLUSTER_7,CLUSTER_9
"pearson_coef,p_value","scipy.stats.pearsonr(df['engine-size'],df['price'])",CLUSTER_7,CLUSTER_9
pred_res_df,pandas.DataFrame(residuals),CLUSTER_7,CLUSTER_8
dummy_units_unit,"pandas.get_dummies(df['UNIT'],prefix='dummy_unit')",CLUSTER_7,CLUSTER_8
dummy_units_day_week,"pandas.get_dummies(df['day_week'],prefix='dummy_day_week')",CLUSTER_7,CLUSTER_8
dummy_units_hour,"pandas.get_dummies(df['hour'],prefix='dummy_hour')",CLUSTER_7,CLUSTER_8
dummy_units_unit,"pandas.get_dummies(df['UNIT'],prefix='dummy_unit')",CLUSTER_7,CLUSTER_8
dummy_units_day_week,"pandas.get_dummies(df['day_week'],prefix='dummy_day_week')",CLUSTER_7,CLUSTER_8
dummy_units_hour,"pandas.get_dummies(df['hour'],prefix='dummy_hour')",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('turnstile_weather_v2.csv'),CLUSTER_7,CLUSTER_8
figure_1.set(ylabel,"""Frequency"",xlabel='ENTRIESn_hourlyforMay',yticks=numpy.arange(0.0000,0.0009,0.0001)",CLUSTER_7,CLUSTER_8
figure_2.set(ylabel,"""Frequency"",xlabel='ENTRIESn_hourlyforMay',yticks=numpy.arange(0.0000,0.0009,0.0001)",CLUSTER_7,CLUSTER_8
figure_1,"sns.distplot(df['ENTRIESn_hourly_logtran'][df['rain']==0],bins=numpy.arange(0,12,.25)",CLUSTER_7,CLUSTER_8
figure_1,"sns.distplot(df['ENTRIESn_hourly_logtran'][df['rain']==1],bins=numpy.arange(0,12,.25)",CLUSTER_7,CLUSTER_8
df['ENTRIESn_hourly_logtran'],numpy.log(df['ENTRIESn_hourly_logtran']),CLUSTER_7,CLUSTER_8
"statistic,pvalue","scipy.stats.mannwhitneyu(non_rainy,rainy)",CLUSTER_7,CLUSTER_8
pair_plot,"seaborn.PairGrid(df[pair_plot_data],size=5,
y_vars=['ENTRIESn_hourly'],
x_vars=['precipi','meanwspdi','meantempi'])",CLUSTER_7,CLUSTER_8
cmap,"seaborn.blend_palette([""
""
sns.corrplot(data,annot=False,sig_stars=False,
diag_names=False,cmap=cmap,ax=ax)",CLUSTER_7,CLUSTER_8
figure_1,"seaborn.distplot(df['ENTRIESn_hourly'][df['rain']==0],bins=range(0,30001,500)",CLUSTER_7,CLUSTER_8
figure_2,seaborn.distplot(df['ENTRIESn_hourly'][df['rain']==1]),CLUSTER_7,CLUSTER_8
figure_1,"seaborn.distplot(df['ENTRIESn_hourly_logtran'][df['rain']==0],bins=np.arange(0,12,.25)",CLUSTER_7,CLUSTER_8
figure_1,"seaborn.distplot(df['ENTRIESn_hourly_logtran'][df['rain']==1],bins=np.arange(0,12,.25)",CLUSTER_7,CLUSTER_8
ax,"seaborn.regplot(x=predictions,y=residuals,data=pred_res_df,scatter_kws={""color"":""darkblue"",""alpha"":0.25,""s"":20})",CLUSTER_7,CLUSTER_8
"fig,axs","matplotlib.pyplot.subplots(1,5,sharey=True)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(9,9)",CLUSTER_7,CLUSTER_8
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv(""/Users/sujiaqi/Desktop/IE580/creditcard.csv"")",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(18,18)",CLUSTER_7,CLUSTER_5
label_predict,"numpy.argmax(y_pred,axis=1)",CLUSTER_7,CLUSTER_5
label,"numpy.argmax(y_test,axis=1)",CLUSTER_7,CLUSTER_5
label_predict,"numpy.argmax(y_pred,axis=1)",CLUSTER_7,CLUSTER_5
label,"numpy.argmax(y_test,axis=1)",CLUSTER_7,CLUSTER_5
label_predict,"numpy.argmax(y_pred,axis=1)",CLUSTER_7,CLUSTER_5
label,"numpy.argmax(y_test,axis=1)",CLUSTER_7,CLUSTER_5
label_predict,"numpy.argmax(y_pred,axis=1)",CLUSTER_7,CLUSTER_5
label,"numpy.argmax(y_test,axis=1)",CLUSTER_7,CLUSTER_5
cm,numpy.corrcoef(df.values.T),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,test_size=0.1,random_state=1)",CLUSTER_7,CLUSTER_5
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
roc_auc_tuning,"sklearn.metrics.roc_auc_score(label,label_predict)",CLUSTER_7,CLUSTER_5
roc_auc_tuning,"sklearn.metrics.roc_auc_score(label,label_predict)",CLUSTER_7,CLUSTER_5
roc_auc_tuning,"sklearn.metrics.roc_auc_score(label,label_predict)",CLUSTER_7,CLUSTER_5
roc_auc_tuning,"sklearn.metrics.roc_auc_score(label,label_predict)",CLUSTER_7,CLUSTER_5
"x_label,y_label,thresholds","sklearn.metrics.roc_curve(label,probability_predict)",CLUSTER_7,CLUSTER_5
"x_label,y_label,thresholds","sklearn.metrics.roc_curve(label,probability_predict)",CLUSTER_7,CLUSTER_5
"x_label,y_label,thresholds","sklearn.metrics.roc_curve(label,probability_predict)",CLUSTER_7,CLUSTER_5
"x_label,y_label,thresholds","sklearn.metrics.roc_curve(label,probability_predict)",CLUSTER_7,CLUSTER_5
thresholds_df,"pandas.DataFrame(threshold_candidates,columns=['threshold'])",CLUSTER_7,CLUSTER_5
threshold_candidates,numpy.unique(dist_mat),CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(8,6)",CLUSTER_7,CLUSTER_5
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_5
dist_mat,sklearn.metrics.pairwise_distances(X),CLUSTER_7,CLUSTER_5
birch,"sklearn.cluster.Birch(threshold=threshold,branching_factor=2,n_clusters=None)",CLUSTER_7,CLUSTER_5
feq,pandas.DataFrame([feq]),CLUSTER_11,CLUSTER_3
rating,pandas.DataFrame([rating]),CLUSTER_11,CLUSTER_3
cleaning_fee,pandas.DataFrame([cleaning_fee]),CLUSTER_11,CLUSTER_3
security_deposit,pandas.DataFrame([security_deposit]),CLUSTER_11,CLUSTER_3
df_list,pandas.read_csv('clean_listing.csv'),CLUSTER_11,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_11,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(21,6)",CLUSTER_11,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(15,5)",CLUSTER_11,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(15,5)",CLUSTER_11,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(15,15)",CLUSTER_11,CLUSTER_3
boston,sklearn.datasets.load_boston(),CLUSTER_10,CLUSTER_4
mae,"sklearn.metrics.mean_absolute_error(y_pred,y_test)",CLUSTER_10,CLUSTER_4
mse,"sklearn.metrics.mean_squared_error(y_pred,y_test)",CLUSTER_10,CLUSTER_4
r2,"sklearn.metrics.r2_score(y_pred,y_test)",CLUSTER_10,CLUSTER_4
clf,sklearn.tree.DecisionTreeRegressor(**kwargs),CLUSTER_10,CLUSTER_4
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(boston.data,boston.target,test_size=0.25,random_state=4)",CLUSTER_10,CLUSTER_4
store_data,"pandas.read_csv(""/content/drive/MyDrive/BTL_DataMining/BT_5/Market_Basket_Optimisation.csv"",header=None)",CLUSTER_1,CLUSTER_3
labels,numpy.zeros((len(total_real_test),CLUSTER_7,CLUSTER_0
select_half_gene,numpy.where(gene_median>mean_median),CLUSTER_7,CLUSTER_0
L1_ind,"numpy.where(samples.values[:,13]=='L1')",CLUSTER_7,CLUSTER_0
L23_ind,"numpy.where(samples.values[:,13]=='L2/3')",CLUSTER_7,CLUSTER_0
L4_ind,"numpy.where(samples.values[:,13]=='L4')",CLUSTER_7,CLUSTER_0
L5_ind,"numpy.where(samples.values[:,13]=='L5')",CLUSTER_7,CLUSTER_0
L6_ind,"numpy.where(samples.values[:,13]=='L6')",CLUSTER_7,CLUSTER_0
L1_L23_ind,"numpy.where(samples.iloc[:,13]=='L1-L2/3')",CLUSTER_7,CLUSTER_0
L6b_ind,"numpy.where(samples.iloc[:,13]=='L6b')",CLUSTER_7,CLUSTER_0
L1_L4_ind,"numpy.where(samples.iloc[:,13]=='L1-L4')",CLUSTER_7,CLUSTER_0
L4_L5_ind,"numpy.where(samples.iloc[:,13]=='L4-L5')",CLUSTER_7,CLUSTER_0
L5_L6_ind,"numpy.where(samples.iloc[:,13]=='L5-L6')",CLUSTER_7,CLUSTER_0
mean_median,numpy.mean(gene_median),CLUSTER_7,CLUSTER_0
total_control_test[num],"numpy.mean(exon_filtered_log2.iloc[summary[0,i],:],axis=0)",CLUSTER_7,CLUSTER_0
total_control_test[num],"numpy.mean(exon_filtered_log2.iloc[summary[1,i],:],axis=0)",CLUSTER_7,CLUSTER_0
total_control_test[num],"numpy.mean(exon_filtered_log2.iloc[summary[2,i],:],axis=0)",CLUSTER_7,CLUSTER_0
total_control_test[num],"numpy.mean(exon_filtered_log2.iloc[summary[3,i],:],axis=0)",CLUSTER_7,CLUSTER_0
total_control_test[num],"numpy.mean(exon_filtered_log2.iloc[summary[4,i],:],axis=0)",CLUSTER_7,CLUSTER_0
total_real_test[num],"numpy.mean(exon_filtered_log2.iloc[summary[0,i],:],axis=0)",CLUSTER_7,CLUSTER_0
total_real_test[num],"numpy.mean(exon_filtered_log2.iloc[summary[1,i],:],axis=0)",CLUSTER_7,CLUSTER_0
total_real_test[num],"numpy.mean(exon_filtered_log2.iloc[summary[2,i],:],axis=0)",CLUSTER_7,CLUSTER_0
total_real_test[num],"numpy.mean(exon_filtered_log2.iloc[summary[3,i],:],axis=0)",CLUSTER_7,CLUSTER_0
total_real_test[num],"numpy.mean(exon_filtered_log2.iloc[summary[4,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L5_L6_test[num],"numpy.mean(L5_L6.iloc[summary[0,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L5_L6_test[num],"numpy.mean(L5_L6.iloc[summary[1,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L5_L6_test[num],"numpy.mean(L5_L6.iloc[summary[2,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L5_L6_test[num],"numpy.mean(L5_L6.iloc[summary[3,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L5_L6_test[num],"numpy.mean(L5_L6.iloc[summary[4,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L6b_test[num],"numpy.mean(L6b.iloc[summary[0,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L6b_test[num],"numpy.mean(L6b.iloc[summary[1,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L6b_test[num],"numpy.mean(L6b.iloc[summary[2,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L6b_test[num],"numpy.mean(L6b.iloc[summary[3,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L6b_test[num],"numpy.mean(L6b.iloc[summary[4,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L4_L5_test[num],"numpy.mean(L4_L5.iloc[summary[0,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L4_L5_test[num],"numpy.mean(L4_L5.iloc[summary[1,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L4_L5_test[num],"numpy.mean(L4_L5.iloc[summary[2,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L4_L5_test[num],"numpy.mean(L4_L5.iloc[summary[3,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L4_L5_test[num],"numpy.mean(L4_L5.iloc[summary[4,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L1_L4_test[num],"numpy.mean(L1_L4.iloc[summary[0,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L1_L4_test[num],"numpy.mean(L1_L4.iloc[summary[1,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L1_L4_test[num],"numpy.mean(L1_L4.iloc[summary[2,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L1_L4_test[num],"numpy.mean(L1_L4.iloc[summary[3,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L1_L4_test[num],"numpy.mean(L1_L4.iloc[summary[4,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L1_L23_test[num],"numpy.mean(L1_L23.iloc[summary[0,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L1_L23_test[num],"numpy.mean(L1_L23.iloc[summary[1,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L1_L23_test[num],"numpy.mean(L1_L23.iloc[summary[2,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L1_L23_test[num],"numpy.mean(L1_L23.iloc[summary[3,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L1_L23_test[num],"numpy.mean(L1_L23.iloc[summary[4,i],:],axis=0)",CLUSTER_7,CLUSTER_0
pre_L1_labels,"numpy.reshape(pre_L1_labels,(-1,2)",CLUSTER_7,CLUSTER_0
pre_L23_labels,"numpy.reshape(pre_L23_labels,(-1,2)",CLUSTER_7,CLUSTER_0
pre_L4_labels,"numpy.reshape(pre_L4_labels,(-1,2)",CLUSTER_7,CLUSTER_0
pre_L5_labels,"numpy.reshape(pre_L5_labels,(-1,2)",CLUSTER_7,CLUSTER_0
pre_L6_labels,"numpy.reshape(pre_L6_labels,(-1,2)",CLUSTER_7,CLUSTER_0
gene_group,"numpy.reshape(gene_group,(-1,2)",CLUSTER_7,CLUSTER_0
layer_num,"numpy.reshape(layer_num,(-1,2)",CLUSTER_7,CLUSTER_0
p_value_overall,"numpy.reshape(p_value_overall,(-1,2,5)",CLUSTER_7,CLUSTER_0
predict,"numpy.reshape(predict,(1,-1)",CLUSTER_7,CLUSTER_0
predict,"numpy.reshape(predict,(1,-1)",CLUSTER_7,CLUSTER_0
gene_median,"numpy.median(exon_data,axis=1)",CLUSTER_7,CLUSTER_0
"fig,_","matplotlib.pyplot.subplots(figsize=(30,15)",CLUSTER_7,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_0
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_0
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_0
exon_filtered_log2,pandas.DataFrame(np.log2(exon_data),CLUSTER_7,CLUSTER_0
L1[i],"pandas.DataFrame(np.mean(L1_log2.values[summary[0,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L23[i],"pandas.DataFrame(np.mean(L23_log2.values[summary[1,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L4[i],"pandas.DataFrame(np.mean(L4_log2.values[summary[2,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L5[i],"pandas.DataFrame(np.mean(L5_log2.values[summary[3,i],:],axis=0)",CLUSTER_7,CLUSTER_0
L6[i],"pandas.DataFrame(np.mean(L6_log2.values[summary[4,i],:],axis=0)",CLUSTER_7,CLUSTER_0
signi_L1,"pandas.DataFrame(L1_chi.values[:,np.logical_and(p_L1>0,p_L1<0.001)",CLUSTER_7,CLUSTER_0
signi_L23,"pandas.DataFrame(L23_chi.values[:,np.logical_and(p_L23>0,p_L23<0.001)",CLUSTER_7,CLUSTER_0
signi_L4,"pandas.DataFrame(L4_chi.values[:,np.logical_and(p_L4>0,p_L4<0.001)",CLUSTER_7,CLUSTER_0
signi_L5,"pandas.DataFrame(L5_chi.values[:,np.logical_and(p_L5>0,p_L5<0.001)",CLUSTER_7,CLUSTER_0
signi_L6,"pandas.DataFrame(L6_chi.values[:,np.logical_and(p_L6>0,p_L6<0.001)",CLUSTER_7,CLUSTER_0
candi,"pandas.DataFrame(np.vstack((signi_L1.values[:,i[0]],signi_L23.values[L23_sample_num,i[1]],signi_L4.values[L4_sample_num,i[2]],signi_L5.values[L5_sample_num,i[3]],signi_L6.values[L6_sample_num,i[4]])",CLUSTER_7,CLUSTER_0
total_control_test,pandas.DataFrame(total_control_test),CLUSTER_7,CLUSTER_0
total_real_test,pandas.DataFrame(total_real_test),CLUSTER_7,CLUSTER_0
labels,pandas.DataFrame(labels),CLUSTER_7,CLUSTER_0
labels_real,pandas.DataFrame(labels.values[np.where(labels>0),CLUSTER_7,CLUSTER_0
labels_real,pandas.DataFrame(labels_real),CLUSTER_7,CLUSTER_0
L1_L23,"pandas.DataFrame(exon_filtered_log2.values[:,L1_L23_ind])",CLUSTER_7,CLUSTER_0
L1_L4,"pandas.DataFrame(exon_filtered_log2.values[:,L1_L4_ind])",CLUSTER_7,CLUSTER_0
L4_L5,"pandas.DataFrame(exon_filtered_log2.values[:,L4_L5_ind])",CLUSTER_7,CLUSTER_0
L5_L6,"pandas.DataFrame(exon_filtered_log2.values[:,L5_L6_ind])",CLUSTER_7,CLUSTER_0
L6b,"pandas.DataFrame(exon_filtered_log2.values[:,L6b_ind])",CLUSTER_7,CLUSTER_0
L5_L6_test,pandas.DataFrame(L5_L6_test),CLUSTER_7,CLUSTER_0
L6b_test,pandas.DataFrame(L6b_test),CLUSTER_7,CLUSTER_0
L4_L5_test,pandas.DataFrame(L4_L5_test),CLUSTER_7,CLUSTER_0
L1_L4_test,pandas.DataFrame(L1_L4_test),CLUSTER_7,CLUSTER_0
L1_L23_test,pandas.DataFrame(L1_L23_test),CLUSTER_7,CLUSTER_0
L1_chi,"pandas.concat(L1,axis=1)",CLUSTER_7,CLUSTER_0
L23_chi,"pandas.concat(L23,axis=1)",CLUSTER_7,CLUSTER_0
L4_chi,"pandas.concat(L4,axis=1)",CLUSTER_7,CLUSTER_0
L5_chi,"pandas.concat(L5,axis=1)",CLUSTER_7,CLUSTER_0
L6_chi,"pandas.concat(L6,axis=1)",CLUSTER_7,CLUSTER_0
exon_data,pandas.read_csv('mouse_VISp_2018-06-14_exon-matrix.csv'),CLUSTER_7,CLUSTER_0
samples,pandas.read_csv('mouse_VISp_2018-06-14_samples-columns.csv'),CLUSTER_7,CLUSTER_0
clustering_L1,"sklearn.cluster.AgglomerativeClustering(n_clusters=None,linkage='ward',distance_threshold=threshold)",CLUSTER_7,CLUSTER_0
clustering_L23,"sklearn.cluster.AgglomerativeClustering(n_clusters=None,linkage='ward',distance_threshold=threshold)",CLUSTER_7,CLUSTER_0
clustering_L4,"sklearn.cluster.AgglomerativeClustering(n_clusters=None,linkage='ward',distance_threshold=threshold)",CLUSTER_7,CLUSTER_0
clustering_L5,"sklearn.cluster.AgglomerativeClustering(n_clusters=None,linkage='ward',distance_threshold=threshold)",CLUSTER_7,CLUSTER_0
clustering_L6,"sklearn.cluster.AgglomerativeClustering(n_clusters=None,linkage='ward',distance_threshold=threshold)",CLUSTER_7,CLUSTER_0
"_,p_L1","scipy.stats.chisquare(L1_chi,ddof=layer_num[0,1]-1)",CLUSTER_7,CLUSTER_0
"_,p_L23","scipy.stats.chisquare(L23_chi,ddof=layer_num[1,1]-1)",CLUSTER_7,CLUSTER_0
"_,p_L4","scipy.stats.chisquare(L4_chi,ddof=layer_num[2,1]-1)",CLUSTER_7,CLUSTER_0
"_,p_L5","scipy.stats.chisquare(L5_chi,ddof=layer_num[3,1]-1)",CLUSTER_7,CLUSTER_0
"_,p_L6","scipy.stats.chisquare(L6_chi,ddof=layer_num[4,1]-1)",CLUSTER_7,CLUSTER_0
"_,p_candi","scipy.stats.chisquare(candi,ddof=4)",CLUSTER_7,CLUSTER_0
ax1,"seaborn.heatmap(signi_L1,vmin=0,vmax=15,cbar=False,cmap=""YlGnBu"")",CLUSTER_7,CLUSTER_0
ax2,"seaborn.heatmap(signi_L23,vmin=0,vmax=15,cbar=False,cmap=""YlGnBu"")",CLUSTER_7,CLUSTER_0
ax3,"seaborn.heatmap(signi_L4,vmin=0,vmax=15,cbar=False,cmap=""YlGnBu"")",CLUSTER_7,CLUSTER_0
ax4,"seaborn.heatmap(signi_L5,vmin=0,vmax=15,cbar=False,cmap=""YlGnBu"")",CLUSTER_7,CLUSTER_0
ax5,"seaborn.heatmap(signi_L6,vmin=0,vmax=15,cmap=""YlGnBu"")",CLUSTER_7,CLUSTER_0
"X_train_real,X_test_real,y_train_real,y_test_real","sklearn.model_selection.train_test_split(total_real_test,labels_real,test_size=.15,train_size=.85)",CLUSTER_7,CLUSTER_0
nan_per_column,pandas.DataFrame(df.isna(),CLUSTER_7,CLUSTER_8
df_featImp,"pandas.DataFrame(columns=['Feature','Importance'])",CLUSTER_7,CLUSTER_8
df_featImp,"pandas.DataFrame(columns=['Feature','Importance'])",CLUSTER_7,CLUSTER_8
train,"pandas.read_csv('train.csv',index_col=0)",CLUSTER_7,CLUSTER_8
test,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_8
crosstab,"numpy.array(pd.crosstab(var1,var2,rownames=None,colnames=None)",CLUSTER_7,CLUSTER_8
x1_extra,numpy.array(x1['NF_NAO_CONCLUIU_EM']),CLUSTER_7,CLUSTER_8
dataset['nan_'+col],numpy.where(pd.isna(dataset[col]),CLUSTER_7,CLUSTER_8
train['NF_NAO_CONCLUIU_EM'],"numpy.where(train['TP_ST_CONCLUSAO']==3,1,0)",CLUSTER_7,CLUSTER_8
train['NF_ESCOLA_NAO_INFORMADO'],"numpy.where(train['TP_ESCOLA']==1,1,0)",CLUSTER_7,CLUSTER_8
train['NF_ANO_CONCLUSAO_NAO_INFORMADO'],"numpy.where(train['TP_ANO_CONCLUIU']==0,1,0)",CLUSTER_7,CLUSTER_8
train['NF_EH_BR'],numpy.where((train['TP_NACIONALIDADE']==1),CLUSTER_7,CLUSTER_8
aux['NF_NAO_CONCLUIU_EM'],"numpy.where(aux['TP_ST_CONCLUSAO']==3,1,0)",CLUSTER_7,CLUSTER_8
obs,numpy.sum(crosstab),CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(nrows=7,ncols=2,figsize=(10,20)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=2,figsize=(10,5)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(nrows=4,ncols=2,figsize=(15,15)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(nrows=4,ncols=2,figsize=(15,15)",CLUSTER_7,CLUSTER_8
"fig,axes","matplotlib.pyplot.subplots(nrows=4,ncols=2,figsize=(15,15)",CLUSTER_7,CLUSTER_8
seletor_variaveis_1,"sklearn.feature_selection.RFE(modeloDT,n_features_to_select=2)",CLUSTER_7,CLUSTER_8
seletor_variaveis_2,"sklearn.feature_selection.RFE(modeloDT,n_features_to_select=2)",CLUSTER_7,CLUSTER_8
modeloDT,"sklearn.tree.DecisionTreeClassifier(random_state=1206,criterion='entropy')",CLUSTER_7,CLUSTER_8
m1,"sklearn.tree.DecisionTreeClassifier(random_state=1206,criterion='entropy')",CLUSTER_7,CLUSTER_8
m2,"sklearn.tree.DecisionTreeClassifier(random_state=1206,criterion='entropy')",CLUSTER_7,CLUSTER_8
m1_extra,"sklearn.tree.DecisionTreeClassifier(random_state=1206,class_weight='balanced',criterion='entropy')",CLUSTER_7,CLUSTER_8
stat,scipy.stats.chi2_contingency(crosstab),CLUSTER_7,CLUSTER_8
res,math.sqrt(a**2+b**2),CLUSTER_10,CLUSTER_12
response,requests.get(target_url),CLUSTER_9,CLUSTER_2
response,"requests.get(df.loc[0,1])",CLUSTER_9,CLUSTER_2
response,requests.get(url),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(arrange_data),CLUSTER_9,CLUSTER_2
df_lazy,"pandas.read_csv(target_url,sep=""\t"",header=None)",CLUSTER_9,CLUSTER_2
img,numpy.array(img),CLUSTER_9,CLUSTER_2
img,numpy.array(img),CLUSTER_9,CLUSTER_2
text,"re.sub(r""[^a-zA-Z0-9]"","""",text.lower()",CLUSTER_0,CLUSTER_1
val_X,pandas.DataFrame(train_X[:10000]),CLUSTER_0,CLUSTER_1
train_X,pandas.DataFrame(train_X[10000:]),CLUSTER_0,CLUSTER_1
val_y,pandas.DataFrame(train_y[:10000]),CLUSTER_0,CLUSTER_1
train_y,pandas.DataFrame(train_y[10000:]),CLUSTER_0,CLUSTER_1
predictions,"pandas.read_csv(os.path.join(data_dir,'test.csv.out')",CLUSTER_0,CLUSTER_1
d1,"datetime.date(2015,3,11)",CLUSTER_10,CLUSTER_12
today,datetime.date.today(),CLUSTER_10,CLUSTER_12
t,"datetime.time(4,20,1)",CLUSTER_10,CLUSTER_12
dataset,"json.load(open(""all_reports.json"")",CLUSTER_4,CLUSTER_11
sample,random.choice(dataset),CLUSTER_4,CLUSTER_11
im,matplotlib.pyplot.imread(imagedir+sample['imageid']+'.jpg'),CLUSTER_4,CLUSTER_11
"train1,test","sklearn.model_selection.train_test_split(dataset,train_size=0.8,random_state=42)",CLUSTER_4,CLUSTER_11
"train,val","sklearn.model_selection.train_test_split(train1,train_size=0.8,random_state=42)",CLUSTER_4,CLUSTER_11
r,requests.get(url),CLUSTER_10,CLUSTER_12
df,"pandas.read_csv(url,header=None)",CLUSTER_5,CLUSTER_1
df,"pandas.read_csv(url,header=None)",CLUSTER_5,CLUSTER_1
cv,sklearn.model_selection.StratifiedKFold(n_splits=k),CLUSTER_5,CLUSTER_1
cv,sklearn.model_selection.StratifiedKFold(n_splits=k),CLUSTER_5,CLUSTER_1
cv,sklearn.model_selection.StratifiedKFold(n_splits=k),CLUSTER_5,CLUSTER_1
splits,"sklearn.model_selection.train_test_split(X,y,test_size=.333,random_state=0)",CLUSTER_5,CLUSTER_1
clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_5,CLUSTER_1
results,numpy.array(results),CLUSTER_5,CLUSTER_1
prediction,"numpy.argmax(support_vector,axis=1)",CLUSTER_5,CLUSTER_1
prediction,"numpy.argmax(probas,axis=1)",CLUSTER_5,CLUSTER_1
prediction,"numpy.argmax(probas,axis=1)",CLUSTER_5,CLUSTER_1
mean_accuracy,numpy.mean(accuracies),CLUSTER_5,CLUSTER_1
std_accuracy,numpy.std(accuracies),CLUSTER_5,CLUSTER_1
accuracy,"sklearn.metrics.accuracy_score(y_test,prediction)",CLUSTER_5,CLUSTER_1
accuracy,"sklearn.metrics.accuracy_score(y_test,prediction)",CLUSTER_5,CLUSTER_1
accuracy,"sklearn.metrics.accuracy_score(y_test,prediction)",CLUSTER_5,CLUSTER_1
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,prediction)",CLUSTER_5,CLUSTER_1
test_t,"scipy.stats.ttest_ind(results[:,0],results[:,1])",CLUSTER_5,CLUSTER_1
test_w,"scipy.stats.wilcoxon(results[:,0],results[:,1])",CLUSTER_5,CLUSTER_1
fremont_bikes,pandas.DataFrame(csvfile),CLUSTER_1,CLUSTER_3
"fremont_bikes[""hour""]","pandas.DatetimeIndex(fremont_bikes[""Date""])",CLUSTER_1,CLUSTER_3
"fremont_bikes[""year""]","pandas.DatetimeIndex(fremont_bikes[""Date""])",CLUSTER_1,CLUSTER_3
fremont_bikes,"pandas.read_csv(""../data/fremont_bikes_data.csv"",header=1)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(num=None,figsize=(10,10)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(num=None,figsize=(10,10)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(num=None,figsize=(10,10)",CLUSTER_12,CLUSTER_9
fig,"matplotlib.pyplot.figure(num=None,figsize=(10,10)",CLUSTER_12,CLUSTER_9
ax0,"matplotlib.pyplot.subplot2grid((1,2)",CLUSTER_12,CLUSTER_9
ax1,"matplotlib.pyplot.subplot2grid((1,2)",CLUSTER_12,CLUSTER_9
ax0,"matplotlib.pyplot.subplot2grid((1,2)",CLUSTER_12,CLUSTER_9
ax1,"matplotlib.pyplot.subplot2grid((1,2)",CLUSTER_12,CLUSTER_9
ax0,"matplotlib.pyplot.subplot2grid((1,2)",CLUSTER_12,CLUSTER_9
ax1,"matplotlib.pyplot.subplot2grid((1,2)",CLUSTER_12,CLUSTER_9
ax0,"matplotlib.pyplot.subplot2grid((1,2)",CLUSTER_12,CLUSTER_9
ax1,"matplotlib.pyplot.subplot2grid((1,2)",CLUSTER_12,CLUSTER_9
XZ,numpy.array(XZ),CLUSTER_12,CLUSTER_9
A,"numpy.zeros((2,2,Nz,Nx)",CLUSTER_12,CLUSTER_9
dzu,"numpy.zeros((Nz+2,Nx+2)",CLUSTER_12,CLUSTER_9
up,"numpy.zeros((Nz,Nx)",CLUSTER_12,CLUSTER_9
wp,"numpy.zeros((Nz,Nx)",CLUSTER_12,CLUSTER_9
up,"numpy.zeros((Nz,Nx)",CLUSTER_12,CLUSTER_9
wp,"numpy.zeros((Nz,Nx)",CLUSTER_12,CLUSTER_9
A,"numpy.zeros((2,2,Nz,Nx)",CLUSTER_12,CLUSTER_9
omega,"numpy.zeros((Nz,Nx)",CLUSTER_12,CLUSTER_9
up,"numpy.zeros((Nz,Nx)",CLUSTER_12,CLUSTER_9
wp,"numpy.zeros((Nz,Nx)",CLUSTER_12,CLUSTER_9
pmean,numpy.zeros(Nz),CLUSTER_12,CLUSTER_9
A,"numpy.zeros((2,2,Nz,Nx)",CLUSTER_12,CLUSTER_9
omega,"numpy.zeros((Nz,Nx)",CLUSTER_12,CLUSTER_9
up,"numpy.zeros((Nz,Nx)",CLUSTER_12,CLUSTER_9
wp,"numpy.zeros((Nz,Nx)",CLUSTER_12,CLUSTER_9
pmean,numpy.zeros(Nz),CLUSTER_12,CLUSTER_9
A,"numpy.zeros((2,2,Nz,Nx)",CLUSTER_12,CLUSTER_9
Q,"numpy.zeros((Nz,Nx)",CLUSTER_12,CLUSTER_9
pmean,"numpy.mean(pp,axis=1)",CLUSTER_12,CLUSTER_9
pmean,"numpy.mean(pp,axis=1)",CLUSTER_12,CLUSTER_9
pmean,"numpy.mean(pp,axis=1)",CLUSTER_12,CLUSTER_9
Nx,numpy.shape(XZ),CLUSTER_12,CLUSTER_9
Nz,numpy.shape(XZ),CLUSTER_12,CLUSTER_9
magvel,"numpy.sqrt(np.power(upnew,2)",CLUSTER_12,CLUSTER_9
xnew,"numpy.linspace(xpold[0],xpold[-1],Nxnew)",CLUSTER_12,CLUSTER_9
znew,"numpy.linspace(zpold[0],zpold[-1],Nznew)",CLUSTER_12,CLUSTER_9
lev,"numpy.linspace(0,0.4,41)",CLUSTER_12,CLUSTER_9
tickcmp,"numpy.linspace(0,0.4,5)",CLUSTER_12,CLUSTER_9
lev,"numpy.linspace(0,1,41)",CLUSTER_12,CLUSTER_9
tickcmp,"numpy.linspace(0,1,5)",CLUSTER_12,CLUSTER_9
xnew,"numpy.linspace(xpold[0],xpold[-1],Nxnew)",CLUSTER_12,CLUSTER_9
znew,"numpy.linspace(zpold[0],zpold[-1],Nznew)",CLUSTER_12,CLUSTER_9
lev,"numpy.linspace(-2,2,41)",CLUSTER_12,CLUSTER_9
tickcmp,"numpy.linspace(-3,3,5)",CLUSTER_12,CLUSTER_9
lev,"numpy.linspace(-0.32,0.32,41)",CLUSTER_12,CLUSTER_9
tickcmp,"numpy.linspace(-0.32,0.32,5)",CLUSTER_12,CLUSTER_9
xnew,"numpy.linspace(xpold[0],xpold[-1],Nxnew)",CLUSTER_12,CLUSTER_9
znew,"numpy.linspace(zpold[0],zpold[-1],Nznew)",CLUSTER_12,CLUSTER_9
lev,"numpy.linspace(-2,2,41)",CLUSTER_12,CLUSTER_9
tickcmp,"numpy.linspace(-2,2,5)",CLUSTER_12,CLUSTER_9
lev,"numpy.linspace(-0.025,0.025,41)",CLUSTER_12,CLUSTER_9
tickcmp,"numpy.linspace(-0.025,0.025,5)",CLUSTER_12,CLUSTER_9
xnew,"numpy.linspace(xpold[0],xpold[-1],Nxnew)",CLUSTER_12,CLUSTER_9
znew,"numpy.linspace(zpold[0],zpold[-1],Nznew)",CLUSTER_12,CLUSTER_9
lev,"numpy.linspace(-0.64,0.64,41)",CLUSTER_12,CLUSTER_9
tickcmp,"numpy.linspace(-0.64,0.64,5)",CLUSTER_12,CLUSTER_9
lev,"numpy.linspace(-0.32,0.32,41)",CLUSTER_12,CLUSTER_9
tickcmp,"numpy.linspace(-0.32,0.32,5)",CLUSTER_12,CLUSTER_9
val,"numpy.hstack((a0,ak,an,b0,bk,bn,c0,ck,cn)",CLUSTER_12,CLUSTER_9
dex,"numpy.hstack((0,np.arange(n-2)",CLUSTER_12,CLUSTER_9
col,"numpy.hstack((dex,dex+1,dex+2)",CLUSTER_12,CLUSTER_9
xpold,"numpy.copy(Xp[0,:])",CLUSTER_12,CLUSTER_9
zpold,"numpy.copy(Zp[:,0])",CLUSTER_12,CLUSTER_9
Tp,"numpy.copy(T[1:-1,1:-1])",CLUSTER_12,CLUSTER_9
pp,"numpy.copy(p[1:-1,1:-1])",CLUSTER_12,CLUSTER_9
xpold,"numpy.copy(Xp[0,:])",CLUSTER_12,CLUSTER_9
zpold,"numpy.copy(Zp[:,0])",CLUSTER_12,CLUSTER_9
Tp,"numpy.copy(T[1:-1,1:-1])",CLUSTER_12,CLUSTER_9
pp,"numpy.copy(p[1:-1,1:-1])",CLUSTER_12,CLUSTER_9
xpold,"numpy.copy(Xp[0,:])",CLUSTER_12,CLUSTER_9
zpold,"numpy.copy(Zp[:,0])",CLUSTER_12,CLUSTER_9
Tp,"numpy.copy(T[1:-1,1:-1])",CLUSTER_12,CLUSTER_9
pp,"numpy.copy(p[1:-1,1:-1])",CLUSTER_12,CLUSTER_9
xpold,"numpy.copy(Xp[0,:])",CLUSTER_12,CLUSTER_9
zpold,"numpy.copy(Zp[:,0])",CLUSTER_12,CLUSTER_9
Tp,"numpy.copy(T[1:-1,1:-1])",CLUSTER_12,CLUSTER_9
pp,"numpy.copy(p[1:-1,1:-1])",CLUSTER_12,CLUSTER_9
"Xnew,Znew","numpy.meshgrid(xnew,znew)",CLUSTER_12,CLUSTER_9
"Xnew,Znew","numpy.meshgrid(xnew,znew)",CLUSTER_12,CLUSTER_9
"Xnew,Znew","numpy.meshgrid(xnew,znew)",CLUSTER_12,CLUSTER_9
"Xnew,Znew","numpy.meshgrid(xnew,znew)",CLUSTER_12,CLUSTER_9
row,numpy.tile(np.arange(n),CLUSTER_12,CLUSTER_9
D,"scipy.sparse.csr_matrix((val,(row,col)",CLUSTER_12,CLUSTER_9
f,"scipy.interpolate.RectBivariateSpline(zpold,xpold,qp)",CLUSTER_12,CLUSTER_9
f,"scipy.interpolate.RectBivariateSpline(zpold,xpold,qp)",CLUSTER_12,CLUSTER_9
f,"scipy.interpolate.RectBivariateSpline(zpold,xpold,qp)",CLUSTER_12,CLUSTER_9
f,"scipy.interpolate.RectBivariateSpline(zpold,xpold,qp)",CLUSTER_12,CLUSTER_9
gamma,numpy.sqrt(3),CLUSTER_1,CLUSTER_3
sigma,numpy.sqrt(2),CLUSTER_1,CLUSTER_3
a,math.exp(1),CLUSTER_1,CLUSTER_3
gamma,math.exp(1),CLUSTER_1,CLUSTER_3
writer,"pandas.ExcelWriter(os.path.join(타겟파일,파일이름)",CLUSTER_8,CLUSTER_4
데이터프레임,"pandas.concat(데이터프레임,axis=1)",CLUSTER_8,CLUSTER_4
데이터프레임,"pandas.read_excel(os.path.join(포맷안된파일,파일이름)",CLUSTER_8,CLUSTER_4
df,"pandas.read_csv(""train.csv"")",CLUSTER_12,CLUSTER_3
x,numpy.linspace(df['Fare'].min(),CLUSTER_12,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_3
train_stock,json.load(inp),CLUSTER_3,CLUSTER_6
valid_stock,json.load(inp),CLUSTER_3,CLUSTER_6
test_stock,json.load(inp),CLUSTER_3,CLUSTER_6
examples,numpy.array(examples),CLUSTER_3,CLUSTER_6
self.examples,"numpy.array(examples[:,:-2].tolist()",CLUSTER_3,CLUSTER_6
iter_losses,numpy.array(iter_losses),CLUSTER_3,CLUSTER_6
valid_mse,numpy.mean(valid_mse),CLUSTER_3,CLUSTER_6
fig,"matplotlib.pyplot.figure(figsize=(figsize,figsize)",CLUSTER_2,CLUSTER_3
ax,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(5,5)",CLUSTER_2,CLUSTER_3
U,numpy.zeros(4),CLUSTER_2,CLUSTER_3
V,numpy.zeros(4),CLUSTER_2,CLUSTER_3
U,numpy.zeros(N),CLUSTER_2,CLUSTER_3
V,numpy.zeros(N),CLUSTER_2,CLUSTER_3
X,"numpy.zeros([nb_samples,im_size])",CLUSTER_2,CLUSTER_3
Y,numpy.zeros(nb_samples),CLUSTER_2,CLUSTER_3
X,"numpy.zeros([nb_samples,im_size])",CLUSTER_2,CLUSTER_3
Y,"numpy.zeros([nb_samples,6])",CLUSTER_2,CLUSTER_3
imdata,numpy.frombuffer(fig.canvas.tostring_rgb(),CLUSTER_2,CLUSTER_3
weight_11,pandas.DataFrame(weight_1),CLUSTER_2,CLUSTER_3
reward,numpy.array(reward),CLUSTER_6,CLUSTER_10
episode_score+,numpy.array(rewards),CLUSTER_6,CLUSTER_10
scores,numpy.zeros(num_agents),CLUSTER_6,CLUSTER_10
episode_score,numpy.zeros(num_agents),CLUSTER_6,CLUSTER_10
scores,numpy.zeros(num_agents),CLUSTER_6,CLUSTER_10
actions,"numpy.clip(actions,-1,1)",CLUSTER_6,CLUSTER_10
mean_episode_score,numpy.mean(episode_score),CLUSTER_6,CLUSTER_10
average_score,numpy.mean(scores_deque),CLUSTER_6,CLUSTER_10
scores_deque,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_10
time_beginning,time.time(),CLUSTER_6,CLUSTER_10
time_end,time.time(),CLUSTER_6,CLUSTER_10
out,"numpy.zeros(img.shape,dtype=np.uint8)",CLUSTER_7,CLUSTER_9
mask,"numpy.isin(img,l[0])",CLUSTER_7,CLUSTER_9
leg,"matplotlib.pyplot.legend(
fontsize=4,
ncol=len(labels)",CLUSTER_7,CLUSTER_9
"f,axes","matplotlib.pyplot.subplots(n_rows,n_cols,figsize=figsize,dpi=500,facecolor='white',gridspec_kw=gridspec_kw)",CLUSTER_7,CLUSTER_9
conf_matrix,"pandas.DataFrame(
confusion_matrix(y_test,rf.predict(X_test)",CLUSTER_5,CLUSTER_5
tag,"pandas.pivot_table(tag,index='game_id',columns='tag',values='p',aggfunc=np.mean)",CLUSTER_5,CLUSTER_5
game_pt,"pandas.pivot_table(df_pt,index='game_id',columns='user_id',values='play_time',aggfunc=np.mean)",CLUSTER_5,CLUSTER_5
dt,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_5
dt,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_5
"trainset,testset","sklearn.model_selection.train_test_split(data,test_size=.25)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=0)",CLUSTER_5,CLUSTER_5
"X_train_,X_valid,y_train_,y_valid","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.2,random_state=10)",CLUSTER_5,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=1)",CLUSTER_5,CLUSTER_5
rf,sklearn.ensemble.RandomForestClassifier(random_state=1),CLUSTER_5,CLUSTER_5
rf,"sklearn.ensemble.RandomForestClassifier(random_state=1,n_estimators=20,n_jobs=4)",CLUSTER_5,CLUSTER_5
rf,"sklearn.ensemble.RandomForestClassifier(random_state=1,n_estimators=20,n_jobs=4,max_depth=i)",CLUSTER_5,CLUSTER_5
rf,"sklearn.ensemble.RandomForestClassifier(random_state=1,n_estimators=20,n_jobs=4,max_depth=15)",CLUSTER_5,CLUSTER_5
rf,"sklearn.ensemble.RandomForestClassifier(random_state=1,n_estimators=20,n_jobs=4,max_depth=i)",CLUSTER_5,CLUSTER_5
best_score,"sklearn.model_selection.cross_val_score(xgb_clf,X_train,y_train,
scoring='accuracy',
cv=5,
n_jobs=8)",CLUSTER_5,CLUSTER_5
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_5,CLUSTER_5
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,xgb.predict_proba(x_test)",CLUSTER_5,CLUSTER_5
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame([[getattr(i,j)",CLUSTER_9,CLUSTER_2
d1,"datetime.datetime.strptime(shortDate,'%d%b%Y')",CLUSTER_9,CLUSTER_2
mask,numpy.zeros_like(data1.corr(),CLUSTER_7,CLUSTER_5
data1,"pandas.DataFrame(data=np.c_[wine['data'],wine['target']],
columns=wine['feature_names']+['target'])",CLUSTER_7,CLUSTER_5
wine,sklearn.datasets.load_wine(),CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(2,1,figsize=(10,10)",CLUSTER_7,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,3,sharex='col',sharey='row',figsize=(15,5)",CLUSTER_7,CLUSTER_5
ticks,"numpy.arange(0,img_width,3*dpi)",CLUSTER_1,CLUSTER_10
n3,"numpy.empty((width,height)",CLUSTER_1,CLUSTER_10
r1,"numpy.linspace(xmin,xmax,width)",CLUSTER_1,CLUSTER_10
r2,"numpy.linspace(ymin,ymax,height)",CLUSTER_1,CLUSTER_10
mean_mse,numpy.mean(mse),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(rawdata.data),CLUSTER_7,CLUSTER_8
rawdata,sklearn.datasets.load_boston(),CLUSTER_7,CLUSTER_8
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
mse,"sklearn.model_selection.cross_val_score(lin_reg,X,y,scoring='neg_mean_squared_error',cv=5)",CLUSTER_7,CLUSTER_8
rid_reg,sklearn.linear_model.Ridge(),CLUSTER_7,CLUSTER_8
ridge_regressor,"sklearn.model_selection.GridSearchCV(rid_reg,parameters,scoring='neg_mean_squared_error',cv=5)",CLUSTER_7,CLUSTER_8
lasso_regressor,"sklearn.model_selection.GridSearchCV(las_reg,parameters,scoring='neg_mean_squared_error',cv=5)",CLUSTER_7,CLUSTER_8
las_reg,sklearn.linear_model.Lasso(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=0)",CLUSTER_7,CLUSTER_8
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_10
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_5,CLUSTER_10
acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_5,CLUSTER_10
clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_5,CLUSTER_10
clf2,"sklearn.ensemble.RandomForestClassifier(max_depth=100,max_features='auto')",CLUSTER_5,CLUSTER_10
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(iris.data,iris.target,test_size=0.25,random_state=4)",CLUSTER_5,CLUSTER_10
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(iris.data,iris.target,test_size=0.25,random_state=4)",CLUSTER_5,CLUSTER_10
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,boston.target,test_size=0.1,random_state=4)",CLUSTER_5,CLUSTER_10
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,boston.target,test_size=0.1,random_state=4)",CLUSTER_5,CLUSTER_10
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_10
regr2,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_10
Jhistory,numpy.zeros(iters),CLUSTER_5,CLUSTER_5
accuracy,numpy.count_nonzero(Y_test==output),CLUSTER_5,CLUSTER_5
accu_scikit,numpy.count_nonzero(Y_test==q_scikit),CLUSTER_5,CLUSTER_5
delta,numpy.dot(np.transpose(pre),CLUSTER_5,CLUSTER_5
z,"numpy.dot(test,minTheta.T)",CLUSTER_5,CLUSTER_5
a,"numpy.ones((X_test.shape[0],1)",CLUSTER_5,CLUSTER_5
prediction1,numpy.log(sigmoid(X*theta.T),CLUSTER_5,CLUSTER_5
prediction2,numpy.log(1-sigmoid(X*theta.T),CLUSTER_5,CLUSTER_5
prediction1,"numpy.multiply(y,prediction1)",CLUSTER_5,CLUSTER_5
prediction2,numpy.multiply((1-y),CLUSTER_5,CLUSTER_5
test,"numpy.hstack((a,test)",CLUSTER_5,CLUSTER_5
test,"numpy.hstack((a,test)",CLUSTER_5,CLUSTER_5
a,"numpy.hstack((a,X_test)",CLUSTER_5,CLUSTER_5
X,numpy.matrix(X.values),CLUSTER_5,CLUSTER_5
Y,numpy.matrix(Y.values),CLUSTER_5,CLUSTER_5
theta,"numpy.matrix(np.array([0,0,0,0,0,0,0,0])",CLUSTER_5,CLUSTER_5
a,numpy.matrix(np.array([1]),CLUSTER_5,CLUSTER_5
m,numpy.matrix(np.array(mu),CLUSTER_5,CLUSTER_5
s,numpy.matrix(np.array(sigma),CLUSTER_5,CLUSTER_5
test,numpy.matrix(np.array(test_data),CLUSTER_5,CLUSTER_5
a,numpy.matrix(np.array([1]),CLUSTER_5,CLUSTER_5
m,numpy.matrix(np.array(mu),CLUSTER_5,CLUSTER_5
s,numpy.matrix(np.array(sigma),CLUSTER_5,CLUSTER_5
test,numpy.matrix(np.array(testSet),CLUSTER_5,CLUSTER_5
X_predict,numpy.matrix(np.array(test),CLUSTER_5,CLUSTER_5
df,"pandas.read_csv(""Data/Admission/data.csv"")",CLUSTER_5,CLUSTER_5
"ig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_5,CLUSTER_5
model,"sklearn.linear_model.LogisticRegression(random_state=0,solver='lbfgs',multi_class='ovr')",CLUSTER_5,CLUSTER_5
model,"sklearn.linear_model.LogisticRegression(random_state=0,solver='lbfgs',multi_class='ovr')",CLUSTER_5,CLUSTER_5
self.memory,collections.deque(maxlen=MEMORY_SIZE),CLUSTER_0,CLUSTER_3
self.memory,collections.deque(maxlen=MEMORY_SIZE),CLUSTER_0,CLUSTER_3
action_df['city'],numpy.arange(NUMBER_OF_CITIES),CLUSTER_0,CLUSTER_3
best_action,numpy.argmax(policy_next_state_values[0].numpy(),CLUSTER_0,CLUSTER_3
state,"numpy.reshape(state,[1,observation_space])",CLUSTER_0,CLUSTER_3
state_next,"numpy.reshape(state_next,[1,observation_space])",CLUSTER_0,CLUSTER_3
action_df,pandas.DataFrame(),CLUSTER_0,CLUSTER_3
batch,"random.sample(memory,BATCH_SIZE)",CLUSTER_0,CLUSTER_3
time_start,time.time(),CLUSTER_0,CLUSTER_3
time_last_best,time.time(),CLUSTER_0,CLUSTER_3
time_last_best,time.time(),CLUSTER_0,CLUSTER_3
age_bin,"numpy.linspace(20,70,10)",CLUSTER_4,CLUSTER_5
annuity_bin,"numpy.linspace(0,200000,10,endpoint=False)",CLUSTER_4,CLUSTER_5
app_train['DAYS_BIRTH_YEAR_BIN'],"pandas.cut(app_train['DAYS_BIRTH_YEAR'],age_bin)",CLUSTER_4,CLUSTER_5
app_train['AMT_ANNUITY_BIN'],"pandas.cut(app_train['AMT_ANNUITY'],annuity_bin)",CLUSTER_4,CLUSTER_5
app_train,pandas.read_csv(f_app_train),CLUSTER_4,CLUSTER_5
axes2,matplotlib.pyplot.twinx(),CLUSTER_4,CLUSTER_5
axes2,matplotlib.pyplot.twinx(),CLUSTER_4,CLUSTER_5
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_5
thetas,"numpy.arange(0,1.01,0.01)",CLUSTER_12,CLUSTER_9
thetas,"numpy.arange(0,1.1,0.1)",CLUSTER_12,CLUSTER_9
ones,numpy.count_nonzero(data),CLUSTER_12,CLUSTER_9
ones,numpy.count_nonzero(data),CLUSTER_12,CLUSTER_9
ones,numpy.count_nonzero(data),CLUSTER_12,CLUSTER_9
ones,numpy.count_nonzero(data),CLUSTER_12,CLUSTER_9
ones,numpy.count_nonzero(data),CLUSTER_12,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_9
data_set,"pandas.read_csv(""diabets.data"")",CLUSTER_12,CLUSTER_9
import_data,"numpy.genfromtxt('./naturalLight_classification_criteria_data_swr.csv',delimiter=',',dtype='int')",CLUSTER_2,CLUSTER_7
import_data2,"numpy.genfromtxt('./naturalLight_classification_criteria_data_swr_test.csv',delimiter=',',dtype='int')",CLUSTER_2,CLUSTER_7
import_data,"numpy.genfromtxt('./naturalLight_classification_criteria_data.csv',delimiter=',',dtype='int')",CLUSTER_2,CLUSTER_7
date,"numpy.genfromtxt('./naturalLight_classification_criteria_data.csv',delimiter=',',dtype='str')",CLUSTER_2,CLUSTER_7
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_2,CLUSTER_7
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_2,CLUSTER_7
ohe,sklearn.preprocessing.OneHotEncoder(),CLUSTER_2,CLUSTER_7
ohe,sklearn.preprocessing.OneHotEncoder(),CLUSTER_2,CLUSTER_7
df,"pandas.DataFrame({'rank':rank,'cafe':cafe_name,'menu':main_menu,'URL':url_add})",CLUSTER_9,CLUSTER_2
df1,"pandas.DataFrame({'price':price,'address':addr})",CLUSTER_9,CLUSTER_2
rgb_img,numpy.squeeze(images[3]),CLUSTER_6,CLUSTER_10
correct,numpy.squeeze(correct_tensor.numpy(),CLUSTER_6,CLUSTER_10
preds,numpy.squeeze(preds_tensor.numpy(),CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(36,36)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_10
train_data,"numpy.load(""pokemon_training.npy"",allow_pickle=True)",CLUSTER_6,CLUSTER_11
counts2,numpy.cumsum(counts2),CLUSTER_1,CLUSTER_9
"counts,bins","numpy.histogram(rev_cnt,bins=100)",CLUSTER_1,CLUSTER_9
"tstat,pval","scipy.stats.ttest_ind(df.query('state==""IL""')",CLUSTER_1,CLUSTER_9
"tstat,pval","scipy.stats.ttest_ind(df.query('state==""IL""')",CLUSTER_1,CLUSTER_9
dataset,pandas.DataFrame(dataset),CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('practice.csv'),CLUSTER_5,CLUSTER_5
label,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.1,random_state=0)",CLUSTER_5,CLUSTER_5
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
classifier,"sklearn.ensemble.RandomForestClassifier(n_estimators=20,criterion='entropy',random_state=0)",CLUSTER_5,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_5,CLUSTER_5
x,"numpy.arange(2,10,0.2)",CLUSTER_5,CLUSTER_10
x1,"numpy.arange(0,5,0.1)",CLUSTER_5,CLUSTER_10
x2,"numpy.arange(0,5,0.01)",CLUSTER_5,CLUSTER_10
img,"numpy.arange(0,1,1/32/32)",CLUSTER_5,CLUSTER_10
a,"numpy.array([[1,2,3],[2,3,4]])",CLUSTER_5,CLUSTER_10
e,"numpy.array([[1,2],[2,3],[3,4]])",CLUSTER_5,CLUSTER_10
temp,"numpy.array([[0.1*i],[train_accuracy],[test_accuracy]])",CLUSTER_5,CLUSTER_10
temp,"numpy.array([[0.1*i],[train_accuracy],[test_accuracy]])",CLUSTER_5,CLUSTER_10
b,"numpy.zeros((3,4)",CLUSTER_5,CLUSTER_10
result,"numpy.zeros((3,1)",CLUSTER_5,CLUSTER_10
result,"numpy.zeros((3,1)",CLUSTER_5,CLUSTER_10
h,"numpy.dot(a,e)",CLUSTER_5,CLUSTER_10
c,"numpy.ones((3,4)",CLUSTER_5,CLUSTER_10
result,"numpy.delete(result,0,axis=1)",CLUSTER_5,CLUSTER_10
result,"numpy.delete(result,0,axis=1)",CLUSTER_5,CLUSTER_10
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X[::10],Y[::10],test_size=1000)",CLUSTER_5,CLUSTER_10
classifier,"sklearn.linear_model.LogisticRegression(penalty='l2',dual=False,tol=0.01,
C=0.1*i,fit_intercept=True,class_weight=None,
random_state=None,solver='sag',
max_iter=100000,multi_class='ovr',n_jobs=-1)",CLUSTER_5,CLUSTER_10
classifierLog,"sklearn.linear_model.LogisticRegression(penalty='l2',dual=False,tol=0.01,
C=0.5,fit_intercept=True,class_weight=None,
random_state=None,solver='sag',
max_iter=100000,multi_class='ovr',n_jobs=-1)",CLUSTER_5,CLUSTER_10
classifierBer,sklearn.naive_bayes.BernoulliNB(),CLUSTER_5,CLUSTER_10
classifierSVM,"sklearn.svm.LinearSVC(penalty='l2',loss='squared_hinge',
dual=True,tol=0.0001,C=1.0,
multi_class='ovr',fit_intercept=True,
intercept_scaling=1,class_weight=None,
verbose=0,random_state=None,max_iter=100000)",CLUSTER_5,CLUSTER_10
classifierSVM,"sklearn.svm.LinearSVC(penalty='l2',loss='squared_hinge',
dual=True,tol=0.0001,C=0.1*i,
multi_class='ovr',fit_intercept=True,
intercept_scaling=1,class_weight=None,
verbose=0,random_state=None,max_iter=100000)",CLUSTER_5,CLUSTER_10
self.indexes,numpy.arange(len(self.list_IDs),CLUSTER_4,CLUSTER_0
X,numpy.empty((len(list_IDs_temp),CLUSTER_4,CLUSTER_0
y,numpy.empty((len(list_IDs_temp),CLUSTER_4,CLUSTER_0
y_test,numpy.empty((),CLUSTER_4,CLUSTER_0
train_data['weekend'],numpy.where((train_data['day']==5),CLUSTER_4,CLUSTER_0
test_data['weekend'],numpy.where((test_data['day']==5),CLUSTER_4,CLUSTER_0
X,"numpy.reshape(X,(X.shape[0],1,X.shape[1])",CLUSTER_4,CLUSTER_0
train_weather['wind_direction'+'_cos'],numpy.cos((2*np.pi*train_weather['wind_direction']),CLUSTER_4,CLUSTER_0
train_data[feature+'_cos'],numpy.cos((2*np.pi*train_data[feature]),CLUSTER_4,CLUSTER_0
test_weather['wind_direction'+'_cos'],numpy.cos((2*np.pi*test_weather['wind_direction']),CLUSTER_4,CLUSTER_0
test_data[feature+'_cos'],numpy.cos((2*np.pi*test_data[feature]),CLUSTER_4,CLUSTER_0
predict,numpy.expm1(predict),CLUSTER_4,CLUSTER_0
train_data['meter_reading'],numpy.log1p(train_data['meter_reading']),CLUSTER_4,CLUSTER_0
train_weather['wind_direction'+'_sin'],numpy.sin((2*np.pi*train_weather['wind_direction']),CLUSTER_4,CLUSTER_0
train_data[feature+'_sin'],numpy.sin((2*np.pi*train_data[feature]),CLUSTER_4,CLUSTER_0
test_weather['wind_direction'+'_sin'],numpy.sin((2*np.pi*test_weather['wind_direction']),CLUSTER_4,CLUSTER_0
test_data[feature+'_sin'],numpy.sin((2*np.pi*test_data[feature]),CLUSTER_4,CLUSTER_0
y_test,"numpy.vstack((y_test,predict)",CLUSTER_4,CLUSTER_0
output,"pandas.DataFrame({'row_id':range(0,len(y_test)",CLUSTER_4,CLUSTER_0
train_data,"pandas.get_dummies(train_data,columns=['meter'])",CLUSTER_4,CLUSTER_0
test_data,"pandas.get_dummies(test_data,columns=['meter'])",CLUSTER_4,CLUSTER_0
train_data,"pandas.merge(train_data,building_data,on='building_id',right_index=True)",CLUSTER_4,CLUSTER_0
test_data,"pandas.merge(test_data,building_data,on='building_id',right_index=True)",CLUSTER_4,CLUSTER_0
train_data,"pandas.merge_asof(train_data,train_weather,on='timestamp',by='site_id',right_index=True)",CLUSTER_4,CLUSTER_0
test_data,"pandas.merge_asof(test_data,test_weather,on='timestamp',by='site_id',right_index=True)",CLUSTER_4,CLUSTER_0
train_data,"pandas.read_csv(path_in+'train.csv',parse_dates=['timestamp'])",CLUSTER_4,CLUSTER_0
train_weather,"pandas.read_csv(path_in+'weather_train.csv',parse_dates=['timestamp'])",CLUSTER_4,CLUSTER_0
building_data,pandas.read_csv(path_in+'building_metadata.csv'),CLUSTER_4,CLUSTER_0
df,pandas.read_csv('submission-file.csv'),CLUSTER_4,CLUSTER_0
test_weather,"pandas.read_csv(path_in+'weather_test.csv',parse_dates=['timestamp'])",CLUSTER_4,CLUSTER_0
test_data,"pandas.read_csv(path_in+'test.csv',skiprows=range(1,i*(nrows)",CLUSTER_4,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,9)",CLUSTER_4,CLUSTER_0
imp_most,sklearn.impute.SimpleImputer(strategy='most_frequent'),CLUSTER_4,CLUSTER_0
data,"pandas.concat([dataset[['Id','SalePrice']].reset_index(drop=True)",CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('train.csv'),CLUSTER_5,CLUSTER_5
dataset[feature+'nan'],numpy.where(dataset[feature].isnull(),CLUSTER_5,CLUSTER_5
dataset[feature],numpy.where(dataset[feature].isin(temp_df),CLUSTER_5,CLUSTER_5
dataset[feature],numpy.log(dataset[feature]),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(dataset,dataset['SalePrice'],test_size=0.1,random_state=0)",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
mean_blocking_1,"numpy.mean(
[
np.nanmean(b.blocking_times)",CLUSTER_1,CLUSTER_10
mean_blocking_2,"numpy.mean(
[
np.nanmean(b.blocking_times)",CLUSTER_1,CLUSTER_10
x,"numpy.arange(1,15)",CLUSTER_1,CLUSTER_10
x,numpy.arange(16),CLUSTER_1,CLUSTER_10
x+,numpy.arange(5),CLUSTER_1,CLUSTER_10
"y,x","np.histogram(arr,bins=numpy.arange(51)",CLUSTER_1,CLUSTER_10
arra_data,"numpy.arange(0,16)",CLUSTER_1,CLUSTER_10
arra_data,"numpy.arange(0,16)",CLUSTER_1,CLUSTER_10
B,numpy.arange(3),CLUSTER_1,CLUSTER_10
x,"numpy.array([1,2,3,4,5,6])",CLUSTER_1,CLUSTER_10
y,"numpy.array([[1,2,3],[4,5,6],[7,8,9]])",CLUSTER_1,CLUSTER_10
x,"numpy.array([1,2,3,4,5,6,7,8,9])",CLUSTER_1,CLUSTER_10
x,"numpy.array([1,2,3,4,5,6])",CLUSTER_1,CLUSTER_10
x,"numpy.array([-1,-4,0,2,3,4,5,-6])",CLUSTER_1,CLUSTER_10
x,"numpy.array([24,27,30,29,18,14])",CLUSTER_1,CLUSTER_10
x,"numpy.array([[0,1],[2,3]])",CLUSTER_1,CLUSTER_10
arr1,"numpy.array([[10,20,30],[40,50,np.nan],[np.nan,6,np.nan],[np.nan,np.nan,np.nan]])",CLUSTER_1,CLUSTER_10
x,"numpy.zeros((1,2)",CLUSTER_1,CLUSTER_10
x,"numpy.zeros((1,2)",CLUSTER_1,CLUSTER_10
x,"numpy.zeros((5,5)",CLUSTER_1,CLUSTER_10
x,"numpy.zeros((3,)",CLUSTER_1,CLUSTER_10
y,"numpy.ones((1,2)",CLUSTER_1,CLUSTER_10
y,"numpy.ones((1,2)",CLUSTER_1,CLUSTER_10
y,"numpy.ones([3,5],dtype=np.uint)",CLUSTER_1,CLUSTER_10
A,"numpy.ones((3,3)",CLUSTER_1,CLUSTER_10
x,"numpy.full((3,5)",CLUSTER_1,CLUSTER_10
result,"numpy.mean(temp,axis=1)",CLUSTER_1,CLUSTER_10
y,"numpy.reshape(x,(3,2)",CLUSTER_1,CLUSTER_10
z,"numpy.reshape(x,(2,3)",CLUSTER_1,CLUSTER_10
z,"numpy.reshape(x,(1,6)",CLUSTER_1,CLUSTER_10
x,numpy.eye(3),CLUSTER_1,CLUSTER_10
"y,x","numpy.histogram(arr,bins=np.arange(51)",CLUSTER_1,CLUSTER_10
temp,"numpy.ma.masked_array(arr1,np.isnan(arr1)",CLUSTER_1,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_10
df_count,pandas.DataFrame(df_main[interested_hdrs].count(),CLUSTER_7,CLUSTER_9
df_count_none,"pandas.DataFrame(df_main.loc[df_main[""HAS_QUOTA""]==0][interested_hdrs].count()",CLUSTER_7,CLUSTER_9
df_count_q,"pandas.DataFrame(df_main.loc[df_main[""HAS_QUOTA""]==1][interested_hdrs].count()",CLUSTER_7,CLUSTER_9
df_count_q_ptf,"pandas.DataFrame(df_main.loc[df_main[""QUOTA_PTF""]==1][interested_hdrs].count()",CLUSTER_7,CLUSTER_9
df_avg,pandas.DataFrame(df_main[interested_hdrs].mean(),CLUSTER_7,CLUSTER_9
df_avg_none,"pandas.DataFrame(df_main.loc[df_main[""HAS_QUOTA""]==0][interested_hdrs].mean()",CLUSTER_7,CLUSTER_9
df_avg_q,"pandas.DataFrame(df_main.loc[df_main[""HAS_QUOTA""]==1][interested_hdrs].mean()",CLUSTER_7,CLUSTER_9
df_avg_q_ptf,"pandas.DataFrame(df_main.loc[df_main[""QUOTA_PTF""]==1][interested_hdrs].mean()",CLUSTER_7,CLUSTER_9
df_main,"pandas.read_excel('CG_dataset_with_correl_region_err.xlsx',sheet_name='Data')",CLUSTER_7,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
mask,numpy.zeros_like(df_corr),CLUSTER_7,CLUSTER_9
p,numpy.poly1d(z),CLUSTER_7,CLUSTER_9
p,numpy.poly1d(z),CLUSTER_7,CLUSTER_9
p,numpy.poly1d(z),CLUSTER_7,CLUSTER_9
p,numpy.poly1d(z),CLUSTER_7,CLUSTER_9
p,numpy.poly1d(z),CLUSTER_7,CLUSTER_9
z,"numpy.polyfit(x,y,1)",CLUSTER_7,CLUSTER_9
z,"numpy.polyfit(xr,yr,1)",CLUSTER_7,CLUSTER_9
z,"numpy.polyfit(x,y,1)",CLUSTER_7,CLUSTER_9
z,"numpy.polyfit(x,y,1)",CLUSTER_7,CLUSTER_9
z,"numpy.polyfit(x,y,1)",CLUSTER_7,CLUSTER_9
"_,xr","scipy.stats.probplot(x1,fit=False)",CLUSTER_7,CLUSTER_9
"_,yr","scipy.stats.probplot(y1,fit=False)",CLUSTER_7,CLUSTER_9
arr,"numpy.arange(0,1,0.2)",CLUSTER_3,CLUSTER_6
one,"numpy.arange(2,22)",CLUSTER_3,CLUSTER_6
arr,numpy.arange(16),CLUSTER_3,CLUSTER_6
arr,numpy.arange(16),CLUSTER_3,CLUSTER_6
arr,"numpy.array(list(map(int,input(""Enterthearrayofsize12:"")",CLUSTER_3,CLUSTER_6
myarray,"numpy.array([9,8,7,6,5,4,3,2,1,0])",CLUSTER_3,CLUSTER_6
arr,"numpy.array([12,34,0,4,0,2,3,0,123])",CLUSTER_3,CLUSTER_6
arr,"numpy.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14])",CLUSTER_3,CLUSTER_6
arr,"numpy.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14])",CLUSTER_3,CLUSTER_6
Z,"numpy.array([1.234,2.345,5.678,666.543,123.99])",CLUSTER_3,CLUSTER_6
x,"numpy.array(Z,dtype=""int64"")",CLUSTER_3,CLUSTER_6
a,numpy.array(a),CLUSTER_3,CLUSTER_6
b,numpy.array(b),CLUSTER_3,CLUSTER_6
a,"numpy.array([[1,2,3,4],[1,8,9,0]])",CLUSTER_3,CLUSTER_6
b,"numpy.array([[1,2,9,4],[1,0,9,0]])",CLUSTER_3,CLUSTER_6
a,"numpy.array([[1,2,3,4],[1,8,9,0]])",CLUSTER_3,CLUSTER_6
b,"numpy.array([[1,2,9,4],[1,0,9,0]])",CLUSTER_3,CLUSTER_6
arr,numpy.zeros(20),CLUSTER_3,CLUSTER_6
r,numpy.where(arr==0),CLUSTER_3,CLUSTER_6
z,"numpy.where(arr%2==1,-1,arr)",CLUSTER_3,CLUSTER_6
z,"numpy.where(arr%2==1,-1,arr)",CLUSTER_3,CLUSTER_6
c,"numpy.dot(a,b)",CLUSTER_3,CLUSTER_6
arr,numpy.ones(20),CLUSTER_3,CLUSTER_6
a,"numpy.datetime64('today','D')",CLUSTER_3,CLUSTER_6
b,"numpy.datetime64('today','D')",CLUSTER_3,CLUSTER_6
c,"numpy.datetime64('today','D')",CLUSTER_3,CLUSTER_6
c,"numpy.hstack((a,b)",CLUSTER_3,CLUSTER_6
c,"numpy.hstack((b.T[[2,3]],a.T[[2,3]])",CLUSTER_3,CLUSTER_6
c,"numpy.vstack((a,b)",CLUSTER_3,CLUSTER_6
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(6,6)",CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(7,7)",CLUSTER_4,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(12,12)",CLUSTER_4,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(12,12)",CLUSTER_4,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(12,12)",CLUSTER_4,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(12,12)",CLUSTER_4,CLUSTER_0
init,"numpy.array([x,y])",CLUSTER_4,CLUSTER_0
image_growing_contour,"numpy.zeros((binary.shape[0],binary.shape[1])",CLUSTER_4,CLUSTER_0
z,"numpy.zeros((20,1)",CLUSTER_4,CLUSTER_0
brain,numpy.zeros((np.shape(brain_blurred),CLUSTER_4,CLUSTER_0
merging,numpy.zeros((np.shape(brain_blurred),CLUSTER_4,CLUSTER_0
bees_count,"numpy.zeros((4,1)",CLUSTER_4,CLUSTER_0
bees_count,"numpy.zeros((4,1)",CLUSTER_4,CLUSTER_0
binary,"numpy.where(brain_im>70,256,0)",CLUSTER_4,CLUSTER_0
brain_im_Gaussian,"numpy.where(brain_im>threshold,256,0)",CLUSTER_4,CLUSTER_0
brain_im_threhsold,numpy.where((brain_im>60),CLUSTER_4,CLUSTER_0
"row,column",numpy.where(brain==i+1),CLUSTER_4,CLUSTER_0
binary,"numpy.where(img>thresh,0,256)",CLUSTER_4,CLUSTER_0
data,numpy.concatenate((brain_im.ravel(),CLUSTER_4,CLUSTER_0
erosion_brain,"scipy.ndimage.binary_erosion(brain_im_threhsold,structure=numpy.ones((8,3)",CLUSTER_4,CLUSTER_0
dilation_brain,"scipy.ndimage.binary_dilation(erosion_brain,structure=numpy.ones((10,15)",CLUSTER_4,CLUSTER_0
erosion_brain,"scipy.ndimage.binary_erosion(binary,structure=numpy.ones((8,10)",CLUSTER_4,CLUSTER_0
"if(image[pseed[0],pseed[1]]>","numpy.mean(image[pseed[0]-t*1:pseed[0]+t*1,pseed[1]-t*1:pseed[1]+t*1])",CLUSTER_4,CLUSTER_0
z[i],numpy.mean(y[i]+y[i+1]),CLUSTER_4,CLUSTER_0
bees_count[i],"numpy.shape(np.unique(measure.label(erosion_brain,background=0)",CLUSTER_4,CLUSTER_0
gmm_sum,"numpy.exp([gmm.score_samples(e.reshape(-1,1)",CLUSTER_4,CLUSTER_0
x,numpy.linspace(np.min(data),CLUSTER_4,CLUSTER_0
s,"numpy.linspace(0,2*np.pi,400)",CLUSTER_4,CLUSTER_0
total_matrix,"numpy.vstack((matrix1.reshape((-1,1)",CLUSTER_4,CLUSTER_0
"x,y",numpy.histogram(brain_im.ravel(),CLUSTER_4,CLUSTER_0
dilation_brain,"scipy.ndimage.binary_dilation(erosion_brain,structure=np.ones((10,15)",CLUSTER_4,CLUSTER_0
erosion_brain,"scipy.ndimage.binary_erosion(brain_im_threhsold,structure=np.ones((8,3)",CLUSTER_4,CLUSTER_0
erosion_brain,"scipy.ndimage.binary_erosion(binary,structure=np.ones((8,10)",CLUSTER_4,CLUSTER_0
g_s,"scipy.stats.norm(mu,sd)",CLUSTER_4,CLUSTER_0
gmm,"sklearn.mixture.GaussianMixture(n_components=2,tol=0.000001,max_iter=200)",CLUSTER_4,CLUSTER_0
X_train,numpy.array(raw_data_X),CLUSTER_5,CLUSTER_10
y_train,numpy.array(raw_data_y),CLUSTER_5,CLUSTER_10
x,"numpy.array([[8.023423523,3.123353242]])",CLUSTER_5,CLUSTER_10
kNN_classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=6),CLUSTER_5,CLUSTER_10
test_checking_long_name,pandas.read_csv('../assets/train.csv'),CLUSTER_11,CLUSTER_3
train,pandas.read_csv('../assets/train_cleaned.csv'),CLUSTER_11,CLUSTER_3
test,pandas.read_csv('../assets/test_cleaned.csv'),CLUSTER_11,CLUSTER_3
weather,pandas.read_csv('../assets/weather_cleaned.csv'),CLUSTER_11,CLUSTER_3
spray,pandas.read_csv('../assets/spray_cleaned.csv'),CLUSTER_11,CLUSTER_3
i['Date'],pandas.to_datetime(i['Date']),CLUSTER_11,CLUSTER_3
spray['DateTime'],pandas.to_datetime(spray['DateTime']),CLUSTER_11,CLUSTER_3
new_spray.index,pandas.to_datetime(new_spray.index.date),CLUSTER_11,CLUSTER_3
section,"numpy.arange(0,2,1/20)",CLUSTER_1,CLUSTER_9
ix,"numpy.linspace(0,3)",CLUSTER_1,CLUSTER_9
"i,e",scipy.integrate.quad(lambdax:f(x),CLUSTER_1,CLUSTER_9
"i,e","scipy.integrate.quad(lambdax:3*x**2+2*x+1,0,3)",CLUSTER_1,CLUSTER_9
"i,e",scipy.integrate.quad(lambdax:np.exp(-x*5),CLUSTER_1,CLUSTER_9
"i,e","scipy.integrate.quad(norms,-np.inf,np.inf)",CLUSTER_1,CLUSTER_9
logPosteriors,numpy.array([np.nanforiinrange(self.nImportSamps),CLUSTER_1,CLUSTER_9
z[k],numpy.array(list(x[k]),CLUSTER_1,CLUSTER_9
z[k],numpy.array(list(x[k]),CLUSTER_1,CLUSTER_9
dispersion,"numpy.dot(self.choleskyDecomp,np.transpose(random_values[x])",CLUSTER_1,CLUSTER_9
g_samples_T,numpy.transpose(g_samples),CLUSTER_1,CLUSTER_9
self.importSamp,"numpy.transpose([valsforkey,valsinimportSamp_dict.items()",CLUSTER_1,CLUSTER_9
postSamp_wo_keys,numpy.transpose(np.array(postSamp_wo_keys),CLUSTER_1,CLUSTER_9
postSamp_1comp,"numpy.transpose([list(map(float,l.split()",CLUSTER_1,CLUSTER_9
IS_1comp,numpy.transpose(IS_1comp),CLUSTER_1,CLUSTER_9
tmp,"numpy.transpose([list(map(float,l.split()",CLUSTER_1,CLUSTER_9
IS_2comp,numpy.transpose(IS_2comp),CLUSTER_1,CLUSTER_9
postSamp_1comp,"numpy.transpose([list(map(float,l.split()",CLUSTER_1,CLUSTER_9
IS_1comp,numpy.transpose(IS_1comp),CLUSTER_1,CLUSTER_9
tmp,"numpy.transpose([list(map(float,l.split()",CLUSTER_1,CLUSTER_9
IS_2comp,numpy.transpose(IS_2comp),CLUSTER_1,CLUSTER_9
prod+,numpy.log(k1+k2),CLUSTER_1,CLUSTER_9
prod+,numpy.log(k1+k2),CLUSTER_1,CLUSTER_9
logSum,"numpy.logaddexp(logSum,diff)",CLUSTER_1,CLUSTER_9
diff,"numpy.subtract(samples[x],self.mediansG)",CLUSTER_1,CLUSTER_9
covMatrixG,numpy.cov(vals),CLUSTER_1,CLUSTER_9
postSamp_2comp,"numpy.delete(tmp,1,0)",CLUSTER_1,CLUSTER_9
postSamp_2comp,"numpy.delete(tmp,1,0)",CLUSTER_1,CLUSTER_9
matrixA,numpy.linalg.cholesky(covMatrixG),CLUSTER_1,CLUSTER_9
z,"numpy.linalg.solve(self.choleskyDecomp,diff[j])",CLUSTER_1,CLUSTER_9
postSamp,"collections.OrderedDict(zip(param_keys,self.samples)",CLUSTER_1,CLUSTER_9
importSamp_dict,collections.OrderedDict(),CLUSTER_1,CLUSTER_9
X,numpy.load('data_X.npy'),CLUSTER_4,CLUSTER_0
y,numpy.load('data_y.npy'),CLUSTER_4,CLUSTER_0
X_test,numpy.load('X_val.npy'),CLUSTER_4,CLUSTER_0
y_test,numpy.load('y_val.npy'),CLUSTER_4,CLUSTER_0
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=123)",CLUSTER_4,CLUSTER_0
x_lin,"numpy.linspace(0,100,101)",CLUSTER_1,CLUSTER_10
y_pos,"numpy.arange(len(sorted_states_df[""state_abr""])",CLUSTER_7,CLUSTER_8
ind,"numpy.arange(len(sorted_states_df[""state_dis_index""])",CLUSTER_7,CLUSTER_8
white_total,numpy.sum(df['white_students']),CLUSTER_7,CLUSTER_8
minority_total,numpy.sum(df['total_students_calc']),CLUSTER_7,CLUSTER_8
df_final_model,"pandas.get_dummies(df_model_subset,columns=dummies,drop_first=True)",CLUSTER_7,CLUSTER_8
df,"pandas.merge(df_public,county_df,how='left',on=['state_county_name'])",CLUSTER_7,CLUSTER_8
states_df,"pandas.merge(states_stats_df,states_students_df,how='inner',on='state_abr')",CLUSTER_7,CLUSTER_8
df_model_subset['total_students_calc'],"pandas.qcut(df_model_subset['total_students_calc'],4,labels=[""small"",""small_medium"",""medium_large"",""large""])",CLUSTER_7,CLUSTER_8
county_df,pandas.read_csv('../data/interim/income_by_county.csv'),CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(x='state_abr',y=""state_dis_index"",data=states_df.sort_values('state_dis_index')",CLUSTER_7,CLUSTER_8
ax,"seaborn.regplot(x='median_hh_income',y=""state_dis_index"",data=states_df)",CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=10),CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(knn,X_train,y_train,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
scores,"sklearn.model_selection.cross_val_score(knn,X,y,cv=10,scoring='accuracy')",CLUSTER_7,CLUSTER_8
X,sklearn.preprocessing.scale(X_raw),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=42)",CLUSTER_7,CLUSTER_8
svm,"sklearn.svm.SVC(random_state=4444,probability=True)",CLUSTER_7,CLUSTER_8
data,"pandas.read_csv(""/kaggle/input/top50spotify2019/top50.csv"",encoding=""ISO-8859-1"")",CLUSTER_7,CLUSTER_11
heatmap,seaborn.heatmap(data.corr(),CLUSTER_7,CLUSTER_11
res,"requests.post('https://mops.twse.com.tw/mops/web/ajax_t163sb04',data=data)",CLUSTER_8,CLUSTER_2
table,pandas.read_html(res.text),CLUSTER_8,CLUSTER_2
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_3,CLUSTER_10
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_3,CLUSTER_10
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_3,CLUSTER_10
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_3,CLUSTER_10
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_3,CLUSTER_10
grad_difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
ax1,matplotlib.pyplot.subplot(121),CLUSTER_5,CLUSTER_5
ax2,matplotlib.pyplot.subplot(122),CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(cm,index=labels,columns=pred_labels)",CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(cm,index=labels,columns=pred_labels)",CLUSTER_5,CLUSTER_5
left_dummies,"pandas.concat([left,pd.get_dummies(left.sales,prefix='sales')",CLUSTER_5,CLUSTER_5
left_dummies,"pandas.concat([left_dummies,pd.get_dummies(left.salary,prefix='salary')",CLUSTER_5,CLUSTER_5
df,pandas.read_csv('data/weight-height.csv'),CLUSTER_5,CLUSTER_5
df,pandas.read_csv('data/user_visit_duration.csv'),CLUSTER_5,CLUSTER_5
df,pandas.read_csv('data/weight-height.csv'),CLUSTER_5,CLUSTER_5
df,pandas.read_csv('data/housing-data.csv'),CLUSTER_5,CLUSTER_5
left,pandas.read_csv('data/HR_comma_sep.csv'),CLUSTER_5,CLUSTER_5
bbs,"numpy.array([-100,-50,0,50,100,150])",CLUSTER_5,CLUSTER_5
x,"numpy.linspace(55,80,100)",CLUSTER_5,CLUSTER_5
temp,"numpy.linspace(0,4)",CLUSTER_5,CLUSTER_5
temp,"numpy.linspace(0,4)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y_true,
test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(y_true,y_pred)",CLUSTER_5,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=cv)",CLUSTER_5,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=cv)",CLUSTER_5,CLUSTER_5
cv,"sklearn.model_selection.KFold(3,shuffle=True)",CLUSTER_5,CLUSTER_5
cv,"sklearn.model_selection.KFold(5,shuffle=True)",CLUSTER_5,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_5,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_5,CLUSTER_5
mms,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
brand_info,"pandas.concat([brand_mean_price,brand_mean_mileage],axis=1,sort=False)",CLUSTER_8,CLUSTER_3
autos,"pandas.read_csv('autos.csv',encoding='Latin-1')",CLUSTER_8,CLUSTER_3
tips,seaborn.load_dataset('tips'),CLUSTER_1,CLUSTER_10
start_dt,"datetime.datetime(2016,12,5)",CLUSTER_11,CLUSTER_3
end_dt,"datetime.datetime(2017,7,31,15,0,0)",CLUSTER_11,CLUSTER_3
start_dt,"datetime.datetime(2016,12,5)",CLUSTER_11,CLUSTER_3
end_dt,"datetime.datetime(2017,7,31,23,59,59)",CLUSTER_11,CLUSTER_3
dt,"datetime.datetime(2016,12,5,9,0,0)",CLUSTER_11,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_11,CLUSTER_3
X,"np.append(arr=numpy.ones((50,1)",CLUSTER_5,CLUSTER_5
X,"numpy.append(arr=np.ones((50,1)",CLUSTER_5,CLUSTER_5
Xdf,pandas.DataFrame(X),CLUSTER_5,CLUSTER_5
Xdf,pandas.DataFrame(X),CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('50_Startups.csv'),CLUSTER_5,CLUSTER_5
labelencoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[3]),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
sc_y,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
events_games_df,pandas.DataFrame(events_games),CLUSTER_8,CLUSTER_3
games1938_without_events_df,pandas.DataFrame(games1938_without_events),CLUSTER_8,CLUSTER_3
allgames_df,"pandas.read_csv('gamedata.csv',low_memory=False)",CLUSTER_8,CLUSTER_3
allgames_df['date'],"pandas.to_datetime(allgames_df['date'],format='%Y%m%d',errors='coerce')",CLUSTER_8,CLUSTER_3
events_games,json.load(f),CLUSTER_8,CLUSTER_3
feature_imp,pandas.DataFrame(),CLUSTER_8,CLUSTER_1
Final_submission,pandas.DataFrame(),CLUSTER_8,CLUSTER_1
train_data,pandas.read_csv('titanic_train.csv'),CLUSTER_8,CLUSTER_1
test_data,pandas.read_csv('titanictest.csv'),CLUSTER_8,CLUSTER_1
gender,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
embarked,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
sex,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
embarked,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_8,CLUSTER_1
optimized_tree,"sklearn.model_selection.GridSearchCV(rf,param_grid,scoring='accuracy',verbose=2,cv=5)",CLUSTER_8,CLUSTER_1
where,numpy.where(domain),CLUSTER_3,CLUSTER_6
where,numpy.where(np.isnan(u_JAS_box.values),CLUSTER_3,CLUSTER_6
train_labels,numpy.array([0]*(nb_train_samples//2),CLUSTER_2,CLUSTER_0
validation_labels,numpy.array([0]*(nb_validation_samples//2),CLUSTER_2,CLUSTER_0
train_data,numpy.load(bottleneck_features_train_path),CLUSTER_2,CLUSTER_0
validation_data,numpy.load(bottleneck_features_validation_path),CLUSTER_2,CLUSTER_0
fp_df,"pandas.DataFrame(encoded_itemsets,columns=encoder.columns_)",CLUSTER_4,CLUSTER_11
graph_data,"pandas.DataFrame({'node':node_names,'community':comm_labels,
'x':node_pos[:,0],'y':node_pos[:,1]})",CLUSTER_4,CLUSTER_11
color_scheme,pandas.Series(px.colors.qualitative.Light24),CLUSTER_4,CLUSTER_11
data,"pandas.read_csv(os.path.join(data_dir,'analysis_v2','metadata_plus_analysis.csv')",CLUSTER_4,CLUSTER_11
pair_rules,"pandas.read_csv(os.path.join(data_dir,'analysis_v2','pair_rules.csv')",CLUSTER_4,CLUSTER_11
tax_graph,pandas.read_csv('prelim_tax_graph.csv'),CLUSTER_4,CLUSTER_11
tags,"pandas.read_csv(os.path.join(data_dir,'analysis_v2','disease_tags.csv')",CLUSTER_4,CLUSTER_11
min_count,"numpy.quantile(tag_counts,q=quantiles)",CLUSTER_4,CLUSTER_11
ax,"seaborn.relplot(data=tags_df,x='index',y='tags',kind='line')",CLUSTER_4,CLUSTER_11
model,numpy.array(df['time(days),CLUSTER_1,CLUSTER_9
df['ln(q)'],numpy.log(df['rate(bopd),CLUSTER_1,CLUSTER_9
"[slope,inter,r,p,stderr]",scipy.stats.linregress(df['time(days),CLUSTER_1,CLUSTER_9
df,pandas.read_csv('wellA.csv'),CLUSTER_1,CLUSTER_9
data,numpy.array(data),CLUSTER_1,CLUSTER_10
estimate,"numpy.array([is_skin1(test_in_r[i],test_in_g[i],test_in_b[i])",CLUSTER_1,CLUSTER_10
estimate,"numpy.array([is_skin2(test_in_r[i],test_in_g[i],test_in_b[i])",CLUSTER_1,CLUSTER_10
estimate,"numpy.array([is_skin3(test_in_r[i],sr,test_in_g[i],sg,test_in_b[i],sb,ideal,threshold)",CLUSTER_1,CLUSTER_10
estimate,"numpy.array([is_skin3(test_in_r[i],test_in_g[i],test_in_b[i],best_sr,best_sg,best_sb,best_ideal,best_threshold)",CLUSTER_1,CLUSTER_10
data,numpy.array(data),CLUSTER_1,CLUSTER_10
estimate,"numpy.array([is_setosa(test_in_pw[i],test_in_pl[i],test_in_sw[i],test_in_sl[i])",CLUSTER_1,CLUSTER_10
index_train,"numpy.concatenate((index_bg[:half_bg],index_skin[:half_skin])",CLUSTER_1,CLUSTER_10
index_test,"numpy.concatenate((index_bg[half_bg:],index_skin[half_skin:])",CLUSTER_1,CLUSTER_10
index_train,"numpy.concatenate((index_setosa[:half_setosa],index_versicolor[:half_versicolor])",CLUSTER_1,CLUSTER_10
index_test,"numpy.concatenate((index_setosa[half_setosa:],index_versicolor[half_versicolor:])",CLUSTER_1,CLUSTER_10
train_skin_mean_r,numpy.mean(train_in_r[train_out==1]),CLUSTER_1,CLUSTER_10
train_skin_mean_g,numpy.mean(train_in_g[train_out==1]),CLUSTER_1,CLUSTER_10
train_skin_mean_b,numpy.mean(train_in_b[train_out==1]),CLUSTER_1,CLUSTER_10
train_bg_mean_r,numpy.mean(train_in_r[train_out==0]),CLUSTER_1,CLUSTER_10
train_bg_mean_g,numpy.mean(train_in_g[train_out==0]),CLUSTER_1,CLUSTER_10
train_bg_mean_b,numpy.mean(train_in_b[train_out==0]),CLUSTER_1,CLUSTER_10
train_skin_mean_rg,numpy.mean(train_func[train_out==1]),CLUSTER_1,CLUSTER_10
train_in_mean_setosa_pw,numpy.mean(train_in_pw[train_out==0]),CLUSTER_1,CLUSTER_10
train_in_mean_setosa_sw,numpy.mean(train_in_sw[train_out==0]),CLUSTER_1,CLUSTER_10
train_in_mean_setosa_pl,numpy.mean(train_in_pl[train_out==0]),CLUSTER_1,CLUSTER_10
train_in_mean_setosa_sl,numpy.mean(train_in_sl[train_out==0]),CLUSTER_1,CLUSTER_10
train_in_mean_versicolor_pw,numpy.mean(train_in_pw[train_out==1]),CLUSTER_1,CLUSTER_10
train_in_mean_versicolor_sw,numpy.mean(train_in_sw[train_out==1]),CLUSTER_1,CLUSTER_10
train_in_mean_versicolor_pl,numpy.mean(train_in_pl[train_out==1]),CLUSTER_1,CLUSTER_10
train_in_mean_versicolor_sl,numpy.mean(train_in_sl[train_out==1]),CLUSTER_1,CLUSTER_10
index_bg,numpy.nonzero(out==0),CLUSTER_1,CLUSTER_10
index_skin,numpy.nonzero(out==1),CLUSTER_1,CLUSTER_10
index_setosa,numpy.nonzero(out==0),CLUSTER_1,CLUSTER_10
index_versicolor,numpy.nonzero(out==1),CLUSTER_1,CLUSTER_10
train_skin_sd_r,numpy.std(train_in_r[train_out==1]),CLUSTER_1,CLUSTER_10
train_skin_sd_g,numpy.std(train_in_g[train_out==1]),CLUSTER_1,CLUSTER_10
train_skin_sd_b,numpy.std(train_in_b[train_out==1]),CLUSTER_1,CLUSTER_10
train_bg_sd_r,numpy.std(train_in_r[train_out==0]),CLUSTER_1,CLUSTER_10
train_bg_sd_g,numpy.std(train_in_g[train_out==0]),CLUSTER_1,CLUSTER_10
train_bg_sd_b,numpy.std(train_in_b[train_out==0]),CLUSTER_1,CLUSTER_10
train_skin_sd_rg,numpy.std(train_func[train_out==1]),CLUSTER_1,CLUSTER_10
train_in_sd_setosa_pw,numpy.std(train_in_pw[train_out==0]),CLUSTER_1,CLUSTER_10
train_in_sd_setosa_sw,numpy.std(train_in_sw[train_out==0]),CLUSTER_1,CLUSTER_10
train_in_sd_setosa_pl,numpy.std(train_in_pl[train_out==0]),CLUSTER_1,CLUSTER_10
train_in_sd_setosa_sl,numpy.std(train_in_sl[train_out==0]),CLUSTER_1,CLUSTER_10
train_in_sd_versicolor_pw,numpy.std(train_in_pw[train_out==1]),CLUSTER_1,CLUSTER_10
train_in_sd_versicolor_sw,numpy.std(train_in_sw[train_out==1]),CLUSTER_1,CLUSTER_10
train_in_sd_versicolor_pl,numpy.std(train_in_pl[train_out==1]),CLUSTER_1,CLUSTER_10
train_in_sd_versicolor_sl,numpy.std(train_in_sl[train_out==1]),CLUSTER_1,CLUSTER_10
start,time.time(),CLUSTER_4,CLUSTER_0
end,time.time(),CLUSTER_4,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,3)",CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,2,figsize=(15,5)",CLUSTER_4,CLUSTER_0
x_train_16,"numpy.empty(shape=(x_train.shape[0],)",CLUSTER_4,CLUSTER_0
x_train_24,"numpy.empty(shape=(x_train.shape[0],)",CLUSTER_4,CLUSTER_0
idx,numpy.where(train_labels[:]==i),CLUSTER_4,CLUSTER_0
predicted_class,"numpy.argmax(result,axis=1)",CLUSTER_4,CLUSTER_0
true_class,"numpy.argmax(test_y,axis=1)",CLUSTER_4,CLUSTER_0
train_mean,"numpy.mean(x_train,axis=(0,1,2)",CLUSTER_4,CLUSTER_0
train_aug1_mean,"numpy.mean(x_train_aug1,axis=(0,1,2)",CLUSTER_4,CLUSTER_0
train_aug2_mean,"numpy.mean(x_train_aug2,axis=(0,1,2)",CLUSTER_4,CLUSTER_0
fan,numpy.prod(shape[:-1]),CLUSTER_4,CLUSTER_0
fan,numpy.prod(shape[:-1]),CLUSTER_4,CLUSTER_0
train_std,"numpy.std(x_train,axis=(0,1,2)",CLUSTER_4,CLUSTER_0
train_aug1_std,"numpy.std(x_train_aug1,axis=(0,1,2)",CLUSTER_4,CLUSTER_0
train_aug2_std,"numpy.std(x_train_aug2,axis=(0,1,2)",CLUSTER_4,CLUSTER_0
num_correct,numpy.sum(predicted_class==true_class),CLUSTER_4,CLUSTER_0
"x_train_aug1,y_train_aug1",numpy.copy(x_train[index_list_aug1]),CLUSTER_4,CLUSTER_0
"x_train_aug2,y_train_aug2",numpy.copy(x_train[index_list_aug2]),CLUSTER_4,CLUSTER_0
"x_test_aug1,y_test_aug1",numpy.copy(x_test),CLUSTER_4,CLUSTER_0
"x_test_aug2,y_test_aug2",numpy.copy(x_test),CLUSTER_4,CLUSTER_0
x_train_aug1,"numpy.append(x_train_aug1,x_aug1,axis=0)",CLUSTER_4,CLUSTER_0
y_train_aug1,"numpy.append(y_train_aug1,y_aug1,axis=0)",CLUSTER_4,CLUSTER_0
x_train_aug2,"numpy.append(x_train_aug2,x_aug2,axis=0)",CLUSTER_4,CLUSTER_0
y_train_aug2,"numpy.append(y_train_aug2,y_aug2,axis=0)",CLUSTER_4,CLUSTER_0
cutout_x,"numpy.load('img_aug_cutout_x.npy',encoding='latin1')",CLUSTER_4,CLUSTER_0
cutout_y,"numpy.load('lables_cutout.npy',encoding='latin1')",CLUSTER_4,CLUSTER_0
index_list_aug1,random.sample(range(len(x_train),CLUSTER_4,CLUSTER_0
index_list_aug2,random.sample(range(len(x_train),CLUSTER_4,CLUSTER_0
index_list_aug1,random.sample(range(len(cutout_x),CLUSTER_4,CLUSTER_0
index_list_aug2,random.sample(range(len(cutout_x),CLUSTER_4,CLUSTER_0
df_train,"pandas.read_csv(""datos/train.csv"")",CLUSTER_7,CLUSTER_3
v,"seaborn.boxplot(data=datos_graf,saturation=1,palette=colors)",CLUSTER_7,CLUSTER_3
v,"seaborn.boxplot(data=datos_graf,saturation=0.1,palette=colors)",CLUSTER_7,CLUSTER_3
tips,"seaborn.load_dataset(""tips"")",CLUSTER_7,CLUSTER_3
tips,"seaborn.load_dataset(""tips"")",CLUSTER_7,CLUSTER_3
ax,seaborn.swarmplot(data=datos_graf),CLUSTER_7,CLUSTER_3
v,"seaborn.swarmplot(data=datos_graf,palette=colors)",CLUSTER_7,CLUSTER_3
"figu,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_7,CLUSTER_3
result,"pandas.melt(frame=df,id_vars=['country','year'])",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('tidy_sample.csv',sep=';')",CLUSTER_8,CLUSTER_3
df2,"pandas.read_csv('wather_tidy.csv',sep=';')",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('tuburculosis.csv',sep=',')",CLUSTER_8,CLUSTER_3
data2,"numpy.array(data2,dtype=np.float32)",CLUSTER_5,CLUSTER_5
labels,"numpy.array(label2,dtype=np.float32)",CLUSTER_5,CLUSTER_5
data_test,"numpy.array(data_test,dtype=np.float32)",CLUSTER_5,CLUSTER_5
results,"numpy.zeros([28000,10])",CLUSTER_5,CLUSTER_5
"return(100.0*np.sum(np.argmax(predictions,1)","=numpy.argmax(labels,1)",CLUSTER_5,CLUSTER_5
label2,pandas.DataFrame(enc.fit_transform(labels),CLUSTER_5,CLUSTER_5
results,pandas.DataFrame(results),CLUSTER_5,CLUSTER_5
data,"pandas.read_csv('train-2.csv',header=0)",CLUSTER_5,CLUSTER_5
data_test,"pandas.read_csv('test-2.csv',header=0)",CLUSTER_5,CLUSTER_5
enc,sklearn.preprocessing.OneHotEncoder(handle_unknown='ignore'),CLUSTER_5,CLUSTER_5
flights,seaborn.load_dataset('flights'),CLUSTER_10,CLUSTER_4
tips,seaborn.load_dataset('tips'),CLUSTER_10,CLUSTER_4
alice_mask,numpy.array(Image.open('alice_mask.png'),CLUSTER_7,CLUSTER_3
waffle_chart,"numpy.zeros((height,width)",CLUSTER_7,CLUSTER_3
waffle_chart,"numpy.zeros((height,width)",CLUSTER_7,CLUSTER_3
values_cumsum,numpy.cumsum(df_dsn['Total']),CLUSTER_7,CLUSTER_3
values_cumsum,numpy.cumsum(values),CLUSTER_7,CLUSTER_3
df_tot,pandas.DataFrame(df_can[years].sum(axis=0),CLUSTER_7,CLUSTER_3
df_can,"pandas.read_excel('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx',
sheet_name='CanadabyCitizenship',
skiprows=range(20)",CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_3
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_3
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_3
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_3
ax,"seaborn.regplot(x='year',y='total',data=df_tot)",CLUSTER_7,CLUSTER_3
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green')",CLUSTER_7,CLUSTER_3
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green',marker='+')",CLUSTER_7,CLUSTER_3
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green',marker='+')",CLUSTER_7,CLUSTER_3
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green',marker='+',scatter_kws={'s':200})",CLUSTER_7,CLUSTER_3
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green',marker='+',scatter_kws={'s':200})",CLUSTER_7,CLUSTER_3
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green',marker='+',scatter_kws={'s':200})",CLUSTER_7,CLUSTER_3
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green',marker='+',scatter_kws={'s':200})",CLUSTER_7,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(rows,cols,figsize=(24//per_row*cols,24//per_row*rows)",CLUSTER_4,CLUSTER_0
y,numpy.arange(len(x),CLUSTER_4,CLUSTER_0
a1,numpy.array(i1),CLUSTER_4,CLUSTER_0
a2,numpy.array(i2),CLUSTER_4,CLUSTER_0
rotation_matrix,"numpy.array(
[[np.cos(rotation)",CLUSTER_4,CLUSTER_0
shift_matrix,"numpy.array([[1,0,height_shift],[0,1,width_shift],[0,0,1]])",CLUSTER_4,CLUSTER_0
shear_matrix,"numpy.array([[1,np.sin(shear)",CLUSTER_4,CLUSTER_0
zoom_matrix,"numpy.array([[1.0/height_zoom,0,0],[0,1.0/width_zoom,0],[0,0,1]])",CLUSTER_4,CLUSTER_0
shift_matrix,"numpy.array([[1,0,-height_shift],[0,1,-width_shift],[0,0,1]])",CLUSTER_4,CLUSTER_0
trans,"numpy.array([[1,0,-0.5*img_shape[0]],[0,1,-0.5*img_shape[1]],[0,0,1]])",CLUSTER_4,CLUSTER_0
w2ts[w],numpy.array(ts),CLUSTER_4,CLUSTER_0
"forw,tsinw2ts.items():w2ts[w]",numpy.array(ts),CLUSTER_4,CLUSTER_0
a,"numpy.zeros((size,)",CLUSTER_4,CLUSTER_0
b,"numpy.zeros((size,)",CLUSTER_4,CLUSTER_0
c,"numpy.zeros((size,1)",CLUSTER_4,CLUSTER_0
a,"numpy.zeros((size,)",CLUSTER_4,CLUSTER_0
m,"numpy.zeros((x.shape[0],x.shape[0])",CLUSTER_4,CLUSTER_0
m,"numpy.zeros((y.shape[0],x.shape[0])",CLUSTER_4,CLUSTER_0
trans,numpy.dot(np.array([[(y1-y0),CLUSTER_4,CLUSTER_0
trans,"numpy.dot(build_transform(
random.uniform(-5,5)",CLUSTER_4,CLUSTER_0
trans,"numpy.dot(np.array([[1,0,0.5*(y1+y0)",CLUSTER_4,CLUSTER_0
"self.iy,self.ix","numpy.indices((y.shape[0],x.shape[0])",CLUSTER_4,CLUSTER_0
"iy,ix","numpy.indices((y.shape[0],x.shape[0])",CLUSTER_4,CLUSTER_0
img-,"numpy.mean(img,keepdims=True)",CLUSTER_4,CLUSTER_0
history['ms'],numpy.mean(score),CLUSTER_4,CLUSTER_0
img/,"numpy.std(img,keepdims=True)",CLUSTER_4,CLUSTER_0
rotation,numpy.deg2rad(rotation),CLUSTER_4,CLUSTER_0
shear,numpy.deg2rad(shear),CLUSTER_4,CLUSTER_0
cval,numpy.average(img),CLUSTER_4,CLUSTER_0
"self.ix,self.iy","numpy.triu_indices(x.shape[0],1)",CLUSTER_4,CLUSTER_0
p2bb,pandas.read_csv(BB_DF),CLUSTER_4,CLUSTER_0
img,"scipy.ndimage.affine_transform(img,matrix,offset,output_shape=img_shape[:-1],order=1,mode='constant',
cval=np.average(img)",CLUSTER_4,CLUSTER_0
tic,time.time(),CLUSTER_4,CLUSTER_0
toc,time.time(),CLUSTER_4,CLUSTER_0
wavs,"os.listdir(os.path.join(data_dir,keyword)",CLUSTER_4,CLUSTER_11
classes,numpy.array(keywords),CLUSTER_4,CLUSTER_11
mfcc_data,"numpy.swapaxes(mfcc_feat,0,1)",CLUSTER_4,CLUSTER_11
query_class,random.choice(classes),CLUSTER_4,CLUSTER_11
figure1,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_4,CLUSTER_11
figure2,"matplotlib.pyplot.figure(figsize=(2,2)",CLUSTER_4,CLUSTER_11
ax,"matplotlib.pyplot.subplot(N,K,i*N+j+1)",CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.subplot(111),CLUSTER_4,CLUSTER_11
sample_df,pandas.DataFrame(sample_meta),CLUSTER_8,CLUSTER_4
deg_with_counts,"pandas.concat([deg,counts],axis=1)",CLUSTER_8,CLUSTER_4
gene_count_df,"pandas.read_csv('./gene_raw_count_table.csv.gz',index_col=0)",CLUSTER_8,CLUSTER_4
"plt.hist(simulation,bins","numpy.arange(200,538,1)",CLUSTER_7,CLUSTER_9
votelist,"numpy.arange(0,540,5)",CLUSTER_7,CLUSTER_9
k,"numpy.arange(0,200)",CLUSTER_7,CLUSTER_9
p05,"numpy.percentile(simulation,5.)",CLUSTER_7,CLUSTER_9
p95,"numpy.percentile(simulation,95.)",CLUSTER_7,CLUSTER_9
q,matplotlib.pyplot.legend(),CLUSTER_7,CLUSTER_9
ax,"matplotlib.pyplot.subplot(1,4,i+1)",CLUSTER_7,CLUSTER_9
q,"matplotlib.pyplot.xlabel(""$k$"")",CLUSTER_7,CLUSTER_9
q,"matplotlib.pyplot.ylabel(""PDFat$k$"")",CLUSTER_7,CLUSTER_9
predictwise,pandas.read_csv('predictwise.csv'),CLUSTER_7,CLUSTER_9
colors,seaborn.color_palette(),CLUSTER_7,CLUSTER_9
brv,scipy.stats.bernoulli(p=0.3),CLUSTER_7,CLUSTER_9
rv,"scipy.stats.binom(200,p)",CLUSTER_7,CLUSTER_9
pseries,pandas.Series(skill_set),CLUSTER_9,CLUSTER_3
job_count,numpy.sum([digit*(10**exponent),CLUSTER_9,CLUSTER_3
html_text,"re.sub(""[^a-z.+3]"","""",html_page.lower()",CLUSTER_9,CLUSTER_3
train_clean_reviews_label,pandas.DataFrame(),CLUSTER_0,CLUSTER_5
submission,pandas.DataFrame(),CLUSTER_0,CLUSTER_5
submission,pandas.DataFrame(),CLUSTER_0,CLUSTER_5
train_data,"pandas.read_csv('G:/internshala/signzy_kaggle/labeledTrainData.tsv',delimiter='\t',quoting=3)",CLUSTER_0,CLUSTER_5
test_data,"pandas.read_csv('G:/internshala/signzy_kaggle/testData.tsv',delimiter='\t',quoting=3)",CLUSTER_0,CLUSTER_5
Review,"re.sub('[^a-zA-Z]','',Review)",CLUSTER_0,CLUSTER_5
gsearch1,sklearn.model_selection.GridSearchCV(estimator=LogisticRegression(),CLUSTER_0,CLUSTER_5
gsearch1,sklearn.model_selection.GridSearchCV(estimator=LogisticRegression(),CLUSTER_0,CLUSTER_5
gsearch1,GridSearchCV(estimator=sklearn.linear_model.LogisticRegression(),CLUSTER_0,CLUSTER_5
opt_lr,sklearn.linear_model.LogisticRegression(C=0.05),CLUSTER_0,CLUSTER_5
gsearch1,GridSearchCV(estimator=sklearn.linear_model.LogisticRegression(),CLUSTER_0,CLUSTER_5
opt_lr,sklearn.linear_model.LogisticRegression(C=0.05),CLUSTER_0,CLUSTER_5
data,pandas.read_csv('./data/Boston_March2018.csv'),CLUSTER_5,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
score2,"sklearn.metrics.r2_score(y_rf,y_train)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=42)",CLUSTER_5,CLUSTER_5
regressor,sklearn.tree.DecisionTreeRegressor(random_state=0),CLUSTER_5,CLUSTER_5
regr_1,"sklearn.tree.DecisionTreeRegressor(max_depth=9998
)",CLUSTER_5,CLUSTER_5
df,"pandas.concat([df_train,df_test])",CLUSTER_5,CLUSTER_1
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_5,CLUSTER_1
df_test,pandas.read_csv(data_path+'house_test.csv.gz'),CLUSTER_5,CLUSTER_1
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_5,CLUSTER_1
df_temp,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
df_temp,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
train_target,numpy.array(label),CLUSTER_7,CLUSTER_3
train_data,numpy.vstack(data),CLUSTER_7,CLUSTER_3
start_time,time.time(),CLUSTER_7,CLUSTER_3
mean_acc,numpy.zeros((Ks-1),CLUSTER_5,CLUSTER_5
std_acc,numpy.zeros((Ks-1),CLUSTER_5,CLUSTER_5
std_acc[n-1],numpy.std(yhat==y_test),CLUSTER_5,CLUSTER_5
df,pandas.read_csv('teleCust1000t.csv'),CLUSTER_5,CLUSTER_5
X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=4)",CLUSTER_5,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_5
neigh1,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_5
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n),CLUSTER_5,CLUSTER_5
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,yhat)",CLUSTER_5,CLUSTER_5
ROOT_DIR,os.getcwd(),CLUSTER_11,CLUSTER_5
knn_neighbors,numpy.argmin(cv_rmse_knn['rmse_knn']),CLUSTER_11,CLUSTER_5
xgb_num_boost,numpy.argmin(cv_rmse_xgb['test-rmse-mean']),CLUSTER_11,CLUSTER_5
lgb_num_boost,numpy.argmin(cv_rmse_lgb['rmse-mean']),CLUSTER_11,CLUSTER_5
"cat_params[""iterations""]",numpy.argmin(cv_rmse_catboost['test-RMSE-mean']),CLUSTER_11,CLUSTER_5
X_stack,"numpy.vstack((lgb_pred_train,xgb_pred_train)",CLUSTER_11,CLUSTER_5
all_data_scaled,"pandas.DataFrame(all_data_scaled,columns=list(all_data.columns)",CLUSTER_11,CLUSTER_5
train,"pandas.read_csv(""../data/Train.csv"")",CLUSTER_11,CLUSTER_5
test,"pandas.read_csv(""../data/Test.csv"")",CLUSTER_11,CLUSTER_5
riders,"pandas.read_csv(""../data/Riders.csv"")",CLUSTER_11,CLUSTER_5
submission,"pandas.read_csv(""../data/SampleSubmission.csv"")",CLUSTER_11,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_11,CLUSTER_5
lasso_stck,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_11,CLUSTER_5
cv_results,"sklearn.model_selection.cross_validate(lasso_stck,X_stack,target,cv=6)",CLUSTER_11,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_11,CLUSTER_5
rmse_score,"sklearn.metrics.make_scorer(root_mse,greater_is_better=False)",CLUSTER_11,CLUSTER_5
predicted,sklearn.model_selection.cross_val_predict(LinearRegression(),CLUSTER_11,CLUSTER_5
linear_model,sklearn.linear_model.LinearRegression(),CLUSTER_11,CLUSTER_5
wnv,pandas.DataFrame(list_of_rows),CLUSTER_9,CLUSTER_2
"wnv[['human','deadbirds','mosquito','chickens']]",pandas.concat([wnv[col].astype(int),CLUSTER_9,CLUSTER_2
response,requests.get(url),CLUSTER_9,CLUSTER_2
data,"pandas.read_csv('household_power_consumption.txt',delimiter=';')",CLUSTER_5,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_9
var1,"numpy.cumsum(np.round(hpc.explained_variance_ratio_,decimals=4)",CLUSTER_5,CLUSTER_9
hpc,sklearn.decomposition.PCA(n_components=7),CLUSTER_5,CLUSTER_9
hpc,sklearn.decomposition.PCA(n_components=2),CLUSTER_5,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_9
methods,"numpy.array(['cv2.TM_CCOEFF','cv2.TM_CCOEFF_NORMED','cv2.TM_CCORR','cv2.TM_CCORR_NORMED','cv2.TM_SQDIFF','cv2.TM_SQDIFF_NORMED'])",CLUSTER_1,CLUSTER_9
least100,numpy.array(res),CLUSTER_1,CLUSTER_9
least0,numpy.array(res),CLUSTER_1,CLUSTER_9
allres,numpy.array(allres),CLUSTER_1,CLUSTER_9
allres,numpy.array(allres),CLUSTER_1,CLUSTER_9
a,"numpy.array([allres[1],allres[3]])",CLUSTER_1,CLUSTER_9
a,"numpy.array([allres[2],allres[4],allres[5],allres[6],allres[7],allres[8]])",CLUSTER_1,CLUSTER_9
minus2,"numpy.asarray([tl[1],tl[0]])",CLUSTER_1,CLUSTER_9
locs,numpy.argsort(np.array(res),CLUSTER_1,CLUSTER_9
angle1,"numpy.arctan2(pts1[0,1]-pts1[1,1],pts1[0,0]-pts1[1,0])",CLUSTER_1,CLUSTER_9
angle2,"numpy.arctan2(pts2[0,1]-pts2[1,1],pts2[0,0]-pts2[1,0])",CLUSTER_1,CLUSTER_9
sd2,sd.rotate(angle=numpy.rad2deg(rot),CLUSTER_1,CLUSTER_9
pts1,"numpy.float32([[103,133],[89,72]])",CLUSTER_1,CLUSTER_9
pts2,"numpy.float32([[65,78],[118,68]])",CLUSTER_1,CLUSTER_9
sd_data,numpy.load('../../PROJECT/Project/Oct9/sd_picture.npy'),CLUSTER_1,CLUSTER_9
se_data,numpy.load('../../PROJECT/Project/Oct9/se_picture.npy'),CLUSTER_1,CLUSTER_9
se_data,numpy.load('../../Data/160506_SC239_X/C_EDSSpectrumImage.npy'),CLUSTER_1,CLUSTER_9
se_data,numpy.load('../../Data/160506_SC239_X/C_EDSSpectrumImage.npy'),CLUSTER_1,CLUSTER_9
data_Matche,"pandas.read_csv(""projet/match.csv"")",CLUSTER_11,CLUSTER_3
dl,pandas.read_csv('projet/league.csv'),CLUSTER_11,CLUSTER_3
accuracies_mean,numpy.array([np.mean(v),CLUSTER_3,CLUSTER_10
accuracies_std,numpy.array([np.std(v),CLUSTER_3,CLUSTER_10
idxs,numpy.flatnonzero(y_train==y),CLUSTER_3,CLUSTER_10
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_train_folds[i]),CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
X_train_folds,"numpy.array_split(X_test,num_folds)",CLUSTER_3,CLUSTER_10
y_train_folds,"numpy.array_split(y_test,num_folds)",CLUSTER_3,CLUSTER_10
difference,"numpy.linalg.norm(dists-dists_one,ord='fro')",CLUSTER_3,CLUSTER_10
difference,"numpy.linalg.norm(dists-dists_two,ord='fro')",CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
data,pandas.DataFrame(index=df.index),CLUSTER_7,CLUSTER_5
data_combo,pandas.DataFrame(index=df_combo.index),CLUSTER_7,CLUSTER_5
df,pandas.read_csv('data/amazon.csv.gz'),CLUSTER_7,CLUSTER_5
movies,"pandas.read_csv('data/imdb_movies.csv.gz',index_col='movieId')",CLUSTER_7,CLUSTER_5
ratings,pandas.read_csv('data/imdb_ratings.csv.gz'),CLUSTER_7,CLUSTER_5
_,"seaborn.heatmap(confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42,test_size=0.8)",CLUSTER_7,CLUSTER_5
clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=5,p=2)",CLUSTER_7,CLUSTER_5
search,sklearn.model_selection.GridSearchCV(KNeighborsClassifier(),CLUSTER_7,CLUSTER_5
predictions,numpy.zeros(shape=[len(df_test),CLUSTER_7,CLUSTER_8
df_plot,"pandas.DataFrame({'features':df.columns[df.columns!='target'],
'importances':model.feature_importances_})",CLUSTER_7,CLUSTER_8
df,"pandas.merge(df,songs,on='song_id',how='left')",CLUSTER_7,CLUSTER_8
df,"pandas.merge(df,members,on='msno',how='left')",CLUSTER_7,CLUSTER_8
df_test,"pandas.merge(df_test,songs,on='song_id',how='left')",CLUSTER_7,CLUSTER_8
df_test,"pandas.merge(df_test,members,on='msno',how='left')",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('file:///E:/Namrata/study/cs/1stsem/MachineLearning/Project/datasets/train.csv'),CLUSTER_7,CLUSTER_8
songs,pandas.read_csv('file:///E:/Namrata/study/cs/1stsem/MachineLearning/Project/datasets/songs.csv'),CLUSTER_7,CLUSTER_8
members,pandas.read_csv('file:///E:/Namrata/study/cs/1stsem/MachineLearning/Project/datasets/members.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv('file:///E:/Namrata/study/cs/1stsem/MachineLearning/Project/datasets/test.csv'),CLUSTER_7,CLUSTER_8
songs,pandas.read_csv('file:///E:/Namrata/study/cs/1stsem/MachineLearning/Project/datasets/songs.csv'),CLUSTER_7,CLUSTER_8
members,pandas.read_csv('file:///E:/Namrata/study/cs/1stsem/MachineLearning/Project/datasets/members.csv'),CLUSTER_7,CLUSTER_8
submission,pandas.read_csv('file:///E:/Namrata/study/cs/1stsem/MachineLearning/Project/datasets/sample_submission.csv'),CLUSTER_7,CLUSTER_8
df.registration_init_time,"pandas.to_datetime(df.registration_init_time,format='%Y%m%d',errors='ignore')",CLUSTER_7,CLUSTER_8
df.expiration_date,"pandas.to_datetime(df.expiration_date,format='%Y%m%d',errors='ignore')",CLUSTER_7,CLUSTER_8
df_test.registration_init_time,"pandas.to_datetime(df_test.registration_init_time,format='%Y%m%d',errors='ignore')",CLUSTER_7,CLUSTER_8
df_test.expiration_date,"pandas.to_datetime(df_test.expiration_date,format='%Y%m%d',errors='ignore')",CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
kf,sklearn.model_selection.KFold(n_splits=3),CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(test['target'],predictions_roc)",CLUSTER_7,CLUSTER_8
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_7,CLUSTER_8
a,"numpy.array([[5.0,5.0]])",CLUSTER_2,CLUSTER_7
b,"numpy.array([[2.0],[2.0]])",CLUSTER_2,CLUSTER_7
winning_door,random.choice(doors),CLUSTER_3,CLUSTER_10
player_door,random.choice(doors),CLUSTER_3,CLUSTER_10
reveal_door,random.choice(temp_doors),CLUSTER_3,CLUSTER_10
"data_mean,data_std",numpy.mean(data),CLUSTER_5,CLUSTER_9
"total_df.loc[non_zero_idx,col]",numpy.log(data[non_zero_idx]),CLUSTER_5,CLUSTER_9
pca_df,"pandas.DataFrame(
pca_trafo,
index=total_df.index,
columns=[""PC""+str(i+1)",CLUSTER_5,CLUSTER_9
pca_w_df,"pandas.DataFrame(
X_transformed,
index=df_wine_all.index,
columns=[""PC""+str(i+1)",CLUSTER_5,CLUSTER_9
total_df,"pandas.concat([train_df.drop('target',axis=1)",CLUSTER_5,CLUSTER_9
train_df,pandas.read_csv('train.csv'),CLUSTER_5,CLUSTER_9
test_df,pandas.read_csv('test.csv'),CLUSTER_5,CLUSTER_9
df_wine_all,"pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data',header=None)",CLUSTER_5,CLUSTER_9
"total_df.loc[nonzero_rows,col]","sklearn.preprocessing.scale(total_df.loc[nonzero_rows,col])",CLUSTER_5,CLUSTER_9
total_df_all[col],sklearn.preprocessing.scale(total_df_all[col]),CLUSTER_5,CLUSTER_9
pca,sklearn.decomposition.PCA(n_components=1000),CLUSTER_5,CLUSTER_9
pca_w,sklearn.decomposition.PCA(n_components=10),CLUSTER_5,CLUSTER_9
"_,axes","matplotlib.pyplot.subplots(2,2,figsize=(20,15)",CLUSTER_5,CLUSTER_9
labels,json.load(f),CLUSTER_6,CLUSTER_11
simple_y,numpy.arange(10),CLUSTER_12,CLUSTER_5
X_1,numpy.arange(50),CLUSTER_12,CLUSTER_5
sigrange,"numpy.arange(5,30,0.05)",CLUSTER_12,CLUSTER_5
t0_vals,"numpy.linspace(-10,10,100)",CLUSTER_12,CLUSTER_5
t1_vals,"numpy.linspace(-2,5,100)",CLUSTER_12,CLUSTER_5
simple_X_1,numpy.hstack([np.arange(10),CLUSTER_12,CLUSTER_5
simple_y,numpy.hstack([np.zeros(10),CLUSTER_12,CLUSTER_5
simple_X,numpy.vstack([np.ones(10),CLUSTER_12,CLUSTER_5
X,numpy.vstack([np.ones(50),CLUSTER_12,CLUSTER_5
thetas,numpy.vstack((theta_0.flatten(),CLUSTER_12,CLUSTER_5
simple_X,numpy.vstack([np.ones(20),CLUSTER_12,CLUSTER_5
X_log,numpy.vstack([np.ones(len(X_log_1),CLUSTER_12,CLUSTER_5
sigrange_X,numpy.vstack([np.ones(500),CLUSTER_12,CLUSTER_5
"theta_0,theta_1","numpy.meshgrid(t0_vals,t1_vals)",CLUSTER_12,CLUSTER_5
data,"pandas.DataFrame(data_dict['data'],columns=data_dict['feature_names'])",CLUSTER_12,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_5
data_dict,sklearn.datasets.load_breast_cancer(),CLUSTER_12,CLUSTER_5
y,"numpy.array([0,1,2,2,1])",CLUSTER_1,CLUSTER_10
correct_scores,"numpy.asarray([
[-0.81233741,-1.27654624,-0.70335995],
[-0.17129677,-1.18803311,-0.47310444],
[-0.51590475,-1.01354314,-0.8504215],
[-0.15419291,-0.48629638,-0.52901952],
[-0.00618733,-0.12435261,-0.15226949]])",CLUSTER_1,CLUSTER_10
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_1,CLUSTER_10
median_of_sample_means,numpy.median(Zomato['approx_cost(fortwopeople),CLUSTER_4,CLUSTER_11
table,"pandas.crosstab(Zomato['rate'],Zomato['restaurant_type'])",CLUSTER_4,CLUSTER_11
Zomato,pandas.read_csv('zomato.csv'),CLUSTER_4,CLUSTER_11
Zomato['rate'],"pandas.to_numeric(Zomato['rate'],errors='coerce')",CLUSTER_4,CLUSTER_11
"chi2,p,dof,expected",scipy.stats.chi2_contingency(table.values),CLUSTER_4,CLUSTER_11
pieces,"re.findall(regexp,word)",CLUSTER_10,CLUSTER_12
x,numpy.zeros(400),CLUSTER_1,CLUSTER_9
x,"numpy.zeros((4,13)",CLUSTER_1,CLUSTER_9
sns,"numpy.sum(x,axis=0)",CLUSTER_1,CLUSTER_9
sss,"numpy.sum(x,axis=1)",CLUSTER_1,CLUSTER_9
n,"numpy.linspace(0,N,N+1)",CLUSTER_1,CLUSTER_9
n,"numpy.linspace(0,N,N+1)",CLUSTER_1,CLUSTER_9
X,scipy.stats.norm(),CLUSTER_1,CLUSTER_9
DiceRoll,"scipy.stats.rv_discrete(values=(c,p)",CLUSTER_1,CLUSTER_9
DiceRoll,"scipy.stats.rv_discrete(values=(c,p)",CLUSTER_1,CLUSTER_9
df,pandas.DataFrame(row_list),CLUSTER_8,CLUSTER_11
gen,os.walk('../moviereviews'),CLUSTER_8,CLUSTER_11
x,"numpy.column_stack((a,b)",CLUSTER_12,CLUSTER_10
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_1,CLUSTER_3
predictions_ARIMA_diff,"pandas.Series(results_ARIMA.fittedvalues,copy=True)",CLUSTER_1,CLUSTER_3
predictions_ARIMA_log,"pandas.Series(ts_log.ix[0],index=ts_log.index)",CLUSTER_1,CLUSTER_3
data,"pandas.read_excel(""data_oil.xlsx"",0,index_col='Date')",CLUSTER_1,CLUSTER_3
predictions_ARIMA,numpy.exp(predictions_ARIMA_log),CLUSTER_1,CLUSTER_3
ts_log,numpy.log(ts),CLUSTER_1,CLUSTER_3
features,pandas.DataFrame(data[0]),CLUSTER_12,CLUSTER_5
features,pandas.DataFrame(data[0]),CLUSTER_12,CLUSTER_5
labels,pandas.Series(data[1]),CLUSTER_12,CLUSTER_5
labels,pandas.Series(data[1]),CLUSTER_12,CLUSTER_5
data,"sklearn.datasets.make_moons(100,random_state=3,noise=0.04)",CLUSTER_12,CLUSTER_5
data,"sklearn.datasets.make_moons(100,random_state=3,noise=0.04)",CLUSTER_12,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_12,CLUSTER_5
mpl,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(1,)",CLUSTER_12,CLUSTER_5
mpl,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(n,)",CLUSTER_12,CLUSTER_5
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(n,n)",CLUSTER_12,CLUSTER_5
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_12,CLUSTER_5
nn_accuracy,"sklearn.metrics.accuracy_score(test_labels,nn_predictions)",CLUSTER_12,CLUSTER_5
log_accuracy,"sklearn.metrics.accuracy_score(test_labels,log_predictions)",CLUSTER_12,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(test_labels,nn_predictions)",CLUSTER_12,CLUSTER_5
accuracy,"sklearn.metrics.accuracy_score(test_labels,nn_predictions)",CLUSTER_12,CLUSTER_5
x,"numpy.arange(0,220160,1)",CLUSTER_1,CLUSTER_9
pspectrum,numpy.zeros(numAngles),CLUSTER_1,CLUSTER_9
data_extracted,"numpy.take(data1,x)",CLUSTER_1,CLUSTER_9
v,numpy.exp(1j*2*np.pi*array*np.sin(theta),CLUSTER_1,CLUSTER_9
psindB,numpy.log10(10*pspectrum/pspectrum.min(),CLUSTER_1,CLUSTER_9
array,"numpy.linspace(0,dist,N)",CLUSTER_1,CLUSTER_9
Angles,"numpy.linspace(0,np.pi,180)",CLUSTER_1,CLUSTER_9
x,"numpy.asmatrix([data1,data2,data3,data4])",CLUSTER_1,CLUSTER_9
data_extracted,numpy.fft.fft(data_extracted),CLUSTER_1,CLUSTER_9
"D,V",scipy.linalg.eig(CovMat),CLUSTER_1,CLUSTER_9
"DoAsMUSIC,_","scipy.signal.find_peaks(psindB,height=0,distance=1.2)",CLUSTER_1,CLUSTER_9
Xi,"numpy.around(Xi,decimals=5)",CLUSTER_5,CLUSTER_9
tspan,"numpy.linspace(0,250,num=2001)",CLUSTER_5,CLUSTER_9
sol,"scipy.integrate.solve_ivp(SEIR,[tspan[0],tspan[-1]],ini,method='RK45',t_eval=tspan)",CLUSTER_5,CLUSTER_9
threshold_scale,numpy.linspace(df_can['Total'].min(),CLUSTER_8,CLUSTER_3
df_incidents,pandas.read_csv('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Police_Department_Incidents_-_Previous_Year__2016_.csv'),CLUSTER_8,CLUSTER_3
df_can,"pandas.read_excel('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx',
sheet_name='CanadabyCitizenship',
skiprows=range(20)",CLUSTER_8,CLUSTER_3
u0,numpy.zeros(nx),CLUSTER_1,CLUSTER_10
x,"numpy.linspace(0.0,l,num=nx)",CLUSTER_1,CLUSTER_10
s1,pandas.Series(2),CLUSTER_8,CLUSTER_3
s2,"pandas.Series([1,2,3,4,5])",CLUSTER_8,CLUSTER_3
s3,"pandas.Series([1,2,3],index=['a','b','c'])",CLUSTER_8,CLUSTER_3
s4,"pandas.Series(2,index=s2.index)",CLUSTER_8,CLUSTER_3
s6,"pandas.Series({'a':1,'b':2,'c':3,'d':4})",CLUSTER_8,CLUSTER_3
s,"pandas.Series([0,1,1,2,3,4,5,6,7,np.nan])",CLUSTER_8,CLUSTER_3
s5,"pandas.Series([1,2,3],index=[10,11,12])",CLUSTER_8,CLUSTER_3
s3,"pandas.Series([1,2,3],index=['a','b','c'])",CLUSTER_8,CLUSTER_3
s6,"pandas.Series([1,2,3,4],index=['a','b','c','d'])",CLUSTER_8,CLUSTER_3
s7,"pandas.Series([4,3,2,1],index=['d','c','b','a'])",CLUSTER_8,CLUSTER_3
s8,"pandas.Series({'a':1,'b':2,'c':3,'d':5})",CLUSTER_8,CLUSTER_3
s9,"pandas.Series({'b':6,'c':7,'d':9,'e':10})",CLUSTER_8,CLUSTER_3
s10,"pandas.Series([1.0,2.0,3.0],index=['a','a','b'])",CLUSTER_8,CLUSTER_3
s11,"pandas.Series([4.0,5.0,6.0],index=['a','a','c'])",CLUSTER_8,CLUSTER_3
b1,"numpy.zeros(shape=(n_h,1)",CLUSTER_1,CLUSTER_10
b2,"numpy.zeros(shape=(n_y,1)",CLUSTER_1,CLUSTER_10
parameters['b'+str(l)],"numpy.zeros((layer_dims[l],1)",CLUSTER_1,CLUSTER_10
Z,"numpy.dot(W,A)",CLUSTER_1,CLUSTER_10
dW,"numpy.dot(dZ,cache[0].T)",CLUSTER_1,CLUSTER_10
dA_prev,"numpy.dot(cache[1].T,dZ)",CLUSTER_1,CLUSTER_10
cost,numpy.squeeze(cost),CLUSTER_1,CLUSTER_10
db,"numpy.squeeze(np.sum(dZ,axis=1,keepdims=True)",CLUSTER_1,CLUSTER_10
a,numpy.array(a),CLUSTER_5,CLUSTER_1
b,numpy.array(b),CLUSTER_5,CLUSTER_1
mean,numpy.mean(square),CLUSTER_5,CLUSTER_1
root,numpy.sqrt(mean),CLUSTER_5,CLUSTER_1
meta_features,"pandas.DataFrame({'Lasso':pred_list[0],'Ridge':pred_list[1],'ENet':pred_list[2]})",CLUSTER_5,CLUSTER_1
X_test_meta,"pandas.DataFrame({'Lasso':pred_list_test[0],'Ridge':pred_list_test[1],'ENet':pred_list_test[2]})",CLUSTER_5,CLUSTER_1
df_val_test,"pandas.concat([X_test,y_test],axis=1)",CLUSTER_5,CLUSTER_1
rf,sklearn.ensemble.RandomForestRegressor(**get_best_params(sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_1
enet,sklearn.linear_model.ElasticNet(**get_best_params(sklearn.linear_model.ElasticNet(),CLUSTER_5,CLUSTER_1
lasso,sklearn.linear_model.Lasso(**get_best_params(sklearn.linear_model.Lasso(),CLUSTER_5,CLUSTER_1
meta_model,sklearn.linear_model.Lasso(**get_best_params(sklearn.linear_model.Lasso(),CLUSTER_5,CLUSTER_1
ridge,sklearn.linear_model.Ridge(**get_best_params(sklearn.linear_model.Ridge(),CLUSTER_5,CLUSTER_1
gboost,sklearn.ensemble.GradientBoostingRegressor(**get_best_params(sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_5,CLUSTER_1
kernel_ridge,sklearn.kernel_ridge.KernelRidge(**get_best_params(sklearn.kernel_ridge.KernelRidge(),CLUSTER_5,CLUSTER_1
#kernel_ridge,sklearn.kernel_ridge.KernelRidge(**get_best_params(sklearn.kernel_ridge.KernelRidge(),CLUSTER_5,CLUSTER_1
x,"numpy.arange(-3.0,3.0,0.1)",CLUSTER_3,CLUSTER_6
dataArr,numpy.array(dataMat),CLUSTER_3,CLUSTER_6
weights,"numpy.ones((n,1)",CLUSTER_3,CLUSTER_6
weights,numpy.ones(n),CLUSTER_3,CLUSTER_6
weights,numpy.ones(n),CLUSTER_3,CLUSTER_6
"m,n",numpy.shape(dataMatrix),CLUSTER_3,CLUSTER_6
n,numpy.shape(dataArr),CLUSTER_3,CLUSTER_6
"m,n",numpy.shape(dataMatrix),CLUSTER_3,CLUSTER_6
"m,n",numpy.shape(dataMatrix),CLUSTER_3,CLUSTER_6
dataMatrix,numpy.mat(dataMatIn),CLUSTER_3,CLUSTER_6
labelMat,numpy.mat(classLabels),CLUSTER_3,CLUSTER_6
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_6
start_time,time.time(),CLUSTER_11,CLUSTER_7
duration_in_seconds,time.time(),CLUSTER_11,CLUSTER_7
average_df,"pandas.DataFrame(np.average(b,axis=0)",CLUSTER_7,CLUSTER_9
df,pandas.DataFrame(index=range(len(idx),CLUSTER_7,CLUSTER_9
pair_df,pandas.DataFrame(pairs),CLUSTER_7,CLUSTER_9
distance_matrix_num,pandas.DataFrame(dm),CLUSTER_7,CLUSTER_9
wdmSEdf,pandas.DataFrame(wdmSE),CLUSTER_7,CLUSTER_9
pairdf,pandas.DataFrame(pairs),CLUSTER_7,CLUSTER_9
dataFrame,"pandas.DataFrame({'left':left,'right':right,'leftWeight':leftWeight,
'rightWeight':rightWeight},index=range(len(left)",CLUSTER_7,CLUSTER_9
genes,pandas.DataFrame(index=range(numgenes),CLUSTER_7,CLUSTER_9
class_exp,"pandas.DataFrame(index=feat_sel_matrix.index,columns=cols)",CLUSTER_7,CLUSTER_9
panel,"pandas.DataFrame(index=unique_genes,columns=cols)",CLUSTER_7,CLUSTER_9
panel_OD,"pandas.DataFrame(index=features,columns=cols)",CLUSTER_7,CLUSTER_9
genes,pandas.DataFrame(index=range(10),CLUSTER_7,CLUSTER_9
class_exp,"pandas.DataFrame(index=matrix_feature_selected.index,columns=cols)",CLUSTER_7,CLUSTER_9
allLabels,pandas.Series(np.r_[dataFrame.left.unique(),CLUSTER_7,CLUSTER_9
leftLabels,pandas.Series(dataFrame.left.unique(),CLUSTER_7,CLUSTER_9
rightLabels,pandas.Series(dataFrame.right.unique(),CLUSTER_7,CLUSTER_9
df,"pandas.pivot_table(newdf2,values='class2',index=newdf2.index,columns='new_membership',aggfunc=np.count_nonzero)",CLUSTER_7,CLUSTER_9
BA_counttable,"pandas.read_csv(BA_count_path,index_col=0)",CLUSTER_7,CLUSTER_9
BA_meta,"pandas.read_csv('../leidenalg/Datasets/Darmanis_Brain/All_cell_info_brain.csv',sep=';',index_col=0)",CLUSTER_7,CLUSTER_9
GBM_counttable,"pandas.read_csv(GBM_count_path,sep='',index_col=0)",CLUSTER_7,CLUSTER_9
GBM_meta,"pandas.read_csv('../leidenalg/Datasets/Darmanis_Glioblastoma/GBM_data_and_metadata/GBM_metadata.csv',sep='',index_col=0)",CLUSTER_7,CLUSTER_9
GBMtsne,"pandas.read_csv('../leidenalg/Datasets/Darmanis_Glioblastoma/GBM_data_and_metadata/GBM_TSNE.csv',sep='',index_col=0)",CLUSTER_7,CLUSTER_9
GBMmeta2,"pandas.read_csv('../leidenalg/Datasets/Darmanis_Glioblastoma/GBM_data_and_metadata/GEO_upload/spyros.darmanis_metadata_GBM.csv',index_col=0)",CLUSTER_7,CLUSTER_9
b,"c=numpy.ndarray([trials,dim,dim],np.int32)",CLUSTER_7,CLUSTER_9
ys_d,numpy.array(50*[leftWidths[leftLabel]['bottom']]+50*[rightWidths[rightLabel]['bottom']]),CLUSTER_7,CLUSTER_9
ys_u,numpy.array(50*[leftWidths[leftLabel]['bottom']+ns_l[leftLabel][rightLabel]]+50*[rightWidths[rightLabel]['bottom']+ns_r[leftLabel][rightLabel]]),CLUSTER_7,CLUSTER_9
ys_d,"numpy.convolve(ys_d,0.05*np.ones(20)",CLUSTER_7,CLUSTER_9
ys_d,"numpy.convolve(ys_d,0.05*np.ones(20)",CLUSTER_7,CLUSTER_9
ys_u,"numpy.convolve(ys_u,0.05*np.ones(20)",CLUSTER_7,CLUSTER_9
ys_u,"numpy.convolve(ys_u,0.05*np.ones(20)",CLUSTER_7,CLUSTER_9
leftWeight,numpy.ones(len(left),CLUSTER_7,CLUSTER_9
markers,"numpy.argpartition(fold_change,-numgenes)",CLUSTER_7,CLUSTER_9
markers,"numpy.argpartition(fold_change.values,-numgenes)",CLUSTER_7,CLUSTER_9
markers,"numpy.argpartition(fold_change,20)",CLUSTER_7,CLUSTER_9
fold_change,numpy.log2(ge1+0.1),CLUSTER_7,CLUSTER_9
fold_change,numpy.log2(ge1+0.1),CLUSTER_7,CLUSTER_9
"plt.scatter(xgrid,np.ones(len(xgrid))*i,s",numpy.log2(temp),CLUSTER_7,CLUSTER_9
fold_change,numpy.log2(ge1+0.1),CLUSTER_7,CLUSTER_9
"pair_df.loc[pair,'edge_length']",numpy.sqrt((xy2[0]-xy1[0]),CLUSTER_7,CLUSTER_9
"pairdf.loc[pair,'edge_length']",numpy.sqrt((xy2[0]-xy1[0]),CLUSTER_7,CLUSTER_9
f,"matplotlib.pyplot.figure(figsize=(11,10)",CLUSTER_7,CLUSTER_9
f,"matplotlib.pyplot.figure(figsize=(20,50)",CLUSTER_7,CLUSTER_9
f,"matplotlib.pyplot.figure(figsize=(20,len(panel)",CLUSTER_7,CLUSTER_9
f,"matplotlib.pyplot.figure(figsize=(20,50)",CLUSTER_7,CLUSTER_9
f,"matplotlib.pyplot.figure(figsize=(20,len(panel)",CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(11,10)",CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(6,5)",CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(6,5)",CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(11,10)",CLUSTER_7,CLUSTER_9
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_9
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_9
cg,seaborn.clustermap(np.log2(panel+0.001),CLUSTER_7,CLUSTER_9
cg,"seaborn.clustermap(matrix,row_linkage=row_link,col_linkage=col_link)",CLUSTER_7,CLUSTER_9
values,"seaborn.color_palette('Paired',len(groupi)",CLUSTER_7,CLUSTER_9
values,"seaborn.color_palette('Paired',len(keys)",CLUSTER_7,CLUSTER_9
colors,"seaborn.color_palette('RdBu_r',5)",CLUSTER_7,CLUSTER_9
colors,"seaborn.color_palette('RdBu_r',5)",CLUSTER_7,CLUSTER_9
values,"seaborn.color_palette('husl',len(keys)",CLUSTER_7,CLUSTER_9
colorPalette,"seaborn.color_palette(palette,len(allLabels)",CLUSTER_7,CLUSTER_9
ns_l,collections.defaultdict(),CLUSTER_7,CLUSTER_9
ns_r,collections.defaultdict(),CLUSTER_7,CLUSTER_9
leftWidths,collections.defaultdict(),CLUSTER_7,CLUSTER_9
rightWidths,collections.defaultdict(),CLUSTER_7,CLUSTER_9
y_pred,numpy.array(y_pred),CLUSTER_0,CLUSTER_5
y_true,numpy.array(y_test),CLUSTER_0,CLUSTER_5
embedding_matrix,"numpy.zeros((num_words,embedding_dim)",CLUSTER_0,CLUSTER_5
mistakes,numpy.where(y_pred!=y_true),CLUSTER_0,CLUSTER_5
max_tokens,numpy.mean(len_tokens),CLUSTER_0,CLUSTER_5
comment,"re.sub('[\s+\.\!\/_,$%^*(+\""\']+|[+——！，。？、~@
cut_list=[wordforwordinjieba.cut(str(comment)",CLUSTER_0,CLUSTER_5
data,"pandas.read_csv(""../source/douban.txt"",encoding='gb18030')",CLUSTER_0,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train_pad,train_target,
test_size=0.3,random_state=12)",CLUSTER_0,CLUSTER_5
data,pandas.DataFrame([list(X),CLUSTER_1,CLUSTER_3
data_3,"pandas.read_csv(""NYC_RE_10466__multi.csv"",index_col=0)",CLUSTER_1,CLUSTER_3
data_4,"pandas.read_csv(""countries.csv"",index_col=0)",CLUSTER_1,CLUSTER_3
X,numpy.asarray(X),CLUSTER_1,CLUSTER_3
df,pandas.DataFrame({'a_wood':np.random.randn(100),CLUSTER_1,CLUSTER_3
california_housing_dataframe,"pandas.read_csv(r""..\\dataset\\california_housing_train.csv"",sep="","")",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(2,3,sharex='col',sharey='row')",CLUSTER_1,CLUSTER_3
df,"pandas.DataFrame(abs(randn(10,5)",CLUSTER_1,CLUSTER_3
df,"DataFrame(abs(randn(10,5)),columns=['A','B','C','D','E'],index=numpy.arange(0,100,10)",CLUSTER_1,CLUSTER_3
rows,"numpy.arange(0,len(tg)",CLUSTER_5,CLUSTER_6
rows,"numpy.arange(0,len(tg)",CLUSTER_5,CLUSTER_6
tg,numpy.where(news_train.target==i),CLUSTER_5,CLUSTER_6
tg,numpy.where(news_test.target==i),CLUSTER_5,CLUSTER_6
top_200,numpy.argsort(_20_chi2),CLUSTER_5,CLUSTER_6
top_200_mi,numpy.argsort(_20_mi),CLUSTER_5,CLUSTER_6
top_200,"numpy.argsort(_20_lr.coef_,axis=1)",CLUSTER_5,CLUSTER_6
cols,"numpy.tile(top_200[i],len(tg)",CLUSTER_5,CLUSTER_6
cols,"numpy.tile(top_200[i],len(tg)",CLUSTER_5,CLUSTER_6
news_train,"sklearn.datasets.fetch_20newsgroups(
data_home='../data/20newsgroups/',
subset='train')",CLUSTER_5,CLUSTER_6
news_test,"sklearn.datasets.fetch_20newsgroups(
data_home='../data/20newsgroups/',
subset='test')",CLUSTER_5,CLUSTER_6
_20_lr,sklearn.linear_model.LogisticRegression(penalty='l2'),CLUSTER_5,CLUSTER_6
_20_lr,sklearn.linear_model.LogisticRegression(penalty='l2'),CLUSTER_5,CLUSTER_6
_20_lr,"sklearn.linear_model.LogisticRegression(penalty='l1',C=0.1,n_jobs=-1)",CLUSTER_5,CLUSTER_6
_20_lr_new,sklearn.linear_model.LogisticRegression(n_jobs=-1),CLUSTER_5,CLUSTER_6
"_20_chi2,_20_pval","sklearn.feature_selection.chi2(counts_train,news_train.target)",CLUSTER_5,CLUSTER_6
_20_mi,"sklearn.feature_selection.mutual_info_classif(counts_train,news_train.target,random_state=666)",CLUSTER_5,CLUSTER_6
new_counts[tg],"scipy.sparse.csc_matrix((data,(rows,cols)",CLUSTER_5,CLUSTER_6
new_counts_test[tg],"scipy.sparse.csc_matrix((data,(rows,cols)",CLUSTER_5,CLUSTER_6
r,"numpy.zeros((3,2)",CLUSTER_12,CLUSTER_9
trgSFUnc,numpy.zeros_like(ds['q2']),CLUSTER_12,CLUSTER_9
muonSFUnc,numpy.zeros_like(ds['q2']),CLUSTER_12,CLUSTER_9
trgSF,numpy.ones_like(ds['q2']),CLUSTER_12,CLUSTER_9
muonSF,numpy.ones_like(ds['q2']),CLUSTER_12,CLUSTER_9
weightsCentral,numpy.ones_like(ds['q2']),CLUSTER_12,CLUSTER_9
wVar[''],numpy.ones_like(weightsCentral),CLUSTER_12,CLUSTER_9
weightsCentral,numpy.ones_like(ds['q2']),CLUSTER_12,CLUSTER_9
wVar[''],numpy.ones_like(weightsCentral),CLUSTER_12,CLUSTER_9
weights,numpy.ones(hPileupGen.GetNbinsX(),CLUSTER_12,CLUSTER_9
categories,numpy.sort([kforkinhisto.keys(),CLUSTER_12,CLUSTER_9
num,"numpy.sum(r[:,0]/s2)",CLUSTER_12,CLUSTER_9
den,numpy.sum(1./s2),CLUSTER_12,CLUSTER_9
p_val,numpy.sum(s_toys>s_obs),CLUSTER_12,CLUSTER_9
sel_q2,"numpy.logical_and(ds['q2']>q2_l,ds['q2']<q2_h)",CLUSTER_12,CLUSTER_9
sel,"numpy.logical_and(ds['N_goodAddTks']==1,ds['tkCharge_0']>0)",CLUSTER_12,CLUSTER_9
sel,"numpy.logical_and(ds['tkCharge_0']*ds['tkCharge_1']<0,ds['N_goodAddTks']==2)",CLUSTER_12,CLUSTER_9
sel,"numpy.logical_and(ds['tkMassVis12']<5.3,sel)",CLUSTER_12,CLUSTER_9
sel_q2,"numpy.logical_and(ds['q2']>q2_l,ds['q2']<q2_h)",CLUSTER_12,CLUSTER_9
s2,"numpy.square(r[:,1])",CLUSTER_12,CLUSTER_9
eff[1]+,numpy.square(df/f),CLUSTER_12,CLUSTER_9
eff[1]+,numpy.square(df/f),CLUSTER_12,CLUSTER_9
x,"numpy.column_stack((ds['mu_pt'],ds['mu_eta'],ds['mu_sigdxy'])",CLUSTER_12,CLUSTER_9
x,"numpy.column_stack((ds['MC_mu_pt'],ds['MC_mu_eta'])",CLUSTER_12,CLUSTER_9
f_u,"scipy.interpolate.interp1d(nll_u,r_u,'quadratic')",CLUSTER_12,CLUSTER_9
f_l,"scipy.interpolate.interp1d(nll_l,r_l,'quadratic')",CLUSTER_12,CLUSTER_9
"content,center,_","matplotlib.pyplot.hist(s_toys,label='Toys')",CLUSTER_12,CLUSTER_9
current_batch,"numpy.append(current_batch[:,1:,:],[[current_pred]],axis=1)",CLUSTER_7,CLUSTER_5
current_batch,"numpy.append(current_batch[:,1:,:],[[current_pred]],axis=1)",CLUSTER_7,CLUSTER_5
losses,pandas.DataFrame(model.history.history),CLUSTER_7,CLUSTER_5
forecast_df,"pandas.DataFrame(data=forecast,index=forecast_index,
columns=['Forecast'])",CLUSTER_7,CLUSTER_5
forecast_index,"pandas.date_range(start='2019-11-01',periods=periods,
freq=""MS"")",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv('RSCCASN.csv',index_col='DATE',parse_dates=True)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_5
full_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_5
npr,pandas.read_csv('npr.csv'),CLUSTER_8,CLUSTER_1
LDA,"sklearn.decomposition.LatentDirichletAllocation(n_components=7,random_state=42)",CLUSTER_8,CLUSTER_1
random_word_id,"random.randint(0,54776)",CLUSTER_8,CLUSTER_1
random_word_id,"random.randint(0,54776)",CLUSTER_8,CLUSTER_1
df,pandas.read_json('wiki-start-dates.json'),CLUSTER_8,CLUSTER_3
df.date_of_birth,pandas.to_datetime(df.date_of_birth),CLUSTER_8,CLUSTER_3
df.date_of_death,"pandas.to_datetime(df.date_of_death,errors='coerce')",CLUSTER_8,CLUSTER_3
self.start,time.time(),CLUSTER_8,CLUSTER_3
mat,"numpy.arange(1,26)",CLUSTER_3,CLUSTER_6
model_bern,sklearn.naive_bayes.BernoulliNB(),CLUSTER_10,CLUSTER_4
model_bern,sklearn.naive_bayes.BernoulliNB(),CLUSTER_10,CLUSTER_4
t1,time.time(),CLUSTER_1,CLUSTER_10
t2,time.time(),CLUSTER_1,CLUSTER_10
t3,time.time(),CLUSTER_1,CLUSTER_10
gamma,"numpy.asarray([1.0,2.0,3.0])",CLUSTER_1,CLUSTER_10
beta,"numpy.asarray([11.0,12.0,13.0])",CLUSTER_1,CLUSTER_10
beta,numpy.zeros(D3),CLUSTER_1,CLUSTER_10
gamma,numpy.ones(D3),CLUSTER_1,CLUSTER_10
dmean_num,"numpy.sum(dx_num,axis=0)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
a,"numpy.maximum(0,X.dot(W1)",CLUSTER_1,CLUSTER_10
weight_scales,"numpy.logspace(-4,0,num=20)",CLUSTER_1,CLUSTER_10
hist,"numpy.zeros((N,C*bins)",CLUSTER_4,CLUSTER_0
mav,"numpy.zeros((N,C)",CLUSTER_4,CLUSTER_0
rms,"numpy.zeros((N,C)",CLUSTER_4,CLUSTER_0
std,"numpy.zeros((N,C)",CLUSTER_4,CLUSTER_0
zc,"numpy.zeros((N,C)",CLUSTER_4,CLUSTER_0
wl,"numpy.zeros((N,C)",CLUSTER_4,CLUSTER_0
ssc,"numpy.zeros((N,C)",CLUSTER_4,CLUSTER_0
accuracy,numpy.count_nonzero(correct),CLUSTER_4,CLUSTER_0
predictions,numpy.argmax(model.predict(ValidX),CLUSTER_4,CLUSTER_0
predictions,numpy.argmax(model.predict(ValidX),CLUSTER_4,CLUSTER_0
"mav[n,c]",numpy.mean(np.abs(channel),CLUSTER_4,CLUSTER_0
mean,numpy.mean(signal),CLUSTER_4,CLUSTER_0
windows,numpy.squeeze(windows),CLUSTER_4,CLUSTER_0
"std[n,c]",numpy.std(channel),CLUSTER_4,CLUSTER_0
TrainX,"numpy.stack(TrainX,axis=0)",CLUSTER_4,CLUSTER_0
ValidX,"numpy.stack(ValidX,axis=0)",CLUSTER_4,CLUSTER_0
diffs,numpy.diff(channel),CLUSTER_4,CLUSTER_0
dataset,scipy.io.loadmat(file),CLUSTER_4,CLUSTER_0
dataset,scipy.io.loadmat(file),CLUSTER_4,CLUSTER_0
now,datetime.datetime.now(),CLUSTER_4,CLUSTER_0
now,datetime.datetime.now(),CLUSTER_4,CLUSTER_0
clf,sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis(),CLUSTER_4,CLUSTER_0
theta,math.asin(n*lamda/(2*d),CLUSTER_3,CLUSTER_4
theta,math.asin(n*lamda/(2*d110),CLUSTER_3,CLUSTER_4
theta,math.asin(n*lamda/(2*d),CLUSTER_3,CLUSTER_4
encoded_labels,numpy.array([1iflabel=='positive'else0forlabelinlabels_split]),CLUSTER_6,CLUSTER_10
encoded_labels,numpy.array([encoded_labels[ii]foriiinnon_zero_idx]),CLUSTER_6,CLUSTER_10
"features[i,-len(row):]",numpy.array(row),CLUSTER_6,CLUSTER_10
features,numpy.zeros((len(reviews_ints),CLUSTER_6,CLUSTER_10
correct,numpy.squeeze(correct_tensor.numpy(),CLUSTER_6,CLUSTER_10
num_correct+,numpy.sum(correct),CLUSTER_6,CLUSTER_10
counts,collections.Counter(words),CLUSTER_6,CLUSTER_10
review_lens,collections.Counter([len(x),CLUSTER_6,CLUSTER_10
self.loc,numpy.asarray(df['loc']),CLUSTER_9,CLUSTER_2
df['elder_ratio'],numpy.asarray(df['elder']),CLUSTER_9,CLUSTER_2
df['bank_ratio'],numpy.asarray(df['totalbanks']),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(list(database.find(),CLUSTER_9,CLUSTER_2
df['aircondition'],pandas.Series(1if0inielse0foriindf.room_options),CLUSTER_9,CLUSTER_2
df['laundry'],pandas.Series(1if1inielse0foriindf.room_options),CLUSTER_9,CLUSTER_2
df['bed'],pandas.Series(1if2inielse0foriindf.room_options),CLUSTER_9,CLUSTER_2
df['desk'],pandas.Series(1if3inielse0foriindf.room_options),CLUSTER_9,CLUSTER_2
df['closet'],pandas.Series(1if4inielse0foriindf.room_options),CLUSTER_9,CLUSTER_2
df['tv'],pandas.Series(1if5inielse0foriindf.room_options),CLUSTER_9,CLUSTER_2
df['shoes'],pandas.Series(1if6inielse0foriindf.room_options),CLUSTER_9,CLUSTER_2
df['refrigerator'],pandas.Series(1if7inielse0foriindf.room_options),CLUSTER_9,CLUSTER_2
df['gas'],pandas.Series(1if8inielse0foriindf.room_options),CLUSTER_9,CLUSTER_2
df['induction'],pandas.Series(1if9inielse0foriindf.room_options),CLUSTER_9,CLUSTER_2
df['microwave'],pandas.Series(1if10inielse0foriindf.room_options),CLUSTER_9,CLUSTER_2
df['doar_lock'],pandas.Series(1if11inielse0foriindf.room_options),CLUSTER_9,CLUSTER_2
df['biddet'],pandas.Series(1if12inielse0foriindf.room_options),CLUSTER_9,CLUSTER_2
population,"pandas.read_csv('population.csv',encoding='euc-kr')",CLUSTER_9,CLUSTER_2
bank,"pandas.read_csv('bank.csv',encoding='euc-kr')",CLUSTER_9,CLUSTER_2
web,requests.get(href['url']),CLUSTER_9,CLUSTER_2
web,requests.get(url),CLUSTER_9,CLUSTER_2
res,"requests.get(naverurl,headers=headers)",CLUSTER_9,CLUSTER_2
jsonf,json.loads(jsonform),CLUSTER_9,CLUSTER_2
jsonf,json.loads(res.content),CLUSTER_9,CLUSTER_2
x,re.search('dabang.web.detail\((.*}}),CLUSTER_9,CLUSTER_2
j,"re.sub('road.+\]|\(.+','',i)",CLUSTER_9,CLUSTER_2
x,"re.findall('road.*\(?',web.content)",CLUSTER_9,CLUSTER_2
j,"re.findall('\].+\(',i)",CLUSTER_9,CLUSTER_2
addresses,"re.findall('''result_details"">((?:.|\n)",CLUSTER_9,CLUSTER_2
lst,re.findall('(.+),CLUSTER_9,CLUSTER_2
lst,re.findall('(.+),CLUSTER_9,CLUSTER_2
a,math.sin(dlat/2),CLUSTER_9,CLUSTER_2
reshaped,numpy.array(int_text[:numBatches*(batch_size*seq_length),CLUSTER_2,CLUSTER_7
batches,"numpy.zeros(shape=(numBatches,2,batch_size,seq_length)",CLUSTER_2,CLUSTER_7
tartext,"numpy.roll(reshaped,-1)",CLUSTER_2,CLUSTER_7
A,"numpy.array([[1,2,3],[4,5,6],[7,8,8]])",CLUSTER_3,CLUSTER_6
v,"numpy.array([[2],[3],[5]])",CLUSTER_3,CLUSTER_6
"EW,EV",scipy.linalg.eig(A),CLUSTER_3,CLUSTER_6
"P,L,U",scipy.linalg.lu(A),CLUSTER_3,CLUSTER_6
s,"scipy.linalg.solve(A,v)",CLUSTER_3,CLUSTER_6
A,"scipy.sparse.lil_matrix((1000,1000)",CLUSTER_3,CLUSTER_6
edge_x_kernel,"numpy.array([[-1,-2,-1],
[0,0,0],
[1,2,1]],np.float32)",CLUSTER_1,CLUSTER_10
edge_y_kernel,"numpy.array([[-1,0,1],
[-2,0,2],
[-1,0,1]],np.float32)",CLUSTER_1,CLUSTER_10
kernel_laplace,"numpy.array([[0,1,0],
[1,-4,1],
[0,1,0]],np.float32)",CLUSTER_1,CLUSTER_10
kernel_sharp,"numpy.array([[0,1,0],
[1,-3,1],
[0,1,0]],np.float32)",CLUSTER_1,CLUSTER_10
kernel_sharp2,"numpy.array([[0,-1,0],
[-1,5,-1],
[0,-1,0]],np.float32)",CLUSTER_1,CLUSTER_10
kernel3,"numpy.array([[1,1,1],
[1,-8,1],
[1,1,1]],np.float32)",CLUSTER_1,CLUSTER_10
img_sift,"cv2.drawKeypoints(img,kp,outImage=numpy.array([])",CLUSTER_1,CLUSTER_10
img_gray,"numpy.float32(cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)",CLUSTER_1,CLUSTER_10
encoded_labels,numpy.array([1iflabel=='positive'else0forlabelinlabels_split]),CLUSTER_6,CLUSTER_6
encoded_labels,numpy.array([encoded_labels[ii]foriiinnon_zero_idx]),CLUSTER_6,CLUSTER_6
"features[i,-len(row):]",numpy.array(row),CLUSTER_6,CLUSTER_6
features,numpy.zeros((len(reviews_ints),CLUSTER_6,CLUSTER_6
correct,numpy.squeeze(correct_tensor.numpy(),CLUSTER_6,CLUSTER_6
num_correct+,numpy.sum(correct),CLUSTER_6,CLUSTER_6
counts,collections.Counter(words),CLUSTER_6,CLUSTER_6
review_lens,collections.Counter([len(x),CLUSTER_6,CLUSTER_6
df['pos'],numpy.vectorize(remove_pattern),CLUSTER_0,CLUSTER_9
df,pandas.DataFrame({'pos':tweets}),CLUSTER_0,CLUSTER_9
input_txt,"re.sub(i,'',input_txt)",CLUSTER_0,CLUSTER_9
r,"re.findall(pattern,input_txt)",CLUSTER_0,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_10
dots,"numpy.array([[1,1.5],[2,1.5],[3,3.6],[4,3.2],[5,5.5]])",CLUSTER_1,CLUSTER_10
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_6,CLUSTER_11
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
inp,"numpy.clip(inp,0,1)",CLUSTER_6,CLUSTER_11
since,time.time(),CLUSTER_6,CLUSTER_11
time_elapsed,time.time(),CLUSTER_6,CLUSTER_11
k,"numpy.array([1,1,3,5,5])",CLUSTER_6,CLUSTER_11
reference_answer,"numpy.array([
[1.,0.,0.,0.,0.],
[0.5,0.,0.,0.5,0.],
[0.,0.33333333,0.66666667,0.,0.],
[0.,0.,0.,0.5,0.5]])",CLUSTER_6,CLUSTER_11
new_policy,"numpy.zeros([n_states,n_actions])",CLUSTER_6,CLUSTER_11
new_policy[ir],numpy.ones_like([row]),CLUSTER_6,CLUSTER_11
policy,"numpy.ones([500,6])",CLUSTER_6,CLUSTER_11
policy,"numpy.ones([n_states,n_actions])",CLUSTER_6,CLUSTER_11
policy,"numpy.ones([500,6])",CLUSTER_6,CLUSTER_11
mean_reward,numpy.mean(rewards_batch),CLUSTER_6,CLUSTER_11
mean_reward,numpy.mean(rewards_batch),CLUSTER_6,CLUSTER_11
reward_threshold,"numpy.percentile(rewards_batch,percentile)",CLUSTER_6,CLUSTER_11
threshold,"numpy.percentile(rewards_batch,percentile)",CLUSTER_6,CLUSTER_11
threshold,"numpy.percentile(rewards_batch,percentile)",CLUSTER_6,CLUSTER_11
agent,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(20,20)",CLUSTER_6,CLUSTER_11
cosinus,numpy.cos(x),CLUSTER_1,CLUSTER_3
sinus,numpy.sin(x),CLUSTER_1,CLUSTER_3
x,"numpy.linspace(0,10,50)",CLUSTER_1,CLUSTER_3
salary,"pandas.read_csv(""e:\salary_table.csv"")",CLUSTER_1,CLUSTER_3
salary,pandas.read_csv(url),CLUSTER_1,CLUSTER_3
df_dummy,"pandas.get_dummies(
pd.read_csv(path_profile,encoding='shift-jis',
usecols=['モニターID(11桁)",CLUSTER_10,CLUSTER_4
source,"numpy.array(list(map(lambdax:to_categorical(x,num_classes=len(human_vocab)",CLUSTER_2,CLUSTER_10
s0,"numpy.zeros((m,n_s)",CLUSTER_2,CLUSTER_10
c0,"numpy.zeros((m,n_s)",CLUSTER_2,CLUSTER_10
prediction,"numpy.argmax(prediction,axis=-1)",CLUSTER_2,CLUSTER_10
times,"numpy.linspace(0.05,0.15,5)",CLUSTER_4,CLUSTER_11
"fig,axs","matplotlib.pyplot.subplots(2,3)",CLUSTER_4,CLUSTER_11
corr_y,pandas.DataFrame(train_df),CLUSTER_7,CLUSTER_8
X_train_scaled,pandas.DataFrame(scaler.fit_transform(train_df[features_to_scale]),CLUSTER_7,CLUSTER_8
X_test_scaled,pandas.DataFrame(scaler.transform(test_df[features_to_scale]),CLUSTER_7,CLUSTER_8
new_features_train_df,pandas.DataFrame(index=train_df.index),CLUSTER_7,CLUSTER_8
new_features_test_df,pandas.DataFrame(index=test_df.index),CLUSTER_7,CLUSTER_8
new_features_train_df,pandas.DataFrame(scaler.fit_transform(new_features_train_df),CLUSTER_7,CLUSTER_8
new_features_test_df,pandas.DataFrame(scaler.transform(new_features_test_df),CLUSTER_7,CLUSTER_8
results_df,"pandas.DataFrame(columns=['model','CV_results','holdout_results'])",CLUSTER_7,CLUSTER_8
indicator,"pandas.Series(euclid_distance<=euc_dist_th,name='indicator')",CLUSTER_7,CLUSTER_8
"sns.lmplot('longitude','latitude',data","pandas.concat([train_df,indicator],axis=1)",CLUSTER_7,CLUSTER_8
train_df,"pandas.concat([train_df,ocean_proximity_dummies[:train_df.shape[0]]],axis=1)",CLUSTER_7,CLUSTER_8
test_df,"pandas.concat([test_df,ocean_proximity_dummies[train_df.shape[0]:]],axis=1)",CLUSTER_7,CLUSTER_8
X,"pandas.concat([train_df[dummies_names],X_train_scaled[numerical_features]],axis=1,ignore_index=True)",CLUSTER_7,CLUSTER_8
X,"pandas.concat([train_df[dummies_names+['total_bedrooms_is_nan']],
X_train_scaled[numerical_features]],axis=1,ignore_index=True)",CLUSTER_7,CLUSTER_8
X,"pandas.concat([train_df[dummies_names+['age_clipped']],
X_train_scaled[numerical_features]],axis=1,ignore_index=True)",CLUSTER_7,CLUSTER_8
X,"pandas.concat([train_df[dummies_names+['age_clipped']],X_train_scaled[numerical_features+log_numerical_features]],
axis=1,ignore_index=True)",CLUSTER_7,CLUSTER_8
X,"pandas.concat([train_df[dummies_names+['age_clipped']],X_train_scaled],
axis=1,ignore_index=True)",CLUSTER_7,CLUSTER_8
X,"pandas.concat([train_df[dummies_names+['age_clipped']],X_train_scaled],
axis=1,ignore_index=True)",CLUSTER_7,CLUSTER_8
X,"pandas.concat([train_df[dummies_names+['age_clipped']],X_train_scaled,
new_features_train_df[new_features_list]
],
axis=1,ignore_index=True)",CLUSTER_7,CLUSTER_8
X,"pandas.concat([train_df[dummies_names+['age_clipped']],X_train_scaled,
new_features_train_df[new_features_list]
],
axis=1)",CLUSTER_7,CLUSTER_8
X_ho,"pandas.concat([test_df[dummies_names+['age_clipped']],X_test_scaled,
new_features_test_df[new_features_list]],axis=1)",CLUSTER_7,CLUSTER_8
ocean_proximity_dummies,"pandas.get_dummies(pd.concat([train_df['ocean_proximity'],test_df['ocean_proximity']])",CLUSTER_7,CLUSTER_8
train_df['total_bedrooms_is_nan'],pandas.isnull(train_df),CLUSTER_7,CLUSTER_8
test_df['total_bedrooms_is_nan'],pandas.isnull(test_df),CLUSTER_7,CLUSTER_8
full_df,"pandas.read_csv(os.path.join(PATH_TO_DATA,'housing.csv.zip')",CLUSTER_7,CLUSTER_8
X_temp,numpy.array(X),CLUSTER_7,CLUSTER_8
y_temp,numpy.array(y),CLUSTER_7,CLUSTER_8
prediction,numpy.expm1(prediction),CLUSTER_7,CLUSTER_8
target_log,numpy.log1p(train_df['median_house_value']),CLUSTER_7,CLUSTER_8
train_df['median_house_value_log'],numpy.log1p(train_df['median_house_value']),CLUSTER_7,CLUSTER_8
test_df['median_house_value_log'],numpy.log1p(test_df['median_house_value']),CLUSTER_7,CLUSTER_8
train_df[f+'_log'],numpy.log1p(train_df[f]),CLUSTER_7,CLUSTER_8
test_df[f+'_log'],numpy.log1p(test_df[f]),CLUSTER_7,CLUSTER_8
train_df['total_bedrooms_log'],numpy.log1p(train_df['total_bedrooms']),CLUSTER_7,CLUSTER_8
test_df['total_bedrooms_log'],numpy.log1p(test_df['total_bedrooms']),CLUSTER_7,CLUSTER_8
new_features_train_df['log_distance_to_SF'],numpy.log1p(train_df['distance_to_SF']),CLUSTER_7,CLUSTER_8
new_features_train_df['log_distance_to_LA'],numpy.log1p(train_df['distance_to_LA']),CLUSTER_7,CLUSTER_8
new_features_test_df['log_distance_to_SF'],numpy.log1p(test_df['distance_to_SF']),CLUSTER_7,CLUSTER_8
new_features_test_df['log_distance_to_LA'],numpy.log1p(test_df['distance_to_LA']),CLUSTER_7,CLUSTER_8
y_temp,numpy.log1p(y),CLUSTER_7,CLUSTER_8
train_df['distance_to_SF'],numpy.sqrt((train_df['longitude']-sf_coord[0]),CLUSTER_7,CLUSTER_8
test_df['distance_to_SF'],numpy.sqrt((test_df['longitude']-sf_coord[0]),CLUSTER_7,CLUSTER_8
train_df['distance_to_LA'],numpy.sqrt((train_df['longitude']-la_coord[0]),CLUSTER_7,CLUSTER_8
test_df['distance_to_LA'],numpy.sqrt((test_df['longitude']-la_coord[0]),CLUSTER_7,CLUSTER_8
best_score,numpy.sqrt(-cv_scores.mean(),CLUSTER_7,CLUSTER_8
score,numpy.sqrt(-cv_scores.mean(),CLUSTER_7,CLUSTER_8
plt.fill_between(x,"Cs,y1=numpy.sqrt(-train_scores.max(axis=1)",CLUSTER_7,CLUSTER_8
y2,numpy.sqrt(-train_scores.min(axis=1),CLUSTER_7,CLUSTER_8
plt.fill_between(x,"Cs,y1=numpy.sqrt(-valid_scores.max(axis=1)",CLUSTER_7,CLUSTER_8
y2,numpy.sqrt(-valid_scores.min(axis=1),CLUSTER_7,CLUSTER_8
plt.fill_between(x,"train_sizes,y1=numpy.sqrt(-train_scores.max(axis=1)",CLUSTER_7,CLUSTER_8
y2,numpy.sqrt(-train_scores.min(axis=1),CLUSTER_7,CLUSTER_8
plt.fill_between(x,"train_sizes,y1=numpy.sqrt(-valid_scores.max(axis=1)",CLUSTER_7,CLUSTER_8
y2,numpy.sqrt(-valid_scores.min(axis=1),CLUSTER_7,CLUSTER_8
plt.fill_between(x,"Cs,y1=numpy.sqrt(-train_scores.max(axis=1)",CLUSTER_7,CLUSTER_8
y2,numpy.sqrt(-train_scores.min(axis=1),CLUSTER_7,CLUSTER_8
plt.fill_between(x,"Cs,y1=numpy.sqrt(-valid_scores.max(axis=1)",CLUSTER_7,CLUSTER_8
y2,numpy.sqrt(-valid_scores.min(axis=1),CLUSTER_7,CLUSTER_8
score_cv,numpy.sqrt(-np.mean(cv_scores.mean(),CLUSTER_7,CLUSTER_8
score_ho,"numpy.sqrt(mean_squared_error(y_ho,prediction_ho)",CLUSTER_7,CLUSTER_8
score_cv,numpy.sqrt(-np.mean(cv_scores.mean(),CLUSTER_7,CLUSTER_8
score_ho,"numpy.sqrt(mean_squared_error(y_ho,prediction_ho)",CLUSTER_7,CLUSTER_8
score_cv,numpy.sqrt(-np.mean(cv_scores.mean(),CLUSTER_7,CLUSTER_8
score_ho,"numpy.sqrt(mean_squared_error(y_ho,prediction_ho)",CLUSTER_7,CLUSTER_8
Cs,"numpy.logspace(-5,4,10)",CLUSTER_7,CLUSTER_8
"train_df,test_df","sklearn.model_selection.train_test_split(full_df,shuffle=True,test_size=0.25,random_state=17)",CLUSTER_7,CLUSTER_8
"temp_train,temp_valid","sklearn.model_selection.train_test_split(train_data,shuffle=True,test_size=0.25,random_state=17)",CLUSTER_7,CLUSTER_8
"stat,p",scipy.stats.normaltest(train_df['median_house_value']),CLUSTER_7,CLUSTER_8
"stat,p",scipy.stats.normaltest(target_log),CLUSTER_7,CLUSTER_8
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
lin,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
kf,"sklearn.model_selection.KFold(n_splits=10,random_state=17,shuffle=True)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model_rf,X_trees,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model_rf,X_trees,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model_gb,X_trees,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=1)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model_rf,X_trees,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_7,CLUSTER_8
cv_scores,"sklearn.model_selection.cross_val_score(model_gb,X_trees,y,cv=kf,scoring='neg_mean_squared_error',n_jobs=-1)",CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.Ridge(alpha=1),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.Ridge(alpha=1.0),CLUSTER_7,CLUSTER_8
model,sklearn.linear_model.Ridge(alpha=1.0),CLUSTER_7,CLUSTER_8
"train_scores,valid_scores","sklearn.model_selection.validation_curve(model,X,y,""alpha"",
Cs,cv=kf,scoring='neg_mean_squared_error')",CLUSTER_7,CLUSTER_8
"train_scores,valid_scores","sklearn.model_selection.validation_curve(model_rf,X_trees,y,""n_estimators"",
Cs,cv=kf,scoring='neg_mean_squared_error')",CLUSTER_7,CLUSTER_8
"train_sizes,train_scores,valid_scores","sklearn.model_selection.learning_curve(model,X,y,train_sizes=list(range(50,10001,100)",CLUSTER_7,CLUSTER_8
model_rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,random_state=17)",CLUSTER_7,CLUSTER_8
model_rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,max_depth=best_depth,max_features=best_features,random_state=17)",CLUSTER_7,CLUSTER_8
model_rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=200,max_depth=best_depth,max_features=best_features,random_state=17)",CLUSTER_7,CLUSTER_8
model_rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=200,max_depth=23,max_features=5,random_state=17)",CLUSTER_7,CLUSTER_8
gs,"sklearn.model_selection.GridSearchCV(model_rf,param_grid,scoring='neg_mean_squared_error',fit_params=None,n_jobs=-1,cv=kf,verbose=1)",CLUSTER_7,CLUSTER_8
gs,"sklearn.model_selection.RandomizedSearchCV(model_gb,param_grid,n_iter=50,scoring='neg_mean_squared_error',fit_params=None,
n_jobs=-1,cv=kf,verbose=1,random_state=17)",CLUSTER_7,CLUSTER_8
gs,"sklearn.model_selection.RandomizedSearchCV(model_gb,param_grid,n_iter=20,scoring='neg_mean_squared_error',fit_params=None,
n_jobs=-1,cv=kf,verbose=1,random_state=17)",CLUSTER_7,CLUSTER_8
sui_diagnosis,"pandas.read_csv(""sui_diagnosis.csv"",header=0)",CLUSTER_8,CLUSTER_4
diagnosis,"pandas.read_csv(""/home/cs52205/diagnosis.csv.gz"",compression=""gzip"",header=0)",CLUSTER_8,CLUSTER_4
sui_admissionDx,"pandas.read_csv(""sui_admissionDx.csv"")",CLUSTER_8,CLUSTER_4
removeQuotesText,"re.sub(p,"""",line)",CLUSTER_10,CLUSTER_4
p,"re.compile(""todo"",re.IGNORECASE)",CLUSTER_10,CLUSTER_4
p,"re.compile(""todo"",re.IGNORECASE)",CLUSTER_10,CLUSTER_4
p,"re.compile(""todo"",re.IGNORECASE)",CLUSTER_10,CLUSTER_4
p,"re.compile(""todo"",re.IGNORECASE)",CLUSTER_10,CLUSTER_4
p,"re.compile(""todo"",re.IGNORECASE)",CLUSTER_10,CLUSTER_4
p,"re.compile(""todo"",re.IGNORECASE)",CLUSTER_10,CLUSTER_4
p,"re.compile(""todo"",re.IGNORECASE)",CLUSTER_10,CLUSTER_4
p,"re.compile(""todo"",re.IGNORECASE)",CLUSTER_10,CLUSTER_4
p,"re.compile(""todo"",re.IGNORECASE)",CLUSTER_10,CLUSTER_4
fig1,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_7
fig1,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_7
df,"pandas.DataFrame(data=sahm_real.values,index=sahm_real.index,columns=['sahm_real'])",CLUSTER_1,CLUSTER_3
data,pandas.DataFrame(data=globals(),CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_1,CLUSTER_3
response,requests.get(url),CLUSTER_0,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(25,3)",CLUSTER_0,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_0,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(25,5)",CLUSTER_0,CLUSTER_8
ax,matplotlib.pyplot.subplot(gs[0]),CLUSTER_0,CLUSTER_8
ax,matplotlib.pyplot.subplot(gs[1]),CLUSTER_0,CLUSTER_8
ax,matplotlib.pyplot.subplot(gs[0]),CLUSTER_0,CLUSTER_8
ax,matplotlib.pyplot.subplot(gs[1]),CLUSTER_0,CLUSTER_8
ax1,"matplotlib.pyplot.subplot(gs[:,:-5])",CLUSTER_0,CLUSTER_8
ax2,"matplotlib.pyplot.subplot(gs[:,10:16])",CLUSTER_0,CLUSTER_8
ax,"sns.heatmap(numpy.array([values]),annot=numpy.array([labels])",CLUSTER_0,CLUSTER_8
w2v_title,numpy.array(w2v_title),CLUSTER_0,CLUSTER_8
featureVec,"numpy.zeros((num_features,)",CLUSTER_0,CLUSTER_8
indices,numpy.argsort(pairwise_dist.flatten(),CLUSTER_0,CLUSTER_8
pdists,numpy.sort(pairwise_dist.flatten(),CLUSTER_0,CLUSTER_8
featureVec,"numpy.add(featureVec,idf_title_features[doc_id,idf_title_vectorizer.vocabulary_[word]]*model[word])",CLUSTER_0,CLUSTER_8
featureVec,"numpy.add(featureVec,model[word])",CLUSTER_0,CLUSTER_8
featureVec,"numpy.divide(featureVec,nwords)",CLUSTER_0,CLUSTER_8
bottleneck_features_train,numpy.load('16k_data_cnn_features.npy'),CLUSTER_0,CLUSTER_8
asins,numpy.load('16k_data_cnn_feature_asins.npy'),CLUSTER_0,CLUSTER_8
data,pandas.read_json('tops_fashion.json'),CLUSTER_0,CLUSTER_8
data,pandas.read_pickle('pickels/28k_apparel_data'),CLUSTER_0,CLUSTER_8
data,pandas.read_pickle('pickels/28k_apparel_data'),CLUSTER_0,CLUSTER_8
data,pandas.read_pickle('pickels/17k_apperal_data'),CLUSTER_0,CLUSTER_8
data,pandas.read_pickle('pickels/16k_apperal_data'),CLUSTER_0,CLUSTER_8
data,pandas.read_pickle('pickels/16k_apperal_data_preprocessed'),CLUSTER_0,CLUSTER_8
data,pandas.read_pickle('pickels/16k_apperal_data_preprocessed'),CLUSTER_0,CLUSTER_8
word,re.compile(r'\w+'),CLUSTER_0,CLUSTER_8
ax,seaborn.heatmap(np.array([values]),CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(np.round(s1_s2_dist,4)",CLUSTER_0,CLUSTER_8
ax1,"seaborn.heatmap(np.round(s1_s2_dist,6)",CLUSTER_0,CLUSTER_8
product_type_count,collections.Counter(list(data['product_type_name']),CLUSTER_0,CLUSTER_8
brand_count,collections.Counter(list(data['brand']),CLUSTER_0,CLUSTER_8
color_count,collections.Counter(list(data['color']),CLUSTER_0,CLUSTER_8
price_count,collections.Counter(list(data['formatted_price']),CLUSTER_0,CLUSTER_8
idf_w2v_dist,"sklearn.metrics.pairwise_distances(w2v_title_weight,w2v_title_weight[doc_id].reshape(1,-1)",CLUSTER_0,CLUSTER_8
ex_feat_dist,"sklearn.metrics.pairwise_distances(extra_features,extra_features[doc_id])",CLUSTER_0,CLUSTER_8
im_feat_dist,"sklearn.metrics.pairwise_distances(bottleneck_features_train,bottleneck_features_train[doc_id].reshape(1,-1)",CLUSTER_0,CLUSTER_8
extra_features,"scipy.sparse.hstack((brand_features,type_features,color_features)",CLUSTER_0,CLUSTER_8
writer,"pandas.ExcelWriter(path,engine='xlsxwriter')",CLUSTER_9,CLUSTER_2
accounts_all_df,"pandas.concat([accounts_pkr_df,accounts_chf_df,accounts_she_df,accounts_bir_df,accounts_fos_df,\
accounts_gla_df,accounts_run_df,accounts_yor_df,accounts_swa_df])",CLUSTER_9,CLUSTER_2
accounts_pkr_df,"pandas.read_excel('../PKR/insights/endWP5_territory_insights.xlsx',sheet_name=target_sheet)",CLUSTER_9,CLUSTER_2
accounts_chf_df,"pandas.read_excel('../CHF/insights/endWP5_territory_insights.xlsx',sheet_name=target_sheet)",CLUSTER_9,CLUSTER_2
accounts_she_df,"pandas.read_excel('../SHE/insights/endWP5_territory_insights.xlsx',sheet_name=target_sheet)",CLUSTER_9,CLUSTER_2
accounts_bir_df,"pandas.read_excel('../BIR/insights/endWP5_territory_insights.xlsx',sheet_name=target_sheet)",CLUSTER_9,CLUSTER_2
accounts_fos_df,"pandas.read_excel('../FOS/insights/endWP5_territory_insights.xlsx',sheet_name=target_sheet)",CLUSTER_9,CLUSTER_2
accounts_gla_df,"pandas.read_excel('../GLA/insights/endWP5_territory_insights.xlsx',sheet_name=target_sheet)",CLUSTER_9,CLUSTER_2
accounts_run_df,"pandas.read_excel('../RUN/insights/endWP5_territory_insights.xlsx',sheet_name=target_sheet)",CLUSTER_9,CLUSTER_2
accounts_yor_df,"pandas.read_excel('../YOR/insights/endWP5_territory_insights.xlsx',sheet_name=target_sheet)",CLUSTER_9,CLUSTER_2
accounts_swa_df,"pandas.read_excel('../SWA/insights/endWP5_territory_insights.xlsx',sheet_name=target_sheet)",CLUSTER_9,CLUSTER_2
A,"numpy.array([
[1,1,1,1,0,0],
[1,4,8,0,1,0],
[40,30,20,0,0,0],
[3,2,4,0,0,1]])",CLUSTER_3,CLUSTER_6
b,"numpy.array([999,4500,36000,2700])",CLUSTER_3,CLUSTER_6
c,"numpy.array([70,80,85,0,0,0])",CLUSTER_3,CLUSTER_6
res,"scipy.optimize.linprog(c,A_eq=A,b_eq=b,bounds=list(zip(LB,UB)",CLUSTER_3,CLUSTER_6
data,pandas.read_csv('pima-data.csv'),CLUSTER_7,CLUSTER_5
g,seaborn.heatmap(data[top_corr_features].corr(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=10)",CLUSTER_7,CLUSTER_5
imputer,"sklearn.impute.SimpleImputer(missing_values=0,strategy='mean')",CLUSTER_7,CLUSTER_5
random_forest_classifier,sklearn.ensemble.RandomForestClassifier(random_state=10),CLUSTER_7,CLUSTER_5
random_search,"sklearn.model_selection.RandomizedSearchCV(classifier,param_distributions=params,cv=10,verbose=3,scoring='roc_auc')",CLUSTER_7,CLUSTER_5
start_time,datetime.datetime.now(),CLUSTER_7,CLUSTER_5
score,"sklearn.model_selection.cross_val_score(classifier,X,y.ravel()",CLUSTER_7,CLUSTER_5
dayofweek,pandas.DatetimeIndex(pivoted.columns),CLUSTER_5,CLUSTER_5
dates,pandas.DatetimeIndex(pivoted.columns),CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(14,6)",CLUSTER_5,CLUSTER_5
X2,"sklearn.decomposition.PCA(2,svd_solver='full')",CLUSTER_5,CLUSTER_5
X2_auto,sklearn.decomposition.PCA(2),CLUSTER_5,CLUSTER_5
gmm,sklearn.mixture.GaussianMixture(2),CLUSTER_5,CLUSTER_5
prices,"pandas.DataFrame({""price"":train[""SalePrice""],""log(price+1)",CLUSTER_7,CLUSTER_8
submission,"pandas.DataFrame(np.concatenate((i_d,price)",CLUSTER_7,CLUSTER_8
all_data,"pandas.concat((train.loc[:,'MSSubClass':'SaleCondition'],
test.loc[:,'MSSubClass':'SaleCondition'])",CLUSTER_7,CLUSTER_8
all_data,pandas.get_dummies(all_data),CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(""Data/train.csv"")",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(""Data/test.csv"")",CLUSTER_7,CLUSTER_8
i_d,numpy.array([test.Id]),CLUSTER_7,CLUSTER_8
price,numpy.expm1(prediction),CLUSTER_7,CLUSTER_8
"train[""SalePrice""]","numpy.log1p(train[""SalePrice""])",CLUSTER_7,CLUSTER_8
all_data[skewed_feats],numpy.log1p(all_data[skewed_feats]),CLUSTER_7,CLUSTER_8
rmse,"numpy.sqrt(-cross_val_score(model,X_train,y,scoring=""neg_mean_squared_error"",cv=5)",CLUSTER_7,CLUSTER_8
reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
df,"pandas.read_excel('CallList-2020-05-19.xlsx',sheet_name=1)",CLUSTER_8,CLUSTER_4
date_df,pandas.to_datetime(df['StartTime']),CLUSTER_8,CLUSTER_4
states,"pandas.DataFrame({""STATE"":counts.index,""shootings"":counts})",CLUSTER_8,CLUSTER_3
police_killings,"pandas.read_csv(""police_killings.csv"",encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
state_pop,"pandas.read_csv(""state_population.csv"")",CLUSTER_8,CLUSTER_3
"unique,count","numpy.unique(y_train,return_counts=True)",CLUSTER_7,CLUSTER_5
"unique,count","numpy.unique(y_test,return_counts=True)",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('creditcard.csv'),CLUSTER_7,CLUSTER_5
std_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
rob_scaler,sklearn.preprocessing.RobustScaler(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=42)",CLUSTER_7,CLUSTER_5
logmodel,sklearn.linear_model.LogisticRegression(max_iter=1000),CLUSTER_7,CLUSTER_5
global_temp,pandas.read_csv('datasets/global_temperature.csv'),CLUSTER_1,CLUSTER_3
global_results,numpy.array(global_results),CLUSTER_4,CLUSTER_0
occurrences_of_each_class,collections.Counter(clus_classes),CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(""../../../predizioni_bb.txt"","""")",CLUSTER_4,CLUSTER_0
xl,pandas.ExcelFile('zillow_data_dictionary.xlsx'),CLUSTER_7,CLUSTER_3
df,"pandas.merge(train_2016,properties_2016,on='parcelid',how='left')",CLUSTER_7,CLUSTER_3
train_2016,"pandas.read_csv('train_2016.csv',parse_dates=['transactiondate'])",CLUSTER_7,CLUSTER_3
properties_2016,"pandas.read_csv('properties_2016.csv',dtype={'hashottuborspa':np.bool_,
'propertycountylandusecode':'str',
'propertyzoningdesc':'str',
'fireplaceflag':np.bool_,
'taxdelinquencyflag':'str'})",CLUSTER_7,CLUSTER_3
properties_2016[column_name],"numpy.where(properties_2016[column_name]<column_min,column_mean,properties_2016[column_name])",CLUSTER_7,CLUSTER_3
properties_2016[column_name],"numpy.where(properties_2016[column_name]>column_max,column_mean,properties_2016[column_name])",CLUSTER_7,CLUSTER_3
df.logerror,"numpy.where(df.logerror<logerror_min,logerror_mean,df.logerror)",CLUSTER_7,CLUSTER_3
df.logerror,"numpy.where(df.logerror>logerror_max,logerror_mean,df.logerror)",CLUSTER_7,CLUSTER_3
column_mean,numpy.mean(properties_2016[column_name]),CLUSTER_7,CLUSTER_3
"(column_min,column_max)","numpy.percentile(properties_2016[column_name],[1,99])",CLUSTER_7,CLUSTER_3
"(logerror_min,logerror_max),logerror_mean","numpy.percentile(df.logerror,[1,99])",CLUSTER_7,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=3,figsize=(20,4)",CLUSTER_7,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(20,6)",CLUSTER_7,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(20,6)",CLUSTER_7,CLUSTER_3
rmse,numpy.sqrt(mse),CLUSTER_5,CLUSTER_1
in_sample_rmse,numpy.sqrt(in_sample_mse),CLUSTER_5,CLUSTER_1
cad_jpy_df,"pandas.read_csv(
Path(""cad_jpy.csv"")",CLUSTER_5,CLUSTER_1
model,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
mse,"sklearn.metrics.mean_squared_error(
Results[""Return""],
Results[""PredictedReturn""]
)",CLUSTER_5,CLUSTER_1
in_sample_mse,"sklearn.metrics.mean_squared_error(
in_sample_results[""Return""],
in_sample_results[""In-samplePredictions""]
)",CLUSTER_5,CLUSTER_1
odd_nums,"numpy.array([1,3,5,7,9,11,13])",CLUSTER_2,CLUSTER_10
X,numpy.asarray(X),CLUSTER_2,CLUSTER_10
y,numpy.asarray(y),CLUSTER_2,CLUSTER_10
X_train,"numpy.asarray(np.reshape(X_train,(X_train.shape[0],window_size,1)",CLUSTER_2,CLUSTER_10
X_test,"numpy.asarray(np.reshape(X_test,(X_test.shape[0],window_size,1)",CLUSTER_2,CLUSTER_10
X,numpy.zeros((len(inputs),CLUSTER_2,CLUSTER_10
y,numpy.zeros((len(inputs),CLUSTER_2,CLUSTER_10
x_test,"numpy.zeros((1,window_size,len(chars)",CLUSTER_2,CLUSTER_10
r,numpy.argmax(test_predict),CLUSTER_2,CLUSTER_10
dataset,numpy.loadtxt('datasets/normalized_apple_prices.csv'),CLUSTER_2,CLUSTER_10
df,"pandas.read_excel(file_path,""Countries_Constant"",encoding='utf-16')",CLUSTER_8,CLUSTER_4
X_train,numpy.array(X[:num_training]),CLUSTER_3,CLUSTER_6
y_train,numpy.array(y[:num_training]),CLUSTER_3,CLUSTER_6
X_test,numpy.array(X[num_training:]),CLUSTER_3,CLUSTER_6
y_test,numpy.array(y[num_training:]),CLUSTER_3,CLUSTER_6
linear_regressor,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_6
poly_linear_model,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_6
ridge_regressor,"sklearn.linear_model.Ridge(alpha=0.01,fit_intercept=True,max_iter=10000)",CLUSTER_3,CLUSTER_6
polynomial,sklearn.preprocessing.PolynomialFeatures(degree=100),CLUSTER_3,CLUSTER_6
bins,"numpy.arange(0,50,1)",CLUSTER_4,CLUSTER_11
bins,"numpy.arange(0,50,1)",CLUSTER_4,CLUSTER_11
test_xvals,"numpy.arange(0,np.size(test_prob)",CLUSTER_4,CLUSTER_11
n_obs_arr,"numpy.arange(0,40,1)",CLUSTER_4,CLUSTER_11
exp_vals,"numpy.arange(0.0,80,0.1)",CLUSTER_4,CLUSTER_11
test_prob,"numpy.array([0.0,0.1,0.2,0.5,0.9,1.2,0.9,0.5,0.2,0.1,0.0])",CLUSTER_4,CLUSTER_11
prob_cv,numpy.array([]),CLUSTER_4,CLUSTER_11
prob_1sigma_low,numpy.array([]),CLUSTER_4,CLUSTER_11
prob_1sigma_high,numpy.array([]),CLUSTER_4,CLUSTER_11
prob_2sigma_low,numpy.array([]),CLUSTER_4,CLUSTER_11
prob_2sigma_high,numpy.array([]),CLUSTER_4,CLUSTER_11
prob_vals,numpy.array([]),CLUSTER_4,CLUSTER_11
i_max,numpy.argmax(prob_vals),CLUSTER_4,CLUSTER_11
prob_val_size,numpy.size(prob_vals),CLUSTER_4,CLUSTER_11
total_integral,numpy.sum(prob_vals),CLUSTER_4,CLUSTER_11
prob_vals,"numpy.append(prob_vals,[np.size(np.where(n_obs_pes==n_obs)",CLUSTER_4,CLUSTER_11
prob_cv,"numpy.append(prob_cv,[exp_vals[np.argmax(prob_curves[-1])",CLUSTER_4,CLUSTER_11
prob_1sigma_low,"numpy.append(prob_1sigma_low,[exp_vals[cinterval_1sigma[0]]])",CLUSTER_4,CLUSTER_11
prob_1sigma_high,"numpy.append(prob_1sigma_high,[exp_vals[cinterval_1sigma[1]]])",CLUSTER_4,CLUSTER_11
prob_2sigma_low,"numpy.append(prob_2sigma_low,[exp_vals[cinterval_2sigma[0]]])",CLUSTER_4,CLUSTER_11
prob_2sigma_high,"numpy.append(prob_2sigma_high,[exp_vals[cinterval_2sigma[1]]])",CLUSTER_4,CLUSTER_11
"fig,(ax,lax)","matplotlib.pyplot.subplots(1,2,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
digits,sklearn.datasets.load_digits(n_class=3),CLUSTER_5,CLUSTER_10
y,"numpy.choose(y,[1,2,0])",CLUSTER_5,CLUSTER_10
fig,"matplotlib.pyplot.figure(1,figsize=(4,3)",CLUSTER_5,CLUSTER_10
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_5,CLUSTER_10
df_cluster,"pandas.DataFrame({'labels':all_labels,'songs':Songs,'artists':Artists})",CLUSTER_7,CLUSTER_8
df_feature,pandas.DataFrame(feature),CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('billboard_hits_with_features.csv',index_col=0)",CLUSTER_7,CLUSTER_8
epsilons,numpy.arange(min(probs),CLUSTER_7,CLUSTER_8
outliers,numpy.asarray(np.where(p<ep),CLUSTER_7,CLUSTER_8
all_labels,"numpy.concatenate((labels_p,new_labels_p)",CLUSTER_7,CLUSTER_8
df_means,numpy.mean(df_train[features]),CLUSTER_7,CLUSTER_8
mu,"numpy.mean(dataset,axis=0)",CLUSTER_7,CLUSTER_8
mu,"numpy.mean(dataset,axis=0)",CLUSTER_7,CLUSTER_8
df_std,numpy.std(df_train[features]),CLUSTER_7,CLUSTER_8
sigma,"numpy.std(dataset,axis=0)",CLUSTER_7,CLUSTER_8
sigma,numpy.cov(dataset.T),CLUSTER_7,CLUSTER_8
clf,"sklearn.ensemble.RandomForestClassifier(n_jobs=2,random_state=0,n_estimators=1001,class_weight='balanced')",CLUSTER_7,CLUSTER_8
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
model,"sklearn.model_selection.GridSearchCV(clf,params,scoring='average_precision',n_jobs=-1)",CLUSTER_7,CLUSTER_8
p,"scipy.stats.multivariate_normal(mean=mu,cov=sigma)",CLUSTER_7,CLUSTER_8
f,"sklearn.metrics.f1_score(gt,predictions,average=""binary"")",CLUSTER_7,CLUSTER_8
model,sklearn.cluster.KMeans(n_clusters=20),CLUSTER_7,CLUSTER_8
kmeans,sklearn.cluster.KMeans(n_clusters=20),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
pipeline,"sklearn.pipeline.make_pipeline(scaler,kmeans)",CLUSTER_7,CLUSTER_8
output_df,"pandas.DataFrame({""UniqueNumberofPlayers"":[unique_players]})",CLUSTER_8,CLUSTER_11
total_analysis_df,"pandas.DataFrame({""No.ofUniqueItems"":[uniqueitems],
""AveragePurchasePrice"":[avgprice],
""No.ofPurchases"":[totalpurchases],""TotalRevenue"":[totalrevenue]},
columns=[""No.ofUniqueItems"",""AveragePurchasePrice"",
""No.ofPurchases"",""TotalRevenue""])",CLUSTER_8,CLUSTER_11
gender_demo_df,"pandas.DataFrame({""Gender"":[""Male"",""Female"",""Other/Non-Disclosed""],
""TotalCount"":[malecount,femalecount,othercount],""PercentageofPlayers"":
[maleperc,femaleperc,otherperc],},columns=
[""Gender"",""TotalCount"",""PercentageofPlayers""])",CLUSTER_8,CLUSTER_11
gender_purchase_df,"pandas.DataFrame(
{""Gender"":[""Male"",""Female"",""Other/Non-Disclosed""],
""PurchaseCountbyGender"":[malepurchases,femalepurchases,otherpurchases],
""AveragePurchasePrice"":[malepriceavg,femalepriceavg,otherpriceavg],
""TotalPurchaseValue"":[malepricetotal,femalepricetotal,otherpricetotal],
""AveragePurchaseTotalperPersonbyGender"":[avgtotalmale,avgtotalfemale,avgtotalother]},
columns=[""Gender"",""PurchaseCountbyGender"",""AveragePurchasePrice"",""TotalPurchaseValue"",
""AveragePurchaseTotalperPersonbyGender""])",CLUSTER_8,CLUSTER_11
age_demo_df,"pandas.DataFrame({""Age"":[""<10"",""10-14"",""15-19"",""20-24"",""25-29"",""30-34"",""35-39"",""40-44"",""45-49""],
""TotalCount"":[tenyears[""SN""].nunique()",CLUSTER_8,CLUSTER_11
age_purchasing_df,"pandas.DataFrame({""Age"":[""<10"",""10-14"",""15-19"",""20-24"",""25-29"",""30-34"",""35-39"",""40-44"",""45-49""],
""PurchaseCount"":[tenyears[""Price""].count()",CLUSTER_8,CLUSTER_11
most_popular_items,"pandas.DataFrame({""PurchaseCount"":purchase_count_item,
""ItemPrice"":item_price,
""TotalPurchaseValue"":purchase_value})",CLUSTER_8,CLUSTER_11
purchase_datadf,pandas.read_csv(purchase_data),CLUSTER_8,CLUSTER_11
housing,sklearn.datasets.fetch_california_housing(),CLUSTER_5,CLUSTER_5
"x_train_all,x_test_raw,y_train_all,y_test","sklearn.model_selection.train_test_split(
housing.data,housing.target,random_state=7)",CLUSTER_5,CLUSTER_5
"x_train_raw,x_valid_raw,y_train,y_valid","sklearn.model_selection.train_test_split(
x_train_all,y_train_all,random_state=11)",CLUSTER_5,CLUSTER_5
sca,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
index,numpy.argmax(errors),CLUSTER_5,CLUSTER_5
"x_1,x_2","numpy.meshgrid(np.arange(0.0,5.0,0.01)",CLUSTER_5,CLUSTER_5
"x_1,x_2","numpy.meshgrid(np.arange(0.0,5.0,0.01)",CLUSTER_5,CLUSTER_5
"x_1,x_2","numpy.meshgrid(np.arange(0.0,1.0,0.003)",CLUSTER_5,CLUSTER_5
"x_1,x_2","numpy.meshgrid(np.arange(-0.6,0.4,0.004)",CLUSTER_5,CLUSTER_5
df_data1,pandas.read_csv(data1),CLUSTER_5,CLUSTER_5
df_data2,pandas.read_csv(data2),CLUSTER_5,CLUSTER_5
df_data3,pandas.read_csv(data3),CLUSTER_5,CLUSTER_5
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_5
clf,"sklearn.svm.SVC(kernel='linear',C=1.0,decision_function_shape='ovr')",CLUSTER_5,CLUSTER_5
clf100,"sklearn.svm.SVC(kernel='linear',C=100.0,decision_function_shape='ovr')",CLUSTER_5,CLUSTER_5
clfg,"sklearn.svm.SVC(kernel='rbf',gamma=gamma,C=1.0,decision_function_shape='ovr')",CLUSTER_5,CLUSTER_5
clf,"sklearn.svm.SVC(kernel='rbf',gamma=1/(2*(each**2)",CLUSTER_5,CLUSTER_5
optimal_clf,"sklearn.svm.SVC(kernel='rbf',gamma=gamma,C=1.0,decision_function_shape='ovr')",CLUSTER_5,CLUSTER_5
ad,"pandas.read_csv(r""C:\Users\masoo\Downloads\datasets_7068_10152_advertising.csv"")",CLUSTER_7,CLUSTER_5
logmodel,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_5
df,"pandas.DataFrame(index=user_id,columns=id)",CLUSTER_10,CLUSTER_4
ave_df,"pandas.DataFrame([ave_rate],columns=ave_rate.keys()",CLUSTER_10,CLUSTER_4
x,"numpy.arange(0,20,1)",CLUSTER_1,CLUSTER_10
predict,"numpy.dot(A,pest)",CLUSTER_1,CLUSTER_10
predict0,"numpy.dot(A,pest0)",CLUSTER_1,CLUSTER_10
ATR,"numpy.dot(A.T,R)",CLUSTER_1,CLUSTER_10
predict,"numpy.dot(A,pest)",CLUSTER_1,CLUSTER_10
phi0,numpy.sum(np.abs(r),CLUSTER_1,CLUSTER_10
phi,numpy.sum(np.abs(r),CLUSTER_1,CLUSTER_10
A,"numpy.vstack((x**0,x**1,x**2)",CLUSTER_1,CLUSTER_10
pest0,numpy.copy(pest),CLUSTER_1,CLUSTER_10
phi0,numpy.copy(phi),CLUSTER_1,CLUSTER_10
predict0,numpy.copy(predict),CLUSTER_1,CLUSTER_10
y,numpy.copy(y1),CLUSTER_1,CLUSTER_10
R,numpy.diag(1./np.abs(r+1e-15),CLUSTER_1,CLUSTER_10
pest,"numpy.linalg.solve(np.dot(A.T,A)",CLUSTER_1,CLUSTER_10
pest0,"numpy.linalg.solve(np.dot(A.T,A)",CLUSTER_1,CLUSTER_10
pest,"numpy.linalg.solve(np.dot(ATR,A)",CLUSTER_1,CLUSTER_10
w,"numpy.zeros((X_Train.shape[1],1)",CLUSTER_5,CLUSTER_9
w,"numpy.zeros((X_Train.shape[1],1)",CLUSTER_5,CLUSTER_9
v,"numpy.zeros((X_Train.shape[1],1)",CLUSTER_5,CLUSTER_9
w,"numpy.zeros((X_Train.shape[1],1)",CLUSTER_5,CLUSTER_9
v,"numpy.zeros((X_Train.shape[1],1)",CLUSTER_5,CLUSTER_9
Positive,"numpy.multiply(y_pred,y_test)",CLUSTER_5,CLUSTER_9
labels,numpy.load('D:/Document/Machine_Learning/CS3/label.npy'),CLUSTER_5,CLUSTER_9
matrix_ones,"scipy.sparse.csc_matrix((26709,1)",CLUSTER_5,CLUSTER_9
matrix_final_features,"scipy.sparse.csc_matrix(sp.hstack((features,matrix_ones)",CLUSTER_5,CLUSTER_9
w,"scipy.sparse.csc_matrix(w,shape=(len(w)",CLUSTER_5,CLUSTER_9
w,"scipy.sparse.csc_matrix(w,shape=(len(w)",CLUSTER_5,CLUSTER_9
v,"scipy.sparse.csc_matrix(v,shape=(len(v)",CLUSTER_5,CLUSTER_9
w,"scipy.sparse.csc_matrix(w,shape=(len(w)",CLUSTER_5,CLUSTER_9
v,"scipy.sparse.csc_matrix(v,shape=(len(v)",CLUSTER_5,CLUSTER_9
labels_final,"scipy.sparse.csr_matrix(labels,shape=(1,len(labels)",CLUSTER_5,CLUSTER_9
der,"scipy.sparse.csr_matrix(der,shape=(1,der.shape[1])",CLUSTER_5,CLUSTER_9
features,scipy.sparse.load_npz('D:/Document/Machine_Learning/CS3/tf_idf_processed_data_sw.npz'),CLUSTER_5,CLUSTER_9
styles,"requests.get(""https://raw.githubusercontent.com/Harvard-IACS/2018-CS109A/master/content/styles/cs109.css"")",CLUSTER_7,CLUSTER_8
lambda_df,numpy.asarray(alpha),CLUSTER_7,CLUSTER_8
lambda_df,numpy.asarray(alpha),CLUSTER_7,CLUSTER_8
ols_coef,numpy.asarray(ols_coef_list[1:99]),CLUSTER_7,CLUSTER_8
r2_matrix,"pandas.DataFrame(index=ind,columns=col)",CLUSTER_7,CLUSTER_8
r2_matrix,"pandas.DataFrame(index=ind,columns=col)",CLUSTER_7,CLUSTER_8
ols_coef_df,"pandas.DataFrame(ols_coef,index=x_train.columns.values)",CLUSTER_7,CLUSTER_8
ridge_coef_df,"pandas.DataFrame(ridge_coef_50,index=x_train.columns.values)",CLUSTER_7,CLUSTER_8
lasso_coef_df,"pandas.DataFrame(lasso_coef_1,index=x_train.columns.values)",CLUSTER_7,CLUSTER_8
coef_df,"pandas.concat([ols_coef_df,ridge_coef_df,lasso_coef_df],axis=1,join_axes=[ols_coef_df.index])",CLUSTER_7,CLUSTER_8
bikes_main,"pandas.read_csv(""data/bikes_student.csv"",index_col=""Unnamed:0"")",CLUSTER_7,CLUSTER_8
bikes_test,"pandas.read_csv(""data/bikes_test.csv"",index_col=""Unnamed:0"")",CLUSTER_7,CLUSTER_8
ols_bar,"matplotlib.pyplot.bar(x_vals,ols_coef,alpha=.6)",CLUSTER_7,CLUSTER_8
ridge_bar,"matplotlib.pyplot.bar(x_vals,ridge_coef_50,alpha=.6)",CLUSTER_7,CLUSTER_8
lasso_bar,"matplotlib.pyplot.bar(x_vals,lasso_coef_1,alpha=.6)",CLUSTER_7,CLUSTER_8
ols_hist,"matplotlib.pyplot.hist(ols_coef,alpha=.5,bins=15)",CLUSTER_7,CLUSTER_8
ridge_hist,"matplotlib.pyplot.hist(ridge_coef_50,alpha=.5,bins=15)",CLUSTER_7,CLUSTER_8
lasso_hist,"matplotlib.pyplot.hist(lasso_coef_1,alpha=.5,bins=15)",CLUSTER_7,CLUSTER_8
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(3,1,figsize=(25,15)",CLUSTER_7,CLUSTER_8
r2,"sklearn.metrics.r2_score(y_val,predict)",CLUSTER_7,CLUSTER_8
r2,"sklearn.metrics.r2_score(y_val,ypredict_ridge)",CLUSTER_7,CLUSTER_8
r2,"sklearn.metrics.r2_score(y_test,ypredict_ridge)",CLUSTER_7,CLUSTER_8
ridge,sklearn.linear_model.Ridge(alpha=n),CLUSTER_7,CLUSTER_8
ridge,sklearn.linear_model.Ridge(alpha=n),CLUSTER_7,CLUSTER_8
ridge,"sklearn.linear_model.RidgeCV(alphas=alpha,store_cv_values=True)",CLUSTER_7,CLUSTER_8
lasso,"sklearn.linear_model.LassoCV(alphas=alpha,max_iter=100000,cv=None)",CLUSTER_7,CLUSTER_8
"bikes_train,bikes_val","sklearn.model_selection.train_test_split(bikes_main,random_state=90,test_size=0.2,
stratify=bikes_main['month'])",CLUSTER_7,CLUSTER_8
X1,"numpy.matmul(X,np.array([[2.5,0],[0,100]])",CLUSTER_7,CLUSTER_5
X_abs,numpy.absolute(X),CLUSTER_7,CLUSTER_5
inner_ring_flag,"numpy.logical_and(X_abs[:,0]<1.2,X_abs[:,1]<1.2)",CLUSTER_7,CLUSTER_5
keep,"numpy.logical_not(np.logical_or(inner_ring_flag,outer_ring_flag)",CLUSTER_7,CLUSTER_5
data,pandas.DataFrame(X1),CLUSTER_7,CLUSTER_5
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_5
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_5
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_5
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_5
model,sklearn.cluster.KMeans(2),CLUSTER_7,CLUSTER_5
model,sklearn.cluster.KMeans(2),CLUSTER_7,CLUSTER_5
model,sklearn.cluster.KMeans(2),CLUSTER_7,CLUSTER_5
images,"numpy.zeros((nrof_samples,image_size,image_size,3)",CLUSTER_4,CLUSTER_0
emb_array,"numpy.zeros((nrof_images,embedding_size)",CLUSTER_4,CLUSTER_0
emb_array,"numpy.zeros((1,embedding_size)",CLUSTER_4,CLUSTER_0
bb,"numpy.zeros((nrof_faces,4)",CLUSTER_4,CLUSTER_0
emb_array,"numpy.zeros((1,embedding_size)",CLUSTER_4,CLUSTER_0
ret,"numpy.empty((w,h,3)",CLUSTER_4,CLUSTER_0
best_class_indices,"numpy.argmax(predictions,axis=1)",CLUSTER_4,CLUSTER_0
best_class_indices,"numpy.argmax(predictions,axis=1)",CLUSTER_4,CLUSTER_0
mean,numpy.mean(x),CLUSTER_4,CLUSTER_0
std,numpy.std(x),CLUSTER_4,CLUSTER_0
std_adj,"numpy.maximum(std,1.0/np.sqrt(x.size)",CLUSTER_4,CLUSTER_0
y,"numpy.multiply(np.subtract(x,mean)",CLUSTER_4,CLUSTER_0
image,numpy.fliplr(image),CLUSTER_4,CLUSTER_0
classes,os.listdir(path_exp),CLUSTER_4,CLUSTER_0
images,os.listdir(facedir),CLUSTER_4,CLUSTER_0
RegdNo,os.listdir(test_dir),CLUSTER_4,CLUSTER_0
RegdNo,os.listdir(train_img),CLUSTER_4,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',probability=True)",CLUSTER_4,CLUSTER_0
attendance,pandas.read_excel('attendance.xlsx'),CLUSTER_4,CLUSTER_0
bins,"numpy.array([
[15,0],
[24,15],
[34,25],
[49,35],
[74,50],
[99,75],
[124,100],
[149,125],
[174,150],
[199,175],
[249,200],
[350,250]
])",CLUSTER_7,CLUSTER_8
r,"numpy.concatenate((stats,[stats[0]])",CLUSTER_7,CLUSTER_8
theta,"numpy.concatenate((angles,[angles[0]])",CLUSTER_7,CLUSTER_8
geo_means[0],"numpy.mean([bins[0,0],bins[0,1]])",CLUSTER_7,CLUSTER_8
geo_means,"numpy.sqrt(bins[:,0]*bins[:,1])",CLUSTER_7,CLUSTER_8
lnspc,"numpy.linspace(xmin,xmax,len(df)",CLUSTER_7,CLUSTER_8
x,"numpy.linspace(0.001,100,500)",CLUSTER_7,CLUSTER_8
angles,"numpy.linspace(0,360,len(income_desc_categories)",CLUSTER_7,CLUSTER_8
df_hh_demographic['INCOME_DESC'],"pandas.Categorical(df_hh_demographic['INCOME_DESC'],
categories=income_desc_categories,
ordered=True)",CLUSTER_7,CLUSTER_8
plot_data,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
X,"pandas.DataFrame(X,
columns=['Income/AverageBillAmount','Income/AverageMedianProductPrice'])",CLUSTER_7,CLUSTER_8
geo_means,"pandas.Series(data=geo_means,
index=income_desc.index,
name='INCOME_DESC_GEO_MEANS')",CLUSTER_7,CLUSTER_8
labels,"pandas.Series(kmeans.labels_+1,name='Cluster')",CLUSTER_7,CLUSTER_8
plot_data,"pandas.concat((df_households_basket_payment_average,df_households_basket_median_product_price_average)",CLUSTER_7,CLUSTER_8
plot_data,"pandas.concat((df_households_basket_num_products_average,df_households_basket_payment_average)",CLUSTER_7,CLUSTER_8
plot_data,"pandas.concat((df_households_basket_num_products_average,
df_households_basket_median_product_price_average)",CLUSTER_7,CLUSTER_8
plot_data,"pandas.concat(
(pd.Series(r,name='Normalizedgasolinepurchases(in$)",CLUSTER_7,CLUSTER_8
plot_data,"pandas.concat((plot_data,df_commodity.reset_index()",CLUSTER_7,CLUSTER_8
df,"pandas.concat([
df_low_income_low_expenses[demographic_feature].value_counts()",CLUSTER_7,CLUSTER_8
X,"pandas.concat((feature_income_and_average_bill_amount,
feature_income_and_average_median_product_price)",CLUSTER_7,CLUSTER_8
X_labeled,"pandas.concat((X,labels,df_hh_demographic['MARITAL_STATUS_CODE'].reset_index(drop=True)",CLUSTER_7,CLUSTER_8
df_hh_demographic,"pandas.read_csv(DATA_DIR+HH_DEMOGRAPHIC,index_col='household_key')",CLUSTER_7,CLUSTER_8
df_transaction_data,pandas.read_csv(DATA_DIR+TRANSACTION_DATA),CLUSTER_7,CLUSTER_8
df_product,"pandas.read_csv(DATA_DIR+PRODUCT,index_col='PRODUCT_ID')",CLUSTER_7,CLUSTER_8
palette,"seaborn.color_palette('cubehelix',len(dff)",CLUSTER_7,CLUSTER_8
palette,"seaborn.color_palette('muted',n_colors=k)",CLUSTER_7,CLUSTER_8
palette,"seaborn.color_palette('muted',n_colors=3)",CLUSTER_7,CLUSTER_8
g,"seaborn.jointplot(y='INCOME_DESC',x='CUSTOMER_PAID',data=df,kind='kde',height=10)",CLUSTER_7,CLUSTER_8
g,"seaborn.jointplot(y='INCOME_DESC',x='PRODUCT_PRICE',data=df,kind='kde',height=10)",CLUSTER_7,CLUSTER_8
kmeans,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(4,3)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(6,4)",CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=1)",CLUSTER_1,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=1,figsize=(8,6)",CLUSTER_1,CLUSTER_3
x,"numpy.arange(1,6)",CLUSTER_1,CLUSTER_3
y,"numpy.arange(2,11,2)",CLUSTER_1,CLUSTER_3
x,"numpy.arange(1,6)",CLUSTER_1,CLUSTER_3
y,"numpy.arange(1,11,2)",CLUSTER_1,CLUSTER_3
x,"numpy.arange(1,6)",CLUSTER_1,CLUSTER_3
y,"numpy.arange(1,11,2)",CLUSTER_1,CLUSTER_3
x,"numpy.arange(1,6)",CLUSTER_1,CLUSTER_3
y,"numpy.arange(1,11,2)",CLUSTER_1,CLUSTER_3
alphas,"numpy.logspace(-2,0,20)",CLUSTER_7,CLUSTER_8
alphas,"numpy.logspace(-2,1,20)",CLUSTER_7,CLUSTER_8
train_sizes,"numpy.linspace(0.05,1,20)",CLUSTER_7,CLUSTER_8
train_sizes,"numpy.linspace(0.05,1,20)",CLUSTER_7,CLUSTER_8
data,pandas.read_csv('telecom_churn.csv'),CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('scaler',StandardScaler()",CLUSTER_7,CLUSTER_8
logit_pipe2,"sklearn.pipeline.Pipeline([('scaler',StandardScaler()",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('scaler',StandardScaler()",CLUSTER_7,CLUSTER_8
svc_pipe3,"sklearn.pipeline.Pipeline([('scaler',StandardScaler()",CLUSTER_7,CLUSTER_8
logit_pipe,"sklearn.pipeline.Pipeline([('scaler',StandardScaler()",CLUSTER_7,CLUSTER_8
grid_logit,"sklearn.model_selection.GridSearchCV(logit_pipe,param_grid,cv=3,n_jobs=-1)",CLUSTER_7,CLUSTER_8
grid_logit2,"sklearn.model_selection.GridSearchCV(logit_pipe2,param_grid,cv=3,n_jobs=-1)",CLUSTER_7,CLUSTER_8
grid_svc,"sklearn.model_selection.GridSearchCV(svc_pipe3,param_grid,cv=3,n_jobs=-1)",CLUSTER_7,CLUSTER_8
"val_train,val_test","sklearn.model_selection.validation_curve(logit_pipe,X,y,""logit__C"",alphas,cv=5)",CLUSTER_7,CLUSTER_8
"val_train,val_test","sklearn.model_selection.validation_curve(logit_pipe2,X,y,""logit__C"",alphas,cv=5)",CLUSTER_7,CLUSTER_8
"val_train,val_test","sklearn.model_selection.validation_curve(svc_pipe3,X,y,""svc__C"",alphas,cv=5)",CLUSTER_7,CLUSTER_8
"N,val_train,val_test","sklearn.model_selection.learning_curve(logit_pipe,
X,y,train_sizes=train_sizes,cv=5,
scoring='roc_auc')",CLUSTER_7,CLUSTER_8
"N,val_train,val_test","sklearn.model_selection.learning_curve(logit_pipe,
X,y,train_sizes=train_sizes,cv=5,
scoring='roc_auc')",CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_8
clf,"sklearn.tree.DecisionTreeRegressor(max_depth=max_depth,min_samples_leaf=min_samples_leaf)",CLUSTER_7,CLUSTER_8
clf,sklearn.tree.DecisionTreeRegressor(random_state=42),CLUSTER_7,CLUSTER_8
tr,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_8
data,sklearn.datasets.load_boston(),CLUSTER_7,CLUSTER_8
cv,"sklearn.model_selection.KFold(X.shape[0],shuffle=True,random_state=241)",CLUSTER_7,CLUSTER_8
dtf,sklearn.tree.DecisionTreeClassifier(max_depth=20),CLUSTER_5,CLUSTER_5
cat_data,numpy.fromstring(cat.tobytes(),CLUSTER_3,CLUSTER_6
inds,numpy.where(cond),CLUSTER_3,CLUSTER_6
cat_data_result,numpy.int8(cat_data_real),CLUSTER_3,CLUSTER_6
cat_data_real,numpy.real(cat_data_ifft),CLUSTER_3,CLUSTER_6
cat_data_fft,numpy.fft.fft(cat_data),CLUSTER_3,CLUSTER_6
cat_data_ifft,numpy.fft.ifft(cat_data_fft),CLUSTER_3,CLUSTER_6
drinks,pandas.read_csv('https://raw.githubusercontent.com/justmarkham/DAT8/master/data/drinks.csv'),CLUSTER_8,CLUSTER_4
initial_position,numpy.array([coordinates[i]]),CLUSTER_12,CLUSTER_10
eng_next,numpy.array([grid.processors[data_collector](next_pos[0]),CLUSTER_12,CLUSTER_10
idx,numpy.where(progress-current_progress>=0),CLUSTER_12,CLUSTER_10
grid,"LightGrid(bounded=True,bounds=[(x_l,x_r)],dr=numpy.ones(2)",CLUSTER_12,CLUSTER_10
xx,"numpy.linspace(x_l,x_r,1000)",CLUSTER_12,CLUSTER_10
prg,"numpy.linspace(0,no_of_steps,no_of_steps)",CLUSTER_12,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_10
dr,random.choice(drs),CLUSTER_12,CLUSTER_10
whites,numpy.array([True]*235+[False]*2200),CLUSTER_8,CLUSTER_9
blacks,numpy.array([True]*157+[False]*2278),CLUSTER_8,CLUSTER_9
perm_replicates,numpy.empty(size),CLUSTER_8,CLUSTER_9
perm_replicates,numpy.empty(10000),CLUSTER_8,CLUSTER_9
data,"numpy.concatenate((data1,data2)",CLUSTER_8,CLUSTER_9
frac,numpy.sum(whites),CLUSTER_8,CLUSTER_9
p,numpy.sum(perm_replicates>=157/2435),CLUSTER_8,CLUSTER_9
frac_A,numpy.sum(data_A),CLUSTER_8,CLUSTER_9
frac_B,numpy.sum(data_B),CLUSTER_8,CLUSTER_9
p_value,numpy.sum(perm_replicates>=diff_frac_obs),CLUSTER_8,CLUSTER_9
player_urls,json.load(data_file),CLUSTER_8,CLUSTER_4
X_grid,numpy.arange(min(X),CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('Position_Salaries.csv'),CLUSTER_5,CLUSTER_5
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
lin_reg_2,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
poly_reg,sklearn.preprocessing.PolynomialFeatures(degree=4),CLUSTER_5,CLUSTER_5
k,"numpy.arange(1,len(infodict['residual_x'])",CLUSTER_1,CLUSTER_10
x,"numpy.concatenate([-s2[::-1],s1[1:]])",CLUSTER_1,CLUSTER_10
y,"numpy.concatenate([-s[::-1],s[1:]])",CLUSTER_1,CLUSTER_10
uBC[k][:],numpy.cos(α),CLUSTER_1,CLUSTER_10
x[:solver.fluid.u.size],numpy.cos(α),CLUSTER_1,CLUSTER_10
vBC[k][:],numpy.sin(α),CLUSTER_1,CLUSTER_10
x[solver.fluid.u.size:solver.fluid.v.size],numpy.sin(α),CLUSTER_1,CLUSTER_10
Cnorm,"numpy.cumsum(evecs**2,axis=1)",CLUSTER_12,CLUSTER_9
path_distance,"numpy.sum(np.diff(msync,axis=1)",CLUSTER_12,CLUSTER_9
deg_path,"numpy.sum(R_path,axis=1)",CLUSTER_12,CLUSTER_9
deg_rec,"numpy.sum(Rf,axis=1)",CLUSTER_12,CLUSTER_9
path_distance,"numpy.sum(np.diff(Msync,axis=1)",CLUSTER_12,CLUSTER_9
path_sim,numpy.exp(-path_distance/sigma),CLUSTER_12,CLUSTER_9
path_sim,numpy.exp(-path_distance/sigma),CLUSTER_12,CLUSTER_9
chroma_filter,"numpy.minimum(chroma_os_harm,librosa.decompose.nn_filter(chroma_os_harm,aggregate=np.median,metric='cosine')",CLUSTER_12,CLUSTER_9
sigma,numpy.median(path_distance),CLUSTER_12,CLUSTER_9
sigma,numpy.median(path_distance),CLUSTER_12,CLUSTER_9
R_path,"numpy.diag(path_sim,k=1)",CLUSTER_12,CLUSTER_9
R_path,"numpy.diag(path_sim,k=1)",CLUSTER_12,CLUSTER_9
"evals,evecs",scipy.linalg.eigh(L),CLUSTER_12,CLUSTER_9
evecs,"scipy.ndimage.median_filter(evecs,size=(9,1)",CLUSTER_12,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_12,CLUSTER_9
colors,"matplotlib.pyplot.get_cmap('Paired',k)",CLUSTER_12,CLUSTER_9
KM,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_12,CLUSTER_9
file_types,collections.Counter(f.suffixforfinlocation.iterdir(),CLUSTER_10,CLUSTER_12
time,datetime.datetime.fromtimestamp(time),CLUSTER_10,CLUSTER_12
df_con_mat,"pandas.DataFrame(con_mat,columns=['Predicted1','Predicted2','Predicted3'],
index=['True1','True2','True3'])",CLUSTER_0,CLUSTER_8
test,pandas.DataFrame(y_predicted),CLUSTER_0,CLUSTER_8
earthquake_data_encoded,"pandas.get_dummies(earthquake_data,drop_first=True)",CLUSTER_0,CLUSTER_8
earthquake_test_encoded,"pandas.get_dummies(earthquake_test,drop_first=True)",CLUSTER_0,CLUSTER_8
earthquake_data,"pandas.merge(earthquake_train,earthquake_labels,how=""right"",on=""building_id"")",CLUSTER_0,CLUSTER_8
earthquake_train,"pandas.read_csv(""train_values.csv"")",CLUSTER_0,CLUSTER_8
earthquake_labels,"pandas.read_csv(""train_labels.csv"")",CLUSTER_0,CLUSTER_8
earthquake_test,"pandas.read_csv(""test_values.csv"")",CLUSTER_0,CLUSTER_8
matrix,numpy.triu(earthquake_data.corr(),CLUSTER_0,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(3,2,figsize=(16,12)",CLUSTER_0,CLUSTER_8
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_0,CLUSTER_8
g,"seaborn.pairplot(earthquake_data,vars=['count_floors_pre_eq','age','area_percentage','height_percentage','count_families'],hue=""damage_grade"")",CLUSTER_0,CLUSTER_8
ax,"seaborn.violinplot(x=earthquake_data[col],y=""damage_grade"",data=earthquake_data)",CLUSTER_0,CLUSTER_8
ax,"seaborn.violinplot(x=earthquake_data[col],y=""damage_grade"",data=earthquake_data)",CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_0,CLUSTER_8
my_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_0,CLUSTER_8
my_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_0,CLUSTER_8
my_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_0,CLUSTER_8
LR_model,sklearn.linear_model.LogisticRegression(),CLUSTER_0,CLUSTER_8
LR_model,sklearn.linear_model.LogisticRegression(),CLUSTER_0,CLUSTER_8
model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_0,CLUSTER_8
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_0,CLUSTER_8
grid,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=param_grid,scoring=scoring,cv=kfold)",CLUSTER_0,CLUSTER_8
kfold,"sklearn.model_selection.KFold(n_splits=num_folds,random_state=seed)",CLUSTER_0,CLUSTER_8
kfold,"sklearn.model_selection.KFold(n_splits=num_folds,random_state=seed)",CLUSTER_0,CLUSTER_8
kfold,"sklearn.model_selection.KFold(n_splits=num_folds,random_state=seed)",CLUSTER_0,CLUSTER_8
cv_results,"sklearn.model_selection.cross_val_score(model,X_train_scaled,y_train,cv=kfold,scoring=scoring)",CLUSTER_0,CLUSTER_8
cv_results,"sklearn.model_selection.cross_val_score(model,X_train_scaled,y_train,cv=kfold,scoring=scoring)",CLUSTER_0,CLUSTER_8
con_mat,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_0,CLUSTER_8
rf_random,"sklearn.model_selection.RandomizedSearchCV(estimator=rf,param_distributions=random_grid,n_iter=100,cv=3,verbose=2,random_state=42,n_jobs=-1)",CLUSTER_0,CLUSTER_8
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_0,CLUSTER_8
pergrid_base_df,pandas.DataFrame(pergrid_base_pred_filled),CLUSTER_7,CLUSTER_9
Xstd,"pandas.DataFrame(data=X_std[0:,0:],
index=pergrid_base_pred_df.index,
columns=pred_var)",CLUSTER_7,CLUSTER_9
rf_y_test,"pandas.DataFrame(
{'tsr':y_test,
'tsr_predicted':Y_test_pred})",CLUSTER_7,CLUSTER_9
importance,"pandas.DataFrame(importance,index=PRED_VAR,columns=[""Importance""])",CLUSTER_7,CLUSTER_9
pergrid_all_predicted,"pandas.DataFrame(
{'grid_id':grid_id,
'tsr':y_true,
'tsr_predicted':y_pred_all.tolist()",CLUSTER_7,CLUSTER_9
pergrid_base_df,"pandas.read_sql(pergrid_base,engine)",CLUSTER_7,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(Xstd,y_true,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_9
ss,"sklearn.preprocessing.StandardScaler(with_mean=False,with_std=False)",CLUSTER_7,CLUSTER_9
imputer,sklearn.impute.KNNImputer(n_neighbors=5),CLUSTER_7,CLUSTER_9
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=10,random_state=42,bootstrap=True)",CLUSTER_7,CLUSTER_9
rfr,sklearn.ensemble.RandomForestRegressor(),CLUSTER_7,CLUSTER_9
start,time.time(),CLUSTER_7,CLUSTER_9
random_search,"sklearn.model_selection.RandomizedSearchCV(estimator=rfr,
param_distributions=param_dist,
n_iter=n_iter_search,
n_jobs=-1,
cv=10)",CLUSTER_7,CLUSTER_9
rmse,"math.sqrt(mean_squared_error(Y_train_pred,y_train)",CLUSTER_7,CLUSTER_9
rmse,"math.sqrt(mean_squared_error(Y_test_pred,y_test)",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_7,CLUSTER_9
data,numpy.log1p(train['SalePrice']),CLUSTER_7,CLUSTER_8
combain[skewed],numpy.log1p(combain[skewed]),CLUSTER_7,CLUSTER_8
rmse,"numpy.sqrt(-(cross_val_score(model,X_train,y,scoring=""neg_mean_squared_error"",cv=5)",CLUSTER_7,CLUSTER_8
nullValues,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
ridge_cv_values,"pandas.Series(ridge_cv_values,index=alphas)",CLUSTER_7,CLUSTER_8
coef,"pandas.Series(model_lasso.coef_,index=X_train.columns)",CLUSTER_7,CLUSTER_8
combain,"pandas.concat([train,test],axis=0)",CLUSTER_7,CLUSTER_8
combain,pandas.get_dummies(combain),CLUSTER_7,CLUSTER_8
train,pandas.read_csv('/home/ashwin/Downloads/bosten/train.csv'),CLUSTER_7,CLUSTER_8
test,pandas.read_csv('/home/ashwin/Downloads/bosten/test.csv'),CLUSTER_7,CLUSTER_8
model_ridge,sklearn.linear_model.Ridge(),CLUSTER_7,CLUSTER_8
model_lasso,"sklearn.linear_model.LassoCV(alphas=[1,0.1,0.001,0.0005])",CLUSTER_7,CLUSTER_8
df,"pandas.get_dummies(df,columns=cate_var)",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('datasets_596958_1073629_Placement_Data_Full_Class.csv'),CLUSTER_7,CLUSTER_5
box_length,"numpy.percentile(df['salary'],75)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(20,12)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,6)",CLUSTER_7,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df,y,test_size=0.2)",CLUSTER_7,CLUSTER_5
lr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
r2,"sklearn.metrics.r2_score(y_test,y_pre)",CLUSTER_7,CLUSTER_5
mse,"sklearn.metrics.mean_squared_error(y_test,y_pre)",CLUSTER_7,CLUSTER_5
start,time.time(),CLUSTER_6,CLUSTER_10
URL_pattern,"re.compile(r""http\S+"")",CLUSTER_0,CLUSTER_7
USR_pattern,"re.compile(r""@\S+"")",CLUSTER_0,CLUSTER_7
tok_ind_list,collections.defaultdict(lambda:0),CLUSTER_0,CLUSTER_7
order,numpy.arange(n_samples),CLUSTER_0,CLUSTER_7
lengths,"numpy.zeros(current_batch_size,dtype=np.int32)",CLUSTER_0,CLUSTER_7
x,"numpy.ones([current_batch_size,max_len_token],dtype=np.int32)",CLUSTER_0,CLUSTER_7
y,"numpy.ones([current_batch_size,max_len_token],dtype=np.int32)",CLUSTER_0,CLUSTER_7
letters,"pandas.DataFrame({'lowercase':lcase,'uppercase':upcase})",CLUSTER_1,CLUSTER_3
registros,numpy.asarray(df['content']),CLUSTER_0,CLUSTER_8
df['sentiment'],"numpy.where(df['sentiment']=='worry','Negativa',df['sentiment'])",CLUSTER_0,CLUSTER_8
df['sentiment'],"numpy.where(df['sentiment']=='sadness','Negativa',df['sentiment'])",CLUSTER_0,CLUSTER_8
df['sentiment'],"numpy.where(df['sentiment']=='hate','Negativa',df['sentiment'])",CLUSTER_0,CLUSTER_8
df['sentiment'],"numpy.where(df['sentiment']=='empty','Negativa',df['sentiment'])",CLUSTER_0,CLUSTER_8
df['sentiment'],"numpy.where(df['sentiment']=='boredom','Negativa',df['sentiment'])",CLUSTER_0,CLUSTER_8
df['sentiment'],"numpy.where(df['sentiment']=='anger','Negativa',df['sentiment'])",CLUSTER_0,CLUSTER_8
df['sentiment'],"numpy.where(df['sentiment']=='happiness','Positiva',df['sentiment'])",CLUSTER_0,CLUSTER_8
df['sentiment'],"numpy.where(df['sentiment']=='love','Positiva',df['sentiment'])",CLUSTER_0,CLUSTER_8
df['sentiment'],"numpy.where(df['sentiment']=='surprise','Positiva',df['sentiment'])",CLUSTER_0,CLUSTER_8
df['sentiment'],"numpy.where(df['sentiment']=='fun','Positiva',df['sentiment'])",CLUSTER_0,CLUSTER_8
df['sentiment'],"numpy.where(df['sentiment']=='relief','Positiva',df['sentiment'])",CLUSTER_0,CLUSTER_8
df['sentiment'],"numpy.where(df['sentiment']=='enthusiasm','Positiva',df['sentiment'])",CLUSTER_0,CLUSTER_8
df_promedios,"pandas.DataFrame(data=promedios,index=['Recall','Accuracy'])",CLUSTER_0,CLUSTER_8
df,pandas.read_csv('text_emotion.csv'),CLUSTER_0,CLUSTER_8
df2,pandas.read_csv('text_emotion.csv'),CLUSTER_0,CLUSTER_8
"X_train_c,X_test_c,y_train_c,y_test_c","sklearn.model_selection.train_test_split(X_train_countvec,df['sentiment'],test_size=0.3,random_state=1)",CLUSTER_0,CLUSTER_8
"X_train_t,X_test_t,y_train_t,y_test_t","sklearn.model_selection.train_test_split(X_train_tfidf,df['sentiment'],test_size=0.3,random_state=1)",CLUSTER_0,CLUSTER_8
rf_model_gridcv_count,sklearn.model_selection.GridSearchCV(RandomForestClassifier(random_state=1),CLUSTER_0,CLUSTER_8
rf_model_gridcv_tfidf,sklearn.model_selection.GridSearchCV(RandomForestClassifier(random_state=1),CLUSTER_0,CLUSTER_8
nb_gridcv,sklearn.model_selection.GridSearchCV(MultinomialNB(),CLUSTER_0,CLUSTER_8
gradient_boost_gridcv,sklearn.model_selection.GridSearchCV(GradientBoostingClassifier(random_state=1),CLUSTER_0,CLUSTER_8
adaboost_gridcv,sklearn.model_selection.GridSearchCV(AdaBoostClassifier(random_state=1),CLUSTER_0,CLUSTER_8
logistic_gridcv,sklearn.model_selection.GridSearchCV(LogisticRegression(random_state=1),CLUSTER_0,CLUSTER_8
mat,"sklearn.metrics.confusion_matrix(y_test_c,predictions)",CLUSTER_0,CLUSTER_8
processed_tweet,"re.sub(r'@+[a-zA-Z0-9]*','',str(X[i])",CLUSTER_0,CLUSTER_8
processed_tweet,re.sub(r'(http:),CLUSTER_0,CLUSTER_8
processed_tweet,"re.sub(r'\W','',processed_tweet)",CLUSTER_0,CLUSTER_8
processed_tweet,"re.sub(r'\s+[a-zA-Z]\s+','',processed_tweet)",CLUSTER_0,CLUSTER_8
processed_tweet,"re.sub(r'\^[a-zA-Z]\s+','',processed_tweet)",CLUSTER_0,CLUSTER_8
processed_tweet,"re.sub(r'\s+','',processed_tweet,flags=re.I)",CLUSTER_0,CLUSTER_8
count_tokens,collections.Counter(tokens),CLUSTER_0,CLUSTER_8
pt,"pandas.pivot_table(cutdf[mask],
values='Rating',
index='Manufacturer_ID',
columns='Supplier_ID')",CLUSTER_8,CLUSTER_9
df,"pandas.read_csv(""AllRatingsCleaned.csv"")",CLUSTER_8,CLUSTER_9
execution_times_df,"pandas.DataFrame(
{
'array_lengths':array_lengths
,'quick_sort_times':quick_sort_execution_times
,'merge_sort_times':merge_sort_execution_times
,'bubble_sort_times':bubble_sort_execution_times
,'insertion_sort_times':insertion_sort_execution_times
})",CLUSTER_7,CLUSTER_3
start,time.perf_counter(),CLUSTER_7,CLUSTER_3
end,time.perf_counter(),CLUSTER_7,CLUSTER_3
start,time.perf_counter(),CLUSTER_7,CLUSTER_3
end,time.perf_counter(),CLUSTER_7,CLUSTER_3
start,time.perf_counter(),CLUSTER_7,CLUSTER_3
end,time.perf_counter(),CLUSTER_7,CLUSTER_3
start,time.perf_counter(),CLUSTER_7,CLUSTER_3
end,time.perf_counter(),CLUSTER_7,CLUSTER_3
ax,"seaborn.lineplot(x='array_lengths',y='quick_sort_times',data=execution_times_df)",CLUSTER_7,CLUSTER_3
ax,"seaborn.lineplot(x='array_lengths',y='merge_sort_times',data=execution_times_df)",CLUSTER_7,CLUSTER_3
ax,"seaborn.lineplot(x='array_lengths',y='bubble_sort_times',data=execution_times_df)",CLUSTER_7,CLUSTER_3
ax,"seaborn.lineplot(x='array_lengths',y='insertion_sort_times',data=execution_times_df)",CLUSTER_7,CLUSTER_3
raw,requests.get('https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M'),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(data=d),CLUSTER_9,CLUSTER_2
maintenant,datetime.datetime.now(),CLUSTER_11,CLUSTER_1
attritionData,pandas.read_csv('./WA_Fn-UseC_-HR-Employee-Attrition.csv'),CLUSTER_11,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(attritionXData,
target,
test_size=0.2,
random_state=0,
stratify=target)",CLUSTER_11,CLUSTER_1
clf,"sklearn.pipeline.Pipeline(steps=[('preprocessor',DataFrameMapper(transformations)",CLUSTER_11,CLUSTER_1
V,numpy.zeros(env.nS),CLUSTER_3,CLUSTER_6
action_values,numpy.zeros(env.nA),CLUSTER_3,CLUSTER_6
random_policy,"numpy.ones((env.nS,env.nA)",CLUSTER_3,CLUSTER_6
old_a,numpy.argmax(policy[s]),CLUSTER_3,CLUSTER_6
new_a,numpy.argmax(action_values),CLUSTER_3,CLUSTER_6
policy[s],numpy.eye(env.nA),CLUSTER_3,CLUSTER_6
val_estimates,collections.defaultdict(float),CLUSTER_3,CLUSTER_6
returns_sum,collections.defaultdict(float),CLUSTER_3,CLUSTER_6
returns_count,collections.defaultdict(float),CLUSTER_3,CLUSTER_6
df,"pandas.read_csv('data/WISDM_ar_v1.1_raw.txt',header=None,names=columns)",CLUSTER_7,CLUSTER_8
normalised_confusion_matrix,"numpy.array(confusion_matrix,dtype=np.float32)",CLUSTER_7,CLUSTER_8
reshaped_segments,"numpy.asarray(segments,dtype=np.float32)",CLUSTER_7,CLUSTER_8
labels,numpy.asarray(pd.get_dummies(labels),CLUSTER_7,CLUSTER_8
max_test,"numpy.argmax(y_test,axis=1)",CLUSTER_7,CLUSTER_8
max_predictions,"numpy.argmax(predictions,axis=1)",CLUSTER_7,CLUSTER_8
label,scipy.stats.mode(df['activity'][i:i+N_TIME_STEPS]),CLUSTER_7,CLUSTER_8
confusion_matrix,"sklearn.metrics.confusion_matrix(max_test,max_predictions)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
reshaped_segments,labels,test_size=0.2,random_state=RANDOM_SEED)",CLUSTER_7,CLUSTER_8
df,"pandas.concat([df_train,df_test])",CLUSTER_8,CLUSTER_3
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_8,CLUSTER_3
df_test,pandas.read_csv(data_path+'house_test.csv.gz'),CLUSTER_8,CLUSTER_3
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame(np.random.randint(0,100,size=(8,4)",CLUSTER_1,CLUSTER_3
df2,"pandas.DataFrame([xforxinrange(0,2)",CLUSTER_1,CLUSTER_3
df,"pandas.concat([df,df2],axis=1)",CLUSTER_1,CLUSTER_3
target_class,"numpy.zeros([_Y.shape[0],20])",CLUSTER_5,CLUSTER_5
Y,numpy.load('../BioTac_Icub_data/ICUB_all_labels.npy'),CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(2,figsize=(15,7)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.30,random_state=42,stratify=Y)",CLUSTER_5,CLUSTER_5
oof_train,"numpy.zeros((ntrain,)",CLUSTER_5,CLUSTER_1
oof_test,"numpy.zeros((ntest,)",CLUSTER_5,CLUSTER_1
oof_train,"numpy.zeros((ntrain1,)",CLUSTER_5,CLUSTER_1
oof_test,"numpy.zeros((ntest1,)",CLUSTER_5,CLUSTER_1
oof_test_skf,"numpy.empty((NFOLDS,ntest)",CLUSTER_5,CLUSTER_1
oof_test_skf,"numpy.empty((NFOLDS,ntest1)",CLUSTER_5,CLUSTER_1
x_train,"numpy.concatenate((xgb_oof_train,gb_oof_train,lgb_oof_train,rf_oof_train)",CLUSTER_5,CLUSTER_1
consumerTest,"numpy.concatenate((xgb_oof_test,gb_oof_test,lgb_oof_test,rf_oof_test)",CLUSTER_5,CLUSTER_1
x_test,"numpy.concatenate((xgb_oof_test1,gb_oof_test1,lgb_oof_test1,rf_oof_test1)",CLUSTER_5,CLUSTER_1
x_train,pandas.DataFrame(x_train.values),CLUSTER_5,CLUSTER_1
y_train,pandas.DataFrame(y_train.values),CLUSTER_5,CLUSTER_1
x_test,pandas.DataFrame(x_test.values),CLUSTER_5,CLUSTER_1
y_test,pandas.DataFrame(y_test.values),CLUSTER_5,CLUSTER_1
consumerTest,pandas.DataFrame(consumerTest.values),CLUSTER_5,CLUSTER_1
Submission,"pandas.DataFrame({'id':Id,
'score':predictions})",CLUSTER_5,CLUSTER_1
consumerTrain,"pandas.read_csv(""train_dataset.csv"")",CLUSTER_5,CLUSTER_1
consumerTest,"pandas.read_csv(""test_dataset.csv"")",CLUSTER_5,CLUSTER_1
ada,"sklearn.ensemble.AdaBoostRegressor(n_estimators=1000,learning_rate=0.1,random_state=11)",CLUSTER_5,CLUSTER_1
gb,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=1000,learning_rate=0.02,criterion='mse',random_state=11)",CLUSTER_5,CLUSTER_1
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,max_features=0.6,max_depth=9,min_samples_leaf=5,
verbose=0,oob_score=True,random_state=11)",CLUSTER_5,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=10)",CLUSTER_5,CLUSTER_1
clf_grid,"sklearn.model_selection.GridSearchCV(clf_est,clf_param_grid,n_jobs=5,cv=2,verbose=0)",CLUSTER_5,CLUSTER_1
kf,"sklearn.model_selection.KFold(n_splits=NFOLDS,random_state=SEED,shuffle=False)",CLUSTER_5,CLUSTER_1
kf,"sklearn.model_selection.KFold(n_splits=NFOLDS,random_state=SEED,shuffle=False)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(clf,x_test,y_test)",CLUSTER_5,CLUSTER_1
MSE,"sklearn.metrics.mean_squared_error(y_test,y_pred_xgb)",CLUSTER_5,CLUSTER_1
threshold_scale,numpy.linspace(df_can['Total'].min(),CLUSTER_8,CLUSTER_3
df_incidents,pandas.read_csv('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Police_Department_Incidents_-_Previous_Year__2016_.csv'),CLUSTER_8,CLUSTER_3
df_can,"pandas.read_excel('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx',
sheet_name='CanadabyCitizenship',
skiprows=range(20)",CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(top_feats),CLUSTER_0,CLUSTER_8
train_text_feature_tfidfVectorizer_df,pandas.DataFrame(train_text_feature_tfidfVectorizer.toarray(),CLUSTER_0,CLUSTER_8
df,pandas.DataFrame(top_feats),CLUSTER_0,CLUSTER_8
test_text_feature_tfidfVectorizer_df,pandas.DataFrame(test_text_feature_tfidfVectorizer.toarray(),CLUSTER_0,CLUSTER_8
df,pandas.DataFrame(top_feats),CLUSTER_0,CLUSTER_8
cv_text_feature_tfidfVectorizer_df,pandas.DataFrame(cv_text_feature_tfidfVectorizer.toarray(),CLUSTER_0,CLUSTER_8
data,"pandas.merge(data_var,data_text,how='left',on='ID')",CLUSTER_0,CLUSTER_8
data_text,"pandas.read_csv('training_text',sep='\|\|',header=None,skiprows=1,names=['ID','Text'],engine='python')",CLUSTER_0,CLUSTER_8
data_var,pandas.read_csv('training_variants'),CLUSTER_0,CLUSTER_8
confuse_array,numpy.array(confuse_array),CLUSTER_0,CLUSTER_8
sorted_text_occur,numpy.array(list(sorted_text_fea_dict.values(),CLUSTER_0,CLUSTER_8
train_y,numpy.array(list(X_train['Class']),CLUSTER_0,CLUSTER_8
test_y,numpy.array(list(X_test['Class']),CLUSTER_0,CLUSTER_8
cv_y,numpy.array(list(X_cv['Class']),CLUSTER_0,CLUSTER_8
y_cv_predicted,"numpy.zeros((X_cv_len,9)",CLUSTER_0,CLUSTER_8
y_test_predicted,"numpy.zeros((X_test_len,9)",CLUSTER_0,CLUSTER_8
text_feature_responseCoding,"numpy.zeros((df.shape[0],9)",CLUSTER_0,CLUSTER_8
features,numpy.dot(np.array(alpha),CLUSTER_0,CLUSTER_8
y_predicted,"numpy.argmax(y_test_predicted,axis=1)",CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
best_alpha,numpy.argmin(cv_log_error_array),CLUSTER_0,CLUSTER_8
sorted_yi,numpy.argsort(-train_class_distribution.values),CLUSTER_0,CLUSTER_8
sorted_yi,numpy.argsort(-cv_class_distribution.values),CLUSTER_0,CLUSTER_8
sorted_yi,numpy.argsort(-test_class_distribution.values),CLUSTER_0,CLUSTER_8
topn_ids,numpy.argsort(row),CLUSTER_0,CLUSTER_8
topn_ids,numpy.argsort(row),CLUSTER_0,CLUSTER_8
topn_ids,numpy.argsort(row),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.coef_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.feature_importances_),CLUSTER_0,CLUSTER_8
indices,numpy.argsort(-clf.feature_importances_),CLUSTER_0,CLUSTER_8
c,numpy.cumsum(h),CLUSTER_0,CLUSTER_8
c,numpy.cumsum(h),CLUSTER_0,CLUSTER_8
tfidf_means,"numpy.mean(D,axis=0)",CLUSTER_0,CLUSTER_8
tfidf_means,"numpy.mean(D,axis=0)",CLUSTER_0,CLUSTER_8
tfidf_means,"numpy.mean(D,axis=0)",CLUSTER_0,CLUSTER_8
train_text_feature_tfidfVectorizer_1,"numpy.column_stack((train_text_feature_tfidfVectorizer_1,train_text_feature_tfidfVectorizer_df.values[:,top_tfidf['column_no'][i]])",CLUSTER_0,CLUSTER_8
test_text_feature_tfidfVectorizer_1,"numpy.column_stack((test_text_feature_tfidfVectorizer_1,test_text_feature_tfidfVectorizer_df.values[:,top_tfidf['column_no'][i]])",CLUSTER_0,CLUSTER_8
cv_text_feature_tfidfVectorizer_1,"numpy.column_stack((cv_text_feature_tfidfVectorizer_1,cv_text_feature_tfidfVectorizer_df.values[:,top_tfidf['column_no'][i]])",CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
"'''fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_8
total_text,"re.sub('[^a-zA-Z0-9\n]','',total_text)",CLUSTER_0,CLUSTER_8
total_text,"re.sub('\s+','',total_text)",CLUSTER_0,CLUSTER_8
"X_1,X_test,y_1,y_test","sklearn.model_selection.train_test_split(data,y_true,stratify=y_true,test_size=0.2)",CLUSTER_0,CLUSTER_8
"X_train,X_cv,y_train,y_cv","sklearn.model_selection.train_test_split(X_1,y_1,stratify=y_1,test_size=0.2)",CLUSTER_0,CLUSTER_8
C,"sklearn.metrics.confusion_matrix(test_y,predict_y)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=i,penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='log',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=i,penalty='l2',loss='hinge',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(class_weight='balanced',alpha=alpha[best_alpha],penalty='l2',loss='hinge',random_state=42)",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='hinge',random_state=42,class_weight='balanced')",CLUSTER_0,CLUSTER_8
clf,"sklearn.linear_model.SGDClassifier(alpha=alpha[best_alpha],penalty='l2',loss='hinge',random_state=42)",CLUSTER_0,CLUSTER_8
clf1,"sklearn.linear_model.SGDClassifier(alpha=0.001,penalty='l2',loss='log',class_weight='balanced',random_state=0)",CLUSTER_0,CLUSTER_8
clf2,"sklearn.linear_model.SGDClassifier(alpha=1,penalty='l2',loss='hinge',class_weight='balanced',random_state=0)",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf,"sklearn.calibration.CalibratedClassifierCV(clf,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf1,"sklearn.calibration.CalibratedClassifierCV(clf1,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf2,"sklearn.calibration.CalibratedClassifierCV(clf2,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
sig_clf3,"sklearn.calibration.CalibratedClassifierCV(clf3,method=""sigmoid"")",CLUSTER_0,CLUSTER_8
dictionary,collections.defaultdict(int),CLUSTER_0,CLUSTER_8
text_feature_responseCoding[row_index][i],math.exp(sum_prob/len(row['Text'].split(),CLUSTER_0,CLUSTER_8
sum_prob+,"math.log(((dict_list[i].get(word,0)",CLUSTER_0,CLUSTER_8
train_text_feature_tfidfVectorizer_1,"sklearn.preprocessing.normalize(train_text_feature_tfidfVectorizer_1,axis=0)",CLUSTER_0,CLUSTER_8
test_text_feature_tfidfVectorizer_1,"sklearn.preprocessing.normalize(test_text_feature_tfidfVectorizer_1,axis=0)",CLUSTER_0,CLUSTER_8
cv_text_feature_tfidfVectorizer_1,"sklearn.preprocessing.normalize(cv_text_feature_tfidfVectorizer_1,axis=0)",CLUSTER_0,CLUSTER_8
train_gene_var_tfidfVectorizer,"scipy.sparse.hstack((train_gene_feature_tfidfVectorizer,train_variation_feature_tfidfVectorizer)",CLUSTER_0,CLUSTER_8
test_gene_var_tfidfVectorizer,"scipy.sparse.hstack((test_gene_feature_tfidfVectorizer,test_variation_feature_tfidfVectorizer)",CLUSTER_0,CLUSTER_8
cv_gene_var_tfidfVectorizer,"scipy.sparse.hstack((cv_gene_feature_tfidfVectorizer,cv_variation_feature_tfidfVectorizer)",CLUSTER_0,CLUSTER_8
train_x_tfidfVectorizer,"scipy.sparse.hstack((train_gene_var_tfidfVectorizer,train_text_feature_tfidfVectorizer_1)",CLUSTER_0,CLUSTER_8
test_x_tfidfVectorizer,"scipy.sparse.hstack((test_gene_var_tfidfVectorizer,test_text_feature_tfidfVectorizer_1)",CLUSTER_0,CLUSTER_8
cv_x_tfidfVectorizer,"scipy.sparse.hstack((cv_gene_var_tfidfVectorizer,cv_text_feature_tfidfVectorizer_1)",CLUSTER_0,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(alpha=i),CLUSTER_0,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(alpha=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf,sklearn.naive_bayes.MultinomialNB(alpha=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf3,sklearn.naive_bayes.MultinomialNB(alpha=0.001),CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=alpha[best_alpha]),CLUSTER_0,CLUSTER_8
clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=alpha[best_alpha],algorithm='brute')",CLUSTER_0,CLUSTER_8
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=i,criterion='gini',max_depth=j,random_state=42,n_jobs=-1)",CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=alpha[int(best_alpha/2),CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=alpha[int(best_alpha/2),CLUSTER_0,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=alpha[int(best_alpha/2),CLUSTER_0,CLUSTER_8
lr,sklearn.linear_model.LogisticRegression(C=i),CLUSTER_0,CLUSTER_8
lr,sklearn.linear_model.LogisticRegression(C=0.1),CLUSTER_0,CLUSTER_8
vclf,"sklearn.ensemble.VotingClassifier(estimators=[('lr',sig_clf1)",CLUSTER_0,CLUSTER_8
t,"numpy.arange(0.,tStop,tInc)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(1,figsize=(8,8)",CLUSTER_1,CLUSTER_9
sol,"scipy.integrate.odeint(f,y0,t,args=(params,)",CLUSTER_1,CLUSTER_9
ipython,IPython.get_ipython(),CLUSTER_12,CLUSTER_10
r,"requests.post(url,data=data)",CLUSTER_12,CLUSTER_10
r,"requests.post(url,data=data)",CLUSTER_12,CLUSTER_10
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,h)",CLUSTER_12,CLUSTER_10
figure,"matplotlib.pyplot.figure(figsize=(50,10)",CLUSTER_12,CLUSTER_10
ax,matplotlib.pyplot.subplot(len(datasets),CLUSTER_12,CLUSTER_10
ax,matplotlib.pyplot.subplot(len(datasets),CLUSTER_12,CLUSTER_10
X,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_10
t0,time.time(),CLUSTER_4,CLUSTER_0
t2,time.time(),CLUSTER_4,CLUSTER_0
t0,time.time(),CLUSTER_4,CLUSTER_0
t2,time.time(),CLUSTER_4,CLUSTER_0
X_train_stack,numpy.array([]),CLUSTER_4,CLUSTER_0
X_train_stack,numpy.array([]),CLUSTER_4,CLUSTER_0
X_train_stack,"numpy.concatenate((X_train_stack,t)",CLUSTER_4,CLUSTER_0
X_train_stack,"numpy.concatenate((X_train_stack,t)",CLUSTER_4,CLUSTER_0
x,"numpy.expand_dims(x,axis=0)",CLUSTER_4,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,labels,test_size=0.3,shuffle=True,random_state=1)",CLUSTER_4,CLUSTER_0
clf,"sklearn.model_selection.GridSearchCV(SVC(kernel='rbf',class_weight='balanced')",CLUSTER_4,CLUSTER_0
clf,"sklearn.model_selection.GridSearchCV(SVC(kernel='rbf',class_weight='balanced')",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_0
percent_vector_mean,numpy.zeros(Folds),CLUSTER_7,CLUSTER_5
Errores,numpy.ones(Folds),CLUSTER_7,CLUSTER_5
Errores,numpy.ones(Folds),CLUSTER_7,CLUSTER_5
N,numpy.size(Y[ind]),CLUSTER_7,CLUSTER_5
mape,"numpy.sum(abs((Y_est[ind].reshape(N,1)",CLUSTER_7,CLUSTER_5
DataBase,"numpy.delete(DataBase,i,0)",CLUSTER_7,CLUSTER_5
db,"numpy.loadtxt('BDatos/AirQuality.data',delimiter='\t')",CLUSTER_7,CLUSTER_5
kf,sklearn.model_selection.KFold(n_splits=Folds),CLUSTER_7,CLUSTER_5
kf,sklearn.model_selection.KFold(n_splits=Folds),CLUSTER_7,CLUSTER_5
standardization,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
standardization,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
model,"sklearn.svm.SVR(kernel=kernel,gamma=gamma,C=C)",CLUSTER_7,CLUSTER_5
clf,"sklearn.svm.SVR(kernel=kernel,gamma=gamma,C=C)",CLUSTER_7,CLUSTER_5
tiempo_i,time.time(),CLUSTER_7,CLUSTER_5
tiempo_i,time.time(),CLUSTER_7,CLUSTER_5
df_types,"pandas.DataFrame({
'Kernel':pd.Series(['lineal','lineal','lineal','lineal','lineal','lineal','rbf','rbf','rbf','rbf','rbf','rbf','rbf','rbf','rbf','rbf','rbf','rbf','rbf','rbf','rbf','rbf','rbf','rbf'])",CLUSTER_7,CLUSTER_5
house,"pandas.concat([h1,dummies.drop('YarrowPoint',axis='columns')",CLUSTER_7,CLUSTER_5
dummies,pandas.get_dummies(h1.city),CLUSTER_7,CLUSTER_5
df,pandas.read_csv('data.csv'),CLUSTER_7,CLUSTER_5
x,numpy.zeros(len(X.columns),CLUSTER_7,CLUSTER_5
loc_index,numpy.where(X.columns==city),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=10)",CLUSTER_7,CLUSTER_5
lr_clf,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
dt_clf,sklearn.tree.DecisionTreeRegressor(),CLUSTER_7,CLUSTER_5
dt_clf,sklearn.tree.DecisionTreeRegressor(random_state=42),CLUSTER_7,CLUSTER_5
forest_reg,sklearn.ensemble.RandomForestRegressor(n_estimators=40),CLUSTER_7,CLUSTER_5
forest_reg,"sklearn.ensemble.RandomForestRegressor(n_estimators=40,random_state=42)",CLUSTER_7,CLUSTER_5
lasso,sklearn.linear_model.Lasso(),CLUSTER_7,CLUSTER_5
lasso,sklearn.linear_model.Lasso(),CLUSTER_7,CLUSTER_5
cv,"sklearn.model_selection.ShuffleSplit(n_splits=5,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_5
cv,"sklearn.model_selection.ShuffleSplit(n_splits=5,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_5
gs,"sklearn.model_selection.GridSearchCV(config['model'],config['params'],cv=cv,return_train_score=False)",CLUSTER_7,CLUSTER_5
summary,pandas.Series(sdat.cus_rat),CLUSTER_5,CLUSTER_5
sdat,"pandas.read_csv('bestmarket.csv',sep=',')",CLUSTER_5,CLUSTER_5
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
data,"pandas.read_csv(loc,sep='\t',header=None)",CLUSTER_8,CLUSTER_11
X_grid,numpy.arange(min(X),CLUSTER_5,CLUSTER_5
dataset,pandas.read_csv('Position_Salaries.csv'),CLUSTER_5,CLUSTER_5
regressor,"sklearn.ensemble.RandomForestRegressor(n_estimators=300,random_state=0)",CLUSTER_5,CLUSTER_5
dot,"numpy.dot(A,B)",CLUSTER_1,CLUSTER_3
X_reduced,numpy.dot(eigen_vecs_subset.transpose(),CLUSTER_1,CLUSTER_3
idx_sorted,numpy.argsort(eigen_vals),CLUSTER_1,CLUSTER_3
covariance_matrix,"numpy.cov(X_demeaned,rowvar=False)",CLUSTER_1,CLUSTER_3
"eigen_vals,eigen_vecs","numpy.linalg.eigh(covariance_matrix,UPLO='L')",CLUSTER_1,CLUSTER_3
norma,numpy.linalg.norm(A),CLUSTER_1,CLUSTER_3
normb,numpy.linalg.norm(B),CLUSTER_1,CLUSTER_3
d,numpy.linalg.norm(A-B),CLUSTER_1,CLUSTER_3
data,"pandas.read_csv('capitals.txt',delimiter='')",CLUSTER_1,CLUSTER_3
df,pandas.read_csv('emoji_hack_word_embed.csv'),CLUSTER_8,CLUSTER_11
files,os.listdir(directory),CLUSTER_8,CLUSTER_11
df_total_tmp,pandas.DataFrame(data),CLUSTER_8,CLUSTER_11
df_total_woman,pandas.DataFrame(data),CLUSTER_8,CLUSTER_11
df_welf,pandas.DataFrame(),CLUSTER_8,CLUSTER_11
df_income,pandas.DataFrame(),CLUSTER_8,CLUSTER_11
df,"pandas.read_csv(sio,sep=sep)",CLUSTER_8,CLUSTER_11
df_welfare,"pandas.read_csv(directory+file_names[17],sep='\t')",CLUSTER_8,CLUSTER_11
matrix,numpy.arange(36),CLUSTER_8,CLUSTER_3
array,numpy.arange(12),CLUSTER_8,CLUSTER_3
vector,"numpy.array([10,11,12])",CLUSTER_8,CLUSTER_3
x,"numpy.array([[1,2],[3,4]])",CLUSTER_8,CLUSTER_3
y,"numpy.array([[5,6],[7,8]])",CLUSTER_8,CLUSTER_3
emg_dataframe,"pandas.read_csv(""../data/emgs.csv"")",CLUSTER_8,CLUSTER_3
predictions,"pandas.Series(np.ones(5,dtype=int)",CLUSTER_12,CLUSTER_3
full_data,pandas.read_csv(in_file),CLUSTER_12,CLUSTER_3
pinkwink_web,"pandas.read_csv('data/08.PinkWinkWebTraffic.csv',
encoding='utf-8',thousands=',',
names=['date','hit'],index_col=0)",CLUSTER_11,CLUSTER_3
time,"numpy.arange(0,len(pinkwink_web)",CLUSTER_11,CLUSTER_3
fx,"numpy.linspace(0,time[-1],1000)",CLUSTER_11,CLUSTER_3
f1,numpy.poly1d(fp1),CLUSTER_11,CLUSTER_3
f2,numpy.poly1d(f2p),CLUSTER_11,CLUSTER_3
f3,numpy.poly1d(f3p),CLUSTER_11,CLUSTER_3
f15,numpy.poly1d(f15p),CLUSTER_11,CLUSTER_3
fp1,"numpy.polyfit(time,traffic,1)",CLUSTER_11,CLUSTER_3
f2p,"numpy.polyfit(time,traffic,2)",CLUSTER_11,CLUSTER_3
f3p,"numpy.polyfit(time,traffic,3)",CLUSTER_11,CLUSTER_3
f15p,"numpy.polyfit(time,traffic,15)",CLUSTER_11,CLUSTER_3
randIdx2D,numpy.arange(len(data2D),CLUSTER_4,CLUSTER_7
start_time,time.time(),CLUSTER_4,CLUSTER_7
CURRENT_DIR,os.getcwd(),CLUSTER_4,CLUSTER_7
n,numpy.arange(cells.shape[0]),CLUSTER_4,CLUSTER_0
cells,numpy.array(data),CLUSTER_4,CLUSTER_0
labels,numpy.array(labels),CLUSTER_4,CLUSTER_0
infected,"os.listdir(""../Malaria/cell_images/Parasitized/"")",CLUSTER_4,CLUSTER_0
uninfected,"os.listdir(""../Malaria/cell_images/Uninfected/"")",CLUSTER_4,CLUSTER_0
"train_x,x,train_y,y","sklearn.model_selection.train_test_split(cells,labels,test_size=0.2,random_state=420)",CLUSTER_4,CLUSTER_0
"eval_x,test_x,eval_y,test_y","sklearn.model_selection.train_test_split(x,y,test_size=0.5,random_state=420)",CLUSTER_4,CLUSTER_0
minibatch,"random.sample(self.memory,batch_size)",CLUSTER_2,CLUSTER_10
mini_batch,"random.sample(self.memory,batch_size)",CLUSTER_2,CLUSTER_10
first,numpy.array([float(i),CLUSTER_2,CLUSTER_10
second,numpy.array([float(i),CLUSTER_2,CLUSTER_10
first,numpy.array([float(i),CLUSTER_2,CLUSTER_10
second,numpy.array([float(i),CLUSTER_2,CLUSTER_10
first,numpy.array(first),CLUSTER_2,CLUSTER_10
X,"numpy.zeros((batch_size,self.env.observation_space.shape[0])",CLUSTER_2,CLUSTER_10
Y,"numpy.zeros((batch_size,self.env.action_space.n)",CLUSTER_2,CLUSTER_10
update_input,"numpy.zeros((batch_size,self.state_size)",CLUSTER_2,CLUSTER_10
update_target,"numpy.zeros((batch_size,self.action_size)",CLUSTER_2,CLUSTER_10
first,"numpy.mean(first.reshape(-1,100)",CLUSTER_2,CLUSTER_10
second,"numpy.mean(second.reshape(-1,100)",CLUSTER_2,CLUSTER_10
first,"numpy.mean(first.reshape(-1,100)",CLUSTER_2,CLUSTER_10
second,"numpy.mean(second.reshape(-1,100)",CLUSTER_2,CLUSTER_10
state,"numpy.reshape(state,[1,state_size])",CLUSTER_2,CLUSTER_10
next_state,"numpy.reshape(next_state,[1,state_size])",CLUSTER_2,CLUSTER_10
state,"numpy.reshape(state,[1,state_size])",CLUSTER_2,CLUSTER_10
next_state,"numpy.reshape(next_state,[1,state_size])",CLUSTER_2,CLUSTER_10
state,"numpy.reshape(state,[1,state_size])",CLUSTER_2,CLUSTER_10
next_state,"numpy.reshape(next_state,[1,state_size])",CLUSTER_2,CLUSTER_10
state,"numpy.reshape(state,[1,state_size])",CLUSTER_2,CLUSTER_10
next_state,"numpy.reshape(next_state,[1,state_size])",CLUSTER_2,CLUSTER_10
self.memory,collections.deque(maxlen=10000),CLUSTER_2,CLUSTER_10
self.memory,collections.deque(maxlen=10000),CLUSTER_2,CLUSTER_10
df_matches,pandas.DataFrame(),CLUSTER_11,CLUSTER_11
df_matches,"pandas.concat([df_matches,new_df])",CLUSTER_11,CLUSTER_11
new_df,pandas.read_json(matches_path+str(m_dir),CLUSTER_11,CLUSTER_11
df_event,"pandas.read_json(data_dir+""/events/""+events_json[0])",CLUSTER_11,CLUSTER_11
df_lineups,"pandas.read_json(data_dir+""/lineups/""+lineups_json[1])",CLUSTER_11,CLUSTER_11
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.15)",CLUSTER_4,CLUSTER_0
Qtable,json.load(f),CLUSTER_4,CLUSTER_11
positiveGrid,numpy.zeros(((xLen+1),CLUSTER_4,CLUSTER_11
block,numpy.ones((int(36),CLUSTER_4,CLUSTER_11
grid,numpy.ones(((xLen+1),CLUSTER_4,CLUSTER_11
block,numpy.ones((int(36),CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.axes(),CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.axes(),CLUSTER_4,CLUSTER_11
my_data,"numpy.genfromtxt(file,delimiter=',')",CLUSTER_4,CLUSTER_11
user_movie_data,"pandas.merge(rating_data,movie_data,on='movieId')",CLUSTER_5,CLUSTER_1
rating_data,pandas.read_csv('ratings.csv'),CLUSTER_5,CLUSTER_1
movie_data,pandas.read_csv('movies.csv'),CLUSTER_5,CLUSTER_1
corr,numpy.corrcoef(matrix),CLUSTER_5,CLUSTER_1
SVD,sklearn.decomposition.TruncatedSVD(n_components=12),CLUSTER_5,CLUSTER_1
ordered_labels,numpy.arange(labels.shape[0]),CLUSTER_7,CLUSTER_8
bin,numpy.array(FIC.values),CLUSTER_7,CLUSTER_8
y_voted_labels,numpy.zeros(y_true.shape),CLUSTER_7,CLUSTER_8
bins,"numpy.concatenate((labels,[np.max(labels)",CLUSTER_7,CLUSTER_8
winner,numpy.argmax(hist),CLUSTER_7,CLUSTER_8
means_cluster_centers,"numpy.sort(km.cluster_centers_,axis=0)",CLUSTER_7,CLUSTER_8
Data_pca,"numpy.insert(X_train,2,Data_FIC,axis=1)",CLUSTER_7,CLUSTER_8
labels,numpy.unique(y_true),CLUSTER_7,CLUSTER_8
labels,numpy.unique(y_true),CLUSTER_7,CLUSTER_8
"hist,_","numpy.histogram(y_true[y_pred==cluster],bins=bins)",CLUSTER_7,CLUSTER_8
df_FIC_bin,pandas.DataFrame({'FIC_bin':FIC_bin}),CLUSTER_7,CLUSTER_8
elem_clus,pandas.DataFrame([]),CLUSTER_7,CLUSTER_8
elem_clus,pandas.DataFrame([]),CLUSTER_7,CLUSTER_8
dfx,"pandas.DataFrame(data=X_train,columns=Data_X.columns[0:])",CLUSTER_7,CLUSTER_8
dfx_trans,pandas.DataFrame(data=dfx_trans),CLUSTER_7,CLUSTER_8
Data_bin,"pandas.concat((Data_X,df_FIC_bin)",CLUSTER_7,CLUSTER_8
FIC_bin,"pandas.cut(bin,bins=4,labels=False)",CLUSTER_7,CLUSTER_8
Data,pandas.read_csv(dataset),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.KMeans(n_clusters=i,init='k-means++',max_iter=100,random_state=0)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=i,init='k-means++',random_state=0)",CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.MiniBatchKMeans(n_clusters=true_k,init='k-means++',n_init=1,
init_size=1000,batch_size=1000,random_state=0)",CLUSTER_7,CLUSTER_8
km,"sklearn.cluster.MiniBatchKMeans(n_clusters=i,init='k-means++',n_init=1,
init_size=1000,batch_size=1000,random_state=0)",CLUSTER_7,CLUSTER_8
pca,"sklearn.decomposition.PCA(n_components=None,random_state=0)",CLUSTER_7,CLUSTER_8
pca,"sklearn.decomposition.PCA(n_components=4,random_state=0)",CLUSTER_7,CLUSTER_8
t0,time.time(),CLUSTER_7,CLUSTER_8
t0,time.time(),CLUSTER_7,CLUSTER_8
kdtree,"scipy.spatial.cKDTree(Data.iloc[:,0:21])",CLUSTER_7,CLUSTER_8
sample_submit,pandas.read_csv(path1),CLUSTER_7,CLUSTER_5
test_data,"pandas.read_csv(path2,sep='')",CLUSTER_7,CLUSTER_5
train_data,"pandas.read_csv(path3,sep='')",CLUSTER_7,CLUSTER_5
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3,random_state=0)",CLUSTER_7,CLUSTER_5
tests,sklearn.metrics.mean_absolute_error(reg.predict(X_test),CLUSTER_7,CLUSTER_5
tests,sklearn.metrics.mean_absolute_error(reg.predict(X_test),CLUSTER_7,CLUSTER_5
trains,"sklearn.model_selection.cross_val_score(reg,X_train,Y_train,cv=5,scoring='neg_mean_absolute_error')",CLUSTER_7,CLUSTER_5
trains,"sklearn.model_selection.cross_val_score(reg,X_train,Y_train,cv=5,scoring='neg_mean_absolute_error')",CLUSTER_7,CLUSTER_5
Top15['bins'],"pandas.cut(Top15['%Renewable'],5)",CLUSTER_8,CLUSTER_3
df,"pandas.merge(pandas.merge(energy,GDP,on='Country')",CLUSTER_8,CLUSTER_3
a,"pandas.merge(pandas.merge(energy,GDP,on='Country',how='inner')",CLUSTER_8,CLUSTER_3
a1,"pandas.merge(pandas.merge(energy,GDP,on='Country',how='outer')",CLUSTER_8,CLUSTER_3
GDP,"pandas.read_csv('world_bank.csv',skiprows=4)",CLUSTER_8,CLUSTER_3
GDP,"pandas.read_csv('world_bank.csv',skiprows=4)",CLUSTER_8,CLUSTER_3
energy,pandas.read_excel('EnergyIndicators.xls'),CLUSTER_8,CLUSTER_3
ScimEn,pandas.read_excel('scimagojr-3.xlsx'),CLUSTER_8,CLUSTER_3
energy,pandas.read_excel('EnergyIndicators.xls'),CLUSTER_8,CLUSTER_3
ScimEn,pandas.read_excel('scimagojr-3.xlsx'),CLUSTER_8,CLUSTER_3
a51,numpy.float64(a5),CLUSTER_8,CLUSTER_3
Top15['citabledocsperCapita'],numpy.float64(Top15['citabledocsperCapita']),CLUSTER_8,CLUSTER_3
Top15['EnergySupplyperCapita'],numpy.float64(Top15['EnergySupplyperCapita']),CLUSTER_8,CLUSTER_3
tnum,"numpy.arange(0,1000)",CLUSTER_1,CLUSTER_10
twt,"numpy.arange(0,buf.bhead['num_samp'])",CLUSTER_1,CLUSTER_10
twt,"numpy.arange(0,buf.bhead['num_samp'])",CLUSTER_1,CLUSTER_10
tmp_trcs,"numpy.arange(trc0,trc0+fold)",CLUSTER_1,CLUSTER_10
trc,numpy.array(trc),CLUSTER_1,CLUSTER_10
tdata,numpy.array(tdata),CLUSTER_1,CLUSTER_10
foldarray,"numpy.zeros([il_num,xl_num])",CLUSTER_1,CLUSTER_10
il,"numpy.linspace(il_min,il_max,il_num,dtype='int')",CLUSTER_1,CLUSTER_10
xl,"numpy.linspace(xl_min,xl_max,xl_num,dtype='int')",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(num=1,figsize=(9,9)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(num=1,figsize=(12,12)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(num=1,figsize=(12,3)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(num=1,figsize=(12,9)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(num=1,figsize=(12,9)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(num=1,figsize=(12,3)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(num=1,figsize=(15,3)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(num=1,figsize=(4,8)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(num=1,figsize=(12,12)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(num=1,figsize=(15,12)",CLUSTER_1,CLUSTER_10
ax1a,"matplotlib.pyplot.subplot2grid((5,1)",CLUSTER_1,CLUSTER_10
ax2,"matplotlib.pyplot.subplot2grid((5,1)",CLUSTER_1,CLUSTER_10
ax1b,matplotlib.pyplot.twinx(ax1a),CLUSTER_1,CLUSTER_10
log_string,requests.get(data_path+log_name),CLUSTER_10,CLUSTER_4
counts,collections.Counter(chain.from_iterable(seqs_ngrams),CLUSTER_10,CLUSTER_4
loop_patterns,collections.Counter(),CLUSTER_10,CLUSTER_4
loops,collections.defaultdict(int),CLUSTER_10,CLUSTER_4
ind,numpy.arange(N),CLUSTER_7,CLUSTER_8
y,numpy.array(label_list),CLUSTER_7,CLUSTER_8
y,numpy.array(label_list),CLUSTER_7,CLUSTER_8
np_related_words,numpy.array(list_of_related_word_lists),CLUSTER_7,CLUSTER_8
W,numpy.dot(np.transpose(V),CLUSTER_7,CLUSTER_8
M,numpy.dot(np.transpose(V),CLUSTER_7,CLUSTER_8
A,"numpy.ones([n,n],np.float32)",CLUSTER_7,CLUSTER_8
S,numpy.absolute(S),CLUSTER_7,CLUSTER_8
A,numpy.absolute(A),CLUSTER_7,CLUSTER_8
"U,D,V","numpy.linalg.svd(A,full_matrices=False)",CLUSTER_7,CLUSTER_8
"U,D,V","numpy.linalg.svd(P,full_matrices=False)",CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(data=bag_words.toarray(),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(data=tfidf_mat.toarray(),CLUSTER_7,CLUSTER_8
corpus_df,pandas.DataFrame(data=corpus_bag_words.toarray(),CLUSTER_7,CLUSTER_8
corpus_tfidf_df,pandas.DataFrame(data=corpus_tfidf_mat.toarray(),CLUSTER_7,CLUSTER_8
length_df,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
folders,os.listdir(folder),CLUSTER_7,CLUSTER_8
docs,os.listdir(path),CLUSTER_7,CLUSTER_8
p1,"matplotlib.pyplot.bar(ind,negatives,width,color='b')",CLUSTER_7,CLUSTER_8
p2,"matplotlib.pyplot.bar(ind,positives,width,
bottom=negatives,color='y')",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(14,10)",CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_7,CLUSTER_8
tsne,sklearn.manifold.TSNE(n_components=2),CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.scatter(X_tsne[:,0],X_tsne[:,1],c=y)",CLUSTER_7,CLUSTER_8
X_norm,sklearn.preprocessing.scale(X_tsne),CLUSTER_7,CLUSTER_8
random_indexs,"random.sample(range(0,len(id2w)",CLUSTER_7,CLUSTER_8
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
nbh_onehot,"pandas.get_dummies(nbh_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
df,"pandas.read_csv(""TXcities.csv"")",CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_3,CLUSTER_10
train_accuracy,numpy.mean(y_train_pred==y_train),CLUSTER_3,CLUSTER_10
val_accuracy,numpy.mean(y_val_pred==y_val),CLUSTER_3,CLUSTER_10
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_3,CLUSTER_10
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_3,CLUSTER_10
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_3,CLUSTER_10
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_3,CLUSTER_10
grad_difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
l_l,numpy.loadtxt(base+'lrs_losses.txt'),CLUSTER_4,CLUSTER_8
yhat,"scipy.signal.savgol_filter(losses[n_skip_beginning:-n_skip_end],window_size,3)",CLUSTER_4,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_7
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_6,CLUSTER_10
filter_vals,"numpy.array([[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1]])",CLUSTER_6,CLUSTER_10
filters,"numpy.array([filter_1,filter_2,filter_3,filter_4])",CLUSTER_6,CLUSTER_10
response,requests.get(url),CLUSTER_9,CLUSTER_2
response,requests.get(url),CLUSTER_9,CLUSTER_2
query_df,"pandas.DataFrame({'unitofassessment':units_of_assessment,'numberofstudies':uoa_report_count})",CLUSTER_9,CLUSTER_2
units_of_assessment,"pandas.Series(['ClinicalMedicine','PublicHealth,HealthServicesandPrimaryCare',
'AlliedHealthProfessions,Dentistry,NursingandPharmacy',
'Psychology,PsychiatryandNeuroscience','BiologicalSciences',
'Agriculture,VeterinaryandFoodScience',
'EarthSystemsandEnvironmentalSciences','Chemistry','Physics',
'MathematicalSciences','ComputerScienceandInformatics',
'Aeronautical,Mechanical,ChemicalandManufacturingEngineering',
'ElectricalandElectronicEngineering,MetallurgyandMaterials',
'CivilandConstructionEngineering','GeneralEngineering',
'Architecture,BuiltEnvironmentandPlanning',
'Geography,EnvironmentalStudiesandArchaeology',
'EconomicsandEconometrics','BusinessandManagementStudies','Law',
'PoliticsandInternationalStudies','SocialWorkandSocialPolicy',
'Sociology','AnthropologyandDevelopmentStudies','Education',
'SportandExerciseSciences,LeisureandTourism','AreaStudies',
'ModernLanguagesandLinguistics','EnglishLanguageandLiterature',
'History','Classics','Philosophy','TheologyandReligiousStudies',
'ArtandDesign:History,PracticeandTheory',
'Music,Drama,DanceandPerformingArts',
'Communication,CulturalandMediaStudies,LibraryandInformationManagement'])",CLUSTER_9,CLUSTER_2
uoa_report_count,"pandas.Series([383,163,343,317,257,126,171,125,181,210,251,120,126,51,240,
142,235,98,411,216,166,187,97,80,215,122,69,190,281,263,59,98,75,231,194,159])",CLUSTER_9,CLUSTER_2
data,requests.get('https://impact.ref.ac.uk/casestudies/Results.aspx?UoA='+str(uoa),CLUSTER_9,CLUSTER_2
x_pos,numpy.arange(len(query_df['unitofassessment']),CLUSTER_9,CLUSTER_2
train,pandas.read_csv('train.csv'),CLUSTER_9,CLUSTER_2
test,pandas.read_csv('test.csv'),CLUSTER_9,CLUSTER_2
'''clf,"sklearn.tree.DecisionTreeClassifier(max_depth=5,min_samples_leaf=5,min_samples_split=25)",CLUSTER_9,CLUSTER_2
label_fit,sklearn.preprocessing.LabelEncoder(),CLUSTER_9,CLUSTER_2
bin_fit,sklearn.preprocessing.LabelBinarizer(),CLUSTER_9,CLUSTER_2
clf,"sklearn.ensemble.GradientBoostingClassifier(loss='deviance',learning_rate=0.05,n_estimators=400,
subsample=0.7)",CLUSTER_9,CLUSTER_2
r,requests.get(url),CLUSTER_9,CLUSTER_2
dt_3apli_25ruido,"pandas.DataFrame(columns=['App1-SLLC','App1-DRAM','App1-NET','App2-SLLC','App2-DRAM','App2-NET','App3-SLLC','App3-DRAM','App3-NET'])",CLUSTER_5,CLUSTER_1
dt_3apli_25ruido_nominal,pandas.read_csv('3apli_25ruido.csv'),CLUSTER_5,CLUSTER_1
dt_target,numpy.array(dt_category),CLUSTER_5,CLUSTER_1
dt_data,numpy.array(dt_3apli_25ruido),CLUSTER_5,CLUSTER_1
loo,sklearn.model_selection.LeaveOneOut(),CLUSTER_5,CLUSTER_1
gNB,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_1
df1,pandas.read_csv('restaurant_info_kolkata.csv'),CLUSTER_9,CLUSTER_2
page_source,"re.sub('<br>','',page_source)",CLUSTER_9,CLUSTER_2
page_source,"re.sub('<br/>','',page_source)",CLUSTER_9,CLUSTER_2
page_source,"re.sub('<br/>','',page_source)",CLUSTER_9,CLUSTER_2
r,"requests.get(url,headers=headers)",CLUSTER_9,CLUSTER_2
df1,pandas.DataFrame(dict(id=range(4),CLUSTER_11,CLUSTER_3
df2,pandas.DataFrame(dict(id=list(range(3),CLUSTER_11,CLUSTER_3
vals,pandas.Series([float(i),CLUSTER_11,CLUSTER_3
segments_merged,"pandas.merge(vessels,segments,left_index=True,right_on='mmsi')",CLUSTER_11,CLUSTER_3
quantiles,"pandas.qcut(segments.seg_length,[0,0.01,0.05,0.95,0.99,1])",CLUSTER_11,CLUSTER_3
segments,"pandas.read_csv(""data/AIS/transit_segments.csv"")",CLUSTER_11,CLUSTER_3
vessels,"pandas.read_csv(""data/AIS/vessel_information.csv"",index_col='mmsi')",CLUSTER_11,CLUSTER_3
cdystonia,"pandas.read_csv(""data/cdystonia.csv"",index_col=None)",CLUSTER_11,CLUSTER_3
mb1,"pandas.read_excel('data/microbiome/MID1.xls','Sheet1',index_col=0,header=None)",CLUSTER_11,CLUSTER_3
mb2,"pandas.read_excel('data/microbiome/MID2.xls','Sheet1',index_col=0,header=None)",CLUSTER_11,CLUSTER_3
now,datetime.datetime.now(),CLUSTER_11,CLUSTER_3
missing_data,pandas.DataFrame({'MissingRatio':df_na}),CLUSTER_7,CLUSTER_3
mini,"pandas.DataFrame(df.loc[maxindex,:])",CLUSTER_7,CLUSTER_3
maxi,"pandas.DataFrame(df.loc[minindex,:])",CLUSTER_7,CLUSTER_3
info,"pandas.DataFrame(df[""profit""].sort_values(ascending=False)",CLUSTER_7,CLUSTER_3
number,pandas.DataFrame(number),CLUSTER_7,CLUSTER_3
month,pandas.DataFrame(month),CLUSTER_7,CLUSTER_3
y,"pandas.Series(x.split(""|"")",CLUSTER_7,CLUSTER_3
earnings,"pandas.pivot_table(df,
values=""profit"",
index=""production_companies"",
aggfunc=np.sum)",CLUSTER_7,CLUSTER_3
df,pandas.read_csv(filepath),CLUSTER_7,CLUSTER_3
df['release_date'],pandas.to_datetime(df['release_date']),CLUSTER_7,CLUSTER_3
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_3
ax,seaborn.distplot(df['popularity']),CLUSTER_7,CLUSTER_3
pd_join_1,"pandas.merge(data,gdp_data,on=['CountryCode','Year','CountryName'])",CLUSTER_8,CLUSTER_4
data,pandas.read_csv('./data/data_csv.csv'),CLUSTER_8,CLUSTER_4
gdp_data,pandas.read_csv('./data/core/gdp/data/gdp_csv.csv'),CLUSTER_8,CLUSTER_4
df,"pandas.read_csv(csv_file,encoding=""utf-8"")",CLUSTER_1,CLUSTER_9
df,"pandas.read_csv(csv_file,encoding=""utf-8"")",CLUSTER_1,CLUSTER_9
"popt,pcov","scipy.optimize.curve_fit(logistic_function,x,confirm)",CLUSTER_1,CLUSTER_9
x,numpy.arange(len(confirm),CLUSTER_1,CLUSTER_9
predict_x,numpy.array(predict_x),CLUSTER_1,CLUSTER_9
exp,numpy.exp(r*(t-t0),CLUSTER_1,CLUSTER_9
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_11
since,time.time(),CLUSTER_6,CLUSTER_11
time_elapsed,time.time(),CLUSTER_6,CLUSTER_11
df_gene,"pandas.concat([df_vgene,df_dgene,df_jgene,df_cgene],axis=0)",CLUSTER_1,CLUSTER_3
df,pandas.read_csv(r'/Users/andrewssf/Documents/VDJ_Analysis/data/S10_filtered_contig_annotations.csv'),CLUSTER_1,CLUSTER_3
"f,a","matplotlib.pyplot.subplots(3,1)",CLUSTER_1,CLUSTER_3
t,time.localtime(),CLUSTER_1,CLUSTER_3
timestamp,"time.strftime('%m%d_%H%M',t)",CLUSTER_1,CLUSTER_3
clusters_df,"pandas.DataFrame({""num_clusters"":cluster_range,""cluster_errors"":cluster_errors})",CLUSTER_7,CLUSTER_8
centroid_df,"pandas.DataFrame(centroids,columns=list(interest_df_z)",CLUSTER_7,CLUSTER_8
churn_labels,"pandas.DataFrame(kmeans.labels_,columns=list(['labels'])",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame({'Clusters':labels,'Churn':Y})",CLUSTER_7,CLUSTER_8
Churn_df,"pandas.read_csv(""ACMETelephoneABT.csv"")",CLUSTER_7,CLUSTER_8
plt,"seaborn.pairplot(Churn_df_trimmed5[['occupation','regionType','marriageStatus','children','income','numHandsets','smartPhone','currentHandsetPrice','churn']],diag_kind=""kde"")",CLUSTER_7,CLUSTER_8
plt,"seaborn.pairplot(Churn_df_trimmed5[['creditRating','homeOwner','creditCard','avgBill','avgMins','avgrecurringCharge','avgOverBundleMins','avgRoamCalls','churn']],diag_kind=""kde"")",CLUSTER_7,CLUSTER_8
plt,"seaborn.pairplot(Churn_df_trimmed5[['callMinutesChangePct','billAmountChangePct','avgReceivedMins','avgOutCalls','avgInCalls','peakOffPeakRatio','peakOffPeakRatioChangePct','avgDroppedCalls','churn']],diag_kind=""kde"")",CLUSTER_7,CLUSTER_8
plt,"seaborn.pairplot(Churn_df_trimmed5[['lifeTime','lastMonthCustomerCareCalls','numRetentionCalls','numRetentionOffersAccepted','newFrequentNumbers','age_imp','handsetAge_Imp','churn']],diag_kind=""kde"")",CLUSTER_7,CLUSTER_8
clusters,"sklearn.cluster.KMeans(num_clusters,n_init=5)",CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=5,n_init=15,random_state=2345)",CLUSTER_7,CLUSTER_8
f_vec,numpy.vectorize(f),CLUSTER_1,CLUSTER_10
grad_f_vec,numpy.vectorize(grad_f),CLUSTER_1,CLUSTER_10
x0,"numpy.linspace(-2,2,11)",CLUSTER_1,CLUSTER_10
x1,"numpy.linspace(-2,2,11)",CLUSTER_1,CLUSTER_10
"X0,X1","numpy.meshgrid(x0,x1)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_1,CLUSTER_10
accuracies_mean,numpy.array([np.mean(v),CLUSTER_3,CLUSTER_10
accuracies_std,numpy.array([np.std(v),CLUSTER_3,CLUSTER_10
idxs,numpy.flatnonzero(y_train==y),CLUSTER_3,CLUSTER_10
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
difference,"numpy.linalg.norm(dists-dists_one,ord='fro')",CLUSTER_3,CLUSTER_10
difference,"numpy.linalg.norm(dists-dists_two,ord='fro')",CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
response,"requests.get(""http://pages.stern.nyu.edu/~marriaga"")",CLUSTER_10,CLUSTER_12
response,"requests.get(""https://www.stern.nyu.edu/experience-stern/news-events"")",CLUSTER_10,CLUSTER_12
a,"numpy.array([2+3j,4+5j,6-7j,8+9j])",CLUSTER_3,CLUSTER_6
df,pandas.DataFrame(),CLUSTER_7,CLUSTER_9
"statistic,pvalue","scipy.stats.f_oneway(df[""A""],df[""B""])",CLUSTER_7,CLUSTER_9
iris_data,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(iris_data.data,iris_data.target,test_size=0.33,random_state=40
,shuffle=True)",CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.LogisticRegression(C=1),CLUSTER_5,CLUSTER_5
model,"sklearn.linear_model.LogisticRegression(solver='sag',multi_class='multinomial')",CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(data=boston.data,columns=boston.feature_names)",CLUSTER_8,CLUSTER_1
boston,sklearn.datasets.load_boston(),CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_8,CLUSTER_1
slr,sklearn.linear_model.LinearRegression(),CLUSTER_8,CLUSTER_1
df,pandas.DataFrame(blobs),CLUSTER_11,CLUSTER_12
start,time.time(),CLUSTER_11,CLUSTER_12
end,time.time(),CLUSTER_11,CLUSTER_12
start,time.time(),CLUSTER_11,CLUSTER_12
end,time.time(),CLUSTER_11,CLUSTER_12
x,"numpy.linspace(0,1,10)",CLUSTER_1,CLUSTER_9
x_points,"numpy.linspace(0,1,1000)",CLUSTER_1,CLUSTER_9
ret,"numpy.append(ret,
np.sqrt(0.5*regularization*np.square(p)",CLUSTER_1,CLUSTER_9
f,numpy.poly1d(p),CLUSTER_1,CLUSTER_9
p_lsq,"scipy.optimize.leastsq(residuals_func,p_init,args=(x,y)",CLUSTER_1,CLUSTER_9
p_lsq_regularization,"scipy.optimize.leastsq(
residuals_func_regularization,p_init,args=(x,y)",CLUSTER_1,CLUSTER_9
train_hist,numpy.zeros(num_epochs),CLUSTER_7,CLUSTER_8
test_hist,numpy.zeros(num_epochs),CLUSTER_7,CLUSTER_8
new_seq,"numpy.append(new_seq,[pred])",CLUSTER_7,CLUSTER_8
new_seq,"numpy.append(new_seq,[pred])",CLUSTER_7,CLUSTER_8
confirmed_train,pandas.DataFrame(latest.groupby('ObservationDate'),CLUSTER_7,CLUSTER_8
recovered_train,pandas.DataFrame(latest.groupby('ObservationDate'),CLUSTER_7,CLUSTER_8
predicted_cases,"pandas.Series(
data=predicted_cases,
index=predicted_index
)",CLUSTER_7,CLUSTER_8
predicted_index,"pandas.date_range(
start=daily_cases.index[-1],
periods=DAYS_TO_PREDICT+1,
closed='right'
)",CLUSTER_7,CLUSTER_8
covid_df,pandas.read_csv(path),CLUSTER_7,CLUSTER_8
covid_data,pandas.read_csv(path2),CLUSTER_7,CLUSTER_8
global_data,pandas.read_csv(path3),CLUSTER_7,CLUSTER_8
us_confirmed,pandas.read_csv(path4),CLUSTER_7,CLUSTER_8
confirmed,pandas.read_csv(path5),CLUSTER_7,CLUSTER_8
us_deaths,pandas.read_csv(path6),CLUSTER_7,CLUSTER_8
deaths,pandas.read_csv(path7),CLUSTER_7,CLUSTER_8
recovered,pandas.read_csv(path8),CLUSTER_7,CLUSTER_8
latest,"pandas.read_csv(""/kaggle/input/novel-corona-virus-2019-dataset/covid_19_data.csv"")",CLUSTER_7,CLUSTER_8
covid_df['observation_date'],pandas.to_datetime(covid_df['ObservationDate']),CLUSTER_7,CLUSTER_8
covid_df['last_update'],pandas.to_datetime(covid_df['LastUpdate']),CLUSTER_7,CLUSTER_8
confirmed.index,pandas.to_datetime(confirmed.index),CLUSTER_7,CLUSTER_8
"f,ax",matplotlib.pyplot.subplots(1),CLUSTER_7,CLUSTER_8
"f,ax",matplotlib.pyplot.subplots(1),CLUSTER_7,CLUSTER_8
mse,"sklearn.metrics.mean_squared_error(y_true=covid_test['deaths'],
y_pred=covid_test_fcst['yhat'])",CLUSTER_7,CLUSTER_8
mae,"sklearn.metrics.mean_absolute_error(y_true=covid_test['deaths'],
y_pred=covid_test_fcst['yhat'])",CLUSTER_7,CLUSTER_8
rmse,math.sqrt(mse),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
m,"re.match(
r'(?x)",CLUSTER_10,CLUSTER_4
m,"re.match(
r'(?x)",CLUSTER_10,CLUSTER_4
L,"re.split(pat,dna)",CLUSTER_10,CLUSTER_4
misspelt,"re.split('\W+',misspelt)",CLUSTER_10,CLUSTER_4
lis,"re.findall(misspelt,words,ENHANCEMATCH)",CLUSTER_10,CLUSTER_4
fi,re.finditer(r'(?x),CLUSTER_10,CLUSTER_4
fi,re.finditer(r'(?x),CLUSTER_10,CLUSTER_4
fi,re.finditer(r'(?x),CLUSTER_10,CLUSTER_4
fi,re.finditer(r'(?x),CLUSTER_10,CLUSTER_4
p,re.compile(r'The'),CLUSTER_10,CLUSTER_4
df,"pandas.read_csv(""../data/diabetes_full.csv"")",CLUSTER_1,CLUSTER_3
display_grid,"numpy.zeros((size*n_cols,images_per_row*size)",CLUSTER_4,CLUSTER_0
result_num,numpy.argmax(res),CLUSTER_4,CLUSTER_0
prediction_result,numpy.argmax(prediction),CLUSTER_4,CLUSTER_0
prediction_result,numpy.argmax(prediction),CLUSTER_4,CLUSTER_0
channel_image,"numpy.clip(channel_image,0,255)",CLUSTER_4,CLUSTER_0
to_predict,numpy.reshape(face.flatten(),CLUSTER_4,CLUSTER_0
to_predict,numpy.reshape(face.flatten(),CLUSTER_4,CLUSTER_0
face,numpy.reshape(face.flatten(),CLUSTER_4,CLUSTER_0
face,numpy.reshape(face.flatten(),CLUSTER_4,CLUSTER_0
angle,"numpy.degrees(np.arctan2(dY,dX)",CLUSTER_4,CLUSTER_0
dist,numpy.sqrt((dX**2),CLUSTER_4,CLUSTER_0
classes,numpy.unique(y_train),CLUSTER_4,CLUSTER_0
X_train,"numpy.load(local_path+""X_train.npy"")",CLUSTER_4,CLUSTER_0
X_test,"numpy.load(local_path+""X_test.npy"")",CLUSTER_4,CLUSTER_0
y_train,"numpy.load(local_path+""y_train.npy"")",CLUSTER_4,CLUSTER_0
y_test,"numpy.load(local_path+""y_test.npy"")",CLUSTER_4,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_0
new_extracted_face,"scipy.ndimage.zoom(extracted_face,(shape_x/extracted_face.shape[0],shape_y/extracted_face.shape[1])",CLUSTER_4,CLUSTER_0
face,"scipy.ndimage.zoom(face,(shape_x/face.shape[0],shape_y/face.shape[1])",CLUSTER_4,CLUSTER_0
pattern,"re.compile(""<p>.*?<\/p>"")",CLUSTER_10,CLUSTER_4
pattern,"re.compile(""<a.*?>"")",CLUSTER_10,CLUSTER_4
cx,numpy.zeros(nx+1),CLUSTER_1,CLUSTER_10
x,numpy.zeros(nx+1),CLUSTER_1,CLUSTER_10
D,"numpy.zeros((nx+1,nx+1)",CLUSTER_1,CLUSTER_10
x,numpy.zeros(nx+1),CLUSTER_1,CLUSTER_10
err,numpy.sum((df_num-df_ana),CLUSTER_1,CLUSTER_10
x[ix],numpy.cos(np.pi*ix/nx),CLUSTER_1,CLUSTER_10
x[ix],numpy.cos(ix*np.pi/nx),CLUSTER_1,CLUSTER_10
f,numpy.exp(-1/s**2*x**2),CLUSTER_1,CLUSTER_10
L,numpy.array(OneHotEncoder(),CLUSTER_5,CLUSTER_10
L,numpy.concatenate([[1foriinrange(10),CLUSTER_5,CLUSTER_10
L,numpy.concatenate([[iforjinrange(100),CLUSTER_5,CLUSTER_10
D,"numpy.concatenate([np.random.normal(x,size=dim*npts)",CLUSTER_5,CLUSTER_10
D,"numpy.concatenate([D,np.ones(nclasses*npts)",CLUSTER_5,CLUSTER_10
Labels,numpy.concatenate([[iforjinrange(npts),CLUSTER_5,CLUSTER_10
M,"numpy.concatenate([-sigma(W,D)",CLUSTER_5,CLUSTER_10
M,"numpy.concatenate([-sigma(W,D)",CLUSTER_5,CLUSTER_10
n,"numpy.exp(np.dot(W,D)",CLUSTER_5,CLUSTER_10
x,"numpy.linspace(-4,4,100)",CLUSTER_5,CLUSTER_10
_,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_5,CLUSTER_10
_,matplotlib.pyplot.plot(range(len(eL),CLUSTER_5,CLUSTER_10
_,"matplotlib.pyplot.plot(x,y)",CLUSTER_5,CLUSTER_10
_,"matplotlib.pyplot.scatter(x=D[0,:],y=D[1,:],c=L[0,:])",CLUSTER_5,CLUSTER_10
_,matplotlib.pyplot.suptitle('loglossbehavior'),CLUSTER_5,CLUSTER_10
_,"matplotlib.pyplot.title(""LogisticRegressionwithslope{:.2f}andintercept{:.2f}"".format(-B[0],-B[2])",CLUSTER_5,CLUSTER_10
SK,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_10
airports,pandas.read_csv('../../assets/datasets/airport2.csv'),CLUSTER_7,CLUSTER_8
etc,sklearn.ensemble.ExtraTreesClassifier(random_state=42),CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
kmeans,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
lr2,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
color_red,"numpy.repeat(""red"",red_df.shape[0])",CLUSTER_8,CLUSTER_3
color_white,"numpy.repeat(""white"",white_df.shape[0])",CLUSTER_8,CLUSTER_3
red_df,"pandas.read_csv('winequality-red.csv',sep=';')",CLUSTER_8,CLUSTER_3
white_df,"pandas.read_csv('winequality-white.csv',sep=';')",CLUSTER_8,CLUSTER_3
nba,"pandas.read_csv(""basketball_players.csv"")",CLUSTER_5,CLUSTER_5
players,"pandas.read_csv(""basketball_master.csv"")",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(num=None,figsize=(6,6)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(num=None,figsize=(6,6)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(num=None,figsize=(6,6)",CLUSTER_5,CLUSTER_5
euclid_distance,math.sqrt(root_distance),CLUSTER_5,CLUSTER_5
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
kmeans,"sklearn.cluster.KMeans(n_clusters=num_clusters,max_iter=100)",CLUSTER_5,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(15,6)",CLUSTER_12,CLUSTER_10
X,"numpy.linspace(-1,1,400)",CLUSTER_12,CLUSTER_10
Y,"numpy.linspace(-1,1,400)",CLUSTER_12,CLUSTER_10
"x,y","numpy.meshgrid(X,Y)",CLUSTER_12,CLUSTER_10
p1,numpy.array([np.squeeze(pp),CLUSTER_4,CLUSTER_11
w_conv,"numpy.array([np.append(w[:,i],0)",CLUSTER_4,CLUSTER_11
numMap,numpy.zeros(code.shape[0]),CLUSTER_4,CLUSTER_11
transV_,"numpy.zeros((inV.shape[0],conv_size[0],conv_size[1])",CLUSTER_4,CLUSTER_11
transX_,"numpy.zeros((inX.shape[0],conv_size[0],conv_size[1])",CLUSTER_4,CLUSTER_11
pool_layer_delta,numpy.zeros((len(delta_L),CLUSTER_4,CLUSTER_11
pool_layer_Pl_Pa,numpy.zeros((len(Pl_Pa_L),CLUSTER_4,CLUSTER_11
layerBinCode,"numpy.where(actV>0,1,0)",CLUSTER_4,CLUSTER_11
layerBinCode,"numpy.where(actV>0.5,1,0)",CLUSTER_4,CLUSTER_11
layerBinCode,"numpy.where(actV>0,1,0)",CLUSTER_4,CLUSTER_11
layerBinCode_pool_before,"numpy.where(transV_>0,1,0)",CLUSTER_4,CLUSTER_11
layerBinCode_pool_before,"numpy.where(transV_>0.5,1,0)",CLUSTER_4,CLUSTER_11
layerBinCode_pool_before,"numpy.where(transV_>0,1,0)",CLUSTER_4,CLUSTER_11
layerBinCode0,"numpy.where(inV>0,1,0)",CLUSTER_4,CLUSTER_11
layerBinCode0,"numpy.where(inV>0.5,1,0)",CLUSTER_4,CLUSTER_11
layerBinCode0,"numpy.where(inV>0,1,0)",CLUSTER_4,CLUSTER_11
contrib_code1,"numpy.where(delta_L[:,i]>0,1,0)",CLUSTER_4,CLUSTER_11
contrib_code2,"numpy.where(delta_L[:,i]<0,-1,0)",CLUSTER_4,CLUSTER_11
contrib_code1,"numpy.where(inX[:,nn]>0,1,0)",CLUSTER_4,CLUSTER_11
contrib_code2,"numpy.where(inX[:,nn]<0,-1,0)",CLUSTER_4,CLUSTER_11
delta_L_pool_contrib,"numpy.where(delta_L_pool[:,i]>0,1,0)",CLUSTER_4,CLUSTER_11
contrib_code1,"numpy.where(inX[:,nn]>0,1,0)",CLUSTER_4,CLUSTER_11
contrib_code2,"numpy.where(inX[:,nn]<0,-1,0)",CLUSTER_4,CLUSTER_11
contrib_code1,"numpy.where(inX>0,1,0)",CLUSTER_4,CLUSTER_11
contrib_code2,"numpy.where(inX<0,-1,0)",CLUSTER_4,CLUSTER_11
delta_contrib_code1,"numpy.where(pool_layer_delta>0,1,0)",CLUSTER_4,CLUSTER_11
delta_contrib_code2,"numpy.where(pool_layer_delta<0,-1,0)",CLUSTER_4,CLUSTER_11
"t,tt",numpy.zeros_like(p.flat),CLUSTER_4,CLUSTER_11
insert_0,numpy.zeros_like(actV_),CLUSTER_4,CLUSTER_11
delta_inzert_0,numpy.zeros_like(pool_layer_delta),CLUSTER_4,CLUSTER_11
contrib_w2,numpy.zeros_like(contrib_w1),CLUSTER_4,CLUSTER_11
contrib_w1,numpy.zeros_like(contrib_w2),CLUSTER_4,CLUSTER_11
contrib_w1,"numpy.ones_like(actX_max_ind[:,i])",CLUSTER_4,CLUSTER_11
contrib_w1,"numpy.ones_like(actX_max_ind[:,i])",CLUSTER_4,CLUSTER_11
contrib_w2,"numpy.ones_like(actX_max_ind[:,i])",CLUSTER_4,CLUSTER_11
actX_max_ind,"numpy.argmax(actX_,axis=2)",CLUSTER_4,CLUSTER_11
actV_max_ind,"numpy.argmax(actV_,axis=2)",CLUSTER_4,CLUSTER_11
prob,numpy.squeeze(net.predict_pro(p),CLUSTER_4,CLUSTER_11
delta_L,numpy.squeeze([d[l_num]fordindelta]),CLUSTER_4,CLUSTER_11
Pl_Pa_L,numpy.squeeze([p[-l_num-1]forpinPl_Pa]),CLUSTER_4,CLUSTER_11
delta_L_pool,numpy.squeeze([d[l_num]fordindelta]),CLUSTER_4,CLUSTER_11
transX,numpy.squeeze([t_x[list(range(transX_.shape[1]),CLUSTER_4,CLUSTER_11
transV,numpy.squeeze([t_v[list(range(transV_.shape[1]),CLUSTER_4,CLUSTER_11
layerNumCode2,"numpy.sum(layerBinCode,1)",CLUSTER_4,CLUSTER_11
layersNumCode2,"numpy.sum(layersBinCode,1)",CLUSTER_4,CLUSTER_11
max_x,numpy.exp(-max_all),CLUSTER_4,CLUSTER_11
min_x,numpy.exp(-min_all),CLUSTER_4,CLUSTER_11
loss_x,"numpy.linspace(0.001,0.999,100)",CLUSTER_4,CLUSTER_11
cbar2,"fig.colorbar(mp2,shrink=0.8,ticks=numpy.linspace(0,c_u.shape[0]-1,c_u.shape[0])",CLUSTER_4,CLUSTER_11
cbar2,"fig.colorbar(st,ticks=numpy.linspace(0,c_u.shape[0]-1,c_u.shape[0])",CLUSTER_4,CLUSTER_11
cbar2,"fig.colorbar(st,ticks=numpy.linspace(0,c_u.shape[0]-1,c_u.shape[0])",CLUSTER_4,CLUSTER_11
tick_pool,"numpy.linspace(-abs_max_pool,abs_max_pool,5)",CLUSTER_4,CLUSTER_11
newcolors,"numpy.vstack((top(np.linspace(0.55,1,512)",CLUSTER_4,CLUSTER_11
l,"numpy.vstack((w,b)",CLUSTER_4,CLUSTER_11
delta_L,"numpy.expand_dims(delta_L,1)",CLUSTER_4,CLUSTER_11
Pl_Pa_L,"numpy.expand_dims(Pl_Pa_L,1)",CLUSTER_4,CLUSTER_11
c_u,numpy.unique(c),CLUSTER_4,CLUSTER_11
x_u,numpy.unique(y),CLUSTER_4,CLUSTER_11
uniq,"numpy.unique(code,axis=0)",CLUSTER_4,CLUSTER_11
"X,y","numpy.load(""log/X.npy"")",CLUSTER_4,CLUSTER_11
"X_test,y_test","numpy.load(""log/X_test.npy"")",CLUSTER_4,CLUSTER_11
weights_log,"numpy.load('log/weights_log.npy',allow_pickle=True)",CLUSTER_4,CLUSTER_11
bias_log,"numpy.load('log/bias_log.npy',allow_pickle=True)",CLUSTER_4,CLUSTER_11
weights_log,"numpy.load('log/weights_log.npy',allow_pickle=True)",CLUSTER_4,CLUSTER_11
bias_log,"numpy.load('log/bias_log.npy',allow_pickle=True)",CLUSTER_4,CLUSTER_11
train_loss,"numpy.load(""log/train_loss.npy"")",CLUSTER_4,CLUSTER_11
test_loss,"numpy.load(""log/test_loss.npy"")",CLUSTER_4,CLUSTER_11
delta_log,"numpy.load(""log/delta_log.npy"",allow_pickle=True)",CLUSTER_4,CLUSTER_11
Pl_Pa_log,"numpy.load(""log/Pl_Pa.npy"",allow_pickle=True)",CLUSTER_4,CLUSTER_11
w_grad_log,"numpy.load(""log/w_grad_log.npy"",allow_pickle=True)",CLUSTER_4,CLUSTER_11
"X,y","sklearn.datasets.make_circles(n_samples=2000,factor=0.3,noise=.1,random_state=123)",CLUSTER_4,CLUSTER_11
"X,X_test,y,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33)",CLUSTER_4,CLUSTER_11
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(8,4)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(6,4)",CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(9,4)",CLUSTER_4,CLUSTER_11
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(9,4)",CLUSTER_4,CLUSTER_11
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(12,4)",CLUSTER_4,CLUSTER_11
alphas,"numpy.logspace(3,-3,n_alphas)",CLUSTER_5,CLUSTER_5
alphas,"numpy.logspace(3,-3,n_alphas)",CLUSTER_5,CLUSTER_5
hitters,pandas.read_csv('Hitters.csv'),CLUSTER_5,CLUSTER_5
ax,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_5
ax,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_5,CLUSTER_5
ridge,"sklearn.linear_model.Ridge(alpha=a,normalize=True,max_iter=10000)",CLUSTER_5,CLUSTER_5
lasso,"sklearn.linear_model.Lasso(alpha=a,normalize=True,max_iter=10000)",CLUSTER_5,CLUSTER_5
coef,"sklearn.linear_model.Lasso(alpha=10,normalize=True,max_iter=10000)",CLUSTER_5,CLUSTER_5
coef,"sklearn.linear_model.Lasso(alpha=lasso_cv.alpha_,normalize=True,max_iter=10000)",CLUSTER_5,CLUSTER_5
lasso_cv,"sklearn.linear_model.LassoCV(cv=10,random_state=67,normalize=True,max_iter=10000)",CLUSTER_5,CLUSTER_5
ridge_cv,"sklearn.linear_model.RidgeCV(cv=10,normalize=True)",CLUSTER_5,CLUSTER_5
start,time.time(),CLUSTER_10,CLUSTER_12
start,time.time(),CLUSTER_10,CLUSTER_12
start,time.time(),CLUSTER_10,CLUSTER_12
df_account,"pandas.concat((dfs_to_make[0],dfs_to_make[1])",CLUSTER_8,CLUSTER_4
orginal_df,"pandas.read_table('original_ranked_list.txt',header=None,names=['gene'])",CLUSTER_8,CLUSTER_4
similar_ranked_list,"pandas.read_table('similar_gene_list.txt',header=None,names=['gene'])",CLUSTER_8,CLUSTER_4
coefficients,"pandas.Series(model.coef_,features)",CLUSTER_4,CLUSTER_8
df,pandas.read_csv('../data/elections/bread_peace_voting.csv'),CLUSTER_4,CLUSTER_8
df,pandas.read_csv('../data/condos/tribeca.csv'),CLUSTER_4,CLUSTER_8
mae,"sklearn.metrics.mean_absolute_error(y_train,y_pred)",CLUSTER_4,CLUSTER_8
mae,"sklearn.metrics.mean_absolute_error(y_test,y_pred)",CLUSTER_4,CLUSTER_8
mae,"sklearn.metrics.mean_absolute_error(y_train,y_pred)",CLUSTER_4,CLUSTER_8
mae,"sklearn.metrics.mean_absolute_error(y_test,y_pred)",CLUSTER_4,CLUSTER_8
mae,"sklearn.metrics.mean_absolute_error(y,y_pred)",CLUSTER_4,CLUSTER_8
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_8
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_8
constant,numpy.ones(shape=(len(X),CLUSTER_4,CLUSTER_8
rmse,numpy.sqrt(mse),CLUSTER_4,CLUSTER_8
xcoords,"numpy.linspace(xmin,xmax,num)",CLUSTER_4,CLUSTER_8
ycoords,"numpy.linspace(ymin,ymax,num)",CLUSTER_4,CLUSTER_8
x_domain,numpy.linspace(X.min(),CLUSTER_4,CLUSTER_8
X_transpose_X_inverse,numpy.linalg.inv(X_transpose_X),CLUSTER_4,CLUSTER_8
ax,matplotlib.pyplot.axes(),CLUSTER_4,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(7,7)",CLUSTER_4,CLUSTER_8
mse,"sklearn.metrics.mean_squared_error(y,y_pred)",CLUSTER_4,CLUSTER_8
r2,"sklearn.metrics.r2_score(y,y_pred)",CLUSTER_4,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=11)",CLUSTER_4,CLUSTER_8
cb,matplotlib.pyplot.colorbar(im),CLUSTER_1,CLUSTER_10
CS,"matplotlib.pyplot.contour(Z,origin=""lower"",cmap=""RdYlBu"")",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(4/0.8,3/0.8)",CLUSTER_1,CLUSTER_10
im,"matplotlib.pyplot.imshow(Z,cmap=""gray"",origin=""lower"",interpolation=""nearest"")",CLUSTER_1,CLUSTER_10
im,"matplotlib.pyplot.imshow(Z,origin=""lower"",interpolation=""nearest"",cmap=cm)",CLUSTER_1,CLUSTER_10
strm,"matplotlib.pyplot.streamplot(X,Y,U,V,density=0.7,color=U,linewidth=lw,cmap=plt.cm.viridis)",CLUSTER_1,CLUSTER_10
ax,"matplotlib.pyplot.subplot(111,projection='polar')",CLUSTER_1,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(ncols=2,nrows=2)",CLUSTER_1,CLUSTER_10
t1,"numpy.arange(0.0,5.0,0.5)",CLUSTER_1,CLUSTER_10
t2,"numpy.arange(0.0,5.0,0.02)",CLUSTER_1,CLUSTER_10
x,"numpy.arange(0.1,4,0.5)",CLUSTER_1,CLUSTER_10
x,numpy.arange(5),CLUSTER_1,CLUSTER_10
x,numpy.arange(5),CLUSTER_1,CLUSTER_10
y1,numpy.cos(2*np.pi*x1),CLUSTER_1,CLUSTER_10
y2,numpy.cos(2*np.pi*x2),CLUSTER_1,CLUSTER_10
y,numpy.exp(-x),CLUSTER_1,CLUSTER_10
speed,numpy.sqrt(U*U+V*V),CLUSTER_1,CLUSTER_10
x1,"numpy.linspace(0.0,5.0)",CLUSTER_1,CLUSTER_10
x2,"numpy.linspace(0.0,2.0)",CLUSTER_1,CLUSTER_10
theta,"numpy.linspace(0.0,2*np.pi,N,endpoint=False)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(0,L)",CLUSTER_1,CLUSTER_10
shift,"numpy.linspace(0,L,ncolors,endpoint=False)",CLUSTER_1,CLUSTER_10
mat,"numpy.arange(1,26)",CLUSTER_3,CLUSTER_6
sub,"pandas.DataFrame({'PassengerId':ids,'Survived':pred})",CLUSTER_5,CLUSTER_1
df,"pandas.concat([df_train,df_test])",CLUSTER_5,CLUSTER_1
df_train,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_5,CLUSTER_1
df_test,pandas.read_csv(data_path+'titanic_test.csv'),CLUSTER_5,CLUSTER_1
LEncoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
positive_counts,collections.Counter(),CLUSTER_12,CLUSTER_10
negative_counts,collections.Counter(),CLUSTER_12,CLUSTER_10
total_counts,collections.Counter(),CLUSTER_12,CLUSTER_10
pos_neg_ratios,collections.Counter(),CLUSTER_12,CLUSTER_10
review_counter,collections.Counter(),CLUSTER_12,CLUSTER_10
frequency_frequency,collections.Counter(),CLUSTER_12,CLUSTER_10
positive_counts,collections.Counter(),CLUSTER_12,CLUSTER_10
negative_counts,collections.Counter(),CLUSTER_12,CLUSTER_10
total_counts,collections.Counter(),CLUSTER_12,CLUSTER_10
pos_neg_ratios,collections.Counter(),CLUSTER_12,CLUSTER_10
most_similar,collections.Counter(),CLUSTER_12,CLUSTER_10
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_12,CLUSTER_10
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_10
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_10
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_10
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_12,CLUSTER_10
layer_0,numpy.zeros(10),CLUSTER_12,CLUSTER_10
layer_1,numpy.zeros(5),CLUSTER_12,CLUSTER_10
layer_1,numpy.zeros(5),CLUSTER_12,CLUSTER_10
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_10
self.layer_1,"numpy.zeros((1,hidden_nodes)",CLUSTER_12,CLUSTER_10
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_12,CLUSTER_10
self.layer_1,"numpy.zeros((1,hidden_nodes)",CLUSTER_12,CLUSTER_10
most_similar[word],"numpy.dot(mlp_full.weights_0_1[mlp_full.word2index[word]],mlp_full.weights_0_1[mlp_full.word2index[focus]])",CLUSTER_12,CLUSTER_10
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_12,CLUSTER_10
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_12,CLUSTER_10
"hist,edges","numpy.histogram(list(map(lambdax:x[1],pos_neg_ratios.most_common()",CLUSTER_12,CLUSTER_10
"hist,edges","numpy.histogram(list(map(lambdax:x[1],frequency_frequency.most_common()",CLUSTER_12,CLUSTER_10
start,time.time(),CLUSTER_12,CLUSTER_10
start,time.time(),CLUSTER_12,CLUSTER_10
start,time.time(),CLUSTER_12,CLUSTER_10
start,time.time(),CLUSTER_12,CLUSTER_10
start,time.time(),CLUSTER_12,CLUSTER_10
start,time.time(),CLUSTER_12,CLUSTER_10
start,time.time(),CLUSTER_12,CLUSTER_10
start,time.time(),CLUSTER_12,CLUSTER_10
tsne,"sklearn.manifold.TSNE(n_components=2,random_state=0)",CLUSTER_12,CLUSTER_10
pos_model,"numpy.array([np.max(x,0)",CLUSTER_1,CLUSTER_9
pos_sample,"numpy.array([np.max(x,0)",CLUSTER_1,CLUSTER_9
norm_model,numpy.array([x/pos_model.sum(),CLUSTER_1,CLUSTER_9
norm_sample,numpy.array([x/pos_sample.sum(),CLUSTER_1,CLUSTER_9
norm_profile,numpy.array([x/cross_correlation.sum(),CLUSTER_1,CLUSTER_9
filtered_data,numpy.where(np.abs(cross_correlation>cross_correlation.min(),CLUSTER_1,CLUSTER_9
filtered_profile,numpy.where(np.abs(final_profile>final_profile.min(),CLUSTER_1,CLUSTER_9
index,numpy.where(values==val),CLUSTER_1,CLUSTER_9
new_x_axis,numpy.argwhere(clipped_profile!=clipped_profile.mask),CLUSTER_1,CLUSTER_9
peaks,numpy.argmax(cross_corr),CLUSTER_1,CLUSTER_9
sorted_values,numpy.sort(values),CLUSTER_1,CLUSTER_9
sum_profile,"numpy.sum(ccd.data,axis=1)",CLUSTER_1,CLUSTER_9
msample,"numpy.nan_to_num(np.median(ccd.data,axis=1)",CLUSTER_1,CLUSTER_9
sample,"numpy.median(ccd.data,axis=1)",CLUSTER_1,CLUSTER_9
sample,"numpy.median(ccd.data,axis=1)",CLUSTER_1,CLUSTER_9
median_profile,"numpy.median(ccd.data,axis=1)",CLUSTER_1,CLUSTER_9
median_median,numpy.median(median_profile),CLUSTER_1,CLUSTER_9
linear_model,"models.Linear1D(slope=0,intercept=numpy.median(median_profile)",CLUSTER_1,CLUSTER_9
peaks,"scipy.signal.argrelmax(filtered_data,axis=0,order=8)",CLUSTER_1,CLUSTER_9
peaks,"scipy.signal.argrelmax(filtered_profile,axis=0,order=8)",CLUSTER_1,CLUSTER_9
cross_corr,"scipy.signal.correlate(sample,gauss_data,mode='same')",CLUSTER_1,CLUSTER_9
cross_correlation,"scipy.signal.correlate(sample,gauss_model(profile_x_axis)",CLUSTER_1,CLUSTER_9
ccorrelate,"scipy.signal.correlate(sample,single_gaussian(range(sample.size)",CLUSTER_1,CLUSTER_9
ccorrelate_2,"scipy.signal.correlate(sample,single_gaussian_2(range(sample.size)",CLUSTER_1,CLUSTER_9
cross_correlation,"scipy.signal.correlate(msample,gauss_model(range(msample.size)",CLUSTER_1,CLUSTER_9
prices_matrix,numpy.array(new_array),CLUSTER_7,CLUSTER_8
prices_matrix,numpy.array(new_array),CLUSTER_7,CLUSTER_8
distances_matrix,numpy.zeros((len(prices_matrix),CLUSTER_7,CLUSTER_8
distances_matrix,numpy.zeros((len(prices_matrix),CLUSTER_7,CLUSTER_8
mean_distance,numpy.mean(matrix),CLUSTER_7,CLUSTER_8
mean,numpy.mean(all_stock_changes_compare_to_benchmark),CLUSTER_7,CLUSTER_8
std,numpy.std(all_stock_changes_compare_to_benchmark),CLUSTER_7,CLUSTER_8
prices_matrix,"numpy.vstack((prices_matrix,new_array)",CLUSTER_7,CLUSTER_8
prices_matrix,"numpy.vstack((prices_matrix,new_array)",CLUSTER_7,CLUSTER_8
embedding,sklearn.manifold.MDS(n_components=2),CLUSTER_7,CLUSTER_8
detector,"sklearn.svm.OneClassSVM(kernel='precomputed',nu=per_out)",CLUSTER_7,CLUSTER_8
distances_matrix[i][j],"scipy.stats.entropy(stock,qk=stock_2)",CLUSTER_7,CLUSTER_8
text,"re.sub(r""[^A-Za-z0-9^,!.\/'+-=]"","""",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""what's"",""whatis"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\'s"","""",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\'ve"",""have"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""can't"",""cannot"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""n't"",""not"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""i'm"",""iam"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\'re"",""are"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\'d"",""would"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\'ll"",""will"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r"","","""",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\."","""",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""!"",""!"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\/"","""",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\^"",""^"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\+"",""+"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\-"",""-"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\="",""="",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\<"","""",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\>"","""",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""'"","""",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""(\d+)",CLUSTER_0,CLUSTER_0
text,"re.sub(r"":"","":"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""eg"",""eg"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""bg"",""bg"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""us"",""american"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\0s"",""0"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""911"",""911"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""e-mail"",""email"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""jk"",""jk"",text)",CLUSTER_0,CLUSTER_0
text,"re.sub(r""\s{2,}"","""",text)",CLUSTER_0,CLUSTER_0
input_a,numpy.asarray([sequence]),CLUSTER_0,CLUSTER_0
all_participants,"pandas.read_csv(data_path+'all.csv',sep=',')",CLUSTER_0,CLUSTER_0
all_participants,"pandas.read_csv(data_path+'all.csv',sep=',')",CLUSTER_0,CLUSTER_0
files,os.listdir(path),CLUSTER_10,CLUSTER_4
df,"pandas.read_csv(""C:/code/python/pyIDS/data/titanic.csv"")",CLUSTER_8,CLUSTER_3
cummulated_mask,numpy.array([True]*dataset_size),CLUSTER_8,CLUSTER_3
cummulated_mask,numpy.array([True]*dataset_size),CLUSTER_8,CLUSTER_3
mask,numpy.array([val==intervalforvalinvalues]),CLUSTER_8,CLUSTER_3
current_mask,numpy.array([True]*dataset_len),CLUSTER_8,CLUSTER_3
cummulated_mask,numpy.ones(dataset_size),CLUSTER_8,CLUSTER_3
transformed_list,numpy.sort(np.unique(value_list),CLUSTER_8,CLUSTER_3
minv,numpy.asscalar(min(current_column),CLUSTER_8,CLUSTER_3
maxv,numpy.asscalar(max(current_column),CLUSTER_8,CLUSTER_3
dataframe,pandas.read_csv(DATA_FILENAME),CLUSTER_6,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_6,CLUSTER_3
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(14,4)",CLUSTER_6,CLUSTER_3
"f,axe","matplotlib.pyplot.subplots(1,1,figsize=(20,4)",CLUSTER_6,CLUSTER_3
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(14,4)",CLUSTER_6,CLUSTER_3
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(14,4)",CLUSTER_6,CLUSTER_3
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(14,4)",CLUSTER_6,CLUSTER_3
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(14,4)",CLUSTER_6,CLUSTER_3
"f,axes","matplotlib.pyplot.subplots(1,2,figsize=(14,4)",CLUSTER_6,CLUSTER_3
sex_list,collections.Counter(dataframe['sex']),CLUSTER_6,CLUSTER_3
children_list,collections.Counter(dataframe['children']),CLUSTER_6,CLUSTER_3
smoker_list,collections.Counter(dataframe['smoker']),CLUSTER_6,CLUSTER_3
region_list,collections.Counter(dataframe['region']),CLUSTER_6,CLUSTER_3
idx,numpy.arange(n*(i-1),CLUSTER_5,CLUSTER_6
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,test_size=0.4,random_state=0)",CLUSTER_5,CLUSTER_6
"X,y",sklearn.datasets.load_iris(return_X_y=True),CLUSTER_5,CLUSTER_6
clf,"sklearn.svm.SVC(kernel='linear',C=1)",CLUSTER_5,CLUSTER_6
clf,"sklearn.svm.SVC(kernel='linear',C=1)",CLUSTER_5,CLUSTER_6
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5)",CLUSTER_5,CLUSTER_6
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5,scoring='f1_macro')",CLUSTER_5,CLUSTER_6
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=cv)",CLUSTER_5,CLUSTER_6
cv,"sklearn.model_selection.ShuffleSplit(n_splits=5,test_size=0.3,random_state=0)",CLUSTER_5,CLUSTER_6
kf,sklearn.model_selection.KFold(n_splits=2),CLUSTER_5,CLUSTER_6
X_plot,"numpy.linspace(-3,3,100)",CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=666)",CLUSTER_5,CLUSTER_10
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_10
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_10
peak,numpy.zeros(15),CLUSTER_3,CLUSTER_6
peak_index,numpy.zeros(15),CLUSTER_3,CLUSTER_6
t_peak,numpy.zeros(15),CLUSTER_3,CLUSTER_6
t,"numpy.linspace(0.2,1000,5000)",CLUSTER_3,CLUSTER_6
V_steps,"numpy.linspace(-120,20,15)",CLUSTER_3,CLUSTER_6
end,datetime.date.today(),CLUSTER_11,CLUSTER_3
start,"datetime.datetime(end.year,end.month-1,end.day-1)",CLUSTER_11,CLUSTER_3
df,"pandas.DataFrame(data.DataReader('BSE/BOM532538','quandl',start=start,end=end)",CLUSTER_11,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(50,20)",CLUSTER_11,CLUSTER_3
"fig,bx","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_11,CLUSTER_3
"fig,Qx","matplotlib.pyplot.subplots(figsize=(50,20)",CLUSTER_11,CLUSTER_3
"fig,wx","matplotlib.pyplot.subplots(figsize=(50,20)",CLUSTER_11,CLUSTER_3
"fig,gx","matplotlib.pyplot.subplots(figsize=(50,20)",CLUSTER_11,CLUSTER_3
"fig,lx","matplotlib.pyplot.subplots(figsize=(50,20)",CLUSTER_11,CLUSTER_3
"fig,mx","matplotlib.pyplot.subplots(figsize=(50,20)",CLUSTER_11,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(50,20)",CLUSTER_11,CLUSTER_3
"fig,cx","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_11,CLUSTER_3
df,"pandas.DataFrame({
'From_To':['LoNDon_paris','MAdrid_miLAN','londON_StockhOlm','Budapest_PaRis','Brussels_londOn'],
'FlightNumber':[10045,np.nan,10065,np.nan,10085],
'RecentDelays':[[23,47],[],[24,43,87],[13],[67,32]],
'Airline':['KLM(!)",CLUSTER_8,CLUSTER_3
new_df,"pandas.DataFrame({""from"":fromlist,
""to"":tolist})",CLUSTER_8,CLUSTER_3
genere_id,pandas.DataFrame(),CLUSTER_11,CLUSTER_3
keywords_id,pandas.DataFrame(),CLUSTER_11,CLUSTER_3
prod_companies_id,pandas.DataFrame(),CLUSTER_11,CLUSTER_3
prod_countries_id,pandas.DataFrame(),CLUSTER_11,CLUSTER_3
spoken_languages_id,pandas.DataFrame(),CLUSTER_11,CLUSTER_3
cast,pandas.DataFrame(),CLUSTER_11,CLUSTER_3
crew,pandas.DataFrame(),CLUSTER_11,CLUSTER_3
genere_id,"pandas.concat([genere_id,tabjson])",CLUSTER_11,CLUSTER_3
keywords_id,"pandas.concat([keywords_id,tabjson])",CLUSTER_11,CLUSTER_3
prod_companies_id,"pandas.concat([prod_companies_id,tabjson])",CLUSTER_11,CLUSTER_3
prod_countries_id,"pandas.concat([prod_countries_id,tabjson])",CLUSTER_11,CLUSTER_3
spoken_languages_id,"pandas.concat([spoken_languages_id,tabjson])",CLUSTER_11,CLUSTER_3
cast,"pandas.concat([cast,tabjson])",CLUSTER_11,CLUSTER_3
crew,"pandas.concat([crew,tabjson])",CLUSTER_11,CLUSTER_3
attori,"pandas.concat([attori_crew,attori_cast])",CLUSTER_11,CLUSTER_3
members,pandas.merge(members.reset_index(),CLUSTER_11,CLUSTER_3
num_directors,pandas.merge(num_directors.reset_index(),CLUSTER_11,CLUSTER_3
lang,pandas.merge(spoken_languages_id.reset_index(),CLUSTER_11,CLUSTER_3
pc,pandas.merge(pc_counter.reset_index(),CLUSTER_11,CLUSTER_3
ALL,"pandas.merge(pc_id,pc[['movie_id','decade','revenue','count_companies','revenue/companies']],on='movie_id')",CLUSTER_11,CLUSTER_3
ALL_grouped2,pandas.merge(ALL_grouped2.reset_index(),CLUSTER_11,CLUSTER_3
data,pandas.merge(cast_id.reset_index(),CLUSTER_11,CLUSTER_3
data,"pandas.merge(data,credits_id.reset_index()",CLUSTER_11,CLUSTER_3
data,"pandas.merge(data,movie_id.reset_index()",CLUSTER_11,CLUSTER_3
df,pandas.merge(df.reset_index(),CLUSTER_11,CLUSTER_3
merged,pandas.merge(attori.reset_index(),CLUSTER_11,CLUSTER_3
totale,"pandas.merge(femmine[['movie_id','femmine']],maschi[['movie_id','maschi']],on='movie_id')",CLUSTER_11,CLUSTER_3
totale,"pandas.merge(totale,movie_id.reset_index()",CLUSTER_11,CLUSTER_3
new_table,"pandas.merge(guadagno,attori.reset_index()",CLUSTER_11,CLUSTER_3
tot_guadagni,"pandas.merge(guadagno_maschi,guadagno_femmine,on='movie_id')",CLUSTER_11,CLUSTER_3
tot_guadagni,"pandas.merge(tot_guadagni,totale,on='movie_id')",CLUSTER_11,CLUSTER_3
nomi_registi,pandas.merge(registi.reset_index(),CLUSTER_11,CLUSTER_3
registi,pandas.merge(tot_guadagni.reset_index(),CLUSTER_11,CLUSTER_3
movies,pandas.read_csv('tmdb_5000_movies.csv'),CLUSTER_11,CLUSTER_3
credits,pandas.read_csv('tmdb_5000_credits.csv'),CLUSTER_11,CLUSTER_3
tabjson,pandas.read_json(movies['genres'][film]),CLUSTER_11,CLUSTER_3
tabjson,pandas.read_json(movies['keywords'][film]),CLUSTER_11,CLUSTER_3
tabjson,pandas.read_json(movies['production_companies'][film]),CLUSTER_11,CLUSTER_3
tabjson,pandas.read_json(movies['production_countries'][film]),CLUSTER_11,CLUSTER_3
tabjson,pandas.read_json(movies['spoken_languages'][film]),CLUSTER_11,CLUSTER_3
tabjson,pandas.read_json(credits['cast'][film]),CLUSTER_11,CLUSTER_3
tabjson,pandas.read_json(credits['crew'][film]),CLUSTER_11,CLUSTER_3
movies['years'],"pandas.to_datetime(movies['release_date'],format=""%Y-%m-%d"")",CLUSTER_11,CLUSTER_3
movie_id['decade'],"pandas.to_datetime(movie_id['release_date'],format=""%Y-%m-%d"")",CLUSTER_11,CLUSTER_3
item_dict,json.loads(data),CLUSTER_11,CLUSTER_3
result,"re.findall(r'[\w\-+.]+',homepage[i])",CLUSTER_11,CLUSTER_3
sal,pandas.read_csv('data/Salaries.csv'),CLUSTER_8,CLUSTER_4
datas,pandas.read_pickle('corpus.pkl'),CLUSTER_1,CLUSTER_3
start,"numpy.arange(0,length,size)",CLUSTER_1,CLUSTER_3
size,math.floor(length/n),CLUSTER_1,CLUSTER_3
X_train,numpy.load('../data/X_train.npy'),CLUSTER_4,CLUSTER_0
Y_train,numpy.load('../data/y_train.npy'),CLUSTER_4,CLUSTER_0
X_val,numpy.load('../data/processed_data/m4021_session1/X.npy'),CLUSTER_4,CLUSTER_0
Y_val,numpy.load('../data/processed_data/m4021_session1/y_all.npy'),CLUSTER_4,CLUSTER_0
movies,pandas.read_csv('movies_clean.csv'),CLUSTER_12,CLUSTER_3
reviews,pandas.read_csv('reviews_clean.csv'),CLUSTER_12,CLUSTER_3
movie_content,"numpy.array(movies.iloc[:,4:])",CLUSTER_12,CLUSTER_3
similar_movies,"numpy.array(movies.iloc[similar_idxs,]['movie'])",CLUSTER_12,CLUSTER_3
movies_temp,numpy.array(reviews_temp['movie_id']),CLUSTER_12,CLUSTER_3
movie_names,numpy.array(get_movie_names(movies_temp),CLUSTER_12,CLUSTER_3
movie_idx,numpy.where(movies['movie_id']==movie_id),CLUSTER_12,CLUSTER_3
similar_idxs,numpy.where(dot_prod_movies[movie_idx]==np.max(dot_prod_movies[movie_idx]),CLUSTER_12,CLUSTER_3
users_who_need_recs,"numpy.setdiff1d(users,users_with_all_recs)",CLUSTER_12,CLUSTER_3
temp_recs,"numpy.setdiff1d(rec_movies,movie_names)",CLUSTER_12,CLUSTER_3
users,numpy.unique(reviews['user_id']),CLUSTER_12,CLUSTER_3
recs,collections.defaultdict(set),CLUSTER_12,CLUSTER_3
n,"numpy.arange(0,10)",CLUSTER_7,CLUSTER_8
n,"numpy.arange(0,10)",CLUSTER_7,CLUSTER_8
corr_array,numpy.array(correlation),CLUSTER_7,CLUSTER_8
"score[""feature_type""]","numpy.where(score[""features""].isin(num_cols)",CLUSTER_7,CLUSTER_8
summary,"numpy.around(summary,3)",CLUSTER_7,CLUSTER_8
scaled,"pandas.DataFrame(scaled,columns=num_cols)",CLUSTER_7,CLUSTER_8
pca_data,"pandas.DataFrame(principal_components,columns=[""PC1"",""PC2""])",CLUSTER_7,CLUSTER_8
coefficients,pandas.DataFrame(algorithm.coef_.ravel(),CLUSTER_7,CLUSTER_8
coefficients,pandas.DataFrame(algorithm.feature_importances_),CLUSTER_7,CLUSTER_8
column_df,pandas.DataFrame(cols),CLUSTER_7,CLUSTER_8
os_smote_X,"pandas.DataFrame(data=os_smote_X,columns=cols)",CLUSTER_7,CLUSTER_8
os_smote_Y,"pandas.DataFrame(data=os_smote_Y,columns=target_col)",CLUSTER_7,CLUSTER_8
idc_rfe,"pandas.DataFrame({""rfe_support"":rfe.support_,
""columns"":[iforiintelcom.columnsifinotinId_col+target_col],
""ranking"":rfe.ranking_,
})",CLUSTER_7,CLUSTER_8
score,"pandas.DataFrame({""features"":cols,""scores"":fit.scores_,""p_values"":fit.pvalues_})",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame({""Model"":[name],
""Accuracy_score"":[accuracy],
""Recall_score"":[recallscore],
""Precision"":[precision],
""f1_score"":[f1score],
""Area_under_curve"":[roc_auc],
""Kappa_metric"":[kappa_metric],
})",CLUSTER_7,CLUSTER_8
model_performances,"pandas.concat([model1,model2,model3,
model4,model5,model6,
model7,model8,model9,
model10,model11],axis=0)",CLUSTER_7,CLUSTER_8
telcom,"pandas.get_dummies(data=telcom,columns=multi_cols)",CLUSTER_7,CLUSTER_8
telcom,"pandas.read_excel(""OrangeData.xlsx"")",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(13,15)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(12,16)",CLUSTER_7,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(13,17)",CLUSTER_7,CLUSTER_8
qx,"matplotlib.pyplot.subplot(4,3,j+1)",CLUSTER_7,CLUSTER_8
qx,"matplotlib.pyplot.subplot(4,3,j+1)",CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_8
"train,test","sklearn.model_selection.train_test_split(telcom,test_size=.25,random_state=111)",CLUSTER_7,CLUSTER_8
"smote_train_X,smote_test_X,smote_train_Y,smote_test_Y","sklearn.model_selection.train_test_split(smote_X,smote_Y,
test_size=.25,
random_state=111)",CLUSTER_7,CLUSTER_8
logit,"sklearn.linear_model.LogisticRegression(C=1.0,class_weight=None,dual=False,fit_intercept=True,
intercept_scaling=1,max_iter=100,multi_class='ovr',n_jobs=1,
penalty='l2',random_state=None,solver='liblinear',tol=0.0001,
verbose=0,warm_start=False)",CLUSTER_7,CLUSTER_8
logit_smote,"sklearn.linear_model.LogisticRegression(C=1.0,class_weight=None,dual=False,fit_intercept=True,
intercept_scaling=1,max_iter=100,multi_class='ovr',n_jobs=1,
penalty='l2',random_state=None,solver='liblinear',tol=0.0001,
verbose=0,warm_start=False)",CLUSTER_7,CLUSTER_8
logit,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
logit_rfe,"sklearn.linear_model.LogisticRegression(C=1.0,class_weight=None,dual=False,fit_intercept=True,
intercept_scaling=1,max_iter=100,multi_class='ovr',n_jobs=1,
penalty='l2',random_state=None,solver='liblinear',tol=0.0001,
verbose=0,warm_start=False)",CLUSTER_7,CLUSTER_8
conf_matrix,"sklearn.metrics.confusion_matrix(testing_y,predictions)",CLUSTER_7,CLUSTER_8
conf_matrix,"sklearn.metrics.confusion_matrix(testing_y,predictions)",CLUSTER_7,CLUSTER_8
conf_matrix,"sklearn.metrics.confusion_matrix(predictions,test_Y)",CLUSTER_7,CLUSTER_8
accuracy,"sklearn.metrics.accuracy_score(testing_y,predictions)",CLUSTER_7,CLUSTER_8
model_roc_auc,"sklearn.metrics.roc_auc_score(testing_y,predictions)",CLUSTER_7,CLUSTER_8
model_roc_auc,"sklearn.metrics.roc_auc_score(testing_y,predictions)",CLUSTER_7,CLUSTER_8
roc_auc,"sklearn.metrics.roc_auc_score(testing_y,predictions)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(testing_y,probabilities[:,1])",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(testing_y,probabilities[:,1])",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(test_Y,probabilities[:,1])",CLUSTER_7,CLUSTER_8
f1score,"sklearn.metrics.f1_score(testing_y,predictions)",CLUSTER_7,CLUSTER_8
precision,"sklearn.metrics.precision_score(testing_y,predictions)",CLUSTER_7,CLUSTER_8
recallscore,"sklearn.metrics.recall_score(testing_y,predictions)",CLUSTER_7,CLUSTER_8
rfe,"sklearn.feature_selection.RFE(logit,10)",CLUSTER_7,CLUSTER_8
select,"sklearn.feature_selection.SelectKBest(score_func=chi2,k=3)",CLUSTER_7,CLUSTER_8
dt_classifier,"sklearn.tree.DecisionTreeClassifier(max_depth=maximum_depth,
splitter=split_type,
criterion=criterion_type,
)",CLUSTER_7,CLUSTER_8
decision_tree,"sklearn.tree.DecisionTreeClassifier(max_depth=9,
random_state=123,
splitter=""best"",
criterion=""gini"",
)",CLUSTER_7,CLUSTER_8
knn,"sklearn.neighbors.KNeighborsClassifier(algorithm='auto',leaf_size=30,metric='minkowski',
metric_params=None,n_jobs=1,n_neighbors=5,p=2,
weights='uniform')",CLUSTER_7,CLUSTER_8
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=nf_estimators,
max_depth=maximum_depth,
criterion=criterion_type,
)",CLUSTER_7,CLUSTER_8
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=1000,
random_state=123,
max_depth=9,
criterion=""gini"")",CLUSTER_7,CLUSTER_8
gnb,sklearn.naive_bayes.GaussianNB(priors=None),CLUSTER_7,CLUSTER_8
svc_lin,"sklearn.svm.SVC(C=1.0,cache_size=200,class_weight=None,coef0=0.0,
decision_function_shape='ovr',degree=3,gamma=1.0,kernel='linear',
max_iter=-1,probability=True,random_state=None,shrinking=True,
tol=0.001,verbose=False)",CLUSTER_7,CLUSTER_8
svc_rbf,"sklearn.svm.SVC(C=1.0,kernel='rbf',
degree=3,gamma=1.0,
coef0=0.0,shrinking=True,
probability=True,tol=0.001,
cache_size=200,class_weight=None,
verbose=False,max_iter=-1,
random_state=None)",CLUSTER_7,CLUSTER_8
kappa_metric,"sklearn.metrics.cohen_kappa_score(testing_y,predictions)",CLUSTER_7,CLUSTER_8
"recall,precision,thresholds","sklearn.metrics.precision_recall_curve(test_Y,probabilities[:,1])",CLUSTER_7,CLUSTER_8
dataset,pandas.read_csv('Data.csv'),CLUSTER_5,CLUSTER_5
labelencoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
labelencoder_Y,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[0]),CLUSTER_5,CLUSTER_5
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
boundaries,"numpy.arange(15,45,1)",CLUSTER_2,CLUSTER_7
boundaries,"numpy.arange(17,47,1)",CLUSTER_2,CLUSTER_7
country_df,pandas.DataFrame(mcq.Country.value_counts(),CLUSTER_7,CLUSTER_8
mcq_major_counts,pandas.DataFrame(mcq.MajorSelect.value_counts(),CLUSTER_7,CLUSTER_8
mcq_major_pct,pandas.DataFrame(mcq.MajorSelect.value_counts(normalize=True),CLUSTER_7,CLUSTER_8
mcq_es_counts,pandas.DataFrame(mcq.EmploymentStatus.value_counts(),CLUSTER_7,CLUSTER_8
mcq_es_pct,pandas.DataFrame(mcq.EmploymentStatus.value_counts(normalize=True),CLUSTER_7,CLUSTER_8
mltool,pandas.DataFrame(mcq.MLToolNextYearSelect.value_counts(),CLUSTER_7,CLUSTER_8
mltool_pct,pandas.DataFrame(mcq.MLToolNextYearSelect.value_counts(normalize=True),CLUSTER_7,CLUSTER_8
ml_method,pandas.DataFrame(mcq['MLMethodNextYearSelect'].value_counts(),CLUSTER_7,CLUSTER_8
ml_method_pct,pandas.DataFrame(mcq['MLMethodNextYearSelect'].value_counts(normalize=True),CLUSTER_7,CLUSTER_8
fdf,pandas.DataFrame(fdf),CLUSTER_7,CLUSTER_8
cdf,pandas.Series(cdf),CLUSTER_7,CLUSTER_8
mcq_es_df,"pandas.merge(mcq_es_counts,mcq_es_pct,left_index=True,right_index=True)",CLUSTER_7,CLUSTER_8
question,pandas.read_csv('schema.csv'),CLUSTER_7,CLUSTER_8
mcq,"pandas.read_csv('multipleChoiceResponses.csv',encoding='ISO-8859-1',low_memory=False)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(12,5)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_7,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(10,10)",CLUSTER_1,CLUSTER_3
pJ_mpc,numpy.array(pJ_mpc),CLUSTER_1,CLUSTER_3
g_zero,"numpy.asarray(g_zero,dtype=np.float64)",CLUSTER_1,CLUSTER_3
J_zero,numpy.asarray([np.sum(g_zero[k:]),CLUSTER_1,CLUSTER_3
g_zero,"numpy.asarray(g_zero,dtype=np.float64)",CLUSTER_1,CLUSTER_3
J_zero,numpy.asarray([np.sum(g_zero[k:]),CLUSTER_1,CLUSTER_3
g_mpc,"numpy.asarray(g_mpc,dtype=np.float64)",CLUSTER_1,CLUSTER_3
J_mpc,numpy.asarray([np.sum(g_mpc[k:]),CLUSTER_1,CLUSTER_3
u,numpy.zeros(env.action_space.shape),CLUSTER_1,CLUSTER_3
xs,"numpy.linspace(0,S_zero.shape[1],num=S_zero.shape[1])",CLUSTER_1,CLUSTER_3
xs,"numpy.linspace(0,S_zero.shape[1],num=S_zero.shape[1])",CLUSTER_1,CLUSTER_3
xs,"numpy.linspace(0,S_mpc.shape[1],num=S_mpc.shape[1])",CLUSTER_1,CLUSTER_3
xs,"numpy.linspace(0,U_mpc.shape[1],num=U_mpc.shape[1])",CLUSTER_1,CLUSTER_3
xs,"numpy.linspace(0,S_mpc.shape[1],num=S_mpc.shape[1]-1)",CLUSTER_1,CLUSTER_3
xs,"numpy.linspace(0,S_mpc.shape[1],num=S_mpc.shape[1]-1)",CLUSTER_1,CLUSTER_3
S_zero,numpy.hstack(S_zero),CLUSTER_1,CLUSTER_3
S_zero,numpy.hstack(S_zero),CLUSTER_1,CLUSTER_3
S_mpc,numpy.hstack(S_mpc),CLUSTER_1,CLUSTER_3
U_mpc,numpy.hstack(U_mpc),CLUSTER_1,CLUSTER_3
y,math.sqrt(x),CLUSTER_3,CLUSTER_4
x,"random.randrange(s,e)",CLUSTER_3,CLUSTER_4
tmpfile,"os.fdopen(fd,""wb"")",CLUSTER_9,CLUSTER_11
response,"requests.get(url,stream=True)",CLUSTER_9,CLUSTER_11
black,numpy.zeros_like(panda_data),CLUSTER_9,CLUSTER_11
black,numpy.zeros_like(panda_data),CLUSTER_9,CLUSTER_11
delta,numpy.sign(grad),CLUSTER_9,CLUSTER_11
delta,numpy.sign(grad),CLUSTER_9,CLUSTER_11
df,"pandas.DataFrame({
'velvet':[s[0][velvet_label]forsinprediction_steps],
'paper_towel':[s[0][paper_towel_label]forsinprediction_steps]
})",CLUSTER_9,CLUSTER_11
expiration_date,"datetime.datetime.strptime(expiration_date,""%m-%d-%Y"")",CLUSTER_11,CLUSTER_9
s,"numpy.arange(0,150)",CLUSTER_11,CLUSTER_9
vals_call,numpy.array(vals_call),CLUSTER_11,CLUSTER_9
vals_put,numpy.array(vals_put),CLUSTER_11,CLUSTER_9
s,numpy.array(s),CLUSTER_11,CLUSTER_9
vals_call,numpy.array(vals_call),CLUSTER_11,CLUSTER_9
vals_put,numpy.array(vals_put),CLUSTER_11,CLUSTER_9
s,numpy.array(s),CLUSTER_11,CLUSTER_9
vals_call,numpy.array(vals_call),CLUSTER_11,CLUSTER_9
vals_put,numpy.array(vals_put),CLUSTER_11,CLUSTER_9
s,numpy.array(s),CLUSTER_11,CLUSTER_9
input_frame,"pandas.DataFrame(data,columns=['Symbol','Input'],
index=['Underlyingprice','Strikeprice','Timetomaturity','Risk-freeinterestrate','Volatility'])",CLUSTER_11,CLUSTER_9
price_and_greeks_frame,"pandas.DataFrame(price_and_greeks,columns=['Call','Put'],index=['Price','delta','theta','gamma','vega','rho'])",CLUSTER_11,CLUSTER_9
final_data,"pandas.get_dummies(loans,columns=cat_feats,drop_first=True)",CLUSTER_7,CLUSTER_5
loans,"pandas.read_csv(""loan_data.csv"")",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30,random_state=101)",CLUSTER_7,CLUSTER_5
dtree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_5
dt_mat,"sklearn.metrics.confusion_matrix(y_test,dt_predictions)",CLUSTER_7,CLUSTER_5
rfc_mat,"sklearn.metrics.confusion_matrix(y_test,rfc_predictions)",CLUSTER_7,CLUSTER_5
rfc,sklearn.ensemble.RandomForestClassifier(n_estimators=600),CLUSTER_7,CLUSTER_5
ranking_QS,"pandas.DataFrame(columns=['Name','Rank','Country','Region',\
'Numberoffacultymembers(int)",CLUSTER_9,CLUSTER_2
ranking_THE,"pandas.DataFrame(columns=['Name','Rank','Country','Region',\
'Numberoffacultymembers(int)",CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(columns=infos),CLUSTER_9,CLUSTER_2
combined_df,"pandas.concat([df_QS,df_THE],axis=1,join_axes=[df_QS.index])",CLUSTER_9,CLUSTER_2
combined_all_df,"pandas.concat([df_QS,df_THE],axis=1,join_axes=[df_QS.index])",CLUSTER_9,CLUSTER_2
population_df,"pandas.concat([population_df,size_df],axis=1,join_axes=[population_df.index])",CLUSTER_9,CLUSTER_2
combined_all_df,pandas.merge(combined_all_df.reset_index(),CLUSTER_9,CLUSTER_2
combined_df,pandas.merge(combined_df.reset_index(),CLUSTER_9,CLUSTER_2
expl_result,pandas.merge(expl_result.reset_index(),CLUSTER_9,CLUSTER_2
population_df,"pandas.read_csv('PopulationData.csv',sep=';',header=None)",CLUSTER_9,CLUSTER_2
size_df,"pandas.read_csv('SizeData.csv',skiprows=4)",CLUSTER_9,CLUSTER_2
ranking_QS,pandas.read_pickle('ranking_QS.pickle'),CLUSTER_9,CLUSTER_2
ranking_THE,pandas.read_pickle('ranking_THE.pickle'),CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(20,15)",CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(20,15)",CLUSTER_9,CLUSTER_2
plot,"seaborn.barplot(df.index,df[info])",CLUSTER_9,CLUSTER_2
plot,seaborn.barplot(ratio_int_students.head(50),CLUSTER_9,CLUSTER_2
plot,seaborn.barplot(ratio_fac_students.head(50),CLUSTER_9,CLUSTER_2
plot,"seaborn.barplot(country_rank_int_total_students.index,country_rank_int_total_students[""RatioInt/TotalStudents""])",CLUSTER_9,CLUSTER_2
plot,"seaborn.barplot(country_rank_fac_students.index,country_rank_fac_students[""RatioFaculty/Students""])",CLUSTER_9,CLUSTER_2
plot,seaborn.barplot(ratio_int_students.head(50),CLUSTER_9,CLUSTER_2
plot,seaborn.barplot(ratio_fac_students.head(50),CLUSTER_9,CLUSTER_2
plot,"seaborn.barplot(country_rank_int_total_students.index,country_rank_int_total_students[""RatioInt/TotalStudents""])",CLUSTER_9,CLUSTER_2
plot,"seaborn.barplot(country_rank_fac_students.index,country_rank_fac_students[""RatioFaculty/Students""])",CLUSTER_9,CLUSTER_2
QS_R,requests.get(QS_data_URL),CLUSTER_9,CLUSTER_2
QS_univ_r,requests.get(QS_univ_URL),CLUSTER_9,CLUSTER_2
THE_R,requests.get(THE_data_URL),CLUSTER_9,CLUSTER_2
string,"re.sub('univers.*?','',string)",CLUSTER_9,CLUSTER_2
string,"re.sub(r'\b\w{1,2}\b','',string)",CLUSTER_9,CLUSTER_2
string,"re.sub('university','',string)",CLUSTER_9,CLUSTER_2
test,scipy.stats.normaltest(expl_result['Numberofstudents(total),CLUSTER_9,CLUSTER_2
df['is_valid'],pandas.Series(df.index),CLUSTER_8,CLUSTER_4
anger_df,"pandas.concat([anger_train,anger_dev],ignore_index=True,sort=False)",CLUSTER_8,CLUSTER_4
fear_df,"pandas.concat([fear_train,fear_dev],ignore_index=True,sort=False)",CLUSTER_8,CLUSTER_4
joy_df,"pandas.concat([joy_train,joy_dev],ignore_index=True,sort=False)",CLUSTER_8,CLUSTER_4
sadness_df,"pandas.concat([sadness_train,sadness_dev],ignore_index=True,sort=False)",CLUSTER_8,CLUSTER_4
emotions_df,"pandas.concat([anger_df,fear_df,joy_df,sadness_df],ignore_index=True,sort=False)",CLUSTER_8,CLUSTER_4
anger_train,"pandas.read_csv('../dataset/input/anger-ratings-0to1.train.txt',sep=""\t"",header=None)",CLUSTER_8,CLUSTER_4
anger_dev,"pandas.read_csv('../dataset/input/anger-ratings-0to1.dev.gold.txt',sep=""\t"",header=None)",CLUSTER_8,CLUSTER_4
fear_train,"pandas.read_csv('../dataset/input/fear-ratings-0to1.train.txt',sep=""\t"",header=None)",CLUSTER_8,CLUSTER_4
fear_dev,"pandas.read_csv('../dataset/input/fear-ratings-0to1.dev.gold.txt',sep=""\t"",header=None)",CLUSTER_8,CLUSTER_4
joy_train,"pandas.read_csv('../dataset/input/joy-ratings-0to1.train.txt',sep=""\t"",header=None)",CLUSTER_8,CLUSTER_4
joy_dev,"pandas.read_csv('../dataset/input/joy-ratings-0to1.dev.gold.txt',sep=""\t"",header=None)",CLUSTER_8,CLUSTER_4
sadness_train,"pandas.read_csv('../dataset/input/sadness-ratings-0to1.train.txt',sep=""\t"",header=None)",CLUSTER_8,CLUSTER_4
sadness_dev,"pandas.read_csv('../dataset/input/sadness-ratings-0to1.dev.gold.txt',sep=""\t"",header=None)",CLUSTER_8,CLUSTER_4
x,numpy.arange(n_epochs),CLUSTER_4,CLUSTER_0
preds_idx,"numpy.argmax(preds,axis=1)",CLUSTER_4,CLUSTER_0
preds_idx,"numpy.argmax(preds,axis=1)",CLUSTER_4,CLUSTER_0
preds_idx,"numpy.argmax(preds,axis=1)",CLUSTER_4,CLUSTER_0
n_crack_pred,numpy.sum(preds_idx==0),CLUSTER_4,CLUSTER_0
n_noncrack_pred,numpy.sum(preds_idx==1),CLUSTER_4,CLUSTER_0
n_crack_pred,numpy.sum(preds_idx==0),CLUSTER_4,CLUSTER_0
n_noncrack_pred,numpy.sum(preds_idx==1),CLUSTER_4,CLUSTER_0
n_noncrack,numpy.sum(test_flow_1.classes==1),CLUSTER_4,CLUSTER_0
n_crack,numpy.sum(test_flow_1.classes==0),CLUSTER_4,CLUSTER_0
n_noncrack,numpy.sum(test_flow_2.classes==1),CLUSTER_4,CLUSTER_0
n_crack,numpy.sum(test_flow_2.classes==0),CLUSTER_4,CLUSTER_0
"paths_train_x,paths_test_x,train_y,test_y","sklearn.model_selection.train_test_split(paths_x,y,test_size=0.2)",CLUSTER_4,CLUSTER_0
"paths_train_x,paths_valid_x,train_y,valid_y","sklearn.model_selection.train_test_split(paths_train_x,train_y,test_size=0.2)",CLUSTER_4,CLUSTER_0
report,"sklearn.metrics.classification_report(generator.classes,preds_idx,target_names=class_names)",CLUSTER_4,CLUSTER_0
train_df,pandas.read_csv('data_train.csv'),CLUSTER_5,CLUSTER_5
test_df,pandas.read_csv('data_test.csv'),CLUSTER_5,CLUSTER_5
df,pandas.DataFrame(list(cursor),CLUSTER_8,CLUSTER_3
recipe_rating,"pandas.concat([recipe_rating_mean,recipe_rating_std],axis=1)",CLUSTER_8,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_11,CLUSTER_11
leg,"matplotlib.pyplot.legend(bbox_to_anchor=(0.15,1.0)",CLUSTER_11,CLUSTER_11
Azs,"numpy.arange(0,ndays)",CLUSTER_11,CLUSTER_11
data_max,"numpy.array(resultmax,""float"")",CLUSTER_11,CLUSTER_11
data_min,"numpy.array(resultmin,""float"")",CLUSTER_11,CLUSTER_11
data_max,"numpy.array(resultmax,""float"")",CLUSTER_11,CLUSTER_11
data_min,"numpy.array(resultmin,""float"")",CLUSTER_11,CLUSTER_11
data_min_tmin,"numpy.array(mintmin,""float"")",CLUSTER_11,CLUSTER_11
data_max_tmax,"numpy.array(maxtmax,""float"")",CLUSTER_11,CLUSTER_11
data_clim_tmax,"numpy.array(climtmax,""float"")",CLUSTER_11,CLUSTER_11
data_clim_tmin,"numpy.array(climtmin,""float"")",CLUSTER_11,CLUSTER_11
start,"datetime.date(1963,1,1)",CLUSTER_11,CLUSTER_11
end,"datetime.date(2018,12,31)",CLUSTER_11,CLUSTER_11
tmin_dataset,"pandas.Series(min_array,index=rng)",CLUSTER_11,CLUSTER_11
tmax_dataset,"pandas.Series(max_array,index=rng)",CLUSTER_11,CLUSTER_11
rng,"pandas.date_range(start,periods=nb_days,freq='D')",CLUSTER_11,CLUSTER_11
b,numpy.array(a),CLUSTER_5,CLUSTER_10
mng,matplotlib.pyplot.get_current_fig_manager(),CLUSTER_5,CLUSTER_10
mng,matplotlib.pyplot.get_current_fig_manager(),CLUSTER_5,CLUSTER_10
model,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_10
evs,"sklearn.metrics.explained_variance_score(y,pred_y)",CLUSTER_5,CLUSTER_10
evs,"sklearn.metrics.explained_variance_score(y,pred_y)",CLUSTER_5,CLUSTER_10
mae,"sklearn.metrics.mean_absolute_error(y,pred_y)",CLUSTER_5,CLUSTER_10
mae,"sklearn.metrics.mean_absolute_error(y,pred_y)",CLUSTER_5,CLUSTER_10
mse,"sklearn.metrics.mean_squared_error(y,pred_y)",CLUSTER_5,CLUSTER_10
mse,"sklearn.metrics.mean_squared_error(y,pred_y)",CLUSTER_5,CLUSTER_10
mda,"sklearn.metrics.median_absolute_error(y,pred_y)",CLUSTER_5,CLUSTER_10
mda,"sklearn.metrics.median_absolute_error(y,pred_y)",CLUSTER_5,CLUSTER_10
r2s,"sklearn.metrics.r2_score(y,pred_y)",CLUSTER_5,CLUSTER_10
r2s,"sklearn.metrics.r2_score(y,pred_y)",CLUSTER_5,CLUSTER_10
request,"requests.get('%s%s%s'%(api_url,end_point,url_addons)",CLUSTER_9,CLUSTER_2
request,"requests.get('%s%s'%(api_url,end_point_plus_aux)",CLUSTER_9,CLUSTER_2
request,"requests.get('%s%s'%(api_url,end_point_plus_aux)",CLUSTER_9,CLUSTER_2
request,"requests.get('%s%s'%(api_url,end_point_plus_aux)",CLUSTER_9,CLUSTER_2
request,"requests.get('%s%s'%(api_url,end_point_plus_aux)",CLUSTER_9,CLUSTER_2
response,json.loads(request.text),CLUSTER_9,CLUSTER_2
response,json.loads(request.text),CLUSTER_9,CLUSTER_2
response,json.loads(request.text),CLUSTER_9,CLUSTER_2
response,json.loads(request.text),CLUSTER_9,CLUSTER_2
response,json.loads(request.text),CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(15,8)",CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(15,8)",CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(15,8)",CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(15,8)",CLUSTER_9,CLUSTER_2
var_values,"numpy.array(params[0]['data'],dtype=float)",CLUSTER_9,CLUSTER_2
time_values,numpy.array(times[0]['data']),CLUSTER_9,CLUSTER_2
var_values,"numpy.array(params[0]['data'],dtype=float)",CLUSTER_9,CLUSTER_2
time_values,numpy.array(times[0]['data']),CLUSTER_9,CLUSTER_2
var_values,"numpy.array(params[0]['data'],dtype=float)",CLUSTER_9,CLUSTER_2
time_values,numpy.array(times[0]['data']),CLUSTER_9,CLUSTER_2
var_values,"numpy.array(params[0]['data'],dtype=float)",CLUSTER_9,CLUSTER_2
time_values,numpy.array(times[0]['data']),CLUSTER_9,CLUSTER_2
r,"random.randint(0,mnist.test.num_examples-1)",CLUSTER_2,CLUSTER_7
data,pandas.read_csv(r'C:\Users\af.sabirova\Desktop\pyda\3модульДЗ\3.2\HousingData.csv'),CLUSTER_7,CLUSTER_5
XX,numpy.array(x),CLUSTER_4,CLUSTER_10
predx,"numpy.linspace(0.,max_domain,100)",CLUSTER_4,CLUSTER_10
predx,"numpy.linspace(0.,max_domain,100)",CLUSTER_4,CLUSTER_10
T_exp,numpy.loadtxt('ref/HSRS/222'),CLUSTER_4,CLUSTER_10
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_10
svcmodel,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_10
svcmodel,"sklearn.svm.SVC(kernel='linear',gamma=400)",CLUSTER_4,CLUSTER_10
svcmodel,"sklearn.svm.SVC(kernel='poly',gamma=40)",CLUSTER_4,CLUSTER_10
svcmodel,"sklearn.svm.SVC(kernel='rbf',gamma=1000)",CLUSTER_4,CLUSTER_10
ward,"sklearn.cluster.AgglomerativeClustering(n_clusters=2,connectivity=data_kneighbor,linkage='ward')",CLUSTER_4,CLUSTER_10
data_kneighbor,"sklearn.neighbors.kneighbors_graph(XX,n_neighbors=10,include_self=False)",CLUSTER_4,CLUSTER_10
svrmodel,sklearn.svm.SVR(),CLUSTER_4,CLUSTER_10
pca,sklearn.decomposition.PCA(n_components=0.5),CLUSTER_4,CLUSTER_10
pca,sklearn.decomposition.PCA(n_components=1),CLUSTER_4,CLUSTER_10
"test.loc[np.isnan(test.Age),'Age']",numpy.mean(data['Age']),CLUSTER_5,CLUSTER_5
y,numpy.ravel(y),CLUSTER_5,CLUSTER_5
solution,"pandas.DataFrame(list(zip(test['PassengerId'],pred)",CLUSTER_5,CLUSTER_5
data,pandas.read_csv('../input/train.csv'),CLUSTER_5,CLUSTER_5
test,pandas.read_csv('../input/test.csv'),CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_5
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_6,CLUSTER_10
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,figsize=(20,10)",CLUSTER_6,CLUSTER_10
image_array,"numpy.empty(shape=(300,height,width,channels)",CLUSTER_6,CLUSTER_10
sentences,"re.findall(sentence,x)",CLUSTER_10,CLUSTER_4
first,"random.randint(0,amount)",CLUSTER_10,CLUSTER_4
second,"random.randint(0,amount)",CLUSTER_10,CLUSTER_4
second,"random.randint(0,amount)",CLUSTER_10,CLUSTER_4
med_charges,pandas.read_csv('data/insurance2.csv'),CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(1,figsize=(8,6)",CLUSTER_5,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
X_reduced,sklearn.decomposition.PCA(n_components=3),CLUSTER_5,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(30,30)",CLUSTER_1,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(3,2,figsize=(30,30)",CLUSTER_1,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(1,6,figsize=(25,5)",CLUSTER_1,CLUSTER_10
"fig,axes",matplotlib.pyplot.subplots(len(raw_transformers),CLUSTER_1,CLUSTER_10
label_transformed1,"numpy.append(label_transformed1,sltb(label)",CLUSTER_1,CLUSTER_10
response_can,"requests.get(""https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M"")",CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
df_Data,"pandas.DataFrame({Table_Head[0]:Postcode,Table_Head[1]:Borough,Table_Head[2]:Neighbourhood})",CLUSTER_9,CLUSTER_2
df_Toronto,"pandas.DataFrame(columns=['Postcode','Borough','Neighbourhood'])",CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
toronto_onehot,"pandas.get_dummies(Toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
Df_Lat_Long,"pandas.read_csv(""Geospatial_Coordinates.csv"")",CLUSTER_9,CLUSTER_2
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
c1,random.choice(walls),CLUSTER_10,CLUSTER_4
X,"numpy.array([[-1,-1],[-2,-1],[-3,-2],[1,1],[2,1],[3,2]])",CLUSTER_5,CLUSTER_6
Y,"Y=numpy.array([1,1,1,2,2,2])",CLUSTER_5,CLUSTER_6
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_6
citizens,pandas.DataFrame(df['citizen'][df['citizen'].notna(),CLUSTER_0,CLUSTER_12
result,pandas.DataFrame(output),CLUSTER_0,CLUSTER_12
df,pandas.DataFrame(result),CLUSTER_0,CLUSTER_12
df,pandas.DataFrame(output),CLUSTER_0,CLUSTER_12
blah,"pandas.merge(df[['_fn','citizenship']][df['citizenship'].notna()",CLUSTER_0,CLUSTER_12
citizens_meta,"pandas.merge(citizens,meta,left_on='_fn',right_on='filename')",CLUSTER_0,CLUSTER_12
citizens_meta,"pandas.merge(result,meta,on='filename')",CLUSTER_0,CLUSTER_12
df,"pandas.read_csv(dtm,usecols=terms)",CLUSTER_0,CLUSTER_12
meta,pandas.read_csv(meta),CLUSTER_0,CLUSTER_12
proquest_sums,pandas.read_csv('/Users/e/code/c19_2020/citizen_collocates_raw.csv'),CLUSTER_0,CLUSTER_12
gale_dtm,"pandas.read_csv('/Users/e/Desktop/gale_dtm.csv',)",CLUSTER_0,CLUSTER_12
files,os.listdir(directory),CLUSTER_0,CLUSTER_12
kwic,"re.sub('\s+','',kwic)",CLUSTER_0,CLUSTER_12
text,"re.sub('\s+','',text.lower()",CLUSTER_0,CLUSTER_12
start,time.time(),CLUSTER_0,CLUSTER_12
start,time.time(),CLUSTER_0,CLUSTER_12
df1,"pandas.DataFrame(np.random.randn(5,3)",CLUSTER_1,CLUSTER_3
df2,pandas.DataFrame({'A':np.random.random(5),CLUSTER_1,CLUSTER_3
salaries,"pandas.Series([400,300,200,250],
index=['Andrew','Bob',
'Charles','Ann'])",CLUSTER_1,CLUSTER_3
df,"pandas.read_csv('../../data/beauty.csv',sep=';')",CLUSTER_1,CLUSTER_3
stopgtfs,"pandas.read_csv(""../GTFS_DATA/torino_it/stops.txt"",header=0)",CLUSTER_8,CLUSTER_4
train,"pandas.read_csv('train.csv',header=0)",CLUSTER_8,CLUSTER_3
test,"pandas.read_csv('test.csv',header=0)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""../data/face_data/fer2013/fer2013.csv"")",CLUSTER_4,CLUSTER_0
dfx,numpy.array(df),CLUSTER_4,CLUSTER_0
dfx[i][1],numpy.array([int(x),CLUSTER_4,CLUSTER_0
x,"numpy.array([i.reshape(48,48,1)",CLUSTER_4,CLUSTER_0
x,numpy.array(x),CLUSTER_4,CLUSTER_0
cnf_matrix,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_4,CLUSTER_0
"data['workclass'],_",pandas.factorize(data['workclass']),CLUSTER_7,CLUSTER_5
"data['education'],_",pandas.factorize(data['education']),CLUSTER_7,CLUSTER_5
"data['marital-status'],_",pandas.factorize(data['marital-status']),CLUSTER_7,CLUSTER_5
"data['occupation'],_",pandas.factorize(data['occupation']),CLUSTER_7,CLUSTER_5
"data['relationship'],_",pandas.factorize(data['relationship']),CLUSTER_7,CLUSTER_5
"data['race'],_",pandas.factorize(data['race']),CLUSTER_7,CLUSTER_5
"data['sex'],_",pandas.factorize(data['sex']),CLUSTER_7,CLUSTER_5
"data['native-country'],_",pandas.factorize(data['native-country']),CLUSTER_7,CLUSTER_5
"data['income'],_",pandas.factorize(data['income']),CLUSTER_7,CLUSTER_5
df,pandas.read_csv('income.csv'),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.15,random_state=17)",CLUSTER_7,CLUSTER_5
"X1_train,X1_test,y1_train,y1_test","sklearn.model_selection.train_test_split(X1,y1,test_size=.15,random_state=17)",CLUSTER_7,CLUSTER_5
"X_train2,X_test2,y_train2,y_test2","sklearn.model_selection.train_test_split(X2,y2,test_size=.15,random_state=30)",CLUSTER_7,CLUSTER_5
"X_train3,X_test3,y_train3,y_test3","sklearn.model_selection.train_test_split(X3,y3,test_size=.15,random_state=30)",CLUSTER_7,CLUSTER_5
"X_train4,X_test4,y_train4,y_test4","sklearn.model_selection.train_test_split(X4,y4,test_size=.15,random_state=30)",CLUSTER_7,CLUSTER_5
"X_train5,X_test5,y_train5,y_test5","sklearn.model_selection.train_test_split(X5,y5,test_size=.15,random_state=30)",CLUSTER_7,CLUSTER_5
"X_train6,X_test6,y_train6,y_test6","sklearn.model_selection.train_test_split(X6,y6,test_size=.15,random_state=30)",CLUSTER_7,CLUSTER_5
"X_train7,X_test7,y_train7,y_test7","sklearn.model_selection.train_test_split(X7,y7,test_size=.15,random_state=30)",CLUSTER_7,CLUSTER_5
"X_train8,X_test8,y_train8,y_test8","sklearn.model_selection.train_test_split(X8,y8,test_size=.15,random_state=30)",CLUSTER_7,CLUSTER_5
tree,sklearn.tree.DecisionTreeClassifier(random_state=17),CLUSTER_7,CLUSTER_5
tree1,sklearn.tree.DecisionTreeClassifier(random_state=17),CLUSTER_7,CLUSTER_5
tree2,sklearn.tree.DecisionTreeClassifier(random_state=30),CLUSTER_7,CLUSTER_5
tree3,sklearn.tree.DecisionTreeClassifier(random_state=30),CLUSTER_7,CLUSTER_5
tree4,sklearn.tree.DecisionTreeClassifier(random_state=30),CLUSTER_7,CLUSTER_5
tree5,sklearn.tree.DecisionTreeClassifier(random_state=30),CLUSTER_7,CLUSTER_5
tree6,sklearn.tree.DecisionTreeClassifier(random_state=30),CLUSTER_7,CLUSTER_5
tree7,sklearn.tree.DecisionTreeClassifier(random_state=30),CLUSTER_7,CLUSTER_5
tree8,sklearn.tree.DecisionTreeClassifier(random_state=30),CLUSTER_7,CLUSTER_5
cfm,"sklearn.metrics.confusion_matrix(y_test,pred_test)",CLUSTER_7,CLUSTER_5
sample_json_df,pandas.read_json('data/world_bank_projects_less.json'),CLUSTER_8,CLUSTER_3
df_worldbank,pandas.read_json(worldbankdata),CLUSTER_8,CLUSTER_3
worldbankdata_string,json.load(open(worldbankdata),CLUSTER_8,CLUSTER_3
raw_df,pandas.read_csv('numeric_rand_sample.csv'),CLUSTER_11,CLUSTER_5
"train,test","sklearn.model_selection.train_test_split(
raw_df,
stratify=raw_df[TARGET],
test_size=0.2,
random_state=42
)",CLUSTER_11,CLUSTER_5
model,sklearn.linear_model.LogisticRegression(),CLUSTER_11,CLUSTER_5
cnf_matrix,"sklearn.metrics.confusion_matrix(test[TARGET],predictions)",CLUSTER_11,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(test[TARGET],y_pred_proba)",CLUSTER_11,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(test[TARGET],y_pred_proba)",CLUSTER_11,CLUSTER_5
magic,math.sin(radLat),CLUSTER_4,CLUSTER_11
sqrtMagic,math.sqrt(magic),CLUSTER_4,CLUSTER_11
coeff_df,"pandas.DataFrame(regressor.coef_,X.columns,columns=['Coefficient'])",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame({'Actual':y_test,'Predicted':y_pred})",CLUSTER_7,CLUSTER_8
dataset,pandas.read_csv(url),CLUSTER_7,CLUSTER_8
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X.values,y,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X.values,y,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_8
classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
y_actual,numpy.array(y_actual),CLUSTER_5,CLUSTER_5
counts,"numpy.unique(col,return_counts=True)",CLUSTER_5,CLUSTER_5
x_left,"pandas.DataFrame([],columns=x_data.columns)",CLUSTER_5,CLUSTER_5
x_right,"pandas.DataFrame([],columns=x_data.columns)",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv(""./titanic.csv"")",CLUSTER_5,CLUSTER_5
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
dt,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33)",CLUSTER_5,CLUSTER_5
rf,"sklearn.ensemble.RandomForestClassifier(criterion='entropy',n_estimators=30)",CLUSTER_5,CLUSTER_5
table,numpy.zeros((2**len(observation),CLUSTER_1,CLUSTER_10
action,"numpy.argmax(Q[state_adj[0],state_adj[1]])",CLUSTER_1,CLUSTER_10
ave_reward,numpy.mean(reward_list),CLUSTER_1,CLUSTER_10
response,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
df,pandas.DataFrame(myData),CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
toronto_onehot,"pandas.get_dummies(toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
df_merged,"pandas.merge(left=df,right=df_geo,left_on='Postcode',right_on='PostalCode')",CLUSTER_9,CLUSTER_2
df_geo,pandas.read_csv('http://cocl.us/Geospatial_data'),CLUSTER_9,CLUSTER_2
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
file_contents,os.listdir(directory),CLUSTER_11,CLUSTER_11
movie_data,json.load(movie_file),CLUSTER_11,CLUSTER_11
movie['release_date_limited'],"datetime.datetime.strptime(movie['release_date_limited'],'%Y-%m-%d')",CLUSTER_11,CLUSTER_11
movie['release_date_wide'],"datetime.datetime.strptime(movie['release_date_wide'],'%Y-%m-%d')",CLUSTER_11,CLUSTER_11
mojo_df,pandas.DataFrame(mojomovies),CLUSTER_11,CLUSTER_11
meta_df,pandas.DataFrame(metacriticmovies),CLUSTER_11,CLUSTER_11
merged_df,"pandas.merge(meta_df,mojo_df,how='outer',on='title')",CLUSTER_11,CLUSTER_11
start,time.time(),CLUSTER_6,CLUSTER_10
data,pandas.read_csv('D:\\Manisha\\Undergrad_Semester\\Semesters\\Fall2019\\capstone\\System.tweets_esports_olympics.csv'),CLUSTER_0,CLUSTER_3
expanded_text,"re.sub(""'"","""",expanded_text)",CLUSTER_0,CLUSTER_3
"data.loc[i,'text']","re.sub(r'@[A-Za-z0-9]+','',str(data.loc[i,'text'])",CLUSTER_0,CLUSTER_3
"data.loc[i,'text']","re.sub('https?://[A-Za-z0-9./]+','',data.loc[i,'text'])",CLUSTER_0,CLUSTER_3
"data.loc[i,'text']","re.sub('http?://[A-Za-z0-9./]+','',data.loc[i,'text'])",CLUSTER_0,CLUSTER_3
"data.loc[i,'text']","re.sub(r""\t|\n|\r"","""",data.loc[i,'text'],flags=re.I)",CLUSTER_0,CLUSTER_3
"data.loc[i,'text']","re.sub(r""[,@\


data.loc[i,'text']=re.sub(r""\d"","""",data.loc[i,'text'])",CLUSTER_0,CLUSTER_3
"data.loc[i,'text']","re.sub(r'\s+[a-zA-Z]\s+','',data.loc[i,'text'])",CLUSTER_0,CLUSTER_3
"data.loc[i,'text']","re.sub(r'\s+','',data.loc[i,'text'],flags=re.I)",CLUSTER_0,CLUSTER_3
contractions_pattern,re.compile('({}),CLUSTER_0,CLUSTER_3
reg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
dataset,"pandas.read_csv(""Salary_Data.csv"")",CLUSTER_5,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(dataset[['YearsExperience']],dataset[['Salary']])",CLUSTER_5,CLUSTER_5
first,"random.randint(1,6)",CLUSTER_10,CLUSTER_4
first2,"random.randint(1,6)",CLUSTER_10,CLUSTER_4
coef_values,"pandas.DataFrame({""Faeture_Names"":cpp_train_x.columns,""coeff"":reg.coef_})",CLUSTER_7,CLUSTER_5
cpp,"pandas.read_csv(r""C:\Users\nb291\Desktop\car_price.csv.csv"")",CLUSTER_7,CLUSTER_5
MSE,numpy.mean(error*error),CLUSTER_7,CLUSTER_5
MAPE,numpy.mean(np.absolute(error/cpp_test_y),CLUSTER_7,CLUSTER_5
RMSE,"numpy.power(MSE,.5)",CLUSTER_7,CLUSTER_5
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
"cpp_train_x,cpp_test_x,cpp_train_y,cpp_test_y","sklearn.model_selection.train_test_split(cpp_x,cpp_y,test_size=0.1,random_state=101)",CLUSTER_7,CLUSTER_5
reg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
letter_counts,collections.Counter(final),CLUSTER_0,CLUSTER_3
weather_response,requests.get(query_url),CLUSTER_9,CLUSTER_2
weather_df,"pandas.DataFrame({""City"":city_name,
""Cloudiness"":city_cloudiness,
""Country"":city_country,
""Date"":city_date,
""Humidity"":city_humidity,
""Lat"":city_lat,
""Lng"":city_lng,
""Max_Temp"":city_temp,
""Wind_Speed"":city_windspeed})",CLUSTER_9,CLUSTER_2
"weather_df[""Date""]","pandas.to_datetime(weather_df['Date'],unit='s')",CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(7,5)",CLUSTER_9,CLUSTER_2
fig,matplotlib.pyplot.figure(),CLUSTER_9,CLUSTER_2
fig,matplotlib.pyplot.figure(),CLUSTER_9,CLUSTER_2
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_9,CLUSTER_2
df,"pandas.read_csv('App/Data/superstore.csv',parse_dates=['OrderDate','ShipDate'])",CLUSTER_11,CLUSTER_3
df['Order_Month'],"pandas.to_datetime(df['OrderDate'].map(lambdax:""{}-{}"".format(x.year,x.month)",CLUSTER_11,CLUSTER_3
geojson,json.loads(geo.read(),CLUSTER_11,CLUSTER_3
states_dict,json.loads(f.read(),CLUSTER_11,CLUSTER_3
"df[""month""]","pandas.DatetimeIndex(df[""fecha_dato""])",CLUSTER_11,CLUSTER_3
new_incomes,"pandas.merge(df,grouped,how=""inner"",on=""nomprov"")",CLUSTER_11,CLUSTER_3
df,"pandas.read_csv(""train.csv"",dtype=data_type)",CLUSTER_11,CLUSTER_3
"df[""age""]","pandas.to_numeric(df[""age""],errors=""coerce"")",CLUSTER_11,CLUSTER_3
start_time,datetime.datetime.now(),CLUSTER_11,CLUSTER_3
x,"numpy.expand_dims(x,axis=0)",CLUSTER_12,CLUSTER_10
df,pandas.DataFrame(csv),CLUSTER_9,CLUSTER_2
airport_df,pandas.DataFrame(csv),CLUSTER_9,CLUSTER_2
csv,"pandas.read_csv(file,sep='\t',header=None)",CLUSTER_9,CLUSTER_2
csv,pandas.read_csv(file),CLUSTER_9,CLUSTER_2
total_flights_out_df['Date(yyyymm)ofFlight'],pandas.to_datetime(total_flights_out_df['Date(yyyymm),CLUSTER_9,CLUSTER_2
ax,seaborn.lineplot(x=total_flights_out_df['Date(yyyymm),CLUSTER_9,CLUSTER_2
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_9,CLUSTER_2
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_9,CLUSTER_2
cities_lat_lng,"requests.get(geocodeUrl,params=params)",CLUSTER_9,CLUSTER_2
df,"pandas.DataFrame(columns=['subject','act',""obj"",""point""])",CLUSTER_0,CLUSTER_3
dfExoplanetsAbs,"pandas.read_json(""./data/dfExoplanetsNASAabsClear_v1.json"",orient=""table"")",CLUSTER_0,CLUSTER_3
dfExoplanetsSent,"pandas.read_json(""./data/dfE.json"",orient=""table"")",CLUSTER_0,CLUSTER_3
dfExoplanetsNASAannot,"pandas.read_json('./data/dfExoplanetsNASAdetected100rand_v2.json',orient='table')",CLUSTER_0,CLUSTER_3
df,"pandas.read_pickle(""/Users/gerdgrasshoff/Dropbox/temp/dfSentences.pickl"")",CLUSTER_0,CLUSTER_3
_all_ys,"numpy.array(list(dfExoplanetsNASAannot[""label""])",CLUSTER_0,CLUSTER_3
>>>tmp,numpy.arange(10),CLUSTER_1,CLUSTER_9
grids,numpy.array([xc.ravel(),CLUSTER_1,CLUSTER_9
img,numpy.array(img),CLUSTER_1,CLUSTER_9
img,numpy.array(img),CLUSTER_1,CLUSTER_9
mu,"numpy.array([[0,0],[5,5]])",CLUSTER_1,CLUSTER_9
sd,numpy.array([np.eye(2),CLUSTER_1,CLUSTER_9
nc,"numpy.array([[1*idx,9*idx]foridxin[1,2,5,10,15,20,25,50,100]])",CLUSTER_1,CLUSTER_9
y,"numpy.array([generate_sample(mu,sd,nc[idx])",CLUSTER_1,CLUSTER_9
mat,numpy.array([1]*nc[idx].sum(),CLUSTER_1,CLUSTER_9
lst_dt_cuda,numpy.array(lst),CLUSTER_1,CLUSTER_9
mat,numpy.array([1]*nc[idx].sum(),CLUSTER_1,CLUSTER_9
lst_dt,numpy.array(lst),CLUSTER_1,CLUSTER_9
mat,numpy.array([1]*nc[0].sum(),CLUSTER_1,CLUSTER_9
points,"numpy.empty((num_pts,)",CLUSTER_1,CLUSTER_9
weights,"numpy.empty(shape=(grids.shape[0],points.shape[0])",CLUSTER_1,CLUSTER_9
weights,"numpy.empty(shape=(grids.shape[0],points.shape[0])",CLUSTER_1,CLUSTER_9
point_dtype,"numpy.dtype({
'names':['x','y'],
'formats':[np.float32,np.float32]})",CLUSTER_1,CLUSTER_9
dat,numpy.concatenate(dat),CLUSTER_1,CLUSTER_9
zc,"numpy.matmul(weights,z)",CLUSTER_1,CLUSTER_9
zc,"numpy.matmul(weights,z)",CLUSTER_1,CLUSTER_9
num,numpy.log10(nc.sum(axis=1),CLUSTER_1,CLUSTER_9
xc,numpy.linspace(min(x),CLUSTER_1,CLUSTER_9
yc,numpy.linspace(min(y),CLUSTER_1,CLUSTER_9
"xc,yc","numpy.meshgrid(xc,yc)",CLUSTER_1,CLUSTER_9
blockspergrid_x,math.ceil(grids.shape[0]/threadsperblock[0]),CLUSTER_1,CLUSTER_9
blockspergrid_y,math.ceil(points.shape[0]/threadsperblock[1]),CLUSTER_1,CLUSTER_9
labels_to_names,"pandas.read_csv(CLASSES_FILE,header=None)",CLUSTER_4,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_0
my_df,"pandas.DataFrame(two_dimensional_list,columns=['name','english_score','math_score'],index=['a','b','c','d'])",CLUSTER_8,CLUSTER_3
df1,pandas.DataFrame(two_dimensional_list),CLUSTER_8,CLUSTER_3
df2,pandas.DataFrame(two_dimensional_array),CLUSTER_8,CLUSTER_3
df3,pandas.DataFrame(list_of_series),CLUSTER_8,CLUSTER_3
df1,pandas.DataFrame(dict1),CLUSTER_8,CLUSTER_3
df2,pandas.DataFrame(dict2),CLUSTER_8,CLUSTER_3
df3,pandas.DataFrame(dict3),CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(my_list),CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(star_dict),CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(person_dict),CLUSTER_8,CLUSTER_3
iphone_df,"pandas.read_csv('data/iphone.csv',index_col=0)",CLUSTER_8,CLUSTER_3
df,pandas.read_csv('data/popular_baby_names.csv'),CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('data/mega_millions.csv',index_col=0)",CLUSTER_8,CLUSTER_3
iphone_df,"pandas.read_csv('data/iphone.csv',index_col=0)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('data/broadcast.csv',index_col=0)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('data/broadcast.csv',index_col=0)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('data/broadcast.csv',index_col=0)",CLUSTER_8,CLUSTER_3
samsong_df,pandas.read_csv('data/samsong.csv'),CLUSTER_8,CLUSTER_3
hyundee_df,pandas.read_csv('data/hyundee.csv'),CLUSTER_8,CLUSTER_3
iphone_df,"pandas.read_csv('data/iphone.csv',index_col=0)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('data/broadcast.csv',index_col=0)",CLUSTER_8,CLUSTER_3
iphone_df,"pandas.read_csv('data/iphone.csv',index_col=0)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('data/broadcast.csv',index_col=0)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv('data/broadcast.csv',index_col=0)",CLUSTER_8,CLUSTER_3
iphone_df,"pandas.read_csv('data/iphone.csv',index_col=0)",CLUSTER_8,CLUSTER_3
two_dimensional_array,numpy.array(two_dimensional_list),CLUSTER_8,CLUSTER_3
df_nodes,"pandas.read_sql_query(query_formatted,db)",CLUSTER_4,CLUSTER_11
df,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
final_df,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
df['binned'],"pandas.cut(df['DAYSTOCLOSE'],bins,labels=[1,2,3,4,5])",CLUSTER_5,CLUSTER_5
tickets_311_df,"pandas.read_csv(tickets_311,encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_5
"X,y","sklearn.datasets.make_blobs(centers=2,random_state=42)",CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=7),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test",sklearn.model_selection.train_test_split(data.head(10000),CLUSTER_5,CLUSTER_5
data,sklearn.datasets.load_files(path),CLUSTER_2,CLUSTER_0
dog_files,numpy.array(data['filenames']),CLUSTER_2,CLUSTER_0
test_accuracy,"100*np.sum(np.array(vgg16_predictions)==
numpy.argmax(test_targets,axis=1)",CLUSTER_2,CLUSTER_0
bottleneck_features,numpy.load('bottleneck_features/DogVGG16Data.npz'),CLUSTER_2,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_2,CLUSTER_0
df_dummy,"pandas.get_dummies(df,columns=col_to_dummy)",CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""static/data/churn.csv"")",CLUSTER_7,CLUSTER_5
max_depths,"numpy.linspace(1,32,32,endpoint=True)",CLUSTER_7,CLUSTER_5
min_samples_splits,"numpy.linspace(0.1,1.0,10,endpoint=True)",CLUSTER_7,CLUSTER_5
min_samples_leafs,"numpy.linspace(0.1,0.5,5,endpoint=True)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(35,30)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(35,30)",CLUSTER_7,CLUSTER_5
"line1,","matplotlib.pyplot.plot(max_depths,train_results,'b',label='TrainAUC')",CLUSTER_7,CLUSTER_5
"line2,","matplotlib.pyplot.plot(max_depths,test_results,'r',label='TestAUC')",CLUSTER_7,CLUSTER_5
"line1,","matplotlib.pyplot.plot(min_samples_splits,train_results,'b',label='TrainAUC')",CLUSTER_7,CLUSTER_5
"line2,","matplotlib.pyplot.plot(min_samples_splits,test_results,'r',label='TestAUC')",CLUSTER_7,CLUSTER_5
"line1,","matplotlib.pyplot.plot(min_samples_leafs,train_results,'b',label='TrainAUC')",CLUSTER_7,CLUSTER_5
"line2,","matplotlib.pyplot.plot(min_samples_leafs,test_results,'r',label='TestAUC')",CLUSTER_7,CLUSTER_5
"line1,","matplotlib.pyplot.plot(max_features,train_results,'b',label='TrainAUC')",CLUSTER_7,CLUSTER_5
"line2,","matplotlib.pyplot.plot(max_features,test_results,'r',label='TestAUC')",CLUSTER_7,CLUSTER_5
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,y_pred_prob)",CLUSTER_7,CLUSTER_5
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(y_train,train_pred)",CLUSTER_7,CLUSTER_5
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_7,CLUSTER_5
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(y_train,train_pred)",CLUSTER_7,CLUSTER_5
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_7,CLUSTER_5
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(y_train,train_pred)",CLUSTER_7,CLUSTER_5
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_7,CLUSTER_5
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(y_train,train_pred)",CLUSTER_7,CLUSTER_5
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_7,CLUSTER_5
roc_auc,"sklearn.metrics.auc(false_positive_rate,true_positive_rate)",CLUSTER_7,CLUSTER_5
roc_auc,"sklearn.metrics.auc(false_positive_rate,true_positive_rate)",CLUSTER_7,CLUSTER_5
roc_auc,"sklearn.metrics.auc(false_positive_rate,true_positive_rate)",CLUSTER_7,CLUSTER_5
roc_auc,"sklearn.metrics.auc(false_positive_rate,true_positive_rate)",CLUSTER_7,CLUSTER_5
roc_auc,"sklearn.metrics.auc(false_positive_rate,true_positive_rate)",CLUSTER_7,CLUSTER_5
roc_auc,"sklearn.metrics.auc(false_positive_rate,true_positive_rate)",CLUSTER_7,CLUSTER_5
roc_auc,"sklearn.metrics.auc(false_positive_rate,true_positive_rate)",CLUSTER_7,CLUSTER_5
roc_auc,"sklearn.metrics.auc(false_positive_rate,true_positive_rate)",CLUSTER_7,CLUSTER_5
df_dummy[col_transform],sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_5
clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
dt,sklearn.tree.DecisionTreeClassifier(max_depth=max_depth),CLUSTER_7,CLUSTER_5
dt,sklearn.tree.DecisionTreeClassifier(min_samples_split=min_samples_split),CLUSTER_7,CLUSTER_5
dt,sklearn.tree.DecisionTreeClassifier(min_samples_leaf=min_samples_leaf),CLUSTER_7,CLUSTER_5
dt,sklearn.tree.DecisionTreeClassifier(max_features=max_feature),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=42)",CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_7,CLUSTER_5
grid_search,sklearn.model_selection.GridSearchCV(RandomForestClassifier(),CLUSTER_7,CLUSTER_5
k_list,numpy.array([]),CLUSTER_12,CLUSTER_3
diff_list,numpy.array([]),CLUSTER_12,CLUSTER_3
mesh_lon,numpy.array(mesh_lon),CLUSTER_12,CLUSTER_3
mesh_lat,numpy.array(mesh_lat),CLUSTER_12,CLUSTER_3
mesh_bathy,numpy.array(mesh_bathy),CLUSTER_12,CLUSTER_3
transect_i,numpy.array([]),CLUSTER_12,CLUSTER_3
transect_j,numpy.array([]),CLUSTER_12,CLUSTER_3
mn_dis,numpy.array(mn_dis),CLUSTER_12,CLUSTER_3
lat_model,numpy.array(lat_model),CLUSTER_12,CLUSTER_3
lon_model,numpy.array(lon_model),CLUSTER_12,CLUSTER_3
depths_model,numpy.array(depths_model),CLUSTER_12,CLUSTER_3
transect_i,numpy.array([]),CLUSTER_12,CLUSTER_3
transect_j,numpy.array([]),CLUSTER_12,CLUSTER_3
lat_2012,numpy.array(data.get('Latitude_(Decimal_Degrees),CLUSTER_12,CLUSTER_3
lon_2012,numpy.array(data.get('Longitude_(Decimal_Degrees),CLUSTER_12,CLUSTER_3
dMn_2012,numpy.array(data.get('Mn_ug/L'),CLUSTER_12,CLUSTER_3
transect_distances_m,numpy.array([]),CLUSTER_12,CLUSTER_3
transect_vlons,numpy.array([]),CLUSTER_12,CLUSTER_3
transect_vlats,numpy.array([]),CLUSTER_12,CLUSTER_3
depth_CB3,numpy.array(depth_CB3),CLUSTER_12,CLUSTER_3
depth_CB2,numpy.array(depth_CB2),CLUSTER_12,CLUSTER_3
depth_CB1,numpy.array(depth_CB1),CLUSTER_12,CLUSTER_3
depth_CAA9,numpy.array(depth_CAA9),CLUSTER_12,CLUSTER_3
depth_CAA8,numpy.array(depth_CAA8),CLUSTER_12,CLUSTER_3
depth_CAA7,numpy.array(depth_CAA7),CLUSTER_12,CLUSTER_3
depth_CAA6,numpy.array(depth_CAA6),CLUSTER_12,CLUSTER_3
depth_CAA5,numpy.array(depth_CAA5),CLUSTER_12,CLUSTER_3
depth_CAA4,numpy.array(depth_CAA4),CLUSTER_12,CLUSTER_3
depth_CAA3,numpy.array(depth_CAA3),CLUSTER_12,CLUSTER_3
depth_CAA2,numpy.array(depth_CAA2),CLUSTER_12,CLUSTER_3
depth_CAA1,numpy.array(depth_CAA1),CLUSTER_12,CLUSTER_3
dMn_CB3,numpy.array(dMn_CB3),CLUSTER_12,CLUSTER_3
dMn_CB2,numpy.array(dMn_CB2),CLUSTER_12,CLUSTER_3
dMn_CB1,numpy.array(dMn_CB1),CLUSTER_12,CLUSTER_3
dMn_CAA9,numpy.array(dMn_CAA9),CLUSTER_12,CLUSTER_3
dMn_CAA8,numpy.array(dMn_CAA8),CLUSTER_12,CLUSTER_3
dMn_CAA7,numpy.array(dMn_CAA7),CLUSTER_12,CLUSTER_3
dMn_CAA6,numpy.array(dMn_CAA6),CLUSTER_12,CLUSTER_3
dMn_CAA5,numpy.array(dMn_CAA5),CLUSTER_12,CLUSTER_3
dMn_CAA4,numpy.array(dMn_CAA4),CLUSTER_12,CLUSTER_3
dMn_CAA3,numpy.array(dMn_CAA3),CLUSTER_12,CLUSTER_3
dMn_CAA2,numpy.array(dMn_CAA2),CLUSTER_12,CLUSTER_3
dMn_CAA1,numpy.array(dMn_CAA1),CLUSTER_12,CLUSTER_3
transect_bathy,numpy.array([]),CLUSTER_12,CLUSTER_3
transect_lons_bathy,numpy.array([]),CLUSTER_12,CLUSTER_3
transect_lats_bathy,numpy.array([]),CLUSTER_12,CLUSTER_3
transect_distances,numpy.array([]),CLUSTER_12,CLUSTER_3
lons_modelt,numpy.array([]),CLUSTER_12,CLUSTER_3
lats_modelt,numpy.array([]),CLUSTER_12,CLUSTER_3
transect_model_distances,numpy.array([]),CLUSTER_12,CLUSTER_3
station_i,numpy.array([]),CLUSTER_12,CLUSTER_3
station_j,numpy.array([]),CLUSTER_12,CLUSTER_3
mn_model,numpy.array([]),CLUSTER_12,CLUSTER_3
vector,numpy.zeros(24),CLUSTER_12,CLUSTER_3
mn_dis_t,numpy.zeros((len(depths_model),CLUSTER_12,CLUSTER_3
N,numpy.count_nonzero(~np.isnan(Obs),CLUSTER_12,CLUSTER_3
N,numpy.count_nonzero(~np.isnan(Obs),CLUSTER_12,CLUSTER_3
"j_list,i_list","numpy.where(
np.logical_and(
(np.logical_and(model_lons>lon-tols[grid]['tol_lon'],
model_lons<lon+tols[grid]['tol_lon'])",CLUSTER_12,CLUSTER_3
k,numpy.argmin(diff_list),CLUSTER_12,CLUSTER_3
RI,numpy.exp(sqrt_RI),CLUSTER_12,CLUSTER_3
a,numpy.sin(dlat/2),CLUSTER_12,CLUSTER_3
sqrt_RI,numpy.sqrt(sum_ratio/N),CLUSTER_12,CLUSTER_3
mn_obser_all,"numpy.vstack((mn_obser_all,mn_obser)",CLUSTER_12,CLUSTER_3
mn_model_all,"numpy.vstack((mn_model_all,mn_model)",CLUSTER_12,CLUSTER_3
diff_list,"numpy.append(diff_list,diff)",CLUSTER_12,CLUSTER_3
k_list,"numpy.append(k_list,k)",CLUSTER_12,CLUSTER_3
transect_i,"numpy.append(transect_i,i)",CLUSTER_12,CLUSTER_3
transect_j,"numpy.append(transect_j,j)",CLUSTER_12,CLUSTER_3
transect_i,"numpy.append(transect_i,i)",CLUSTER_12,CLUSTER_3
transect_j,"numpy.append(transect_j,j)",CLUSTER_12,CLUSTER_3
transect_distances_m,"numpy.append(transect_distances_m,distance_m)",CLUSTER_12,CLUSTER_3
transect_vlons,"numpy.append(transect_vlons,vector_lons)",CLUSTER_12,CLUSTER_3
transect_vlats,"numpy.append(transect_vlats,vector_lats)",CLUSTER_12,CLUSTER_3
transect_bathy,"numpy.append(transect_bathy,mesh_bathy[transect_i[n],transect_j[n]])",CLUSTER_12,CLUSTER_3
transect_lons_bathy,"numpy.append(transect_lons_bathy,mesh_lon[transect_i[n],transect_j[n]])",CLUSTER_12,CLUSTER_3
transect_lats_bathy,"numpy.append(transect_lats_bathy,mesh_lat[transect_i[n],transect_j[n]])",CLUSTER_12,CLUSTER_3
transect_distances,"numpy.append(transect_distances,distance)",CLUSTER_12,CLUSTER_3
lons_modelt,"numpy.append(lons_modelt,lon)",CLUSTER_12,CLUSTER_3
lats_modelt,"numpy.append(lats_modelt,lat)",CLUSTER_12,CLUSTER_3
transect_model_distances,"numpy.append(transect_model_distances,distance)",CLUSTER_12,CLUSTER_3
station_i,"numpy.append(station_i,i)",CLUSTER_12,CLUSTER_3
station_j,"numpy.append(station_j,j)",CLUSTER_12,CLUSTER_3
mn_model,"numpy.append(mn_model,mn_model_indiv)",CLUSTER_12,CLUSTER_3
transect_depths,numpy.column_stack((fill_nans(depth_CB3),CLUSTER_12,CLUSTER_3
transect_dMn,numpy.column_stack((fill_nans(dMn_CB3),CLUSTER_12,CLUSTER_3
station_depths,numpy.column_stack((fill_nans(depth_CAA1),CLUSTER_12,CLUSTER_3
station_dMn,numpy.column_stack((fill_nans(dMn_CAA1),CLUSTER_12,CLUSTER_3
sum_ratio,numpy.nansum(ratio),CLUSTER_12,CLUSTER_3
numerator,numpy.nanmean([(Pred[i]-Obs[i]),CLUSTER_12,CLUSTER_3
denominator,numpy.nanmean([(term1[i]+term2[i]),CLUSTER_12,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(14,10)",CLUSTER_12,CLUSTER_3
ax1,"matplotlib.pyplot.subplot2grid((2,3)",CLUSTER_12,CLUSTER_3
ax2,"matplotlib.pyplot.subplot2grid((2,3)",CLUSTER_12,CLUSTER_3
ax3,"matplotlib.pyplot.subplot2grid((2,3)",CLUSTER_12,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(13,8)",CLUSTER_12,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(13,8)",CLUSTER_12,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(2,1,figsize=(14,8)",CLUSTER_12,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(2,1,figsize=(14,8)",CLUSTER_12,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(13,8)",CLUSTER_12,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(13,8)",CLUSTER_12,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(10,10)",CLUSTER_12,CLUSTER_3
data,"pandas.read_csv(""/ocean/brogalla/GEOTRACES/data/HLY1202_Metals_Profile.csv"")",CLUSTER_12,CLUSTER_3
Mn_data,pandas.read_csv('/ocean/brogalla/GEOTRACES/data/Mn_Integrated_Data_UBC-UVic_4-17-19.csv'),CLUSTER_12,CLUSTER_3
X,pandas.DataFrame(X_imputed),CLUSTER_7,CLUSTER_8
Y,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
ytrain,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_Xtest,pandas.DataFrame(X_test),CLUSTER_7,CLUSTER_8
labels,pandas.DataFrame(y_test),CLUSTER_7,CLUSTER_8
X2,pandas.DataFrame(X2_imputed),CLUSTER_7,CLUSTER_8
X3,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_new,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
feature_importances,"pandas.Series(model.feature_importances_,index=X_test.columns)",CLUSTER_7,CLUSTER_8
df_train,pandas.read_csv('/Volumes/lesleydata/SVanalyzer_ML/Sept122017/Step3_ML/data/train/tech_sep/DEL/no_minus_one/pacbio_HG002_no-1_DEL.csv'),CLUSTER_7,CLUSTER_8
df_train_2,pandas.read_csv('/Volumes/lesleydata/SVanalyzer_ML/Sept122017/Step3_ML/data/train/tech_sep/DEL/no_minus_one/pacbio_HG002_no-1_DEL.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv('/Volumes/lesleydata/SVanalyzer_ML/Sept122017/Step3_ML/data/test/tech_sep/DEL/no_minus_one/pacbio_HG002_no-1_DEL.csv'),CLUSTER_7,CLUSTER_8
df_test_2,pandas.read_csv('/Volumes/lesleydata/SVanalyzer_ML/Sept122017/Step3_ML/data/test/tech_sep/DEL/no_minus_one/pacbio_HG002_no-1_DEL.csv'),CLUSTER_7,CLUSTER_8
indices,numpy.argsort(importances),CLUSTER_7,CLUSTER_8
model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X4,Y,test_size=0.3,random_state=0)",CLUSTER_7,CLUSTER_8
habermans,"pandas.read_csv(""haberman.csv"")",CLUSTER_7,CLUSTER_3
cdf,numpy.cumsum(pdf),CLUSTER_7,CLUSTER_3
cdf,numpy.cumsum(pdf),CLUSTER_7,CLUSTER_3
cdf,numpy.cumsum(pdf),CLUSTER_7,CLUSTER_3
"counts,bin_edges","numpy.histogram(habermans['age'],bins=10,
density=True)",CLUSTER_7,CLUSTER_3
"counts,bin_edges","numpy.histogram(habermans['age'],bins=20,
density=True)",CLUSTER_7,CLUSTER_3
"counts,bin_edges","numpy.histogram(habermans['year'],bins=10,
density=True)",CLUSTER_7,CLUSTER_3
"counts,bin_edges","numpy.histogram(habermans['nodes'],bins=10,
density=True)",CLUSTER_7,CLUSTER_3
graph,"seaborn.FacetGrid(habermans,hue='status',size=5)",CLUSTER_7,CLUSTER_3
graph,"seaborn.FacetGrid(habermans,hue='status',size=5)",CLUSTER_7,CLUSTER_3
df_train,pandas.read_csv('house_train.csv'),CLUSTER_7,CLUSTER_5
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_7,CLUSTER_5
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_5
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_5
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
enc,sklearn.preprocessing.LabelEncoder(),CLUSTER_8,CLUSTER_1
self.thetas,numpy.zeros(64),CLUSTER_3,CLUSTER_6
actionindex,"numpy.zeros(self.num_actions,dtype=np.int)",CLUSTER_3,CLUSTER_6
feature,numpy.concatenate([actionindex[i]*stateforiinself.actions]),CLUSTER_3,CLUSTER_6
yelp,pandas.read_csv('yelp.csv'),CLUSTER_7,CLUSTER_5
g,"seaborn.FacetGrid(yelp,col='stars')",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
nb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer()",CLUSTER_7,CLUSTER_5
df,pandas.DataFrame({'a':rng.rand(5),CLUSTER_7,CLUSTER_3
ts,"pandas.DataFrame({'A':[1,2,3,4,6,7,8,9,10]},index=i)",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame({'key':['a','b','c','a','b','c','d'],
'data':range(7)",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame({'key':['a','b','c','a','b','c'],
'data1':range(6)",CLUSTER_7,CLUSTER_3
ser,pandas.Series(rng.rand(5),CLUSTER_7,CLUSTER_3
i,"pandas.date_range('2019-06-11',periods=9,freq='2D')",CLUSTER_7,CLUSTER_3
planets,seaborn.load_dataset('planets'),CLUSTER_7,CLUSTER_3
flights,seaborn.load_dataset('flights'),CLUSTER_10,CLUSTER_4
tips,seaborn.load_dataset('tips'),CLUSTER_10,CLUSTER_4
df,"pandas.concat([df,categories],axis=1)",CLUSTER_8,CLUSTER_3
messages,pandas.read_csv('messages.csv'),CLUSTER_8,CLUSTER_3
categories,pandas.read_csv('categories.csv'),CLUSTER_8,CLUSTER_3
categories[column],pandas.to_numeric(categories[column]),CLUSTER_8,CLUSTER_3
y,pandas.DataFrame(acc_dict),CLUSTER_8,CLUSTER_4
df,"pandas.read_csv('data/test/COAST.csv',parse_dates=['dates'])",CLUSTER_8,CLUSTER_4
index,"numpy.arange(1,predicted_labels.shape[0]+1)",CLUSTER_4,CLUSTER_1
predicted_df,"pandas.DataFrame(predicted_labels,
index=np.arange(1,predicted_labels.shape[0]+1)",CLUSTER_4,CLUSTER_1
train_test_df,"pandas.concat([train_df,test_df])",CLUSTER_4,CLUSTER_1
train_df,"pandas.read_csv(os.path.join(PATH_TO_DATA,'train_sessions.csv')",CLUSTER_4,CLUSTER_1
test_df,"pandas.read_csv(os.path.join(PATH_TO_DATA,'test_sessions.csv')",CLUSTER_4,CLUSTER_1
train_cat_fnames,os.listdir(train_cats_dir),CLUSTER_2,CLUSTER_7
train_dog_fnames,os.listdir(train_dogs_dir),CLUSTER_2,CLUSTER_7
fig,matplotlib.pyplot.gcf(),CLUSTER_2,CLUSTER_7
sp,"matplotlib.pyplot.subplot(nrows,ncols,i+1)",CLUSTER_2,CLUSTER_7
X:np.ndarray,numpy.arange(11),CLUSTER_5,CLUSTER_5
intercept,numpy.ones(X.shape[0]),CLUSTER_5,CLUSTER_5
intercept,numpy.ones(X.shape[0]),CLUSTER_5,CLUSTER_5
ssr,numpy.sum((y_pred-y.mean(),CLUSTER_5,CLUSTER_5
sst,numpy.sum((y-y.mean(),CLUSTER_5,CLUSTER_5
theta,numpy.linalg.inv(X.T@X),CLUSTER_5,CLUSTER_5
df:pd.DataFrame,pandas.read_csv('car.csv'),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,random_state=2020
)",CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
correct,numpy.squeeze(correct_tensor.numpy(),CLUSTER_6,CLUSTER_11
preds,numpy.squeeze(preds_tensor.numpy(),CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_11
df,pandas.read_csv('Frogs_MFCCs.csv'),CLUSTER_5,CLUSTER_5
y_train,"numpy.vstack((y1_train,y2_train,y3_train)",CLUSTER_5,CLUSTER_5
y_predict,"numpy.vstack((y1_predict,y2_predict,y3_predict)",CLUSTER_5,CLUSTER_5
y_train,"numpy.vstack((y1_train,y2_train,y3_train)",CLUSTER_5,CLUSTER_5
y_predict,"numpy.vstack((y4_predict,y5_predict,y6_predict)",CLUSTER_5,CLUSTER_5
Gamma,"numpy.append(np.arange(0.1,2.1,0.1)",CLUSTER_5,CLUSTER_5
lsvc,"sklearn.svm.LinearSVC('l1',dual=False,C=100)",CLUSTER_5,CLUSTER_5
Lsvc1,"sklearn.svm.LinearSVC('l1',dual=False)",CLUSTER_5,CLUSTER_5
Lsvc2,"sklearn.svm.LinearSVC('l1',dual=False)",CLUSTER_5,CLUSTER_5
Lsvc3,"sklearn.svm.LinearSVC('l1',dual=False)",CLUSTER_5,CLUSTER_5
svc1,sklearn.svm.SVC(),CLUSTER_5,CLUSTER_5
svc2,sklearn.svm.SVC(),CLUSTER_5,CLUSTER_5
svc3,sklearn.svm.SVC(),CLUSTER_5,CLUSTER_5
clf1,"sklearn.model_selection.GridSearchCV(svc1,parameters,cv=10,n_jobs=2)",CLUSTER_5,CLUSTER_5
clf2,"sklearn.model_selection.GridSearchCV(svc2,parameters,cv=10,n_jobs=2)",CLUSTER_5,CLUSTER_5
clf3,"sklearn.model_selection.GridSearchCV(svc3,parameters,cv=10,n_jobs=2)",CLUSTER_5,CLUSTER_5
Lclf1,"sklearn.model_selection.GridSearchCV(Lsvc1,{'C':C},cv=10,n_jobs=-1)",CLUSTER_5,CLUSTER_5
Lclf2,"sklearn.model_selection.GridSearchCV(Lsvc2,{'C':C},cv=10,n_jobs=-1)",CLUSTER_5,CLUSTER_5
Lclf3,"sklearn.model_selection.GridSearchCV(Lsvc3,{'C':C},cv=10,n_jobs=-1)",CLUSTER_5,CLUSTER_5
Hamming_loss+,"sklearn.metrics.hamming_loss(y_train[:,i],y_predict[:,i])",CLUSTER_5,CLUSTER_5
Hamming_loss+,"sklearn.metrics.hamming_loss(y_train[:,i],y_predict[:,i])",CLUSTER_5,CLUSTER_5
arr,"numpy.arange(0,11)",CLUSTER_3,CLUSTER_6
arr,"numpy.arange(0,11)",CLUSTER_3,CLUSTER_6
arr,"numpy.arange(1,11)",CLUSTER_3,CLUSTER_6
arr_2d,"numpy.array(([5,10,15],[20,25,30],[35,40,45])",CLUSTER_3,CLUSTER_6
arr2d,"numpy.zeros((10,10)",CLUSTER_3,CLUSTER_6
cumulative_var,"numpy.cumsum(np.around(var,3)",CLUSTER_7,CLUSTER_8
component_loadings,numpy.transpose(matrix),CLUSTER_7,CLUSTER_8
x_train_scaled,"pandas.DataFrame(train_scaled,columns=x_train.columns)",CLUSTER_7,CLUSTER_8
x_test_scaled,"pandas.DataFrame(test_scaled,columns=x_test.columns)",CLUSTER_7,CLUSTER_8
matrix,"pandas.DataFrame(pca_model.components_,columns=variable_names)",CLUSTER_7,CLUSTER_8
x_train_pca,"pandas.DataFrame(x_train_pca,columns=[""PC_""+str(i)",CLUSTER_7,CLUSTER_8
x_test_pca,"pandas.DataFrame(x_test_pca,columns=[""PC_""+str(i)",CLUSTER_7,CLUSTER_8
train_data,"pandas.concat([x_train_pca,y_train2],axis=1)",CLUSTER_7,CLUSTER_8
test_data,"pandas.concat([x_test_pca,y_test2],axis=1)",CLUSTER_7,CLUSTER_8
bc,"pandas.read_csv(""breastcancer.csv"")",CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(IV,DV,test_size=.30,random_state=0)",CLUSTER_7,CLUSTER_8
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=30),CLUSTER_7,CLUSTER_8
pca2,sklearn.decomposition.PCA(n_components=7),CLUSTER_7,CLUSTER_8
logit,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(boston.data,columns=boston.feature_names)",CLUSTER_5,CLUSTER_5
titanic_with_dummies,"pandas.get_dummies(titanic_missing,columns=['Pclass','Sex','Embarked'],drop_first=True)",CLUSTER_5,CLUSTER_5
titanic,pandas.read_csv('train.csv'),CLUSTER_5,CLUSTER_5
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_5
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
rr,sklearn.linear_model.Ridge(),CLUSTER_5,CLUSTER_5
rr100,sklearn.linear_model.Ridge(alpha=100),CLUSTER_5,CLUSTER_5
titanic_model,"sklearn.linear_model.LogisticRegression(solver='liblinear',max_iter=500)",CLUSTER_5,CLUSTER_5
auc,"sklearn.metrics.roc_auc_score(titanic_y,y_pred_proba)",CLUSTER_5,CLUSTER_5
"fpr,tpr,_","sklearn.metrics.roc_curve(titanic_y,y_pred_proba)",CLUSTER_5,CLUSTER_5
df,"pandas.merge(tndf,geoco,on=['PostalCode'],how='left')",CLUSTER_8,CLUSTER_4
geoco,pandas.read_csv(geocsvhtml),CLUSTER_8,CLUSTER_4
dfs,"pandas.read_html(htmlfile,match='Borough')",CLUSTER_8,CLUSTER_4
df,"pandas.DataFrame({'A':[1,2,np.nan],
'B':[5,np.nan,np.nan],
'C':[1,2,3]})",CLUSTER_8,CLUSTER_3
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_5
dot_data,"sklearn.tree.export_graphviz(
clf,out_file=None,
feature_names=X_train.feature_names,
class_names=X_train.target_names,
filled=True,rounded=True,
special_characters=True)",CLUSTER_5,CLUSTER_5
X_train,"pandas.read_csv(os.path.join("".."",""data"",""X_train.csv"")",CLUSTER_5,CLUSTER_5
X_test,"pandas.read_csv(os.path.join("".."",""data"",""X_test.csv"")",CLUSTER_5,CLUSTER_5
y_train,"pandas.read_csv(os.path.join("".."",""data"",""y_train.csv"")",CLUSTER_5,CLUSTER_5
y_test,"pandas.read_csv(os.path.join("".."",""data"",""y_test.csv"")",CLUSTER_5,CLUSTER_5
rf,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_5,CLUSTER_5
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=estimator,n_jobs=-1)",CLUSTER_5,CLUSTER_5
"line1,","matplotlib.pyplot.plot(n_estimators,train_results,'b',label='TrainAUC')",CLUSTER_5,CLUSTER_5
"line2,","matplotlib.pyplot.plot(n_estimators,test_results,'r',label='TestAUC')",CLUSTER_5,CLUSTER_5
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(y_train,train_pred)",CLUSTER_5,CLUSTER_5
"false_positive_rate,true_positive_rate,thresholds","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_5,CLUSTER_5
roc_auc,"sklearn.metrics.auc(false_positive_rate,true_positive_rate)",CLUSTER_5,CLUSTER_5
roc_auc,"sklearn.metrics.auc(false_positive_rate,true_positive_rate)",CLUSTER_5,CLUSTER_5
X_datas,numpy.asarray(X_datas),CLUSTER_4,CLUSTER_0
y_layers,numpy.asarray(y_layers),CLUSTER_4,CLUSTER_0
y,numpy.zeros(len(way_classes),CLUSTER_4,CLUSTER_0
pos,numpy.argsort(mae),CLUSTER_4,CLUSTER_0
uc,numpy.unique(way_classes),CLUSTER_4,CLUSTER_0
cbar,matplotlib.pyplot.colorbar(),CLUSTER_4,CLUSTER_0
img1,"matplotlib.pyplot.imshow(x_test[pos[-1]],interpolation='none')",CLUSTER_4,CLUSTER_0
img2,"matplotlib.pyplot.imshow(x_test[pos[-2]],interpolation='nearest')",CLUSTER_4,CLUSTER_0
img3,"matplotlib.pyplot.imshow(x_test[pos[-3]],interpolation='nearest')",CLUSTER_4,CLUSTER_0
img1,"matplotlib.pyplot.imshow(x_test[pos[1]],interpolation='nearest')",CLUSTER_4,CLUSTER_0
img2,"matplotlib.pyplot.imshow(x_test[pos[2]],interpolation='nearest')",CLUSTER_4,CLUSTER_0
img3,"matplotlib.pyplot.imshow(x_test[pos[3]],interpolation='nearest')",CLUSTER_4,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X_datas,y_layers,test_size=0.20,random_state=42)",CLUSTER_4,CLUSTER_0
"x_train,x_val,y_train,y_val","sklearn.model_selection.train_test_split(x_train,y_train,test_size=0.20,random_state=42)",CLUSTER_4,CLUSTER_0
r2,"sklearn.metrics.r2_score(y_true,predict)",CLUSTER_4,CLUSTER_0
r2,"sklearn.metrics.r2_score(y_true,predict)",CLUSTER_4,CLUSTER_0
mae,"sklearn.metrics.median_absolute_error(y_true,predict)",CLUSTER_4,CLUSTER_0
mae,"sklearn.metrics.median_absolute_error(y_true,predict)",CLUSTER_4,CLUSTER_0
mse,"sklearn.metrics.mean_squared_error(y_true,predict)",CLUSTER_4,CLUSTER_0
mse,"sklearn.metrics.mean_squared_error(y_true,predict)",CLUSTER_4,CLUSTER_0
predictions,"pandas.DataFrame(predictions,columns=['Survived'])",CLUSTER_7,CLUSTER_5
train_clean,"pandas.concat([t_train.data,t_train.target],axis=1)",CLUSTER_7,CLUSTER_5
predictions,"pandas.concat((test.iloc[:,0],predictions)",CLUSTER_7,CLUSTER_5
dataset['age_cat'],"pandas.cut(dataset['Age'],
bins=[0,3,7,15,30,60,100],
include_lowest=True,
labels=['baby','children','teenage',
'young','adult','old'])",CLUSTER_7,CLUSTER_5
data_dummies,pandas.get_dummies(t_train.data),CLUSTER_7,CLUSTER_5
data_dummies2,pandas.get_dummies(t_test),CLUSTER_7,CLUSTER_5
t_train,pandas.read_csv('../data/Titanic/train.csv'),CLUSTER_7,CLUSTER_5
t_test,pandas.read_csv('../data/Titanic/test.csv'),CLUSTER_7,CLUSTER_5
test,pandas.read_csv('../data/Titanic/test.csv'),CLUSTER_7,CLUSTER_5
"fig,qaxis","matplotlib.pyplot.subplots(1,3,figsize=(14,12)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data_dummies,t_train.target,random_state=0)",CLUSTER_7,CLUSTER_5
tree,"sklearn.tree.DecisionTreeClassifier(max_depth=4,random_state=0)",CLUSTER_7,CLUSTER_5
forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=5,random_state=2)",CLUSTER_7,CLUSTER_5
forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=20,random_state=2)",CLUSTER_7,CLUSTER_5
district_summary_df,"pandas.DataFrame(
[{""TotalSchools"":school_count,
""TotalStudents"":student_count,
""TotalBudget"":total_budget,
""AverageMathScore"":average_math_score,
""AverageReadingScore"":average_reading_score,
""%PassingMath"":passing_math_percentage,
""%PassingReading"":passing_reading_percentage,
""%OverallPassing"":overall_passing_percentage}])",CLUSTER_8,CLUSTER_3
per_school_summary_df,"pandas.DataFrame({
""SchoolType"":per_school_types,
""TotalStudents"":per_school_counts,
""TotalSchoolBudget"":per_school_budget,
""PerStudentBudget"":per_school_capita,
""AverageMathScore"":per_school_math,
""AverageReadingScore"":per_school_reading,
""%PassingMath"":per_school_passing_math,
""%PassingReading"":per_school_passing_reading,
""%OverallPassing"":per_overall_passing_percentage})",CLUSTER_8,CLUSTER_3
math_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_math_scores,
""10th"":tenth_grade_math_scores,
""11th"":eleventh_grade_math_scores,
""12th"":twelfth_grade_math_scores})",CLUSTER_8,CLUSTER_3
reading_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_reading_scores,
""10th"":tenth_grade_reading_scores,
""11th"":eleventh_grade_reading_scores,
""12th"":twelfth_grade_reading_scores})",CLUSTER_8,CLUSTER_3
spending_summary_df,"pandas.DataFrame({
""AverageMathScore"":spending_math_scores,
""AverageReadingScore"":spending_reading_scores,
""%PassingMath"":spending_passing_math,
""%PassingReading"":spending_passing_reading,
""%OverallPassing"":overall_passing_spending})",CLUSTER_8,CLUSTER_3
size_summary_df,"pandas.DataFrame({
""AverageMathScore"":size_math_scores,
""AverageReadingScore"":size_reading_scores,
""%PassingMath"":size_passing_math,
""%PassingReading"":size_passing_reading,
""%OverallPassing"":size_overall_passing})",CLUSTER_8,CLUSTER_3
type_summary_df,"pandas.DataFrame({
""AverageMathScore"":type_math_scores,
""AverageReadingScore"":type_reading_scores,
""%PassingMath"":type_passing_math,
""%PassingReading"":type_passing_reading,
""%OverallPassing"":type_overall_passing})",CLUSTER_8,CLUSTER_3
"per_school_summary_df[""SpendingRanges(PerStudent)""]","pandas.cut(per_school_capita,spending_bins,labels=group_names)",CLUSTER_8,CLUSTER_3
"per_school_summary_df[""SchoolSize""]","pandas.cut(per_school_summary_df[""TotalStudents""],size_bins,labels=group_names)",CLUSTER_8,CLUSTER_3
school_data_complete_df,"pandas.merge(student_data_df,school_data_df,on=[""school_name"",""school_name""])",CLUSTER_8,CLUSTER_3
school_data_df,pandas.read_csv(school_data_to_load),CLUSTER_8,CLUSTER_3
student_data_df,pandas.read_csv(student_data_to_load),CLUSTER_8,CLUSTER_3
df['Thresh'],"numpy.select(conditions,choices,default='NS')",CLUSTER_7,CLUSTER_8
df,"pandas.read_csv('/test_data/control_vs_case_results.txt',sep='\t')",CLUSTER_7,CLUSTER_8
metadata_df,"pandas.read_csv('~/test_data/control_vs_case_attributes.txt',sep='\t')",CLUSTER_7,CLUSTER_8
fg,"seaborn.FacetGrid(data=metadata_df,hue='condition',palette=""Set2"",aspect=1.61)",CLUSTER_7,CLUSTER_8
pal,"seaborn.color_palette(""Set2"",num_colors)",CLUSTER_7,CLUSTER_8
pal,"seaborn.diverging_palette(10,220,sep=80,n=7)",CLUSTER_7,CLUSTER_8
x,"seaborn.scatterplot(x=""log2FoldChange"",y=""padj.T"",hue=""Thresh"",palette=['

x.set_ylim(0,20)",CLUSTER_7,CLUSTER_8
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_7,CLUSTER_8
tsne,sklearn.manifold.TSNE(n_components=3),CLUSTER_7,CLUSTER_8
medical,pandas.read_csv('insurance2.csv'),CLUSTER_1,CLUSTER_9
sample,numpy.empty(number_tries),CLUSTER_1,CLUSTER_9
sample[i],numpy.mean(sampler(400),CLUSTER_1,CLUSTER_9
mean,numpy.mean(sample),CLUSTER_1,CLUSTER_9
std,"numpy.std(sample,ddof=1)",CLUSTER_1,CLUSTER_9
p_value,numpy.sum(sample<12000),CLUSTER_1,CLUSTER_9
n_bins,numpy.sqrt(len(medical['charges']),CLUSTER_1,CLUSTER_9
n_bins,numpy.sqrt(len(sample),CLUSTER_1,CLUSTER_9
sp,numpy.sqrt((term1+term2),CLUSTER_1,CLUSTER_9
nparr,numpy.array([iforiinrange(10),CLUSTER_3,CLUSTER_6
p,"pandas.read_csv('../BIOS6644/Data/PatientCorePopulatedTable.txt',header=0,sep='\t')",CLUSTER_11,CLUSTER_3
a,"pandas.read_csv('../BIOS6644/Data/AdmissionsCorePopulatedTable.txt',header=0,sep='\t')",CLUSTER_11,CLUSTER_3
d,"pandas.read_csv('../BIOS6644/Data/AdmissionsDiagnosesCorePopulatedTable.txt',header=0,sep='\t')",CLUSTER_11,CLUSTER_3
l,"pandas.read_csv('../BIOS6644/Data/LabsCorePopulatedTable.txt',header=0,sep='\t')",CLUSTER_11,CLUSTER_3
df2,"pandas.read_sql_query(sql,conn)",CLUSTER_11,CLUSTER_3
df3,"pandas.read_sql_query(sql,conn)",CLUSTER_11,CLUSTER_3
table[col],pandas.to_datetime(table[col]),CLUSTER_11,CLUSTER_3
df,"pandas.DataFrame(data,columns=cols)",CLUSTER_8,CLUSTER_3
filter_length,numpy.argmin(err_arr),CLUSTER_1,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(2,1)",CLUSTER_1,CLUSTER_9
t_scorearr_f,"scipy.ndimage.gaussian_filter(t_scorearr,l)",CLUSTER_1,CLUSTER_9
t_scorearr_f,"scipy.ndimage.gaussian_filter(t_scorearr,filter_length)",CLUSTER_1,CLUSTER_9
regex,re.compile(r'[0-9]+x[0-9]+'),CLUSTER_5,CLUSTER_1
metrics_df,"pandas.DataFrame(
{
'Label':range(len(f_measure)",CLUSTER_5,CLUSTER_1
metrics_df,"pandas.DataFrame(
{
'Label':range(len(summary.clusterSizes)",CLUSTER_5,CLUSTER_1
metrics_df,"pandas.DataFrame(
{
'Label':range(len(summary.clusterSizes)",CLUSTER_5,CLUSTER_1
ShR,"numpy.power(10,XH5_test[a:b])",CLUSTER_4,CLUSTER_7
std,numpy.sqrt(2/(in_dim+out_dim),CLUSTER_4,CLUSTER_7
Error,numpy.sqrt(np.square(y_hf_ref-y_hf_test),CLUSTER_4,CLUSTER_7
X_hf,"numpy.hstack((x_hf,t_hf,u_hf,w_hf,p_hf)",CLUSTER_4,CLUSTER_7
Xhmin,"numpy.hstack((Xmin,Ymin)",CLUSTER_4,CLUSTER_7
Xhmax,"numpy.hstack((Xmax,Ymax)",CLUSTER_4,CLUSTER_7
X_test_h,"numpy.hstack((x_test_h,t_test_h,u_test_h,w_test_h,p_test_h)",CLUSTER_4,CLUSTER_7
Corr,numpy.corrcoef(list(y_hf_test.T),CLUSTER_4,CLUSTER_7
YH1_train,numpy.genfromtxt('Vis_Train_H.txt'),CLUSTER_4,CLUSTER_7
XH1_train,numpy.genfromtxt('C01_Train_H.txt'),CLUSTER_4,CLUSTER_7
XH2_train,numpy.genfromtxt('Sur_Train_H.txt'),CLUSTER_4,CLUSTER_7
XH3_train,numpy.genfromtxt('Oth_Train_H.txt'),CLUSTER_4,CLUSTER_7
XH4_train,numpy.genfromtxt('Slt_Train_H.txt'),CLUSTER_4,CLUSTER_7
XH5_train,numpy.genfromtxt('Shr_Train_H.txt'),CLUSTER_4,CLUSTER_7
YH1_test,numpy.genfromtxt('Vis_Test_H.txt'),CLUSTER_4,CLUSTER_7
XH1_test,numpy.genfromtxt('C01_Test_H.txt'),CLUSTER_4,CLUSTER_7
XH2_test,numpy.genfromtxt('Sur_Test_H.txt'),CLUSTER_4,CLUSTER_7
XH3_test,numpy.genfromtxt('Oth_Test_H.txt'),CLUSTER_4,CLUSTER_7
XH4_test,numpy.genfromtxt('Slt_Test_H.txt'),CLUSTER_4,CLUSTER_7
XH5_test,numpy.genfromtxt('Shr_Test_H.txt'),CLUSTER_4,CLUSTER_7
DataFrame,"pandas.DataFrame({'City':cities,'Cloudiness':cloudiness,'Country':country,'Date':date,'Humidity':humidity,
'Lat':lat,'Lng':lng,'MaxTemp':max_temp,'WindSpeed':wind_speed})",CLUSTER_9,CLUSTER_9
response,requests.get(query_url+city),CLUSTER_9,CLUSTER_9
response,requests.get(query_url+city),CLUSTER_9,CLUSTER_9
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(latitude,variable)",CLUSTER_9,CLUSTER_9
LagoonData,"numpy.full(bands_data.shape,np.nan,np.float)",CLUSTER_4,CLUSTER_11
"np.savez_compressed('../../CompressedData/SRXData',Ratios","SRX,FocusIndex=numpy.full((rows,cols)",CLUSTER_4,CLUSTER_11
"data[Band[i2],Band[i]]","numpy.divide(LagoonData[:,:,i2],LagoonData[:,:,i])",CLUSTER_4,CLUSTER_11
"LagoonData[ClassifyIndex,:]","numpy.log(n*LagoonData[ClassifyIndex,:])",CLUSTER_4,CLUSTER_11
SRX,"numpy.stack(RX,axis=2)",CLUSTER_4,CLUSTER_11
bands_data,numpy.dstack(bands_data),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(3,2,figsize=(20,10)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(3,2,figsize=(20,10)",CLUSTER_4,CLUSTER_11
predicted_class_indices,"numpy.argmax(pred,axis=1)",CLUSTER_4,CLUSTER_0
results,"pandas.DataFrame({""Filename"":filenames,
""Predictions"":predictions})",CLUSTER_4,CLUSTER_0
traindf,"pandas.read_csv('/content/drive/MyDrive/ImageClassification/Extracted/train/trainLabels.csv',dtype=str)",CLUSTER_4,CLUSTER_0
testdf,"pandas.read_csv('/content/drive/MyDrive/ImageClassification/Extracted/object-recognition-predictions.csv',dtype=str)",CLUSTER_4,CLUSTER_0
train,"numpy.append(X,y,axis=1)",CLUSTER_5,CLUSTER_9
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_5,CLUSTER_9
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_9
data1,"pandas.DataFrame({'Date':Dates,
'Descriptions':Descriptions})",CLUSTER_11,CLUSTER_11
df,"pandas.merge(data1,data2)",CLUSTER_11,CLUSTER_11
data2,pandas.read_csv('data/AAPL.csv'),CLUSTER_11,CLUSTER_11
data1['Date'],pandas.to_datetime(data1['Date']),CLUSTER_11,CLUSTER_11
data2['Date'],pandas.to_datetime(data2['Date']),CLUSTER_11,CLUSTER_11
"f,axes","matplotlib.pyplot.subplots(nrows=2,ncols=1,figsize=(14,6)",CLUSTER_11,CLUSTER_11
secretFileContentJson,"json.load(open(""../line_secret_key"",'r')",CLUSTER_10,CLUSTER_12
lineLinkMenuResponse,"requests.post(linkMenuEndpoint,headers=linkMenuRequestHeader)",CLUSTER_10,CLUSTER_12
x,"numpy.array([0,1,1])",CLUSTER_3,CLUSTER_10
w,"numpy.array([0.02,0.03,0.03])",CLUSTER_3,CLUSTER_10
dataset,"numpy.array([[0,0,0],[0,1,1],[1,0,1],[1,1,1]])",CLUSTER_3,CLUSTER_10
w,"numpy.array([[0.03],[0.03],[0.02]])",CLUSTER_3,CLUSTER_10
dataset,"numpy.array([[0,0,0],[0,1,0],[1,0,0],[1,1,1]])",CLUSTER_3,CLUSTER_10
w,"numpy.array([[0.03],[0.03],[0.05]])",CLUSTER_3,CLUSTER_10
dataset,"numpy.array([[0,0,0],[0,1,1],[1,0,1],[1,1,1]])",CLUSTER_3,CLUSTER_10
inputs,"numpy.array(list(map(make_digit,raw_digits)",CLUSTER_3,CLUSTER_10
acc_array,numpy.array(nn.acc_list),CLUSTER_3,CLUSTER_10
bias,"numpy.zeros((1,cur_neural_number)",CLUSTER_3,CLUSTER_10
yhat,"numpy.where(h>0,1,0)",CLUSTER_3,CLUSTER_10
yhat,"numpy.where(h>0,1,0)",CLUSTER_3,CLUSTER_10
yhat,"numpy.where(h>0,1,0)",CLUSTER_3,CLUSTER_10
yhat,"numpy.where(h>0,1,0)",CLUSTER_3,CLUSTER_10
true_pred,numpy.where(pred==y_test),CLUSTER_3,CLUSTER_10
X,"numpy.concatenate((X,-np.ones((nData,1)",CLUSTER_3,CLUSTER_10
X,"numpy.concatenate((X,-np.ones((nData,1)",CLUSTER_3,CLUSTER_10
X,"numpy.concatenate((X,-np.ones((nData,1)",CLUSTER_3,CLUSTER_10
X,"numpy.concatenate((X,-np.ones((nData,1)",CLUSTER_3,CLUSTER_10
h,"numpy.dot(x,w)",CLUSTER_3,CLUSTER_10
h,"numpy.dot(X,w)",CLUSTER_3,CLUSTER_10
h,"numpy.dot(X,w)",CLUSTER_3,CLUSTER_10
h,"numpy.dot(X,w)",CLUSTER_3,CLUSTER_10
h,"numpy.dot(X,w)",CLUSTER_3,CLUSTER_10
wx,"numpy.dot(x,w)",CLUSTER_3,CLUSTER_10
dW,"numpy.dot(input_x.T,loss)",CLUSTER_3,CLUSTER_10
dW,"numpy.dot(input_x.T,loss)",CLUSTER_3,CLUSTER_10
nData,numpy.shape(X),CLUSTER_3,CLUSTER_10
nData,numpy.shape(X),CLUSTER_3,CLUSTER_10
nIn,numpy.shape(X),CLUSTER_3,CLUSTER_10
nOut,numpy.shape(y),CLUSTER_3,CLUSTER_10
nData,numpy.shape(X),CLUSTER_3,CLUSTER_10
nIn,numpy.shape(X),CLUSTER_3,CLUSTER_10
nOut,numpy.shape(y),CLUSTER_3,CLUSTER_10
nData,numpy.shape(X),CLUSTER_3,CLUSTER_10
db,"numpy.sum(loss,axis=0,keepdims=True)",CLUSTER_3,CLUSTER_10
db,"numpy.sum(loss,axis=0,keepdims=True)",CLUSTER_3,CLUSTER_10
targets,numpy.eye(10),CLUSTER_3,CLUSTER_10
dataset,"numpy.loadtxt(raw_data,delimiter="","")",CLUSTER_3,CLUSTER_10
dataset,"numpy.loadtxt(raw_data,delimiter="","")",CLUSTER_3,CLUSTER_10
df,pandas.DataFrame(x),CLUSTER_5,CLUSTER_5
iris,"pandas.read_csv(""https://www.kaggle.com/vjchoudhary7/customer-segmentation-tutorial-in-python"")",CLUSTER_5,CLUSTER_5
iris,"pandas.read_csv(""https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"",header=None)",CLUSTER_5,CLUSTER_5
x,"numpy.arange(0,10,0.1)",CLUSTER_5,CLUSTER_5
x1,"numpy.arange(0,10,0.2)",CLUSTER_5,CLUSTER_5
data,sklearn.datasets.load_diabetes(),CLUSTER_5,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y)",CLUSTER_5,CLUSTER_5
algo,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
real,"pandas.read_csv(path_real,sep=real_sep,low_memory=False)",CLUSTER_8,CLUSTER_3
fake,"pandas.read_csv(path_fake,sep=fake_sep,low_memory=False)",CLUSTER_8,CLUSTER_3
pos,numpy.arange(sorted_idx.shape[0]),CLUSTER_8,CLUSTER_3
pos,numpy.arange(sorted_idx.shape[0]),CLUSTER_8,CLUSTER_3
sorted_idx,numpy.argsort(feature_importance),CLUSTER_8,CLUSTER_3
sorted_idx,numpy.argsort(feature_importance),CLUSTER_8,CLUSTER_3
"X,y","sklearn.datasets.make_classification(
n_samples=10000,n_features=4,n_redundant=0,n_informative=2,
n_clusters_per_class=2,hypercube=False,random_state=0
)",CLUSTER_4,CLUSTER_11
clf,"sklearn.linear_model.SGDClassifier(
loss='log',n_iter=1000,penalty='l2',alpha=5e-4,class_weight='auto')",CLUSTER_4,CLUSTER_11
df,pandas.DataFrame(X[ind]),CLUSTER_4,CLUSTER_11
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_6
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_6
classifer,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_6
clf,"sklearn.naive_bayes.GaussianNB(priors=[0.25,0.25,0.5])",CLUSTER_5,CLUSTER_6
classifer,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_6
text_data,"numpy.array(['IloveBrazil.Brazil!',
'Brazilisbest',
'Germanybeatsboth'])",CLUSTER_5,CLUSTER_6
target,"numpy.array([0,0,1])",CLUSTER_5,CLUSTER_6
classifer,"sklearn.naive_bayes.MultinomialNB(class_prior=[0.25,0.5])",CLUSTER_5,CLUSTER_6
classifer,"sklearn.naive_bayes.BernoulliNB(class_prior=[0.25,0.5])",CLUSTER_5,CLUSTER_6
model_uniform_prior,"sklearn.naive_bayes.BernoulliNB(class_prior=None,fit_prior=True)",CLUSTER_5,CLUSTER_6
classifer_sigmoid,"sklearn.calibration.CalibratedClassifierCV(classifer,cv=2,method='sigmoid')",CLUSTER_5,CLUSTER_6
xtab,"pandas.crosstab(index=gtd_clean['region_txt'],columns=gtd_clean['INT_IDEO_txt'],margins=True)",CLUSTER_7,CLUSTER_8
gtd_df,"pandas.read_csv('../Data/gtd_preprocessed_1997to2017.csv',low_memory=False,index_col=0,
na_values=[''])",CLUSTER_7,CLUSTER_8
gtd_clean['incident_date'],pandas.to_datetime(gtd_clean['incident_date'].str.split(),CLUSTER_7,CLUSTER_8
years,"numpy.arange(1995,2017)",CLUSTER_7,CLUSTER_8
years,"numpy.arange(1995,2017)",CLUSTER_7,CLUSTER_8
y,"numpy.arange(1,len(x)",CLUSTER_7,CLUSTER_8
x,numpy.sort(nkill_no_outliers['nkill']),CLUSTER_7,CLUSTER_8
_,"matplotlib.pyplot.plot(x,y,marker='.',linestyle='none')",CLUSTER_7,CLUSTER_8
_,"matplotlib.pyplot.title('AttacksbyYear',fontsize=20)",CLUSTER_7,CLUSTER_8
_,"matplotlib.pyplot.title('FatalitiesbyYear',fontsize=20)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.title('TotalAttacksbyType1995-2017',fontsize=20)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.title('TotalAttacksbyWeaponType1995-2017',fontsize=20)",CLUSTER_7,CLUSTER_8
_,"matplotlib.pyplot.xlabel('Year',fontsize=16)",CLUSTER_7,CLUSTER_8
_,"matplotlib.pyplot.xlabel('Year',fontsize=16)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.xlabel('',)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.xlabel('',)",CLUSTER_7,CLUSTER_8
_,matplotlib.pyplot.xlabel('TotalIncidentFatalities'),CLUSTER_7,CLUSTER_8
_,"matplotlib.pyplot.ylabel('NumberofAttacks',fontsize=16)",CLUSTER_7,CLUSTER_8
_,"matplotlib.pyplot.ylabel('NumberofFatalities',fontsize=16)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.ylabel('Count',fontsize=16)",CLUSTER_7,CLUSTER_8
ax,"matplotlib.pyplot.ylabel('Count',fontsize=16)",CLUSTER_7,CLUSTER_8
_,matplotlib.pyplot.ylabel('ECDF'),CLUSTER_7,CLUSTER_8
ax,"seaborn.barplot(data.Attacks,data.index,orient='h',palette=colors)",CLUSTER_7,CLUSTER_8
plt1,"seaborn.catplot(""iyear"",data=gtd_clean,kind=""count"",color='steelblue',height=7.6,aspect=1.618)",CLUSTER_7,CLUSTER_8
plt1,"seaborn.catplot(x='iyear',y='nkill',data=gp1,kind='bar',color='steelblue',height=7.6,aspect=1.618)",CLUSTER_7,CLUSTER_8
ax,"seaborn.catplot('attacktype1_txt',data=gtd_clean,height=7.6,aspect=1.618,kind=""count"")",CLUSTER_7,CLUSTER_8
ax,"seaborn.catplot('weaptype1_txt',data=gtd_clean,height=7.6,aspect=1.618,kind=""count"")",CLUSTER_7,CLUSTER_8
colors,"seaborn.color_palette('Reds',len(data)",CLUSTER_7,CLUSTER_8
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_5
data,"pandas.DataFrame({
'sepallength':iris.data[:,0],
'sepalwidth':iris.data[:,1],
'petallength':iris.data[:,2],
'petalwidth':iris.data[:,3],
'species':iris.target
})",CLUSTER_12,CLUSTER_5
principalDf,"pandas.DataFrame(data=principalComponents
,columns=['principalcomponent1','principalcomponent2'])",CLUSTER_12,CLUSTER_5
finalDf,"pandas.concat([principalDf,data[['species']]],axis=1)",CLUSTER_12,CLUSTER_5
x,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_12,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_12,CLUSTER_5
pca,sklearn.decomposition.PCA(.95),CLUSTER_12,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_12,CLUSTER_5
"train_img,test_img,train_lbl,test_lbl","sklearn.model_selection.train_test_split(
mnist.data,mnist.target,test_size=1/7.0,random_state=2019)",CLUSTER_12,CLUSTER_5
lr,sklearn.linear_model.LogisticRegression(solver='lbfgs'),CLUSTER_12,CLUSTER_5
f_interpolation,"scipy.interpolate.interp1d(gal_extended_wavelenghts,gal_extended_intensities)",CLUSTER_10,CLUSTER_4
era_df,"pandas.concat([league_era_df,sf_era_df],axis=1)",CLUSTER_7,CLUSTER_3
giants_win_df,"pandas.read_sql_query(""SELECTYear,wAS'Wins'FROMteamWHEREteam_id='SFN';"",conn)",CLUSTER_7,CLUSTER_3
wins_loss_df,"pandas.read_sql_query(""SELECTYearAS'Year',wAS'Wins',lAS'Losses'FROMteamWHEREteam_id='SFN';"",conn)",CLUSTER_7,CLUSTER_3
league_era_df,"pandas.read_sql_query(""SELECTyear,AVG(era)",CLUSTER_7,CLUSTER_3
sf_era_df,"pandas.read_sql_query(""SELECTeraAS'SFERA'FROMteamWHEREteam_id='SFN';"",conn)",CLUSTER_7,CLUSTER_3
asol,"scipy.integrate.odeint(solvr,[0,0],xi)",CLUSTER_1,CLUSTER_9
asol,"scipy.integrate.odeint(solvr,[0,0],xi)",CLUSTER_1,CLUSTER_9
a,"numpy.arange(0,10)",CLUSTER_3,CLUSTER_6
b,"numpy.arange(10,20)",CLUSTER_3,CLUSTER_6
A,"numpy.array([[1,2],[3,4]])",CLUSTER_3,CLUSTER_6
B,"numpy.array([[5,6],[7,8]])",CLUSTER_3,CLUSTER_6
T,"numpy.array([
[0,1,2,3],
[4,5,6,7],
[8,9,10,11]
])",CLUSTER_3,CLUSTER_6
x,"numpy.array([0,1,2])",CLUSTER_3,CLUSTER_6
x,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
x,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
x,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
x,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_6
image,"numpy.array([[[0.67826139,0.29380381],
[0.90714982,0.52835647],
[0.4215251,0.45017551]],

[[0.92814219,0.96677647],
[0.85304703,0.52351845],
[0.19981397,0.27417313]],

[[0.60659855,0.00533165],
[0.10820313,0.49978937],
[0.34144279,0.94630077]]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([
[0,3,4],
[1,6,4]])",CLUSTER_3,CLUSTER_6
x,"numpy.array([
[9,2,5,0,0],
[7,5,0,0,0]])",CLUSTER_3,CLUSTER_6
yhat,"numpy.array([.9,0.2,0.1,.4,.9])",CLUSTER_3,CLUSTER_6
y,"numpy.array([1,0,0,1,1])",CLUSTER_3,CLUSTER_6
yhat,"numpy.array([.9,0.2,0.1,.4,.9])",CLUSTER_3,CLUSTER_6
y,"numpy.array([1,0,0,1,1])",CLUSTER_3,CLUSTER_6
outer,numpy.zeros((len(x1),CLUSTER_3,CLUSTER_6
mul,numpy.zeros(len(x1),CLUSTER_3,CLUSTER_6
gdot,numpy.zeros(W.shape[0]),CLUSTER_3,CLUSTER_6
dot,"numpy.dot(x1,x2)",CLUSTER_3,CLUSTER_6
dot,"numpy.dot(W,x1)",CLUSTER_3,CLUSTER_6
loss,"numpy.dot(yhat-y,yhat-y)",CLUSTER_3,CLUSTER_6
outer,"numpy.outer(x1,x2)",CLUSTER_3,CLUSTER_6
x_sum,"numpy.sum(x_exp,axis=1,keepdims=True)",CLUSTER_3,CLUSTER_6
loss,numpy.sum(abs(yhat-y),CLUSTER_3,CLUSTER_6
x_exp,numpy.exp(x),CLUSTER_3,CLUSTER_6
mul,"numpy.multiply(x1,x2)",CLUSTER_3,CLUSTER_6
x_norm,"numpy.linalg.norm(x,ord=2,axis=1,keepdims=True)",CLUSTER_3,CLUSTER_6
tic,time.process_time(),CLUSTER_3,CLUSTER_6
toc,time.process_time(),CLUSTER_3,CLUSTER_6
tic,time.process_time(),CLUSTER_3,CLUSTER_6
toc,time.process_time(),CLUSTER_3,CLUSTER_6
tic,time.process_time(),CLUSTER_3,CLUSTER_6
toc,time.process_time(),CLUSTER_3,CLUSTER_6
tic,time.process_time(),CLUSTER_3,CLUSTER_6
toc,time.process_time(),CLUSTER_3,CLUSTER_6
tic,time.process_time(),CLUSTER_3,CLUSTER_6
toc,time.process_time(),CLUSTER_3,CLUSTER_6
tic,time.process_time(),CLUSTER_3,CLUSTER_6
toc,time.process_time(),CLUSTER_3,CLUSTER_6
tic,time.process_time(),CLUSTER_3,CLUSTER_6
toc,time.process_time(),CLUSTER_3,CLUSTER_6
tic,time.process_time(),CLUSTER_3,CLUSTER_6
toc,time.process_time(),CLUSTER_3,CLUSTER_6
empty_vector,numpy.empty(k),CLUSTER_1,CLUSTER_10
error_vector,numpy.empty(13),CLUSTER_1,CLUSTER_10
a,"numpy.logspace(1,7,num=13)",CLUSTER_1,CLUSTER_10
angles,"numpy.arange(0,N_angles)",CLUSTER_12,CLUSTER_9
values,numpy.array(values),CLUSTER_12,CLUSTER_9
all_data,"numpy.concatenate((coord,prop[:,[1,2,3]])",CLUSTER_12,CLUSTER_9
average_density,numpy.average(dens),CLUSTER_12,CLUSTER_9
ids,"numpy.intersect1d(coord[:,0],prop[:,0],assume_unique=True)",CLUSTER_12,CLUSTER_9
ip,IPython.get_ipython(),CLUSTER_12,CLUSTER_9
df,"pandas.read_csv('data/city/3_Infrastructuur/Fietsenstalling.csv',sep=';')",CLUSTER_7,CLUSTER_3
df,"pandas.read_csv('data/city/2_Gebouwenenadressen/Gebouw.csv',sep=';')",CLUSTER_7,CLUSTER_3
df,"pandas.read_csv('data/parking/leuven.csv',sep=',')",CLUSTER_7,CLUSTER_3
df,"pandas.read_csv('data/airquality/2018-01-30.csv',sep=',')",CLUSTER_7,CLUSTER_3
df['timestamp'],"pandas.to_datetime(df['timestamp'],format=""%Y/%m/%d%H:%M:%S"")",CLUSTER_7,CLUSTER_3
ladeuze['dow'],"pandas.to_datetime(ladeuze['date'],format=""%Y-%m-%d"")",CLUSTER_7,CLUSTER_3
df['timestamp'],"pandas.to_datetime(df['timestamp'],format=""%Y-%m-%dT%H:%M:%S"")",CLUSTER_7,CLUSTER_3
"fig,axes","matplotlib.pyplot.subplots(nrows=nrows,ncols=ncols,figsize=(20,15)",CLUSTER_7,CLUSTER_3
precipitation_df,"pandas.DataFrame(precipitation,columns=[""Date"",""Precipitation""])",CLUSTER_11,CLUSTER_3
temp_12_month_df,"pandas.DataFrame(temp_12_month,columns=[""Temperature""])",CLUSTER_11,CLUSTER_3
trip_temp_df,"pandas.DataFrame(trip_temps,columns=[""TMin"",""TAvg"",""TMax""])",CLUSTER_11,CLUSTER_3
oneyr_date,"datetime.date(2017,8,23)",CLUSTER_11,CLUSTER_3
g[x],"numpy.array([np.mean(np.hstack([a,b])",CLUSTER_1,CLUSTER_9
P_x_y,"numpy.array([np.mean(np.logical_and(a==x,b==y)",CLUSTER_1,CLUSTER_9
ch_arr,numpy.array(ch_list),CLUSTER_1,CLUSTER_9
S,numpy.sign(R),CLUSTER_1,CLUSTER_9
S+,numpy.sign(Y),CLUSTER_1,CLUSTER_9
S+,numpy.sign(T),CLUSTER_1,CLUSTER_9
other_classes,"numpy.delete(classes,i)",CLUSTER_1,CLUSTER_9
classes,numpy.unique(observations),CLUSTER_1,CLUSTER_9
start,time.time(),CLUSTER_1,CLUSTER_9
start,time.time(),CLUSTER_1,CLUSTER_9
start_time,time.time(),CLUSTER_1,CLUSTER_9
deep_sp_time,time.time(),CLUSTER_1,CLUSTER_9
vec,numpy.zeros(size),CLUSTER_0,CLUSTER_8
wordvec_arrays,numpy.zeros((len(tokenized_tweet),CLUSTER_0,CLUSTER_8
docvec_arrays,numpy.zeros((len(tokenized_tweet),CLUSTER_0,CLUSTER_8
racist_df,pandas.DataFrame({'Hashtag':list(tags_count.keys(),CLUSTER_0,CLUSTER_8
non_racist_df,pandas.DataFrame({'Hashtag':list(tags_count.keys(),CLUSTER_0,CLUSTER_8
wordvec_df,pandas.DataFrame(wordvec_arrays),CLUSTER_0,CLUSTER_8
docvec_df,pandas.DataFrame(docvec_arrays),CLUSTER_0,CLUSTER_8
train,pandas.read_csv('train_E6oV3lV.csv'),CLUSTER_0,CLUSTER_8
test,pandas.read_csv('test_tweets_anuFYb8.csv'),CLUSTER_0,CLUSTER_8
ax,"seaborn.barplot(data=racist_df,x=""Hashtag"",y=""Count"")",CLUSTER_0,CLUSTER_8
ax,"seaborn.barplot(data=non_racist_df,x=""Hashtag"",y=""Count"")",CLUSTER_0,CLUSTER_8
df,pandas.DataFrame(b.fetch(as_dict=True),CLUSTER_11,CLUSTER_11
weight_normalized,pandas.DataFrame([]),CLUSTER_11,CLUSTER_11
restr_dates_linear,pandas.DataFrame(pd.date_range(restrictions.restriction_start_date.item(),CLUSTER_11,CLUSTER_11
learned,"pandas.DataFrame(columns=['mouse','lab','perf_easy','n_trials',
'threshold','bias','reaction_time',
'lapse_low','lapse_high'])",CLUSTER_11,CLUSTER_11
learned,pandas.DataFrame(learned),CLUSTER_11,CLUSTER_11
df['session_date'],pandas.to_datetime(df.session_date),CLUSTER_11,CLUSTER_11
"f,ax","matplotlib.pyplot.subplots(ncols=3,nrows=1,figsize=[13,3])",CLUSTER_11,CLUSTER_11
"f,ax",matplotlib.pyplot.subplots(ncols=len(vars),CLUSTER_11,CLUSTER_11
palette,"seaborn.xkcd_palette(['azure','raspberry'])",CLUSTER_11,CLUSTER_11
palette,"seaborn.xkcd_palette(['azure','raspberry'])",CLUSTER_11,CLUSTER_11
df,pandas.DataFrame(list(cli.wiki_mongo_database.wiki_mongo_collection.find({}),CLUSTER_12,CLUSTER_1
content_vecs,numpy.array([nlp(i),CLUSTER_12,CLUSTER_1
nn,sklearn.neighbors.NearestNeighbors(n_neighbors=5),CLUSTER_12,CLUSTER_1
coeffecients,"pandas.DataFrame(lm.coef_,X.columns)",CLUSTER_7,CLUSTER_5
customers,"pandas.read_csv(""EcommerceCustomers"")",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
df,"pandas.read_csv(""https://s3.amazonaws.com/demo-datasets/wine.csv"")",CLUSTER_8,CLUSTER_4
filelist,os.listdir(folder),CLUSTER_4,CLUSTER_7
imgplot,matplotlib.pyplot.imshow(matrix),CLUSTER_4,CLUSTER_7
imgplot,matplotlib.pyplot.imshow(matrix),CLUSTER_4,CLUSTER_7
im_array,"numpy.array(ims,dtype='uint8')",CLUSTER_4,CLUSTER_7
clustersize,numpy.zeros(labelvals.shape[0]),CLUSTER_4,CLUSTER_7
tmp,numpy.where(abs(labels-labelvals[iterval]),CLUSTER_4,CLUSTER_7
tmp,numpy.where(abs(labels-labelvals[maxlabel]),CLUSTER_4,CLUSTER_7
tmp,numpy.where(abs(labels-labelvals[maxlabel]),CLUSTER_4,CLUSTER_7
maxlabel,numpy.argmax(clustersize),CLUSTER_4,CLUSTER_7
labelvals,numpy.unique(labels),CLUSTER_4,CLUSTER_7
X_embedded,sklearn.manifold.TSNE(n_components=2),CLUSTER_4,CLUSTER_7
clustering,sklearn.cluster.DBSCAN(eps=(3),CLUSTER_4,CLUSTER_7
circle,"matplotlib.pyplot.Circle((self.x,self.y)",CLUSTER_5,CLUSTER_9
line,"matplotlib.pyplot.Line2D((neuron1.x-x_adjustment,neuron2.x+x_adjustment)",CLUSTER_5,CLUSTER_9
angle,math.atan((neuron2.x-neuron1.x),CLUSTER_5,CLUSTER_9
tick_marks,numpy.arange(len(classes),CLUSTER_5,CLUSTER_9
conf_mat_df,"pandas.DataFrame([list(pd.Series([tn,fp,fn,tp])",CLUSTER_5,CLUSTER_9
df_X_train,"pandas.read_csv(""../../../../Data/all_patients/starting_ratio_05/10_percent/ratio_05/X_train.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
df_y_train,"pandas.read_csv(""../../../../Data/all_patients/starting_ratio_05/10_percent/ratio_05/y_train.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
df_X_val,"pandas.read_csv(""../../../../Data/all_patients/X_val.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
df_y_val,"pandas.read_csv(""../../../../Data/all_patients/y_val.csv"",index_col=0)",CLUSTER_5,CLUSTER_9
actual_score,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_5,CLUSTER_9
actual_score,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_5,CLUSTER_9
actual_score,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_5,CLUSTER_9
actual_score,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_5,CLUSTER_9
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val['Class'].values,predictions,pos_label=1)",CLUSTER_5,CLUSTER_9
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val['Class'].values,predictions,pos_label=1)",CLUSTER_5,CLUSTER_9
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val['Class'].values,predictions,pos_label=1)",CLUSTER_5,CLUSTER_9
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val['Class'].values,predictions,pos_label=1)",CLUSTER_5,CLUSTER_9
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val,predictions)",CLUSTER_5,CLUSTER_9
conf_mat,"sklearn.metrics.confusion_matrix(df_y_val['Class'].values,predictions)",CLUSTER_5,CLUSTER_9
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(i,)",CLUSTER_5,CLUSTER_9
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(i,j,)",CLUSTER_5,CLUSTER_9
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(best_i_sl,)",CLUSTER_5,CLUSTER_9
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(best_i_twol,best_j_twol)",CLUSTER_5,CLUSTER_9
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(best_i_sl,)",CLUSTER_5,CLUSTER_9
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(best_i_twol,best_j_twol)",CLUSTER_5,CLUSTER_9
[encoded],numpy.array(tokenizer.texts_to_sequences([shakespeare_text]),CLUSTER_2,CLUSTER_7
X,numpy.array(tokenizer.texts_to_sequences(texts),CLUSTER_2,CLUSTER_7
y_pred,"numpy.argmax(Y_pred,axis=1)",CLUSTER_4,CLUSTER_0
W,numpy.squeeze(W),CLUSTER_4,CLUSTER_0
C1,numpy.squeeze(C1),CLUSTER_4,CLUSTER_0
mosaic,numpy.ma.masked_all((nrows*imshape[0]+(nrows-1),CLUSTER_4,CLUSTER_0
x,numpy.asarray(x),CLUSTER_7,CLUSTER_8
centers,"numpy.empty((n_clusters,n_features)",CLUSTER_7,CLUSTER_8
candidate_ids,numpy.searchsorted(stable_cumsum(closest_dist_sq),CLUSTER_7,CLUSTER_8
new_dist_sq,"numpy.minimum(closest_dist_sq,
distance_to_candidates[trial])",CLUSTER_7,CLUSTER_8
features,pandas.read_csv('voice.csv'),CLUSTER_7,CLUSTER_8
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
boston,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(data=boston_data,columns=boston.feature_names)",CLUSTER_5,CLUSTER_5
lin_regression,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
df_cat,pandas.DataFrame(enc.transform(df_cat),CLUSTER_11,CLUSTER_1
df,"pandas.concat([df,df_cat],axis=1)",CLUSTER_11,CLUSTER_1
train,pandas.read_csv('train.csv'),CLUSTER_11,CLUSTER_1
test,pandas.read_csv('test.csv'),CLUSTER_11,CLUSTER_1
sub,pandas.read_csv('sample_submission.csv'),CLUSTER_11,CLUSTER_1
sub,pandas.read_csv('sample_submission.csv'),CLUSTER_11,CLUSTER_1
df[col],pandas.to_datetime(df[col]),CLUSTER_11,CLUSTER_1
oof,numpy.zeros(len(train1),CLUSTER_11,CLUSTER_1
predictions,numpy.zeros(len(test1),CLUSTER_11,CLUSTER_1
C,"numpy.logspace(0,7,10)",CLUSTER_11,CLUSTER_1
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(train1,target,train_size=0.80,random_state=10)",CLUSTER_11,CLUSTER_1
clf,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=hyperparameters,
cv=15)",CLUSTER_11,CLUSTER_1
skf,"sklearn.model_selection.StratifiedKFold(n_splits=nfold,shuffle=True,random_state=2010)",CLUSTER_11,CLUSTER_1
model,sklearn.linear_model.LogisticRegression(random_state=0),CLUSTER_11,CLUSTER_1
enc,sklearn.preprocessing.OneHotEncoder(handle_unknown='ignore'),CLUSTER_11,CLUSTER_1
phi,"numpy.array([math.pi+orbitalangle,orbitalangle])",CLUSTER_3,CLUSTER_6
xmomentum,numpy.array(vxarr1),CLUSTER_3,CLUSTER_6
z0,numpy.zeros(2),CLUSTER_3,CLUSTER_6
v,numpy.zeros(2),CLUSTER_3,CLUSTER_6
a,numpy.zeros(2),CLUSTER_3,CLUSTER_6
v,numpy.zeros(2),CLUSTER_3,CLUSTER_6
uz0,numpy.zeros(2),CLUSTER_3,CLUSTER_6
a,numpy.zeros(2),CLUSTER_3,CLUSTER_6
az0,numpy.zeros(2),CLUSTER_3,CLUSTER_6
ux0,numpy.zeros(2),CLUSTER_3,CLUSTER_6
v,numpy.zeros(2),CLUSTER_3,CLUSTER_6
uz0,numpy.zeros(2),CLUSTER_3,CLUSTER_6
a,numpy.zeros(2),CLUSTER_3,CLUSTER_6
az0,numpy.zeros(2),CLUSTER_3,CLUSTER_6
xii,numpy.zeros(np.size(xi),CLUSTER_3,CLUSTER_6
vxii,numpy.zeros(np.size(vxi),CLUSTER_3,CLUSTER_6
yii,numpy.zeros(np.size(yi),CLUSTER_3,CLUSTER_6
vyii,numpy.zeros(np.size(vyi),CLUSTER_3,CLUSTER_6
zii,numpy.zeros(np.size(vzi),CLUSTER_3,CLUSTER_6
vzii,numpy.zeros(np.size(vzi),CLUSTER_3,CLUSTER_6
rii,numpy.zeros(np.size(xi),CLUSTER_3,CLUSTER_6
axii,numpy.zeros(np.size(axi),CLUSTER_3,CLUSTER_6
ayii,numpy.zeros(np.size(ayi),CLUSTER_3,CLUSTER_6
azii,numpy.zeros(np.size(azi),CLUSTER_3,CLUSTER_6
L,numpy.zeros(len(mass0),CLUSTER_3,CLUSTER_6
mass,numpy.ones(2),CLUSTER_3,CLUSTER_6
cosphi,numpy.cos(phi),CLUSTER_3,CLUSTER_6
sinphi,numpy.sin(phi),CLUSTER_3,CLUSTER_6
starsep,numpy.sqrt((x0[0]-x0[1]),CLUSTER_3,CLUSTER_6
v,numpy.sqrt(masses[1]*masses[0]/masses*(2./starsep-1./(2.*orbitalr),CLUSTER_3,CLUSTER_6
v[i],numpy.sqrt(Gconstant*masses[(i+1),CLUSTER_3,CLUSTER_6
r,numpy.sqrt(diffx**2+diffy**2),CLUSTER_3,CLUSTER_6
t,"numpy.linspace(0,2*math.pi,100)",CLUSTER_3,CLUSTER_6
ks,"numpy.arange(0,3,1/l)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(0,l,1000)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(0,l,1000)",CLUSTER_1,CLUSTER_10
v,"numpy.piecewise(x,[(x>0)",CLUSTER_1,CLUSTER_10
vk,"numpy.piecewise(x,[np.absolute(x-xr(a,i)",CLUSTER_1,CLUSTER_10
s,"numpy.append(s,pot(x[i])",CLUSTER_1,CLUSTER_10
mat,"numpy.arange(1,26)",CLUSTER_3,CLUSTER_6
fig,matplotlib.pyplot.figure(),CLUSTER_1,CLUSTER_3
ax,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_3
"n_hist_data,bin_edges,_","matplotlib.pyplot.hist(data[:,kk],color=colors[1],label='Input',alpha=1,bins=n_bins)",CLUSTER_1,CLUSTER_3
"n_hist_pred,_,_","matplotlib.pyplot.hist(pred[:,kk],color=colors[0],label='Output',alpha=alph,bins=bin_edges)",CLUSTER_1,CLUSTER_3
"n_hist_pred,bin_edges,_","matplotlib.pyplot.hist(
residuals[:,kk],label='Residuals',linestyle=line_style[0],alpha=alph,bins=200,range=range)",CLUSTER_1,CLUSTER_3
pred,"numpy.add(pred,train_mean.values)",CLUSTER_1,CLUSTER_3
data,"numpy.add(data,train_mean.values)",CLUSTER_1,CLUSTER_3
pred,"numpy.add(pred,train_mean.values)",CLUSTER_1,CLUSTER_3
data,"numpy.add(data,train_mean.values)",CLUSTER_1,CLUSTER_3
pred,"numpy.multiply(pred,train_std.values)",CLUSTER_1,CLUSTER_3
data,"numpy.multiply(data,train_std.values)",CLUSTER_1,CLUSTER_3
pred,"numpy.multiply(pred,train_std.values)",CLUSTER_1,CLUSTER_3
data,"numpy.multiply(data,train_std.values)",CLUSTER_1,CLUSTER_3
train,pandas.read_pickle(BIN+'processed_data/train.pkl'),CLUSTER_1,CLUSTER_3
test,pandas.read_pickle(BIN+'processed_data/test.pkl'),CLUSTER_1,CLUSTER_3
unnormed_train,pandas.read_pickle(BIN+'processed_data/train.pkl'),CLUSTER_1,CLUSTER_3
unnormed_test,pandas.read_pickle(BIN+'processed_data/test.pkl'),CLUSTER_1,CLUSTER_3
data,"pandas.read_csv(""housing.csv"")",CLUSTER_7,CLUSTER_3
g,seaborn.pairplot(data),CLUSTER_7,CLUSTER_3
"v[""dW""+str(l+1)]",numpy.zeros_like(parameters['W'+str(l+1),CLUSTER_5,CLUSTER_9
"v[""db""+str(l+1)]",numpy.zeros_like(parameters['b'+str(l+1),CLUSTER_5,CLUSTER_9
"v[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"v[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
"s[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"s[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
num_complete_minibatches,math.floor(m/mini_batch_size),CLUSTER_5,CLUSTER_9
age,pandas.concat(parts),CLUSTER_4,CLUSTER_11
gender,pandas.concat(parts),CLUSTER_4,CLUSTER_11
sum_links,"pandas.concat(
[
x[x.OriginLineSurrKey.isin(data.index)",CLUSTER_4,CLUSTER_11
data,"pandas.merge(sei,age,how='left',left_index=True,right_index=True)",CLUSTER_4,CLUSTER_11
sei,"pandas.read_csv('/gd/sm/campaigns/inferences/sei_house_hold_income_201502_201507.txt.gz',sep='|',index_col='mdn')",CLUSTER_4,CLUSTER_11
img,numpy.array(img),CLUSTER_1,CLUSTER_10
df,"pandas.DataFrame(df.values[1:],columns=headers)",CLUSTER_9,CLUSTER_2
df,pandas.read_html(str(table),CLUSTER_9,CLUSTER_2
df['Neighbourhood'],"numpy.where(df['Neighbourhood']=='Notassigned',df['Borough'],df['Neighbourhood'])",CLUSTER_9,CLUSTER_2
source,"requests.get(""https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M"")",CLUSTER_9,CLUSTER_2
grid_cv,"sklearn.model_selection.GridSearchCV(model_rtree,parameters_grid,scoring='accuracy',cv=5,n_jobs=4)",CLUSTER_5,CLUSTER_6
tree_scoring,"sklearn.model_selection.cross_val_score(clf_tree,X,y,cv=10)",CLUSTER_5,CLUSTER_6
bag_scoring,"sklearn.model_selection.cross_val_score(model_bag,X,y,cv=10)",CLUSTER_5,CLUSTER_6
bag_scoring,"sklearn.model_selection.cross_val_score(model_bag,X,y,cv=10)",CLUSTER_5,CLUSTER_6
bag_scoring,"sklearn.model_selection.cross_val_score(model_bag,X,y,cv=10)",CLUSTER_5,CLUSTER_6
bag_scoring,"sklearn.model_selection.cross_val_score(model_rtree,X,y,cv=10)",CLUSTER_5,CLUSTER_6
data,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_6
clf_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_5,CLUSTER_6
clf_tree,sklearn.tree.DecisionTreeClassifier(max_features='auto'),CLUSTER_5,CLUSTER_6
model_bag,"sklearn.ensemble.BaggingClassifier(base_estimator=clf_tree,n_estimators=100,n_jobs=2)",CLUSTER_5,CLUSTER_6
model_bag,"sklearn.ensemble.BaggingClassifier(base_estimator=clf_tree,n_estimators=100,n_jobs=2,max_features=feature_cnt)",CLUSTER_5,CLUSTER_6
model_bag,"sklearn.ensemble.BaggingClassifier(base_estimator=clf_tree,n_estimators=100,n_jobs=2)",CLUSTER_5,CLUSTER_6
model_rtree,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_features='auto')",CLUSTER_5,CLUSTER_6
model_rtree,sklearn.ensemble.RandomForestClassifier(),CLUSTER_5,CLUSTER_6
feature_cnt,numpy.sqrt(X.shape[1]),CLUSTER_5,CLUSTER_6
df,pandas.read_csv(url),CLUSTER_7,CLUSTER_3
df,"pandas.read_csv(""gpa.csv"")",CLUSTER_8,CLUSTER_4
train_indicies,numpy.arange(Xd.shape[0]),CLUSTER_2,CLUSTER_7
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_2,CLUSTER_7
correct+,numpy.sum(corr),CLUSTER_2,CLUSTER_7
total_loss,numpy.sum(losses),CLUSTER_2,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_2,CLUSTER_7
messages,"pandas.read_csv('smsspamcollection/SMSSpamCollection',sep='\t',
names=[""label"",""message""])",CLUSTER_7,CLUSTER_5
spam_detect_model,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_5
pipeline,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer(analyzer=text_process)",CLUSTER_7,CLUSTER_5
dataset,pandas.read_csv('Churn_Modelling.csv'),CLUSTER_5,CLUSTER_5
labelencoder_X_1,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
labelencoder_X_2,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[1]),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_5,CLUSTER_5
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(1),CLUSTER_1,CLUSTER_9
coin,"random.choice([0,1])",CLUSTER_1,CLUSTER_9
coin,"random.choice([0,1])",CLUSTER_1,CLUSTER_9
r,"random.randint(0,59049-1)",CLUSTER_1,CLUSTER_9
r,"random.randint(0,59049-1)",CLUSTER_1,CLUSTER_9
test_pairs,"random.sample(outperform_all,N)",CLUSTER_1,CLUSTER_9
r_pairs,"random.sample(pairs,50)",CLUSTER_1,CLUSTER_9
x,pandas.DataFrame(ski2.state.value_counts(),CLUSTER_7,CLUSTER_5
x,pandas.DataFrame(ski2.Region.value_counts(),CLUSTER_7,CLUSTER_5
ski2,"pandas.read_csv('step2_output.csv',index_col=0)",CLUSTER_7,CLUSTER_5
g,seaborn.pairplot(dfno),CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_5
kmeans,sklearn.cluster.KMeans(n_clusters=i),CLUSTER_7,CLUSTER_5
kmeans3,sklearn.cluster.KMeans(n_clusters=3),CLUSTER_7,CLUSTER_5
star_wars,"pandas.read_csv(""star_wars.csv"",encoding=""ISO-8859-1"")",CLUSTER_8,CLUSTER_3
output_data,"pandas.DataFrame(columns=['Image','DAPIcount','DAPIintensity','DAPIarea','PIcount','PIintensity','PIarea','PIintensity/DAPIcount','PIw/inDAPIarea','PIw/inDAPI/DAPIcount','%overlapPI/DAPI'])",CLUSTER_4,CLUSTER_11
props_DAPI,"pandas.DataFrame(columns=['centroidx','centroidy','filled_area','area'])",CLUSTER_4,CLUSTER_11
props_PI,"pandas.DataFrame(columns=['centroidx','centroidy','filled_area','area'])",CLUSTER_4,CLUSTER_11
X_new,"numpy.array([[0],[2]])",CLUSTER_4,CLUSTER_11
theta_best,numpy.linalg.inv(X_b.T.dot(X_b),CLUSTER_4,CLUSTER_11
"theta_best_svd,residuals,rank,s","numpy.linalg.lstsq(X_b,y,rcond=1e-6)",CLUSTER_4,CLUSTER_11
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
sgd_reg,"sklearn.linear_model.SGDRegressor(max_iter=1000,tol=1e-3,penalty=None,eta0=0.1)",CLUSTER_4,CLUSTER_11
sgd_reg,"sklearn.linear_model.SGDRegressor(penalty=""l2"")",CLUSTER_4,CLUSTER_11
poly_features,"sklearn.preprocessing.PolynomialFeatures(degree=2,include_bias=False)",CLUSTER_4,CLUSTER_11
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_4,CLUSTER_11
polynomial_regression,"sklearn.pipeline.Pipeline([
(""poly_features"",PolynomialFeatures(degree=10,include_bias=False)",CLUSTER_4,CLUSTER_11
ridge_reg,"sklearn.linear_model.Ridge(alpha=1,solver=""cholesky"")",CLUSTER_4,CLUSTER_11
lasso_reg,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_4,CLUSTER_11
elastic_net,"sklearn.linear_model.ElasticNet(alpha=0.1,l1_ratio=0.5)",CLUSTER_4,CLUSTER_11
regex,re.compile(regex_expression),CLUSTER_10,CLUSTER_4
X,"scipy.integrate.odeint(dX_dt,X0,t)",CLUSTER_7,CLUSTER_9
X,"scipy.integrate.odeint(dX_dt,X0,t)",CLUSTER_7,CLUSTER_9
X,"scipy.integrate.odeint(dX_dt,X0,t)",CLUSTER_7,CLUSTER_9
t,numpy.arange(T),CLUSTER_7,CLUSTER_9
t,numpy.arange(T),CLUSTER_7,CLUSTER_9
t,numpy.arange(T),CLUSTER_7,CLUSTER_9
theta,"numpy.array([
np.random.uniform(low=0.0001,high=1.0)",CLUSTER_7,CLUSTER_9
theta,"numpy.array([
np.random.uniform(low=0.0001,high=1.0)",CLUSTER_7,CLUSTER_9
theta,"numpy.array([
np.random.uniform(low=0.0001,high=1.0)",CLUSTER_7,CLUSTER_9
X0,"numpy.array([init0,init1])",CLUSTER_7,CLUSTER_9
X0,"numpy.array([init0,init1])",CLUSTER_7,CLUSTER_9
X0,"numpy.array([init0,init1])",CLUSTER_7,CLUSTER_9
scores,numpy.zeros(num_agents),CLUSTER_6,CLUSTER_10
scores,numpy.zeros(num_agents),CLUSTER_6,CLUSTER_10
scores,numpy.zeros(num_agents),CLUSTER_6,CLUSTER_10
scores,numpy.zeros(num_agents),CLUSTER_6,CLUSTER_10
actions,"numpy.clip(actions,-1,1)",CLUSTER_6,CLUSTER_10
scores_deque,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_10
individual_scores,collections.defaultdict(list),CLUSTER_6,CLUSTER_10
aic_metric,"pandas.DataFrame({'Modelname':[],'AIC':[]})",CLUSTER_9,CLUSTER_2
df_error,"pandas.DataFrame({'Modelname':[modelname],'AIC':[AIC]})",CLUSTER_9,CLUSTER_2
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_9,CLUSTER_2
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_9,CLUSTER_2
aic_metric,"pandas.concat([aic_metric,df_error])",CLUSTER_9,CLUSTER_2
indicator_data,"pandas.read_csv('P:\\ADS\\Final\\Indicators_Cleaned.csv',header=0,parse_dates=True,index_col='Year',date_parser=dateparse,low_memory=False)",CLUSTER_9,CLUSTER_2
predict_MA_HPI,"numpy.exp(results_AR.predict(10,10,dynamic=True)",CLUSTER_9,CLUSTER_2
output,numpy.exp(output),CLUSTER_9,CLUSTER_2
PredictedVal,numpy.exp(fittedVal),CLUSTER_9,CLUSTER_2
ts_log,numpy.log(df),CLUSTER_9,CLUSTER_2
Box,"collections.namedtuple(""Box"",""x1x2y1y2"")",CLUSTER_10,CLUSTER_4
df,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_5,CLUSTER_5
LEncoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_5
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_5
lr,"sklearn.linear_model.LogisticRegression(solver='lbfgs',max_iter=1000)",CLUSTER_5,CLUSTER_5
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=20,min_samples_split=10,min_samples_leaf=5,
max_features=4,max_depth=3,bootstrap=True)",CLUSTER_5,CLUSTER_5
onehot,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_5
"train_X,test_X,train_Y,test_Y","sklearn.model_selection.train_test_split(train_X,train_Y,test_size=0.5)",CLUSTER_5,CLUSTER_5
"train_X,val_X,train_Y,val_Y","sklearn.model_selection.train_test_split(train_X,train_Y,test_size=0.5)",CLUSTER_5,CLUSTER_5
"fpr_rf_lr,tpr_rf_lr,_","sklearn.metrics.roc_curve(test_Y,pred_rf_lr)",CLUSTER_5,CLUSTER_5
"fpr_rf,tpr_rf,_","sklearn.metrics.roc_curve(test_Y,pred_rf)",CLUSTER_5,CLUSTER_5
dummy_variables,pandas.DataFrame([]),CLUSTER_0,CLUSTER_1
dummy,"pandas.DataFrame(binary,columns=[i],index=data.index)",CLUSTER_0,CLUSTER_1
dummy,"pandas.DataFrame(binary,columns=[""{}_{}"".format(a,b)",CLUSTER_0,CLUSTER_1
data_imput,pandas.DataFrame(imputer.transform(data),CLUSTER_0,CLUSTER_1
data,pandas.DataFrame(data.str.split(splitter),CLUSTER_0,CLUSTER_1
feature_word,pandas.DataFrame(vectorized_text.toarray(),CLUSTER_0,CLUSTER_1
data_standard,pandas.DataFrame(standard.transform(data),CLUSTER_0,CLUSTER_1
dummy_variables,pandas.DataFrame(),CLUSTER_0,CLUSTER_1
dummy,"pandas.DataFrame(binary,index=data.index)",CLUSTER_0,CLUSTER_1
dummy,"pandas.DataFrame(binary,index=data.index)",CLUSTER_0,CLUSTER_1
data,pandas.DataFrame(raw_data),CLUSTER_0,CLUSTER_1
label_encoder,pandas.Series([]),CLUSTER_0,CLUSTER_1
label_binarizer,pandas.Series([]),CLUSTER_0,CLUSTER_1
clear_text,pandas.Series([]),CLUSTER_0,CLUSTER_1
raw_data,pandas.Series([]),CLUSTER_0,CLUSTER_1
dummy_variables,"pandas.concat([dummy_variables,dummy],axis=1)",CLUSTER_0,CLUSTER_1
data_return,"pandas.concat([hour[""hour""],date[""day""]],axis=1)",CLUSTER_0,CLUSTER_1
x_train_concat,"pandas.concat([x_train_imput_num,x_train_coordinate_clean,x_train_text_feature,x_train_time_clean],axis=1)",CLUSTER_0,CLUSTER_1
x_train_standardize,"pandas.concat([data_train_dummy,x_train_standardize],axis=1)",CLUSTER_0,CLUSTER_1
dummy_variables,"pandas.concat([dummy_variables,dummy],axis=1)",CLUSTER_0,CLUSTER_1
data_num,"pandas.concat([data_numeric_imput,data_time,data_coord,text_feature],axis=1)",CLUSTER_0,CLUSTER_1
data_valid,"pandas.concat([data_dummy,data_standard],axis=1)",CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(""tweet_airlines.csv"")",CLUSTER_0,CLUSTER_1
data,pandas.read_csv(path),CLUSTER_0,CLUSTER_1
split_coord[i],pandas.to_numeric(split_coord[i]),CLUSTER_0,CLUSTER_1
data[i],pandas.to_numeric(data[i]),CLUSTER_0,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.25,random_state=123)",CLUSTER_0,CLUSTER_1
label_bin,sklearn.preprocessing.LabelBinarizer(),CLUSTER_0,CLUSTER_1
label_en,sklearn.preprocessing.LabelEncoder(),CLUSTER_0,CLUSTER_1
string,"re.sub('[^A-Za-z0-9]+','',string)",CLUSTER_0,CLUSTER_1
string,"re.sub('+','',string.strip()",CLUSTER_0,CLUSTER_1
standard,sklearn.preprocessing.StandardScaler(),CLUSTER_0,CLUSTER_1
decTree,sklearn.tree.DecisionTreeClassifier(random_state=123),CLUSTER_0,CLUSTER_1
decTree,sklearn.tree.DecisionTreeClassifier(min_samples_leaf=best_decTree.best_params_.get('min_samples_leaf'),CLUSTER_0,CLUSTER_1
decTree,sklearn.tree.DecisionTreeClassifier(random_state=123),CLUSTER_0,CLUSTER_1
decTree_bagging,sklearn.tree.DecisionTreeClassifier(min_samples_leaf=best_bagging.best_params_.get('base_estimator__min_samples_leaf'),CLUSTER_0,CLUSTER_1
decTree,sklearn.tree.DecisionTreeClassifier(random_state=123),CLUSTER_0,CLUSTER_1
decTree_adaboost,sklearn.tree.DecisionTreeClassifier(min_samples_leaf=best_adaboost.best_params_.get('base_estimator__min_samples_leaf'),CLUSTER_0,CLUSTER_1
bagging,"sklearn.ensemble.BaggingClassifier(base_estimator=decTree,random_state=123)",CLUSTER_0,CLUSTER_1
bagging,"sklearn.ensemble.BaggingClassifier(base_estimator=decTree_bagging,n_estimators=best_bagging.best_params_.get('n_estimators')",CLUSTER_0,CLUSTER_1
adaboost,"sklearn.ensemble.AdaBoostClassifier(base_estimator=decTree,random_state=123)",CLUSTER_0,CLUSTER_1
adaBoost,"sklearn.ensemble.AdaBoostClassifier(base_estimator=decTree_adaboost,
n_estimators=best_adaboost.best_params_.get('n_estimators')",CLUSTER_0,CLUSTER_1
randomforest,sklearn.ensemble.RandomForestClassifier(random_state=123),CLUSTER_0,CLUSTER_1
randomforest,"sklearn.ensemble.RandomForestClassifier(random_state=123,n_jobs=-1,min_samples_leaf=best_randomforest.best_params_.get('min_samples_leaf')",CLUSTER_0,CLUSTER_1
random_decTree,"sklearn.model_selection.RandomizedSearchCV(decTree,param_distributions=hyperparam,cv=5,
n_iter=15,scoring=scoring,n_jobs=-1,random_state=123)",CLUSTER_0,CLUSTER_1
random_bagging,"sklearn.model_selection.RandomizedSearchCV(bagging,param_distributions=hyperparam,cv=5,n_iter=10,scoring=scoring,n_jobs=-1,random_state=123)",CLUSTER_0,CLUSTER_1
random_randomforest,"sklearn.model_selection.RandomizedSearchCV(randomforest,param_distributions=hyperparam,cv=5,n_iter=10,scoring=scoring,
n_jobs=-1,random_state=123)",CLUSTER_0,CLUSTER_1
random_adaboost,"sklearn.model_selection.RandomizedSearchCV(adaboost,param_distributions=hyperparam,cv=5,n_iter=1,
scoring=scoring,n_jobs=-1,random_state=123)",CLUSTER_0,CLUSTER_1
YesNo,"pandas.DataFrame({'Yes':[50,21],'No':[131,2]})",CLUSTER_8,CLUSTER_4
BobTed,"pandas.DataFrame({'Bod':['Ilikeit','Ihateit'],'Ted':['Tasty','Gross']})",CLUSTER_8,CLUSTER_4
fruits,"pandas.DataFrame({'Apples':[30],'Bananas':[21]})",CLUSTER_8,CLUSTER_4
indexed,"pandas.DataFrame({'Bob':['Ilikedit.','Itwasawful.'],
'Sue':['Prettygood.','Bland.']},
index=['ProductA','ProductB'])",CLUSTER_8,CLUSTER_4
fruit_sales,"pandas.DataFrame({'Apples':[35,41],'Bananas':[21,34]},
index=['2017Sales','2018Sales'])",CLUSTER_8,CLUSTER_4
listed,"pandas.Series([1,2,3,4,5])",CLUSTER_8,CLUSTER_4
sales,"pandas.Series([30,35,40],index=['2015Sales','2016Sales','2017Sales'],name='ProductA')",CLUSTER_8,CLUSTER_4
ingredients,"pandas.Series(['4cups','1cup','2large','1can'],index=['Flour','Milk','Eggs','Spam'],name='Dinner')",CLUSTER_8,CLUSTER_4
wine_reviews,"pandas.read_csv(""../Data/winemag-data_first150k.csv"",index_col=0)",CLUSTER_8,CLUSTER_4
ID,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
sample_submission,"pandas.DataFrame({
""ID"":ID,
""Approved"":Approved_
})",CLUSTER_7,CLUSTER_8
data_age,"pandas.concat([train,test])",CLUSTER_7,CLUSTER_8
data_loc,"pandas.concat([train,test])",CLUSTER_7,CLUSTER_8
data_age['DOB'],"pandas.cut(data_age['DOB'],bins=20)",CLUSTER_7,CLUSTER_8
train,"pandas.read_csv(""train.csv"")",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv(""test.csv"")",CLUSTER_7,CLUSTER_8
sample,"pandas.read_csv(""sample.csv"")",CLUSTER_7,CLUSTER_8
train.Lead_Creation_Date,pandas.to_datetime(train.Lead_Creation_Date),CLUSTER_7,CLUSTER_8
test.Lead_Creation_Date,pandas.to_datetime(test.Lead_Creation_Date),CLUSTER_7,CLUSTER_8
train.DOB,pandas.to_datetime(train.DOB),CLUSTER_7,CLUSTER_8
test.DOB,pandas.to_datetime(test.DOB),CLUSTER_7,CLUSTER_8
"data_loc[~data_loc[i].isnull()][X],_",scipy.stats.boxcox(data_loc[~data_loc[i].isnull(),CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
X_new,"numpy.array([0.03,0.0,13.0,0.0,0.4,4.3,23.5,1.9,1.0,273.0,18.0,380.0,7.5])",CLUSTER_5,CLUSTER_5
df.columns,"numpy.append(header,'PRICE')",CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(np.append(X,Y,axis=1)",CLUSTER_5,CLUSTER_5
X,pandas.DataFrame(X_train),CLUSTER_5,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
lm,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3,random_state=5)",CLUSTER_5,CLUSTER_5
data,sklearn.datasets.load_boston(),CLUSTER_5,CLUSTER_5
dydt,numpy.zeros(n),CLUSTER_1,CLUSTER_9
u,numpy.zeros(ns+1),CLUSTER_1,CLUSTER_9
yp,numpy.zeros(ns+1),CLUSTER_1,CLUSTER_9
yp0,numpy.zeros(n),CLUSTER_1,CLUSTER_9
ym,numpy.zeros(ns),CLUSTER_1,CLUSTER_9
x0,numpy.zeros(3),CLUSTER_1,CLUSTER_9
t,"numpy.linspace(0,40,ns+1)",CLUSTER_1,CLUSTER_9
data,"numpy.vstack((t,u,yp)",CLUSTER_1,CLUSTER_9
data,"numpy.loadtxt('data.txt',delimiter=',')",CLUSTER_1,CLUSTER_9
y,"scipy.integrate.odeint(process,yp0,ts,args=(n,u[i],Kp,taup)",CLUSTER_1,CLUSTER_9
y1,"scipy.integrate.odeint(fopdt,ym[i],ts,args=(uf,Km,taum,thetam)",CLUSTER_1,CLUSTER_9
solution,"scipy.optimize.minimize(objective,x0)",CLUSTER_1,CLUSTER_9
uf,"scipy.interpolate.interp1d(t,u)",CLUSTER_1,CLUSTER_9
df_res1,pandas.DataFrame([]),CLUSTER_8,CLUSTER_3
df_res2,"pandas.concat(df_list,axis=0)",CLUSTER_8,CLUSTER_3
df_res3,"pandas.concat(df_list,axis=0,keys=list(range(len(df_list)",CLUSTER_8,CLUSTER_3
df_after_melt,"pandas.melt(df_before_melt,id_vars=""Depth"",value_name=""pH"")",CLUSTER_8,CLUSTER_3
soils,"pandas.read_csv(""Soils.csv"",index_col=0)",CLUSTER_8,CLUSTER_3
forward_matrix,numpy.exp(model.forward(observations),CLUSTER_1,CLUSTER_10
probability_percentage,numpy.exp(model.log_probability(observations),CLUSTER_1,CLUSTER_10
vprob,numpy.exp(model.viterbi(o),CLUSTER_1,CLUSTER_10
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_2
toronto_df,"pandas.DataFrame({""PostalCode"":postalCode,
""Borough"":borough,
""Neighborhood"":neighborhood})",CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
toronto_onehot,"pandas.get_dummies(toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
coordinates,pandas.read_csv(body),CLUSTER_9,CLUSTER_2
data,requests.get('https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M'),CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
dataTwo,math.log10(dataOne),CLUSTER_8,CLUSTER_9
creditcsv,"pandas.read_csv(r""/Users/johnmiller/Downloads/defaultofcreditcardclients.csv"")",CLUSTER_8,CLUSTER_9
xx,"pandas.DataFrame(np.random.randn(50,4)",CLUSTER_8,CLUSTER_9
close,pandas.DataFrame(close_prices.resample(freq),CLUSTER_8,CLUSTER_9
temp,"pandas.DataFrame(np.random.randn(5,4)",CLUSTER_8,CLUSTER_9
top_stocks,pandas.DataFrame(),CLUSTER_8,CLUSTER_9
new,pandas.DataFrame(new),CLUSTER_8,CLUSTER_9
top_stocks,pandas.DataFrame(),CLUSTER_8,CLUSTER_9
new,pandas.DataFrame(new),CLUSTER_8,CLUSTER_9
all_stocks,pandas.DataFrame(columns=prev_returns.columns),CLUSTER_8,CLUSTER_9
all_stocks,pandas.DataFrame(columns=prev_returns.columns),CLUSTER_8,CLUSTER_9
s,pandas.Series(np.random.randn(50),CLUSTER_8,CLUSTER_9
new,pandas.Series(row)>=pandas.Series(row),CLUSTER_8,CLUSTER_9
top_stocks[i],pandas.Series(row),CLUSTER_8,CLUSTER_9
top_stocks[i],pandas.Series(row),CLUSTER_8,CLUSTER_9
new,pandas.Series(row)>=pandas.Series(row),CLUSTER_8,CLUSTER_9
top_stocks,pandas.Series(this_month),CLUSTER_8,CLUSTER_9
top_stocks,pandas.Series(this_month),CLUSTER_8,CLUSTER_9
temp,"pd.DataFrame(np.random.randn(5,4),columns=list('ABCD'),index=pandas.date_range('20180101',periods=5)",CLUSTER_8,CLUSTER_9
df,"pandas.read_csv('../../data/project_1/eod-quotemedia.csv',parse_dates=['date'],index_col=False)",CLUSTER_8,CLUSTER_9
log_return,numpy.log(prices),CLUSTER_8,CLUSTER_9
"t,p","scipy.stats.ttest_1samp(expected_portfolio_returns_by_date,null_hypothesis)",CLUSTER_8,CLUSTER_9
df,"pandas.DataFrame(dados,columns=[""Atributos"",""Descricao""])",CLUSTER_8,CLUSTER_4
pca,sklearn.decomposition.PCA(),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=200),CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(data=df,index=dic.keys()",CLUSTER_5,CLUSTER_5
df,"pandas.DataFrame(data=df,index=dic.keys()",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
dataset,"pandas.read_csv(""flickr_8k_train_dataset.txt"",delimiter='\t')",CLUSTER_4,CLUSTER_0
padded_sequences,numpy.asarray(padded_sequences),CLUSTER_4,CLUSTER_0
subsequent_words,numpy.asarray(subsequent_words),CLUSTER_4,CLUSTER_0
imgs,numpy.asarray(imgs),CLUSTER_4,CLUSTER_0
images,numpy.asarray(images),CLUSTER_4,CLUSTER_0
image_names,numpy.asarray(image_names),CLUSTER_4,CLUSTER_0
next_words_1hot,numpy.zeros([len(next_words),CLUSTER_4,CLUSTER_0
captions,"numpy.zeros([0,max_len])",CLUSTER_4,CLUSTER_0
next_words,"numpy.zeros([0,vocab_size])",CLUSTER_4,CLUSTER_0
captions,"numpy.concatenate([captions,padded_sequences[ix]])",CLUSTER_4,CLUSTER_0
next_words,"numpy.concatenate([next_words,subsequent_words[ix]])",CLUSTER_4,CLUSTER_0
im,"numpy.expand_dims(im,axis=0)",CLUSTER_4,CLUSTER_0
captions,"numpy.load(""captions.npy"")",CLUSTER_4,CLUSTER_0
next_words,"numpy.load(""next_words.npy"")",CLUSTER_4,CLUSTER_0
images,"numpy.load(""images.npy"")",CLUSTER_4,CLUSTER_0
imag,"numpy.load(""image_names.npy"")",CLUSTER_4,CLUSTER_0
images_dir,"os.listdir(""/Flicker_data/"")",CLUSTER_4,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_1,CLUSTER_10
x_line,"numpy.arange(-30,30,0.1)",CLUSTER_1,CLUSTER_10
test_matrix,numpy.arange(30),CLUSTER_3,CLUSTER_6
matrix,numpy.arange(9),CLUSTER_3,CLUSTER_6
X,"numpy.array(unit_table[""psth""].tolist()",CLUSTER_5,CLUSTER_5
Y,"numpy.array(unit_table[""stim""])",CLUSTER_5,CLUSTER_5
lda_scores,numpy.zeros(len(DIMS),CLUSTER_5,CLUSTER_5
qda_scores,numpy.zeros(len(DIMS),CLUSTER_5,CLUSTER_5
rf_scores,numpy.zeros(len(DIMS),CLUSTER_5,CLUSTER_5
lda_std,numpy.zeros(len(DIMS),CLUSTER_5,CLUSTER_5
qda_std,numpy.zeros(len(DIMS),CLUSTER_5,CLUSTER_5
rf_std,numpy.zeros(len(DIMS),CLUSTER_5,CLUSTER_5
lda_scores[i],numpy.mean(scores),CLUSTER_5,CLUSTER_5
qda_scores[i],numpy.mean(scores),CLUSTER_5,CLUSTER_5
rf_scores[i],numpy.mean(scores),CLUSTER_5,CLUSTER_5
lda_std[i],numpy.std(scores),CLUSTER_5,CLUSTER_5
qda_std[i],numpy.std(scores),CLUSTER_5,CLUSTER_5
rf_std[i],numpy.std(scores),CLUSTER_5,CLUSTER_5
pca,sklearn.decomposition.PCA(n_components=dim),CLUSTER_5,CLUSTER_5
dataset,"pandas.read_csv('../data/spam.csv',encoding=""ISO-8859-1"")",CLUSTER_0,CLUSTER_1
textAlphabetic,"re.sub('[^A-Za-z]','',text)",CLUSTER_0,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y)",CLUSTER_0,CLUSTER_1
classifier,sklearn.naive_bayes.GaussianNB(),CLUSTER_0,CLUSTER_1
accuracy,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_0,CLUSTER_1
X,pandas.get_dummies(X),CLUSTER_8,CLUSTER_1
X,"pandas.read_csv(""Datasets/agaricus-lepiota.data"",names=['classes','cap-shape','cap-surface','cap-color','bruises?','odor','gill-attachment','gill-spacing','gill-size','gill-color','stalk-shape','stalk-root','stalk-surface-above-ring','stalk-surface-below-ring','stalk-color-above-ring','stalk-color-below-ring','veil-type','veil-color','ring-number','ring-type','spore-print-color','population','habitat'],na_values=""?"")",CLUSTER_8,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=7)",CLUSTER_8,CLUSTER_1
DT,sklearn.tree.DecisionTreeClassifier(),CLUSTER_8,CLUSTER_1
df,"pandas.DataFrame({'colone':[100,200],'coltwo':[300,400]})",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame({'col_one':['1.1','2.2','3.3'],
'col_two':['4.4','5.5','6.6'],
'col_three':['7.7','8.8','-']})",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame({'name':['JohnArthurDoe','JaneAnnSmith'],
'location':['LosAngeles,CA','Washington,DC']})",CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame({'col_one':['a','b','c'],'col_two':[[10,40],[20,50],[30,60]]})",CLUSTER_8,CLUSTER_3
df,pandas.read_clipboard(),CLUSTER_8,CLUSTER_3
df,pandas.read_clipboard(),CLUSTER_8,CLUSTER_3
drinks,pandas.read_csv('http://bit.ly/drinksbycountry'),CLUSTER_8,CLUSTER_3
movies,pandas.read_csv('http://bit.ly/imdbratings'),CLUSTER_8,CLUSTER_3
orders,"pandas.read_csv('http://bit.ly/chiporders',sep='\t')",CLUSTER_8,CLUSTER_3
stocks,"pandas.read_csv('http://bit.ly/smallstocks',parse_dates=['Date'])",CLUSTER_8,CLUSTER_3
titanic,pandas.read_csv('http://bit.ly/kaggletrain'),CLUSTER_8,CLUSTER_3
ufo,"pandas.read_csv('http://bit.ly/uforeports',parse_dates=['Time'])",CLUSTER_8,CLUSTER_3
small_drinks,"pandas.read_csv('http://bit.ly/drinksbycountry',usecols=cols)",CLUSTER_8,CLUSTER_3
smaller_drinks,"pandas.read_csv('http://bit.ly/drinksbycountry',usecols=cols,dtype=dtypes)",CLUSTER_8,CLUSTER_3
df,pandas.DataFrame(all_features),CLUSTER_8,CLUSTER_3
contentData,"pandas.concat([contentData,result])",CLUSTER_8,CLUSTER_3
content,pandas.concat(frames),CLUSTER_8,CLUSTER_3
df,pandas.read_csv('links.csv'),CLUSTER_8,CLUSTER_3
response,requests.get(url),CLUSTER_8,CLUSTER_3
df,"pandas.DataFrame({'trainauc':train_auc,'valauc':val_auc},index=alpha)",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(cm,['notapproved','approved'],['notapproved','approved'])",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(cm,['notapproved','approved'],['notapproved','approved'])",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame({'trainauc':train_auc,'valauc':val_auc},index=alpha)",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(cm,['notapproved','approved'],['notapproved','approved'])",CLUSTER_7,CLUSTER_8
df,"pandas.DataFrame(cm,['notapproved','approved'],['notapproved','approved'])",CLUSTER_7,CLUSTER_8
data,"pandas.read_csv('/home/sathish/Desktop/appliedai/Donors_choose_preprocessed_data.csv',na_filter=False)",CLUSTER_7,CLUSTER_8
tfidf_features,numpy.array(tfidf_features),CLUSTER_7,CLUSTER_8
bow_features,numpy.array(bow_features),CLUSTER_7,CLUSTER_8
labels_train,"numpy.concatenate((y_train,y_val)",CLUSTER_7,CLUSTER_8
labels_train,"numpy.concatenate((y_train,y_val)",CLUSTER_7,CLUSTER_8
sorted_idx,numpy.argsort(bayes.feature_log_prob_[1]),CLUSTER_7,CLUSTER_8
sorted_idx,numpy.argsort(bayes.feature_log_prob_[0]),CLUSTER_7,CLUSTER_8
sorted_idx,numpy.argsort(bayes.feature_log_prob_[1]),CLUSTER_7,CLUSTER_8
sorted_idx,numpy.argsort(bayes.feature_log_prob_[0]),CLUSTER_7,CLUSTER_8
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.33,stratify=y)",CLUSTER_7,CLUSTER_8
"x_train,x_val,y_train,y_val","sklearn.model_selection.train_test_split(x_train,y_train,test_size=0.33,stratify=y_train)",CLUSTER_7,CLUSTER_8
bow_train,"scipy.sparse.hstack((x_train_essay_bow,x_train_summary_bow,x_train_title_bow)",CLUSTER_7,CLUSTER_8
bow_valid,"scipy.sparse.hstack((x_val_essay_bow,x_val_summary_bow,x_val_title_bow)",CLUSTER_7,CLUSTER_8
bow_test,"scipy.sparse.hstack((x_test_essay_bow,x_test_summary_bow,x_test_title_bow)",CLUSTER_7,CLUSTER_8
x_train_cat,"scipy.sparse.hstack((x_train_state_onehot,x_train_tprefix_onehot,x_train_grade_onehot,x_train_cat_onehot,x_train_subcat_onehot)",CLUSTER_7,CLUSTER_8
x_val_cat,"scipy.sparse.hstack((x_val_state_onehot,x_val_tprefix_onehot,x_val_grade_onehot,x_val_cat_onehot,x_val_subcat_onehot)",CLUSTER_7,CLUSTER_8
x_test_cat,"scipy.sparse.hstack((x_test_state_onehot,x_test_tprefix_onehot,x_test_grade_onehot,x_test_cat_onehot,x_test_subcat_onehot)",CLUSTER_7,CLUSTER_8
x_train_num,scipy.sparse.hstack((csr_matrix(x_train_price_norm),CLUSTER_7,CLUSTER_8
x_val_num,scipy.sparse.hstack((csr_matrix(x_val_price_norm),CLUSTER_7,CLUSTER_8
x_test_num,scipy.sparse.hstack((csr_matrix(x_test_price_norm),CLUSTER_7,CLUSTER_8
final_bow_train,"scipy.sparse.hstack((bow_train,x_train_cat,x_train_num)",CLUSTER_7,CLUSTER_8
final_bow_val,"scipy.sparse.hstack((bow_valid,x_val_cat,x_val_num)",CLUSTER_7,CLUSTER_8
final_bow_test,"scipy.sparse.hstack((bow_test,x_test_cat,x_test_num)",CLUSTER_7,CLUSTER_8
tfidf_train,"scipy.sparse.hstack((x_train_essay_tfidf,x_train_summary_tfidf,x_train_title_tfidf)",CLUSTER_7,CLUSTER_8
tfidf_valid,"scipy.sparse.hstack((x_val_essay_tfidf,x_val_summary_tfidf,x_val_title_tfidf)",CLUSTER_7,CLUSTER_8
tfidf_test,"scipy.sparse.hstack((x_test_essay_tfidf,x_test_summary_tfidf,x_test_title_tfidf)",CLUSTER_7,CLUSTER_8
x_train_cat,"scipy.sparse.hstack((x_train_state_onehot,x_train_tprefix_onehot,x_train_grade_onehot,x_train_cat_onehot,x_train_subcat_onehot)",CLUSTER_7,CLUSTER_8
x_val_cat,"scipy.sparse.hstack((x_val_state_onehot,x_val_tprefix_onehot,x_val_grade_onehot,x_val_cat_onehot,x_val_subcat_onehot)",CLUSTER_7,CLUSTER_8
x_test_cat,"scipy.sparse.hstack((x_test_state_onehot,x_test_tprefix_onehot,x_test_grade_onehot,x_test_cat_onehot,x_test_subcat_onehot)",CLUSTER_7,CLUSTER_8
x_train_num,scipy.sparse.hstack((csr_matrix(x_train_price_norm),CLUSTER_7,CLUSTER_8
x_val_num,scipy.sparse.hstack((csr_matrix(x_val_price_norm),CLUSTER_7,CLUSTER_8
x_test_num,scipy.sparse.hstack((csr_matrix(x_test_price_norm),CLUSTER_7,CLUSTER_8
final_tfidf_train,"scipy.sparse.hstack((tfidf_train,x_train_cat,x_train_num)",CLUSTER_7,CLUSTER_8
final_tfidf_val,"scipy.sparse.hstack((tfidf_valid,x_val_cat,x_val_num)",CLUSTER_7,CLUSTER_8
final_tfidf_test,"scipy.sparse.hstack((tfidf_test,x_test_cat,x_test_num)",CLUSTER_7,CLUSTER_8
train_set,"scipy.sparse.vstack((final_bow_train,final_bow_val)",CLUSTER_7,CLUSTER_8
train_set,"scipy.sparse.vstack((final_tfidf_train,final_tfidf_val)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(labels_train,train_predict)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(labels_test,test_predict)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(labels_train,train_predict)",CLUSTER_7,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(labels_test,test_predict)",CLUSTER_7,CLUSTER_8
"train_fpr,train_tpr,tr_thresholds","sklearn.metrics.roc_curve(labels_train,y_train_pred)",CLUSTER_7,CLUSTER_8
"test_fpr,test_tpr,te_thresholds","sklearn.metrics.roc_curve(labels_test,y_test_pred)",CLUSTER_7,CLUSTER_8
"train_fpr,train_tpr,tr_thresholds","sklearn.metrics.roc_curve(labels_train,y_train_pred)",CLUSTER_7,CLUSTER_8
"test_fpr,test_tpr,te_thresholds","sklearn.metrics.roc_curve(labels_test,y_test_pred)",CLUSTER_7,CLUSTER_8
bow_auc,"sklearn.metrics.auc(test_fpr,test_tpr)",CLUSTER_7,CLUSTER_8
tfidf_auc,"sklearn.metrics.auc(test_fpr,test_tpr)",CLUSTER_7,CLUSTER_8
bayes,sklearn.naive_bayes.MultinomialNB(alpha=k),CLUSTER_7,CLUSTER_8
bayes,sklearn.naive_bayes.MultinomialNB(alpha=bow_alpha_best),CLUSTER_7,CLUSTER_8
bayes,sklearn.naive_bayes.MultinomialNB(alpha=k),CLUSTER_7,CLUSTER_8
bayes,sklearn.naive_bayes.MultinomialNB(alpha=tfidf_alpha_best),CLUSTER_7,CLUSTER_8
normalizer,sklearn.preprocessing.Normalizer(),CLUSTER_7,CLUSTER_8
df,pandas.read_csv(filepath),CLUSTER_7,CLUSTER_3
legend,"matplotlib.pyplot.legend(handles[0:2],labels[0:2],title='Fear',loc=8)",CLUSTER_7,CLUSTER_3
bp,"seaborn.boxplot(x='Disgust',y='KillRating',hue='Fear',palette=[""

bp=seaborn.stripplot(x='Disgust',y='KillRating',hue='Fear',dodge=True,palette=[""
handles,labels=bp.get_legend_handles_labels()",CLUSTER_7,CLUSTER_3
bp,"seaborn.stripplot(x='Disgust',y='KillRating',hue='Fear',dodge=True,palette=[""
handles,labels=bp.get_legend_handles_labels()",CLUSTER_7,CLUSTER_3
"w,b,X,Y","numpy.array([[1],[2]])",CLUSTER_1,CLUSTER_9
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_1,CLUSTER_9
w,"numpy.zeros(shape=(dim,1)",CLUSTER_1,CLUSTER_9
Y_prediction,"numpy.zeros((1,m)",CLUSTER_1,CLUSTER_9
cost,numpy.squeeze(cost),CLUSTER_1,CLUSTER_9
costs,numpy.squeeze(d['costs']),CLUSTER_1,CLUSTER_9
legend,"matplotlib.pyplot.legend(loc='uppercenter',shadow=True)",CLUSTER_1,CLUSTER_9
x,"numpy.array([[1,2],[3,4.]])",CLUSTER_6,CLUSTER_6
df,pandas.read_csv('UIUCCourseCatalog.csv'),CLUSTER_8,CLUSTER_4
inp_full,"numpy.hstack((inp_norm,inp_norm**2*2,inp_norm**3*3,inp_norm**4*4)",CLUSTER_6,CLUSTER_3
test_full,"numpy.hstack((test_norm,test_norm**2*2,test_norm**3*3,test_norm**4*4)",CLUSTER_6,CLUSTER_3
data_array,"numpy.vstack((acc_train.values,exc_train.values[:13718])",CLUSTER_6,CLUSTER_3
test_array,"numpy.vstack((acc_test.values,exc_test.values[:6632])",CLUSTER_6,CLUSTER_3
acc_train,"pandas.read_csv('Pylon/accepted_train.csv',header=[0,1,2,3],index_col=0)",CLUSTER_6,CLUSTER_3
exc_train,"pandas.read_csv('Pylon/excluded_train.csv',header=[0,1,2,3],index_col=0)",CLUSTER_6,CLUSTER_3
acc_test,"pandas.read_csv('Pylon/accepted_test.csv',header=[0,1,2,3],index_col=0)",CLUSTER_6,CLUSTER_3
exc_test,"pandas.read_csv('Pylon/excluded_test.csv',header=[0,1,2,3],index_col=0)",CLUSTER_6,CLUSTER_3
dataset,"pandas.read_csv(""diabetes.csv"")",CLUSTER_5,CLUSTER_5
y_test,numpy.array(y_test),CLUSTER_5,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(df_x,df_y,test_size=0.4,random_state=4)",CLUSTER_5,CLUSTER_5
model,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
idxs,numpy.where((y_test!=cls),CLUSTER_3,CLUSTER_10
mean_feat,"numpy.mean(X_train_feats,axis=0,keepdims=True)",CLUSTER_3,CLUSTER_10
train_accuracy,numpy.mean(y_train==y_train_pred),CLUSTER_3,CLUSTER_10
val_accuracy,numpy.mean(y_val==y_val_pred),CLUSTER_3,CLUSTER_10
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_3,CLUSTER_10
std_feat,"numpy.std(X_train_feats,axis=0,keepdims=True)",CLUSTER_3,CLUSTER_10
X_train_feats,"numpy.hstack([X_train_feats,np.ones((X_train_feats.shape[0],1)",CLUSTER_3,CLUSTER_10
X_val_feats,"numpy.hstack([X_val_feats,np.ones((X_val_feats.shape[0],1)",CLUSTER_3,CLUSTER_10
X_test_feats,"numpy.hstack([X_test_feats,np.ones((X_test_feats.shape[0],1)",CLUSTER_3,CLUSTER_10
df,"pandas.concat([df_train,df_test],sort=False)",CLUSTER_1,CLUSTER_3
df_train,pandas.read_csv('./data/train.csv'),CLUSTER_1,CLUSTER_3
df_test,pandas.read_csv('./data/test.csv'),CLUSTER_1,CLUSTER_3
"_,axis","matplotlib.pyplot.subplots(
figsize=(10,10)",CLUSTER_1,CLUSTER_3
f,"re.sub(""[?
f=f.lower()",CLUSTER_10,CLUSTER_4
f,"re.sub(""[
f=f.lower()",CLUSTER_10,CLUSTER_4
year,"re.findall(pattern_year,htmltext)",CLUSTER_10,CLUSTER_4
names,"re.findall(pattern_name,htmltext)",CLUSTER_10,CLUSTER_4
pattern_year,re.compile(year_regex),CLUSTER_10,CLUSTER_4
pattern_name,re.compile(name_regex),CLUSTER_10,CLUSTER_4
mydict,collections.defaultdict(int),CLUSTER_10,CLUSTER_4
mydict,collections.defaultdict(list),CLUSTER_10,CLUSTER_4
word,random.choice(dict.get(word),CLUSTER_10,CLUSTER_4
XtX_inverse,pandas.DataFrame(np.linalg.pinv(XtX.values),CLUSTER_5,CLUSTER_1
one_hot_cut,pandas.get_dummies(data2['cut']),CLUSTER_5,CLUSTER_1
one_hot_color,pandas.get_dummies(data2['color']),CLUSTER_5,CLUSTER_1
one_hot_clarity,pandas.get_dummies(data2['clarity']),CLUSTER_5,CLUSTER_1
data2,"pandas.read_csv('diamonds.csv',index_col=0)",CLUSTER_5,CLUSTER_1
"train_n,test_n","sklearn.model_selection.train_test_split(data2,test_size=0.15)",CLUSTER_5,CLUSTER_1
means,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
scores,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
means,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
scores,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
means,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
scores,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
means,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
scores,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
means,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
scores,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
means,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
scores,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
means,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
scores,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
means,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
scores,"numpy.zeros((15,1000)",CLUSTER_6,CLUSTER_10
upper,"numpy.amax(means,axis=0)",CLUSTER_6,CLUSTER_10
upper,"numpy.amax(scores,axis=0)",CLUSTER_6,CLUSTER_10
lower,"numpy.amin(means,axis=0)",CLUSTER_6,CLUSTER_10
lower,"numpy.amin(scores,axis=0)",CLUSTER_6,CLUSTER_10
average,"numpy.mean(means,axis=0)",CLUSTER_6,CLUSTER_10
average,"numpy.mean(scores,axis=0)",CLUSTER_6,CLUSTER_10
error_bar,"numpy.std(means,axis=0)",CLUSTER_6,CLUSTER_10
error_bar,"numpy.std(scores,axis=0)",CLUSTER_6,CLUSTER_10
scores_window,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_6,CLUSTER_10
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_0
a,matplotlib.pyplot.plot(t['y'].tolist(),CLUSTER_4,CLUSTER_0
b,matplotlib.pyplot.plot(t['pred'].tolist(),CLUSTER_4,CLUSTER_0
pred,"numpy.argmax(pred,axis=1)",CLUSTER_4,CLUSTER_0
y_eval,"numpy.argmax(y_test,axis=1)",CLUSTER_4,CLUSTER_0
t,"pandas.DataFrame({'pred':pred,'y':y.flatten()",CLUSTER_4,CLUSTER_0
dummies,pandas.get_dummies(df[name]),CLUSTER_4,CLUSTER_0
dummies,pandas.get_dummies(df[target]),CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(path,header=None)",CLUSTER_4,CLUSTER_0
df,"pandas.read_csv(filename,encoding=ENCODING)",CLUSTER_4,CLUSTER_0
r,"requests.post(""https://api.heatonresearch.com/assignment-submit"",
headers={'x-api-key':key},json={'csv':base64.b64encode(data.to_csv(index=False)",CLUSTER_4,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_eval,pred)",CLUSTER_4,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(
x,y,test_size=0.25,random_state=42)",CLUSTER_4,CLUSTER_0
class_distribution,pandas.DataFrame(appended),CLUSTER_4,CLUSTER_0
data,"pandas.read_csv(""UrbanSound8K.csv"")",CLUSTER_4,CLUSTER_0
folds,"sub_dirs=numpy.array(['fold1','fold2','fold3','fold4',
'fold5','fold6','fold7','fold8',
'fold9','fold10'])",CLUSTER_4,CLUSTER_0
folds,"numpy.array(['fold1','fold2','fold3','fold4',
'fold5','fold6','fold7','fold8',
'fold9','fold10'])",CLUSTER_4,CLUSTER_0
segment_mfcc,numpy.asarray(segment_mfcc),CLUSTER_4,CLUSTER_0
features,"numpy.concatenate(train_data[""features""],axis=0)",CLUSTER_4,CLUSTER_0
labels,"numpy.concatenate(train_data[""labels""],axis=0)",CLUSTER_4,CLUSTER_0
x_train,"numpy.concatenate(x_train,axis=0)",CLUSTER_4,CLUSTER_0
y_train,"numpy.concatenate(y_train,axis=0)",CLUSTER_4,CLUSTER_0
avg_p,numpy.argmax(np.mean(model.predict(x),CLUSTER_4,CLUSTER_0
train_data,"numpy.load(""{0}/{1}.npz"".format(load_dir,folds[ind])",CLUSTER_4,CLUSTER_0
test_data,"numpy.load(""{0}/{1}.npz"".format(load_dir,
folds[test_index][0])",CLUSTER_4,CLUSTER_0
kf,sklearn.model_selection.KFold(n_splits=10),CLUSTER_4,CLUSTER_0
tweets_train,numpy.array(tweets[:990000]),CLUSTER_5,CLUSTER_10
tweets_test,numpy.array(tweets[990000:1100000]),CLUSTER_5,CLUSTER_10
Y_train,numpy.asarray(Y_train),CLUSTER_5,CLUSTER_10
Y_test,numpy.asarray(Y_test),CLUSTER_5,CLUSTER_10
df,"pandas.read_csv(""C:\\Users\\SS\\Downloads\\MDSCoursefiles\\Dataset\\FuelConsumptionCo2.csv"")",CLUSTER_5,CLUSTER_5
train_x,numpy.asanyarray(train[['ENGINESIZE']]),CLUSTER_5,CLUSTER_5
train_y,numpy.asanyarray(train[['CO2EMISSIONS']]),CLUSTER_5,CLUSTER_5
test_x,numpy.asanyarray(test[['ENGINESIZE']]),CLUSTER_5,CLUSTER_5
test_y,numpy.asanyarray(test[['CO2EMISSIONS']]),CLUSTER_5,CLUSTER_5
start,time.time(),CLUSTER_5,CLUSTER_5
end,time.time(),CLUSTER_5,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_5
Data,pandas.read_csv('C:/Users/muneeba/Desktop/THESIS/DataDistribution/Gaussian3/DataDistributionPCA.csv'),CLUSTER_5,CLUSTER_5
Data2,pandas.read_csv('C:/Users/muneeba/Desktop/THESIS/DataDistribution/Gaussian1/Gaussian1.csv'),CLUSTER_5,CLUSTER_5
angles,"numpy.repeat(angles[...,np.newaxis],n_radii,axis=1)",CLUSTER_5,CLUSTER_5
radii,"numpy.linspace(0.125,1.0,n_radii)",CLUSTER_5,CLUSTER_5
angles,"numpy.linspace(0,2*np.pi,n_angles,endpoint=False)",CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_5
cbar,"matplotlib.pyplot.colorbar(mesh,cax=axcb)",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(mesh,cax=axcb)",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(mesh,cax=axcb)",CLUSTER_4,CLUSTER_11
cb,matplotlib.pyplot.colorbar(orientation='horizontal'),CLUSTER_4,CLUSTER_11
CS,"matplotlib.pyplot.contour(SA_loc,CT_loc,dens,linestyles='dashed',colors='k')",CLUSTER_4,CLUSTER_11
CS,"matplotlib.pyplot.contour(si,ti,dens_1,linestyles='dashed',colors='k')",CLUSTER_4,CLUSTER_11
CS1,"matplotlib.pyplot.contour(si,ti,spic_1,linestyles='solid',colors='k')",CLUSTER_4,CLUSTER_11
CS,"matplotlib.pyplot.contour(si,ti,dens_1,linestyles='dashed',colors='k')",CLUSTER_4,CLUSTER_11
CS1,"matplotlib.pyplot.contour(si,ti,spic_1,linestyles='solid',colors='k')",CLUSTER_4,CLUSTER_11
CS,"matplotlib.pyplot.contour(si,ti,dens_1,linestyles='dashed',colors='k')",CLUSTER_4,CLUSTER_11
CS1,"matplotlib.pyplot.contour(si,ti,spic_1,linestyles='solid',colors='k')",CLUSTER_4,CLUSTER_11
fig1,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(5,6)",CLUSTER_4,CLUSTER_11
ax1,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
ax2,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_11
cmap,matplotlib.pyplot.get_cmap('Blues_r'),CLUSTER_4,CLUSTER_11
cmap,matplotlib.pyplot.get_cmap(cmo.cm.deep_r),CLUSTER_4,CLUSTER_11
cmap,matplotlib.pyplot.get_cmap(cmo.cm.haline_r),CLUSTER_4,CLUSTER_11
cmap,matplotlib.pyplot.get_cmap(cmo.cm.deep_r),CLUSTER_4,CLUSTER_11
cmap,matplotlib.pyplot.get_cmap(cmo.cm.thermal_r),CLUSTER_4,CLUSTER_11
cmap,matplotlib.pyplot.get_cmap(cmo.cm.deep_r),CLUSTER_4,CLUSTER_11
cmap,matplotlib.pyplot.get_cmap(cmo.cm.dense_r),CLUSTER_4,CLUSTER_11
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(12,8)",CLUSTER_4,CLUSTER_11
"fig1,ax","matplotlib.pyplot.subplots(1,1,figsize=(10,10)",CLUSTER_4,CLUSTER_11
"fig1,ax","matplotlib.pyplot.subplots(1,1,figsize=(10,10)",CLUSTER_4,CLUSTER_11
"fig1,ax","matplotlib.pyplot.subplots(1,1,figsize=(10,10)",CLUSTER_4,CLUSTER_11
"fig,(axl,axcb,axr)","matplotlib.pyplot.subplots(1,3,figsize=(16,8)",CLUSTER_4,CLUSTER_11
"fig,(axl,axcb,axr)","matplotlib.pyplot.subplots(1,3,figsize=(16,8)",CLUSTER_4,CLUSTER_11
"fig,(axl,axcb,axr)","matplotlib.pyplot.subplots(1,3,figsize=(16,8)",CLUSTER_4,CLUSTER_11
y_wcvi_slice,"numpy.arange(250,350)",CLUSTER_4,CLUSTER_11
x_wcvi_slice,"numpy.arange(550,650)",CLUSTER_4,CLUSTER_11
temp_july,"numpy.empty((31,50,Z.shape[0],Z.shape[1])",CLUSTER_4,CLUSTER_11
sal_july,"numpy.empty((31,50,Z.shape[0],Z.shape[1])",CLUSTER_4,CLUSTER_11
dens,"numpy.empty((SA_loc.shape[0],SA_loc.shape[0])",CLUSTER_4,CLUSTER_11
dens_1,"numpy.empty((ydim,xdim)",CLUSTER_4,CLUSTER_11
spic_1,"numpy.empty((ydim,xdim)",CLUSTER_4,CLUSTER_11
dens_1,"numpy.empty((ydim,xdim)",CLUSTER_4,CLUSTER_11
spic_1,"numpy.empty((ydim,xdim)",CLUSTER_4,CLUSTER_11
dens_1,"numpy.empty((ydim,xdim)",CLUSTER_4,CLUSTER_11
spic_1,"numpy.empty((ydim,xdim)",CLUSTER_4,CLUSTER_11
rho_loc,numpy.empty_like(sal_0),CLUSTER_4,CLUSTER_11
ti,"numpy.linspace(1,ydim-1,ydim)",CLUSTER_4,CLUSTER_11
si,"numpy.linspace(1,xdim-1,xdim)",CLUSTER_4,CLUSTER_11
ti,"numpy.linspace(1,ydim-1,ydim)",CLUSTER_4,CLUSTER_11
si,"numpy.linspace(1,xdim-1,xdim)",CLUSTER_4,CLUSTER_11
ti,"numpy.linspace(1,ydim-1,ydim)",CLUSTER_4,CLUSTER_11
si,"numpy.linspace(1,xdim-1,xdim)",CLUSTER_4,CLUSTER_11
"x,z","numpy.meshgrid(x_wcvi_slice,zlevels[:20])",CLUSTER_4,CLUSTER_11
"x,z","numpy.meshgrid(x_wcvi_slice,zlevels[:20])",CLUSTER_4,CLUSTER_11
"x,z","numpy.meshgrid(x_wcvi_slice,zlevels[:20])",CLUSTER_4,CLUSTER_11
sal_tzyx,"numpy.ma.masked_values(sal_0,0)",CLUSTER_4,CLUSTER_11
temp_tzyx,"numpy.ma.masked_values(temp_0,0)",CLUSTER_4,CLUSTER_11
temp_tzyx,"numpy.ma.masked_values(temp_0,0)",CLUSTER_4,CLUSTER_11
rho_tzyx,"numpy.ma.masked_values(rho_loc,0)",CLUSTER_4,CLUSTER_11
scalar_ts,"collections.namedtuple('scalar_ts','temp,sal')",CLUSTER_4,CLUSTER_11
xy,"numpy.array([[828.659973,833.450012,908100,828.349976,831.659973],
[823.02002,828.070007,1828100,821.655029,828.070007],
[819.929993,824.400024,1438100,818.97998,824.159973],
[816,820.958984,1008100,815.48999,819.23999],
[819.359985,823,1188100,818.469971,818.97998],
[819,823,1198100,816,820.450012],
[811.700012,815.25,1098100,809.780029,813.669983],
[809.51001,816.659973,1398100,804.539978,809.559998]])",CLUSTER_2,CLUSTER_7
X,numpy.arange(10),CLUSTER_3,CLUSTER_10
T,numpy.array([1]*5+[2]*5),CLUSTER_3,CLUSTER_10
confmat,"numpy.zeros((nc,nc)",CLUSTER_3,CLUSTER_10
denom,"numpy.sum(expY,axis=1)",CLUSTER_3,CLUSTER_10
"confmat[ri,ci]",numpy.sum(predictedThisClassAboveThreshold==classes[ci]),CLUSTER_3,CLUSTER_10
expY,numpy.exp(Y-mx),CLUSTER_3,CLUSTER_10
self.errorTrace,numpy.sqrt(scgresult['ftrace']),CLUSTER_3,CLUSTER_10
dW,"numpy.vstack((np.ones((1,delta.shape[0])",CLUSTER_3,CLUSTER_10
dV,"numpy.vstack((np.ones((1,delta.shape[0])",CLUSTER_3,CLUSTER_10
self.classes,numpy.unique(T),CLUSTER_3,CLUSTER_10
startTime,time.time(),CLUSTER_3,CLUSTER_10
self.trainingTime,time.time(),CLUSTER_3,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(3,3)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(3,3)",CLUSTER_6,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(3,3)",CLUSTER_6,CLUSTER_10
rho,"numpy.zeros([16,1])",CLUSTER_1,CLUSTER_3
S,"numpy.zeros([16,n_days])",CLUSTER_1,CLUSTER_3
E,"numpy.zeros([16,n_days])",CLUSTER_1,CLUSTER_3
Ic,"numpy.zeros([16,n_days])",CLUSTER_1,CLUSTER_3
Isc,"numpy.zeros([16,n_days])",CLUSTER_1,CLUSTER_3
R,"numpy.zeros([16,n_days])",CLUSTER_1,CLUSTER_3
epidemy,"pandas.DataFrame(epi_data,columns=['Susceptible','Exposed','Infected','Removed'])",CLUSTER_1,CLUSTER_3
age_strc,pandas.read_csv(age_data_url),CLUSTER_1,CLUSTER_3
Cmat,pandas.read_csv(interaction_file),CLUSTER_1,CLUSTER_3
testdata,numpy.load('test-dataset.npy'),CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(img,lbl,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_5
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(img,lbl,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_7,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_5
norm,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_5
norm,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_5
lb,sklearn.preprocessing.LabelBinarizer(),CLUSTER_7,CLUSTER_5
logisticRegr,"sklearn.linear_model.LogisticRegression(multi_class=""multinomial"",solver=""lbfgs"",C=10)",CLUSTER_7,CLUSTER_5
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(256,)",CLUSTER_7,CLUSTER_5
acc,sklearn.metrics.accuracy_score(sgd_clf.predict(x_test),CLUSTER_7,CLUSTER_5
acc,sklearn.metrics.accuracy_score(forest_clf.predict(x_test),CLUSTER_7,CLUSTER_5
acc,sklearn.metrics.accuracy_score(logisticRegr.predict(x_test),CLUSTER_7,CLUSTER_5
sgd_clf,sklearn.linear_model.SGDClassifier(random_state=42),CLUSTER_7,CLUSTER_5
forest_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_7,CLUSTER_5
cm,"sklearn.metrics.confusion_matrix(y_test,predictions)",CLUSTER_7,CLUSTER_5
DEGREES,"numpy.arange(0,10)",CLUSTER_5,CLUSTER_1
result,numpy.zeros([len(DEGREES),CLUSTER_5,CLUSTER_1
r2_train,numpy.zeros([len(DEGREES),CLUSTER_5,CLUSTER_1
r2_test,numpy.zeros([len(DEGREES),CLUSTER_5,CLUSTER_1
training_scores,"numpy.mean(train_scores,axis=1)",CLUSTER_5,CLUSTER_1
testing_scores,"numpy.mean(test_scores,axis=1)",CLUSTER_5,CLUSTER_1
r2_train_sorted,numpy.sort(r2_train),CLUSTER_5,CLUSTER_1
r2_test_sorted,numpy.sort(r2_test),CLUSTER_5,CLUSTER_1
train_scores_sorted,numpy.sort(training_scores),CLUSTER_5,CLUSTER_1
test_scores_sorted,numpy.sort(test_scores),CLUSTER_5,CLUSTER_1
y,numpy.sin(x),CLUSTER_5,CLUSTER_1
param_range,"numpy.logspace(-4,1,6)",CLUSTER_5,CLUSTER_1
param_range,"numpy.logspace(-4,1,6)",CLUSTER_5,CLUSTER_1
x,"numpy.linspace(0,10,n)",CLUSTER_5,CLUSTER_1
predict,"numpy.linspace(0,10,N_POINTS)",CLUSTER_5,CLUSTER_1
mush_df2,pandas.get_dummies(mush_df),CLUSTER_5,CLUSTER_1
mush_df,pandas.read_csv('mushrooms.csv'),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,random_state=0)",CLUSTER_5,CLUSTER_1
"X_train2,X_test2,y_train2,y_test2","sklearn.model_selection.train_test_split(X_mush,y_mush,random_state=0)",CLUSTER_5,CLUSTER_1
reg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
reg,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
ols,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
poly,sklearn.preprocessing.PolynomialFeatures(degree=deg),CLUSTER_5,CLUSTER_1
poly,sklearn.preprocessing.PolynomialFeatures(degree=deg),CLUSTER_5,CLUSTER_1
poly,sklearn.preprocessing.PolynomialFeatures(degree=DEGREE),CLUSTER_5,CLUSTER_1
linlasso,"sklearn.linear_model.Lasso(alpha=ALPHA,max_iter=MAX_ITER)",CLUSTER_5,CLUSTER_1
clf,sklearn.tree.DecisionTreeClassifier(random_state=0),CLUSTER_5,CLUSTER_1
clf,"sklearn.svm.SVC(kernel='rbf',C=1,random_state=0)",CLUSTER_5,CLUSTER_1
"train_scores,test_scores","sklearn.model_selection.validation_curve(clf,X_subset,y_subset,
param_name='gamma',
param_range=param_range,cv=3,scoring=""accuracy"")",CLUSTER_5,CLUSTER_1
image_types,os.listdir(basedir),CLUSTER_4,CLUSTER_0
image_types,os.listdir(basedir),CLUSTER_4,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,3)",CLUSTER_4,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,18)",CLUSTER_4,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,24)",CLUSTER_4,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,24)",CLUSTER_4,CLUSTER_0
nonzeroy,numpy.array(nonzero[0]),CLUSTER_4,CLUSTER_0
nonzerox,numpy.array(nonzero[1]),CLUSTER_4,CLUSTER_0
hist_features,"numpy.concatenate((channel1_hist[0],channel2_hist[0],channel3_hist[0])",CLUSTER_4,CLUSTER_0
heatmap,"numpy.zeros_like(img[:,:,0])",CLUSTER_4,CLUSTER_0
heatmap,"numpy.zeros_like(img[:,:,0])",CLUSTER_4,CLUSTER_0
hog_features,numpy.ravel(hog_features),CLUSTER_4,CLUSTER_0
y,numpy.hstack((np.ones(len(car_features),CLUSTER_4,CLUSTER_0
hog_features,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_4,CLUSTER_0
hog_features,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_4,CLUSTER_0
X,"numpy.vstack((car_features,notcar_features)",CLUSTER_4,CLUSTER_0
else:feature_image,numpy.copy(image),CLUSTER_4,CLUSTER_0
imcopy,numpy.copy(img),CLUSTER_4,CLUSTER_0
else:feature_image,numpy.copy(img),CLUSTER_4,CLUSTER_0
draw_img,numpy.copy(img),CLUSTER_4,CLUSTER_0
draw_img,numpy.copy(img),CLUSTER_4,CLUSTER_0
draw_img,numpy.copy(img),CLUSTER_4,CLUSTER_0
hog_features,"numpy.append(hog_features,get_hog_features(feature_image[:,:,channel],
orient,pix_per_cell,cell_per_block,
vis=False,feature_vec=True)",CLUSTER_4,CLUSTER_0
channel1_hist,"numpy.histogram(img[:,:,0],bins=nbins)",CLUSTER_4,CLUSTER_0
channel2_hist,"numpy.histogram(img[:,:,1],bins=nbins)",CLUSTER_4,CLUSTER_0
channel3_hist,"numpy.histogram(img[:,:,2],bins=nbins)",CLUSTER_4,CLUSTER_0
t,time.time(),CLUSTER_4,CLUSTER_0
t,time.time(),CLUSTER_4,CLUSTER_0
t1,time.time(),CLUSTER_4,CLUSTER_0
t,time.time(),CLUSTER_4,CLUSTER_0
svc,sklearn.svm.LinearSVC(),CLUSTER_4,CLUSTER_0
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
scaled_X,y,test_size=0.1,random_state=rand_state)",CLUSTER_4,CLUSTER_0
new_time,numpy.array(fin_mean),CLUSTER_11,CLUSTER_3
moon_coords2,numpy.array(moon_coords2),CLUSTER_11,CLUSTER_3
new_sky_RA,numpy.array(new_sky_RA),CLUSTER_11,CLUSTER_3
new_sky_DEC,numpy.array(new_sky_DEC),CLUSTER_11,CLUSTER_3
moon_RA,numpy.array(moon_RA),CLUSTER_11,CLUSTER_3
moon_DEC,numpy.array(moon_DEC),CLUSTER_11,CLUSTER_3
moon_phases_array,numpy.array(moon_phases),CLUSTER_11,CLUSTER_3
tot,numpy.mean(mean_per),CLUSTER_11,CLUSTER_3
sky_coords,"numpy.vstack((RA,DEC)",CLUSTER_11,CLUSTER_3
X_train,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\train_feature.csv"")",CLUSTER_5,CLUSTER_1
y_train,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\train_label.csv"")",CLUSTER_5,CLUSTER_1
X_val,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\validation_feature.csv"")",CLUSTER_5,CLUSTER_1
y_val,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\validation_label.csv"")",CLUSTER_5,CLUSTER_1
X_train,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\scaled_train_feature.csv"")",CLUSTER_5,CLUSTER_1
y_train,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\train_label.csv"")",CLUSTER_5,CLUSTER_1
X_val,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\scaled_validation_feature.csv"")",CLUSTER_5,CLUSTER_1
y_val,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\validation_label.csv"")",CLUSTER_5,CLUSTER_1
robust_dis_grouped,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\robust_dis_grouped.csv"")",CLUSTER_5,CLUSTER_1
robust_dis,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\robust_dis.csv"")",CLUSTER_5,CLUSTER_1
X_train,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\scaled_train_feature.csv"")",CLUSTER_5,CLUSTER_1
y_train,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\train_label.csv"")",CLUSTER_5,CLUSTER_1
X_val,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\scaled_validation_feature.csv"")",CLUSTER_5,CLUSTER_1
y_val,"pandas.read_csv(""C:\\Users\\yangshanqi\\Documents\\lab\\labgithubcopy\\task_1_version_2\\result\\validation_label.csv"")",CLUSTER_5,CLUSTER_1
"X_after_kMeans_trainin_set_selection,y_after_kMeans_trainin_set_selection,center","training_set_selection_miniBatch_kmeans(labels=y_train,kmeans=sklearn.cluster.MiniBatchKMeans(n_clusters=np.int((X_train.shape[0])",CLUSTER_5,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_11
a,matplotlib.pyplot.plot(t['y'].tolist(),CLUSTER_4,CLUSTER_11
b,matplotlib.pyplot.plot(t['pred'].tolist(),CLUSTER_4,CLUSTER_11
score,"numpy.sqrt(metrics.mean_squared_error(pred,y_test)",CLUSTER_4,CLUSTER_11
t,"pandas.DataFrame({'pred':pred,'y':y.flatten()",CLUSTER_4,CLUSTER_11
r,"pandas.DataFrame({'coef':coef,'positive':coef>=0},index=names)",CLUSTER_4,CLUSTER_11
submitDF,pandas.DataFrame({'name':names}),CLUSTER_4,CLUSTER_11
dummies,pandas.get_dummies(df[name]),CLUSTER_4,CLUSTER_11
dummies,pandas.get_dummies(df[target]),CLUSTER_4,CLUSTER_11
df,pandas.read_csv(filename_read),CLUSTER_4,CLUSTER_11
r,"requests.post(""https://api.heatonresearch.com/assignment-submit"",
headers={'x-api-key':key},json={'csv':base64.b64encode(data.to_csv(index=False)",CLUSTER_4,CLUSTER_11
regressor,"sklearn.linear_model.Lasso(random_state=0,alpha=0.1)",CLUSTER_4,CLUSTER_11
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(
x,y,test_size=0.25,random_state=45)",CLUSTER_4,CLUSTER_11
new_data,"pandas.DataFrame({'x':X_new[0],
'y':X_new[1],
'label':['PC1','PC2']})",CLUSTER_7,CLUSTER_8
skew_list_df,"pandas.concat([pd.DataFrame(nf,columns=['Features'])",CLUSTER_7,CLUSTER_8
data,"pandas.concat([abalone['Rings'],abalone['Height']],axis=1)",CLUSTER_7,CLUSTER_8
data,"pandas.concat([abalone['Rings'],abalone['Sex']],axis=1)",CLUSTER_7,CLUSTER_8
abalone['Rings'],"pandas.cut(abalone['Rings'],bins,labels=group_names)",CLUSTER_7,CLUSTER_8
abalone,pandas.get_dummies(abalone),CLUSTER_7,CLUSTER_8
data,"pandas.read_csv('abalone.data',names=['Sex','Length',
'Diameter','Height',
'Wholeweight','Shuckedweight',
'Visceraweight','Shellweight',
'Rings'])",CLUSTER_7,CLUSTER_8
abalone,pandas.read_csv('abalone.data'),CLUSTER_7,CLUSTER_8
cum_variance_explained,numpy.cumsum(variance_explained),CLUSTER_7,CLUSTER_8
projection_mat,"numpy.hstack((pairs[0][1].reshape(10,1)",CLUSTER_7,CLUSTER_8
cm,numpy.corrcoef(abalone[nf].values.T),CLUSTER_7,CLUSTER_8
corr_mat,numpy.corrcoef(X_std.T),CLUSTER_7,CLUSTER_8
"eigenvalues,eigenvectors",numpy.linalg.eig(corr_mat),CLUSTER_7,CLUSTER_8
fig,"seaborn.boxenplot(x='Sex',y=""Rings"",data=abalone)",CLUSTER_7,CLUSTER_8
hm,"seaborn.heatmap(cm,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10},yticklabels=nf.values,xticklabels=nf.values)",CLUSTER_7,CLUSTER_8
"entropy,","matplotlib.pyplot.plot(Ks,scores_1,'b',label='entropy')",CLUSTER_7,CLUSTER_8
"gini,","matplotlib.pyplot.plot(Ks,scores_2,'r',label='gini')",CLUSTER_7,CLUSTER_8
"uniform,","matplotlib.pyplot.plot(Ks,scores,'b')",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_7,CLUSTER_8
skew_list,scipy.stats.skew(abalone[nf]),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_7,CLUSTER_8
LinearReg,sklearn.model_selection.GridSearchCV(LinearRegression(),CLUSTER_7,CLUSTER_8
Kneighbours,sklearn.model_selection.GridSearchCV(KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
kmeans,"sklearn.cluster.KMeans(n_clusters=3,random_state=0)",CLUSTER_7,CLUSTER_8
X_std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
tree_classifier_1,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=i+1)",CLUSTER_7,CLUSTER_8
tree_classifier_2,"sklearn.tree.DecisionTreeClassifier(criterion='gini',max_depth=i+1)",CLUSTER_7,CLUSTER_8
exact,"scipy.integrate.dblquad(f,a2,b2,lambdax:a1,lambdax:b1)",CLUSTER_1,CLUSTER_9
exact,"scipy.integrate.dblquad(f,a2,b2,lambdax:a1,lambdax:b1)",CLUSTER_1,CLUSTER_9
df,pandas.read_csv('../datasets/google_books_1299.csv'),CLUSTER_5,CLUSTER_1
df,pandas.read_json('../datasets/formated_books.json'),CLUSTER_5,CLUSTER_1
order,numpy.argsort(distances),CLUSTER_5,CLUSTER_1
"x,y","numpy.split(transformed,2,axis=1)",CLUSTER_5,CLUSTER_1
"x,y,z","numpy.split(transformed,3,axis=1)",CLUSTER_5,CLUSTER_1
"x,y","numpy.split(transformed,2,axis=1)",CLUSTER_5,CLUSTER_1
"x,y,z","numpy.split(transformed,3,axis=1)",CLUSTER_5,CLUSTER_1
"x,y","numpy.split(transformed,2,axis=1)",CLUSTER_5,CLUSTER_1
"x,y,z","numpy.split(transformed,3,axis=1)",CLUSTER_5,CLUSTER_1
"x,y","numpy.split(transformed,2,axis=1)",CLUSTER_5,CLUSTER_1
"x,y,z","numpy.split(transformed,3,axis=1)",CLUSTER_5,CLUSTER_1
"x,y","numpy.split(transformed,2,axis=1)",CLUSTER_5,CLUSTER_1
"x,y,z","numpy.split(transformed,3,axis=1)",CLUSTER_5,CLUSTER_1
head,numpy.unique(''.join(head),CLUSTER_5,CLUSTER_1
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_5,CLUSTER_1
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_5,CLUSTER_1
transformed,"sklearn.manifold.TSNE(
n_components=2,
perplexity=len(np.unique(df[""generes""])",CLUSTER_5,CLUSTER_1
transformed,"sklearn.manifold.TSNE(
n_components=3,
perplexity=len(np.unique(df[""generes""])",CLUSTER_5,CLUSTER_1
transformed,"sklearn.manifold.TSNE(
n_components=2,
perplexity=len(np.unique(df[""distances""])",CLUSTER_5,CLUSTER_1
transformed,"sklearn.manifold.TSNE(
n_components=3,
perplexity=20,
)",CLUSTER_5,CLUSTER_1
beta,"numpy.array([1,0.1,10])",CLUSTER_8,CLUSTER_3
arparams,"numpy.array([.75,-.25])",CLUSTER_8,CLUSTER_3
maparams,"numpy.array([.65,.35])",CLUSTER_8,CLUSTER_3
y,"numpy.dot(X,beta)",CLUSTER_8,CLUSTER_3
y_true,"numpy.dot(X,beta)",CLUSTER_8,CLUSTER_3
x,"numpy.linspace(0,10,100)",CLUSTER_8,CLUSTER_3
x,"numpy.linspace(0,20,nsample)",CLUSTER_8,CLUSTER_3
X,"numpy.column_stack((x,x**2)",CLUSTER_8,CLUSTER_3
X,"numpy.column_stack((x,np.sin(x)",CLUSTER_8,CLUSTER_3
y,"pandas.Series(y,index=dates)",CLUSTER_8,CLUSTER_3
ix,numpy.arange(epochs),CLUSTER_6,CLUSTER_11
Y,"numpy.zeros((n_examples,len(labels)",CLUSTER_6,CLUSTER_11
loss,"numpy.zeros([epochs,1])",CLUSTER_6,CLUSTER_11
ix_tmp,numpy.where(y==labels[ix_label]),CLUSTER_6,CLUSTER_11
y_tmp,"numpy.argmax(Y_hat,axis=1)",CLUSTER_6,CLUSTER_11
acc,numpy.mean(1*(y_hat==y),CLUSTER_6,CLUSTER_11
epsilon,numpy.sqrt(2.0/(size_layer*size_next_layer),CLUSTER_6,CLUSTER_11
labels,numpy.unique(y),CLUSTER_6,CLUSTER_11
tic,time.time(),CLUSTER_6,CLUSTER_11
player_df,pandas.DataFrame(),CLUSTER_7,CLUSTER_5
player_df,pandas.DataFrame(),CLUSTER_7,CLUSTER_5
new_df,pandas.DataFrame(),CLUSTER_7,CLUSTER_5
current_datetime,pandas.Timestamp('today'),CLUSTER_7,CLUSTER_5
file_df,"pandas.read_csv(os.path.join(path,file)",CLUSTER_7,CLUSTER_5
file_df,"pandas.read_csv(os.path.join(path,file)",CLUSTER_7,CLUSTER_5
player_df['date'],"pandas.to_datetime(player_df['date'],unit='s')",CLUSTER_7,CLUSTER_5
player_df['date'],"pandas.to_datetime(player_df['date'],unit='s')",CLUSTER_7,CLUSTER_5
files,os.listdir(path),CLUSTER_7,CLUSTER_5
files,os.listdir(path),CLUSTER_7,CLUSTER_5
reg,sklearn.linear_model.LinearRegression(normalize=True),CLUSTER_7,CLUSTER_5
reg,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,verbose=True,n_jobs=-1)",CLUSTER_7,CLUSTER_5
reg,"sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(3,3,3)",CLUSTER_7,CLUSTER_5
df_personal,pandas.read_csv(f'../data/results/df_results.csv'),CLUSTER_8,CLUSTER_4
country,"re.sub(r'','',country)",CLUSTER_8,CLUSTER_4
df,pandas.read_csv('datasets/veteran.csv'),CLUSTER_7,CLUSTER_3
human_files,"numpy.array(glob(""/data/lfw/*/*"")",CLUSTER_6,CLUSTER_11
dog_files,"numpy.array(glob(""/data/dog_images/*/*/*"")",CLUSTER_6,CLUSTER_11
correct+,numpy.sum(np.squeeze(pred.eq(target.data.view_as(pred),CLUSTER_6,CLUSTER_11
project1,"pandas.read_csv(""NMIS.csv"")",CLUSTER_8,CLUSTER_4
pred_proba_df_ec,pandas.DataFrame(y_probas_test_EC),CLUSTER_0,CLUSTER_5
pred_proba_df_lr,pandas.DataFrame(y_probas_test_LR),CLUSTER_0,CLUSTER_5
pred_proba_df_nb,pandas.DataFrame(y_probas_test_NB),CLUSTER_0,CLUSTER_5
pred_proba_df_et,pandas.DataFrame(y_probas_test_ET),CLUSTER_0,CLUSTER_5
pred_proba_df_ec,pandas.DataFrame(y_probas_test_EC),CLUSTER_0,CLUSTER_5
true_pos,"pandas.DataFrame(confusion_matrix(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
false_pos,"pandas.DataFrame(confusion_matrix(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
prob_results_ec,pandas.DataFrame(threshold_list),CLUSTER_0,CLUSTER_5
true_pos,"pandas.DataFrame(confusion_matrix(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
false_pos,"pandas.DataFrame(confusion_matrix(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
prob_results_lr,pandas.DataFrame(threshold_list),CLUSTER_0,CLUSTER_5
true_pos,"pandas.DataFrame(confusion_matrix(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
false_pos,"pandas.DataFrame(confusion_matrix(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
prob_results_nb,pandas.DataFrame(threshold_list),CLUSTER_0,CLUSTER_5
true_pos,"pandas.DataFrame(confusion_matrix(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
false_pos,"pandas.DataFrame(confusion_matrix(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
prob_results_et,pandas.DataFrame(threshold_list),CLUSTER_0,CLUSTER_5
raw,"pandas.read_csv(r'train_preprocessed.csv',skiprows=lambdai:i>0andrandom.random()",CLUSTER_0,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,
test_size=0.2,
random_state=0)",CLUSTER_0,CLUSTER_5
LR_classifier,"sklearn.linear_model.LogisticRegression(solver='lbfgs',multi_class='multinomial',random_state=42,max_iter=4000,verbose=1)",CLUSTER_0,CLUSTER_5
acc_score,"sklearn.metrics.accuracy_score(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
acc_score,"sklearn.metrics.accuracy_score(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
acc_score,"sklearn.metrics.accuracy_score(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
acc_score,"sklearn.metrics.accuracy_score(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
precscore,"sklearn.metrics.precision_score(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
precscore,"sklearn.metrics.precision_score(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
precscore,"sklearn.metrics.precision_score(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
precscore,"sklearn.metrics.precision_score(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
recscore,"sklearn.metrics.recall_score(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
recscore,"sklearn.metrics.recall_score(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
recscore,"sklearn.metrics.recall_score(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
recscore,"sklearn.metrics.recall_score(new_y_true,new_y_preds)",CLUSTER_0,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(20,12)",CLUSTER_0,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(20,12)",CLUSTER_0,CLUSTER_5
BNB_classifier,sklearn.naive_bayes.BernoulliNB(),CLUSTER_0,CLUSTER_5
MNB_classifier,sklearn.naive_bayes.MultinomialNB(),CLUSTER_0,CLUSTER_5
MLP_classifier,"sklearn.neural_network.MLPClassifier(solver='lbfgs',alpha=1e-4,hidden_layer_sizes=(20,10,2)",CLUSTER_0,CLUSTER_5
ET_classifier,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=200,random_state=420,verbose=2,max_features=.05)",CLUSTER_0,CLUSTER_5
eclf1,"sklearn.ensemble.VotingClassifier(estimators=[('lr',LR_classifier)",CLUSTER_0,CLUSTER_5
timestr,"time.strftime(""%Y%m%d-%H%M%S"")",CLUSTER_5,CLUSTER_9
predictions,"pandas.DataFrame(predict_probabilities,columns=columns)",CLUSTER_5,CLUSTER_9
results,"pandas.Series(data=scores,index=arg_values)",CLUSTER_5,CLUSTER_9
X,"pandas.read_csv(""../../data/train.csv"")",CLUSTER_5,CLUSTER_9
X_predict,"pandas.read_csv(""../../data/test.csv"")",CLUSTER_5,CLUSTER_9
X,"pandas.read_csv(""../../data/train.csv"")",CLUSTER_5,CLUSTER_9
predictions,numpy.concatenate(results),CLUSTER_5,CLUSTER_9
X['PdDistrictNum'],sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_9
X['Holiday'],sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_9
labels,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_9
labels,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_9
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=1000,max_depth=None,min_samples_split=30,min_samples_leaf=10,n_jobs=-1)",CLUSTER_5,CLUSTER_9
pipe,"sklearn.pipeline.Pipeline([(""BFE"",BasicFeatures()",CLUSTER_5,CLUSTER_9
self.pca,"sklearn.decomposition.PCA(n_components=self.n_components,whiten=self.whiten)",CLUSTER_5,CLUSTER_9
self.std_scalar,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_9
fin_comment,"re.sub('Ã¨','è',fin_comment)",CLUSTER_0,CLUSTER_8
fin_comment,"re.sub('Ã©','é',fin_comment)",CLUSTER_0,CLUSTER_8
fin_comment,"re.sub('Ã¬','ì',fin_comment)",CLUSTER_0,CLUSTER_8
fin_comment,"re.sub('Ã²','ò',fin_comment)",CLUSTER_0,CLUSTER_8
fin_comment,"re.sub('Ã¹','ù',fin_comment)",CLUSTER_0,CLUSTER_8
fin_comment,"re.sub('Ã','à',fin_comment)",CLUSTER_0,CLUSTER_8
comment,"re.sub(r'\?{2,}','MULTI_QMARK',comment)",CLUSTER_0,CLUSTER_8
comment,"re.sub(r'\?','QMARK',comment)",CLUSTER_0,CLUSTER_8
comment,"re.sub(r'\!{2,}','MULTI_EMARK',comment)",CLUSTER_0,CLUSTER_8
comment,"re.sub(r'\!','EMARK',comment)",CLUSTER_0,CLUSTER_8
svm_clf,"sklearn.svm.SVC(kernel='linear',decision_function_shape='ovr',verbose=2,random_state=42)",CLUSTER_0,CLUSTER_8
svm_clf_fs,"sklearn.svm.SVC(kernel='linear',decision_function_shape='ovr',verbose=2,random_state=42)",CLUSTER_0,CLUSTER_8
svm_clf_snt,"sklearn.svm.SVC(kernel='linear',decision_function_shape='ovr',verbose=2,random_state=42)",CLUSTER_0,CLUSTER_8
svm_clf_fs_snt,"sklearn.svm.SVC(kernel='linear',decision_function_shape='ovr',verbose=2,random_state=42)",CLUSTER_0,CLUSTER_8
svm_clf_4l,"sklearn.svm.SVC(kernel='linear',decision_function_shape='ovr',verbose=2,random_state=42)",CLUSTER_0,CLUSTER_8
svm_clf_fs_4l,"sklearn.svm.SVC(kernel='linear',decision_function_shape='ovr',verbose=2,random_state=42)",CLUSTER_0,CLUSTER_8
svmclf,"sklearn.svm.SVC(kernel='linear',decision_function_shape='ovr',verbose=2,random_state=42)",CLUSTER_0,CLUSTER_8
logreg_clf,"sklearn.linear_model.LogisticRegression(penalty='l1',random_state=42)",CLUSTER_0,CLUSTER_8
logreg_clf_fs,"sklearn.linear_model.LogisticRegression(penalty='l2',random_state=42)",CLUSTER_0,CLUSTER_8
logreg,"sklearn.linear_model.LogisticRegression(multi_class='ovr',verbose=2,random_state=42)",CLUSTER_0,CLUSTER_8
naibay,sklearn.naive_bayes.GaussianNB(),CLUSTER_0,CLUSTER_8
rndfst,"sklearn.ensemble.RandomForestClassifier(random_state=42,n_jobs=-1,oob_score=True)",CLUSTER_0,CLUSTER_8
self.combined,pandas.Series(),CLUSTER_0,CLUSTER_8
combined,pandas.Series(),CLUSTER_0,CLUSTER_8
original_dataset,pandas.read_csv('dataset.csv'),CLUSTER_0,CLUSTER_8
original_dataset,pandas.read_csv('dataset.csv'),CLUSTER_0,CLUSTER_8
new_unlabeled_dataset,pandas.read_csv('unlabeled/unlabeled_comments.csv'),CLUSTER_0,CLUSTER_8
train_y,numpy.empty([len(train_concat),CLUSTER_0,CLUSTER_8
valid_y,numpy.empty([len(valid_concat),CLUSTER_0,CLUSTER_8
train_y_logreg,numpy.empty([len(train_concat_logreg),CLUSTER_0,CLUSTER_8
valid_y_logreg,numpy.empty([len(valid_concat_logreg),CLUSTER_0,CLUSTER_8
"train_dataset_X,test_dataset_X,train_dataset_y,test_dataset_y","sklearn.model_selection.train_test_split(dataset[['TESTO','(TestoCitato)",CLUSTER_0,CLUSTER_8
"train_dataset_X,valid_dataset_X,train_dataset_y,valid_dataset_y","sklearn.model_selection.train_test_split(train_dataset_X,train_dataset_y,test_size=0.2,stratify=train_dataset_y,shuffle=True,random_state=52)",CLUSTER_0,CLUSTER_8
"train_dataset_X_logreg,test_dataset_X_logreg,train_dataset_y_logreg,test_dataset_y_logreg","sklearn.model_selection.train_test_split(dataset_logreg[['TESTO','(TestoCitato)",CLUSTER_0,CLUSTER_8
"train_dataset_X_logreg,valid_dataset_X_logreg,train_dataset_y_logreg,valid_dataset_y_logreg","sklearn.model_selection.train_test_split(train_dataset_X_logreg,train_dataset_y_logreg,test_size=0.2,stratify=train_dataset_y_logreg,shuffle=True,random_state=52)",CLUSTER_0,CLUSTER_8
"train_dataset_X_bpef,test_dataset_X_bpef,train_dataset_y_bpef,test_dataset_y_bpef","sklearn.model_selection.train_test_split(dataset_bpef[['TESTO','(TestoCitato)",CLUSTER_0,CLUSTER_8
"train_dataset_X_bpef,valid_dataset_X_bpef,train_dataset_y_bpef,valid_dataset_y_bpef","sklearn.model_selection.train_test_split(train_dataset_X_bpef,train_dataset_y_bpef,test_size=0.2,stratify=train_dataset_y_bpef,shuffle=True,random_state=52)",CLUSTER_0,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(valid_y,pred_y,labels=[0,1])",CLUSTER_0,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(valid_y_fs,pred_y_fs,labels=[0,1])",CLUSTER_0,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(valid_y_logreg,pred_y_logreg,labels=[0,1])",CLUSTER_0,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(valid_y_logreg_fs,pred_y_logreg_fs,labels=[0,1])",CLUSTER_0,CLUSTER_8
cm_snt,"sklearn.metrics.confusion_matrix(valid_y_snt,pred_y_snt,labels=[1,2,3])",CLUSTER_0,CLUSTER_8
cm_fs_snt,"sklearn.metrics.confusion_matrix(valid_y_fs_snt,pred_y_fs_snt,labels=[1,2,3])",CLUSTER_0,CLUSTER_8
cm_all,"sklearn.metrics.confusion_matrix(valid_y_4l,pred_y_4l,labels=[0,1,2,3])",CLUSTER_0,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(valid_y_fs_4l,pred_y_fs_4l,labels=[0,1,2,3])",CLUSTER_0,CLUSTER_8
cm_fs_bpef_nofs,"sklearn.metrics.confusion_matrix(valid_y_bpef,pred_nofs,labels=[1,2,3])",CLUSTER_0,CLUSTER_8
cm_fs_bpef,"sklearn.metrics.confusion_matrix(valid_y_bpef,pred,labels=[1,2,3])",CLUSTER_0,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(valid_true,pred_cas_svm_ir,labels=[0,1,2,3])",CLUSTER_0,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(valid_true,pred_cas_bpef_ir,labels=[0,1,2,3])",CLUSTER_0,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(test_true,test_pred_cas_svm_ir,labels=[0,1,2,3])",CLUSTER_0,CLUSTER_8
cm,"sklearn.metrics.confusion_matrix(test_true,test_pred_cas_bpef_ir,labels=[0,1,2,3])",CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(svm_clf,tuned_parameters,cv=skf,n_jobs=-1,scoring=score,verbose=2)",CLUSTER_0,CLUSTER_8
clf_fs,"sklearn.model_selection.GridSearchCV(svm_clf_fs,tuned_parameters,cv=skf,n_jobs=-1,scoring=score,verbose=2)",CLUSTER_0,CLUSTER_8
clf_logreg,"sklearn.model_selection.GridSearchCV(logreg_clf,tuned_parameters,cv=skf,n_jobs=-1,scoring=score,verbose=2)",CLUSTER_0,CLUSTER_8
clf_logreg_fs,"sklearn.model_selection.GridSearchCV(logreg_clf_fs,tuned_parameters,cv=skf,n_jobs=-1,scoring=score,verbose=2)",CLUSTER_0,CLUSTER_8
clf_snt,"sklearn.model_selection.GridSearchCV(svm_clf_snt,tuned_parameters,cv=skf,n_jobs=-1,scoring=score,verbose=2)",CLUSTER_0,CLUSTER_8
clf_fs_snt,"sklearn.model_selection.GridSearchCV(svm_clf_fs,tuned_parameters,cv=skf,n_jobs=-1,scoring=score,verbose=2)",CLUSTER_0,CLUSTER_8
clf_4l,"sklearn.model_selection.GridSearchCV(svm_clf_4l,tuned_parameters,cv=skf,n_jobs=-1,scoring=score,verbose=2)",CLUSTER_0,CLUSTER_8
clf_fs_4l,"sklearn.model_selection.GridSearchCV(svm_clf_fs_4l,tuned_parameters,cv=skf,n_jobs=-1,scoring=score,verbose=2)",CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(svmclf,tuned_parameters,cv=skf,n_jobs=-1,scoring='f1_macro',verbose=2)",CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(logreg,tuned_parameters,cv=skf,n_jobs=-1,scoring='f1_macro',verbose=2)",CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(naibay,tuned_parameters,cv=skf,n_jobs=-1,scoring='f1_macro',verbose=2)",CLUSTER_0,CLUSTER_8
clf,"sklearn.model_selection.GridSearchCV(rndfst,tuned_parameters,cv=skf,n_jobs=-1,scoring='f1_macro',verbose=2)",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_0,CLUSTER_8
skf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=42,shuffle=False)",CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_0,CLUSTER_8
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,5)",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm,annot=True,xticklabels=['irrelevant','relevant'],yticklabels=['irrelevant','relevant'],fmt=""d"")",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm,annot=True,xticklabels=['irrelevant','relevant'],yticklabels=['irrelevant','relevant'],fmt=""d"")",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm,annot=True,xticklabels=['irrelevant','relevant'],yticklabels=['irrelevant','relevant'],fmt=""d"")",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm,annot=True,xticklabels=['irrelevant','relevant'],yticklabels=['irrelevant','relevant'],fmt=""d"")",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm_snt,annot=True,xticklabels=['positive','neutral','negative'],yticklabels=['positive','neutral','negative'])",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm_fs_snt,annot=True,xticklabels=['positive','neutral','negative'],yticklabels=['positive','neutral','negative'])",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm_all,annot=True,xticklabels=['irrelevant','positive','neutral','negative'],yticklabels=['irrelevant','positive','neutral','negative'],fmt=""d"")",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm,annot=True,xticklabels=['irrelevant','positive','neutral','negative'],yticklabels=['irrelevant','positive','neutral','negative'],fmt=""d"")",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm_fs_bpef_nofs,annot=True,xticklabels=['positive','neutral','negative'],yticklabels=['positive','neutral','negative'])",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm_fs_bpef,annot=True,xticklabels=['positive','neutral','negative'],yticklabels=['positive','neutral','negative'])",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm,annot=True,xticklabels=['irrelevant','positive','neutral','negative'],yticklabels=['irrelevant','positive','neutral','negative'],fmt=""d"")",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm,annot=True,xticklabels=['irrelevant','positive','neutral','negative'],yticklabels=['irrelevant','positive','neutral','negative'],fmt=""d"")",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm,annot=True,xticklabels=['irrelevant','positive','neutral','negative'],yticklabels=['irrelevant','positive','neutral','negative'],fmt=""d"")",CLUSTER_0,CLUSTER_8
ax,"seaborn.heatmap(cm,annot=True,xticklabels=['irrelevant','positive','neutral','negative'],yticklabels=['irrelevant','positive','neutral','negative'],fmt=""d"")",CLUSTER_0,CLUSTER_8
reviews,"pandas.read_csv('NIH_PLOS_articles_kidney_disease.csv',header=None,na_values='NaN',encoding='unicode_escape')",CLUSTER_5,CLUSTER_5
review_sentiment,sklearn.naive_bayes.MultinomialNB(),CLUSTER_5,CLUSTER_5
x,numpy.arange(kclusters+1),CLUSTER_9,CLUSTER_2
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
GC_onehot,"pandas.get_dummies(Gold_Coast_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
dfs,pandas.read_html(url),CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=K,random_state=0)",CLUSTER_9,CLUSTER_2
km,"sklearn.cluster.KMeans(n_clusters=i,random_state=0)",CLUSTER_9,CLUSTER_2
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_9,CLUSTER_2
silhouette,"sklearn.metrics.silhouette_score(X_scaled,preds)",CLUSTER_9,CLUSTER_2
start,time.time(),CLUSTER_3,CLUSTER_6
pts,"numpy.array([[-1,1],[-1,-1],[1,-1]])",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-2,2)",CLUSTER_1,CLUSTER_10
y,"numpy.linspace(-2,2)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(-1.5,1)",CLUSTER_1,CLUSTER_10
"X,Y","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_10
"X,Y","numpy.meshgrid(x,x)",CLUSTER_1,CLUSTER_10
y,numpy.sin(2*np.pi*(x-0.01*i),CLUSTER_12,CLUSTER_10
y,numpy.sin(2*np.pi*(x-0.01*i),CLUSTER_12,CLUSTER_10
x,"numpy.linspace(0,2,1000)",CLUSTER_12,CLUSTER_10
x,"numpy.linspace(0,2,1000)",CLUSTER_12,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_12,CLUSTER_10
ax,matplotlib.pyplot.gca(),CLUSTER_12,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(
figsize=(LOGO_NUM_BLOCK_W*scale,LOGO_NUM_BLOCK_H*scale)",CLUSTER_12,CLUSTER_10
zeroDF,pandas.DataFrame(data=zeroDat),CLUSTER_7,CLUSTER_11
resultAndTargetTempDF,"pandas.concat([resultDf,targetDf],axis=1)",CLUSTER_7,CLUSTER_11
masterDF,"pandas.concat(tmpResults,axis=0)",CLUSTER_7,CLUSTER_11
errorMasterDF,"pandas.concat(tmpErrors,axis=0)",CLUSTER_7,CLUSTER_11
likertMasterDF,"pandas.concat(tmpLikerts,axis=0)",CLUSTER_7,CLUSTER_11
x,"pandas.concat([x,y])",CLUSTER_7,CLUSTER_11
errors,"pandas.concat([zeroDF,errors],sort=False)",CLUSTER_7,CLUSTER_11
taskErrorStdDF,"pandas.concat([y,z['errorstd']],axis=1,sort=True)",CLUSTER_7,CLUSTER_11
targetDf,"pandas.read_csv(targetGroupPath+task+""/""+os.listdir(targetGroupPath+task)",CLUSTER_7,CLUSTER_11
index,numpy.arange(len(offset_means1),CLUSTER_7,CLUSTER_11
index,numpy.arange(len(offsetX_means1),CLUSTER_7,CLUSTER_11
index,numpy.arange(len(offsetY_means1),CLUSTER_7,CLUSTER_11
index,numpy.arange(len(holdtime_means1),CLUSTER_7,CLUSTER_11
index,numpy.arange(len(flighttime_means1),CLUSTER_7,CLUSTER_11
index,numpy.arange(len(area_means1),CLUSTER_7,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_11
pidList,os.listdir(path),CLUSTER_7,CLUSTER_11
taskGroupList,os.listdir(taskGroupPath),CLUSTER_7,CLUSTER_11
ax,"seaborn.barplot(x=""task"",y=""errors"",data=errors)",CLUSTER_7,CLUSTER_11
ax,"seaborn.barplot(x=""task"",y=""offset_error"",data=masterDFList[1])",CLUSTER_7,CLUSTER_11
ax,"seaborn.barplot(x=""task"",y=""ftime_error"",data=masterDFList[1])",CLUSTER_7,CLUSTER_11
ax,"seaborn.barplot(x=""task"",y=""htime_error"",data=masterDFList[1])",CLUSTER_7,CLUSTER_11
ax,"seaborn.barplot(x=""task"",y=""area_error"",data=masterDFList[1])",CLUSTER_7,CLUSTER_11
pl1,"seaborn.distplot(x,label='Default')",CLUSTER_7,CLUSTER_11
pl2,"seaborn.distplot(y,label='Long')",CLUSTER_7,CLUSTER_11
pl1,"seaborn.distplot(x,label='Default')",CLUSTER_7,CLUSTER_11
pl2,"seaborn.distplot(y,label='Long')",CLUSTER_7,CLUSTER_11
pl1,"seaborn.distplot(x,label='Default')",CLUSTER_7,CLUSTER_11
pl2,"seaborn.distplot(y,label='Long')",CLUSTER_7,CLUSTER_11
pl1,"seaborn.distplot(x,label='Default')",CLUSTER_7,CLUSTER_11
pl2,"seaborn.distplot(y,label='Long')",CLUSTER_7,CLUSTER_11
pl1,"seaborn.distplot(default,label='Default')",CLUSTER_7,CLUSTER_11
pl2,"seaborn.distplot(big,label='Big')",CLUSTER_7,CLUSTER_11
pl3,"seaborn.distplot(default,label='Default')",CLUSTER_7,CLUSTER_11
pl4,"seaborn.distplot(big,label='Big')",CLUSTER_7,CLUSTER_11
pl1,seaborn.distplot(x),CLUSTER_7,CLUSTER_11
pl1,seaborn.distplot(x),CLUSTER_7,CLUSTER_11
pl1,"seaborn.distplot(x,label='Nodoubleletters',kde=True)",CLUSTER_7,CLUSTER_11
pl1,"seaborn.distplot(y,label='Seconddoubleletters',kde=True)",CLUSTER_7,CLUSTER_11
pl1,seaborn.distplot(default),CLUSTER_7,CLUSTER_11
pl1,"seaborn.distplot(x,label='Rightside',kde=True)",CLUSTER_7,CLUSTER_11
pl1,"seaborn.distplot(y,label='Leftside',kde=True)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsBottom1['offsetX'],offsetsBottom1['offsetY'],cmap=""Reds"",shade=True,bw=3)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsBottom2['offsetX'],offsetsBottom2['offsetY'],cmap=""Greens"",shade=True,bw=3)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsTop1['offsetX'],offsetsTop1['offsetY'],cmap=""Reds"",shade=True,bw=3)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsTop2['offsetX'],offsetsTop2['offsetY'],cmap=""Greens"",shade=True,bw=3)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsLeft1['offsetX'],offsetsLeft1['offsetY'],cmap=""Reds"",shade=True,bw=3)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsLeft2['offsetX'],offsetsLeft2['offsetY'],cmap=""Greens"",shade=True,bw=3)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsTop1['offsetX'],offsetsTop1['offsetY'],cmap=""Reds"",label='Bottom',shade=False,bw=7,shade_lowest=False,antialiased=True)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsBottom1['offsetX'],offsetsBottom1['offsetY'],cmap=""Blues"",label='Right',shade=False,bw=7,shade_lowest=False,antialiased=True)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsLeft1['offsetX'],offsetsLeft1['offsetY'],cmap=""Purples"",label='Center',shade=False,bw=7,shade_lowest=False,antialiased=True)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsRigtht1['offsetX'],offsetsRigtht1['offsetY'],cmap=""Oranges"",label='Top',shade=False,bw=7,shade_lowest=False,antialiased=True)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsCenter1['offsetX'],offsetsCenter1['offsetY'],cmap=""Greens"",label='Left',shade=False,bw=7,shade_lowest=False,antialiased=True)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsTop2['offsetX'],offsetsTop2['offsetY'],cmap=""Reds"",label='Bottom',shade=False,bw=7,shade_lowest=False,antialiased=True)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsBottom2['offsetX'],offsetsBottom2['offsetY'],cmap=""Blues"",label='Right',shade=False,bw=7,shade_lowest=False,antialiased=True)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsLeft2['offsetX'],offsetsLeft2['offsetY'],cmap=""Purples"",label='Center',shade=False,bw=7,shade_lowest=False,antialiased=True)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsRigtht2['offsetX'],offsetsRigtht2['offsetY'],cmap=""Oranges"",label='Top',shade=False,bw=7,shade_lowest=False,antialiased=True)",CLUSTER_7,CLUSTER_11
ax,"seaborn.kdeplot(offsetsCenter2['offsetX'],offsetsCenter2['offsetY'],cmap=""Greens"",label='Left',shade=False,bw=7,shade_lowest=False,antialiased=True)",CLUSTER_7,CLUSTER_11
ax,"seaborn.scatterplot(x='x',y=""pressure"",data=dat)",CLUSTER_7,CLUSTER_11
pred,numpy.argmax(predictions),CLUSTER_2,CLUSTER_11
shd,pandas.read_csv(sac_csv),CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_7,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_7,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_9
beta_0,numpy.mean(y),CLUSTER_7,CLUSTER_9
df,"pandas.concat([df_train,df_test])",CLUSTER_5,CLUSTER_1
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_5,CLUSTER_1
df_test,pandas.read_csv(data_path+'house_test.csv.gz'),CLUSTER_5,CLUSTER_1
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_5,CLUSTER_1
df_temp,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
df_temp,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_5,CLUSTER_1
"df_raw[""SCALE""]","numpy.where(df_raw['SCALE']==""불량"",1,0)",CLUSTER_7,CLUSTER_8
"df_raw[""HSB""]","numpy.where(df_raw['HSB']==""적용"",1,0)",CLUSTER_7,CLUSTER_8
"df_raw[""ROLLING_DESCALING_GR""]","numpy.where(df_raw['ROLLING_DESCALING']==5,0,numpy.where(df_raw['ROLLING_DESCALING']==7,0,numpy.where(df_raw['ROLLING_DESCALING']==9,0,df_raw['ROLLING_DESCALING'])",CLUSTER_7,CLUSTER_8
df_eval,pandas.DataFrame(index=model),CLUSTER_7,CLUSTER_8
df_importance,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_raw_dummy,pandas.get_dummies(df_raw_pre),CLUSTER_7,CLUSTER_8
df_raw,"pandas.read_csv(""/home/pirl/Statistics/Day3_0715/SCALE불량.csv"",engine=""python"",encoding=""CP949"")",CLUSTER_7,CLUSTER_8
"df_train_x,df_test_x,df_train_y,df_test_y","sklearn.model_selection.train_test_split(df_raw_x,df_raw_y,test_size=0.3,random_state=1234)",CLUSTER_7,CLUSTER_8
"df_train_x,df_val_x,df_train_y,df_val_y","sklearn.model_selection.train_test_split(df_train_x,df_train_y,test_size=(0.3/0.7)",CLUSTER_7,CLUSTER_8
dt_model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_7,CLUSTER_8
rf_model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
gb_model,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_7,CLUSTER_8
knn_model,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_test_y,y_pred)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_test_y,y_pred)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_test_y,y_pred)",CLUSTER_7,CLUSTER_8
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_test_y,y_pred)",CLUSTER_7,CLUSTER_8
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_7,CLUSTER_8
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_7,CLUSTER_8
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_7,CLUSTER_8
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_7,CLUSTER_8
files,os.listdir(source),CLUSTER_10,CLUSTER_4
x,"numpy.arange(2,12)",CLUSTER_7,CLUSTER_8
rain_df,pandas.DataFrame(rain_data['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
winter_df,pandas.DataFrame(winter_data['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
summer_df,pandas.DataFrame(summer_data['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
g1,pandas.DataFrame(west_zone.Make.value_counts(ascending=False),CLUSTER_7,CLUSTER_8
g3,pandas.DataFrame(north_zone.Make.value_counts(ascending=False),CLUSTER_7,CLUSTER_8
g2,pandas.DataFrame(south_zone.Make.value_counts(ascending=False),CLUSTER_7,CLUSTER_8
g4,pandas.DataFrame(east_zone.Make.value_counts(ascending=False),CLUSTER_7,CLUSTER_8
g5,pandas.DataFrame(central_zone.Make.value_counts(ascending=False),CLUSTER_7,CLUSTER_8
over,"pandas.DataFrame(data,columns=['zones','count'])",CLUSTER_7,CLUSTER_8
car_value,pandas.DataFrame(grp_make['Total_Expense'].sum(),CLUSTER_7,CLUSTER_8
model_value,pandas.DataFrame(grp_model['Total_Expense'].sum(),CLUSTER_7,CLUSTER_8
one,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
two,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
three,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
four,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
five,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
six,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
one,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
two,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
three,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
four,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
five,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
one,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
two,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
three,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
four,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
five,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
one,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
two,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
three,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
four,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
five,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
one,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
two,pandas.DataFrame(grp_state['OrderType'].value_counts(),CLUSTER_7,CLUSTER_8
scaled_data,pandas.DataFrame(X),CLUSTER_7,CLUSTER_8
revenue_clust,"pandas.concat([low_revenue,medium_revenue,avg_revenue,high_revenue],axis=0)",CLUSTER_7,CLUSTER_8
f_clust,"pandas.concat([super_fast,fast,slow,super_slow],axis=0)",CLUSTER_7,CLUSTER_8
master_df,"pandas.read_csv(""master_df.csv"")",CLUSTER_7,CLUSTER_8
std,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
clf,"sklearn.cluster.KMeans(n_clusters=i,random_state=42,init='k-means++')",CLUSTER_7,CLUSTER_8
clf_final,"sklearn.cluster.KMeans(n_clusters=6,random_state=42,init='k-means++')",CLUSTER_7,CLUSTER_8
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_8
k,"numpy.linspace(1,10,10)",CLUSTER_5,CLUSTER_5
X,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_5
Y,sklearn.datasets.load_digits(),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_5,CLUSTER_5
model,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(n,)",CLUSTER_5,CLUSTER_5
model,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(l),CLUSTER_5,CLUSTER_5
model,sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(l),CLUSTER_5,CLUSTER_5
k_fold,sklearn.model_selection.KFold(n_splits=4),CLUSTER_5,CLUSTER_5
n_fold,sklearn.model_selection.KFold(n_splits=4),CLUSTER_5,CLUSTER_5
n_fold,sklearn.model_selection.KFold(n_splits=4),CLUSTER_5,CLUSTER_5
n_fold,sklearn.model_selection.KFold(n_splits=4),CLUSTER_5,CLUSTER_5
"fig,ax","matplotlib.pyplot.subplots(2,4,sharex='col',sharey='row')",CLUSTER_5,CLUSTER_5
score,"sklearn.metrics.accuracy_score(y_pred,Y[test_indices])",CLUSTER_5,CLUSTER_5
score_mlp,"sklearn.metrics.accuracy_score(y_pred_mlp,Y[test_indices])",CLUSTER_5,CLUSTER_5
score_mlph2,"sklearn.metrics.accuracy_score(y_pred_mlph2,Y[test_indices])",CLUSTER_5,CLUSTER_5
score_mlph3,"sklearn.metrics.accuracy_score(y_pred_mlph3,Y[test_indices])",CLUSTER_5,CLUSTER_5
entries,os.listdir('Without_Processing\\Training_Data'),CLUSTER_0,CLUSTER_1
entries,os.listdir('Without_Processing\\Testing_Data'),CLUSTER_0,CLUSTER_1
TrainData,"pandas.read_csv('data.csv',names=['Tweet','Target'],encoding='utf-8')",CLUSTER_0,CLUSTER_1
Testdata,"pandas.read_csv('Testdata.csv',names=['Tweet','Target'],encoding='utf-8')",CLUSTER_0,CLUSTER_1
m,"re.search(target,t)",CLUSTER_0,CLUSTER_1
m,"re.search(target,t)",CLUSTER_0,CLUSTER_1
text,"re.sub(""ة"",""ه"",text)",CLUSTER_0,CLUSTER_1
text,"re.sub(""[إأآا]"",""ا"",text)",CLUSTER_0,CLUSTER_1
text,"re.sub(""ى"",""ي"",text)",CLUSTER_0,CLUSTER_1
text,"re.sub(""ئ"",""ء"",text)",CLUSTER_0,CLUSTER_1
text,re.sub(r'(.),CLUSTER_0,CLUSTER_1
text,"re.sub(URLLink,'',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(URLPic,'',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(punctuations_Symbols,'',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(arabic_diacritics,'',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(EngNames,'',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(ArbNames,'',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(hashtag,'',text)",CLUSTER_0,CLUSTER_1
text,"re.sub(hashtag,'',text)",CLUSTER_0,CLUSTER_1
classifier,sklearn.linear_model.RidgeClassifier(),CLUSTER_0,CLUSTER_1
new_images,numpy.asarray(new_images),CLUSTER_4,CLUSTER_0
new_labels,numpy.asarray(new_labels),CLUSTER_4,CLUSTER_0
image,numpy.asarray(image),CLUSTER_4,CLUSTER_0
class_indices,numpy.where(y_train==class_n),CLUSTER_4,CLUSTER_0
index1,numpy.argwhere(y_valid==guess1),CLUSTER_4,CLUSTER_0
index2,numpy.argwhere(y_valid==guess2),CLUSTER_4,CLUSTER_0
index3,numpy.argwhere(y_valid==guess3),CLUSTER_4,CLUSTER_0
index,numpy.argwhere(y_valid==guess),CLUSTER_4,CLUSTER_0
X_train,"numpy.concatenate((X_train,[new_img])",CLUSTER_4,CLUSTER_0
y_train,"numpy.concatenate((y_train,[class_n])",CLUSTER_4,CLUSTER_0
x_train_gry,"numpy.sum(x_train/3,axis=3,keepdims=True)",CLUSTER_4,CLUSTER_0
x_test_gry,"numpy.sum(x_test/3,axis=3,keepdims=True)",CLUSTER_4,CLUSTER_0
x_valid_gry,"numpy.sum(x_valid/3,axis=3,keepdims=True)",CLUSTER_4,CLUSTER_0
new_images,"numpy.sum(new_images/3,axis=3,keepdims=True)",CLUSTER_4,CLUSTER_0
image,"numpy.sum(image/3,axis=2,keepdims=True)",CLUSTER_4,CLUSTER_0
M,"numpy.float32([[1,0,dx],[0,1,dy]])",CLUSTER_4,CLUSTER_0
pts1,"numpy.float32([[px,px],[rows-px,px],[px,cols-px],[rows-px,cols-px]])",CLUSTER_4,CLUSTER_0
pts2,"numpy.float32([[0,0],[rows,0],[0,cols],[rows,cols]])",CLUSTER_4,CLUSTER_0
pts1,"numpy.float32([[y1,x1],
[y2,x1],
[y1,x2]])",CLUSTER_4,CLUSTER_0
pts2,"numpy.float32([[y1+rndy[0],x1+rndx[0]],
[y2+rndy[1],x1+rndx[1]],
[y1+rndy[2],x2+rndx[2]]])",CLUSTER_4,CLUSTER_0
index,"random.randint(0,len(x_train)",CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,6,figsize=(4,2)",CLUSTER_4,CLUSTER_0
"fig,axs",matplotlib.pyplot.subplots(len(new_images),CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(6,2,figsize=(9,19)",CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,2,figsize=(10,6)",CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,2,figsize=(9,4)",CLUSTER_4,CLUSTER_0
"x_train,x_valid,y_train,y_valid","sklearn.model_selection.train_test_split(x_train,y_train,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_0
"x_train,x_remaining,y_train,y_remaining","sklearn.model_selection.train_test_split(X_train,Y_train,test_size=0.4,random_state=0)",CLUSTER_4,CLUSTER_0
"x_valid,x_test,y_valid,y_test","sklearn.model_selection.train_test_split(x_remaining,y_remaining,test_size=0.5,random_state=0)",CLUSTER_4,CLUSTER_0
result,collections.defaultdict(list),CLUSTER_4,CLUSTER_11
p,"numpy.zeros((self.N,3)",CLUSTER_1,CLUSTER_9
w,numpy.zeros(self.N),CLUSTER_1,CLUSTER_9
self.particles,"numpy.empty((N,3)",CLUSTER_1,CLUSTER_9
self.weights,numpy.empty(N),CLUSTER_1,CLUSTER_9
cumsum,numpy.cumsum(self.weights),CLUSTER_1,CLUSTER_9
index,"numpy.searchsorted(cumsum,random()",CLUSTER_1,CLUSTER_9
"self.particles[:,0]+","numpy.cos(self.particles[:,2])",CLUSTER_1,CLUSTER_9
"self.particles[:,1]+","numpy.sin(self.particles[:,2])",CLUSTER_1,CLUSTER_9
dist,"numpy.sqrt((self.particles[:,0]-z[0])",CLUSTER_1,CLUSTER_9
mu,"numpy.average(pos,weights=self.weights,axis=0)",CLUSTER_1,CLUSTER_9
var,numpy.average((pos-mu),CLUSTER_1,CLUSTER_9
n,"scipy.stats.norm(0,np.sqrt(var)",CLUSTER_1,CLUSTER_9
df_data_0,pandas.read_excel(body),CLUSTER_5,CLUSTER_1
X,"numpy.asarray(df_data_0[['woe_customer_type','woe_product_type','woe_pc','woe_age','woe_sales_channel','woe_nace_risk']])",CLUSTER_5,CLUSTER_1
y,numpy.asarray(df_data_0['DPD90_12m']),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=4)",CLUSTER_5,CLUSTER_1
LR,sklearn.linear_model.LogisticRegression(solver='liblinear'),CLUSTER_5,CLUSTER_1
roc,"sklearn.metrics.roc_auc_score(y_test,y_predicted)",CLUSTER_5,CLUSTER_1
roc1,"sklearn.metrics.roc_auc_score(y_train,y_predicted_train)",CLUSTER_5,CLUSTER_1
roc2,"sklearn.metrics.roc_auc_score(y,y_predicted_all)",CLUSTER_5,CLUSTER_1
data,numpy.array(data_pert.data['S']),CLUSTER_4,CLUSTER_11
data1,numpy.array(data_diff.data['S']),CLUSTER_4,CLUSTER_11
data,numpy.array(data_pert.data['S']),CLUSTER_4,CLUSTER_11
data1,numpy.array(data_diff.data['S']),CLUSTER_4,CLUSTER_11
data,numpy.array(data_pert.data['S']),CLUSTER_4,CLUSTER_11
data1,numpy.array(data_diff.data['S']),CLUSTER_4,CLUSTER_11
data,numpy.array(data_pert.data['S']),CLUSTER_4,CLUSTER_11
data1,numpy.array(data_diff.data['S']),CLUSTER_4,CLUSTER_11
data,numpy.array(data_pert.data['S']),CLUSTER_4,CLUSTER_11
data1,numpy.array(data_diff.data['S']),CLUSTER_4,CLUSTER_11
data,numpy.array(data_pert.data['S']),CLUSTER_4,CLUSTER_11
data1,numpy.array(data_diff.data['S']),CLUSTER_4,CLUSTER_11
data,numpy.array(data_pert.data['S']),CLUSTER_4,CLUSTER_11
data1,numpy.array(data_diff.data['S']),CLUSTER_4,CLUSTER_11
data,"numpy.array(data_pert.data['S'][t,:,:,:])",CLUSTER_4,CLUSTER_11
data1,"numpy.array(data_diff.data['S'][t,:,:,:])",CLUSTER_4,CLUSTER_11
depth1,numpy.array(depth),CLUSTER_4,CLUSTER_11
data,"numpy.array(data_pert.data['S'][t,:,:,:])",CLUSTER_4,CLUSTER_11
data1,"numpy.array(data_diff.data['S'][t,:,:,:])",CLUSTER_4,CLUSTER_11
depth1,numpy.array(depth),CLUSTER_4,CLUSTER_11
data,"numpy.array(data_pert.data['S'][t,:,:,:])",CLUSTER_4,CLUSTER_11
data1,"numpy.array(data_diff.data['S'][t,:,:,:])",CLUSTER_4,CLUSTER_11
data,numpy.array(data_pert.data['S']),CLUSTER_4,CLUSTER_11
data1,numpy.array(data_diff.data['S']),CLUSTER_4,CLUSTER_11
data,numpy.array(data_pert.data['S']),CLUSTER_4,CLUSTER_11
data1,numpy.array(data_diff.data['S']),CLUSTER_4,CLUSTER_11
data,numpy.array(data_pert.data['T']),CLUSTER_4,CLUSTER_11
data1,numpy.array(data_diff.data['T']),CLUSTER_4,CLUSTER_11
data,numpy.array(data_pert.data['T']),CLUSTER_4,CLUSTER_11
data1,numpy.array(data_diff.data['T']),CLUSTER_4,CLUSTER_11
levels_RHO,numpy.array(levels_RHO),CLUSTER_4,CLUSTER_11
levels_TH,numpy.array(levels_TH),CLUSTER_4,CLUSTER_11
levels_SLT,numpy.array(levels_SLT),CLUSTER_4,CLUSTER_11
trumax,numpy.zeros_like(data_diff.data['S']),CLUSTER_4,CLUSTER_11
trumax,numpy.zeros_like(data_diff.data['S']),CLUSTER_4,CLUSTER_11
trumax,numpy.zeros_like(data_diff.data['S']),CLUSTER_4,CLUSTER_11
trumax,numpy.zeros_like(data_diff.data['S']),CLUSTER_4,CLUSTER_11
trumax,"numpy.zeros_like(data_diff.data['S'][t,:,:,:])",CLUSTER_4,CLUSTER_11
trumax,"numpy.zeros_like(data_diff.data['S'][t,:,:,:])",CLUSTER_4,CLUSTER_11
mask0,numpy.ones_like(mask1),CLUSTER_4,CLUSTER_11
mask0,numpy.ones_like(mask1),CLUSTER_4,CLUSTER_11
mask0,numpy.ones_like(mask1),CLUSTER_4,CLUSTER_11
mask0,numpy.ones_like(mask1),CLUSTER_4,CLUSTER_11
mask0,numpy.ones_like(mask1),CLUSTER_4,CLUSTER_11
mask0,numpy.ones_like(mask1),CLUSTER_4,CLUSTER_11
mask0,numpy.ones_like(mask1),CLUSTER_4,CLUSTER_11
depth,"numpy.swapaxes(depth,0,2)",CLUSTER_4,CLUSTER_11
depth,"numpy.swapaxes(depth,0,2)",CLUSTER_4,CLUSTER_11
depth,"numpy.swapaxes(depth,0,2)",CLUSTER_4,CLUSTER_11
depth,"numpy.swapaxes(depth,0,2)",CLUSTER_4,CLUSTER_11
masked_array,"np.ma.array(field[time,Z,:,:],mask=numpy.isnan(field[time,Z,:,:])",CLUSTER_4,CLUSTER_11
mask,"numpy.isnan(np.nanmean(data.ptracers[ptracer][t,:,:,:],axis=0)",CLUSTER_4,CLUSTER_11
mask,"numpy.isnan(np.nanmean(data.ptracers[ptracer][t,:,:,0:200],axis=1)",CLUSTER_4,CLUSTER_11
mask,"numpy.isnan(np.nanmean(data.ptracers[ptracer][t,:,:,:],axis=2)",CLUSTER_4,CLUSTER_11
mask,"numpy.isnan(np.nanmean(data.ptracers[ptracer][t,:,:,:],axis=0)",CLUSTER_4,CLUSTER_11
mask,"numpy.isnan(np.nanmean(data.ptracers[ptracer][t,:,:,0:200],axis=1)",CLUSTER_4,CLUSTER_11
mask,"numpy.isnan(np.nanmean(data.ptracers[ptracer][t,:,:,:],axis=2)",CLUSTER_4,CLUSTER_11
mask,"numpy.isnan(data.ptracers[ptracer][t,:,70,0:150])",CLUSTER_4,CLUSTER_11
mask,"numpy.isnan(data.ptracers[ptracer][t,:,50:,40])",CLUSTER_4,CLUSTER_11
mask,"numpy.isnan(data.ptracers[ptracer][t,:,25:120,125])",CLUSTER_4,CLUSTER_11
mask,"numpy.isnan(data.ptracers[ptracer][t,0:44,60*kk:80*kk,76*kk])",CLUSTER_4,CLUSTER_11
mask,"numpy.isnan(data.ptracers[ptracer][t,0:30,100*kk,37*kk:48*kk])",CLUSTER_4,CLUSTER_11
mask,"numpy.isnan(np.concatenate((
data.ptracers[ptracer][t,0:41,45*kk:58*kk,49*kk],
data.ptracers[ptracer][t,0:41,58*kk,49*kk:66*kk]
)",CLUSTER_4,CLUSTER_11
mask,numpy.isnan((data.layers[layer]-data_diff.layers[layer]),CLUSTER_4,CLUSTER_11
mask,numpy.isnan((data.layers[layer]-data_diff.layers[layer]),CLUSTER_4,CLUSTER_11
datam,numpy.sqrt(datam**2+datam1**2),CLUSTER_4,CLUSTER_11
ticks,"numpy.linspace(vimin,vimax,5)",CLUSTER_4,CLUSTER_11
ticks,"numpy.linspace(vimin,vimax,5)",CLUSTER_4,CLUSTER_11
maskcalc,"numpy.tile(areamasks[j],(data_pert.data['S'].shape[0],1,1,1)",CLUSTER_4,CLUSTER_11
maskcalc,"numpy.tile(areamasks[j],(data_pert.data['S'].shape[0],1,1,1)",CLUSTER_4,CLUSTER_11
maskcalc,"numpy.tile(areamasks[j],(data_pert.data['S'].shape[0],1,1,1)",CLUSTER_4,CLUSTER_11
maskcalc,"numpy.tile(areamasks[j],(data_pert.data['S'].shape[0],1,1,1)",CLUSTER_4,CLUSTER_11
maskcalc,"numpy.tile(areamasks[j],(data_pert.data['S'].shape[0],1,1,1)",CLUSTER_4,CLUSTER_11
maskcalc,"numpy.tile(areamasks[j],(data_pert.data['S'].shape[0],1,1,1)",CLUSTER_4,CLUSTER_11
depth,"numpy.tile([grid['Zp']],(len(data_pert.X)",CLUSTER_4,CLUSTER_11
depth,"numpy.tile([grid['Zp']],(len(data_pert.X)",CLUSTER_4,CLUSTER_11
depth,"numpy.tile([grid['Zp']],(len(data_pert.X)",CLUSTER_4,CLUSTER_11
depth,"numpy.tile([grid['Zp']],(len(data_pert.X)",CLUSTER_4,CLUSTER_11
maskcalc,"numpy.tile(areamasks[j],(data_pert.data['T'].shape[0],1,1,1)",CLUSTER_4,CLUSTER_11
maskcalc,"numpy.tile(areamasks[j],(data_pert.data['T'].shape[0],1,1,1)",CLUSTER_4,CLUSTER_11
datapl,"numpy.nansum(numpy.nansum(datam[:,:,:,:],axis=3)",CLUSTER_4,CLUSTER_11
datapl,"numpy.nansum(numpy.nansum(datam[:,:,:,:],axis=3)",CLUSTER_4,CLUSTER_11
datapl,"numpy.nansum(numpy.nansum(datam[:,:,:,:],axis=3)",CLUSTER_4,CLUSTER_11
datapl,"numpy.nansum(numpy.nansum(datam[:,:,:,:],axis=3)",CLUSTER_4,CLUSTER_11
datapl1,numpy.nansum(numpy.nansum((1-data/34.8),CLUSTER_4,CLUSTER_11
datapl,"numpy.nansum(numpy.nansum(datam[:,:,:,:],axis=3)",CLUSTER_4,CLUSTER_11
datam,"numpy.nansum((1-data[:,:,:]/34.8)",CLUSTER_4,CLUSTER_11
datam,"numpy.nansum((1-data[:,:,:]/34.8)",CLUSTER_4,CLUSTER_11
datam,"numpy.nansum((1-data[0:29,:,:]/34.8)",CLUSTER_4,CLUSTER_11
datam,"numpy.nansum((1-data[t,:,:,:]/34.8)",CLUSTER_4,CLUSTER_11
datam,"numpy.nansum((1-data[t,0:29,:,:]/34.8)",CLUSTER_4,CLUSTER_11
datapl,"numpy.nansum(numpy.nansum(datam[:,:,:,:],axis=3)",CLUSTER_4,CLUSTER_11
datapl,"numpy.nansum(numpy.nansum(datam[:,:,:,:],axis=3)",CLUSTER_4,CLUSTER_11
vimax,numpy.nanmax(np.absolute(datam),CLUSTER_4,CLUSTER_11
datam,numpy.nanmean((data_pert.GAD['ADVx_TH']-data_diff.GAD['ADVx_TH']),CLUSTER_4,CLUSTER_11
datam1,numpy.nanmean((data_pert.GAD['ADVy_TH']-data_diff.GAD['ADVy_TH']),CLUSTER_4,CLUSTER_11
datam,numpy.nanmean((data_pert.data['S']-data_diff.data['S']),CLUSTER_4,CLUSTER_11
data,numpy.nanmean((data_pert.fluxes[var][flux]-data_diff.fluxes[var][flux]),CLUSTER_4,CLUSTER_11
masked_array,"numpy.ma.array(field[time,Z,:,:],mask=np.isnan(field[time,Z,:,:])",CLUSTER_4,CLUSTER_11
masked_array,"numpy.ma.array(np.nanmean(data.ptracers[ptracer][t,:,:,:],axis=0)",CLUSTER_4,CLUSTER_11
masked_array,"numpy.ma.array(np.nanmean(data.ptracers[ptracer][t,:,:,0:200],axis=1)",CLUSTER_4,CLUSTER_11
masked_array,"numpy.ma.array(np.nanmean(data.ptracers[ptracer][t,:,:,:],axis=2)",CLUSTER_4,CLUSTER_11
masked_array,"numpy.ma.array(np.nanmean(diff[t,:,:,:],axis=0)",CLUSTER_4,CLUSTER_11
masked_array,"numpy.ma.array(np.nanmean(diff[t,:,:,0:200],axis=1)",CLUSTER_4,CLUSTER_11
masked_array,"numpy.ma.array(np.nanmean(diff[t,:,:,:],axis=2)",CLUSTER_4,CLUSTER_11
masked_array,"numpy.ma.array(data.ptracers[ptracer][t,:,70,0:150],\
mask=np.isnan(data.ptracers[ptracer][t,:,70,0:150])",CLUSTER_4,CLUSTER_11
masked_array,"numpy.ma.array(data.ptracers[ptracer][t,:,50:,40],\
mask=np.isnan(data.ptracers[ptracer][t,:,50:,40])",CLUSTER_4,CLUSTER_11
masked_array,"numpy.ma.array(data.ptracers[ptracer][t,:,25:120,125],\
mask=np.isnan(data.ptracers[ptracer][t,:,25:120,125])",CLUSTER_4,CLUSTER_11
masked_array,"numpy.ma.array(data.ptracers[ptracer][t,0:44,60*kk:80*kk,76*kk],\
mask=np.isnan(data.ptracers[ptracer][t,0:44,60*kk:80*kk,76*kk])",CLUSTER_4,CLUSTER_11
masked_array,"numpy.ma.array(data.ptracers[ptracer][t,0:30,100*kk,37*kk:48*kk],\
mask=np.isnan(data.ptracers[ptracer][t,0:30,100*kk,37*kk:48*kk])",CLUSTER_4,CLUSTER_11
masked_array,"numpy.ma.array(np.concatenate((
data.ptracers[ptracer][t,0:41,45*kk:58*kk,49*kk],
data.ptracers[ptracer][t,0:41,58*kk,49*kk:66*kk]
)",CLUSTER_4,CLUSTER_11
masked_array,numpy.ma.array((data.layers[layer]-data_diff.layers[layer]),CLUSTER_4,CLUSTER_11
masked_array,numpy.ma.array((data.layers[layer]-data_diff.layers[layer]),CLUSTER_4,CLUSTER_11
sitm,numpy.ma.masked_where(np.isnan(datam),CLUSTER_4,CLUSTER_11
sitm,numpy.ma.masked_where(np.isnan(datam),CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(CS,cax=cbar_ax,)",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(CS,cax=cbar_ax,)",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(CS,cax=cax,format=""%.2g"")",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(CS,cax=cbar_ax,)",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(CS,cax=cbar_ax,)",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(CS,cax=cbar_ax,)",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(CS,cax=cbar_ax,)",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(CS,cax=cbar_ax,)",CLUSTER_4,CLUSTER_11
cbar,"matplotlib.pyplot.colorbar(CS,cax=cbar_ax,)",CLUSTER_4,CLUSTER_11
ca,"matplotlib.pyplot.imshow(masked_array,vmin=vimin,vmax=vimax,interpolation='nearest',\
cmap=cmap,origin=""left"",aspect='auto')",CLUSTER_4,CLUSTER_11
ca,"matplotlib.pyplot.pcolor(pert_const.X,pert_const.Y,masked_array,vmin=vimin,vmax=vimax,cmap=cmap)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(row,col,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(row,col,sharex=True,sharey=True,)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,3)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,3)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(row,col,sharex=True,)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(row,col,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes",matplotlib.pyplot.subplots(len(fluxes),CLUSTER_4,CLUSTER_11
"fig,axes",matplotlib.pyplot.subplots(len(variables),CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(row,col,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,2,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,2,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,2,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,2,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,4,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,3)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,3)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,3)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,3)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,3)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,4)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,3)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,4)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,2,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(2,2,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(row,col)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(1,1)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(row,col)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(row,col)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(row,col)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(row,col)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(nrows=row,ncols=col,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(nrows=row,ncols=col,sharex=True,sharey=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(ntr-1,4,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(ncols=3,nrows=4,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(ncols=2,nrows=2,sharex=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(row,col)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(nrows=row,ncols=col,sharex=True,sharey=True)",CLUSTER_4,CLUSTER_11
"fig,axes","matplotlib.pyplot.subplots(row,col)",CLUSTER_4,CLUSTER_11
plot_x,"numpy.array([min(X[:,1])",CLUSTER_1,CLUSTER_9
grad,numpy.zeros(size(theta),CLUSTER_1,CLUSTER_9
pos,numpy.where(y==1),CLUSTER_1,CLUSTER_9
neg,numpy.where(y==0),CLUSTER_1,CLUSTER_9
res,numpy.ones(X.shape[0]),CLUSTER_1,CLUSTER_9
X_new,"numpy.ones((X.shape[0],3)",CLUSTER_1,CLUSTER_9
accuracy,numpy.mean(p==y),CLUSTER_1,CLUSTER_9
res[i],"numpy.floor(proba(b,w1,w2,X[i][1],X[i][2])",CLUSTER_1,CLUSTER_9
data,"numpy.loadtxt('./data/data.txt',delimiter=',')",CLUSTER_1,CLUSTER_9
Result,"scipy.optimize.minimize(fun=cost,x0=initial_theta,args=(X,y)",CLUSTER_1,CLUSTER_9
clf_lasso,sklearn.linear_model.Lasso(random_state=13),CLUSTER_7,CLUSTER_8
tss,sklearn.model_selection.TimeSeriesSplit(n_splits=10),CLUSTER_7,CLUSTER_8
grid,"sklearn.model_selection.GridSearchCV(clf_xgb,
set_params,
cv=tss,
scoring='neg_mean_absolute_error',
n_jobs=-1
)",CLUSTER_7,CLUSTER_8
gridl,"sklearn.model_selection.GridSearchCV(clf_lasso,
set_params,
cv=tss,
scoring='neg_mean_absolute_error',
n_jobs=-1
)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_8
ax1,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax2,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax3,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax4,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax5,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax6,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax7,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax8,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax9,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax10,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax11,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax12,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax13,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax14,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax15,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax16,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
ax17,"matplotlib.pyplot.subplot2grid((6,3)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(30,30)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(30,30)",CLUSTER_7,CLUSTER_8
train_df.year,numpy.where((train_df.week_start_date.apply(lambdax:x[5:]),CLUSTER_7,CLUSTER_8
test_df.year,numpy.where((test_df.week_start_date.apply(lambdax:x[5:]),CLUSTER_7,CLUSTER_8
sj_df[features_to_scale],"numpy.concatenate([sjx_train,sjx_test])",CLUSTER_7,CLUSTER_8
iq_df[features_to_scale],"numpy.concatenate([iqx_train,iqx_test])",CLUSTER_7,CLUSTER_8
iq_base_df[features_to_scale],"numpy.concatenate([iq_base_train,iq_base_test])",CLUSTER_7,CLUSTER_8
base1.total_cases,numpy.concatenate([np.round(np.exp(pred_sj),CLUSTER_7,CLUSTER_8
base2.total_cases,numpy.concatenate([np.round(np.exp(pred2_sj),CLUSTER_7,CLUSTER_8
"sns.heatmap(corr,mask","numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_7,CLUSTER_8
"sns.heatmap(corr,mask","numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_7,CLUSTER_8
cormatrix*,"numpy.tri(*cormatrix.values.shape,k=-1)",CLUSTER_7,CLUSTER_8
sjx_valid_df,"pandas.DataFrame(sjx_train[vid_sj:id_sj],columns=features_to_scale)",CLUSTER_7,CLUSTER_8
sjx_train_df,"pandas.DataFrame(sjx_train[:vid_sj],columns=features_to_scale)",CLUSTER_7,CLUSTER_8
sjx_test_df,"pandas.DataFrame(sjx_test,columns=features_to_scale)",CLUSTER_7,CLUSTER_8
iqx_valid_df,"pandas.DataFrame(iqx_train[vid_iq:id_iq],columns=features_to_scale)",CLUSTER_7,CLUSTER_8
iqx_train_df,"pandas.DataFrame(iqx_train[:vid_iq],columns=features_to_scale)",CLUSTER_7,CLUSTER_8
iqx_test_df,"pandas.DataFrame(iqx_test,columns=features_to_scale)",CLUSTER_7,CLUSTER_8
iqx_base_valid_df,"pandas.DataFrame(iq_base_train[vid_iq:id_iq],columns=features_to_scale)",CLUSTER_7,CLUSTER_8
iqx_base_train_df,"pandas.DataFrame(iq_base_train[:vid_iq],columns=features_to_scale)",CLUSTER_7,CLUSTER_8
iqx_base_test_df,"pandas.DataFrame(iq_base_test,columns=features_to_scale)",CLUSTER_7,CLUSTER_8
sjx_valid_df,"pandas.DataFrame(sjx_train[vid_sj:id_sj],columns=features_to_scale)",CLUSTER_7,CLUSTER_8
sjx_train_df,"pandas.DataFrame(sjx_train[:vid_sj],columns=features_to_scale)",CLUSTER_7,CLUSTER_8
sjx_test_df,"pandas.DataFrame(sjx_test,columns=features_to_scale)",CLUSTER_7,CLUSTER_8
iqx_valid_df,"pandas.DataFrame(iqx_train[vid_iq:id_iq],columns=features_to_scale)",CLUSTER_7,CLUSTER_8
iqx_train_df,"pandas.DataFrame(iqx_train[:vid_iq],columns=features_to_scale)",CLUSTER_7,CLUSTER_8
iqx_test_df,"pandas.DataFrame(iqx_test,columns=features_to_scale)",CLUSTER_7,CLUSTER_8
iqx_base_valid_df,"pandas.DataFrame(iq_base_train[vid_iq:id_iq],columns=features_to_scale)",CLUSTER_7,CLUSTER_8
iqx_base_train_df,"pandas.DataFrame(iq_base_train[:vid_iq],columns=features_to_scale)",CLUSTER_7,CLUSTER_8
iqx_base_test_df,"pandas.DataFrame(iq_base_test,columns=features_to_scale)",CLUSTER_7,CLUSTER_8
train_df,"pandas.concat((sj_df,iq_df)",CLUSTER_7,CLUSTER_8
sj_df,pandas.concat([train_df[train_df.city=='sj'].copy(),CLUSTER_7,CLUSTER_8
iq_df,pandas.concat([train_df[train_df.city=='iq'].copy(),CLUSTER_7,CLUSTER_8
train_df,"pandas.merge(features,labels,how='outer',on=labels.columns.tolist()",CLUSTER_7,CLUSTER_8
features,"pandas.read_csv('../../data/dengue_features_train.csv',infer_datetime_format=True)",CLUSTER_7,CLUSTER_8
labels,"pandas.read_csv('../../data/dengue_labels_train.csv',infer_datetime_format=True)",CLUSTER_7,CLUSTER_8
test,"pandas.read_csv('../../data/dengue_features_test.csv',infer_datetime_format=True)",CLUSTER_7,CLUSTER_8
base1,"pandas.read_csv('/media/sadworker/DataRed/data/dengai/submission.csv',index_col=[0,1,2])",CLUSTER_7,CLUSTER_8
base2,"pandas.read_csv('/media/sadworker/DataRed/data/dengai/submission.csv',index_col=[0,1,2])",CLUSTER_7,CLUSTER_8
fig,"seaborn.FacetGrid(train_df,hue='city',aspect=4,size=4)",CLUSTER_7,CLUSTER_8
fig,"seaborn.FacetGrid(train_df,hue='city',aspect=4,size=4)",CLUSTER_7,CLUSTER_8
fig,"seaborn.FacetGrid(train_df,hue='city',aspect=4,size=4)",CLUSTER_7,CLUSTER_8
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_7,CLUSTER_8
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_7,CLUSTER_8
test_paths,os.listdir(test_image_dir),CLUSTER_4,CLUSTER_0
balanced_train_df['ships'].hist(bins,numpy.arange(10),CLUSTER_4,CLUSTER_0
img,"numpy.zeros(shape[0]*shape[1],dtype=np.uint8)",CLUSTER_4,CLUSTER_0
all_masks,"numpy.zeros((768,768)",CLUSTER_4,CLUSTER_0
runs,numpy.where(pixels[1:]!=pixels[:-1]),CLUSTER_4,CLUSTER_0
pixels,"numpy.concatenate([[0],pixels,[0]])",CLUSTER_4,CLUSTER_0
epich,"numpy.cumsum(np.concatenate(
[np.linspace(0.5,1,len(mh.epoch)",CLUSTER_4,CLUSTER_0
first_img,"numpy.expand_dims(c_img,0)",CLUSTER_4,CLUSTER_0
train_df,"pandas.merge(masks,train_ids)",CLUSTER_4,CLUSTER_0
valid_df,"pandas.merge(masks,valid_ids)",CLUSTER_4,CLUSTER_0
masks,"pandas.read_csv(os.path.join('../input/airbus-ship-detection/',
'train_ship_segmentations_v2.csv')",CLUSTER_4,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_4,CLUSTER_0
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,figsize=(30,10)",CLUSTER_4,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_4,CLUSTER_0
"fig,(ax1,ax2,ax3,ax4)","matplotlib.pyplot.subplots(1,4,figsize=(22,10)",CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(10,10)",CLUSTER_4,CLUSTER_0
"fig,m_axs","matplotlib.pyplot.subplots(20,2,figsize=(10,40)",CLUSTER_4,CLUSTER_0
"train_ids,valid_ids","sklearn.model_selection.train_test_split(unique_img_ids,
test_size=0.3,
stratify=unique_img_ids['ships'])",CLUSTER_4,CLUSTER_0
t,"numpy.arange(0,period,time_resolution)",CLUSTER_1,CLUSTER_9
data,"numpy.array([t,H,Hp,H2,H2p,H3p,ne])",CLUSTER_1,CLUSTER_9
k1,numpy.exp(-3.271396786375e+01+1.353655609057e+01*np.log(Te),CLUSTER_1,CLUSTER_9
k3,numpy.exp(-2.858072836568e+01+1.038543976082e+01*np.log(Te),CLUSTER_1,CLUSTER_9
k4,numpy.exp(-3.568640293666e+01+1.733468989961e+01*np.log(Te),CLUSTER_1,CLUSTER_9
k5,numpy.exp(-3.834597006782e+01+1.426322356722e+01*np.log(Te),CLUSTER_1,CLUSTER_9
k6,numpy.exp(-3.746192301092e+01+1.559355031108e+01*np.log(Te),CLUSTER_1,CLUSTER_9
k7,numpy.exp(-1.781416067709e+01+2.277799785711e+00*np.log(Te),CLUSTER_1,CLUSTER_9
k8,numpy.exp(-1.670435653561e+01-6.035644995682e-01*np.log(Te),CLUSTER_1,CLUSTER_9
k9,numpy.exp(-1.700270758355e+01-4.050073042947e-01*np.log(Te),CLUSTER_1,CLUSTER_9
k10,numpy.exp(-3.078408636631e+01+1.509421488513e+01*np.log(Te),CLUSTER_1,CLUSTER_9
k12,numpy.exp(-4.991816994666e+02+6.320402753550e+02*np.log(Te),CLUSTER_1,CLUSTER_9
k13,numpy.exp(-1.773223143614e+03+2.868021256119e+03*np.log(Te),CLUSTER_1,CLUSTER_9
k14,numpy.exp(-4.293519441750e+02+5.112210939087e+02*np.log(Te),CLUSTER_1,CLUSTER_9
B,numpy.exp(-t2/C),CLUSTER_1,CLUSTER_9
uB,numpy.sqrt(e*Te/M),CLUSTER_1,CLUSTER_9
data,pandas.DataFrame(data),CLUSTER_1,CLUSTER_9
ans1,"scipy.integrate.odeint(electron_balance_eqn,x0,t,args,rtol=10**-3,mxstep=10**4)",CLUSTER_1,CLUSTER_9
x_lon,numpy.zeros((len(shape_ex.points),CLUSTER_7,CLUSTER_3
y_lat,numpy.zeros((len(shape_ex.points),CLUSTER_7,CLUSTER_3
x_lon,numpy.zeros((len(shape_ex.points),CLUSTER_7,CLUSTER_3
y_lat,numpy.zeros((len(shape_ex.points),CLUSTER_7,CLUSTER_3
x0,numpy.mean(x_lon),CLUSTER_7,CLUSTER_3
y0,numpy.mean(y_lat),CLUSTER_7,CLUSTER_3
x0,numpy.mean(x_lon),CLUSTER_7,CLUSTER_3
y0,numpy.mean(y_lat),CLUSTER_7,CLUSTER_3
x0,numpy.mean(x),CLUSTER_7,CLUSTER_3
y0,numpy.mean(y),CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(columns=fields,data=records)",CLUSTER_7,CLUSTER_3
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_3
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=(7,5)",CLUSTER_1,CLUSTER_10
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_2
tn_neighborhood_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_2
tn_onehot,"pandas.get_dummies(tn_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_2
df,"pandas.read_csv(""Toronto_Neighborhoods_Final.csv"")",CLUSTER_9,CLUSTER_2
x,numpy.arange(k),CLUSTER_9,CLUSTER_2
km_model,"sklearn.cluster.KMeans(n_clusters=k,random_state=0)",CLUSTER_9,CLUSTER_2
results,requests.get(url),CLUSTER_9,CLUSTER_2
major_ticks,"numpy.arange(0,original_image.size[0],1500)",CLUSTER_4,CLUSTER_11
minor_ticks,"numpy.arange(0,original_image.size[1],1500)",CLUSTER_4,CLUSTER_11
major_ticks,"numpy.arange(0,original_image.size[0],1500)",CLUSTER_4,CLUSTER_11
minor_ticks,"numpy.arange(0,original_image.size[1],1500)",CLUSTER_4,CLUSTER_11
region_means,numpy.array(region_means),CLUSTER_4,CLUSTER_11
nucleus_denoised,"filters.median(nucleus,selem=numpy.ones((5,5)",CLUSTER_4,CLUSTER_11
blobs,numpy.int_(morphology.binary_opening(labels_div==i),CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(num=None,figsize=(8,8)",CLUSTER_4,CLUSTER_11
fig,"matplotlib.pyplot.figure(num=None,figsize=(8,8)",CLUSTER_4,CLUSTER_11
tiles,os.listdir(os.getcwd(),CLUSTER_4,CLUSTER_11
dt,scipy.ndimage.distance_transform_edt(~edges),CLUSTER_4,CLUSTER_11
model,sklearn.cluster.KMeans(n_clusters=2),CLUSTER_4,CLUSTER_11
kmeans,"sklearn.cluster.KMeans(n_clusters=2,random_state=0)",CLUSTER_4,CLUSTER_11
df,"pandas.read_csv('CSV\\mycsv.csv',header=0)",CLUSTER_4,CLUSTER_11
df,pandas.read_csv('CSV\\sorted_mycsv.csv'),CLUSTER_4,CLUSTER_11
dict,"pandas.read_csv('CSV//mycsv.csv',header=0,index_col=0,squeeze=True)",CLUSTER_4,CLUSTER_11
sunspot,pandas.read_csv('dados/sunspot.csv'),CLUSTER_1,CLUSTER_3
airline,pandas.read_csv('dados/airline_passengers.csv'),CLUSTER_1,CLUSTER_3
aws,pandas.read_csv('dados/wine_sales.csv'),CLUSTER_1,CLUSTER_3
sp500,pandas.read_csv('dados/sp500.csv'),CLUSTER_1,CLUSTER_3
execucoes,numpy.arange(qtd_execucoes),CLUSTER_1,CLUSTER_3
neuronios,"numpy.arange(2,26)",CLUSTER_1,CLUSTER_3
dim_tot,numpy.array(parameter.shape),CLUSTER_1,CLUSTER_3
W1_dim,numpy.array(W1.shape),CLUSTER_1,CLUSTER_3
b1_dim,numpy.array(b1.shape),CLUSTER_1,CLUSTER_3
W2_dim,numpy.array(W2.shape),CLUSTER_1,CLUSTER_3
b2_dim,numpy.array(b2.shape),CLUSTER_1,CLUSTER_3
velocidade,"numpy.zeros((qtd_particulas,atributos_dim_sum)",CLUSTER_1,CLUSTER_3
pbest,"numpy.zeros((qtd_particulas,atributos_dim_sum)",CLUSTER_1,CLUSTER_3
mse_treino,"numpy.zeros((qtd_execucoes,len(y_I)",CLUSTER_1,CLUSTER_3
mse_teste,"numpy.zeros((qtd_execucoes,len(y_I)",CLUSTER_1,CLUSTER_3
pos_indexes,numpy.where(diffs>0),CLUSTER_1,CLUSTER_3
neg_indexes,numpy.where(diffs<0),CLUSTER_1,CLUSTER_3
zero_indexes,numpy.where(diffs==0),CLUSTER_1,CLUSTER_3
params_stack,numpy.concatenate(tuple(params_list),CLUSTER_1,CLUSTER_3
Z1,"numpy.dot(W1,X)",CLUSTER_1,CLUSTER_3
Z2,"numpy.dot(W2,A1)",CLUSTER_1,CLUSTER_3
dZ1,"numpy.dot(W2.T,dZ2)",CLUSTER_1,CLUSTER_3
step_size[neg_indexes],"numpy.maximum(step_size[neg_indexes]*learning_rate_min,step_size.min()",CLUSTER_1,CLUSTER_3
step_size[pos_indexes],"numpy.minimum(step_size[pos_indexes]*learning_rate_max,step_size.max()",CLUSTER_1,CLUSTER_3
diffs,"numpy.multiply(grad_old,grad_new)",CLUSTER_1,CLUSTER_3
grad_new[pos_indexes],numpy.multiply(-np.sign(grad_new[pos_indexes]),CLUSTER_1,CLUSTER_3
grad_new[zero_indexes],numpy.multiply(-np.sign(grad_new[zero_indexes]),CLUSTER_1,CLUSTER_3
X_treino_temp,"numpy.vstack((X_treino,X_validacao)",CLUSTER_1,CLUSTER_3
y_treino_temp,"numpy.vstack((y_treino,y_validacao)",CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tic,time.time(),CLUSTER_1,CLUSTER_3
tac,time.time(),CLUSTER_1,CLUSTER_3
tips,seaborn.load_dataset('tips'),CLUSTER_10,CLUSTER_4
self.beta_hat_z,numpy.zeros(self.z.shape[1]),CLUSTER_1,CLUSTER_3
self.gamma,"numpy.zeros((x.shape[1],x.shape[1])",CLUSTER_1,CLUSTER_3
self.z,numpy.zeros_like(x),CLUSTER_1,CLUSTER_3
std_error,numpy.sqrt(np.var((y_test-y_hat),CLUSTER_1,CLUSTER_3
y_hat,"numpy.hstack([np.ones_like(x_test[:,0])",CLUSTER_1,CLUSTER_3
D,"numpy.diag(np.linalg.norm(self.z,axis=0)",CLUSTER_1,CLUSTER_3
self.beta_hat_x,numpy.linalg.inv(self.gamma),CLUSTER_1,CLUSTER_3
self.beta_hat,numpy.linalg.inv(self.R),CLUSTER_1,CLUSTER_3
ls_dframe,"pandas.DataFrame({'LS':np.append(lsreg.beta_hat,np.array([mse,std_error])",CLUSTER_1,CLUSTER_3
df_train_cat_data,pandas.DataFrame(df_train_categorical_values_encenc.toarray(),CLUSTER_4,CLUSTER_0
df_test_cat_data,pandas.DataFrame(df_test_categorical_values_encenc.toarray(),CLUSTER_4,CLUSTER_0
df_train,"pandas.read_csv(""UNSW_NB15_training-set.csv"",header=None,names=col_names)",CLUSTER_4,CLUSTER_0
df_test,"pandas.read_csv(""UNSW_NB15_testing-set.csv"",header=None,names=col_names)",CLUSTER_4,CLUSTER_0
ohe,sklearn.preprocessing.OneHotEncoder(),CLUSTER_4,CLUSTER_0
scaler1,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
scaler2,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
scaler15,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
scaler16,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=0.95),CLUSTER_4,CLUSTER_0
rf_Generic,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_0
rf_Shellcode,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(classifier,X,y,cv=num_cv)",CLUSTER_4,CLUSTER_0
recall,"sklearn.model_selection.cross_val_score(classifier,X,y,cv=num_cv,scoring='recall_weighted')",CLUSTER_4,CLUSTER_0
precision,"sklearn.model_selection.cross_val_score(classifier,X,y,cv=num_cv,scoring='precision_weighted')",CLUSTER_4,CLUSTER_0
f1,"sklearn.model_selection.cross_val_score(classifier,X,y,scoring='f1_weighted',cv=num_cv)",CLUSTER_4,CLUSTER_0
index_offset,numpy.arange(num_labels),CLUSTER_2,CLUSTER_7
labels_one_hot,"numpy.zeros((num_labels,num_classes)",CLUSTER_2,CLUSTER_7
start_time,time.time(),CLUSTER_2,CLUSTER_7
duration,time.time(),CLUSTER_2,CLUSTER_7
trips['route'],numpy.array(paths),CLUSTER_1,CLUSTER_3
nodes_df,"pandas.DataFrame(columns=['station_id','ox_node','region'])",CLUSTER_1,CLUSTER_3
temp_df,"pandas.DataFrame({'station_id':station_ids,
'ox_node':nodes_list,
'region':region_name})",CLUSTER_1,CLUSTER_3
trips,"pandas.read_csv(""../data/202002-baywheels-tripdata.csv"",low_memory=False)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,6)",CLUSTER_1,CLUSTER_3
mean_price,numpy.mean((prices),CLUSTER_5,CLUSTER_1
std_price,numpy.std((prices),CLUSTER_5,CLUSTER_1
median_price,numpy.median((prices),CLUSTER_5,CLUSTER_1
data,pandas.read_csv('housing.csv'),CLUSTER_5,CLUSTER_1
score,"sklearn.metrics.r2_score(y_true,y_predict)",CLUSTER_5,CLUSTER_1
regressor,sklearn.tree.DecisionTreeRegressor(),CLUSTER_5,CLUSTER_1
scoring_fnc,sklearn.metrics.make_scorer(performance_metric),CLUSTER_5,CLUSTER_1
Summary_df,"pandas.DataFrame({""Employees_Per_Title"":title_count_df,""Total_Salary_Per_Title"":salary_sum_df,""Avg_salary"":avg_salary_title})",CLUSTER_1,CLUSTER_3
merge_table,"pandas.merge(sal_df,emp_df,on='emp_no')",CLUSTER_1,CLUSTER_3
merge_table2,"pandas.merge(titles_df,merge_table,on='emp_no')",CLUSTER_1,CLUSTER_3
emp_df,"pandas.read_sql_table(table_name,engine)",CLUSTER_1,CLUSTER_3
sal_df,"pandas.read_sql_table(table_name,engine)",CLUSTER_1,CLUSTER_3
titles_df,"pandas.read_sql_table(table_name,engine)",CLUSTER_1,CLUSTER_3
literature,"pandas.DataFrame(data={
'Tarantula':[13.93,41.80,5.74,9.84,8.20,7.38,0.82,0.82,4.10,7.38,0.00],
'RankCPbest':[41.94,31.45,13.71,2.42,2.42,5.65,1.61,0.0,0.8,0.0,0.0],
'RankCPworst':[17.74,27.42,25.81,4.84,4.84,8.06,2.42,5.65,2.42,0.81,0.0]
})",CLUSTER_1,CLUSTER_3
data,pandas.concat([version.results(),CLUSTER_1,CLUSTER_3
data,pandas.concat([version.results(),CLUSTER_1,CLUSTER_3
data,pandas.concat([version.results(),CLUSTER_1,CLUSTER_3
data,pandas.concat([version.results(),CLUSTER_1,CLUSTER_3
self.limits_,numpy.array(limits),CLUSTER_1,CLUSTER_3
limits,"numpy.array([x/100forxin[1,10,20,30,40,50,60,70,80,90,100]])",CLUSTER_1,CLUSTER_3
lows,"numpy.roll(limits,1)",CLUSTER_1,CLUSTER_3
shifted,"numpy.roll(cummulative,1)",CLUSTER_1,CLUSTER_3
x,"numpy.linspace(0,abs_rank_max,abs_rank_max)",CLUSTER_1,CLUSTER_3
x,"numpy.linspace(0,1,self.exam_res_)",CLUSTER_1,CLUSTER_3
fig,"matplotlib.pyplot.figure(figsize=figsize(0.95,0.5)",CLUSTER_1,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(nrows=2,ncols=2,figsize=figsize(1,0.75)",CLUSTER_1,CLUSTER_3
temps_df,"pandas.DataFrame(temps,columns=['Fahrenheit','Celsius'])",CLUSTER_8,CLUSTER_4
bmc,pandas.read_csv('temperature-2020.csv'),CLUSTER_8,CLUSTER_4
nyc,pandas.read_csv('ave_hi_nyc_jan_1895-2018.csv'),CLUSTER_8,CLUSTER_4
linear_regression,"scipy.stats.linregress(x=nyc.Date,y=nyc.Temperature)",CLUSTER_8,CLUSTER_4
axes,"seaborn.regplot(x=nyc.Date,y=nyc.Temperature)",CLUSTER_8,CLUSTER_4
"X,y","sklearn.datasets.make_moons(n_samples=nb,noise=0.15,random_state=0)",CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,y,test_size=0.2,random_state=1)",CLUSTER_5,CLUSTER_10
knn,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=11,p=2,metric='minkowski')",CLUSTER_5,CLUSTER_10
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_10
svm1,"sklearn.svm.SVC(kernel='rbf',random_state=0,gamma=0.2,C=10.0)",CLUSTER_5,CLUSTER_10
svm2,"sklearn.svm.SVC(kernel='linear',random_state=0,C=1000.0)",CLUSTER_5,CLUSTER_10
svm3,sklearn.svm.SVC(kernel='sigmoid'),CLUSTER_5,CLUSTER_10
svm4,"sklearn.svm.SVC(random_state=0,C=C[i],gamma=gamma[j])",CLUSTER_5,CLUSTER_10
y_combined,"numpy.hstack((y_train,y_test)",CLUSTER_5,CLUSTER_10
X_combined_std,"numpy.vstack((X_train_std,X_test_std)",CLUSTER_5,CLUSTER_10
"xx1,xx2","numpy.meshgrid(np.arange(x1_min,x1_max,resolution)",CLUSTER_5,CLUSTER_10
max_accu,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_5,CLUSTER_10
LR,"sklearn.linear_model.LogisticRegression(C=1000.0,random_state=0,solver='liblinear')",CLUSTER_5,CLUSTER_10
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(article_df.content,article_df.category,test_size=0.1,random_state=1)",CLUSTER_8,CLUSTER_1
clf,"sklearn.pipeline.Pipeline([
('vect',TfidfVectorizer()",CLUSTER_8,CLUSTER_1
article_df,"pandas.read_pickle(""article_2016-06-01.plk"")",CLUSTER_8,CLUSTER_1
	features,numpy.zeros(6),CLUSTER_5,CLUSTER_1
	class_labels,numpy.zeros(1),CLUSTER_5,CLUSTER_1
	df,"pandas.read_csv(datapath,sep=',',header=None)",CLUSTER_5,CLUSTER_1
	model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=xNN),CLUSTER_5,CLUSTER_1
	model,sklearn.naive_bayes.GaussianNB(),CLUSTER_5,CLUSTER_1
tmp,pandas.DataFrame({'date_int':tmp.date.values.astype(np.int64),CLUSTER_11,CLUSTER_3
non_match_close,"pandas.merge(left=X_data_close,
left_on='date',
right=online_X_close.rename({'close':'online_close'},axis=1)",CLUSTER_11,CLUSTER_3
X_sym_compare,"pandas.merge(left=X_data.loc[mask],
left_on=['date'],
right=online_X_sample,
right_on=['date'],
how='left')",CLUSTER_11,CLUSTER_3
X_data,pandas.read_csv('X_data.zip'),CLUSTER_11,CLUSTER_3
X_data['date'],pandas.to_datetime(X_data.date),CLUSTER_11,CLUSTER_3
last_trading_day_week['dt'],pandas.to_datetime(last_trading_day_week.date),CLUSTER_11,CLUSTER_3
online_X_data['storedatetime'],datetime.datetime.now(pytz.timezone('Australia/Sydney'),CLUSTER_11,CLUSTER_3
train_balanced,pandas.DataFrame(columns=df.columns),CLUSTER_5,CLUSTER_1
validate_balanced,pandas.DataFrame(columns=df.columns),CLUSTER_5,CLUSTER_1
test_balanced,pandas.DataFrame(columns=df.columns),CLUSTER_5,CLUSTER_1
df,"pandas.read_csv('../datasets/protLigBindDB_'+x+'_binned',skiprows=1)",CLUSTER_5,CLUSTER_1
"temp_train,temp_rest",sklearn.model_selection.train_test_split(temp_df.sample(y),CLUSTER_5,CLUSTER_1
"temp_validate,temp_test","sklearn.model_selection.train_test_split(temp_rest,test_size=0.5)",CLUSTER_5,CLUSTER_1
"train,rest","sklearn.model_selection.train_test_split(df,test_size=0.4)",CLUSTER_5,CLUSTER_1
"validate,test","sklearn.model_selection.train_test_split(rest,test_size=0.5)",CLUSTER_5,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(estimator=classifier,X=validate_x,y=validate_y,cv=10)",CLUSTER_5,CLUSTER_1
classifier,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=10,weights='uniform',
algorithm='brute',metric='minkowski',
p=2,n_jobs=1)",CLUSTER_5,CLUSTER_1
classifier,"sklearn.svm.SVC(C=1,kernel='linear',probability=False,
shrinking=True,max_iter=-1)",CLUSTER_5,CLUSTER_1
classifier,"sklearn.svm.SVC(C=1,kernel='rbf',probability=False,
shrinking=True,max_iter=-1)",CLUSTER_5,CLUSTER_1
classifier,"sklearn.ensemble.RandomForestClassifier(n_estimators=20,criterion='entropy',
max_features=None,max_depth=None,
min_samples_split=2,min_samples_leaf=1,
max_leaf_nodes=None,bootstrap=True)",CLUSTER_5,CLUSTER_1
classifier,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(100,)",CLUSTER_5,CLUSTER_1
mi,pandas.Series(mi),CLUSTER_7,CLUSTER_5
mi,pandas.Series(mi),CLUSTER_7,CLUSTER_5
data,"pandas.read_csv('paribas.csv',nrows=50000)",CLUSTER_7,CLUSTER_5
data,pandas.read_csv('houseprice.csv'),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
data.drop(labels=['target','ID'],axis=1)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
data.drop(labels=['SalePrice'],axis=1)",CLUSTER_7,CLUSTER_5
mi,sklearn.feature_selection.mutual_info_classif(X_train.fillna(0),CLUSTER_7,CLUSTER_5
mi,sklearn.feature_selection.mutual_info_regression(X_train.fillna(0),CLUSTER_7,CLUSTER_5
sel_,"sklearn.feature_selection.SelectKBest(mutual_info_classif,k=10)",CLUSTER_7,CLUSTER_5
sel_,"sklearn.feature_selection.SelectPercentile(mutual_info_regression,percentile=10)",CLUSTER_7,CLUSTER_5
cars,pandas.read_csv(address),CLUSTER_7,CLUSTER_3
data,"pandas.DataFrame(data,columns=['values','labels'])",CLUSTER_8,CLUSTER_3
k_neighbors,numpy.array(k_neighbors),CLUSTER_8,CLUSTER_3
euclidean_distance,"numpy.sqrt(np.sum(np.power(x_test[i]-x_train[j],2)",CLUSTER_8,CLUSTER_3
classes_uniques,numpy.unique(list_classes),CLUSTER_8,CLUSTER_3
genus_total,pandas.DataFrame(df_th.Genus.value_counts(),CLUSTER_7,CLUSTER_8
genus_usa,pandas.DataFrame(df_th_usa.Genus.value_counts(),CLUSTER_7,CLUSTER_8
genus_total_ex,pandas.DataFrame(df_th.Genus.value_counts(),CLUSTER_7,CLUSTER_8
genus_usa_ex,pandas.DataFrame(df_th_usa_ex.Genus.value_counts(),CLUSTER_7,CLUSTER_8
new_df,pandas.DataFrame(df_w_ex.Exporter.value_counts(),CLUSTER_7,CLUSTER_8
genus_merge,"pandas.merge(genus_total,genus_usa,on='index')",CLUSTER_7,CLUSTER_8
genus_merge_ex,"pandas.merge(genus_total_ex,genus_usa_ex,on='index',how='outer')",CLUSTER_7,CLUSTER_8
df,pandas.read_csv('comptab_2018-01-2916_00_comma_separated.csv'),CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(16,6)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(10,7)",CLUSTER_7,CLUSTER_8
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(15,5)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(15,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(15,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(15,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(15,7)",CLUSTER_7,CLUSTER_8
"f,ax","matplotlib.pyplot.subplots(figsize=(15,7)",CLUSTER_7,CLUSTER_8
p,"numpy.dstack([df_duplicate[""question1""],df_duplicate[""question2""]])",CLUSTER_0,CLUSTER_8
n,"numpy.dstack([dfp_nonduplicate[""question1""],dfp_nonduplicate[""question2""]])",CLUSTER_0,CLUSTER_8
df,"pandas.DataFrame({'x':tsne2d[:,0],'y':tsne2d[:,1],'label':y})",CLUSTER_0,CLUSTER_8
df,"pandas.read_csv(""df_fe_without_preprocessing_train.csv"",encoding='latin-1')",CLUSTER_0,CLUSTER_8
df,"pandas.read_csv(""nlp_features_train.csv"",encoding='latin-1')",CLUSTER_0,CLUSTER_8
df,"pandas.read_csv(""train.csv"")",CLUSTER_0,CLUSTER_8
x,"re.sub(r""([0-9]+)",CLUSTER_0,CLUSTER_8
x,"re.sub(r""([0-9]+)",CLUSTER_0,CLUSTER_8
x,"re.sub(pattern,'',x)",CLUSTER_0,CLUSTER_8
pattern,re.compile('\W'),CLUSTER_0,CLUSTER_8
tsne2d,"sklearn.manifold.TSNE(
n_components=2,
init='random',
random_state=101,
method='barnes_hut',
n_iter=1000,
verbose=2,
angle=0.5
)",CLUSTER_0,CLUSTER_8
tsne3d,"sklearn.manifold.TSNE(
n_components=3,
init='random',
random_state=101,
method='barnes_hut',
n_iter=1000,
verbose=2,
angle=0.5
)",CLUSTER_0,CLUSTER_8
X,sklearn.preprocessing.MinMaxScaler(),CLUSTER_0,CLUSTER_8
X,numpy.arange(len(Slist),CLUSTER_1,CLUSTER_9
Y,numpy.arange(10),CLUSTER_1,CLUSTER_9
A,numpy.arange(len(Slist),CLUSTER_1,CLUSTER_9
B,numpy.arange(10),CLUSTER_1,CLUSTER_9
D,numpy.arange(19),CLUSTER_1,CLUSTER_9
E,numpy.arange(10),CLUSTER_1,CLUSTER_9
G,numpy.arange(19),CLUSTER_1,CLUSTER_9
H,numpy.arange(10),CLUSTER_1,CLUSTER_9
Z,numpy.array(Z),CLUSTER_1,CLUSTER_9
C,numpy.array(C),CLUSTER_1,CLUSTER_9
F,numpy.array(F),CLUSTER_1,CLUSTER_9
I,numpy.array(I),CLUSTER_1,CLUSTER_9
"X,Y","numpy.meshgrid(X,Y)",CLUSTER_1,CLUSTER_9
"A,B","numpy.meshgrid(A,B)",CLUSTER_1,CLUSTER_9
"D,E","numpy.meshgrid(D,E)",CLUSTER_1,CLUSTER_9
"G,H","numpy.meshgrid(G,H)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(20.0,12.0)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(20.0,12.0)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(20.0,12.0)",CLUSTER_1,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(20.0,12.0)",CLUSTER_1,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_1,CLUSTER_9
"v[""dW""+str(l+1)]","numpy.zeros((parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"v[""db""+str(l+1)]","numpy.zeros((parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
"v[""dW""+str(l+1)]","numpy.zeros((parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"v[""db""+str(l+1)]","numpy.zeros((parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
"s[""dW""+str(l+1)]","numpy.zeros((parameters[""W""+str(l+1)",CLUSTER_5,CLUSTER_9
"s[""db""+str(l+1)]","numpy.zeros((parameters[""b""+str(l+1)",CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
axes,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9
num_complete_minibatches,math.floor(m/mini_batch_size),CLUSTER_5,CLUSTER_9
new_shape,numpy.prod(shape[1:]),CLUSTER_4,CLUSTER_7
encoder,sklearn.preprocessing.LabelBinarizer(),CLUSTER_4,CLUSTER_7
df,"pandas.read_csv(""winequality-red.csv"")",CLUSTER_7,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(max_depth=7),CLUSTER_7,CLUSTER_5
clf,sklearn.tree.DecisionTreeClassifier(max_depth=depth),CLUSTER_7,CLUSTER_5
train_accuracy,"sklearn.metrics.accuracy_score(df_train.quality,train_predictions)",CLUSTER_7,CLUSTER_5
test_accuracy,"sklearn.metrics.accuracy_score(df_test.quality,test_predictions)",CLUSTER_7,CLUSTER_5
train_accuracy,"sklearn.metrics.accuracy_score(
df_train.quality,train_predictions)",CLUSTER_7,CLUSTER_5
test_accuracy,"sklearn.metrics.accuracy_score(
df_test.quality,test_predictions)",CLUSTER_7,CLUSTER_5
users_df,pandas.read_csv('DataSources\my_csv.csv'),CLUSTER_8,CLUSTER_3
users_df,"pandas.read_csv('DataSources\my_csv_idx.csv',index_col=0)",CLUSTER_8,CLUSTER_3
users_df,"pandas.read_csv('DataSources\my_tab_delim.txt',sep='\t')",CLUSTER_8,CLUSTER_3
users_df,"pandas.read_csv('DataSources\my_custom_delim.txt',sep='@')",CLUSTER_8,CLUSTER_3
users_df,"pandas.read_csv('DataSources\my_quoted_data.txt',quoting=0)",CLUSTER_8,CLUSTER_3
users_df,pandas.read_excel('DataSources\my_excel.xlsx'),CLUSTER_8,CLUSTER_3
users_df,"pandas.read_html(url,header=0)",CLUSTER_8,CLUSTER_3
users_df,pandas.read_json('DataSources\my_json.json'),CLUSTER_8,CLUSTER_3
user_df,pandas.read_orc('DataSources\my_orc'),CLUSTER_8,CLUSTER_3
users_df,"pandas.read_parquet('DataSources\my_parquet.parquet',engine='pyarrow')",CLUSTER_8,CLUSTER_3
users_df,"pandas.read_parquet('DataSources\my_parquet.parquet',engine='fastparquet')",CLUSTER_8,CLUSTER_3
my_df,"pandas.read_sql(query,connection)",CLUSTER_8,CLUSTER_3
my_df,"pandas.read_sql(query,connection,params={'mysql'})",CLUSTER_8,CLUSTER_3
my_df,"pandas.read_sql(query,connection,params={'mysql','information_schema'})",CLUSTER_8,CLUSTER_3
users_df,pandas.read_table('DataSources\my_tab_delim.txt'),CLUSTER_8,CLUSTER_3
audioInfo_DF,"pandas.DataFrame(columns=['label','name','path'])",CLUSTER_4,CLUSTER_11
time,"numpy.arange(0,amp.size/rate,1/rate)",CLUSTER_4,CLUSTER_11
time,"numpy.arange(0,amp.size/rate,1/rate)",CLUSTER_4,CLUSTER_11
ax.set(xticks,numpy.arange(cm.shape[1]),CLUSTER_4,CLUSTER_11
yticks,numpy.arange(cm.shape[0]),CLUSTER_4,CLUSTER_11
freqAmp,numpy.array([freqAmp[i*downSample:(i*downSample+downSample),CLUSTER_4,CLUSTER_11
freqList,numpy.array((range(len(freqList),CLUSTER_4,CLUSTER_11
X,numpy.array(X),CLUSTER_4,CLUSTER_11
y,numpy.array(y),CLUSTER_4,CLUSTER_11
peakProminenceOrder,numpy.argsort(prop['prominences']),CLUSTER_4,CLUSTER_11
acc,numpy.mean(scores),CLUSTER_4,CLUSTER_11
"peaks,prop","find_peaks(freqAmp,height=numpy.percentile(freqAmp,95)",CLUSTER_4,CLUSTER_11
medPeak,numpy.median(freqList[peaks]),CLUSTER_4,CLUSTER_11
catCounts,collections.Counter(),CLUSTER_4,CLUSTER_11
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_11
freqList,scipy.fftpack.fftfreq(len(amp),CLUSTER_4,CLUSTER_11
amp,"scipy.signal.medfilt(amp,11)",CLUSTER_4,CLUSTER_11
"peaks,prop","scipy.signal.find_peaks(freqAmp,height=np.percentile(freqAmp,95)",CLUSTER_4,CLUSTER_11
cv,sklearn.model_selection.KFold(n_splits=10),CLUSTER_4,CLUSTER_11
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=parPair[0],criterion=parPair[1],max_depth=parPair[2])",CLUSTER_4,CLUSTER_11
model,"sklearn.svm.SVC(C=parPair[0],kernel=parPair[1],gamma='auto')",CLUSTER_4,CLUSTER_11
Xnorm,sklearn.preprocessing.normalize(X),CLUSTER_4,CLUSTER_11
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(Xnorm,y,test_size=0.33,random_state=42)",CLUSTER_4,CLUSTER_11
cm,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_4,CLUSTER_11
A_e,"numpy.array([[10.,0.]])",CLUSTER_7,CLUSTER_3
b_e,numpy.array([[.5]]),CLUSTER_7,CLUSTER_3
x,"numpy.array([[-1.,0,1.,2.],
[0.,1.,2.,3.]])",CLUSTER_7,CLUSTER_3
Yg,numpy.zeros(train_dataset.shape[1]),CLUSTER_7,CLUSTER_3
A,numpy.zeros(Nx*Ny),CLUSTER_7,CLUSTER_3
b,numpy.zeros(Ny),CLUSTER_7,CLUSTER_3
ones,numpy.ones(Nt),CLUSTER_7,CLUSTER_3
y,"numpy.prod(y,axis=0)",CLUSTER_7,CLUSTER_3
J,numpy.sum(-y*np.log(S),CLUSTER_7,CLUSTER_3
_,"matplotlib.pyplot.plot([-100,100],[-100,100])",CLUSTER_7,CLUSTER_3
_,"matplotlib.pyplot.ylabel(""Count"")",CLUSTER_7,CLUSTER_3
compare,"pandas.DataFrame({'buy_pred':test_predictions[:,0],
'buy_label':test_labels.as_matrix()",CLUSTER_7,CLUSTER_3
tmp,pandas.read_csv('/Users/felipe/bitcoin/data/{}-training.csv'.format(str(date),CLUSTER_7,CLUSTER_3
sub_train,pandas.DataFrame(app_train['WEEKDAY_APPR_PROCESS_START']),CLUSTER_8,CLUSTER_11
oneHotCode_Test,pandas.get_dummies(sub_train),CLUSTER_8,CLUSTER_11
app_train,pandas.read_csv(f_app_train),CLUSTER_8,CLUSTER_11
X,"pandas.concat([X,pd.get_dummies(df['cntry'])",CLUSTER_5,CLUSTER_9
X3,"pandas.concat([X3,pd.get_dummies(df['cntry'])",CLUSTER_5,CLUSTER_9
X2,"pandas.concat([X2,pd.get_dummies(df['cntry'])",CLUSTER_5,CLUSTER_9
X3,"pandas.concat([X3,pd.get_dummies(df['cntry'])",CLUSTER_5,CLUSTER_9
table_train,"pandas.crosstab(y_train,predict_train,margins=True)",CLUSTER_5,CLUSTER_9
table_test,"pandas.crosstab(y_test,predict_test,margins=True)",CLUSTER_5,CLUSTER_9
table_train,"pandas.crosstab(y3_train,predict_train,margins=True)",CLUSTER_5,CLUSTER_9
table_test,"pandas.crosstab(y3_test,predict_test,margins=True)",CLUSTER_5,CLUSTER_9
table_train,"pandas.crosstab(y2_train,predict_train,margins=True)",CLUSTER_5,CLUSTER_9
table_test,"pandas.crosstab(y2_test,predict_test,margins=True)",CLUSTER_5,CLUSTER_9
table_train,"pandas.crosstab(y_train,predict_train,margins=True)",CLUSTER_5,CLUSTER_9
table_test,"pandas.crosstab(y_test,predict_test,margins=True)",CLUSTER_5,CLUSTER_9
table_train,"pandas.crosstab(y_train,predict_train,margins=True)",CLUSTER_5,CLUSTER_9
table_test,"pandas.crosstab(y_test,predict_test,margins=True)",CLUSTER_5,CLUSTER_9
table_train,"pandas.crosstab(y_train,predict_train,margins=True)",CLUSTER_5,CLUSTER_9
table_test,"pandas.crosstab(y_test,predict_test,margins=True)",CLUSTER_5,CLUSTER_9
table_train,"pandas.crosstab(y3_train,predict_train,margins=True)",CLUSTER_5,CLUSTER_9
table_test,"pandas.crosstab(y3_test,predict_test,margins=True)",CLUSTER_5,CLUSTER_9
df,"pandas.read_csv((
""/Users/gemma/Documents/datascience/data-201-resources-master/""
""ESS_practice_data/ESSdata_Thinkful.csv"")",CLUSTER_5,CLUSTER_9
pos,numpy.arange(sorted_idx.shape[0]),CLUSTER_5,CLUSTER_9
sorted_idx,numpy.argsort(feature_importance),CLUSTER_5,CLUSTER_9
clf,sklearn.ensemble.GradientBoostingClassifier(**params),CLUSTER_5,CLUSTER_9
clf,sklearn.ensemble.GradientBoostingClassifier(**params),CLUSTER_5,CLUSTER_9
clf,sklearn.ensemble.GradientBoostingClassifier(**params),CLUSTER_5,CLUSTER_9
clf,sklearn.ensemble.GradientBoostingClassifier(**params),CLUSTER_5,CLUSTER_9
clf,sklearn.ensemble.GradientBoostingClassifier(**params),CLUSTER_5,CLUSTER_9
clf,sklearn.ensemble.GradientBoostingClassifier(**params),CLUSTER_5,CLUSTER_9
clf,sklearn.ensemble.GradientBoostingClassifier(**params),CLUSTER_5,CLUSTER_9
"X_train2,X_test2,y_train2,y_test2","sklearn.model_selection.train_test_split(data2,target2,test_size=0.2,random_state=20)",CLUSTER_5,CLUSTER_9
"defSIR(N,beta,gamma,I0","1,R0=0,t=numpy.arange(0,365)",CLUSTER_1,CLUSTER_9
"defSIR_2(N,beta1,gamma,tau","10**6,t_thresh=14,I0=1,R0=0,t=numpy.arange(0,365)",CLUSTER_1,CLUSTER_9
xdata_2,"numpy.arange(0,len(ydata_inf_2)",CLUSTER_1,CLUSTER_9
xgrid,"numpy.arange(0.01,1.3,0.01)",CLUSTER_1,CLUSTER_9
xdata_2,"numpy.arange(0,len(ydata_inf_2)",CLUSTER_1,CLUSTER_9
"defminimizer_gen(t1,t2,xgrid","numpy.arange(0.1,5,0.01)",CLUSTER_1,CLUSTER_9
"defSIR_2_future(N,beta1,gamma,newR0,tau","10**6,t_thresh=14,I0=1,R0=0,t=numpy.arange(0,365)",CLUSTER_1,CLUSTER_9
sim_res,"SIR(10**6,1/14*R0,1/14,I0=100,R0=0,t=numpy.arange(0,365)",CLUSTER_1,CLUSTER_9
R0grid,"numpy.arange(1.1,6,0.1)",CLUSTER_1,CLUSTER_9
ydata_death,numpy.array(ydata_death),CLUSTER_1,CLUSTER_9
ydata_rec,numpy.array(ydata_rec),CLUSTER_1,CLUSTER_9
ydata,numpy.array(ydata),CLUSTER_1,CLUSTER_9
ydata_inf,numpy.array(ydata-ydata_rec-ydata_death),CLUSTER_1,CLUSTER_9
ydata_incr2,numpy.array(ydata_incr2),CLUSTER_1,CLUSTER_9
ydata_death_incr2,numpy.array(ydata_death_incr2),CLUSTER_1,CLUSTER_9
ydata_rec_incr2,numpy.array(ydata_rec_incr2),CLUSTER_1,CLUSTER_9
res_scan,numpy.array(res_scan),CLUSTER_1,CLUSTER_9
par_ideal,numpy.array(df_res_scan.sort_values(by='MSE'),CLUSTER_1,CLUSTER_9
ydata_inf_2,numpy.array(ydata_inf[t1:t2]),CLUSTER_1,CLUSTER_9
ydata_inf_2,numpy.array(ydata_inf[today-5:today]),CLUSTER_1,CLUSTER_9
r0_time,numpy.array(r0_time),CLUSTER_1,CLUSTER_9
res_scan,numpy.array(res_scan),CLUSTER_1,CLUSTER_9
par_ideal,numpy.array(df_res_scan.sort_values(by='MSE'),CLUSTER_1,CLUSTER_9
errperc,numpy.mean(np.abs((ydata_inf-i_vec[0:len(ydata_inf),CLUSTER_1,CLUSTER_9
errperc,numpy.mean(np.abs((ydata_inf-i_vec[0:len(ydata_inf),CLUSTER_1,CLUSTER_9
stdperc,numpy.std(np.abs((ydata_inf-i_vec[0:len(ydata_inf),CLUSTER_1,CLUSTER_9
stdperc,numpy.std(np.abs((ydata_inf-i_vec[0:len(ydata_inf),CLUSTER_1,CLUSTER_9
accuracy,numpy.sum((ydata_inf-i_vec[0:len(ydata_inf),CLUSTER_1,CLUSTER_9
error,numpy.sum((ydata_inf_2-i_vec_2),CLUSTER_1,CLUSTER_9
accuracy,numpy.sum((ydata_inf-i_vec[0:len(ydata_inf),CLUSTER_1,CLUSTER_9
"S,I,R",numpy.transpose(ret),CLUSTER_1,CLUSTER_9
"S,I,R",numpy.transpose(ret),CLUSTER_1,CLUSTER_9
"S,I,R",numpy.transpose(ret),CLUSTER_1,CLUSTER_9
pesi,numpy.exp(-np.arange(len(ydata_inf),CLUSTER_1,CLUSTER_9
pesi,numpy.exp(-np.arange(len(ydata_inf),CLUSTER_1,CLUSTER_9
R0grid,"numpy.linspace(7.5,8.5,50)",CLUSTER_1,CLUSTER_9
taugrid,"numpy.linspace(25,27,200)",CLUSTER_1,CLUSTER_9
scangrid,"numpy.linspace(0,10,100)",CLUSTER_1,CLUSTER_9
scangrid,"numpy.linspace(min_val/2,min_val*2,100)",CLUSTER_1,CLUSTER_9
R0grid,"numpy.linspace(3,9,10)",CLUSTER_1,CLUSTER_9
gammagrid,"numpy.linspace(0,0.2,10)",CLUSTER_1,CLUSTER_9
taugrid,"numpy.linspace(23,35,10)",CLUSTER_1,CLUSTER_9
ttreshgrid,"numpy.linspace(0,15,5)",CLUSTER_1,CLUSTER_9
minimizer_vec,numpy.vectorize(minimizer),CLUSTER_1,CLUSTER_9
doubling_R0_vec,numpy.vectorize(doubling_R0),CLUSTER_1,CLUSTER_9
df_res_scan,pandas.DataFrame(res_scan),CLUSTER_1,CLUSTER_9
export_v2,"pandas.DataFrame({'date':t_date,'t':t,'s':s_vec,'i':i_vec,'r':r_vec})",CLUSTER_1,CLUSTER_9
df_r0,pandas.DataFrame(pd.to_datetime(np.arange(len(r0_time),CLUSTER_1,CLUSTER_9
export_forecast,"pandas.DataFrame({'date':t_date,'t':t,'R0=0.5':i_vec_future050,'R0=1':i_vec_future100,'R0=1.1':i_vec_future110,'R0=1.2':i_vec_future120})",CLUSTER_1,CLUSTER_9
df_res_scan,pandas.DataFrame(res_scan),CLUSTER_1,CLUSTER_9
t_date,"pd.to_datetime(t,unit='D',origin=pandas.Timestamp('2020-02-24')",CLUSTER_1,CLUSTER_9
t_date,"pd.to_datetime(t,unit='D',origin=pandas.Timestamp('2020-02-24')",CLUSTER_1,CLUSTER_9
data,pandas.read_csv('https://github.com/pcm-dpc/COVID-19/raw/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv'),CLUSTER_1,CLUSTER_9
t_date,"pandas.to_datetime(t,unit='D',origin=pd.Timestamp('2020-02-24')",CLUSTER_1,CLUSTER_9
t_date,"pandas.to_datetime(t,unit='D',origin=pd.Timestamp('2020-02-24')",CLUSTER_1,CLUSTER_9
xdata,pandas.to_numeric(range(data.shape[0]),CLUSTER_1,CLUSTER_9
ret,"scipy.integrate.odeint(deriv_SIR,y0,t,args=(N,beta,gamma)",CLUSTER_1,CLUSTER_9
ret,"scipy.integrate.odeint(deriv_SIR_2,y0,t,args=(N,beta1,gamma,tau,t_thresh)",CLUSTER_1,CLUSTER_9
ret,"scipy.integrate.odeint(deriv_SIR_2_future,y0,t,args=(N,beta1,gamma,newR0,tau,t_thresh)",CLUSTER_1,CLUSTER_9
time1,time.time(),CLUSTER_1,CLUSTER_9
time2,time.time(),CLUSTER_1,CLUSTER_9
time1,time.time(),CLUSTER_1,CLUSTER_9
time2,time.time(),CLUSTER_1,CLUSTER_9
plt.errorbar(x,"numpy.arange(0.1,20,1)",CLUSTER_7,CLUSTER_9
sample_mean,numpy.mean(sample),CLUSTER_7,CLUSTER_9
sample_mean,numpy.mean(sample),CLUSTER_7,CLUSTER_9
loc,numpy.mean(sampleX),CLUSTER_7,CLUSTER_9
sample_std,numpy.std(sample),CLUSTER_7,CLUSTER_9
scale,numpy.std(sampleX),CLUSTER_7,CLUSTER_9
alphavec,"numpy.arange(0,1,0.01)",CLUSTER_4,CLUSTER_11
X_new,"numpy.array([[0],[2]])",CLUSTER_4,CLUSTER_11
thetapath,numpy.array(theta_path_sgd),CLUSTER_4,CLUSTER_11
theta_path_bgd,numpy.array(theta_path_bgd),CLUSTER_4,CLUSTER_11
theta_path_sgd,numpy.array(theta_path_sgd),CLUSTER_4,CLUSTER_11
theta_path_mgd,numpy.array(theta_path_mgd),CLUSTER_4,CLUSTER_11
left_right,"numpy.array([2.9,7])",CLUSTER_4,CLUSTER_11
best_epoch,numpy.argmin(val_errors),CLUSTER_4,CLUSTER_11
min_score,numpy.mean(score),CLUSTER_4,CLUSTER_11
best_val_rmse,numpy.sqrt(val_errors[best_epoch]),CLUSTER_4,CLUSTER_11
X_new,"numpy.linspace(-3,3,100)",CLUSTER_4,CLUSTER_11
X_new,"numpy.linspace(0,3,100)",CLUSTER_4,CLUSTER_11
t,"numpy.linspace(-10,10,100)",CLUSTER_4,CLUSTER_11
X_new,"numpy.linspace(0,3,1000)",CLUSTER_4,CLUSTER_11
X_new,"numpy.linspace(0,3,1000)",CLUSTER_4,CLUSTER_11
"x0,x1","numpy.meshgrid(
np.linspace(2.9,7,500)",CLUSTER_4,CLUSTER_11
"x0,x1","numpy.meshgrid(
np.linspace(0,8,500)",CLUSTER_4,CLUSTER_11
theta_best,numpy.linalg.inv(X_b.T.dot(X_b),CLUSTER_4,CLUSTER_11
theta_best,numpy.linalg.inv(X_b.T.dot(X_b),CLUSTER_4,CLUSTER_11
theta_best,numpy.linalg.inv(X_b.T.dot(X_b),CLUSTER_4,CLUSTER_11
theta_best,numpy.linalg.inv(Q_b.T.dot(Q_b),CLUSTER_4,CLUSTER_11
"theta_best_svd,residuals,rank,s","numpy.linalg.lstsq(X_b,y,rcond=1e-6)",CLUSTER_4,CLUSTER_11
contour,"matplotlib.pyplot.contour(x0,x1,zz,cmap=plt.cm.brg)",CLUSTER_4,CLUSTER_11
contour,"matplotlib.pyplot.contour(x0,x1,zz1,cmap=plt.cm.brg)",CLUSTER_4,CLUSTER_11
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_11
sgd_reg,"sklearn.linear_model.SGDRegressor(max_iter=50,penalty=None,eta0=0.1,random_state=42)",CLUSTER_4,CLUSTER_11
sgd_reg,"sklearn.linear_model.SGDRegressor(max_iter=500,penalty=None,eta0=0.1,random_state=42)",CLUSTER_4,CLUSTER_11
sgd_reg,"sklearn.linear_model.SGDRegressor(max_iter=5000,penalty=None,eta0=0.1,random_state=42)",CLUSTER_4,CLUSTER_11
sgd_reg,"sklearn.linear_model.SGDRegressor(max_iter=1,
penalty=None,
eta0=0.0005,
warm_start=True,
learning_rate=""constant"",
random_state=42)",CLUSTER_4,CLUSTER_11
poly_features,"sklearn.preprocessing.PolynomialFeatures(degree=2,include_bias=False)",CLUSTER_4,CLUSTER_11
polybig_features,"sklearn.preprocessing.PolynomialFeatures(degree=degree,include_bias=False)",CLUSTER_4,CLUSTER_11
poly_features,"sklearn.preprocessing.PolynomialFeatures(degree=10,include_bias=False)",CLUSTER_4,CLUSTER_11
std_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_11
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_11
polynomial_regression,"sklearn.pipeline.Pipeline([
(""poly_features"",polybig_features)",CLUSTER_4,CLUSTER_11
polynomial_regression,"sklearn.pipeline.Pipeline([
(""poly_features"",PolynomialFeatures(degree=10,include_bias=False)",CLUSTER_4,CLUSTER_11
polynomial_regression,"sklearn.pipeline.Pipeline([
(""poly_features"",PolynomialFeatures(degree=2,include_bias=False)",CLUSTER_4,CLUSTER_11
polynomial_regression,"sklearn.pipeline.Pipeline([
(""poly_features"",PolynomialFeatures(degree=10,include_bias=False)",CLUSTER_4,CLUSTER_11
polynomial_regression,"sklearn.pipeline.Pipeline([
(""poly_features"",PolynomialFeatures(degree=2,include_bias=False)",CLUSTER_4,CLUSTER_11
model,"sklearn.pipeline.Pipeline([
(""poly_features"",PolynomialFeatures(degree=10,include_bias=False)",CLUSTER_4,CLUSTER_11
poly_scaler,"sklearn.pipeline.Pipeline([
(""poly_features"",PolynomialFeatures(degree=90,include_bias=False)",CLUSTER_4,CLUSTER_11
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=10)",CLUSTER_4,CLUSTER_11
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=10)",CLUSTER_4,CLUSTER_11
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X[:50],y[:50].ravel()",CLUSTER_4,CLUSTER_11
elnet,"sklearn.linear_model.ElasticNet(alpha=0.1,l1_ratio=0.5,max_iter=1000000)",CLUSTER_4,CLUSTER_11
elnet,"sklearn.linear_model.ElasticNet(alpha=alpha,l1_ratio=l1rat,normalize=True)",CLUSTER_4,CLUSTER_11
iris,sklearn.datasets.load_iris(),CLUSTER_4,CLUSTER_11
log_reg,"sklearn.linear_model.LogisticRegression(solver=""lbfgs"",random_state=42)",CLUSTER_4,CLUSTER_11
log_reg,"sklearn.linear_model.LogisticRegression(C=10**10,random_state=42)",CLUSTER_4,CLUSTER_11
softmax_reg,"sklearn.linear_model.LogisticRegression(multi_class=""multinomial"",solver=""lbfgs"",C=10,random_state=42)",CLUSTER_4,CLUSTER_11
df2,pandas.read_csv(outfile),CLUSTER_10,CLUSTER_4
df,"pandas.read_sql_query(query,conn)",CLUSTER_10,CLUSTER_4
creds,json.loads(fh.read(),CLUSTER_10,CLUSTER_4
df,"pandas.read_csv('data/auto-mpg.csv',na_values=['NA','?'])",CLUSTER_5,CLUSTER_5
score,"numpy.sqrt(metrics.mean_squared_error(pred,Y_test)",CLUSTER_5,CLUSTER_5
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=.2,random_state=42)",CLUSTER_5,CLUSTER_5
m_score,"sklearn.metrics.mean_squared_error(pred,Y_test)",CLUSTER_5,CLUSTER_5
df,pandas.read_pickle(read_file),CLUSTER_11,CLUSTER_12
df,pandas.read_pickle(read_file),CLUSTER_11,CLUSTER_12
defcompile_sentiment_scores(start_date,"datetime.date(2000,1,1),end_datetime.date=datetime.date(2000,2,1)",CLUSTER_11,CLUSTER_12
new_data,pandas.DataFrame(new_matrix),CLUSTER_5,CLUSTER_5
data_oversampled,"pandas.concat([new_data,new_data.iloc[idx]])",CLUSTER_5,CLUSTER_5
data_master,"pandas.concat([new_data,new_data.iloc[idx]])",CLUSTER_5,CLUSTER_5
original_data,"pandas.read_csv('data/Video_Games_Sales_as_at_22_Dec_2016.csv',encoding='latin1')",CLUSTER_5,CLUSTER_5
data,"pandas.read_csv('data/data_para_clasificadores.csv',encoding='latin1')",CLUSTER_5,CLUSTER_5
critic_score,"numpy.transpose(np.matrix(data[""Critic_Score""].values)",CLUSTER_5,CLUSTER_5
fiasco,"numpy.transpose(np.matrix(data[""Is_Fiasco""].values)",CLUSTER_5,CLUSTER_5
new_matrix,"numpy.hstack((platform,genre,publisher,critic_score,rating,fiasco)",CLUSTER_5,CLUSTER_5
header,"numpy.append(header,lb.classes_)",CLUSTER_5,CLUSTER_5
header,"numpy.append(header,lb.classes_)",CLUSTER_5,CLUSTER_5
header,"numpy.append(header,""Critic_Score"")",CLUSTER_5,CLUSTER_5
header,"numpy.append(header,lb.classes_)",CLUSTER_5,CLUSTER_5
header,"numpy.append(header,""Is_Fiasco"")",CLUSTER_5,CLUSTER_5
lb,sklearn.preprocessing.LabelBinarizer(),CLUSTER_5,CLUSTER_5
c12,sklearn.tree.DecisionTreeClassifier(min_samples_split=100),CLUSTER_5,CLUSTER_5
c13,sklearn.tree.DecisionTreeClassifier(min_samples_split=100),CLUSTER_5,CLUSTER_5
c14,sklearn.tree.DecisionTreeClassifier(min_samples_split=100),CLUSTER_5,CLUSTER_5
c15,sklearn.tree.DecisionTreeClassifier(min_samples_split=100),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.30,stratify=y)",CLUSTER_5,CLUSTER_5
"train,test","sklearn.model_selection.train_test_split(new_data,test_size=.30,stratify=y)",CLUSTER_5,CLUSTER_5
"train,test","sklearn.model_selection.train_test_split(new_data,test_size=.30,stratify=y)",CLUSTER_5,CLUSTER_5
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=k,scoring='f1')",CLUSTER_5,CLUSTER_5
clf6,"sklearn.ensemble.RandomForestClassifier(n_estimators=1000,max_depth=100,random_state=0)",CLUSTER_5,CLUSTER_5
maximum_price,numpy.amax(prices),CLUSTER_5,CLUSTER_1
minimum_price,numpy.amin(prices),CLUSTER_5,CLUSTER_1
mean_price,numpy.mean(prices),CLUSTER_5,CLUSTER_1
std_price,numpy.std(prices),CLUSTER_5,CLUSTER_1
median_price,numpy.median(prices),CLUSTER_5,CLUSTER_1
data,pandas.read_csv('housing.csv'),CLUSTER_5,CLUSTER_1
score,"sklearn.metrics.r2_score(y_true,y_predict)",CLUSTER_5,CLUSTER_1
scoring_fnc,sklearn.metrics.make_scorer(performance_metric),CLUSTER_5,CLUSTER_1
regressor,sklearn.tree.DecisionTreeRegressor(),CLUSTER_5,CLUSTER_1
grid,"sklearn.model_selection.GridSearchCV(regressor,params,scoring=scoring_fnc,cv=cv_sets)",CLUSTER_5,CLUSTER_1
a,scipy.optimize.brentq(lambdax:cosh(x*(p-1.0),CLUSTER_1,CLUSTER_9
train_df,"pandas.read_csv('input/fashion-mnist_train.csv',sep=',')",CLUSTER_5,CLUSTER_5
test_df,"pandas.read_csv('input/fashion-mnist_test.csv',sep=',')",CLUSTER_5,CLUSTER_5
train_data,"numpy.array(train_df,dtype='float32')",CLUSTER_5,CLUSTER_5
test_data,"numpy.array(test_df,dtype='float32')",CLUSTER_5,CLUSTER_5
correct,numpy.nonzero(predicted_classes==y_true),CLUSTER_5,CLUSTER_5
incorrect,numpy.nonzero(predicted_classes!=y_true),CLUSTER_5,CLUSTER_5
"x_train,x_validate,y_train,y_validate","sklearn.model_selection.train_test_split(x_train,y_train,test_size=0.2,random_state=12345)",CLUSTER_5,CLUSTER_5
tick_marks,numpy.arange(len(fault_label),CLUSTER_4,CLUSTER_7
y_,numpy.array([elemforelemin[line.strip(),CLUSTER_4,CLUSTER_7
indep_train_axis,"numpy.array(range(batch_size,
(len(train_losses)",CLUSTER_4,CLUSTER_7
batch_s,numpy.empty(shape),CLUSTER_4,CLUSTER_7
true_y,"numpy.argmax(test_y,axis=1)",CLUSTER_4,CLUSTER_7
indep_test_axis,"numpy.append(np.array(range(batch_size,
len(test_losses)",CLUSTER_4,CLUSTER_7
confusion_matrix,"sklearn.metrics.confusion_matrix(true_y,predictions)",CLUSTER_4,CLUSTER_7
start,"datetime.datetime(2010,1,1)",CLUSTER_11,CLUSTER_3
df_tesla,pandas.DataFrame(df.Close),CLUSTER_11,CLUSTER_3
df,pandas.DataFrame(df.Close),CLUSTER_11,CLUSTER_3
df,pandas.DataFrame(index=G.nodes(),CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame(index=[(x[0],x[1])",CLUSTER_5,CLUSTER_1
df_cn_soundarajan_hopcroft,"pandas.DataFrame(index=[(x[0],x[1])",CLUSTER_5,CLUSTER_1
df['clustering'],pandas.Series(nx.clustering(G),CLUSTER_5,CLUSTER_1
df['degree'],pandas.Series(G.degree(),CLUSTER_5,CLUSTER_1
df['degree_centrality'],pandas.Series(nx.degree_centrality(G),CLUSTER_5,CLUSTER_1
df['closeness'],"pandas.Series(nx.closeness_centrality(G,normalized=True)",CLUSTER_5,CLUSTER_1
df['betweeness'],"pandas.Series(nx.betweenness_centrality(G,normalized=True)",CLUSTER_5,CLUSTER_1
df['pr'],pandas.Series(nx.pagerank(G),CLUSTER_5,CLUSTER_1
df['is_management'],pandas.Series([is_management(node),CLUSTER_5,CLUSTER_1
predictions,"pandas.Series(test_proba,X_test.index)",CLUSTER_5,CLUSTER_1
future_connections,"pandas.read_csv('Future_Connections.csv',index_col=0,converters={0:eval})",CLUSTER_5,CLUSTER_1
clf,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=[10,5],alpha=5,
random_state=0,solver='lbfgs',verbose=0)",CLUSTER_5,CLUSTER_1
clf,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=[10,5],alpha=5,
random_state=0,solver='lbfgs',verbose=0)",CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_5,CLUSTER_1
df,"pandas.DataFrame(data,columns=[column])",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(np.hstack((data1,data2)",CLUSTER_7,CLUSTER_3
df,pandas.DataFrame(np.ceil(data),CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data,columns=[column])",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data,columns=[column])",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(Str,columns=[column])",CLUSTER_7,CLUSTER_3
userid,"pandas.DataFrame(name,columns=[""客户名称""])",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data=data,columns=[column])",CLUSTER_7,CLUSTER_3
df,"pandas.DataFrame(data=data,columns=[column])",CLUSTER_7,CLUSTER_3
bus_id,"pandas.DataFrame(bus_id,columns=[""商机编号""])",CLUSTER_7,CLUSTER_3
df1,"pandas.concat([order_quantity,create_zeros(column=""融资订单总金额"",num=50000)",CLUSTER_7,CLUSTER_3
df2,"pandas.concat([order_quantity,create_zeros(column=""是否办理过贷款"",num=num)",CLUSTER_7,CLUSTER_3
df3,"pandas.concat([order_quantity,create_nan(column=""最近一次贷款最今时长"",num=num)",CLUSTER_7,CLUSTER_3
data,"pandas.concat([bus_id,order_quantity,df1[""融资订单总金额""],df2[""是否办理过贷款""],
df3[""最近一次贷款最今时长""],consult_frequency,avg_length_call,add_wechat,
meeting_quantity,conclude_words,ten_words,eliminated_quantity,complaint_times],axis=1)",CLUSTER_7,CLUSTER_3
business_id,"pandas.read_excel(""二分类数据.xlsx"")",CLUSTER_7,CLUSTER_3
weights_sum,numpy.array(weights),CLUSTER_7,CLUSTER_3
data,"numpy.zeros((num,1)",CLUSTER_7,CLUSTER_3
data,"numpy.ceil(np.random.chisquare(df=freedom,size=num)",CLUSTER_7,CLUSTER_3
data1,"numpy.ceil(np.random.chisquare(df=freedom1,size=num1)",CLUSTER_7,CLUSTER_3
data2,"numpy.ceil(np.random.chisquare(df=freedom2,size=num2)",CLUSTER_7,CLUSTER_3
data,"numpy.ceil(np.random.gamma(shape=shape,scale=scale,size=num)",CLUSTER_7,CLUSTER_3
index1,random.sample(population=list(add_wechat.index),CLUSTER_7,CLUSTER_3
index2,random.sample(population=set(add_wechat.index),CLUSTER_7,CLUSTER_3
index3,random.sample(population=list(conclude_words.index),CLUSTER_7,CLUSTER_3
index4,random.sample(population=set(conclude_words.index),CLUSTER_7,CLUSTER_3
index5,random.sample(population=list(complaint_times.index),CLUSTER_7,CLUSTER_3
missing_data,pandas.DataFrame({'MissingRatio':all_data_na}),CLUSTER_7,CLUSTER_8
all_data,"pandas.concat((train,test)",CLUSTER_7,CLUSTER_8
train,pandas.read_csv(r'D:\Documents\ML\HousePrices\train.csv'),CLUSTER_7,CLUSTER_8
test,pandas.read_csv(r'D:\Documents\ML\HousePrices\test.csv'),CLUSTER_7,CLUSTER_8
corr,numpy.corrcoef(sub_df['DAYS_EMPLOYED']/(-365),CLUSTER_4,CLUSTER_11
corr,numpy.corrcoef(sub_df['DAYS_EMPLOYED']/(-365),CLUSTER_4,CLUSTER_11
app_train,pandas.read_csv(f_app),CLUSTER_4,CLUSTER_11
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_3,CLUSTER_10
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_3,CLUSTER_10
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_3,CLUSTER_10
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_3,CLUSTER_10
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_3,CLUSTER_10
grad_difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
ig_df,pandas.read_csv('../../data/ig_users.csv'),CLUSTER_7,CLUSTER_8
g,"seaborn.FacetGrid(ig_df[['USER_ID_INT','F_IS_BUSINESS']],hue=""F_IS_BUSINESS"",size=4,aspect=1.3)",CLUSTER_7,CLUSTER_8
lines,"matplotlib.pyplot.plot(x,mu,'-',**kwargs)",CLUSTER_7,CLUSTER_8
forest,sklearn.ensemble.RandomForestClassifier(n_estimators=40),CLUSTER_7,CLUSTER_8
forest,sklearn.ensemble.RandomForestClassifier(n_estimators=500),CLUSTER_7,CLUSTER_8
clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_8
final_forest,"sklearn.ensemble.RandomForestClassifier(min_samples_split=2,n_estimators=350,max_depth=7,min_samples_leaf=4)",CLUSTER_7,CLUSTER_8
estimators,"numpy.arange(25,350,25)",CLUSTER_7,CLUSTER_8
depth,"numpy.arange(3,25)",CLUSTER_7,CLUSTER_8
indices,numpy.argsort(importances),CLUSTER_7,CLUSTER_8
std,"numpy.std([tree.feature_importances_fortreeinforest.estimators_],
axis=0)",CLUSTER_7,CLUSTER_8
train_sizes,"numpy.linspace(0.05,1,20)",CLUSTER_7,CLUSTER_8
clf_scores[my_clf],sklearn.metrics.accuracy_score(y_test.as_matrix(),CLUSTER_7,CLUSTER_8
responseJson,json.loads(response),CLUSTER_10,CLUSTER_12
href,re.compile('^(/wiki/),CLUSTER_10,CLUSTER_12
df_spy,"pandas.merge(df_spy,df_vix,on=['date'])",CLUSTER_8,CLUSTER_3
df_spy,pandas.read_csv('../data/spy_2014_2018.csv'),CLUSTER_8,CLUSTER_3
df_vix_all,pandas.read_csv('../data/vix_2014_2018.csv'),CLUSTER_8,CLUSTER_3
df_spy['date'],pandas.to_datetime(df_spy['date']),CLUSTER_8,CLUSTER_3
df_vix['date'],pandas.to_datetime(df_vix['date']),CLUSTER_8,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_1,CLUSTER_3
Mean,pandas.DataFrame(Mean),CLUSTER_1,CLUSTER_3
StdError,pandas.DataFrame(StdError),CLUSTER_1,CLUSTER_3
Mean_Met,pandas.DataFrame(Mean_Met),CLUSTER_1,CLUSTER_3
StdError_Met,pandas.DataFrame(StdError_Met),CLUSTER_1,CLUSTER_3
Count,pandas.DataFrame(Count),CLUSTER_1,CLUSTER_3
combined_data,"pandas.merge(clinical_trial_data,mouse_drug_data,how='left',on='MouseID')",CLUSTER_1,CLUSTER_3
mouse_drug_data,pandas.read_csv(mouse_drug_data_to_load),CLUSTER_1,CLUSTER_3
clinical_trial_data,pandas.read_csv(clinical_trial_data_to_load),CLUSTER_1,CLUSTER_3
x_axis,numpy.arange(len(Munged_Mean),CLUSTER_1,CLUSTER_3
x_axis,numpy.arange(len(Munged_Mean_Met),CLUSTER_1,CLUSTER_3
x_axis,numpy.arange(len(Munged_Count),CLUSTER_1,CLUSTER_3
df,pandas.DataFrame(),CLUSTER_9,CLUSTER_2
html,requests.get(dynamic_url),CLUSTER_9,CLUSTER_2
t,time.time(),CLUSTER_4,CLUSTER_0
t2,time.time(),CLUSTER_4,CLUSTER_0
nonzeroy,numpy.array(nonzero[0]),CLUSTER_4,CLUSTER_0
nonzerox,numpy.array(nonzero[1]),CLUSTER_4,CLUSTER_0
bad_indices,numpy.where(np.isnan(X),CLUSTER_4,CLUSTER_0
hist_features,"numpy.concatenate((channel1_hist[0],channel2_hist[0],channel3_hist[0])",CLUSTER_4,CLUSTER_0
draw_img,numpy.zeros_like(img),CLUSTER_4,CLUSTER_0
heatmap_img,"numpy.zeros_like(image[:,:,0])",CLUSTER_4,CLUSTER_0
heatmap_img,"numpy.zeros_like(img[:,:,1])",CLUSTER_4,CLUSTER_0
hog_features,numpy.ravel(hog_features),CLUSTER_4,CLUSTER_0
y,numpy.hstack((np.ones(len(car_features),CLUSTER_4,CLUSTER_0
hog_features,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_4,CLUSTER_0
h_stack_features,"numpy.hstack((spatial_features,hist_features,hog_features)",CLUSTER_4,CLUSTER_0
X,"numpy.vstack((car_features,notcar_features)",CLUSTER_4,CLUSTER_0
else:feature_image,numpy.copy(image),CLUSTER_4,CLUSTER_0
imcopy,numpy.copy(img),CLUSTER_4,CLUSTER_0
orig_img,numpy.copy(img),CLUSTER_4,CLUSTER_0
channel1_hist,"numpy.histogram(img[:,:,0],bins=nbins,range=bins_range)",CLUSTER_4,CLUSTER_0
channel2_hist,"numpy.histogram(img[:,:,1],bins=nbins,range=bins_range)",CLUSTER_4,CLUSTER_0
channel3_hist,"numpy.histogram(img[:,:,2],bins=nbins,range=bins_range)",CLUSTER_4,CLUSTER_0
channel1_hist,"numpy.histogram(car_img[:,:,0],bins=32,range=(0,1)",CLUSTER_4,CLUSTER_0
channel2_hist,"numpy.histogram(car_img[:,:,1],bins=32,range=(0,1)",CLUSTER_4,CLUSTER_0
channel3_hist,"numpy.histogram(car_img[:,:,2],bins=32,range=(0,1)",CLUSTER_4,CLUSTER_0
channel1_hist,"numpy.histogram(car_img[:,:,0],bins=32,range=(0,1)",CLUSTER_4,CLUSTER_0
channel2_hist,"numpy.histogram(car_img[:,:,1],bins=32,range=(0,1)",CLUSTER_4,CLUSTER_0
channel3_hist,"numpy.histogram(car_img[:,:,2],bins=32,range=(0,1)",CLUSTER_4,CLUSTER_0
car_image,matplotlib.pyplot.imread(cars[0]),CLUSTER_4,CLUSTER_0
notcar_image,matplotlib.pyplot.imread(notcars[0]),CLUSTER_4,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(9,12)",CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(4,3,figsize=(30,30)",CLUSTER_4,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(len(scales),CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(18,18)",CLUSTER_4,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(3,2,figsize=(16,14)",CLUSTER_4,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_X,y,test_size=0.2,random_state=rand_state)",CLUSTER_4,CLUSTER_0
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_0
svc,sklearn.svm.LinearSVC(loss='hinge'),CLUSTER_4,CLUSTER_0
df,"pandas.merge(desloc,coord,left_on=""NO_MUNICIPIO_RES"",right_on=""name"",how=""left"")",CLUSTER_7,CLUSTER_5
df1,"pandas.merge(df,mapdf,left_on=""NO_MUNICIPIO"",right_on=""NM_MUNICIP"",how=""left"")",CLUSTER_7,CLUSTER_5
desloc,"pandas.read_csv(""flourish.csv"")",CLUSTER_7,CLUSTER_5
coord,"pandas.read_csv(""coordenadas.csv"")",CLUSTER_7,CLUSTER_5
kmeans,"sklearn.cluster.KMeans(n_clusters=3,init='k-means++',max_iter=300,n_init=10,random_state=0)",CLUSTER_7,CLUSTER_5
"ii,ij",numpy.array(zip(*p),CLUSTER_3,CLUSTER_10
new,"numpy.zeros((N,M)",CLUSTER_3,CLUSTER_10
idxs,numpy.where((y_test!=cls),CLUSTER_3,CLUSTER_10
feat,numpy.zeros_like(img),CLUSTER_3,CLUSTER_10
lbp,"numpy.clip(vals-img[i+1,j+1],0,1)",CLUSTER_3,CLUSTER_10
mean_feat,"numpy.mean(X_train_feats,axis=0,keepdims=True)",CLUSTER_3,CLUSTER_10
train_acc,numpy.mean(y_train==y_train_pred),CLUSTER_3,CLUSTER_10
val_acc,numpy.mean(y_val==y_val_pred),CLUSTER_3,CLUSTER_10
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_3,CLUSTER_10
mean_feat,"numpy.mean(X_train_lbp,axis=0,keepdims=True)",CLUSTER_3,CLUSTER_10
std_feat,"numpy.std(X_train_feats,axis=0,keepdims=True)",CLUSTER_3,CLUSTER_10
std_feat,"numpy.std(X_train_lbp,axis=0,keepdims=True)",CLUSTER_3,CLUSTER_10
learning_rates,"numpy.logspace(-8,-9,10)",CLUSTER_3,CLUSTER_10
X_train_feats,"numpy.hstack([X_train_feats,np.ones((X_train_feats.shape[0],1)",CLUSTER_3,CLUSTER_10
X_val_feats,"numpy.hstack([X_val_feats,np.ones((X_val_feats.shape[0],1)",CLUSTER_3,CLUSTER_10
X_test_feats,"numpy.hstack([X_test_feats,np.ones((X_test_feats.shape[0],1)",CLUSTER_3,CLUSTER_10
X_train_lbp,"numpy.hstack([X_train_lbp,np.ones((X_train_lbp.shape[0],1)",CLUSTER_3,CLUSTER_10
X_val_lbp,"numpy.hstack([X_val_lbp,np.ones((X_val_lbp.shape[0],1)",CLUSTER_3,CLUSTER_10
X_test_lbp,"numpy.hstack([X_test_lbp,np.ones((X_test_lbp.shape[0],1)",CLUSTER_3,CLUSTER_10
padded,"numpy.pad(img,((1,1)",CLUSTER_3,CLUSTER_10
padded,"numpy.pad(img,((1,1)",CLUSTER_3,CLUSTER_10
val,numpy.packbits(lbp),CLUSTER_3,CLUSTER_10
h,"numpy.histogram(v,num_bins,(0.0,256.0)",CLUSTER_3,CLUSTER_10
df_feat,"pandas.DataFrame(cancer['data'],columns=cancer['feature_names'])",CLUSTER_7,CLUSTER_5
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_7,CLUSTER_5
model,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_5
grid,sklearn.model_selection.GridSearchCV(SVC(),CLUSTER_7,CLUSTER_5
m,numpy.array(a+b.transpose(),CLUSTER_3,CLUSTER_6
a,"numpy.matrix(np.linspace(0,4,4)",CLUSTER_3,CLUSTER_6
b,"numpy.matrix(np.linspace(0,4,4)",CLUSTER_3,CLUSTER_6
submission_lgr,pandas.DataFrame(),CLUSTER_7,CLUSTER_5
submission_rf,pandas.DataFrame(),CLUSTER_7,CLUSTER_5
train_df,pandas.read_csv('./train.csv'),CLUSTER_7,CLUSTER_5
test_df,pandas.read_csv('./test.csv'),CLUSTER_7,CLUSTER_5
sample_sub_df,pandas.read_csv('./sample_submission.csv'),CLUSTER_7,CLUSTER_5
clf,sklearn.linear_model.LogisticRegression(solver='liblinear'),CLUSTER_7,CLUSTER_5
cv_results,"sklearn.model_selection.cross_validate(clf,x_train,y_train)",CLUSTER_7,CLUSTER_5
tree,sklearn.ensemble.RandomForestClassifier(),CLUSTER_7,CLUSTER_5
area,math.sqrt(s*(s-a),CLUSTER_10,CLUSTER_4
r,requests.get(qString),CLUSTER_9,CLUSTER_10
r,requests.get(qString),CLUSTER_9,CLUSTER_10
geojson,json.loads(r.text),CLUSTER_9,CLUSTER_10
tables,pandas.read_html(mars_url),CLUSTER_8,CLUSTER_12
start,time.time(),CLUSTER_4,CLUSTER_0
end,time.time(),CLUSTER_4,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_0
valid_examples,numpy.array(random.sample(range(valid_window),CLUSTER_4,CLUSTER_0
valid_examples,"numpy.append(valid_examples,
random.sample(range(1000,1000+valid_window)",CLUSTER_4,CLUSTER_0
word_counts,collections.Counter(int_words),CLUSTER_4,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(14,14)",CLUSTER_4,CLUSTER_0
tsne,sklearn.manifold.TSNE(),CLUSTER_4,CLUSTER_0
df,pandas.read_csv('2011_US_AGRI_Exports'),CLUSTER_8,CLUSTER_4
df,pandas.read_csv('2014_World_GDP'),CLUSTER_8,CLUSTER_4
df1,"pandas.DataFrame(ty,columns=['dclarity'])",CLUSTER_7,CLUSTER_5
df2,"pandas.DataFrame(ut,columns=['dcut'])",CLUSTER_7,CLUSTER_5
df3,"pandas.DataFrame(lor,columns=['dcolor'])",CLUSTER_7,CLUSTER_5
data,"pandas.concat([df,df1,df2,df3],axis='columns')",CLUSTER_7,CLUSTER_5
df,pandas.read_csv('newdiamond.csv'),CLUSTER_7,CLUSTER_5
"f,((ax1,ax2),(ax3,ax4))","matplotlib.pyplot.subplots(2,2,figsize=(20,14)",CLUSTER_7,CLUSTER_5
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_7,CLUSTER_5
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_7,CLUSTER_5
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_7,CLUSTER_5
rmse_train,"numpy.sqrt(mean_squared_error(y_train,y_train_predicted)",CLUSTER_7,CLUSTER_5
rmse_test,"numpy.sqrt(mean_squared_error(y_test,y_test_predict)",CLUSTER_7,CLUSTER_5
n_jobs,"1,train_sizes=numpy.linspace(.1,1.0,5)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_7,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_7,CLUSTER_5
poly_features,sklearn.preprocessing.PolynomialFeatures(degree=degree),CLUSTER_7,CLUSTER_5
ly_features,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_7,CLUSTER_5
poly_model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
l,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
l,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
r2_train,"sklearn.metrics.r2_score(y_train,y_train_predicted)",CLUSTER_7,CLUSTER_5
r2_test,"sklearn.metrics.r2_score(y_test,y_test_predict)",CLUSTER_7,CLUSTER_5
cv,"sklearn.model_selection.ShuffleSplit(n_splits=100,test_size=0.2,random_state=42)",CLUSTER_7,CLUSTER_5
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
estimator1,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes)",CLUSTER_7,CLUSTER_5
"X_train,X_test","sklearn.model_selection.train_test_split(data,test_size=0.3)",CLUSTER_5,CLUSTER_1
self.indices,numpy.arange(len(self.columns),CLUSTER_5,CLUSTER_1
data,pandas.read_csv('./datasets/housing.csv'),CLUSTER_5,CLUSTER_1
std,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_1
imputer,sklearn.impute.SimpleImputer(strategy='median'),CLUSTER_5,CLUSTER_1
pipeline_str,"sklearn.pipeline.Pipeline([('str_features',DataFrameSelector(['ocean_proximity'])",CLUSTER_5,CLUSTER_1
pipeline_num,"sklearn.pipeline.Pipeline([('num_features',DataFrameSelector(num_features)",CLUSTER_5,CLUSTER_1
pipeline4str,"sklearn.pipeline.Pipeline([('str_features',DataFrameSelector(['ocean_proximity'])",CLUSTER_5,CLUSTER_1
pipeline4num,"sklearn.pipeline.Pipeline([('num_features',DataFrameSelector(num_features2)",CLUSTER_5,CLUSTER_1
overall_pipeline,"sklearn.pipeline.Pipeline([('preprocess',full_pipeline)",CLUSTER_5,CLUSTER_1
full_pipeline,"sklearn.pipeline.FeatureUnion(transformer_list=[('str_pipeline',pipeline_str)",CLUSTER_5,CLUSTER_1
full_pipeline,"sklearn.pipeline.FeatureUnion(transformer_list=[('str_pipeline',pipeline4str)",CLUSTER_5,CLUSTER_1
onehotencoder,sklearn.preprocessing.OneHotEncoder(),CLUSTER_5,CLUSTER_1
clf,"sklearn.model_selection.GridSearchCV(overall_pipeline,param_grid=grid_params,cv=5)",CLUSTER_5,CLUSTER_1
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_5,CLUSTER_1
x,"numpy.linspace(0,10,size)",CLUSTER_1,CLUSTER_10
y,"numpy.linspace(0,10,size)",CLUSTER_1,CLUSTER_10
x,"numpy.linspace(0,10,size)",CLUSTER_1,CLUSTER_10
y,"numpy.linspace(0,10,size)",CLUSTER_1,CLUSTER_10
dataset,"numpy.vstack([
np.hstack([dp.get_normal_distributed_features(2,5,6,10,part_size)",CLUSTER_1,CLUSTER_10
"X,Y","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_10
"X,Y","numpy.meshgrid(x,y)",CLUSTER_1,CLUSTER_10
submission,"pandas.DataFrame({
""PassengerId"":titanic_test[""PassengerId""],
""Survived"":pred
})",CLUSTER_8,CLUSTER_1
titanic,pandas.read_csv('train.csv'),CLUSTER_8,CLUSTER_1
titanic_test,pandas.read_csv('test.csv'),CLUSTER_8,CLUSTER_1
model,sklearn.linear_model.LinearRegression(),CLUSTER_8,CLUSTER_1
df['weekday'],pandas.get_dummies(df['day']),CLUSTER_8,CLUSTER_3
"df[['not_fraud','fraud']]",pandas.get_dummies(df['fraud']),CLUSTER_8,CLUSTER_3
df,pandas.read_csv('./fraud_dataset.csv'),CLUSTER_8,CLUSTER_3
human_files,"numpy.array(glob(""lfw/*/*"")",CLUSTER_6,CLUSTER_11
dog_files,"numpy.array(glob(""dogImages/*/*/*"")",CLUSTER_6,CLUSTER_11
correct+,numpy.sum(np.squeeze(pred.eq(target.data.view_as(pred),CLUSTER_6,CLUSTER_11
distributionRating,pandas.DataFrame(),CLUSTER_1,CLUSTER_3
x,"numpy.arange(1,6)",CLUSTER_3,CLUSTER_6
JJ,"numpy.multiply.outer(J,J)",CLUSTER_3,CLUSTER_6
data,pandas.read_csv('data_linear.csv'),CLUSTER_8,CLUSTER_3
x,"pandas.DataFrame(data,columns=['Diệntích'])",CLUSTER_8,CLUSTER_3
y,"pandas.DataFrame(data,columns=['Giá'])",CLUSTER_8,CLUSTER_3
"p2,p98","numpy.percentile(brainpicarray,(5,70)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(18,16)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(18,16)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(18,16)",CLUSTER_1,CLUSTER_10
ht,matplotlib.pyplot.hist(brainpicarray.ravel(),CLUSTER_1,CLUSTER_10
ht,matplotlib.pyplot.hist(Jm.ravel(),CLUSTER_1,CLUSTER_10
ht,matplotlib.pyplot.hist(Km.ravel(),CLUSTER_1,CLUSTER_10
ht,matplotlib.pyplot.hist(Lm.ravel(),CLUSTER_1,CLUSTER_10
ht,matplotlib.pyplot.hist(img_eq.ravel(),CLUSTER_1,CLUSTER_10
ht,matplotlib.pyplot.hist(brainpicarray.ravel(),CLUSTER_1,CLUSTER_10
ht,matplotlib.pyplot.hist(img_eq2.ravel(),CLUSTER_1,CLUSTER_10
ht,matplotlib.pyplot.hist(brainpicarray.ravel(),CLUSTER_1,CLUSTER_10
ht,matplotlib.pyplot.hist(img_eq2.ravel(),CLUSTER_1,CLUSTER_10
ht,matplotlib.pyplot.hist(brainpicarray.ravel(),CLUSTER_1,CLUSTER_10
bp,matplotlib.pyplot.subplot(221),CLUSTER_1,CLUSTER_10
datelist2012,"pandas.date_range(y_2012,periods=329)",CLUSTER_11,CLUSTER_12
datelist2013,"pandas.date_range(y_2013,periods=344)",CLUSTER_11,CLUSTER_12
datelist2015,"pandas.date_range(y_2015,periods=365)",CLUSTER_11,CLUSTER_12
datelist2016,"pandas.date_range(y_2016,periods=346)",CLUSTER_11,CLUSTER_12
datelist2017,"pandas.date_range(y_2017,periods=351)",CLUSTER_11,CLUSTER_12
y_2012,datetime.date.fromisoformat('2012-02-07'),CLUSTER_11,CLUSTER_12
y_2013,datetime.date.fromisoformat('2013-01-22'),CLUSTER_11,CLUSTER_12
y_2015,datetime.date.fromisoformat('2015-01-01'),CLUSTER_11,CLUSTER_12
y_2016,datetime.date.fromisoformat('2016-01-19'),CLUSTER_11,CLUSTER_12
y_2017,datetime.date.fromisoformat('2017-01-15'),CLUSTER_11,CLUSTER_12
df_full,pandas.read_csv('AB_NYC_2019.csv'),CLUSTER_8,CLUSTER_4
listing_df,"pandas.read_csv('listings.csv.gz',compression='gzip')",CLUSTER_8,CLUSTER_4
reviews_df,"pandas.read_csv('reviews.csv.gz',compression='gzip')",CLUSTER_8,CLUSTER_4
calendar_df,"pandas.read_csv('calendar.csv.gz',compression='gzip')",CLUSTER_8,CLUSTER_4
g,"seaborn.FacetGrid(tips,col='time',size=5,aspect=.7)",CLUSTER_7,CLUSTER_10
tips,seaborn.load_dataset('tips'),CLUSTER_7,CLUSTER_10
flights,seaborn.load_dataset('flights'),CLUSTER_7,CLUSTER_10
iris,seaborn.load_dataset('iris'),CLUSTER_7,CLUSTER_10
resDf,"pandas.concat(dict_of_df,axis=0)",CLUSTER_7,CLUSTER_5
data,"pandas.read_csv('kc_house_data.csv',iterator=False,parse_dates=['date'])",CLUSTER_7,CLUSTER_5
indices,numpy.argsort(importances),CLUSTER_7,CLUSTER_5
othersMeanBB,numpy.mean(newDf['bathrooms/bedrooms']),CLUSTER_7,CLUSTER_5
othersMeanSB,numpy.mean(newDf['sqft_living/bedrooms']),CLUSTER_7,CLUSTER_5
othersStdBB,numpy.std(newDf['bathrooms/bedrooms']),CLUSTER_7,CLUSTER_5
othersStdSB,numpy.std(newDf['sqft_living/bedrooms']),CLUSTER_7,CLUSTER_5
rfStd,"numpy.std([tree.feature_importances_fortreeinrf.estimators_],axis=0)",CLUSTER_7,CLUSTER_5
"fig,((ax1,ax2),(ax3,ax4),(ax5,ax6))","matplotlib.pyplot.subplots(3,2,figsize=(12,15)",CLUSTER_7,CLUSTER_5
"fig,((ax1,ax2),(ax3,ax4),(ax5,ax6))","matplotlib.pyplot.subplots(3,2,figsize=(12,12)",CLUSTER_7,CLUSTER_5
"f,ax","matplotlib.pyplot.subplots(figsize=(16,16)",CLUSTER_7,CLUSTER_5
"fig,((ax1,ax2),(ax3,ax4),(ax5,ax6))","matplotlib.pyplot.subplots(3,2,figsize=(12,15)",CLUSTER_7,CLUSTER_5
"fig,((ax1,ax2),(ax3,ax4),(ax5,ax6))","matplotlib.pyplot.subplots(3,2,figsize=(12,12)",CLUSTER_7,CLUSTER_5
"fig,((ax1,ax2))","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_7,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(ncols=1,figsize=(12,8)",CLUSTER_7,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(ncols=1,figsize=(12,8)",CLUSTER_7,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(ncols=1,figsize=(12,8)",CLUSTER_7,CLUSTER_5
"fig,axes","matplotlib.pyplot.subplots(ncols=1,figsize=(12,8)",CLUSTER_7,CLUSTER_5
modelLRR,sklearn.linear_model.LinearRegression(n_jobs=njobs),CLUSTER_7,CLUSTER_5
modelLR1,sklearn.linear_model.LinearRegression(n_jobs=njobs),CLUSTER_7,CLUSTER_5
modelLR2,sklearn.linear_model.LinearRegression(n_jobs=njobs),CLUSTER_7,CLUSTER_5
lr,"sklearn.linear_model.LinearRegression(n_jobs=njobs,normalize=True)",CLUSTER_7,CLUSTER_5
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,max_depth=50,n_jobs=njobs)",CLUSTER_7,CLUSTER_5
knR,sklearn.model_selection.GridSearchCV(KNeighborsRegressor(),CLUSTER_7,CLUSTER_5
kn1,sklearn.model_selection.GridSearchCV(KNeighborsRegressor(),CLUSTER_7,CLUSTER_5
kn2,sklearn.model_selection.GridSearchCV(KNeighborsRegressor(),CLUSTER_7,CLUSTER_5
rfR,sklearn.model_selection.GridSearchCV(RandomForestRegressor(),CLUSTER_7,CLUSTER_5
rf1,sklearn.model_selection.GridSearchCV(RandomForestRegressor(),CLUSTER_7,CLUSTER_5
rf2,sklearn.model_selection.GridSearchCV(RandomForestRegressor(),CLUSTER_7,CLUSTER_5
"train,test","sklearn.model_selection.train_test_split(dataSel1,test_size=splitRatio,random_state=seed)",CLUSTER_7,CLUSTER_5
"train2,test2","sklearn.model_selection.train_test_split(dataSel2,test_size=splitRatio,random_state=seed)",CLUSTER_7,CLUSTER_5
"trainR,testR","sklearn.model_selection.train_test_split(dataRaw,test_size=splitRatio,random_state=seed)",CLUSTER_7,CLUSTER_5
prod_df,pandas.DataFrame(prod_dict),CLUSTER_11,CLUSTER_11
cast_df,pandas.DataFrame(cast_dict),CLUSTER_11,CLUSTER_11
gender_df,pandas.DataFrame(gender_dict),CLUSTER_11,CLUSTER_11
lang_df,pandas.DataFrame(lang_dict),CLUSTER_11,CLUSTER_11
id_df,pandas.DataFrame(id_dict),CLUSTER_11,CLUSTER_11
baseline_movie_info,"pandas.DataFrame({
'AverageMovieRevenue':[average_revenue],
'AverageMovieBudget':[average_budget],
'AverageMovieRating':[average_rating]})",CLUSTER_11,CLUSTER_11
data,"pandas.read_csv(csvpath,engine='python')",CLUSTER_11,CLUSTER_11
cpi_df,"pandas.read_csv(cpi_path,encoding='latin-1')",CLUSTER_11,CLUSTER_11
reduced_nonan['release_date'],"pandas.to_datetime(reduced_nonan['release_date'],format='%m/%d/%Y')",CLUSTER_11,CLUSTER_11
mean_line_revenue,"matplotlib.pyplot.plot(revenue_per_film,label='Mean',linestyle='--',color='r')",CLUSTER_11,CLUSTER_11
mean_line_budget,"matplotlib.pyplot.plot(budget_per_film,label='Mean',linestyle='--',color='w')",CLUSTER_11,CLUSTER_11
d1,"datetime.date(2015,3,11)",CLUSTER_10,CLUSTER_12
today,datetime.date.today(),CLUSTER_10,CLUSTER_12
t,"datetime.time(4,20,1)",CLUSTER_10,CLUSTER_12
boxes,"numpy.array([[740,620],[2070,620],[2520,1340],[2520,2060],
[1400,2780],[230,1690]])",CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(figsize=figaspect(1),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(figsize=figaspect(1),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(figsize=figaspect(1),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(figsize=figaspect(1),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(figsize=figaspect(1),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(figsize=figaspect(1),CLUSTER_1,CLUSTER_10
fig,matplotlib.pyplot.figure(figsize=figaspect(1),CLUSTER_1,CLUSTER_10
flip,numpy.array([od[sv][0][0]forsvinsv_list]),CLUSTER_1,CLUSTER_10
roll,numpy.array([od[sv][0][1]forsvinsv_list]),CLUSTER_1,CLUSTER_10
coeff3,numpy.clip(np.log10(np.abs(coeff),CLUSTER_1,CLUSTER_10
coeff_sign,numpy.sign(coeff),CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(2,figsize=(12,6)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(3,figsize=(8,6)",CLUSTER_1,CLUSTER_10
transcripts,"pandas.read_csv(""C:/UniversityofChicago/Project/MOUD/TranslatedTransripts/AllText.csv"")",CLUSTER_4,CLUSTER_11
indices,numpy.arange(data.shape[0]),CLUSTER_4,CLUSTER_11
labels,numpy.asarray(labels),CLUSTER_4,CLUSTER_11
coefs,"numpy.asarray(values[1:],dtype=""float32"")",CLUSTER_4,CLUSTER_11
embedding_matrix,"numpy.zeros((max_words,embedding_dim)",CLUSTER_4,CLUSTER_11
objPt,"numpy.zeros((calChessboardPattern[0]*calChessboardPattern[1],3)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(16,14)",CLUSTER_1,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_1,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_10
A1,"numpy.array(pd.read_csv(""https://courses.edx.org/asset-v1:HarvardX+PH526x+2T2019+type@asset+block@adj_allVillageRelationships_vilno1.csv"",index_col=0)",CLUSTER_8,CLUSTER_3
A2,"numpy.array(pd.read_csv(""https://courses.edx.org/asset-v1:HarvardX+PH526x+2T2019+type@asset+block@adj_allVillageRelationships_vilno2.csv"",index_col=0)",CLUSTER_8,CLUSTER_3
df,"pandas.read_csv(""https://courses.edx.org/asset-v1:HarvardX+PH526x+2T2019+type@asset+block@individual_characteristics.csv"",low_memory=False,index_col=0)",CLUSTER_8,CLUSTER_3
pid1,"pandas.read_csv(data_filepath1,index_col=0)",CLUSTER_8,CLUSTER_3
pid2,"pandas.read_csv(data_filepath2,index_col=0)",CLUSTER_8,CLUSTER_3
pid1,"pandas.read_csv(data_filepath1,dtype=int)",CLUSTER_8,CLUSTER_3
pid2,"pandas.read_csv(data_filepath2,dtype=int)",CLUSTER_8,CLUSTER_3
samples,numpy.array(samples),CLUSTER_1,CLUSTER_10
self.q_table,"numpy.zeros(shape=(self.state_size+(self.action_size,)",CLUSTER_1,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_1,CLUSTER_10
Vrms,math.sqrt(velSquared.evaluate(),CLUSTER_12,CLUSTER_11
slabShape,"numpy.array([(1000e3,500e3)",CLUSTER_12,CLUSTER_11
slabTip1,"numpy.loadtxt(outputPath+""amDepth.txt"",skiprows=0)",CLUSTER_12,CLUSTER_11
slabTip2,"numpy.loadtxt(outputPath+""hmDepth.txt"",skiprows=0)",CLUSTER_12,CLUSTER_11
modelStartTime,datetime.datetime.now(),CLUSTER_12,CLUSTER_11
now,datetime.datetime.now(),CLUSTER_12,CLUSTER_11
label_probs,numpy.array([0.0foriinrange(len(iris.target_names),CLUSTER_12,CLUSTER_10
binarized_data,numpy.zeros(data.shape),CLUSTER_12,CLUSTER_10
ifprobability>0.0:logprob,numpy.log2(probability),CLUSTER_12,CLUSTER_10
p_values,"numpy.linspace(0,1,50)",CLUSTER_12,CLUSTER_10
thresholds,"numpy.linspace(data[:,feature].min()",CLUSTER_12,CLUSTER_10
iris,sklearn.datasets.load_iris(),CLUSTER_12,CLUSTER_10
dt,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=1)",CLUSTER_12,CLUSTER_10
dt,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',min_samples_split=2)",CLUSTER_12,CLUSTER_10
fig,"matplotlib.pyplot.figure(figsize=(20,4)",CLUSTER_6,CLUSTER_10
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_10
"fig,axes","matplotlib.pyplot.subplots(figsize=(16,4)",CLUSTER_6,CLUSTER_10
losses,numpy.array(losses),CLUSTER_6,CLUSTER_10
img,"numpy.transpose(img,(1,2,0)",CLUSTER_6,CLUSTER_10
bigger,collections.deque(),CLUSTER_10,CLUSTER_4
deck,collections.deque(),CLUSTER_10,CLUSTER_4
df_xlsx,pandas.read_excel('dados/aluguel.xlsx'),CLUSTER_8,CLUSTER_4
df_html,pandas.read_html('dados/dados_html_1.html'),CLUSTER_8,CLUSTER_4
df_html,pandas.read_html('https://unafiscosaude.org.br/site/tabelas-de-precos-dos-planos-ativos-para-comercializacao/'),CLUSTER_8,CLUSTER_4
df_html,pandas.read_html('https://www.federalreserve.gov/releases/h3/current/default.htm'),CLUSTER_8,CLUSTER_4
df_json,pandas.read_json('dados/aluguel.json'),CLUSTER_8,CLUSTER_4
df_txt,pandas.read_table('dados/aluguel.txt'),CLUSTER_8,CLUSTER_4
target['Logprices'],numpy.log(target['SalePrice']),CLUSTER_7,CLUSTER_8
target,"pandas.DataFrame(train_df.iloc[:,-1],columns=['SalePrice'])",CLUSTER_7,CLUSTER_8
missing,pandas.DataFrame(train_df.isna(),CLUSTER_7,CLUSTER_8
target_df,"pandas.DataFrame(train_df['SalePrice'],columns=['SalePrice'])",CLUSTER_7,CLUSTER_8
lin_pred_df,"pandas.DataFrame(columns=['Actualvalues','Predictedvalues'])",CLUSTER_7,CLUSTER_8
train_df,pandas.get_dummies(train_df),CLUSTER_7,CLUSTER_8
train_df,pandas.read_csv('Datasets/train.csv'),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_8
res,"scipy.stats.probplot(target['SalePrice'],plot=plt)",CLUSTER_7,CLUSTER_8
res,"scipy.stats.probplot(target['Box-cox'],plot=plt)",CLUSTER_7,CLUSTER_8
res,"scipy.stats.probplot(target['Logprices'],plot=plt)",CLUSTER_7,CLUSTER_8
res,"scipy.stats.probplot(target['Min-max'],plot=plt)",CLUSTER_7,CLUSTER_8
res,"scipy.stats.probplot(target['Robustscaler'],plot=plt)",CLUSTER_7,CLUSTER_8
target['Box-cox'],"sklearn.preprocessing.power_transform(target['SalePrice'].values.reshape(-1,1)",CLUSTER_7,CLUSTER_8
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_8
rob,sklearn.preprocessing.RobustScaler(),CLUSTER_7,CLUSTER_8
oe,sklearn.preprocessing.OrdinalEncoder(),CLUSTER_7,CLUSTER_8
reg_lin,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_8
reg_las,"sklearn.linear_model.Lasso(alpha=0.0005,random_state=1,normalize=True)",CLUSTER_7,CLUSTER_8
reg_rid,sklearn.linear_model.Ridge(),CLUSTER_7,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_7,CLUSTER_8
krr,sklearn.kernel_ridge.KernelRidge(),CLUSTER_7,CLUSTER_8
x,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_5,CLUSTER_5
x,"numpy.array([1,3,5,7,9])",CLUSTER_5,CLUSTER_5
X_new,"numpy.array([[5,2.9,1,0.2]])",CLUSTER_5,CLUSTER_5
z,"numpy.dot(x,x.T)",CLUSTER_5,CLUSTER_5
A,"numpy.ones((2,2)",CLUSTER_5,CLUSTER_5
A,"numpy.ones((2,2)",CLUSTER_5,CLUSTER_5
y,numpy.sin(x),CLUSTER_5,CLUSTER_5
x,"numpy.linspace(-10,10,100)",CLUSTER_5,CLUSTER_5
data_pandas,pandas.DataFrame(data),CLUSTER_5,CLUSTER_5
iris_dataframe,"pandas.DataFrame(X_train,columns=iris_dataset.feature_names)",CLUSTER_5,CLUSTER_5
iris_dataset,sklearn.datasets.load_iris(),CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
iris_dataset['data'],iris_dataset['target'],random_state=0,test_size=0.25)",CLUSTER_5,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
iris_dataset['data'],iris_dataset['target'],random_state=0)",CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_5,CLUSTER_5
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_5,CLUSTER_5
df1,"pandas.DataFrame(listofp,columns=cols)",CLUSTER_10,CLUSTER_12
x,collections.Counter(test.split(),CLUSTER_10,CLUSTER_12
df['income'],scipy.stats.zscore(df['income']),CLUSTER_5,CLUSTER_9
df['aspect'],scipy.stats.zscore(df['aspect']),CLUSTER_5,CLUSTER_9
df['save_rate'],scipy.stats.zscore(df['save_rate']),CLUSTER_5,CLUSTER_9
df['subscriptions'],scipy.stats.zscore(df['subscriptions']),CLUSTER_5,CLUSTER_9
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(
x,y,test_size=0.25,random_state=42)",CLUSTER_5,CLUSTER_9
t,"pandas.DataFrame({'pred':pred,'y':y.flatten()",CLUSTER_5,CLUSTER_9
df,"pandas.concat([df,pd.get_dummies(df['job'],prefix=""job"")",CLUSTER_5,CLUSTER_9
df,"pandas.concat([df,pd.get_dummies(df['area'],prefix=""area"")",CLUSTER_5,CLUSTER_9
df,"pandas.concat([df,pd.get_dummies(df['product'],prefix=""product"")",CLUSTER_5,CLUSTER_9
df,"pandas.read_csv(
""https://data.heatonresearch.com/data/t81-558/jh-simple-dataset.csv"",
na_values=['NA','?'])",CLUSTER_5,CLUSTER_9
"f,ax","matplotlib.pyplot.subplots(figsize=(11,9)",CLUSTER_7,CLUSTER_5
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_7,CLUSTER_5
data,"pandas.DataFrame(diabetes.data,columns=diabetes.feature_names)",CLUSTER_7,CLUSTER_5
target,"pandas.DataFrame(diabetes.target,columns=[""target""])",CLUSTER_7,CLUSTER_5
df,"pandas.concat([data,target],axis=1)",CLUSTER_7,CLUSTER_5
	data_x,"numpy.arange(1,N)",CLUSTER_7,CLUSTER_5
mask,"numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_7,CLUSTER_5
mse,numpy.mean((predicted_y-data_y),CLUSTER_7,CLUSTER_5
mse,numpy.mean((predicted_y-test_y),CLUSTER_7,CLUSTER_5
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_7,CLUSTER_5
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_7,CLUSTER_5
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_7,CLUSTER_5
	regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
regr,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_5
"train_x,test_x,train_y,test_y","sklearn.model_selection.train_test_split(
data_x,data_y,test_size=0.30,random_state=0)",CLUSTER_7,CLUSTER_5
explained_var_score,"sklearn.metrics.explained_variance_score(y_true,y_pred)",CLUSTER_7,CLUSTER_5
rmse,"sklearn.metrics.mean_squared_error(y_true,y_pred)",CLUSTER_7,CLUSTER_5
r2,"sklearn.metrics.r2_score(y_true,y_pred)",CLUSTER_7,CLUSTER_5
linear,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_10
ploy_model,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_10
ploy_model_3,sklearn.linear_model.LinearRegression(),CLUSTER_12,CLUSTER_10
poly_features,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_12,CLUSTER_10
poly_features,sklearn.preprocessing.PolynomialFeatures(degree=3),CLUSTER_12,CLUSTER_10
tmp,numpy.array(data),CLUSTER_7,CLUSTER_3
tmp,numpy.array(yahmmdata),CLUSTER_7,CLUSTER_3
numCells,numpy.array(tmp[0]),CLUSTER_7,CLUSTER_3
TotalSequenceLength,numpy.array(SequenceLengths),CLUSTER_7,CLUSTER_3
"StackedData[rr:rr+SequenceLengths[ss],:]",numpy.array(tmp[ss]),CLUSTER_7,CLUSTER_3
StackedData,"numpy.zeros((TotalSequenceLength,numCells)",CLUSTER_7,CLUSTER_3
bvr2_in_bvr1_log_prob_test,numpy.zeros((len(TestingSequenceLengthsBVRts2),CLUSTER_7,CLUSTER_3
bvr1_in_bvr1_log_prob_test,numpy.zeros((len(TestingSequenceLengthsBVRts1),CLUSTER_7,CLUSTER_3
swr2_in_bvr2_log_prob_test,numpy.zeros((len(TestingSequenceLengthsSWRts2),CLUSTER_7,CLUSTER_3
swr1_in_bvr2_log_prob_test,numpy.zeros((len(TestingSequenceLengthsSWRts1),CLUSTER_7,CLUSTER_3
swr1ts_in_bvr1tr_log_prob,numpy.zeros((len(TestingSequenceLengthsSWRts1),CLUSTER_7,CLUSTER_3
swr2ts_in_bvr1tr_log_prob,numpy.zeros((len(TestingSequenceLengthsSWRts2),CLUSTER_7,CLUSTER_3
swr1ts_in_bvr2tr_log_prob,numpy.zeros((len(TestingSequenceLengthsSWRts1),CLUSTER_7,CLUSTER_3
swr2ts_in_bvr2tr_log_prob,numpy.zeros((len(TestingSequenceLengthsSWRts2),CLUSTER_7,CLUSTER_3
seqlimits,numpy.cumsum(np.array([0]+TestingSequenceLengthsBVRts2),CLUSTER_7,CLUSTER_3
seqlimits,numpy.cumsum(np.array([0]+TestingSequenceLengthsBVRts1),CLUSTER_7,CLUSTER_3
seqlimits,numpy.cumsum(np.array([0]+TestingSequenceLengthsSWRts2),CLUSTER_7,CLUSTER_3
seqlimits,numpy.cumsum(np.array([0]+TestingSequenceLengthsSWRts1),CLUSTER_7,CLUSTER_3
seqlimits,numpy.cumsum(np.array([0]+TestingSequenceLengthsSWRts1),CLUSTER_7,CLUSTER_3
seqlimits,numpy.cumsum(np.array([0]+TestingSequenceLengthsSWRts2),CLUSTER_7,CLUSTER_3
df,"pandas.read_csv(""aggregated_data.csv"")",CLUSTER_7,CLUSTER_8
all_prices,"json.load(open(""all_prices.json"",""r"")",CLUSTER_7,CLUSTER_8
data,"pandas.read_csv(""matrix_data.csv"",header=None)",CLUSTER_12,CLUSTER_4
pd_vocab,"pandas.read_csv(""words_dict.csv"",header=None)",CLUSTER_12,CLUSTER_4
posdict,collections.defaultdict(int),CLUSTER_0,CLUSTER_6
negdict,collections.defaultdict(int),CLUSTER_0,CLUSTER_6
posdict,collections.defaultdict(int),CLUSTER_0,CLUSTER_6
negdict,collections.defaultdict(int),CLUSTER_0,CLUSTER_6
content,"re.sub('[^A-z\n]','',content)",CLUSTER_0,CLUSTER_6
posdict[k],numpy.log(v/900.0),CLUSTER_0,CLUSTER_6
negdict[k],numpy.log(v/900.0),CLUSTER_0,CLUSTER_6
posdict[k],numpy.log(v/900.0),CLUSTER_0,CLUSTER_6
negdict[k],numpy.log(v/900.0),CLUSTER_0,CLUSTER_6
df,"pandas.read_csv(""https://raw.githubusercontent.com/justmarkham/pandas-videos/master/data/chipotle.tsv"",delimiter=""\t"")",CLUSTER_1,CLUSTER_3
amps,numpy.dot((mfoodT-pca.mean_),CLUSTER_5,CLUSTER_5
food,"pandas.read_csv('food.csv',header=None,names=['Food','E','W','S','I'])",CLUSTER_5,CLUSTER_5
pca,"sklearn.decomposition.PCA(n_components=3,whiten=False)",CLUSTER_5,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_5
point_time,"pandas.DataFrame({""point_timestamp"":point_time})",CLUSTER_8,CLUSTER_3
point_time_hr,"pandas.DataFrame({""point_timestamp"":point_time_hr})",CLUSTER_8,CLUSTER_3
point_time_da,"pandas.DataFrame({""point_timestamp"":point_time_da})",CLUSTER_8,CLUSTER_3
a,"pandas.concat([bg2_train,bg2_Test])",CLUSTER_8,CLUSTER_3
point_time,pandas.date_range(start=bg2.point_timestamp.min(),CLUSTER_8,CLUSTER_3
point_time_hr,pandas.date_range(start=hr2.point_timestamp.min(),CLUSTER_8,CLUSTER_3
point_time_da,pandas.date_range(start=da_full.point_timestamp.min(),CLUSTER_8,CLUSTER_3
bg,"pandas.read_csv(""https://raw.githubusercontent.com/gagan3012/Bio-Conscious-Data-Challenge/master/data/blood-glucose-data.csv"")",CLUSTER_8,CLUSTER_3
da,"pandas.read_csv(""https://raw.githubusercontent.com/gagan3012/Bio-Conscious-Data-Challenge/master/data/distance-activity-data.csv"")",CLUSTER_8,CLUSTER_3
hr,"pandas.read_csv(""https://raw.githubusercontent.com/gagan3012/Bio-Conscious-Data-Challenge/master/data/heart-rate-data.csv"")",CLUSTER_8,CLUSTER_3
"bg[""point_timestamp""]",pandas.to_datetime(bg.point_timestamp),CLUSTER_8,CLUSTER_3
"da[""point_timestamp""]",pandas.to_datetime(da.point_timestamp),CLUSTER_8,CLUSTER_3
"hr[""point_timestamp""]",pandas.to_datetime(hr.point_timestamp),CLUSTER_8,CLUSTER_3
bg2.point_timestamp,pandas.to_datetime(bg2['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
hr2.point_timestamp,pandas.to_datetime(hr2['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
da_iphone.point_timestamp,pandas.to_datetime(da_iphone['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
da_fitbit.point_timestamp,pandas.to_datetime(da_fitbit['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2[""future""]",pandas.to_datetime(bg2['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_actTest[""point_timestamp""]",pandas.to_datetime(bg2_actTest['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_Test[""future10""]",pandas.to_datetime(bg2_Test['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_Test[""future15""]",pandas.to_datetime(bg2_Test['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_Test[""future20""]",pandas.to_datetime(bg2_Test['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_Test[""future25""]",pandas.to_datetime(bg2_Test['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_Test[""future30""]",pandas.to_datetime(bg2_Test['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_Test[""future35""]",pandas.to_datetime(bg2_Test['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_Test[""future40""]",pandas.to_datetime(bg2_Test['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_Test[""future45""]",pandas.to_datetime(bg2_Test['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_Test[""future50""]",pandas.to_datetime(bg2_Test['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_Test[""future55""]",pandas.to_datetime(bg2_Test['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_Test[""future60""]",pandas.to_datetime(bg2_Test['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_train[""day_night""]",numpy.where((bg2_train['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_Test[""day_night""]",numpy.where((bg2_Test['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_actTest[""point_timestamp""]",numpy.where((bg2_actTest['point_timestamp'].dt.strftime('%Y-%m-%d%H:%M:%S'),CLUSTER_8,CLUSTER_3
"bg2_Test[""point_value.mg.dL""]","numpy.where((bg2_Test[""cc""]==1)",CLUSTER_8,CLUSTER_3
"bg2[""grp""]","numpy.repeat(range(1,int((len(bg2)",CLUSTER_8,CLUSTER_3
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_8
drug_results_tumor_df,"pandas.DataFrame({'Drug':drug_results_df['Drug'],'Timepoint':drug_results_df['Timepoint'],
'Volume':drug_results_df['Volume']})",CLUSTER_7,CLUSTER_8
drug_tumor_sum_df,pandas.DataFrame(drug_results_grp.mean(),CLUSTER_7,CLUSTER_8
drug_tumor_sem_df,pandas.DataFrame(drug_results_grp.reset_index(),CLUSTER_7,CLUSTER_8
drug_results_met_df,"pandas.DataFrame({'Drug':drug_results_df['Drug'],'Timepoint':drug_results_df['Timepoint'],
'MetastaticSites':drug_results_df['MetastaticSites']})",CLUSTER_7,CLUSTER_8
drug_met_avg_df,pandas.DataFrame(drug_mets_grp.mean(),CLUSTER_7,CLUSTER_8
drug_mets_sem_df,pandas.DataFrame(met_sem_grp.reset_index(),CLUSTER_7,CLUSTER_8
drug_results_survival_df,"pandas.DataFrame({'Mice':drug_results_df['MouseID'],
'Drug':drug_results_df['Drug'],'Timepoint':drug_results_df['Timepoint']})",CLUSTER_7,CLUSTER_8
survival_count_df,pandas.DataFrame(data_mice_count.count(),CLUSTER_7,CLUSTER_8
survival_percent_df,"pandas.DataFrame({""Drug"":survival_count_df['Drug'],""Timepoint"":survival_count_df['Timepoint'],
""Survival%"":(survival_count_df['
survival_percent_df.head()",CLUSTER_7,CLUSTER_8
drug_results_df,"pandas.merge(mouse_drug_df,trial_data_df,on=['MouseID'])",CLUSTER_7,CLUSTER_8
mouse_drug_df,pandas.read_csv(mouse_data_path),CLUSTER_7,CLUSTER_8
trial_data_df,pandas.read_csv(trial_data_path),CLUSTER_7,CLUSTER_8
current_palette_4,"seaborn.color_palette(""hls"",4)",CLUSTER_7,CLUSTER_8
current_palette_8,"seaborn.color_palette(""husl"",8)",CLUSTER_7,CLUSTER_8
current_palette_8,"seaborn.color_palette(""husl"",8)",CLUSTER_7,CLUSTER_8
x_axis,numpy.arange(len(drugs),CLUSTER_7,CLUSTER_8
above_threshold,"numpy.maximum(tumor_vol_changes,threshold)",CLUSTER_7,CLUSTER_8
below_threshold,"numpy.minimum(tumor_vol_changes,threshold)",CLUSTER_7,CLUSTER_8
drugs,"numpy.delete(drugs_array,[0])",CLUSTER_7,CLUSTER_8
c,collections.Counter(wordList),CLUSTER_1,CLUSTER_10
c,collections.Counter(with_cat),CLUSTER_1,CLUSTER_10
c,collections.Counter(wordList),CLUSTER_1,CLUSTER_10
c,collections.Counter(wordList),CLUSTER_1,CLUSTER_10
df,"pandas.merge(df,distr_info1,on='DistrictId',how='left')",CLUSTER_5,CLUSTER_1
df,"pandas.merge(df,distr_stat_dr,on=['DistrictId','Rooms'],how='left')",CLUSTER_5,CLUSTER_1
df,"pandas.merge(df,distr_stat_r,on='Rooms',how='left')",CLUSTER_5,CLUSTER_1
data,pandas.read_csv('input/train.csv'),CLUSTER_5,CLUSTER_1
test,pandas.read_csv('input/test.csv'),CLUSTER_5,CLUSTER_1
"train,valid","sklearn.model_selection.train_test_split(data,test_size=0.3,random_state=42)",CLUSTER_5,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_3,CLUSTER_10
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_3,CLUSTER_10
df,pandas.DataFrame(predictions_proba[groups[i]]),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(predictions_val[groups[i]]),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(predictions_test[groups[i]]),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(pred_nb_proba_val[groups[i]]),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(pred_nb_proba_test[groups[i]]),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(pred_nb_proba_test_all[groups[i]]),CLUSTER_7,CLUSTER_8
df,pandas.DataFrame(X3),CLUSTER_7,CLUSTER_8
df_all_val,pandas.DataFrame(),CLUSTER_7,CLUSTER_8
df_train,pandas.read_csv('train.csv'),CLUSTER_7,CLUSTER_8
df_test,pandas.read_csv('test.csv'),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('fashion_test_proba_nlp_all_data.csv'),CLUSTER_7,CLUSTER_8
df_val,pandas.read_csv(group+'_val_proba_nlp.csv'),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('fashion_test_proba_nlp_nb.csv'),CLUSTER_7,CLUSTER_8
df_beauty_lr,pandas.read_csv('beauty__val_proba_nlp.csv'),CLUSTER_7,CLUSTER_8
df_mobile_lr,pandas.read_csv('mobile__val_proba_nlp.csv'),CLUSTER_7,CLUSTER_8
df_fashion_lr,pandas.read_csv('fashion_val_proba_nlp.csv'),CLUSTER_7,CLUSTER_8
df_beauty_nb,pandas.read_csv('beauty__val_proba_nlp_nb.csv'),CLUSTER_7,CLUSTER_8
df_mobile_nb,pandas.read_csv('mobile__val_proba_nlp_nb.csv'),CLUSTER_7,CLUSTER_8
df_fashion_nb,pandas.read_csv('fashion_val_proba_nlp_nb.csv'),CLUSTER_7,CLUSTER_8
df_beauty_lr_test,pandas.read_csv('beauty__test_proba_nlp_all_data.csv'),CLUSTER_7,CLUSTER_8
df_mobile_lr_test,pandas.read_csv('mobile__test_proba_nlp_all_data.csv'),CLUSTER_7,CLUSTER_8
df_fashion_lr_test,pandas.read_csv('fashion_test_proba_nlp_all_data.csv'),CLUSTER_7,CLUSTER_8
df_beauty_nb_test,pandas.read_csv('beauty__test_proba_nlp_nb_all.csv'),CLUSTER_7,CLUSTER_8
df_mobile_nb_test,pandas.read_csv('mobile__test_proba_nlp_nb_all.csv'),CLUSTER_7,CLUSTER_8
df_fashion_nb_test,pandas.read_csv('fashion_test_proba_nlp_nb_all.csv'),CLUSTER_7,CLUSTER_8
df_image_beauty,pandas.read_csv('val_beauty.csv'),CLUSTER_7,CLUSTER_8
df_nlp,pandas.read_csv('beauty__val_proba_nlp.csv'),CLUSTER_7,CLUSTER_8
df_image,pandas.read_csv('val_fashion.csv'),CLUSTER_7,CLUSTER_8
df_nlp,pandas.read_csv('fashion_val_proba_nlp.csv'),CLUSTER_7,CLUSTER_8
df,pandas.read_csv('beauty__val_proba_nlp.csv'),CLUSTER_7,CLUSTER_8
df_im,pandas.read_csv('val_beauty.csv'),CLUSTER_7,CLUSTER_8
df_cat,pandas.read_json('categories.json'),CLUSTER_7,CLUSTER_8
"train,test","sklearn.model_selection.train_test_split(df_train,random_state=2019,stratify=df_train.Category,test_size=0.2)",CLUSTER_7,CLUSTER_8
nb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_7,CLUSTER_8
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_7,CLUSTER_8
bnb,sklearn.naive_bayes.BernoulliNB(),CLUSTER_7,CLUSTER_8
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
bc_beauty,BaggingClassifier(base_estimator=sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
bc_beauty,AdaBoostClassifier(base_estimator=sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_8
br,sklearn.linear_model.BayesianRidge(),CLUSTER_7,CLUSTER_8
svc,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_8
scv,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_8
svc,"sklearn.svm.SVC(C=0.1,kernel='linear')",CLUSTER_7,CLUSTER_8
pipe_lr,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words)",CLUSTER_7,CLUSTER_8
pipe_beauty,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words,ngram_range=(1,3)",CLUSTER_7,CLUSTER_8
pipe_mobile,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words,ngram_range=(1,3)",CLUSTER_7,CLUSTER_8
pipe_fashion,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words,ngram_range=(1,5)",CLUSTER_7,CLUSTER_8
pipe_nb,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words)",CLUSTER_7,CLUSTER_8
pipe_nb_beauty,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words,ngram_range=(2,6)",CLUSTER_7,CLUSTER_8
pipe_nb_mobile,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words,ngram_range=(1,2)",CLUSTER_7,CLUSTER_8
pipe_nb_fashion,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words,ngram_range=(2,6)",CLUSTER_7,CLUSTER_8
pipe_b,"sklearn.pipeline.Pipeline([('model',lr)",CLUSTER_7,CLUSTER_8
pipe_m,"sklearn.pipeline.Pipeline([('model',lr)",CLUSTER_7,CLUSTER_8
pipe_f,"sklearn.pipeline.Pipeline([('model',lr)",CLUSTER_7,CLUSTER_8
pipe_beauty,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words,ngram_range=(1,3)",CLUSTER_7,CLUSTER_8
pipe_mobile,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words,ngram_range=(1,3)",CLUSTER_7,CLUSTER_8
pipe_fashion,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words,ngram_range=(1,5)",CLUSTER_7,CLUSTER_8
pipe_beauty,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words,min_df=5)",CLUSTER_7,CLUSTER_8
pipe_mobile,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words,min_df=5)",CLUSTER_7,CLUSTER_8
pipe_fashion,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words,min_df=5)",CLUSTER_7,CLUSTER_8
pipe_models,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words)",CLUSTER_7,CLUSTER_8
pipe_lr,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words)",CLUSTER_7,CLUSTER_8
pipe_svc,"sklearn.pipeline.Pipeline([('vectorize',CountVectorizer(stop_words=ignore_words)",CLUSTER_7,CLUSTER_8
accuracy[group],"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(pipe[i],param_grid=params,verbose=1)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(pipe_nb,param_grid=params,verbose=1)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(pipe_en[i],param_grid=param)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(pipes[i],param_grid=params,verbose=1)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(pipe_models,param_grid=params,verbose=1)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(pipe_lr,param_grid=params,verbose=1)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(pipe_lr,param_grid=params)",CLUSTER_7,CLUSTER_8
grid_search,"sklearn.model_selection.GridSearchCV(pipe_lr,param_grid=params)",CLUSTER_7,CLUSTER_8
confusion,"sklearn.metrics.confusion_matrix(df_val['Category'],df_val['pred'])",CLUSTER_7,CLUSTER_8
rf,sklearn.ensemble.RandomForestClassifier(n_estimators=150),CLUSTER_7,CLUSTER_8
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=150),CLUSTER_7,CLUSTER_8
bc_beauty,sklearn.ensemble.BaggingClassifier(base_estimator=LogisticRegression(),CLUSTER_7,CLUSTER_8
bc_beauty,sklearn.ensemble.AdaBoostClassifier(base_estimator=LogisticRegression(),CLUSTER_7,CLUSTER_8
data2,"pandas.DataFrame([1,2,3,4,5],columns=['number'])",CLUSTER_8,CLUSTER_3
data,"pandas.concat([data,pd.DataFrame(sport_matrix,columns=skills_unq)",CLUSTER_8,CLUSTER_3
data2,"pandas.concat([data2,pd.DataFrame(power_matrix,columns=cols)",CLUSTER_8,CLUSTER_3
data,"pandas.read_csv(""skills.csv"")",CLUSTER_8,CLUSTER_3
mat,"numpy.diag([11,22,33,44])",CLUSTER_8,CLUSTER_3
salary,"pandas.read_csv(""d:/CSV/salary_table.csv"")",CLUSTER_8,CLUSTER_3
salary,pandas.read_csv(url),CLUSTER_8,CLUSTER_3
training_sample_json,json.loads(file_contents),CLUSTER_9,CLUSTER_3
fsetflood_json,json.loads(fsetflood.to_json),CLUSTER_9,CLUSTER_3
cc_apps,"pandas.read_csv('./datasets/cc_approvals.data',header=None)",CLUSTER_5,CLUSTER_1
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_5,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,
y,
test_size=0.33,
random_state=42)",CLUSTER_5,CLUSTER_1
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_5,CLUSTER_1
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_5,CLUSTER_1
grid_model,"sklearn.model_selection.GridSearchCV(estimator=logreg,param_grid=param_grid,cv=5)",CLUSTER_5,CLUSTER_1
trip_date,"datetime.datetime.strptime(row['StartDate'],'%m/%d/%Y%H:%M')",CLUSTER_11,CLUSTER_3
sample_data,pandas.read_csv('201309_trip_data.csv'),CLUSTER_11,CLUSTER_3
station_info,pandas.read_csv('201402_station_data.csv'),CLUSTER_11,CLUSTER_3
sample_data,pandas.read_csv(trip_out),CLUSTER_11,CLUSTER_3
trip_data,pandas.read_csv('201309_trip_summary.csv'),CLUSTER_11,CLUSTER_3
trip_data,pandas.read_csv('babs_y1_y2_summary.csv'),CLUSTER_11,CLUSTER_3
response,"requests.get(""https://data.texas.gov/resource/naix-2893.json?location_name=MAX%27S%20WINE%20DIVE"")",CLUSTER_10,CLUSTER_4
df,"pandas.read_csv('data/nacimientos2014.csv',encoding='utf8')",CLUSTER_8,CLUSTER_4
b1,numpy.zeros(hidden_size),CLUSTER_5,CLUSTER_7
b2,numpy.zeros(output_size),CLUSTER_5,CLUSTER_7
grad_W2,"numpy.dot(h1.T,dscores)",CLUSTER_5,CLUSTER_7
grad_relu,"numpy.dot(dscores,W2.T)",CLUSTER_5,CLUSTER_7
grad_W1,"numpy.dot(X.T,grad_relu)",CLUSTER_5,CLUSTER_7
h1,"numpy.dot(X,W1)",CLUSTER_5,CLUSTER_7
loss,numpy.sum(val),CLUSTER_5,CLUSTER_7
grad_b2,"numpy.sum(dscores,axis=0)",CLUSTER_5,CLUSTER_7
grad_b1,"numpy.sum(grad_relu,axis=0)",CLUSTER_5,CLUSTER_7
probs,numpy.exp(scores),CLUSTER_5,CLUSTER_7
"_,plots","matplotlib.pyplot.subplots(2,5,figsize=(16,6)",CLUSTER_5,CLUSTER_7
self.model,"sklearn.svm.SVC(C=param_svm_c,gamma=param_svm_gamma,probability=True)",CLUSTER_5,CLUSTER_7
idx,numpy.arange(X.shape[0]),CLUSTER_4,CLUSTER_11
X_std,numpy.zeros(X.shape),CLUSTER_4,CLUSTER_11
distances,"numpy.power(np.tile(one_sample,(X_train.shape[0],1)",CLUSTER_4,CLUSTER_11
lp_norm,"numpy.atleast_1d(np.linalg.norm(X,p,axis)",CLUSTER_4,CLUSTER_11
data,"sklearn.datasets.make_classification(n_samples=200,n_features=4,n_informative=2,
n_redundant=2,n_repeated=0,n_classes=2)",CLUSTER_4,CLUSTER_11
data,"sklearn.datasets.make_classification(n_samples=200,n_features=4,n_informative=2,
n_redundant=2,n_repeated=0,n_classes=2)",CLUSTER_4,CLUSTER_11
neigh,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_11
grid,"sklearn.model_selection.GridSearchCV(neigh,n_neighbors_paras,cv=fold)",CLUSTER_4,CLUSTER_11
fold,"sklearn.model_selection.KFold(5,shuffle=False)",CLUSTER_4,CLUSTER_11
df,seaborn.load_dataset('iris'),CLUSTER_10,CLUSTER_4
df,seaborn.load_dataset('iris'),CLUSTER_10,CLUSTER_4
df,seaborn.load_dataset('iris'),CLUSTER_10,CLUSTER_4
df,seaborn.load_dataset('iris'),CLUSTER_10,CLUSTER_4
df,seaborn.load_dataset('iris'),CLUSTER_10,CLUSTER_4
df,seaborn.load_dataset('iris'),CLUSTER_10,CLUSTER_4
df,seaborn.load_dataset('tips'),CLUSTER_10,CLUSTER_4
df,"seaborn.load_dataset(""iris"")",CLUSTER_10,CLUSTER_4
ax,"seaborn.violinplot(x=""species"",y=""sepal_length"",data=df)",CLUSTER_10,CLUSTER_4
t1_1,datetime.datetime.now(),CLUSTER_2,CLUSTER_7
t2_1,datetime.datetime.now(),CLUSTER_2,CLUSTER_7
t1_2,datetime.datetime.now(),CLUSTER_2,CLUSTER_7
t2_2,datetime.datetime.now(),CLUSTER_2,CLUSTER_7
boundaries,"numpy.array([[0,10],[40,50]])",CLUSTER_3,CLUSTER_6
weak_range,"numpy.array([[2,8],[10,14]])",CLUSTER_3,CLUSTER_6
strong_range,"numpy.array([[2,8],[10,14]])",CLUSTER_3,CLUSTER_6
locs,numpy.zeros(2),CLUSTER_3,CLUSTER_6
avail,numpy.ones(num_resource),CLUSTER_3,CLUSTER_6
label_names,"numpy.unique(x[""country_destination""])",CLUSTER_5,CLUSTER_5
y,pandas.DataFrame(),CLUSTER_5,CLUSTER_5
y[column],"pandas.factorize(x[column],sort=True)",CLUSTER_5,CLUSTER_5
users_train_raw,pandas.read_csv('../zip_files/train_users_2.csv.zip'),CLUSTER_5,CLUSTER_5
sessions_raw,pandas.read_csv('../zip_files/sessions.csv.zip'),CLUSTER_5,CLUSTER_5
demographics,pandas.read_csv('../zip_files/age_gender_bkts.csv.zip'),CLUSTER_5,CLUSTER_5
countries,pandas.read_csv('../zip_files/countries.csv.zip'),CLUSTER_5,CLUSTER_5
test,pandas.read_csv('../zip_files/test_users.csv.zip'),CLUSTER_5,CLUSTER_5
"data,labels",sklearn.preprocessing.normalize(np.asarray(y),CLUSTER_5,CLUSTER_5
log_model,sklearn.linear_model.LogisticRegression(C=0.1),CLUSTER_5,CLUSTER_5
accuracies_mean,numpy.array([np.mean(v),CLUSTER_3,CLUSTER_10
accuracies_std,numpy.array([np.std(v),CLUSTER_3,CLUSTER_10
idxs,numpy.flatnonzero(y_train==y),CLUSTER_3,CLUSTER_10
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_3,CLUSTER_10
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_3,CLUSTER_10
difference,"numpy.linalg.norm(dists-dists_one,ord='fro')",CLUSTER_3,CLUSTER_10
difference,"numpy.linalg.norm(dists-dists_two,ord='fro')",CLUSTER_3,CLUSTER_10
tic,time.time(),CLUSTER_3,CLUSTER_10
toc,time.time(),CLUSTER_3,CLUSTER_10
data_groundtruth,"pandas.DataFrame(
{'time':time_groundtruth,
'distance':distance_groundtruth,
'velocity':velocity_groundtruth,
'acceleration':acceleration_groundtruth
})",CLUSTER_3,CLUSTER_3
data_lidar,"pandas.DataFrame(
{'time':time_groundtruth,
'distance':distance_groundtruth,
'lidar':lidar_measurements
})",CLUSTER_3,CLUSTER_3
result,"pandas.DataFrame(
{'time':time_result,
'distance':x_result,
'velocity':v_result
})",CLUSTER_3,CLUSTER_3
lidar_variance,"math.pow(lidar_standard_deviation,2)",CLUSTER_3,CLUSTER_3
t4,"math.pow(delta_t,4)",CLUSTER_3,CLUSTER_3
t3,"math.pow(delta_t,3)",CLUSTER_3,CLUSTER_3
t2,"math.pow(delta_t,2)",CLUSTER_3,CLUSTER_3
TAG_RE,re.compile(r'<[^>]+>'),CLUSTER_9,CLUSTER_2
reviews,pandas.DataFrame(data['content']['reviews']),CLUSTER_9,CLUSTER_2
courses_df,"pandas.DataFrame(courses,columns=['courses'])",CLUSTER_9,CLUSTER_2
badges_df,pandas.DataFrame(data['content']['meritBadges']),CLUSTER_9,CLUSTER_2
school_df,"pandas.DataFrame([website,description,logoUrl])",CLUSTER_9,CLUSTER_2
comments,pandas.concat(comments),CLUSTER_9,CLUSTER_2
locations,pandas.concat(locations_list),CLUSTER_9,CLUSTER_2
courses,pandas.concat(courses_list),CLUSTER_9,CLUSTER_2
badges,pandas.concat(badges_list),CLUSTER_9,CLUSTER_2
schools,pandas.concat(schools_list),CLUSTER_9,CLUSTER_2
data,requests.get(url),CLUSTER_9,CLUSTER_2
data,requests.get(url),CLUSTER_9,CLUSTER_2
ocn_id,"numpy.arange(cst_mask.size,dtype=numpy.int32)",CLUSTER_4,CLUSTER_11
rvr_lon,"numpy.arange(0.5*rvr_res,360.,rvr_res)",CLUSTER_4,CLUSTER_11
rvr_lat,"numpy.arange(-90.+0.5*rvr_res,90.,rvr_res)",CLUSTER_4,CLUSTER_11
rvr_qlon,"numpy.arange(0,360.0001,rvr_res)",CLUSTER_4,CLUSTER_11
rvr_qlat,"numpy.arange(-90.,90.001,rvr_res)",CLUSTER_4,CLUSTER_11
rvr_id,"numpy.arange(rvr_nj*rvr_ni,dtype=numpy.int32)",CLUSTER_4,CLUSTER_11
rvr_ocells_in_rcells,numpy.zeros((rvr_nj*rvr_ni),CLUSTER_4,CLUSTER_11
rvr_oid,"numpy.zeros((rvr_nj,rvr_ni)",CLUSTER_4,CLUSTER_11
rvr_area,numpy.outer(Re*(numpy.sin(rvr_qlat[1:]*d2r),CLUSTER_4,CLUSTER_11
nom,"numpy.roll(ocn_mask,-1,axis=0)",CLUSTER_4,CLUSTER_11
difm,"numpy.roll(ocidm,-1,axis=1)",CLUSTER_4,CLUSTER_11
cst_nrst_ocn_id[difm>0],"numpy.roll(cst_nrst_ocn_id,-1,axis=1)",CLUSTER_4,CLUSTER_11
difm,"numpy.roll(ocidm,1,axis=1)",CLUSTER_4,CLUSTER_11
cst_nrst_ocn_id[difm>0],"numpy.roll(cst_nrst_ocn_id,1,axis=1)",CLUSTER_4,CLUSTER_11
difm,"numpy.roll(ocidm,1,axis=0)",CLUSTER_4,CLUSTER_11
cst_nrst_ocn_id[difm>0],"numpy.roll(cst_nrst_ocn_id,1,axis=0)",CLUSTER_4,CLUSTER_11
difm,"numpy.roll(ocidm,-1,axis=0)",CLUSTER_4,CLUSTER_11
cst_nrst_ocn_id[difm>0],"numpy.roll(cst_nrst_ocn_id,-1,axis=0)",CLUSTER_4,CLUSTER_11
r_flux,"numpy.roll(runoff[time],int(rvr_ni/2)",CLUSTER_4,CLUSTER_11
"rids,cnt","numpy.unique(ocn_rid,return_counts=True)",CLUSTER_4,CLUSTER_11
Arow,"scipy.sparse.lil_matrix((ocn_nj*ocn_ni,rvr_nj*rvr_ni)",CLUSTER_4,CLUSTER_11
Acol,"scipy.sparse.lil_matrix((ocn_nj*ocn_ni,rvr_nj*rvr_ni)",CLUSTER_4,CLUSTER_11
Acst,"scipy.sparse.lil_matrix((ocn_nj*ocn_ni,ocn_nj*ocn_ni)",CLUSTER_4,CLUSTER_11
