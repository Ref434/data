varible_name,method,"AffinityPropagation(damping=0.999, random_state=0)","AgglomerativeClustering(metric='euclidean', n_clusters=13)","KMeans(n_clusters=13, n_init='auto', random_state=0)",MeanShift(bandwidth=2.3),"SpectralClustering(assign_labels='discretize', n_clusters=13, random_state=0)"
M,"numpy.vstack([mfcc,mfcc_delta,mfcc_delta2])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"f,(ax1,ax2,ax3)",matplotlib.pyplot.subplots(3),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
client_request_token,"time.strftime(""%Y-%m-%d-%H-%M-%S"",gmtime()",CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
response,"robomaker.create_simulation_job(clientRequestToken=time.strftime(""%Y-%m-%d-%H-%M-%S"",gmtime()",CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
df,pandas.DataFrame(data['metrics']),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
df,pandas.DataFrame(data['metrics']),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
data,json.load(fp),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
data,json.load(fp),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
dataSet3,pandas.DataFrame(main_dict),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('/home/jose/Downloads/python-ml-course/datasets/titanic/titanic3.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
globalPath,"pandas.read_csv(os.path.join(mainPath,filepath_body)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data2,"pandas.read_csv(os.path.join(mainPath,filepath_Customer)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data2_header,"pandas.read_csv(os.path.join(mainPath,filepath_columns)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data2_Customer,"pandas.read_csv(os.path.join(mainPath,filepath)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
dataFrame4,"pandas.read_csv(outfile,sep='\t')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
medals_data,pandas.read_csv(medals_url),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
indsM,numpy.arange(h*w),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
B,numpy.asarray(initImg),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
V,"numpy.zeros((h1*w1,k)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
ans,"numpy.zeros((h+pad*2,w+pad*2,c)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
fcfc,"numpy.dot(fc,fc.T)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
fsfs,"numpy.dot(fs,fs.T)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
img,"numpy.clip(V,0,1.0)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
win_mu,"numpy.mean(winI,axis=2,keepdims=True)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
nz_indsRow,"numpy.repeat(win_inds,win_size)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
B,"numpy.reshape(B,(h1*w1,k)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
content_t,numpy.transpose(np.squeeze(content),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
style_t,numpy.transpose(np.squeeze(style),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
Ds,numpy.sqrt(np.diag(ws[:k_s]+eps),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
dd,"numpy.sqrt(np.power(dd,-1)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
win_var,"numpy.einsum('...ji,...jk->...ik',winI,winI)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
X,"numpy.einsum('...ij,...jk->...ik',winI-win_mu,inv)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
blended,"numpy.expand_dims(np.transpose(blended,(1,2,0)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
nz_indsCol,"numpy.tile(win_inds,win_size)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
Dc,numpy.diag((wc[:k_c]+eps),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
"ans[:,:,i]","numpy.pad(arr[:,:,i],pad_width=(pad,pad)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
inv,numpy.linalg.inv(win_var+(eps/win_size),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
"Ec,wc,_",numpy.linalg.svd(fcfc),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
"Es,ws,_",numpy.linalg.svd(fsfs),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
L,"scipy.sparse.coo_matrix((nz_indsVal,(nz_indsRow,nz_indsCol)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
D,"scipy.sparse.csc_matrix((dd,(np.arange(0,w1*h1)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
A,scipy.sparse.identity(w1*h1),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
df,"pandas.read_csv(""baseline_results.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,5)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
index,numpy.arange(len(headers),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
im,"numpy.zeros((l,l)",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
inp,"numpy.clip(inp,0,1)",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
ax,"matplotlib.pyplot.subplot(num_images//2,2,images_so_far)",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
since,time.time(),CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
time_elapsed,time.time(),CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
feature_dataframe,"pandas.DataFrame({'features':cols,
'RandomForestfeatureimportances':rf_features,
'ExtraTreesfeatureimportances':et_features,
'AdaBoostfeatureimportances':ada_features,
'GradientBoostfeatureimportances':gb_features
})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
base_predictions_train,pandas.DataFrame({'RandomForest':rf_oof_train.ravel(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
StackingSubmission,"pandas.DataFrame({'PassengerId':PassengerId,
'Survived':predictions})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['CategoricalAge'],"pandas.cut(train['Age'],5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['CategoricalFare'],"pandas.qcut(train['Fare'],4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('data/train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('data/test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
oof_train,"numpy.zeros((ntrain,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
oof_test,"numpy.zeros((ntest,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
oof_test_skf,"numpy.empty((NSPLITS,ntest)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_train,"numpy.concatenate((et_oof_train,rf_oof_train,ada_oof_train,gb_oof_train,svc_oof_train)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_test,"numpy.concatenate((et_oof_test,rf_oof_test,ada_oof_test,gb_oof_test,svc_oof_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
title_search,re.search('([A-Za-z]+),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.pairplot(train[[u'Survived',u'Pclass',u'Sex',u'Age',u'Parch',u'Fare',u'Embarked',
u'FamilySize',u'Title']],hue='Survived',palette='seismic',size=1.2,diag_kind='kde',diag_kws=dict(shade=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=NSPLITS,random_state=SEED)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data=stud),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_sql_query(""Select*fromstudmarks"",con)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
stud,"pandas.read_sql_query(""Select*fromstudentmarks"",con)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
res,"pandas.read_sql_query(sql,con)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.arange(0,1e6,2,dtype=np.int)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(-5,5.01,.01)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
y,"numpy.arange(-5,5.01,.01)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,10,.1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x4,"numpy.arange(-2,2,.05)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,10,.1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,10,.1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,10,.1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X,"numpy.arange(1,10,.05)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,1000,50)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X,"numpy.arange(0,1,.005)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X,"numpy.arange(-1,1,.005)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
arr3,"numpy.array([[[1,2],[3,4]],[[5,6],[7,8]]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
a,"numpy.array([[0,1],[2,3]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
b,"numpy.array([[4,5],[6,7]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
canales,"numpy.array(['web','web','movil','tienda','tienda'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
canales,"numpy.array(['web','web','movil','tienda','tienda'],dtype=np.object)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
a,"numpy.array([1.4,4.5,6.7])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
datos,"numpy.array([[1,2,3,4,5],[5,6,7,6,5]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
hijos,"numpy.array([1,2,3,4,5,2,4,7,6,1,1,1,1,1,2,2,])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
a,"numpy.array([[1,2],[3,4]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
valores,"numpy.array([1,2,3,4,6,9,11,3,2])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
valores,"numpy.array([1,2,3,4,6,9,11,3,11])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
y_2,"numpy.array([x_+np.random.normal(0,x_/2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df['visitas'],"numpy.array([100,200,50])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
Y,"numpy.array([x+np.random.normal(0,x/5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
weights,"numpy.array([.5,.4,.1])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ceros,"numpy.zeros((5,5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
unos,numpy.ones(100),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
y,numpy.sin(x),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
z,numpy.sqrt(xs**2+ys**2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"xs,ys","numpy.meshgrid(x,y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
diag,numpy.eye(10000),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"values,count","numpy.unique(hijos,return_counts=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
arrays_c,numpy.load('arrays_c.npz'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df1,pandas.DataFrame(np.arange(12.),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df2,pandas.DataFrame(np.arange(20.),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,"pandas.DataFrame(np.hstack([X,y.reshape(-1,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame(dataframe),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,"pandas.DataFrame({'key1':['a','a','b','b','a'],
'key2':['one','two','one','two','one'],
'data1':np.random.randn(5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df_ventas,"pandas.DataFrame({'ventas':ts_ventas}

df_ventas['workday']=df_ventas.index.weekday<5
pd.date_range('2012-04-01',periods=20)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame({'y':y}),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame({'y':y}),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,"pandas.Series([1,2,3,4,5])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,"pandas.Series(['A','B','A','A','C','B'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
v,"pandas.Series([3,2,1],index=['A','B','C'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,"pandas.Series({'A':1,'B':2,'C':np.nan})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ss,"pandas.Series({'A':1,'B':2,'C':3})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,pandas.Series(range(4),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,"pandas.Series([7,-5,7,4,2,0,4])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ts,pandas.Series(np.random.randn(6),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ts_ventas,"pandas.Series(ventas,index=pd.date_range('2019-1-1',periods=len(ventas)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ts_ventas,"pd.Series(ventas,index=pandas.date_range('2019-1-1',periods=len(ventas)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
data,"pandas.read_csv('/home/ainhoa/Master/krakenEUR.csv.gz',header=None,names=['ts','price','volume'],index_col='ts')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
last_data.index,"pandas.to_datetime(last_data.index,unit='s')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"X,y","sklearn.datasets.make_circles(factor=.3,noise=.08)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,"datetime.datetime(2019,1,11)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
now,datetime.datetime.now(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
answerdf,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
traindf,"pandas.read_csv('train.csv',index_col=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
testdf,pandas.read_csv('test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(rfr,X,y,cv=10,scoring='r2')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsc,"sklearn.model_selection.GridSearchCV(
estimator=RandomForestRegressor()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.ensemble.RandomForestRegressor(max_depth=6,n_estimators=50,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.ensemble.RandomForestRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr,"sklearn.ensemble.RandomForestRegressor(max_depth=best_params[""max_depth""],n_estimators=best_params[""n_estimators""],random_state=False,verbose=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
areas,pandas.read_csv('./state-areas.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
abbrevs,pandas.read_csv('./state-abbrevs.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pop,pandas.read_csv('./state-population.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pop_density,pandas.DataFrame(pop_density),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,numpy.asarray(data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_array,numpy.asarray(new_data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,numpy.transpose(data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_json('students.json'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=validation_size,random_state=seed)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=10,random_state=7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_val_score(model,X_train,Y_train,cv=kfold,scoring=scoring)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,pandas.read_csv('D:/Datasets/HAM10000_metadata(Mel),CLUSTER_22,CLUSTER_3,CLUSTER_8,CLUSTER_0,CLUSTER_0
X,numpy.array(image_list),CLUSTER_22,CLUSTER_3,CLUSTER_8,CLUSTER_0,CLUSTER_0
data,"numpy.asarray(img,dtype=""int32"")",CLUSTER_22,CLUSTER_3,CLUSTER_8,CLUSTER_0,CLUSTER_0
"X_train,X_validation,Y_train,Y_validation","sklearn.model_selection.train_test_split(X[:Y.shape[0]],Y,test_size=.2,random_state=5)",CLUSTER_22,CLUSTER_3,CLUSTER_8,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df_train,df_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv(data_path+'titanic_test.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mask_gt,"numpy.zeros((100,100)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mask,"numpy.zeros((100,100)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X,"numpy.concatenate((X1,X2,X3,X4)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
true_positive,numpy.asarray([0]*(NUM_TARGETS+2),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
false_positive,numpy.asarray([0]*(NUM_TARGETS+2),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
false_negative,numpy.asarray([0]*(NUM_TARGETS+2),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
onehot,numpy.zeros(len(FEATURES[-1]),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
onehot,numpy.zeros(len(FEATURES[tag_index]),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
onehot,numpy.zeros(NUM_TARGETS),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
onehot,numpy.zeros(5),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
confusion_matrix,"numpy.zeros((NUM_TARGETS,NUM_TARGETS)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
TARGET_LOCATION[target],numpy.argmax(onehot),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
target,"numpy.argmax(target,2)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
prediction,"numpy.argmax(prediction,2)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
target,"numpy.reshape(target,(-1,MAX_SENTENCE_LENGTH,NUM_TARGETS)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
prediction,"numpy.reshape(prediction,(-1,MAX_SENTENCE_LENGTH,NUM_TARGETS)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
temp,"numpy.append(temp,word_vectors[word_and_features[0]])",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
temp,"numpy.append(temp,get_feature_vector(feature,index)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
temp,"numpy.append(temp,cap_feature(word_and_features[0])",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
df_cm,"pandas.DataFrame(confusion_matrix,
index=row_labels,
columns=col_labels)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
confusion,"seaborn.heatmap(df_cm,annot=True)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
city_data_df,pandas.DataFrame(all_cities_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
response,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
schema,collections.OrderedDict(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
women_degrees,pandas.read_csv('percent-bachelors-degrees-women-usa.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(18,3)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(24,18)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
real_fake,"pandas.concat([real_news,fake_news])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
fake,pandas.read_csv('./data/fake.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
real,pandas.read_csv('./data/real.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
real_fake['content'],numpy.where(pd.notnull(real_fake['content']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
logit,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
raw_confirmed_df,pandas.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
raw_recovered_df,pandas.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv'),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
raw_death_df,pandas.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv'),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
xc,pandas.to_datetime(xc),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
xd,pandas.to_datetime(xd),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
xr,pandas.to_datetime(xr),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
grad_hat,"scipy.signal.savgol_filter(grad,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
ratio_hat,"scipy.signal.savgol_filter(ratio,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
death_vals_hat,"scipy.signal.savgol_filter(death_vals,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
recovered_vals_hat,"scipy.signal.savgol_filter(recovered_vals,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
confirmed_grad_hat,"scipy.signal.savgol_filter(confirmed_grad,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(22,12)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.subplot(2,2,1)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=90,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
data_test['Country_Holand-Netherlands'],"numpy.zeros([data_test.shape[0],1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rows,numpy.ceil(float(data_train.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
out,pandas.DataFrame(dic),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
out,"pandas.concat([out,pd.get_dummies(out[feature_list])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_train,"pandas.concat([data_train,pd.get_dummies(data_train['Workclass'],
prefix=""Workclass"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_test,"pandas.concat([data_test,pd.get_dummies(data_test['Workclass'],prefix=""Workclass"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_train,"pandas.read_csv('../data/adult_train.csv',sep=';')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_test,"pandas.read_csv('../data/adult_test.csv',sep=';')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train['Поедет'],sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
locally_best_tree,"sklearn.model_selection.GridSearchCV(tree,tree_params,cv=5,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
locally_best_forest,"sklearn.model_selection.GridSearchCV(rf,forest_params,cv=5,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=3,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,"sklearn.tree.DecisionTreeClassifier(max_depth=3,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,sklearn.tree.DecisionTreeClassifier(random_state=17),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tuned_tree,"sklearn.tree.DecisionTreeClassifier(max_depth=9,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,n_jobs=-1,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accur,"sklearn.metrics.accuracy_score(y_test,tree_predictions)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(y_test,tuned_tree_predictions)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
ward,sklearn.cluster.AgglomerativeClustering(n_clusters=3),CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
complete,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage='complete')",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
avg,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage='average')",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
ward,sklearn.cluster.AgglomerativeClustering(n_clusters=3),CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
complete,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage=""complete"")",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
avg,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage=""average"")",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
ward_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,ward_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
complete_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,complete_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
avg_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,avg_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
ward_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,ward_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
complete_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,complete_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
avg_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,avg_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
normalized_X,sklearn.preprocessing.normalize(iris.data),CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,y_train",numpy.array(X_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gru_pred,"numpy.array(gru_predictions[:,:n_pred])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gru_pred,"numpy.repeat(gru_pred,val_gap,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,"numpy.reshape(X_train,(X_train.shape[0],n_input,n_features)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
current_batch,"numpy.append(current_batch[:,1:],[dummy.reshape(1,-1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_data,pandas.DataFrame(test_data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_data,pandas.DataFrame(train_data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
final_gru_predictions,pandas.DataFrame(gru_pred),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_df,"pandas.concat([new_df,df])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_df_test,"pandas.concat([new_df_test,df_test])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe,"pandas.concat([dataframe,test_building],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_df,"pandas.get_dummies(new_df,columns=one_hot)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_df_test,"pandas.get_dummies(new_df_test,columns=one_hot)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe,pandas.read_csv('csv_files/intermediate_files/building_'+str(index_reader),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_building,pandas.read_csv('csv_files/intermediate_files/building_'+str(index_reader),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_for_index,pandas.read_csv('./test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['timestamp'],"pandas.to_datetime(train['timestamp'],infer_datetime_format=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test['timestamp'],"pandas.to_datetime(test['timestamp'],infer_datetime_format=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe['timestamp'],"pandas.to_datetime(dataframe['timestamp'],infer_datetime_format=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_org,"pandas.read_csv(""data/covid_data_original.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_bar,"pandas.read_csv('flavors_of_cacao.csv',
sep=',',header=0,names=['company','bar_name','ref','rew_date','percent','company_loc','rate','bean_dtype','bean_orig'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('./data/SO_EOMMetrics_ext.csv'),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['BusinessMonth'],pandas.to_datetime(df['BusinessMonth']),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('sample_s2.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_set,sklearn.datasets.load_files('Imdblite/train/'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
test,sklearn.datasets.load_files('Imdblite/test/'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
clf,sklearn.svm.LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
clf,sklearn.svm.LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
scores,sklearn.model_selection.cross_val_score(LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
scores2,sklearn.model_selection.cross_val_score(LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
scores3,sklearn.model_selection.cross_val_score(LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
dataset,pandas.read_csv(r'C:\Users\Sunshine\Downloads\Compressed\Machine-Learning-A-Z-New\MachineLearningA-ZNew\Part1-DataPreprocessing\Data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
labelencoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
labelencoder_y,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[0]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
C_range,"numpy.logspace(2,14,13)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gamma_range,"numpy.logspace(-15,-3,13)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_images_df,"pandas.DataFrame(
train_images.reshape(
(train_images.shape[0],
train_images.shape[1]*train_images.shape[2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_labels_df,pandas.DataFrame(train_labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_images_df,"pandas.DataFrame(
test_images.reshape((test_images.shape[0],
test_images.shape[1]*test_images.shape[2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_labels_df,pandas.DataFrame(test_labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""./input/train.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""./input/test.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(
train_images_df,train_labels_df,test_size=0.25,random_state=40)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rbf_clf,"sklearn.svm.SVC(C=10,kernel='rbf',gamma='scale',decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_clf,"sklearn.svm.SVC(C=10,kernel='linear',decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly_clf,"sklearn.svm.SVC(C=10,kernel='poly',decision_function_shape='ovr')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_clf,"sklearn.svm.SVC(C=10,kernel='rbf',decision_function_shape='ovr')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
normalized_rbf_clf,"sklearn.svm.SVC(C=10,kernel='rbf',decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
normalized_rbf_clf,"sklearn.svm.SVC(C=10,kernel='rbf',gamma='scale',decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(C=C,gamma=gamma)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_rbf_clf,"sklearn.svm.SVC(C=10,kernel='rbf',gamma=1e-07,decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linear_clf,sklearn.svm.LinearSVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=0.9,whiten=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=5,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,sklearn.model_selection.GridSearchCV(SVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,numpy.zeros_like(train.corr(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.ret,"pandas.DataFrame(columns=['times','precision','recall'])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
percentage,"pandas.DataFrame(round(df.loc[:,features].value_counts(dropna=False,normalize=True)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_data,"pandas.concat([train,test],ignore_index=False)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_data,"pandas.concat([with_N,without_N],axis=0)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(filename,delimiter='\t')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('../L2/titanic/train.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('../L2/titanic/test.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax1,"seaborn.boxplot(x=""Embarked"",y=""Fare"",hue=""Pclass"",data=train,ax=ax[0])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax2,"seaborn.boxplot(x=""Embarked"",y=""Fare"",hue=""Pclass"",data=test,ax=ax[1])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr,"sklearn.ensemble.RandomForestRegressor(n_estimators=1500,n_jobs=-1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
action,numpy.argmax(actions),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_7
self.l_tq_squared_error,collections.deque(maxlen=1000),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_7
Cust_summary,pandas.DataFrame(),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
Cust_data,pandas.read_csv('Cust_data.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
Cust_Demo,pandas.read_csv('Cust_Demo.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dataframe,pandas.DataFrame(arrayData),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
normalized_X,sklearn.preprocessing.normalize(X),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
standardized_X,sklearn.preprocessing.scale(X),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(standardized_X,y,test_size=0.20)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(9,1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(shuffle=True,random_state=seed)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(pipeline,normalized_X,y,cv=kfold,pre_dispatch='5')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pix_pos,numpy.array([iforiinrange(765),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
peak_pos,"numpy.array(argrelextrema(avgcol_starlamp,np.greater,order=28)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
wl,"numpy.array([6266.49,6304.79,6334.43,6382.99,6402.25,6506.53,6532.88,6598.95,6678.28,6717.04,6929.47])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
pix_pos,numpy.array([iforiinrange(765),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
wl,"numpy.array([6266.49,6304.79,6334.43,6382,6506.53,6598.95,6678.28,6717.04,6929.47])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
avgcol_starlamp,"numpy.mean(cut50,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
avgcol_starlamp,"numpy.mean(cut50,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
LnRg,numpy.poly1d(fit),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
LnRg,numpy.poly1d(fit),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fit,"numpy.polyfit(peak_pos,wl,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fit,"numpy.polyfit([48,187,388,719],[6266.49,6402.25,6598.95,6929.47],2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
DF_CD,pandas.DataFrame(cleaned_data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
alleduatt,pandas.read_csv('files/AllEduAttainment.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
schoollevel,pandas.read_csv('files/2016_PSSA_School_Level_Perfomance_Results.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
pssa,pandas.read_csv(filename),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
x_t,"numpy.asarray([integrate.odeint(lorenz_deriv,x0i,t)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,max_time,int(250*max_time)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.zeros((len(t),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,20,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
r,"scipy.integrate.ode(f_np,jac_np)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"line1,","matplotlib.pyplot.plot([],[],'bo')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"line2,","matplotlib.pyplot.plot([],[],'ro')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(7,7)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df_train,df_test])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv(data_path+'titanic_test.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_fixed['Fare'],numpy.log1p(df_fixed['Fare']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_fixed['Fare'],scipy.stats.boxcox(df_fixed['Fare']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
col,"pandas.cut(col,bin_num,right=True,include_lowest=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dum,"pandas.get_dummies(col,dummy_na=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_full,"pandas.read_csv('../data/LoanStats2014.csv',skiprows=1,skipfooter=2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['mo_earliest_credit'],pandas.to_datetime('2014-12-01'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['term'],pandas.to_numeric(df['term']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['int_rate'],pandas.to_numeric(df['int_rate']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['emp_length'],pandas.to_numeric(df['emp_length']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['revol_util'],pandas.to_numeric(df['revol_util']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_features='sqrt',n_jobs=-1,class_weight='balanced')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gc,"sklearn.model_selection.GridSearchCV(gbc,gbc_params,n_jobs=-1,scoring='roc_auc',verbose=5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbc,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'From_To':['LoNDon_paris','MAdrid_miLAN','londON_StockhOlm','Budapest_PaRis','Brussels_londOn'],
'FlightNumber':[10045,np.nan,10065,np.nan,10085],
'RecentDelays':[[23,47],[],[24,43,87],[13],[67,32]],
'Airline':['KLM(!)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_df,pandas.read_csv('train.csv'),CLUSTER_15,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_0
valid_df,pandas.read_csv('test.csv'),CLUSTER_15,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_0
vv,"numpy.array([1e8,1.5e8,2e8])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
boost,"numpy.zeros((4,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_2,"numpy.dot(b1,X_1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_1,numpy.reshape([rnd_xn(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
beta_norm,numpy.linalg.norm(beta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lgs_total,pandas.DataFrame(columns=idx),CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
samples,pandas.DataFrame(),CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
titanic_types,"pandas.DataFrame(data=titanic.dtypes,index=titanic.columns,columns=['dtype'])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
g,"pandas.concat(read_files('\\ebola\\guinea_data\\',['Date'])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
l,"pandas.concat(read_files('\\ebola\\liberia_data\\',['Date'])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
sl,"pandas.concat(read_files('\\ebola\\sl_data\\',['date'])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.concat([lgs_total,sl_deaths])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
agecalc,"pandas.concat([titles,titanic.age],axis=1)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"cut,bins","pandas.cut(titanic.age,age_range,right=False,retbins=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"cut,bins","pandas.cut(titanic_filled.age,age_range,right=False,retbins=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,g_new,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,g_deaths,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,l_new,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,l_deaths,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,sl_new,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,sl_deaths,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
samples,"pandas.merge(samples,mid,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"cut,bins","pandas.qcut(passengers_survived_groups.age,2,labels=['youngerthanmedian','olderthanmedian'],retbins=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"cut,bins","pandas.qcut(passengers_survived_groups.age,2,labels=['youngerthanmedian','olderthanmedian'],retbins=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(DATA_FOLDER+dirname+filename,header=0,parse_dates=date_col)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
metadata,"pandas.read_excel(DATA_FOLDER+'\\microbiome\\metadata.xls',sheetname='Sheet1',index_col='BARCODE')",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
mid,"pandas.read_excel(DATA_FOLDER+'\\microbiome\\'+index+'.xls',sheetname='Sheet1',header=None,index_col=0)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
titanic,"pandas.read_excel(DATA_FOLDER+'\\titanic.xls',sheetname='titanic')",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
age_range,"numpy.arange(0,age_limit,10,dtype=np.int64)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
age_range,"numpy.arange(0,age_limit,10,dtype=np.int64)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
path,os.getcwd(),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
path,os.getcwd(),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
d,numpy.array(data),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
admitted,"numpy.array([[sample[0],sample[1]]forsampleindifsample[2]==1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
notAdmitted,"numpy.array([[sample[0],sample[1]]forsampleindifsample[2]==0])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dR,numpy.array(dataR),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
accepted,"numpy.array([[s[0],s[1]]forsindRifs[2]==1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
rejected,"numpy.array([[s[0],s[1]]forsindRifs[2]==0])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(X.shape[1]),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
g,"numpy.sum(g,axis=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
L,"numpy.linspace(-10,10,50)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(min(X[:,1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.column_stack((np.ones((X.shape[0]),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('ex2data1.txt'
,header=None
,names=['exam1','exam2','admission'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dataR,"pandas.read_csv('ex2data2.txt',header=None,names=['test1','test2','Acceptance'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
result,"scipy.optimize.fmin_tnc(func=computeCostJ,x0=theta,fprime=gradient,args=(X,y)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
A_raw,numpy.array([(125/(4+c*0.25),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
b,numpy.array([np.float64(N),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
norms,"numpy.array(norms,dtype=np.float64)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
b,numpy.array([n*i+mforiinrange(n),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A,"numpy.array([
[(i+j)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
L,numpy.zeros(A.shape),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A_inv,numpy.dot(np.linalg.inv(L.T),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
comp,numpy.argsort(norms),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
bs,"numpy.repeat(b,n)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"L[i,i]","numpy.sqrt(A[i,i]-np.dot(L[i],L[i])",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
diag,numpy.diag([eps]*n),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cond,"numpy.linalg.norm(A,ord=np.inf)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linalg.solve(A,b)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,"numpy.linalg.solve(L,b)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linalg.solve(L.T,y)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"LU,p",scipy.linalg.lu_factor(A),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
score,numpy.array(lst),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv('creditcard.csv',delimiter=',')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
train,pandas.get_dummies(train),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.get_dummies(test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""Dataset/Train.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""Dataset/Test.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_x,validation_x,train_y,validation_y","sklearn.model_selection.train_test_split(train,label,test_size=0.28,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model2,sklearn.svm.SVR(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model1,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model3,sklearn.linear_model.Ridge(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.Ridge(alpha=i,fit_intercept=j,solver=k)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
selected_model,"sklearn.linear_model.Ridge(alpha=10000,copy_X=True,fit_intercept=True,max_iter=None,
normalize=False,random_state=None,solver='sag',tol=0.001)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model4,sklearn.linear_model.Lasso(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.Lasso(alpha=i,fit_intercept=j,selection=k)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
means,"numpy.concatenate((stat['mean_cond1'],stat['mean_cond2'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
variances,"numpy.concatenate((stat['var_cond1'],stat['var_cond2'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
both_conds,"numpy.concatenate((data['cond1'][i],data['cond2'][i])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lambda_0,numpy.mean(two_all),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lambda_x,numpy.mean(two_x),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lambda_y,numpy.mean(two_y),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stat['mean'+'_'+cond],"numpy.mean(data[cond],axis=1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lambda_0,numpy.mean(both_conds),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood_0,"numpy.prod(poisson.pmf(two_all,lambda_0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood_a,"numpy.prod(poisson.pmf(two_x,lambda_x)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood_0,"numpy.prod(poisson.pmf(both_conds,lambda_0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood_a,"numpy.prod(poisson.pmf(data['cond1'][i],
lambda_cond1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stat['var'+'_'+cond],"numpy.var(data[cond],axis=1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
two,"pandas.read_csv(""q2_set_1.tsv"",sep='\t',index_col=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
three_1,"pandas.read_csv(""q3_set_1.tsv"",sep='\t')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
three_2,"pandas.read_csv(""q3_set_2.tsv"",sep='\t')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
confidence_interval,pandas.Series(boot_mean_diff),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
yearly,pandas.read_csv('datasets/yearly_deaths_by_clinic.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
monthly,"pandas.read_csv(""datasets/monthly_deaths.csv"",parse_dates=['date'])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
handwashing_start,pandas.to_datetime('1847-06-01'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean_diff,numpy.mean(after_proportion),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ebola_parsed,"pandas.concat([ebola_long,variable_split],axis=1)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi,"pandas.concat([taxi1,taxi2,taxi3,taxi4,taxi5])",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi_loop_concat,pandas.concat(list_taxi_df),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
pew_long,"pandas.melt(pew,id_vars='religion')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
pew_long,"pandas.melt(pew,id_vars='religion',var_name='income',value_name='count')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
billboard_long,"pandas.melt(
billboard,
id_vars=['year','artist','track','time','date.entered'],
var_name='week',
value_name='rating'
)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
ebola_long,"pandas.melt(ebola,id_vars=['Date','Day'])",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
weather_melt,"pandas.melt(weather,id_vars=['id','year','month','element'],var_name='day',value_name='temp')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
billboard_long,"pandas.melt(billboard,id_vars=['year','artist','track','time','date.entered'],var_name='week',value_name='rating')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
pew,pandas.read_csv('../data/pew.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
billboard,pandas.read_csv('../data/billboard.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
ebola,pandas.read_csv('../data/country_timeseries.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
weather,pandas.read_csv('../data/weather.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
billboard,pandas.read_csv('../data/billboard.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi1,pandas.read_csv(nyc_taxi_data[0]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi2,pandas.read_csv(nyc_taxi_data[1]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi3,pandas.read_csv(nyc_taxi_data[2]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi4,pandas.read_csv(nyc_taxi_data[3]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi5,pandas.read_csv(nyc_taxi_data[4]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(csv_filename),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(file),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_x,numpy.array(train_X.drawing.tolist(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
validation_x,numpy.array(validation_X.drawing.tolist(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
Class_perform,"numpy.zeros([num_classes,2])",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
Class_Acc,numpy.zeros([num_classes]),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
Country_perform,"numpy.zeros([num_countries,2])",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
Country_Acc,numpy.zeros([num_countries]),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
display_samples,pandas.DataFrame(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
train_data,pandas.DataFrame(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
cat,"pandas.read_csv('../input/train_simplified/cat.csv',nrows=10)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
temp,"pandas.read_csv(os.path.join(path_train,filename)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
temp,"pandas.read_csv(os.path.join(path_train,filename)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
"fig,axs","matplotlib.pyplot.subplots(nrows=figrows,ncols=figcols,sharex=True,sharey=True,figsize=(16,10)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
"fig1,ax_acc",matplotlib.pyplot.subplots(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
"fig2,ax_loss",matplotlib.pyplot.subplots(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
country_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
"train_X,validation_X,train_y,validation_y","sklearn.model_selection.train_test_split(train_data,label,test_size=0.2,random_state=13)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
df_temp,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df_train,df_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.concat([df[:train_num],train_Y],axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.concat([df[:train_num],train_Y],axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,mean_df,on=c,how='left')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,mean_df,on=c,how='left')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv(data_path+'house_test.csv.gz'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp[c],sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp[c],sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(3,3)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(num_grids,num_grids)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(num_grids,num_grids)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
tick_marks,numpy.arange(num_classes),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
cls_pred,"numpy.zeros(shape=num_test,dtype=np.int)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
data.test.cls,"numpy.argmax(data.test.labels,axis=1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_true=cls_true,
y_pred=cls_pred)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
start_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
end_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
num_grids,math.ceil(math.sqrt(num_filters),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
num_grids,math.ceil(math.sqrt(num_filters),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
true_points,numpy.where(upper_lines[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
true_points,numpy.where(lower_lines[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
kernel,"numpy.ones((7,7)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sorted_objects,"numpy.argsort(stats[:,-1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
upper_lines,"numpy.append(upper_lines,upper_line)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lower_lines,"numpy.append(lower_lines,lower_line)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
line,"numpy.polyfit(true_points[1],h-true_points[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
line,"numpy.polyfit(true_points[1],h-true_points[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
upper_degrees,math.degrees(math.atan(line[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lower_degrees,math.degrees(math.atan(line[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo2})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.concat([X_train,y_train],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,pandas.read_csv('./Data/X_test_clean.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,pandas.read_csv('./Data/X_train_clean.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train,pandas.read_csv('./Data/y_train_clean.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('./Data/test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_Lasso_sc7.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_Ridge_Sc3.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_KNN1_Sc.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_Gamma5.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_ENet_sc2.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_ENet_sc2.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_Linear2.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_model,"sklearn.linear_model.LassoCV(alphas=l_alphas,cv=kf)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_model,"sklearn.linear_model.RidgeCV(alphas=r_alphas,cv=kf)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enet_model,"sklearn.linear_model.ElasticNetCV(alphas=enet_alphas,l1_ratio=enet_ratio,cv=kf)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enet_model,"sklearn.linear_model.ElasticNetCV(alphas=enet_alphas,l1_ratio=enet_ratio,cv=20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=1,p=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cleo2,numpy.concatenate(cleo),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l_alphas,"numpy.logspace(2.7,3.05,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r_alphas,"numpy.logspace(2.8,2.95,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enet_alphas,"numpy.logspace(-1,0.03,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enet_alphas,"numpy.logspace(-2,0.03,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
words,numpy.array(vectorizer.get_feature_names(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,"numpy.zeros(critics.shape[0],dtype=np.bool)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ind,numpy.argsort(probs),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bad_rotten,numpy.argsort(prob[y==0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bad_fresh,numpy.argsort(prob[y==1]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cumulative,numpy.cumsum(values),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.eye(xtest.shape[1]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"values,base","numpy.histogram(DocFreq,bins=DocFreq.max()",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
critics,pandas.read_csv('./critics.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train,test","sklearn.model_selection.train_test_split(critics[[""quote"",""fresh""]],test_size=0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"itrain,itest",sklearn.model_selection.train_test_split(range(critics.shape[0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(alpha=alpha),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(alpha=best_alpha),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_best,"sklearn.model_selection.GridSearchCV(estimator=clf,param_grid=params_for_opt,scoring=scoring,cv=cv)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_accuracy,"sklearn.metrics.accuracy_score(y_train,y_train_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_accuracy,"sklearn.metrics.accuracy_score(y_test,y_test_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_auc,"sklearn.metrics.auc(fpr1,tpr1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_f1,"sklearn.metrics.f1_score(y_train,y_train_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_f1,"sklearn.metrics.f1_score(y_test,y_test_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_train,y_train_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr1,tpr1,thresholds1","sklearn.metrics.roc_curve(y_test,y_test_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Xt_new,"sklearn.feature_selection.SelectKBest(chi2,k=nkbest)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,"numpy.array(
[
1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9
]
)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y_train,"numpy.array(
[
2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18
])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_val,"numpy.array(
[
1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9
])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y_val,"numpy.array(
[
2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18
])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test,"numpy.array([
1,2,3,4,5,6,7,8,9
])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y_test,"numpy.array([
[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]

])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.read_excel('../1.xlsx',header=None,index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
a,"pandas.read_excel('../1.xlsx',header=None,index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
b,"pandas.read_excel('../1.xlsx',header=None,index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
sleep,"pandas.read_csv('com.samsung.shealth.sleep.201908141922.csv',header=1)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
sleep2,"pandas.read_csv('com.samsung.shealth.sleep_data.201908141922.csv',header=1)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
files,os.listdir(os.curdir),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
train_kmm,numpy.array(df_new_3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_kmm,numpy.array(df_new),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
encoded_dim,numpy.shape(train_encoded),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
encoded_dim,numpy.shape(train_encoded),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
k_means_labels_unique,numpy.unique(k_means_labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
k_means_labels_unique,numpy.unique(k_means_labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_label,"pandas.DataFrame({'mean':test_encoded[:,0],'std':test_encoded[:,1],'label':testlabel})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_new,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_new,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(save_path+'train_FD001_3_p20_.txt',header=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
k_means,"sklearn.cluster.KMeans(init='k-means++',n_clusters=n_num,n_init=10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
k_means,"sklearn.cluster.KMeans(init='k-means++',n_clusters=n_num,n_init=10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.DataFrame(columns=files),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
test,pandas.DataFrame(columns=files),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
oof,"pandas.DataFrame({'encounter_id':train['encounter_id'],'hospital_death':oof_preds})",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'encounter_id':test['encounter_id'],'hospital_death':preds_test})",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_,pandas.read_csv('../raw/training.csv'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
predictions,pandas.read_csv(f'../oof_preds/{file}'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
predictions,pandas.read_csv(f'../submissions/{file}'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
lbl,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
df_new,"pandas.concat((df_0,df_1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('diabetes.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2[feature],numpy.where((df2['Outcome']==1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2[feature],numpy.where((df2['Outcome']==0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
GaussNB,sklearn.naive_bayes.GaussianNB(priors=None),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MultiNB,sklearn.naive_bayes.MultinomialNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feature_matrix,df2['Outcome'],random_state=1,test_size=0.2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"Xn_train,Xn_test,yn_train,yn_test","sklearn.model_selection.train_test_split(df_new[df_new.columns[:-1]],df_new['Outcome'],random_state=17,test_size=0.2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.Pipeline([('scaler',StandardScaler()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline2,"sklearn.pipeline.Pipeline([('scaler',StandardScaler()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline_nb,"sklearn.pipeline.Pipeline([('clf',GaussianNB(priors=[0.651,0.349])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline_nb1,"sklearn.pipeline.Pipeline([('clf',GaussianNB()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,"pandas.DataFrame({
""PassengerId"":df_test[""PassengerId""],
""Survived"":pred
})",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
df_train,"pandas.read_csv(""../input/train.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
df_test,"pandas.read_csv(""../input/test.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([
(""column_extractor"",ColumnExtractor(feature_columns)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
self.min_max_scalar,sklearn.preprocessing.MinMaxScaler(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
close,"pandas.DataFrame(dbi[""AdjClose""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"pandas.DataFrame(close[""AdjClose""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"pandas.DataFrame(close[""7daysout""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
comb,pandas.DataFrame(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
holdout_X,"pandas.DataFrame(holdout[""AdjClose""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"comb[""y_test""]",pandas.Series(y_test.tolist(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"comb[""y_pred""]",pandas.Series(y_pred.tolist(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dbi,"pandas.read_csv(""DBI.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
holdout.index,pandas.to_datetime(holdout.index),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.2,random_state=23)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr,sklearn.svm.SVR(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfn,"pandas.DataFrame(df,columns=col_n)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
percent,pandas.Series(round(total/len(df),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,onehot_encoding_fuel],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,onehot_encoding_type],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,onehot_encoding_door_structure],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehot_encoding_fuel,"pandas.get_dummies(df['heat_fuel'],prefix='heat_fuel')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehot_encoding_type,"pandas.get_dummies(df['heat_type'],prefix='heat_type')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehot_encoding_door_structure,"pandas.get_dummies(df['front_door_structure'],prefix='front_door_structure')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""trainPrice.csv"",decimal=',')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['exclusive_use_area'],pandas.to_numeric(df['exclusive_use_area']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['total_parking_capacity_in_site'],pandas.to_numeric(df['total_parking_capacity_in_site']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['supply_area'],pandas.to_numeric(df['supply_area']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['room_count'],pandas.to_numeric(df['room_count']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['bathroom_count'],pandas.to_numeric(df['bathroom_count']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(data.data,columns=data.feature_names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
target,"pandas.DataFrame(data.target,columns=[""MEDV""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.load_boston(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
t,"numpy.arange(0,5,0.2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_pos,numpy.arange(len(objects),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.arange(5),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"df[""PRICE""]",numpy.array(boston.target),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(boston.data,columns=boston.feature_names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_scaled,pandas.DataFrame(self.scaler.transform(X[self.columns]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
strains_2,pandas.get_dummies(C046_H1117_1['Strains']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
C046_H1117,pandas.read_excel(r'C:\ZL\Googledrivesyn\Research\manuscriptwriting\Harvestingefficiency\Harvestingreport\Harvestingpaper\Data\Pythonregressionanalysis\datacombine\C046+H1117_clean_reggression.xlsx'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
target,"numpy.where(C046_H1117_processed['Harvest_efficiency']>60,1,0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.mean_,numpy.mean(X[self.columns]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
summary_table['Coefficient'],numpy.transpose(reg.coef_),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.var_,numpy.var(X[self.columns]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
summary_table['Odds_ratio'],numpy.exp(summary_table.Coefficient),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.scaler,"sklearn.preprocessing.StandardScaler(copy,with_mean,with_std)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_inputs,target,
test_size=0.2,random_state=20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1,"numpy.linspace(0,66,700)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ima,pandas.read_excel('/Users/cyano/Desktop/tsi_fui.xlsx'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"popt,pcov","scipy.optimize.curve_fit(func,x,y)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
encoded,"numpy.array([vocab_to_int[c]forcintext],dtype=np.int32)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,"numpy.zeros(x.shape,dtype=x.dtype)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.zeros((1,1)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
p,numpy.squeeze(preds),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
image_id,random.choice(dataset.image_ids),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
ixs,numpy.arange(len(keep),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
roi_class_names,numpy.array(dataset.class_names),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
det_mask_specific,"numpy.array([mrcnn[""masks""][0,i,:,:,c]
fori,cinenumerate(det_class_ids)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
det_masks,"numpy.array([utils.unmold_mask(m,det_boxes[i],image.shape)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
positive_anchor_ix,numpy.where(target_rpn_match[:]==1),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
negative_anchor_ix,numpy.where(target_rpn_match[:]==-1),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
neutral_anchor_ix,numpy.where(target_rpn_match[:]==0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
det_count,numpy.where(det_class_ids==0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
roi_positive_ixs,numpy.where(roi_class_ids>0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[ixs]>0,2,1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[roi_positive_ixs][ids]>0,1,0)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
keep,numpy.where(roi_class_ids>0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
ixs,numpy.where(pre_nms_class_ids==class_id),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[keep][ixs]>0,1,0)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
det_count,numpy.where(det_class_ids==0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
roi_class_ids,"numpy.argmax(mrcnn[""probs""][0],axis=1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
sorted_anchor_ids,"numpy.argsort(rpn['rpn_class'][:,:,1].flatten()",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
proposals,"numpy.around(mrcnn[""proposals""][0]*np.array([h,w,h,w])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
keep,"numpy.intersect1d(keep,np.where(roi_scores>=config.DETECTION_MIN_CONFIDENCE)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
keep,"numpy.intersect1d(keep,nms_keep)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
nms_keep,"numpy.union1d(nms_keep,class_keep)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,0],50)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,1],50)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,2],50)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,3],50)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.imshow(modellib.unmold_image(activations[""input_image""][0],config)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
"_,ax","matplotlib.pyplot.subplots(rows,cols,figsize=(size*cols,size*rows)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
x,"numpy.linspace(0,1,num=1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
players,"pandas.DataFrame(players,columns=['player'])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
result,"pandas.merge(points,games_played,left_index=True,right_index=True)",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(path),CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data['date'],"pandas.to_datetime(data['date'],format='%Y-%m-%d')",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
path,os.getcwd(),CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ax,"seaborn.lineplot(x=""date"",
y=""points"",
hue=""player"",
data=df,
dashes=True)",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_train,pandas.DataFrame(scaler.transform(X_train),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
X_test,pandas.DataFrame(scaler.transform(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('Data/winequality-red.csv',sep=';')",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=SEED)",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
c,collections.Counter(item),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
c,collections.Counter(data),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
a,"numpy.array([1,2,3])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
b,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([1,2])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([1.0,2.0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([1,2],dtype=np.int64)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2],[3,4]],dtype=np.float64)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([[5,6],[7,8]],dtype=np.float64)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2],[3,4]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([[5,6],[7,8]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v,"numpy.array([9,10])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
w,"numpy.array([11,12])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2],[3,4]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v,"numpy.array([1,0,1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
	image,numpy.asarray(bytearray(resp.read(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,"numpy.zeros((2,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.empty_like(x),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
b,"numpy.ones((1,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
c,"numpy.full((2,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,"numpy.sum(npimg/3,axis=-1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
kernel,"numpy.float32([[-1,0,1],[-1,0,1],[-1,0,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
d,numpy.eye(2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
response,requests.get('https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRZpTmijaNOH6MmycM_eiPKcEl5mVvbwl7a8YKVGpEEMIanDcSt'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"y_true,y_pred",numpy.array(y_true),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
y_pred,numpy.array(y_pred),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
temp,numpy.zeros(len(p),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
temp,numpy.zeros(len(p),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
weather_labels_value,numpy.transpose(np.float32(labels_df[weather_labels].values),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
labels_df,pandas.read_csv(PLANET_KAGGLE_LABEL_CSV),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
arr,numpy.arange(100),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
ar,"numpy.array([45,6,78,9.6,20,45],dtype='int32')",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
array2,"numpy.array([[1,3,5.9,7],[2,4,6,8]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
array3,"numpy.array([[1,3,5],[2,4,6]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,"numpy.array([[2,41,13],[16,17,18]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
zerod,"numpy.zeros((4,6)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'product_name':product_names_df,'product_brand':product_brands_df,'actual_price':actual_prices_df,'selling_price':selling_prices_df,'product_link':product_links_df})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
html,"requests.get(url,headers=headers_std)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
y,"numpy.array([0,1,2,2,1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
correct_scores,"numpy.asarray([
[-0.81233741,-1.27654624,-0.70335995],
[-0.17129677,-1.18803311,-0.47310444],
[-0.51590475,-1.01354314,-0.8504215],
[-0.15419291,-0.48629638,-0.52901952],
[-0.00618733,-0.12435261,-0.15226949]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
M_test_ans,"numpy.array(
[[0.,0.,0.,1.,0.,0.,0.,0.,1.,0.,],
[0.,0.,0.,1.,0.,0.,0.,0.,0.,1.,],
[0.,0.,0.,0.,0.,0.,1.,0.,0.,1.,],
[1.,1.,0.,0.,0.,0.,0.,0.,0.,0.,],
[0.,0.,0.,0.,0.,0.,0.,0.,1.,1.,],
[0.,0.,0.,0.,0.,0.,0.,1.,1.,0.,],
[0.,0.,1.,0.,0.,0.,0.,1.,0.,0.,],
[0.,0.,0.,0.,0.,1.,1.,0.,0.,0.,],
[1.,0.,0.,0.,1.,1.,0.,0.,0.,1.,],
[0.,1.,1.,0.,1.,0.,0.,0.,1.,0.,]]
)",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
M_reduced_plot_test,"numpy.array([[1,1],[-1,-1],[1,-1],[-1,1],[0,0]])",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
M,"numpy.zeros((num_words,num_words)",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
M,numpy.stack(M),CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
M_lengths,"numpy.linalg.norm(M_reduced_co_occurrence,axis=1)",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
svd,"sklearn.decomposition.TruncatedSVD(n_components=2,n_iter=n_iters,random_state=42)",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
elifnotcollections.Counter(self.indep_coords),=collections.Counter(other.indep_coords),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
elifnotcollections.Counter(self.indep_coords),=collections.Counter(other.indep_coords),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ifnotcollections.Counter(_ham1.indep_coords),=collections.Counter(_ham2.indep_coords),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
elifnotcollections.Counter(_op1.indep_coords),=collections.Counter(_op2.indep_coords),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_inputs,numpy.array(pos_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_inputs,numpy.array(neg_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_inputs,numpy.array(pos_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_inputs,numpy.array(neg_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_inputs,numpy.array(test_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
g,"numpy.array([[1,2,3,4,None]])",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
h,"numpy.array([0,1,0,1,0])",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp_features,numpy.zeros(no_of_features_considered),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_labels,numpy.zeros(len(neg_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_labels,numpy.zeros(len(neg_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_full,"numpy.concatenate((pos_inputs,pos_labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_full,"numpy.concatenate((neg_inputs,neg_labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
all_,"numpy.concatenate((pos_full_upsampled,neg_full_upsampled)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_full,"numpy.concatenate((pos_inputs,pos_labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_full,"numpy.concatenate((neg_inputs,neg_labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
all_,"numpy.concatenate((pos_full_upsampled,neg_full_upsampled)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_labels,numpy.ones(len(pos_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_labels,numpy.ones(len(pos_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_labels,numpy.ones(len(test_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp_df,"pandas.read_csv(""/Users/adithyabandi/Desktop/""+token+""_token.txt"",sep="""")",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
tf,math.log(1+count),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
idf,math.log(72/len(temp_array),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
l,sklearn.linear_model.LogisticRegression(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sgd_clf,sklearn.linear_model.SGDClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sgd_clf,sklearn.linear_model.SGDClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sgd_clf,sklearn.linear_model.SGDClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.ensemble.GradientBoostingClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.ensemble.GradientBoostingClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.ensemble.GradientBoostingClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sv_clf,sklearn.svm.SVC(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sv_clf,"sklearn.svm.SVC(kernel=""rbf"",random_state=42)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sv_clf,"sklearn.svm.SVC(kernel=""rbf"",random_state=42)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
lsv_clf,sklearn.svm.LinearSVC(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
lsv_clf,sklearn.svm.LinearSVC(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
lsv_clf,sklearn.svm.LinearSVC(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
acc_score,"sklearn.metrics.accuracy_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
acc_score,"sklearn.metrics.accuracy_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
acc_score,"sklearn.metrics.accuracy_score(test_labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
prec_score,"sklearn.metrics.precision_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
prec_score,"sklearn.metrics.precision_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
prec_score,"sklearn.metrics.precision_score(test_labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rec_score,"sklearn.metrics.recall_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rec_score,"sklearn.metrics.recall_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rec_score,"sklearn.metrics.recall_score(test_labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(test_labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
re_tag,re.compile(r'<[^>]+>'),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
results_prediction,"pandas.read_csv(param[""prediction_path""],sep="";"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
results_prediction,"pandas.read_csv(param[""prediction_path""],sep="";"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
results_prediction,"pandas.read_csv(param[""prediction_path""],sep="";"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
original_sensor_data,"pandas.read_csv(param[""data""][""path""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,requests.get('https://api.spotify.com/v1/search?query=80s&type=playlist'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
response,requests.get('https://api.spotify.com/v1/search?query=biggie&type=playlist'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
biggie_response,requests.get('https://api.spotify.com/v1/search?query=biggie&type=artist'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
response,"requests.get(""https://api.spotify.com/v1/artists/1RpIWJHxLsDE8YfFcRaBKw/top-tracks?country=US"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.zeros(4,dtype=int)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,"numpy.zeros(4,dtype={'names':('name','age','weight')",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X,"numpy.zeros(1,dtype=tp)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
tp,"numpy.dtype([('id','i8')",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('Absenteeism_at_work6.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,pandas.read_csv('df_14.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
colormap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
colormap3,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
colormap4,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labelencoder_X_1,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labelencoder_X_2,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mimic_data,"pandas.read_csv(""/content/drive/MyDrive/app/text_binary.csv"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
re_newlines,re.compile('\\\\n'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
re_letters,re.compile('[^A-Za-z0-9]'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
re_spaces,re.compile('\s+'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
enc,"numpy.array([vocab2index.get(w,vocab2index[""UNK""])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
word_vecs[word],numpy.array([float(val),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
W,"numpy.zeros((V,emb_size)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
W[0],"numpy.zeros(emb_size,dtype='float32')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
counts,collections.Counter(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"pandas.DataFrame(data,columns=feature_names)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,"pandas.DataFrame(target,columns=['price'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,pandas.Series(df['Class']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../creditcard.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=100,stratify=y)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
reg,"sklearn.ensemble.RandomForestRegressor(max_depth=12,n_estimators=1000,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,GridSearchCV(estimator=sklearn.ensemble.RandomForestClassifier(random_state=100),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.model_selection.GridSearchCV(estimator=RandomForestClassifier(random_state=100),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
AUC,"sklearn.metrics.roc_auc_score(y_test,y_pred_proba)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
all_anomalies,pandas.DataFrame(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
codes,pandas.Series(codelist),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
unique_dates,pandas.Series(dates),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
all_anomalies,"pandas.concat([all_anomalies,anomalies(meter)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
electric,"pandas.read_csv(""FullEletricInterval042016.csv"")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
weather,pandas.read_csv('weather_prepared_final.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
propertyCode,"pandas.read_excel(""SIMS_Property_List_4-6-2016_Revised.xlsx"")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
electric['Datetime'],pandas.to_datetime(electric['Date']+''+electric['StartTime']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
weather.DATE,pandas.to_datetime(weather.DATE),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
weekend,pandas.to_datetime(date),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(electric_day.ix[meter].index),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,pandas.to_datetime('2015-01-01'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,pandas.to_datetime('2016-04-10'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(electric_day.ix[meter].index),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,pandas.to_datetime('2015-01-01'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,pandas.to_datetime('2016-04-10'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
weekend,pandas.to_datetime(date),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(electric_total.index),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(electric_total.index),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,pandas.to_datetime('2015-01-01'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,pandas.to_datetime('2016-04-10'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"defsingle_building_meters_overlay(code,start","pandas.to_datetime('2014-04-1123:30:00'),end=pandas.to_datetime('2016-04-1023:30:00')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"_,ax","matplotlib.pyplot.subplots(rows,cols,figsize=(size*cols,size*rows)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(len(layers),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
result,pandas.DataFrame([[(num_one+num_three),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
final_result_food,pandas.DataFrame(np.zeros((len(state),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
final_result_activity,pandas.DataFrame(np.zeros((len(state),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
state_data,"pandas.read_csv('../data/state.csv',index_col=[0],header=None,usecols=[0,1,2])",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(file_name,header=None)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(file_name,header=None)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
o_data,"pandas.read_csv(from_csv,header=None,names=['id','state','tweet','food','activity','target'],
index_col=['id'])",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
"plt.errorbar(np.array(mean_list),x,xerr",numpy.array(error_list),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
"m,se",numpy.mean(a),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
years,numpy.arange(len(oil),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
oil,numpy.log(oil.DCOILWTICO.as_matrix(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
snp,numpy.log(snp.as_matrix(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.concat([oil,snp],axis=1,sort=True)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
snp,pandas.read_csv('./data/SNP.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
oil,pandas.read_csv('./data/OIL.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.read_csv('temp.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('lab1.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,numpy.sin(time_steps),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.sin(time_steps),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
time_steps,"numpy.linspace(0,np.pi,seq_length+1)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
time_steps,"numpy.linspace(0,np.pi,seq_length)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('Explor_uscecchini28.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test_nm,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"false_positive_rate,recall,thresholds","sklearn.metrics.roc_curve(y_test_nm,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self._table,"numpy.zeros((bins**observation_space.shape[0],action_space.n)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
self._learning_rates,"numpy.ones(
(bins**observation_space.shape[0],action_space.n)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_train,"numpy.asarray(df[['x1','x2']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_test,"numpy.asarray(dft[['x1','x2']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(x1min,x1max,100)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.linspace(x2min,x2max,100)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(x,y)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_all,"pandas.concat([df,dft])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('../dataset/knnClassify3c.csv',delimiter=';')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dft,"pandas.read_csv('../dataset/knnClassify3c-test.csv',delimiter=';')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.AdaBoostClassifier(classifier,n_estimators=n_estimators,algorithm='SAMME')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,cross_val_score(estimator=sklearn.ensemble.AdaBoostClassifier(DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=maxdepth),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,cross_val_score(estimator=sklearn.tree.DecisionTreeClassifier(max_depth=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.tree.DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.tree.DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,sklearn.model_selection.cross_val_score(estimator=DecisionTreeClassifier(max_depth=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,sklearn.model_selection.cross_val_score(estimator=BaggingClassifier(DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,sklearn.model_selection.cross_val_score(estimator=RandomForestClassifier(n_estimators=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,sklearn.model_selection.cross_val_score(estimator=AdaBoostClassifier(DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=cMap,alpha=.7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=cMap,alpha=.7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=cMap,alpha=.7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=cMap,alpha=.7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,4,figsize=(20,5)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(2,3,figsize=(20,8)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(3,4,figsize=(16,8)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(3,4,figsize=(16,8)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
nonzeroy,numpy.array(nonzero[0]),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
nonzerox,numpy.array(nonzero[1]),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
hist_features,"numpy.concatenate((channel1_hist[0],channel2_hist[0],channel3_hist[0])",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
heat,"numpy.zeros_like(img[:,:,0])",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
heat,"numpy.zeros_like(img[:,:,0])",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
heatmap,"numpy.clip(heat,0,255)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
heatmap,"numpy.clip(heat,0,255)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
hog_features,numpy.ravel(hog_features),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
y,numpy.hstack((np.ones(len(car_features),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
hog_features,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
X,"numpy.vstack((car_features,notcar_features)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
imcopy,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
else:feature_image,numpy.copy(image),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
else:feature_image,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
imcopy,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
draw_image,numpy.copy(image),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
draw_img,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
img_copy,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
channel1_hist,"numpy.histogram(img[:,:,0],bins=nbins,range=bins_range)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
channel2_hist,"numpy.histogram(img[:,:,1],bins=nbins,range=bins_range)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
channel3_hist,"numpy.histogram(img[:,:,2],bins=nbins,range=bins_range)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t2,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t2,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
svc,sklearn.svm.LinearSVC(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fruits,pandas.read_table('fruit_data_with_colors.txt'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=1-s)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results_race,pandas.DataFrame({'prediction':model.predict(X),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.get_dummies(df,columns=['race','c_charge_degree'])",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
raw_df,pandas.read_csv('compas-data/compas-scores-two-years.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
y_train,numpy.ravel(y_train),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X_train,X_held_out,y_train,y_held_out,indices_train,indices_test","sklearn.model_selection.train_test_split(
X,
df[target],
df.index,
test_size=held_out_size,
random_state=random_state)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=n_splits,
random_state=random_state)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lik_model,"scipy.optimize.minimize(lik,parameters,method='L-BFGS-B')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.read_table(text),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(url),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
jHistory,numpy.empty(num_inters),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,"numpy.empty((100,100)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"numpy.concatenate((np.ones((m,1)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
delta,"numpy.dot(X.T,sigmoid(numpy.dot(X,theta)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(30.0,100.0,num=100)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
statinfo,os.stat(filepath),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
data_dict,"pandas.DataFrame({'Dtype':dtype,
'No.ofuniqueitems':unique_items,
'Description':[""Reviewer'suniqueidentificationnumber"",
""Nameofthedrugthatisreviewed"",
""Conditionthatisbeingtreatedwiththedrug"",
""Textofthereview"",
""Drugratingonascaleof1(worst)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
s,"pandas.DataFrame({'No.ofreviews':significant_drugs.values,
'drugName':significant_drugs.index.get_level_values(1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
p,"pandas.merge(s,final_df,how='inner',left_on=['condition','drugName'],right_on=['condition','drugName'])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df,pandas.read_csv(file),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
final_df['date'],pandas.to_datetime(final_df['date']),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
nopunc,"re.sub(r'[^a-zA-z]','',sentence)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3,random_state=101)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
g,"seaborn.barplot(conditions.index,conditions,palette=""BuGn_r"")",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
nb,sklearn.naive_bayes.BernoulliNB(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
svc,"sklearn.svm.SVC(gamma='scale',probability=True)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
svc,"sklearn.svm.SVC(C=10,cache_size=200,class_weight=None,coef0=0.0,
decision_function_shape='ovr',degree=3,gamma=0.01,kernel='rbf',
max_iter=-1,probability=True,random_state=None,shrinking=True,
tol=0.001,verbose=False)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
d_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
forest,sklearn.ensemble.RandomForestClassifier(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
grid,sklearn.model_selection.GridSearchCV(SVC(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
accuracies_mean,numpy.array([np.mean(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
accuracies_std,numpy.array([np.std(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_cycle,"numpy.concatenate([xfori,xinenumerate(X_train_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_cycle,"numpy.concatenate([yfori,yinenumerate(y_train_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
idxs,numpy.flatnonzero(y_train==y),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_pred==val_y),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_folds,"numpy.array_split(X_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_folds,"numpy.array_split(y_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_one,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_two,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
trained_data,"pandas.concat([deng_features_df,deng_labels_df],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
deng_features_df,"pandas.read_csv(""./data/dengue_features_train.csv"",sep="","",index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
deng_labels_df,"pandas.read_csv(""./data/dengue_labels_train.csv"",sep="","",index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
deng_features_test_df,"pandas.read_csv(""./data/dengue_features_test.csv"",sep="","",index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,"pandas.read_csv(""./data/submission_format.csv"",
index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
trained_data['week_start_date'],pandas.to_datetime(trained_data['week_start_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission.total_cases,"numpy.concatenate([predictions_sj,predictions_iq])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sj_corr_heat,seaborn.heatmap(sj_corr),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iq_corr_heat,seaborn.heatmap(iq_corr),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lassoreg,"sklearn.linear_model.Lasso(alpha=alpha,normalize=True,max_iter=1e5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mae,"sklearn.metrics.mean_absolute_error(valid_labels,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.get_dummies(train),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.get_dummies(test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
white,pandas.get_dummies(white),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
red,"pandas.read_excel(""/Users/sagarjoshi/Desktop/Project/WineQualityDataset/winequality-red.xlsx"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
white,"pd.red=pandas.read_excel(""/Users/sagarjoshi/Desktop/Project/WineQualityDataset/winequality-white.xlsx"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lreg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logregW,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
missing_data,pandas.DataFrame({'MissingRatio':data_na}),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'Id':ids,'SalePrice':np.expm1(linear_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'Id':ids,'SalePrice':np.expm1(gdbt_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'Id':ids,'SalePrice':np.expm1(rf_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'Id':ids,'SalePrice':np.expm1(blending_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df_train,df_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.get_dummies(df),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv(data_path+'house_test.csv.gz'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
linear,"sklearn.linear_model.LinearRegression(normalize=False,fit_intercept=True,copy_X=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gdbt,"sklearn.ensemble.GradientBoostingRegressor(tol=0.1,subsample=0.37,n_estimators=200,max_features=20,
max_depth=6,learning_rate=0.03)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
lbl,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=300,min_samples_split=9,min_samples_leaf=10,
max_features='sqrt',max_depth=8,bootstrap=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
Nt1t0,numpy.array(psi),CLUSTER_23,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_1
Ntw,numpy.zeros(len(parent_model.topic_names),CLUSTER_23,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_1
indexes_child,"numpy.argmax(psi_bayes,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_1
data,json.load(f),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,json.load(f),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,json.load(f),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
context_lengths,numpy.array(context_lengths),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
l1_par_range,numpy.sqrt(2*3.0/(DIM_USER+DIM_L1),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
l2_par_range,numpy.sqrt(2*3.0/(DIM_L1+DIM_L2),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,numpy.load(f),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,numpy.load(f),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,numpy.load(f),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,numpy.load(f),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
car,matplotlib.pyplot.imread(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
car,matplotlib.pyplot.imread(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
car,matplotlib.pyplot.imread(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
car,matplotlib.pyplot.imread(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_right,numpy.array(y_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y2_correct,numpy.array(y_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('creditcard.csv',low_memory=False)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=10),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,sklearn.preprocessing.scale(X2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
average_length,numpy.mean([len(x),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,numpy.sin(f1*t*np.pi),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0.,5.,500)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.,5.,500)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
hilbert,numpy.imag(sig.hilbert(y),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
p_test,"numpy.array([0.2,0.2,0.2,0.4])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
q_test,"numpy.array([0.3,0.3,0.1,0.3])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ba_deg_distr,"numpy.array([.1,.4,.3,0,.2])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
adjacency,numpy.load('../data/fma_metadata/adjacency.npy'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
app_train,pandas.get_dummies(app_train),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
app_test,pandas.get_dummies(app_test),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
app_train,pandas.read_csv(f_app_train),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
app_test,pandas.read_csv(f_app_test),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
log_reg,"sklearn.linear_model.LogisticRegression(C=0.0001,solver='liblinear')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
index,"numpy.arange(1,predicted_labels.shape[0]+1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sites_dict_df,pandas.DataFrame(list(site_dict.keys(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predicted_df,"pandas.DataFrame(predicted_labels,
index=np.arange(1,predicted_labels.shape[0]+1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
full_df,"pandas.concat([train_df.drop('target',axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df,"pandas.read_csv('../../data/train_sessions.csv',
index_col='session_id')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df,"pandas.read_csv('../../data/test_sessions.csv',
index_col='session_id')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
full_sites_sparse,"scipy.sparse.csr_matrix(([1]*sites_flatten.shape[0],
sites_flatten,
range(0,sites_flatten.shape[0]+10,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
img_model,"numpy.reshape(img_gray,(1,96,96,1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
img_copy,numpy.copy(img),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
img_copy_1,numpy.copy(img),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
jewels,os.listdir('jewels'),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
models,os.listdir('models'),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
words_matrix,"pandas.DataFrame(words_dict,range(len(sentences)",CLUSTER_1,CLUSTER_1,CLUSTER_9,CLUSTER_0,CLUSTER_1
unique_uid,"pandas.concat([unique_uid,df_part],ignore_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df,df_part],ignore_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_part,"pandas.merge(left=df_part,right=unique_uid,how='left',on='uid')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
unique_uid,"pandas.read_csv(file,sep=';',compression='gzip',usecols=[0],skiprows=0,nrows=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_part,"pandas.read_csv(file,sep=';',usecols=[0],
skiprows=1+i*for_loop[1],nrows=for_loop[1],names=['uid'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
unique_uid,pandas.read_csv('unique_uid.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_part,"pandas.read_csv(file,sep=';',
skiprows=1+i*for_loop[1],nrows=for_loop[1],names=['uid','action','level','event_time'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('clear_df_0.csv',usecols=[1,2,3,4])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_part,pandas.read_csv('clear_df_'+str(i),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
xfit,"numpy.linspace(-1,3.5)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
xfit,"numpy.linspace(-1,3.5)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(xlim[0],xlim[1],30)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.linspace(ylim[0],ylim[1],30)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
xy,numpy.vstack([X.ravel(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"Y,X","numpy.meshgrid(y,x)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,3)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,3)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
svc,"sklearn.svm.SVC(kernel='linear',class_weight='balanced')",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
faces,sklearn.datasets.fetch_lfw_people(min_faces_per_person=60),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=150,whiten=True,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.pipeline.make_pipeline(pca,svc)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"Xtrain,Xtest,ytrain,ytest","sklearn.model_selection.train_test_split(faces.data,faces.target,
random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(model,param_grid)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
mat,"sklearn.metrics.confusion_matrix(ytest,yfit)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,json.loads(open(DATA),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,json.loads(open(DATA),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,json.loads(open(DATA),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,json.loads(open(DATA),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
similarity_matrix,"numpy.zeros((n_articles,n_articles)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
hm,"seaborn.heatmap(corrmat,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10})",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
hm,"seaborn.heatmap(corrmat,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10})",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Length,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Diameter,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Height,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Whole_weight,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Shucked_weight,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Viscera_weight,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Shell_weight,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Shell_weight,y=abalone_data.Rings,hue=abalone_data.Sex)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data_I.Shell_weight,y=abalone_data_I.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
abalone_data,"pandas.read_csv(""abalone.original.csv"",header=None,names=['Sex','Length','Diameter','Height','Whole_weight','Shucked_weight','Viscera_weight','Shell_weight','Rings'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
results,numpy.zeros((len(sequences),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
shap_test,"pandas.DataFrame(data=shap_values,index=X_test.index,columns=X_test.columns)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
foo,"pandas.DataFrame({c:df.loc[X_test.index,c],
'shap':agg_shap_test[c]})",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
dummy_df,pandas.get_dummies(df),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../data/auto_clean.csv'),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=0.5,test_size=0.5)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.RandomForestRegressor(n_estimators=100),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
idxs,numpy.flatnonzero(y_train==y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
training_accuracy,numpy.mean(y_pred_train==y_train),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
validation_accuracy,numpy.mean(y_pred_val==y_val),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X,"numpy.array([[-2,-1],[-2,1],[2,-1],[2,1],[-1,-1],[-1,1],[1,-1],[1,1]])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,"numpy.array([-1,-1,-1,-1,1,1,1,1])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,numpy.log(X),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-2,2,500)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x_grid,numpy.linspace(X.min(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x_grid,numpy.linspace(X.min(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x_grid,numpy.linspace(X.min(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"xx1,xx2","numpy.meshgrid(np.arange(X[:,0].min()",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('california.dat'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=rows,ncols=columns,figsize=(15,4)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
abd,"sklearn.ensemble.AdaBoostClassifier(algorithm='SAMME',n_estimators=5,base_estimator=DecisionTreeClassifier(max_depth=1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
abd,"AdaBoostClassifier(algorithm='SAMME',n_estimators=5,base_estimator=sklearn.tree.DecisionTreeClassifier(max_depth=1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
gbr,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=10,learning_rate=0.3)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
gbr,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=10,learning_rate=0.3)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
gbr,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=10,learning_rate=0.3)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df,df_ans.values,test_size=0.3,random_state=13)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train,"pandas.DataFrame(list(zip(csv_data['text'][:mid],csv_data['sentiment'][:mid])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test,"pandas.DataFrame(list(zip(csv_data['text'][mid+1:],csv_data['sentiment'][mid+1:])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_freq,pandas.DataFrame(list(zip(freq_word.keys(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
csv_data,pandas.read_csv('GOP_REL_ONLY.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
hits,numpy.sum(res==y_test),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_train,numpy.matrix(padded_tweets),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_test,numpy.matrix(padded_tweets),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
thisplot,matplotlib.pyplot.bar(range(10),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
_,matplotlib.pyplot.xticks(range(10),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
train,pandas.read_csv('../input/train.csv'),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
test,pandas.read_csv('../input/test.csv'),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
predicted_label,numpy.argmax(predictions_array),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
predicted_label,numpy.argmax(predictions_array),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
old_windowed_buf,numpy.zeros(windowsize),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
beat_sequence,"numpy.zeros(numberofbeats,dtype=int)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.zeros((numberofbeats*step,)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frame_sizes,numpy.zeros(numberofbeats),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frame_temp2,"numpy.zeros([steps_in[n],])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
pitch,numpy.zeros(numberofbeats),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
outw,"numpy.empty(0,dtype=np.int16)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.empty(0,dtype=np.int16)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.empty(0,dtype=np.int16)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.empty(0,dtype=np.int16)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
clusters[str(i)],numpy.flatnonzero(labels==i),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
pitch[0],"numpy.argmax(np.mean(X[5:,:],axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
pitch[n],"numpy.argmax(np.mean(X_temp[5:,:],axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data[len(data)-end_size:len(data)]*,"numpy.linspace(1,0,end_size)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data[:end_size]*,"numpy.linspace(1,0,end_size)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps,numpy.diff(onset_array),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps,numpy.diff(onset_sample_array1),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps_in,numpy.diff(frame_input),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps_out,numpy.diff(frame_output),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps,numpy.diff(onset_array),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
buf,"numpy.append(buf,np.zeros(windowsize-len(buf)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
outw,"numpy.append(outw,np.int16(output*32767.0)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"numpy.append(X,X_temp.reshape(numberofrows,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frames,"numpy.append(onset_samples,[data.shape[0]])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frames,"numpy.append([0],frames)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"numpy.append(X,X_temp.reshape(numberofrows,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.append(data_new,data02[onset_sample_array[beat_sequence[n]]:onset_sample_array[beat_sequence[n]+1]])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.append(data_new,temp_frame)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.append(data_new,frame_temp)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"numpy.append(X,X_temp.reshape(numberofrows,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data,"numpy.pad(data,(0,end_size-len(data)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
temp_frame,"numpy.pad(temp_frame,(0,steps[n]-len(temp_frame)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frames,numpy.unique(frames),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
buf,numpy.fft.irfft(freqs),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"sklearn.preprocessing.normalize(X,axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"sklearn.preprocessing.normalize(X,axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"sklearn.preprocessing.normalize(X,axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
verts,"numpy.append(verts,[0,0])",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
pts,"numpy.column_stack((xrData.clon,xrData.clat,xrData.isel(height=0,time=0)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
verts,"numpy.column_stack((xrData.clon_bnds.stack(z=('vertices','ncells')",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
n,"numpy.column_stack((n1,n2,n3)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
pts,"numpy.column_stack((xrData.clon,xrData.clat,xrData.isel(height=0,time=0)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
verts,"numpy.column_stack((xrData.clon_bnds.stack(z=('vertices','ncells')",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
n,"numpy.column_stack((n1,n2,n3,xrData.isel(height=0,time=0)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
verts,"pandas.DataFrame(pts*3,columns=['x','y','z'])",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
tris,"pandas.DataFrame(n,columns=['v0','v1','v2'])",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
verts,"pandas.DataFrame(verts,columns=['x','y'])",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
tris,"pandas.DataFrame(n,columns=['v0','v1','v2','TR_stn'],dtype=np.int64)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
r,"requests.get(project[0],auth=(ghuser,token)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
obj,json.loads(r.text),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
projects,collections.defaultdict(set),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
existing_projects,collections.defaultdict(list),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
error_occurences[lang],collections.defaultdict(list),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
normalized_error_codes,collections.defaultdict(lambda:collections.defaultdict(dict),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
plot_signifs,collections.defaultdict(dict),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
Project,"collections.namedtuple('Project',['url','name'])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
target_signif[bg_lang],collections.OrderedDict(sorted(target_signif[bg_lang].items(),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
twosample_results,"scipy.stats.mannwhitneyu(bg_data,target_data)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
fig,matplotlib.pyplot.gcf(),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
existing_projects[TARGET_LANGUAGE],"random.sample(existing_projects[TARGET_LANGUAGE],100)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
w,pandas.DataFrame(pd.Series(wiki_links),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
geo_props,pandas.Series(row),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
fares,"pandas.read_csv('http://web.mta.info/developers/data/nyct/fares/fares_181215.csv',skiprows=2)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
w,pandas.read_csv('wiki_links.csv'),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
page,"requests.get(""https://www.google.com/search?q=""+search_string+'station')",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
page,requests.get(x['wiki']),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
buffer,collections.deque(maxlen=span),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
batch,"numpy.ndarray(shape=(batch_size,skip_window*2)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
labels,"numpy.ndarray(shape=(batch_size,1)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
valid_examples,numpy.array(random.sample(range(valid_window),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
valid_examples,numpy.array(random.sample(range(valid_window),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
statinfo,os.stat(filename),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
tsne,"sklearn.manifold.TSNE(perplexity=30,n_components=2,init='pca',n_iter=5000,method='exact')",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
tsne,"sklearn.manifold.TSNE(perplexity=30,n_components=2,init='pca',n_iter=5000,method='exact')",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
df,"pandas.DataFrame(dict(carat=carat,price=price,color=color)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\iris.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data1,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\titanic.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data3,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\boston_house_price.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\iris.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
loc,"numpy.arange(0,max(label)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta,"numpy.arange(0.,2.,1./180.)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
z,numpy.cos(r),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r,numpy.sqrt(x**2+y**2),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-2,2,60)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.linspace(-2,2,60)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x,y","numpy.meshgrid(x,y)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fit,"numpy.polyfit(x,y,1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cb,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
img,matplotlib.pyplot.imread(r'D:\Desktop_bkp_on_2ndFeb\Snaps\Newfolder\DSC_8210.jpg'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,seaborn.load_dataset('iris'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,seaborn.load_dataset('iris'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_imp,"pandas.DataFrame(rfc.feature_importances_,index=X_train.columns,
columns=['importance'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_imp,"pandas.DataFrame(ada.feature_importances_,index=X_train.columns,
columns=['importance'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df,"pandas.get_dummies(train_df,prefix_sep='_',drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df,"pandas.read_csv(""fake_job_postings.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfc,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=16)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.ShuffleSplit(n_splits=100,test_size=0.3,random_state=16)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(rfc,X_train,y_train,cv=cv)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(ada,X_train,y_train,cv=cv)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ada,"sklearn.ensemble.AdaBoostClassifier(n_estimators=num_trees,random_state=16)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dockless_data_df,pandas.read_csv(csv_filepath),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
time,"datetime.datetime.strptime(input_time,""%m/%d/%Y%I:%M:%S%p"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
tips,seaborn.load_dataset('tips'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
duration,time.time(),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
losses,numpy.asarray(losses),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
naive_classifier,"sklearn.naive_bayes.MultinomialNB(fit_prior=False,alpha=0.01)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.concat(frames),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_3,pandas.read_csv('../../data/qald-3-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_4,pandas.read_csv('../../data/qald-4-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_5,pandas.read_csv('../../data/qald-5-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_6,pandas.read_csv('../../data/qald-6-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_7,pandas.read_csv('../../data/qald-7-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_8,pandas.read_csv('../../data/qald-8-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_9,pandas.read_csv('../../data/qald-9-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv(""../""+d)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv(""../""+d)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv(""../""+d)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
words,pandas.DataFrame(data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,"pandas.cut(non_sw_values,BIN_COUNT,labels=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_wide,"pandas.pivot_table(
data,
values=list(value_funcs.keys()",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_wide['target'],"pandas.pivot_table(
data,
values=['target'],
index=['destination_id','occurrence','source_id','position',
'word_position'],
columns=['feature']
)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_wide,"pandas.pivot_table(
data[data.target],
values='pca_value',
index=['cluster_id','destination_id','occurrence',
'position'],
columns=['feature']
)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(data=data[data['feature']
.map(lambdaf:finfeatures)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svalues,numpy.array(sorted(finite_values),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
is_stopword,numpy.array([(lemmainstopwords),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
heights,numpy.zeros(bin_count),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h0s,numpy.zeros(bin_count),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
heights,numpy.zeros(BIN_COUNT),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h0s,numpy.zeros(BIN_COUNT),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
heights,numpy.zeros(BIN_COUNT),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h0s,numpy.zeros(BIN_COUNT),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ours,numpy.where(svalues==value),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins_different,numpy.where(differences),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins_different+,numpy.ones_like(bins_different),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
are_different,numpy.any(differences),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
are_different,numpy.any(differences),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(2,1,figsize=(8,8)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,"sklearn.linear_model.LogisticRegression(penalty='l2',class_weight='balanced',
fit_intercept=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly,"sklearn.preprocessing.PolynomialFeatures(degree=2,interaction_only=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components='mle'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
numFigs,math.ceil(math.sqrt(f),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
Entry,"collections.namedtuple('Entry',['value','cluster'])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
TEntry,"collections.namedtuple('TEntry',['value','topic'])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
files,os.listdir(dataDir),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
unescaped,"re.sub(r'[\^]','',re.sub(r'[\\]','',t)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
df_merged,"pandas.merge(df_emp,df_fixed)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""data/company_data.csv"",encoding=""iso-8859-1"",sep=""\t"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_emp,"pandas.read_csv(""data/employees.csv"",sep=""\t"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_merged[""log_Employees""]","numpy.log10(df_merged[""Employees""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_merged[""log_Revenue""]","numpy.log10(df_merged[""Revenue""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_merged[""log_Assets""]","numpy.log10(df_merged[""Assets""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_merged[""log_MarketCap""]","numpy.log10(df_merged[""MarketCap""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"(osm,osr),(slope,intercept,r)","scipy.stats.probplot(x,dist='norm',plot=None)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.arange(1000),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
y,numpy.zeros(200),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
y_index_0,numpy.where(y==0),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
y_index_1,numpy.where(y==1),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"x_train,y_train","numpy.concatenate([train_data_y_1,train_data_y_0])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"x_test,y_test","numpy.concatenate([test_data_y_1,test_data_y_0])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"train_data_y_0,test_data_y_0,train_label_y_0,test_label_y_0","sklearn.model_selection.train_test_split(X[y_index_0],y[y_index_0],test_size=10)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"train_data_y_1,test_data_y_1,train_label_y_1,test_label_y_1","sklearn.model_selection.train_test_split(X[y_index_1],y[y_index_1],test_size=10)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
tm_len_df,pandas.DataFrame(tm_len_list),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
get_tm_loc,pandas.DataFrame(get_tm_loc),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
positive_tm_set,"pandas.concat([pos_tm_prt,positive_pred_tm],sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
negative_tm_set,"pandas.concat([neg_tm_prt,negative_pred_tm],sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_tmd_length_final,"pandas.concat([pos_tmd_length,pos_tmd_len],axis=0,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
neg_tmd_length_final,"pandas.concat([neg_tmd_length,neg_tmd_len],axis=0,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
tm_locations,"pandas.concat([tm_proteins,get_tm_loc],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
all_pos_tms,"pandas.concat([tm_locations,pred_pos_tmd],sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
all_neg_tms,"pandas.concat([tm_locations,pred_neg_tmd],sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_tm_merged,"pandas.concat([all_pos_tms,pos_set_ASA],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_tm_calc_dist,"pandas.concat([pos_tm_merged,pos_tm_ptms],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
neg_tm_merged,"pandas.concat([all_neg_tms,neg_set_ASA],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
neg_tm_calc_dist,"pandas.concat([neg_tm_merged,neg_tm_ptms],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
positive_set_tm_features,"pandas.concat(pos_tm_feature_list,axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
negative_set_tm_features,"pandas.concat(neg_tm_feature_list,axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
positive_set,"pandas.read_csv(""data/positive_set_density_for_tm.csv"",index_col='uniprot_id')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
negative_set,"pandas.read_csv(""data/negative_set_density_for_tm.csv"",index_col='uniprot_id')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
tm_proteins,"pandas.read_csv(""data/Raw_datasets/TM_proteins.csv"",index_col='Entry')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_pred_tm,"pandas.read_csv(""data/prediction_results/pos_predicted_tms.csv"",index_col='uniprot_id')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
neg_pred_tm,"pandas.read_csv(""data/prediction_results/neg_predicted_tms.csv"",index_col='uniprot_id')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
parsed_lines,"re.findall('\s([0-9]{1,4})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
split_array,"numpy.asarray(arr,dtype=int)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
split_array,"numpy.asarray(arr,dtype=int)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
t1,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
t1,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lst,"random.choices(range(1,max_num+1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lst,"random.choices(range(1,max_num+1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lst,"random.choices(range(1,max_num+1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lst,"random.choices(range(1,max_num+1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
tick_marks,numpy.arange(len(classes),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_acc,numpy.zeros((Ks-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_acc,numpy.zeros((Ks-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_acc,numpy.zeros((Dpth-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_acc,numpy.zeros((Dpth-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_acc[n-1],numpy.std(yhat==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_acc[n-1],numpy.std(yhat==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,numpy.linspace(df.Principal.min(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,numpy.linspace(df.age.min(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,numpy.linspace(df.dayofweek.min(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Feature,"pandas.concat([Feature,pd.get_dummies(df['education'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_Feature,"pandas.concat([test_Feature,pd.get_dummies(test_df['education'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('loan_train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df,pandas.read_csv('loan_test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['due_date'],pandas.to_datetime(df['due_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['effective_date'],pandas.to_datetime(df['effective_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df['due_date'],pandas.to_datetime(test_df['due_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df['effective_date'],pandas.to_datetime(test_df['effective_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_X,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
KNCmodel,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
KNCmodel,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,yhat)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,yhat)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DTCmodel,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=n)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DTCmodel,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
out,"sklearn.tree.export_graphviz(DTCmodel,feature_names=featureNames,out_file=dot_data,class_names=['PAIDOFF','COLLECTION'],filled=True,special_characters=True,rotate=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
SVMmodel,"sklearn.svm.SVC(kernel='rbf',gamma='scale')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
SVMmodel_matrix,"sklearn.metrics.confusion_matrix(y_test,yhat,labels=[0,1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LRmodel_matrix,"sklearn.metrics.confusion_matrix(y_test,yhat,labels=[0,1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LRmodel,sklearn.linear_model.LogisticRegression(C=0.01),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
KNCF1,"sklearn.metrics.f1_score(test_y,KNCmodel.predict(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DTCF1,"sklearn.metrics.f1_score(test_y,DTCmodel.predict(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
SVMF1,"sklearn.metrics.f1_score(test_y,SVMmodel.predict(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LRF1,"sklearn.metrics.f1_score(test_y,LRmodel.predict(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LRLL,"sklearn.metrics.log_loss(test_y,LRmodel.predict_proba(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
foo,"numpy.array([1,2,3,4])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
foo2,"numpy.array([[1,2,3,4],
[5,6,7,8]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
value,"numpy.dot(a.T,a)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
matrix,"numpy.dot(a,a.T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
exp_a,numpy.exp(a),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame([{'age':34,'name':'tasos'},
{'age':43,'name':'georgia'}])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
foo,"pandas.Series([34,'tasos'])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
foo,"pandas.Series({'age':34,'name':'tasos'})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ts,pandas.Timestamp('2016Jul110:00:00'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dt,"pandas.date_range('2016Jul110:00:00',periods=10,freq='D')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dt,"pandas.date_range('2016Jul110:00:00','2016Jul1010:00:00',freq='D')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.read_table('path',
sep=',',
header=None,
names=['col1','col2'],
index='col1'
skiprows=12,
skipfooter=12,
usecols=[0,4]
nrows=12)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
accuracies_mean,numpy.array([np.mean(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
accuracies_std,numpy.array([np.std(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_fold,"numpy.concatenate(np.delete(X_train_folds,i,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_fold,"numpy.concatenate(np.delete(y_train_folds,i,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
idxs,numpy.flatnonzero(y_train==y),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_validation),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_folds,"numpy.hsplit(y_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_folds,"numpy.vsplit(X_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_one,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_two,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r,numpy.exp(-(X**2),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xfit,"numpy.linspace(-1,3.5)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xfit,"numpy.linspace(-1,3.5)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(xlim[0],xlim[1],30)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.linspace(ylim[0],ylim[1],30)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xy,numpy.vstack([X.ravel(),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"Y,X","numpy.meshgrid(y,x)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(projection='3d'),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(3,5)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(4,6)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(kernel='rbf',C=1E6)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=C)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
svc,"sklearn.svm.SVC(kernel='rbf',class_weight='balanced')",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
faces,sklearn.datasets.fetch_lfw_people(min_faces_per_person=60),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.pipeline.make_pipeline(pca,svc)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mat,"sklearn.metrics.confusion_matrix(ytest,yfit)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""thanksgiving.csv"",encoding=""Latin-1"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get(url),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(chapter_characters),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(r'pan.csv'),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
characters,collections.defaultdict(int),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
a,"numpy.array([1,2,3.4])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,"numpy.array([3,6,4])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
g,numpy.exp(a),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
script_folder,os.getcwd(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
const_subscription_id,"os.getenv(""SUBSCRIPTION_ID"",default=""<yoursubscriptionidhere>"")",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
workspace_name,"os.getenv(""WORKSPACE_NAME"",default=""customer-churn"")",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
resource_group_name,"os.getenv(""RESOURCE_GROUP_NAME"",default=""amls-rg"")",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
create_new_rg,"os.getenv(""CREATE_NEW_RG"",default=True)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
location_name,"os.getenv(""LOCATION_NAME"",default=""eastus"")",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
idxs,numpy.where((y_test!=cls),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean_feat,"numpy.mean(X_train_feats,axis=0,keepdims=True)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
std_feat,"numpy.std(X_train_feats,axis=0,keepdims=True)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_feats,"numpy.hstack([X_train_feats,np.ones((X_train_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_val_feats,"numpy.hstack([X_val_feats,np.ones((X_val_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test_feats,"numpy.hstack([X_test_feats,np.ones((X_test_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
testacc,"numpy.loadtxt(""LBFGS_minibatch_fcNN_testacc.txt"")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
trainacc,"numpy.loadtxt(""LBFGS_minibatch_fcNN_trainacc.txt"")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
testloss,"numpy.loadtxt(""LBFGS_minibatch_fcNN_testloss.txt"")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
trainloss,"numpy.loadtxt(""LBFGS_minibatch_fcNN_trainloss.txt"")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(venue_details,columns=column_names)",CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(venue_details,columns=column_names)",CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
new_york_data,pandas.DataFrame(columns=column_names),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
indian_rest_ny,pandas.DataFrame(columns=column_names),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
indian_rest_stats_ny,pandas.DataFrame(columns=column_names),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
ny_neighborhood_stats,"pandas.merge(ny_neighborhood_stats,new_york_data,on='Neighborhood')",CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
indian_rest_stats_ny_csv,pandas.read_csv('indian_rest_stats_ny.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
resp,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
fruits,pandas.read_table('fruit_data_with_colors.txt'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_set,"numpy.array(training_set,dtype='int')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_set,"numpy.array(test_set,dtype='int')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ratings,numpy.zeros(nb_movies),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
movies,"pandas.read_csv('./Boltzmann_Machines/ml-1m/movies.dat',sep='::',
header=None,engine='python',encoding='latin-1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
users,"pandas.read_csv('./Boltzmann_Machines/ml-1m/users.dat',sep='::',
header=None,engine='python',encoding='latin-1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ratings,"pandas.read_csv('./Boltzmann_Machines/ml-1m/ratings.dat',sep='::',
header=None,engine='python',encoding='latin-1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
training_set,"pandas.read_csv('./Boltzmann_Machines/ml-100k/u1.base',delimiter='\t')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_set,"pandas.read_csv('./Boltzmann_Machines/ml-100k/u1.test',delimiter='\t')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
z,"numpy.array([z_at_value(Planck15.luminosity_distance,dist*u.Mpc)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tweets,"pandas.read_table(tweet_database_file_name,delimiter='\t',header=0)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
timestamps,numpy.array(timestamps),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
retweets,"numpy.array(tweets_after_candidacy['retweet_count'],dtype=float)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
favorites,"numpy.array(tweets_after_candidacy['favorite_count'],dtype=float)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
xavg,numpy.zeros(x.shape),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
yavg,numpy.zeros(y.shape),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
sorted_idx,numpy.argsort(x),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.sin(x),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,2*np.pi,10)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
xvals,"numpy.linspace(0,2*np.pi,50)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
yinterp,"numpy.interp(xvals,x,y)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,"numpy.zeros(labels.shape,dtype=np.uint8)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
"rr,cc",numpy.where(labels==i),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
"image[:,:,c]","numpy.where(
mask==1,
ccolor,
image[:,:,c]
)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
uniques,numpy.unique(labels),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
label,numpy.load(label_dir),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
P,"numpy.array([0.05,1,0.45])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
C_in,"numpy.array([10,148,103])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
C_out,"numpy.array([142,5,4])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([1,2,3])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.array([4,5,6])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
numerator,numpy.sum([P*C_out]),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
denominator,numpy.sum(P*C_in),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
numerator,numpy.sum(P*C_out),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
inter_spike_intervals,numpy.diff(spike_times),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(url,index_col=0)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"spike_indices,spike_amplitudes","scipy.signal.find_peaks(df['response'],height=0)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,"pandas.merge(X,y,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,"pandas.merge(X,y,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_cat_train_with_y_appmon,"pandas.merge(X_cat_train,model_data_final[['y','appmon']]\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_cat_oot_with_y_appmon,"pandas.merge(X_cat_OOT,data_OOT[['y','score_mon']]\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_XGBExp,"pandas.merge(data_OOT,data_OOT_XGBExp_p_score\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_XGBRandom,"pandas.merge(data_OOT,data_OOT_XGBRandom_p_score\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_XGBGrid,"pandas.merge(data_OOT,data_OOT_XGBGrid_p_score\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_XGBHyperopt,"pandas.merge(data_OOT,data_OOT_XGBHyperopt_p_score\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_final_xgboost_yzd_yyq_with_y,"pandas.merge(data_OOT_final_xgboost_yzd_yyq\
,data_OOT[['y']],left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
summary,"pandas.read_excel(os.path.join(Result_path,'all_variables_summary.xlsx')",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgb_importance_Exp,pandas.read_excel(Result_path+'/demo_xgbXGBExp模型变量重要性排序.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgb_importance_Grid,pandas.read_excel(Result_path+'/demo_xgbXGBGrid模型变量重要性排序.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgb_importance_Random,pandas.read_excel(Result_path+'/demo_xgbXGBRandom模型变量重要性排序.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgb_importance_Hyperopt,pandas.read_excel(Result_path+'/demo_xgbXGBHyperopt模型变量重要性排序.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
model_data_final['y'],"numpy.where(model_data_final.d_y_hismaxdpd>=30,1,0)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT['y'],"numpy.where(data_OOT.d_y_hismaxdpd>=30,1,0)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
"train_apply,test_apply","sklearn.model_selection.train_test_split(model_data_final.index,test_size=0.30,random_state=43)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
df,"pandas.read_csv(os.path.join('..','..','07','datasets','zillow-07-start.csv')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(os.path.join('..','datasets','advertising.csv')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(os.path.join('..','..','07','datasets','zillow-07-start.csv')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
q_table,"numpy.zeros([env.observation_space_n,env.action_space_n])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
action,numpy.argmax(q_table[stateid]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
end_time,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
r,"random.randint(1,100)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
resultado,"numpy.zeros((columnas2,renglones1)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
resultado,"numpy.zeros((columnas2,renglones1)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
columnas1,"numpy.size(matriz1,1)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
columnas2,"numpy.size(matriz2,1)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
renglones1,"numpy.size(matriz1,0)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
renglones2,"numpy.size(matriz2,0)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
lY,numpy.ceil(renglones1/2),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
lX,numpy.ceil(columnas2/2),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
tiempoInicio,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
tiempoInicio,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
cm_data,"pandas.DataFrame(cm,index=classNames,
columns=classNames)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
filtered_data,"pandas.read_sql_query(""""""SELECT*FROMReviewsWHEREScore!=3"""""",con)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
display,"pandas.read_sql_query(""""""
SELECTUserId,ProductId,ProfileName,Time,Score,Text,COUNT(*)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
display,"pandas.read_sql_query(""""""
SELECT*
FROMReviews
WHEREScore!=3ANDUserId=""AR5J8UI46CURR""
ORDERBYProductID
"""""",con)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
display,"pandas.read_sql_query(""""""
SELECT*
FROMReviews
WHEREScore!=3ANDId=44737ORId=64422
ORDERBYProductID
"""""",con)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_vec,numpy.zeros(50),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_vec,numpy.zeros(50),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
cm,"sklearn.metrics.confusion_matrix(actual_labels,predict_labels)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"fpr,tpr,threshold","sklearn.metrics.roc_curve(y_train,prob_train[:,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"fpr,tpr,threshold","sklearn.metrics.roc_curve(y_cv,prob_cv[:,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"fpr_train,tpr_train,threshold","sklearn.metrics.roc_curve(y_train,prob_train[:,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"fpr_test,tpr_test,threshold","sklearn.metrics.roc_curve(y_test,prob_test[:,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_BF_BOW,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_BF_TF_IDF,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_BF_AVG_W2V,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_BF_TF_IDF_W2V,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_KDT_BOW,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_KDT_TF_IDF,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_KDT_AVG_W2V,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_KDT_TF_IDF_W2V,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_0,"re.sub(r""http\S+"","""",sent_0)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_1000,"re.sub(r""http\S+"","""",sent_1000)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_150,"re.sub(r""http\S+"","""",sent_1500)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_4900,"re.sub(r""http\S+"","""",sent_4900)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""won't"",""willnot"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""can\'t"",""cannot"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""n\'t"",""not"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'re"",""are"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'s"",""is"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'d"",""would"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'ll"",""will"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'t"",""not"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'ve"",""have"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'m"",""am"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_0,"re.sub(""\S*\d\S*"","""",sent_0)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_1500,"re.sub('[^A-Za-z0-9]+','',sent_1500)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sentance,"re.sub(r""http\S+"","""",sentance)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sentance,"re.sub(""\S*\d\S*"","""",sentance)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sentance,"re.sub('[^A-Za-z]+','',sentance)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"data_train_BF,data_test_BF,scores_train_BF,scores_test_BF","sklearn.model_selection.train_test_split(data_BF,scores_BF,test_size=0.2,random_state=1)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"data_train_BF,data_cv_BF,scores_train_BF,scores_cv_BF","sklearn.model_selection.train_test_split(data_train_BF,scores_train_BF,test_size=0.25,random_state=1)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"data_train_KDT,data_test_KDT,scores_train_KDT,scores_test_KDT","sklearn.model_selection.train_test_split(data_KDT,scores_KDT,test_size=0.2,random_state=1)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"data_train_KDT,data_cv_KDT,scores_train_KDT,scores_cv_KDT","sklearn.model_selection.train_test_split(data_train_KDT,scores_train_KDT,test_size=0.25,random_state=1)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
knn,"sklearn.neighbors.KNeighborsClassifier(algorithm=alg,n_neighbors=k)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
knn,"sklearn.neighbors.KNeighborsClassifier(algorithm=alg,n_neighbors=optimal_k)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
response,"requests.get(image_path,stream=True)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
summary,"pandas.concat([gp,ar],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('../data/gp_grid_parkslope.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data['DATETIME'],pandas.to_datetime(data['DATETIME']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
return_volatility_1,"numpy.std(returnAll.ix[:,:,'Log_Return1'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
return_volatility_2,"numpy.std(returnAll.ix[:,:,'Log_Return2'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dat.Share[index2],numpy.floor(dat.Position[index1]*(1-percent),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tempYear,pandas.DatetimeIndex(dictYears[yr]),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dateRange,pandas.DatetimeIndex(dateRange),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../ETF.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
date,pandas.to_datetime(df.Ticket),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
im,numpy.array(im),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
prediction,"numpy.argmax(logits,1)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
self.trees,"numpy.zeros(self.size,dtype=bool)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.fires,numpy.zeros((self.size),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fires,"numpy.zeros((self.size[0]+2,self.size[1]+2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
PopulationTaxes,numpy.zeros((N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
l_vec,numpy.empty(N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
c_vec,numpy.empty(N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
w_vec,"numpy.linspace(0.5,1.5,N)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
sol_case3,"scipy.optimize.minimize(
value_of_choice_tax,initial_guess,method='Nelder-Mead',args=(PopulationWage,e,v,m)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
solution,"scipy.optimize.minimize_scalar(labor_supply,method='bounded',\
bounds=(0,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,4)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
"fig,(axes_technical,axes_volume,axes_macd,axes_ohlc)","matplotlib.pyplot.subplots(4,1,figsize=(16,16)",CLUSTER_8,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
Dataset,"collections.namedtuple('Dataset','exchangedf')",CLUSTER_8,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start_date,"datetime.datetime(2017,11,1)",CLUSTER_8,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
end_date,"datetime.datetime(2017,12,31)",CLUSTER_8,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
news_time,time.mktime(news_time),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,time.mktime(news_time),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
three_oclock,time.mktime(three_oclock),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
five_oclock,time.mktime(five_oclock),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,time.mktime(news_time),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,time.mktime(news_time),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
today,"time.strftime(""%Y/%m/%d"",time.localtime()",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,"time.strptime(news_time,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,"time.strptime(news_time,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
three_oclock,"time.strptime(three_oclock,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
five_oclock,"time.strptime(five_oclock,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,"time.strptime(news_time,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,"time.strptime(news_time,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
now,time.time(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
now,datetime.datetime.now(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
delta,datetime.timedelta(days=3),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
leftDegMin,"numpy.array([-90,-90,-150,0,-90,-90,-90])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
leftDegMax,"numpy.array([90,70,150,120,90,90,90])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
