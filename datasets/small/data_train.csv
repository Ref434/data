varible_name,method,"AffinityPropagation(damping=0.999, random_state=0)","AgglomerativeClustering(metric='euclidean', n_clusters=13)","KMeans(n_clusters=13, n_init='auto', random_state=0)",MeanShift(bandwidth=2.3),"SpectralClustering(assign_labels='discretize', n_clusters=13, random_state=0)"
test_acc,numpy.mean(all_test_acc_val),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
self._labels,numpy.hstack(all_labels),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
self._data,numpy.vstack(all_data),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
au_1062bio,pandas.DataFrame(list(collection.find(),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
principalDf,pandas.DataFrame(data=principalComponents),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
au_1062bio_feature,"pandas.concat([au_1062bio_feature,noise1])",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
au_1062bio,"pandas.merge(au_1062bio_feature,au_1062bio_score,on='_id')",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
Epsilon,"numpy.arange(Begin_Range,End_Range,Interval_Size)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
"y_true,y_pred",numpy.array(y_true),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
var,"numpy.cumsum(np.round(pca.explained_variance_ratio_,decimals=3)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
ssres,numpy.sum(np.square(y_true-y_pred),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
sstot,numpy.sum(np.square(y_true-np.mean(y_pred),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
f_test,numpy.var(y_test),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
tsne,"sklearn.manifold.TSNE(perplexity=1,n_components=2,init='pca',n_iter=250)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(au_1062bio_x,au_1062bio_y,test_size=0.3)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(au_1062bio_x,au_1062bio_y,test_size=0.3)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
clf,sklearn.svm.SVR(),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
mlp,"sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(2,)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
pca,sklearn.decomposition.PCA(n_components=9),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
pca,sklearn.decomposition.PCA(n_components=14),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
regr,"sklearn.ensemble.RandomForestRegressor(max_depth=5,random_state=0)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
rmse,"math.sqrt(mean_squared_error(y_test,y_pred)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
training_loss,"math.sqrt(mean_squared_error(y_train,y_validate)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
AUC,"scipy.integrate.simps(Accuracy,Epsilon)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
"fig1,ax1","matplotlib.pyplot.subplots(figsize=(18,8)",CLUSTER_28,CLUSTER_12,CLUSTER_11,CLUSTER_31,CLUSTER_9
df_1,pandas.DataFrame(columns=b),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(your_local_path+""attachment_Grocery.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,numpy.unique(a),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bet_number,"random.randint(0,36)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
bet,"random.randint(10,p.capital)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
spin,"random.randint(0,36)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
food_review_total,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
df_food_review,pandas.DataFrame(food_review_join),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_info_total,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_info_total,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_info,pandas.DataFrame(food_info),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_review_total,"pandas.concat([food_review_total,food_review])",CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_info_total,"pandas.concat([food_info_total,food_info])",CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_review_merge,"pandas.merge(df_food_review,food_info_total,how='inner',left_on=['country','label'],right_on=['country','001_상호명'])",CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_review,"pandas.read_csv(path,encoding=""UTF-8"")",CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
food_info,"pandas.read_csv(path,encoding=""UTF-8"")",CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
countries,os.listdir(),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
countries,os.listdir(),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
cities,os.listdir(),CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
emoji_pattern,"re.compile(""[""
u""\U0001F600-\U0001F64F""
u""\U0001F300-\U0001F5FF""
u""\U0001F680-\U0001F6FF""
u""\U0001F1E0-\U0001F1FF""
""]+"",flags=re.UNICODE)",CLUSTER_1,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_4
image_copy,numpy.copy(image),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
key_pts_copy,numpy.copy(key_pts),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
key_pts_frame,pandas.read_csv('data/training_frames_keypoints.csv'),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
self.key_pts_frame,pandas.read_csv(csv_file),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,num_to_display,i+1)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
ax,"matplotlib.pyplot.subplot(1,3,i+1)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
map_reverse_n,pandas.Series(np.zeros(len(index_n),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
map_reverse,"pandas.concat([map_reverse_p,map_reverse_n])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train,pandas.read_csv(path+'train_cleaned_final.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test,pandas.read_csv(path+'test_cleaned_final.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=K,shuffle=True,random_state=233)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
district_summary_df,"pandas.DataFrame(
[{""TotalSchools"":school_count,
""TotalStudents"":student_count,
""TotalBudget"":total_budget,
""AverageMathScore"":average_math_score,
""AverageReadingScore"":average_reading_score,
""%PassingMath"":passing_math_percentage,
""%PassingReading"":passing_reading_percentage,
""%OverallPassing"":overall_passing_percentage}])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(per_school_types),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
per_school_summary_df,"pandas.DataFrame({
""SchoolType"":per_school_types,
""TotalStudents"":per_school_counts,
""TotalSchoolBudget"":per_school_budget,
""PerStudentBudget"":per_school_capita,
""AverageMathScore"":per_school_math,
""AverageReadingScore"":per_school_reading,
""%PassingMath"":per_school_passing_math,
""%PassingReading"":per_school_passing_reading,
""%OverallPassing"":per_overall_passing_percentage})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
math_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_math_scores,
""10th"":tenth_grade_math_scores,
""11th"":eleventh_grade_math_scores,
""12th"":twelfth_grade_math_scores})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
reading_scores_by_grade,"pandas.DataFrame({
""9th"":ninth_grade_reading_scores,
""10th"":tenth_grade_reading_scores,
""11th"":eleventh_grade_reading_scores,
""12th"":twelfth_grade_reading_scores})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
spending_summary_df,"pandas.DataFrame({
""AverageMathScore"":spending_math_scores,
""AverageReadingScore"":spending_reading_scores,
""%PassingMath"":spending_passing_math,
""%PassingReading"":spending_passing_reading,
""%OverallPassing"":overall_passing_spending})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
size_summary_df,"pandas.DataFrame({
""AverageMathScore"":size_math_scores,
""AverageReadingScore"":size_reading_scores,
""%PassingMath"":size_passing_math,
""%PassingReading"":size_passing_reading,
""%OverallPassing"":size_overall_passing})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
type_summary_df,"pandas.DataFrame({
""AverageMathScore"":type_math_scores,
""AverageReadingScore"":type_reading_scores,
""%PassingMath"":type_passing_math,
""%PassingReading"":type_passing_reading,
""%OverallPassing"":type_overall_passing})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"per_school_summary_df[""SpendingRanges(PerStudent)""]","pandas.cut(per_school_capita,spending_bins,labels=group_names)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"per_school_summary_df[""SchoolSize""]","pandas.cut(per_school_summary_df[""TotalStudents""],size_bins,labels=group_names)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_data_complete_df,"pandas.merge(student_data_df,school_data_df,on=[""school_name"",""school_name""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_data_df,pandas.read_csv(school_data_to_load),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
student_data_df,pandas.read_csv(student_data_to_load),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
english_words_counter,collections.Counter([wordforsentenceinenglish_sentencesforwordinsentence.split(),CLUSTER_10,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
french_words_counter,collections.Counter([wordforsentenceinfrench_sentencesforwordinsentence.split(),CLUSTER_10,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
sentences,"numpy.array([sentence[0],x[0]])",CLUSTER_10,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
"v[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"v[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"v[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"v[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"s[""dW""+str(l+1)]","numpy.zeros_like(parameters[""W""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"s[""db""+str(l+1)]","numpy.zeros_like(parameters[""b""+str(l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
num_complete_minibatches,math.floor(m/mini_batch_size),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
trained_image,numpy.array(trained_image),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
trained_label,numpy.array(trained_label),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
im,numpy.array((trained_image),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
self.all_weights,"numpy.frombuffer(binary,dtype='float32')",CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
self.label,numpy.argmax(self.classes),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
class_sort,numpy.argsort([-box.classes[c]forboxinboxes]),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
size,numpy.prod(norm_layer.get_weights(),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
ax,matplotlib.pyplot.gca(),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
data,matplotlib.pyplot.imread(filename),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
image,"numpy.expand_dims(image,0)",CLUSTER_21,CLUSTER_7,CLUSTER_8,CLUSTER_28,CLUSTER_8
cwd,os.getcwd(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
data1,"pandas.read_csv('occupancy_data\datatest.txt',header=0,index_col=1,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data2,"pandas.read_csv('occupancy_data\datatraining.txt',header=0,index_col=1,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data3,"pandas.read_csv('occupancy_data\datatest2.txt',header=0,index_col=1,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data1,"pandas.read_csv('occupancy_data\datatest.txt',header=0,index_col=1,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data2,"pandas.read_csv('occupancy_data\datatraining.txt',header=0,index_col=1,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data3,"pandas.read_csv('occupancy_data\datatest2.txt',header=0,index_col=1,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('occupancy_data/combined.csv',header=0,index_col=0,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('occupancy_data/combined.csv',header=0,index_col=0,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('occupancy_data/combined.csv',header=0,index_col=0,parse_dates=True,squeeze=True)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
data,"pandas.concat([data1,data2,data3])",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(testy,yhat)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(testy,yhat)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(testy,yhat)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"trainX,testX,trainy,testy","sklearn.model_selection.train_test_split(X,y,test_size=0.3,shuffle=False,random_state=1)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"trainX,testX,trainy,testy","sklearn.model_selection.train_test_split(X,y,test_size=0.3,shuffle=False,random_state=1)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"trainX,testX,trainy,testy","sklearn.model_selection.train_test_split(X,y,test_size=0.3,shuffle=False,random_state=1)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
self.trees,"numpy.zeros(self.size,dtype=bool)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
self.fires,numpy.zeros((self.size),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
self.trees,"numpy.zeros(self.size,dtype=bool)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
self.fires,numpy.zeros((self.size),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fires,"numpy.zeros((self.size[0]+2,self.size[1]+2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
start,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(portfolio),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
small_df,pandas.concat(dfs[s]forsinstocks),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
returns,"numpy.dot(weights,returns_monthly.loc[date])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
max_sharpe[date],numpy.argmax(sharpe_ratio[date]),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
weights/,numpy.sum(weights),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
mask,"numpy.where(numpy.logical_and(x>=0.5,x<=1.0)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
u0,numpy.ones(nx),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0.0,L,num=nx)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
projection,sklearn.manifold.TSNE(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=3),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask_img,numpy.array(Image.open('./data/clover.jpg'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df_clean,pandas.DataFrame(index=df.index),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
features,pandas.DataFrame(index=df_clean.index),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""features_selecionadas(comlabels)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df_clean[""date""]","pandas.to_datetime(date_clean[0]+""/""+date_clean[1]+""/""+date_clean[2],format=""%d/%m/%Y"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(10,10)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mdl,"sklearn.tree.DecisionTreeClassifier(random_state=0,max_depth=2,class_weight=""balanced"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mismP,numpy.array([]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismQ,numpy.array([]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismP,numpy.array([]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismQ,numpy.array([]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
Y,"numpy.zeros([NN,NN],dtype=complex)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tii,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tjj,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tij,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
H,"numpy.zeros((NN,NN)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
N,"numpy.zeros((NN,NN)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
M,"numpy.zeros((NN,NN)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
L,"numpy.zeros((NN,NN)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
Y,"numpy.zeros([NN,NN],dtype=complex)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tii,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tjj,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tij,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tij,numpy.zeros([NB]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B_line,"numpy.zeros([NN,NN])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B_2line,"numpy.zeros([NN,NN])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
P_Calc,numpy.zeros_like(P_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
Q_Calc,numpy.zeros_like(Q_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
DP,numpy.zeros_like(P_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
DQ,numpy.zeros_like(Q_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
P_Calc,numpy.zeros_like(P_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
DP,numpy.zeros_like(P_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
Q_Calc,numpy.zeros_like(Q_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
DQ,numpy.zeros_like(Q_nom),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
DV,"numpy.dot(J,DS)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
d_theta,"numpy.dot(B_line_inv,DP)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dV,"numpy.dot(B_2line_inv,DQ)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
J1,"numpy.hstack((H,N)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
J2,"numpy.hstack((M,L)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B,numpy.imag(Y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
b,numpy.imag(ykm),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B,numpy.imag(Y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
b,numpy.imag(ykm),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
b,numpy.imag(ykm),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
G,numpy.real(Y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
g,numpy.real(ykm),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
G,numpy.real(Y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
g,numpy.real(ykm),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
g,numpy.real(ykm),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismQ,"numpy.append(mismQ,maxDQ)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismP,"numpy.append(mismP,maxDP)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismP,"numpy.append(mismP,maxDP)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mismQ,"numpy.append(mismQ,maxDQ)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
data_branches,"numpy.loadtxt(branch_txt,skiprows=2)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
node_data,"numpy.loadtxt(node_txt,skiprows=3)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
node2_data,"numpy.loadtxt(node2_txt,skiprows=1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
J,"numpy.linalg.inv(np.vstack((J1,J2)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B_line_inv,numpy.linalg.inv(B_line),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B_2line_inv,numpy.linalg.inv(B_2line),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
total_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
total_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df,pd.DataFrame(X_TSNE,index=X.index,columns=['TSNE_0','TSNE_1'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,pd.DataFrame(distance_from_centroids,index=X.index,columns=['Cluster1','Cluster2','Cluster3','Cluster4','Cluster5','Cluster6','Cluster7','Cluster8'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ss,pandas.concat([pd.DataFrame(precision),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reloaded_df,"pandas.concat([reloaded_df_normal,reloaded_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
opt_param,pandas.concat([pd.DataFrame(precision),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
opt_param,pandas.concat([pd.DataFrame(precision),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
opt_param,pandas.concat([pd.DataFrame(precision),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resampled_df,"pandas.concat([resampled_df_normal,resampled_df_fraud])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../input/creditcard.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reloaded_df,pandas.read_csv('../input/creditcard.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(random_state=0,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=key,random_state=0,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=16,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=16,max_depth=key,random_state=0,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=16,max_features=key,random_state=0,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=16,max_features=14,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=16,max_features=14,random_state=3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(reloaded_X,reloaded_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(resampled_X,resampled_Y,random_state=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_TSNE,sklearn.manifold.TSNE(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
big_mat1,"numpy.ones((10000,1000)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
big_mat2,"numpy.ones((10000,1000)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
features,numpy.array(features),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
batch_x,numpy.array(train_x[start:end]),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
batch_y,numpy.array(train_y[start:end]),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
frame1,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.imshow(output_weight.reshape([2,20]),cmap",matplotlib.pyplot.get_cmap('seismic'),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'recording_periods.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'ventilator_settings.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'ventilator_settings_selected.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'ventilator_settings_2.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'ventilator_modes.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'ventilator_modes_selected.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_settings.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_settings_2.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_states.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s%s'%(DIR_WRITE,recording,'_alarm_events.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_stats.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_stats_cum_rec.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'total_alarm_list.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'total_alarm_list_numbers.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_stats_cum_al.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'alarm_stats_cum_total.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'long_alarms.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'frequent_alarms.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
writer,"pandas.ExcelWriter('%s/%s'%(DIR_WRITE,'Table_1.xlsx')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
vent_settings_2[recording],pandas.concat(frmes),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarm_settings_2[recording],pandas.concat(frmes),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
durations,pandas.concat(durations),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
durations,pandas.concat(durations),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
all_durations,pandas.concat(all_durations),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
slow_measurements[recording],"pandas.concat([slow_measurements[recording],
vent_settings_2[recording],alarm_settings_2[recording]],axis=0,join='outer')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_all,pandas.concat(stats),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
clinical_details,pandas.read_excel('%s/data_grabber_patient_data_combined.xlsx'%CWD),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
delta,numpy.array([(alarm.Date_Time[i]-alarm.Date_Time[i-1]),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
stamp,"numpy.array([alarm.index[i-1]
foriinrange(1,length)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"n,bins,patches","matplotlib.pyplot.hist(all_durations,bins=range(0,60)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"n,bins,patches","matplotlib.pyplot.hist(all_durations,bins=range(0,600)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"n,bins,patches","matplotlib.pyplot.hist(all_durations,bins=range(0,50000,60)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"n,bins,patches","matplotlib.pyplot.hist(all_durations,bins=range(0,60)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
flist,"os.listdir('%s/%s'%(DIR_READ,recording)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
flist,"os.listdir('%s/%s'%(DIR_READ,recording)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
flist,"os.listdir('%s/%s'%(DIR_READ,recording)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
flist,"os.listdir('%s/%s'%(DIR_READ,recording)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
flist,"os.listdir('%s/%s'%(DIR_READ,recording)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
numbered,pandas.Series(np.zeros(len(alarm_state),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
numbered,pandas.Series(np.zeros(len(alarm_state),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
numbered,pandas.Series(np.zeros(len(alarm_state),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
numbered,pandas.Series(np.zeros(len(alarm_state),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
recording_times_frame,"pandas.DataFrame([recording_duration,recording_duration_hours,recording_duration_seconds],
index=['days','hours','seconds'])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarm_t,"pandas.DataFrame(data,columns=['time_went_off','duration_seconds'])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
frame,"pandas.DataFrame([data],columns=['numberofevents','numberofeventper24h',
'meanduration(s)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarm_stats_cum_rec,"pandas.DataFrame([total_alarm_number_recordings,
total_alarm_number_recordings_24H,
mean_alarm_duration_recordings,
median_alarm_duration_recordings,
sd_alarm_duration_recordings,
mad_alarm_duration_recordings,
min_alarm_duration_recordings,
pc25_alarm_duration_recordings,
pc75_alarm_duration_recordings,
max_alarm_duration_recordings],
index=['count','countper24h','meanduration(sec)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarm_stats_cum_al,"pandas.DataFrame([total_alarm_number_alarms,
total_alarm_number_alarms_24H,
cum_alarm_duration_alarms,
cum_alarm_duration_alarms_24H,
mean_alarm_duration_alarms,
median_alarm_duration_alarms,
sd_alarm_duration_alarms,
mad_alarm_duration_alarms,
min_alarm_duration_alarms,
pc25_alarm_duration_alarms,
pc75_alarm_duration_alarms,
max_alarm_duration_alarms],
index=['count','countper24h','totalalarmduration(sec)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarm_stats_cum_total,"pandas.DataFrame([total_count,total_count_24H,
mean_duration_total,median_duration_total,
sd_duration_total,mad_duration_total,min_duration_total,
pc25_duration_total,pc75_duration_total,max_duration_total],

columns=['allalarmsinallrecordings'],
index=['totalalarmevents','totalalarmeventsper24hours',
'meanalarmduration(sec)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarms_over_1_hour,"pandas.DataFrame(sorted(alarms_over_1_hour,key=lambdax:x[2],reverse=True)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarms_over_10_min,"pandas.DataFrame(sorted(alarms_over_10_min,key=lambdax:x[2],reverse=True)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
alarms_over_1_min,"pandas.DataFrame(sorted(alarms_over_1_min,key=lambdax:x[2],reverse=True)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
vent_modes_all,pandas.DataFrame([vent_modes_all]),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
recording_duration_hours_all,pandas.DataFrame([recording_duration_hours]),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
total_recording_time,datetime.timedelta(0),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('fuel_ferc1.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.DataFrame(X,columns=['x','y'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
random_df,"pandas.DataFrame({1:random_bar1,
2:random_bar2})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,pandas.read_csv('./Iris.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['dist'],numpy.sqrt(data['x']**2+data['y']**2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,4,figsize=(17,7)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(17,5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,4,figsize=(17,5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,4,figsize=(17,7)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,4,figsize=(17,7)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,4,figsize=(17,7)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,4,figsize=(17,7)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,4,figsize=(17,7)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(3,4,figsize=(17,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(3,4,figsize=(17,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,seaborn.clustermap(iris.drop(columns='Species'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,seaborn.clustermap(iris.drop(columns='Species'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.clustermap(iris_norm.drop(columns=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm',
'Species'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.clustermap(iris_norm2.drop(columns=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm',
'Species'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_circles(n_samples=n_samples,factor=.5,
noise=.05)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris_norm[col+'_z'],scipy.stats.zscore(iris_norm[col]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(15,4)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,3)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""data.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['DATE'],pandas.to_datetime(data['DATE']),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_json(movies),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
X_std,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_std_test,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
sklearn_pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
sklearn_pca,sklearn.decomposition.PCA(n_components=d),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=d),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
counts,numpy.array(sorted(Counter(y_train),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
classes,numpy.unique(y_train),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.model_selection.cross_val_score(clf,Xred_pca,y)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.model_selection.cross_val_score(clf,Xred_lda,y)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('https://raw.githubusercontent.com/aczepielik/KRKtram/master/reports/report_07-23.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,sklearn.tree.DecisionTreeRegressor(max_depth=10),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.RandomForestRegressor(max_depth=10,n_estimators=50,n_jobs=8)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=3,scoring='neg_mean_absolute_error')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(model,X,y,cv=3,scoring='neg_mean_absolute_error')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"ox,oy","random.randint(0,max_jitter)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
X_fooling_np,numpy.asarray(X_fooling_np),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
diff,"numpy.asarray(deprocess(X_fooling-X_pre,should_rescale=False)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
diff,numpy.asarray(deprocess(10*(X_fooling-X_pre),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
X_grid,numpy.arange(min(X),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_grid,numpy.arange(min(X),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_grid,numpy.arange(min(X),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(mean_squared_error(y,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(mean_squared_error(y,y_pred2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(mean_squared_error(y,y_pred2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(mean_squared_error(y,y_pred2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('C:/Users/aksha/Desktop/ai/datasets/Position_Salaries.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg_2,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg_2,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg_2,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly_reg,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly_reg,sklearn.preprocessing.PolynomialFeatures(degree=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly_reg,sklearn.preprocessing.PolynomialFeatures(degree=4),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"re.sub('not.*?bad','good',s,flags=re.DOTALL)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
A,math.ceil(len(a),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
B,math.ceil(len(b),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df_l,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_r,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_l,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_r,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_l,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_r,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_l,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_r,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_l,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_r,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_l,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_r,pandas.read_csv('data/'+bodies[j]+str(mode),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(15,7)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(15,7)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(15,7)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(15,7)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(15,7)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(15,7)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
range_arrays,"numpy.arange(0,10,2)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
a1,"numpy.array([1,2,3])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
a2,"numpy.array([[1,2.2,5.3],[7.4,5,3]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
a3,"numpy.array([[[1,2,3],
[4,5,6],
[7,8,9]],
[[10,11,12],
[13,14,15],
[16,17,18]]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sample_array,"numpy.array([1,2,3])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
high_var_arr,"numpy.array([1,100,200,3000,5000,6000])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
low_var_arr,"numpy.array([2,4,6,8,10])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
zeros,"numpy.zeros((2,3)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ones,"numpy.ones((2,3)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ones,numpy.ones(3),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(a2),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
budget_chungus,"pandas.merge(budget_df,title_df,on='movie_name',how='left')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
budget_df,pandas.read_csv('../.csv/.unzipped-data/tn.movie_budgets.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
title_df,pandas.read_csv('./unzipped-data/imdb.title.basics.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
budget_df['release_date'],"pandas.to_datetime(budget_df['release_date'],format='%b%d,%Y')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
images,numpy.array(images),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
imageTest,numpy.array(imagesTest),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
sample,numpy.array(sample),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
tr_finite,"

matplotlib.pyplot.plot(tr_simple.times()",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('data1.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('D:\PGDBA\Competitions\EXL-Acumen/Acumen_2019_Input.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
submit,pandas.read_csv('D:\PGDBA\Competitions\EXL-Acumen\submit.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
fold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=1994)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=0.20,random_state=1994,stratify=y)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,numpy.array(data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
target,numpy.array(target),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(wine.data,columns=wine.feature_names)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
target,"pandas.DataFrame(wine.target,columns=['TARGET'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([data,target],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(data,target,test_size=0.2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
wine,sklearn.datasets.load_wine(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
class_names,"os.listdir(""../../feature/feature_mfcc/"")",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
files,"os.listdir(""../../feature/feature_mfcc/""+class_names[i])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
val_class_names,"os.listdir(""../../feature/feature_mfcc_validation/"")",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
val_files,"os.listdir(""../../feature/feature_mfcc_validation/""+val_class_names[i])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
X_TF_train,numpy.array(X_TF),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
y_TF_train,numpy.array(y_TF),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
X_TF_pred,numpy.array(X_TF_pred),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
y_TF_pred,numpy.array(y_TF_pred),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
mean_tpr,numpy.zeros_like(all_fpr),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
tempX,"numpy.expand_dims(tempX,axis=0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
tempX,"numpy.expand_dims(tempX,axis=0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
all_fpr,"numpy.unique(np.concatenate([fpr[i]foriinrange(0,len(class_names)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
x,"numpy.load(""../../feature/feature_mfcc/""+class_names[i]+""/""+files[j])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
array,"numpy.load(""../../feature/feature_mfcc/""+cname+""/""+fname)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
array,"numpy.load(""../../feature/feature_mfcc_validation/""+cname+""/""+fname)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
"X_TF_train,X_TF_test,y_TF_train,y_TF_test","sklearn.model_selection.train_test_split(X_TF_train,y_TF_train,test_size=0.30,random_state=42,stratify=y_TF_train)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.LinearSVC(random_state=0,tol=1e-5)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.LinearSVC(random_state=0,tol=1e-5)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
"fpr[i],tpr[i],_","sklearn.metrics.roc_curve(y_TF_test_encoded[:,i],y_TF_score[:,i])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
"fpr[""micro""],tpr[""micro""],_",sklearn.metrics.roc_curve(y_TF_test_encoded.ravel(),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
roc_auc[i],"sklearn.metrics.auc(fpr[i],tpr[i])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
"roc_auc[""micro""]","sklearn.metrics.auc(fpr[""micro""],tpr[""micro""])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
"roc_auc[""macro""]","sklearn.metrics.auc(fpr[""macro""],tpr[""macro""])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
gbrt,sklearn.ensemble.GradientBoostingClassifier(random_state=0),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_0
figsize,"numpy.array([8*n_change,4])",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
axes,numpy.array([axes]),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
figsize,"numpy.array([8,4.5])",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,n_change,figsize=figsize,dpi=150,sharey=True)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.1,random_state=0)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
a,"numpy.array([[1,2,3],[5,6,7]])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
x,"numpy.array([[1,2],[3,4]])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
y,"numpy.array([[5,6],[7,8]])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
plot_tokens,"pandas.DataFrame(plot_tokens,columns=v.get_feature_names()",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.concat([movies_list,pd.get_dummies(movies_list.genre,prefix='genre')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.concat([movies_list,pd.get_dummies(movies_list.mpaa,prefix='rated')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.concat([movies_list,plot_tokens],axis=1)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
actors,"pandas.merge(actors,actor_ratings,on='actor_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
directors_list,"pandas.merge(directors_list,director_ratings,on='director_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
writers_list,"pandas.merge(writers_list,writer_ratings,on='writer_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,actors,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,directors_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,writers_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,budget_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,genres_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,gross_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,mpaa_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,plot_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.merge(movies_list,votes_list,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,"pandas.merge(movies_list,movie_ratings,on='movie_id',how='left')",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.pivot_table(movies_list,
index='movie_id',
values='avg_actor_rating',
aggfunc=np.mean)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.pivot_table(movies_list,
index=['movie_id','avg_actor_rating'],
values='avg_director_rating',
aggfunc=np.mean)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.pivot_table(movies_list,
index=['movie_id','avg_actor_rating','avg_director_rating'],
values='avg_writer_rating',
aggfunc=np.mean)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies_list,"pandas.pivot_table(movies_list,
index=['movie_id','avg_actor_rating',
'avg_director_rating','avg_writer_rating',
'budget'
],
aggfunc=np.sum)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gross_list,"pandas.pivot_table(gross_list,index='movie_id',values='gross',aggfunc=np.sum)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
plot_list,"pandas.pivot_table(plot_list,index='movie_id',values='plot',aggfunc=lambdax:''.join(x)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
actor_ratings,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
actors,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
director_ratings,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
writer_ratings,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
budget_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
directors_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
writers_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
genres_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gross_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mpaa_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
plot_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
votes_list,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movie_ratings,"pandas.read_csv(fname,index_col=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
actor_ratings,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
actors,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movies,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
director_ratings,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
writer_ratings,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
budget_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
directors_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
writers_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
genres_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gross_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mpaa_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
plot_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
votes_list,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movie_ratings,"pandas.read_sql(sql,connection)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(importances),CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(importances),CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
std,"numpy.std([tree.feature_importances_fortreeinrf.estimators_],axis=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
std,"numpy.std([tree.feature_importances_fortreeinet.estimators_],axis=0)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,dummy_variable_1],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,dummy_variable_2],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df['horsepower-binned'],"pandas.cut(df['horsepower'],bins,labels=group_names,include_lowest=True)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dummy_variable_1,"pandas.get_dummies(df[""fuel-type""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dummy_variable_2,pandas.get_dummies(df['aspiration']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(filename,names=headers)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(min(df[""horsepower""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(importances),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
summary,"pandas.DataFrame(df.dtypes,columns=['dtypes'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfscores,pandas.DataFrame(fit.scores_),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfcolumns,pandas.DataFrame(X.columns),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feat_importances,"pandas.Series(model.feature_importances_,index=X.columns)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
featureScores,"pandas.concat([dfcolumns,dfscores],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_raw,"pandas.get_dummies(df_raw,columns=col,
drop_first=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_raw,pandas.read_excel('No-Churn_Telecom_Europe_renamed.xlsx'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_raw,"pandas.read_sql(query,conn)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bestfeatures,"sklearn.feature_selection.SelectKBest(score_func=chi2,k=10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.ExtraTreesClassifier(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtree,"sklearn.tree.DecisionTreeClassifier(

class_weight=""balanced"",
min_weight_fraction_leaf=0.01
)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.10,random_state=123,stratify=y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data,"pandas.read_csv(""inp_data.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
node_data,"pandas.read_csv(""inp_other.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
edge_data,"pandas.read_csv(""inp_distance_data.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
branch_data,"pandas.read_csv(""inp_loc.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
missing_data,"pandas.read_csv(""inp_missing_information.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data,"pandas.read_csv(""inp_outlier.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
missing_data['date'],pandas.to_datetime(missing_data['date']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data['date'],pandas.to_datetime(dirty_data.date),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data['date'],pandas.to_datetime(dirty_data['date']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['date'],pandas.to_datetime(outlier_data['date']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data['time'],pandas.to_timedelta(dirty_data['time'].str.strip(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ifdirty_data['time'][i]>,datetime.timedelta(hours=8),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
anddirty_data['time'][i]<,datetime.timedelta(hours=12),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
anddirty_data['time'][i]<,datetime.timedelta(hours=16),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
anddirty_data['time'][i]<,datetime.timedelta(hours=20),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm_ns,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm_tp,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm_bk,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.array(break_eqs[5:9],dtype=float)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"numpy.array(break_sol[5:9],dtype=float)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.array(lunch_eqs[0:5],dtype=float)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"numpy.array(lunch_sol[0:5],dtype=float)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.array(dinner_eqs[5:9],dtype=float)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"numpy.array(dinner_sol[5:9],dtype=float)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
index,numpy.where(break_prices==price),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
index,numpy.where(lunch_prices==price),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
index,numpy.where(dinner_prices==price),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['residual'][i],numpy.absolute(((outlier_data['delivery_fee'][i]*2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['residual'][i],numpy.absolute((outlier_data['delivery_fee'][i]-predictions_ns[count_ns]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['residual'][i],numpy.absolute(((outlier_data['delivery_fee'][i]*2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['residual'][i],numpy.absolute((outlier_data['delivery_fee'][i]-predictions_tp[count_tp]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['residual'][i],numpy.absolute(((outlier_data['delivery_fee'][i]*2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_data['residual'][i],numpy.absolute((outlier_data['delivery_fee'][i]-predictions_bk[count_bk]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q1,"numpy.percentile(ns.residual,25)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q3,"numpy.percentile(ns.residual,75)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q1,"numpy.percentile(tp.residual,25)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q3,"numpy.percentile(tp.residual,75)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q1,"numpy.percentile(bk.residual,25)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q3,"numpy.percentile(bk.residual,75)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
break_prices,"numpy.linalg.solve(a,b)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lunch_prices,"numpy.linalg.solve(a,b)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dinner_prices,"numpy.linalg.solve(a,b)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data['order_items'][i],"re.sub(outter,break_menu[index],dirty_data['order_items'][i])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data['order_items'][i],"re.sub(outter,lunch_menu[index],dirty_data['order_items'][i])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dirty_data['order_items'][i],"re.sub(outter,dinner_menu[index],dirty_data['order_items'][i])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
max_sims,collections.Counter(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
max_sims,collections.Counter(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
max_sims,collections.Counter(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ll_dist_matrix,"pandas.DataFrame(ll_dists,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pmi_dist_matrix,"pandas.DataFrame(pmi_dists,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
raw_dist_matrix,"pandas.DataFrame(raw_dists,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_ll_dist_matrix,"pandas.DataFrame(pca_dists_ll,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_pmi_dist_matrix,"pandas.DataFrame(pca_dists_pmi,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_raw_dist_matrix,"pandas.DataFrame(pca_dists_raw,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
jacc_dist,"pandas.DataFrame(jacc_dist_pair,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ratio_raw_dist,"pandas.DataFrame(ratio_raw_pair,columns=row_col,index=row_col)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,6)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
r,requests.get('https://api.github.com/events'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
r,requests.get('https://cat-fact.herokuapp.com/facts'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"return(100.0*np.sum(np.argmax(predictions,1)","=numpy.argmax(labels,1)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
trainX,"numpy.linspace(-1,1,101)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([0,1,2,2,1])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
correct_scores,"numpy.asarray([
[-0.81233741,-1.27654624,-0.70335995],
[-0.17129677,-1.18803311,-0.47310444],
[-0.51590475,-1.01354314,-0.8504215],
[-0.15419291,-0.48629638,-0.52901952],
[-0.00618733,-0.12435261,-0.15226949]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
channel_states,"numpy.zeros(proxy.number_of_channels,dtype=int)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
channel_states,"numpy.zeros(proxy.number_of_channels,dtype=int)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
v_gnd,numpy.mean(df_volts),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
v_abs_mean,numpy.mean(v_abs),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
v_filtered_mean,numpy.mean(v_abs[v_abs<filter_th]),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_volts,"pandas.DataFrame({'volts':
self.analog_reads_simple(11,n_samples)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_capacitances,"pandas.DataFrame([proxy.measure_capacitance(n_samples=n_samples,
amplitude=methods)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s_channel_states,"pandas.Series(N*[1],index=range(N)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s_channel_states,"pandas.Series(actuated_channels_count*[1],
index=range(actuated_channels_count)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(10,4)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""train.csv"",parse_dates=[""date""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv('test.csv',parse_dates=['date'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,pandas.read_csv('sample_submission.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(nrows=3,ncols=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(nrows=3,ncols=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.RandomForestRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_data,"pandas.read_csv(path+'used_car_train_20200313.csv',sep='')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
test_data,"pandas.read_csv(path+'used_car_testA_20200313.csv',sep='')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(14,14)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
response_data,requests.get(url),CLUSTER_27,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,requests.get(query_url),CLUSTER_27,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(data_dict),CLUSTER_27,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
ind,numpy.arange(N),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
X_train,numpy.array(flattened),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
y_train,numpy.array(y_train),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
"h,w",numpy.array(img_resized),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
X_test,numpy.array(flattened),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
y_test,numpy.array(y_test),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
labels,"numpy.fromfile(f,dtype=np.uint8)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
everything,"numpy.fromfile(f,dtype=np.uint8)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
pred,numpy.argmax(cnn1.predict(X_test_temp),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat,numpy.argmax(cnn1.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
pred,numpy.argmax(cnn2.predict(X_test_temp),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat,numpy.argmax(cnn2.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat,numpy.argmax(cnn1.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat,numpy.argmax(cnn2.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat,numpy.argmax(cnn1.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat,numpy.argmax(cnn2.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat_cnn,numpy.argmax(cnn.predict(X_test_cnn),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
yhat_mlp,numpy.argmax(mlp.predict(X_test),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
images,"numpy.reshape(everything,(-1,3,96,96)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
images,"numpy.transpose(images,(0,3,2,1)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
error,numpy.var(mean_fpr),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
error,numpy.var(mean_fpr),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
mean_fpr,"numpy.linspace(0,1,100)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
x_train_up,"numpy.stack(x_train_up,axis=0)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
x_test_up,"numpy.stack(x_test_up,axis=0)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
X_train_cnn,"numpy.expand_dims(X_train.reshape((-1,img_wh,img_wh)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
X_test_cnn,"numpy.expand_dims(X_test.reshape((-1,img_wh,img_wh)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
classes,numpy.unique(y_train),CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,
pred[:,int(j)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,
pred_mlp[:,int(j)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
roc_auc+,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
roc_auc+,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
skf,"sklearn.model_selection.StratifiedKFold(n_splits=4,shuffle=True,random_state=64)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
skf,"sklearn.model_selection.StratifiedKFold(n_splits=4,shuffle=True,random_state=64)",CLUSTER_14,CLUSTER_3,CLUSTER_3,CLUSTER_5,CLUSTER_0
t,time.localtime(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
cf_a,numpy.array(cf),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
add_cf,"numpy.array([10,20,-10,30,10,-5])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,numpy.array(l),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([50,100,120,150,200,300])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([50,100,120,150,200,300])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf_add,"numpy.array([10,20,5,-10,20,10])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([-200,20,50,70,100,50])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
n,"numpy.array([0,1,2,3,4,5])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([100,10,20,50,30,25])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf1,"numpy.array([100,10,20,50,30,25])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf1,"numpy.array([100,10,20,50,30,25])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf1,"numpy.array([100,10,20,50,30,25])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([100,10,20,50,30,25])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([-200,20,50,70,100,50])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([-200,20,50,70,100,50])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([-200,20,50,70,100,50])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cf,"numpy.array([-200,20,50,70,100,50])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.sin(x),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-10,10,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(10,5)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.5)",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
dummy,sklearn.dummy.DummyClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X,y",numpy.array(songs),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
embedding_matrix,"numpy.zeros((max_words,word_vec_size)",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(data={'fruit':[""banana"",""apple"",""banana"",""apple"",""banana"",""apple"",""banana"",
""apple"",""apple"",""apple"",""banana"",""banana"",""apple"",""banana"",],
'tasty':[""yes"",""no"",""yes"",""yes"",""yes"",""yes"",""yes"",
""yes"",""yes"",""yes"",""yes"",""no"",""no"",""no""],
'size':[""large"",""large"",""large"",""small"",""large"",""large"",""large"",
""small"",""large"",""large"",""large"",""large"",""small"",""small""]})",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(raw_data,columns=['D','I','G','L','S'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(np.random.randint(0,4,size=(5000,2)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(np.random.randint(0,3,size=(2500,8)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""https://serv.cusp.nyu.edu/classes/ML_2016_Spring/ML_2017/NYC_taxi_sample.csv"",index_col=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
qtable,"numpy.zeros((state_size,action_size)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
action,"numpy.argmax(qtable[state,:])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
action,"numpy.argmax(qtable[state,:])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,matplotlib.pyplot.figure(i),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(6,8)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
fig,"matplotlib.pyplot.figure(i,figsize=(16,5)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
fig,"matplotlib.pyplot.figure(i,figsize=(16,5)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
cmap,"seaborn.cubehelix_palette(light=1,as_cmap=True)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
cmap,"seaborn.cubehelix_palette(light=1,as_cmap=True)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
cmap,"seaborn.cubehelix_palette(light=1,as_cmap=True)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmi,math.log((pxy+0.0001),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmi,math.log(pxy/(px*py),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmi,math.log((pxy+0.0001),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmi,math.log(pxy/(px*py),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
reviewDf,pandas.DataFrame(pdlist),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
freqReviewDf,pandas.DataFrame(freqReview),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
freqReviewDf,pandas.DataFrame(freqReview),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
miScoredf,pandas.DataFrame(miScore),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmidf,pandas.DataFrame(pmilist),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmidf,pandas.DataFrame(pmilist),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmiposlist,pandas.DataFrame(pmiposlist),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
pmineglist,pandas.DataFrame(pmineglist),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
hotelDfRaw,"pandas.read_csv('reviews.csv',header=None)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
bins,"numpy.linspace(-1,1,100)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
counter,collections.Counter(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
tempCounter,collections.Counter([word.lower(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
counter,collections.Counter(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
counter,collections.Counter(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
c_pos,collections.Counter(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
c_neg,collections.Counter(),CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
tempCounter,"collections.Counter(flatten([word
forword
inget_terms(chunker.parse(pos_tag(re.findall(r'\w+',reviews[i])",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_6,CLUSTER_0
tiny_image,"numpy.array([[0,20,30,150,120],
[200,200,250,70,3],
[50,180,85,40,90],
[240,100,50,255,10],
[30,0,75,190,220]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tiny_image,"numpy.array([[0,200,200,200,0],
[0,0,200,0,0],
[0,200,0,200,0],
[0,200,200,200,0],
[0,200,200,200,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
max_val,numpy.amax(gray_image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
min_val,numpy.amin(gray_image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
extras,numpy.ones((image.shape),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
T,"numpy.float32([[1,0,quater_width],[0,1,quater_height]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x_values,"numpy.linspace(0,1,100)",CLUSTER_1,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dataframe1,pandas.read_csv(fullpath),CLUSTER_1,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(""nst-est2017-alldata.csv"")",CLUSTER_1,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dataframe,pandas.read_csv(fullpath),CLUSTER_1,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
training_data_len,math.ceil(len(dataset),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,y_train",numpy.array(x_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_test,numpy.array(x_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,numpy.array(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_train,"numpy.reshape(x_train,(x_train.shape[0],x_train.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_test,"numpy.reshape(x_test,(x_test.shape[0],x_test.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,"numpy.reshape(X_test,(X_test.shape[0],X_test.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,numpy.sqrt(np.mean(((predictions-y_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"get_history(symbol=symbol,start=datetime.date(2010,1,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"get_history(symbol=symbol,start=date(2010,1,1),end=datetime.date.today()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(link,sep='\t')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_json,pandas.read_json('./data/world-heritage-unesco-list.json'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"x,y",numpy.array(x),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
padding,"numpy.zeros((for_predict.shape[0],dataset.shape[1]-1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.reshape(y,(y.shape[0],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
for_predict,"numpy.reshape(for_predict,(1,for_predict.shape[0],for_predict.shape[1])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
predictions_scaled,"numpy.append(padding,predictions_scaled,axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,pandas.read_csv('dataset.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"dataset.iloc[i,4]","datetime.datetime.strptime(dataset.iloc[i,4],'%m/%d/%Y')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=test_size,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"math.sqrt(mean_squared_error(predictions,actual_values)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labels,pandas.DataFrame(iris.target),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.DataFrame(iris.data),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predict,pandas.DataFrame(model.fit_predict(feature),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predict,pandas.DataFrame(pipeline.fit_predict(feature),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([data,labels],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r,"pandas.concat([feature,predict],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r,"pandas.concat([feature,predict],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ct,"pandas.crosstab(data['labels'],r['predict'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ct,"pandas.crosstab(data['labels'],r['predict'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.cluster.DBSCAN(eps=0.3,min_samples=6)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,model=sklearn.cluster.DBSCAN(min_samples=6),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.make_pipeline(scaler,model)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(4,3)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(4,3)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(4,3)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(4,3)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(4,3)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(5,4)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(5,4)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.zeros((xsize,ysize,len(InterpDepth)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.zeros((xsize,ysize,len(Depth)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.zeros((xsize,ysize,len(Depth)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.zeros((xsize,len(yvec)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
grid_zeros,"numpy.zeros((xsize,ysize,len(Depth)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
grid_zeros,"numpy.zeros((xsize,ysize,len(Depth)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dt,numpy.dtype('>f8'),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.fromfile(filen,dt)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
zi,"numpy.concatenate((np.arange(5,260,5)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tracer[:,:,kk]","numpy.ones((xsize,ysize)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tracer[:,:,kk]","numpy.ones((xsize,ysize)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tracer[:,:,kk]","numpy.ones((xsize,ysize)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tracer[:,:,kk]","numpy.ones((xsize,ysize)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.ones((xsize,ysize,len(Depth)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer_rsh,"numpy.reshape(tracer,(nx,ny,len(zi)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.expand_dims(numpy.expand_dims(C1d,0)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tracer,"numpy.expand_dims(numpy.expand_dims(C1d,0)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.sin(np.arange(0,SEQ_LEN)",CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
cb,matplotlib.pyplot.colorbar(),CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
f,"matplotlib.pyplot.figure(figsize=(19,15)",CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
df1,pandas.read_csv('./Data/journeys.csv'),CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
df2,pandas.read_csv('./Data/stations.csv'),CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
text,"re.sub(r""[^a-zA-Z0-9]"","""",text.lower()",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
predictions,numpy.array([]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
test_data,numpy.array([numpy.array([len_test]+test_data_int),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
predictions,"numpy.append(predictions,predictor.predict(array)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
split_array,"numpy.array_split(data,int(data.shape[0]/float(rows)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
test_X,pandas.concat([pd.DataFrame(test_X_len),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
train_sample,"pandas.read_csv(os.path.join(data_dir,'train.csv')",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
positive_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
negative_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
total_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
pos_neg_ratios,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
review_counter,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
frequency_frequency,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
positive_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
negative_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
total_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
pos_neg_ratios,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
layer_0,numpy.zeros(10),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
layer_1,numpy.zeros(5),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_1,"numpy.zeros((1,hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_1,"numpy.zeros((1,hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
"hist,edges","numpy.histogram(list(map(lambdax:x[1],pos_neg_ratios.most_common()",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
"hist,edges","numpy.histogram(list(map(lambdax:x[1],frequency_frequency.most_common()",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
state_town,"pandas.DataFrame(state_town,columns=['State','RegionName'])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
university_town,"pandas.merge(housing_data,university_towns_data,how='inner',left_on=['State','RegionName'],right_on=['State','RegionName'])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('data/City_Zhvi_AllHomes.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,"pandas.read_excel('data/gdplev.xls',skiprows=220,usecols=[4,6],header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,"pandas.read_excel('data/gdplev.xls',skiprows=220,usecols=[4,6],header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,"pandas.read_excel('data/gdplev.xls',skiprows=220,usecols=[4,6],header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,"pandas.read_fwf('data/university_towns.txt',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
pred_proba_df,"pandas.DataFrame({
'true':test_data.classes,
'pred_prob':y_pred_class.flatten()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('../data/annotation/test_annotation.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv('../data/annotation/train_annotation.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pred_arg_class,"numpy.argmax(y_pred_class,axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(test_data.classes,y_pred_class)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
report,"sklearn.metrics.classification_report(test_data.classes,y_pred_class)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_text,"numpy.array([[int(re.sub(r""\n"","""",sent)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
x_text,numpy.array(list(vocab_processor.fit_transform(all_examples),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
x_text,numpy.array(x_text),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
featureVec,"numpy.zeros((num_features,)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
featureVec,"numpy.add(featureVec,model[word])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
featureVec,"numpy.divide(featureVec,nwords)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
time_str,datetime.datetime.now(),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
time_str,datetime.datetime.now(),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""[^A-Za-zа-яА-Я0-9()",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\'s"",""\'s"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\'ve"",""\'ve"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""n\'t"",""n\'t"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\'re"",""\'re"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\'d"",""\'d"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\'ll"",""\'ll"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r"","","","",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""!"",""!"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\("",""\("",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\?"",""\?"",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
string,"re.sub(r""\s{2,}"","""",string)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_6,CLUSTER_1
merged,"pandas.merge(begins,ends[['tripid','dayofservice','routeid','end']],on=['tripid','dayofservice','routeid'])",CLUSTER_27,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
routes,"json.loads(open('/home/student/dbanalysis/dbanalysis/resources/trimmed_routes.json','r')",CLUSTER_27,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_27,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
human_files,"numpy.array(glob(""/data/lfw/*/*"")",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
dog_files,"numpy.array(glob(""/data/dog_images/*/*/*"")",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
correct+,numpy.sum(np.squeeze(pred.eq(target.data.view_as(pred),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
hih,numpy.average([face_detector(img),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
hid,numpy.average([face_detector(img),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
dih,numpy.average([dog_detector(img),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
did,numpy.average([dog_detector(img),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
df,pandas.read_csv('train.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
gradient,"numpy.zeros((m,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
w,"numpy.zeros((m,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
init_w,"numpy.zeros((5,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
totalError,"numpy.dot(res.T,res)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
totalError,"numpy.dot(res.T,res)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
m,"numpy.size(w_current,0)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
gradient,"numpy.sum(np.multiply(res,X)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
points,"numpy.genfromtxt(""sample_treino.csv"",delimiter="","",skip_header=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
encoded_labels,numpy.array([1iflabel=='positive'else0forlabelinlabels_split]),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
encoded_labels,numpy.array([encoded_labels[ii]foriiinnon_zero_idx]),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
"features[i,-len(row):]",numpy.array(row),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
features,numpy.zeros((len(reviews_ints),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
correct,numpy.squeeze(correct_tensor.numpy(),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
num_correct+,numpy.sum(correct),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
counts,collections.Counter(words),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
review_lens,collections.Counter([len(x),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
common_systems[item],pandas.DataFrame(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
common_systems[item],pandas.DataFrame(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
common_systems[item],pandas.DataFrame(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
oqmd_data,"pandas.read_csv('../data/oqmd_all.data',delim_whitespace=True)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
elem_re,re.compile('[A-Z][a-z]?'),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
splot,"matplotlib.pyplot.subplot(2,1,1+index)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
t0,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elapsed_time,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
core_samples_mask,"numpy.zeros_like(db.labels_,dtype=bool)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
angle,numpy.arctan(u[1]/u[0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labels_unique,numpy.unique(labels),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,pandas.read_csv('./big_table.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sd,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_red,sklearn.manifold.SpectralEmbedding(n_components=2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Hclustering_10,"sklearn.cluster.AgglomerativeClustering(n_clusters=10,
affinity=""euclidean"",linkage=""ward"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Hclustering_4,"sklearn.cluster.AgglomerativeClustering(n_clusters=4,
affinity=""euclidean"",linkage=""ward"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.cluster.AgglomerativeClustering(linkage=linkage_method,
connectivity=connectivity,
n_clusters=n_clusters)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn_graph,"sklearn.neighbors.kneighbors_graph(X_green,30,include_self=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ms,"sklearn.cluster.MeanShift(bandwidth=bandwidth,bin_seeding=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bandwidth,"sklearn.cluster.estimate_bandwidth(X_green,quantile=0.2,n_samples=500)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=0.3,min_samples=10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
birch,sklearn.cluster.Birch(n_clusters=n_clusters),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dpgmm,"sklearn.mixture.BayesianGaussianMixture(n_components=5,
covariance_type='full')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gmm,"sklearn.mixture.GaussianMixture(n_components=5,covariance_type='full')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"v,w",scipy.linalg.eigh(covar),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_titanic,pandas.read_csv('titanic-data-6.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
graph_1,"seaborn.barplot(x='Pclass',y='Survived',data=df_titanic)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
graph_2,"seaborn.barplot(x='Sex',y='Survived',data=df_titanic)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
graph_3,"seaborn.barplot(x='Faixa',y='Survived',data=df_titanic)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
graph_6,"seaborn.pointplot(x='Pclass',y='Survived',hue='Embarked',data=df_titanic)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df1,pandas.DataFrame(scaler.fit_transform(df1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data1,pandas.DataFrame(scaler.fit_transform(data1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resultols,"pandas.DataFrame(resultols,columns=[""Actual"",""Predicted""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.get_dummies(df),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""C:\\Users\\Neel\\Desktop\\GreyatomCodes\\PracticeDatasets\\gapminder.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""C:\\Users\\Neel\\Desktop\\GreyatomCodes\\PracticeDatasets\\gapminder.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.arange(3,12)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.arange(3,12)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,math.sqrt(mse),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmseL,math.sqrt(mseL),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmseLO,math.sqrt(mseLO),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmseRFE,math.sqrt(mseRFE),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knnc,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linregols,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linregrfe,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rL2,"sklearn.metrics.r2_score(yL_test,yL_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rLO2,"sklearn.metrics.r2_score(yLO_test,yLO_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rRFE2,"sklearn.metrics.r2_score(yRFE_test,yRFE_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mae,"sklearn.metrics.mean_absolute_error(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
maeL,"sklearn.metrics.mean_absolute_error(yL_test,yL_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
maeLO,"sklearn.metrics.mean_absolute_error(yLO_test,yLO_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
maeRFE,"sklearn.metrics.mean_absolute_error(yRFE_test,yRFE_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mse,"sklearn.metrics.mean_squared_error(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mseL,"sklearn.metrics.mean_squared_error(yL_test,yL_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mseLO,"sklearn.metrics.mean_squared_error(yLO_test,yLO_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mseRFE,"sklearn.metrics.mean_squared_error(yRFE_test,yRFE_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfe,"sklearn.feature_selection.RFE(model,4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(np.random.randn(6,4)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame({'A':1.,
'B':pd.Timestamp('20130102')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df3,"pandas.DataFrame([{'A':1,'B':2},{'C':3}])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,pandas.Series(l),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,"pandas.Series(l,index=daty)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,pandas.Series(np.random.randn(5),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
daty,"pandas.date_range('20170101',periods=6)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
training_array,numpy.array(training_array),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
testing_array,numpy.array(testing_array),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.array(y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.array(y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_pl_array,numpy.asarray(X_train['fuso']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_pw_array,numpy.asarray(X_train['strep']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_pl_array,numpy.asarray(X_test['fuso']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_pw_array,numpy.asarray(X_test['strep']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
confuse,"pandas.DataFrame(confusion_matrix(y_test,prediction)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('gum_disease_data.txt',sep='\t',index_col=False,low_memory=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cmap,"seaborn.diverging_palette(20,220,n=200)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(
corr,
vmin=-1,vmax=1,center=0,
cmap=sns.diverging_palette(20,220,n=200)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df.iloc[:,~df.columns.isin(['status','id'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df.iloc[:,~df.columns.isin(['status','id'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_gini,"sklearn.tree.DecisionTreeClassifier(criterion=""gini"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dot_data,"sklearn.tree.export_graphviz(clf_gini,out_file=None,
feature_names=X_train.columns
)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svc_clf,sklearn.svm.SVC(gamma='auto'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lsvc_clf,"sklearn.svm.LinearSVC(random_state=0,tol=1e-5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test_pred,numpy.asarray(lr.predict(X_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_cv_err,"numpy.mean(train_cv_err,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_cv_err,"numpy.mean(test_cv_err,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr,X,y,cv","5,train_sizes=numpy.linspace(.1,1.0,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scoring_df,"pandas.DataFrame({'prediction':X_test_pred,'actual':y_test})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
features,"pandas.concat([congress_df.iloc[:,1:10],congress_df.iloc[:,11:]],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
congress_df,"pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/voting-records/house-votes-84.data',
header=None)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
congress_df,"pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/voting-records/house-votes-84.data',
header=None)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
movie_df,pandas.read_csv('2013_movies.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
survival_df,pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/haberman/haberman.data'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
movie_df['ReleaseDate'],pandas.to_datetime(movie_df['ReleaseDate']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,target,test_size=.30,random_state=4444)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k[0]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,knn.predict(X_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_acc,"sklearn.metrics.accuracy_score(y_test,lr.predict(X_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,knn.predict(X_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dem_acc,"sklearn.metrics.accuracy_score(target,simple_predictor(features,'democrat')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rep_acc,"sklearn.metrics.accuracy_score(target,simple_predictor(features,'republican')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(y_test,model.predict(X_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"m,train_cv_err,test_cv_err","sklearn.model_selection.learning_curve(model[1],features,target)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
lr,X,y,cv=5,train_sizes=np.linspace(.1,1.0,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cvs,"sklearn.model_selection.cross_val_score(model,features,target,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.model_selection.cross_val_score(knn,X,y,scoring='accuracy',cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1,"numpy.array([points[:,0].min()",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
top_region,"numpy.array([np.random.normal(10,2,n_pts)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
bottom_region,"numpy.array([np.random.normal(5,2,n_pts)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y,numpy.array([np.zeros(n_pts),CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
point,"numpy.array([[x,y]])",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
point,"numpy.array([[x,y]])",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
bias,numpy.ones(n_pts),CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x_span,"numpy.linspace(min(X[:,0])",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y_span,"numpy.linspace(min(X[:,1])",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x_span,"numpy.linspace(min(X[:,0])",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y_span,"numpy.linspace(min(X[:,1])",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
all_points,"numpy.vstack((top_region,bottom_region)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
line_parameters,numpy.matrix([np.zeros(3),CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(x_span,y_span)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(x_span,y_span)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
ln,"matplotlib.pyplot.plot(x1,x2)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"_,ax","matplotlib.pyplot.subplots(figsize=(4,4)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_blobs(n_samples=n_pts,random_state=123,
centers=centers,cluster_std=0.4)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_circles(n_samples=n_pts,random_state=123
,noise=0.1,factor=0.2)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
C,"numpy.empty((m,q)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
C,"numpy.empty((m,q)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
count,collections.Counter(num),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
csv_df,"pandas.read_csv('dataset5.csv',
sep=',',
header=0,
parse_dates=True,
encoding='ISO-8859-1')",CLUSTER_1,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
count,collections.defaultdict(int),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
unigram_counts,collections.defaultdict(int),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
unigram_probs,collections.defaultdict(float),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
self._count_table[history],collections.defaultdict(int),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
self._prob_table[history],collections.defaultdict(float),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
self._count_table[history],collections.defaultdict(lambda:self._alpha),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
self._prob_table[history],collections.defaultdict(float),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
sentence_probability_sum+,numpy.log(word_probability),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
prob_sum+,numpy.log(p),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
prob_sum+,numpy.log(p),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
new_pval,pandas.Series(index=remaining_features),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_pval,pandas.Series(index=remaining_features),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,"pandas.read_csv('./dataset/winequality_red.csv',encoding='utf_8_sig')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(dataset,label,test_size=0.3,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Lasso,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Linear,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Ridge,sklearn.linear_model.Ridge(alpha=0.1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(7,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
type_of_accommodation,"pandas.DataFrame(a,columns=['type_of_accommodation0','type_of_accommodation1'])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
type_of_house,"pandas.DataFrame(a,columns=['type_of_house0','type_of_house1','type_of_house2',
'type_of_house3','type_of_house4','type_of_house5',
'type_of_house6','type_of_house7',])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
repair,"pandas.DataFrame(a,columns=['repair0','repair1','repair2',
'repair3','repair4','repair5'])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
district,"pandas.DataFrame(a,columns=['district0','district1','district2','district3','district4','district5',
'district6','district7','district8','district9','district10','district11',
'district12','district13'])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
rooms_data,pandas.read_csv('rooms.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
rooms_data,pandas.read_csv('rooms_onehot.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
one,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
expected_next_w,"numpy.asarray([
[0.1406,0.20738947,0.27417895,0.34096842,0.40775789],
[0.47454737,0.54133684,0.60812632,0.67491579,0.74170526],
[0.80849474,0.87528421,0.94207368,1.00886316,1.07565263],
[1.14244211,1.20923158,1.27602105,1.34281053,1.4096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_velocity,"numpy.asarray([
[0.5406,0.55475789,0.56891579,0.58307368,0.59723158],
[0.61138947,0.62554737,0.63970526,0.65386316,0.66802105],
[0.68217895,0.69633684,0.71049474,0.72465263,0.73881053],
[0.75296842,0.76712632,0.78128421,0.79544211,0.8096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[0.08714,0.15246105,0.21778211,0.28310316,0.34842421],
[0.41374526,0.47906632,0.54438737,0.60970842,0.67502947],
[0.74035053,0.80567158,0.87099263,0.93631368,1.00163474],
[1.06695579,1.13227684,1.19759789,1.26291895,1.32824]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_velocity,"numpy.asarray([
[0.5406,0.55475789,0.56891579,0.58307368,0.59723158],
[0.61138947,0.62554737,0.63970526,0.65386316,0.66802105],
[0.68217895,0.69633684,0.71049474,0.72465263,0.73881053],
[0.75296842,0.76712632,0.78128421,0.79544211,0.8096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.39223849,-0.34037513,-0.28849239,-0.23659121,-0.18467247],
[-0.132737,-0.08078555,-0.02881884,0.02316247,0.07515774],
[0.12716641,0.17918792,0.23122175,0.28326742,0.33532447],
[0.38739248,0.43947102,0.49155973,0.54365823,0.59576619]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_cache,"numpy.asarray([
[0.5976,0.6126277,0.6277108,0.64284931,0.65804321],
[0.67329252,0.68859723,0.70395734,0.71937285,0.73484377],
[0.75037008,0.7659518,0.78158892,0.79728144,0.81302936],
[0.82883269,0.84469141,0.86060554,0.87657507,0.8926]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.40094747,-0.34836187,-0.29577703,-0.24319299,-0.19060977],
[-0.1380274,-0.08544591,-0.03286534,0.01971428,0.0722929],
[0.1248705,0.17744702,0.23002243,0.28259667,0.33516969],
[0.38774145,0.44031188,0.49288093,0.54544852,0.59801459]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_a,"numpy.asarray([
[0.69966,0.68908382,0.67851319,0.66794809,0.65738853,],
[0.64683452,0.63628604,0.6257431,0.61520571,0.60467385,],
[0.59414753,0.58362676,0.57311152,0.56260183,0.55209767,],
[0.54159906,0.53110598,0.52061845,0.51013645,0.49966,]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_v,"numpy.asarray([
[0.48,0.49947368,0.51894737,0.53842105,0.55789474],
[0.57736842,0.59684211,0.61631579,0.63578947,0.65526316],
[0.67473684,0.69421053,0.71368421,0.73315789,0.75263158],
[0.77210526,0.79157895,0.81105263,0.83052632,0.85]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_test_pred,numpy.argmax(model.loss(data['X_test']),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_val_pred,numpy.argmax(model.loss(data['X_val']),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
a,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
a,"numpy.linspace(0.7,0.5,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
matrixPD,pandas.DataFrame(data=np.matlib.zeros((len(userToTree),CLUSTER_5,CLUSTER_9,CLUSTER_9,CLUSTER_9,CLUSTER_0
csv_data,pandas.read_csv('trade_new.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_9,CLUSTER_9,CLUSTER_0
finshDeque,collections.deque(),CLUSTER_5,CLUSTER_9,CLUSTER_9,CLUSTER_9,CLUSTER_0
waitingDeque,collections.deque(),CLUSTER_5,CLUSTER_9,CLUSTER_9,CLUSTER_9,CLUSTER_0
f,numpy.cos(t),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
t,"numpy.linspace(0,10,51)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
filenames,os.listdir(dirpath),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
filenames,os.listdir(dirpath),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
dtobj,"datetime.datetime.strptime(dtstr,""%Y-%m-%d_%H-%M-%S"")",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
dtobj,"datetime.datetime.strptime(dtstr,""%Y-%m-%d_%H-%M-%S"")",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
utc,datetime.datetime.utcfromtimestamp(mtime),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
utc,datetime.datetime.utcfromtimestamp(0.0),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
dt,datetime.datetime.utcfromtimestamp(t),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(d,dtype={'ctime':'float64','data':'object'})",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
x,random.randrange(self.width),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,random.randrange(self.height),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,random.randrange(self.width),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,random.randrange(self.height),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,random.randrange(self.width),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,random.randrange(self.height),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,random.randrange(self.width),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,random.randrange(self.height),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,random.randrange(self.width),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,random.randrange(self.height),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
rewards,"numpy.array([reward_mean_mb,reward_mean_dual,reward_mean_mf])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
times,"numpy.array([times_mean_mb,times_mean_dual,times_mean_mf])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
steps,"numpy.array([steps_mean_mb,steps_mean_dual,steps_mean_mf])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
environment,"numpy.zeros((2,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mb_heat_env,numpy.zeros((numpy.shape(mb_internal_environment),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mf_heat_env,numpy.zeros((numpy.shape(mb_internal_environment),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
map_heat,numpy.zeros((numpy.shape(mb_internal_environment),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mb_internal_environment,"numpy.zeros((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
stay_percentage,"numpy.zeros((trials,len(change_list)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mb_internal_environment,"numpy.zeros((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mb_internal_environment,"numpy.zeros((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
environment,"numpy.zeros((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mb_internal_environment,"numpy.zeros((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
environment,"numpy.zeros((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
mb_internal_environment,"numpy.zeros((10,10)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
environment,"numpy.ones((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
environment,"numpy.ones((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
environment,"numpy.ones((7,7)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
cumm_sum,numpy.cumsum(softmax_scores),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
average_value,numpy.mean(numpy.array(value_list),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
stay_percentage[i][k],numpy.mean(dual_result[4]),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
reward_mean_dual,numpy.mean(numpy.array(reward_dual),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
reward_mean_mb,numpy.mean(numpy.array(reward_mb),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
reward_mean_mf,numpy.mean(numpy.array(reward_mf),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
times_mean_dual,numpy.mean(numpy.array(times_dual),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
times_mean_mb,numpy.mean(numpy.array(times_mb),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
times_mean_mf,numpy.mean(numpy.array(times_mf),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
steps_mean_dual,numpy.mean(steps_dual),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
steps_mean_mb,numpy.mean(steps_mb),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
steps_mean_mf,numpy.mean(steps_mf),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_pos,"numpy.add(pos,numpy.array(i)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_pos,"numpy.add(pos,action)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_pos,"numpy.add(pos,random.choice(get_legal_actions(pos)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
next_pos,numpy.add(numpy.array(pos),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
next_pos,numpy.add(numpy.array(pos),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
next_pos,numpy.add(numpy.array(pos),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
scoreMatExp,numpy.exp(numpy.asarray(values),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
stay_percentage_mean,"numpy.nanmean(stay_percentage,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
goal_start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
response_time_start,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
response_time_end,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
response_time_start,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
response_time_end,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
goal_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
goal_start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
goal_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
goal_start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
goal_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
start_time,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"mb_line,",matplotlib.pyplot.plot(numpy.arange(iterations),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"mf_line,",matplotlib.pyplot.plot(numpy.arange(iterations),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"reward_line,",matplotlib.pyplot.plot(numpy.arange(iterations),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
timeperrewardmb_plot,"matplotlib.pyplot.plot(numpy.arange(0,50)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
timeperrewardmf_plot,"matplotlib.pyplot.plot(numpy.arange(0,50)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
timeperrewarddual_plot,"matplotlib.pyplot.plot(numpy.arange(0,50)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"stepsmf_plot,","matplotlib.pyplot.plot(numpy.arange(0,50)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"stepsdual_plot,","matplotlib.pyplot.plot(numpy.arange(0,50)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"stepsmb_plot,","matplotlib.pyplot.plot(numpy.arange(0,50)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
"reward_plot,","matplotlib.pyplot.plot(numpy.arange(0,3)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_11
merge,"pandas.merge(persons_advertised,a,on='person',how='left')",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
events,"pandas.read_csv('events.csv',low_memory=False)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
events['timestamp'],"pandas.to_datetime(events['timestamp'],errors='coerce',format='%Y-%m-%d')",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=campaigns_sources.event,y=campaigns_sources.campaign_source[:10],palette=sns.color_palette(""husl"",8)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=ads_compra.event,y=ads_compra.ads_marca)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"sns.barplot(x=campaigns_sources.event,y=campaigns_sources.campaign_source[:10],palette=seaborn.color_palette(""husl"",8)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
ratio,numpy.where(grid.mask&acc.astype(bool),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"hist,bin_edges",numpy.histogram(dists[mask].ravel(),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar0,"matplotlib.pyplot.colorbar(im0,ax=ax[0])",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,"matplotlib.pyplot.colorbar(im1,ax=ax[1])",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(12.7,4.8)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(boston_data.data,columns=boston_data.feature_names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,"pandas.DataFrame(ada.feature_importances_,df.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,"pandas.DataFrame(forest.feature_importances_,df.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,"pandas.DataFrame(tree.feature_importances_,df.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston_data,sklearn.datasets.load_boston(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,sklearn.tree.DecisionTreeRegressor(max_depth=5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,sklearn.tree.DecisionTreeRegressor(max_depth=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,sklearn.tree.DecisionTreeRegressor(max_depth=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,
test_size=0.3,
random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest,"sklearn.ensemble.RandomForestRegressor(n_estimators=500,criterion='mse',
random_state=42,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ada,sklearn.ensemble.AdaBoostRegressor(DecisionTreeRegressor(max_depth=4),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(10,3)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(15,4)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
line,"numpy.linspace(-3,3,1000)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(cancer.data,cancer.target,stratify=cancer.target,random_state=66)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n_neighbors),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n_neighbors),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
reg,sklearn.neighbors.KNeighborsRegressor(n_neighbors=3),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
reg,sklearn.neighbors.KNeighborsRegressor(n_neighbors=n_neighbors),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
features,numpy.array(hfile.get('features'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
labels,numpy.array(hfile.get('labels'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
features,numpy.array(hfile.get('features'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
labels,numpy.array(hfile.get('labels'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
acc,numpy.average(y_hat==y_validation),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(
C=1.0/reg,
multi_class='multinomial',
solver='lbfgs',
random_state=1)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_validation,y_train,y_validation","sklearn.model_selection.train_test_split(features,labels,
test_size=0.1,
shuffle=True,
stratify=labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_validation,y_train,y_validation","sklearn.model_selection.train_test_split(features,labels,
test_size=0.1,
shuffle=True,
stratify=labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rundata,pandas.DataFrame(metricslist),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
zeros,numpy.zeros(int((1.0-prob_bug),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ones,numpy.ones(int(prob_bug*10),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
vals,"numpy.append(ones,zeros)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'first_draw':first_draws,
'second_draw':second_draws})",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
islansX,numpy.array(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
myIslands,"numpy.array([200,400,500,1000,1300,1800,2000,2400,2800,3500,4000,4900])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
agg_data,"pandas.DataFrame(columns=['curation_task_id','customer_id_x','resolution','started_at',
'product_id','attribute_name','attribute_id','Total_NAs',
'curation_tasks_count','customer_id_y','bucket_name','product_name',
'active','external_id','image_url','family_friendly'])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
agg_data,"pandas.merge(temp_na,temp_products,on='product_id')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
active_client,"pandas.read_sql(active_client_query,conn)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
rel_client,"pandas.read_sql(rel_query,conn)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
grp,"pandas.DataFrame(target.groupby(['group_id','surface'])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df,pandas.DataFrame(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
full,"pandas.concat([tt_treino,tt_teste])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
treino,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/X_treino.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
teste,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/X_teste.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
target,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/y_treino.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
sub,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/sample_submission.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
tt_treino,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/X_treino.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
tt_teste,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/X_teste.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
tt_y_treino,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/y_treino.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
ss,pandas.read_csv('../input/competicao-dsa-machine-learning-sep-2019/sample_submission.csv'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,numpy.array(x),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,numpy.array(x),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,numpy.array(x),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
previsao,"numpy.zeros((teste.shape[0],9)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
real,numpy.zeros((treino.shape[0]),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
closest_i,numpy.argmin(dist_list),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
closest_rev,numpy.argmin(dist_list),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
tmp,"numpy.argmin(sq_dist(data[i,-1,:4],data[:,0,:4])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
closest_i,numpy.argsort(dist_list),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
closest_rev,numpy.argsort(dist_list),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
tmp,"numpy.argsort(sq_dist(data[i,-1,:4],data[:,0,:4])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,numpy.sort(x),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
ans,numpy.heaviside((xn-xn_i1),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,"numpy.append(x[-1],x)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,"numpy.append(x,x[1])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,"numpy.append(x[-1],x)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,"numpy.append(x,x[1])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,"numpy.append(x[-1],x)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,"numpy.append(x,x[1])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
grafico,"seaborn.heatmap(piv,linewidths=.1,linecolor='black',annot=True,cmap=""YlGnBu"")",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
Y,math.asin(t2),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
X,"math.atan2(t0,t1)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
Z,"math.atan2(t3,t4)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
folds,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=2019)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,n_jobs=-1)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(26,8)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(a,b,figsize=(17,9)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(a,b,figsize=(16,24)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
cat_list,"pandas.get_dummies(hr[var],prefix=var)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
hr,pandas.read_csv('data/employee_data.csv'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0,
stratify=y)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
estimator,"sklearn.tree.DecisionTreeClassifier(random_state=0,
criterion=crit,
splitter=split,
max_depth=depth,
min_samples_split=min_split,
min_samples_leaf=min_leaf)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
dt,"sklearn.tree.DecisionTreeClassifier(class_weight=None,criterion='gini',max_depth=2,
max_features=None,max_leaf_nodes=None,
min_impurity_decrease=0.0,min_impurity_split=None,
min_samples_leaf=1,min_samples_split=2,
min_weight_fraction_leaf=0.0,presort=False,random_state=0,
splitter='best')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
estimator,"sklearn.ensemble.RandomForestClassifier(random_state=1,
criterion=crit,
bootstrap=bootstrap,
n_estimators=forests,
max_depth=depth,
min_samples_split=min_split,
min_samples_leaf=min_leaf,
n_jobs=-1,
verbose=False)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(bootstrap='True',class_weight=None,criterion='gini',
max_depth=3,max_features='auto',max_leaf_nodes=None,
min_impurity_decrease=0.0,min_impurity_split=None,
min_samples_leaf=1,min_samples_split=2,
min_weight_fraction_leaf=0.0,n_estimators=100,n_jobs=-1,
oob_score=False,random_state=1,verbose=False,
warm_start=False)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
logit,"sklearn.linear_model.LogisticRegressionCV(random_state=1,n_jobs=-1,max_iter=500,
cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
force.index,pandas.DatetimeIndex(dates),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dates,pandas.read_pickle('/Volumes/data/Theo/projects/Budyko_vic/timecode.pcl'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
files,pandas.read_pickle('/Volumes/data/Theo/projects/Budyko_vic/forcing_fluxes_filenames_lat_lon_index.df'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dates,pandas.read_pickle('/Volumes/data/Theo/projects/Budyko_vic/timecode.pcl'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
files,pandas.read_pickle('./forcing_fluxes_filenames_lat_lon_index.df'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
force,"pandas.read_table(fr,sep='',names=forcing_columns)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
titanic,pandas.read_csv('train.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
mask,numpy.zeros_like(train.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,numpy.zeros_like(train.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask2,numpy.zeros_like(train[selected_feats].corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_nulls,pandas.DataFrame(data=train.isnull(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_nulls,pandas.DataFrame(data=test.isnull(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
num_corr,pandas.DataFrame(train.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_metrics,"pandas.DataFrame(data=[lr_score_train,
lr_score_test,
lr_rmse_train,
lr_rmse_test],

index=[""R\u00b2Score(Train)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_metrics,"pandas.DataFrame(data=[ridge_score_train,
ridge_score_test,
ridge_rmse_train,
ridge_rmse_test],

index=['R\u00b2Score(Train)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_metrics,"pandas.DataFrame(data=[lasso_score_train,
lasso_score_test,
lasso_rmse_train,
lasso_rmse_test],

index=['R\u00b2Score(Train)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_coefs,"pandas.DataFrame({'Features':X_train.columns,'Coefficient':optimised_lasso.coef_})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kaggle_submission,"pandas.DataFrame({'Id':test['Id'].values,
'SalePrice':kaggle_predictions})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_mszoning,"pandas.concat([outliers_mszoning_rl,
outliers_mszoning_rm])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_neighborhood,"pandas.concat([outliers_neighborhood_edwards,
outliers_neighborhood_gilbert,
outliers_neighborhood_names])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_condition2,pandas.concat([outliers_condition2_normal]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_masvnrtype,"pandas.concat([outliers_masvnrtype_brkface,
outliers_masvnrtype_none])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_kitchenqual,"pandas.concat([outliers_kitchenqual_gd,
outliers_kitchenqual_ta])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_salecondition,"pandas.concat([outliers_salecondition_abnorml,
outliers_salecondition_normal])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_overallqual,"pandas.concat([outliers_overallqual_4,
outliers_overallqual_7])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_garagecars,"pandas.concat([outliers_garagecars_1,
outliers_garagecars_2])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_fullbath,"pandas.concat([outliers_fullbath_0,
outliers_fullbath_1,
outliers_fullbath_2])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_totrmsabvgrd,"pandas.concat([outliers_totrmsabvgrd_5,
outliers_totrmsabvgrd_6,
outliers_totrmsabvgrd_7,
outliers_totrmsabvgrd_8])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outliers_cat,"pandas.concat([outliers_mszoning,
outliers_neighborhood,
outliers_condition2,
outliers_masvnrtype,
outliers_exterqual,
outliers_bsmtqual,
outliers_centralair,
outliers_kitchenqual,
outliers_saletype,
outliers_salecondition,
outliers_overallqual,
outliers_garagecars,
outliers_totrmsabvgrd,
outliers_fullbath])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combined_encoded,"pandas.get_dummies(pd.concat([train_ord_encoded,test_ord_encoded],keys=['Train','Test'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('./datasets/train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('./datasets/test.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,6)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=4,ncols=3,figsize=(13,13)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=rows,ncols=cols,figsize=(cols*4,rows*3)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,seaborn.heatmap(train.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=708)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_score_train,"sklearn.model_selection.cross_val_score(lr,X_train_sc,y_train,cv=kf_lr)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_score_test,"sklearn.model_selection.cross_val_score(lr,X_test_sc,y_test,cv=kf_lr)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_score_train,"sklearn.model_selection.cross_val_score(optimised_ridge,X_train_sc,y_train,cv=kf_ridge)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_score_test,"sklearn.model_selection.cross_val_score(optimised_ridge,X_test_sc,y_test,cv=kf_ridge)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_score_train,"sklearn.model_selection.cross_val_score(optimised_lasso,X_train_sc,y_train,cv=kf_lasso)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_score_test,"sklearn.model_selection.cross_val_score(optimised_lasso,X_test_sc,y_test,cv=kf_lasso)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf_lr,"sklearn.model_selection.KFold(n_splits=5,
shuffle=True,
random_state=708)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf_ridge,"sklearn.model_selection.KFold(n_splits=5,
shuffle=True,
random_state=708)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf_lasso,"sklearn.model_selection.KFold(n_splits=5,
shuffle=True,
random_state=708)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,sklearn.linear_model.RidgeCV(cv=kf_ridge),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
optimised_ridge,sklearn.linear_model.Ridge(alpha=optimal_alpha_ridge),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.linear_model.LassoCV(cv=kf_lasso),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
optimised_lasso,sklearn.linear_model.Lasso(alpha=optimal_alpha_lasso),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_rmse_train,"sklearn.metrics.mean_squared_error(y_true=y_train,y_pred=lr.predict(X_train_sc)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_rmse_test,"sklearn.metrics.mean_squared_error(y_true=y_test,y_pred=lr.predict(X_test_sc)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_rmse_train,"sklearn.metrics.mean_squared_error(y_true=y_train,y_pred=optimised_ridge.predict(X_train_sc)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_rmse_test,"sklearn.metrics.mean_squared_error(y_true=y_test,y_pred=optimised_ridge.predict(X_test_sc)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_rmse_train,"sklearn.metrics.mean_squared_error(y_true=y_train,y_pred=optimised_lasso.predict(X_train_sc)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_rmse_test,"sklearn.metrics.mean_squared_error(y_true=y_test,y_pred=optimised_lasso.predict(X_test_sc)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
t0,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ca_zips,pandas.read_pickle('../data/interim/ca-zip-w-city-ts.pickle'),CLUSTER_8,CLUSTER_3,CLUSTER_9,CLUSTER_9,CLUSTER_0
fig,"matplotlib.pyplot.figure(1,figsize=(20,40)",CLUSTER_8,CLUSTER_3,CLUSTER_9,CLUSTER_9,CLUSTER_0
now,datetime.datetime.now(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
now,datetime.datetime.now(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
now,datetime.datetime.now(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x,"numpy.loadtxt(folder_path+""/""+t+""/iterations"")",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,"numpy.loadtxt(folder_path+""/""+t+""/refinements"")",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.loadtxt(folder_path+""/""+t+""/time"")",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,"numpy.loadtxt(folder_path+""/""+t+""/refinements"")",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
covar_matrix,"numpy.matmul(sample_data.T,sample_data)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_coordinates,"numpy.matmul(vectors,sample_data.T)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cum_var_explained,numpy.cumsum(percentage_var_explained),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_coordinates,"numpy.vstack((new_coordinates,labels)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_data,"numpy.vstack((pca_data.T,labels)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_data,"numpy.vstack((tsne_data.T,labels_1000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_data,"numpy.vstack((tsne_data.T,labels_1000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_data,"numpy.vstack((tsne_data.T,labels_1000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_data,"numpy.vstack((tsne_data.T,labels_1000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe,"pandas.DataFrame(data=new_coordinates,columns=(""1st_principal"",""2nd_principal"",""label"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_df,"pandas.DataFrame(data=pca_data,columns=(""1st_principal"",""2nd_principal"",""label"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_df,"pandas.DataFrame(data=tsne_data,columns=(""Dim_1"",""Dim_2"",""label"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_df,"pandas.DataFrame(data=tsne_data,columns=(""Dim_1"",""Dim_2"",""label"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_df,"pandas.DataFrame(data=tsne_data,columns=(""Dim_1"",""Dim_2"",""label"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne_df,"pandas.DataFrame(data=tsne_data,columns=(""Dim_1"",""Dim_2"",""label"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
d0,pandas.read_csv('./mnist_train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
standardized_data,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"values,vectors","scipy.linalg.eigh(covar_matrix,eigvals=(782,783)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.manifold.TSNE(n_components=2,random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.manifold.TSNE(n_components=2,random_state=0,perplexity=50)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.manifold.TSNE(n_components=2,random_state=0,perplexity=50,n_iter=5000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.manifold.TSNE(n_components=2,random_state=0,perplexity=2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.subplot(111,aspect='equal')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,numpy.array(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
loc,numpy.mean(squared_errors),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
tree_rmse,numpy.sqrt(tree_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
tree_rmse_scores,numpy.sqrt(-scores),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_rmse_scores,numpy.sqrt(-lin_scores),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_rmse,numpy.sqrt(forest_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_rmse_scores,numpy.sqrt(-forest_scores),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
svm_rmse,numpy.sqrt(svm_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
final_rmse,numpy.sqrt(final_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rmse,numpy.sqrt(-negative_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rmse,numpy.sqrt(-negative_mse),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
tick_values,numpy.linspace(prices.min(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cbar,matplotlib.pyplot.colorbar(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
c,"""median_house_value"",cmap=matplotlib.pyplot.get_cmap(""jet"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
c,"""median_house_value"",cmap=matplotlib.pyplot.get_cmap(""jet"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cmap,"matplotlib.pyplot.get_cmap(""jet"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
compare_props,"pandas.DataFrame({
""Overall"":income_cat_proportions(housing)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
housing_tr,"pandas.DataFrame(X,columns=housing_num.columns,
index=housing.index)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
housing_tr,"pandas.DataFrame(X,columns=housing_num.columns,
index=housing_num.index)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
housing_extra_attribs,"pandas.DataFrame(
housing_extra_attribs,
columns=list(housing.columns)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"housing[""income_cat""]","pandas.cut(housing[""median_income""],
bins=[0.,1.5,3.0,4.5,6.,np.inf],
labels=[1,2,3,4,5])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"train_set,test_set","sklearn.model_selection.train_test_split(housing,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"train_set,test_set","sklearn.model_selection.train_test_split(housing,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
imputer,"sklearn.impute.SimpleImputer(strategy=""median"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ordinal_encoder,sklearn.preprocessing.OrdinalEncoder(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cat_encoder,sklearn.preprocessing.OneHotEncoder(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cat_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
attr_adder,"sklearn.preprocessing.FunctionTransformer(add_extra_features,validate=False,
kw_args={""add_bedrooms_per_room"":False})",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
num_pipeline,"sklearn.pipeline.Pipeline([
('imputer',SimpleImputer(strategy=""median"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
old_num_pipeline,"sklearn.pipeline.Pipeline([
('selector',OldDataFrameSelector(num_attribs)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
old_cat_pipeline,"sklearn.pipeline.Pipeline([
('selector',OldDataFrameSelector(cat_attribs)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
full_pipeline_with_predictor,"sklearn.pipeline.Pipeline([
(""preparation"",full_pipeline)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
preparation_and_feature_selection_pipeline,"sklearn.pipeline.Pipeline([
('preparation',full_pipeline)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
prepare_select_and_predict_pipeline,"sklearn.pipeline.Pipeline([
('preparation',full_pipeline)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
full_pipeline,"sklearn.compose.ColumnTransformer([
(""num"",num_pipeline,num_attribs)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
old_full_pipeline,"sklearn.pipeline.FeatureUnion(transformer_list=[
(""num_pipeline"",old_num_pipeline)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
tree_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
svm_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
final_mse,"sklearn.metrics.mean_squared_error(y_test,final_predictions)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_mae,"sklearn.metrics.mean_absolute_error(housing_labels,housing_predictions)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
tree_reg,sklearn.tree.DecisionTreeRegressor(random_state=42),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(tree_reg,housing_prepared,housing_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_scores,"sklearn.model_selection.cross_val_score(lin_reg,housing_prepared,housing_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_scores,"sklearn.model_selection.cross_val_score(forest_reg,housing_prepared,housing_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(lin_reg,housing_prepared,housing_labels,scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_reg,"sklearn.ensemble.RandomForestRegressor(n_estimators=10,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_reg,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
forest_reg,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
svm_reg,"sklearn.svm.SVR(kernel=""linear"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
svm_reg,sklearn.svm.SVR(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
svm_reg,sklearn.svm.SVR(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(forest_reg,param_grid,cv=5,
scoring='neg_mean_squared_error',return_train_score=True)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(svm_reg,param_grid,cv=5,scoring='neg_mean_squared_error',verbose=2,n_jobs=4)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
grid_search_prep,"sklearn.model_selection.GridSearchCV(prepare_select_and_predict_pipeline,param_grid,cv=5,
scoring='neg_mean_squared_error',verbose=2,n_jobs=4)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rnd_search,"sklearn.model_selection.RandomizedSearchCV(forest_reg,param_distributions=param_distribs,
n_iter=10,cv=5,scoring='neg_mean_squared_error',random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rnd_search,"sklearn.model_selection.RandomizedSearchCV(svm_reg,param_distributions=param_distribs,
n_iter=50,cv=5,scoring='neg_mean_squared_error',
verbose=2,n_jobs=4,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scale,scipy.stats.sem(squared_errors),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
geom_distrib,scipy.stats.geom(0.5),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
expon_distrib,scipy.stats.expon(scale=1),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
expon_distrib,scipy.stats.expon(scale=1.),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
reciprocal_distrib,"scipy.stats.reciprocal(20,200000)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
sampled_token_index,"numpy.argmax(output_tokens[:,-1,:],axis=-1)",CLUSTER_16,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_4
data,"pandas.read_csv(
path_to_file,sep='\t',header=None,names=['english','spanish'])",CLUSTER_16,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_4
splits,"sklearn.model_selection.train_test_split(
input_tensor,target_tensor,test_size=TEST_PROP,random_state=SEED)",CLUSTER_16,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_4
z,"numpy.arange(-10,10,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(10**10,10**11,10**9)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-10,10,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-10,10,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sig,numpy.diff(sigmoid(z),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.hist(word_occurrences,bins=50)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(2,1,figsize=(12,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ts[3000:3100],"numpy.sin(np.arange(3000,3100)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
boo,numpy.ndarray.tolist(boo),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
namelist,numpy.array(os.listdir(tmp),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
exit,numpy.array([pforpinresifp!=True]),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
simdata,"numpy.array([[0.01,0.0145,0.0109],[0.03,0.0368,0.0291],[0.05,0.083695,0.0476],[0.1,0.1589,0.0909],[1,0.6365,0.5],[100,0.997,0.99]])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
st,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
predicted_labels,numpy.asarray(predicted_labels),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
distance_matrix,numpy.matrix(helper.find_distance_matrix(unique_rows),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
importances,"pandas.Series(model.feature_importances_,X_train_encoded.columns)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
table,"pandas.crosstab(assembly_component_types['tube_assembly_id'],
assembly_component_types['component_type_id'])",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
components,pandas.read_csv(SOURCE+'components.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
materials,pandas.read_csv(SOURCE+'bill_of_materials.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
components,pandas.read_csv(SOURCE+'components.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(path),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
comp_threaded,pandas.read_csv(SOURCE+'comp_threaded.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
tube,pandas.read_csv(SOURCE+'tube.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
trainval,pandas.read_csv(SOURCE+'train_set.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv(SOURCE+'test_set.csv'),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X['quote_date'],"pandas.to_datetime(X['quote_date'],infer_datetime_format=True)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_tube_assemblies,val_tube_assemblies","sklearn.model_selection.train_test_split(
trainval_tube_assemblies,random_state=42)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train_log,numpy.log1p(y_train),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_val_log,numpy.log1p(y_val),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
datetimes_full,"pandas.concat((datetimes_10_nov,datetimes_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
targets_full,"pandas.concat((targets_10_nov,targets_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
data_full,"pandas.concat((data_10_nov,data_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
savgol_full,"pandas.concat((lsavgol_10_nov,lsavgol_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
butter_full,"pandas.concat((butterworth_10_nov,butterworth_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
stats_full,"pandas.concat((stats_10_nov,stats_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
savgol_stats_full,"pandas.concat((savgol_stats_10_nov,savgol_stats_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
butter_stats_full,"pandas.concat((butter_stats_10_nov,butter_stats_28_ene)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
start,"pandas.to_datetime(""2018-11-1003:36:10"")",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
end,"pandas.to_datetime(""2018-11-1003:40:37"")",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
start,"pandas.to_datetime(""2019-01-2906:12:04"")",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
end,"pandas.to_datetime(""2019-01-2906:15:37"")",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
rdf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=123)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hist,"matplotlib.pyplot.hist(x,bins=30,normed=True)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(12,4)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.arange(-3,8)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
species,numpy.array([d.decode('ascii'),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
logprobs,numpy.array([model.score_samples(X),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
Z,"numpy.full(land_mask.shape[0],-9999.0)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.classes_,numpy.sort(np.unique(y),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
Z[land_mask],numpy.exp(kde.score_samples(xy),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
result,numpy.exp(logprobs+self.logpriors_),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
xy,numpy.radians(xy[land_mask]),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(-5,10,10)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_d,"numpy.linspace(-4,8,2000)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_d,"numpy.linspace(-4,8,1000)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
levels,"numpy.linspace(0,Z.max()",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
latlon,"numpy.vstack([data.train['ddlat'],
data.train['ddlong']])",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
xy,numpy.vstack([Y.ravel(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(xgrid[::5],ygrid[::5][::-1])",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
kde,"sklearn.neighbors.KernelDensity(bandwidth=1.0,kernel='gaussian')",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
kde,"sklearn.neighbors.KernelDensity(bandwidth=0.03,metric='haversine')",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
grid,sklearn.model_selection.GridSearchCV(KernelDensity(kernel='gaussian'),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
grid,sklearn.model_selection.GridSearchCV(KDEClassifier(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
cv,sklearn.model_selection.LeaveOneOut(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.fetch_species_distributions(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
digits,sklearn.datasets.load_digits(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
circle,"matplotlib.pyplot.Circle((self.x,self.y)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
line,"matplotlib.pyplot.Line2D((neuron1.x-x_adjustment,neuron2.x+x_adjustment)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
angle,math.atan((neuron2.x-neuron1.x),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tick_marks,numpy.arange(len(classes),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
conf_mat_df,"pandas.DataFrame([list(pd.Series([tn,fp,fn,tp])",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_X_train,"pandas.read_csv(""../../../Data/male_patients/starting_ratio_1/X_train.csv"",index_col=0)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_y_train,"pandas.read_csv(""../../../Data/male_patients/starting_ratio_1/y_train.csv"",index_col=0)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_X_val,"pandas.read_csv(""../../../Data/male_patients/X_val.csv"",index_col=0)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_y_val,"pandas.read_csv(""../../../Data/male_patients/y_val.csv"",index_col=0)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
std_patients,"pandas.read_csv('../../../Data/male_patients/standardized_patients.csv',index_col=0)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
actual_score,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
actual_score,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
actual_score,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
actual_score,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val['Class'].values,predictions,pos_label=1)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val['Class'].values,predictions,pos_label=1)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val['Class'].values,predictions,pos_label=1)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val['Class'].values,predictions,pos_label=1)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(df_y_val,predictions)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
conf_mat,"sklearn.metrics.confusion_matrix(df_y_val['Class'].values,predictions)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(i,)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(i,j,)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(best_i_sl,)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(best_i_twol,best_j_twol)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(best_i_sl,)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(best_i_twol,best_j_twol)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df1,pandas.DataFrame(data1),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df2,pandas.DataFrame(data2),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df1,"pandas.concat([df1,g],axis=1)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data1,pandas.read_csv('movielens/movies.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data2,pandas.read_csv('movielens/ratings.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
xs,"numpy.linspace(20,160,100)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
conf_int,"numpy.percentile(sample_means,[5,95])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
weight,"scipy.stats.lognorm(0.23,0,70.8)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
female_weight,"scipy.stats.lognorm(0.23,0,70.8)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
male_weight,"scipy.stats.lognorm(0.20,0,87.3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
clustered,pandas.concat([most_rated_movies_1k.reset_index(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg_ratings,"pandas.concat([user_2_unrated_movies,cluster.mean()",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ratings_title,"pandas.merge(ratings,movies[['movieId','title']],on='movieId')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
user_movie_ratings,"pandas.pivot_table(ratings_title,index='userId',columns='title',values='rating')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
user_movie_ratings,"pandas.pivot_table(ratings_title,index='userId',columns='title',values='rating')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
movies,pandas.read_csv('ml-latest-small/movies.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ratings,pandas.read_csv('ml-latest-small/ratings.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,6)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xticks,numpy.arange(min(possible_k_values),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
yticks,numpy.arange(round(min(errors_per_k),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sparse_ratings,scipy.sparse.csr_matrix(pd.SparseDataFrame(most_rated_movies_1k),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
full,"pandas.read_csv('data/cardio_train.csv',sep=';')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=train.cholesterol.nunique()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=train.gluc.nunique()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=train.smoke.nunique()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(1,3,figsize=(16,6)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train,test","sklearn.model_selection.train_test_split(full,test_size=0.33,random_state=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
originl_data,"pandas.DataFrame(dict([(k,pd.Series(v)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
final_data,"pandas.DataFrame(originl_data.values.T,index=originl_data.columns,columns=col)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df22,pandas.read_csv('paynet_data_deidentified_22.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df23,pandas.read_csv('paynet_data_deidentified_23.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df24,pandas.read_csv('paynet_data_deidentified_24.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df25,pandas.read_csv('paynet_data_deidentified_25.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df26,pandas.read_csv('paynet_data_deidentified_26.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df27,pandas.read_csv('paynet_data_deidentified_27.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df28,pandas.read_csv('paynet_data_deidentified_28.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df29,pandas.read_csv('paynet_data_deidentified_29.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dfff,pandas.read_csv('CalendarYearofeachcompany.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('CalendarYearofeachcompany.csv',index_col=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('PostComputationData.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
index,numpy.arange(len(year_list),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
index,numpy.arange(len(year_list),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(1,10,1000)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
pred_x,"numpy.append(pred_x,12)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
pred_x,"numpy.append(pred_x,14)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(30,30)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xgb_pred,numpy.expm1(model_xgb.predict(X_for_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lgb_pred,numpy.expm1(model_lgb.predict(X_for_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_pred,numpy.expm1(lasso.predict(X_for_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pred4,numpy.expm1(averaged_models.predict(X_for_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df_train[""SalePrice""]","numpy.log1p(df_train[""SalePrice""])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_all[skewed_feats],numpy.log1p(df_all[skewed_feats]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"numpy.sqrt(-cross_val_score(model,X,y,scoring=""neg_mean_squared_error"",cv=cv)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(mean_squared_error(y,y_train_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predictions,"numpy.column_stack([
model.predict(X)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
solution,"pandas.DataFrame({""id"":df_test.Id,""SalePrice"":ensemble})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
solution,"pandas.DataFrame({""id"":df_test.Id,""SalePrice"":pred4})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_all,"pandas.concat((df_train.loc[:,'MSSubClass':'SaleCondition'],df_test.loc[:,'MSSubClass':'SaleCondition'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_all,pandas.get_dummies(df_all),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv('train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('test.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=1111)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=500,max_depth=10,random_state=1234)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
GBoost,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=3000,learning_rate=0.05,
max_depth=4,max_features='sqrt',
min_samples_leaf=15,min_samples_split=10,
loss='huber',random_state=5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
KRR,"sklearn.kernel_ridge.KernelRidge(alpha=0.6,kernel='polynomial',degree=2,coef0=2.5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ENet,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mention_type,numpy.array(mention_features['mention_type']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_position,numpy.array(mention_features['mention_position']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_dist,numpy.array(features[2]['mention_distance']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
s_dist,numpy.array(features[3]['sentence_distance']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
overlap,numpy.array(features[4]['overlap']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
speaker,numpy.array(features[5]['speaker']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
head_match,numpy.array(features[6]['head_match']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_exact_match,numpy.array(features[7]['mention_exact_match']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_partial_match,numpy.array(features[8]['mention_partial_match']),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
d,numpy.zeros((10),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
vec,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
sum,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_contain,"numpy.zeros((1,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_p_w1,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_p_w2,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_n_w1,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_n_w2,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_p_w_a,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_n_w_a,"numpy.zeros((50,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
features,"numpy.concatenate((first_w,last_w,mention_p_w1,mention_p_w2,mention_p_w_a,\
mention_n_w1,mention_n_w2,mention_n_w_a,mention_s_a,mention_length,\
mention_type,mention_position,mention_contain,doc_avg)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
pair_features,"numpy.concatenate((mention_dist,s_dist,overlap,speaker,head_match,\
mention_exact_match,mention_partial_match)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
con,"numpy.concatenate((f_input[0],f_input[1],f_input[2],f_input[3],f_input[4])",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mention_contain,"numpy.ones((1,1)",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
input_dev,numpy.load('/home/vishesh/TUM/Thesis/Coreference-Resolution/data/processed/ffnn_input_dev.npy'),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
output_dev,numpy.load('/home/vishesh/TUM/Thesis/Coreference-Resolution/data/processed/ffnn_output_dev.npy'),CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
sentenceEnders,"re.compile(r""""""

(?:
(?<=[.!?])",CLUSTER_11,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
"c_all,_",model.encoder(i=numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
"x_decod,score",model.decoder(i=numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
"x_decod,score",model.decoder(i=numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
"_,score",model.decoder(i=numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
model(i,numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
log_probs,model(i=numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
model(i,numpy.arange(len(idx_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
model.conditional(i,numpy.array(idx_all[0:1]),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
a,[model.conditional(i=numpy.array(idx_all[0:1]),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
a,[model.conditional(i=numpy.array(idx_all[0:1]),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
scores_sampmodel,[model.conditional(i=numpy.array(idx_all[0:1]),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
cc,numpy.array(cc),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
rank,numpy.array(len(scores_all[0]),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
testdata_numpy,"numpy.fromfile(""examples/mnist/data/binarized_mnist_test.amat"",dtype=np.int16)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
a,numpy.where(M.testlabels==charSamp),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
a,numpy.where(M.testlabels!=charSamp),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
idx_all,numpy.concatenate((idx_sample.reshape(1),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
score_all,numpy.concatenate(score_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
score_all,numpy.concatenate(score_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
score_all,numpy.concatenate(score_all),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
idx_all,numpy.concatenate((idx_sample.reshape(1),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
a,numpy.concatenate([aa.detach(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
idx_all,numpy.concatenate((idx_sample.reshape(1),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
idx_all,numpy.concatenate((idx_sample.reshape(1),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
starttime,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_8
ARTICLE_LIST,pandas.DataFrame(),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
excel,pandas.ExcelWriter('SinMoonGo.xlsx'),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
ARTICLE_LIST,pandas.concat(df_list),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""Datasets/FuelConsumption.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.asanyarray(train[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.asanyarray(train[['CO2EMISSIONS']]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.asanyarray(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.asanyarray(test[['CO2EMISSIONS']]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
positive_counts,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
negative_counts,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
total_counts,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pos_neg_ratios,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
t1,"numpy.arange(0.0,5.0,0.1)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t2,"numpy.arange(0.0,5.0,0.02)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.arange(1,11)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t,"numpy.arange(0.0,5.0,0.01)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.arange(1,11)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.arange(1,11)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
s,numpy.cos(2*np.pi*t),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xvals,"numpy.linspace(1.0,5.0,50)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
yvals,"numpy.linspace(1,100,50)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"(n,bins)","numpy.histogram(v,bins=50,normed=True)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"n,bins,patches","matplotlib.pyplot.hist(x,50,normed=1,facecolor='g',alpha=0.75)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"line,","matplotlib.pyplot.plot(t,s,lw=2)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.where((df[""DE_low""]<=dec)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,"numpy.where((df[""DE_low""]<=dec)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('data/data.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Z,numpy.sin(X**2+Y**2),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Z,numpy.sin(X**2+Y**2),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Z,numpy.sin(X**2+Y**2),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l,"numpy.linspace(0,L+1,L//2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h,"numpy.linspace(0,H+1,H//2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l,"numpy.linspace(0,L+1,L//2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h,"numpy.linspace(0,H+1,H//2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l,"numpy.linspace(0,L+1,L//2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h,"numpy.linspace(0,H+1,H//2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(l,h)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(l,h)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(l,h)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('data/All_swordfish_DST_timeseries_BC_export.txt',sep="","")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['Date'],"pandas.to_datetime(data['PSDate_Time'],format=""%m/%d/%Y%H:%M:%S"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['Date'],pandas.to_datetime(dates),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbar1,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,"pandas.concat([df,res],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ssid_df,"pandas.concat([ssid_df,HF_dummies,Day_dummies],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Day_dummies,"pandas.get_dummies(ssid_df.Day,prefix='Day',drop_first=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
HF_dummies,"pandas.get_dummies(ssid_df.HourFrame,prefix='HF',drop_first=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ssid_df,"pandas.merge(left=ssid_df,right=JPIDL,how='left',left_on='JourneyPatternID',right_on='JourneyPatternID')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,pandas.read_csv('Route_XXXX_travel_time_csvs/Route_084X_travel_time.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('Route_XXXX_travel_time_csvs/Route_%s_travel_time.csv'%r),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
JPIDL,pandas.read_csv('JPID_Length.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
find_lb,pandas.read_csv('use_speed_and_distance_get_outlier_bound.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ssid_df['SchoolHoliday'],"numpy.where(ssid_df['TimeFrame'].isin(['2013-01-01','2013-01-02','2013-01-03','2013-01-04','2013-01-05','2013-01-06'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(dtr.feature_importances_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(abr.feature_importances_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(gbr.feature_importances_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(rfr.feature_importances_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
selector,sklearn.feature_selection.VarianceThreshold(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_mae,"sklearn.metrics.mean_absolute_error(y_train,lr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_mae,"sklearn.metrics.mean_absolute_error(y_test,lr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin_mae,"sklearn.metrics.mean_absolute_error(y_train,svr_lin_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin_mae,"sklearn.metrics.mean_absolute_error(y_test,svr_lin_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin_mae,"sklearn.metrics.mean_absolute_error(y_train,svr_lin_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin_mae,"sklearn.metrics.mean_absolute_error(yn_test,svrn_lin_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly_mae,"sklearn.metrics.mean_absolute_error(y_train,svr_poly_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly_mae,"sklearn.metrics.mean_absolute_error(y_test,svr_poly_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly_mae,"sklearn.metrics.mean_absolute_error(yn_train,svrn_poly_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly_mae,"sklearn.metrics.mean_absolute_error(yn_test,svrn_poly_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf_mae,"sklearn.metrics.mean_absolute_error(y_train,svr_rbf_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf_mae,"sklearn.metrics.mean_absolute_error(y_test,svr_rbf_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf_mae,"sklearn.metrics.mean_absolute_error(yn_train,svrn_rbf_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf_mae,"sklearn.metrics.mean_absolute_error(yn_test,svrn_rbf_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtr_mae,"sklearn.metrics.mean_absolute_error(y_train,dtr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtr_mae,"sklearn.metrics.mean_absolute_error(y_test,dtr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
abr_mae,"sklearn.metrics.mean_absolute_error(y_train,abr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
abr_mae,"sklearn.metrics.mean_absolute_error(y_test,abr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_mae,"sklearn.metrics.mean_absolute_error(y_train,gbr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_mae,"sklearn.metrics.mean_absolute_error(y_test,gbr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_mae,"sklearn.metrics.mean_absolute_error(y_train,rfr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_mae,"sklearn.metrics.mean_absolute_error(y_test,rfr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_mae,"sklearn.metrics.mean_absolute_error(y,rfr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_mdae,"sklearn.metrics.median_absolute_error(y_train,lr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_mdae,"sklearn.metrics.median_absolute_error(y_test,lr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin_mdae,"sklearn.metrics.median_absolute_error(y_train,svr_lin_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin_mdae,"sklearn.metrics.median_absolute_error(y_test,svr_lin_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin_mdae,"sklearn.metrics.median_absolute_error(y_train,svr_lin_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin_mdae,"sklearn.metrics.median_absolute_error(yn_test,svrn_lin_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly_mdae,"sklearn.metrics.median_absolute_error(y_train,svr_poly_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly_mdae,"sklearn.metrics.median_absolute_error(y_test,svr_poly_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly_mdae,"sklearn.metrics.median_absolute_error(yn_train,svrn_poly_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly_mdae,"sklearn.metrics.median_absolute_error(yn_test,svrn_poly_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf_mdae,"sklearn.metrics.median_absolute_error(y_train,svr_rbf_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf_mdae,"sklearn.metrics.median_absolute_error(y_test,svr_rbf_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf_mdae,"sklearn.metrics.median_absolute_error(yn_train,svrn_rbf_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf_mdae,"sklearn.metrics.median_absolute_error(yn_test,svrn_rbf_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtr_mdae,"sklearn.metrics.median_absolute_error(y_train,dtr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtr_mdae,"sklearn.metrics.median_absolute_error(y_test,dtr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
abr_mdae,"sklearn.metrics.median_absolute_error(y_train,abr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
abr_mdae,"sklearn.metrics.median_absolute_error(y_test,abr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_mdae,"sklearn.metrics.median_absolute_error(y_train,gbr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_mdae,"sklearn.metrics.median_absolute_error(y_test,gbr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_mdae,"sklearn.metrics.median_absolute_error(y_train,rfr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_mdae,"sklearn.metrics.median_absolute_error(y_test,rfr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_mdae,"sklearn.metrics.median_absolute_error(y,rfr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_rsq,"sklearn.metrics.r2_score(y_train,lr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_rsq,"sklearn.metrics.r2_score(y_test,lr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin_rsq,"sklearn.metrics.r2_score(y_train,svr_lin_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin_rsq,"sklearn.metrics.r2_score(y_test,svr_lin_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin_rsq,"sklearn.metrics.r2_score(yn_train,svrn_lin_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin_rsq,"sklearn.metrics.r2_score(yn_test,svrn_lin_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly_rsq,"sklearn.metrics.r2_score(y_train,svr_poly_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly_rsq,"sklearn.metrics.r2_score(y_test,svr_poly_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly_rsq,"sklearn.metrics.r2_score(yn_train,svrn_poly_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly_rsq,"sklearn.metrics.r2_score(yn_test,svrn_poly_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf_rsq,"sklearn.metrics.r2_score(y_train,svr_rbf_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf_rsq,"sklearn.metrics.r2_score(y_test,svr_rbf_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf_rsq,"sklearn.metrics.r2_score(yn_train,svrn_rbf_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf_rsq,"sklearn.metrics.r2_score(yn_test,svrn_rbf_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtr_rsq,"sklearn.metrics.r2_score(y_train,dtr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dtr_rsq,"sklearn.metrics.r2_score(y_test,dtr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
abr_rsq,"sklearn.metrics.r2_score(y_train,abr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
abr_rsq,"sklearn.metrics.r2_score(y_test,abr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_rsq,"sklearn.metrics.r2_score(y_train,gbr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_rsq,"sklearn.metrics.r2_score(y_test,gbr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_rsq,"sklearn.metrics.r2_score(y_train,rfr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_rsq,"sklearn.metrics.r2_score(y_test,rfr_preda)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr_rsq,"sklearn.metrics.r2_score(y,rfr_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin,sklearn.svm.SVR(kernel='linear'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_lin,sklearn.svm.SVR(kernel='linear'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly,sklearn.svm.SVR(kernel='poly'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_poly,sklearn.svm.SVR(kernel='poly'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf,sklearn.svm.SVR(kernel='rbf'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svrn_rbf,sklearn.svm.SVR(kernel='rbf'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=38)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"Xn_train,Xn_test,yn_train,yn_test","sklearn.model_selection.train_test_split(X_norm,y_norm,test_size=0.3,random_state=38)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
features,"pandas.concat([df.genres.str.get_dummies(sep=""|"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(path),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['release_date'],pandas.to_datetime(df['release_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
max_abs_scaler,sklearn.preprocessing.MaxAbsScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nn_model,"sklearn.neighbors.NearestNeighbors(n_neighbors=5,algorithm='auto')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.log(ns),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.log(bests),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
window,numpy.hamming(seg_length),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
df_feat,"pandas.DataFrame(scaled_features,columns=data.columns[:-1])",CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('bank_note_data.csv'),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc,sklearn.ensemble.RandomForestClassifier(n_estimators=200),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
affair,pandas.read_csv('../assets/datasets/Fair.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Filter.img,numpy.array(img),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
U,"numpy.zeros((numAp,Filter.imgSize.lin,Filter.imgSize.col)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
C,"numpy.zeros((size.A.lin+central*2,size.A.col+central*2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
D,numpy.zeros(A.shape),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
g,numpy.exp(-(x**2+y**2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
D,numpy.uint8(D),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
value,math.ceil((soma),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
central,math.floor((Filter.kernelSize/2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.asarray(image,dtype='float32')",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.expand_dims(x,axis=0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(""creditcard.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=.5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.IsolationForest(max_samples=len(X_train),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.IsolationForest(contamination=percent_fraud,max_samples=len(X_train)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
A,"numpy.array([[1,2,3],[4,5,6],[7,8,9]])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
npdiff,"numpy.array([0,2,5,9,14])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
ave_inflammation,"numpy.mean(data,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
B,"numpy.hstack([A,A])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
C,"numpy.vstack([A,A])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
data,"numpy.loadtxt(fname='data/inflammation-01.csv',delimiter=',')",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(10.0,3.0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
image,matplotlib.pyplot.imshow(data),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
ave_plot,matplotlib.pyplot.plot(ave_inflammation),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
max_plot,"matplotlib.pyplot.plot(np.max(data,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
min_plot,"matplotlib.pyplot.plot(np.min(data,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'x':X_reduced[:,0],'y':X_reduced[:,1],'label':y_data})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,"pandas.read_csv('UCI_HAR_dataset/train/X_train.txt',delim_whitespace=True,header=None,names=features)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train['subject'],"pandas.read_csv('UCI_HAR_dataset/train/subject_train.txt',header=None,squeeze=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train,"pandas.read_csv('UCI_HAR_dataset/train/y_train.txt',names=['Activity'],squeeze=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,"pandas.read_csv('UCI_HAR_dataset/test/X_test.txt',delim_whitespace=True,header=None,names=features)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test['subject'],"pandas.read_csv('UCI_HAR_dataset/test/subject_test.txt',header=None,squeeze=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_test,"pandas.read_csv('UCI_HAR_dataset/test/y_test.txt',names=['Activity'],squeeze=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
facetgrid,"seaborn.FacetGrid(train,hue='ActivityName',size=6,aspect=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_reduced,"sklearn.manifold.TSNE(verbose=2,perplexity=perplexity)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combined_score_df,pandas.DataFrame({'combined_score':combined_score}),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
passed_df,pandas.DataFrame({'passed':passed}),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('StudentsPerformance.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
temp,pandas.read_csv('http://roycekimmons.com/system/generate_data.php?dataset=exams&n=1000'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,"numpy.arange(start=0,stop=100,step=5)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,numpy.arange(iter),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
features,numpy.zeros((len(numeric_data),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['math_pass'],"numpy.where(data['mathscore']<60,'F','P')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['reading_pass'],"numpy.where(data['readingscore']<60,'F','P')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['writing_pass'],"numpy.where(data['writingscore']<60,'F','P')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,10,1000)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
numeric_data,"numpy.delete(numeric_data,1,1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
numeric_data,"numpy.delete(numeric_data,4,1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
numeric_data,"numpy.delete(numeric_data,4,1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
numeric_data,"numpy.delete(numeric_data,4,1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
numeric_data,"numpy.append(numeric_data,features,1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
p,"seaborn.countplot(y='parentallevelofeducation',data=data,hue='math_pass')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
p,"seaborn.countplot(y='parentallevelofeducation',data=data,hue='reading_pass')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
p,"seaborn.countplot(y='parentallevelofeducation',data=data,hue='writing_pass')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(ncols=3,figsize=(18,12)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(solver='lbfgs'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model2,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tuned,"sklearn.linear_model.LogisticRegression(C=0.10000000000000001,penalty='l1',solver='saga')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=0)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=42)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=0)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(model2,param_grid,cv=5,scoring='accuracy',)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rF,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=6,
random_state=0)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_tuned,"sklearn.ensemble.RandomForestClassifier(n_estimators=400,
min_samples_split=5,
min_samples_leaf=1,
max_features='sqrt',
max_depth=30,
bootstrap=True)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,predictions_test,sample_weight=None)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr2,tpr2,thresholds","sklearn.metrics.roc_curve(y_test,predictions_test,sample_weight=None)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr3,tpr3,thresholds","sklearn.metrics.roc_curve(y_test,predictions_test,sample_weight=None)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr4,tpr4,thresholds","sklearn.metrics.roc_curve(y_test,predictions_test,sample_weight=None)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_random,"sklearn.model_selection.RandomizedSearchCV(estimator=rf,param_distributions=random_grid,n_iter=100,cv=3,verbose=2,random_state=42,n_jobs=-1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=6),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=5),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=6),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=8),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=depth),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
reviews,json.load(f),CLUSTER_27,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
c,collections.Counter(),CLUSTER_27,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
scoreList,numpy.array(scoreList),CLUSTER_27,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
labels,numpy.array(labels),CLUSTER_27,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
likelihood[word][clss],numpy.log(word_count[word]/len(word_list),CLUSTER_27,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
likelihood[word][clss],numpy.log((word_cnt+smoothing),CLUSTER_27,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
Y,numpy.array([1ifi>=7else0foriiny_df]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""./data/winequality-white.csv"",sep=';')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_rf,"sklearn.svm.SVC(kernel='rbf',gamma=0.7,C=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(m,x_train_res,y_train_res,cv=5,scoring='accuracy')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(m,x_train,y_train,cv=5,scoring='accuracy')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_training,X_test,Y_training,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=20)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_val,Y_train,Y_val","sklearn.model_selection.train_test_split(X_training,Y_training,test_size=0.2,random_state=20)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,sklearn.model_selection.KFold(n_splits=5),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(X),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test_under,"pandas.concat([df_class_0_under,df_class_1],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test_over,"pandas.concat([df_class_0,df_class_1_over],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv('train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
conf_mat,"sklearn.metrics.confusion_matrix(y_true=y_test,y_pred=y_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_classification(n_classes=2,class_sep=1.5,weights=[0.9,0.1],n_informative=3,n_redundant=1,flip_y=0,n_features=20,n_clusters_per_class=1,n_samples=100,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Z,"numpy.zeros((m,n_H,n_W,n_C)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.zeros((m,n_H,n_W,n_C)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dA_prev,"numpy.zeros((m,n_H_prev,n_W_prev,n_C_prev)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dW,"numpy.zeros((f,f,n_C_prev,n_C)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
db,"numpy.zeros((1,1,1,n_C)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dA_prev,numpy.zeros(A_prev.shape),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,numpy.ones(shape),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"A[i,h,w,c]",numpy.mean(a_prev_slice),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,numpy.sum(s),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"dA_prev[i,vert_start:vert_end,horiz_start:horiz_end,c]+","numpy.multiply(mask,dA[i,h,w,c])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_pad,"numpy.pad(X,((0,0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axarr","matplotlib.pyplot.subplots(1,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data_batch,"numpy.array(
[get_image(sample_file,width,height,mode)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
losses,numpy.array(losses),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
sample_values,"numpy.array([[0.701*564,0.299*564],[0.0305*409,0.965*409]])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
s,"json.load(open(os.getenv(""PUI2015"")",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('Wine.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X1,X2","numpy.meshgrid(np.arange(start=X_set[:,0].min()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X1,X2","numpy.meshgrid(np.arange(start=X_set[:,0].min()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=123)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lda,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(n_components=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.linear_model.LogisticRegression(random_state=0),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
V_forward_array,numpy.array([vls(t),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
V_reverse_array,numpy.array([vlsr(t),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
v_n,"numpy.array([root(kirchoff,x0=v0,args=(v1[i],v2[i],V[i],jphoto)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
tt,"numpy.linspace(0,1,timesteps,dtype=np.float64)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
q_forward,"scipy.integrate.odeint(param_memdiode,Qstart,tt,args=(vls,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
q_reverse,"scipy.integrate.odeint(param_memdiode,q_forward[timesteps-1],tt,args=(vlsr,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
us_weather,"pandas.DataFrame({
""city"":[""newyork"",""chicago"",""orland""],
""temperature"":[21,14,35],
""humidity"":[68,65,75]
})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
india_weather,"pandas.DataFrame({
""city"":[""tamilnadu"",""mumbai"",""delhi""],
""temperature"":[32,31,28],
""humidity"":[66,64,72]
})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
temperature_df,"pandas.DataFrame({
""city"":[""mumbai"",""delhi"",""banglore""],
""temperature"":[32,31,28]
},index=[0,1,2])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
windspeed_df,"pandas.DataFrame({
""city"":[""delhi"",""mumbai""],
""windspeed"":[21,14]
},index=[1,0])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,"pandas.Series([""Humid"",""Dry"",""Rain""],name=""event"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.concat([india_weather,us_weather],ignore_index=True)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.concat([india_weather,us_weather],keys=[""india"",""us""])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.concat([temperature_df,windspeed_df],axis=1)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.concat([temperature_df,s],axis=1)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
categorical_sample_points,"numpy.arange(0,10)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
tiled_images,"numpy.concatenate(image_rows,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
continuous_sample_points,"numpy.linspace(-1.0,1.0,10)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
start_time,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
start_time,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
start_time,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
conjuntoEscalado,"pandas.DataFrame(conjuntoEscalado,columns=columnas)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resultados,"pandas.DataFrame(columns=[""Transformación"",""SSE"",""MAE"",""MSE"",""RMSE""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoEscalado,pandas.DataFrame(escalador.fit_transform(conjuntoDatos),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoPredicho,"pandas.DataFrame(X_test,columns=columnas[0:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoPredicho,pandas.DataFrame(escalador.inverse_transform(conjuntoPredicho),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoNormal,pandas.DataFrame(escalador.inverse_transform(conjuntoNormal),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
neuronas,"pandas.DataFrame(columns=['Neuronas','ECM'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoPredicho,"pandas.DataFrame(X_test,columns=columnas[0:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoPredicho,pandas.DataFrame(escalador.inverse_transform(conjuntoPredicho),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoNormal,pandas.DataFrame(escalador.inverse_transform(conjuntoNormal),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
neuronas2Capas,"pandas.DataFrame(columns=['Neuronascapa1','Neuronascapa2','ECM'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoPredicho,"pandas.DataFrame(X_test,columns=columnas[0:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoPredicho,pandas.DataFrame(escalador.inverse_transform(conjuntoPredicho),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoNormal,pandas.DataFrame(escalador.inverse_transform(conjuntoNormal),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conjuntoDatos,pandas.read_csv('./Datos/diabetes.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
escalador,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
seleccionVariables,"sklearn.feature_selection.RFECV(estimador,step=1,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimador,"sklearn.linear_model.SGDRegressor(max_iter=1000,tol=1e-3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(modelo.drop(['Y'],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(conjuntoDatos.drop(['Y'],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resultadosValidacion,"sklearn.model_selection.cross_val_score(lm,X_train,y_train,cv=10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resultadosValidacionRn,"sklearn.model_selection.cross_val_score(m,X_train,y_train,cv=10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ECM,"sklearn.metrics.mean_squared_error(conjuntoNormal['Y'],conjuntoPredicho['Y'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ECM,"sklearn.metrics.mean_squared_error(conjuntoNormal['Y'],conjuntoPredicho['Y'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
escalador,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
m,"sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(8,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
m,"sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(numeroNeuronas,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
m,"sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(numeroNeuronasC1,numeroNeuronasC2,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
frm,"pandas.read_csv(""multiTimeline.csv"",header=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xi,numpy.arange(100),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xi,"numpy.array([0,x.max()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
yi,"numpy.array([np.polyval(c,s)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sigma,numpy.std(diff),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.pipeline.Pipeline([('poly',PolynomialFeatures(degree=4)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"|python-c""importjson;importsys;response",json.load(sys.stdin),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.arange(-5,5,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y,"numpy.arange(-5,5,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(X,Y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
batch_rewards,numpy.zeros(num_cpu),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_7
indxes,numpy.squeeze(np.argwhere(done),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_7
total_rewards+,numpy.sum(batch_rewards[indxes]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_7
self.train_stats,collections.defaultdict(list),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_7
levels,numpy.arange(np.min(z),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.n,numpy.array([np.count_nonzero(1+numpy.array(np.where(self.y==self.y[i]),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
In,"numpy.ones((n,n)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"xx1,xx2","numpy.meshgrid(np.arange(x1_min,x1_max,resolution)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
input_data,"pandas.DataFrame(dict({'x':X[:,0],'y':X[:,1],'target':y})",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
feature_data,"pandas.DataFrame(dict({'x':X_transformed[:,0],'y':X_transformed[:,1],'target':y})",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(dict({'x':X[:,0],'y':X[:,1],'target':y})",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
dat,pandas.DataFrame(dat),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
dat,"pandas.DataFrame({'x':X_train_reduced.T[0],'y':X_train_reduced.T[1],'variable':y_train})",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.scale(X),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,"numpy.asarray(X,dtype='float64')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y,"numpy.asarray(Y,dtype='float64')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
newX,"numpy.zeros((X.shape[0],9)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
theta,numpy.dot(numpy.dot(np.linalg.inv(numpy.dot(np.transpose(xTemp),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y_est,"numpy.dot(xTemp,theta)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
newTheta,numpy.dot(numpy.dot(np.linalg.inv(numpy.dot(np.transpose(newX),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
newY_est,"numpy.dot(newX,newTheta)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"m0,c0","numpy.linalg.lstsq(xTemp,Y)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"m1,c1","numpy.linalg.lstsq(xTemp,Y_est)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"m2,c2","numpy.linalg.lstsq(xTemp,newY_est)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax1,"matplotlib.pyplot.subplot(1,3,1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax2,"matplotlib.pyplot.subplot(1,3,2,sharey=ax1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax3,"matplotlib.pyplot.subplot(1,3,3,sharey=ax2)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
TP,numpy.sum(income),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.sum(income),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,numpy.sum(income),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
precision,numpy.sum(income),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
features_log_transformed,pandas.DataFrame(data=features_raw),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
features_log_minmax_transform,pandas.DataFrame(data=features_log_transformed),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
features_final,pandas.get_dummies(features_log_minmax_transform),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""census.csv"")",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features_final,
income,
test_size=0.2,
random_state=0)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
results['f_train'],"sklearn.metrics.fbeta_score(y_train[:300],predictions_train[:300],0.5)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
results['f_test'],"sklearn.metrics.fbeta_score(y_test,predictions_test,0.5)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
results['acc_train'],"sklearn.metrics.accuracy_score(y_train[:300],predictions_train[:300])",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
results['acc_test'],"sklearn.metrics.accuracy_score(y_test,predictions_test)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_C,"sklearn.ensemble.AdaBoostClassifier(n_estimators=50,learning_rate=1,random_state=0)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.AdaBoostClassifier(random_state=0),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.AdaBoostClassifier(random_state=0),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_A,sklearn.naive_bayes.GaussianNB(),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_B,sklearn.tree.DecisionTreeClassifier(random_state=10),CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorer,"sklearn.metrics.make_scorer(fbeta_score,beta=0.5)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_obj,"sklearn.model_selection.GridSearchCV(clf,param_grid=parameters,scoring=scorer)",CLUSTER_3,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cb,"matplotlib.pyplot.colorbar(im,ax=ax1,cax=cax)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
im,matplotlib.pyplot.imshow(np.log10(h2+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
line,"matplotlib.pyplot.plot(epoch,loss,label='Trainingloss')",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
ax1,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,axArray","matplotlib.pyplot.subplots(H,N,figsize=(dim_Largeur,dim_Hauteur)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
XLIM,matplotlib.pyplot.xlim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
XLIM,matplotlib.pyplot.xlim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
YLIM,matplotlib.pyplot.ylim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
YLIM,matplotlib.pyplot.ylim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
epoch,"numpy.arange(hist_Nepoch,dtype=np.int)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
N_filters,numpy.array(convolutions),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_2,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean_2,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_2,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_3,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean_3,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_3,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
bin_true,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
eps_mean,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
eps_std,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
u_mean,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
u_std,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
id_,numpy.where(h_id==i+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
id_,numpy.where(h_id==i+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
id_,numpy.where(h_id==i+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s3,numpy.where((utils.zcen(residual_bins),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s2,numpy.where((utils.zcen(residual_bins),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s1,numpy.where((utils.zcen(residual_bins),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
convolutions,numpy.squeeze(convout1_f(inputLC),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_std,numpy.std(residual),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
loss,numpy.log10(history.all(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
val_loss,numpy.log10(history.all(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std[i],numpy.sqrt(((RESIDUAL[id_]-mean[i]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_2[i],numpy.sqrt(((RESIDUAL[id_]-mean_2[i]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_3[i],numpy.sqrt(((RAND_RESIDUAL[id_]-mean_3[i]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
bin_VALUE_TRUE,"numpy.linspace(pmin,pmax,Nbin)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
bin_VALUE_TRUE,numpy.linspace(VALUE_TRUE.min(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_bins,"numpy.linspace(MIN,MAX,Nbin)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_avg,numpy.average(residual),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
h_id,"numpy.digitize(VALUE_TRUE,xh1)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
h_id,"numpy.digitize(VALUE_PRED,bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
h_id,"numpy.digitize(RAND_TRUE,bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median[i],numpy.median(RESIDUAL[id_]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_2[i],numpy.median(RESIDUAL[id_]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_3[i],numpy.median(RAND_RESIDUAL[id_]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_med,numpy.median(residual),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s3,"numpy.append(x_s3[0]-1,x_s3)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s3,"numpy.append(x_s3,x_s3[-1]+1,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s2,"numpy.append(x_s2[0]-1,x_s2)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s2,"numpy.append(x_s2,x_s2[-1]+1,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s1,"numpy.append(x_s1[0]-1,x_s1)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s1,"numpy.append(x_s1,x_s1[-1]+1,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h2,yh2,xh2","numpy.histogram2d(VALUE_PRED,VALUE_TRUE,bins=[bin_VALUE_TRUE,bin_VALUE_TRUE])",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
history,numpy.load(history_file),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h1,xh1","numpy.histogram(VALUE_TRUE,bins=bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_weight,xh_weight","numpy.histogram(VALUE_TRUE,bins=bin_VALUE_TRUE,weights=RESIDUAL)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h3,xh3","numpy.histogram(VALUE_PRED,bins=bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_weight,xh_weight","numpy.histogram(VALUE_PRED,bins=bin_VALUE_TRUE,weights=RESIDUAL)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h4,xh4","numpy.histogram(RAND_TRUE,bins=bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_weight,xh_weight","numpy.histogram(RAND_TRUE,bins=bin_VALUE_TRUE,weights=RAND_RESIDUAL)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_residual,x_h","numpy.histogram(residual,bins=residual_bins)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
movement,numpy.loadtxt(realign_file),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
plot_realign_parameters,matplotlib.pyplot.tight_layout(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
b,numpy.zeros(Nx*Ny),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,numpy.zeros(Nx*Ny),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ys,"numpy.linalg.solve(A,b)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
book_ratings,"pandas.merge(users_with_ratings_above_200,books,on='ISBN')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
ratings,"pandas.read_csv(r'Data/BX-Book-Ratings.csv',encoding='latin-1')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
books,"pandas.read_csv(r'Data/BX-Books.csv',error_bad_lines=False,encoding='latin-1')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
users,"pandas.read_csv(r'Data/BX-Users.csv',sep=';',encoding='latin-1')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
popular_books_matrix,scipy.sparse.csr_matrix(popular_books.values),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
model_knn,"sklearn.neighbors.NearestNeighbors(metric='cosine',algorithm='brute')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sns.set(context,"""notebook"",style=""white"",palette=seaborn.color_palette(""RdBu"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Xdata,"numpy.concatenate((X,Xval)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
argmax_fs,numpy.argmax(fs),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
argmax_fs,numpy.argmax(fs),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
epsilon,numpy.linspace(np.min(pval),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
epsilon,numpy.linspace(np.min(pval),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cov,numpy.cov(X.T),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cov,numpy.cov(X.T),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cov,numpy.cov(X.T),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cov,numpy.cov(Xdata.T),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pos,"numpy.dstack((x,y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pos,"numpy.dstack((x,y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(X,columns=['Latency','Throughput'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(X,columns=['Latency','Throughput'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(Xtest,columns=['Latency','Throughput'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mat,scipy.io.loadmat('./data/ex8data1.mat'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mat,scipy.io.loadmat('./data/ex8data2.mat'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
multi_normal,"scipy.stats.multivariate_normal(mu,cov)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
multi_normal,"scipy.stats.multivariate_normal(mu,cov)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
multi_normal,"scipy.stats.multivariate_normal(mu,cov)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
multi_normal,"scipy.stats.multivariate_normal(mu,cov)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sim[i],"numpy.inner(vec[i],vote.transpose()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
vec,"numpy.ones((1004,3026)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sim,"numpy.ones((1004,)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sim,"numpy.ones((1004,)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
M,numpy.argmax(sim),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,"pandas.concat((X,X_dummy)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,"pandas.concat((X,X_dummy)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,"pandas.concat((X,X_dummy)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
trainset,"pandas.read_csv(""IMDBMovieData.csv"",encoding='latin-1')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
trainset,"pandas.read_csv(""IMDBMovieData.csv"",encoding='latin-1')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
header,"pandas.read_csv(""testing.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
trainset,"pandas.read_csv(""IMDBMovieData.csv"",encoding='latin-1')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""testing.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
trainset,"pandas.read_csv(""IMDBMovieData.csv"",encoding='latin-1')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
s1w,"re.findall('\w+',s1.lower()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
s2w,"re.findall('\w+',s2.lower()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
tab,"pandas.read_csv('../../data/heston_dor.csv',sep=',')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,numpy.zeros(5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,numpy.zeros(5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features_dataset,labels_dataset,test_size=0.15,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scale1,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
arr1,numpy.asarray(arr1),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
arr2,numpy.asarray(arr2),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,numpy.full(len(news_A_clean['class']),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
news_A,"pandas.read_csv(data_path,delimiter=',')",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
news_B,"pandas.read_csv(data_path,delimiter=',')",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cfsmt,"sklearn.metrics.confusion_matrix(y,mnb.predict(X)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cfsmt,"sklearn.metrics.confusion_matrix(y3,mnb.predict(X3)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cfsmt,"sklearn.metrics.confusion_matrix(y3,rf_prediction)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cfsmt,"sklearn.metrics.confusion_matrix(y3,mnb.predict(X3)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cfsmt,"sklearn.metrics.confusion_matrix(y3,dt.predict(X3)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cfsmt,"sklearn.metrics.confusion_matrix(y3,rf.predict(X3)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"seaborn.heatmap(normie,vmin=0.,vmax=1)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"seaborn.heatmap(normie,vmin=0.,vmax=1)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
c,"seaborn.heatmap(normie,vmin=0.,vmax=1)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.stripplot(news_A['class'],news_A['w31_steve'],jitter=True,alpha=0.5)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnb2,sklearn.naive_bayes.MultinomialNB(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
dt,sklearn.tree.DecisionTreeClassifier(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
dt,sklearn.tree.DecisionTreeClassifier(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(n_estimators=50),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.arange(-3,3,0.05)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.arange(-6,6,0.05)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
path_y,"numpy.arange(-6,6,0.05)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
path_x,numpy.zeros(path_y.size),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"x,y","numpy.meshgrid(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"path_x,path_y","numpy.meshgrid(path_x,path_y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
all_company_names,pandas.concat([registry['company_name'].dropna(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
indptr,"numpy.zeros(M+1,dtype=idx_dtype)",CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
indices,"numpy.zeros(nnz_max,dtype=idx_dtype)",CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"numpy.zeros(nnz_max,dtype=A.dtype)",CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
similairity,numpy.zeros(nr_matches),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
left_side,"numpy.empty([nr_matches],dtype=object)",CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
right_side,"numpy.empty([nr_matches],dtype=object)",CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
string,"re.sub(r'[,-./]|\sBD',r'',string)",CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"w,b,X,Y","numpy.array([[1.],[2.]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
w,"numpy.array([[0.1124579],[0.23106775]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
X,"numpy.array([[1.,-1.1,-3.2],[1.2,2.,0.1]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
Y_prediction,"numpy.zeros((1,m)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
cost,numpy.squeeze(cost),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
costs,numpy.squeeze(d['costs']),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
legend,"matplotlib.pyplot.legend(loc='uppercenter',shadow=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
x,numpy.cos(u),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,numpy.cos(v),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.sin(u),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
u,"numpy.linspace(0,2*np.pi,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0,np.pi,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
verbs_class,"pandas.merge(vt,bun_verbs,on=u""動詞"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
bun_verbs,"pandas.read_csv(u""D:/研究/データ/bunruidb/bunruidb.txt"",encoding='shift-jis',header=None)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
verb_thesaurus,"pandas.read_csv(u""D:/vthesaurus_ver3.csv"",encoding=""utf-8"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
log_price,numpy.log(data_cleaned['Price']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_with_dummies,"pandas.get_dummies(data_no_multicollinearity,drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
raw_data,pandas.read_csv('1.04.Real-lifeexample.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,sharey=True,figsize=(15,3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,sharey=True,figsize=(15,3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ifnp.argmax(result),=numpy.argmax(Y_validate[x]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
Y,pandas.get_dummies(data['sentiment']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('data/imdb_master.csv',header=0,names=['id','split','review','sentiment','file'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.4,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
X_df,pandas.DataFrame(X_speech.toarray(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
X_df,pandas.DataFrame(X_speech.toarray(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
Eng_df,pandas.DataFrame(fin_speech.toarray(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
Eng_df,pandas.DataFrame(fin_speech.toarray(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
horizontal_stack,"pandas.concat([X_df,df_v2],axis=1)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
horizontal_stack,"pandas.concat([X_df,df_v2],axis=1)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
horizontal_stack,"pandas.concat([Eng_df,fin_df],axis=1)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
horizontal_stack,"pandas.concat([Eng_df,fin_df],axis=1)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
confusion_matrix,"pandas.crosstab(y_test,y_predicted1,rownames=['Actual'],colnames=['Predicted'],margins=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
confusion_matrix,"pandas.crosstab(y_test,y_predicted,rownames=['Actual'],colnames=['Predicted'],margins=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
confusion_matrix,"pandas.crosstab(y_test,y_predicted1,rownames=['Actual'],colnames=['Predicted'],margins=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
confusion_matrix,"pandas.crosstab(y_test,y_predicted,rownames=['Actual'],colnames=['Predicted'],margins=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
confusion_matrix,"pandas.crosstab(y_test,y_predicted,rownames=['Actual'],colnames=['Predicted'],margins=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_merge,"pandas.merge(df,df_eng,on=""Speech"")",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
data,pandas.read_csv('/content/text_vid.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_eng,pandas.read_csv('/content/text_trans.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
letters_only,"re.sub(""[^a-zA-Z]"","""",tags_rem)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
letters_only,"re.sub(""[^a-zA-Z]"","""",tags_rem)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
log_reg,sklearn.linear_model.LogisticRegression(max_iter=100000000),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
log_reg,sklearn.linear_model.LogisticRegression(max_iter=100000000),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
log_reg,sklearn.linear_model.LogisticRegression(max_iter=100000000),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
log_reg,sklearn.linear_model.LogisticRegression(max_iter=100000000),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(random_state=0),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(random_state=0),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,
bootstrap=True,
max_features='sqrt')",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
model,"sklearn.ensemble.RandomForestClassifier(bootstrap=True,
max_features='sqrt',n_estimators=160,max_depth=8,min_samples_split=4,min_samples_leaf=7)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
model,"sklearn.ensemble.RandomForestClassifier(bootstrap=True,
max_features='sqrt',n_estimators=160,max_depth=8,min_samples_split=4,min_samples_leaf=7)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
model,"sklearn.ensemble.RandomForestClassifier(bootstrap=True,
max_features='sqrt',n_estimators=160,max_depth=8,min_samples_split=4,min_samples_leaf=7)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
b,collections.Counter(a),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
b,collections.Counter(a),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
b,collections.Counter(a),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
b,collections.Counter(a),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
b,collections.Counter(a),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
b,collections.Counter(a),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
clf,"sklearn.svm.SVC(kernel='linear',probability=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_6,CLUSTER_0
source,requests.get(url),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
toronto,pandas.DataFrame(columns=column_names),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(csv_path),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
j,json.load(f),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
d['time'],datetime.datetime.fromtimestamp(d['time']),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"df3[['control','treatment']]",pandas.get_dummies(df['group']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df5[['CA','US']]",pandas.get_dummies(df5['country']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('ab_data.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df4,pandas.read_csv('countries.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p_diffs,numpy.array(p_diffs),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mcdon,"pandas.read_csv('mcdonalds.csv',index_col='Date',parse_dates=True)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tokens,numpy.asarray([tokens]),CLUSTER_10,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
casing,numpy.asarray([casing]),CLUSTER_10,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
labels,"numpy.expand_dims([labels],-1)",CLUSTER_10,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_10,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
cat,"numpy.zeros([25,13],dtype=dtype)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dtype,"numpy.dtype([('ra',float)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
ngood,numpy.sum(good2),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pndist,numpy.sqrt((df['pmra']-medpmra),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
medpmra,numpy.median(df['pmra'][good1]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
medpmdec,numpy.median(df['pmdec'][good1]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
medplx,numpy.median(df['parallax'][good2]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
test,"numpy.arange(-4,4,0.2)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_regression(n_samples=100,
n_features=1,
noise=20,
random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
TP,numpy.sum(income),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
TP,numpy.sum(income),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
features_log_transformed,pandas.DataFrame(data=features_raw),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
features_log_minmax_transform,pandas.DataFrame(data=features_log_transformed),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results_clf_A,"pandas.DataFrame(results[""RandomForestClassifier""])",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results_clf_B,"pandas.DataFrame(results[""GaussianNB""])",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results_clf_C,"pandas.DataFrame(results[""LogisticRegression""])",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
features_final,pandas.get_dummies(features_log_minmax_transform),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""census.csv"")",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features_final,
income,
test_size=0.2,
random_state=0)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['f_train'],"sklearn.metrics.fbeta_score(y_train[:300],predictions_train,beta)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['f_test'],"sklearn.metrics.fbeta_score(y_test,predictions_test,beta)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['acc_train'],"sklearn.metrics.accuracy_score(y_train[:300],predictions_train)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['acc_test'],"sklearn.metrics.accuracy_score(y_test,predictions_test)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_A,sklearn.ensemble.RandomForestClassifier(random_state=111),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.RandomForestClassifier(random_state=111),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_B,sklearn.naive_bayes.GaussianNB(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_C,sklearn.linear_model.LogisticRegression(random_state=111),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(random_state=111),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
grid_obj,"sklearn.model_selection.GridSearchCV(estimator=clf,param_grid=parameters,scoring=scorer,cv=5)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
scorer,"sklearn.metrics.make_scorer(fbeta_score,beta=0.5)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
yvals,"numpy.arange(250,1000+dyp,dyp)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
zmap,numpy.array(da.values.copy(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pts,"numpy.empty((nmaps,len(yvals)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dd,numpy.where(np.abs(z-zt),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"(nmaps,ysize,xsize)",numpy.shape(da.values),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dmap,"numpy.diff(smap,n=1,axis=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dx,numpy.median(np.diff(x),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(da.coords['Alongshore'],da.coords['Cross-shore'].values)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
md,numpy.nanmin(np.abs(z-zt),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_MHHW,"numpy.nanmean(pts[0:13,:,6],axis=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_3m,"numpy.nanmean(pts[0:13,:,5],axis=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
std_MHHW,"numpy.nanstd(pts[0:13,:,6],axis=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
std_3m,"numpy.nanstd(pts[0:13,:,5],axis=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,7)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,1,figsize=(7,5)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
labels,"numpy.array([1,2,3,0,2,1])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
toss,"random.randint(0,1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
CityID,"pandas.DataFrame(df,columns=['CityID'])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.load_iris(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.GridSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.GridSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.GridSearchCV(MultinomialNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(MultinomialNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(BernoulliNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
res,sklearn.model_selection.RandomizedSearchCV(MultinomialNB(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
data,"sklearn.datasets.fetch_20newsgroups_vectorized(subset='all',remove=('headers','footers','quotes')",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
data,sklearn.datasets.load_wine(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
filenames,os.listdir('data/arabian_nights'),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
filenames,os.listdir('data/arabian_nights'),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
filenames,os.listdir('data/arabian_nights'),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
whitespace,re.compile(r'\s+'),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
cnt,collections.Counter(tokens),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
cnt,collections.Counter(),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(data_path+'taxi_data1.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
Linear,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
GDBT,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
frame_data,matplotlib.pyplot.gcf(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
frame_res,matplotlib.pyplot.gcf(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
frame_data,matplotlib.pyplot.gcf(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
frame_res,matplotlib.pyplot.gcf(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
"Nevt,*_","matplotlib.pyplot.hist2d(X,Y,(XYbins,XYbins)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
lims,matplotlib.pyplot.xlim(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
lims,matplotlib.pyplot.xlim(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
r,requests.get(f_url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(data,columns=['AUTHOR','TEXT','RATING'])",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
current_date,"datetime.datetime.strptime(row[0],""%Y-%m-%d"")",CLUSTER_30,CLUSTER_5,CLUSTER_1,CLUSTER_0,CLUSTER_1
pop_data,json.load(f),CLUSTER_30,CLUSTER_5,CLUSTER_1,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.axes(projection='3d',elev=50,azim=-50)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.axes(projection='3d',elev=50,azim=-50)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(8,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(8,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(func,x0=x0,method='Newton-CG',
jac=True,tol=1e-20,callback=print)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.optimize.minimize(func,x0=x0,method='Newton-CG',
jac=True,tol=1e-20,callback=make_scipy.optimize.minimize_cb(path_)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
X,numpy.array(ct.fit_transform(X),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
dataset,pandas.read_csv('./sample_data/Data.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
imputer,"sklearn.impute.SimpleImputer(missing_values=np.nan,strategy='mean')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
labelencoder_y,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ct,"sklearn.compose.ColumnTransformer([('encoder',OneHotEncoder()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sc_y,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
arr,numpy.arange(25),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.arange(0,10)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.arange(0,11)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.arange(0,11)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.arange(10,81,2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
matarr,"numpy.arange(3,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,numpy.arange(9),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,numpy.arange(25),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
ind,numpy.arange(top_n_predictions),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
table,numpy.array([((i/255.0),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
X_ext,"numpy.empty([0,X.shape[1],X.shape[2],X.shape[3]],dtype=X.dtype)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_ext,"numpy.empty([0],dtype=y.dtype)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
X_extended,"numpy.empty([0,X_train.shape[1],X_train.shape[2],X_train.shape[3]],dtype=X_train.dtype)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_extended,"numpy.empty([0],dtype=y_train.dtype)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
gray_img,"numpy.empty([size,shape[0],shape[1]],dtype=img.dtype)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
same_samples,numpy.where(y_train==i),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
samples_in_class,numpy.bincount(y_train),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
X_train,"numpy.append(X_train,np.array(new_train_data)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_train,"numpy.append(y_train,np.array(new_lable_data)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
X_ext,"numpy.append(X_ext,np.expand_dims(image2,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_ext,"numpy.append(y_ext,np.full((1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
X_ext,"numpy.append(X_ext,np.expand_dims(image3,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_ext,"numpy.append(y_ext,np.full((1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
X_train,"numpy.append(X_train,X_extended,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_train,"numpy.append(y_train,y_extended,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
"classes_names,classes_counts","numpy.unique(y_train,return_counts=True)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
signnames,"numpy.genfromtxt('traffic-signs-data/signnames.csv',dtype=str,delimiter=',',skip_header=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
loss_plot,matplotlib.pyplot.subplot(211),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
acc_plot,matplotlib.pyplot.subplot(212),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
"fig,axies","matplotlib.pyplot.subplots(nrows=n_samples,ncols=2)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
train_sale,pandas.read_csv('data/train_sales_data.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_search,pandas.read_csv('data/train_search_data.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_usr,pandas.read_csv('data/train_user_reply_data.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
triangle,"numpy.array([[(49,h)",CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mask,numpy.zeros_like(img),CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
line_img,numpy.zeros_like(original_img),CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
line_img,numpy.zeros_like(original_img),CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
kernel,"numpy.ones((5,5)",CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
kernel,"numpy.ones((5,5)",CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
left_line_avg,"numpy.mean(left_line,axis=0)",CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
right_line_avg,"numpy.mean(right_line,axis=0)",CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v,numpy.median(image),CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"slope,intercept,r_value,p_value,std_err","scipy.stats.linregress(x,y)",CLUSTER_7,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.graph,collections.defaultdict(set),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
xy,"numpy.loadtxt('../data/data-03-diabetes.csv',delimiter=',',dtype=np.float32)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
tips,seaborn.load_dataset('tips'),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
covid,pandas.read_csv(R'Z:\Ahsan\Downloads\785492_1361825_bundle_archive/covid.csv'),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
test,pandas.read_csv(R'Z:\Ahsan\Downloads\785492_1361825_bundle_archive\test_set.csv'),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
train,pandas.read_csv(R'Z:\Ahsan\Downloads\785492_1361825_bundle_archive\training_set.csv'),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,axs0",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,axs1",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,axs3",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
train3,"numpy.array(train2,np.int32)",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
test2,"numpy.array(test2,np.int32)",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
predictions,numpy.array(predictions),CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
summaryDataFrame,"pandas.DataFrame({""NumberofUniqueItems"":[numberUniqueItems],
""AveragePrice"":[averagePurchaseCost],
""NumberofPurchases"":[totalPurchases],
""TotalRevenue"":[totalRevenue]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
genderSummary,"pandas.DataFrame({
""Gender"":[""Male"",""Female"",""Other/Non-Disclosed""],
""NumberofPlayers"":[malePlayers,femalePlayers,otherPlayers],
""PercentofPlayers"":[malePercent,femalePercent,otherPercent]
})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
genderPurchaseSummary,"pandas.DataFrame({
""Gender"":[""Male"",""Female"",""Other/Non-Disclosed""],
""PurchaseCount"":[malePurchaseCount,femalePurchaseCount,otherPurchaseCount],
""AveragePurchasePrice"":[malePurchaseAveragePrice,femalePurchaseAveragePrice,otherPurchaseAveragePrice],
""TotalPurchaseValue"":[malePurchaseAmount,femalePurchaseAmount,otherPurchaseAmount],
""AvgTotalPurchaseperPerson"":[maleAveragePerPerson,femaleAveragePerPerson,otherAveragePerPerson]
})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ageDataFrame,"pandas.DataFrame({
""Age"":binLabels,
""Count"":ageList,
""Percent"":agePercent
})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"uniqueDataFrame[""AgeGroup""]","pandas.cut(uniqueDataFrame[""Age""],bins,labels=binLabels)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"purchaseData[""AgeGroup""]","pandas.cut(purchaseData[""Age""],bins,labels=binLabels)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
purchaseData,pandas.read_csv(file_to_load),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
score_array,numpy.vstack(scorelist),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig4,"matplotlib.pyplot.figure(figsize=[12,8])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig5,"matplotlib.pyplot.figure(figsize=[15,8])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(pca_lin_est,X_train_pca[:,:use_pcs],y_train,cv=5)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.model_selection.cross_val_score(linreg_est,X_train_k,y_train_sm,cv=kf)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gs_rf,"sklearn.model_selection.GridSearchCV(rf,parameters)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gs_gbr,"sklearn.model_selection.GridSearchCV(gbr,parameters)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_sm,X_valid,y_train_sm,y_valid","sklearn.model_selection.train_test_split(X_train,y_train,test_size=150,random_state=7)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=3,shuffle=True,random_state=7)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fullpca,"sklearn.decomposition.PCA(n_components=0.9,svd_solver='full')",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
simple_est,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_lin_est,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg_est,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg_est,sklearn.linear_model.LinearRegression(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_pca_est,"sklearn.linear_model.Ridge(alpha=best_alpha,fit_intercept=True)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_pca_est,"sklearn.linear_model.RidgeCV(alphas=alphas,fit_intercept=True,cv=5)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_feat_est,"sklearn.linear_model.RidgeCV(alphas=alphas,fit_intercept=True,cv=5)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elnet_est,"sklearn.linear_model.ElasticNetCV(l1_ratio=ratios,alphas=alphas,fit_intercept=True,cv=5)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elnet_est,"sklearn.linear_model.ElasticNet(l1_ratio=best_ratio,alpha=best_alpha,fit_intercept=True)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2train,"sklearn.metrics.r2_score(y_train,y_hat_train)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2test,"sklearn.metrics.r2_score(y_test,y_hat_test)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbr_est,"sklearn.ensemble.GradientBoostingRegressor(max_depth=4,n_estimators=100)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=64,max_features='sqrt',random_state=7)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_est,"sklearn.ensemble.RandomForestRegressor(n_estimators=512,max_features='sqrt',max_depth=7)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"pcc,_","scipy.stats.pearsonr(y_hat,y)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"pcc,_","scipy.stats.pearsonr(y_test,y_hat_test)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('wine_qual_EDA.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
cbar,matplotlib.pyplot.colorbar(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
I_XT_array,"numpy.array(extract_array(data,'local_IXT')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
I_TY_array,"numpy.array(extract_array(data,'local_ITY')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.squeeze(np.array(data_array['informationError']),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t0,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t1,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_imgs,numpy.array(cov_train_imgs+pne_train_imgs),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
train_labels,numpy.array(cov_train_num*[1]+pne_train_num*[0]),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
test_imgs,numpy.array(cov_test_imgs+pne_test_imgs),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
test_labels,numpy.array(cov_test_num*[1]+pne_test_num*[0]),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
train_acc,"np.mean(numpy.argmax(train_labels,axis=1)==numpy.argmax(train_labels_pred,axis=1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
test_acc,"np.mean(numpy.argmax(test_labels,axis=1)==numpy.argmax(test_labels_pred,axis=1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
train_acc,"numpy.mean(np.argmax(train_labels,axis=1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
test_acc,"numpy.mean(np.argmax(test_labels,axis=1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
df2['ab_page'],pandas.get_dummies(df['group']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"joined_df[['CA','UK','US']]",pandas.get_dummies(joined_df['country']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('ab_data.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
countries,pandas.read_csv('countries.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
both_cancer,"pandas.concat([fem_cancer_df,male_cancer_df],axis=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
master_data,"pandas.merge(both_cancer,new_gdp,on=['CountryCode'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
female_df,pandas.read_csv('Resources/ghe2016_deaths_country_fmle.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
male_df,pandas.read_csv('Resources/ghe2016_deaths_country_mle.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
gdp_df,pandas.read_csv('Resources/world_gdp.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
palabras,re.compile(patron),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
url,"re.compile(r""^(https?:\/\/)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
patron,"re.compile(r""[\w.%+-]+@[\w.-]+\.[a-zA-Z]{2,6}"")",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
fecha,re.compile(r'^(0?[1-9]|[12][0-9]|3[01]),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
a_list,numpy.array(a_list),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.array(data),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num,"random.randint(0,no_attr-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df4,"pandas.DataFrame([df4[""CountryName""],df4[""2012""]])",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df_1,"pandas.read_csv(os.getenv(""PUIDATA"")",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df2,"pandas.read_csv(os.getenv(""PUIDATA"")",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df3,"pandas.read_csv(os.getenv(""PUIDATA"")",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df4,"pandas.read_csv(os.getenv(""PUIDATA"")",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
yerr,numpy.sqrt(y*1.0),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
yerr,numpy.sqrt(y*1.0),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
yerr,numpy.sqrt(y*1.0),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
yerr,numpy.sqrt(y*1.0),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ind,numpy.array(x),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ind,numpy.array(x),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ind,numpy.array(x),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ind,numpy.array(x),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"numpy.repeat(d[...,np.newaxis],3,-1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ylabel,"'Truelabel',xticklabels=numpy.unique(trueClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
yticklabels,numpy.unique(trueClassName),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ylabel,"'Truelabel',xticklabels=numpy.unique(trueClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
yticklabels,numpy.unique(trueClassName),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ylabel,"'Truelabel',xticklabels=numpy.unique(trueClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
yticklabels,numpy.unique(trueClassName),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ylabel,"'Truelabel',xticklabels=numpy.unique(trueClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
yticklabels,numpy.unique(trueClassName),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(trueClassName,predClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(trueClassName,predClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(trueClassName,predClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(trueClassName,predClassName)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cl,"sklearn.metrics.classification_report(trueClassName,predClassName,output_dict=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cl,"sklearn.metrics.classification_report(trueClassName,predClassName,output_dict=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
hist_df,pandas.DataFrame(history.history),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(times),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(cl),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(cm),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(cm),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(list(zip(validImgId,trueClassName,predClassName,predProbabilityAll)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(cl),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(cm),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(cm),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(list(zip(validImgId,trueClassName,predClassName,predProbabilityAll)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.epoch_time_start,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.get_dummies(train,columns=['gender','age','ever_married','work_type','Residence_type','avg_glucose_level','bmi','smoking_status'],drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.get_dummies(test,columns=['gender','age','ever_married','work_type','Residence_type','avg_glucose_level','bmi','smoking_status'],drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sample,pandas.read_csv('sample_submission.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.age,"np.digitize(train.age,bins=numpy.arange(start=train.age.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test.age,"np.digitize(test.age,bins=numpy.arange(start=test.age.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.avg_glucose_level,"np.digitize(train.avg_glucose_level,bins=numpy.arange(start=train.avg_glucose_level.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test.avg_glucose_level,"np.digitize(test.avg_glucose_level,bins=numpy.arange(start=test.avg_glucose_level.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.bmi,"np.digitize(train.bmi,bins=numpy.arange(start=train.bmi.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test.bmi,"np.digitize(test.bmi,bins=numpy.arange(start=test.bmi.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,"numpy.array([100,125,150])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
state,numpy.array(list(range(10),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.age,"numpy.digitize(train.age,bins=np.arange(start=train.age.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test.age,"numpy.digitize(test.age,bins=np.arange(start=test.age.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.avg_glucose_level,"numpy.digitize(train.avg_glucose_level,bins=np.arange(start=train.avg_glucose_level.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test.avg_glucose_level,"numpy.digitize(test.avg_glucose_level,bins=np.arange(start=test.avg_glucose_level.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.bmi,"numpy.digitize(train.bmi,bins=np.arange(start=train.bmi.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test.bmi,"numpy.digitize(test.bmi,bins=np.arange(start=test.bmi.min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(random_state=123),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bbc,BalancedBaggingClassifier(base_estimator=sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=123)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg_score,"sklearn.model_selection.cross_val_score(logreg,X_train,y_train,cv=10,scoring='roc_auc')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bagc_score,"sklearn.model_selection.cross_val_score(bagc,X_train,y_train,cv=10,scoring='roc_auc')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bbc_score,"sklearn.model_selection.cross_val_score(bbc,X_train,y_train,cv=10,scoring='roc_auc')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
abc_score,"sklearn.model_selection.cross_val_score(abc,X_train,y_train,cv=10,scoring='roc_auc')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xgb_score,"sklearn.model_selection.cross_val_score(xgb,X_train,y_train,cv=10,scoring='roc_auc')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bagc,sklearn.ensemble.BaggingClassifier(LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(bagc,params,cv=10,scoring='roc_auc')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
abc,sklearn.ensemble.AdaBoostClassifier(LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
iris,sklearn.datasets.load_iris(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
MSE,"sklearn.metrics.mean_squared_error(y_test,y_pred)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
clf,sklearn.tree.DecisionTreeClassifier(max_depth=3),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
clf,sklearn.tree.DecisionTreeRegressor(max_depth=3),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(iris.data,iris.target,test_size=0.25,random_state=4)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(boston.data,boston.target,test_size=0.2,random_state=4)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'key1':[4,5,3,np.nan,2],
'key2':[1,2,np.nan,4,5],
'key3':[1,2,3,'j','k']},
index=['a','b','c','d','e'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'key1':np.arange(10),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'key1':list('asdcbvasd'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'key1':list('abcdef'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(np.random.randn(3,2)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(np.random.randn(3,2)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'key1':['a,b,c','1,2,3',[':,.,']],
'key2':['a-b-c','1-2-3',[':-.-']]})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'key1':list('abcdef'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df1,"pandas.DataFrame({'key':['K0','K1','K2','K3'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame({'key':['K0','K1','K2','K3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df3,"pandas.DataFrame({'key1':['K0','K0','K1','K2'],
'key2':['K0','K1','K0','K1'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df4,"pandas.DataFrame({'key1':['K0','K1','K1','K2'],
'key2':['K0','K0','K0','K0'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df1,pandas.DataFrame({'lkey':list('bbacaab'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,pandas.DataFrame({'rkey':list('abd'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df1,pandas.DataFrame({'key':list('abcdfeg'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame({'date2':range(100,105)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df1,pandas.DataFrame({'key':list('bbacaab'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,pandas.DataFrame({'key':list('abd'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
left,"pandas.DataFrame({'A':['A0','A1','A2'],
'B':['B0','B1','B2']},
index=['K0','K1','K2'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
right,"pandas.DataFrame({'C':['C0','C2','C3'],
'D':['D0','D2','D3']},
index=['K0','K2','K3'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df1,pandas.DataFrame({'key':list('bbacaab'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,pandas.DataFrame({'key':list('abd'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
left,"pandas.DataFrame({'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3'],
'key':['K0','K1','K0','K1']})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
right,"pandas.DataFrame({'C':['C0','C1'],
'D':['D0','D1']},
index=['K0','K1'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df1,"pandas.DataFrame([[np.nan,3.,5.],[-4.6,np.nan,np.nan],[np.nan,7.,np.nan]])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame([[-42.6,np.nan,-8.2],[-5.,1.6,4]],index=[1,2])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'key1':['a','a',3,4,5],
'key2':['a','a','b','b','c']})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'A':['foo','bar','foo','bar','foo','bar','foo','foo'],
'B':['one','one','two','three','two','two','one','three'],
'C':np.random.randn(8)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'X':['A','B','A','B'],'Y':[1,4,3,2]})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'A':['foo','bar','foo','bar','foo','bar','foo','foo'],
'B':['one','one','two','three','two','two','one','three'],
'C':np.random.randn(8)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'data1':np.random.rand(2),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(np.arange(16),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(np.arange(16),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'a':[1,1,2,2],
'b':np.random.rand(4)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'data1':np.random.rand(5),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'data1':np.random.rand(5),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'date':rng,
'key':list('abcdabcda')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'A':[1,2,2,2,2],
'B':[3,3,4,4,4],
'C':[1,1,np.nan,1,1]})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,pandas.Series(list('asdvasdcfgg'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series(np.arange(10,15)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series(['A','b','C','bbhello','123',np.nan,'hj'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series(['A','b','bbhello','123',np.nan])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series(['jack','jill','jesse','frank'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series(['a,b,c','1,2,3',['a,,,c'],np.nan])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series(['A','b','C','bbhello','123',np.nan,'hj'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s1,"pandas.Series([1,2,3])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s2,"pandas.Series([2,3,4])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s3,"pandas.Series([1,2,3],index=['a','c','h'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s4,"pandas.Series([2,3,4],index=['b','e','d'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s5,"pandas.Series([1,2,3],index=['a','b','c'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s6,"pandas.Series([2,3,4],index=['b','c','d'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series([1,1,1,1,2,2,2,3,4,5,5,5,5])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,pandas.Series(list('ascaazsd'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,pandas.Series(mapping),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,"pandas.Series([1,2,3,10,20,30],index=[1,2,3,1,2,3])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
sre,"pandas.concat([s5,s6],keys=['one','two'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
sre,"pandas.concat([s5,s6],axis=1,keys=['one','two'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
x1,"pandas.merge(df1,df2,on='key',how='outer')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
x2,"pandas.merge(df1,df2,on='key',sort=True,how='outer')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
data2,"pandas.read_csv('data2.csv',engine='python')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
data3,"pandas.read_excel('地市级党委书记数据库（2000-10）.xlsx',sheetname='中国人民共和国地市级党委书记数据库（2000-10）',header=0)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
data1,"pandas.read_table('data1.txt',delimiter=',',header=0,index_col=1)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
rng,pandas.to_datetime(date),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
coins_name,"pandas.DataFrame(crypto_df['CoinName'],index=crypto_df.index)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
pcs_df,"pandas.DataFrame(principals,columns=[""PC1"",""PC2"",""PC3""],index=crypto_df.index)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
elbow_df,pandas.DataFrame(elbow),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
new_df,"pandas.DataFrame(data,columns=[""TotalCoinSupply"",""TotalCoinsMined""],
index=clustered_df.index)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
clustered_df,"pandas.concat([crypto_df,pcs_df],axis=1,sort=False)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"pandas.get_dummies(data=crypto_df,columns=['Algorithm','ProofType'])",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
crypto_df,"pandas.read_csv(file_path,index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,sklearn.preprocessing.StandardScaler(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
mm_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
principals,sklearn.decomposition.PCA(n_components=3),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
km,"sklearn.cluster.KMeans(n_clusters=i,random_state=0)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
model,"sklearn.cluster.KMeans(n_clusters=4,random_state=0)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
im,"numpy.expand_dims(im,axis=0)",CLUSTER_2,CLUSTER_11,CLUSTER_11,CLUSTER_11,CLUSTER_9
data,json.load(fp),CLUSTER_2,CLUSTER_11,CLUSTER_11,CLUSTER_11,CLUSTER_9
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=78)",CLUSTER_29,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_29,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
enc,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_29,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
encode_df,pandas.DataFrame(enc.fit_transform(attrition_df[attrition_cat]),CLUSTER_29,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
attrition_df,pandas.read_csv('HR-Employee-Attrition.csv'),CLUSTER_29,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
rf_feature_importance,"pandas.DataFrame(clf.feature_importances_,
index=data_prepared_df.columns,
columns=['importance'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([data_2018,data_2019])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_2018,"pandas.read_csv(""../data/dataset_2018_with_negatives.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_2019,"pandas.read_csv(""../data/dataset_2019_with_negatives.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,'day_of_year']",pandas.to_datetime(X[self.datime_column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,'day_of_week']",pandas.to_datetime(X[self.datime_column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,'month']",pandas.to_datetime(X[self.datime_column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,'hour']",pandas.to_datetime(X[self.datime_column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df[f'{column}_cos'],numpy.cos((df[column]-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df[f'{column}_cos'],numpy.cos((df[column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,f'{self.column}_cos']",numpy.cos((X[self.column]-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,f'{self.column}_cos']",numpy.cos((X[self.column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df[f'{column}_sin'],numpy.sin((df[column]-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df[f'{column}_sin'],numpy.sin((df[column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,f'{self.column}_sin']",numpy.sin((X[self.column]-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X.loc[:,f'{self.column}_sin']",numpy.sin((X[self.column]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax1,"seaborn.heatmap(cnf_mx,cmap='Blues',annot=True,fmt=""d"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax2,"seaborn.heatmap(norm_cnf_mx,cmap='Blues',annot=True,fmt="".4%"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax3,"matplotlib.pyplot.plot(fpr,tpr,label=f""{model_name},auc={round(auc,4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax3,"matplotlib.pyplot.plot([0,1],[0,1],color='darkorange',lw=2,linestyle='--')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(gs[0,0])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(gs[0,1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(gs[1,:])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test_val,y_train,y_test_val","sklearn.model_selection.train_test_split(data_prepared,labels,test_size=0.33,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_test,X_val,y_test,y_val","sklearn.model_selection.train_test_split(X_test_val,y_test_val,test_size=0.33,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test_val,y_train,y_test_val","sklearn.model_selection.train_test_split(data_prepared,labels,test_size=0.33,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_test,X_val,y_test,y_val","sklearn.model_selection.train_test_split(X_test_val,y_test_val,test_size=0.33,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cnf_mx,"sklearn.metrics.confusion_matrix(y_test,y_pred,labels=labels)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,y_pred_proba)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
auc,"sklearn.metrics.roc_auc_score(y_test,y_pred_proba)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X_train,y_train,cv=5,scoring='roc_auc',n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=150,max_leaf_nodes=50,min_samples_leaf=200,max_features=10,n_jobs=-1,criterion='entropy')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest_clf,"sklearn.ensemble.RandomForestClassifier(random_state=42,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest_clf,"sklearn.ensemble.RandomForestClassifier(random_state=42,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline_preprocess,"sklearn.pipeline.Pipeline([
('select_cols',FeatureSelector(cols_to_keep)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
full_pipeline,"sklearn.pipeline.Pipeline([
('preprocess',pipeline_preprocess)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(forest_clf,param_grid,cv=3,
scoring=['f1','roc_auc'],refit='f1',
return_train_score=True,verbose=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(forest_clf,param_grid,cv=3,
scoring=['f1','roc_auc'],refit='f1',
return_train_score=True,verbose=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_denc_onehot,"pandas.get_dummies(toronto_denc_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_toronto,"pandas.merge(dfC,df_geo_coor,how='left',left_on='PostalCode',right_on='PostalCode')",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_geo_coor,"pandas.read_csv(""./Geospatial_Coordinates.csv"")",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
website_text,requests.get('https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M'),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
image_df,pandas.read_csv(CSV_DIR+BLOB_CSV),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
df,"pandas.read_csv('../data/gapminder.tsv',sep='\t')",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-3.0,3.0,delta)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,"numpy.arange(-2.0,2.0,delta)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A,"numpy.array([x,np.ones(n)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
d,numpy.sqrt(a**2+b**2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,2*np.pi,50)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
a,"numpy.linspace(0,1,15)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0.0,1.0,n)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,30,100)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
result,"numpy.linalg.lstsq(A,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
CS,"matplotlib.pyplot.contour(X,Y,Z)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"ax.plot_surface(x,y,z,rstride","1,cstride=1,cmap=matplotlib.pyplot.get_cmap('jet')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"f,axes","matplotlib.pyplot.subplots(2,1,sharex=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
img,scipy.misc.face(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
current_dir,os.getcwd(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
cm,"sklearn.metrics.confusion_matrix(expected_labels,our_labels)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
ids,numpy.array([int(f[8:f.find('.'),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
correct,numpy.where(our_labels==expected_labels),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
incorrect,numpy.where(our_labels!=expected_labels),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
correct_cats,numpy.where((our_labels==0),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
correct_dogs,numpy.where((our_labels==1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
incorrect_cats,numpy.where((our_labels==0),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
incorrect_dogs,numpy.where((our_labels==1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
most_correct_cats,numpy.argsort(our_predictions[correct_cats]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
most_correct_dogs,numpy.argsort(our_predictions[correct_dogs]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
most_incorrect_cats,numpy.argsort(our_predictions[incorrect_cats]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
most_incorrect_dogs,numpy.argsort(our_predictions[incorrect_dogs]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
most_uncertain,numpy.argsort(np.abs(our_predictions-0.5),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
subm,"numpy.stack([ids,isdog],axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
test_agent.Q,"numpy.array([[[[[.5,0.],[0.,0.]],[[0.,0.],[0.,0.]]],[[[0.,0.],[0.,0.]],[[0.,0.],[0.,0.]]]],[[[[0.,0.],[0.,0.]],[[0.,0.],[0.,0.]]],[[[0.,0.],[0.,0.]],[[0.,0.],[.1,.2]]]]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_neg,"pandas.read_csv('negative.csv',sep=';',header=-1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_pos,"pandas.read_csv('positive.csv',sep=';',header=-1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df,"pandas.read_csv(path,sep='\t')",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
words_count,collections.defaultdict(lambda:0),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
report,"sklearn.metrics.classification_report(y_test,y_hat)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
report,"sklearn.metrics.classification_report(y_test,y_hat)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
diabetes_X,"numpy.array([[1],[2],[3]])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
diabetes_y_train,"numpy.array([3,2,4])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
diabetes_y_test,"numpy.array([3,2,4])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
array,"numpy.array(df[""平均功率""])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
array,numpy.array(df[str1]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,numpy.array(X),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,numpy.array(y),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
T,numpy.array(predict_data),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
S_train,"numpy.zeros((X.shape[0],len(self.base_models)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
S_predict,"numpy.zeros((T.shape[0],len(self.base_models)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
S_predict_i,"numpy.zeros((T.shape[0],self.n_splits)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clean_X,"numpy.concatenate([clean_X_train,clean_X_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clean_y,"numpy.concatenate([clean_y_train,clean_y_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
all_X_train,"numpy.concatenate([X_train,X_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
all_y_train,"numpy.concatenate([y_train,y_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
avg_mse,numpy.average(-nmse),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
avg_score,numpy.average(scores),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
res,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_result,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
bad_index,pandas.Int64Index(list(bad_index1),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
all_data,"pandas.concat([train_data,test_data],axis=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_data,pandas.read_csv('./data/public.train.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_data,pandas.read_csv('./data/public.test.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=123)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
forest1,"sklearn.ensemble.RandomForestRegressor(n_estimators=740,max_features='sqrt',random_state=7,n_jobs=12)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
forest2,"sklearn.ensemble.RandomForestRegressor(n_estimators=730,max_features='sqrt',random_state=9,n_jobs=12)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
forest3,"sklearn.ensemble.RandomForestRegressor(n_estimators=745,max_features='sqrt',random_state=11,n_jobs=12)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gbdt1,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=1060,max_depth=5,max_features='log2',random_state=789,learning_rate=0.08)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gbdt2,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=1100,max_depth=5,max_features='log2',random_state=123,learning_rate=0.08)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gbdt3,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=1090,max_depth=5,max_features='log2',random_state=1999,learning_rate=0.08)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sm,sklearn.feature_selection.SelectFromModel(GradientBoostingRegressor(random_state=2),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
stacking_model,"sklearn.svm.SVR(C=100,gamma=0.01,epsilon=0.01)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
stacking_model2,"sklearn.svm.SVR(C=100,gamma=0.01,epsilon=0.01)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
polynm,"sklearn.preprocessing.PolynomialFeatures(degree=2,interaction_only=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""../Bike-Sharing-Dataset-hour_new.csv"")",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
chose_data2['rating'],"numpy.where(chose_data2['rating']>3,1,0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
raw_data,pandas.read_csv('https://tf-assets-prod.s3.amazonaws.com/tf-curric/data-science/epi_r.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,seaborn.heatmap(chose_data.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,seaborn.heatmap(chose_data3.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr,sklearn.svm.SVR(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm,sklearn.svm.SVC(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm2,sklearn.svm.SVC(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,"pandas.read_csv('D:\pandas\pandas_work\ipython\LTC_Data_Test\LTC_v1.0_data_7_26_1.csv',sep=',')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
axHisX,"matplotlib.pyplot.bar(left=indx5_y,height=indx5_x,color='r',label='Mote_5')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
axHisX,"matplotlib.pyplot.bar(left=indx6_y,height=indx6_x,color='g',label='Mote_6')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
axHisX,"matplotlib.pyplot.bar(left=indx7_y,height=indx7_x,color='b',label='Mote_7')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
X,"pandas.concat([X,states],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
states,"pandas.get_dummies(X['State'],drop_first=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('Salary_data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('startups.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('Salary_Data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('Social_Network_Ads.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
linear_model,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
multiple_model,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly_lin,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"sklearn.metrics.r2_score(y_pred,y_test)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.arange(0,11)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.arange(0,11)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly_reg,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
logistic_model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
out,"pandas.DataFrame(scaled,index=df.index,columns=df.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cookies,pandas.read_csv('data/cookies_dummies.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tick_marks,numpy.arange(len(classNames),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(3,3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=nei),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=nei),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=nei),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(random_state=0,solver='lbfgs',C=k,
multi_class='multinomial')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(random_state=0,solver='lbfgs',C=k,
multi_class='multinomial')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ks_model,"sklearn.linear_model.LogisticRegression(solver='lbfgs',max_iter=200)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=k,max_depth=2,
random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm,sklearn.svm.SVC(gamma=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tr,"sklearn.tree.DecisionTreeClassifier(random_state=0,max_depth=k)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_pred,y_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,Y,test_size=0.2,shuffle=True,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaled,"sklearn.preprocessing.MinMaxScaler(feature_range=(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,sklearn.ensemble.RandomForestRegressor(max_depth=depth),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,sklearn.ensemble.RandomForestRegressor(max_depth=depth),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
auc,"sklearn.metrics.roc_auc_score(y_test,y_pred_proba)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,y_pred_proba)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dist,numpy.linalg.norm(database[identity]-encoding),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_5,CLUSTER_1
dist,numpy.linalg.norm(db_enc-encoding),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_5,CLUSTER_1
a,numpy.arange(12),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.arange(5),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.arange(3),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,numpy.arange(5),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.arange(10),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ar,"numpy.array([0,1,2,3,4,5,6,7,8,9])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
c,"numpy.array([[0,1,2],[3,4,5]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
d,"numpy.array([[[1,2,3,4],
[5,6,7,8],
[9,10,11,12]],
[[11,12,13,14],
[15,16,17,18],
[19,20,21,22]]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([1,2,3],dtype='f')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([1,2,3],dtype='U')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
A,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([[0,1,2],[3,4,5]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([[0,1,2,3],[4,5,6,7]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([0,1,2,3,4,5,6,7,8,9])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
idx,"numpy.array([True,False,True,False,True,False,True,False,True,False])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([11,22,33,44,55,66,77,88,99])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
idx,"numpy.array([0,2,4,6,8])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([11,22,33,44,55,66,77,88,99])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
idx,"numpy.array([0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([0,2,4,6,8])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b,"numpy.array([-1,-1,-1,-1,-1])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([[1,1],[2,2]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([1,2,3,2])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b,"numpy.array([2,2,3,2])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
c,"numpy.array([6,4,4,5])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([18,5,10,23,19,-8,10,0,0,5,2,15,8,
2,5,4,15,-1,4,-7,-24,7,9,-6,23,-13])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([1,2,3,4])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b,"numpy.array([10,2,3,40])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([[1],[2],[3]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.array([[4],[5],[6]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([1,2,3])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.array([4,5,6])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
A,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
B,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([[0,1,2],[3,4,5]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([[4,3,5,7],
[1,12,11,9],
[2,15,1,14]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([42,38,12,25])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array(['a','b','b','c','a'])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,numpy.zeros(5),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b,"numpy.zeros((2,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
c,"numpy.zeros((5,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
d,"numpy.zeros(5,dtype=""U4"")",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.zeros((100,100)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a2,"numpy.zeros((2,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b2,"numpy.zeros((3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
c2,"numpy.zeros((3,4)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.empty((4,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
e,"numpy.zeros_like(d,dtype='f')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b,"numpy.ones_like(a,dtype='f')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
innerproduct,"numpy.dot(x.T,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
result,"numpy.dot(x,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
C,"numpy.dot(A,B)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.ones((2,3,4)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a1,"numpy.ones((3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a1,"numpy.ones((2,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b1,"numpy.ones((2,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
c1,"numpy.ones((3,4)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
matrix2,numpy.identity(3),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
j,numpy.argsort(a),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
d,"numpy.stack([c1,c2],axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
e,"numpy.stack([c1,c2],axis=1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
f,"numpy.stack([c1,c2],axis=2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(x,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
matrix1,"numpy.diag([1,5,9])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
matrix3,numpy.eye(3),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"index,count","numpy.unique(a,return_counts=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mask,numpy.zeros_like(data.corr(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('african_crises.csv',sep="","")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,1,figsize=(10,10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,3,sharex='col',sharey='row',figsize=(15,5)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sorted_index,"numpy.argsort(X[:,d])",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
"x0,x1","numpy.meshgrid(
np.linspace(axis[0],axis[1],int((axis[1]-axis[0])",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
dt_clf,"sklearn.tree.DecisionTreeClassifier(max_depth=2,criterion='entropy',random_state=42)",CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
counter,collections.Counter(y),CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(r'C:\Users\acerpc\OneDrive\Desktop\Placement_Data_Full_Class.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=100)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
preprocessor,"sklearn.compose.ColumnTransformer(transformers=[('num',numerical_transformer,numerical_col)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.pipeline.Pipeline([
('preprocessor',preprocessor)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
numerical_transformer,sklearn.pipeline.make_pipeline(SimpleImputer(strategy='median'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
categorical_transformer,sklearn.pipeline.make_pipeline(SimpleImputer(strategy='most_frequent'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(clf,param_grid,cv=10,scoring='accuracy',n_jobs=-1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(grid,X_test,y_test,cv=5,scoring='f1',n_jobs=-1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
feature,"numpy.array([
[-500.5],
[-100.1],
[0],
[100.1],
[900.9]
])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
feature,"numpy.array([
[-1000.1],
[-200.2],
[500.5],
[600.6],
[9000.9]
])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
features,"numpy.array([
[0.5,0.5],
[1.1,3.4],
[1.5,20.2],
[1.63,34.4],
[10.9,3.3]
])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
features,"numpy.array([
[1.1,11.1],
[2.2,22.2],
[3.3,33.3],
[np.nan,55]
])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
minmax_scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
robust_scaler,sklearn.preprocessing.RobustScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
normalizer,"sklearn.preprocessing.Normalizer(norm=""l2"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
features_l1_norm,"sklearn.preprocessing.Normalizer(norm=""l1"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(features,columns=[""feature_1"",""feature_2""])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(features,columns=[""feature_1"",""feature_2""])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"features,_","sklearn.datasets.make_blobs(n_samples=50,
n_features=2,
centers=3,
random_state=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"features,_","sklearn.datasets.make_blobs(n_samples=1000,
n_features=2,
random_state=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clusterer,"sklearn.cluster.KMeans(3,random_state=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv('combined_df_v1.csv',encoding='utf-8')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
labels,numpy.array(data['label']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
features,numpy.array(data),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mean,numpy.mean(data['wpp']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
std,numpy.std(data['wpp']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"train_features,test_features,train_labels,test_labels","sklearn.model_selection.train_test_split(features,labels,test_size=0.25,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_jobs=2,random_state=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
losses,numpy.array(losses),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
img,numpy.squeeze(images[0]),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(3,3)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(figsize=(7,7)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(figsize=(7,12)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
positive_windows,numpy.array(positive_windows),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
negative_windows,numpy.array(negative_windows),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
data,"numpy.zeros((n,2500)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
data,"numpy.zeros((n,2500)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
data,"numpy.zeros((n,10000)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
is_negative,"numpy.ones((w,)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
data,numpy.load('handwriting_datasets/npy/1.npy'),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
t,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
t,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
t,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
filenames,os.listdir(path),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
regions_label,json.load(f),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
diabetes_df,pandas.read_csv('diabetes.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.33,random_state=3)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=200,max_depth=140,max_features='sqrt')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc_cv_score,"sklearn.model_selection.cross_val_score(rfc,X,Y,cv=10,scoring=""roc_auc"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc_cv_score,"sklearn.model_selection.cross_val_score(rfc,X,Y,cv=10,scoring='roc_auc')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc_random,"sklearn.model_selection.RandomizedSearchCV(estimator=rfc,param_distributions=random_grid,n_iter=100,cv=3,verbose=2,random_state=2,n_jobs=-1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
concatenated_df,"pandas.concat(df_from_each_file,ignore_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(f,encoding=""ISO-8859-1"")",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
cwd_dir_name,os.getcwd(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
dir_name,os.getcwd(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,figsize=(9,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,figsize=(9,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_img,"numpy.array([1ifxin[0,13,26]else0forxinrange(27)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_img,numpy.eye(4),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(title),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
imgplot,"matplotlib.pyplot.imshow(train_dataset[1],'gray')",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
imgplot,"matplotlib.pyplot.imshow(train_dataset[1],'gray')",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
imgplot,"matplotlib.pyplot.imshow(train_dataset[5],'gray')",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
dataset,"numpy.ndarray(
shape=(max_num_images,image_size,image_size)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
labels,numpy.ndarray(shape=(max_num_images),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
images,"numpy.reshape(train_dataset[:5000],[train_dataset[:5000].shape[0],28*28])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
test_images,"numpy.reshape(test_dataset,[test_dataset.shape[0],28*28])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
statinfo,os.stat(filename),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
statinfo,os.stat(pickle_file),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(test_labels,y_predict)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_0
gd,pandas.read_csv('Glassdoor_DS.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
temp,"pandas.merge(gdf_pop_area,totales,left_on='CVEGEO',right_on='CVEGEO')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
hex_bins,"pandas.merge(hex_bins,hex_temp,right_index=True,left_on=f'hex_id_{res}',how='left')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
submission,"pandas.DataFrame({""Loan_ID"":loan_id,
""Loan_Status"":prediction})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ct,"pandas.crosstab(train[""Education""],train[""Loan_Status""],margins=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""/home/pushpendra/Documents/career/ML/Dataset/loan_train.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""/home/pushpendra/Documents/career/ML/Dataset/loan_test.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.LogisticRegression(penalty=""l1"",C=0.1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.tree.DecisionTreeClassifier(max_depth=10,min_samples_leaf=100,max_features='sqrt')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc_train,"sklearn.metrics.accuracy_score(train[dependent_variable],predict_train)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
qpo_width,"numpy.array([1.0/100.0,1.0/300.0,1.0/200.0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
qpo_cent,"numpy.array([1.0/5.0,1.0/25.0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ma_coefs,"numpy.array([1.0,4.5,1.25,0.0,0.0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t,numpy.zeros(ny),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t[0:90],numpy.cumsum(dt[0:90]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
frequencies,"numpy.logspace(-4.0,0.0,200)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lag,"numpy.linspace(0.0,300.0,300)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ar_coefs,numpy.poly(ar_roots),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.genfromtxt('LC_G_15818.dat'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df,pd.get_dummies(df[i])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""train.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
n_jobs,"1,train_sizes=numpy.linspace(.1,1.0,5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
amenities_all,"numpy.unique(np.concatenate(df['amenities'].map(lambdax:x.split("","")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.ExtraTreesRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,"sklearn.feature_selection.SelectFromModel(clf,prefit=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gs_knn,"sklearn.model_selection.GridSearchCV(estimator=KNeighborsRegressor(p=2,
metric='minkowski')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gs_knn,"GridSearchCV(estimator=sklearn.neighbors.KNeighborsRegressor(p=2,
metric='minkowski')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
k,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submit,"pandas.DataFrame({'id':test['id'],'sales':y_pred_new1})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
agg.columns,pandas.Index(['_&_'.join(columns),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_test,"pandas.concat([train,test],axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.get_dummies(df,drop_first=True,columns=columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df,agg,how='left',on=columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(path+'train.csv',parse_dates=[0],nrows=None)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(path+'test.csv',parse_dates=[1],nrows=None)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pred_new1,numpy.exp(y_pred_new),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_test['sales_log'],numpy.log(train_test['sales']+1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(14,6)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=seed)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""./titanic_train.csv"",index_col=""PassengerId"")",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""./titanic_test.csv"",index_col=""PassengerId"")",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
train2,"pandas.read_csv(""./bike_train.csv"",parse_dates=[""datetime""])",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
"figure,((ax1,ax2,ax3),(ax4,ax5,ax6))","matplotlib.pyplot.subplots(nrows=2,ncols=3)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
g,"seaborn.kdeplot(train[""Age""][(train[""Survived""]==0)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
g,"seaborn.kdeplot(train[""Age""][(train[""Survived""]==1)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
g,"seaborn.kdeplot(train[""Age""][(train[""Survived""]==0)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
g,"seaborn.kdeplot(train[""Age""][(train[""Survived""]==1)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
edate,pandas.Timestamp(df['EDATE'][0]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.get_dummies(df),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""datasets/organics.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df['DOB'],"pandas.to_datetime(df['DOB'],format=dateformat)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_mat,y,test_size=0.3,stratify=y,random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.GridSearchCV(param_grid=params,estimator=MLPClassifier(random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.GridSearchCV(param_grid=params,estimator=MLPClassifier(random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.GridSearchCV(param_grid=params,estimator=MLPClassifier(random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,sklearn.neural_network.MLPClassifier(random_state=rs),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,"sklearn.neural_network.MLPClassifier(max_iter=100,random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,"sklearn.neural_network.MLPClassifier(max_iter=80,random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv,"GridSearchCV(param_grid=params,estimator=sklearn.neural_network.MLPClassifier(random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv,"GridSearchCV(param_grid=params,estimator=sklearn.neural_network.MLPClassifier(random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv,"GridSearchCV(param_grid=params,estimator=sklearn.neural_network.MLPClassifier(random_state=rs)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gss,pandas.read_csv('originalgss.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sd,numpy.sqrt(sum_of_difference2/N),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
session,requests.Session(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
response,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
response_json,"requests.post(f'https://{endpoint}/rules?key={key}',
data=json.dumps(rule_params)",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,json.dumps(rule_params),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
mydir,os.getcwd(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
mydir,os.getcwd(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
mydir,os.getcwd(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
timeEdited,"time.strftime(""%Y-%m-%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
rd,random.randrange(train_images.shape[0]-5),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_9,CLUSTER_7
error_idx,numpy.where(y_test_pca!=predictions),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('..\..\RandomForest\RandomForest2\mnist_My.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"pl.scatter(X_data_pca[:,0],X_data_pca[:,1],c","y_data,cmap=matplotlib.pyplot.get_cmap('nipy_spectral',10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(nrows=4,ncols=5,figsize=(15,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
startTime,datetime.datetime.now(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
startTime,datetime.datetime.now(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm,sklearn.svm.SVC(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svmpca,"sklearn.svm.SVC(kernel='linear',gamma=0.1,C=0.1,probability=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train_pca,y_test_pca","sklearn.model_selection.train_test_split(X_data,y_data,test_size=0.98,random_state=0,
stratify=y_data,shuffle=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_cv,"sklearn.model_selection.RandomizedSearchCV(svm,param_dist,scoring='accuracy',cv=kfold)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predictions,"sklearn.model_selection.cross_val_predict(svmpca,X_train_pca,y_train_pca,cv=3)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(0.95),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=154),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=3,random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
idxs,numpy.flatnonzero(y_train==y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
train_acc,numpy.mean(y_train==y_train_pred),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
val_acc,numpy.mean(y_val==y_val_pred),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
"boston[""CRIM""]","numpy.where(boston[""CRIM""]<0.038195,0.038195,boston[""CRIM""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"boston[""CRIM""]","numpy.where(boston[""CRIM""]>10.753,10.753,boston[""CRIM""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"avengers[""age""]","numpy.where(avengers[""age""]==9999,2500,avengers[""age""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df[""Fare""]","numpy.where(df[""Fare""]>65.6344,65,df[""Fare""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['Fare'],"numpy.where(df['Fare']>66,mean,df['Fare'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pct_missing,numpy.mean(df[col].isnull(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"q1,q3","numpy.percentile(df['Fare'],[25,75])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"q1,q3","numpy.percentile(datacolumn,[25,75])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DC,"pandas.DataFrame({""name"":['Alfred','Batman','Catwoman'],
""toy"":[np.nan,'Batmobile','Bullwhip'],
""born"":[pd.NaT,pd.Timestamp(""1940-04-25"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston,"pandas.DataFrame(boston_dataset.data,columns=boston_dataset.feature_names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
avengers,"pandas.DataFrame({""name"":['Iron_Man','Hawkeye','Thor'],
""skill"":['Rich','Archery','God'],
""age"":[42,38,9999]})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
food,"pandas.DataFrame({
'brand':['YumYum','YumYum','Indomie','Indomie','Indomie'],
'style':['cup','cup','cup','pack','pack'],
'rating':[4,4,3.5,15,5]
})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DC2,"pandas.DataFrame({""name"":['Alfred','Batman','Catwoman'],
""toy"":['12','Batmobile','Bullwhip']})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
NLP,pandas.DataFrame({'City':['NewYork(City),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
missing_data,"pandas.concat([total,percent],axis=1,keys=['Total','Percent'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fg,"seaborn.FacetGrid(df,hue=""Sex"",aspect=3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fg,"seaborn.FacetGrid(df,aspect=3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.boxplot(x=boston[""CRIM""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.boxplot(x=boston[""CRIM""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=""Fare"",y=""Age"",hue='Embarked',data=df)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston_dataset,sklearn.datasets.load_boston(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pos,"re.search('\(.*',City_name)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.returns,"pandas.DataFrame({
'stocks':self.stock_data['Close'].rolling(window=2,center=False)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
portfolios,"pandas.DataFrame({
'buy_and_hold':self.buy_and_hold(testing_indexes)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
portfolio_values,"pandas.DataFrame({
'buy_and_hold':self.evaluate(portfolios.buy_and_hold)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
factors,"pandas.DataFrame({'action':0,'reward':0,'state':0},index=training_indexes)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
testing,"pandas.DataFrame({'action':0,'state':0},index=testing_indexes)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
data,"pandas.DataFrame(data,columns=['Opentime','Open','High','Low','Close','Volume','Closetime','Quotevolume','Numtrades','btcbuys','coinbuys','ignore'])",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
fs_df,pandas.DataFrame(files),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
out,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
date_int,"pandas.DataFrame({""Date"":[d.strftime('%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
port,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
curr_port,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
positions,pandas.DataFrame(index=signals.index),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
all_ports,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
curr_port_hist,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
port_hist,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
prices,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
bt_returns,"pandas.DataFrame(returns,columns=['return'])",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
all_ports,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
curr_port_hist,pandas.DataFrame(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
bw_freq,pandas.concat(bw_freq),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
out,"pandas.concat([out,data],axis=0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
curr_port,"pandas.concat([curr_port,curr])",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
port,"pandas.concat([port,curr_port])",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
curr,pandas.read_csv(loc+i),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
fs,pandas.read_csv(freq_loc),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
T,"numpy.zeros((3,3,3)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
R,"numpy.zeros((3,3)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""p>2""]","numpy.where(signals[coin]>signals[""2""],1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""p>1""]","numpy.where(signals[coin]>signals[""1""],1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""p>-1""]","numpy.where(signals[coin]>signals[""-1""],1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""p>-2""]","numpy.where(signals[coin]>signals[""-2""],1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
signals['short'],"numpy.where(signals[coin]<signals[""stop""],-1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
signals['short2'],"numpy.where(signals[coin]<signals[""stop2""],-1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""p>2""]","numpy.where(signals[coin]>signals[""2""],1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""p>1""]","numpy.where(signals[coin]>signals[""1""],1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""short""]","numpy.where(signals[coin]<signals[""-1""],-1.0,0.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"signals[""positions""]","numpy.where(signals[""positions""]==signals[""ss""],0.0,1.0)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
prices['returns'],numpy.log(prices[coin]/prices[coin].shift(1),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
action,"random.randint(-1,1)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
state_idx,"random.randint(0,2)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
action_idx,"random.randint(0,2)",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
v,datetime.datetime.fromtimestamp(int(v),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
v,datetime.datetime.fromtimestamp(int(v),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
p,"datetime.datetime.strptime(p,'%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
n,"datetime.datetime.strptime(n,'%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
st,"datetime.datetime.strptime(d,'%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
end,"datetime.datetime.strptime(lastn[c+1],'%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
st,"datetime.datetime.strptime(d,'%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
end,"datetime.datetime.strptime(p_dates[c+1],'%Y-%m-%d')",CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
epoch,datetime.datetime.utcfromtimestamp(0),CLUSTER_0,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"plt.imshow(x_train[random_num],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.imshow(x_train[random_num],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.imshow(x_train[random_num],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.imshow(x_train[random_num],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.imshow(x_train[random_num],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.imshow(x_train[random_num],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,pandas.read_html('http://space-facts.com/mars/'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
K,"numpy.arange(0,Nk,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
K2,"numpy.arange(0,Nk2,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Rk,"numpy.zeros((Nk,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
qrows,"numpy.concatenate([np.arange(0,10,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
autocovs2,"numpy.correlate(Qp,Qp,mode='full')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
R,"numpy.corrcoef(Qtm1,Qt)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
R,"numpy.corrcoef(Qtmk,Qt)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
R,"numpy.corrcoef(Qtmk,Qt)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_pickle('MFBoiseDischarge_WY2001-2017.pkl'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
response,requests.get(target_url),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
response,requests.get(first_link),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
response,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(arrange_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
img,numpy.array(img),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
a,numpy.zeros(10),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
rnd_choice,"random.choice([0,1])",CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_ter,sklearn.decomposition.KernelPCA(kernel='rbf'),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
X_bis,sklearn.decomposition.PCA(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.asarray(im),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.asarray(img_pil),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
weekdays_spending_df,pandas.DataFrame(weekdays_spending),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
weekdays_spending_df,pandas.DataFrame(weekdays_spending),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays,pandas.DataFrame(df_date_twenty),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays,pandas.DataFrame(df_date_twenty),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays_up,pandas.DataFrame(df_date_twenty_up),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays_up,pandas.DataFrame(df_date_twenty_up),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays_up,pandas.DataFrame(df_date_twenty_up),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays_up,pandas.DataFrame(df_date_twenty_up),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays_up,pandas.DataFrame(df_date_twenty_up),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_twenty_weekdays_up,pandas.DataFrame(df_date_twenty_up),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_date_thirty_weekdays,pandas.DataFrame(df_date_thirty),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_raw,"pandas.read_csv(r""Card_Spanding_cl5.csv"",engine=""python"",encoding='utf-8-sig')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
summary,"pandas.DataFrame(columns=[""City""],data=city)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
raw_data,"pandas.read_csv(""../Dataset/stores.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(20,5)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
displacement_field,"numpy.zeros((width,height,2)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
vector_field,"numpy.zeros((width,height,2)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
trial_mouse_data,"pandas.merge(clin_trial_data,mouse_drug_data,how='left',on='MouseID')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clin_trial_data,"pandas.read_csv(""raw_data/clinicaltrial_data.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mouse_drug_data,"pandas.read_csv(""raw_data/mouse_drug_data.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x,y,palette=colors)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start_time,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
start,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_7
df,pandas.DataFrame(data=d),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'type':['FirstDeliveryPromo','LapsedCustomerPromo','MonthlySubscription','PercentageDiscount','no_promo'],'av_dollar_per_order':[778.360000,1059.150000,836.657064,743.980000,809.572466]})",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df2,"pandas.DataFrame({'type':['FirstDeliveryPromo','LapsedCustomerPromo','MonthlySubscription','PercentageDiscount','no_promo'],'av_rev_per_order':[769.601193,0,1166.043670,763.562000,861.854900]})",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
orders_prom,"pandas.merge(orders,promo_codes,left_on='id',right_on='order_id',how='left')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
orders_prom_stores,"pandas.merge(orders_prom,stores,left_on='store_id',right_on='id',how='left')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
orders_prom_stores_prod,"pandas.merge(sub_df,products,left_on='id',right_on='store_id',how='left')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
orders,"pandas.read_csv(""orders.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
order_items,"pandas.read_csv(""order_items.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
promo_codes,"pandas.read_csv(""promo_codes.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
restaurants,"pandas.read_csv(""restaurants.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
categories,"pandas.read_csv(""categories.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
categories_products,"pandas.read_csv(""categories_products.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
products,"pandas.read_csv(""products.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
stores,"pandas.read_csv(""stores.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
invoices,"pandas.read_csv(""invoices.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
invoice_items,"pandas.read_csv(""invoice_items.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
orders.created_at,pandas.to_datetime(orders.created_at),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
color,seaborn.color_palette(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
weights,numpy.zeros(features.shape[1]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
scores,"numpy.dot(features,weights)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
scores,"numpy.dot(features,weights)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
gradient,"numpy.dot(features.T,output_error_signal)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
intercept,"numpy.ones((features.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ll,numpy.sum(target*scores-np.log(1+np.exp(scores),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
simulated_labels,numpy.hstack((np.zeros(num_observations),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features,"numpy.hstack((intercept,features)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
simulated_separableish_features,"numpy.vstack((x1,x2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
flattened,pandas.DataFrame(min_max_pivot.to_records(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
flattened,pandas.DataFrame(min_max_pivot.to_records(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
flattened,pandas.DataFrame(min_max_pivot.to_records(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
feature_index,pandas.Index(explore_features),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
coeff_pivot,"pandas.pivot_table(new_df,index=['name','value','index'],columns=None,margins=False,values='abs_value')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
min_max_pivot,"pandas.pivot_table(new_df,index=['name'],values=['value'],aggfunc=[np.min,np.max])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
coeff_pivot,"pandas.pivot_table(new_df,index=['name','value','index'],columns=None,margins=False,values='abs_value')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
min_max_pivot,"pandas.pivot_table(new_df,index=['name'],values=['value'],aggfunc=[np.min,np.max])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
coeff_pivot,"pandas.pivot_table(new_df,index=['name','value','index'],columns=None,margins=False,values='abs_value')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
min_max_pivot,"pandas.pivot_table(new_df,index=['name'],values=['value'],aggfunc=[np.min,np.max])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
demographics['registr_dt'],pandas.to_datetime(demographics['registr_dt']),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
now,pandas.to_datetime('today'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
hist_series,numpy.array(demographics[feature].astype('string'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
spread,"numpy.logspace(-1,4,num=20)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
counts,collections.Counter(hist_series),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
calib,numpy.array(line[:-1].split(''),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
CALIB,"numpy.array([[F,0,W/2,EXT[0]],[0,F,H/2,EXT[1]],
[0,0,1,EXT[2]]],dtype=np.float32)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
depth,"numpy.array([location[2]],dtype=np.float32)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
pt_2d,numpy.array([(bbox[0]+bbox[2]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
ct,numpy.array(ct),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
r,numpy.array(vertexes),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
R,"numpy.array([[c,0,s],[0,1,0],[-s,0,c]],dtype=np.float32)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
corners,"numpy.array([x_corners,y_corners,z_corners],dtype=np.float32)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
R,"numpy.array([[c,0,s],[0,1,0],[-s,0,c]],dtype=np.float32)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
orientation_3d,"numpy.array([[0,dim[2]],[0,0],[0,0]],dtype=np.float32)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
vc,numpy.zeros(18),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
pts_3d_homo,"numpy.concatenate(
[pts_3d,np.ones((pts_3d.shape[0],1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
corners_3d,"numpy.dot(R,corners)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
pts_2d,"numpy.dot(P,pts_3d_homo.transpose(1,0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
orientation_3d,"numpy.dot(R,orientation_3d)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
"c,s",numpy.cos(rotation_y),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
"c,s",numpy.cos(rotation_y),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_1
sanca,"pandas.read_csv('gera_serie_SC.txt',sep=';')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sampa,"pandas.read_csv('gera_serie_SP.txt',sep=';')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sanca['Data'],pandas.to_datetime(sanca['Data']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sampa['Data'],pandas.to_datetime(sampa['Data']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,7)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,7)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(18,10)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Counts_np,numpy.array(Counts),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"plt.scatter(np.array(X),np.array(Y),c",numpy.array(New_labels),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Counts,numpy.zeros(len(Centers),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('checkins.csv',engine='python')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clustering,sklearn.cluster.MeanShift(bandwidth=0.1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train_augmented,numpy.array(X_train_augmented),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_train_augmented,numpy.array(y_train_augmented),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
X,numpy.array(ham_emails+spam_emails),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y,numpy.array([0]*len(ham_emails),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
image,"numpy.concatenate(row_images,axis=0)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
X_train_expanded,numpy.concatenate(X_train_expanded),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_train_expanded,numpy.concatenate(y_train_expanded),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
shifted_images,"numpy.apply_along_axis(shift_digit,axis=1,arr=X_train,dx=dx,dy=dy)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
mnist,"sklearn.datasets.fetch_openml('mnist_784',version=1)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
sgd_clf,"sklearn.linear_model.SGDClassifier(max_iter=1000,tol=1e-3,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
svm_scores,"sklearn.model_selection.cross_val_score(svm_clf,X_train,y_train,cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
forest_scores,"sklearn.model_selection.cross_val_score(forest_clf,X_train,y_train,cv=10)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
score,"sklearn.model_selection.cross_val_score(log_clf,X_train_transformed,y_train,cv=3,verbose=3)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
skfolds,"sklearn.model_selection.StratifiedKFold(n_splits=3,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_train_pred,"sklearn.model_selection.cross_val_predict(sgd_clf,X_train,y_train_5,cv=3)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_scores,"sklearn.model_selection.cross_val_predict(sgd_clf,X_train,y_train_5,cv=3,
method=""decision_function"")",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_probas_forest,"sklearn.model_selection.cross_val_predict(forest_clf,X_train,y_train_5,cv=3,
method=""predict_proba"")",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_train_pred_forest,"sklearn.model_selection.cross_val_predict(forest_clf,X_train,y_train_5,cv=3)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_train_pred,"sklearn.model_selection.cross_val_predict(sgd_clf,X_train_scaled,y_train,cv=3)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_train_knn_pred,"sklearn.model_selection.cross_val_predict(knn_clf,X_train,y_multilabel,cv=3)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
y_probas_dmy,"sklearn.model_selection.cross_val_predict(dmy_clf,X_train,y_train_5,cv=3,method=""predict_proba"")",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
conf_mx,"sklearn.metrics.confusion_matrix(y_train,y_train_pred)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
"precisions,recalls,thresholds","sklearn.metrics.precision_recall_curve(y_train_5,y_scores)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_train_5,y_scores)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
"fpr_forest,tpr_forest,thresholds_forest","sklearn.metrics.roc_curve(y_train_5,y_scores_forest)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
"fprr,tprr,thresholdsr","sklearn.metrics.roc_curve(y_train_5,y_scores_dmy)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
forest_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
forest_clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
svm_clf,"sklearn.svm.SVC(gamma=""auto"",random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
svm_clf,"sklearn.svm.SVC(gamma=""auto"")",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
ovr_clf,"sklearn.multiclass.OneVsRestClassifier(SVC(gamma=""auto"",random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
knn_clf,"sklearn.neighbors.KNeighborsClassifier(weights='distance',n_neighbors=4)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(**grid_search.best_params_),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
dmy_clf,sklearn.dummy.DummyClassifier(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(knn_clf,param_grid,cv=5,verbose=3)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
self.most_frequent_,pandas.Series([X[c].value_counts(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
num_pipeline,"sklearn.pipeline.Pipeline([
(""select_numeric"",DataFrameSelector([""Age"",""SibSp"",""Parch"",""Fare""])",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
cat_pipeline,"sklearn.pipeline.Pipeline([
(""select_cat"",DataFrameSelector([""Pclass"",""Sex"",""Embarked""])",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
preprocess_pipeline,"sklearn.pipeline.Pipeline([
(""email_to_wordcount"",EmailToWordCounterTransformer()",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
preprocess_pipeline,"sklearn.pipeline.FeatureUnion(transformer_list=[
(""num_pipeline"",num_pipeline)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
structures,collections.Counter(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
word_counts,collections.Counter(text.split(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
stemmed_word_counts,collections.Counter(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
total_count,collections.Counter(),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
text,"re.sub('<head.*?>.*?</head>','',html,flags=re.M|re.S|re.I)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
text,"re.sub('<a\s.*?>','HYPERLINK',text,flags=re.M|re.S|re.I)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
text,"re.sub('<.*?>','',text,flags=re.M|re.S)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
text,re.sub(r'(\s*\n),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
text,re.sub(r'\d+(?:\.\d*(?:[eE]\d+),CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
text,"re.sub(r'\W+','',text,flags=re.M)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
log_clf,"sklearn.linear_model.LogisticRegression(solver=""lbfgs"",random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
log_clf,"sklearn.linear_model.LogisticRegression(solver=""lbfgs"",random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_9,CLUSTER_23,CLUSTER_0
data,"pandas.read_sql('''
SELECT
system_id,record_type,file_date,bus_id
FROMapc_raw_datapoints
GROUPBYsystem_id,record_type,bus_id,file_date''',
DB_ENGINE)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
export_df,"pandas.read_sql_query('''
SELECT
raw_record
FROM
apc_raw_datapoints
WHERE
file_date=TO_DATE(:file_date,'YYYY-MM-DD')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
game_logs,pandas.read_csv('data/retrograde_gamelog.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mlb_elo,"pandas.read_csv('data/mlb_final.csv',\
low_memory=False,index_col=[0])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
rg_codes,"pandas.read_csv('data/rg_codes_by_team.csv',index_col=[0])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
game_logs['date'],"pandas.to_datetime(game_logs['date'],format='%Y%m%d')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mlb_elo['date'],"pandas.to_datetime(mlb_elo['date'],format='%Y-%m-%d')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
states_df,"pandas.DataFrame(states,index=state_id,columns=['states'])",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
species,"pandas.DataFrame(index=[1,2,3,4],columns=['tree1','tree2','tree3','tree4','tree5'])",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
regions,"pandas.read_csv('State_Region.csv',index_col=0)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
people,pandas.DataFrame(people_dict),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
d2,"pandas.DataFrame(
people_dict,
columns=[""birthyear"",""weight"",""height""],
index=[""bob"",""alice"",""eugene""]
)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
d3,"pandas.DataFrame(
values,
columns=[""birthyear"",""children"",""hobby"",""weight""],
index=[""alice"",""bob"",""charles""]
)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
d3,"pandas.DataFrame(
masked_array,
columns=[""birthyear"",""children"",""hobby"",""weight""],
index=[""alice"",""bob"",""charles""]
)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
d4,"pandas.DataFrame(
d3,
columns=[""hobby"",""children""],
index=[""alice"",""bob""]
)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
people,"pandas.DataFrame({
""birthyear"":{""alice"":1985,""bob"":1984,""charles"":1992},
""hobby"":{""alice"":""Biking"",""bob"":""Dancing""},
""weight"":{""alice"":68,""bob"":83,""charles"":112},
""children"":{""bob"":3,""charles"":0}
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
d5,"pandas.DataFrame(
{
(""public"",""birthyear"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
grades,"pandas.DataFrame(grades_array,columns=[""sep"",""oct"",""nov""],index=[""alice"",""bob"",""charles"",""darwin""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
bonus_points,"pandas.DataFrame(bonus_array,columns=[""oct"",""nov"",""dec""],index=[""bob"",""colin"",""darwin"",""charles""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
large_df,"pandas.DataFrame(much_data,columns=list(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
my_df,"pandas.DataFrame(
[[""Biking"",68.5,1985,np.nan],[""Dancing"",83.1,1984,3]],
columns=[""hobby"",""weight"",""birthyear"",""children""],
index=[""alice"",""bob""]
)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
city_loc,"pandas.DataFrame(
[
[""CA"",""SanFrancisco"",37.781334,-122.416728],
[""NY"",""NewYork"",40.705649,-74.008344],
[""FL"",""Miami"",25.791100,-80.320733],
[""OH"",""Cleveland"",41.473508,-81.739791],
[""UT"",""SaltLakeCity"",40.755851,-111.896657]
],columns=[""state"",""city"",""lat"",""lng""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
city_pop,"pandas.DataFrame(
[
[808976,""SanFrancisco"",""California""],
[8363710,""NewYork"",""New-York""],
[413201,""Miami"",""Florida""],
[2242193,""Houston"",""Texas""]
],index=[3,4,5,6],columns=[""population"",""city"",""state""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"pandas.Series([2,-1,3,5])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s2,"pandas.Series([68,83,112,68],index=[""alice"",""bob"",""charles"",""darwin""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
surprise,"pandas.Series([1000,1001,1002,1003])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s3,pandas.Series(weights),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s4,"pandas.Series(weights,index=[""colin"",""alice""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s5,"pandas.Series([1000,1000,1000,1000])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
meaning,"pandas.Series(42,[""life"",""universe"",""everything""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s6,"pandas.Series([83,68],index=[""bob"",""alice""],name=""weights"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s7,"pandas.Series(temperatures,name=""Temperature"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_series,"pandas.Series(temperatures,dates)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
quarterly_revenue,"pandas.Series([300,320,290,390,320,360,310,410],index=quarters)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"people[""pets""]","pandas.Series({""bob"":0,""charles"":5,""eugene"":1})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
result_concat,"pandas.concat([city_loc,city_pop])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dates,"pandas.date_range('2016/10/295:30pm',periods=12,freq='H')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
all_cities,"pandas.merge(left=city_loc,right=city_pop,on=""city"",how=""outer"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
quarters,"pandas.period_range('2016Q1',periods=8,freq='Q')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
months_2016,"pandas.period_range(""2016"",periods=12,freq=""M"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
my_df_loaded,"pandas.read_csv(""my_df.csv"",index_col=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
us_cities,"pandas.read_csv(csv_url,index_col=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
grades_array,"numpy.array([[8,8,9],[10,9,9],[4,8,2],[9,10,10]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
bonus_array,"numpy.array([[0,np.nan,2],[np.nan,1,0],[0,1,0],[3,3,0]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
much_data,"numpy.fromfunction(lambdax,y:(x+y*y)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
masked_array,"numpy.ma.asarray(values,dtype=np.object)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(filename,sep='\t')",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv('data/test.tsv',sep='\t')",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
result_vector,numpy.zeros(dict_size),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
non_zero_elements_count,numpy.count_nonzero(row),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
text,"re.sub(REPLACE_BY_SPACE_RE,"""",text)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
text,"re.sub(BAD_SYMBOLS_RE,"""",text)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
REPLACE_BY_SPACE_RE,re.compile('[/(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
BAD_SYMBOLS_RE,"re.compile('[^0-9a-z
STOPWORDS=set(stopwords.words('english')",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
tags_counts,collections.Counter(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
words_counts,collections.Counter(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mlb,sklearn.preprocessing.MultiLabelBinarizer(classes=sorted(tags_counts.keys(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ovr,sklearn.multiclass.OneVsRestClassifier(lr),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(penalty=regl,C=C)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
combined,"pandas.concat((train_df,test_df)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combined['Age_band'],"pandas.cut(combined['Age'],5)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df,pandas.read_csv('../data/train.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df,pandas.read_csv('../data/test.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"seaborn.FacetGrid(train_df,row='Pclass',col='Sex')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/04_Apply/Students_Alcohol_Consumption/student-mat.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig1,"matplotlib.pyplot.figure(figsize=(5,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig2,"matplotlib.pyplot.figure(figsize=(5,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
maximum_price,numpy.amax(wine['quality']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
minimum_price,numpy.amin(wine['quality']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_price,numpy.mean(wine['quality']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_price,numpy.std(wine['quality']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
median_price,numpy.median(wine['quality']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=8),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(wine_attributes,wine_value,test_size=0.25)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_conf_matrix,"sklearn.metrics.confusion_matrix(y_test,lr_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_acc_score,"sklearn.metrics.accuracy_score(y_test,lr_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_feat,"pandas.DataFrame(scaled_features,columns=data.columns[:-1])",CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('bank_note_data.csv'),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc,sklearn.ensemble.RandomForestClassifier(n_estimators=200),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
boundaries,"numpy.array([[0,sim_param.x_length],[0,sim_param.y_length]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
placement_rsrc_range,"numpy.array([[2,3],[8,16],[2,5]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
placement_rsrc_range,"numpy.array([[1,1],[0.5,1],[0.5,1]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
placement_rsrc_range,"numpy.array([[1,2],[2,4],[1,2]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
weak_range,"numpy.array([[4,8],[1000,1500],[4,16]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
strong_range,"numpy.array([[50,100],[100000,150000],[300,600]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
rsrc_cost,"numpy.array([0.03,0.01,0.05])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
"servers_l3.append(Server(boundaries,level","3,rand_locs=False,locs=numpy.array([200,200])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
lv_minmax,"numpy.array(([[500,1000],[10000,20000],[30000,50000]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
link_costs,"numpy.array([1,1,1])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
locs,"numpy.zeros((sim_param.time_steps,2*num_users)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
locs,"numpy.zeros((sim_param.time_steps,num_users)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
locs,"numpy.zeros((sim_param.time_steps,2*num_svr)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
locs,"numpy.zeros((sim_param.time_steps,2*num_svr)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
Z,numpy.sum(s),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
train,pandas.read_csv('data/gender_classification.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
groups,collections.defaultdict(list),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
district_summary,"pandas.DataFrame({""TotalSchools"":[total_schools],""TotalStudents"":[total_students],
""TotalBudget"":[total_budget],""AverageMathScore"":[average_math],
""AverageReadingScore"":[average_reading],""%PassingMath"":[percent_passing_math],
""%PassingReading"":[percent_passing_reading],""%OverallPassing"":[overall_passing]

})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_summary,"pandas.DataFrame({""SchoolType"":school_names,
""TotalStudents"":students_counts,
""TotalSchoolBudget"":school_budget,
""PerStudentBudget"":budget_per_student,
""AverageMathScore"":school_math,
""AverageReadingScore"":school_reading,
""%PassingMath"":math_percentage,
""%PassingReading"":reading_percentage,
""%OverallPassing"":overall_passing_rate
})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
math_by_grade,"pandas.DataFrame({'9th':math_ninth,
'10th':math_tenth,
'11th':math_eleventh,
'12th':math_twelveth,

})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
reading_by_grade,"pandas.DataFrame({'9th':reading_ninth,
'10th':reading_tenth,
'11th':reading_eleventh,
'12th':reading_twelveth,

})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"school_summary[""SpendingRanges""]","pandas.cut(per_school_capita,bins,labels=bin_names)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_data_complete,"pandas.merge(student_data,school_data,how=""left"",on=[""school_name"",""school_name""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_data,pandas.read_csv(school_data_to_load),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
student_data,pandas.read_csv(student_data_to_load),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ds,collections.defaultdict(int),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
dp,collections.defaultdict(int),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
dp,collections.defaultdict(int),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
self._q,collections.deque(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,"numpy.array([y,x])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,"numpy.array([y,x1,x2])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.transpose(data),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.transpose(data),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
missingValuesDf,"pandas.DataFrame({'ColumnName':df.columns,
'Percentofdatamissing':percentMissing})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
missingValuesDf,"pandas.DataFrame({'ColumnName':df.columns,
'Percentofdatamissing':percentMissing})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train_pred_final,"pandas.DataFrame({'Convert':y_train.values,'Convert_Prob':y_train_pred})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cutoff_df,"pandas.DataFrame(columns=['prob','accuracy','sensi','speci'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,dummyVariables],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,converted],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummyVariables,"pandas.get_dummies(df[['LeadOrigin','LeadSource','LastActivity','LastNotableActivity']],drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
leadsData,"pandas.read_csv(""Data/Leads.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
corrmat,numpy.corrcoef(df_num.transpose(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=0.7,test_size=0.3,random_state=100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfe,"sklearn.feature_selection.RFE(logreg,15)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
confusion,"sklearn.metrics.confusion_matrix(y_train_pred_final.Convert,y_train_pred_final.predicted)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm1,"sklearn.metrics.confusion_matrix(y_train_pred_final.Convert,y_train_pred_final[i])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
confusion2,"sklearn.metrics.confusion_matrix(y_train_pred_final.Convert,y_train_pred_final.final_predicted)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
auc_score,"sklearn.metrics.roc_auc_score(actual,probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(actual,probs,
drop_intermediate=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_train_pred_final.Convert,y_train_pred_final.Convert_Prob,drop_intermediate=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"p,r,thresholds","sklearn.metrics.precision_recall_curve(y_train_pred_final.Convert,y_train_pred_final.Convert_Prob)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame([[1.,6.5,3.],[1.,NA,NA],
[NA,NA,NA],[NA,6.5,3.]])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(np.random.randn(7,3)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(np.random.randn(6,3)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.DataFrame({'k1':['one','two']*3+['two'],'k2':[1,1,2,3,3,4,4]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.DataFrame({'food':['bacon','pulledpork','bacon',
'Pastrami','cornedbeef','Bacon',
'pastrami','honeyham','novalox'],
'ounces':[4,3,12,6,7.5,8,3,5,6]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.DataFrame(np.arange(12),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.DataFrame(np.random.randn(1000,4)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(np.arange(5*4),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'key':['b','b','a','c','a','b'],
'datal':range(6)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dummies,"pandas.DataFrame(zero_matrix,columns=genres)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
string_data,"pandas.Series(['aardvark','artichoke',np.nan,'avocado'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.Series([1,NA,3.5,NA,7])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.Series([1.,NA,3.5,NA,7])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.Series([1.,-999.,2.,-999.,-1000.,3.])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
choices,"pandas.Series([5,7,-1,6,4])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.Series(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
cats,"pandas.cut(ages,bins)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dummies,"pandas.get_dummies(df['key'],prefix='key')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
cats,"pandas.qcut(data,4)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
movies,"pandas.read_table('datasets/movielens/movies.dat',
sep=""::"",
header=None,names=mnames)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
genres,pandas.unique(all_genres),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
zero_matrix,numpy.zeros((len(movies),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data[np.abs(data)>3],numpy.sign(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
regex,re.compile('\s+'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
X_,"numpy.zeros([X.shape[0],28,28,3],np.uint8)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
mnist_train,"numpy.concatenate([mnist_train,mnist_train,mnist_train],3)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
mnist_test,"numpy.concatenate([mnist_test,mnist_test,mnist_test],3)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
Q3_cum,"numpy.concatenate([Q3_cum,np.expand_dims(Q3_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
Q4_cum,"numpy.concatenate([Q4_cum,np.expand_dims(Q4_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta3_cum,"numpy.concatenate([eta3_cum,np.expand_dims(eta3_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta4_cum,"numpy.concatenate([eta4_cum,np.expand_dims(eta4_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
coeffs,numpy.ones(len(hyps),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta3_np,"numpy.mean(g3_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta4_np,"numpy.mean(g3_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
Q3_mean,"numpy.mean(Q3_cum,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
Q4_mean,"numpy.mean(Q4_cum,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta3_mean,"numpy.mean(eta3_cum,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta4_mean,"numpy.mean(eta4_cum,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
"xmean,xvar","numpy.mean(X,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
val,"numpy.squeeze(
sign*np.matmul(beta,np.matmul((Q+eps*np.eye(Q.shape[0])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
total_train,"numpy.vstack([mnist_train,mnistm_train])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
total_test,"numpy.vstack([mnist_test,mnistm_test])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
total_train_domain,"numpy.vstack([np.tile([1.,0.],[ntrain,1])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
total_test_domain,"numpy.vstack([np.tile([1.,0.],[ntest,1])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
pixel_mean,"numpy.vstack([mnist_train,mnistm_train])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
comb_imgs,"numpy.vstack([source_test_img[:num_test],target_test_img[:num_test]])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
comb_labels,"numpy.vstack([source_test_label[:num_test],target_test_label[:num_test]])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
comb_domain,"numpy.vstack([np.tile([1.,0.],[num_test,1])",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
Q3_cum,"numpy.expand_dims(Q3_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
Q4_cum,"numpy.expand_dims(Q4_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta3_cum,"numpy.expand_dims(eta3_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
eta4_cum,"numpy.expand_dims(eta4_np,0)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
res,"scipy.optimize.minimize(opt_obj,beta,
args=(Q,1.0,eps)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
tsne,"sklearn.manifold.TSNE(perplexity=30,n_components=2,init='pca',n_iter=3000)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
fig,matplotlib.pyplot.figure(),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
ax,matplotlib.pyplot.subplot(111),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_0,CLUSTER_3
df,"pandas.DataFrame(np.random.normal(50,20,1000)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(np.random.gamma(5,.5,1000)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame([coll.find_one(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../data/yellow_tripdata_2017-01_subset10000rows.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_sql(sql,con=db,index_col='id')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df.tpep_pickup_datetime,pandas.to_datetime(df.tpep_pickup_datetime),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df.tpep_dropoff_datetime,pandas.to_datetime(df.tpep_dropoff_datetime),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"matplotlib.pyplot.legend(['trip_duration','tip_amount'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"matplotlib.pyplot.legend(['trip_duration','tip_amount'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel(''),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel(''),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.boxplot(df.measure,ax=ax[1])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.measure,ax=ax[0])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.measure_zscore,ax=ax[0])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,seaborn.distplot(df[df.measure_zscore<3*df.measure_zscore.std(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.measure,ax=ax[0])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,seaborn.distplot(df.measure.apply(np.sqrt),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df[keep_idx].measure,ax=ax[2])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.trip_duration,ax=ax[0])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.tip_amount,ax=ax[1])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.trip_duration,ax=ax[2])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df.tip_amount,ax=ax[2])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,seaborn.distplot(zscore(df.trip_duration),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,seaborn.distplot(zscore(df.tip_amount),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
st,datetime.datetime.now(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
st,datetime.datetime.now(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
infix_re,re.compile(r'''[-~]'''),CLUSTER_30,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
wine_std,pandas.DataFrame(scale(wine),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mydata,"pandas.DataFrame(mydata[0],columns=[""X"",""Y""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(X,columns=['x1','x2'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
wine,"pandas.read_csv(myfile,sep="";"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clusterer,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=int(k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sample_silhouette_values,"sklearn.metrics.silhouette_samples(X,cluster_labels)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Ks,"numpy.linspace(2,15,14)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cluster_model,"sklearn.cluster.AgglomerativeClustering(n_clusters=n_clusters,affinity='euclidean',linkage='ward')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
hclust,"sklearn.cluster.AgglomerativeClustering(n_clusters=s,affinity='euclidean',linkage='ward')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mydata,"sklearn.datasets.make_moons(n_samples=2000,noise=0.05)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=0.2,min_samples=10,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=0.3,min_samples=10,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=0.3,min_samples=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,"pandas.read_csv(url,names=names)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
"X_train,X_validation,Y_train,Y_validation","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=1)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_val_score(model,X_train,Y_train,cv=kfold,scoring='accuracy')",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
kfold,sklearn.model_selection.StratifiedKFold(n_splits=10),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
model,sklearn.svm.SVC(gamma='auto'),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
sigma,numpy.arange(sig_max),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sigma_arr,numpy.arange(sig_max),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
powers,numpy.arange(5),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
f,"numpy.zeros((num_gen+1,num_reps,num_demes)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
eqF_arr,"numpy.zeros((sig_max,num_demes)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sfs,numpy.zeros(n+1),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sfs,numpy.zeros(tuple([n+1]),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sfs_arr,"numpy.zeros((sig_max,j+1)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p,"numpy.clip(a=p,a_min=0,a_max=1)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg_sfs,"numpy.mean(sfs,axis=(2,3)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg_sfs,"numpy.mean(sfs,axis=(2,3)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg_F1,"numpy.mean(F1,axis=2)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg_F2,"numpy.mean(F2,axis=2)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg_F,"numpy.mean(gaussian_filter1d(f,sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
f[0],"numpy.repeat(numpy.repeat(p0,num_reps)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
eq_F,"scipy.ndimage.gaussian_filter1d(eq_f,sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
eqF_arr[s],"scipy.ndimage.gaussian_filter1d(eq_f_single,sigma=sigma[s],mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F,"scipy.ndimage.gaussian_filter1d(f,sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F,"scipy.ndimage.gaussian_filter1d(f,sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F,"scipy.ndimage.gaussian_filter1d(f,sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F,"scipy.ndimage.gaussian_filter1d(f,sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F,"scipy.ndimage.gaussian_filter1d(f[-1],sigma=sigma,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F1,"scipy.ndimage.gaussian_filter1d(f,sigma=1,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
F2,"scipy.ndimage.gaussian_filter1d(f,sigma=2,mode=""wrap"")",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sfs[i],"scipy.special.binom(n,i)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
encoder,sklearn.preprocessing.LabelBinarizer(),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_3
summary_df,"pandas.DataFrame({""BestBitcoinOpen"":[bitcoin_open],
""BestBitcoinClose"":[bitcoin_close],
""TotalBitcoinVolume"":str(bitcoin_volume)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
crypto_df,"pandas.merge(bitcoin_df,dash_df,on=""Date"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
alternative_merge,"pandas.merge(
bitcoin_df,dash_df,on=""Date"",suffixes=(""_Bitcoin"",""_Dash"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
bitcoin_df,pandas.read_csv(bitcoin_csv),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dash_df,pandas.read_csv(dash_csv),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
indices,numpy.arange(len(X),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
ones,numpy.where(y==1),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
zeros,numpy.where(y==0),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
order,"numpy.argsort(X[:,0])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_classification(n_samples=NUM_SAMPLES,
n_features=NUM_FEATURES,
n_informative=NUM_FEATURES,
n_redundant=0,
n_classes=2,
n_clusters_per_class=1,
class_sep=0.75,
random_state=54312)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
df.review_count.hist(bins,"numpy.arange(0,40000,400)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.array([1,2,3,4,5])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
b,"numpy.array([1,2,3,4,5])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""all.csv"",header=None,
names=[""rating"",'review_count','isbn','booktype','author_url','year','genre_urls','dir','rating_count','name'],
)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
inputs,"numpy.array([[0.5,-0.2,0.1]])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
targets,numpy.array([[0.4]]),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_w_i_h,"numpy.array([[0.1,-0.2],
[0.4,0.5],
[-0.3,0.2]])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_w_h_o,"numpy.array([[0.3],
[-0.1]])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
rides,pandas.read_csv(data_path),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(rides.ix[test_data.index]['dteday']),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylim(),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
currentAxis,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
currentAxis,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
response,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
new_df,"pandas.DataFrame({
""KeywordUsed"":df['kw'],
""Page"":df['page_nbr'],
""Year"":df['formatted_year'],
""Month"":df['formatted_month'],
""Title"":df['article_title'],
""Date"":df['formatted_date'],
""URL"":df['web_url'],

})",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
"new_df[""MonthGroup""]","pandas.cut(
new_df['Month'],bins,labels=group_labels)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
ausbeer,"pandas.read_csv(""ausbeer.csv"")",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
measles,"pandas.read_csv(""measles.csv"",parse_dates=['month'])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
elec,"pandas.read_csv(""elec.csv"",parse_dates=['month'])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
lags,"numpy.arange(1,9,1)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
numerator,numpy.sum((y_ts[lag:]-mean_y),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
denom,"numpy.sum(np.power(y_ts-mean_y,2)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,12)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(4,3,
figsize=(12,12)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(5,3,
figsize=(12,12)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(5,3,
figsize=(12,12)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('Data/taxi_data.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X,"numpy.array(data[['LON','LAT']],dtype='float64')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
no_outliers,numpy.array([(counter+2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
no_outliers,numpy.array([(counter+2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
class_predictions,numpy.load('Data/sample_clusters.npy'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
class_predictions,numpy.load('Data/sample_clusters_improved.npy'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
cols,"random.sample(cols,n)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
model,"sklearn.cluster.KMeans(n_clusters=k,random_state=17,n_init=1,max_iter=x)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
model,"sklearn.cluster.KMeans(n_clusters=k,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
model,"sklearn.cluster.KMeans(n_clusters=k,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
model,"sklearn.cluster.DBSCAN(eps=0.01,min_samples=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
curr_silhouette,"sklearn.metrics.silhouette_score(X,class_predictions)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"X_blob,_","sklearn.datasets.make_blobs(n_samples=1000,centers=10,
cluster_std=0.5,random_state=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"X_blob,_","sklearn.datasets.make_blobs(n_samples=1000,centers=50,
cluster_std=1,random_state=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
data_dict,collections.defaultdict(dict),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
popup,"re.sub(r'[^a-zA-Z]+','',row['NAME'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
popup,"re.sub(r'[^a-zA-Z]+','',row['NAME'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,numpy.ravel(r*np.sin(theta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.ravel(r*np.cos(theta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.ravel(r*np.cos(theta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.ravel(r*np.sin(theta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,numpy.ravel(w*np.sin(phi),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
yline,numpy.cos(zline),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ydata,numpy.cos(zdata),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xline,numpy.sin(zline),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xdata,numpy.sin(zdata),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
zline,"numpy.linspace(0,15,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-6,6,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(-6,6,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r,"numpy.linspace(0,6,20)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
theta,"numpy.linspace(-0.9*np.pi,0.8*np.pi,40)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
theta,"numpy.linspace(0,2*np.pi,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.25,0.25,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"r,theta","numpy.meshgrid(r,theta)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"w,theta","numpy.meshgrid(w,theta)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df_bergbahnen,pandas.read_excel('dataprojects/Projections/data/bergbahnen3D.xlsx'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
DATADIR,"os.getenv(""DATADIR"")",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
spreaddb['Spread'][i],"re.sub(""½"","".5"",spread)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
res,"requests.get(url,'html.parser')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
res,"requests.get(url,'html.parser')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db['Odds'],numpy.zeros(len(db['Team']),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db['Line'],numpy.zeros(len(db['Team']),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db['Cover'],numpy.zeros(len(db['Team']),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db['Cover'],numpy.zeros(len(db['Team']),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
moneydb,pandas.DataFrame(),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
spreaddb,pandas.DataFrame(),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
moneydb,"pandas.concat([moneydb,MLdb])",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
spreaddb,"pandas.concat([spreaddb,spreads])",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db,pandas.read_csv(f'{name}.csv'),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cwd,os.getcwd(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
piecewise_fits,"pandas.merge(piecewise_fits[col_order],poly_fits[merge_cols],
on='unit_id',how='left')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
piecewise_fits,pandas.read_csv(piecewise_fits),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
poly_fits,pandas.read_csv(poly_fits),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
samples,"pandas.DataFrame(data.loc[indices],columns=data.keys()",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
reduced_data,"pandas.DataFrame(reduced_data,columns=['Dimension1','Dimension2'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
true_centers,pandas.DataFrame(np.round(true_centers),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(""customers.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,numpy.array(result),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
seq,"numpy.array(list(seq[0,1:,0])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
padding,numpy.ones(len(trainPredict),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,"numpy.reshape(X_train,(X_train.shape[0],X_train.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,"numpy.reshape(X_test,(X_test.shape[0],X_test.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X2frames,"numpy.reshape(X2frames,(X2frames.shape[0],X2frames.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
S2,numpy.cos(signal_range),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
init_seq,"numpy.cos(np.linspace(0,5,X_test.shape[1])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
init_seq,"numpy.cos(np.linspace(0,2,X_test.shape[1])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
init_seq,"numpy.cos(np.linspace(3,5,X_test.shape[1])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
signal_range,"numpy.linspace(0,10*np.pi,num=n_samples,dtype=np.float32)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
signal_range,"numpy.linspace(0,10*np.pi,num=200,dtype=np.float32)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
init_seq,"numpy.linspace(0,1,X_test.shape[1])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(
numpy.random.randint(0,100,size=(100,4)",CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
df,"pandas.concat(pool.map(func,df_split)",CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
df_split,"numpy.array_split(df,num_partitions)",CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
covid,pandas.read_excel('covid-19.xlsx'),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
covid_rus,pandas.read_excel('covid_Rus_09.08-16.08.xlsx'),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
sns_plot,"seaborn.pairplot(
covid_rus[['New_cases','Recovered_in_a_day','Dead_in_a_day']])",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
life4,"pandas.concat([life2,life3])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
life,"pandas.read_csv('/Users/marslast/Dropbox/Transfer/Teaching/DATA201/Datasets/LifeExpectancy.csv',skiprows=4,index_col=0,header=[0])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
X,"numpy.array(data_train.iloc[:,1:])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,"numpy.array(data_test.iloc[:,1:])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
correct,numpy.nonzero(predicted_classes==y_true),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
incorrect,numpy.nonzero(predicted_classes!=y_true),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_train,pandas.read_csv('../input/fashionmnist/fashion-mnist_train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_test,pandas.read_csv('../input/fashionmnist/fashion-mnist_test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=101)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF,"pandas.read_csv('temp_single_cell.txt',sep='\t',header=None)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_01'],"numpy.log2(singleCellDF.iloc[:,15:41].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_02'],"numpy.log2(singleCellDF.iloc[:,41:97].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_03'],"numpy.log2(singleCellDF.iloc[:,97:134].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_03LN'],"numpy.log2(singleCellDF.iloc[:,134:189].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_04'],"numpy.log2(singleCellDF.iloc[:,189:248].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_05'],"numpy.log2(singleCellDF.iloc[:,248:325].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_06'],"numpy.log2(singleCellDF.iloc[:,325:350].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_07'],"numpy.log2(singleCellDF.iloc[:,350:401].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_07LN'],"numpy.log2(singleCellDF.iloc[:,401:454].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_08'],"numpy.log2(singleCellDF.iloc[:,454:477].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_09'],"numpy.log2(singleCellDF.iloc[:,477:537].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_10'],"numpy.log2(singleCellDF.iloc[:,537:553].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
singleCellDF['BC_11'],"numpy.log2(singleCellDF.iloc[:,553:564].astype(float)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(state_towns,columns=['State','RegionName'])",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
hdata2,"pandas.DataFrame(hdata[['State','RegionName']])",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,pandas.ExcelFile('gdplev.xls'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
gdplev,pandas.ExcelFile('gdplev.xls'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
gdplev,pandas.ExcelFile('gdplev.xls'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
unitowns_hdata,"pandas.merge(hdata,unitowns,how='inner',on=['State','RegionName'])",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
hdata2,"pandas.merge(hdata,unitowns_hdata,how='outer',on=['State','RegionName',bottom,bstart,'ratio'])",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
hdata,pandas.read_csv('City_Zhvi_AllHomes.csv'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
gdp['GDP'],pandas.to_numeric(gdp['GDP']),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"t,p",scipy.stats.ttest_ind(ut['ratio'].dropna(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
res1,pandas.DataFrame(data=logreg.predict_proba(test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res2,pandas.DataFrame(data=model2.predict_proba(test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('train_processed.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('test_set.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(20,20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataMat,"numpy.matrix([[1.,2.1],[2.,1.1],[1.3,1.],[1.,1.],[2.,1.],])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
retArray,numpy.ones((shape(dataMatrix),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"m,n",numpy.shape(dataMatrix),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
m,numpy.shape(datMat),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
m,numpy.shape(dataMatrix),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
D,"numpy.mat(ones((5,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dataMatrix,numpy.mat(datMat),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
labelMat,numpy.mat(classLabels),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
numSteps,"10.0;bestStump={};bestClasEst=numpy.mat(zeros((m,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
errArr,"numpy.mat(ones((m,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
D,"numpy.mat(ones((m,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
aggClassEst,"numpy.mat(zeros((m,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
aggError,multiply(sign(aggClassEst)!=numpy.mat(classLabels),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
condaF,sign(aggClassEst)!=numpy.mat(classLabels),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dataMatrix,numpy.mat(datToClass),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
aggClassEst,"numpy.mat(zeros((m,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x1,numpy.arange(3),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x2,numpy.arange(3),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
X,"numpy.linspace(0,1,1000)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,"matplotlib.pyplot.plot(X,Y,'-')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
expon,numpy.multiply(-1*alpha*mat(classLabels),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
D,"numpy.multiply(D,exp(expon)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
aggError,numpy.multiply(sign(aggClassEst),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
condaF,numpy.sign(aggClassEst),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
self.tree,scipy.spatial.KDTree(data),CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
pts,"numpy.array([latitude,longitude])",CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
adult,"pandas.read_csv(""https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"")",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
count_dict,collections.defaultdict(int),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
counter,"collections.Counter([1,2,2,2,3,3,5])",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,"json.loads(""""""
{""foo"":12,
""bar"":[1,2,5]}"""""")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
candidates,numpy.flatnonzero(results['rank_test_score']==i),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
wine,sklearn.datasets.load_wine(),CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
mse,"sklearn.metrics.mean_squared_error(y,y_pred)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
scores,"sklearn.model_selection.cross_val_score(xgb_model,X,y,scoring=""neg_mean_squared_error"",cv=5)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
kfold,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=42)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
search,"sklearn.model_selection.RandomizedSearchCV(xgb_model,param_distributions=params,random_state=42,iid=False,
n_iter=200,cv=3,verbose=1,n_jobs=1,return_train_score=True)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_10,CLUSTER_8,CLUSTER_10,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
end,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
start,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
valid_examples,numpy.array(random.sample(range(valid_window),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
valid_examples,"numpy.append(valid_examples,
random.sample(range(1000,1000+valid_window)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
frequencies,collections.Counter(int_words),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
"fig,ax","matplotlib.pyplot.subplots(figsize=(14,14)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
tsne,sklearn.manifold.TSNE(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_3
internship,"pandas.read_csv(""Internship.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
student,"pandas.read_csv(""Student.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
X,"numpy.array(np.meshgrid(aX0,aX1,indexing='ij')",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
bc,"bc_concave_rotated;grad=numpy.array(np.gradient(solution,bc.gridscale)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
bc,"bc_ball;grad=numpy.array(np.gradient(solution,bc.gridscale)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
e,numpy.array(((np.cos(thetas),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
axes,numpy.full((dim),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
nD,numpy.prod(D.shape[2:]),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"a,b,c","numpy.sort(np.maximum(0.,d2u)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"c,s",numpy.cos(np.pi/6),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
pos_bad,"numpy.logical_or(pos_bad,delta<=0)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
pos_bad,"numpy.logical_or(pos_bad,np.any(v<0,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
pos_inf,numpy.logical_or.reduce(d2u==np.inf),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
result,"numpy.maximum(result,res)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
aX0,"numpy.linspace(-1,1,n)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
mus,"numpy.linspace(0,0.5,n,endpoint=False)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
thetas,"numpy.linspace(0,np.pi,n,endpoint=False)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
aX,"numpy.linspace(-1,1,n)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
mus,"numpy.expand_dims(mus,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
thetas,"numpy.expand_dims(thetas,axis=1)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
SB,"numpy.take_along_axis(SB,np.broadcast_to(oracle,SB.shape[:2]+(1,)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
SB,"numpy.take_along_axis(SB,np.broadcast_to(oracle,SB.shape[:2]+(1,)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
prcp_df,"pandas.DataFrame(prcp_query,columns=['date','prcp'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
stations_df,"pandas.DataFrame(stations_query,columns=['station','prcp'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tobs_df,"pandas.DataFrame(tobs_query,columns=['tobs'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
calc_temps_df,"pandas.DataFrame(calc_temps_d,columns=['tmin','tavg','tmax'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
query_date,"datetime.date(2017,8,23)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
query_date,"datetime.date(2017,8,23)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
start_date,"datetime.date(2017,2,28)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
end_date,"datetime.date(2017,3,5)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
start_date,"datetime.date(2017,2,28)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
end_date,"datetime.date(2017,3,5)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
replace_by_space_re,re.compile('[/(),CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
bad_symbols_re,"re.compile('[^0-9a-z
stopwords_set=set(stopwords.words('english')",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
embeddings[l[0]],"numpy.array(l[1:],dtype=np.float32)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
result,numpy.zeros(dim),CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
tag_vectors,"numpy.zeros((count,embeddings_dim)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
X,"numpy.concatenate([dialogue_df['text'].values,stackoverflow_df['title'].values])",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
dialogue_df,"pandas.read_csv('dialogues.tsv',sep='\t')",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
stackoverflow_df,"pandas.read_csv('tagged_posts.tsv',sep='\t')",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
posts_df,"pandas.read_csv('tagged_posts.tsv',sep='\t')",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.1,random_state=0)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
intent_recognizer,"sklearn.linear_model.LogisticRegression(random_state=0,C=5)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
test_accuracy,"sklearn.metrics.accuracy_score(y_test,y_test_pred)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
test_accuracy,"sklearn.metrics.accuracy_score(y_test,y_test_pred)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
tag_classifier,"sklearn.multiclass.OneVsRestClassifier(LogisticRegression(C=5,random_state=0)",CLUSTER_16,CLUSTER_1,CLUSTER_12,CLUSTER_6,CLUSTER_4
minyear,datetime.datetime.now(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
out,"scipy.stats.linregress(_papers,_citations)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
papers,"pandas.DataFrame(data=0,index=authors_list,columns=range(datetime.now()",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
citations,"pandas.DataFrame(data=0,index=authors_list,columns=range(datetime.now()",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
eps_vals,"numpy.logspace(-2,2,200)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
vectorizer,"sklearn.pipeline.make_pipeline(hasher,TfidfTransformer()",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.MiniBatchKMeans(n_clusters=5,init='k-means++',n_init=1,
init_size=1000,batch_size=5)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=eps,min_samples=2)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=use_eps,min_samples=2)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
country_data,pandas.DataFrame({'CountryName':np.array(Countries_2012_Dataset),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
life_exp_data,pandas.DataFrame({'CountryCode':np.array(Country_Code),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
merged_data,"pandas.merge(left=data,right=country_data,how='inner',on=""CountryCode"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
merged_data,"pandas.merge(left=merged_data,right=life_exp_data,how='inner',on='CountryCode')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""Demographic-Data.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vis1,"seaborn.lmplot(data=data,x='BirthRate',y='InternetUsers',fit_reg=False,hue='IncomeGroup',height=10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vis2,"seaborn.lmplot(data=merged_data,x='BirthRate',y='InternetUsers',fit_reg=False,hue='CountryRegion',size=10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vis3,"seaborn.lmplot(data=merged_data,x='BirthRate',y='LifeExp1960',fit_reg=False,hue='CountryRegion',size=10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vis3,"seaborn.lmplot(data=merged_data,x='BirthRate',y='LifeExp2013',fit_reg=False,hue='CountryRegion',size=10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(titanic,col=""sex"")",CLUSTER_8,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_1
g,"seaborn.JointGrid(x=""fare"",y=""age"",data=titanic)",CLUSTER_8,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_1
titanic,seaborn.load_dataset('titanic'),CLUSTER_8,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_1
intervalsDF,"pandas.DataFrame(columns=['meanSpeed','sdSpeed','maxAccelX','maxAccelY','maxAccelZ',
'maxGyroX','maxGyroY','maxGyroZ','minAccelX','minAccelY',
'minAccelZ','minGyroX','minGyroY','minGyroZ','meanAccelX',
'meanAccelY','meanAccelZ','meanGyroX','meanGyroY','meanGyroZ',
'sdAccelX','sdAccelY','sdAccelZ','sdGyroX','sdGyroY',
'sdGyroZ','pothole'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
intervalsDF,"pandas.DataFrame(columns=['meanSpeed','sdSpeed','maxAccelX','maxAccelY','maxAccelZ',
'maxGyroX','maxGyroY','maxGyroZ','minAccelX','minAccelY',
'minAccelZ','minGyroX','minGyroY','minGyroZ','meanAccelX',
'meanAccelY','meanAccelZ','meanGyroX','meanGyroY','meanGyroZ',
'sdAccelX','sdAccelY','sdAccelZ','sdGyroX','sdGyroY',
'sdGyroZ','condition'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
allTripsDF,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_reduced,"pandas.DataFrame(X_reduced,columns=['V0','V1','V2'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
allTripsDF,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sensorsDF,pandas.read_csv(sensorsFilePath),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
potholesDF,pandas.read_csv(potholesFilePath),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sensorsDF,pandas.read_csv(sensorsFilePath),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tripDF,pandas.read_csv(tripFilePath),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tripDF,pandas.read_csv(tripFilePath),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(y_pred==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
selectedTradeoffIndex,numpy.intersect1d(np.where(precision>=0.70),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.dummy.DummyClassifier(strategy='most_frequent'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(C=c),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(C=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(C=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(C=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(C=c),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(C=50),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=n,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=50,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.GradientBoostingClassifier(max_depth=d,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.GradientBoostingClassifier(max_depth=4,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=4),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(clf,X,y,cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"precision,recall,thresholds","sklearn.metrics.precision_recall_curve(y_test,y_scores)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_metrics,"pandas.DataFrame(columns=['ARI_Louvain','ARI_kmeans','ARI_HC',
'AMI_Louvain','AMI_kmeans','AMI_HC',
'Homogeneity_Louvain','Homogeneity_kmeans','Homogeneity_HC'])",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
adata.obs['kmeans'],"pandas.Series(kmeans.labels_,index=adata.obs.index)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
adata.obs['hc'],"pandas.Series(hc.labels_,index=adata.obs.index)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
metadata,"pandas.read_csv('../../input/metadata.tsv',sep='\t',index_col=0)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=num_clusters,random_state=2019)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
hc,sklearn.cluster.AgglomerativeClustering(n_clusters=num_clusters),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,([ax0,ax1],[ax2,ax3],[ax4,ax5])","matplotlib.pyplot.subplots(nrows=3,ncols=2,figsize=(14,24)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig2,([ax0,ax1],[ax2,ax3],[ax4,ax5])","matplotlib.pyplot.subplots(nrows=3,ncols=2,figsize=(14,24)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=3,ncols=2,figsize=(14,18)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=4,ncols=2,figsize=(14,24)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(14,14)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(14,8)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(14,14)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=5,ncols=2,figsize=(14,26)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=2,figsize=(14,14)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=5,ncols=2,figsize=(14,26)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,([ax0,ax1],[ax2,ax3],[ax4,ax5])","matplotlib.pyplot.subplots(nrows=3,ncols=2,figsize=(14,22)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig2,([ax0,ax1],[ax2,ax3],[ax4,ax5])","matplotlib.pyplot.subplots(nrows=3,ncols=2,figsize=(14,22)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
temptarr,numpy.arange(gridtnpts[iir-1]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
temprarr,numpy.arange(gridrnpts[iir-1]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tempsarr,numpy.arange(gridsnpts[iir-1]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
id0,numpy.arange(NewEOS.ND),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cbar,"fig.colorbar(im1,cax=cax,ticks=numpy.arange(13)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tvapfo,numpy.arange(46),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cbar,"fig.colorbar(im1,cax=cax,ticks=numpy.arange(13)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
asi_rhot,"numpy.array([3739.79122056,3335.90237636,4691.02371542,4088.40354767,4347.15217391,4681.1865942])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
foliqup,"numpy.asarray([1.644,0.886,4.08,2.59,3.41,4.43])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
foliqus,"numpy.asarray([5.38,4.,9.14,7.1,8.47,9.95])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
asi_gamma_sig_low,"numpy.asarray([0.,0.25715384,0.14948592,0.5898531,0.36154228,0.45607297,0.58790934])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
asi_gamma_sig_high,"numpy.asarray([0.,0.37855329,0.19525818,1.09577441,0.6137275,0.78965792,1.08676142])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
NewEOS.MDQ,"numpy.zeros((NewEOS.NT,NewEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
NewEOS.onebar.T,numpy.zeros(NewEOS.NT),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
NewEOS.onebar.S,numpy.zeros(NewEOS.NT),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
NewEOS.onebar.rho,numpy.zeros(NewEOS.NT),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.P,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.T,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.U,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.A,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.cs,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.cv,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.KPA,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
GadEOS.MDQ,"numpy.zeros((GadEOS.NS,GadEOS.ND)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tt,numpy.zeros(7),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.radius,numpy.zeros(self.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.density,numpy.zeros(self.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.pwavevel,numpy.zeros(self.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.swavevel,numpy.zeros(self.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.pressure,numpy.zeros(self.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.temperature,numpy.zeros(self.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
PREM.pressure,numpy.zeros(PREM.NR),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ixindarr,numpy.zeros(len(ixtemparr),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
indexT0REF,numpy.where(abs(T0REF-gridtarr),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
indexT0REF,numpy.where((gridtarr-T0REF),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
indexR0REF,numpy.where(abs(R0REF-gridrarr),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
indexR0REF,numpy.where((gridrarr-R0REF),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
it0,numpy.where(NewEOS.T>=NewEOS.T0REF),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp,"numpy.where(NewEOS.P[itt,:]<0.)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp,"numpy.where(NewEOS.S[itt,:]<0.)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr<np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmpind,numpy.where(gridsarr>=np.max(sall1d),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ind,"numpy.where((ForsteriteEOS.S[:,i]>0)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
iT0REF,numpy.where(NewEOS.T==T0REF),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
igood,numpy.where(BM_pressure<48.),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
igood,numpy.where(BM_pressure_low<48.),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
igood,numpy.where(BM_pressure_high<48.),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
igood,numpy.where((BM_pressure>25.),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
igood,numpy.where((BM_pressure>25.),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
indlow,numpy.where(rhoarr<=NewEOS.R0REF),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
indhigh,numpy.where(rhoarr>=NewEOS.R0REF),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp,"numpy.where(NewEOS.P[itt,:]<0.)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp,"numpy.where(NewEOS.P[itt,:]*1.e30<=2.)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridtarr,"numpy.concatenate((gridtarr,temptarr)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridtarr,"numpy.concatenate((gridtarr[0:indexT0REF[0]],[T0REF],gridtarr[indexT0REF[0]::])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridrarr,"numpy.concatenate((gridrarr,temprarr)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridrarr,"numpy.concatenate((gridrarr[0:indexR0REF[0]],[R0REF],gridrarr[indexR0REF[0]::])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridsarr,"numpy.concatenate((gridsarr,tempsarr)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
PREM_dr,"numpy.roll(PREM.radius,-1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.P[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.U[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.S[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.A[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.cs[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.cv[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.KPA[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.MDQ[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.P[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.U[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.S[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.A[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.cs[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.cv[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.MDQ[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.S[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.U[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"NewEOS.MDQ[itt,badind]",numpy.full(len(badind),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pvapfonagahara,numpy.exp(169.-543.e3/(8.314*(tvapfo),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
temptarr,"numpy.power(10.,np.log10(gridtvals[iir-1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
temprarr,"numpy.power(10.,np.log10(gridrvals[iir-1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tempsarr,"numpy.power(10.,np.log10(gridsvals[iir-1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tillearr,"numpy.power(10.,np.arange(600)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Zfit_up,numpy.sqrt((Zfit_p),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
LowHugDat_up,numpy.sqrt((LowHugDat_p),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridtarr,"numpy.delete(gridtarr,indexzero)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
gridrarr,"numpy.delete(gridrarr,indexzero)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tillearr,"numpy.append(0.,tillearr)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mantle.pressure,"numpy.append(mantle.pressure,interpfunction(Smantle)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mantle.temperature,"numpy.append(mantle.temperature,interpfunction(Smantle)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
asi_rho,"numpy.append([2597.],asi_rhot)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
asi_gamma,"numpy.append([0.396],asi_gammat)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
NewEOS.onebar.S[iit],"numpy.interp(1.E-4,NewEOS.P[iit,id0],NewEOS.S[iit,id0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
NewEOS.onebar.rho[iit],"numpy.interp(1.E-4,NewEOS.P[iit,id0],NewEOS.rho[id0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
uniqkarr,numpy.unique(NewEOS.KPA),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
SR_rho,"numpy.loadtxt(fileZdata,delimiter=',',skiprows=1,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
SR_rho_e,"numpy.loadtxt(fileZdata,delimiter=',',skiprows=1,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
SR_gamma,"numpy.loadtxt(fileZdata,delimiter=',',skiprows=1,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
SR_gamma_e,"numpy.loadtxt(fileZdata,delimiter=',',skiprows=1,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_r1,"numpy.loadtxt(fileQMDHUGdata,skiprows=3,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_cv,"numpy.loadtxt(fileQMDHUGdata,skiprows=3,usecols=[5])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_grun,"numpy.loadtxt(fileQMDHUGdata,skiprows=3,usecols=[4])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_up,"numpy.loadtxt(fileQMDHUGdata,skiprows=3,usecols=[6])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_us,"numpy.loadtxt(fileQMDHUGdata,skiprows=3,usecols=[7])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_r,"numpy.loadtxt(fileQMDHUGdata,skiprows=2,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_e,"numpy.loadtxt(fileQMDHUGdata,skiprows=2,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_p,"numpy.loadtxt(fileQMDHUGdata,skiprows=2,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
QMDH_t,"numpy.loadtxt(fileQMDHUGdata,skiprows=2,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Zdat_all,"numpy.loadtxt(zhugoniotfile,skiprows=2,usecols=[4,5,6,7,8,9,10,11])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ZTdat_all,"numpy.loadtxt(zhugoniotfile,skiprows=3,usecols=[0,1,2,3,4,5,6,7],delimiter=',')",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DU1,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DUe1,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DR1,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[4])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DRe1,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[5])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DT1,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DTe1,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D1P,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[6])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D1Pe,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[7])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DU2,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DUe2,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DR2,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[4])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DRe2,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[5])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DT2,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DTe2,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D2P,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[6])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D2Pe,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[7])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DU3,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DUe3,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DR3,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[4])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DRe3,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[5])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DT3,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DTe3,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D3P,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[6])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D3Pe,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[7])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DU4,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DUe4,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DR4,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[4])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DRe4,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[5])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DT4,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_DTe4,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D4P,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[6])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
OM_D4Pe,"numpy.loadtxt(fname,delimiter=',',skiprows=1,usecols=[7])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
PREM.radius,"numpy.loadtxt(PREM_filename,delimiter=',',skiprows=2,usecols=[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
PREM.density,"numpy.loadtxt(PREM_filename,delimiter=',',skiprows=2,usecols=[1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
PREM.pwavevel,"numpy.loadtxt(PREM_filename,delimiter=',',skiprows=2,usecols=[2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
PREM.swavevel,"numpy.loadtxt(PREM_filename,delimiter=',',skiprows=2,usecols=[3])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,pall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,eall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,tall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,call1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,cvall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,aall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,kall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
testinterp,"scipy.interpolate.interp1d(sall1d,mdqall1d)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
interpfunction,"scipy.interpolate.interp1d(ForsteriteEOS.S[ind,i],ForsteriteEOS.P[ind,i])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
interpfunction,"scipy.interpolate.interp1d(ForsteriteEOS.S[ind,i],ForsteriteEOS.T[ind])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Gilletdatarr,"pandas.read_csv(Gilletfile,skiprows=1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Mosenfelderdatarr,"pandas.read_csv(Mosenfelderfile,skiprows=1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
zhugfitarr,"pandas.read_csv(zhugoniotfile,skiprows=1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lowhugdatarr,"pandas.read_csv(lowhugoniotfile,skiprows=1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
peridotitesolidusdatarr,"pandas.read_csv(peridotitefile,skiprows=1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
peridotiteliquidusdatarr,"pandas.read_csv(peridotitefile,skiprows=1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
corners_square,numpy.array(corners_square),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
perturbed_corners_square,numpy.array(perturbed_corners_square),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
input,"numpy.zeros((patch_size,patch_size,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
H_ba,numpy.linalg.inv(H_ab),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
top_left_x,"random.randint(perturbation_max,IMG_WIDTH-patch_size-perturbation_max)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
top_left_y,"random.randint(perturbation_max,IMG_HEIGHT-patch_size-perturbation_max)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(tbody,columns=thead)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(tbody,columns=thead)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(tbody,columns=thead)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(tbody,columns=thead)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(tbody,columns=thead)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
full_2016_df,pandas.read_csv('../data/full_2016.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
full_2017_df,pandas.read_csv('../data/full_2017.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
full_2018_df,pandas.read_csv('../data/full_2018.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
full_2019_df,pandas.read_csv('../data/full_2019.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
half_2016_df,pandas.read_csv('../data/half_2016.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
half_2017_df,pandas.read_csv('../data/half_2017.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
half_2018_df,pandas.read_csv('../data/half_2018.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
half_2019_df,pandas.read_csv('../data/half_2019.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
not_main_countries_df,"pandas.DataFrame(not_main_countries_df,columns=['other_country'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
not_main_drive_licenses_df,"pandas.DataFrame(not_main_drive_licenses_df,columns=['other_drive_licenses'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
languages,"pandas.concat([t,speak_other_languages,ln],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_new,"pandas.concat([df[a],languages,df[b]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
program_summary,"pandas.concat([prog,pn],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
DF,"pandas.concat([df.iloc[:,0:index],program_summary,df.iloc[:,index:]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
country_df,"pandas.concat([country_df,not_main_countries_df],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
frequency_of_country,pandas.concat([pd.DataFrame(country_df.sum(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
DF_last,"pandas.concat([df.iloc[:,0:index],country_df,df.iloc[:,index:]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
DF_medical,"pandas.concat([df.iloc[:,0:index],medical_issue_df,df.iloc[:,index:]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
DF_frequency,"pandas.concat([df.iloc[:,0:index],frequency_df,df.iloc[:,index:]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
drive_licenses_df,"pandas.concat([drive_licenses_df,not_main_drive_licenses_df],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
DF_drive_licenses,"pandas.concat([df.iloc[:,0:index],drive_licenses_df,df.iloc[:,index:]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
DF_military_df,"pandas.concat([df.iloc[:,0:index],military_df,df.iloc[:,index:]],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('chen_shalev_labeld_row_data.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ibl,"numpy.clip(cv2.resize(ibl,(w,h)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
img,matplotlib.pyplot.imread(f),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
ibl,matplotlib.pyplot.imread(ibl_files[i]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
ibl_np,matplotlib.pyplot.imread(test_ibl_file),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
im,"matplotlib.pyplot.imshow(ori,animated=True,cmap='gray')",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
im,"matplotlib.pyplot.imshow(img,cmap='gray')",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
im,"matplotlib.pyplot.imshow(img,animated=True)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
x_train,numpy.array(x_train),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_train,numpy.array(y_train),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
x_test,numpy.array(x_test),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_test,numpy.array(y_test),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
x_test,numpy.array(x_test),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
x_train,numpy.array(x_train),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_train,"numpy.reshape(y_train,[y_train.shape[0],1])",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
y_test,"numpy.reshape(y_test,[y_test.shape[0],1])",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
diabetes,pandas.read_csv('diabetes.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(importances),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
random_search,"sklearn.model_selection.RandomizedSearchCV(clf_rf,param_distributions=param_dist)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ada_search,"sklearn.model_selection.RandomizedSearchCV(clf_ada,param_distributions=param_dist)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svc_search,"sklearn.model_selection.RandomizedSearchCV(clf_svc,param_distributions=param_dist)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_ada,sklearn.ensemble.AdaBoostClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_svc,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
afd,"datetime.date(today.year,4,1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
today,datetime.date.today(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
today,datetime.date.today(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
today,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
now,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
now,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
now,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
t,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
t,datetime.datetime.time(datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
dones,numpy.array([1iftelse0fortinenv_info.local_done]),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
agent_scores,numpy.zeros(n_agent),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
score,numpy.mean(agent_scores),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
scores_deque,collections.deque(maxlen=100),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
time_start,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
dataset,"pandas.DataFrame({
'Appearance':['Good','Good','Great','Ah','Ah','Ah','Great','Good','Good','Ah','Good','Great','Great','Ah'],
'Income':['Low','Low','Low','Good','Great','Great','Great','Good','Great','Good','Good','Good','Low','Good'],
'Age':['Older','Older','Older','Older','Younger','Younger','Younger','Older','Younger','Younger','Younger','Older','Younger','Older'],
'Profession':['Steady','Unstable','Steady','Steady','Steady','Unstable','Unstable','Steady','Steady','Steady','Unstable','Unstable','Steady','Unstable'],
'Is_soninlaw_Welcome':['N','N','Y','Y','Y','N','Y','N','Y','Y','Y','Y','Y','N']
}
)",CLUSTER_5,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_0
weise_values,"numpy.array([31096.192,43297.502,8514.558,49.333,49.333,8811.960,348.675,0,357.898,0,0.0414,471.364,471.364,471.364])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(0,4.14,7)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,Plotlist","matplotlib.pyplot.subplots(2,1,figsize=(15,20)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,Plotlist","matplotlib.pyplot.subplots(4,1,figsize=(10,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,Plotlist","matplotlib.pyplot.subplots(4,1,figsize=(10,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,Plotlist","matplotlib.pyplot.subplots(4,1,figsize=(10,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
bitInfo,"pandas.read_csv(""/Users/wzjbatman/Downloads/Bitfinex_BTCEUR_trades_2018_02_02.csv"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"dataFrame[""fisher_Transform""]",numpy.arctanh(df_norm),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
arr,"numpy.arange(0,10)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame([observed]),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
observed,"pandas.Series([220,55,25],index=[""omnivores"",""carnivores"",""herbivores""])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('https://data.cityofnewyork.us/api/views/rvih-nhyn/rows.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
X_cd,"numpy.concatenate((train_cat,train_dog)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
y_cd,numpy.concatenate((np.zeros((5000),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
c_data,numpy.load('cats_photos.npy'),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
d_data,numpy.load('dogs_photos.npy'),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
t_data,numpy.load('test_photos.npy'),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
"plt.imshow(timages[i],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
start,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
elapsed,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
start2,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
elapsed2,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
start3,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
elapsed3,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
start4,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
elapsed4,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
startt,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
elapsedt,time.perf_counter(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
"Xcd_train,Xcd_test,ycd_train,ycd_test","
sklearn.model_selection.train_test_split(X_cd,y_cd,test_size=0.20,
shuffle=True,random_state=42)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_7
tor_df,"pandas.DataFrame({""PostalCode"":postalCode,""Borough"":borough,""Neighborhood"":neighborhood})",CLUSTER_27,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(columns=column_names),CLUSTER_27,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,requests.get('https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M'),CLUSTER_27,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_11
df,pandas.read_csv('./survey_results_public.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm_model,sklearn.linear_model.LinearRegression(normalize=True),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.30,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
n1,math.sqrt(n),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'Actual':y_test.flatten(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(r'C:\Users\ansul\Desktop\Project\final.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,math.sqrt(cost),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_x,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.w_,numpy.zeros(1+X.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-10,10,500)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x1_plot,"numpy.linspace(4,8,1000)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'col1':[1,2,3,np.nan],
'col2':[np.nan,555,666,444],
'col3':['abc','def','ghi','xyz']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
temp_range,numpy.arange(self.window_size),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.array(filtered_df),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,numpy.array(df['label']),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,"numpy.array(df.drop(['label'],1)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,numpy.array(df['label']),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
new_prices,"numpy.cumsum(prices,axis=0)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg,"numpy.divide(new_prices[:self.window_size],prefix_divisor[:length])",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
new_prices[:temp_window_size],"numpy.divide(new_prices[:self.window_size],prefix_divisor[:length])",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
prefix_divisor,"numpy.hstack((temp_range,temp_range,temp_range,temp_range)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
filtered_df,pandas.DataFrame(data=lpf.filter(df.values),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.scale(X),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.scale(X),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(n_jobs=-1),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,12)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
next_date,datetime.datetime.fromtimestamp(next_unix),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"b,a","scipy.signal.butter(self.order,self.cutoff)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
o,"scipy.signal.lfilter(b,a,o)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
c,"scipy.signal.lfilter(b,a,c)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"scipy.signal.lfilter(b,a,h)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
l,"scipy.signal.lfilter(b,a,l)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
point_data_raw,json.load(point_file),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
row_df,pandas.DataFrame(data=row_info),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(df_data),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
df_min_time_per_image_index,pandas.DataFrame(df_mean_time_per_image.idxmin(axis=1),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
plot(mean,"df_memory,std=pandas.DataFrame()",CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
df_data[lib],pandas.Series(index=df_ideal.columns),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
result,pandas.concat(dfs),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
batch_size,"numpy.int64(point_data_raw['choices']['env'].get('CK_CAFFE_BATCH_SIZE',-1)",CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
mask,numpy.zeros_like(old_frame),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df_returns,pandas.read_pickle('returns'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_close,pandas.read_pickle('close'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_high,pandas.read_pickle('high'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_low,pandas.read_pickle('low'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_volume,pandas.read_pickle('volume'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_open,pandas.read_pickle('open'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_returns,pandas.read_pickle('returns'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_RSI,pandas.read_pickle('RSI'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_MACD,pandas.read_pickle('MACD'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_CCI,pandas.read_pickle('CCI'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_CMO,pandas.read_pickle('CMO'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_ATR,pandas.read_pickle('ATR'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_BOP,pandas.read_pickle('BOP'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_MFI,pandas.read_pickle('MFI'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_ADOSC,pandas.read_pickle('ADOSC'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_BETA,pandas.read_pickle('BETA'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_close,pandas.read_pickle('close'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_high,pandas.read_pickle('high'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_low,pandas.read_pickle('low'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_volume,pandas.read_pickle('volume'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_open,pandas.read_pickle('open'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.read_excel(""dosie.xls"")",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_names,numpy.array(train_names),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_authors,numpy.array(train_authors),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
trainX,"numpy.hstack((train_names,train_authors[:,None])",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
testX,"numpy.hstack((test_names,np.array(test_authors)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
thisX,"numpy.hstack((re_name,np.array([author])",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
all_X,"numpy.vstack((trainX,testX)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
all_Y,numpy.vstack((np.array(trainY),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
token_counts,collections.Counter(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
tfl_response_json,json.loads(station.tfl_response),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
tfl_response_json,json.loads(station.tfl_response),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
mainline_df,pandas.DataFrame(pd.Series(mainline_stations),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
all_legs,pandas.DataFrame(all_legs),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
all_stations,"pandas.read_sql(sql,conn)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
simple_treedisplay,"pandas.DataFrame(tree_amount.groupby(""neighborhood"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
simple_waterdisplay,"pandas.DataFrame(water_amount.groupby(""neighborhood"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
largesimplefire,pandas.DataFrame(fire_incidents.groupby('neighborhood'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
FWT1,"pandas.DataFrame({'Neighborhood':['BrightonHeights','PerryNorth','PointBreeze',
'Bloomfield','HighlandPark','SquirrelHillSouth'],
'WaterFeatures':[6,7,7,8,11,14],
'Trees':[910,1007,1316,1436,2941,5073],
'FireIncidents':[105,83,57,120,54,178]})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
FWT,"pandas.DataFrame({'Neighborhood':['BrightonHeights','PerryNorth','PointBreeze',
'Bloomfield','HighlandPark','SquirrelHillSouth'],
'WaterFeatures/10':[60,70,70,80,110,140],
'Treesx10':[91.0,100.7,131.6,143.6,294.1,507.3],
'FireIncidents':[105,83,57,120,54,178]})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
HPD,"pandas.DataFrame({'Amount':[110,294.1,54]},
index=['WaterFeatures','Trees','FireIncidents'],
)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
waterandtree,"pandas.merge(simple_treedisplay,simple_waterdisplay,on='neighborhood')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fireWaterTree,"pandas.merge(waterandtree,largesimplefire,on='neighborhood')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
waterfeatures,"pandas.read_csv(""https://data.wprdc.org/datastore/dump/513290a6-2bac-4e41-8029-354cbda6a7b7"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fire_incidents,"pandas.read_csv(""https://data.wprdc.org/datastore/dump/8d76ac6b-5ae8-4428-82a4-043130d17b02"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pgh_trees,"pandas.read_csv(""https://data.wprdc.org/datastore/dump/1515a93c-73e3-4425-9b35-1cd11b2196da"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sali,numpy.array(lji),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.read_sql_query(""SELECT*fromsongs"",con)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
non_offer_trans,"pandas.DataFrame({'month_num':month_col,'per_id':per_id_col,'offer_id':offer_id_col})",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
no_offer_df,"pandas.DataFrame([[10,'no_offer']],columns=['offer_id','offer_type'])",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
no_offer_df,"pandas.DataFrame([[0,30,0,10,0,0,\
0,0,0,0,\
0,0,0,\
0,0,0,0,\
0,0,0,0,1
]],columns=['difficulty','duration','reward','offer_id','email','mobile',\
'social','web','offer_type_bogo','offer_type_discount',\
'offer_type_informational','offer_id_0','offer_id_1',\
'offer_id_2','offer_id_3','offer_id_4','offer_id_5',\
'offer_id_6','offer_id_7','offer_id_8','offer_id_9','offer_id_10'])",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.concat([monthly_transactions,monthly_failed_offers],axis=0)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.concat([monthly_data,no_offer_no_trans],axis=0)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
portfolio_enc,"pandas.concat([portfolio.drop(var,axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
portfolio_enc,"pandas.concat([portfolio_enc,\
pd.get_dummies(portfolio_enc[var],\
prefix=var,prefix_sep='_',drop_first=False)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
profile_enc,"pandas.concat([profile,\
pd.get_dummies(profile[var],\
prefix=var,prefix_sep='_',drop_first=False)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
transcript_offer,"pandas.merge(transcript_offer,portfolio,how='left',on='offer_id')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_offers,"pandas.merge(transcript_offer_received,transcript_offer_viewed,on=['per_id','offer_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_offers,"pandas.merge(all_offers,transcript_offer_completed,on=['per_id','offer_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
succ_tried_offers,"pandas.merge(succ_tried_offers,transcript_trans,on='per_id',how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_offers,"pandas.merge(all_offers,succ_tried_offers_summary,on=['time_received','per_id','offer_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
transactions_labeled,"pandas.merge(transcript_trans,offer_transactions,on=['time_spent','per_id','amt_spent'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
non_offer_trans,"pandas.merge(non_offer_trans,monthly_transactions,on=['month_num','per_id','offer_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_offers_summary_check,"pandas.merge(all_offers_summary,diff_months_df,on=['per_id','offer_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.merge(monthly_data,offer_cost,on='offer_id',how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.merge(monthly_data,offer_type_df,on='offer_id',how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.merge(monthly_data,monthly_data_subset[feature_subset],on=['month_num','per_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df,df_copy,on=['month_num','per_id'],how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.merge(monthly_data,profile_enc,on='per_id',how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
monthly_data,"pandas.merge(monthly_data,portfolio_enc,on='offer_id',how='left')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
profile,pandas.read_csv('new_profile.csv'),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
portfolio,"pandas.read_json('data/portfolio.json',orient='records',lines=True)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
transcript,"pandas.read_json('data/transcript.json',orient='records',lines=True)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
start_of_month,"numpy.arange(0,721,30)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
end_of_month,"numpy.arange(29,750,30)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
person_seen_so_far,numpy.array([]),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
month_col,numpy.array([]),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
per_id_col,numpy.array([]),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
offer_id_col,numpy.array([]),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
has_profit,numpy.zeros(monthly_data.shape[0]),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
person_seen,numpy.sort(person_seen),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
person_seen_so_far,numpy.sort(person_seen_so_far),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
person_seen_so_far,"numpy.append(person_seen_so_far,person_seen)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
per_id_col,"numpy.append(per_id_col,person_seen_so_far)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
month_col,"numpy.append(month_col,np.repeat(np.array(month_num)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
offer_id_col,"numpy.append(offer_id_col,np.repeat(np.array(10)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
person_seen_so_far,numpy.unique(person_seen_so_far),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
person_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
offer_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('LS2014Electors.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
log_price,numpy.log(data_cleaned['Price']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vif,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_with_dummies,"pandas.get_dummies(data_no_multicollinearity,drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_with_dummies_new,pandas.get_dummies(data_no_multicollinearity),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
raw_data,pandas.read_csv('1.04.Real-lifeexample.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,sharey=True,figsize=(15,3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,sharey=True,figsize=(15,3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l,os.listdir(folder_selected),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr,numpy.asarray(enc_image),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r1,numpy.asarray(r1),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r2,numpy.asarray(r2),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_i1,numpy.asarray(img),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r1,numpy.asarray(r1),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r2,numpy.asarray(r2),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r1,numpy.asarray(r1),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r2,numpy.asarray(r2),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
arr_r3,numpy.asarray(r3),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_arr,"numpy.ones([rows,col])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_arr,"numpy.ones([rows,col])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_image,"numpy.zeros([height,width])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
new_arr,"numpy.zeros([rows,col])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
share,"numpy.zeros([rows,col])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
share,"numpy.zeros([col,rows])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
share,"numpy.zeros([rows,col])",CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
start,time.time(),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
start1,time.time(),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
end1,time.time(),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
start2,time.time(),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
end2,time.time(),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
end,time.time(),CLUSTER_14,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_11
X_batch,"numpy.concatenate((X_values,gradients,cycle,cycle_value)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_batch,"numpy.concatenate((points,gradients,cycle,cycle_value)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_batch,"numpy.concatenate((points,gradients,cycle,cycle_value)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
grad,numpy.cos(x_reshaped),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_batch,numpy.sin(X_values),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
actual,numpy.sin(points),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
actual,numpy.sin(points),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
grid,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
Hepbb,pandas.read_csv(wuenic),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
split_index,numpy.arange(train_label.shape[0]),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_id,"numpy.array(list(map(lambdax:str(x,encoding=""utf-8"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"final_result.loc[:,'prob']",numpy.array(list(map(lambdax:float(x.strip('[]'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,"pandas.DataFrame([test_id,preds1],index=['id','pred'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,"pandas.DataFrame([test_id,preds2],index=['id','pred'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,"pandas.DataFrame([test_id,preds3],index=['id','pred'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,"pandas.DataFrame([test_id,preds4],index=['id','pred'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,"pandas.DataFrame([test_id,preds],index=['id','pred'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
final_result,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
content_matrix,"pandas.read_csv('data/word2vec/content_matrix.csv',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
title_matrix,"pandas.read_csv('data/word2vec/title_matrix.csv',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result_RCNN,"pandas.read_csv('model_results/RCNN_prob.csv',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result_CNNK2,"pandas.read_csv('model_results/CNNK2_prob.csv',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result_CNN512,"pandas.read_csv('model_results/CNN512_prob.csv',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result_RNN,"pandas.read_csv('model_results/RNN_prob.csv',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
bins,"numpy.arange(0,df.height.max()",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('./data/pokemon.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
log_sp500,numpy.log(sp500),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ex_r,"pandas.DataFrame(comb[""TB3MS""].values-comb[""INFLATION""].values,index=comb.index)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
comb,"pandas.concat([dspic,pcec],axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gr2,"pandas.concat([gr,gr.shift(1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
comb,"pandas.concat([inf,tb],axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
comb3,"pandas.concat([gr2,ex_r],axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
comb,"pandas.concat(lags,axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dspic,"pandas.read_csv(""./data/DSPIC96.csv"",index_col=0,parse_dates=True)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pcec,"pandas.read_csv(""./data/PCEC96.csv"",index_col=0,parse_dates=True)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cpi,"pandas.read_csv(""./data/CPIAUCSL.csv"",index_col=0,parse_dates=True)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tb,"pandas.read_csv(""./data/TB3MS.csv"",index_col=0,parse_dates=True)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500,"pandas.read_csv(""./data/SP500.csv"",index_col=0,parse_dates=True)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(2,2,i)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=10),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=50),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=50),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_tsne,"pandas.DataFrame(tsne_results,columns=['comp1','comp2'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_tsne,"pandas.DataFrame(tsne_results,columns=['comp1','comp2'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=2,verbose=1,perplexity=50,n_iter=500,learning_rate=10000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=2,verbose=1,perplexity=50,n_iter=500,learning_rate=10000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=10,n_init=50,n_jobs=-1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans_model,"sklearn.cluster.KMeans(n_clusters=5,n_init=50,n_jobs=-1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Pknonlin,numpy.zeros((len(k),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
P_2h_gg_avgz,numpy.zeros(len(k),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
logxi_2d,numpy.zeros((len(rp),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
twoh_Pgg_klong,numpy.exp(interp_in_k(np.log(kvec_FT),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
r_2d,numpy.sqrt(rp[ri]**2+Pi[pi]**2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
kvec_FT,"numpy.logspace(logkmin,logkmax,kpts)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
k,numpy.logspace(np.log10(kvec_FT[0]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
rp,"numpy.logspace(-2,2,20)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Pi,"numpy.logspace(-5,np.log10(80.)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
z,"numpy.linspace(pa.zLmin,pa.zLmax,100)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
savePgg,"numpy.column_stack((kvec_FT,twoh_Pgg_klong)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"(r,xi_tot)","numpy.loadtxt('./txtfiles/halofit_xi/xi_2h_SDSS_lens_nonlin_fixhunits.txt',unpack=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
P_2h_gg_avgz[ki],"scipy.integrate.simps(dNdz*Pkgg[ki,:],z)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
interp_in_k,scipy.interpolate.interp1d(np.log(k),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
interp_xi,scipy.interpolate.interp1d(np.log(r),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ratings,pandas.DataFrame(df.groupby('title'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ratings['numofratings'],pandas.DataFrame(df.groupby('title'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
corr_starwars,"pandas.DataFrame(similar_to_starwars,columns=['Correlation'])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
corr_liarliar,"pandas.DataFrame(similar_to_liarliar,columns=['Correlation'])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df,movie_titles,on='item_id')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('u.data',sep='\t',names=column_names)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
movie_titles,"pandas.read_csv(""Movie_Id_Titles"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(1169),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(20),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
var1,"numpy.cumsum(np.round(pca.explained_variance_ratio_,decimals=4)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""selected_malignant.txt"",sep='\t',header=None)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clb,matplotlib.pyplot.colorbar(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clb,matplotlib.pyplot.colorbar(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne,sklearn.manifold.TSNE(n_components=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
km,sklearn.cluster.KMeans(n_clusters=n),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=1169),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=8),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.scale(data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
news,"sklearn.datasets.fetch_20newsgroups(subset=""train"")",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(bolsa,bolsay)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
a0,"numpy.zeros((m,n_a)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c0,"numpy.zeros((m,n_a)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x_initializer,"numpy.zeros((1,1,78)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a_initializer,"numpy.zeros((1,n_a)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c_initializer,"numpy.zeros((1,n_a)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
indices,"numpy.argmax(pred,axis=-1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
positive_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
negative_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
total_counts,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
pos_neg_ratios,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
review_counter,collections.Counter(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.weights_0_1,"numpy.zeros((self.input_nodes,self.hidden_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.layer_0,"numpy.zeros((1,input_nodes)",CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
layer_0,numpy.zeros(10),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
layer_1,numpy.zeros(5),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_10,CLUSTER_0,CLUSTER_5,CLUSTER_0,CLUSTER_1
source,requests.get(List_url),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(columns=column_names),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_merge,"pandas.merge(df,temp_df,on='Postalcode')",CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
a1,pandas.read_csv('/Users/jegaveerpandianrajendran/Desktop/deliveries.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
review_data,json.loads(line),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
review_data,json.loads(line),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
string,"re.sub(r""([.!?,'/()",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
string,"re.sub(r""([.!?,'/()",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
string,"re.sub(r""([.!?,'/()",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
order,numpy.argsort(np.array(label),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
idxs,numpy.flatnonzero(y_train==y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.array([1,2,3,4,5,6])",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.array([3,6,9,12,15,18])",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([[1,2,3,4,5,6]])",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.array([3,6,9,12,15,18])",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"pandas.read_excel(r""C:\Users\LENOVO\Downloads\AirQualityUCI\AirQualityUCI.xlsx"")",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"slope,interception,r_value,p_value,std_error","scipy.stats.linregress(x,y)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
idxs,numpy.where((y_test!=cls),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean_feat,"numpy.mean(X_train_feats,axis=0,keepdims=True)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_acc,numpy.mean(y_train==y_train_pred),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
val_acc,numpy.mean(y_val==y_val_pred),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
std_feat,"numpy.std(X_train_feats,axis=0,keepdims=True)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_feats,"numpy.hstack([X_train_feats,np.ones((X_train_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_val_feats,"numpy.hstack([X_val_feats,np.ones((X_val_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test_feats,"numpy.hstack([X_test_feats,np.ones((X_test_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
diet_info,numpy.zeros((len(data),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
diet_info,"pandas.DataFrame(diet_info,columns=diet_names)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('./data/nlp_finalproj_data_withids.csv'),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('canned|fresh|cooked|dried|dry|ground|refrigerated|light|ready-to-use','',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('lettuc[^0-9]+','lettuc',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+salt','salt',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+basil|basil[^0-9]+','basil',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+bacon|bacon[^0-9]+','bacon',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+thyme|thyme[^0-9]+','thyme',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+cilantro|cilantro[^0-9]+','cilantro',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+parsley|parsley[^0-9]+','parsley',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+cinnamon|cinnamon[^0-9]+','cinnamon',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('cream[^0-9]+chees|creamchees[^0-9]+','creamchees',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+parmesan[^0-9]+','parmesanchees',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+peanutbutt','peanutbutt',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+chilipepper','chilipepp',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+nectar','nectar',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+tofu','tofu',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+tomato','tomato',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('[^0-9]+bellpepp','bellpepp',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ingredient,"re.sub('eggrollwra[^0-9]+','eggrollwrap',ingredient)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
numberonly,"re.sub('*\'|\{|\}|\*""|[a-z|A-Z]|:','',n)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ns,"re.split(r',',numberonly)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
le_igd,sklearn.preprocessing.LabelEncoder(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
le_methods,sklearn.preprocessing.LabelEncoder(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
le_diets,sklearn.preprocessing.LabelEncoder(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_range,"numpy.arange(11,22)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_range,"numpy.arange(10,0,-1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_range,"numpy.arange(11,22)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_range,"numpy.arange(10,0,-1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pi,"numpy.zeros((2,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,"numpy.empty((10,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,"numpy.empty((10,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,"numpy.empty((10,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,"numpy.empty((10,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
bj.sa_value[last_value_a],numpy.mean(ret_states_a[last_value_a]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
player_sum,numpy.sum(card_choice_player),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
player_sum,numpy.sum(card_choice_player),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dealer_sum,numpy.sum(card_choice_dealer),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
player_sum,numpy.sum(card_choice_player),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dealer_sum,numpy.sum(card_choice_dealer),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dealer_sum,numpy.sum(card_choice_dealer),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(11,2,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(12,21,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(11,2,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(12,21,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(12,21,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(2,11,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(12,21,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(2,11,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x_range,y_range)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x_range,y_range)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cbar,"matplotlib.pyplot.colorbar(surf,ticks=[0,1],cax=cax)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cbar,"matplotlib.pyplot.colorbar(surf,ticks=[0,1],cax=cax)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
surf,"ax.imshow(Z,cmap=matplotlib.pyplot.get_cmap('Pastel2',2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
surf,"ax.imshow(Z,cmap=matplotlib.pyplot.get_cmap('Pastel2',2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
monthly_df,"pandas.DataFrame(
dict((column_name+""_""+period,survey_scenario.simulation.calculate_add(column_name,period)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
undecompsed_revdisp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df1,pandas.DataFrame({'revdisp_mensuel_annuel':revdisp_oy.sum(1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['irpp_annuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
decote_monthly,"pandas.Series(survey_scenario.simulation.calculate_add(""decote_gain_fiscal_mensuel_times_12"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
decote_annual,pandas.Series(survey_scenario.simulation.calculate_add('decote_gain_fiscal'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp,"pandas.Series(survey_scenario.simulation.calculate_add('revdisp_mensuel_annuel','2009')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp,"pandas.Series(survey_scenario.simulation.calculate_add('revdisp_mensuel_annuel','2009')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation[filtr_near0].hist(bins,"70000,weights=pandas.Series(weight_foyers)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_compensation,"pandas.Series(survey_scenario.simulation.calculate(""lambda_compensation"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
decote_monthly,"pandas.Series(survey_scenario.simulation.calculate_add(""decote_mensuel_times_12"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
decote_annual,"pandas.Series(survey_scenario.simulation.calculate_add(""decote"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
poids,pandas.Series(weight_foyers),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lambda_zero,pandas.Series(lambda_compensation==0),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_ir_m_rsa_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel_rsa_mensuel','2009')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_c_ir,"pandas.Series(survey_scenario.simulation.calculate_add('utility_compensated_ir_mensuel','2009')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_ir_m,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_mensuel','2009')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_ir_a,"pandas.Series(survey_scenario.simulation.calculate_add('utility_ir_annuel','2009')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
weight_menages,pandas.Series(weight_menages),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
hist1,"((u_ir_m-u_ir_a))[((u_ir_m-u_ir_a))!=0].hist(bins=7000,figsize=(25,12),weights=pandas.Series(weight_menages)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
hist2,"((u_c_ir-u_ir_a))[((u_c_ir-u_ir_a))!=0].hist(bins=7000,figsize=(25,12),weights=pandas.Series(weight_menages)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
outliers,pandas.Series(np.abs(((u_ir_m-u_ir_a),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_decote_different,pandas.Series(np.abs(decote-decote_mensuel),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
irpp_mensuel,"pandas.Series(survey_scenario.simulation.calculate(""irpp_mensuel"",'2009-{}'.format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
to_change,pandas.Series(marginal_rate),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
to_change,"pandas.Series(rates.marginal_rate(irpp_test_case,rbg_test_case)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
monetary_gain_ir,pandas.Series(monetary_gain_ir),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
diff_in_income,"pandas.Series(
np.abs(survey_scenario.simulation.calculate(""revdisp_mensuel_annuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_money_gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_annuelle+,"pandas.Series(
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gain,"pandas.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_annuelle+,"pandas.Series(
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_annuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_mensuelle,pandas.Series(np.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_annuelle+,"pandas.Series(a
`
survey_scenario.simulation.calculate(""utility_ir_annuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_mensuelle+,"pandas.Series(survey_scenario.simulation.calculate(""utility_ir_mensuel_rsa_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
passage_a_la_retraite,pandas.Series(is_retired),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('compensated_impo_mensuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['revdisp_mensuel_annuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('revdisp_mensuel_annuel',""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo_mensuel',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['impo_mensuel'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('impo',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp['rev_cap'],"pandas.Series(np.sum(survey_scenario.simulation.calculate('rev_cap',""2009"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp[var],"pandas.Series(np.sum(survey_scenario.simulation.calculate(var,""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""rev_trav_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""salaire_imposable"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""pen_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""psoc_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""ppe"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""impo_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
revdisp_oy['{}'.format(month)],"pandas.Series(survey_scenario.simulation.calculate(""retraite_imposable"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax1","matplotlib.pyplot.subplots(figsize=(20,10)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax2,matplotlib.pyplot.twinx(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
undecompsed_revdisp.index,"numpy.arange(-0.5,11.5,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
a,"numpy.array([1,2,3])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,"numpy.array([True,True,False])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
array,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
below_collection_thrshld,"numpy.zeros(weight_foyers.shape[0],dtype=bool)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_money_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean_gain,numpy.zeros(1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean_gain,numpy.zeros(1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean_gain,numpy.zeros(1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean_gain,numpy.zeros(1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
monetary_gain_ir_rsa,numpy.zeros(weight_menages.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
c,numpy.zeros(1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_retired,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_inactive,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_retired,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_inactive,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
is_retire_active,numpy.zeros(weight_individus.shape[0]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
target_array,numpy.empty(entity.count),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
target_array,numpy.empty(entity.count),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
target_array,numpy.empty(simulation.persons.count),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
target_array,numpy.empty(simulation.persons.count),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
has_decote_difference,numpy.ones(59874),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir+,"numpy.mean(
(survey_scenario.simulation.calculate(""inverted_utility_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain+,"numpy.mean(
pd.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain_ir+,"numpy.mean(
(survey_scenario.simulation.calculate(""utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
u_monetary_gain+,"numpy.mean(
pd.Series(survey_scenario.simulation.calculate(""inverted_utility_compensated_ir_mensuel"",""2009-{}"".format(month)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
eq_money_u_annuelle,numpy.exp((np.log(-u_annuelle),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
eq_money_u_mensuelle,numpy.exp((np.log(-u_mensuelle),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
asset_vols,numpy.sqrt(Sigma.diagonal(),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
vl_vals,"numpy.linspace(minvol,maxretvol,NPOINTS)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
Sigma,numpy.cov(df.transpose(),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
longrun_data,"pandas.DataFrame({'year':list(range(1928,2020)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
ret_df,pandas.DataFrame(enumerate(results_dict.keys(),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
download_df,"pandas.read_excel('http://www.stern.nyu.edu/~adamodar/pc/datasets/histretSP.xls',
sheet_name=data_sheet,
skiprows=skiprows,
skipfooter=skipfooter)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
my_cmap,"seaborn.diverging_palette(10,220,sep=80,n=50)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
ad_data,pandas.read_csv('advertising.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logModel,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hawaii_measurements,"pandas.read_csv(""hawaii_measurements.csv"")",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
hawaii_stations,"pandas.read_csv(""hawaii_stations.csv"")",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
keep_idx,numpy.array(keep_idx),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
pred_cost_train,numpy.zeros(nb_epochs),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
err_train,numpy.zeros(nb_epochs),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
cost_dev,numpy.zeros(nb_epochs),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
err_dev,numpy.zeros(nb_epochs),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
test_predictions,"numpy.zeros((10000,10)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
all_preds,numpy.zeros((len(x_dev),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
all_sample_preds,numpy.zeros((len(x_dev),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
correct_preds,numpy.zeros((len(x_dev),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
lim_idxs,"numpy.where(np.logical_and(weight_vector>=symlim,weight_vector<=symlim)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
x_dev,numpy.concatenate(x_dev),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
y_dev,numpy.concatenate(y_dev),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ims,numpy.concatenate(ims),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ims,numpy.concatenate(ims),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
y,numpy.ones(ims.shape[0]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
y,numpy.ones(ims.shape[0]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
e_x,numpy.exp(x-np.max(x),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
e_x,numpy.exp(x-np.max(x),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
x_rot,"numpy.expand_dims(ndim.interpolation.rotate(x[0,:,:],angle,reshape=False,cval=-0.42421296)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ims,"numpy.expand_dims(ims,axis=1)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
x_rot,"numpy.expand_dims(ndim.interpolation.rotate(x[0,:,:],angle,reshape=False,cval=-0.42421296)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ims,"numpy.expand_dims(ims,axis=1)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(steps,8)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
fig,matplotlib.pyplot.figure(dpi=100),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ax,matplotlib.pyplot.gca(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
lgd,"matplotlib.pyplot.legend(['testerror','trainerror'],markerscale=marker,prop={'size':textsize,'weight':'normal'})",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
lgd,"matplotlib.pyplot.legend(['testerror','trainerror'],markerscale=marker,prop={'size':textsize,'weight':'normal'})",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
lgd,"matplotlib.pyplot.legend(['testerror','trainerror'],markerscale=marker,prop={'size':textsize,'weight':'normal'})",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
lgd,"matplotlib.pyplot.legend(['testerror','trainerror'],markerscale=marker,prop={'size':textsize,'weight':'normal'})",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
lgd,"matplotlib.pyplot.legend(['correctclass','posteriorpredictiveentropy'],loc='upperright',
prop={'size':15,'weight':'normal'},bbox_to_anchor=(1.4,1)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
ax0,"matplotlib.pyplot.subplot2grid((3,steps-1)",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
"fig2,ax2",matplotlib.pyplot.subplots(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
"fig,ax1",matplotlib.pyplot.subplots(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
"fig2,ax2",matplotlib.pyplot.subplots(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
tic0,time.time(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
tic,time.time(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
toc,time.time(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
toc0,time.time(),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_11
df,pandas.read_csv('ETH_1h.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('ETH_1h.csv',parse_dates=['Date'],date_parser=d_parser)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df['Date'],pandas.to_datetime(df['Date']),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df['Date'],"pandas.to_datetime(df['Date'],format='%Y-%m-%d%I-%p')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
filt,(df['Date']>=pandas.to_datetime('2019-01-01'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
self.images,"numpy.load(""./image-colorization/gray_scale.npy"")",CLUSTER_21,CLUSTER_7,CLUSTER_4,CLUSTER_28,CLUSTER_8
data,"numpy.load(""./image-colorization/gray_scale.npy"")",CLUSTER_21,CLUSTER_7,CLUSTER_4,CLUSTER_28,CLUSTER_8
historical_stock_prices_df,"pandas.read_csv(""historical_stock_prices.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
historical_stocks_df,"pandas.read_csv(""historical_stocks.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
series1,"numpy.array(stocks[stocks[""ticker""]==companies[i]][""adj_close""])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dist_array,numpy.zeros((len(companies),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dist_array,numpy.zeros((len(remaining_companies),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
counts,numpy.zeros(model.children_.shape[0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linkage_matrix,"numpy.column_stack([model.children_,model.distances_,
counts])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,seaborn.heatmap(dist_array),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
normed_dist_matrix,"sklearn.preprocessing.normalize(dist_array,axis=1,norm='l2')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.cluster.AgglomerativeClustering(affinity='precomputed',n_clusters=2,linkage='complete')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_2,"sklearn.cluster.AgglomerativeClustering(affinity='precomputed',n_clusters=None,distance_threshold=0,linkage='complete')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_3,"sklearn.cluster.AgglomerativeClustering(affinity='precomputed',n_clusters=None,distance_threshold=0.03,linkage='complete')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehot_encoder,sklearn.feature_extraction.DictVectorizer(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
x,"numpy.array([[155,70]])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,3],
[4,9]])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
distances,"numpy.array([2,1,7,6,9])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X_test,"numpy.array([
[168,65],
[180,96],
[160,52],
[169,67],
[178,64],
[172,59]
])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
nearest_neighbor_genders,"numpy.take(y_train,nearest_neighbor_indices)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
distances,numpy.sqrt(np.sum((X_train-x),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
lb,sklearn.preprocessing.LabelBinarizer(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=K),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
scale_col,pandas.DataFrame(StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
minmax_col,pandas.DataFrame(MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfModel,"pandas.DataFrame(columns=['cross-score','cross-train','rsq_train','rsq_test','subt_rsq','mae_test','mse_test','rmse_test','mape_test'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfScale,"pandas.concat([df_dms,scale_col],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfMinMax,"pandas.concat([df_dms,minmax_col],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_dummy,pandas.read_csv('forex_dummy.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_pca1,pandas.read_csv('forex_pca_1.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_pca2,pandas.read_csv('forex_pca_2.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.20,shuffle=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(os.path.join('..','datasets','zillow-03-start.csv')",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
figure,matplotlib.pyplot.figure(),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgrid,"numpy.arange(v2_lims[0],v2_lims[1]+dstep,dstep)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ygrid,"numpy.arange(v3_lims[0],v3_lims[1]+dstep,dstep)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
keys,numpy.array(ztable_full.keys(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v2_ref,numpy.array(v2_vals),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v3_ref,numpy.array(v3_vals),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v2_lims,numpy.array(v2v3_limits[mod]['V2']),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v3_lims,numpy.array(v2v3_limits[mod]['V3']),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
extent,numpy.array([xgrid.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
pts,"numpy.array([Y[ind_nan],X[ind_nan]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
pts,"numpy.array([Y[ind_nan],X[ind_nan]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
extent,numpy.array([xgrid.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
zube,numpy.array(zcube),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ind_nrc,numpy.where(ind_nrc),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
xind_good,numpy.where(num_nans_cols<nrows),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
yind_good,numpy.where(num_nans_rows<ncols),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
xind_good,numpy.where((np.abs(col_diff),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
yind_good,numpy.where((np.abs(row_diff),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ind_nan,numpy.isnan(zgrid),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ind_nan,numpy.isnan(zgrid),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
nan_mask,numpy.isnan(zgrid2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
nan_mask,numpy.isnan(zgrid2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(xgrid,ygrid)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(xgrid,ygrid)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"zmin,zmax",numpy.nanmin(zgrid),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(8,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(8,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
zgrid,"scipy.interpolate.griddata((v2,v3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
func,"scipy.interpolate.RegularGridInterpolator((ygrid2,xgrid2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
func,"scipy.interpolate.RegularGridInterpolator((ygrid2,xgrid2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
zgrid,"scipy.ndimage.rotate(zgrid,rot_ang,reshape=False,order=1,cval=np.nan)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
zgrid,"scipy.ndimage.rotate(zgrid,-rot_ang,reshape=False,order=1,cval=np.nan)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
reviews,pandas.read_csv(yelp_review),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
text_counts,reviews['labels'],test_size=0.3,random_state=123)",CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
text_tf,reviews[""labels""],test_size=0.2,random_state=123)",CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('housing.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
russian_movies['month_released'],pandas.DatetimeIndex(russian_movies['date_published']),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
russian_movies['day_released'],pandas.DatetimeIndex(russian_movies['date_published']),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('data\IMDbmovies.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
clf,sklearn.tree.DecisionTreeClassifier(criterion='entropy'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
missing_data,"pandas.concat([total,percent],axis=1,keys=['Total','Percent'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""bill_authentication.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=seed)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_results,numpy.array([]),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
all_results,numpy.array([]),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
l,"numpy.array(['car','goat'])",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
all_results,"numpy.append(all_results,result)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
all_results,"numpy.append(all_results,result)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
results,"pandas.DataFrame(columns=['train_participants','test_participants','accuracy','auc','precision_0','precision_1','recall_0','recall_1','f1_0','f1_1'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_data,"pandas.concat(train_data,ignore_index=True,sort=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_data,"pandas.concat(test_data,ignore_index=True,sort=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data5,pandas.read_csv(p5_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data7,pandas.read_csv(p7_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data9,pandas.read_csv(p9_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data11,pandas.read_csv(p11_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data12,pandas.read_csv(p12_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data17,pandas.read_csv(p17_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data18,pandas.read_csv(p18_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
max_val,numpy.nanmax(X_train[c]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
min_val,numpy.nanmin(X_train[c]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mean,numpy.nanmean(X_train[c]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
std,numpy.nanstd(X_train[c]),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"split_train,split_test,bogus1,bogus2","sklearn.model_selection.train_test_split(split,bogus,test_size=split_size,shuffle=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,bogus1,y_train,bogus2","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.0,shuffle=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,bogus1,y_train,bogus2","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.0,shuffle=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,bogus1,y_train,bogus2","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.0,shuffle=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,bogus1,y_train,bogus2","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.0,shuffle=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,bogus1,y_train,bogus2","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.0,shuffle=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
auc,"sklearn.metrics.roc_auc_score(y_test,scores)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(y_test,pred,average=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
precision,"sklearn.metrics.precision_score(y_test,pred,average=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,pred,average=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.BaggingClassifier(MLPClassifier(hidden_layer_sizes=(1024,512,256,64,16)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y_mean,numpy.mean(y_train),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
output,pandas.DataFrame({'id':test['ID'].astype(np.int32),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('../input/train.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('../input/test.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
lbl,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=n_comp,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ica,"sklearn.decomposition.FastICA(n_components=n_comp,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data_frame,"pandas.DataFrame(rows,columns=frame_columns)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
reviews,"pandas.read_csv(""../input/wine-reviews/winemag-data-130k-v2.csv"",index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
observations,numpy.array(observations),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(450,550,100)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,numpy.linspace(observations.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x_range,numpy.linspace(observations_a.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
histogram_data,"matplotlib.pyplot.hist(observations,bins=histogram_bins)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
histogram_data,"matplotlib.pyplot.hist([observations_a,observations_b],
bins=histogram_bins,color=['b','r'])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
result,"random.choice(['H','T'])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
result,"pandas.read_sql_query(""SELECT*fromeducativas"",connection)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"w,b,X,Y","numpy.array([[1],[2]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
w,"numpy.zeros((dim,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
Y_prediction,"numpy.zeros((1,m)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
cost,numpy.squeeze(cost),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
costs,numpy.squeeze(d['costs']),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
legend,"matplotlib.pyplot.legend(loc='uppercenter',shadow=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
df,"pandas.DataFrame(np.random.randn(6,4)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df2,"pandas.DataFrame({'A':1.,
'B':pd.Timestamp('20181220')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(np.random.randn(1000,4)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"pandas.Series([1,3,5,np.nan,6,8])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ts,pandas.Series(np.random.randn(len(rng),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ts,pandas.Series(np.random.randn(len(prng),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ts,pandas.Series(np.random.randn(1000),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dates,"pandas.date_range('20181220',periods=6)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
rng,"pandas.date_range('20/12/201800:00',periods=5,freq='D')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ts,"pd.Series(np.random.randn(1000),index=pandas.date_range('1/1/2000',periods=1000)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
prng,"pandas.period_range('1990Q1','2000Q4',freq='Q-NOV')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.arange(kclusters),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(res,columns=[""PostalCode"",""Borough"",""Neighborhood""])",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_venues_onehot,"pandas.get_dummies(toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_postcode_gis_merge,"pandas.merge(postcode_df,df,on='PostalCode')",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
postcode_df,pandas.read_csv('http://cocl.us/Geospatial_data'),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
html_doc,requests.get(url),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_9,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
compare_props,"pandas.DataFrame({
""Overall"":income_cat_proportions(housing)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
housing_tr,"pandas.DataFrame(X,columns=housing_num.columns)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
housing_extra_attribs,"pandas.DataFrame(
housing_extra_attribs,
columns=list(housing.columns)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
housing,"pandas.read_csv(""housing.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
loc,numpy.mean(squared_errors),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"housing[""income_cat""]","numpy.ceil(housing[""median_income""]/1.5)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
tree_rmse,numpy.sqrt(tree_mse),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
tree_rmse_scores,numpy.sqrt(-scores),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lin_rmse_scores,numpy.sqrt(-lin_scores),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_rmse,numpy.sqrt(forest_mse),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_rmse_scores,numpy.sqrt(-forest_scores),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
final_rmse,numpy.sqrt(final_mse),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
c,"""median_house_value"",cmap=matplotlib.pyplot.get_cmap(""jet"")",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"train_set,test_set","sklearn.model_selection.train_test_split(housing,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"train_set,test_set","sklearn.model_selection.train_test_split(housing,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
ordinal_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
cat_encoder,sklearn.preprocessing.OneHotEncoder(categories='auto'),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lab_encoder,sklearn.preprocessing.LabelBinarizer(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
attr_adder,"sklearn.preprocessing.FunctionTransformer(add_extra_features,validate=False,
kw_args={""add_bedrooms_per_room"":False})",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
num_pipeline,"sklearn.pipeline.Pipeline([
('imputer',Imputer(strategy=""median"")",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
full_pipeline,"sklearn.compose.ColumnTransformer([
(""num"",num_pipeline,num_attribs)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lin_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
tree_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_mse,"sklearn.metrics.mean_squared_error(housing_labels,housing_predictions)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
final_mse,"sklearn.metrics.mean_squared_error(y_test,final_predictions)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lin_mae,"sklearn.metrics.mean_absolute_error(housing_labels,housing_predictions)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
tree_reg,sklearn.tree.DecisionTreeRegressor(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(tree_reg,housing_prepared,housing_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lin_scores,"sklearn.model_selection.cross_val_score(lin_reg,housing_prepared,housing_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_scores,"sklearn.model_selection.cross_val_score(forest_reg,housing_prepared,housing_labels,
scoring=""neg_mean_squared_error"",cv=10)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_reg,"sklearn.ensemble.RandomForestRegressor(n_estimators=10,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_reg,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
forest_reg,sklearn.ensemble.RandomForestRegressor(random_state=42),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(forest_reg,param_grid,cv=5,scoring='neg_mean_squared_error',return_train_score=True)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
rnd_search,"sklearn.model_selection.RandomizedSearchCV(forest_reg,param_distributions=param_distribs,
n_iter=10,cv=5,scoring='neg_mean_squared_error',random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
scale,scipy.stats.sem(squared_errors),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
predicted_label,"numpy.argmax(np_probabilities[i,:])",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_7
ys,numpy.sin(xs),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_7
injTable,numpy.array(f['/Cameras/LSTCAM/injTable']),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
pixel_pos,numpy.array(f['/Cameras/LSTCAM/pixelsPosition']),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
pix2,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
en,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
alt,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
az,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
x,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
y,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
pix,numpy.array([]),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
pix2,"numpy.append(pix2,test_dataset_2[i]['image'])",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
en,"numpy.append(en,test_dataset_2[i]['labels'][0])",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
x,"numpy.append(x,test_dataset_2[i]['labels'][1])",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
y,"numpy.append(y,test_dataset_2[i]['labels'][2])",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
alt,"numpy.append(alt,test_dataset_2[i]['labels'][3])",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
az,"numpy.append(az,test_dataset_2[i]['labels'][4])",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
pix,"numpy.append(pix,test_dataset[i]['image'][0].numpy()",CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
cm,matplotlib.pyplot.get_cmap('viridis'),CLUSTER_11,CLUSTER_7,CLUSTER_5,CLUSTER_26,CLUSTER_7
titanic,seaborn.load_dataset('titanic'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.tree.DecisionTreeClassifier(max_depth=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.tree.DecisionTreeClassifier(max_depth=2,criterion='entropy')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfc,sklearn.ensemble.RandomForestClassifier(n_estimators=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
housing['income_cat'],numpy.ceil(housing['median_income']/1.5),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=test_ratio,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('https://data.world/raghu543/credit-card-fraud-data/workspace/file?filename=creditcard.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
t,numpy.arange(x1.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
x,y=numpy.arange(N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
mu,"numpy.mean(x,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
sigma,"numpy.std(x,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
y,numpy.exp(-t**2/2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
sigma,numpy.sqrt(m2-mu*mu),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
t,"numpy.meshgrid(x,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
"density,edges","numpy.histogramdd(d,bins=[N,N])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kurtosis,scipy.stats.kurtosis(x),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
skew,scipy.stats.skew(x),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
fig,matplotlib.pyplot.figure(facecolor='w'),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
"y1,x1,dummy","matplotlib.pyplot.hist(d,bins=50,normed=True,color='g',alpha=0.75)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
df,pandas.read_csv(DATA_PATTERN),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
cov,numpy.mean((ref-refMu),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
gaussianKernel,numpy.exp(-(np.square(m/M),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
outR,numpy.exp(idct2(outRSpectrum),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
outG,numpy.exp(idct2(outGSpectrum),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
outB,numpy.exp(idct2(outBSpectrum),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
outR,"numpy.fmin(np.fmax(outR,0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
outG,"numpy.fmin(np.fmax(outG,0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
outB,"numpy.fmin(np.fmax(outB,0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
corr,"numpy.corrcoef(ref,out)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
"n,m",numpy.meshgrid(np.arange(N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
data,"pandas.read_csv(""breast_cancer.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfc,sklearn.ensemble.RandomForestClassifier(n_jobs=1),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
roc,"sklearn.metrics.roc_auc_score(y_test,best_rfc.predict_proba(X_test)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,best_rfc.predict(X_test)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,best_rfc.predict_proba(X_test)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
dframe,pandas.read_csv('lec25.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dframe,"pandas.read_csv('lec25.csv',header=None)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dframe,"pandas.read_table('lec25.csv',sep=',',header=None)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
image,"numpy.reshape(mnist['train_data'],(60000,28*28)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
image_test,"numpy.reshape(mnist['test_data'],(10000,28*28)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"[N,features]",numpy.shape(image),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mx.symbol.random_normal(loc,"0,scale=1,shape=numpy.shape(logvar.get_internals()",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,(ax1,ax2,ax3,ax4)","matplotlib.pyplot.subplots(1,4,sharex='col',sharey='row',figsize=(12,3)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,((ax1,ax2,ax3,ax4))","matplotlib.pyplot.subplots(1,4,sharex='col',sharey='row',figsize=(12,3)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,((ax1,ax2,ax3,ax4))","matplotlib.pyplot.subplots(1,4,sharex='col',sharey='row',figsize=(12,3)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,((ax0,ax1,ax2,ax3,ax4,ax5))","matplotlib.pyplot.subplots(1,6,sharex='col',sharey='row',figsize=(12,2.5)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
L,numpy.arange(len(Y),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
xr,"numpy.arange(x_min,x_max,h)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
yr,"numpy.arange(y_min,y_max,h)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
Z2,numpy.arange(len(xr),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,h)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(C=1e5),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(path,header=None,names=['Fires','Thefts'])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
path,os.getcwd(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
points,"numpy.arange(-5,5,0.01)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.array([1,2,3,4])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
condition,"numpy.array([True,True,False,False])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,"numpy.array([[1,2,3],[4,5,6],[7,8,9]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
bool_arr,"numpy.array([True,False,True])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
countries,"numpy.array(['France','Germany','USA','Russia','USA','Mexico','Germany'])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
answer2,"numpy.where(condition,A,B)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"dx,dy","numpy.meshgrid(points,points)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R0,"numpy.array([X0,Y0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X1,Y1","numpy.array([numpy.asarray(numpy.matmul(A,r0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R1,"numpy.array([X1,Y1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R0,"numpy.array([X0,Y0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X1,Y1","numpy.array([numpy.asarray(numpy.matmul(A,r0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R1,"numpy.array([X1,Y1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X1,Y1","numpy.array([numpy.asarray(numpy.matmul(A,r0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R1,"numpy.array([X1,Y1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a_11,numpy.cos(omega*dt),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a_11,numpy.cos(omega*dt),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a_11,numpy.cosh(l*dt),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a_12,numpy.sin(omega*dt),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a_12,numpy.sin(omega*dt),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a_12,numpy.sinh(l*dt),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.matrix([
[a_11,a_12],
[a_21,a_22]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A_hat_mean,"numpy.matrix([[0,0],[0,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A_hat,"numpy.matrix([
[x1*x0,x1*y0],
[y1*x0,y1*y0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.matrix([
[a_11,a_12],
[a_21,a_22]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A_hat_mean,"numpy.matrix([[0,0],[0,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A_hat,"numpy.matrix([
[x1*x0,x1*y0],
[y1*x0,y1*y0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.matrix([
[a_11,a_12],
[a_21,a_22]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A_hat_mean,"numpy.matrix([[0,0],[0,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A_hat,"numpy.matrix([
[x1*x0,x1*y0],
[y1*x0,y1*y0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
abscisa,"numpy.arange(1,n+1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_1,numpy.zeros(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_2,numpy.zeros(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_1,numpy.zeros(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_2,numpy.zeros(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
f_1,numpy.zeros(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
f_2,numpy.zeros(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
error_1,numpy.log(np.abs(k1-x_sol_1),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
error_2,numpy.log(np.abs(k2-x_sol_2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
error_1,numpy.log(np.abs(k1-x_sol_1),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
error_2,numpy.log(np.abs(k2-x_sol_2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
train_acc,numpy.mean(model.predict(X_train),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
val_acc,numpy.mean(model.predict(X_val),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
grad_difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,numpy.asarray(v),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x_tilde,numpy.zeros(m),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
b,numpy.zeros(m),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
rho,numpy.where(u>(sv-b),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
exp_return,"numpy.dot(algo.b_t,x_tilde)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
algo.b_t,numpy.ones(algo.m),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
sv,numpy.cumsum(u),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
u,numpy.sort(v),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
results,pandas.read_pickle('results.pickle'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
re_repeat,re.compile(r'Repeat_[0-9_]*b'),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
re_block8,re.compile(r'Block8_[A-Za-z]'),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
weight_arr,"numpy.load(os.path.join(npy_weights_dir,weight_file)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
train_df,"pandas.read_csv(""train.csv"",dtype={""Age"":np.float64},)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
avgerage_fare,pandas.DataFrame([fare_not_survived.mean(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_fare,pandas.DataFrame([fare_not_survived.std(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axis1","matplotlib.pyplot.subplots(1,1,figsize=(18,4)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
facet,"seaborn.FacetGrid(train_df,hue=""Survived"",aspect=4)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,numpy.arange(10),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
t0,time.time(),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_influ,pandas.DataFrame(pd.Series(influ_dict),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_auc,pandas.DataFrame(pd.Series(auc_dict),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
CV,"pandas.DataFrame({'index':np.arange(0,len(X)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
prediction,"pandas.DataFrame({'predicted_label':label,
'predicted_proba':proba})",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('ads_train.csv'),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('ads_test.csv'),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(22,14)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(13,6)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(13,6)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(13,6)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(13,6)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(13,6)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(13,6)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
tree,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=5)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
dt,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=5,max_features='auto')",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(train.y_buy.values,train[col])",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(label,preds)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
auc_dict[col],"sklearn.metrics.auc(fpr,tpr)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"precision,recall,_","sklearn.metrics.precision_recall_curve(label,preds)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(label,preds>0.5)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
skf,"sklearn.model_selection.StratifiedKFold(n_splits=10,random_state=124)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=124)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"CV.loc[val_i,'test_cv_score']","sklearn.linear_model.LogisticRegression(solver='liblinear',max_iter=150,C=0.01)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"CV.loc[val_i,'log_cv_score']","sklearn.linear_model.LogisticRegression(solver='liblinear',max_iter=150,C=0.01)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=8)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
gbs,"sklearn.model_selection.RandomizedSearchCV(
estimator=LGBMClassifier(metric='None',n_estimators=100)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
q_values,"numpy.zeros((num_states,num_states,num_actions)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
enc,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
imputer,sklearn.impute.SimpleImputer(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
model.startprob_,"numpy.array([0.3,0.4,0.3])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
model.transmat_,"numpy.array([[0.2,0.6,0.2],
[0.4,0.0,0.6],
[0.1,0.2,0.7]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
model.emissionprob_,"numpy.array([[0.2,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1],
[0.1,0.1,0.1,0.1,0.2,0.1,0.1,0.1,0.1],
[0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.2]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.atleast_2d([0,1,2,3])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(denselist,columns=feature_names)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df,"pandas.DataFrame(denselist,columns=feature_names)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
full_df,"pandas.concat([fake_info_df,true_info_df])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
contents,"numpy.asarray(open(path+filename,'r')",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
contents,"numpy.append(contents,[filename.replace('-meta','')",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
true_file_list,os.listdir('dataset/dataset_full_/True/'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
fake_file_list,os.listdir('dataset/dataset_full_/Fake/'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
random_forest_model,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,x_test,Y_train,y_test","sklearn.model_selection.train_test_split(random_forest_df.drop(['label'],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,x_test,Y_train,y_test","sklearn.model_selection.train_test_split(k_means_df.drop(['label'],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,x_test,Y_train,y_test","sklearn.model_selection.train_test_split(gauss_nb_df.drop(['label'],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,x_test,Y_train,y_test","sklearn.model_selection.train_test_split(tree_df.drop(['label'],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,x_test,Y_train,y_test","sklearn.model_selection.train_test_split(tree_df.drop(['label'],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(y_test.values,y_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(y_test.values,y_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(y_test.values,y_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(y_test.values,y_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(y_test.values,y_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
k_means,"sklearn.cluster.KMeans(n_clusters=2,random_state=42)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
decision_tree,sklearn.tree.DecisionTreeClassifier(random_state=42),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
logistic_reg_clf,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_ex,pandas.DataFrame(number),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_num,"pandas.DataFrame({""test_num"":test_num})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_ans,"pandas.DataFrame({""ans"":data[3:]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_num,"pandas.DataFrame({""test_num"":test_num})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_date,"pandas.DataFrame({""testDate"":date})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_qt,pandas.DataFrame(info),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_info,"pandas.DataFrame({""userID"":ID,""first"":first,""last"":last})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_num,"pandas.DataFrame(test_num,columns=[""test_num""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_date,"pandas.DataFrame(date,columns=[""testDate""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_info,pandas.DataFrame(tmp),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_ex,pandas.DataFrame(number),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_num,"pandas.DataFrame({""test_num"":test_num})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_date,"pandas.DataFrame({""testDate"":date})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_qt,pandas.DataFrame(info),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_info,pandas.DataFrame(tmp),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_ex,pandas.DataFrame(number),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_date,"pandas.DataFrame({""testDate"":date})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_qt,pandas.DataFrame(info),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_info,"pandas.DataFrame({""userID"":ID,""first"":first,""last"":last})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_ans,"pandas.concat([test_num,test_ans],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test,"pandas.concat([test_num,test_date,test_info,test_qt],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_sample,"pandas.concat([df_sample,test],axis=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test,"pandas.concat([test_num,test_date,test_info],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_sample,"pandas.concat([df_sample,test],axis=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test,"pandas.concat([test_num,test_date,test_info,test_qt],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_ex,"pandas.concat([df_ex,test],axis=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test,"pandas.concat([test_date,test_info,test_qt],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_ex,"pandas.concat([df_ex,test],axis=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
qt_col,"pandas.read_csv(""qt_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_sample,"pandas.read_csv(""sample_dataset_form.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(path,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(file,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_sample,"pandas.read_csv(""sample_dataset_form.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col_sample,"pandas.read_csv(""sample_dataset_form_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(file,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(file,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_sample,"pandas.read_csv(""sample_dataset_form.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col_sample,"pandas.read_csv(""sample_dataset_form_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
standard_col,"pandas.read_csv(""standard_sat_data_col.csv"",index_col=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(file,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
standard_col,"pandas.read_csv(""standard_sat_data_col.csv"",index_col=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
qt_col,"pandas.read_csv(""qt_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(file,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
standard_col,"pandas.read_csv(""standard_sat_data_col.csv"",index_col=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(""1/test_score_by_test_id_report_1.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test1,"pandas.read_csv(file,sep='delimiter',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
col,"pandas.read_csv(""standard_col.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,"pandas.read_csv(""test_info_testNum_1.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_number,"numpy.arange(1,115)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
number,numpy.arange(len(col),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_number,"numpy.arange(1,408)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_number,"numpy.arange(1,5)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
number,numpy.arange(len(col),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_number,"numpy.arange(1,32)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
number,numpy.arange(len(col),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
can_enter,numpy.logical_and(dv.get_ts('up_limit'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
can_exit,numpy.logical_and(dv.get_ts('down_limit'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
slope_df,"pandas.DataFrame({name:-ta.LINEARREG_SLOPE(value.values,param)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
self.w_,numpy.zeros(1+X.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse_val,numpy.sqrt(mean_of_differences_squared),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,numpy.corrcoef(df[cols].values.T),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('./housing.data',sep=""\s+"",names=columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hm,"seaborn.heatmap(cm,
cbar=True,
annot=True,
square=True,
fmt='.2f',
annot_kws={'size':15},
yticklabels=cols,
xticklabels=cols)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_std,y_std,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_x,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_y,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.SGDRegressor(eta0=0.0001,n_iter=20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
im_list,numpy.asarray(im),CLUSTER_2,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.expand_dims(x,axis=0)",CLUSTER_2,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(""acled_social_iso3_labeled.csv"",index_col=0)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_new,pandas.read_csv(fname),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
locs,"numpy.arange(0.,len(labels)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
fig,"seaborn.lineplot(x='EVENT_DATE_MONTH',y='Battles',data=df_Ang,color='blue')",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
fig,"seaborn.lineplot(x='EVENT_DATE_MONTH',y='Battles',data=df_norm,color='red')",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
c,"matplotlib.pyplot.colorbar(img,ax=ax,fraction=0.046,pad=0.04,label='$\mathcal{C}_{ij}/\sqrt{\mathcal{C}_{ii}\mathcal{C}_{jj}}$')",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
cbytick_obj,"matplotlib.pyplot.getp(c.ax.axes,'yticklabels')",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,"numpy.zeros([count,window])",CLUSTER_12,CLUSTER_7,CLUSTER_5,CLUSTER_22,CLUSTER_8
Y,"numpy.zeros([count,m])",CLUSTER_12,CLUSTER_7,CLUSTER_5,CLUSTER_22,CLUSTER_8
x,"numpy.fromfile(f,dtype=np.float32)",CLUSTER_12,CLUSTER_7,CLUSTER_5,CLUSTER_22,CLUSTER_8
fig,matplotlib.pyplot.gcf(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('auto.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.asarray(table_train.rows[(i-1),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,numpy.asarray(table_test.rows[(i-1),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_rep,numpy.zeros(((table_train.num_columns-2),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_dem,numpy.zeros(((table_train.num_columns-2),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Y_train,numpy.zeros((len(X_train),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Y_test,numpy.zeros((len(X_test),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_train,"numpy.empty((table_train.num_rows,16)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_test,"numpy.empty((table_test.num_rows,16)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Labels,"numpy.argmax(Y_train,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Labels,"numpy.argmax(Y_test,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
train_label,numpy.asarray(train_label),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
coefs,"pandas.Series(ridge.coef_,index=X_train.columns)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
coefs,"pandas.Series(lasso.coef_,index=X_train.columns)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
coefs,"pandas.Series(elasticNet.coef_,index=X_train.columns)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.concat([train_num,train_cat],axis=1)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_coefs,pandas.concat([coefs.sort_values(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_coefs,pandas.concat([coefs.sort_values(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_coefs,pandas.concat([coefs.sort_values(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_cat,pandas.get_dummies(train_cat),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""../dat/train.csv"")",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.SalePrice,numpy.log1p(train.SalePrice),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_num[skewed_features],numpy.log1p(train_num[skewed_features]),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""OverallQual-Sq""]","numpy.sqrt(train[""OverallQual""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""AllSF-Sq""]","numpy.sqrt(train[""AllSF""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""AllFlrsSF-Sq""]","numpy.sqrt(train[""AllFlrsSF""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""GrLivArea-Sq""]","numpy.sqrt(train[""GrLivArea""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""SimplOverallQual-Sq""]","numpy.sqrt(train[""SimplOverallQual""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""ExterQual-Sq""]","numpy.sqrt(train[""ExterQual""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""GarageCars-Sq""]","numpy.sqrt(train[""GarageCars""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""TotalBath-Sq""]","numpy.sqrt(train[""TotalBath""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""KitchenQual-Sq""]","numpy.sqrt(train[""KitchenQual""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""GarageScore-Sq""]","numpy.sqrt(train[""GarageScore""])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(-cross_val_score(model,X_train,y_train,scoring=scorer,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(-cross_val_score(model,X_test,y_test,scoring=scorer,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train,y,test_size=0.3,random_state=0)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
stdSc,sklearn.preprocessing.StandardScaler(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,"sklearn.linear_model.RidgeCV(alphas=[0.01,0.03,0.06,0.1,0.3,0.6,1,3,6,10,30,60])",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,"sklearn.linear_model.RidgeCV(alphas=[alpha*.6,alpha*.65,alpha*.7,alpha*.75,alpha*.8,alpha*.85,
alpha*.9,alpha*.95,alpha,alpha*1.05,alpha*1.1,alpha*1.15,
alpha*1.25,alpha*1.3,alpha*1.35,alpha*1.4],
cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,"sklearn.linear_model.LassoCV(alphas=[0.0001,0.0003,0.0006,0.001,0.003,0.006,0.01,0.03,0.06,0.1,
0.3,0.6,1],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,"sklearn.linear_model.LassoCV(alphas=[alpha*.6,alpha*.65,alpha*.7,alpha*.75,alpha*.8,
alpha*.85,alpha*.9,alpha*.95,alpha,alpha*1.05,
alpha*1.1,alpha*1.15,alpha*1.25,alpha*1.3,alpha*1.35,
alpha*1.4],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elasticNet,"sklearn.linear_model.ElasticNetCV(l1_ratio=[0.1,0.3,0.5,0.6,0.7,0.8,0.85,0.9,0.95,1],
alphas=[0.0001,0.0003,0.0006,0.001,0.003,0.006,
0.01,0.03,0.06,0.1,0.3,0.6,1,3,6],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elasticNet,"sklearn.linear_model.ElasticNetCV(l1_ratio=[ratio*.85,ratio*.9,ratio*.95,ratio,ratio*1.05,ratio*1.1,ratio*1.15],
alphas=[0.0001,0.0003,0.0006,0.001,0.003,0.006,0.01,0.03,0.06,0.1,0.3,0.6,1,3,6],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elasticNet,"sklearn.linear_model.ElasticNetCV(l1_ratio=ratio,
alphas=[alpha*.6,alpha*.65,alpha*.7,alpha*.75,alpha*.8,alpha*.85,alpha*.9,
alpha*.95,alpha,alpha*1.05,alpha*1.1,alpha*1.15,alpha*1.25,alpha*1.3,
alpha*1.35,alpha*1.4],
max_iter=50000,cv=10)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scorer,"sklearn.metrics.make_scorer(mean_squared_error,greater_is_better=False)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
c,"train_set[""SibSp""],cmap=matplotlib.pyplot.get_cmap(""jet"")",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,7)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
rects1,"matplotlib.pyplot.bar(index,e_mate,bar_width,color='red',label='Mate')",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
rects2,"matplotlib.pyplot.bar(index+bar_width,e_crom,bar_width,color='blue',label='Cromada')",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,((a1,a2),(a3,a4),(a5,a6),(a7,a8))","matplotlib.pyplot.subplots(4,2)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
index,numpy.arange(8),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
e_mate,numpy.array(suma_error_mate),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
e_crom,numpy.array(suma_error_cromada),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
referencia_data,numpy.loadtxt(ref),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
files,os.listdir('.'),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
onehot_labels,"numpy.array([[0,1]ifielse[1,0]foriinlabels])",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
labels,numpy.zeros(total_files),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
"img_train,img_test,label_train,label_test","sklearn.model_selection.train_test_split(image_paths,onehot_labels,random_state=42,shuffle=True)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
r,requests.get('http://www.plszh.ch/plsFeed/rss'),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get('https://www.watson.ch'),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get(url),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(outtweets,columns=['Tweets','Date'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
new_df,pandas.DataFrame([]),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(a,columns=['actor_id','actor_name','gender','movie_id','actor_id','characters'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(data,columns=['date','tweet'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
a,numpy.asarray(row),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,"pandas.merge(click,unclick,how='outer',on=['assemble','assemble'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_df,"pandas.read_csv('..\data\oppo_train_valt_est_csv\oppo_round1_test_A_20180929.csv',encoding='UTF-8')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_df,"pandas.read_csv('..\data\oppo_train_valt_est_csv\oppo_round1_train_20180929.csv',encoding='UTF-8')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
vali_df,"pandas.read_csv('..\data\oppo_train_valt_est_csv\oppo_round1_vali_20180929.csv',encoding='UTF-8')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
locs,numpy.where(train_df['prefix']=='汽车\t'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
files,os.listdir(data_dir),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
array,"pandas.read_hdf(os.path.join(data_dir,files[0])",CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
df_centers,"pandas.DataFrame(data,columns=demos_reduced.columns)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_hdf(path,key='panel')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_demos,"pandas.read_hdf(path,key='demos')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.KMeans(n_clusters=6,n_jobs=-1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
store,pandas.HDFStore('/Users/ryanriopelle/Documents/DSE/DSE220/yogurt.h5'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
img_pil_np,numpy.array(img_pil),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
mape,numpy.mean(np.abs(pred-actual),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
me,numpy.mean(pred-actual),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
mae,numpy.mean(np.abs(pred-actual),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
mpe,numpy.mean((pred-actual),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
pred_oil_pirce,pandas.concat([pd.DataFrame(newp),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
act_pred,pandas.concat([pd.DataFrame(forecast_df.sarima_oilprice.values),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('dataset/iron_oilmonthly.csv',parse_dates=['date'])",CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
forecast_df,pandas.read_csv('dataset/oil_forecast_data.csv'),CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
x,numpy.array(column),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfTrain,pandas.DataFrame(dfTrain),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfTrain,"pandas.read_csv(""E:\Downlload\BlackFridayTrain.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(20,9)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.30,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_sel_model,"sklearn.feature_selection.SelectFromModel(Lasso(alpha=0.005,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,max_depth=7,min_samples_split=4,min_samples_leaf=2,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
candidates,numpy.flatnonzero(results['rank_test_score']==i),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_score_mean,"numpy.mean(training_score,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
val_score_mean,"numpy.mean(val_score,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_score_std,"numpy.std(training_score,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
val_score_std,"numpy.std(val_score,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
n_jobs,"None,train_sizes=numpy.linspace(.1,1.0,5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
digits,sklearn.datasets.load_digits(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(digits.data,digits.target,stratify=digits.target,random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"training_score,val_score","sklearn.model_selection.validation_curve(MLPClassifier(max_iter=5000,activation='tanh',random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.ShuffleSplit(n_splits=100,test_size=0.2,random_state=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(mlp,param_grid=param_grid,cv=5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp,sklearn.neural_network.MLPClassifier(random_state=0),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp_final,"sklearn.neural_network.MLPClassifier(max_iter=1000,activation='tanh',random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(max_iter=5000,random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
clf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
a,numpy.array(oneword_per),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
last,"numpy.concatenate((last,current)",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
current,"numpy.multiply(oneword_per[i],twoword_per[i])",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
last,"numpy.multiply(values1,values1)",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
last,"numpy.multiply(values1,values1)",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
clf,"sklearn.svm.SVC(kernel=""rbf"")",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
chromosome_state_x,random.choice(chromosome_states),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
pos,"random.choice(range(1,CHROMOSOME_SIZE-1)",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
pos,"random.choice(range(8,CHROMOSOME_SIZE-1)",CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
chromosome_state,random.choice(chromosome_states),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
pos,random.choice(range(len(chromosome_state),CLUSTER_10,CLUSTER_4,CLUSTER_10,CLUSTER_0,CLUSTER_1
B,"scipy.linalg.solve(A,C)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"freq,power","scipy.signal.periodogram(resp,1.0/(t[1]-t[0])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"freq2,power2","scipy.signal.periodogram(B,1.0/(t[1]-t[0])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,"pandas.read_csv(""out.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
demo_df,pandas.read_csv('Demographics_Data'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
engagement_by_account,collections.defaultdict(list),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
grouped_data,collections.defaultdict(list),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
"fig1,ax1",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
dataframe,"pandas.DataFrame(features,columns=[
""BCG"",
""HB<7HARI"",
""DPT-HB-HiB(1)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
csv_data,"pandas.read_csv(
'imunisasi.csv',usecols=[1,2,3,4,5,6,7],
names=[
""Provinsi"",
""BCG"",
""HB<7HARI"",
""DPT-HB-HiB(1)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
province_data,"pandas.read_csv(
'imunisasi.csv',usecols=[0],
names=[
""Provinsi"",
],header=0
)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"features,_","sklearn.datasets.make_blobs(n_samples=50,
n_features=2,
centers=3,
random_state=1)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
clusterer,"sklearn.cluster.KMeans(4,random_state=0)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
time_df,"pandas.DataFrame(time_data,columns=column_labels)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
ts,"pandas.Timestamp(row.ts,unit='ms')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.read_json(filepath,lines=True)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.read_json(filepath,lines=True)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.read_json(filepath,lines=True)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data_y1,"pandas.read_csv('C:/Users/Vijay/Desktop/Sem2/bigdataproject/DataAnalysis/crime_by_offese/crime_by_ofns_year1.csv',header=None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_y2,"pandas.read_csv('C:/Users/Vijay/Desktop/Sem2/bigdataproject/DataAnalysis/crime_by_offese/crime_by_ofns_year2.csv',header=None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_y3,"pandas.read_csv('C:/Users/Vijay/Desktop/Sem2/bigdataproject/DataAnalysis/crime_by_offese/crime_by_ofns_year3.csv',header=None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_y4,"pandas.read_csv('C:/Users/Vijay/Desktop/Sem2/bigdataproject/DataAnalysis/crime_by_offese/crime_by_ofns_year4.csv',header=None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_y5,"pandas.read_csv('C:/Users/Vijay/Desktop/Sem2/bigdataproject/DataAnalysis/crime_by_offese/crime_by_ofns_year5.csv',header=None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
oversample,"pandas.concat([X2_train,y2_train],axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X2_train,pandas.concat(lst),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('BinDF2',header=0,index_col=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=10,random_state=7)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=10,random_state=123)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(clf,X1_train,y1_train,cv=kfold,scoring=scoring)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(clf1,X2_train,y2_train,cv=kfold,scoring=scoring)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X1_train,X1_test,y1_train,y1_test","sklearn.model_selection.train_test_split(predictors_y1,y1,test_size=0.2,random_state=123)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X2_train,X2_test,y2_train,y2_test","sklearn.model_selection.train_test_split(predictors_y2,y2,test_size=0.2,random_state=123)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
confusion_matrix_y1,"sklearn.metrics.confusion_matrix(y1_test,y1_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
confusion_matrix_y2,"sklearn.metrics.confusion_matrix(y2_test,y2_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_roc_auc,"sklearn.metrics.roc_auc_score(y1_test,y1_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf1_roc_auc,"sklearn.metrics.roc_auc_score(y2_test,y2_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf1,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_ax,numpy.array([item[0]foritemincounts]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
freqs,numpy.array([item[1]foritemincounts]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
words,numpy.array(vectorizer.get_feature_names(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,"numpy.zeros(critics.shape[0],dtype=np.bool)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ind,numpy.argsort(probs),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bad_rotten,numpy.argsort(prob[y==0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bad_fresh,numpy.argsort(prob[y==1]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sorted_doc_freqs,numpy.sort(word_doc_freq['DocFreq']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.eye(xtest.shape[1]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(facecolor='white',figsize=(20,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel('NumberofDocuments'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylabel('CDFofWordFreq.'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xvar,"pandas.DataFrame(xvar,columns=vectorizer.get_feature_names()",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
critics,pandas.read_csv('./critics.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,y_train,X_test,y_test","sklearn.model_selection.train_test_split(X,y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(X,y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"_,itest",sklearn.model_selection.train_test_split(range(critics.shape[0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.naive_bayes.MultinomialNB(alpha=alpha),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(alpha=best_alpha),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
counts,collections.Counter(sorted_doc_freqs),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.total_rewards,"numpy.zeros(num_actions,dtype=np.longdouble)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
self.total_counts,"numpy.zeros(num_actions,dtype=np.longdouble)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_action,numpy.argmax(current_averages),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_action,numpy.argmax(current_averages),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_action,numpy.argmax(current_averages),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_averages,"numpy.divide(self.total_rewards,self.total_counts,where=self.total_counts>0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_averages,"numpy.divide(self.total_rewards,self.total_counts,where=self.total_counts>0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_averages,numpy.divide(self.total_rewards+np.sqrt(np.log(self.round),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
figTSNE,"matplotlib.pyplot.figure(figsize=(32,24)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
ax1,"matplotlib.pyplot.subplot(G[1:numclusters_plot,0:numclusters_plot])",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(G[0,ind])",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
Z_embedding_tree,"scipy.spatial.cKDTree(Z_tsne,compact_nodes=True)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
greyc_U,"numpy.array([0.5,0.5,0.5,0.5])",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
YnxG_allNME,"numpy.asarray([nxGdatafeatures['lesion_id'].values,
nxGdatafeatures['roi_id'].values,
nxGdatafeatures['classNME'].values,
nxGdatafeatures['nme_dist'].values,
nxGdatafeatures['nme_int'].values])",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
YnxG_allNME,"numpy.asarray([nxGdatafeatures['roi_id'].values,
nxGdatafeatures['classNME'].values,
nxGdatafeatures['nme_dist'].values,
nxGdatafeatures['nme_int'].values])",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
y_dec,numpy.asarray(y_dec),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
pbestacci,"numpy.zeros((zbestacci.shape[0],dec_model['num_centers'])",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
combX_allNME,"numpy.concatenate((nxGdiscfeatures,normdynamic.as_matrix()",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
dataZspace_wmu,"numpy.concatenate((zbestacci,pbestacci)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
Zspace_mu,numpy.concatenate((dec_args['dec_mubestacci'].asnumpy(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
dataZspace_wmu,"numpy.concatenate((dataZspace_wmu,Zspace_mu)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
allNMEs_dynamic,"pandas.read_csv(os.path.join(NME_nxgraphs,'dyn_roi_records_allNMEs_descStats.csv')",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
allNMEs_morphology,"pandas.read_csv(os.path.join(NME_nxgraphs,'morpho_roi_records_allNMEs_descStats.csv')",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
allNMEs_texture,"pandas.read_csv(os.path.join(NME_nxgraphs,'text_roi_records_allNMEs_descStats.csv')",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
allNMEs_stage1,"pandas.read_csv(os.path.join(NME_nxgraphs,'stage1_roi_records_allNMEs_descStats.csv')",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=2,perplexity=15,learning_rate=125,
init='pca',random_state=0,verbose=2,method='exact')",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
df['SPARQLendpoint'],pandas.Series(list_se),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('LODAtlas_geourls_wSparqlEndpoint-copia.csv',encoding='latin-1',sep='@')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
request_SE,"requests.get(url,headers=headers,data=payload)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,"requests.request(""GET"",url,headers=headers,data=payload)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df3,pandas.read_csv('df3'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
f,matplotlib.pyplot.figure(),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_30,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_30,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_30,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
XX,numpy.array([X.ravel(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
XX,numpy.array([X.ravel(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mu_true,"numpy.asanyarray(
[[0.2,0.5],
[1.2,0.5],
[2.0,0.5]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sigma_true,"numpy.asanyarray(
[[[0.1,0.085],[0.085,0.1]],
[[0.1,-0.085],[-0.085,0.1]],
[[0.1,0.085],[0.085,0.1]]
])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sigma,"numpy.asanyarray(
[[[0.1,0],[0,0.1]],
[[0.1,0],[0,0.1]],
[[0.1,0],[0,0.1]]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp,numpy.asanyarray(data[i]-mu[k]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mu_true,"numpy.asanyarray(
[[0.2,0.5],
[1.2,0.5],
[2.0,0.5]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sigma_true,"numpy.asanyarray(
[[[0.1,0.085],[0.085,0.1]],
[[0.1,-0.085],[-0.085,0.1]],
[[0.1,0.085],[0.085,0.1]]
])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood,numpy.zeros((np.sum(n),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pi,numpy.zeros(K),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp_mu,"numpy.zeros((K,D)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp_sigma,"numpy.zeros((K,D,D)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tmp_sigma[k],"numpy.zeros((D,D)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Z,"numpy.sum(np.asanyarray(calc_prob_gmm(XX,mu,sigma,pi,K)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
N,numpy.sum(n),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
prev_sum_log_likelihood,numpy.sum(np.log(prev_likelihood),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sum_log_likelihood,numpy.sum(np.log(likelihood),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Z,"numpy.sum(np.asanyarray(calc_prob_gmm(XX,mu_true,sigma_true,np.array(n)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(np.linspace(min_x,max_x)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X,Y","numpy.meshgrid(np.linspace(min_x,max_x)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
CS,"matplotlib.pyplot.contour(X,Y,Z,alpha=0.2,zorder=-100)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
CS,"matplotlib.pyplot.contour(X,Y,Z,alpha=1,zorder=-100,linewidths=0.7,levels=levels)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
count,collections.Counter(),CLUSTER_1,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
regex,"re.compile('[^a-zA-Z,]')",CLUSTER_1,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
cv,"sklearn.model_selection.KFold(10,shuffle=True)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
cv,sklearn.model_selection.KFold(10),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
model,sklearn.linear_model.LinearRegression(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
model,sklearn.linear_model.LinearRegression(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
scores[i],"sklearn.metrics.r2_score(y_test,y_pred)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
dfts,"pandas.DataFrame(data,columns=['frame','timestamp','lat','lon'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dfgps,"pandas.read_csv(gpslogpath,parse_dates=['time'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
timestamp,pandas.to_datetime(timestamp),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
createDate,"datetime.datetime.strptime(createDate,'%Y:%m:%d%H:%M:%S')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,numpy.arange(kclusters),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(A,columns=['Postcode'])",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_onehot,"pandas.get_dummies(toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
geo,pandas.read_csv('./Geospatial_Coordinates.csv'),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
b1,"numpy.zeros((n_h,1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
b2,"numpy.zeros((n_y,1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Z1,"numpy.dot(W1,X)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Z2,"numpy.dot(W2,A1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
dZ1,"numpy.dot(W2.T,dZ2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
shape_X,numpy.shape(X),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
shape_Y,numpy.shape(Y),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
n_x,numpy.shape(X),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
n_y,numpy.shape(Y),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
cost,numpy.squeeze(cost),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
logprobs,numpy.multiply(np.log(A2),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
A1,numpy.tanh(Z1),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegressionCV(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
filepath,os.getcwd(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
X,"numpy.zeros((n,224,224,3)",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_5,CLUSTER_9
y,"numpy.zeros((n,1)",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_5,CLUSTER_9
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_5,CLUSTER_9
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
table,pandas.read_html(f'https://www.numbeo.com/quality-of-life/in/{city}'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
table,pandas.read_html(f'https://www.numbeo.com/quality-of-life/in/{city}'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
table,pandas.read_html(f'https://www.numbeo.com/quality-of-life/in/{city}'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
bern,pandas.read_html(f'https://www.numbeo.com/quality-of-life/in/Bern'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
correct_out,"numpy.array([[1.49834967,1.70660132,1.91485297],
[3.25553199,3.5141327,3.77273342]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
correct_out,"numpy.array([[0.,0.,0.,0.,],
[0.,0.,0.04545455,0.13636364,],
[0.22727273,0.31818182,0.40909091,0.5,]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
correct_scores,"numpy.asarray(
[[11.53165108,12.2917344,13.05181771,13.81190102,14.57198434,15.33206765,16.09215096],
[12.05769098,12.74614105,13.43459113,14.1230412,14.81149128,15.49994135,16.18839143],
[12.58373087,13.20054771,13.81736455,14.43418138,15.05099822,15.66781506,16.2846319]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y,"numpy.asarray([0,5,1])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[0.1406,0.20738947,0.27417895,0.34096842,0.40775789],
[0.47454737,0.54133684,0.60812632,0.67491579,0.74170526],
[0.80849474,0.87528421,0.94207368,1.00886316,1.07565263],
[1.14244211,1.20923158,1.27602105,1.34281053,1.4096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_velocity,"numpy.asarray([
[0.5406,0.55475789,0.56891579,0.58307368,0.59723158],
[0.61138947,0.62554737,0.63970526,0.65386316,0.66802105],
[0.68217895,0.69633684,0.71049474,0.72465263,0.73881053],
[0.75296842,0.76712632,0.78128421,0.79544211,0.8096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.39223849,-0.34037513,-0.28849239,-0.23659121,-0.18467247],
[-0.132737,-0.08078555,-0.02881884,0.02316247,0.07515774],
[0.12716641,0.17918792,0.23122175,0.28326742,0.33532447],
[0.38739248,0.43947102,0.49155973,0.54365823,0.59576619]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_cache,"numpy.asarray([
[0.5976,0.6126277,0.6277108,0.64284931,0.65804321],
[0.67329252,0.68859723,0.70395734,0.71937285,0.73484377],
[0.75037008,0.7659518,0.78158892,0.79728144,0.81302936],
[0.82883269,0.84469141,0.86060554,0.87657507,0.8926]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.40094747,-0.34836187,-0.29577703,-0.24319299,-0.19060977],
[-0.1380274,-0.08544591,-0.03286534,0.01971428,0.0722929],
[0.1248705,0.17744702,0.23002243,0.28259667,0.33516969],
[0.38774145,0.44031188,0.49288093,0.54544852,0.59801459]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_v,"numpy.asarray([
[0.69966,0.68908382,0.67851319,0.66794809,0.65738853,],
[0.64683452,0.63628604,0.6257431,0.61520571,0.60467385,],
[0.59414753,0.58362676,0.57311152,0.56260183,0.55209767,],
[0.54159906,0.53110598,0.52061845,0.51013645,0.49966,]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_m,"numpy.asarray([
[0.48,0.49947368,0.51894737,0.53842105,0.55789474],
[0.57736842,0.59684211,0.61631579,0.63578947,0.65526316],
[0.67473684,0.69421053,0.71368421,0.73315789,0.75263158],
[0.77210526,0.79157895,0.81105263,0.83052632,0.85]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_test_pred,numpy.argmax(best_model.loss(data['X_test']),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_val_pred,numpy.argmax(best_model.loss(data['X_val']),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-0.1,0.5,num=input_size)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.2,0.3,num=weight_size)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
b,"numpy.linspace(-0.3,0.1,num=output_dim)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-0.5,0.5,num=12)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['W1'],"numpy.linspace(-0.7,0.3,num=D*H)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['b1'],"numpy.linspace(-0.1,0.9,num=H)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['W2'],"numpy.linspace(-0.3,0.4,num=H*C)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['b2'],"numpy.linspace(-0.9,0.1,num=C)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X,"numpy.linspace(-5.5,4.5,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
cache,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
m,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.7,0.5,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
r,"random.randint(0,mnist.test.num_examples-1)",CLUSTER_2,CLUSTER_11,CLUSTER_1,CLUSTER_0,CLUSTER_1
df,pandas.read_excel('http://cdn.sundog-soft.com/Udemy/DataScience/cars.xls'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
bins,"numpy.arange(0,50000,10000)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scale,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
installs,"pandas.read_csv(r'C:\Users\Matias\Documents\UBA\Datos\installs.csv.gzip',compression='gzip')",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
installs['created'],pandas.to_datetime(installs['created']),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
news,requests.get(url),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame({'news':text_list}),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,df_temp])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.read_table(csv_path,sep=',')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
csv_path,"os.getenv(""HOME"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
csv_path,"os.getenv(""HOME"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(text_data,df['code'],random_state=0)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ds,pandas.read_csv('Ads_CTR_Optimisation.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
random_beta,"random.betavariate(no_of_rewards_1[i]+1,no_of_rewards_0[i]+1)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
raw_data,numpy.fromstring(f.read(n*28*28),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
labels,numpy.fromstring(f.read(n),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
f,"matplotlib.pyplot.figure(figsize=(16,9)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-5,5,.1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.arange(0,50,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.arange(0,40,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.arange(1,100,.1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x1,"numpy.arange(.0001,4,.0001)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x2,"numpy.arange(-5,4,.1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
vlog,numpy.vectorize(math.log),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
vlog,numpy.vectorize(math.log),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
ds,"numpy.loadtxt(""pima-indians-diabetes.data"",delimiter="","")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A_np,"numpy.array([[0,1,2,3,4],[5,6,7,8,9]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
movie,"pandas.read_csv('./data/movie.csv',index_col='movie_title')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
movie,pandas.read_csv('data/movie.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
movie,pandas.read_csv('data/movie.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
movie,pandas.read_csv('data/movie.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dataset,"sklearn.datasets.fetch_20newsgroups(subset='all',categories=None,
shuffle=True,random_state=42)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
true_k,numpy.unique(labels),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
t0,time.time(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
km,"sklearn.cluster.KMeans(n_clusters=true_k,init='k-means++',max_iter=100,n_init=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
bt_df,pandas.DataFrame(bt_rs['beta_cntrd']),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
bt_sm,pandas.DataFrame(bt_rs['beta_sum_dat']),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pcoeff,pandas.DataFrame(pscdata[1]['pcoeff']),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pscdata,json.load(f_obj),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pscdata,json.load(f_obj),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_blobs(n_samples=150,
n_features=2,
centers=3,
cluster_std=0.5,
shuffle=True,
random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(8,3)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.KMeans(n_clusters=3,
init='random',
n_init=10,
max_iter=300,
tol=1e-04,
random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.KMeans(n_clusters=i,
init='k-means++',
n_init=10,
max_iter=300,
random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.KMeans(n_clusters=3,init='k-means++',n_init=10,max_iter=300,tol=1e-04,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.KMeans(n_clusters=2,
init='random',
n_init=10,
max_iter=300,
tol=1e-04,
random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
km,"sklearn.cluster.KMeans(n_clusters=2,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
silhouette_avg,numpy.mean(silhouette_vals),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
silhouette_avg,numpy.mean(silhouette_vals),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
cluster_labels,numpy.unique(y_km),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
cluster_labels,numpy.unique(y_km),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
silhouette_vals,"sklearn.metrics.silhouette_samples(X,y_km,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
silhouette_vals,"sklearn.metrics.silhouette_samples(X,y_km,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(X,columns=variables,index=labels)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
row_dist,"pandas.DataFrame(squareform(pdist(df,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
ac,"sklearn.cluster.AgglomerativeClustering(n_clusters=2,affinity='euclidean',linkage='complete')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
ac,"sklearn.cluster.AgglomerativeClustering(n_clusters=2,affinity='euclidean',linkage='complete')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_moons(n_samples=200,noise=0.05,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
db,"sklearn.cluster.DBSCAN(eps=0.2,min_samples=5,metric='euclidean')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
purchasing_analysis_total_df,"pandas.DataFrame({""NumberofUniqueItems"":[num_of_unique_items],
""AveragePrice"":[average_purchase_price],
""NumberofPurchases"":[total_num_of_purchases],
""TotalRevenue"":[total_revenue]})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
gender_demographics_df,"pandas.DataFrame({""Gender"":[""Male"",""Female"",""Other/Non-Disclosed""],
""TotalCount"":[count_of_males,count_of_females,count_of_other],
""PercentOfPlayers"":[percent_of_males,percent_of_females,percent_of_other]})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
purchasing_analisis_df_by_gender_summary_df,"pandas.DataFrame({""PurchaseCount"":purchase_count,""AveragePurchasePrice"":average_purchase_value,
""TotalPurchaseValue"":total_purchase_value,""AverageTotalPurchaseperPerson"":average_total_purchase_per_person})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
age_demographics_summary_df,"pandas.DataFrame({""TotalCount"":total_age_count,""PercentageofPlavers"":age_percentage})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
top_spenders_summary_df,"pandas.DataFrame({""TotalPurchaseValue"":total_purchase_by_spender,
""PurchaseCount"":purchase_count_by_spender,
""AveragePurchasePrice"":average_purchase_by_spender,
})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
grouped_by_popular_items_summary_df,"pandas.DataFrame({""PurchaseCount"":purchase_count_by_popular_item,
""ItemPrice"":item_price_by_popular_item,
""TotalPurchaseValue"":total_purchase_value_by_popular_item,
})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"pymoli_df[""age_group""]","pandas.cut(pymoli_df[""Age""],age_bins,labels=group_names)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
pymoli_df,pandas.read_csv(csv_path),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
nfl_frame['Stadium'],numpy.arange(5),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
city_frame,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
series1,"pandas.Series([3,6,9,12])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ww2_casualities,"pandas.Series([8700000,4300000,3000000,2100000,400000],
index=['USSR','Germany','China','Japan','USA'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ww2_series,pandas.Series(ww2_dict),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
series2,"pandas.Series(ww2_dict,index=countries)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
stadiums,"pandas.Series([""Levi'sStadium"",""AT&TStadium""],index=[4,0])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
nfl_frame,pandas.read_clipboard(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
schedF,pandas.DataFrame(newSchedules),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
weekDf,pandas.DataFrame(newWeeks),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ratingDf,pandas.DataFrame(newRatings),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
TNR,pandas.DataFrame(TNR),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ratingDf,pandas.DataFrame(newRatings),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
TNR_2016,pandas.DataFrame(TNR_2016),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_2016,pandas.concat(list_file),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_2016,pandas.concat(list_all_week),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_2017,pandas.read_csv(path),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(name),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_2016_week8,pandas.read_csv(path),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newSchedules,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newWeeks,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean,"numpy.mean(df_each_week[""SchedulePacing""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean,"numpy.mean(df_each_week[""SchedulePacing""])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newSchedules,"numpy.append(newSchedules,int(schedulesKey[string])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newSchedules,"numpy.append(newSchedules,None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newWeeks,"numpy.append(newWeeks,int(string[-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""Promoter"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""Passive"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""Detractor"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""NaN"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
npsScores,"numpy.append(npsScores,nps*100)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pacing_ave,"numpy.append(pacing_ave,mean)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""Promoter"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""Passive"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""Detractor"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
newRatings,"numpy.append(newRatings,""NaN"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
npsScores,"numpy.append(npsScores,nps*100)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pacing_ave,"numpy.append(pacing_ave,mean)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fullData,pandas.DataFrame(),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
percentile_df,"pandas.DataFrame(
{'5thPercentile':percentiles[0],
'25thPercentile':percentiles[1],
'Median':percentiles[2],
'75thPercentile':percentiles[3],
'95thPercentile':percentiles[4],
'Mean':np.mean(prediction,axis=0)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
fullData,"pandas.concat([fullData,pd.read_csv('PMU{0}_event{1}.csv'.format(i,event)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y_t,"numpy.zeros((num_points,horizon+order)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"y_t[:,i]","numpy.sum(y_t[:,i-order:i]*rho,axis=1)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
percentiles,"numpy.percentile(prediction,[2.5,25,50,75,97.5],axis=0)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"y_t[:,0:order]","numpy.tile(y_initial,(num_points,1)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(15,9)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(15,9)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,pandas.DataFrame([labels]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe,pandas.read_csv('edlich-kmeans-A0.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_data,"numpy.linspace(0.0,10.0,1000000)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
my_data,"pandas.concat([pd.DataFrame(data=x_data,columns=['XData'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_eval,y_train,y_eval","sklearn.model_selection.train_test_split(x_data,y_true,test_size=0.3,random_state=101)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nfl_frame['Stadium'],numpy.arange(5),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
nfl_frame,pandas.read_clipboard(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
stadiums,"pandas.Series([""Levi'sStadium"",""ATTStadium""],index=[4,0])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
city_frame,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
lr_model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_0
self.z,"numpy.dot(X,self.W1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
self.z3,"numpy.dot(self.z2,self.W2)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
Boston,pandas.read_csv('C:/Users/Sk@softech/Desktop/mlDataSet/Boston.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
table,pandas.read_html(url_facts),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
response,requests.get(url_facts),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
mars_weather,re.compile(r'sol'),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
target,"numpy.array([target],dtype=np.long)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
img,numpy.moveaxis((image_batch[j].numpy(),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
img,numpy.moveaxis((data[k].numpy(),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
images,"numpy.pad(images,pad,""constant"",constant_values=0)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
images,"numpy.pad(images,pad,""constant"",constant_values=0)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
start_time,time.time(),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
end_time,time.time(),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
kernel1,"numpy.ones((3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel1,"numpy.ones((3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel1,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((7,7)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel1,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((7,7)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel1,"numpy.ones((3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel1,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((9,9)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel1,"numpy.ones((5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
kernel2,"numpy.ones((11,11)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
response,"requests.request(""GET"",url,headers=headers,params=querystring)",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,"requests.request(""POST"",url,data=payload,headers=headers)",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,"requests.request(""GET"",url,params=payload,headers=headers)",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
stuff,json.load(open('resale.json'),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,json.load(open(filepath),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pd_all,pandas.concat(all_data.values(),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pd_all,"pandas.read_csv('hdb_resale_may18.csv',index_col=0)",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.read_html(table_str),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,pandas.read_json(data),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pd_all.month,pandas.to_datetime(pd_all.month),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pd_gl['year'],pandas.to_datetime(pd_gl.month),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pd_all['resale_price'],"pandas.to_numeric(pd_all['resale_price'].str.replace('[^\d.]','')",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pd_gl['remaining_lease'],"pandas.to_numeric(pd_gl['remaining_lease'].str.replace('[^\d.]','')",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"code,name","re.split('\s+',n.get('value')",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
iqr,"numpy.subtract(*np.percentile(df_gl_2018.resale_price,[75,25])",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
nyc_schools,"pandas.merge(quality,teacher,on='DBN')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
nyc_schools_ela,"pandas.merge(nyc_schools.drop('StudentAchievementRating',
axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
nyc_schools_math,"pandas.merge(nyc_schools.drop('StudentAchievementRating',
axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
quality,"pandas.read_excel('Data/2018_school_quality.xlsx',header=1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
teacher,pandas.read_excel('Data/teacher.xlsx'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ela,"pandas.read_excel(""Data/NYCDOE_2018/school-ela-results-2018.xlsx"",
header=None)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
math,"pandas.read_excel(""Data/NYCDOE_2018/school-math-results-2018.xlsx"",
header=None)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,15)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,25)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,25)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
matrix1,"numpy.array([[1,1],[2,2],[3,3]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_10
matrix2,"numpy.array([[0],[0],[0]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_10
vector1D,"numpy.array([1,1])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_10
vector2D,"numpy.array([[1],[1]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_10
a_prev,"numpy.zeros((n_a,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_10
V,numpy.zeros(env.nS),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
q,numpy.zeros(env.nA),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Q,"numpy.zeros([env.nS,env.nA])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
policy,"numpy.zeros([env.nS,env.nA])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
V,numpy.zeros(env.nS),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
policy,"numpy.zeros([env.nS,env.nA])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
V,numpy.zeros(env.nS),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
best_a,numpy.argwhere(q==np.max(q),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
random_policy,"numpy.ones([env.nS,env.nA])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
policy,"numpy.ones([env.nS,env.nA])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
policy[s],numpy.sum([np.eye(env.nA),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
obj,numpy.array(correlation_map),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""total.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(5,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(6,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.PairGrid(gp,hue=""variety"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.jointplot(x=""max_price"",y=""modal_price"",data=gp,kind=""reg"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.jointplot(x=""min_price"",y=""max_price"",data=gp,kind=""reg"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""data/ner_dataset.csv"",encoding=""latin1"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pred,sklearn.model_selection.cross_val_predict(estimator=MemoryTagger(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pred,sklearn.model_selection.cross_val_predict(RandomForestClassifier(n_estimators=20),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pred,"sklearn.model_selection.cross_val_predict(Pipeline([(""feature_map"",FeatureTransformer()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
report,"sklearn.metrics.classification_report(y_pred=pred,y_true=tags)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
report,"sklearn.metrics.classification_report(y_pred=pred,y_true=tags)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
report,"sklearn.metrics.classification_report(y_pred=pred,y_true=tags)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
self.tag_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
self.pos_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ROOT_DIR,os.getcwd(),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
current_path,os.getcwd(),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
image,"numpy.zeros((batch_size,IMAGE_WIDTH,IMAGE_HEIGHT,NUM_CHANEELS)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
label,"numpy.zeros((batch_size,TOTAL_TAGS)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
targets,numpy.zeros(17),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
targets,numpy.zeros(17),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
training_data,pandas.DataFrame(),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
validation_data,pandas.DataFrame(),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
validation_data,"pandas.concat(validation_frame,axis=0,join='outer',ignore_index=False)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
training_data,"pandas.concat(training_frame,axis=0,join='outer',ignore_index=False)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
label_pd,pandas.read_csv(TRAIN_LABELS_CSV_PATH),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
train,pandas.read_csv(TRAINING_DATA_CSV),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
train,pandas.read_csv(TRAINING_DATA_CSV),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
validation,pandas.read_csv(VALIDATION_DATA_CSV),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
ventas_falsas,pandas.DataFrame(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler2,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
idx,"numpy.arange(0,self.get_size()",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
image,"numpy.array(Image.open('{0}/{1}'.format(image_folder,image_name)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
images,numpy.array(images),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
mask,"numpy.array([bernoulli.rvs(1-dropout,size=64*64)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
mask,"numpy.array([bernoulli.rvs(1-opt,size=64*64)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
accepted_x,"numpy.array([xvfor(c,xv)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
q_U,"numpy.array([xvifcelseyvfor(c,xv,yv)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
pos,"numpy.concatenate((q,np.array([proposed_U])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
neg,"numpy.concatenate((current_q,np.array([current_U])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
mask,"numpy.ones([datasize,64,64])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
mask,"numpy.ones([datasize,64,64])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
mask,"numpy.repeat(mask,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
current_K,numpy.sum(np.square(current_p),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
proposed_K,numpy.sum(np.square(p),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
x,"numpy.expand_dims(x,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
qx,"multivariate_normal.pdf(x,mean=[0]*self.dim,cov=numpy.eye(self.dim)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
qx,"multivariate_normal.pdf(x,mean=[0]*self.dim,cov=numpy.eye(self.dim)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
image,"numpy.pad(image,((2,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
self.data,numpy.load(npy),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(col*2.5,row*2.5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
self.history,collections.defaultdict(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_12,CLUSTER_11
"popt,pcov","scipy.optimize.curve_fit(gaussian,my_bins[:-1][45:123],IvsFEE_average[45:123],p0=[914,5,1])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
"popt,pcov","scipy.optimize.curve_fit(gaussian_gmd,my_bins[:-1][45:123],I0vsFEE_average[45:123],p0=[914,5,.0014])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
"popt,pcov","scipy.optimize.curve_fit(gaussian,energy[fee_mask],y[fee_mask],p0=[914,5,1])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
"popt,pcov","scipy.optimize.curve_fit(gaussian_gmd,energy[fee_mask],x[fee_mask],p0=[914,5,.0014])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
"popt,pcov","scipy.optimize.curve_fit(gaussian,energy[fee_mask],y[fee_mask],p0=[914,5,1])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
"popt,pcov","scipy.optimize.curve_fit(gaussian_gmd,energy[fee_mask],x[fee_mask],p0=[914,5,.0014])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_weighted_statistic,"scipy.stats.binned_statistic_dd(x,y*weights,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_weights,"scipy.stats.binned_statistic_dd(x,1.0*weights,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
IvsFEE_average,"scipy.stats.binned_statistic_dd(energy,y,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
I0vsFEE_average,"scipy.stats.binned_statistic_dd(energy,x,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
my_hist,"scipy.stats.binned_statistic_dd(x,y,bins=[arange(0,0.0014,0.0001)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
my_hist_linear,"scipy.stats.binned_statistic_dd(x,y_corrected,bins=[x_linear],statistic=median)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
my_hist,"scipy.stats.binned_statistic_dd(x,y,bins=[arange(0,0.0014,0.0001)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
my_signal,"scipy.stats.binned_statistic_dd(z,y_corrected,bins=[my_bins],statistic=median)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
pump_probe_trace,"scipy.stats.binned_statistic_dd(z,nan_to_num(y_corrected/x)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
ransac,sklearn.linear_model.RANSACRegressor(),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
ransac,sklearn.linear_model.RANSACRegressor(max_trials=1000),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
estimator,sklearn.linear_model.TheilSenRegressor(),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
f,"scipy.interpolate.interp1d(edf_j[0],edf_j[1],kind='nearest',bounds_error=False,fill_value=(0,1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
f,"scipy.interpolate.interp1d(edf_j[0],edf_j[1],kind='nearest',bounds_error=False,fill_value=(0,1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
ica,"sklearn.decomposition.FastICA(n_components=n_components,max_iter=100000)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
ica,sklearn.decomposition.FastICA(n_components=5),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
pca,sklearn.decomposition.PCA(n_components=6),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
train_set_x_orig,"numpy.array(train_dataset[""train_set_x""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
train_set_y_orig,"numpy.array(train_dataset[""train_set_y""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
test_set_x_orig,"numpy.array(test_dataset[""test_set_x""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
test_set_y_orig,"numpy.array(test_dataset[""test_set_y""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
classes,"numpy.array(test_dataset[""list_classes""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
temp,"numpy.array([image_list,label_list])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
temp_image,numpy.array(imageio.imread(image_list[i]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
Train_label[i],numpy.array(label_list[i]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
temp_image,numpy.array(imageio.imread(image_list[i+68-len(image_list),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
Test_label[i+68-len(image_list)],numpy.array(label_list[i]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
T_X,numpy.array(Train_dataset['train_set_x'][:]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
T_y,numpy.array(Train_dataset['train_set_y'][:]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
train_set_x_orig,"numpy.array(train_dataset[""train_set_x""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
train_set_y_orig,"numpy.array(train_dataset[""train_set_y""][:])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
a,"numpy.array([[1,2,3,4],[4,3,2,1]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
b,"numpy.array([[1,2,2,2],[3,4,2,1]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
p,"numpy.zeros((1,m)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
image_list,"numpy.hstack((Dog,NotDog)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
label_list,"numpy.hstack((label_Dog,label_NotDog)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
sessions_,numpy.array([result[0]forresultinparallel_results]),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
segments_,numpy.array([result[1]forresultinparallel_results]),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scores_bayes_evt,numpy.array([float(result[3]),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scores_bayes_shuffled_evt,numpy.array([result[4].squeeze(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scores_bayes_percentile_evt,numpy.array([float(result[5]),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
bdries,"numpy.cumsum(np.insert(bdries_,0,0)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
session,numpy.unique(sessions_[bdries[nn]:bdries[nn+1]]),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
segment,numpy.unique(segments_[bdries[nn]:bdries[nn+1]]),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,10,100)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,"numpy.array([10,20,30])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(randn(5,4)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'A':[1,2,np.nan],
'B':[5,np.nan,np.nan],
'C':[1,2,3]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df1,"pandas.DataFrame({'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']},
index=[0,1,2,3])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame({'A':['A4','A5','A6','A7'],
'B':['B4','B5','B6','B7'],
'C':['C4','C5','C6','C7'],
'D':['D4','D5','D6','D7']},
index=[4,5,6,7])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df3,"pandas.DataFrame({'A':['A8','A9','A10','A11'],
'B':['B8','B9','B10','B11'],
'C':['C8','C9','C10','C11'],
'D':['D8','D9','D10','D11']},
index=[8,9,10,11])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
left,"pandas.DataFrame({'key':['K0','K1','K2','K3'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
right,"pandas.DataFrame({'key':['K0','K1','K2','K3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
left,"pandas.DataFrame({'key1':['K0','K0','K1','K2'],
'key2':['K0','K1','K0','K1'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
right,"pandas.DataFrame({'key1':['K0','K1','K1','K2'],
'key2':['K0','K0','K0','K0'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
left,"pandas.DataFrame({'A':['A0','A1','A2'],
'B':['B0','B1','B2']},
index=['K0','K1','K2'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
right,"pandas.DataFrame({'C':['C0','C2','C3'],
'D':['D0','D2','D3']},
index=['K0','K2','K3'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ser1,"pandas.Series([1,2,3,4],index=['USA','Germany','USSR','Japan'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ser2,"pandas.Series([1,2,5,4],index=['USA','Germany','Italy','Japan'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('example'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_excel('Excel_Sample.xlsx',sheet_name='Sheet1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
us,"pandas.DataFrame(top10events.groupby(['kind','application_id'])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
us,"pandas.DataFrame(top10events.groupby(['kind','advertiser_id'])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
us,"pandas.DataFrame(top10apps.groupby(['application_id','advertiser_id'])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clicksAndEvents,"pandas.merge(clicks,events,on='ref_hash',how='inner')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
piv,"pandas.pivot_table(us,values='cant',columns='application_id',index='kind')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
piv,"pandas.pivot_table(us,values='cant',columns='advertiser_id',index='kind')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
piv,"pandas.pivot_table(us,values='cant',columns='advertiser_id',index='application_id')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
events,"pandas.read_csv('events.csv.gzip',compression='gzip',
dtype={
'device_countrycode':'category',
'device_city':'category',
'ref_type':'category',
'application_id':'uint16',
'device_os_version':'category',
'device_brand':'category',
'device_model':'category',
'session_user_agent':'category',
'trans_id':'category',
'user_agent':'category',
'carrier':'category',
'device_os':'category',
'device_os_version':'category',
'device_language':'category',
'connection_type':'category',
'wifi':'category'
})",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clicks,"pandas.read_csv('clicks.csv.gzip',compression='gzip')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"events.loc[:,'date']","pandas.to_datetime(events['date'],errors='coerce')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"clicks.loc[:,'created']","pandas.to_datetime(clicks['created'],errors='coerce')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
f,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
f,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
f,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fg,"seaborn.FacetGrid(data=top10apps,hue='application_id',height=15)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rul,pandas.DataFrame(train_df.groupby('id'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
norm_train_df,pandas.DataFrame(min_max_scaler.fit_transform(train_df[cols_normalize]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
norm_test_df,pandas.DataFrame(min_max_scaler.transform(test_df[cols_normalize]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rul,pandas.DataFrame(test_df.groupby('id'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results_df,"pandas.DataFrame([[scores_test[1]],],
columns=['MSE'],
index=['LSTM'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df,"pandas.read_csv('data/train_01.txt',sep="""",header=None)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df,"pandas.read_csv('data/test_01.txt',sep="""",header=None)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
truth_df,"pandas.read_csv('data/truth_01.txt',sep="""",header=None)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
seq_array_test_last,numpy.asarray(seq_array_test_last),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df['label1'],"numpy.where(train_df['RUL']<=w1,1,0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df['label1'],"numpy.where(test_df['RUL']<=w1,1,0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
seq_array,numpy.concatenate(list(seq_gen),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
label_array,numpy.concatenate(label_gen),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
digits,sklearn.datasets.load_digits(),CLUSTER_6,CLUSTER_7,CLUSTER_1,CLUSTER_0,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_6,CLUSTER_7,CLUSTER_1,CLUSTER_0,CLUSTER_8
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X_train,y_train,test_size=0.3)",CLUSTER_6,CLUSTER_7,CLUSTER_1,CLUSTER_0,CLUSTER_8
a,numpy.ones(5),CLUSTER_6,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('adultcencus.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nbayes,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_df,"pandas.DataFrame({""PostalCode"":postalCodeList,
""Borough"":boroughList,
""Neighborhood"":neighborhoodList})",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df,pandas.DataFrame(columns=column_names),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,requests.get('https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M'),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
Q,"numpy.zeros([env.observation_space.n,env.action_space.n])",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
base,"numpy.zeros((1,n)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
action,"numpy.argmax(Q[s,:]+np.random.rand(1,env.action_space.n)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.array([[144,0,11,55],
[22,66,12,76],
[56,12,55,90]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c,"numpy.dot(a,b)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
C,"numpy.arange(0.01,50.0,0.5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
C,"numpy.arange(0.01,50.0,0.5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores1,numpy.array(scores1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores2,numpy.array(scores2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
means,numpy.zeros(numeric_data.shape[1]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nan_id,numpy.argwhere(np.isnan(X_num_float['A14'].values),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
correction,numpy.amax(to_sum[indices]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,"numpy.nonzero(~numeric_data.iloc[:,j].isnull()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train_zeros,"numpy.hstack((X_train_real_zeros,X_train_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test_zeros,"numpy.hstack((X_test_real_zeros,X_test_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train_mean,"numpy.hstack((X_train_real_mean,X_train_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test_mean,"numpy.hstack((X_test_real_mean,X_test_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train_zeros_scaled,"numpy.hstack((X_train_real_zeros_scaled,X_train_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test_zeros_scaled,"numpy.hstack((X_test_real_zeros_scaled,X_test_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test_mean_scaled,"numpy.hstack((X_test_real_mean_scaled,X_test_cat_oh)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
XX,"numpy.vstack((X_train_mean_scaled,X_test_mean_scaled)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr1,tpr1,_","sklearn.metrics.roc_curve(y_test,opt2_z.predict_proba(X_test_zeros)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr2,tpr2,_","sklearn.metrics.roc_curve(y_test,opt2_m.predict_proba(X_test_mean)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr3,tpr3,_","sklearn.metrics.roc_curve(y_test,opt2_zs.predict_proba(X_test_zeros_scaled)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr4,tpr4,_","sklearn.metrics.roc_curve(y_test,opt2_ms.predict_proba(X_test_mean_scaled)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr1,tpr1,_","sklearn.metrics.roc_curve(y_test,opt1_z.predict_proba(X_test_zeros)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr2,tpr2,_","sklearn.metrics.roc_curve(y_test,opt1_m.predict_proba(X_test_mean)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr3,tpr3,_","sklearn.metrics.roc_curve(y_test,opt1_zs.predict_proba(X_test_zeros_scaled)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr4,tpr4,_","sklearn.metrics.roc_curve(y_test,opt1_ms.predict_proba(X_test_mean_scaled)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_axis,numpy.arange(len(pyber_ride_df),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_axis,numpy.arange(len(pyber_ride_df),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pyber_ride_df,"pandas.read_csv(""Resources/PyBer_ride_data.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
im,"numpy.zeros(shape=(row,col)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
im1,"numpy.zeros(shape=(row,184)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
im2,"numpy.zeros(shape=(row,184)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
record,pandas.read_csv('draftkings-contest-entry-history.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
positive_counts,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
negative_counts,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
total_counts,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pos_neg_ratios,collections.Counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
layer_0,"numpy.zeros((1,vocab_size)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pos_neg_ratios[word],numpy.log(ratio),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
train_mu,"numpy.mean(x_train,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
train_std,"numpy.std(x_train,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
df_feat,"pandas.DataFrame(scaled_features,columns=df.columns[:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('KNN_Project_Data'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_features,df['TARGETCLASS'],
test_size=0.30)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=30),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sent_topics_df,pandas.DataFrame(),CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sent_topics_sorteddf_mallet,pandas.DataFrame(),CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
contents,pandas.Series(texts),CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_all,"pandas.concat([df_guar_h1,df_nyt_h1,df_bbc_h1,df_usat_h1])",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_all,"pandas.concat([df_guar_co,df_nyt_co,df_bbc_co,df_usat_co])",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sent_topics_df,"pandas.concat([sent_topics_df,contents],axis=1)",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sent_topics_sorteddf_mallet,"pandas.concat([sent_topics_sorteddf_mallet,
grp.sort_values(['Perc_Contribution'],ascending=[0])",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_dominant_topics,"pandas.concat([topic_num_keywords,topic_counts,topic_contribution],axis=1)",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_guar_h1,"pandas.read_csv(""guardian_h1n1_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_bbc_h1,"pandas.read_csv(""BBCNews_h1n1_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_nyt_h1,"pandas.read_csv(""nytimes_h1n1_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_guar_co,"pandas.read_csv(""guardian_covid_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_bbc_co,"pandas.read_csv(""BBCNews_covid_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_nyt_co,"pandas.read_csv(""nytimes_covid_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_usat_co,"pandas.read_csv(""usatoday_covid_articles.csv"")",CLUSTER_16,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df2014,pandas.DataFrame(file),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
file,"pandas.read_csv(os.path.join("".."","".."",""Data"",""Raw"",""America_Health_Rankings"",""2014-Annual.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
ds,sklearn.datasets.load_diabetes(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,numpy.hstack((np.ones((len(ds.data),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X_skl,"numpy.hstack((ds.data,np.ones((len(ds.data)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
w,numpy.linalg.inv(X.T@X),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
reg,sklearn.linear_model.LinearRegression(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
ds,sklearn.datasets.load_iris(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.subplot(2,n,i+1)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.subplot(2,n,i+1+n)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
train,"pandas.read_csv(""data/bike/train.csv"",parse_dates=[""datetime""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""data/bike/test.csv"",parse_dates=[""datetime""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submit,"pandas.read_csv(""data/bike/sampleSubmission.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,((ax1,ax2,ax3),(ax4,ax5,ax6))","matplotlib.pyplot.subplots(nrows=2,ncols=3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,(ax1,ax2)","matplotlib.pyplot.subplots(nrows=1,ncols=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,ax3","matplotlib.pyplot.subplots(nrows=1,ncols=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,ax1","matplotlib.pyplot.subplots(nrows=1,ncols=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,ax2","matplotlib.pyplot.subplots(nrows=1,ncols=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"figure,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(nrows=3,ncols=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predict,numpy.array(predict),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
actual,numpy.array(actual),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predictions,numpy.exp(predictions),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train,numpy.log(y_train+1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,numpy.sqrt(mean_difference),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
difference,numpy.square(difference),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmsle_scorer,sklearn.metrics.make_scorer(rmsle),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=n_estimators,
max_depth=max_depth,
max_features=max_features,
random_state=37)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=3000,
max_depth=83,
max_features=0.851358,
random_state=37)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.model_selection.cross_val_score(model,X_train,y_train,
cv=20,scoring=rmsle_scorer)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ratings_count,pandas.DataFrame(E_Ratings_df.groupby(['prod_id']),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
popular_recco,pandas.concat([popular_recco.set_index('prod_id'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
popular_recco,pandas.concat([popular_recco.set_index('prod_id'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
E_Ratings,"pandas.read_csv(""ratings_Electronics.csv"",names=['user_id','prod_id','rating','timestamp'])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_data,test_data","sklearn.model_selection.train_test_split(E_Ratings_df,test_size=0.30,random_state=0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"trainset,testset","sklearn.model_selection.train_test_split(data_t,test_size=.3)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
MSE,"sklearn.metrics.mean_squared_error(pred_df['true_ratings'],pred_df['predicted_ratings'])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
top_n,collections.defaultdict(list),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_all,pandas.DataFrame(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
y,pandas.DataFrame(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
importance_frame,pandas.DataFrame({'Importance':list(importances.values(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
tmp_df,pandas.DataFrame({'User_ID':df.reset_index(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
vw_df,pandas.DataFrame({'User_ID':df.reset_index(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
tmp_df,pandas.DataFrame({'User_ID':df.reset_index(),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
full_train_df,"pandas.read_csv(TRN_FILE,index_col=0)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_df,pandas.read_csv(TST_FILE),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(SUBS+f),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_preds,pandas.read_csv(PATH+'dai-raw.txt'),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
c,numpy.array(df_all_final.columns),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('../data/train.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cit,pandas.DataFrame(cities),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
city_coords,"pandas.merge(cit,l,on=l.index)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
merged,"pandas.merge(lr,city_coords,on='location')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('final.csv',index_col=0)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
index,numpy.arange(14),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0.5,2.5,50)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0.5,2.5,50)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0.5,6.5,25)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(10,35,50)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(10,90,30)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
g,"seaborn.JointGrid(x='price',y='ppc',data=price_cup)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ppc_group,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ppc_all,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
out,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bag,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bout,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
classfig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
img,matplotlib.pyplot.imread('./charts/map.png'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"classfig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(20,20)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""./004UPDATED-NLP-COURSE/UPDATED_NLP_COURSE/TextFiles/moviereviews.tsv"",sep=""\t"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
text_clf,"sklearn.pipeline.Pipeline([(""tfidf"",TfidfVectorizer()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model_errors,pandas.DataFrame(errors_dict),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
deposites,"pandas.read_excel(""DataSet.xlsx"",nrows=96)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_rmse,numpy.sqrt(lin_mse),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg_rmse_scores,numpy.sqrt(-lin_reg_scores),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_errors,"numpy.subtract(y_predictions,y_labels)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
named_features_pipeline,"sklearn.pipeline.Pipeline([
('attribs_adder',AttribsAdder()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_final_pipeline,"sklearn.pipeline.Pipeline([
('attribs_adder',AttribsAdder()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_final_pipeline,"sklearn.pipeline.Pipeline([
('rowsdeleter',RowsDeleter()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_mse,"sklearn.metrics.mean_squared_error(test_y_predictions,test_y_prepared)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_reg_scores,"sklearn.model_selection.cross_val_score(lin_reg,test_X_prepared,test_y_prepared,scoring=""neg_mean_squared_error"",cv=2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
means,pandas.Series(means),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
stds,pandas.Series(stds),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""presidential_polls.csv"",
parse_dates=[""forecastdate"",""startdate"",""enddate""])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,(ax,ax2)","matplotlib.pyplot.subplots(1,2,gridspec_kw={'width_ratios':[5,1],'hspace':0})",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
A,"numpy.array([1,0,1,0,1,0],dtype=bool)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
B,"numpy.array([1,1,1,0,1,1],dtubre5y311egvcfcdjyhntjtyhbbjh6tygrfedcvrgg,7xnu8yhcvfgchchchchchchchchchchchchchchchchchchchchchchchchchch6yb)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
cb,"matplotlib.pyplot.colorbar(im,ax=ax1,cax=cax)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
im,matplotlib.pyplot.imshow(np.log10(h2+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
line,"matplotlib.pyplot.plot(epoch,loss,label='Trainingloss')",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
ax1,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"fig,axArray","matplotlib.pyplot.subplots(H,N,figsize=(dim_Largeur,dim_Hauteur)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
XLIM,matplotlib.pyplot.xlim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
XLIM,matplotlib.pyplot.xlim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
YLIM,matplotlib.pyplot.ylim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
YLIM,matplotlib.pyplot.ylim(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
epoch,"numpy.arange(hist_Nepoch,dtype=np.int)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
N_filters,numpy.array(convolutions),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_2,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean_2,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_2,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_3,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean_3,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_3,numpy.zeros(Nbin-1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
bin_true,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
eps_mean,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
eps_std,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
u_mean,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
u_std,numpy.zeros([len(param_num),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
id_,numpy.where(h_id==i+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
id_,numpy.where(h_id==i+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
id_,numpy.where(h_id==i+1),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s3,numpy.where((utils.zcen(residual_bins),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s2,numpy.where((utils.zcen(residual_bins),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s1,numpy.where((utils.zcen(residual_bins),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
convolutions,numpy.squeeze(convout1_f(inputLC),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_std,numpy.std(residual),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
loss,numpy.log10(history.all(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
val_loss,numpy.log10(history.all(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std[i],numpy.sqrt(((RESIDUAL[id_]-mean[i]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_2[i],numpy.sqrt(((RESIDUAL[id_]-mean_2[i]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
std_3[i],numpy.sqrt(((RAND_RESIDUAL[id_]-mean_3[i]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
bin_VALUE_TRUE,"numpy.linspace(pmin,pmax,Nbin)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
bin_VALUE_TRUE,numpy.linspace(VALUE_TRUE.min(),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_bins,"numpy.linspace(MIN,MAX,Nbin)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_avg,numpy.average(residual),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
h_id,"numpy.digitize(VALUE_TRUE,xh1)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
h_id,"numpy.digitize(VALUE_PRED,bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
h_id,"numpy.digitize(RAND_TRUE,bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median[i],numpy.median(RESIDUAL[id_]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_2[i],numpy.median(RESIDUAL[id_]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
median_3[i],numpy.median(RAND_RESIDUAL[id_]),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
residual_med,numpy.median(residual),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s3,"numpy.append(x_s3[0]-1,x_s3)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s3,"numpy.append(x_s3,x_s3[-1]+1,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s2,"numpy.append(x_s2[0]-1,x_s2)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s2,"numpy.append(x_s2,x_s2[-1]+1,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s1,"numpy.append(x_s1[0]-1,x_s1)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_s1,"numpy.append(x_s1,x_s1[-1]+1,)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h2,yh2,xh2","numpy.histogram2d(VALUE_PRED,VALUE_TRUE,bins=[bin_VALUE_TRUE,bin_VALUE_TRUE])",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
history,numpy.load(history_file),CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h1,xh1","numpy.histogram(VALUE_TRUE,bins=bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_weight,xh_weight","numpy.histogram(VALUE_TRUE,bins=bin_VALUE_TRUE,weights=RESIDUAL)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h3,xh3","numpy.histogram(VALUE_PRED,bins=bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_weight,xh_weight","numpy.histogram(VALUE_PRED,bins=bin_VALUE_TRUE,weights=RESIDUAL)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h4,xh4","numpy.histogram(RAND_TRUE,bins=bin_VALUE_TRUE)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_weight,xh_weight","numpy.histogram(RAND_TRUE,bins=bin_VALUE_TRUE,weights=RAND_RESIDUAL)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
"h_residual,x_h","numpy.histogram(residual,bins=residual_bins)",CLUSTER_2,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.bar(a,b,facecolor=""red"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
drug_results,"pandas.DataFrame({'Drug':drug_results['Drug'],
'Timepoint':drug_results['Timepoint'],
'TumorVolume(mm3)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
drug_tumor_sum,pandas.DataFrame(drug_results_mean.mean(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
drug_tumor_sem,pandas.DataFrame(drug_results),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tumor_growth_df,"pandas.DataFrame(tumor_growth.loc[45,:])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
drug_results,"pandas.merge(mouse_drug,clinical_trial,on=['MouseID'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mouse_drug,"pandas.read_csv(""mouse_drug_data.csv"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
clinical_trial,"pandas.read_csv(""clinicaltrial_data.csv"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.concat(area_amp,axis=1,sort=False)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_sh_nz,"pandas.concat(area_sh_nz,axis=1,sort=False)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_dict,"pandas.read_csv('./dataset/pisadict2012.csv',encoding='cp1252')",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_iod,pandas.read_csv('./dataset/pisa_iod.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_ch_top25,pandas.read_csv('./dataset/pisa_ch_top25.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_nz_top25,pandas.read_csv('./dataset/pisa_nz_top25.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_ch,pandas.read_csv('./dataset/pisa_china.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_nz,pandas.read_csv('./dataset/pisa_nz.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(121),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(131),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(132),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(133),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(ncols=3,nrows=len(categoric_vars_anxiety)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(ncols=3,nrows=len(categoric_vars_behaviour)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
default_color,seaborn.color_palette(),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,numpy.array(accuracy),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"numpy.zeros((2,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
prec,"numpy.zeros((2,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fscore,"numpy.zeros((2,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummyvars,pandas.get_dummies(df[catvars]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""german_credit.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model1,sklearn.tree.DecisionTreeClassifier(random_state=0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model2,"sklearn.tree.DecisionTreeClassifier(max_depth=4,criterion='entropy',random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(Ytest,Y_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(Ytest,Y_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc1,"sklearn.metrics.accuracy_score(y_test,ypred1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc2,"sklearn.metrics.accuracy_score(y_test,ypred2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cr,"sklearn.metrics.classification_report(y_test,ypred1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,ypred1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm2,"sklearn.metrics.confusion_matrix(y_test,ypred2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(Ytest,Y_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(Ytest,Y_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(Ytest,Y_predict)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.50,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(new_df,y,test_size=0.70,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(y_pred,y_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.axes(xlim=(-1,2)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
ax,"matplotlib.pyplot.axes(xlim=(-1,2)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
ax,"matplotlib.pyplot.axes(xlim=(-100,101)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
ax,"matplotlib.pyplot.axes(xlim=(-1,2)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
ax,"matplotlib.pyplot.axes(xlim=(-2,3)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
fig,"matplotlib.pyplot.figure(figsize=(10,12)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
z,numpy.array([pos[i]*coeffs[i]foriinrange(np.size(coeffs),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
p,"numpy.array([[0.35217129,-0.33455179]])",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
a,"numpy.array([[1,1],[2,2],[3,3]])",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.p_sharing,numpy.array([self.p_coopforiinrange(self.n_resident),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.pos,"numpy.array(list(zip(p,q)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.pos,"numpy.array(list(zip(x,y)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
q_sharing,numpy.array([self.qforiinrange(self.n_mutants),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
pos,numpy.array([self.pos[i]foriinself.parents]),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
clusters,numpy.array([list(i),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
sharing,numpy.array([iforiininfo_sharing_clusters]),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
coeffs,"numpy.array([0.06224283,0.05782395,0.05797724,0.06180964,0.06311181,0.05930722,
0.05888618,0.06648056,0.0625458,-0.44981479])",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
pos,"numpy.array([numpy.array([-0.47824739,0.02844751])",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
z,numpy.array([pos[i]*coeffs[i]foriinrange(np.size(coeffs),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
moves,numpy.asarray([[(p2-p1),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
neighbors,numpy.asarray([int(j),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.pos,numpy.asarray(self.pos),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
silhouettes,numpy.empty(0),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.pos,"numpy.concatenate((self.pos,np.array(list(zip(x,y)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.pos,"numpy.concatenate(self.pos,loc)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
k_best,numpy.argmax(silhouettes),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.payoffs,numpy.arctan(average_sharing),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
dm,numpy.exp(squareform(pdist(self.pos),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
self.p_sharing,"numpy.append(self.p_sharing,q_sharing)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
silhouettes,"numpy.append(silhouettes,silhouette_avg)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
"unique_elements,counts_elements","numpy.unique(labels,return_counts=True)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
r,random.random(),CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
clusterer,"sklearn.cluster.KMeans(n_clusters=n_clusters,random_state=10)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
silhouette_avg,"sklearn.metrics.silhouette_score(X,cluster_labels)",CLUSTER_28,CLUSTER_8,CLUSTER_5,CLUSTER_3,CLUSTER_5
df,pandas.read_csv(data_path),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df[att],"pandas.to_numeric(df[att],downcast='float')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
text,"re.sub(r""[^a-zA-Z0-9]"","""",text.lower()",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
val_X,pandas.DataFrame(train_X[:10000]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
train_X,pandas.DataFrame(train_X[10000:]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
val_y,pandas.DataFrame(train_y[:10000]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
train_y,pandas.DataFrame(train_y[10000:]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
new_val_X,pandas.DataFrame(new_XV[:10000]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
new_train_X,pandas.DataFrame(new_XV[10000:]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
new_val_y,pandas.DataFrame(new_Y[:10000]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
new_train_y,pandas.DataFrame(new_Y[10000:]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
predictions,"pandas.read_csv(os.path.join(data_dir,'test.csv.out')",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
predictions,"pandas.read_csv(os.path.join(data_dir,'new_data.csv.out')",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
predictions,"pandas.read_csv(os.path.join(data_dir,'new_data.csv.out')",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
predictions,"pandas.read_csv(os.path.join(data_dir,'test.csv.out')",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_2,CLUSTER_4
model,"sklearn.decomposition.NMF(n_components=num_topics,init='nndsvd')",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
xtfidf_norm,"sklearn.preprocessing.normalize(x_tfidf,norm='l1',axis=1)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,json.load(f),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
horizontal_filter,"numpy.ones((3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
face_x,"numpy.expand_dims(face_x,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
output,"scipy.signal.convolve2d(line_img,horizontal_filter,mode='valid')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
output,"scipy.signal.convolve2d(diag_img,diagonal_filter,mode='valid')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
X,"numpy.zeros((30,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
distances,numpy.zeros((len(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
connections,numpy.zeros((len(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mins,numpy.zeros(connections_count),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
argmin_s,numpy.zeros(connections_count),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
probabilities,numpy.zeros((len(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
actives_neuron,numpy.zeros(len(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
actives_neuron,numpy.zeros(len(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
probabilities_n,"numpy.multiply(probabilities.T,actives_neuron)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
distances[i][j],numpy.linalg.norm(X[i]-X[j]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
connections_count,"random.randint(1,len(X)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mapbox_token,"os.getenv(""mapbox"")",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
joined_df,"pandas.concat([avg_price_neighborhood,df_neighborhood_locations],axis=1,sort=True)",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
sfo_data,"pandas.read_csv(file_path,index_col=""year"")",CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
df_neighborhood_locations,pandas.read_csv(file_path),CLUSTER_18,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_1
tick_marks,numpy.arange(len(classes),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_normalized,pandas.get_dummies(condensed_normalized),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
non_normal_dummies,pandas.get_dummies(adult_income),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
adult_income,"pandas.read_csv('/Users/flatironschool/Downloads/adult.data',header=None)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"data_train,data_test,target_train,target_test","sklearn.model_selection.train_test_split(x,y,
test_size=0.25,random_state=123)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"data_train,data_test,target_train,target_test","sklearn.model_selection.train_test_split(x,y,test_size=0.25,random_state=123)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(x='Income',y='Capital_Gain',data=adult_income)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(x='Income',y='Capital_Loss',data=adult_income)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(x='Income',y='Age',data=adult_income)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(x='Income',y='Age',data=adult_income)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,max_depth=5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(target_test,for_1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_accuracy,"sklearn.metrics.accuracy_score(target_train,training_preds)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_accuracy,"sklearn.metrics.accuracy_score(target_test,test_preds)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_accuracy,"sklearn.metrics.accuracy_score(data_train,training_preds)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_accuracy,"sklearn.metrics.accuracy_score(y_test,test_preds)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_clf,"sklearn.model_selection.GridSearchCV(clf,param_grid,scoring='accuracy',cv=None,n_jobs=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sourceSeqLengths,numpy.zeros(batchSize),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
targetSeqLengths,numpy.zeros(batchSize),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
batchInputs,"numpy.zeros((batchSize,maxLength[0],nFeatures)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
batchTargetIn,"numpy.zeros((batchSize,maxLength[1])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
batchTargetOut,"numpy.zeros((batchSize,maxLength[1])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
"batchInputs[batchI,:,:]","numpy.pad(inputList[i],((0,padSecs)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
"batchTargetIn[batchI,:]","numpy.pad(targetInList[i],(0,padSecs)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
"batchTargetOut[batchI,:]","numpy.pad(targetOutList[i],(0,padSecs)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
res,numpy.sqrt(a**2+b**2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x_axis,"numpy.concatenate([alphas,zoom_alphas])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores,"numpy.concatenate([test_scores,np.mean(regr.cv_values_,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_concat,"numpy.concatenate([X_sel_train,X_train_extra],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_concat,"numpy.concatenate([y_sel_train,y_train_extra],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_axis,"numpy.concatenate([alphas,zoom_alphas])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores,"numpy.concatenate([test_scores,np.mean(regr.cv_values_,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_axis,"numpy.concatenate([alphas,zoom_alphas])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores,"numpy.concatenate([test_scores,np.mean(regr.cv_values_,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_idx,numpy.argmin(test_scores),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_idx,numpy.argmin(test_scores),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_idx,numpy.argmin(test_scores),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sortidx,numpy.argsort(x_axis),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sortidx,numpy.argsort(x_axis),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sortidx,numpy.argsort(x_axis),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores,"numpy.mean(regr.cv_values_,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores,"numpy.mean(regr.cv_values_,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores,"numpy.mean(regr.cv_values_,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"results[""PCAexplainedvariance""]",numpy.sum(pca.explained_variance_ratio_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"results[""PCAexplainedvariance""]",numpy.sum(pca.explained_variance_ratio_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"results[""Datapoints""]",numpy.sum(mask),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"results[""PCAexplainedvariance""]",numpy.sum(pca.explained_variance_ratio_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_sel,numpy.log(y_sel),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_sel,numpy.log(y_sel),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train_extra,numpy.log(y_train_extra),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.log(y_all[mask]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
alphas,"numpy.logspace(6,-6,20)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
zoom_alphas,numpy.logspace(np.log10(alphas[best_idx-1]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
alphas,"numpy.logspace(6,-6,20)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
zoom_alphas,numpy.logspace(np.log10(alphas[best_idx-1]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
alphas,"numpy.logspace(6,-6,20)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
zoom_alphas,numpy.logspace(np.log10(alphas[best_idx-1]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,pandas.DataFrame(collector),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_hdf(""Datasets/PubChemDF_new.h5"",""data"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.linear_model.RidgeCV(alphas=alphas,store_cv_values=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.linear_model.RidgeCV(alphas=zoom_alphas,store_cv_values=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.linear_model.RidgeCV(alphas=alphas,store_cv_values=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.linear_model.RidgeCV(alphas=zoom_alphas,store_cv_values=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.linear_model.RidgeCV(alphas=alphas,store_cv_values=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.linear_model.RidgeCV(alphas=zoom_alphas,store_cv_values=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
vt,sklearn.feature_selection.VarianceThreshold(0.01),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
vt,sklearn.feature_selection.VarianceThreshold(0.01),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
vt,sklearn.feature_selection.VarianceThreshold(0.01),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_red,y_sel,test_size=0.25,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_sel_train,X_sel_test,y_sel_train,y_sel_test","sklearn.model_selection.train_test_split(X_sel,y_sel,test_size=0.25,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_red,y,test_size=0.1,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=250),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=250),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=250),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,5)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.concat((train_df,test_df)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.concat((train_df,test_df)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
family_survived,"pandas.crosstab(df[df.Survived!=-888].FamilySize,df[df.Survived!=-888].Survived)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.get_dummies(df,columns=['Deck','Pclass','Title','Fare_Bin','Embarked','AgeState'])",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df['Fare_Bin'],"pandas.qcut(df.Fare,4,labels=['very_low','low','high','very_high'])",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_df,"pandas.read_csv(train_file_path,index_col='PassengerId')",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_df,"pandas.read_csv(test_file_path,index_col='PassengerId')",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_df,"pandas.read_csv(train_file_path,index_col='PassengerId')",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_df,"pandas.read_csv(test_file_path,index_col='PassengerId')",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_df,pandas.read_csv(write_train_path),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_df,pandas.read_csv(write_test_path),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df['AgeState'],"numpy.where(df['Age']>=18,'Adult','Child')",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df['IsMother'],numpy.where(((df.Sex=='female'),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df['IsMale'],"numpy.where(df.Sex=='male',1,0)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
LogFare,numpy.log(df.Fare+1.0),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"f,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(14,3)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"f,ax_arr","matplotlib.pyplot.subplots(3,2,figsize=(14,7)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(10,3)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(10,3)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'years':[2001,
2002,
2003,
2004,
2005,
2006,
2007,
2008,
2009,
2010,
2011,
2012,
2013,
2014,
2015,
2016,
2017,
2018,
2019,
2020,
2021,
2022,
2023,
],
'y':[3.75,
3.95,
2.34,
4.05,
3.82,
4.10,
2.42,
2.89,
4.95,
3.68,
2.15,
3.64,
2.85,
4.92,
4.85,
3.78,
3.61,
3.92,
2.57,
3.22,
4.16,
3.72,
2.20
],'x1':[20.99,
22.71,
16.18,
21.29,
21.00,
20.14,
18.43,
19.55,
24.71,
21.67,
17.14,
18.22,
18.78,
24.88,
25.05,
21.89,
21.16,
22.00,
17.83,
19.16,
22.50,
19.68,
15.89
],'x2':[6.26,
7.27,
5.85,
7.07,
6.66,
7.02,
6.27,
5.84,
8.20,
7.31,
4.67,
6.96,
6.21,
7.44,
7.75,
6.13,
6.79,
7.42,
6.60,
5.53,
7.57,
6.18,
5.14
],'x3':[-0.03,
-0.24,
-0.12,
-0.09,
0.34,
0.11,
-0.46,
-0.39,
-0.21,
0.16,
-0.07,
0.10,
-0.36,
0.09,
-0.34,
-0.10,
-0.19,
0.04,
0.09,
0.24,
-0.45,
0.17,
-0.20
]})",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_data,"numpy.array(list(np.loadtxt(""train3.csv"",delimiter="","")",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
train_labels,"numpy.array(list(np.loadtxt(""train_label1.csv"",delimiter="","")",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
eval_data,"numpy.array(list(np.loadtxt(""eval3.csv"",delimiter="","")",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
eval_labels,"numpy.array(list(np.loadtxt(""eval_label1.csv"",delimiter="","")",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
test_data,"numpy.array(list(np.loadtxt(""test.csv"",delimiter="","")",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
test_labels,"numpy.array(list(np.loadtxt(""test_label1.csv"",delimiter="","")",CLUSTER_3,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
global_spend,pandas.DataFrame(data=df2),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('MilitaryExpenditure.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
region,pandas.read_csv('MilitaryExpenditure.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
death_row,"pandas.read_csv('TexasLastStatement.csv',encoding=""ISO-8859-1"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
box,matplotlib.pyplot.boxplot(global_spend['Global_Spend']),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
M,"numpy.vstack([mfcc,mfcc_delta,mfcc_delta2])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"f,(ax1,ax2,ax3)",matplotlib.pyplot.subplots(3),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
client_request_token,"time.strftime(""%Y-%m-%d-%H-%M-%S"",gmtime()",CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
response,"robomaker.create_simulation_job(clientRequestToken=time.strftime(""%Y-%m-%d-%H-%M-%S"",gmtime()",CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
df,pandas.DataFrame(data['metrics']),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
df,pandas.DataFrame(data['metrics']),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
data,json.load(fp),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
data,json.load(fp),CLUSTER_1,CLUSTER_0,CLUSTER_9,CLUSTER_33,CLUSTER_1
dataSet3,pandas.DataFrame(main_dict),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('/home/jose/Downloads/python-ml-course/datasets/titanic/titanic3.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
globalPath,"pandas.read_csv(os.path.join(mainPath,filepath_body)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data2,"pandas.read_csv(os.path.join(mainPath,filepath_Customer)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data2_header,"pandas.read_csv(os.path.join(mainPath,filepath_columns)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data2_Customer,"pandas.read_csv(os.path.join(mainPath,filepath)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
dataFrame4,"pandas.read_csv(outfile,sep='\t')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
medals_data,pandas.read_csv(medals_url),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
indsM,numpy.arange(h*w),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
B,numpy.asarray(initImg),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
V,"numpy.zeros((h1*w1,k)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
ans,"numpy.zeros((h+pad*2,w+pad*2,c)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
fcfc,"numpy.dot(fc,fc.T)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
fsfs,"numpy.dot(fs,fs.T)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
img,"numpy.clip(V,0,1.0)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
win_mu,"numpy.mean(winI,axis=2,keepdims=True)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
nz_indsRow,"numpy.repeat(win_inds,win_size)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
B,"numpy.reshape(B,(h1*w1,k)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
content_t,numpy.transpose(np.squeeze(content),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
style_t,numpy.transpose(np.squeeze(style),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
Ds,numpy.sqrt(np.diag(ws[:k_s]+eps),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
dd,"numpy.sqrt(np.power(dd,-1)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
win_var,"numpy.einsum('...ji,...jk->...ik',winI,winI)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
X,"numpy.einsum('...ij,...jk->...ik',winI-win_mu,inv)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
blended,"numpy.expand_dims(np.transpose(blended,(1,2,0)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
nz_indsCol,"numpy.tile(win_inds,win_size)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
Dc,numpy.diag((wc[:k_c]+eps),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
"ans[:,:,i]","numpy.pad(arr[:,:,i],pad_width=(pad,pad)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
inv,numpy.linalg.inv(win_var+(eps/win_size),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
"Ec,wc,_",numpy.linalg.svd(fcfc),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
"Es,ws,_",numpy.linalg.svd(fsfs),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
L,"scipy.sparse.coo_matrix((nz_indsVal,(nz_indsRow,nz_indsCol)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
D,"scipy.sparse.csc_matrix((dd,(np.arange(0,w1*h1)",CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
A,scipy.sparse.identity(w1*h1),CLUSTER_2,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
df,"pandas.read_csv(""baseline_results.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,5)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
index,numpy.arange(len(headers),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
im,"numpy.zeros((l,l)",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
inp,"numpy.clip(inp,0,1)",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
fig,matplotlib.pyplot.figure(),CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
ax,"matplotlib.pyplot.subplot(num_images//2,2,images_so_far)",CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
since,time.time(),CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
time_elapsed,time.time(),CLUSTER_12,CLUSTER_7,CLUSTER_12,CLUSTER_22,CLUSTER_8
feature_dataframe,"pandas.DataFrame({'features':cols,
'RandomForestfeatureimportances':rf_features,
'ExtraTreesfeatureimportances':et_features,
'AdaBoostfeatureimportances':ada_features,
'GradientBoostfeatureimportances':gb_features
})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
base_predictions_train,pandas.DataFrame({'RandomForest':rf_oof_train.ravel(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
StackingSubmission,"pandas.DataFrame({'PassengerId':PassengerId,
'Survived':predictions})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['CategoricalAge'],"pandas.cut(train['Age'],5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['CategoricalFare'],"pandas.qcut(train['Fare'],4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('data/train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('data/test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
oof_train,"numpy.zeros((ntrain,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
oof_test,"numpy.zeros((ntest,)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
oof_test_skf,"numpy.empty((NSPLITS,ntest)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_train,"numpy.concatenate((et_oof_train,rf_oof_train,ada_oof_train,gb_oof_train,svc_oof_train)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_test,"numpy.concatenate((et_oof_test,rf_oof_test,ada_oof_test,gb_oof_test,svc_oof_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
title_search,re.search('([A-Za-z]+),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.pairplot(train[[u'Survived',u'Pclass',u'Sex',u'Age',u'Parch',u'Fare',u'Embarked',
u'FamilySize',u'Title']],hue='Survived',palette='seismic',size=1.2,diag_kind='kde',diag_kws=dict(shade=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=NSPLITS,random_state=SEED)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data=stud),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_sql_query(""Select*fromstudmarks"",con)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
stud,"pandas.read_sql_query(""Select*fromstudentmarks"",con)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
res,"pandas.read_sql_query(sql,con)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.arange(0,1e6,2,dtype=np.int)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(-5,5.01,.01)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
y,"numpy.arange(-5,5.01,.01)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,10,.1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x4,"numpy.arange(-2,2,.05)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,10,.1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,10,.1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,10,.1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X,"numpy.arange(1,10,.05)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
x,"numpy.arange(0,1000,50)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X,"numpy.arange(0,1,.005)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
X,"numpy.arange(-1,1,.005)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
arr3,"numpy.array([[[1,2],[3,4]],[[5,6],[7,8]]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
a,"numpy.array([[0,1],[2,3]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
b,"numpy.array([[4,5],[6,7]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
canales,"numpy.array(['web','web','movil','tienda','tienda'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
canales,"numpy.array(['web','web','movil','tienda','tienda'],dtype=np.object)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
a,"numpy.array([1.4,4.5,6.7])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
datos,"numpy.array([[1,2,3,4,5],[5,6,7,6,5]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
hijos,"numpy.array([1,2,3,4,5,2,4,7,6,1,1,1,1,1,2,2,])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
a,"numpy.array([[1,2],[3,4]])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
valores,"numpy.array([1,2,3,4,6,9,11,3,2])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
valores,"numpy.array([1,2,3,4,6,9,11,3,11])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
y_2,"numpy.array([x_+np.random.normal(0,x_/2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df['visitas'],"numpy.array([100,200,50])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
Y,"numpy.array([x+np.random.normal(0,x/5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
weights,"numpy.array([.5,.4,.1])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ceros,"numpy.zeros((5,5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
unos,numpy.ones(100),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
y,numpy.sin(x),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
z,numpy.sqrt(xs**2+ys**2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"xs,ys","numpy.meshgrid(x,y)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
diag,numpy.eye(10000),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"values,count","numpy.unique(hijos,return_counts=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
arrays_c,numpy.load('arrays_c.npz'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df1,pandas.DataFrame(np.arange(12.),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df2,pandas.DataFrame(np.arange(20.),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,"pandas.DataFrame(np.hstack([X,y.reshape(-1,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame(dataframe),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,"pandas.DataFrame({'key1':['a','a','b','b','a'],
'key2':['one','two','one','two','one'],
'data1':np.random.randn(5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df_ventas,"pandas.DataFrame({'ventas':ts_ventas}

df_ventas['workday']=df_ventas.index.weekday<5
pd.date_range('2012-04-01',periods=20)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame({'y':y}),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,pandas.DataFrame({'y':y}),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,"pandas.Series([1,2,3,4,5])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,"pandas.Series(['A','B','A','A','C','B'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
v,"pandas.Series([3,2,1],index=['A','B','C'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,"pandas.Series({'A':1,'B':2,'C':np.nan})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ss,"pandas.Series({'A':1,'B':2,'C':3})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,pandas.Series(range(4),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
s,"pandas.Series([7,-5,7,4,2,0,4])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ts,pandas.Series(np.random.randn(6),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ts_ventas,"pandas.Series(ventas,index=pd.date_range('2019-1-1',periods=len(ventas)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
ts_ventas,"pd.Series(ventas,index=pandas.date_range('2019-1-1',periods=len(ventas)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
data,"pandas.read_csv('/home/ainhoa/Master/krakenEUR.csv.gz',header=None,names=['ts','price','volume'],index_col='ts')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
last_data.index,"pandas.to_datetime(last_data.index,unit='s')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
"X,y","sklearn.datasets.make_circles(factor=.3,noise=.08)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,"datetime.datetime(2019,1,11)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
now,datetime.datetime.now(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_9,CLUSTER_0
answerdf,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
traindf,"pandas.read_csv('train.csv',index_col=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
testdf,pandas.read_csv('test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(rfr,X,y,cv=10,scoring='r2')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsc,"sklearn.model_selection.GridSearchCV(
estimator=RandomForestRegressor()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.ensemble.RandomForestRegressor(max_depth=6,n_estimators=50,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.ensemble.RandomForestRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr,"sklearn.ensemble.RandomForestRegressor(max_depth=best_params[""max_depth""],n_estimators=best_params[""n_estimators""],random_state=False,verbose=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
areas,pandas.read_csv('./state-areas.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
abbrevs,pandas.read_csv('./state-abbrevs.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pop,pandas.read_csv('./state-population.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pop_density,pandas.DataFrame(pop_density),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,numpy.asarray(data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_array,numpy.asarray(new_data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,numpy.transpose(data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_json('students.json'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=validation_size,random_state=seed)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=10,random_state=7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_val_score(model,X_train,Y_train,cv=kfold,scoring=scoring)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,pandas.read_csv('D:/Datasets/HAM10000_metadata(Mel),CLUSTER_22,CLUSTER_3,CLUSTER_8,CLUSTER_0,CLUSTER_0
X,numpy.array(image_list),CLUSTER_22,CLUSTER_3,CLUSTER_8,CLUSTER_0,CLUSTER_0
data,"numpy.asarray(img,dtype=""int32"")",CLUSTER_22,CLUSTER_3,CLUSTER_8,CLUSTER_0,CLUSTER_0
"X_train,X_validation,Y_train,Y_validation","sklearn.model_selection.train_test_split(X[:Y.shape[0]],Y,test_size=.2,random_state=5)",CLUSTER_22,CLUSTER_3,CLUSTER_8,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df_train,df_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv(data_path+'titanic_test.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mask_gt,"numpy.zeros((100,100)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mask,"numpy.zeros((100,100)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X,"numpy.concatenate((X1,X2,X3,X4)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
true_positive,numpy.asarray([0]*(NUM_TARGETS+2),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
false_positive,numpy.asarray([0]*(NUM_TARGETS+2),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
false_negative,numpy.asarray([0]*(NUM_TARGETS+2),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
onehot,numpy.zeros(len(FEATURES[-1]),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
onehot,numpy.zeros(len(FEATURES[tag_index]),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
onehot,numpy.zeros(NUM_TARGETS),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
onehot,numpy.zeros(5),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
confusion_matrix,"numpy.zeros((NUM_TARGETS,NUM_TARGETS)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
TARGET_LOCATION[target],numpy.argmax(onehot),CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
target,"numpy.argmax(target,2)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
prediction,"numpy.argmax(prediction,2)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
target,"numpy.reshape(target,(-1,MAX_SENTENCE_LENGTH,NUM_TARGETS)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
prediction,"numpy.reshape(prediction,(-1,MAX_SENTENCE_LENGTH,NUM_TARGETS)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
temp,"numpy.append(temp,word_vectors[word_and_features[0]])",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
temp,"numpy.append(temp,get_feature_vector(feature,index)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
temp,"numpy.append(temp,cap_feature(word_and_features[0])",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
df_cm,"pandas.DataFrame(confusion_matrix,
index=row_labels,
columns=col_labels)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
confusion,"seaborn.heatmap(df_cm,annot=True)",CLUSTER_20,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_7
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
city_data_df,pandas.DataFrame(all_cities_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
response,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
schema,collections.OrderedDict(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
women_degrees,pandas.read_csv('percent-bachelors-degrees-women-usa.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(18,3)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(24,18)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
real_fake,"pandas.concat([real_news,fake_news])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
fake,pandas.read_csv('./data/fake.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
real,pandas.read_csv('./data/real.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
real_fake['content'],numpy.where(pd.notnull(real_fake['content']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
logit,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
raw_confirmed_df,pandas.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
raw_recovered_df,pandas.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv'),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
raw_death_df,pandas.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv'),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
xc,pandas.to_datetime(xc),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
xd,pandas.to_datetime(xd),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
xr,pandas.to_datetime(xr),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
grad_hat,"scipy.signal.savgol_filter(grad,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
ratio_hat,"scipy.signal.savgol_filter(ratio,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
death_vals_hat,"scipy.signal.savgol_filter(death_vals,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
recovered_vals_hat,"scipy.signal.savgol_filter(recovered_vals,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
confirmed_grad_hat,"scipy.signal.savgol_filter(confirmed_grad,sliding_win_size,polynomial_fit_degree)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(22,12)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.subplot(2,2,1)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=90,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
_,"matplotlib.pyplot.xticks(rotation=x_tick_rot,fontsize=x_tick_fs)",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
data_test['Country_Holand-Netherlands'],"numpy.zeros([data_test.shape[0],1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rows,numpy.ceil(float(data_train.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
out,pandas.DataFrame(dic),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
out,"pandas.concat([out,pd.get_dummies(out[feature_list])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_train,"pandas.concat([data_train,pd.get_dummies(data_train['Workclass'],
prefix=""Workclass"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_test,"pandas.concat([data_test,pd.get_dummies(data_test['Workclass'],prefix=""Workclass"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_train,"pandas.read_csv('../data/adult_train.csv',sep=';')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_test,"pandas.read_csv('../data/adult_test.csv',sep=';')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train['Поедет'],sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
locally_best_tree,"sklearn.model_selection.GridSearchCV(tree,tree_params,cv=5,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
locally_best_forest,"sklearn.model_selection.GridSearchCV(rf,forest_params,cv=5,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=3,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,"sklearn.tree.DecisionTreeClassifier(max_depth=3,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,sklearn.tree.DecisionTreeClassifier(random_state=17),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tuned_tree,"sklearn.tree.DecisionTreeClassifier(max_depth=9,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,n_jobs=-1,random_state=17)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accur,"sklearn.metrics.accuracy_score(y_test,tree_predictions)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(y_test,tuned_tree_predictions)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
ward,sklearn.cluster.AgglomerativeClustering(n_clusters=3),CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
complete,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage='complete')",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
avg,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage='average')",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
ward,sklearn.cluster.AgglomerativeClustering(n_clusters=3),CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
complete,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage=""complete"")",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
avg,"sklearn.cluster.AgglomerativeClustering(n_clusters=3,linkage=""average"")",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
ward_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,ward_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
complete_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,complete_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
avg_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,avg_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
ward_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,ward_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
complete_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,complete_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
avg_ar_score,"sklearn.metrics.adjusted_rand_score(iris.target,avg_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
normalized_X,sklearn.preprocessing.normalize(iris.data),CLUSTER_28,CLUSTER_2,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,y_train",numpy.array(X_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gru_pred,"numpy.array(gru_predictions[:,:n_pred])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gru_pred,"numpy.repeat(gru_pred,val_gap,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,"numpy.reshape(X_train,(X_train.shape[0],n_input,n_features)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
current_batch,"numpy.append(current_batch[:,1:],[dummy.reshape(1,-1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_data,pandas.DataFrame(test_data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_data,pandas.DataFrame(train_data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
final_gru_predictions,pandas.DataFrame(gru_pred),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_df,"pandas.concat([new_df,df])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_df_test,"pandas.concat([new_df_test,df_test])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe,"pandas.concat([dataframe,test_building],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_df,"pandas.get_dummies(new_df,columns=one_hot)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_df_test,"pandas.get_dummies(new_df_test,columns=one_hot)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe,pandas.read_csv('csv_files/intermediate_files/building_'+str(index_reader),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_building,pandas.read_csv('csv_files/intermediate_files/building_'+str(index_reader),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_for_index,pandas.read_csv('./test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['timestamp'],"pandas.to_datetime(train['timestamp'],infer_datetime_format=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test['timestamp'],"pandas.to_datetime(test['timestamp'],infer_datetime_format=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe['timestamp'],"pandas.to_datetime(dataframe['timestamp'],infer_datetime_format=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_org,"pandas.read_csv(""data/covid_data_original.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_bar,"pandas.read_csv('flavors_of_cacao.csv',
sep=',',header=0,names=['company','bar_name','ref','rew_date','percent','company_loc','rate','bean_dtype','bean_orig'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('./data/SO_EOMMetrics_ext.csv'),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['BusinessMonth'],pandas.to_datetime(df['BusinessMonth']),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('sample_s2.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_set,sklearn.datasets.load_files('Imdblite/train/'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
test,sklearn.datasets.load_files('Imdblite/test/'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
clf,sklearn.svm.LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
clf,sklearn.svm.LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
scores,sklearn.model_selection.cross_val_score(LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
scores2,sklearn.model_selection.cross_val_score(LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
scores3,sklearn.model_selection.cross_val_score(LinearSVC(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
dataset,pandas.read_csv(r'C:\Users\Sunshine\Downloads\Compressed\Machine-Learning-A-Z-New\MachineLearningA-ZNew\Part1-DataPreprocessing\Data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
labelencoder_X,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
labelencoder_y,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[0]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
C_range,"numpy.logspace(2,14,13)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gamma_range,"numpy.logspace(-15,-3,13)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_images_df,"pandas.DataFrame(
train_images.reshape(
(train_images.shape[0],
train_images.shape[1]*train_images.shape[2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_labels_df,pandas.DataFrame(train_labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_images_df,"pandas.DataFrame(
test_images.reshape((test_images.shape[0],
test_images.shape[1]*test_images.shape[2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_labels_df,pandas.DataFrame(test_labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""./input/train.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""./input/test.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(
train_images_df,train_labels_df,test_size=0.25,random_state=40)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rbf_clf,"sklearn.svm.SVC(C=10,kernel='rbf',gamma='scale',decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lin_clf,"sklearn.svm.SVC(C=10,kernel='linear',decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly_clf,"sklearn.svm.SVC(C=10,kernel='poly',decision_function_shape='ovr')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_clf,"sklearn.svm.SVC(C=10,kernel='rbf',decision_function_shape='ovr')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
normalized_rbf_clf,"sklearn.svm.SVC(C=10,kernel='rbf',decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
normalized_rbf_clf,"sklearn.svm.SVC(C=10,kernel='rbf',gamma='scale',decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(C=C,gamma=gamma)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_rbf_clf,"sklearn.svm.SVC(C=10,kernel='rbf',gamma=1e-07,decision_function_shape='ovo')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linear_clf,sklearn.svm.LinearSVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=0.9,whiten=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=5,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,sklearn.model_selection.GridSearchCV(SVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,numpy.zeros_like(train.corr(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.ret,"pandas.DataFrame(columns=['times','precision','recall'])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
percentage,"pandas.DataFrame(round(df.loc[:,features].value_counts(dropna=False,normalize=True)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_data,"pandas.concat([train,test],ignore_index=False)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_data,"pandas.concat([with_N,without_N],axis=0)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(filename,delimiter='\t')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('../L2/titanic/train.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('../L2/titanic/test.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,6)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax1,"seaborn.boxplot(x=""Embarked"",y=""Fare"",hue=""Pclass"",data=train,ax=ax[0])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax2,"seaborn.boxplot(x=""Embarked"",y=""Fare"",hue=""Pclass"",data=test,ax=ax[1])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr,"sklearn.ensemble.RandomForestRegressor(n_estimators=1500,n_jobs=-1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
action,numpy.argmax(actions),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_7
self.l_tq_squared_error,collections.deque(maxlen=1000),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_7
Cust_summary,pandas.DataFrame(),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
Cust_data,pandas.read_csv('Cust_data.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
Cust_Demo,pandas.read_csv('Cust_Demo.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dataframe,pandas.DataFrame(arrayData),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
normalized_X,sklearn.preprocessing.normalize(X),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
standardized_X,sklearn.preprocessing.scale(X),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(standardized_X,y,test_size=0.20)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(9,1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pipeline,sklearn.pipeline.Pipeline(estimators),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(shuffle=True,random_state=seed)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(pipeline,normalized_X,y,cv=kfold,pre_dispatch='5')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pix_pos,numpy.array([iforiinrange(765),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
peak_pos,"numpy.array(argrelextrema(avgcol_starlamp,np.greater,order=28)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
wl,"numpy.array([6266.49,6304.79,6334.43,6382.99,6402.25,6506.53,6532.88,6598.95,6678.28,6717.04,6929.47])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
pix_pos,numpy.array([iforiinrange(765),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
wl,"numpy.array([6266.49,6304.79,6334.43,6382,6506.53,6598.95,6678.28,6717.04,6929.47])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
avgcol_starlamp,"numpy.mean(cut50,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
avgcol_starlamp,"numpy.mean(cut50,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
LnRg,numpy.poly1d(fit),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
LnRg,numpy.poly1d(fit),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fit,"numpy.polyfit(peak_pos,wl,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fit,"numpy.polyfit([48,187,388,719],[6266.49,6402.25,6598.95,6929.47],2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
DF_CD,pandas.DataFrame(cleaned_data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
alleduatt,pandas.read_csv('files/AllEduAttainment.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
schoollevel,pandas.read_csv('files/2016_PSSA_School_Level_Perfomance_Results.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
pssa,pandas.read_csv(filename),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
x_t,"numpy.asarray([integrate.odeint(lorenz_deriv,x0i,t)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,max_time,int(250*max_time)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.zeros((len(t),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,20,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
r,"scipy.integrate.ode(f_np,jac_np)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"line1,","matplotlib.pyplot.plot([],[],'bo')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"line2,","matplotlib.pyplot.plot([],[],'ro')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(7,7)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df_train,df_test])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv(data_path+'titanic_test.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_fixed['Fare'],numpy.log1p(df_fixed['Fare']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_fixed['Fare'],scipy.stats.boxcox(df_fixed['Fare']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
col,"pandas.cut(col,bin_num,right=True,include_lowest=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dum,"pandas.get_dummies(col,dummy_na=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_full,"pandas.read_csv('../data/LoanStats2014.csv',skiprows=1,skipfooter=2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['mo_earliest_credit'],pandas.to_datetime('2014-12-01'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['term'],pandas.to_numeric(df['term']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['int_rate'],pandas.to_numeric(df['int_rate']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['emp_length'],pandas.to_numeric(df['emp_length']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['revol_util'],pandas.to_numeric(df['revol_util']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=250,max_features='sqrt',n_jobs=-1,class_weight='balanced')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gc,"sklearn.model_selection.GridSearchCV(gbc,gbc_params,n_jobs=-1,scoring='roc_auc',verbose=5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbc,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'From_To':['LoNDon_paris','MAdrid_miLAN','londON_StockhOlm','Budapest_PaRis','Brussels_londOn'],
'FlightNumber':[10045,np.nan,10065,np.nan,10085],
'RecentDelays':[[23,47],[],[24,43,87],[13],[67,32]],
'Airline':['KLM(!)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_df,pandas.read_csv('train.csv'),CLUSTER_15,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_0
valid_df,pandas.read_csv('test.csv'),CLUSTER_15,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_0
vv,"numpy.array([1e8,1.5e8,2e8])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
boost,"numpy.zeros((4,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_2,"numpy.dot(b1,X_1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_1,numpy.reshape([rnd_xn(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
beta_norm,numpy.linalg.norm(beta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lgs_total,pandas.DataFrame(columns=idx),CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
samples,pandas.DataFrame(),CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
titanic_types,"pandas.DataFrame(data=titanic.dtypes,index=titanic.columns,columns=['dtype'])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
g,"pandas.concat(read_files('\\ebola\\guinea_data\\',['Date'])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
l,"pandas.concat(read_files('\\ebola\\liberia_data\\',['Date'])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
sl,"pandas.concat(read_files('\\ebola\\sl_data\\',['date'])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.concat([lgs_total,sl_deaths])",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
agecalc,"pandas.concat([titles,titanic.age],axis=1)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"cut,bins","pandas.cut(titanic.age,age_range,right=False,retbins=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"cut,bins","pandas.cut(titanic_filled.age,age_range,right=False,retbins=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,g_new,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,g_deaths,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,l_new,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,l_deaths,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,sl_new,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lgs_total,"pandas.merge(lgs_total,sl_deaths,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
samples,"pandas.merge(samples,mid,how='outer',left_index=True,right_index=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"cut,bins","pandas.qcut(passengers_survived_groups.age,2,labels=['youngerthanmedian','olderthanmedian'],retbins=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"cut,bins","pandas.qcut(passengers_survived_groups.age,2,labels=['youngerthanmedian','olderthanmedian'],retbins=True)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(DATA_FOLDER+dirname+filename,header=0,parse_dates=date_col)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
metadata,"pandas.read_excel(DATA_FOLDER+'\\microbiome\\metadata.xls',sheetname='Sheet1',index_col='BARCODE')",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
mid,"pandas.read_excel(DATA_FOLDER+'\\microbiome\\'+index+'.xls',sheetname='Sheet1',header=None,index_col=0)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
titanic,"pandas.read_excel(DATA_FOLDER+'\\titanic.xls',sheetname='titanic')",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
age_range,"numpy.arange(0,age_limit,10,dtype=np.int64)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
age_range,"numpy.arange(0,age_limit,10,dtype=np.int64)",CLUSTER_1,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
path,os.getcwd(),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
path,os.getcwd(),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,10)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,7)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
d,numpy.array(data),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
admitted,"numpy.array([[sample[0],sample[1]]forsampleindifsample[2]==1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
notAdmitted,"numpy.array([[sample[0],sample[1]]forsampleindifsample[2]==0])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dR,numpy.array(dataR),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
accepted,"numpy.array([[s[0],s[1]]forsindRifs[2]==1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
rejected,"numpy.array([[s[0],s[1]]forsindRifs[2]==0])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(X.shape[1]),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
g,"numpy.sum(g,axis=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
L,"numpy.linspace(-10,10,50)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(min(X[:,1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.column_stack((np.ones((X.shape[0]),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('ex2data1.txt'
,header=None
,names=['exam1','exam2','admission'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dataR,"pandas.read_csv('ex2data2.txt',header=None,names=['test1','test2','Acceptance'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
result,"scipy.optimize.fmin_tnc(func=computeCostJ,x0=theta,fprime=gradient,args=(X,y)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
A_raw,numpy.array([(125/(4+c*0.25),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
b,numpy.array([np.float64(N),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
norms,"numpy.array(norms,dtype=np.float64)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
b,numpy.array([n*i+mforiinrange(n),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A,"numpy.array([
[(i+j)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
L,numpy.zeros(A.shape),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A_inv,numpy.dot(np.linalg.inv(L.T),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
comp,numpy.argsort(norms),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
bs,"numpy.repeat(b,n)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"L[i,i]","numpy.sqrt(A[i,i]-np.dot(L[i],L[i])",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
diag,numpy.diag([eps]*n),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cond,"numpy.linalg.norm(A,ord=np.inf)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linalg.solve(A,b)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,"numpy.linalg.solve(L,b)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linalg.solve(L.T,y)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"LU,p",scipy.linalg.lu_factor(A),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
score,numpy.array(lst),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv('creditcard.csv',delimiter=',')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
train,pandas.get_dummies(train),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.get_dummies(test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""Dataset/Train.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""Dataset/Test.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_x,validation_x,train_y,validation_y","sklearn.model_selection.train_test_split(train,label,test_size=0.28,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model2,sklearn.svm.SVR(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model1,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model3,sklearn.linear_model.Ridge(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.Ridge(alpha=i,fit_intercept=j,solver=k)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
selected_model,"sklearn.linear_model.Ridge(alpha=10000,copy_X=True,fit_intercept=True,max_iter=None,
normalize=False,random_state=None,solver='sag',tol=0.001)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model4,sklearn.linear_model.Lasso(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.Lasso(alpha=i,fit_intercept=j,selection=k)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
means,"numpy.concatenate((stat['mean_cond1'],stat['mean_cond2'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
variances,"numpy.concatenate((stat['var_cond1'],stat['var_cond2'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
both_conds,"numpy.concatenate((data['cond1'][i],data['cond2'][i])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lambda_0,numpy.mean(two_all),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lambda_x,numpy.mean(two_x),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lambda_y,numpy.mean(two_y),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stat['mean'+'_'+cond],"numpy.mean(data[cond],axis=1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lambda_0,numpy.mean(both_conds),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood_0,"numpy.prod(poisson.pmf(two_all,lambda_0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood_a,"numpy.prod(poisson.pmf(two_x,lambda_x)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood_0,"numpy.prod(poisson.pmf(both_conds,lambda_0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
likelihood_a,"numpy.prod(poisson.pmf(data['cond1'][i],
lambda_cond1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stat['var'+'_'+cond],"numpy.var(data[cond],axis=1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
two,"pandas.read_csv(""q2_set_1.tsv"",sep='\t',index_col=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
three_1,"pandas.read_csv(""q3_set_1.tsv"",sep='\t')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
three_2,"pandas.read_csv(""q3_set_2.tsv"",sep='\t')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
confidence_interval,pandas.Series(boot_mean_diff),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
yearly,pandas.read_csv('datasets/yearly_deaths_by_clinic.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
monthly,"pandas.read_csv(""datasets/monthly_deaths.csv"",parse_dates=['date'])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
handwashing_start,pandas.to_datetime('1847-06-01'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mean_diff,numpy.mean(after_proportion),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ebola_parsed,"pandas.concat([ebola_long,variable_split],axis=1)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi,"pandas.concat([taxi1,taxi2,taxi3,taxi4,taxi5])",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi_loop_concat,pandas.concat(list_taxi_df),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
pew_long,"pandas.melt(pew,id_vars='religion')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
pew_long,"pandas.melt(pew,id_vars='religion',var_name='income',value_name='count')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
billboard_long,"pandas.melt(
billboard,
id_vars=['year','artist','track','time','date.entered'],
var_name='week',
value_name='rating'
)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
ebola_long,"pandas.melt(ebola,id_vars=['Date','Day'])",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
weather_melt,"pandas.melt(weather,id_vars=['id','year','month','element'],var_name='day',value_name='temp')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
billboard_long,"pandas.melt(billboard,id_vars=['year','artist','track','time','date.entered'],var_name='week',value_name='rating')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
pew,pandas.read_csv('../data/pew.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
billboard,pandas.read_csv('../data/billboard.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
ebola,pandas.read_csv('../data/country_timeseries.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
weather,pandas.read_csv('../data/weather.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
billboard,pandas.read_csv('../data/billboard.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi1,pandas.read_csv(nyc_taxi_data[0]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi2,pandas.read_csv(nyc_taxi_data[1]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi3,pandas.read_csv(nyc_taxi_data[2]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi4,pandas.read_csv(nyc_taxi_data[3]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
taxi5,pandas.read_csv(nyc_taxi_data[4]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(csv_filename),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(file),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_x,numpy.array(train_X.drawing.tolist(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
validation_x,numpy.array(validation_X.drawing.tolist(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
Class_perform,"numpy.zeros([num_classes,2])",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
Class_Acc,numpy.zeros([num_classes]),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
Country_perform,"numpy.zeros([num_countries,2])",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
Country_Acc,numpy.zeros([num_countries]),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
display_samples,pandas.DataFrame(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
train_data,pandas.DataFrame(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
cat,"pandas.read_csv('../input/train_simplified/cat.csv',nrows=10)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
temp,"pandas.read_csv(os.path.join(path_train,filename)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
temp,"pandas.read_csv(os.path.join(path_train,filename)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
"fig,axs","matplotlib.pyplot.subplots(nrows=figrows,ncols=figcols,sharex=True,sharey=True,figsize=(16,10)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
"fig1,ax_acc",matplotlib.pyplot.subplots(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
"fig2,ax_loss",matplotlib.pyplot.subplots(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
label_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
country_encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
onehot_encoder,sklearn.preprocessing.OneHotEncoder(sparse=False),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
"train_X,validation_X,train_y,validation_y","sklearn.model_selection.train_test_split(train_data,label,test_size=0.2,random_state=13)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_9
df_temp,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df_train,df_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.concat([df[:train_num],train_Y],axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.concat([df[:train_num],train_Y],axis=1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,mean_df,on=c,how='left')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.merge(data,mean_df,on=c,how='left')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv(data_path+'house_test.csv.gz'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp[c],sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_temp[c],sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(3,3)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(num_grids,num_grids)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(num_grids,num_grids)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
tick_marks,numpy.arange(num_classes),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
cls_pred,"numpy.zeros(shape=num_test,dtype=np.int)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
data.test.cls,"numpy.argmax(data.test.labels,axis=1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_true=cls_true,
y_pred=cls_pred)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
start_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
end_time,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
num_grids,math.ceil(math.sqrt(num_filters),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
num_grids,math.ceil(math.sqrt(num_filters),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_0
true_points,numpy.where(upper_lines[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
true_points,numpy.where(lower_lines[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
kernel,"numpy.ones((7,7)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sorted_objects,"numpy.argsort(stats[:,-1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
upper_lines,"numpy.append(upper_lines,upper_line)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lower_lines,"numpy.append(lower_lines,lower_line)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
line,"numpy.polyfit(true_points[1],h-true_points[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
line,"numpy.polyfit(true_points[1],h-true_points[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
upper_degrees,math.degrees(math.atan(line[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lower_degrees,math.degrees(math.atan(line[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cleo,"pandas.DataFrame({'Id':test.Id,'SalePrice':cleo2})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.concat([X_train,y_train],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,pandas.read_csv('./Data/X_test_clean.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,pandas.read_csv('./Data/X_train_clean.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train,pandas.read_csv('./Data/y_train_clean.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('./Data/test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_Lasso_sc7.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_Ridge_Sc3.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_KNN1_Sc.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_Gamma5.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_ENet_sc2.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_ENet_sc2.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('./Data/Final_Linear2.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_model,"sklearn.linear_model.LassoCV(alphas=l_alphas,cv=kf)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_model,"sklearn.linear_model.RidgeCV(alphas=r_alphas,cv=kf)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enet_model,"sklearn.linear_model.ElasticNetCV(alphas=enet_alphas,l1_ratio=enet_ratio,cv=kf)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enet_model,"sklearn.linear_model.ElasticNetCV(alphas=enet_alphas,l1_ratio=enet_ratio,cv=20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=10,shuffle=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=1,p=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cleo2,numpy.concatenate(cleo),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l_alphas,"numpy.logspace(2.7,3.05,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r_alphas,"numpy.logspace(2.8,2.95,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enet_alphas,"numpy.logspace(-1,0.03,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enet_alphas,"numpy.logspace(-2,0.03,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
words,numpy.array(vectorizer.get_feature_names(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,"numpy.zeros(critics.shape[0],dtype=np.bool)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ind,numpy.argsort(probs),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bad_rotten,numpy.argsort(prob[y==0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bad_fresh,numpy.argsort(prob[y==1]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cumulative,numpy.cumsum(values),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.eye(xtest.shape[1]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"values,base","numpy.histogram(DocFreq,bins=DocFreq.max()",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
critics,pandas.read_csv('./critics.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train,test","sklearn.model_selection.train_test_split(critics[[""quote"",""fresh""]],test_size=0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"itrain,itest",sklearn.model_selection.train_test_split(range(critics.shape[0]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(alpha=alpha),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(alpha=best_alpha),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_best,"sklearn.model_selection.GridSearchCV(estimator=clf,param_grid=params_for_opt,scoring=scoring,cv=cv)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_accuracy,"sklearn.metrics.accuracy_score(y_train,y_train_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_accuracy,"sklearn.metrics.accuracy_score(y_test,y_test_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_auc,"sklearn.metrics.auc(fpr1,tpr1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_f1,"sklearn.metrics.f1_score(y_train,y_train_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_f1,"sklearn.metrics.f1_score(y_test,y_test_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_train,y_train_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr1,tpr1,thresholds1","sklearn.metrics.roc_curve(y_test,y_test_predict)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Xt_new,"sklearn.feature_selection.SelectKBest(chi2,k=nkbest)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,"numpy.array(
[
1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9
]
)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y_train,"numpy.array(
[
2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18
])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_val,"numpy.array(
[
1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9
])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y_val,"numpy.array(
[
2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18,2,4,6,8,10,12,14,16,18
])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test,"numpy.array([
1,2,3,4,5,6,7,8,9
])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y_test,"numpy.array([
[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]

])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,loss_ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.read_excel('../1.xlsx',header=None,index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
a,"pandas.read_excel('../1.xlsx',header=None,index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
b,"pandas.read_excel('../1.xlsx',header=None,index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
sleep,"pandas.read_csv('com.samsung.shealth.sleep.201908141922.csv',header=1)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
sleep2,"pandas.read_csv('com.samsung.shealth.sleep_data.201908141922.csv',header=1)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
files,os.listdir(os.curdir),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
train_kmm,numpy.array(df_new_3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_kmm,numpy.array(df_new),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
encoded_dim,numpy.shape(train_encoded),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
encoded_dim,numpy.shape(train_encoded),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
k_means_labels_unique,numpy.unique(k_means_labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
k_means_labels_unique,numpy.unique(k_means_labels),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_label,"pandas.DataFrame({'mean':test_encoded[:,0],'std':test_encoded[:,1],'label':testlabel})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_new,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_new,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(save_path+'train_FD001_3_p20_.txt',header=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
k_means,"sklearn.cluster.KMeans(init='k-means++',n_clusters=n_num,n_init=10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
k_means,"sklearn.cluster.KMeans(init='k-means++',n_clusters=n_num,n_init=10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.DataFrame(columns=files),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
test,pandas.DataFrame(columns=files),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
oof,"pandas.DataFrame({'encounter_id':train['encounter_id'],'hospital_death':oof_preds})",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'encounter_id':test['encounter_id'],'hospital_death':preds_test})",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_,pandas.read_csv('../raw/training.csv'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
predictions,pandas.read_csv(f'../oof_preds/{file}'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
predictions,pandas.read_csv(f'../submissions/{file}'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
lbl,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
df_new,"pandas.concat((df_0,df_1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('diabetes.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2[feature],numpy.where((df2['Outcome']==1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2[feature],numpy.where((df2['Outcome']==0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
GaussNB,sklearn.naive_bayes.GaussianNB(priors=None),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MultiNB,sklearn.naive_bayes.MultinomialNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feature_matrix,df2['Outcome'],random_state=1,test_size=0.2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"Xn_train,Xn_test,yn_train,yn_test","sklearn.model_selection.train_test_split(df_new[df_new.columns[:-1]],df_new['Outcome'],random_state=17,test_size=0.2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.Pipeline([('scaler',StandardScaler()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline2,"sklearn.pipeline.Pipeline([('scaler',StandardScaler()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline_nb,"sklearn.pipeline.Pipeline([('clf',GaussianNB(priors=[0.651,0.349])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline_nb1,"sklearn.pipeline.Pipeline([('clf',GaussianNB()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,"pandas.DataFrame({
""PassengerId"":df_test[""PassengerId""],
""Survived"":pred
})",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
df_train,"pandas.read_csv(""../input/train.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
df_test,"pandas.read_csv(""../input/test.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
pipeline,"sklearn.pipeline.Pipeline([
(""column_extractor"",ColumnExtractor(feature_columns)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
self.min_max_scalar,sklearn.preprocessing.MinMaxScaler(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
close,"pandas.DataFrame(dbi[""AdjClose""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"pandas.DataFrame(close[""AdjClose""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"pandas.DataFrame(close[""7daysout""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
comb,pandas.DataFrame(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
holdout_X,"pandas.DataFrame(holdout[""AdjClose""])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"comb[""y_test""]",pandas.Series(y_test.tolist(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"comb[""y_pred""]",pandas.Series(y_pred.tolist(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dbi,"pandas.read_csv(""DBI.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
holdout.index,pandas.to_datetime(holdout.index),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=.2,random_state=23)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr,sklearn.svm.SVR(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfn,"pandas.DataFrame(df,columns=col_n)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
percent,pandas.Series(round(total/len(df),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,onehot_encoding_fuel],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,onehot_encoding_type],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,onehot_encoding_door_structure],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehot_encoding_fuel,"pandas.get_dummies(df['heat_fuel'],prefix='heat_fuel')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehot_encoding_type,"pandas.get_dummies(df['heat_type'],prefix='heat_type')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehot_encoding_door_structure,"pandas.get_dummies(df['front_door_structure'],prefix='front_door_structure')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""trainPrice.csv"",decimal=',')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['exclusive_use_area'],pandas.to_numeric(df['exclusive_use_area']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['total_parking_capacity_in_site'],pandas.to_numeric(df['total_parking_capacity_in_site']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['supply_area'],pandas.to_numeric(df['supply_area']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['room_count'],pandas.to_numeric(df['room_count']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['bathroom_count'],pandas.to_numeric(df['bathroom_count']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time1,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
time2,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(data.data,columns=data.feature_names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
target,"pandas.DataFrame(data.target,columns=[""MEDV""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.load_boston(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
t,"numpy.arange(0,5,0.2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_pos,numpy.arange(len(objects),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.arange(5),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"df[""PRICE""]",numpy.array(boston.target),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(boston.data,columns=boston.feature_names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_scaled,pandas.DataFrame(self.scaler.transform(X[self.columns]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
strains_2,pandas.get_dummies(C046_H1117_1['Strains']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
C046_H1117,pandas.read_excel(r'C:\ZL\Googledrivesyn\Research\manuscriptwriting\Harvestingefficiency\Harvestingreport\Harvestingpaper\Data\Pythonregressionanalysis\datacombine\C046+H1117_clean_reggression.xlsx'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
target,"numpy.where(C046_H1117_processed['Harvest_efficiency']>60,1,0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.mean_,numpy.mean(X[self.columns]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
summary_table['Coefficient'],numpy.transpose(reg.coef_),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.var_,numpy.var(X[self.columns]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
summary_table['Odds_ratio'],numpy.exp(summary_table.Coefficient),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.scaler,"sklearn.preprocessing.StandardScaler(copy,with_mean,with_std)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_inputs,target,
test_size=0.2,random_state=20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1,"numpy.linspace(0,66,700)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ima,pandas.read_excel('/Users/cyano/Desktop/tsi_fui.xlsx'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"popt,pcov","scipy.optimize.curve_fit(func,x,y)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
encoded,"numpy.array([vocab_to_int[c]forcintext],dtype=np.int32)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,"numpy.zeros(x.shape,dtype=x.dtype)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.zeros((1,1)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
p,numpy.squeeze(preds),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
image_id,random.choice(dataset.image_ids),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
ixs,numpy.arange(len(keep),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
roi_class_names,numpy.array(dataset.class_names),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
det_mask_specific,"numpy.array([mrcnn[""masks""][0,i,:,:,c]
fori,cinenumerate(det_class_ids)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
det_masks,"numpy.array([utils.unmold_mask(m,det_boxes[i],image.shape)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
positive_anchor_ix,numpy.where(target_rpn_match[:]==1),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
negative_anchor_ix,numpy.where(target_rpn_match[:]==-1),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
neutral_anchor_ix,numpy.where(target_rpn_match[:]==0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
det_count,numpy.where(det_class_ids==0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
roi_positive_ixs,numpy.where(roi_class_ids>0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[ixs]>0,2,1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[roi_positive_ixs][ids]>0,1,0)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
keep,numpy.where(roi_class_ids>0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
ixs,numpy.where(pre_nms_class_ids==class_id),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
visibilities,"numpy.where(roi_class_ids[keep][ixs]>0,1,0)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
det_count,numpy.where(det_class_ids==0),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
roi_class_ids,"numpy.argmax(mrcnn[""probs""][0],axis=1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
sorted_anchor_ids,"numpy.argsort(rpn['rpn_class'][:,:,1].flatten()",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
proposals,"numpy.around(mrcnn[""proposals""][0]*np.array([h,w,h,w])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
keep,"numpy.intersect1d(keep,np.where(roi_scores>=config.DETECTION_MIN_CONFIDENCE)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
keep,"numpy.intersect1d(keep,nms_keep)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
nms_keep,"numpy.union1d(nms_keep,class_keep)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,0],50)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,1],50)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,2],50)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.hist(activations[""rpn_bbox""][0,:,3],50)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
_,"matplotlib.pyplot.imshow(modellib.unmold_image(activations[""input_image""][0],config)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
"_,ax","matplotlib.pyplot.subplots(rows,cols,figsize=(size*cols,size*rows)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_7,CLUSTER_7
x,"numpy.linspace(0,1,num=1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
players,"pandas.DataFrame(players,columns=['player'])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
result,"pandas.merge(points,games_played,left_index=True,right_index=True)",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(path),CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data['date'],"pandas.to_datetime(data['date'],format='%Y-%m-%d')",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
path,os.getcwd(),CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ax,"seaborn.lineplot(x=""date"",
y=""points"",
hue=""player"",
data=df,
dashes=True)",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_train,pandas.DataFrame(scaler.transform(X_train),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
X_test,pandas.DataFrame(scaler.transform(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('Data/winequality-red.csv',sep=';')",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=SEED)",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
c,collections.Counter(item),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
c,collections.Counter(data),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
a,"numpy.array([1,2,3])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
b,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([1,2])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([1.0,2.0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([1,2],dtype=np.int64)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2],[3,4]],dtype=np.float64)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([[5,6],[7,8]],dtype=np.float64)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2],[3,4]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([[5,6],[7,8]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v,"numpy.array([9,10])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
w,"numpy.array([11,12])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2],[3,4]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v,"numpy.array([1,0,1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,numpy.array(img_jpg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
	image,numpy.asarray(bytearray(resp.read(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,"numpy.zeros((2,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.empty_like(x),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
b,"numpy.ones((1,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
c,"numpy.full((2,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
npimg,"numpy.sum(npimg/3,axis=-1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
kernel,"numpy.float32([[-1,0,1],[-1,0,1],[-1,0,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
d,numpy.eye(2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
response,requests.get('https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRZpTmijaNOH6MmycM_eiPKcEl5mVvbwl7a8YKVGpEEMIanDcSt'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"y_true,y_pred",numpy.array(y_true),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
y_pred,numpy.array(y_pred),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
temp,numpy.zeros(len(p),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
temp,numpy.zeros(len(p),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
weather_labels_value,numpy.transpose(np.float32(labels_df[weather_labels].values),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
labels_df,pandas.read_csv(PLANET_KAGGLE_LABEL_CSV),CLUSTER_20,CLUSTER_0,CLUSTER_11,CLUSTER_7,CLUSTER_7
arr,numpy.arange(100),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
ar,"numpy.array([45,6,78,9.6,20,45],dtype='int32')",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
array2,"numpy.array([[1,3,5.9,7],[2,4,6,8]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
array3,"numpy.array([[1,3,5],[2,4,6]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,"numpy.array([[2,41,13],[16,17,18]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
zerod,"numpy.zeros((4,6)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'product_name':product_names_df,'product_brand':product_brands_df,'actual_price':actual_prices_df,'selling_price':selling_prices_df,'product_link':product_links_df})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
html,"requests.get(url,headers=headers_std)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
y,"numpy.array([0,1,2,2,1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
correct_scores,"numpy.asarray([
[-0.81233741,-1.27654624,-0.70335995],
[-0.17129677,-1.18803311,-0.47310444],
[-0.51590475,-1.01354314,-0.8504215],
[-0.15419291,-0.48629638,-0.52901952],
[-0.00618733,-0.12435261,-0.15226949]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
M_test_ans,"numpy.array(
[[0.,0.,0.,1.,0.,0.,0.,0.,1.,0.,],
[0.,0.,0.,1.,0.,0.,0.,0.,0.,1.,],
[0.,0.,0.,0.,0.,0.,1.,0.,0.,1.,],
[1.,1.,0.,0.,0.,0.,0.,0.,0.,0.,],
[0.,0.,0.,0.,0.,0.,0.,0.,1.,1.,],
[0.,0.,0.,0.,0.,0.,0.,1.,1.,0.,],
[0.,0.,1.,0.,0.,0.,0.,1.,0.,0.,],
[0.,0.,0.,0.,0.,1.,1.,0.,0.,0.,],
[1.,0.,0.,0.,1.,1.,0.,0.,0.,1.,],
[0.,1.,1.,0.,1.,0.,0.,0.,1.,0.,]]
)",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
M_reduced_plot_test,"numpy.array([[1,1],[-1,-1],[1,-1],[-1,1],[0,0]])",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
M,"numpy.zeros((num_words,num_words)",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
M,numpy.stack(M),CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
M_lengths,"numpy.linalg.norm(M_reduced_co_occurrence,axis=1)",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
svd,"sklearn.decomposition.TruncatedSVD(n_components=2,n_iter=n_iters,random_state=42)",CLUSTER_16,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
elifnotcollections.Counter(self.indep_coords),=collections.Counter(other.indep_coords),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
elifnotcollections.Counter(self.indep_coords),=collections.Counter(other.indep_coords),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ifnotcollections.Counter(_ham1.indep_coords),=collections.Counter(_ham2.indep_coords),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
elifnotcollections.Counter(_op1.indep_coords),=collections.Counter(_op2.indep_coords),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_inputs,numpy.array(pos_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_inputs,numpy.array(neg_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_inputs,numpy.array(pos_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_inputs,numpy.array(neg_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_inputs,numpy.array(test_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
g,"numpy.array([[1,2,3,4,None]])",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
h,"numpy.array([0,1,0,1,0])",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp_features,numpy.zeros(no_of_features_considered),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_labels,numpy.zeros(len(neg_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_labels,numpy.zeros(len(neg_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_full,"numpy.concatenate((pos_inputs,pos_labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_full,"numpy.concatenate((neg_inputs,neg_labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
all_,"numpy.concatenate((pos_full_upsampled,neg_full_upsampled)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_full,"numpy.concatenate((pos_inputs,pos_labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_full,"numpy.concatenate((neg_inputs,neg_labels)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
all_,"numpy.concatenate((pos_full_upsampled,neg_full_upsampled)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_labels,numpy.ones(len(pos_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pos_labels,numpy.ones(len(pos_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_labels,numpy.ones(len(test_inputs),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp_df,"pandas.read_csv(""/Users/adithyabandi/Desktop/""+token+""_token.txt"",sep="""")",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
tf,math.log(1+count),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
idf,math.log(72/len(temp_array),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
l,sklearn.linear_model.LogisticRegression(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.naive_bayes.GaussianNB(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sgd_clf,sklearn.linear_model.SGDClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sgd_clf,sklearn.linear_model.SGDClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sgd_clf,sklearn.linear_model.SGDClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf_clf,sklearn.ensemble.RandomForestClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.ensemble.GradientBoostingClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.ensemble.GradientBoostingClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
gb_clf,sklearn.ensemble.GradientBoostingClassifier(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
knn_clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sv_clf,sklearn.svm.SVC(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sv_clf,"sklearn.svm.SVC(kernel=""rbf"",random_state=42)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
sv_clf,"sklearn.svm.SVC(kernel=""rbf"",random_state=42)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
lsv_clf,sklearn.svm.LinearSVC(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
lsv_clf,sklearn.svm.LinearSVC(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
lsv_clf,sklearn.svm.LinearSVC(random_state=42),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
split,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
acc_score,"sklearn.metrics.accuracy_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
acc_score,"sklearn.metrics.accuracy_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
acc_score,"sklearn.metrics.accuracy_score(test_labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
prec_score,"sklearn.metrics.precision_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
prec_score,"sklearn.metrics.precision_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
prec_score,"sklearn.metrics.precision_score(test_labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rec_score,"sklearn.metrics.recall_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rec_score,"sklearn.metrics.recall_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rec_score,"sklearn.metrics.recall_score(test_labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(test_labels,pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
re_tag,re.compile(r'<[^>]+>'),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
results_prediction,"pandas.read_csv(param[""prediction_path""],sep="";"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
results_prediction,"pandas.read_csv(param[""prediction_path""],sep="";"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
results_prediction,"pandas.read_csv(param[""prediction_path""],sep="";"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
original_sensor_data,"pandas.read_csv(param[""data""][""path""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,requests.get('https://api.spotify.com/v1/search?query=80s&type=playlist'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
response,requests.get('https://api.spotify.com/v1/search?query=biggie&type=playlist'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
biggie_response,requests.get('https://api.spotify.com/v1/search?query=biggie&type=artist'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
response,"requests.get(""https://api.spotify.com/v1/artists/1RpIWJHxLsDE8YfFcRaBKw/top-tracks?country=US"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.zeros(4,dtype=int)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,"numpy.zeros(4,dtype={'names':('name','age','weight')",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X,"numpy.zeros(1,dtype=tp)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
tp,"numpy.dtype([('id','i8')",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('Absenteeism_at_work6.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,pandas.read_csv('df_14.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
colormap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
colormap3,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
colormap4,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labelencoder_X_1,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labelencoder_X_2,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
onehotencoder,sklearn.preprocessing.OneHotEncoder(categorical_features=[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mimic_data,"pandas.read_csv(""/content/drive/MyDrive/app/text_binary.csv"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
re_newlines,re.compile('\\\\n'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
re_letters,re.compile('[^A-Za-z0-9]'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
re_spaces,re.compile('\s+'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
enc,"numpy.array([vocab2index.get(w,vocab2index[""UNK""])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
word_vecs[word],numpy.array([float(val),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
W,"numpy.zeros((V,emb_size)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
W[0],"numpy.zeros(emb_size,dtype='float32')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
counts,collections.Counter(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"pandas.DataFrame(data,columns=feature_names)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,"pandas.DataFrame(target,columns=['price'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,pandas.Series(df['Class']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../creditcard.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=100,stratify=y)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
reg,"sklearn.ensemble.RandomForestRegressor(max_depth=12,n_estimators=1000,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,GridSearchCV(estimator=sklearn.ensemble.RandomForestClassifier(random_state=100),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.model_selection.GridSearchCV(estimator=RandomForestClassifier(random_state=100),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
AUC,"sklearn.metrics.roc_auc_score(y_test,y_pred_proba)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
all_anomalies,pandas.DataFrame(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
codes,pandas.Series(codelist),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
unique_dates,pandas.Series(dates),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
all_anomalies,"pandas.concat([all_anomalies,anomalies(meter)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
electric,"pandas.read_csv(""FullEletricInterval042016.csv"")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
weather,pandas.read_csv('weather_prepared_final.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
propertyCode,"pandas.read_excel(""SIMS_Property_List_4-6-2016_Revised.xlsx"")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
electric['Datetime'],pandas.to_datetime(electric['Date']+''+electric['StartTime']),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
weather.DATE,pandas.to_datetime(weather.DATE),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
weekend,pandas.to_datetime(date),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(electric_day.ix[meter].index),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,pandas.to_datetime('2015-01-01'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,pandas.to_datetime('2016-04-10'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(electric_day.ix[meter].index),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,pandas.to_datetime('2015-01-01'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,pandas.to_datetime('2016-04-10'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
weekend,pandas.to_datetime(date),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(electric_total.index),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(electric_total.index),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,pandas.to_datetime('2015-01-01'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
end,pandas.to_datetime('2016-04-10'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"defsingle_building_meters_overlay(code,start","pandas.to_datetime('2014-04-1123:30:00'),end=pandas.to_datetime('2016-04-1023:30:00')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"_,ax","matplotlib.pyplot.subplots(rows,cols,figsize=(size*cols,size*rows)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(len(layers),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
result,pandas.DataFrame([[(num_one+num_three),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
final_result_food,pandas.DataFrame(np.zeros((len(state),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
final_result_activity,pandas.DataFrame(np.zeros((len(state),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
state_data,"pandas.read_csv('../data/state.csv',index_col=[0],header=None,usecols=[0,1,2])",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(file_name,header=None)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(file_name,header=None)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
o_data,"pandas.read_csv(from_csv,header=None,names=['id','state','tweet','food','activity','target'],
index_col=['id'])",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
"plt.errorbar(np.array(mean_list),x,xerr",numpy.array(error_list),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
"m,se",numpy.mean(a),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
years,numpy.arange(len(oil),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
oil,numpy.log(oil.DCOILWTICO.as_matrix(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
snp,numpy.log(snp.as_matrix(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.concat([oil,snp],axis=1,sort=True)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
snp,pandas.read_csv('./data/SNP.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
oil,pandas.read_csv('./data/OIL.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp,pandas.read_csv('temp.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('lab1.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,numpy.sin(time_steps),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.sin(time_steps),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
time_steps,"numpy.linspace(0,np.pi,seq_length+1)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
time_steps,"numpy.linspace(0,np.pi,seq_length)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('Explor_uscecchini28.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test_nm,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"false_positive_rate,recall,thresholds","sklearn.metrics.roc_curve(y_test_nm,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self._table,"numpy.zeros((bins**observation_space.shape[0],action_space.n)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
self._learning_rates,"numpy.ones(
(bins**observation_space.shape[0],action_space.n)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_train,"numpy.asarray(df[['x1','x2']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_test,"numpy.asarray(dft[['x1','x2']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(x1min,x1max,100)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.linspace(x2min,x2max,100)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(x,y)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x1min,x1max,plot_step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_all,"pandas.concat([df,dft])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('../dataset/knnClassify3c.csv',delimiter=';')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dft,"pandas.read_csv('../dataset/knnClassify3c-test.csv',delimiter=';')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.AdaBoostClassifier(classifier,n_estimators=n_estimators,algorithm='SAMME')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,cross_val_score(estimator=sklearn.ensemble.AdaBoostClassifier(DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(max_depth=maxdepth),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,cross_val_score(estimator=sklearn.tree.DecisionTreeClassifier(max_depth=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.tree.DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.tree.DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,sklearn.model_selection.cross_val_score(estimator=DecisionTreeClassifier(max_depth=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,sklearn.model_selection.cross_val_score(estimator=BaggingClassifier(DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,sklearn.model_selection.cross_val_score(estimator=RandomForestClassifier(n_estimators=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,sklearn.model_selection.cross_val_score(estimator=AdaBoostClassifier(DecisionTreeClassifier(max_depth=md),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=cMap,alpha=.7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=cMap,alpha=.7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=cMap,alpha=.7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,cmap=cMap,alpha=.7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs,"matplotlib.pyplot.contourf(xx,yy,Z,alpha=estimator_alpha,cmap=cMap)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,4,figsize=(20,5)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(2,3,figsize=(20,8)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(3,4,figsize=(16,8)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,axs","matplotlib.pyplot.subplots(3,4,figsize=(16,8)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
nonzeroy,numpy.array(nonzero[0]),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
nonzerox,numpy.array(nonzero[1]),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
hist_features,"numpy.concatenate((channel1_hist[0],channel2_hist[0],channel3_hist[0])",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
heat,"numpy.zeros_like(img[:,:,0])",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
heat,"numpy.zeros_like(img[:,:,0])",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
heatmap,"numpy.clip(heat,0,255)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
heatmap,"numpy.clip(heat,0,255)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
hog_features,numpy.ravel(hog_features),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
y,numpy.hstack((np.ones(len(car_features),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
hog_features,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
X,"numpy.vstack((car_features,notcar_features)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
imcopy,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
else:feature_image,numpy.copy(image),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
else:feature_image,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
imcopy,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
draw_image,numpy.copy(image),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
draw_img,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
img_copy,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
channel1_hist,"numpy.histogram(img[:,:,0],bins=nbins,range=bins_range)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
channel2_hist,"numpy.histogram(img[:,:,1],bins=nbins,range=bins_range)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
channel3_hist,"numpy.histogram(img[:,:,2],bins=nbins,range=bins_range)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t2,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t2,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
svc,sklearn.svm.LinearSVC(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fruits,pandas.read_table('fruit_data_with_colors.txt'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=1-s)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results_race,pandas.DataFrame({'prediction':model.predict(X),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.get_dummies(df,columns=['race','c_charge_degree'])",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
raw_df,pandas.read_csv('compas-data/compas-scores-two-years.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
y_train,numpy.ravel(y_train),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X_train,X_held_out,y_train,y_held_out,indices_train,indices_test","sklearn.model_selection.train_test_split(
X,
df[target],
df.index,
test_size=held_out_size,
random_state=random_state)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=n_splits,
random_state=random_state)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
lik_model,"scipy.optimize.minimize(lik,parameters,method='L-BFGS-B')",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.read_table(text),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(url),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
jHistory,numpy.empty(num_inters),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,"numpy.empty((100,100)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"numpy.concatenate((np.ones((m,1)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
delta,"numpy.dot(X.T,sigmoid(numpy.dot(X,theta)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(30.0,100.0,num=100)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
statinfo,os.stat(filepath),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
"_,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
data_dict,"pandas.DataFrame({'Dtype':dtype,
'No.ofuniqueitems':unique_items,
'Description':[""Reviewer'suniqueidentificationnumber"",
""Nameofthedrugthatisreviewed"",
""Conditionthatisbeingtreatedwiththedrug"",
""Textofthereview"",
""Drugratingonascaleof1(worst)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
s,"pandas.DataFrame({'No.ofreviews':significant_drugs.values,
'drugName':significant_drugs.index.get_level_values(1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
p,"pandas.merge(s,final_df,how='inner',left_on=['condition','drugName'],right_on=['condition','drugName'])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df,pandas.read_csv(file),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
final_df['date'],pandas.to_datetime(final_df['date']),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
nopunc,"re.sub(r'[^a-zA-z]','',sentence)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3,random_state=101)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
g,"seaborn.barplot(conditions.index,conditions,palette=""BuGn_r"")",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_test,probs)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
nb,sklearn.naive_bayes.BernoulliNB(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
svc,"sklearn.svm.SVC(gamma='scale',probability=True)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
svc,"sklearn.svm.SVC(C=10,cache_size=200,class_weight=None,coef0=0.0,
decision_function_shape='ovr',degree=3,gamma=0.01,kernel='rbf',
max_iter=-1,probability=True,random_state=None,shrinking=True,
tol=0.001,verbose=False)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
d_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
forest,sklearn.ensemble.RandomForestClassifier(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
grid,sklearn.model_selection.GridSearchCV(SVC(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
accuracies_mean,numpy.array([np.mean(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
accuracies_std,numpy.array([np.std(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_cycle,"numpy.concatenate([xfori,xinenumerate(X_train_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_cycle,"numpy.concatenate([yfori,yinenumerate(y_train_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
idxs,numpy.flatnonzero(y_train==y),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_pred==val_y),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_folds,"numpy.array_split(X_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_folds,"numpy.array_split(y_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_one,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_two,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
trained_data,"pandas.concat([deng_features_df,deng_labels_df],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
deng_features_df,"pandas.read_csv(""./data/dengue_features_train.csv"",sep="","",index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
deng_labels_df,"pandas.read_csv(""./data/dengue_labels_train.csv"",sep="","",index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
deng_features_test_df,"pandas.read_csv(""./data/dengue_features_test.csv"",sep="","",index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,"pandas.read_csv(""./data/submission_format.csv"",
index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
trained_data['week_start_date'],pandas.to_datetime(trained_data['week_start_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission.total_cases,"numpy.concatenate([predictions_sj,predictions_iq])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sj_corr_heat,seaborn.heatmap(sj_corr),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iq_corr_heat,seaborn.heatmap(iq_corr),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lassoreg,"sklearn.linear_model.Lasso(alpha=alpha,normalize=True,max_iter=1e5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mae,"sklearn.metrics.mean_absolute_error(valid_labels,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.get_dummies(train),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.get_dummies(test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
white,pandas.get_dummies(white),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
red,"pandas.read_excel(""/Users/sagarjoshi/Desktop/Project/WineQualityDataset/winequality-red.xlsx"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
white,"pd.red=pandas.read_excel(""/Users/sagarjoshi/Desktop/Project/WineQualityDataset/winequality-white.xlsx"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lreg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logregW,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
missing_data,pandas.DataFrame({'MissingRatio':data_na}),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'Id':ids,'SalePrice':np.expm1(linear_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'Id':ids,'SalePrice':np.expm1(gdbt_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'Id':ids,'SalePrice':np.expm1(rf_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sub,"pandas.DataFrame({'Id':ids,'SalePrice':np.expm1(blending_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df_train,df_test])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.get_dummies(df),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv(data_path+'house_train.csv.gz'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv(data_path+'house_test.csv.gz'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_Y,numpy.log1p(df_train['SalePrice']),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
linear,"sklearn.linear_model.LinearRegression(normalize=False,fit_intercept=True,copy_X=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gdbt,"sklearn.ensemble.GradientBoostingRegressor(tol=0.1,subsample=0.37,n_estimators=200,max_features=20,
max_depth=6,learning_rate=0.03)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
lbl,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=300,min_samples_split=9,min_samples_leaf=10,
max_features='sqrt',max_depth=8,bootstrap=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
Nt1t0,numpy.array(psi),CLUSTER_23,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_1
Ntw,numpy.zeros(len(parent_model.topic_names),CLUSTER_23,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_1
indexes_child,"numpy.argmax(psi_bayes,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_12,CLUSTER_0,CLUSTER_1
data,json.load(f),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,json.load(f),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,json.load(f),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
context_lengths,numpy.array(context_lengths),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
l1_par_range,numpy.sqrt(2*3.0/(DIM_USER+DIM_L1),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
l2_par_range,numpy.sqrt(2*3.0/(DIM_L1+DIM_L2),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,numpy.load(f),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,numpy.load(f),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,numpy.load(f),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,numpy.load(f),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
car,matplotlib.pyplot.imread(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
car,matplotlib.pyplot.imread(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
car,matplotlib.pyplot.imread(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
car,matplotlib.pyplot.imread(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_right,numpy.array(y_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y2_correct,numpy.array(y_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('creditcard.csv',low_memory=False)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=10),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,sklearn.preprocessing.scale(X2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
average_length,numpy.mean([len(x),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,numpy.sin(f1*t*np.pi),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0.,5.,500)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.,5.,500)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
hilbert,numpy.imag(sig.hilbert(y),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
p_test,"numpy.array([0.2,0.2,0.2,0.4])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
q_test,"numpy.array([0.3,0.3,0.1,0.3])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ba_deg_distr,"numpy.array([.1,.4,.3,0,.2])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
adjacency,numpy.load('../data/fma_metadata/adjacency.npy'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
app_train,pandas.get_dummies(app_train),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
app_test,pandas.get_dummies(app_test),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
app_train,pandas.read_csv(f_app_train),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
app_test,pandas.read_csv(f_app_test),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
log_reg,"sklearn.linear_model.LogisticRegression(C=0.0001,solver='liblinear')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
index,"numpy.arange(1,predicted_labels.shape[0]+1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sites_dict_df,pandas.DataFrame(list(site_dict.keys(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predicted_df,"pandas.DataFrame(predicted_labels,
index=np.arange(1,predicted_labels.shape[0]+1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
full_df,"pandas.concat([train_df.drop('target',axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df,"pandas.read_csv('../../data/train_sessions.csv',
index_col='session_id')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df,"pandas.read_csv('../../data/test_sessions.csv',
index_col='session_id')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
full_sites_sparse,"scipy.sparse.csr_matrix(([1]*sites_flatten.shape[0],
sites_flatten,
range(0,sites_flatten.shape[0]+10,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
img_model,"numpy.reshape(img_gray,(1,96,96,1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
img_copy,numpy.copy(img),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
img_copy_1,numpy.copy(img),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
jewels,os.listdir('jewels'),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
models,os.listdir('models'),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
words_matrix,"pandas.DataFrame(words_dict,range(len(sentences)",CLUSTER_1,CLUSTER_1,CLUSTER_9,CLUSTER_0,CLUSTER_1
unique_uid,"pandas.concat([unique_uid,df_part],ignore_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df,df_part],ignore_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_part,"pandas.merge(left=df_part,right=unique_uid,how='left',on='uid')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
unique_uid,"pandas.read_csv(file,sep=';',compression='gzip',usecols=[0],skiprows=0,nrows=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_part,"pandas.read_csv(file,sep=';',usecols=[0],
skiprows=1+i*for_loop[1],nrows=for_loop[1],names=['uid'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
unique_uid,pandas.read_csv('unique_uid.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_part,"pandas.read_csv(file,sep=';',
skiprows=1+i*for_loop[1],nrows=for_loop[1],names=['uid','action','level','event_time'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('clear_df_0.csv',usecols=[1,2,3,4])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_part,pandas.read_csv('clear_df_'+str(i),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
xfit,"numpy.linspace(-1,3.5)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
xfit,"numpy.linspace(-1,3.5)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(xlim[0],xlim[1],30)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.linspace(ylim[0],ylim[1],30)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
xy,numpy.vstack([X.ravel(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"Y,X","numpy.meshgrid(y,x)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,3)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,3)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
svc,"sklearn.svm.SVC(kernel='linear',class_weight='balanced')",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
faces,sklearn.datasets.fetch_lfw_people(min_faces_per_person=60),CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=150,whiten=True,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.pipeline.make_pipeline(pca,svc)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"Xtrain,Xtest,ytrain,ytest","sklearn.model_selection.train_test_split(faces.data,faces.target,
random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(model,param_grid)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
mat,"sklearn.metrics.confusion_matrix(ytest,yfit)",CLUSTER_28,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,json.loads(open(DATA),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,json.loads(open(DATA),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,json.loads(open(DATA),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,json.loads(open(DATA),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
similarity_matrix,"numpy.zeros((n_articles,n_articles)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
hm,"seaborn.heatmap(corrmat,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10})",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
hm,"seaborn.heatmap(corrmat,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10})",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Length,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Diameter,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Height,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Whole_weight,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Shucked_weight,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Viscera_weight,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Shell_weight,y=abalone_data.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data.Shell_weight,y=abalone_data.Rings,hue=abalone_data.Sex)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.scatterplot(x=abalone_data_I.Shell_weight,y=abalone_data_I.Rings)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
abalone_data,"pandas.read_csv(""abalone.original.csv"",header=None,names=['Sex','Length','Diameter','Height','Whole_weight','Shucked_weight','Viscera_weight','Shell_weight','Rings'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
results,numpy.zeros((len(sequences),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
shap_test,"pandas.DataFrame(data=shap_values,index=X_test.index,columns=X_test.columns)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
foo,"pandas.DataFrame({c:df.loc[X_test.index,c],
'shap':agg_shap_test[c]})",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
dummy_df,pandas.get_dummies(df),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../data/auto_clean.csv'),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,train_size=0.5,test_size=0.5)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.RandomForestRegressor(n_estimators=100),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
idxs,numpy.flatnonzero(y_train==y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
training_accuracy,numpy.mean(y_pred_train==y_train),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
validation_accuracy,numpy.mean(y_pred_val==y_val),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X,"numpy.array([[-2,-1],[-2,1],[2,-1],[2,1],[-1,-1],[-1,1],[1,-1],[1,1]])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,"numpy.array([-1,-1,-1,-1,1,1,1,1])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,numpy.log(X),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-2,2,500)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x_grid,numpy.linspace(X.min(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x_grid,numpy.linspace(X.min(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x_grid,numpy.linspace(X.min(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"xx1,xx2","numpy.meshgrid(np.arange(X[:,0].min()",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('california.dat'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=rows,ncols=columns,figsize=(15,4)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
abd,"sklearn.ensemble.AdaBoostClassifier(algorithm='SAMME',n_estimators=5,base_estimator=DecisionTreeClassifier(max_depth=1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
abd,"AdaBoostClassifier(algorithm='SAMME',n_estimators=5,base_estimator=sklearn.tree.DecisionTreeClassifier(max_depth=1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
gbr,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=10,learning_rate=0.3)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
gbr,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=10,learning_rate=0.3)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
gbr,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=10,learning_rate=0.3)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df,df_ans.values,test_size=0.3,random_state=13)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train,"pandas.DataFrame(list(zip(csv_data['text'][:mid],csv_data['sentiment'][:mid])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test,"pandas.DataFrame(list(zip(csv_data['text'][mid+1:],csv_data['sentiment'][mid+1:])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_freq,pandas.DataFrame(list(zip(freq_word.keys(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
csv_data,pandas.read_csv('GOP_REL_ONLY.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
hits,numpy.sum(res==y_test),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_train,numpy.matrix(padded_tweets),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_test,numpy.matrix(padded_tweets),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
thisplot,matplotlib.pyplot.bar(range(10),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
_,matplotlib.pyplot.xticks(range(10),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
train,pandas.read_csv('../input/train.csv'),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
test,pandas.read_csv('../input/test.csv'),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
predicted_label,numpy.argmax(predictions_array),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
predicted_label,numpy.argmax(predictions_array),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_5,CLUSTER_0
old_windowed_buf,numpy.zeros(windowsize),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
beat_sequence,"numpy.zeros(numberofbeats,dtype=int)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.zeros((numberofbeats*step,)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frame_sizes,numpy.zeros(numberofbeats),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frame_temp2,"numpy.zeros([steps_in[n],])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
pitch,numpy.zeros(numberofbeats),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
outw,"numpy.empty(0,dtype=np.int16)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.empty(0,dtype=np.int16)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.empty(0,dtype=np.int16)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.empty(0,dtype=np.int16)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
clusters[str(i)],numpy.flatnonzero(labels==i),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
pitch[0],"numpy.argmax(np.mean(X[5:,:],axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
pitch[n],"numpy.argmax(np.mean(X_temp[5:,:],axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data[len(data)-end_size:len(data)]*,"numpy.linspace(1,0,end_size)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data[:end_size]*,"numpy.linspace(1,0,end_size)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps,numpy.diff(onset_array),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps,numpy.diff(onset_sample_array1),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps_in,numpy.diff(frame_input),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps_out,numpy.diff(frame_output),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
steps,numpy.diff(onset_array),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
buf,"numpy.append(buf,np.zeros(windowsize-len(buf)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
outw,"numpy.append(outw,np.int16(output*32767.0)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"numpy.append(X,X_temp.reshape(numberofrows,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frames,"numpy.append(onset_samples,[data.shape[0]])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frames,"numpy.append([0],frames)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"numpy.append(X,X_temp.reshape(numberofrows,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.append(data_new,data02[onset_sample_array[beat_sequence[n]]:onset_sample_array[beat_sequence[n]+1]])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.append(data_new,temp_frame)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data_new,"numpy.append(data_new,frame_temp)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"numpy.append(X,X_temp.reshape(numberofrows,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
data,"numpy.pad(data,(0,end_size-len(data)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
temp_frame,"numpy.pad(temp_frame,(0,steps[n]-len(temp_frame)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
frames,numpy.unique(frames),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
buf,numpy.fft.irfft(freqs),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"sklearn.preprocessing.normalize(X,axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"sklearn.preprocessing.normalize(X,axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"sklearn.preprocessing.normalize(X,axis=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
verts,"numpy.append(verts,[0,0])",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
pts,"numpy.column_stack((xrData.clon,xrData.clat,xrData.isel(height=0,time=0)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
verts,"numpy.column_stack((xrData.clon_bnds.stack(z=('vertices','ncells')",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
n,"numpy.column_stack((n1,n2,n3)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
pts,"numpy.column_stack((xrData.clon,xrData.clat,xrData.isel(height=0,time=0)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
verts,"numpy.column_stack((xrData.clon_bnds.stack(z=('vertices','ncells')",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
n,"numpy.column_stack((n1,n2,n3,xrData.isel(height=0,time=0)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
verts,"pandas.DataFrame(pts*3,columns=['x','y','z'])",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
tris,"pandas.DataFrame(n,columns=['v0','v1','v2'])",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
verts,"pandas.DataFrame(verts,columns=['x','y'])",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
tris,"pandas.DataFrame(n,columns=['v0','v1','v2','TR_stn'],dtype=np.int64)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
r,"requests.get(project[0],auth=(ghuser,token)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
obj,json.loads(r.text),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
projects,collections.defaultdict(set),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
existing_projects,collections.defaultdict(list),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
error_occurences[lang],collections.defaultdict(list),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
normalized_error_codes,collections.defaultdict(lambda:collections.defaultdict(dict),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
plot_signifs,collections.defaultdict(dict),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
Project,"collections.namedtuple('Project',['url','name'])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
target_signif[bg_lang],collections.OrderedDict(sorted(target_signif[bg_lang].items(),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
twosample_results,"scipy.stats.mannwhitneyu(bg_data,target_data)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
fig,matplotlib.pyplot.gcf(),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
existing_projects[TARGET_LANGUAGE],"random.sample(existing_projects[TARGET_LANGUAGE],100)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_7
w,pandas.DataFrame(pd.Series(wiki_links),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
geo_props,pandas.Series(row),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
fares,"pandas.read_csv('http://web.mta.info/developers/data/nyct/fares/fares_181215.csv',skiprows=2)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
w,pandas.read_csv('wiki_links.csv'),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
page,"requests.get(""https://www.google.com/search?q=""+search_string+'station')",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
page,requests.get(x['wiki']),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
buffer,collections.deque(maxlen=span),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
batch,"numpy.ndarray(shape=(batch_size,skip_window*2)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
labels,"numpy.ndarray(shape=(batch_size,1)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
valid_examples,numpy.array(random.sample(range(valid_window),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
valid_examples,numpy.array(random.sample(range(valid_window),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
statinfo,os.stat(filename),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
tsne,"sklearn.manifold.TSNE(perplexity=30,n_components=2,init='pca',n_iter=5000,method='exact')",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
tsne,"sklearn.manifold.TSNE(perplexity=30,n_components=2,init='pca',n_iter=5000,method='exact')",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_3
df,"pandas.DataFrame(dict(carat=carat,price=price,color=color)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\iris.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data1,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\titanic.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data3,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\boston_house_price.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\iris.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(r'C:\Users\Aarav\Desktop\endtoenddatasets\datasets-master\datasets-master\Carseats.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
loc,"numpy.arange(0,max(label)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta,"numpy.arange(0.,2.,1./180.)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
z,numpy.cos(r),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r,numpy.sqrt(x**2+y**2),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-2,2,60)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.linspace(-2,2,60)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x,y","numpy.meshgrid(x,y)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fit,"numpy.polyfit(x,y,1)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cb,matplotlib.pyplot.colorbar(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
img,matplotlib.pyplot.imread(r'D:\Desktop_bkp_on_2ndFeb\Snaps\Newfolder\DSC_8210.jpg'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,seaborn.load_dataset('iris'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,seaborn.load_dataset('iris'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_imp,"pandas.DataFrame(rfc.feature_importances_,index=X_train.columns,
columns=['importance'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_imp,"pandas.DataFrame(ada.feature_importances_,index=X_train.columns,
columns=['importance'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df,"pandas.get_dummies(train_df,prefix_sep='_',drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_df,"pandas.read_csv(""fake_job_postings.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"ns_fpr,ns_tpr,_","sklearn.metrics.roc_curve(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lr_fpr,lr_tpr,_","sklearn.metrics.roc_curve(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ns_auc,"sklearn.metrics.roc_auc_score(y_test,ns_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_auc,"sklearn.metrics.roc_auc_score(y_test,lr_probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfc,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=16)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.ShuffleSplit(n_splits=100,test_size=0.3,random_state=16)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(rfc,X_train,y_train,cv=cv)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,"sklearn.model_selection.cross_val_score(ada,X_train,y_train,cv=cv)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ada,"sklearn.ensemble.AdaBoostClassifier(n_estimators=num_trees,random_state=16)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dockless_data_df,pandas.read_csv(csv_filepath),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
time,"datetime.datetime.strptime(input_time,""%m/%d/%Y%I:%M:%S%p"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
tips,seaborn.load_dataset('tips'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
duration,time.time(),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
losses,numpy.asarray(losses),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_1
naive_classifier,"sklearn.naive_bayes.MultinomialNB(fit_prior=False,alpha=0.01)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.concat(frames),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_3,pandas.read_csv('../../data/qald-3-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_4,pandas.read_csv('../../data/qald-4-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_5,pandas.read_csv('../../data/qald-5-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_6,pandas.read_csv('../../data/qald-6-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_7,pandas.read_csv('../../data/qald-7-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_8,pandas.read_csv('../../data/qald-8-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_9,pandas.read_csv('../../data/qald-9-train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv(""../""+d)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv(""../""+d)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv(""../""+d)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
words,pandas.DataFrame(data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,"pandas.cut(non_sw_values,BIN_COUNT,labels=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_wide,"pandas.pivot_table(
data,
values=list(value_funcs.keys()",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_wide['target'],"pandas.pivot_table(
data,
values=['target'],
index=['destination_id','occurrence','source_id','position',
'word_position'],
columns=['feature']
)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_wide,"pandas.pivot_table(
data[data.target],
values='pca_value',
index=['cluster_id','destination_id','occurrence',
'position'],
columns=['feature']
)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(data=data[data['feature']
.map(lambdaf:finfeatures)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,"seaborn.desaturate(color,0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svalues,numpy.array(sorted(finite_values),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
is_stopword,numpy.array([(lemmainstopwords),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
heights,numpy.zeros(bin_count),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h0s,numpy.zeros(bin_count),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
heights,numpy.zeros(BIN_COUNT),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h0s,numpy.zeros(BIN_COUNT),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
heights,numpy.zeros(BIN_COUNT),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
h0s,numpy.zeros(BIN_COUNT),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ours,numpy.where(svalues==value),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins_different,numpy.where(differences),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins_different+,numpy.ones_like(bins_different),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
are_different,numpy.any(differences),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
are_different,numpy.any(differences),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(2,1,figsize=(8,8)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,"sklearn.linear_model.LogisticRegression(penalty='l2',class_weight='balanced',
fit_intercept=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly,"sklearn.preprocessing.PolynomialFeatures(degree=2,interaction_only=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components='mle'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
numFigs,math.ceil(math.sqrt(f),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
Entry,"collections.namedtuple('Entry',['value','cluster'])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
TEntry,"collections.namedtuple('TEntry',['value','topic'])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
files,os.listdir(dataDir),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
unescaped,"re.sub(r'[\^]','',re.sub(r'[\\]','',t)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
df_merged,"pandas.merge(df_emp,df_fixed)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""data/company_data.csv"",encoding=""iso-8859-1"",sep=""\t"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_emp,"pandas.read_csv(""data/employees.csv"",sep=""\t"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_merged[""log_Employees""]","numpy.log10(df_merged[""Employees""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_merged[""log_Revenue""]","numpy.log10(df_merged[""Revenue""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_merged[""log_Assets""]","numpy.log10(df_merged[""Assets""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_merged[""log_MarketCap""]","numpy.log10(df_merged[""MarketCap""])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"(osm,osr),(slope,intercept,r)","scipy.stats.probplot(x,dist='norm',plot=None)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.arange(1000),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
y,numpy.zeros(200),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
y_index_0,numpy.where(y==0),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
y_index_1,numpy.where(y==1),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"x_train,y_train","numpy.concatenate([train_data_y_1,train_data_y_0])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"x_test,y_test","numpy.concatenate([test_data_y_1,test_data_y_0])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"train_data_y_0,test_data_y_0,train_label_y_0,test_label_y_0","sklearn.model_selection.train_test_split(X[y_index_0],y[y_index_0],test_size=10)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"train_data_y_1,test_data_y_1,train_label_y_1,test_label_y_1","sklearn.model_selection.train_test_split(X[y_index_1],y[y_index_1],test_size=10)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
tm_len_df,pandas.DataFrame(tm_len_list),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
get_tm_loc,pandas.DataFrame(get_tm_loc),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
positive_tm_set,"pandas.concat([pos_tm_prt,positive_pred_tm],sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
negative_tm_set,"pandas.concat([neg_tm_prt,negative_pred_tm],sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_tmd_length_final,"pandas.concat([pos_tmd_length,pos_tmd_len],axis=0,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
neg_tmd_length_final,"pandas.concat([neg_tmd_length,neg_tmd_len],axis=0,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
tm_locations,"pandas.concat([tm_proteins,get_tm_loc],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
all_pos_tms,"pandas.concat([tm_locations,pred_pos_tmd],sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
all_neg_tms,"pandas.concat([tm_locations,pred_neg_tmd],sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_tm_merged,"pandas.concat([all_pos_tms,pos_set_ASA],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_tm_calc_dist,"pandas.concat([pos_tm_merged,pos_tm_ptms],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
neg_tm_merged,"pandas.concat([all_neg_tms,neg_set_ASA],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
neg_tm_calc_dist,"pandas.concat([neg_tm_merged,neg_tm_ptms],axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
positive_set_tm_features,"pandas.concat(pos_tm_feature_list,axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
negative_set_tm_features,"pandas.concat(neg_tm_feature_list,axis=1,sort=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
positive_set,"pandas.read_csv(""data/positive_set_density_for_tm.csv"",index_col='uniprot_id')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
negative_set,"pandas.read_csv(""data/negative_set_density_for_tm.csv"",index_col='uniprot_id')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
tm_proteins,"pandas.read_csv(""data/Raw_datasets/TM_proteins.csv"",index_col='Entry')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
pos_pred_tm,"pandas.read_csv(""data/prediction_results/pos_predicted_tms.csv"",index_col='uniprot_id')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
neg_pred_tm,"pandas.read_csv(""data/prediction_results/neg_predicted_tms.csv"",index_col='uniprot_id')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
parsed_lines,"re.findall('\s([0-9]{1,4})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
split_array,"numpy.asarray(arr,dtype=int)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
split_array,"numpy.asarray(arr,dtype=int)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
t1,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
t1,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lst,"random.choices(range(1,max_num+1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lst,"random.choices(range(1,max_num+1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lst,"random.choices(range(1,max_num+1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lst,"random.choices(range(1,max_num+1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
tick_marks,numpy.arange(len(classes),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_acc,numpy.zeros((Ks-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_acc,numpy.zeros((Ks-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_acc,numpy.zeros((Dpth-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_acc,numpy.zeros((Dpth-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_acc[n-1],numpy.std(yhat==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std_acc[n-1],numpy.std(yhat==y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,numpy.linspace(df.Principal.min(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,numpy.linspace(df.age.min(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,numpy.linspace(df.dayofweek.min(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Feature,"pandas.concat([Feature,pd.get_dummies(df['education'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_Feature,"pandas.concat([test_Feature,pd.get_dummies(test_df['education'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('loan_train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df,pandas.read_csv('loan_test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['due_date'],pandas.to_datetime(df['due_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['effective_date'],pandas.to_datetime(df['effective_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df['due_date'],pandas.to_datetime(test_df['due_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_df['effective_date'],pandas.to_datetime(test_df['effective_date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_X,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(df,col=""Gender"",hue=""loan_status"",palette=""Set1"",col_wrap=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
KNCmodel,sklearn.neighbors.KNeighborsClassifier(n_neighbors=n),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
KNCmodel,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,yhat)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_acc[n-1],"sklearn.metrics.accuracy_score(y_test,yhat)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DTCmodel,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',max_depth=n)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DTCmodel,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
out,"sklearn.tree.export_graphviz(DTCmodel,feature_names=featureNames,out_file=dot_data,class_names=['PAIDOFF','COLLECTION'],filled=True,special_characters=True,rotate=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
SVMmodel,"sklearn.svm.SVC(kernel='rbf',gamma='scale')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
SVMmodel_matrix,"sklearn.metrics.confusion_matrix(y_test,yhat,labels=[0,1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LRmodel_matrix,"sklearn.metrics.confusion_matrix(y_test,yhat,labels=[0,1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LRmodel,sklearn.linear_model.LogisticRegression(C=0.01),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
KNCF1,"sklearn.metrics.f1_score(test_y,KNCmodel.predict(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DTCF1,"sklearn.metrics.f1_score(test_y,DTCmodel.predict(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
SVMF1,"sklearn.metrics.f1_score(test_y,SVMmodel.predict(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LRF1,"sklearn.metrics.f1_score(test_y,LRmodel.predict(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LRLL,"sklearn.metrics.log_loss(test_y,LRmodel.predict_proba(test_X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
RE_WORD,re.compile('\w+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
foo,"numpy.array([1,2,3,4])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
foo2,"numpy.array([[1,2,3,4],
[5,6,7,8]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
value,"numpy.dot(a.T,a)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
matrix,"numpy.dot(a,a.T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
exp_a,numpy.exp(a),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame([{'age':34,'name':'tasos'},
{'age':43,'name':'georgia'}])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
foo,"pandas.Series([34,'tasos'])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
foo,"pandas.Series({'age':34,'name':'tasos'})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ts,pandas.Timestamp('2016Jul110:00:00'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dt,"pandas.date_range('2016Jul110:00:00',periods=10,freq='D')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dt,"pandas.date_range('2016Jul110:00:00','2016Jul1010:00:00',freq='D')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.read_table('path',
sep=',',
header=None,
names=['col1','col2'],
index='col1'
skiprows=12,
skipfooter=12,
usecols=[0,4]
nrows=12)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
accuracies_mean,numpy.array([np.mean(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
accuracies_std,numpy.array([np.std(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_fold,"numpy.concatenate(np.delete(X_train_folds,i,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_fold,"numpy.concatenate(np.delete(y_train_folds,i,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
idxs,numpy.flatnonzero(y_train==y),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_validation),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_folds,"numpy.hsplit(y_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_folds,"numpy.vsplit(X_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_one,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_two,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r,numpy.exp(-(X**2),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xfit,"numpy.linspace(-1,3.5)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xfit,"numpy.linspace(-1,3.5)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(xlim[0],xlim[1],30)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.linspace(ylim[0],ylim[1],30)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xy,numpy.vstack([X.ravel(),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"Y,X","numpy.meshgrid(y,x)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(projection='3d'),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(16,6)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(3,5)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(4,6)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=1E10)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(kernel='rbf',C=1E6)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='linear',C=C)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
svc,"sklearn.svm.SVC(kernel='rbf',class_weight='balanced')",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
faces,sklearn.datasets.fetch_lfw_people(min_faces_per_person=60),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.pipeline.make_pipeline(pca,svc)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mat,"sklearn.metrics.confusion_matrix(ytest,yfit)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""thanksgiving.csv"",encoding=""Latin-1"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get(url),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(chapter_characters),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(r'pan.csv'),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
characters,collections.defaultdict(int),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
a,"numpy.array([1,2,3.4])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,"numpy.array([3,6,4])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
g,numpy.exp(a),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
script_folder,os.getcwd(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
const_subscription_id,"os.getenv(""SUBSCRIPTION_ID"",default=""<yoursubscriptionidhere>"")",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
workspace_name,"os.getenv(""WORKSPACE_NAME"",default=""customer-churn"")",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
resource_group_name,"os.getenv(""RESOURCE_GROUP_NAME"",default=""amls-rg"")",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
create_new_rg,"os.getenv(""CREATE_NEW_RG"",default=True)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
location_name,"os.getenv(""LOCATION_NAME"",default=""eastus"")",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
idxs,numpy.where((y_test!=cls),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean_feat,"numpy.mean(X_train_feats,axis=0,keepdims=True)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
std_feat,"numpy.std(X_train_feats,axis=0,keepdims=True)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_feats,"numpy.hstack([X_train_feats,np.ones((X_train_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_val_feats,"numpy.hstack([X_val_feats,np.ones((X_val_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test_feats,"numpy.hstack([X_test_feats,np.ones((X_test_feats.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
testacc,"numpy.loadtxt(""LBFGS_minibatch_fcNN_testacc.txt"")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
trainacc,"numpy.loadtxt(""LBFGS_minibatch_fcNN_trainacc.txt"")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
testloss,"numpy.loadtxt(""LBFGS_minibatch_fcNN_testloss.txt"")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
trainloss,"numpy.loadtxt(""LBFGS_minibatch_fcNN_trainloss.txt"")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(venue_details,columns=column_names)",CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(venue_details,columns=column_names)",CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
new_york_data,pandas.DataFrame(columns=column_names),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
indian_rest_ny,pandas.DataFrame(columns=column_names),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
indian_rest_stats_ny,pandas.DataFrame(columns=column_names),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
ny_neighborhood_stats,"pandas.merge(ny_neighborhood_stats,new_york_data,on='Neighborhood')",CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
indian_rest_stats_ny_csv,pandas.read_csv('indian_rest_stats_ny.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
resp,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
fruits,pandas.read_table('fruit_data_with_colors.txt'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_set,"numpy.array(training_set,dtype='int')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_set,"numpy.array(test_set,dtype='int')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ratings,numpy.zeros(nb_movies),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
movies,"pandas.read_csv('./Boltzmann_Machines/ml-1m/movies.dat',sep='::',
header=None,engine='python',encoding='latin-1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
users,"pandas.read_csv('./Boltzmann_Machines/ml-1m/users.dat',sep='::',
header=None,engine='python',encoding='latin-1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ratings,"pandas.read_csv('./Boltzmann_Machines/ml-1m/ratings.dat',sep='::',
header=None,engine='python',encoding='latin-1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
training_set,"pandas.read_csv('./Boltzmann_Machines/ml-100k/u1.base',delimiter='\t')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_set,"pandas.read_csv('./Boltzmann_Machines/ml-100k/u1.test',delimiter='\t')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
z,"numpy.array([z_at_value(Planck15.luminosity_distance,dist*u.Mpc)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tweets,"pandas.read_table(tweet_database_file_name,delimiter='\t',header=0)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
timestamps,numpy.array(timestamps),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
retweets,"numpy.array(tweets_after_candidacy['retweet_count'],dtype=float)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
favorites,"numpy.array(tweets_after_candidacy['favorite_count'],dtype=float)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
xavg,numpy.zeros(x.shape),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
yavg,numpy.zeros(y.shape),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
sorted_idx,numpy.argsort(x),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.sin(x),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,2*np.pi,10)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
xvals,"numpy.linspace(0,2*np.pi,50)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
yinterp,"numpy.interp(xvals,x,y)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,"numpy.zeros(labels.shape,dtype=np.uint8)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
"rr,cc",numpy.where(labels==i),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
"image[:,:,c]","numpy.where(
mask==1,
ccolor,
image[:,:,c]
)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
uniques,numpy.unique(labels),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
label,numpy.load(label_dir),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
P,"numpy.array([0.05,1,0.45])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
C_in,"numpy.array([10,148,103])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
C_out,"numpy.array([142,5,4])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([1,2,3])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.array([4,5,6])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
numerator,numpy.sum([P*C_out]),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
denominator,numpy.sum(P*C_in),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
numerator,numpy.sum(P*C_out),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
inter_spike_intervals,numpy.diff(spike_times),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(url,index_col=0)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"spike_indices,spike_amplitudes","scipy.signal.find_peaks(df['response'],height=0)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,"pandas.merge(X,y,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,"pandas.merge(X,y,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_cat_train_with_y_appmon,"pandas.merge(X_cat_train,model_data_final[['y','appmon']]\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_cat_oot_with_y_appmon,"pandas.merge(X_cat_OOT,data_OOT[['y','score_mon']]\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_XGBExp,"pandas.merge(data_OOT,data_OOT_XGBExp_p_score\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_XGBRandom,"pandas.merge(data_OOT,data_OOT_XGBRandom_p_score\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_XGBGrid,"pandas.merge(data_OOT,data_OOT_XGBGrid_p_score\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_XGBHyperopt,"pandas.merge(data_OOT,data_OOT_XGBHyperopt_p_score\
,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT_final_xgboost_yzd_yyq_with_y,"pandas.merge(data_OOT_final_xgboost_yzd_yyq\
,data_OOT[['y']],left_index=True,right_index=True)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
summary,"pandas.read_excel(os.path.join(Result_path,'all_variables_summary.xlsx')",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgb_importance_Exp,pandas.read_excel(Result_path+'/demo_xgbXGBExp模型变量重要性排序.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgb_importance_Grid,pandas.read_excel(Result_path+'/demo_xgbXGBGrid模型变量重要性排序.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgb_importance_Random,pandas.read_excel(Result_path+'/demo_xgbXGBRandom模型变量重要性排序.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
var_dict,pandas.read_excel('/Users/pintec/Nextcloud/Data_Science/分析文件/modeling/new_demo_data/B_v3_var_dict_PINTEC.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
xgb_importance_Hyperopt,pandas.read_excel(Result_path+'/demo_xgbXGBHyperopt模型变量重要性排序.xlsx'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
model_data_final['y'],"numpy.where(model_data_final.d_y_hismaxdpd>=30,1,0)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
data_OOT['y'],"numpy.where(data_OOT.d_y_hismaxdpd>=30,1,0)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
"train_apply,test_apply","sklearn.model_selection.train_test_split(model_data_final.index,test_size=0.30,random_state=43)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
df,"pandas.read_csv(os.path.join('..','..','07','datasets','zillow-07-start.csv')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(os.path.join('..','datasets','advertising.csv')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(os.path.join('..','..','07','datasets','zillow-07-start.csv')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
q_table,"numpy.zeros([env.observation_space_n,env.action_space_n])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
action,numpy.argmax(q_table[stateid]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
end_time,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
r,"random.randint(1,100)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
resultado,"numpy.zeros((columnas2,renglones1)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
resultado,"numpy.zeros((columnas2,renglones1)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
columnas1,"numpy.size(matriz1,1)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
columnas2,"numpy.size(matriz2,1)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
renglones1,"numpy.size(matriz1,0)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
renglones2,"numpy.size(matriz2,0)",CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
lY,numpy.ceil(renglones1/2),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
lX,numpy.ceil(columnas2/2),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
tiempoInicio,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
tiempoInicio,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
cm_data,"pandas.DataFrame(cm,index=classNames,
columns=classNames)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
filtered_data,"pandas.read_sql_query(""""""SELECT*FROMReviewsWHEREScore!=3"""""",con)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
display,"pandas.read_sql_query(""""""
SELECTUserId,ProductId,ProfileName,Time,Score,Text,COUNT(*)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
display,"pandas.read_sql_query(""""""
SELECT*
FROMReviews
WHEREScore!=3ANDUserId=""AR5J8UI46CURR""
ORDERBYProductID
"""""",con)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
display,"pandas.read_sql_query(""""""
SELECT*
FROMReviews
WHEREScore!=3ANDId=44737ORId=64422
ORDERBYProductID
"""""",con)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_vec,numpy.zeros(50),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_vec,numpy.zeros(50),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
cm,"sklearn.metrics.confusion_matrix(actual_labels,predict_labels)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"fpr,tpr,threshold","sklearn.metrics.roc_curve(y_train,prob_train[:,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"fpr,tpr,threshold","sklearn.metrics.roc_curve(y_cv,prob_cv[:,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"fpr_train,tpr_train,threshold","sklearn.metrics.roc_curve(y_train,prob_train[:,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"fpr_test,tpr_test,threshold","sklearn.metrics.roc_curve(y_test,prob_test[:,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_BF_BOW,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_BF_TF_IDF,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_BF_AVG_W2V,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_BF_TF_IDF_W2V,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_KDT_BOW,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_KDT_TF_IDF,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_KDT_AVG_W2V,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
auc_KNN_KDT_TF_IDF_W2V,"sklearn.metrics.auc(fpr_test,tpr_test)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_0,"re.sub(r""http\S+"","""",sent_0)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_1000,"re.sub(r""http\S+"","""",sent_1000)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_150,"re.sub(r""http\S+"","""",sent_1500)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_4900,"re.sub(r""http\S+"","""",sent_4900)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""won't"",""willnot"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""can\'t"",""cannot"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""n\'t"",""not"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'re"",""are"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'s"",""is"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'d"",""would"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'ll"",""will"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'t"",""not"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'ve"",""have"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
phrase,"re.sub(r""\'m"",""am"",phrase)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_0,"re.sub(""\S*\d\S*"","""",sent_0)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sent_1500,"re.sub('[^A-Za-z0-9]+','',sent_1500)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sentance,"re.sub(r""http\S+"","""",sentance)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sentance,"re.sub(""\S*\d\S*"","""",sentance)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
sentance,"re.sub('[^A-Za-z]+','',sentance)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"data_train_BF,data_test_BF,scores_train_BF,scores_test_BF","sklearn.model_selection.train_test_split(data_BF,scores_BF,test_size=0.2,random_state=1)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"data_train_BF,data_cv_BF,scores_train_BF,scores_cv_BF","sklearn.model_selection.train_test_split(data_train_BF,scores_train_BF,test_size=0.25,random_state=1)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"data_train_KDT,data_test_KDT,scores_train_KDT,scores_test_KDT","sklearn.model_selection.train_test_split(data_KDT,scores_KDT,test_size=0.2,random_state=1)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
"data_train_KDT,data_cv_KDT,scores_train_KDT,scores_cv_KDT","sklearn.model_selection.train_test_split(data_train_KDT,scores_train_KDT,test_size=0.25,random_state=1)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
knn,"sklearn.neighbors.KNeighborsClassifier(algorithm=alg,n_neighbors=k)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
knn,"sklearn.neighbors.KNeighborsClassifier(algorithm=alg,n_neighbors=optimal_k)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_4
response,"requests.get(image_path,stream=True)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
summary,"pandas.concat([gp,ar],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('../data/gp_grid_parkslope.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data['DATETIME'],pandas.to_datetime(data['DATETIME']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
return_volatility_1,"numpy.std(returnAll.ix[:,:,'Log_Return1'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
return_volatility_2,"numpy.std(returnAll.ix[:,:,'Log_Return2'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dat.Share[index2],numpy.floor(dat.Position[index1]*(1-percent),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tempYear,pandas.DatetimeIndex(dictYears[yr]),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dateRange,pandas.DatetimeIndex(dateRange),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../ETF.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
date,pandas.to_datetime(df.Ticket),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
im,numpy.array(im),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
prediction,"numpy.argmax(logits,1)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
self.trees,"numpy.zeros(self.size,dtype=bool)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.fires,numpy.zeros((self.size),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fires,"numpy.zeros((self.size[0]+2,self.size[1]+2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
PopulationTaxes,numpy.zeros((N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
l_vec,numpy.empty(N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
c_vec,numpy.empty(N),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
w_vec,"numpy.linspace(0.5,1.5,N)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
sol_case3,"scipy.optimize.minimize(
value_of_choice_tax,initial_guess,method='Nelder-Mead',args=(PopulationWage,e,v,m)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
solution,"scipy.optimize.minimize_scalar(labor_supply,method='bounded',\
bounds=(0,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
fig,"matplotlib.pyplot.figure(figsize=(10,4)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
"fig,(axes_technical,axes_volume,axes_macd,axes_ohlc)","matplotlib.pyplot.subplots(4,1,figsize=(16,16)",CLUSTER_8,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
Dataset,"collections.namedtuple('Dataset','exchangedf')",CLUSTER_8,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start_date,"datetime.datetime(2017,11,1)",CLUSTER_8,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
end_date,"datetime.datetime(2017,12,31)",CLUSTER_8,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
news_time,time.mktime(news_time),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,time.mktime(news_time),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
three_oclock,time.mktime(three_oclock),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
five_oclock,time.mktime(five_oclock),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,time.mktime(news_time),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,time.mktime(news_time),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
today,"time.strftime(""%Y/%m/%d"",time.localtime()",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,"time.strptime(news_time,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,"time.strptime(news_time,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
three_oclock,"time.strptime(three_oclock,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
five_oclock,"time.strptime(five_oclock,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,"time.strptime(news_time,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
news_time,"time.strptime(news_time,""%Y/%m/%d%H:%M:%S"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
now,time.time(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
now,datetime.datetime.now(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
delta,datetime.timedelta(days=3),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
leftDegMin,"numpy.array([-90,-90,-150,0,-90,-90,-90])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
leftDegMax,"numpy.array([90,70,150,120,90,90,90])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
rightDegMin,"numpy.array([-90,-90,-150,0,-90,-90,-90])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
rightDegMax,"numpy.array([90,70,150,120,90,90,90])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
efP,"numpy.asarray([efP.x,efP.y,efP.z])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
efE,numpy.asarray(efE),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
jointAngles,numpy.zeros(len(cAngles),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
J_plus,"numpy.zeros((num_parameters,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
J_minus,"numpy.zeros((num_parameters,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
gradapprox,"numpy.zeros((num_parameters,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Z1,"numpy.dot(W1,X)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Z2,"numpy.dot(W2,A1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Z3,"numpy.dot(W3,A2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
logprobs,numpy.multiply(-np.log(A3),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
submission,"pandas.DataFrame({'Id':Id,
'SalePrice':predictions})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
housing,pandas.read_csv(path+'train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
housing_test,pandas.read_csv(path+'test.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sample_submission,pandas.read_csv(path+'sample_submission.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_rmsle,"numpy.sqrt(mean_squared_log_error(y_train_poly,y_pred_train)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
valid_rmsle,"numpy.sqrt(mean_squared_log_error(y_valid_poly,y_pred_valid)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X,y,
random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_poly,X_valid_poly,y_train_poly,y_valid_poly","sklearn.model_selection.train_test_split(X_poly,y,
random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
polyreg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
polyreg_lasso,sklearn.linear_model.Lasso(alpha=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.Lasso(alpha=alpha),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
polyreg_ridge,sklearn.linear_model.Ridge(alpha=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.Ridge(alpha=alpha),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
polyreg_elasticnet,sklearn.linear_model.ElasticNet(alpha=200),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.ElasticNet(alpha=alpha),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.ElasticNet(alpha=2000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
poly,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(""./data/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
new_data,"pandas.DataFrame(index=range(0,len(ibkr_data)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
cfg_data,"pandas.read_sql_query('select*fromcfg_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
ms_data,"pandas.read_sql_query('select*fromms_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
cme_data,"pandas.read_sql_query('select*fromcme_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
jpm_data,"pandas.read_sql_query('select*fromjpm_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
gs_data,"pandas.read_sql_query('select*fromgs_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
pypl_data,"pandas.read_sql_query('select*frompypl_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
td_data,"pandas.read_sql_query('select*fromtd_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
brk_data,"pandas.read_sql_query('select*frombrk_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
usb_data,"pandas.read_sql_query('select*fromusb_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
ibkr_data,"pandas.read_sql_query('select*fromibkr_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
axp_data,"pandas.read_sql_query('select*fromaxp_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
tech_data,"pandas.read_sql_query('select*fromtech_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
spx_data,"pandas.read_sql_query('select*fromspx_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
dow_data,"pandas.read_sql_query('select*fromdow_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
nasdaq_data,"pandas.read_sql_query('select*fromnasdaq_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
vix_data,"pandas.read_sql_query('select*fromvix_data',con=engine)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
ibkr_data['Date'],"pandas.to_datetime(ibkr_data.Date,format='%Y-%m-%d')",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
"x_train,y_train",numpy.array(x_train),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
X_test,numpy.array(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
all_mid_data,"numpy.concatenate([train_data,test_data],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
x_train,"numpy.reshape(x_train,(x_train.shape[0],x_train.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
X_test,"numpy.reshape(X_test,(X_test.shape[0],X_test.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
rms,numpy.sqrt(np.mean(np.power((valid-closing_price),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
currentdir,os.getcwd(),CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
form_raw,"pandas.read_excel(in_path+'FormAdmission.xls',
usecols=[2,3,11],
converters={'form_number':str})",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
student_raw,"pandas.read_excel(in_path+'Student.xls',
usecols=[0,7,15,18])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
major_raw,"pandas.read_excel(in_path+'Major.xls',
usecols=[0,1,7],
converters={'major_code':str})",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
gender_raw,"pandas.read_excel(in_path+'Gender.xls',
usecols=[1,3,4])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
school_raw,"pandas.read_excel(in_path+'SchoolMaster.xls',
usecols=[0,4,10,13])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
curriculum_raw,"pandas.read_excel(in_path+'Curriculum.xls',
usecols=[0,3])",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_14,CLUSTER_0
x,"numpy.linspace(-1,5,num=30)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.plot(x,f(x)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
counties_scaled,pandas.DataFrame(scaler.fit_transform(clean_counties_df.astype(float),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,pandas.DataFrame(pca_model_params['s'].asnumpy(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
v,pandas.DataFrame(pca_model_params['v'].asnumpy(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
comps,"pandas.DataFrame(list(zip(v_1,features_list)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
counties_transformed,pandas.DataFrame(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cluster_df,pandas.DataFrame(cluster_labels),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cluster_centroids,pandas.DataFrame(kmeans_model_params[0].asnumpy(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
counties_df,"pandas.read_csv(data_stream,header=0,delimiter="","")",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
v_1,numpy.squeeze(v_1_row.values),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
exp_variance,"numpy.square(s.iloc[start_idx:,:])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.hist(clean_counties_df[column_name],bins=n_bins)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.hist(clean_counties_df[column_name],bins=n_bins)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.hist(cluster_labels,bins=8,range=(-0.5,7.5)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplots(figsize=(6,3)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplots(figsize=(6,3)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplots(figsize=(6,3)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(data=sorted_weight_data,
x=""weights"",
y=""features"",
palette=""Blues_d"")",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(cluster_centroids.T,cmap='YlGnBu')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
text,"re.sub('<[^>]*>','',text)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
text,"re.sub('[\W]+','',text.lower()",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
emoticons,re.findall('(?::|;|=),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
x,"numpy.arange(-5.0,5.0,0.1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-5.0,5.0,0.1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-5.0,5.0,0.1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([-1,1,2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([-1.0,1.0,2.0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
X,"numpy.array([1,2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
W,"numpy.array([[1,3,5],[2,4,6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
X,"numpy.array([1.0,0.5])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
W1,"numpy.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
B1,"numpy.array([0.1,0.2,0.3])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
W2,"numpy.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
B2,"numpy.array([0.1,0.2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
W3,"numpy.array([[0.1,0.3],[0.2,0.4]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
B3,"numpy.array([0.1,0.2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['W1'],"numpy.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['b1'],"numpy.array([0.1,0.2,0.3])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['W2'],"numpy.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['b2'],"numpy.array([0.1,0.2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['W3'],"numpy.array([[0.1,0.3],[0.2,0.4]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
network['b3'],"numpy.array([0.1,0.2])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([1.0,0.5])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([0.3,2.9,4.0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([1010,1000,990])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([1010,1000,990])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([0.3,2.9,4.0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([1,2,3,4,5])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.array([[0.1,0.8,0.1],[0.3,0.1,0.6],[0.2,0.5,0.3],[0.8,0.1,0.1]])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,"numpy.array([1,2,1,0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
t,"numpy.array([1,2,0,0])",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
Y,"numpy.dot(X,W)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
A1,"numpy.dot(X,W1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
A2,"numpy.dot(Z1,W2)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
A3,"numpy.dot(Z2,W3)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a1,"numpy.dot(x,W1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a2,"numpy.dot(z1,W2)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a3,"numpy.dot(z2,W3)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a1,"numpy.dot(x,W1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a2,"numpy.dot(z1,W2)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
a3,"numpy.dot(z2,W3)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
p,numpy.argmax(y),CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
p,"numpy.argmax(y_batch,axis=1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,"numpy.argmax(x,axis=1)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
accuracy_cnt+,numpy.sum(p==t[i:i+batch_size]),CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,numpy.exp(a),CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
y,numpy.exp(a-c),CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-5.0,5.0,100)",CLUSTER_7,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
pts,"numpy.array([[10,50],[400,50],[90,200],[50,500]],np.int32)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image_bw,"numpy.zeros((512,512)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
image,"numpy.zeros((512,512,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_train,numpy.array(images_data),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
im,"numpy.expand_dims(im,axis=0)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
rnd_idx,"random.sample(rnd_idx,len(rnd_idx)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
t1,time.time(),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
t2,time.time(),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
qHash,sklearn.preprocessing.normalize(qHash),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
queryHash,sklearn.preprocessing.normalize(queryHash),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_15,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
error_df_test,"pandas.DataFrame({'Reconstruction_error':mse,
'True_class':test['cc_onset']})",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pred_y_test,pandas.DataFrame(pred_y_test),CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
actual_pred,"pandas.merge(test2,error_df_test,how='left',on=['index'])",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('/Users/yaredhurisa/GoogleDrive/Probabilityofconflict/indicators/eth_cc_final_dataset_1_month_lag.csv'),CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mse,"numpy.mean(np.power(df_test_x_rescaled-test_x_predictions,2)",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
conf_matrix,"sklearn.metrics.confusion_matrix(error_df_test.True_class,pred_y_test)",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
roc_auc,"sklearn.metrics.auc(false_pos_rate,true_pos_rate,)",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"false_pos_rate,true_pos_rate,thresholds","sklearn.metrics.roc_curve(error_df_test.True_class,error_df_test.Reconstruction_error)",CLUSTER_4,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xs,"numpy.arange(0,1,step=0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
final_one_hot_df,"pandas.get_dummies(final_df,columns=['product_category_name_english','order_purchase_year_month','customer_state'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
orders_df,pandas.read_csv('data/olist_orders_dataset.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
order_items_df,pandas.read_csv('data/olist_order_items_dataset.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
products_df,pandas.read_csv('data/olist_products_dataset.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
product_cat_name_df,pandas.read_csv('data/product_category_name_translation.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
customers_df,pandas.read_csv('data/olist_customers_dataset.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
orders_df['order_purchase_timestamp'],"pandas.to_datetime(orders_df['order_purchase_timestamp'],format=""%Y-%m-%d%H:%M:%S"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x_train,"pandas.DataFrame(x_train_np,index=indexs_train,columns=x_train.columns)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
x_test,"pandas.DataFrame(x_test_np,index=indexs_test,columns=x_test.columns)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_pred,"pandas.DataFrame(y_pred,columns=y_test.columns.values)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_pred,"pandas.DataFrame(y_pred,columns=y_test.columns.values)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_pred,"pandas.DataFrame(y_pred,columns=y_test.columns.values)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
score_df,"pandas.DataFrame({'knn':score_knn,
'tree':score_tree,
'rf':score_rf,
'unweightedlogistic':score_unweighted_log,
'weightedlogistic':score_weighted_log,
'lda':score_lda,
'qda':score_qda,
'weightedsvm':score_svm},index=['f1_score'])",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
genre_pred,pandas.DataFrame(index=x_test.index),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
x_test,"pandas.read_csv('x_test.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
x_train,"pandas.read_csv('x_train.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_test,"pandas.read_csv('y_test.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
y_train,"pandas.read_csv('y_train.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
score+,"sklearn.metrics.f1_score(genre_real[genre_real.columns.values[i]],genre_predict[genre_predict.columns.values[i]])",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
score,"sklearn.metrics.f1_score(y_predict,y_true)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
unweighted_logistic,sklearn.linear_model.LogisticRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
weighted_logistic,sklearn.linear_model.LogisticRegression(class_weight='balanced'),CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
weighted_logistic,"sklearn.linear_model.LogisticRegression(class_weight='balanced',C=10**i)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
weighted_logistic,"sklearn.linear_model.LogisticRegression(class_weight='balanced',C=C_best)",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
svm,"sklearn.svm.SVC(C=5,class_weight='balanced')",CLUSTER_28,CLUSTER_2,CLUSTER_9,CLUSTER_9,CLUSTER_0
train,pandas.read_csv('/Users/datascientistenthusiat/Desktop/DATASCIENCEPROJECT/SalingPricePredictions/train.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('/Users/datascientistenthusiat/Desktop/DATASCIENCEPROJECT/SalingPricePredictions/test.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,numpy.zeros(num_agents),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
scores,numpy.zeros(num_agents),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
actions,"numpy.clip(actions,-1,1)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
start,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
end,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
experiences,"random.sample(self.memory,k=self.batch_size)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.seed,random.seed(random_seed),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.seed,random.seed(seed),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.seed,random.seed(seed),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.experience,"collections.namedtuple(""Experience"",field_names=[""state"",""action"",""reward"",""next_state"",""done""])",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
self.memory,collections.deque(maxlen=buffer_size),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
scores_deque,collections.deque(maxlen=print_every),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_28,CLUSTER_1
df,"pandas.read_csv(""new_data.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf1,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",random_state=95825)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=C,random_state=95825)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf2,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=best_C,random_state=95825)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf3,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf4,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=grid.best_params_)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
param_values,"numpy.arange(5,90,5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cross_val_score,numpy.mean(nums),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cross_val_score,numpy.mean(nums),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cross_val_score,numpy.mean(nums),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cross_val_score,numpy.mean(nums),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
param_values,"numpy.logspace(-4,2,10)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
param_values,"numpy.linspace(0.04,1,num=20)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_validate(clf,X_train,y_train,cv=num_folds,return_train_score=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_validate(clf,X_train,y_train,cv=num_folds,return_train_score=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_validate(clf,X_train,y_train,cv=num_folds,return_train_score=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_validate(knn_model,X_train,y_train,cv=num_folds,return_train_score=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.BaggingClassifier(base_estimator=clf3,n_estimators=num_trees,max_features=m,random_state=95828)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model_new,"sklearn.ensemble.BaggingClassifier(base_estimator=clf4,n_estimators=num_trees,max_features=m,random_state=95828)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(model,param_grid,cv=5,scoring='accuracy')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
LogReg,"sklearn.linear_model.LogisticRegression(penalty='l1',C=1e10)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(penalty='l1',C=C)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
LogReg_regularized,"sklearn.linear_model.LogisticRegression(penalty='l1',C=best_C,)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
k_fold,sklearn.model_selection.KFold(num_folds),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
k_fold,sklearn.model_selection.KFold(num_folds),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
k_fold,sklearn.model_selection.KFold(num_folds),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.LinearSVC(C=C),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_SVM,sklearn.svm.LinearSVC(C=C),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
knn_model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=C),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_KNN,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x_1,"numpy.arange(-np.pi,np.pi,1E-2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_1d,"numpy.array([1,2,3,4])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_2d,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_3d,"numpy.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
my_array_2d,"numpy.array([[],[]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
my_array_3d,"numpy.array([[[],[]]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_3d,"numpy.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12.0]]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_2d,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_3d,"numpy.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr_2d,"numpy.array([[1,2],[3,4],[5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.reshape(range(1,13)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.reshape(range(1,13)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
B,"numpy.reshape(range(1,13)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
C,"numpy.reshape(range(1,17)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-np.pi,np.pi,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,1,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(0,1,3)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xgrid,numpy.linspace(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"x,y","numpy.meshgrid(x,y,indexing='xy')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
p,numpy.poly1d(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,numpy.polyfit(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sample,math.log(random.math.lognormal(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(1,figsize=(10,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(2,figsize=(10,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
html_doc,requests.get(url),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
html_doc,requests.get(url_main_list[i]),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
html_doc,"requests.get(url_list[i],headers=header)",CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
doc,requests.get(url),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
tmp,requests.get(reply_url_list[i]),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
tmp1,"re.sub('[a-zA-Z/]','',cate[i].get('href')",CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
cate,pandas.DataFrame(),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
content_table,pandas.DataFrame(tmp_dict),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
comment_table,pandas.DataFrame(tmp_dict),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
reply_table,pandas.DataFrame(tmp_dict),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
start,datetime.datetime.now(),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
end,datetime.datetime.now(),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
tmp,json.loads(doc),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
tmp,json.loads(tmp),CLUSTER_24,CLUSTER_9,CLUSTER_2,CLUSTER_33,CLUSTER_1
username,"os.getenv('AZUREML_DSVM_USERNAME',default='<my_username>')",CLUSTER_29,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_1
address,"os.getenv('AZUREML_DSVM_ADDRESS',default='<ip_address_or_fqdn>')",CLUSTER_29,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_1
training_data,sklearn.datasets.load_diabetes(),CLUSTER_29,CLUSTER_1,CLUSTER_6,CLUSTER_0,CLUSTER_1
res_df,"pandas.DataFrame({'Features':feat,'Importance':feat_imp})",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(DIR+'/OnlineNewsPopularity.csv'),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(50,50)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_scaled,y,test_size=0.2,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,sklearn.preprocessing.StandardScaler(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_train_histogram,numpy.array(x_train_histogram),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
x_test_histogram,numpy.array(x_test_histogram),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
x_train_hog,numpy.array([hog(x),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
x_test_hog,numpy.array([hog(x),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
bins,numpy.int32(bin_n*ang/(2*np.pi),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
hist,numpy.hstack(hists),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
current_seq,"numpy.roll(current_seq,-1,1)",CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_seq,"numpy.full((1,sequence_length)",CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
word_counts,collections.Counter(text),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
gd_df,"pandas.DataFrame(columns=['m_current','c_current','cost'])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
gdm_df,"pandas.DataFrame(columns=['Bets','cost'])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
housing,"pandas.concat([housing,status],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
status,"pandas.get_dummies(housing['furnishingstatus'],drop_first=True)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
housing,pandas.read_csv('Housing.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,numpy.array(X),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,numpy.array(y),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,numpy.array(X),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,numpy.array(y),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,"numpy.array([[-1,-1],[-2,-1],[1,1],[2,1]])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
Y,"numpy.array([1,1,2,2])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(X.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
theta,"numpy.matrix(np.array([0,0,0])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.SGDClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
auto,pandas.read_csv('auto_mpg.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.array([auto_disp,auto_weight])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.array([auto_mpg]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_disp,numpy.mean(auto_disp),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(auto_disp,\
auto_mpg,\
test_size=0.2,\
random_state=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,\
y,\
test_size=0.2,\
random_state=4)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,numpy.genfromtxt('data.dat'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dateString,"time.strftime(""Y%YM%mD%d"")",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
timeString,"time.strftime(""UTC%H:%M"")",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
file_df,pandas.read_csv(file),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
stress,"k.stress_vals(p=numpy.arange(1,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress2,"k.stress_vals(p=numpy.arange(1,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress,"k.stress_vals(p=numpy.arange(1,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress2,"k.stress_vals(p=numpy.arange(1,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress,"k.stress_vals(p=numpy.arange(1,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stress,"k.stress_vals(p=numpy.arange(1,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D_inf,"numpy.zeros((n,n)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D,numpy.sqrt(noisy_dist_mat_kde),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"D_inf[i,j]","numpy.linalg.norm(X[i,:]-X[j,:])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D_9,sklearn.metrics.pairwise_distances(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D_s,sklearn.metrics.pairwise_distances(rw_obj.stations),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D_c,sklearn.metrics.pairwise_distances(base_config),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D,sklearn.metrics.pairwise_distances(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lm,"scipy.stats.linregress(x,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"defa(x,y",time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
cm_df,"pandas.DataFrame(
cm,index=[""Actual0"",""Actual1""],columns=[""Predicted0"",""Predicted1""]
)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
df_loans,pandas.read_csv(file_path),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=78)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train2,X_test2,y_train2,y_test2","sklearn.model_selection.train_test_split(X,y,random_state=78,train_size=0.80)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
cm,"sklearn.metrics.confusion_matrix(y_test,predictions)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
acc_score,"sklearn.metrics.accuracy_score(y_test,predictions)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('TUGAS3_AOK.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(20,20)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,numpy.arange(salient_not_cars_train_x.shape[0]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
mean_values,numpy.array(mean_values),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
not_cars,numpy.where(y_train!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
not_cars,numpy.where(y_test!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_not_cars,numpy.where(y_train!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_not_cars,numpy.where(y_train!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_cars,numpy.where(y_train==1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_not_cars,numpy.where(y_test!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices_not_cars,numpy.where(y_test!=1),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
salient_not_cars_train_x,"numpy.concatenate((x_train,fragmented_saliency,fragmented_saliency_not_cars_x_train)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
salient_not_cars_train_y,"numpy.concatenate((y_train,fragmented_saliency_y_train,not_cars_y_train)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
car_train,"numpy.concatenate((x_train,fragmented_saliency)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
combined_y_train,"numpy.concatenate((y_train,fragmented_saliency_y_train)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
fragmented_saliency_y_train,"numpy.ones((fragmented_saliency.shape[0],1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
ref,"numpy.ones((32,32,3)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
indices,"numpy.argpartition(flat,-n)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
exp,"numpy.clip(exp/np.percentile(exp,99.5)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
exp,"numpy.clip(exp/np.percentile(exp,99.99)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
exp,"numpy.clip(exp/np.percentile(exp,99.99)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x,"numpy.clip(x,0,1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x,"numpy.clip(x,0,255)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
actual_labels,numpy.copy(y_train),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
img,numpy.copy(x_train[ind]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
img,numpy.copy(not_cars_x_train[ind]),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
threshold,"numpy.percentile(exp,95)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
threshold,"numpy.percentile(exp,95)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x_train,"numpy.delete(x_train,not_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
y_train,"numpy.delete(y_train,not_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x_test,"numpy.delete(x_test,not_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
y_test,"numpy.delete(y_test,not_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
rows_to_delete,"numpy.delete(indices_not_cars,np.s_[0:4500],axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
x_train,"numpy.delete(x_train,rows_to_delete,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
y_train,"numpy.delete(y_train,rows_to_delete,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
not_cars_x_train,"numpy.delete(x_train,indices_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
not_cars_y_train,"numpy.delete(y_train,indices_cars,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
ref,"numpy.expand_dims(ref,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
df,"pandas.DataFrame(
{'Tokens':CDS,
'SES':SES,
})",CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
p,"seaborn.boxplot(y='Tokens',x='SES',
data=df,
width=0.5,
palette=""YlOrBr"")",CLUSTER_8,CLUSTER_10,CLUSTER_12,CLUSTER_0,CLUSTER_0
txts,"os.listdir("".\Data3"")",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
df1,"pandas.melt(NDCI_raw,id_vars=['system:time_start'],var_name='Lake',value_name='Reflectance')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df2,"pandas.melt(rgb_raw,id_vars=['system:time_start'],var_name='Lake',value_name='Reflectance')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df3,"pandas.melt(nirSWIR_raw,id_vars=['system:time_start'],var_name='Lake',value_name='Reflectance')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df4,"pandas.melt(blueGreen_raw,id_vars=['system:time_start'],var_name='Lake',value_name='Reflectance')",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
NDCI_raw,"pandas.read_csv('NDCI.csv',low_memory=False)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rgb_raw,"pandas.read_csv('rgb.csv',low_memory=False)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
blueGreen_raw,"pandas.read_csv('blueGreen.csv',low_memory=False)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
nirSWIR_raw,"pandas.read_csv('nirSWIR.csv',low_memory=False)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,2)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(2,2)",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(len(data.columns),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(len(data.columns),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
source,requests.get(url),CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(data,columns=['Postcode','Borough','Neighbourhood'])",CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df3,"pandas.merge(df2,lat_lon,on='Postcode')",CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
lat_lon,pandas.read_csv('https://cocl.us/Geospatial_data'),CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(k),CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2['Neighbourhood'],"numpy.where(df2['Neighbourhood']=='Notassigned',df2['Borough'],df2['Neighbourhood'])",CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=k,random_state=0)",CLUSTER_27,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
Day_cos,pandas.DataFrame(columns=['Day_x']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Day_sin,pandas.DataFrame(columns=['Day_y']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
D_cos,pandas.DataFrame([np.cos((day-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
D_sin,pandas.DataFrame([np.sin((day-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_3,"pandas.concat([data_3,Month_cos,Month_sin],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_3,"pandas.concat([data_3,Day_cos,Day_sin],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_3,"pandas.concat([data_3,High_3,High_2,High_1,Low_3,Low_2,Low_1],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('./CU_weather_data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
label_High,numpy.array(data_3['HighTemperature']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_High,"numpy.array(data_3[['Precipitation','Snowfall','Month_x','Month_y','Day_x','Day_y','High_3','High_2','High_1']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
label_Low,numpy.array(data_3['LowTemperature']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_Low,"numpy.array(data_3[['Precipitation','Snowfall','Month_x','Month_y','Day_x','Day_y','Low_3','Low_2','Low_1']])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Month_cos,numpy.cos((data_3.Month-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Month_sin,numpy.sin((data_3.Month-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
RF,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,random_state=6)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pandas,"pandas.read_table(""swissmetro.dat"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
pixcrd,"numpy.array([r[""ra""],r[""dec""],])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.zeros(nstar),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.zeros(nstar),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
flux,numpy.zeros(nstar),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
indmax,numpy.argmax(image),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean,numpy.mean(data),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sigma,numpy.std(data),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"y[i],x[i]","numpy.unravel_index(indmax,image.shape)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
median,numpy.median(data),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_X,"numpy.asarray([3.3,4.4,5.5,6.71,6.93,4.168,9.779,6.182,7.59,2.167,7.042,10.791,5.313,7.997,5.654,9.27,3.1])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_y,"numpy.asarray([1.7,2.76,2.09,3.19,1.694,1.573,3.366,2.596,2.53,1.221,2.827,3.465,1.65,2.904,2.42,2.94,1.3])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_X,"numpy.asarray([6.83,4.668,8.9,7.91,5.7,8.7,3.1,2.1])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_y,"numpy.asarray([1.84,2.273,3.2,2.831,2.92,3.24,1.35,1.03])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
k2,pandas.DataFrame(k2),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=42,stratify=y)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
classifier,sklearn.naive_bayes.GaussianNB(),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test,y_predicted)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
f1,"sklearn.metrics.f1_score(y_test,y_predicted,average='weighted')",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
precision,"sklearn.metrics.precision_score(y_test,y_predicted,average='weighted')",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_predicted,average='weighted')",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
training_set,pandas.read_csv('/home/ryad/Bureau/Project-EDF-Lab-master/Google_Stock_Price_Train.csv'),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
action_set,numpy.arange(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
loss_approx,numpy.zeros(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
regret,numpy.zeros(T),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
somme,numpy.zeros(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p,numpy.ones(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X_train,"numpy.around(training_set[:1257,0],decimals=d)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
H,numpy.eye(N),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
L,numpy.eye(N),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
K,numpy.eye(N),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p[j],math.exp(-learning_rate*loss_approx[j]),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
learning_rate,math.sqrt(8*math.log(n),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_3,"pandas.concat([df_1,isomerase,ligase])",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
df3,"pandas.merge(df1,df2,on=['structureId','macromoleculeType','residueCount'])",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
df1,pandas.read_csv('pdb_data_no_dups.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
df2,pandas.read_csv('pdb_data_seq.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
isomerase,pandas.read_csv('uniprot-isomerase.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
ligase,pandas.read_csv('uniprot-ligase.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(actual,predictions)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_18,CLUSTER_0
video,"numpy.array([10.5,5.2,3.25,7.0])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
u,"numpy.array([2,5])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
v,"numpy.array([3,1])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,"numpy.array([1,2,8])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
b,"numpy.array([5,6,3])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
t1,"numpy.array([2,0.25])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
t2,"numpy.array([2.5,3.5])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
t3,"numpy.array([1,2])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
A,"numpy.array([
[10,20,30],
[40,50,60]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
D,"numpy.array([
[1,2,3],
[4,5,6],
[7,8,9],
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
B,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
C,"numpy.array([[100,200,300],[400,500,600]])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
D,"numpy.array([
[2,3,5,7],
[11,13,17,19],
[23,29,31,37]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F,"numpy.array([
[5,2],
[4,1],
[9,3]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
G,"numpy.array([
[8,7,4,2,5],
[2,5,1,0,5],
[9,11,17,21,0],
[0,1,0,1,2]])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
u_row,numpy.array([u]),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
P,"numpy.array([
[3.0,4.0,1.0,4.6],
[0.2,3.5,2.0,0.5]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
H,"numpy.array([
[0.5,-0.2,0.2,-0.1],
[0.4,0.4,1.5,0.6]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
H2,"numpy.array([
[-0.5,-0.5,-0.5,-0.5],
[0.4,0.4,0.4,0.4]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
U,"numpy.array([[1,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
U_30,numpy.array([[np.cos(angle30),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
V,"numpy.array([
[np.cos(angle30)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_shear,"numpy.array([
[1,1.5],
[0,1]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
Square,"numpy.array([
[0,0,1,1],
[0,1,1,0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_squeeze,"numpy.array([
[1.4,0],
[0,1/1.4]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_reflect,"numpy.array([
[1,0],
[0,-1]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_inv_shear,"numpy.array([
[1,-1.5],
[0,1]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_project,"numpy.array([
[1,0],
[0,0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_project_30,"numpy.array([
[np.cos(angle30)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_involution,"numpy.array([
[0,-2],
[-1/2,0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
M,"numpy.array([
[1,2,3],
[4,5,6],
[7,8,0]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_scale,"numpy.array([
[0.5,0],
[0,0.5]
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
D,"numpy.array([
[100,200,300],
[10,20,30],
[1,2,3],
])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
S,numpy.diag(S_diag),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
subplot3d,"matplotlib.pyplot.subplot(111,projection='3d')",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
subplot3d,"matplotlib.pyplot.subplot(111,projection='3d')",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"eigenvalues,eigenvectors",numpy.linalg.eig(F_squeeze),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"eigenvalues2,eigenvectors2",numpy.linalg.eig(F_shear),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
F_inv_shear,numpy.linalg.inv(F_shear),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
LA.inv(F_shear.dot(F_squeeze)),=numpy.linalg.inv(F_squeeze),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
radius,numpy.linalg.norm(u),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
"U,S_diag,V_T",numpy.linalg.svd(F_shear),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
df_obj1,"pandas.DataFrame({""x"":np.random.randn(500)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_obj2,"pandas.DataFrame({""x"":np.random.randn(500)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
dataset,"seaborn.load_dataset(""tips"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
exercise,seaborn.load_dataset('exercise'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pi,numpy.ndarray(n),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
circle1,"matplotlib.pyplot.Circle((0,0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.gcf(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
movies,pandas.read_csv('movies_clean.csv'),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
reviews,pandas.read_csv('reviews_clean.csv'),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
movie_content,"numpy.array(movies.iloc[:,4:])",CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
similar_movies,"numpy.array(movies.iloc[similar_idxs,]['movie'])",CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
movies_temp,numpy.array(reviews_temp['movie_id']),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
movie_names,numpy.array(get_movie_names(movies_temp),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
movie_idx,numpy.where(movies['movie_id']==movie_id),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
similar_idxs,numpy.where(dot_prod_movies[movie_idx]==np.max(dot_prod_movies[movie_idx]),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
users_who_need_recs,"numpy.setdiff1d(users,users_with_all_recs)",CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_recs,"numpy.setdiff1d(rec_movies,movie_names)",CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
users,numpy.unique(reviews['user_id']),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
recs,collections.defaultdict(set),CLUSTER_5,CLUSTER_3,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
opdf,pandas.DataFrame(output),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
trainingData,pandas.read_csv('training.csv'),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
testingData,pandas.read_csv('testing.csv'),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-5,5,N)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
xfit,"numpy.linspace(-5,5,30)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"theta_best,theta_cov","scipy.optimize.curve_fit(model,x,y,sigma=dy)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.arange(1,T+1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
w,"numpy.arange(start,end)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tau,"numpy.arange(0,T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
xi,"numpy.array([3.5,3.4,3.2,3.3,3.4,3.3,3.4,4.1,3.8,4.0,4.0,4.4,4.2,4.1,3.9,3.9,4.7,5.6,5.1,4.5,4.0,3.4,3.4,3.0])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
c,numpy.array([]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.array(sol['x']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.array(sol['x']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.array(sol['x']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.array(sol['x']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A1,"numpy.zeros((1*W,3*W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A2,"numpy.zeros((1*W,3*W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A3,"numpy.zeros((1*W,3*W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b4,numpy.zeros(3*W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
c,numpy.zeros(3*W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,numpy.zeros(W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
rhc,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"numpy.zeros((W,W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
afhc,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"numpy.zeros((W,W)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
arhc,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_RHC,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
f_RHC,numpy.zeros(end-start),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_AFHC,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
f_AFHC,numpy.zeros(end-start),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_ARHC,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
f_ARHC,numpy.zeros(end-start),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_OPT,numpy.zeros(T),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,"numpy.concatenate((A1,A2)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,"numpy.concatenate((A,A3)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,"numpy.concatenate((A,A4)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"numpy.roll(s,-1,axis=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,"numpy.roll(s,-1,axis=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b2,numpy.ones(W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b3,numpy.ones(W),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
c,"numpy.sum(np.multiply(xi+sigma,np.maximum(demand-solar+x,0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_RHC,"numpy.vstack([x_RHC,rhc])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_AFHC,"numpy.vstack([x_AFHC,afhc])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_ARHC,"numpy.vstack([x_ARHC,arhc])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
solar_extend,"numpy.append(solar,np.zeros(T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
demand_extend,"numpy.append(demand,np.zeros(T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
xi_extend,"numpy.append(xi,np.zeros(T)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b1,"numpy.append(solar_extend[t-1:],solar_extend[:t+W-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,"numpy.append(b1,b2)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,"numpy.append(b,b3)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b,"numpy.append(b,b4)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_rhc,"numpy.append(s0,rhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_rhc,"numpy.append(s0,rhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_afhc,"numpy.append(s0,afhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_afhc,"numpy.append(s0,afhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_arhc,"numpy.append(s0,arhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_arhc,"numpy.append(s0,arhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_rhc,"numpy.append(s0,rhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_afhc,"numpy.append(s0,afhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_arhc,"numpy.append(s0,arhc[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
temp_opt,"numpy.append(s0,x_OPT[:T-1])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
xi,"numpy.tile(xi,T//len(xi)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('processeddata.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
real_df,pandas.DataFrame(real_pred),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
see_final_results,"pandas.DataFrame({'text':text,'content_id':content_ids,'subject':subjects,'sentiment_value':sentiment_values,'sentiment_word':sentiment_words})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
test,pandas.read_csv('../../../data/df_sen_sub/test_public.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,pandas.read_csv('../../../data/df_sen_sub/submit_example.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
tf_df,pandas.DataFrame(tf_df.toarray(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
tf_df,pandas.DataFrame(tf_df.toarray(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
X_pca_df,"pandas.DataFrame(X_pca,columns=['PCA%i'%iforiinrange(n_features)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
neighbors_df,"pandas.DataFrame({'neighbor_id':articles_idx,\
'similarity':eucl_dist_series})",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
similar_result,pandas.Series(similar_result),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
neighbors_df,pandas.Series(similarity),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"neighbors_df[""num_interactions""]",pandas.Series(num_interactions),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
eucl_dist_series,"pandas.Series(eucl_dist_list,index=articles_idx)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_content_new,"pandas.concat([df_cont,tf_df],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_content_new,"pandas.concat([df_cont,tf_df],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_content_new,"pandas.concat([df_cont,X_pca_df],axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df,pandas.read_csv('data/user-item-interactions.csv'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_content,pandas.read_csv('data/articles_community.csv'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
user_item_matrix,pandas.read_pickle('user_item_matrix.p'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
num_latent_feats,"numpy.arange(10,700+10,20)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
num_latent_feats,"numpy.arange(10,570+10,20)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
articles_idx,numpy.array(df_cont['article_id']),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
article_pca,"numpy.array(df_cont[df_cont['article_id']==article_id].iloc[:,1:])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
neigh_pca,numpy.array(col[1:]),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
rec_articles_ids,numpy.array(neighbors_df.index.values),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
similar_result[user],"numpy.dot(user_item.loc[user_id],user_item.loc[user])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
similarity[user],"numpy.dot(user_item.loc[user_id],user_item.loc[user])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
user_item_est,"numpy.around(np.dot(np.dot(u_new,s_new)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
user_item_pred,"numpy.around(np.dot(np.dot(u_train_new,s_train_new)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
err,numpy.sum(numpy.sum(np.abs(diffs),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
test_err,numpy.sum(numpy.sum(np.abs(test_diffs),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
train_err,numpy.sum(numpy.sum(np.abs(train_diffs),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
diffs,"numpy.subtract(user_item_matrix,user_item_est)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
test_diffs,"numpy.subtract(user_item_true_test,user_item_pred_test)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
train_diffs,"numpy.subtract(user_item_train,user_item_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"s_new,u_new,vt_new",numpy.diag(s[:k]),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"s_train_new,u_train_new,vt_train_new",numpy.diag(s_train[:k]),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
eucl_dist,numpy.linalg.norm(article_pca-neigh_pca),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"u,s,vt",numpy.linalg.svd(user_item_matrix),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"u_train,s_train,vt_train",numpy.linalg.svd(user_item_train),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
ax,matplotlib.pyplot.subplot(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=n_features),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
text,"re.sub(r""[^a-zA-Z0-9]"","""",text.lower()",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
balance_data,"pandas.read_csv(
'https://archive.ics.uci.edu/ml/machine-learning-databases/balance-scale/balance-scale.data',
sep=',',header=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3,random_state=100)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_gini,"sklearn.tree.DecisionTreeClassifier(criterion=""gini"",random_state=100,max_depth=3,min_samples_leaf=5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_entropy,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",random_state=100,max_depth=3,min_samples_leaf=5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
binned_weighted_statistic,"scipy.stats.binned_statistic_dd(x,y*weights,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_weights,"scipy.stats.binned_statistic_dd(x,1.0*weights,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_y,"scipy.stats.binned_statistic_dd(z,y,bins=[my_bins],statistic=mean)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_x,"scipy.stats.binned_statistic_dd(z,x,bins=[my_bins],statistic=mean)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
binned_e,"scipy.stats.binned_statistic_dd(z,energy,bins=[my_bins],statistic=average)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
reg,"sklearn.linear_model.TheilSenRegressor(fit_intercept=False,n_subsamples=10,)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_1,CLUSTER_2
x,"numpy.arange(-10,10)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[1],"numpy.array([0,0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[2],"numpy.array([-2,1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[3],"numpy.array([2,1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[4],"numpy.array([-3,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[5],"numpy.array([-1,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[6],"numpy.array([1,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[7],"numpy.array([3,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(1),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[1],"numpy.array([0,0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[2],"numpy.array([-2,1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[3],"numpy.array([2,1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[4],"numpy.array([-3,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[5],"numpy.array([-1,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[6],"numpy.array([1,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pos[7],"numpy.array([3,2])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.read_excel('/home/subhani007/Desktop/MLAssignment/boston.xls'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cost,math.sqrt(cost),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta,numpy.asarray(theta),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta1,numpy.asarray(theta1),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta2,numpy.asarray(theta2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta3,numpy.asarray(theta3),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta4,numpy.asarray(theta4),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
temp,"numpy.zeros(14,int)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta,"numpy.zeros(x1_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta1,"numpy.zeros(x2_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta2,"numpy.zeros(x2_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta3,"numpy.zeros(x4_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta4,"numpy.zeros(x5_data.shape[1],dtype='int')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mul,"numpy.matmul(theta_transpose,x)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
toSum,"numpy.matmul(sub,np.transpose(x)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mul,"numpy.matmul(theta_transpose,x)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sigma,numpy.sum(sq),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_transpose,numpy.transpose(y),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta_transpose,numpy.transpose(theta),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cost,numpy.transpose(cost),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
theta_transpose,numpy.transpose(theta),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_transpose,numpy.transpose(y),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1Trans,numpy.transpose(x1_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x2Trans,numpy.transpose(x2_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x3Trans,numpy.transpose(x3_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x4Trans,numpy.transpose(x4_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x5Trans,numpy.transpose(x5_data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sq,"numpy.power(sub,2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub,"numpy.subtract(mul,y_transpose)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub,"numpy.subtract(mul,y_transpose)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_scaled,sklearn.preprocessing.scale(x),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_scaled,sklearn.preprocessing.scale(y),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"submission.iloc[:,1]",numpy.floor(np.expm1(blend_models_predict(X_sub),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"submission.iloc[:,1]",numpy.floor((0.25*numpy.floor(np.expm1(blend_models_predict(X_sub),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train[""SalePrice""]","numpy.log1p(train[""SalePrice""])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(-cross_val_score(model,X,y,scoring=""neg_mean_squared_error"",cv=kfolds)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,numpy.corrcoef(train[cols].values.T),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train['SalePrice'],train[var]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combine,"pandas.concat((train,test)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combine,pandas.get_dummies(combine),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/Housing_Prices_train.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/Housing_Prices_test.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,"pandas.read_csv(""https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/sample_submission_kaggle.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub_1,pandas.read_csv('https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/masum_rumia-detailed-regression-guide-with-house-pricing%20submission.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub_2,pandas.read_csv('https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/serigne_stacked-regressions-top-4-on-leaderboard_submission.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub_3,pandas.read_csv('https://raw.githubusercontent.com/AnujPR/Kaggle-Hybrid-House-Prices-Prediction/master/jesucristo1-house-prices-solution-top-1_new_submission.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hm,"seaborn.heatmap(cm,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':10},yticklabels=cols.values,xticklabels=cols.values)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
combine[feature],"scipy.special.boxcox1p(combine[feature],boxcox_normmax(combine[feature]+1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lbl,sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ENet,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kfolds,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bikeAllYears,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
bikeAllYears,"pandas.concat(\
[readYearlyData(os.path.join(csvFilePath,file)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
bikeDF['AgeBins'],"pandas.cut(bikeDF.age,bins=age_bins,labels=age_labels)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
bikeDF['HrBins'],"pandas.cut(bikeDF.start_hour,bins=hrs_bins,labels=hrs_labels)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
bikeDF,"pandas.read_csv(csvFile,low_memory=False,header=0,
names=[""tripduration"",""starttime"",""stoptime"",""startstationid"",""startstationname"",
""startstationlatitude"",""startstationlongitude"",""endstationid"",""endstationname"",
""endstationlatitude"",""endstationlongitude"",""bikeid"",""usertype"",""birthyear"",""gender""
])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
city_wx_data_df,pandas.DataFrame(city_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
city_wx,requests.get(city_url),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
r,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
start,datetime.date.today(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
iso_8601_dt,"datetime.datetime.strptime(iso_8601,'%Y-%m-%dT%H:%M:%S%f')",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
comparison,"pandas.DataFrame([results_sent,recall_scores_sent,results_fin,recall_scores_fin,delta_accu,delta_recall],columns=names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_feat,"pandas.DataFrame([model.feature_importances_],columns=features)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp_feat,"pandas.DataFrame([model.feature_importances_],columns=features)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
aggregated,pandas.read_json('aggregated_sentiment.json'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.KFold(n_splits=num_folds,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv_results,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=kfold,scoring=scoring)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
best_cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_rf,sklearn.ensemble.RandomForestClassifier(n_estimators=1000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_rf,sklearn.ensemble.RandomForestClassifier(n_estimators=1000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(test_y,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recall,"sklearn.metrics.recall_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
image,numpy.array(tiles[i].image),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
trimap,numpy.array(mtiles[i].image),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
bmask,"numpy.array(amask,dtype=bool)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
kernel,"numpy.ones((1,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
kernel,"numpy.ones((1,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
kernel,"numpy.ones((1,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
cutout,"numpy.clip(cutout*255,0,255)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
cutout,"numpy.clip(cutout*255,0,255)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
alpha,"numpy.clip(x,0.0,1.0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
alpha,"numpy.clip(x,0.0,1.0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
orig_2,numpy.uint8(orig_2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
mask,numpy.uint8(mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
C,scipy.sparse.diags(c),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
C,scipy.sparse.diags(c),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
start_time,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_2,CLUSTER_11
diabetes,sklearn.datasets.load_diabetes(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
insurance,"pandas.read_csv('insurance.csv',delimiter=',')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
age_first_Quartile,"numpy.percentile(insurance.age,[25])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
age_third_Quartile,"numpy.percentile(insurance.age,[75])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bmi_first_Quartile,"numpy.percentile(insurance.bmi,[25])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bmi_third_Quartile,"numpy.percentile(insurance.bmi,[75])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
children_first_Quartile,"numpy.percentile(insurance.children,[25])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
children_third_Quartile,"numpy.percentile(insurance.children,[75])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
charges_first_Quartile,"numpy.percentile(insurance.charges,[25])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
charges_third_Quartile,"numpy.percentile(insurance.charges,[75])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.countplot(x=""sex"",data=insur)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.arange(data.shape[0]),CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
embeddings_index[word],"numpy.asarray(values[1:],dtype='float32')",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
pred_adv,"numpy.argmax(y_pred_adv,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
real_adv,"numpy.argmax(y_val,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
pr,"numpy.argmax(prediction_ar,axis=1)",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
x,numpy.arange(len(x),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.arange(len(x),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Bj,numpy.array(y1),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Sh,numpy.array(y2),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Bj,numpy.array(y1),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Sh,numpy.array(y2),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
emails_available,"os.listdir(""/home/allan/Desktop/enron_fraud_detection/text_operations/emails_by_address"")",CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
emails_available,"os.listdir(""/home/allan/Desktop/enron_fraud_detection/text_operations/emails_by_address"")",CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
emails_available,"os.listdir(""/home/allan/Desktop/enron_fraud_detection/text_operations/emails_by_address"")",CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
emails_available,"os.listdir(""/home/allan/Desktop/enron_fraud_detection/text_operations/emails_by_address"")",CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
keep_index_v2,numpy.array(((numpy.array(usage),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
keep_words,numpy.array(words),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
person_index,numpy.array(numpy.array(numpy.array(numpy.array(detective_people_list),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
keep_words,numpy.array(qualitative_words),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
p_values,numpy.zeros(len(words),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
p_index,numpy.where(np.array(np.array(detective_people_list),CLUSTER_16,CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_1
cbar,matplotlib.pyplot.colorbar(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cbar,"matplotlib.pyplot.colorbar(im,ax=ax[1],cax=cax,shrink=1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cbar,"matplotlib.pyplot.colorbar(im,ax=ax[3],cax=cax,shrink=1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cont,"matplotlib.pyplot.contour(
np.arange(ydeg+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(2,2,figsize=(12,7)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(3,3,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(2,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(2,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
l,"numpy.arange(5,ydeg+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.array(map.y),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mu,numpy.array([np.mean(x[l**2:(l+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
R,numpy.array([[np.cos(ang),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
R,numpy.array([[np.cos(ang),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
theta,numpy.array(theta),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
R,numpy.array([[np.cos(ang),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
img_rot,"numpy.zeros((9,res,res)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
img_starry,"numpy.zeros((9,res,res)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
error,numpy.zeros((len(Nalpha),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t0,numpy.zeros(ydeg+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tD,numpy.zeros(ydeg+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tN0,numpy.zeros(ydeg+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tND,numpy.zeros(ydeg+1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
L,"numpy.concatenate(
[np.ones(2*l+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
new_lon,numpy.empty_like(lon),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
new_lon,numpy.empty_like(lon),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
img_rot,numpy.zeros_like(img),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux_num,numpy.zeros_like(theta),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux_num,numpy.zeros_like(theta),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
lnlike,numpy.zeros_like(alpha_arr),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux,numpy.ones_like(time),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
wta,numpy.ones(map.Ny),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
error,numpy.std(flux_starry_0-flux_num_0),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux_num[k],numpy.sum(z[z>0]*img.flat[z>0]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
flux_num[k],numpy.sum(z[z>0]*img.flat[z>0]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,numpy.cos(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
z,numpy.cos(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,numpy.cos(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
z,numpy.cos(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
like,numpy.exp(lnlike-np.max(lnlike),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
logerror,numpy.log10(error),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.sin(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.sin(lat.flat),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
time,"numpy.linspace(0,30,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Nalpha,"numpy.linspace(0,1,25)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
theta,"numpy.linspace(0,360.0,npts)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,10.0,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
alpha_arr,"numpy.linspace(0.01,0.03,300)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tstart,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tstart,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tstart,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tstart,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
func,"scipy.interpolate.interp1d(lon[i],img[i],fill_value=""extrapolate"")",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
true_prob,pandas.Series(true_prob),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
counts,"pandas.concat([counts,true_prob],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
churn_df,pandas.read_csv('data/churn.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
counts,pandas.value_counts(pred_churn),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.array(y),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_prob,numpy.zeros([len(y),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
true_prob[prob],numpy.mean(is_churn[pred_churn==prob]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
baseline,numpy.mean(is_churn),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
class_names,numpy.unique(y),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"numpy.array([[0,0],
[0,1],
[1,0],
[1,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([0,1,1,0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.array([[0,0],
[0,1],
[0,-1],
[0.5,1],
[0.5,-1],
[1,1],
[1,-1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([[0,1],
[0,1],
[0,1],
[-1,1],
[1,1],
[0,-1],
[0,-1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.concatenate((ones.T,X)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
a,numpy.concatenate((np.ones(1),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dot_value,"numpy.dot(a[l],self.weights[l])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ones,numpy.atleast_2d(np.ones(X.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
layer,numpy.atleast_2d(a[i]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
delta,numpy.atleast_2d(deltas[i]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ones,numpy.atleast_2d(np.ones(x.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
books,"pandas.read_csv('books.csv',encoding='latin-1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(
in_femto_sec(-100)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
k,"numpy.linspace(
in_electron_volt(15.35)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(fpath),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"df[""ymd""]","pandas.to_datetime(df[""ymd""])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
grid_cv,"sklearn.model_selection.GridSearchCV(estimator=svc,param_grid=prama_dic)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
grid_cv,"sklearn.model_selection.GridSearchCV(logistic,param_dic)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
grid_cv,"sklearn.model_selection.GridSearchCV(logistic,param_dic)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
target,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
svc,sklearn.svm.SVC(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
logistic,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
logistic,sklearn.linear_model.LogisticRegression(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train,target,test_size=0.2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,target,test_size=0.2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x_data,"numpy.linspace(0.0,10.0,1000000)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
my_data,"pandas.concat([pd.DataFrame(data=x_data,columns=['XData'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_eval,y_train,y_eval","sklearn.model_selection.train_test_split(x_data,y_true,test_size=0.3,random_state=101)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(file_name),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.arange(1,len(x)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.sort(df['alcohol']),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.catplot(x=""class"",y=""survived"",hue=""sex"",data=titanic,
height=6,kind=""bar"",palette=""muted"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,"seaborn.distplot(df['alcohol'],bins=20)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
titanic,"seaborn.load_dataset(""titanic"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,"matplotlib.pyplot.plot(x,y,marker='.',linestyle='none')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,"matplotlib.pyplot.title(""AlcoholContent"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel('AlcoholPercentage'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel('PercentofAlcoholinWine'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylabel('Count'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylabel('ECDF'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
CITI,pandas.read_csv('citi_df_sum.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
NY_STATION,pandas.read_csv('http://web.mta.info/developers/data/nyct/subway/Stations.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
TURNSTILE,pandas.read_csv('turnstile/cleaned_turnstile_daily.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,20)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('../data/events.csv',low_memory=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df['timestamp'],pandas.to_datetime(df['timestamp']),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
grouped['days_elapsed'],pandas.to_datetime('2018-06-01'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
income,"pandas.Series(np.where(income_raw=="">50K"",1,0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
features,pandas.get_dummies(features_raw),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""census.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['f_train'],"sklearn.metrics.fbeta_score(y_train.values[:300],predictions_train,beta=0.5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['f_test'],"sklearn.metrics.fbeta_score(y_test,predictions_test,beta=0.5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['acc_train'],"sklearn.metrics.accuracy_score(y_train.values[:300],predictions_train)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
results['acc_test'],"sklearn.metrics.accuracy_score(y_test,predictions_test)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_A,sklearn.naive_bayes.GaussianNB(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_B,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_C,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scorer,"sklearn.metrics.make_scorer(fbeta_score,beta=0.5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
neg_mask,"numpy.array(Image.open(""../../images/neg.jpg"")",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pos_mask,"numpy.array(Image.open(""../../images/pos.jpg"")",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
neutral_mask,"numpy.array(Image.open(""../../images/neutral.jpg"")",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mss_df,pandas.read_pickle(save_load_path+'/mss_df.pkl'),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_c,numpy.corrcoef(x_s.T),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,sklearn.datasets.load_iris(),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_s,"sklearn.preprocessing.scale(x,with_mean=True,with_std=True,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"eig_val,r_eig_vec",scipy.linalg.eig(x_c),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
avg_df_csv,pandas.DataFrame(avg_df),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gender_df_csv,pandas.DataFrame(gender_df),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
race_df_csv,pandas.DataFrame(race_df),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""NCHS_-_Death_rates_and_life_expectancy_at_birth.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
match,pandas.read_csv('matches.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
delivery,pandas.read_csv('deliveries.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
company,pandas.read_csv('Fortune501.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
titanic,pandas.read_csv('titanic.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
food,pandas.read_csv('food.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labels,numpy.array(labels),CLUSTER_29,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
cm,"numpy.zeros((12,12)",CLUSTER_29,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
features_bc01,"numpy.rollaxis(base_dataset.trials,3,1)",CLUSTER_29,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
yhat,"numpy.argmax(yhat,axis=1)",CLUSTER_29,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
x_train,"numpy.delete(features,list(range(0,features.shape[0],5)",CLUSTER_29,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
y_train,"numpy.delete(labels,list(range(0,labels.shape[0],5)",CLUSTER_29,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
x_train,"numpy.delete(x_train,list(range(0,features.shape[0],4)",CLUSTER_29,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
y_train,"numpy.delete(y_train,list(range(0,labels.shape[0],4)",CLUSTER_29,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
"all_data,ts1,ts2,ts3,ts4,ts5,ts6",pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_data,test_data",pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_ts,ts13,ts23,ts63,ts112,ts212,ts612,ts1212,ts2212,ts6212",pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fs126,pandas.DataFrame(np.transpose(fs126),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fs1262,pandas.DataFrame(np.transpose(fs1262),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fs,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_fs,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
os_data_x,pandas.DataFrame(os_data_x),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_fs,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_normalized,pandas.DataFrame(train_normalized),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
multi_fs,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
multi_normalized,pandas.DataFrame(multi_normalized),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gau_fs,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gau_normalized,pandas.DataFrame(gau_normalized),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnb_fs,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnb_normalized,pandas.DataFrame(mnb_normalized),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_data,"pandas.concat([all_data,idata])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts1,"pandas.concat([ts1,pd.DataFrame([[idata['avg_rss12'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts2,"pandas.concat([ts2,pd.DataFrame([[idata['var_rss12'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts3,"pandas.concat([ts3,pd.DataFrame([[idata['avg_rss13'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts4,"pandas.concat([ts4,pd.DataFrame([[idata['var_rss13'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts5,"pandas.concat([ts5,pd.DataFrame([[idata['avg_rss23'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts6,"pandas.concat([ts6,pd.DataFrame([[idata['var_rss23'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_data,"pandas.concat([test_data,idata])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_data,"pandas.concat([train_data,idata])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_ts,"pandas.concat([train_ts,pd.DataFrame([[instance,idata['avg_rss12'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts13,"pandas.concat([ts13,pd.DataFrame([[idata['avg_rss12'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts23,"pandas.concat([ts23,pd.DataFrame([[idata['var_rss12'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts63,"pandas.concat([ts63,pd.DataFrame([[idata['var_rss23'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts112,"pandas.concat([ts112,pd.DataFrame([[idata1['avg_rss12'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts212,"pandas.concat([ts212,pd.DataFrame([[idata1['var_rss12'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts612,"pandas.concat([ts612,pd.DataFrame([[idata1['var_rss23'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts1212,"pandas.concat([ts1212,pd.DataFrame([[idata2['avg_rss12'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts2212,"pandas.concat([ts2212,pd.DataFrame([[idata2['var_rss12'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ts6212,"pandas.concat([ts6212,pd.DataFrame([[idata2['var_rss23'].min()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fs,"pandas.concat([fs,pd.DataFrame([ts])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_fs,"pandas.concat([test_fs,pd.DataFrame([test_ts])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_fs,"pandas.concat([lasso_fs,pd.DataFrame([ts])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
multi_fs,"pandas.concat([multi_fs,pd.DataFrame([ts])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gau_fs,"pandas.concat([gau_fs,pd.DataFrame([ts])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnb_fs,"pandas.concat([mnb_fs,pd.DataFrame([ts])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
idata,"pandas.read_csv(""C:\\Users\\DELL\\Desktop\\INF552\\HM3\\""+foldname[i]+""\\dataset""+str(j+1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
idata,"pandas.read_csv(""C:\\Users\\DELL\\Desktop\\INF552\\HM3\\""+foldname[i]+""\\dataset""+str(j+1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
idata,"pandas.read_csv(""C:\\Users\\DELL\\Desktop\\INF552\\HM3\\""+foldname[i]+""\\dataset""+str(j)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_true,"numpy.concatenate((Y_target[0],Y_target[1],Y_target[2],Y_target[3],Y_target[4])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pred,"numpy.concatenate((Y_test[0],Y_test[1],Y_test[2],Y_test[3],Y_test[4])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_score,"numpy.concatenate((Y_score[0],Y_score[1],Y_score[2],Y_score[3],Y_score[4])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_true2,"numpy.concatenate((Y_target2[0],Y_target2[1],Y_target2[2],Y_target2[3],Y_target2[4])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pred2,"numpy.concatenate((Y_test2[0],Y_test2[1],Y_test2[2],Y_test2[3],Y_test2[4])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_score2,"numpy.concatenate((Y_score2[0],Y_score2[1],Y_score2[2],Y_score2[3],Y_score2[4])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_target,numpy.append(np.array([1]*9),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_target,numpy.append(np.array([1]*9),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_target,numpy.append(np.array([1]*9),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_target,numpy.append(np.array([1]*4),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_target,numpy.append(np.array([1]*9),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
class1,numpy.append(np.array(['bending1']*5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
class2,"numpy.append(class1,np.array(['cycling']*12)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
class3,"numpy.append(class2,np.array(['lying']*12)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
class4,"numpy.append(class3,np.array(['sitting']*12)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
class5,"numpy.append(class4,np.array(['standing']*12)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
class6,"numpy.append(class5,np.array(['walking']*12)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfecv,sklearn.feature_selection.RFECV(estimator=LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfecv1,sklearn.feature_selection.RFECV(estimator=LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfecv,RFECV(estimator=sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfecv1,RFECV(estimator=sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_true,y_score)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr2,tpr2,thresholds2","sklearn.metrics.roc_curve(y_true2,y_score2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_normalized,"sklearn.preprocessing.normalize(lasso_fs,norm='l2')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
multi_normalized,"sklearn.preprocessing.normalize(multi_fs,norm='l2')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gau_normalized,"sklearn.preprocessing.normalize(gau_fs,norm='l2')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnb_normalized,"sklearn.preprocessing.normalize(mnb_fs,norm='l2')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
log,"sklearn.linear_model.LogisticRegressionCV(penalty='l1',solver='liblinear',cv=5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
multi,"sklearn.linear_model.LogisticRegressionCV(penalty='l1',solver='saga',multi_class='multinomial',cv=5,max_iter=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gnb,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xvs,"numpy.arange(0,Shape)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"numpy.arange(0,len(files)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"numpy.arange(-5,len(A)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xvs,"numpy.arange(0,Shape)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xvs,"numpy.arange(0,Shape)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xvs,"numpy.arange(0,Shape)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xvs,"numpy.arange(0,Shape)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xvs,"numpy.arange(0,Shape)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xvs,"numpy.arange(0,Shape)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Images,numpy.array(Image.open(files[q]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Ahold,numpy.array(ImageB),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ABhold,numpy.array(ImageB),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
areabackground,numpy.array(areabackground),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
area,numpy.array(area),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Images,numpy.array(Image.open(files[q]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Images,numpy.array(Image.open(files[q]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Images,numpy.array(Image.open(files[q]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Images,numpy.array(Image.open(files[q]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Images,numpy.array(Image.open(files[q]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Images,numpy.array(Image.open(files[q]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,numpy.array(datdat[1]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataS,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
zpos,numpy.zeros(xpos.shape),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataS,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataSub,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataSub,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
zpos,numpy.zeros(xpos.shape),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
zpos,numpy.zeros(xpos.shape),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataS,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataSub,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataSub,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataS,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataSub,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataSub,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataS,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataS,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataSub,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
DataSub,numpy.zeros(Shape**2),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"ypos,xpos",numpy.indices(data.shape),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"ypos,xpos",numpy.indices(data.shape),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"ypos,xpos",numpy.indices(data.shape),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cumsum,"numpy.cumsum(np.insert(x,0,0)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ABm,numpy.mean(AB),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,8)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
files,os.listdir(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
files,os.listdir(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
slices,scipy.ndimage.find_objects(labeled),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"labeled,num_objects",scipy.ndimage.label(maxima),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
example_labels,"numpy.array([-1,-1,1,1,1])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
example_labels,"numpy.array([-1,-1,1,1,1,1,1])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
example_labels,"numpy.array([-1,-1,-1,-1,-1,1,1])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
features,"pandas.get_dummies(train_data,prefix_sep='.')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
features,"pandas.get_dummies(train_data,prefix_sep='.')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_data,"pandas.get_dummies(train_data,prefix_sep='.')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
loans,pandas.read_csv('lending-club-data.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_idx,json.load(f),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
validation_idx,json.load(f1),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
res,"numpy.arange(9,dtype=""double"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,"numpy.arange(9,dtype=""double"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_x,pandas.DataFrame(X),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labels,"pandas.DataFrame(labels,columns=['SEGMENT'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labels,"pandas.DataFrame(labels,columns=['SEGMENT'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_x,pandas.DataFrame(X_),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
labels,"pandas.DataFrame(labels,columns=['SEGMENT'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(pca.components_[:3],columns=list(df_.columns)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resultatKm,"pandas.concat(frames,axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resultatKm,"pandas.concat(frames,axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
resultatKm,"pandas.concat(frames,axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""C:/Users/Grand/Desktop/DS-Academy/BD/ABT_ECH_START_Intilaq.csv"",sep="";"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(df,cmap=""Blues"",annot=True,linewidths=.5,fmt='.1f')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
km,sklearn.cluster.KMeans(n_clusters=k+2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
km,sklearn.cluster.KMeans(n_clusters=7),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
km,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
km,sklearn.cluster.KMeans(n_clusters=k+2),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
km,sklearn.cluster.KMeans(n_clusters=4),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res[k],"sklearn.metrics.silhouette_score(df_,km.labels_)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res[k],"sklearn.metrics.silhouette_score(df_,km.labels_)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df_train,df_test","sklearn.model_selection.train_test_split(df,test_size=0.1,random_state=50)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df_train,df_test","sklearn.model_selection.train_test_split(df__,test_size=0.1,random_state=50)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.arange(0,5,0.1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean,numpy.mean(sample),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dev,numpy.std(sample),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dist,scipy.stats.expon(0),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dist,random.choice(distributions),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xx,"numpy.arange(5,23)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
J_history,numpy.zeros(num_iters),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Z,"numpy.zeros((B0.size,B1.size)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
B0,"numpy.linspace(-10,10,50)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
B1,"numpy.linspace(-1,4,50)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(B0,B1,indexing='xy')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"numpy.loadtxt('data/ex1data1.txt',delimiter=',')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,6)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
size,numpy.array([len(sample1),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sd,numpy.array([sample1.std(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
size,numpy.array([len(sample1),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sd,numpy.array([sample1.std(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
size,numpy.array([len(sample1),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sd,numpy.array([sample1.std(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cellphone,pandas.DataFrame(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y_test,numpy.array(list(map(lambdax:a[0]+a[1]*x+a[2]*(x**2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.array([[0.78,2.5],[1.4,1.2],[2.34,1.12],[3,2.25],[3.81,4.28]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_test,numpy.linspace(min(x),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tempt_result,"numpy.vstack((np.hstack((beta11,beta12)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
img,numpy.squeeze(images[0]),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=10,sharex=True,sharey=True,figsize=(25,4)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
u,"numpy.array([[4],[2],[1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
rule_b,"numpy.array(list_of_integers,dtype=np.int8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.zeros((steps,size)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_left,"numpy.roll(x,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_right,"numpy.roll(x,-1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
binary_rep_of_rule,"numpy.binary_repr(rule,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
summed_items,"numpy.sum(items_to_sum,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_stacked,numpy.vstack(x_list),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r,"requests.get(url,stream=True)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
"fordataintqdm(r.iter_content(block_size),total",math.ceil(total_size//block_size),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
image,numpy.asarray(image),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
A,"numpy.array([
[3.,1],
[1,2]
])",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
b,"numpy.array([
[5],
[5]
])",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.zeros((self.n,1)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A,"numpy.zeros((100,100)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
b,"numpy.ones((100,1)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tmp1,numpy.sum(self.r*self.r),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tmp2,"numpy.sum(self.p*np.dot(A,self.p)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
tmp,numpy.sum(r*r),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mean,numpy.zeros(N),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
calc,numpy.zeros_like(data),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
normcalc,numpy.zeros_like(calc),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
v,numpy.ones(N),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
sse,"numpy.sum(np.power(y-pdf,2.0)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_cov,"numpy.multiply(matmul,x)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
correlationPdata,numpy.eye((len(df.columns),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
correlationPcdf,numpy.eye((len(df.columns),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
i_lower,numpy.tril_indices(len(df.columns),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
i_lower,numpy.tril_indices(len(df.columns),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"y,x","numpy.histogram(data,bins=bins,density=True)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
beta,"scipy.stats.beta(a=10,b=3)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
dist[1],"scipy.stats.expon(0,1/0.3)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
gumbel,scipy.stats.gumbel_l(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
dist[2],"scipy.stats.lognorm(0.5,0,math.exp(2)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
mvnorm,"scipy.stats.multivariate_normal(mean,df_cov)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,scipy.stats.multivariate_normal(np.zeros(N),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
dist[0],"scipy.stats.norm(20,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"correlS2,pS2","scipy.stats.pearsonr(data[:,i],data[:,j])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"correlS2,pS2","scipy.stats.pearsonr(normcalc[:,i],normcalc[:,j])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"correlS,pS",scipy.stats.spearmanr(calc),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"ct,ppp",scipy.stats.spearmanr(normcalc),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"seaborn.jointplot(gumbel.ppf(x_unif[:,0])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"seaborn.jointplot(gumbel.ppf(y_unif[:,0])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_excel('MultivariateData.xlsx',sheet_name='Sheet1')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
neil_and_king,"pandas.concat([neil_gaimen,stephen_king])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
books,pandas.read_csv('books.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
neil_top,"seaborn.barplot(x='title',y='average_rating',data=neil_rating,palette='Blues_d')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
graph_authors_score,"seaborn.barplot(x='authors',y='
graph_authors_score.set_xticklabels(graph_authors_score.get_xticklabels()",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
boxplot,seaborn.boxplot(num_page),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
langauge_count,"seaborn.countplot(x=""language_code"",data=neil_rating)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
language_count,"seaborn.countplot(x='language_code',data=books_1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
language_count2,"seaborn.countplot(x='language_code',data=books_12)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
dist_num_page,seaborn.distplot(num_page),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
dist_plot_numpage2,"seaborn.distplot(books_1r['
dist_plot_numpage2.set(xlabel=""Numberofpage"",ylabel='KDE(kernaldensityEstimate)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
rate_dist,seaborn.distplot(books_1r['ratings_count']),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
dist_plot2,seaborn.distplot(neil_and_king['average_rating']),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
rate_vs_page,"seaborn.jointplot(x='ratings_count',y='
rate_vs_page.set_axis_labels('Countsofratings','Countofpages',fontsize=16)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
graph_cor,"seaborn.lmplot(x='average_rating',y='
palette='muted',scatter_kws={'s':5},
height=10,aspect=1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
graph_cor_NK,"seaborn.lmplot(x='average_rating',y='
palette='muted',scatter_kws={'s':100},hue='authors',markers=['o','x'],
height=10,aspect=1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
graph_cor2,"seaborn.regplot(x='average_rating',y='
scatter_kws={'s':5},
line_kws={'label':""y={0:.1f}x+{1:.1f}"".format(slope,intercept)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"slope,intercept,r_value,p_value,std_err","scipy.stats.linregress(books_1r['average_rating'],
books_1r['

graph_cor2=sns.regplot(x='average_rating',y='
scatter_kws={'s':5},
line_kws={'label':""y={0:.1f}x+{1:.1f}"".format(slope,intercept)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"stats,p","scipy.stats.normaltest(books_1r['


ifp<alpha:
print('RejectNullhypothesis')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"stat,p_v",scipy.stats.normaltest(data[column_name]),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"stats,p_v","scipy.stats.ttest_ind(king_group['average_rating'],neil_group['average_rating'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y_pos,numpy.arange(len(objects),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
neil_rate,numpy.array(neil_rating),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
neil_and_king_review_count,numpy.array(neil_and_king_review_count),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"Q1,Q3","numpy.percentile(datacolumn,[25,75])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_1
acc,"sklearn.metrics.accuracy_score(pred,labels_test)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_1
feature_set_df,pandas.DataFrame(feature_set1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
coeffs,"pandas.DataFrame(lr_dr.coef_,columns=feature_cols1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
coeffs,"pandas.DataFrame(lr_dr_s.coef_,columns=feature_cols1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dr_rf_preds,"pandas.DataFrame(dr_rf_preds,columns=['doc_id','dilution_predict','dilution_predict_0',
'dilution_prob_1','dilution_prob_2'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
coeffs,"pandas.DataFrame(lr.coef_,columns=feature_cols)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaled,"pandas.DataFrame(feature_set,columns=feature_cols)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dr_gb_preds,"pandas.DataFrame(dr_gb_preds,columns=['doc_id','dilution_predict','dilution_predict_0',
'dilution_prob_1','dilution_prob_2'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
coeffs,"pandas.DataFrame(l2w.coef_,columns=feature_cols1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gb1_dr_scores,"pandas.DataFrame(gb1_scores,columns=feature_cols1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
coeffs,"pandas.DataFrame(lr2w.coef_,columns=feature_cols1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
isLate_gb_preds,"pandas.DataFrame(isLate_gb_preds,columns=['doc_id','isLate_predict','late_prob_0','late_prob_1','late_prob_2'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
isLate_gb_preds,"pandas.DataFrame(isLate_gb_preds,columns=['doc_id','isLate_predict','late_prob_0','late_prob_1'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_score,"pandas.DataFrame(data={'features':feature_cols,'dr_weights':dr_bucket_feature_importances,'islate_weights':isLate_bucket_feature_importances})",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_score,"pandas.DataFrame(data={'features':feature_cols1,'dr_weights':dr_bucket_feature_importances,'islate_weights':isLate_bucket_feature_importances})",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
features_scaled,"pandas.DataFrame(feature_set1,columns=feature_cols1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_prod_pred,"pandas.concat([all_prod,dr_gb_preds,isLate_gb_preds],axis=1,join='inner')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_set1,pandas.get_dummies(feature_set),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_prod,pandas.read_csv('/home/ec2-user/SCB_CODE/cam_code/data_180112/invoice_CG_allprod_180115.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
buyer_supplier_3m,pandas.read_csv('/home/ec2-user/SCB_CODE/cam_code/data_180112/add_features_buyer_supplier_180113.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
client_3m,pandas.read_csv('/home/ec2-user/SCB_CODE/cam_code/data_180112/add_features_client_180113.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
buyer_seller_features,pandas.read_csv('/home/ec2-user/SCB_CODE/cam_code/data_180112/add_features_buyer_supplier_180114.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
client_features,pandas.read_csv('/home/ec2-user/SCB_CODE/cam_code/data_180112/add_features_client_180114.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
buyer_seller_features_dr,pandas.read_csv('/home/ec2-user/SCB_CODE/cam_code/data_180112/add_features_buyer_supplier_180116_dr.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
client_features_dr,pandas.read_csv('/home/ec2-user/SCB_CODE/cam_code/data_180112/add_features_client_180116_dr.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,pandas.to_datetime('2017-03-01'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,numpy.asarray(X_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,numpy.asarray(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_validate,numpy.asarray(X_validate),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train_dr,numpy.asarray(final[final.rownum.isin(train_row),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_test_dr,numpy.asarray(final[final.rownum.isin(test_row),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_validate_dr,numpy.asarray(final[final.rownum.isin(validate_row),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train_ld,numpy.asarray(final[final.rownum.isin(train_row),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_test_ld,numpy.asarray(final[final.rownum.isin(test_row),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_validate_ld,numpy.asarray(final[final.rownum.isin(validate_row),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
obs_weight_train,numpy.asarray(final[final.rownum.isin(train_row),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data[col],numpy.where(pd.isnull(all_prod[col]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
final_test['test_flag'],"numpy.where(final_test.random_num>0.7,1,0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
final['test_split'],numpy.where(final.doc_date_TS>pd.to_datetime('2017-03-01'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
final['buyer_centric_flag'],numpy.where(((final['product']=='IFNB'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
final['dr_bucket'],"numpy.where(final.dr>0.1,2,numpy.where(final.dr>0.0,1,0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr_bucket,"numpy.where(regr_pred>0.05,2,numpy.where(regr_pred>0,1,0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
final['late_days_bucket'],"numpy.where(final.late_days_bucket==-1,0,final.late_days_bucket)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_cum,numpy.cumsum(pca_vars),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gb1_scores,numpy.reshape(np.asarray(gb1_scores),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
e,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(feature_set,label,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(pca_features,label,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train2,X_test2,y_train2,y_test2","sklearn.model_selection.train_test_split(feature_set1,label,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train2,X_test2,y_train2,y_test2","sklearn.model_selection.train_test_split(feature_set1,label,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_gb,"sklearn.model_selection.GridSearchCV(gb,parameters,n_jobs=-1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_gb,"sklearn.model_selection.GridSearchCV(gb,parameters,n_jobs=-1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_gbl,"sklearn.model_selection.GridSearchCV(gb3,parameters,n_jobs=-1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_dr,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='sag',fit_intercept=False)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_dr_s,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='sag',fit_intercept=False)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='sag',fit_intercept=False)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lrw,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='saga',fit_intercept=True,class_weight=weights)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lrw,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='sag',fit_intercept=True,class_weight=weights)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lrw,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='sag',fit_intercept=False,class_weight=None)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='sag',fit_intercept=False)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr2,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='sag',fit_intercept=False)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr2w,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='sag',fit_intercept=False,class_weight='balanced')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr2w,"sklearn.linear_model.LogisticRegression(multi_class='multinomial',solver='sag',fit_intercept=False,class_weight=weights)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfl,sklearn.ensemble.RandomForestClassifier(n_estimators=n),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfl,sklearn.ensemble.RandomForestClassifier(n_estimators=n),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfl,sklearn.ensemble.RandomForestClassifier(n_estimators=n),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfl,"sklearn.ensemble.RandomForestClassifier(max_features=f,n_estimators=100)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfl,"sklearn.ensemble.RandomForestClassifier(max_depth=d,n_estimators=100)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfl,"sklearn.ensemble.RandomForestClassifier(max_depth=d,n_estimators=100)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfl,"sklearn.ensemble.RandomForestClassifier(max_depth=6,n_estimators=100)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr[i],tpr[i],_","sklearn.metrics.roc_curve(y[:,i],y_scored[:,i])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
roc_auc[i],"sklearn.metrics.auc(fpr[i],tpr[i])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"sklearn.preprocessing.label_binarize(y,classes=[0,1,2])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gb,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gb,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gb,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gb1,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.5,max_depth=12,max_features=4)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gb,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gb2,"sklearn.ensemble.GradientBoostingClassifier(learning_rate=0.5,max_depth=12,max_features=4)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gb3,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
center_circle,"matplotlib.pyplot.Circle((0,0)",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
center_circle,"matplotlib.pyplot.Circle((0,0)",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lines,labels",matplotlib.pyplot.thetagrids(np.degrees(label_placement),CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lines,labels",matplotlib.pyplot.thetagrids(np.degrees(label_placement),CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
track_dataframe,"pandas.DataFrame({'Genre':tracks_genre,'TrackName':tracks_name,'TrackID':tracks_id,'Popularity':tracks_popularity})",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grouped_df,pandas.DataFrame(grouped_dataframe.mean(),CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
keycount_df,pandas.DataFrame(keycount),CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
genre_df,pandas.DataFrame(g_check),CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
keycounts_df,pandas.DataFrame(keycounts),CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cleansed_df,pandas.read_csv(cleansed),CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
french,"numpy.concatenate((french,[french[0]])",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
german,"numpy.concatenate((german,[german[0]])",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
spanish,"numpy.concatenate((spanish,[spanish[0]])",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
swedish,"numpy.concatenate((swedish,[swedish[0]])",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cantopop,"numpy.concatenate((cantopop,[cantopop[0]])",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
indian,"numpy.concatenate((indian,[indian[0]])",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iranian,"numpy.concatenate((iranian,[iranian[0]])",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
malay,"numpy.concatenate((malay,[malay[0]])",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mandopop,"numpy.concatenate((mandopop,[mandopop[0]])",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
philippines_opm,"numpy.concatenate((philippines_opm,[philippines_opm[0]])",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
label_placement,"numpy.linspace(start=0,stop=2*np.pi,num=len(french)",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
label_placement,"numpy.linspace(start=0,stop=2*np.pi,num=len(cantopop)",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Rsquare,"sklearn.metrics.r2_score(y,yline)",CLUSTER_27,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('train.csv'),CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('test.csv'),CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"plt.imshow(train_data0[i],cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean,numpy.std(X_train),CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean,numpy.std(X_train),CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test",sklearn.model_selection.train_test_split(data.drop(columns='label'),CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test",sklearn.model_selection.train_test_split(data.drop(columns='label'),CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=param_grid,n_jobs=-1,cv=3)",CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=param_grid,n_jobs=-1,cv=3)",CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=param_grid,n_jobs=-1,cv=3)",CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=param_grid,n_jobs=-1,cv=3)",CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=param_grid,n_jobs=-1,cv=3)",CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=param_grid,n_jobs=-1,cv=3)",CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(estimator=model,param_grid=param_grid,n_jobs=-1,cv=3)",CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfc,"sklearn.ensemble.RandomForestClassifier(n_estimators=300,criterion='gini',max_depth=5,max_features=9)",CLUSTER_28,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
full_df,"pandas.read_csv(file_path,encoding='Latin-1')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
y_train['id'],"pandas.Series(np.arange(1,len(y_train)",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
y_validation['id'],"pandas.Series(np.arange(1,len(y_validation)",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
y_train,"pandas.read_csv('Data/Train/trainLbls.csv',names=['label'])",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
y_validation,"pandas.read_csv('Data/Validation/valLbls.csv',names=['label'])",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
purchasing_analysis_df,"pandas.DataFrame({""NumberofUniqueItems"":[items_df],
""AveragePurchasePrice"":[average_price_df],
""TotalNumberofPurchases"":[total_purchases_df],
""TotalRevenue"":[total_revenue_df]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
gender_demographics_df,"pandas.DataFrame({""GenderCount"":gender_count_df,""GenderPercentage"":gender_percentage_df})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
gender_analysis_df,"pandas.DataFrame({""PurchaseCount"":gender_purchases_df,
""AveragePurchasePrice"":gender_average_df,
""TotalPurchaseValue"":gender_total_df,
""NormalizedTotals"":normalized_gender_total_df})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
age_range_df,"pandas.DataFrame({""PurchaseCount"":age_group_count_df,
""AveragePurchasePrice"":age_group_average_df,
""TotalPurchaseValue"":age_group_total_df,
""NormalizedTotals"":normalized_age_total_df
})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
total_user_data_df,"pandas.DataFrame({""PurchaseCount"":players_purchase_count_df,
""AveragePurchasePrice"":players_average_price_df,
""TotalPurchaseValue"":players_total_df})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
items_purchased_df,"pandas.DataFrame({""PurchaseCount"":items_purchase_count_df,
""ItemPrice"":items_average_price_df,
""TotalPurchaseValue"":items_value_total_df,})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"purchase_data[""AgeRange%""]","pandas.cut(purchase_data[""Age""],bins,labels=age_ranges)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
purchase_data,pandas.read_csv(file_to_load),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
medical,pandas.read_csv('/Users/bentaylor/Desktop/insurance2.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
left_tail,numpy.mean(medical.charges),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
standard_error,numpy.std(medical.charges),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
insured_std,"numpy.std(insured,ddof=1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
uninsured_std,"numpy.std(uninsured,ddof=1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pooled_std_manual,numpy.sqrt((((len(insured),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.axvline(np.mean(medical.charges),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.axvline(np.mean(medical.charges),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.axvline(np.mean(medical.charges),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,"matplotlib.pyplot.hist(medical.charges,bins=40)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel('MedicalCharges(USD),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylabel('Patients'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
scipy_cal,"scipy.stats.ttest_ind(insured,uninsured)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
unequal_variance_t_test,"scipy.stats.ttest_ind(insured,uninsured,equal_var=False)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
zoc_df3['boro_count'],"numpy.select(conditions,choices,default='black')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
zoc_df3['gender_count'],"numpy.select(conditions,choices,default='black')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
overall_rating_percents,pandas.DataFrame(overall_rating_percents),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
gender_percents,pandas.DataFrame(gender_percents),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
gender_percents2,pandas.DataFrame(gender_percents2),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
gender_percents3,pandas.DataFrame(gender_percents3),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bedside_rating_percents,pandas.DataFrame(bedside_rating_percents),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
wait_rating_percents,pandas.DataFrame(wait_rating_percents),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
language_percents,pandas.DataFrame(language_percents),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
gender_percents4,pandas.DataFrame(gender_percents4),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
gender_percents,pandas.DataFrame(gender_percents),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
merged_zoclang2_df,"pandas.merge(zoclangcomplete2_df,zoc_df3,how='left',on='doctor')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
zocdocs_df,pandas.read_csv('~/Documents/Bootcamp/zocdoc_scrapysplash/zocdoc/zocdocdoctors_clean.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
zoc_df3['wait_rating'],pandas.to_numeric(zoc_df3.wait_rating),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
zoc_df3['bedside_rating'],pandas.to_numeric(zoc_df3.bedside_rating),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
zoc_df3['overall_rating'],pandas.to_numeric(zoc_df3.overall_rating),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"sns.factorplot(x=""overall_rating"",y=""Percents"",col=""boro"",data=overall_rating_percents,kind=""bar"",size=6,aspect=.9,palette=seaborn.color_palette(""GnBu"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"sns.factorplot(x=""bedside_rating"",y=""Percents"",col=""boro"",data=bedside_rating_percents,kind=""bar"",size=6,aspect=.9,palette=seaborn.color_palette(""GnBu"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"sns.factorplot(x=""wait_rating"",y=""Percents"",col=""boro"",data=wait_rating_percents,kind=""bar"",size=6,aspect=.9,palette=seaborn.color_palette(""GnBu"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"sns.factorplot(x=""languages_x"",col=""boro"",data=merged_zoclang2_df,kind=""count"",size=6,order=language_percents.languages_x.value_counts().iloc[:5].index,aspect=.9,palette=seaborn.color_palette(""GnBu"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
g,"sns.factorplot(x=""dr_class"",y=""Percents"",col=""gender"",data=gender_percents4,kind=""bar"",size=7,aspect=.9,palette=seaborn.color_palette(""GnBu"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"sns.factorplot(x=""overall_rating"",col=""boro"",data=zoc_df3,kind=""count"",size=6,aspect=.9,palette=seaborn.color_palette(""GnBu"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"sns.factorplot(x=""wait_rating"",col=""boro"",data=zoc_df3,kind=""count"",size=6,aspect=.9,palette=seaborn.color_palette(""GnBu"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"sns.factorplot(x=""bedside_rating"",col=""boro"",data=zoc_df3,kind=""count"",size=6,aspect=.9,palette=seaborn.color_palette(""GnBu"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"sns.factorplot(x=""overall_rating"",y=""Percents"",col=""gender"",data=gender_percents,kind=""bar"",size=6,aspect=.9,palette=seaborn.color_palette(""GnBu"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"sns.factorplot(x=""wait_rating"",y=""Percents"",col=""gender"",data=gender_percents3,kind=""bar"",size=6,aspect=.9,palette=seaborn.color_palette(""GnBu"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,"sns.factorplot(x=""bedside_rating"",y=""Percents"",col=""gender"",data=gender_percents2,kind=""bar"",size=6,aspect=.9,palette=seaborn.color_palette(""GnBu"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.array(X),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
vertices,"numpy.array([[pt_1,pt_2,pt_3,pt_4,pt_5,pt_6]],dtype=np.int32)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
mask,numpy.zeros_like(image),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
pred_digits,"numpy.argmax(pred,axis=1)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
temp_pred,"numpy.argmax(pred,axis=1)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
temp_y_test,"numpy.argmax(y_test,axis=1)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
inID,numpy.argmax(class_predicted[0]),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
lower,"numpy.uint8([120,120,120])",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
upper,"numpy.uint8([255,255,255])",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
lower,"numpy.uint8([190,190,0])",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
upper,"numpy.uint8([255,255,255])",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
image,numpy.copy(image),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
new_image,numpy.copy(image),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
new_image,numpy.copy(image),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
new_image,numpy.copy(image),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
new_image,numpy.copy(image),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
overlay,numpy.copy(image),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
image,"numpy.expand_dims(img,axis=0)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(5,2)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
"fig,ax","matplotlib.pyplot.subplots(4,2)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.25,random_state=42)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
"fpr_keras,tpr_keras,thresholds_keras","sklearn.metrics.roc_curve(b,a)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
l,"random.randint(0,len(Z)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
cwd,os.getcwd(),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
cwd,os.getcwd(),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
"lr_precision,lr_recall,_","sklearn.metrics.precision_recall_curve(b,lr_probs)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
"lr_f1,lr_auc","sklearn.metrics.f1_score(temp_y_test,temp_pred)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
auc_keras,"sklearn.metrics.auc(fpr_keras,tpr_keras)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
bling,pandas.read_csv('diamonds.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris_data,sklearn.datasets.load_iris(),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(iris_data.data,iris_data.target,test_size=0.1)",CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
News_Dataset,pandas.DataFrame(data=News_Dataset_dict),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
news_content,"pandas.read_csv('items.csv',index_col=False)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
lgnd,"matplotlib.pyplot.legend(fontsize=""12"",mode=""Expanded"",
scatterpoints=1,loc=""best"",title=""CityTypes"")",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_urban_ride_count,numpy.mean(urban_ride_count),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_suburban_ride_count,numpy.mean(suburban_ride_count),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_rural_ride_count,numpy.mean(rural_ride_count),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_urban_fares,numpy.mean(urban_fares),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_suburban_fares,numpy.mean(suburban_fares),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_rural_fares,numpy.mean(rural_fares),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_urban_drivers,numpy.mean(urban_drivers),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_suburban_drivers,numpy.mean(suburban_drivers),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_rural_drivers,numpy.mean(rural_drivers),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
median_urban_ride_count,numpy.median(urban_ride_count),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
median_suburban_ride_count,numpy.median(suburban_ride_count),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
median_rural_ride_count,numpy.median(rural_ride_count),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
median_urban_fares,numpy.median(urban_fares),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
median_suburban_fares,numpy.median(suburban_fares),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
median_rural_fares,numpy.median(rural_fares),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
median_urban_drivers,numpy.median(urban_drivers),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
median_suburban_drivers,numpy.median(suburban_drivers),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
median_rural_drivers,numpy.median(rural_drivers),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pyber_data_df,"pandas.merge(ride_data_df,city_data_df,on=[""city"",""city""],how='left')",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
city_data_df,pandas.read_csv(file_to_read_city),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ride_data_df,pandas.read_csv(file_to_read_ride),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mode_urban_ride_count,scipy.stats.mode(urban_ride_count),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mode_suburban_ride_count,scipy.stats.mode(suburban_ride_count),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mode_rural_ride_count,scipy.stats.mode(rural_ride_count),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mode_urban_fares,scipy.stats.mode(urban_fares),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mode_suburban_fares,scipy.stats.mode(suburban_fares),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mode_rural_fares,scipy.stats.mode(rural_fares),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mode_urban_drivers,scipy.stats.mode(urban_drivers),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mode_suburban_drivers,scipy.stats.mode(suburban_drivers),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mode_rural_drivers,scipy.stats.mode(rural_drivers),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df['count'],"pandas.Series(
[rawToCount(x)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(corpus_path),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
vocab,collections.Counter(),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
summary,collections.defaultdict(list),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'Actual':y_test,'Predicted':y_pred})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'Actual':y_test,'Predicted':y_pred})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('kc_house_data.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,"numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(12,9)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kernel,"numpy.ones((9,9)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
test_image,"numpy.expand_dims(test_image,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
"fig,ax1","matplotlib.pyplot.subplots(figsize=(23,8)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
tweet,json.loads(dados),CLUSTER_1,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(dataset),CLUSTER_1,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
word_count,pandas.DataFrame(cv.get_feature_names(),CLUSTER_1,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
results,"sklearn.model_selection.cross_val_score(estimator,X,encoded_Y,cv=kfold)",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
kfold,"sklearn.model_selection.StratifiedKFold(n_splits=10,shuffle=True,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
dataframe,"pandas.read_csv(""C:\\Users\\venkata_kalluri\\Desktop\\deep\\sonar.csv"",header=None)",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('../data/rossmann.csv',skipinitialspace=True,low_memory=False)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data['Date'],pandas.to_datetime(data['Date']),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
m2,scipy.sparse.csr_matrix(x_df),CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
m,scipy.sparse.csr_matrix(x_df),CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
m2,scipy.sparse.coo_matrix(x_df),CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
m,scipy.sparse.coo_matrix(x_df),CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
m2,"scipy.sparse.coo_matrix((m2_data,(m2_rows,m2_cols)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
m2,"scipy.sparse.coo_matrix((m2_data,(m2_rows,m2_cols)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
col_df,"pandas.read_csv(file_path,usecols=['ProductName'],squeeze=True)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
m2_rows,"numpy.concatenate((m2.row,m.row+max(m2_rows)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
m2_data,"numpy.concatenate((m2.data,m.data)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
m2_rows,"numpy.concatenate((m2.row,m.row+max(m2_rows)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
m2_data,"numpy.concatenate((m2.data,m.data)",CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
m2_cols,numpy.hstack(alist),CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
m2_cols,numpy.hstack(alist),CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
unames,numpy.unique(sparse_colnames),CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
unames,numpy.unique(sparse_colnames),CLUSTER_20,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scripps,"pandas.read_csv('fldav_ljo.csv',skiprows=68)",CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
scripps,"pandas.read_csv('fldav_ljo.csv',skiprows=68,usecols=[0,1,5,6])",CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
scripps,"pandas.read_csv('fldav_ljo.csv',skiprows=68,usecols=['Date','Hr','Flags','CO2'])",CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
scripps,"pandas.read_csv('fldav_ljo.csv',skiprows=68,usecols=[0,1,5,6],index_col='Date')",CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
scripps,"pandas.read_csv('fldav_ljo.csv',skiprows=68,usecols=[0,1,5,6])",CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
scripps,"pandas.read_csv('fldav_ljo.csv',skiprows=68,usecols=[0,1,5,6])",CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
scripps,"pandas.read_csv(url,skiprows=69,usecols=[0,1,5,6],parse_dates=[[0,1]],index_col=[0])",CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
mlo,"pandas.read_csv(url,skiprows=21,names=['Date','CO2'],index_col='Date',parse_dates=True)",CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
scripps.Date,pandas.to_datetime(scripps.Date),CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_fit,"numpy.linspace(1970,2050)",CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
polynominal,numpy.poly1d(a),CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.polyfit(x,y,fit_order)",CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.ravel(r*np.sin(theta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.ravel(r*np.cos(theta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.ravel(r*np.cos(theta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.ravel(r*np.sin(theta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,numpy.ravel(w*np.sin(phi),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
yline,numpy.cos(zline),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ydata,numpy.cos(zdata),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xline,numpy.sin(zline),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xdata,numpy.sin(zdata),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
zline,"numpy.linspace(0,15,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-6,6,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(-6,6,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r,"numpy.linspace(0,6,20)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
theta,"numpy.linspace(-0.9*np.pi,0.8*np.pi,40)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
theta,"numpy.linspace(0,2*np.pi,30)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.25,0.25,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"r,theta","numpy.meshgrid(r,theta)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"w,theta","numpy.meshgrid(w,theta)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df1,pandas.DataFrame(main_dic),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.read_csv(fullpath),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data2,"pandas.read_csv(mainpath+""customer-churn-model/CustomerChurnModel.txt"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data_cols,"pandas.read_csv(mainpath+""customer-churn-model/CustomerChurnColumns.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data2,"pandas.read_csv(mainpath+""customer-churn-model/CustomerChurnModel.txt"",header=None,names=data_col_list)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df4,"pandas.read_csv(outfile,sep=""\t"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
crime_anal_norm['범죄'],"numpy.sum(crime_anal_norm[col],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
crime_anal_norm['검거'],"numpy.sum(crime_anal_norm[col],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
crime_anal_raw['검거'],"numpy.sum(tmp,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y1,numpy.sin(x),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,14,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
crime_anal_norm,"pandas.DataFrame(x_scaled,columns=col,index=crime_anal.index)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
crime_anal,"pandas.pivot_table(crime_anal_raw,index='구별',aggfunc=np.sum)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
crime_anal_police,"pandas.read_csv('../data/02.crime_in_Seoul.csv',thousands=',',
encoding='euc-kr')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
crime_anal_raw,"pandas.read_csv('../data/02.crime_in_Seoul_include_gu_name.csv',
encoding='utf-8')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
crime_anal_raw,"pandas.read_csv('../data/02.crime_in_Seoul_include_gu_name.csv',
encoding='utf-8',index_col=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
result_CCTV,"pandas.read_csv('../data/01.CCTV_result.csv',encoding='UTF-8',
index_col='구별')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
state_data,pandas.read_csv(state_unemployment),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_excel(""../data/02.sales-funnel.xlsx"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tips,"seaborn.load_dataset(""tips"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tips,"seaborn.load_dataset(""tips"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
flights,"seaborn.load_dataset(""flights"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,"seaborn.load_dataset(""iris"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
anscombe,"seaborn.load_dataset(""anscombe"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
geo_str,"json.load(open(geo_path,encoding='utf-8')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('/data/companylist.nyse.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('/data/companylist.nasdaq.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
users,"pandas.read_csv('takehome_users.csv',encoding='latin-1')",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
eng,pandas.read_csv('takehome_user_engagement.csv'),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
users['creation_time'],pandas.to_datetime(users.creation_time),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(15,4)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(15,4)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(15,4)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(15,4)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(data,columns=column_names)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.gcf(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(5,5,1+i)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ind,numpy.arange(N),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
news_df,"pandas.DataFrame({""news_source"":news_source,""compound"":compound,""positive"":pos,""neutral"":neu,""negative"":neg,""tweets_ago"":tweets_ago})",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_news_df2,pandas.DataFrame(mean_news_df),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bbc,"matplotlib.pyplot.scatter(bbc_list['tweets_ago'],bbc_list['compound'],marker=""o"",facecolors=""red"",edgecolors=""black"",alpha=0.75,label=""BBC"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cbs,"matplotlib.pyplot.scatter(cbs_list['tweets_ago'],cbs_list['compound'],marker=""o"",facecolors=""blue"",edgecolors=""black"",alpha=0.75,label=""CBS"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cnn,"matplotlib.pyplot.scatter(cnn_list['tweets_ago'],cnn_list['compound'],marker=""o"",facecolors=""green"",edgecolors=""black"",alpha=0.75,label=""CNN"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
foxnews,"matplotlib.pyplot.scatter(foxnews_list['tweets_ago'],foxnews_list['compound'],marker=""o"",facecolors=""yellow"",edgecolors=""black"",alpha=0.75,label=""FoxNews"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nytimes,"matplotlib.pyplot.scatter(nytimes_list['tweets_ago'],nytimes_list['compound'],marker=""o"",facecolors=""orange"",edgecolors=""black"",alpha=0.75,label=""NYTimes"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
node_neighbors_dict,collections.defaultdict(list),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/'
'housing/housing.data',
header=None,
sep='\s+')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('https://raw.githubusercontent.com/rasbt/python-machine-learning-book/master/code/datasets/housing/housing.data',
header=None,sep='\s+')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hm,"seaborn.heatmap(cm,
cbar=True,
annot=True,
square=True,
fmt='.2f',
annot_kws={'size':15},
yticklabels=cols,
xticklabels=cols)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
line_X,"numpy.arange(3,10,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_fit,"numpy.arange(250,600,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_fit,numpy.arange(X.min(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_fit,numpy.arange(X_log.min(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"numpy.array([258.0,270.0,294.0,
320.0,342.0,368.0,
396.0,446.0,480.0,586.0])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.array([236.4,234.4,252.8,
298.6,314.2,342.2,
360.8,368.0,391.2,
390.8])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.w_,numpy.zeros(1+X.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
w,numpy.zeros(X.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
w,"numpy.dot(z,numpy.dot(Xb.T,y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_log,numpy.log(X),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
outlier_mask,numpy.logical_not(inlier_mask),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_sqrt,numpy.sqrt(y),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Xb,"numpy.hstack((np.ones((X.shape[0],1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,numpy.corrcoef(df[cols].values.T),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
z,"numpy.linalg.inv(np.dot(Xb.T,Xb)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_x,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_y,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
slr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
slr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ransac,sklearn.linear_model.RANSACRegressor(LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linear_r2,"sklearn.metrics.r2_score(y,regr.predict(X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quadratic_r2,"sklearn.metrics.r2_score(y,regr.predict(X_quad)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cubic_r2,"sklearn.metrics.r2_score(y,regr.predict(X_cubic)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linear_r2,"sklearn.metrics.r2_score(y_sqrt,regr.predict(X_log)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quadratic,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quadratic,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cubic,sklearn.preprocessing.PolynomialFeatures(degree=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,sklearn.tree.DecisionTreeRegressor(max_depth=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,
criterion='mse',
random_state=1,
n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(kclusters),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
Auck_df,"pandas.DataFrame({""Neighborhood"":neighborhoodList})",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_coords,"pandas.DataFrame(coords,columns=['Latitude','Longitude'])",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
venues_df,pandas.DataFrame(venues),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
Auck_onehot,"pandas.get_dummies(venues_df[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"requests.get(""https://en.wikipedia.org/wiki/Category:Suburbs_of_Auckland"")",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tmid,"numpy.array([numpy.array(f(standard_deviation(tab[0+3*i:3+i*3:1,2])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tmid,"numpy.array([numpy.array(f(standard_deviation(tab32[i*3:3+i*3:1,2])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,"numpy.fromfunction(lambdai,j:float(data[i,j])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tab32,"numpy.hstack((tab3[::,0:1]/100.0,tab3[::,1:2],tab3[::,2:3])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,numpy.vectorize(lambdaf:f/100),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(res),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['year'],pandas.DatetimeIndex(df['date_as_integer']),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['month'],pandas.DatetimeIndex(df['date_as_integer']),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
returning_data,"pandas.merge(new_issue_data,new_issue_data1.rename(columns={'voter_we_vote_id1':'voter_we_vote_id'})",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
returning_data,"pandas.merge(new_issue_data,new_issue_data1.rename(columns={'voter_we_vote_id1':'voter_we_vote_id'})",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
returning_data,"pandas.merge(new_issue_data,new_issue_data1.rename(columns={'voter_we_vote_id1':'voter_we_vote_id'})",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
returning_data,"pandas.merge(new_issue_data,new_issue_data1.rename(columns={'voter_we_vote_id1':'voter_we_vote_id'})",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
returning_data,"pandas.merge(new_issue_data,new_issue_data1.rename(columns={'voter_we_vote_id1':'voter_we_vote_id'})",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
returning_data,"pandas.merge(new_issue_data,new_issue_data1.rename(columns={'voter_we_vote_id1':'voter_we_vote_id'})",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['date_as_integer'],pandas.to_datetime(df['date_as_integer'].astype(str),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['date_as_integer'],pandas.to_datetime(df['date_as_integer'].astype(str),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=""voter_we_vote_id"",y=""action_constant_text"",data=voters_group)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=""state_code"",y=""voter_we_vote_id"",data=voters_group_state)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=""voter_we_vote_id"",y=""action_constant_text"",data=user_ballot_group)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=""voter_we_vote_id"",y=""action_constant_text"",data=user_issuefollow_group)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=""voter_we_vote_id"",y=""action_constant_text"",data=user_candidate_group)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=""voter_we_vote_id"",y=""action_constant_text"",data=user_account_group)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=""voter_we_vote_id"",y=""action_constant_text"",data=user_organization_group)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=""voter_we_vote_id"",y=""action_constant_text"",data=user_ballot_group)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=""voter_we_vote_id"",y=""action_constant_text"",data=user_ballot_group)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(y=""voter_we_vote_id"",x=""year"",data=voters_group)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=""Isreturning"",y=""voter_we_vote_id"",orient=""v"",data=user_issue_group)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,"seaborn.barplot(x=""val"",y=""voter_we_vote_id"",data=user_issue_group1)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig1,ax1",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig1,ax1",matplotlib.pyplot.subplots(figsize=fig_dims),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,json.loads(text),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
pdf,pandas.read_csv('combined_dataframes.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
iris_df,"pandas.DataFrame(data=iris.data,columns=iris.feature_names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris_reduced,pandas.DataFrame(data=PCA(n_components=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris_reduced,pd.DataFrame(data=sklearn.decomposition.PCA(n_components=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
CV_res,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=10,scoring='accuracy')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
CV_res,"sklearn.model_selection.cross_val_score(model,X_train,y_train,cv=10,scoring='accuracy')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(iris_df.iloc[:,:4],iris_df.iloc[:,4],test_size=0.2,random_state=seed)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
report,"sklearn.metrics.classification_report(y_test,predictions,output_dict=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_domain_dict,"pandas.read_excel(base_path+""Pitchbook_Crunchbase_Tracxn_Raw/Don'ttouch""+version_id+""/""+version_id+"".xlsx"",version_id+""website_url_scrape"",header=None,skiprows=1,names=['company_name','domain'],usecols=""A,B"")",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
result,requests.get('http://'+k),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
source,requests.get('https://www.alexa.com/siteinfo/'+k),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
pattern_global_pagerank,"re.compile(r'(?<=\""global\"":)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
pattern_inbound_links,"re.compile(r'(?<=box1-r\"">)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
pattern_top_search_keywords,"re.compile(r""(?<=llipsis\'title=\')",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df_a,"pandas.DataFrame([{""a"":1,""b"":4},{""a"":2,""b"":5},{""a"":3,""b"":6},
{""c"":1}])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_b,"pandas.DataFrame([{""c"":2,""d"":7},{""c"":3,""d"":8}])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
left,"pandas.DataFrame({'key1':['foo','foo','bar'],
'key2':['one','two','one'],
'lval':[1,2,3]})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
right,"pandas.DataFrame({'key1':['foo','foo','bar','bar'],
'key2':['one','one','one','two'],
'rval':[4,5,6,7]})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
idxs,numpy.flatnonzero(y_train==y),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
val_acc,numpy.mean(y_pred_val==y_val),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
train_acc,numpy.mean(y_pred_train==y_train),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
r,"requests.get(""https://www.google.co.kr"")",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
html,"requests.get(""https://www.google.co.kr"")",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
html_website_ranking,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
html_website_ranking,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
html_music,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
html_music,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
html_music,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
html_image,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
html_image,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
html_pixabay_image,requests.get(URL),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
html_image,requests.get(pixabay_image_url),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
html_image_url,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
html_image,requests.get(img_url),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(website_ranking_dict,columns=['Website'],index=range(1,len(website_ranking_address)",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
mu_proposal,"scipy.stats.norm(mu_current,proposal_width)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
likelihood_current,"scipy.stats.norm(mu_current,1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
likelihood_proposal,"scipy.stats.norm(mu_proposal,1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prior_current,"scipy.stats.norm(mu_prior_mu,mu_prior_sd)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prior_proposal,"scipy.stats.norm(mu_prior_mu,mu_prior_sd)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prior_current,"scipy.stats.norm(mu_prior_mu,mu_prior_sd)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prior_proposal,"scipy.stats.norm(mu_prior_mu,mu_prior_sd)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prior,"scipy.stats.norm(mu_prior_mu,mu_prior_sd)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
likelihood_current,"scipy.stats.norm(mu_current,1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
likelihood_proposal,"scipy.stats.norm(mu_proposal,1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,"scipy.stats.norm(loc=mu_proposal,scale=1)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
sales,pandas.read_csv('../input/BlackFriday.csv'),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('raw-data/shares.csv',delimiter=',')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_combined,"pandas.concat([df_whale,df_algo,df_sp_returns],axis=1,join='inner')",CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_0
df_airlines,"pandas.concat([df_AAL,df_UAL,df_HA,df_JBLU,df_NASD],axis=1,join='inner')",CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_0
df_joined,"pandas.concat([df_combined,airlines_daily_ret],axis=1,join='inner')",CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_0
df_whale,"pandas.read_csv(whale_file,index_col='Date',parse_dates=True,infer_datetime_format=True)",CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_0
df_algo,"pandas.read_csv(algo_file,index_col='Date',parse_dates=True,infer_datetime_format=True)",CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_0
df_sp500,"pandas.read_csv(sp500_file,index_col='Date',parse_dates=True,infer_datetime_format=True)",CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_0
df_AAL,"pandas.read_excel(AAL_file,index_col='Date',parse_dates=True,infer_datetime_format=True)",CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_0
df_UAL,"pandas.read_excel(UAL_file,index_col='Date',parse_dates=True,infer_datetime_format=True)",CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_0
df_HA,"pandas.read_excel(HA_file,index_col='Date',parse_dates=True,infer_datetime_format=True)",CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_0
df_JBLU,"pandas.read_excel(JBLU_file,index_col='Date',parse_dates=True,infer_datetime_format=True)",CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_0
df_NASD,"pandas.read_excel(NASD_file,index_col='Date',parse_dates=True,infer_datetime_format=True)",CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_0
xgrid,"numpy.arange(x[0]-dx,x[1]+dx,steps[smallest_dimension])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ygrid,"numpy.arange(y[0]-dy,y[1]+dy,steps[smallest_dimension])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
coordinates_boundaries,"numpy.array([[Xmin,Xmax],[Ymin,Ymax]])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
B,numpy.array(nugget_),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
max_lag_distance,numpy.amax(distance_matrix),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
min_lag_distance,numpy.amin(distance_matrix),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
A,"numpy.mean(np.sum(residuals_clr[f""{ncomp}_{radius}""]**2,axis=1)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
interpolated_modal[mineral],"numpy.reshape(interpolated_reverse_clr.loc[:,mineral].values,
(grid[1].shape[0],grid[0].shape[0])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
assertgrid[0].shape[0]*grid[1].shape[0],=numpy.sum(np.isclose(interpolated_reverse_clr.sum(axis=1),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_spacing,dx","numpy.linspace(x[0],x[1],n_points,retstep=True)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"y_spacing,dy","numpy.linspace(y[0],y[1],n_points,retstep=True)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"numpy.stack((coordinates_utm[""X""],
coordinates_utm[""Y""])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
group_items_df,pandas.DataFrame(group_items),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
nvalues_control_points[radius],"pandas.Series(temp,index=coordinates_utm.index)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
temp,"pandas.merge(residuals_clr[f""{ncomp}_{radius}""],
pd.DataFrame(nvalues_control_points[radius],
columns=[""n_closest_points""])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rent,"pandas.read_csv('../OPENDATA_RENTAL_ZONE_CALL_A_BIKE.csv',sep=';')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
p,"matplotlib.pyplot.bar(x_plot+1,city_D_num)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
p,"matplotlib.pyplot.bar(x_plot+1,city_S_num)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_plot,numpy.arange(len(city_D_num),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_plot,numpy.arange(len(city_S_num),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
_diff,"pandas.DataFrame([_val],columns=_df_overall_airON_desc.columns)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
_converte,pandas.Series(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
_avg_values,pandas.Series(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
_df_compare_135_airON['room'],"pandas.Series(_135_room_airON,index=_df_compare_135_airON.index)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
_df_compare_133_airON['room'],"pandas.Series(_133_room_airON,index=_df_compare_133_airON.index)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
_df_compare_134_airON['room'],"pandas.Series(_134_room_airON,index=_df_compare_134_airON.index)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
_df_compare_135_airON,"pandas.concat(_list_135,axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
_df_compare_133_airON,"pandas.concat(_list_133,axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
_df_compare_134_airON,"pandas.concat(_list_134,axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
_df_overall_airON_desc,"pandas.concat(_list_overviews,axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
_135_longterm_ON_air,"pandas.read_csv('sensor_13514_air_ON_temp.txt',sep='\t',header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
_133_longterm_ON_air,"pandas.read_csv('sensor_13314_air_ON_temp_III.txt',sep='\t',header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
_134_longterm_ON_air,"pandas.read_csv('sensor_13414_air_ON_temp.txt',sep='\t',header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
X,numpy.array(X),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y,numpy.array(Y),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
theta,numpy.zeros(len(X[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
h,"numpy.dot(X,theta)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
h,"numpy.dot(X,theta)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y_test,"numpy.dot(X,theta)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
avg,"numpy.mean(X[:,i])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
n,numpy.size(X[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
deviation,"numpy.std(X[:,i])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_norm,numpy.column_stack((np.ones(len(X_norm),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,numpy.column_stack((np.ones(len(X),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
delta_hours,"numpy.linspace(0,6,100)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'Actual':ytest,'Predicted':ypred})",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('/home/muskan/personal/Datasets/student_scores.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1,numpy.arange(max(data.Hours),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
actual_0,"numpy.array([0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predicted_0,"numpy.array([0.19015288,0.23872404,0.42707312,0.15308362,0.2951875,
0.23475641,0.17882447,0.36320878,0.33505476,0.202608,
0.82044786,0.69750253,0.60272784,0.9032949,0.86949819,
0.97368264,0.97289232,0.75356512,0.65189193,0.95237033,
0.91529693,0.8458463])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
actual_1,"numpy.array([0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
0.,0.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,
1.,1.,1.,1.])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predicted_1,"numpy.array([0.41310733,0.43739138,0.22346525,0.46746017,0.58251177,
0.38989541,0.43634826,0.32329726,0.01114812,0.41623557,
0.54875741,0.48526472,0.21747683,0.05069586,0.16438548,
0.68721238,0.72062154,0.90268312,0.46486043,0.99656541,
0.59919345,0.53818659,0.8037637,0.272277,0.87428626,
0.79721372,0.62506539,0.63010277,0.35276217,0.56775664])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
actual_2,"numpy.array([1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,0.,
0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predicted_2,"numpy.array([0.07058193,0.57877375,0.42453249,0.56562439,0.13372737,
0.18696826,0.09037209,0.12609756,0.14047683,0.06210359,
0.36812596,0.22277266,0.79974381,0.94843878,0.4742684,
0.80825366,0.83569563,0.45621915,0.79364286,0.82181152,
0.44531285,0.65245348,0.69884206,0.69455127])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
actual_0r,"numpy.array([0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,1.,
1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predicted_0r,"numpy.array([0.23563765,0.16685597,0.13718058,0.35905335,0.18498365,
0.20730027,0.14833803,0.18841647,0.01205882,0.0101424,
0.10170538,0.94552901,0.72007506,0.75186747,0.85893269,
0.90517219,0.97667347,0.86346504,0.72267683,0.9130444,
0.8319242,0.9578879,0.89448939,0.76379055])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
actual_1r,"numpy.array([0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,
1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predicted_1r,"numpy.array([0.13832748,0.0814398,0.16136633,0.11766141,0.31784942,
0.14886991,0.22664977,0.07735617,0.07071879,0.92146468,
0.87579938,0.97561838,0.75638872,0.89900957,0.93760969,
0.92708013,0.82003675,0.85833438,0.67371118,0.82115125,
0.87560984,0.77832734,0.7593189,0.81615662,0.11906964,
0.18857729])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
actual_10,"numpy.array([0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
0.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,
1.,1.,1.])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predicted_10,"numpy.array([0.29340574,0.47340035,0.1580356,0.29996772,0.24115457,0.16177793,
0.35552878,0.18867804,0.38141962,0.20367392,0.26418924,0.16289102,
0.27774892,0.32013135,0.13453541,0.39478755,0.96625033,0.47683139,
0.51221325,0.48938235,0.57092593,0.21856972,0.62773859,0.90454639,0.19406537,
0.32063043,0.4545493,0.57574841,0.55847795])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
actual_11,"numpy.array([0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
0.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
predicted_11,"numpy.array([0.35929566,0.61562123,0.71974688,0.24893298,0.19056711,0.89308488,
0.71155538,0.00903258,0.51950535,0.72153302,0.45936068,0.20197229,0.67092724,
0.81111343,0.65359427,0.70044585,0.61983513,0.84716577,0.8512387,
0.86023125,0.7659328,0.70362246,0.70127618,0.8578749,0.83641841,
0.62959491,0.90445368])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"prec,rec,thresh","sklearn.metrics.precision_recall_curve(actual,predicted)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thr","sklearn.metrics.roc_curve(actual,predicted)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thr","sklearn.metrics.roc_curve(actual,predicted)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thr","sklearn.metrics.roc_curve(actual,predicted)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(dictFb,columns=['comment','person','time'])",CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_train,pandas.concat(frames),CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_train,"pandas.read_csv('./measuring-customer-happiness/train_hp.csv',encoding='utf-8')",CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
df_test,"pandas.read_csv('./measuring-customer-happiness/test_hp.csv',encoding='utf-8')",CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
y,"numpy.array(list(map(lambdax:1ifx==""happy""else0,y)",CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
sentence,"re.sub('[^a-zA-Z]','',sentence)",CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
sentence,"re.sub(r""\s+[a-zA-Z]\s+"",'',sentence)",CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
sentence,"re.sub(r'\s+','',sentence)",CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
TAG_RE,re.compile(r'<[^>]+>'),CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.20,random_state=42)",CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
vector_dimensions,"numpy.asarray(records[1:],dtype='float32')",CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
embedding_matrix,"numpy.zeros((vocab_size,100)",CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
json_data,json.loads(response.text),CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
response,requests.get(url_long),CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
born,"datetime.datetime.strptime(date,'%d%m%Y')",CLUSTER_24,CLUSTER_12,CLUSTER_3,CLUSTER_6,CLUSTER_0
HP,pandas.read_csv('E:/DataSet-Housing_Expenditure.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
m_reg,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ind_im,numpy.argwhere(eig_vals_im==0),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ind_real,numpy.argwhere(eig_vals_real==0),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
num,numpy.exp(-eta*pvec.loc[i]*((xvec[j]/p_dot_x),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"eig_vals_im,eig_vals_real",numpy.imag(eig_vals),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
null_ind,"numpy.intersect1d(ind_im,ind_real)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
stocks,numpy.unique(stocks_list),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"eig_vals,eig_vecs",numpy.linalg.eig(Amat),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
regret_tab,"pandas.DataFrame(index=p.index,columns=stocks_pairs_str)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
wtab,"pandas.DataFrame(index=xtab.index,columns=xtab.columns)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
A,"pandas.DataFrame(index=stocks,columns=stocks)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
delta_tab,"pandas.DataFrame(index=xtab.index,columns=delta0.index)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ptab,"pandas.DataFrame(index=xtab.index,columns=xtab.columns)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
stocks_draws,"pandas.DataFrame(index=range(0,ndraws)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
wvec,pandas.Series(index=pvec.index),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pinit,"pandas.Series(index=x.columns,data=1/len(x.columns)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
kernel_vec_pd,"pandas.Series(index=A.columns,data=choose_proba_distrib(kernel_vecs)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
delta,pandas.Series(data=1/len(pairs_index),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
delta,pandas.Series(index=delta_prev.index),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pinit,"pandas.Series(index=x.columns,data=1/len(x.columns)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
int_reg_sum_bp1exp,"pandas.Series(data=0,index=returns.index[:nperiods])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
wfact_sum_bp1exp,"pandas.Series(data=0,index=returns.index[:nperiods])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
int_reg_sum_eg,"pandas.Series(data=0,index=returns.index[:nperiods])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
wfact_sum_eg,"pandas.Series(data=0,index=returns.index[:nperiods])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pinit,"pandas.Series(index=x.columns,data=1/len(x.columns)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_nyse,"pandas.read_csv(data_path,index_col=""Date"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_nyse.index,pandas.to_datetime(data_nyse.index),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"A.loc[:,col]","pandas.to_numeric(A.loc[:,col])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(10.0,6.5)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig1,axes","matplotlib.pyplot.subplots(3,1,figsize=(10.0,13.0)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,axes",matplotlib.pyplot.subplots(len(etas),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('/Users/lucasfeitosa/Downloads/Prefeitura/Despesas/recife-dados-despesas-2017.csv',sep="";"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df['l_r'],numpy.log(df.N_EMPENHO/df.N_EMPENHO.shift(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
count_orgao,"df.groupby('ORGAO')['CONTAGEM'].sum().sort_values().plot(kind='barh',color=random.choice(cores)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sum_orgao_pago,"df.groupby('ORGAO')['VALOR_PAGO'].sum().sort_values().plot(kind='barh',color=random.choice(cores)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
count_licitacao,"df.groupby('MODALIDADE_LICITACAO')['CONTAGEM'].sum().sort_values().plot(kind='barh',color=random.choice(cores)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sec_mod_lici_count_nao_info,"sec_mod_lici.groupby('ORGAO')['VALOR_PAGO'].sum().sort_values().plot(kind='barh',color=random.choice(cores)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
cred_nao_info_valor,"cred_nao_info.groupby('ORGAO')['VALOR_PAGO'].sum().sort_values().plot(kind='barh',color=random.choice(cores)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
X,numpy.arange(len(interactions_counter[nameIndex]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
table,"re.search('[abcABC]{1}[1]{1}[0-7]{1}|[abcABC]{1}[1-9]{1}',message.text.lower()",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
inputs,"numpy.column_stack((xs,zs)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
	char_json,json.load(json_file),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
nav,"pandas.read_hdf('../data/interim/nav_converted.h5','table')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
paros,"pandas.read_hdf('../data/interim/paros_converted.h5','table')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"hist,edges","np.histogram(paros.pressure.values,bins=numpy.arange(paros_min,paros_max)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
R,numpy.array([[np.cos(theta),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
v,"numpy.transpose(np.array([nav.x.values,nav.y.values])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
theta,numpy.deg2rad(omega),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"hist,edges","numpy.histogram(paros.pressure.values,bins=np.arange(paros_min,paros_max)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
contents,os.listdir(data_dir),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
files,os.listdir(class_path),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
labels,numpy.array([eachforeachinreader]),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
codes,"numpy.fromfile(f,dtype=np.float32)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
images,numpy.concatenate(batch),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
codes,"numpy.concatenate((codes,codes_batch)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
lb,sklearn.preprocessing.LabelBinarizer(),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
ss,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
clf,"sklearn.svm.SVC(C=1,kernel='linear',probability=True)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
np_pop,numpy.array(pop),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
plt.scatter(x,"gdp_cap,y=life_exp,s=numpy.array(pop)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
plt.scatter(x,"gdp_cap,y=life_exp,s=numpy.array(pop)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
J_plus,"numpy.zeros((num_parameters,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
J_minus,"numpy.zeros((num_parameters,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
gradapprox,"numpy.zeros((num_parameters,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
J,"numpy.dot(theta,x)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Z1,"numpy.dot(W1,X)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Z2,"numpy.dot(W2,A1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Z3,"numpy.dot(W3,A2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
logprobs,numpy.multiply(-np.log(A3),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
thetaplus,numpy.copy(parameters_values),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
thetaminus,numpy.copy(parameters_values),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
numerator,numpy.linalg.norm(grad-gradapprox),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
denominator,numpy.linalg.norm(grad),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
numerator,numpy.linalg.norm(grad-gradapprox),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
denominator,numpy.linalg.norm(grad),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
"sub_df.loc[:,i]","numpy.array(sub_df.loc[:,i])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l_MSE,numpy.mean((lasso.predict(testX),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l_RMSE_in_dollars,numpy.mean((np.exp(lasso.predict(testX),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l_RMSE_in_dollars,numpy.mean((np.exp(-l_para_search.predict(lasso_df_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r_MSE,numpy.mean((ridge.predict(testX),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r_RMSE_in_dollars,numpy.mean((np.exp(ridge.predict(testX),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
alphaRange,"numpy.linspace(10e-6,0.05,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r_alphaRange,"numpy.linspace(10e-3,100,100)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2,pandas.DataFrame(cat_dict),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lassoCoef,"pandas.Series(model.coef_,index=dataframe.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge_coef,"pandas.Series(model.coef_,index=dataframe.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest_best_feat,"pandas.Series(randomForest.feature_importances_,index=trainX.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('purged_dummified_clustered_df.csv',index_col='Id')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv('purged_dummified_clustered_df_test.csv',index_col='Id')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ols,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,sklearn.linear_model.Ridge(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r_para_search,GridSearchCV(estimator=sklearn.linear_model.Ridge(max_iter=5000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recursive_r_para_search,GridSearchCV(estimator=sklearn.linear_model.Ridge(max_iter=5000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.linear_model.Lasso(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
para_search,GridSearchCV(estimator=sklearn.linear_model.Lasso(max_iter=5000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l_para_search,"GridSearchCV(estimator=sklearn.linear_model.Lasso(max_iter=5000,tol=0.007)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elasticnet,sklearn.linear_model.ElasticNet(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lassocv,sklearn.linear_model.LassoCV(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elasticnetcv,sklearn.linear_model.ElasticNetCV(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,sklearn.tree.DecisionTreeRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
abr,sklearn.ensemble.AdaBoostRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bagging,sklearn.ensemble.BaggingRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbm,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
randomForest,sklearn.ensemble.RandomForestRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
randomForest,sklearn.ensemble.RandomForestRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"trainX,testX,trainY,testY","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"trainX,testX,trainY,testY","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"trainX,testX,trainY,testY","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
para_search,sklearn.model_selection.GridSearchCV(estimator=Lasso(max_iter=5000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l_para_search,"sklearn.model_selection.GridSearchCV(estimator=Lasso(max_iter=5000,tol=0.007)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r_para_search,sklearn.model_selection.GridSearchCV(estimator=Ridge(max_iter=5000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recursive_r_para_search,sklearn.model_selection.GridSearchCV(estimator=Ridge(max_iter=5000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_search_forest,"sklearn.model_selection.GridSearchCV(ensemble.RandomForestRegressor(n_estimators=100,criterion=""mse"",\
min_samples_leaf=2,min_samples_split=2,\
bootstrap=True,oob_score=True,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
recursive_f_para_search,"sklearn.model_selection.GridSearchCV(ensemble.RandomForestRegressor(n_estimators=100,criterion=""mse"",\
min_samples_leaf=2,min_samples_split=2,\
bootstrap=True,oob_score=True,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
I,matplotlib.pyplot.imread('earth.jpg'),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
I,matplotlib.pyplot.imread('feather.jpg'),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(10,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fil,"numpy.array([[10,10,0],[10,0,-10],[0,-10,-10]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fil,"numpy.array([[10,10,0],[10,0,-10],[0,-10,-10]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Ib,numpy.zeros(I.shape),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Out,numpy.zeros(I.shape[:2]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Ib,numpy.zeros(I.shape),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Out,numpy.zeros(I.shape[:2]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Ib,numpy.zeros(I.shape),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
f,numpy.ones(x.size),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
m,"numpy.ones((2,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
f,numpy.ones(x.shape),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"Ib[...,chan]","scipy.ndimage.correlate(I[...,chan],fil)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
iris,sklearn.datasets.load_iris(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(iris['data'],iris['target'])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=25),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
dataset,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
all_results_df,pandas.DataFrame(all_results_list),CLUSTER_1,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
date_string,"time.strftime(""%-m.%-d.%y"")",CLUSTER_1,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
y_pred_fix,"numpy.array([iforiinmap(fixer,y_pred_round)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
dataset,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
alg,sklearn.linear_model.LinearRegression(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred_fix)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../datasets/ch1ex1.csv'),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
model,sklearn.cluster.KMeans(n_clusters=3),CLUSTER_3,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_0
cos,numpy.zeros(((xn-x0),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
expected_output,numpy.zeros((len(cos),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"expected_output[i,0]",numpy.mean(cos[i+1:i+lahead+1]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"Q,R",scipy.linalg.qr(H),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
lm,"sklearn.linear_model.LogisticRegression(penalty='none',solver='newton-cg',tol=1e-5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('ds3_train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('ds3_test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_valid,pandas.read_csv('ds3_valid.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_valid,numpy.array(X_valid),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Y,"numpy.ravel(df.drop(['t','x_1','x_2'],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
T,"numpy.ravel(df.drop(['y','x_1','x_2'],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Y,numpy.ravel(Y),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_preds_Y,numpy.ravel(y_preds_Y),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Y_valid,"numpy.ravel(df_valid.drop(['t','x_1','x_2'],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
T_valid,"numpy.ravel(df_valid.drop(['y','x_1','x_2'],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_preds_val,numpy.ravel(y_preds_val),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm.coef_,numpy.ravel(lm.coef_),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
intercept,numpy.matrix(np.ones(len(X),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
intercept,numpy.matrix(np.ones(len(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
intercept,numpy.matrix(np.ones(len(X_valid),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"numpy.append(intercept,X,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,"numpy.append(intercept,X_test,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_valid,"numpy.append(intercept,X_valid,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('ADHD.txt',sep='',header=0)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
notes,"pandas.read_sql_query(""SELECT*from{}"".format(table_name)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
notes,"pandas.read_sql_query(""SELECT*from{}"".format(table_name)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
notes,"pandas.read_sql_query(""SELECT*from{}"".format(table_name)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
documents,"pandas.read_sql_query(""SELECT*from{}"".format(table_name)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
documents,"pandas.read_sql_query(""SELECT*from{}"".format(table_name)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
documents,"pandas.read_sql_query(""SELECT*from{}"".format(table_name)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
notes,"pandas.read_sql_query(""SELECT*from{}"".format(table_name)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
notes,"pandas.read_sql_query(""SELECT*from{}"".format(table_name)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
fitness_list,numpy.zeros(solver.popsize),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
x,numpy.copy(x),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig3,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
"ga_line,","matplotlib.pyplot.plot(ga_history,color=""green"",linewidth=1.0,linestyle=""-"",label='GA')",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
df_x,"pandas.DataFrame({'x1':x1,'r*x2':r*x2,'z':x1-r*x2},index=data_close.index)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
sim,pandas.Series(ornstein_uhlenbeck_levels(mp),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
kde,"seaborn.kdeplot(match(simulated,real)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
_,seaborn.kdeplot(real),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
kde,"seaborn.kdeplot(match(sim,real)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
kld,"scipy.stats.entropy(pdf1_y,pdf2_y)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
kld,"scipy.stats.entropy(pdf1_y,pdf2_y)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
wass_d,"scipy.stats.wasserstein_distance(pdf1_y,pdf2_y)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
cf,"sklearn.metrics.confusion_matrix(example_labels,example_preds)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
cf2,"sklearn.metrics.confusion_matrix(ex2_labels,ex2_preds)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
nyc,"pandas.read_csv('../data/central-park-raw.csv',parse_dates=[0])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
nino,"pandas.read_csv('../data/tao-all2.dat.gz',sep='',names=names,na_values='.',
parse_dates=[[1,2,3]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
nyc.PrecipitationIn,"pandas.to_numeric(nyc.PrecipitationIn.replace(""T"",'0.001')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,2)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(L_grid,W_grid,figsize=(25,25)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_pred,numpy.arange(*xlim),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'True':true,'Prediction':pred})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('Full_DataSet.csv',index_col=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(5,5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,_,Y,_","sklearn.model_selection.train_test_split(X,Y,test_size=0.0,shuffle=True,random_state=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hyp_models,collections.defaultdict(dict),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
aplt,"matplotlib.pyplot.plot(lam_arr,ene1(lam_arr)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
rabi_plt,"matplotlib.pyplot.plot(rabi_t,rabi_p,'k-',rabi_t,rabi_p_2,'r--',markersize=ftsz*0.4,linewidth=2,fillstyle='full',markeredgecolor='red',markeredgewidth=0.0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
rabi_plt,"matplotlib.pyplot.plot(rabi_d,rabi_d_det,'k-',markersize=ftsz*0.4,linewidth=2,fillstyle='full',markeredgecolor='red',markeredgewidth=0.0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
rabi_plt,"matplotlib.pyplot.plot(rabi_d,rabi_d_det_2,'k-',markersize=ftsz*0.4,linewidth=2,fillstyle='full',markeredgecolor='red',markeredgewidth=0.0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
interferenceplt,"matplotlib.pyplot.plot(\
papersol1[0][0::inter_seg],papersol1[1][0::inter_seg],'ro',\
papersol2[0][0::inter_seg],papersol2[1][0::inter_seg],'ks',\

markersize=ftsz*0.4,linewidth=2,fillstyle='full',markeredgewidth=0.0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"aplt,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"rabi_plt,rabi_ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"rabi_plt,rabi_ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"rabi_plt,rabi_ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"interference,interferenceax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
papersol1,"numpy.transpose(np.genfromtxt('data/constructive/paper-interference-constructive-a1-a2-0.0001-0.-k1-k2-0.9999-0..csv',delimiter="","")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
papersol2,"numpy.transpose(np.genfromtxt('data/constructive/paper-interference-constructive-a1-a2-0.0001-0.02-k1-k2-0.9999-3..csv',delimiter="","")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
papertheory1,"numpy.transpose(np.genfromtxt('data/constructive/paper-interference-constructive-theory-a1-a2-0.0001-0.-k1-k2-0.9999-0..csv',delimiter="","")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
papertheory2,"numpy.transpose(np.genfromtxt('data/constructive/paper-interference-constructive-theory-a1-a2-0.0001-0.02-k1-k2-0.9999-3..csv',delimiter="","")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
theta,numpy.arcsin(st),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
c2t,numpy.cos(2*theta),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
st,numpy.sqrt(0.02),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lam_arr,"numpy.linspace(0,1.8,100)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
probxlin,"numpy.linspace(0,10,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
rabi_t,"numpy.linspace(0,200,10000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
rabi_d,"numpy.linspace(0,2,200)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
inter_x,"numpy.linspace(0,x_lim_max,x_lim_max)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
keys,json.load(json_file),CLUSTER_1,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
tweet_df,"pandas.DataFrame(
tweet_tuples,
columns=[
'Tweet',
'Num_Favorites',
'Num_Retweets',
'Num_Followers',
'Created_At',
'id'
])",CLUSTER_1,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
all_tweets_df,pandas.read_csv('tweet_df.csv'),CLUSTER_1,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
result_0,"numpy.vstack((result_1,result_2,result_3,result_4,result_5)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
mvir_bins,numpy.arange(np.min(mvir),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
bins,numpy.arange(np.min(mvir),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
conc_means,numpy.array([np.mean(numpy.array(c),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
conc_stds,numpy.array([np.std(numpy.array(c),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
ax,numpy.reshape(np.array(figure_model.axes),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
faxes,"numpy.reshape(figure.axes,(2,2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
all_mvir,"numpy.transpose(np.vstack((Tr.MW.Cvir,Tr.M31.Cvir,Tr.M33.Cvir)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
all_mvir,"numpy.transpose(np.vstack((mwc,m31c,m33c)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
all_mvir,numpy.transpose(np.vstack((np.log10(Tr.MW.Mvir),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
all_mvir,"numpy.log10(np.transpose(np.vstack((Tr.MW.Mvir,Tr.M31.Mvir,Tr.M33.Mvir,total)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
mvir,numpy.log10(hlist['mvir']),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
xbins,numpy.logspace(np.log10(xdata.min(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Tr.MW.Mvir,"numpy.hstack((Tr.MW.Mvir,Tr_054.MW.Mvir)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Tr.M31.Mvir,"numpy.hstack((Tr.M31.Mvir,Tr_054.M31.Mvir)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Tr.MW.Rvir,"numpy.hstack((Tr.MW.Rvir,Tr_054.MW.Rvir)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Tr.M31.Rvir,"numpy.hstack((Tr.M31.Rvir,Tr_054.M31.Rvir)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Tr.MW.Rs,"numpy.hstack((Tr.MW.Rs,Tr_054.MW.Rs)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Tr.M31.Rs,"numpy.hstack((Tr.M31.Rs,Tr_054.M31.Rs)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Tr.MW.Cvir,"numpy.hstack((Tr.MW.Cvir,Tr_054.MW.Cvir)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Tr.M31.Cvir,"numpy.hstack((Tr.M31.Cvir,Tr_054.M31.Cvir)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Tr.LG_Mvir,"numpy.hstack((Tr.LG_Mvir,Tr_054.LG_Mvir)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Tr.sim_samples,"numpy.vstack((Tr.sim_samples,Tr_054.sim_samples)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
dat,"numpy.vstack((mvir,cvir)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
xtrip,numpy.copy(xbins[:bins-1]),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
ytrip,numpy.copy(ybins),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
xtripmw,numpy.copy(xbins[:bins-1]),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
ytripmw,numpy.copy(ybins),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
xpairmw,numpy.copy(xbins[:bins-1]),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
ypairmw,numpy.copy(ybins),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
xpair,numpy.copy(xbins[:bins-1]),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
ypair,numpy.copy(ybins),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"H,xedge,yedge","numpy.histogram2d(mvir,cvir,bins=[10,10])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
h,numpy.load(path),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
h,numpy.load('/lustre/ki/pfs/mwillia1/LG_project/Consuelo_Boxes/4002/4002hlist.npy'),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
hlist,numpy.load(hlist_path),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
hlist,numpy.load(hlist_path),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
X,numpy.array(X),CLUSTER_10,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_1
y,numpy.array(y),CLUSTER_10,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_1
vectors,"numpy.asarray(values[1:],dtype='float32')",CLUSTER_10,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_1
embedding_matrix,numpy.zeros((len(word_index),CLUSTER_10,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=TEST_SIZE,random_state=7)",CLUSTER_10,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_1
"fig2,ax1",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
"fig1,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
"fig1,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
"fig1,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.array([Tirr,logKir,logg1,Tint,0,0,0,0,Rp*xRp,Rstar,M,logKzz,fsed,logPbase,logCldVMR,logKcld,logRayAmp,RaySlope])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
gas_scale,"numpy.array([H2O,CH4,CO,CO2,NH3,N2,HCN,H2S,PH3,C2H2,C2H6,Na,K,TiO,VO,FeH,H,-50.,-50.,em,hm,-50.])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.array([Tirr,logKir,logg1,Tint,0,0,0,0,Rp*xRp,Rstar,M,logKzz,fsed,logPbase,logCldVMR,logKcld,logRayAmp,RaySlope])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
gas_scale,"numpy.array([H2O,CH4,CO,CO2,NH3,N2,HCN,H2S,PH3,C2H2,C2H6,Na,K,TiO,VO,FeH,H,-50.,-50.,em,hm,-50.])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.array([Tirr,logKir,logg1,Tint,0,0,0,0,Rp*xRp,Rstar,M,logKzz,fsed,logPbase,logCldVMR,logKcld,logRayAmp,RaySlope])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
gas_scale,"numpy.array([H2O,CH4,CO,CO2,NH3,N2,HCN,H2S,PH3,C2H2,C2H6,Na,K,TiO,VO,FeH,H,-50.,-50.,em,hm,-50.])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.array([Tirr,logKir,logg1,Tint,0,0,0,0,Rp*xRp,Rstar,M,logKzz,fsed,logPbase,logCldVMR,logKcld,logRayAmp,RaySlope])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
gas_scale,"numpy.array([H2O,CH4,CO,CO2,NH3,N2,HCN,H2S,PH3,C2H2,C2H6,Na,K,TiO,VO,FeH,H,-50.,-50.,em,hm,-50.])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_mod_array,"numpy.zeros((Nwno_bins,Nspectra)",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_binned_array,numpy.zeros((len(wlgrid),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_median,numpy.zeros(wno.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_high_1sig,numpy.zeros(wno.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_high_2sig,numpy.zeros(wno.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_low_1sig,numpy.zeros(wno.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_low_2sig,numpy.zeros(wno.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
gas_scale2,numpy.ones(len(gas_scale),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
percentiles,"numpy.percentile(y_mod_array[i,:],[4.55,15.9,50,84.1,95.45])",CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
"wlgrid,y_meas,err",numpy.loadtxt('w43b_trans.txt'),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
"wlgrid,y_meas,err",numpy.loadtxt('w43b_trans.txt'),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
"wlgrid,y_meas,err",numpy.loadtxt('w43b_trans.txt'),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
t1,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
t2,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df_raw,"pandas.read_csv(""../assets/admissions.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(stats,columns=['date','title','id','view','likes','dislikes','comments','duration'])",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df['date'],pandas.to_datetime(df['date']),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,"requests.request(method=""get"",url=url,params=parameters)",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,"requests.request(method=""get"",url=url,params=parameters)",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,"requests.request(method=""get"",url=url,params=parameters)",CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dict_response,json.loads(response.text),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dict_response,json.loads(response.text),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
d,json.loads(response.text),CLUSTER_27,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
frame,numpy.asarray(frame),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
newImage,numpy.copy(original_img),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
d,collections.defaultdict(int),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
t,matplotlib.pyplot.table(cellText=list(df.values),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
Crash_DF,pandas.DataFrame(),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
Veh_DF,pandas.DataFrame(),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
Occ_DF,pandas.DataFrame(),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
df1,"pandas.DataFrame(K_Occ_DF.groupby(['YEAR','INJ_SEV'])",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
cdf,pandas.DataFrame(),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
vdf,pandas.DataFrame(),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
odf,pandas.DataFrame(),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
K_Occ_DF.CID,"pandas.Series(K_Occ_DF.index.droplevel([1,2])",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
K_Veh_DF.CID,pandas.Series(K_Veh_DF.index.droplevel([1]),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
Crash_DF,"pandas.concat([Crash_DF,df])",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
Veh_DF,"pandas.concat([Veh_DF,df])",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
Occ_DF,"pandas.concat([Occ_DF,df])",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(DB_Dir+'\\{}_Crash_Assigned.csv'.format(year),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(DB_Dir+'\\{}_Vehicle_Cleaned_EA.csv'.format(year),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(DB_Dir+'\\{}_Person_Cleaned_EA.csv'.format(year),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
K_Crash_DF,"pandas.read_csv('K_Crash_05_16.csv',index_col=0)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
K_Veh_DF,"pandas.read_csv('K_Veh_05_16.csv',index_col=[0,1],low_memory=False)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
K_Occ_DF,"pandas.read_csv('K_Occ_05_16.csv',index_col=[0,1,2],encoding='latin-1',low_memory=False)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
A_Crash_DF,"pandas.read_csv('A_Crash_05_16.csv',index_col=0)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
A_Veh_DF,"pandas.read_csv('A_Veh_05_16.csv',index_col=[0,1],low_memory=False)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
A_Occ_DF,"pandas.read_csv('A_Occ_05_16.csv',index_col=[0,1,2],encoding='latin-1',low_memory=False)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
df['DATE'],pandas.to_datetime(df['DATE']),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
df['DOB'],pandas.to_datetime(df['DOB']),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
K_Crash_DF['DATE'],pandas.to_datetime(K_Crash_DF['DATE']),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
A_Crash_DF['DATE'],pandas.to_datetime(A_Crash_DF['DATE']),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
K_Occ_DF['DOB'],pandas.to_datetime(K_Occ_DF['DOB']),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
A_Occ_DF['DOB'],pandas.to_datetime(A_Occ_DF['DOB']),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
d,"pandas.DataFrame(data={'_id':[el['_id']forelinHotelCity],
'Reviews':[len(HotelCity[i]['Reviews'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
elapsed_time,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
elapsed_time,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
start2,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
elapsed_time2,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(bjp),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(aap),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_csv,pandas.read_csv('input/train.csv'),CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
train_csv_old,pandas.read_csv('input/trainLabels.csv'),CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
sample,pandas.read_csv('input/sample_submission.csv'),CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
mean,"numpy.array([0.485,0.456,0.406])",CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
std,"numpy.array([0.229,0.224,0.225])",CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
img,numpy.array(img),CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
table,numpy.array([((i/255.0),CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
b,numpy.zeros(a.shape),CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
val_pred,numpy.zeros((len(val_df),CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
inp,"numpy.clip(inp,0,1)",CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
img,"numpy.stack([img1,img2,img3],axis=-1)",CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
X_p,numpy.copy(X),CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
X_p,numpy.copy(X),CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
start_time,time.time(),CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
elapsed_time,time.time(),CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
"train_df,val_df","sklearn.model_selection.train_test_split(train_csv,test_size=0.15,random_state=98)",CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
ll,"sklearn.metrics.cohen_kappa_score(y,X_p,weights='quadratic')",CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
self.coef_,"scipy.optimize.minimize(loss_partial,initial_coef,method='nelder-mead')",CLUSTER_12,CLUSTER_7,CLUSTER_11,CLUSTER_22,CLUSTER_8
"f,(fg1,fg2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
circle,"matplotlib.pyplot.Circle((0,0)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
circle,"matplotlib.pyplot.Circle((0,0)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
circle,"matplotlib.pyplot.Circle((0,0)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
ax1,"matplotlib.pyplot.plot(logxx,yy,'ro',color='cyan')",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
ax2,"matplotlib.pyplot.plot(xx,yy,'ro',color='b')",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(6,4)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig1,ax","matplotlib.pyplot.subplots(figsize=(6,5)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
logxx,numpy.log10(xx),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
logx,numpy.log10(x),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-180.,180,73)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'x':x,'y':y,'d0':compute_dist(x,y,raps[0])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'x':x,
'y':y,
'd0':compute_dist(x,y,raps[0])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'x':x,
'y':y,
'd0':compute_dist(x,y,raps[0])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
user,numpy.argmax(norm_rates),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
durations_df,"pandas.DataFrame(durations,columns=header)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
relations_df,pandas.DataFrame(columns=relations[0].split(),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
limits,"pandas.concat([resources_df.iloc[3:],resources_df.iloc[3:]],axis=1)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
header,"re.findall(dur_sep,file[idx-2])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
res_sep,re.compile('[RND][\d]{2}|[\d]+'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
sep,re.compile('[*]+'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dur_sep,re.compile('[RND][\d]{2}|[\w.]+'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
wd_count,numpy.array([sum([wd==stemforwdintranscript]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
num_match_words,numpy.zeros(len(old_bailey),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
old_bailey,"pandas.read_csv('data/obc_1822_1832.csv',index_col='trial_id')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mft_dict,json.load(json_data),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nmf_1822,"sklearn.decomposition.NMF(n_components=num_topics,random_state=1,init='nndsvd')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
genre_df,pandas.DataFrame(genre_df),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
other_df,pandas.DataFrame(other_df),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
age_df,pandas.DataFrame(data=age_d),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
age_all,pandas.DataFrame(data=age_a),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,pandas.Series(x),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
vg_df,pandas.read_csv('Video_Games_Sales_as_at_22_Dec_2016.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"df[""Year""]","pandas.to_datetime(df[""Year""])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tks,"numpy.linspace(0,50,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tks,"numpy.linspace(0,50,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.sort(5*np.random.rand(40,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.sin(X),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,h)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(worldMapDataList),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
devSalaries,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lang,pandas.DataFrame(list(languageUser.items(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lang,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
langReg,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mostUsedLanguages,"pandas.Series(['Java','Python','C','C++','Ruby','JavaScript','C

surveyAnswers=pd.read_csv('C:/Users/jakem/Desktop/Data_Sets/survey_results_public.csv')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
surveyAnswers,pandas.read_csv('C:/Users/jakem/Desktop/Data_Sets/survey_results_public.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,sub","matplotlib.pyplot.subplots(2,2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sal,"seaborn.barplot(x=devSalaries.DeveloperType,y=devSalaries.AverageSalary,orient=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_rbf,"sklearn.svm.SVR(kernel='rbf',C=1e3,gamma=0.1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_lin,"sklearn.svm.SVR(kernel='linear',C=1e3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svr_poly,"sklearn.svm.SVR(kernel='poly',C=1e3,degree=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"df[(df['price']>=numpy.percentile(df['price'],0.5)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
(df['price']<,"numpy.percentile(df['price'],99.5)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
(df['latitude']>,"numpy.percentile(df['latitude'],0.05)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
(df['longitude']>,"numpy.percentile(df['longitude'],0.05)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
(df['longitude']<,"numpy.percentile(df['longitude'],99.95)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../data/renthop-nyc.csv'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df['created'],"pandas.to_datetime(df['created'],infer_datetime_format=True)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cutoff,pandas.to_datetime('2016-06-01'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(pipeline,X_train,y_train,cv=k,
scoring='neg_mean_absolute_error')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scores,"sklearn.model_selection.cross_val_score(pipeline,X_train,y_train,cv=k,
scoring='neg_mean_absolute_error')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.make_pipeline(
ce.OneHotEncoder(use_cat_names=True)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.make_pipeline(
ce.TargetEncoder(min_samples_leaf=1,smoothing=1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.make_pipeline(
ce.OrdinalEncoder()",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.make_pipeline(
ce.OneHotEncoder(use_cat_names=True)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.make_pipeline(
ce.TargetEncoder()",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"train_scores,val_scores","sklearn.model_selection.validation_curve(
pipeline,X_train,y_train,
param_name='decisiontreeregressor__max_depth',
param_range=depth,scoring='neg_mean_absolute_error',
cv=3,
n_jobs=-1
)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
search,"sklearn.model_selection.RandomizedSearchCV(
pipeline,
param_distributions=param_distributions,
n_iter=100,
cv=5,
scoring='neg_mean_absolute_error',
verbose=10,
return_train_score=True,
n_jobs=-1
)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
search,"sklearn.model_selection.RandomizedSearchCV(
pipeline,
param_distributions=param_distributions,
n_iter=10,
cv=3,
scoring='neg_mean_absolute_error',
verbose=10,
return_train_score=True,
n_jobs=-1
)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
mae,"sklearn.metrics.mean_absolute_error(y_test,y_pred)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
submission.total_cases,"numpy.concatenate([final_predict_sj,final_predict_iq])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_features,"pandas.read_csv('DengAI_Predicting_Disease_Spread_-_Training_Data_Features.csv',
index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_labels,"pandas.read_csv('DengAI_Predicting_Disease_Spread_-_Training_Data_Labels.csv',
index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_features,"pandas.read_csv('DengAI_Predicting_Disease_Spread_-_Test_Data_Features.csv',
index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,"pandas.read_csv(""DengAI_Predicting_Disease_Spread_-_Submission_Format.csv"",
index_col=[0,1,2])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_accuracy,"sklearn.metrics.mean_absolute_error(y_iq_train,
sess.run(predict_iq,feed_dict={X_iq:X_iq_train})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_accuracy,"sklearn.metrics.mean_absolute_error(y_iq_test,
sess.run(predict_iq,feed_dict={X_iq:X_iq_test})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_accuracy,"sklearn.metrics.mean_absolute_error(y_sj_train,
sess.run(predict_sj,feed_dict={X_sj:X_sj_train})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_accuracy,"sklearn.metrics.mean_absolute_error(y_sj_test,
sess.run(predict_sj,feed_dict={X_sj:X_sj_test})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
A,"numpy.array([[1,2,3],[4,5,6],[7,8,8]])",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v,"numpy.array([[2],[3],[5]])",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"EW,EV",scipy.linalg.eig(A),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"P,L,U",scipy.linalg.lu(A),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
s,"scipy.linalg.solve(A,v)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A,"scipy.sparse.lil_matrix((1000,1000)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
median,pandas.DataFrame(grouped_train.Weekly_Sales.median(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.concat([train,Month_dummies,holiday_dummies,Pre_christmas_dummies,Black_Friday_dummies],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
type_dummies,pandas.get_dummies(train['Type']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
store_dummies,pandas.get_dummies(train['Store']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dept_dummies,pandas.get_dummies(train['Dept']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
holiday_dummies,pandas.get_dummies(train['IsHoliday']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Month_dummies,pandas.get_dummies(train['Month']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Black_Friday_dummies,pandas.get_dummies(train['Black_Friday']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Pre_christmas_dummies,pandas.get_dummies(train['Pre_christmas']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.merge(train,features,on=['Store','Date','IsHoliday'],how='inner')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.merge(train,storesdata,on=['Store'],how='inner')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.merge(train,median,on=['Store','Dept'],how='outer')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""../../../Data&Script/walmart-input/train.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
features,"pandas.read_csv(""../../../Data&Script/walmart-input/features.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
storesdata,"pandas.read_csv(""../../../Data&Script/walmart-input/stores.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train.index,pandas.to_datetime(train.index),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['past_week_sales_available'],numpy.where(train.Prev_Week_Sales_By_Store_Dept.isnull(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['past_4week_sales_available'],numpy.where(train.Prev_4Week_Sales_By_Store_Dept.isnull(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['Black_Friday'],numpy.where((train.index.month==11),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['Pre_christmas'],numpy.where((train.index.month==12),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,"numpy.zeros_like(corr,dtype=np.bool)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(11,9)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.ensemble.RandomForestRegressor(n_estimators=10,criterion='mse',max_depth=None,
min_samples_split=2,min_samples_leaf=1,
min_weight_fraction_leaf=0.0,max_features='auto',
max_leaf_nodes=None,min_impurity_decrease=0.0,
min_impurity_split=None,bootstrap=True,
oob_score=False,n_jobs=1,random_state=None,
verbose=2,warm_start=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""kc_housingdata.csv"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
dat_scaled,"sklearn.preprocessing.scale(data_num,axis=0)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=3,init=""k-means++"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=k,init=""k-means++"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
labels,"sklearn.cluster.KMeans(n_clusters=8,random_state=200)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
labels,"sklearn.cluster.KMeans(n_clusters=i,random_state=200)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=8,random_state=200)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
losses,pandas.DataFrame(model.history.history),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../data/kc_house_data.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['date'],pandas.to_datetime(df['date']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.arange(y.shape[0]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(importances),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
std,"numpy.std([tree.feature_importances_fortreeinforest.estimators_],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
n_jobs,"1,train_sizes=numpy.linspace(.1,1.0,5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,pandas.DataFrame({'RecordID':Test_sorted['RecordID']}),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('C:\Pedro\workspace\Acc-challenge\data_v2.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('C:\Pedro\workspace\Acc-challenge\\test_data_v2.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=250,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,"sklearn.ensemble.RandomForestClassifier(n_estimators=10,max_features=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,"sklearn.ensemble.RandomForestClassifier(n_estimators=10,max_features=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(max_features=10,n_estimators=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_scores,test_scores",sklearn.model_selection.validation_curve(RandomForestClassifier(n_estimators=10),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_train,X_target,test_size=0.3,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.model_selection.GridSearchCV(RandomForestClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_sizes,train_scores,test_scores","sklearn.model_selection.learning_curve(
estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.ShuffleSplit(n_splits=100,test_size=0.2,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.ShuffleSplit(n_splits=10,test_size=0.2,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.array(x),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
x_test,numpy.array(x_test),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
data_all,"numpy.vstack([train_prd,test_prd])",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
X_train,"numpy.expand_dims(x,axis=1)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
X_test,"numpy.expand_dims(x_test,axis=1)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
X_train,"numpy.expand_dims(X_train,axis=-1)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
X_test,"numpy.expand_dims(X_test,axis=-1)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
data,"numpy.loadtxt(f_name,delimiter=""\t"")",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
ms,sklearn.preprocessing.MinMaxScaler(),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
y_train,sklearn.cluster.KMeans(n_clusters=classes),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
lof,sklearn.neighbors.LocalOutlierFactor(n_neighbors=5),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
start_time,time.time(),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
interval,time.time(),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_0
ind,"numpy.where(st.rankdata(X,method='ordinal')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,pandas.DataFrame(np.append(np.array([float(data.keys(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('s.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
dic,"collections.Counter(X.reshape(10020,)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
vid_upl_test,numpy.array(X_test['VideoUploads']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
vid_viw_test,numpy.array(X_test['Videoviews']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_log['Video_uploads_log'],numpy.log(df_clean['VideoUploads']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_log['Video_views_log'],numpy.log(df_clean['Videoviews']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_log['Subscribers_log'],numpy.log(df_clean['Subscribers']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
coefficients,pandas.DataFrame(X.columns),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_log,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
coefficients2,pandas.DataFrame(X2.columns),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('data.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['Subscribers'],"pandas.to_numeric(df['Subscribers'],errors='coerce')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['VideoUploads'],"pandas.to_numeric(df['VideoUploads'],errors='coerce')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"patches,texts","matplotlib.pyplot.pie(sizes,colors=color_list,explode=explode1,
shadow=False,startangle=90,radius=3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X2_train,X2_test,y2_train,y2_test","sklearn.model_selection.train_test_split(X2,Y2,test_size=0.2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm2,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model3,sklearn.svm.SVR(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
compare,pandas.DataFrame({'compare1':np.arange(12),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.DataFrame({'c1':np.arange(12),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.DataFrame({'c1':np.arange(12),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.DataFrame({'c1':np.arange(12),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"w,b,X,Y","numpy.array([[1.],[2.]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
w,"numpy.array([[0.1124579],[0.23106775]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
X,"numpy.array([[1.,-1.1,-3.2],[1.2,2.,0.1]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
w,"numpy.zeros((dim,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
Y_prediction,"numpy.zeros((1,m)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
cost,numpy.squeeze(cost),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
costs,numpy.squeeze(d['costs']),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
legend,"matplotlib.pyplot.legend(loc='uppercenter',shadow=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
test_np,numpy.array(test),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
b0,"numpy.ones((5,100)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
b1,"numpy.ones((4,100)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
b2,"numpy.ones((3,100)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
e_x,numpy.exp(x-np.max(x),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
delta_2,"numpy.multiply(w3.T@delta_3,1-np.power(x2,2)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
delta_1,"numpy.multiply(w2.T@delta_2,1-np.power(x1,2)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x1,numpy.tanh(w1@X+b0),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x2,numpy.tanh(w2@x1+b1),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.merge(data,vector_df)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('data/iris.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
arr,"numpy.arange(0,11)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.arange(0,11)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.arange(1,11)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr_2d,"numpy.array(([5,10,15],[20,25,30],[35,40,45])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
spam,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('spam.csv',encoding='latin-1')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.Pipeline([('baggingWords',CountVectorizer(analyzer=preprocess_text_msgs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(label_test,pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"msg_train,msg_test,label_train,label_test","sklearn.model_selection.train_test_split(spam['text'],spam['class'],test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
open_price,"pandas.DataFrame({""AAPL"":apple[""Open""],
""GOOGL"":google[""Open""],
""MSFT"":microsoft[""Open""]})",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
close_open,"pandas.DataFrame({""AAPL"":apple[""Close""]-apple[""Open""],
""GOOGL"":google[""Close""]-google[""Open""],
""MSFT"":microsoft[""Close""]-microsoft[""Open""]})",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
close_price,"pandas.DataFrame({""AAPL"":apple[""Close""],
""GOOGL"":google[""Close""],
""MSFT"":microsoft[""Close""]})",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
apple,"pandas.read_csv(""AAPL_data.csv"",index_col=""Date"",parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
google,"pandas.read_csv(""GOOGL_data.csv"",index_col=""Date"",parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
microsoft,"pandas.read_csv(""MSFT_data.csv"",index_col=""Date"",parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(file_name[i]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dates,"numpy.reshape(dates,(len(dates)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
prices,"numpy.reshape(prices,(len(prices)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
log_returns,numpy.log(close_price),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.gcf(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(2,1,figsize=(15,10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
session,requests.Session(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
emails_df,"pandas.read_csv('emails.csv',error_bad_lines=False)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
emails_df['Date'],"pandas.to_datetime(emails_df['Date'],infer_datetime_format=True)",CLUSTER_16,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
df_titanic,pandas.read_csv('titanic.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"matplotlib.pyplot.GridSpec(4,1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,5)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('data.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
T,"scipy.integrate.odeint(deriv,[0,0,0,0],t)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(np.random.rand(3,2)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ps,"pandas.Series([1,2,3,4,5,6])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ps,"pandas.Series([1,2,3,4,5],index=['a','b','c','d','e'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,pandas.Series(dict1),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
arr,"numpy.array([1,2,3,4,5,6])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,"datetime.date(2019,7,11)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
output,pandas.DataFrame(index=X.index),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
col_data,"pandas.get_dummies(col_data,prefix=col)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
student_data,"pandas.read_csv(""student-data.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_A,sklearn.naive_bayes.GaussianNB(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_B,sklearn.ensemble.AdaBoostClassifier(random_state=42),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf_C,sklearn.svm.SVC(random_state=42),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(random_state=42),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
f1_scorer,"sklearn.metrics.make_scorer(f1_score,pos_label=""yes"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['Date'],pandas.to_datetime(df['Date']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,y_train",numpy.array(X_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_test,y_test",numpy.array(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train,"numpy.reshape(X_train,(X_train.shape[0],X_train.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,"numpy.reshape(X_test,(X_test.shape[0],X_test.shape[1],1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
feats,"pandas.Series(data=estimator.feature_importances_,index=df.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LEncoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start_time,time.time(),CLUSTER_2,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
end_time,time.time(),CLUSTER_2,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
wine,sklearn.datasets.load_wine(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
KF,"sklearn.model_selection.KFold(n_splits=10,shuffle=True)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(mnist.data[data],mnist.target[data],train_size=0.8)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(mnist.data[data],mnist.target[data],train_size=percentage)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(mnist.data[data],mnist.target[data],train_size=0.9)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(mnist.data[data],mnist.target[data],train_size=0.9)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=10),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=7),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=3,p=m)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=3,n_jobs=1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=3,n_jobs=-1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
new_thrust,"random.gauss(450.,25.)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
init_pose,"numpy.array([0.,0.,10.,0.,0.,0.])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
init_velocities,"numpy.array([0.,0.,0.])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
init_angle_velocities,"numpy.array([0.,0.,0.])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
init_pose,"numpy.array([0.,0.,10.,0.,0.,0.])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
init_velocities,"numpy.array([0.,0.,0.])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
init_angle_velocities,"numpy.array([0.,0.,0.])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
target_pos,"numpy.array([0.,0.,10.])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
target_pos,"numpy.array([0.,0.,10.])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylim(),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylim(),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylim(),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylim(),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylim(),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylim(),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
example_array_2,numpy.arange(10),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
example_array,"numpy.array([0,1,2,3,4,5,6,7,8,9])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
question_3,"numpy.array([12,31,50,0,22,28,19,105,44,12,77])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
top_10_movies_df,"pd.DataFrame(data=numpy.array(
[[9.2,'TheShawshankRedemption',1994],
[9.2,'TheGodfather',1972],
[9.0,'TheGodfather:PartII',1974],
[8.9,'PulpFiction',1994],
[8.9,""Schindler'sList"",1993],
[8.9,'TheLordoftheRings:TheReturnoftheKing',2003],
[8.9,'12AngryMen',1957],
[8.9,'TheDarkKnight',2008],
[8.9,'Ilbuono,ilbrutto,ilcattivo',1966],
[8.8,'TheLordoftheRings:TheFellowshipoftheRing',2001]])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(9,6)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
top_10_movies_df,"pandas.DataFrame(data=np.array(
[[9.2,'TheShawshankRedemption',1994],
[9.2,'TheGodfather',1972],
[9.0,'TheGodfather:PartII',1974],
[8.9,'PulpFiction',1994],
[8.9,""Schindler'sList"",1993],
[8.9,'TheLordoftheRings:TheReturnoftheKing',2003],
[8.9,'12AngryMen',1957],
[8.9,'TheDarkKnight',2008],
[8.9,'Ilbuono,ilbrutto,ilcattivo',1966],
[8.8,'TheLordoftheRings:TheFellowshipoftheRing',2001]])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
top_10_movies_df2,"pandas.DataFrame(data=top_10_movies_dict,columns=[""Rating"",""Movie"",""Date""])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
nipa_quarterly_accounts_df,"pandas.read_csv(""https://delong.typepad.com/files/quarterly_accounts.csv"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
unemployment_data,"pandas.read_csv(""https://delong.typepad.com/detailed_unemployment.csv"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
valores,collections.deque(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
X,numpy.arange(10),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"numpy.array(df.iloc[:100,[0,1,-1]])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
compare_array_positive,numpy.array([1iffeatures[k]>velse-1forkinrange(m),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
compare_array_nagetive,numpy.array([-1iffeatures[k]>velse1forkinrange(m),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.array([1,1,1,-1,-1,-1,1,1,1,-1])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(iris.data,columns=iris.feature_names)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.AdaBoostClassifier(n_estimators=100,learning_rate=0.5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
out,"tree.export_graphviz(drugTree,feature_names=featureNames,out_file=dot_data,class_names=numpy.unique(y_trainset)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
my_data,"pandas.read_csv(""drug200.csv"",delimiter="","")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
drugTree,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=4)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
le_sex,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
le_BP,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
le_Chol,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_trainset,X_testset,y_trainset,y_testset","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
out,"sklearn.tree.export_graphviz(drugTree,feature_names=featureNames,out_file=dot_data,class_names=np.unique(y_trainset)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pred,"pandas.DataFrame({'actual':Y_test,
'pred':rf.predict(X_test)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pred_random_tree,"pandas.DataFrame({'actual':Y_test,
'pred':random_tree})",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
mult_coef,"pandas.DataFrame({
'negative':mult.coef_[0],
'zero':mult.coef_[1],
'positive':mult.coef_[2],
'abs_zero':np.abs(mult.coef_[1])",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
mult_pred,"pandas.DataFrame({'actual':Y_test_sign,
'pred':mult.predict(X_test)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
feature_importance,"pandas.Series(rf.feature_importances_,index=X_train.columns)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(data),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
preds,numpy.array(preds),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
preds_neg,"numpy.sum(preds<0,axis=1)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
preds_zero,"numpy.sum(preds==0,axis=1)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
preds_pos,"numpy.sum(preds>0,axis=1)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
Y_train_sign,numpy.sign(Y_train),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
Y_test_sign,numpy.sign(Y_test),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pred['actual_sign'],numpy.sign(pred.actual),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pred['pred_sign'],numpy.sign(pred.pred),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pred_random_tree['actual_sign'],numpy.sign(pred_random_tree.actual),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
pred_random_tree['pred_sign'],numpy.sign(pred_random_tree.pred),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=N_ESTIMATORS,
min_samples_leaf=1,random_state=3,
verbose=True,
n_jobs=-1)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
mult,"sklearn.linear_model.LogisticRegression(
multi_class='multinomial',solver='newton-cg',random_state=3)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(
df.drop(YCOL,axis=1)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""https://raw.githubusercontent.com/mukesh-ranjan/LearnDataAnalysisFromScratch/master/Data/mpg.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
inputs,"numpy.array([[0.5,-0.2,0.1]])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
targets,numpy.array([[0.4]]),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_w_i_h,"numpy.array([[0.1,-0.2],
[0.4,0.5],
[-0.3,0.2]])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_w_h_o,"numpy.array([[0.3],
[-0.1]])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
rides,pandas.read_csv(data_path),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(rides.ix[test_data.index]['dteday']),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylim(),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
video_df,pandas.DataFrame(video_list),CLUSTER_1,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
y,pandas.DataFrame(df_model['hired']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_imp,pandas.DataFrame(sorted(zip(model.feature_importance(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
full_df,pandas.DataFrame(full_df),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_imp,pandas.DataFrame(sorted(zip(gbm.feature_importance(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,pandas.DataFrame(df.groupby('jobid'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_neg,"pandas.concat([df_available,df_jobs],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,df_neg])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df_users,df_jobs[cols_to_use],left_on=['HiredForJobId'],right_on=['JobId'],how='inner')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_users,pandas.read_csv(r'D:\vanhack\data\HiredCandidates.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_jobs,pandas.read_csv(r'D:\vanhack\data\HiredJobDetails.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_available,pandas.read_csv(r'D:\vanhack\data\AvailableCandidates.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('df.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
HiredCandidates_df,pandas.read_csv(r'D:\vanhack\data\HiredCandidates.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
HiredJobs_df,pandas.read_csv(r'D:\vanhack\data\HiredJobDetails.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Candidates_df,pandas.read_csv(r'D:\vanhack\data\AvailableCandidates.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
JobsToPredict_df,pandas.read_csv(r'D:\vanhack\data\JobsToPredict.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(x=""Candidate_count"",y=""UsersPosition"",data=CandidatesByPosition_df,
palette=plt.cm.ScalarMappable(cmap='viridis_r')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(x=""Candidate_count"",y=""UsersPosition"",data=HiredCandidatesByPosition_df,
palette=plt.cm.ScalarMappable(cmap='viridis_r')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(x=""Jobs_count"",y=""POSITION"",data=HiredJobsPosition_df,
palette=plt.cm.ScalarMappable(cmap='viridis_r')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2ifisDebugelse0.0049,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df[features],sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df[features],sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
freqs,"numpy.logspace(-1,2,num=500)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
array,"numpy.asarray([[1,2],[3,4]])",CLUSTER_18,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(f,encoding='utf8',names=header)",CLUSTER_18,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
total_lions,numpy.zeros(LABEL_DIMS[0]-1),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_2,CLUSTER_0
total_false_positives,numpy.zeros(LABEL_DIMS[0]-1),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_2,CLUSTER_0
total_true_positives,numpy.zeros(LABEL_DIMS[0]-1),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_2,CLUSTER_0
false_positives,numpy.zeros(LABEL_DIMS[0]-1),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_2,CLUSTER_0
true_positives,numpy.zeros(LABEL_DIMS[0]-1),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_2,CLUSTER_0
total_false_positives,"numpy.add(total_false_positives,false_positives)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_2,CLUSTER_0
total_true_positives,"numpy.add(total_true_positives,true_positives)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_2,CLUSTER_0
train,"pandas.read_csv(INPUT_DIR+""Train/train.csv"")",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_2,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,10)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(1,10)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig1,ax1",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sum_stats,pandas.DataFrame(index=drug_list),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sum_stats_grouped,pandas.DataFrame({'TumorVolumeMean':grouped_drugs_df['TumorVolume(mm3),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pandas_df,pandas.DataFrame(pandas_df),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(df),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
study_complete,"pandas.merge(mouse_metadata,study_results,how=""left"",on=[""MouseID""])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mouse_metadata,pandas.read_csv(mouse_metadata_path),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
study_results,pandas.read_csv(study_results_path),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"(slope,intercept,rvalue,pvalue,stderr)","scipy.stats.linregress(x_values,y_values)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
correlation,"scipy.stats.pearsonr(mouse_weight,tumor_volume)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
iqr,"numpy.subtract(*np.percentile(drug_df,[75,25])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Q1_outlier,"numpy.percentile(drug_df,25)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Q3_outlier,"numpy.percentile(drug_df,75)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,"pandas.concat([data,
pd.get_dummies(data['children'],prefix=""ch"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
affair_yrs_married,"pandas.crosstab(data.yrs_married,
data.affair.astype(bool)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('../../data/affairs.csv',index_col=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model2,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,
test_size=0.3,
random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scores,sklearn.model_selection.cross_val_score(LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dt,"pandas.read_csv(""taxi-trips(2)",CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"dt[""pickup_daytime""]","pandas.to_datetime(dt[""pickup_datetime""])",CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
d,"pandas.to_datetime(dt[""pickup_datetime""],infer_datetime_format=True)",CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y_pos,numpy.arange(len(objects),CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y_pos,numpy.arange(len(objects),CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
table,"pandas.DataFrame(columns=['Intensity',delta,eps,])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=arraysy,index=arraysx)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=['Intensity',delta,eps,])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=arraysy,index=arraysx)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=['Intensity',delta,eps,])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=arraysy,index=arraysx)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=['Intensity',delta,eps,])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=arraysy,index=arraysx)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=['Intensity',delta,eps,])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=arraysy,index=arraysx)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=['Intensity',delta,eps,])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=arraysy,index=arraysx)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=['Intensity',delta,eps,])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=arraysy,index=arraysx)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=['Intensity',delta,eps,])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
table,"pandas.DataFrame(columns=arraysy,index=arraysx)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
writer,"pandas.ExcelWriter(path,engine='openpyxl')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(name,header=0,sep="";"")",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
img,"numpy.amax(img,axis)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
img,"numpy.swapaxes(img,0,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
cols,numpy.ceil(l/rows),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
mu,"numpy.array([0,0,0,0,4,5,8,10,13,10])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
nu,"numpy.array([14,15,16,10,4,1,0,0,0,0])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
c,numpy.array(C),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A_r,"numpy.zeros((l,l,l)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A_t,"numpy.zeros((l,l,l)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A_zero_1,numpy.zeros((A_eye.shape),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A_zero_2,"numpy.zeros((l,l**2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A,"numpy.zeros((l*4,2*l**2+1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
b_zero,numpy.zeros(nu.shape),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.zeros((2*l**2+l,)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
b,"numpy.concatenate((mu,nu,b_zero,b_zero)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
A_eye,numpy.eye(l),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
train_mask,numpy.zeros(new_size),CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
train_mask,numpy.zeros(input_image_size),CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
img,"numpy.zeros((batch_size,input_image_size[0],input_image_size[1],3)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
mask,"numpy.zeros((batch_size,input_image_size[0],input_image_size[1],1)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
train_mask,"numpy.maximum(new_mask,train_mask)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
train_mask,"numpy.maximum(new_mask,train_mask)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
stacked_img,"numpy.stack((train_img,)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
ax,"matplotlib.pyplot.Subplot(fig,innerGrid[j])",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
imgplot,matplotlib.pyplot.imshow(img),CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
xd,numpy.sin(t),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.sin(t),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xd,numpy.sin(t),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
t,"numpy.linspace(0,8)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
t,"numpy.linspace(0,8)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
t,"numpy.linspace(0,20,100)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
t,"numpy.linspace(0,8)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
t,"numpy.linspace(0,8)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
t,"numpy.linspace(0,20,100)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
t,"numpy.linspace(0,8)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1,figsize=(8,6)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1,figsize=(8,6)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1,figsize=(12,6)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1,figsize=(8,6)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1,figsize=(8,6)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1,figsize=(8,6)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=1,ncols=1,figsize=(8,6)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
day_start_utc,"datetime.datetime(2017,8,21,0,0,0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(10,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
model_predictions,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
frame,"pandas.DataFrame(columns=['coef','endpoint'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,pandas.DataFrame(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mostdilirank_performance_DF,pandas.DataFrame([]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quality_params_mv_DF,pandas.DataFrame(quality_params_mv),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quality_params_g_DF,pandas.DataFrame(quality_params_g),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pfizer_performance_DF,pandas.DataFrame([]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quality_params_mv_DF,pandas.DataFrame(quality_params_mv),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quality_params_g_DF,pandas.DataFrame(quality_params_g),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
obrien_performance_DF,pandas.DataFrame([]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quality_params_mv_DF,pandas.DataFrame(quality_params_mv),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quality_params_g_DF,pandas.DataFrame(quality_params_g),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mulliner_performance_DF,pandas.DataFrame([]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quality_params_mv_DF,pandas.DataFrame(quality_params_mv),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quality_params_g_DF,pandas.DataFrame(quality_params_g),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
drugbank_performance_DF,pandas.DataFrame([]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quality_params_mv_DF,pandas.DataFrame(quality_params_mv),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quality_params_g_DF,pandas.DataFrame(quality_params_g),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
comparisondf,"pandas.concat([pls_mostdilirank_df,pls_pfizer_df,
pls_obrien_df,pls_mulliner_df],axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
qualdf,"pandas.concat([quality_params_mv_DF,quality_params_g_DF],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mostdilirank_performance_DF,"pandas.concat([mostdilirank_performance_DF,qualdf],
ignore_index=True,axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
qualdf,"pandas.concat([quality_params_mv_DF,quality_params_g_DF],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pfizer_performance_DF,"pandas.concat([pfizer_performance_DF,qualdf],
ignore_index=True,axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
qualdf,"pandas.concat([quality_params_mv_DF,quality_params_g_DF],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
obrien_performance_DF,"pandas.concat([obrien_performance_DF,qualdf],
ignore_index=True,axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
qualdf,"pandas.concat([quality_params_mv_DF,quality_params_g_DF],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mulliner_performance_DF,"pandas.concat([mulliner_performance_DF,qualdf],
ignore_index=True,axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
qualdf,"pandas.concat([quality_params_mv_DF,quality_params_g_DF],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
drugbank_performance_DF,"pandas.concat([drugbank_performance_DF,qualdf],
ignore_index=True,axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_list,"pandas.read_csv(modelpath+'models_AEs_performance.tsv',sep='\t')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pred,pandas.read_csv('predictions_no_optimization_'+str(cfs),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,pandas.read_csv('predictions_no_optimization_'+str(cfs),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pred,pandas.read_csv('predictions_no_optimization_'+str(cfs),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,pandas.read_csv('predictions_no_optimization_'+str(cfs),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pred,pandas.read_csv('predictions_no_optimization_'+str(cfs),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,pandas.read_csv('predictions_no_optimization_'+str(cfs),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pred,pandas.read_csv('predictions_no_optimization_'+str(cfs),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,pandas.read_csv('predictions_no_optimization_'+str(cfs),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pred,pandas.read_csv('predictions_no_optimization_'+str(cfs),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,pandas.read_csv('predictions_no_optimization_'+str(cfs),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
preddf,"pandas.read_csv('predictions_no_optimization_0.15/predictions_mostdilirank_0.15.tsv',sep='\t')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
preddf,"pandas.read_csv('predictions_no_optimization_0.15/predictions_pfizer_0.15.tsv',sep='\t')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
preddf,"pandas.read_csv('predictions_no_optimization_0.15/predictions_obrien_0.15.tsv',sep='\t')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
preddf,"pandas.read_csv('predictions_no_optimization_0.15/predictions_mulliner_0.15.tsv',sep='\t')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
preddf,"pandas.read_csv('predictions_no_optimization_0.15/predictions_drugbank_0.15.tsv',sep='\t')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pls_mostdilirank_df,pandas.read_pickle('pls_coef_pickles/pls_mostdilirank_0.15.pkl'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pls_pfizer_df,pandas.read_pickle('pls_coef_pickles/pls_pfizer_0.15.pkl'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pls_obrien_df,pandas.read_pickle('pls_coef_pickles/pls_obrien_0.15.pkl'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pls_mulliner_df,pandas.read_pickle('pls_coef_pickles/pls_mulliner_0.15.pkl'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pls_drugbank_df,pandas.read_pickle('pls_coef_pickles/pls_drugbank_0.15.pkl'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
results[testname],pandas.to_numeric(testDF[testDILIcolumn]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
results[testname],pandas.to_numeric(preddf[testDILIcolumn]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
myplot,"seaborn.barplot(y='endpoint',x='coef',color='Red',data=df)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
myplot,"seaborn.barplot(y='endpoint',x=colmcc+'_'+rule,color='lightblue',data=df)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
myplot,"seaborn.set(font_scale=1.9,font='Calibri',palette='bright')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
myplot,"seaborn.set(font_scale=2.1,font='Calibri',palette='bright')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
myplot,"seaborn.set(font_scale=1.9,font='Calibri',palette='bright')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
myplot,seaborn.set_style('ticks'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
myplot,seaborn.set_style('ticks'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
myplot,seaborn.set_style('ticks'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pls,sklearn.cross_decomposition.PLSRegression(n_components=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
response_data,json.loads(response.text),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
response,requests.get(game_url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,numpy.arange(len(y),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.arange(len(y),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Xtrain,numpy.array(df[(df['Time_stamp']<=ed),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ytrain,numpy.array(df[(df['Time_stamp']<=ed),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Xtrain,numpy.array(df[(df['Time_stamp']<=ed),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ytrain,numpy.array(df[(df['Time_stamp']<=ed),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Xtest,numpy.array(df[(df['Time_stamp']>ed),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Xtest,numpy.array(df[(df['Time_stamp']>ed),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ytest,numpy.array(df[(df['Time_stamp']>ed),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ytest,numpy.array(df[(df['Time_stamp']>ed),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
accs_table_simple,"pandas.DataFrame(columns=['TrainingSession','Accuracy'])",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
accs_table_simple_NoCancel,"pandas.DataFrame(columns=['TrainingSession','Accuracy'])",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(file_path),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(12,8)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(penalty='l2',C=C_param,random_state=0)",CLUSTER_28,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
true_prob,pandas.Series(true_prob),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
counts,"pandas.concat([counts,true_prob],axis=1)",CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
churn_df,pandas.read_csv('../data/churn.csv'),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
counts,pandas.value_counts(pred_churn),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,numpy.array(y),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
y_prob,numpy.zeros((len(y),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
y_prob,numpy.zeros((len(y),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.where(churn_result=='True.',1,0)",CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
indices,numpy.argsort(importances),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
true_prob[prob],numpy.mean(is_churn[pred_churn==prob]),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
std,"numpy.std([tree.feature_importances_fortreeinforest.estimators_],
axis=0)",CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_fpr,"numpy.linspace(0,1,100)",CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
class_names,numpy.unique(y),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y[test_index],y_prob[test_index,1])",CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
roc_auc,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_auc,"sklearn.metrics.auc(mean_fpr,mean_tpr)",CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
true_prob,collections.defaultdict(float),CLUSTER_27,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
K,"numpy.array([[7.070912e+02,0.000000e+00,6.018873e+02],[0.000000e+00,7.070912e+02,1.831104e+02],[0.000000e+00,0.000000e+00,1.000000e+00]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
q,"numpy.array([[baseline,0,0,0],[0,baseline,0,0],[0,0,baseline*f,0],[0,0,0,-1]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
q,"numpy.array([[baseline,0,0,0],[0,baseline,0,0],[0,0,baseline*f,0],[0,0,0,-1]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
temp,numpy.array([k-(shape[1]/2),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
K,"numpy.array([[7.070912e+02,0.000000e+00,6.018873e+02],[0.000000e+00,7.070912e+02,1.831104e+02],[0.000000e+00,0.000000e+00,1.000000e+00]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
q,"numpy.array([[baseline,0,0,0],[0,baseline,0,0],[0,0,baseline*f,0],[0,0,0,-1]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
temp,"numpy.array([k,j,1,disparity[j,k]])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
camera_pts,numpy.asarray(camera_pts),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
temp1,numpy.asarray(temp1),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
camera_pts,numpy.asarray(camera_pts),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
temp1,numpy.asarray(temp1),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
M,"numpy.empty((4,4)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
M,"numpy.empty((4,4)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
camera_pts,"numpy.dot(T,camera_pts.T)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
camera_pts,"numpy.dot(T,camera_pts.T)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
temp,"numpy.matmul(q,temp)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
temp,"numpy.matmul(q,temp)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
temp,"numpy.reshape(temp,(4,1)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
camera_pts,"numpy.reshape(camera_pts,(camera_pts.shape[0],camera_pts.shape[1])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
temp,"numpy.reshape(temp,(4,1)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
camera_pts,"numpy.reshape(camera_pts,(camera_pts.shape[0],camera_pts.shape[1])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
verts,"numpy.hstack([verts,colors])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
verts,"numpy.hstack([verts,colors])",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
total_stack,"numpy.vstack((total_stack,output_points)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
total_col,"numpy.vstack((total_col,output_colors)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
total_stack,"numpy.vstack((total_stack,output_points)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
total_col,"numpy.vstack((total_col,output_colors)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
T,numpy.eye(4),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
T,numpy.eye(4),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
priors,"pandas.read_csv(os.path.join(IDIR,'order_products__prior.csv')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
orders,"pandas.read_csv(os.path.join(IDIR,'orders.csv')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
raw_data,"pandas.read_csv(""issues.csv"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
model,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
final_model,sklearn.cluster.KMeans(3),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
women_degrees,pandas.read_csv('percent-bachelors-degrees-women-usa.csv'),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(18,3)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,20)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
image,"numpy.array(image,dtype=np.uint8)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
"fig,axs","matplotlib.pyplot.subplots(1,2,figsize=(30,15)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
train_df,pandas.DataFrame(data),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_8
rndstate,random.getstate(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
it,"numpy.nditer(x,flags=['multi_index'],op_flags=['readwrite'])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xs,numpy.arange(num_epochs),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xs,numpy.arange(num_epochs),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
one_hot_labels,"numpy.zeros((labels.size,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
params['b1'],"numpy.zeros((1,H)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
params['b2'],"numpy.zeros((1,K)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
labels,"numpy.zeros((N,K)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
b1,"numpy.zeros((1,H)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
b2,"numpy.zeros((1,K)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z,"numpy.zeros_like(x,dtype=float)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pred,numpy.zeros_like(y),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
top,"numpy.ones_like(x,dtype=float)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
gradW2,"numpy.dot(h.T,delta_1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
gradW1,"numpy.dot(data.T,delta_2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
gradW2,"numpy.dot(h.T,delta_1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
gradW1,"numpy.dot(data.T,delta_2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
accuracy,"(numpy.argmax(output,axis=1)==numpy.argmax(labels,axis=1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean,numpy.mean(trainData),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
std,numpy.std(trainData),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
denominator,"numpy.sum(numerator,axis=1,keepdims=True)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
gradb2,"numpy.sum(delta_1,axis=0,keepdims=True)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
gradb1,"numpy.sum(delta_2,axis=0,keepdims=True)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
gradb2,"numpy.sum(delta_1,axis=0,keepdims=True)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
numerator,numpy.exp(x-c),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z[pos_mask],numpy.exp(-x[pos_mask]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
z[neg_mask],numpy.exp(x[neg_mask]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
delta_2,"numpy.multiply(np.dot(delta_1,W2.T)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
delta_2,"numpy.multiply(np.dot(delta_1,W2.T)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.loadtxt(images_file,delimiter=',')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.loadtxt(labels_file,delimiter=',')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(1,2,sharex=True,sharey=False,figsize=(12,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(1,2,sharex=True,sharey=False,figsize=(12,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mask,numpy.zeros_like(first_frame),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,"pandas.concat([y,data_n_2.iloc[:,:]],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([y,data_n_2.iloc[:,:]],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.melt(data,id_vars=""WinTrade"",
var_name=""features"",
value_name='value')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.melt(data,id_vars=""WinTrade"",
var_name=""features"",
value_name='value')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(r""C:\Users\parag\Desktop\Newfolder(3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(18,18)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(18,18)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.countplot(y,label='count')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tic,time.time(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_rf,sklearn.ensemble.RandomForestClassifier(random_state=43),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_rf_2,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_rf_2,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ac,"sklearn.metrics.accuracy_score(y_test,clf_rf.predict(x_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ac_2,"sklearn.metrics.accuracy_score(y_test,clf_rf_2.predict(x_test_2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ac_3,"sklearn.metrics.accuracy_score(y_test,clf_rf_3.predict(x_test_3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,clf_rf.predict(x_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm_2,"sklearn.metrics.confusion_matrix(y_test,clf_rf_2.predict(x_test_2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm_3,"sklearn.metrics.confusion_matrix(y_test,clf_rf_3.predict(x_test_3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfe,"sklearn.feature_selection.RFE(estimator=clf_rf_2,n_features_to_select=3,step=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfe,"sklearn.feature_selection.RFE(estimator=clf_rf_3,n_features_to_select=3,step=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_rf_3,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_rf_3,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,numpy.array(X),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
y,numpy.array(y),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
X_test,numpy.array(X_test),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
img,"numpy.expand_dims(img,axis=0)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
img,"numpy.expand_dims(img,axis=0)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
conf_matrix,"sklearn.metrics.confusion_matrix(df.y,df.y_pred)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
fig1,matplotlib.pyplot.figure(),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(14,7)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(14,7)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
submission_df,"pandas.DataFrame({'id':id_line,'label':predicted_val})",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
df,"pandas.DataFrame({
'filename':test_set.filenames,
'predict':ytesthat[:,0],
'y':test_set.classes
})",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
tweets,"pandas.read_csv('https://github.com/albahnsen/PracticalMachineLearningClass/raw/master/datasets/Tweets.zip',index_col=0)",CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
input_txt,"re.sub(i,'',input_txt)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
r,"re.findall(pattern,input_txt)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
ht,"re.findall(r""
hashtags.append(ht)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
vec,numpy.zeros(size),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
wordvec_arrays,numpy.zeros((len(tokenized_tweet),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
docvec_arrays,numpy.zeros((len(tokenized_tweet),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
combi['tidy_tweet'],numpy.vectorize(remove_pattern),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
d,pandas.DataFrame({'Hashtag':list(a.keys(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
e,pandas.DataFrame({'Hashtag':list(b.keys(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
wordvec_df,pandas.DataFrame(wordvec_arrays),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
docvec_df,pandas.DataFrame(docvec_arrays),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
train,pandas.read_csv('C:/Users/singh/Desktop/TwitterSA/train_E6oV3lV.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
test,pandas.read_csv('C:/Users/singh/Desktop/TwitterSA/test_tweets_anuFYb8.csv'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
ax,"seaborn.barplot(data=d,x=""Hashtag"",y=""Count"")",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
ax,"seaborn.barplot(data=e,x=""Hashtag"",y=""Count"")",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
lreg,sklearn.linear_model.LogisticRegression(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
svc,"sklearn.svm.SVC(kernel='linear',C=1,probability=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
svc,"sklearn.svm.SVC(kernel='linear',
C=1,probability=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
svc,"sklearn.svm.SVC(kernel='linear',C=1,probability=True)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
y_pos,numpy.arange(2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pos,numpy.arange(2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
par,"numpy.array([m,b])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.array([0,0])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mod,"numpy.empty((epochs,3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
yhat,"numpy.matmul(mat,par)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gradm,numpy.mean((yhat-y),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gradb,numpy.mean((yhat-y),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xmat,"numpy.reshape(x,(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1,"numpy.reshape(tr[:,1],(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y1,"numpy.reshape(tr[:,0],(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1,"numpy.reshape(x,(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y1,"numpy.reshape(y,(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mn1,"numpy.reshape(mman,(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
yreal,"numpy.reshape(val[:,0],(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mn1,"numpy.reshape(mman,(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
yreal,"numpy.reshape(val[:,0],(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mat,"numpy.hstack((xmat,np.ones((xmat.shape[0],1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.hstack((numpy.hstack((msci,mn1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.hstack((numpy.hstack((msci,mn1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
corr,"numpy.corrcoef([overallq,price])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
corr,"numpy.corrcoef([price,squarefeets])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
corr,"numpy.corrcoef([price,totalrooms])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
corr,"numpy.corrcoef([price,yearbuilt])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
corr,"numpy.corrcoef([price,frentelote])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_array,"numpy.append(err_array,[error])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,numpy.load('proyecto_training_data.npy'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
barras,"matplotlib.pyplot.bar(y_pos,values,align='center',alpha=0.5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
barras,"matplotlib.pyplot.bar(y_pos,values,align='center',alpha=0.5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rl,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rl,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
D,"numpy.array(np.sum(A,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
D_hat,"numpy.array(np.sum(A_hat,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
D_hat,"numpy.array(np.sum(A_hat,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.matrix([
[0,1,0,0],
[0,0,1,1],
[0,1,0,0],
[1,0,1,0]],
dtype=float
)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.matrix([
[i,-i]
foriinrange(A.shape[0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
I,numpy.matrix(np.eye(A.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
D,numpy.matrix(np.diag(D),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.matrix([
[0,1,0,0],
[0,0,1,1],
[0,1,0,0],
[1,0,1,0]],
dtype=float
)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
W,"numpy.matrix([
[1,-1],
[-1,1]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
W,"numpy.matrix([
[1],
[-1]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
W,"numpy.matrix([
[1,-1],
[-1,1]
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
D_hat,numpy.matrix(np.diag(D_hat),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
D_hat,numpy.matrix(np.diag(D_hat),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
I,numpy.eye(zkc.number_of_nodes(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
I,numpy.eye(zkc.number_of_nodes(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('train_values.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,pandas.read_csv('train_data.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0,800,10)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_feat,"pandas.DataFrame(scaled_features,columns=df.columns[:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('KNN_Project_Data'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_features,df['TARGETCLASS'],
test_size=0.30)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=30),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(DATA_PATH,sep='\t')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_1
homework_data,"pandas.read_excel('Hyperonyms_Aidana.xlsx',sheet_name='Лист1')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_1
pidxs,json.loads(prestr(val[2]),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_1
text,re.sub(r'\(.+?\),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.read_pickle('power_consumption'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
amber,"pandas.DataFrame(data=amber_sum,columns=['Data'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mudra,"pandas.DataFrame(data=mudramark_sum,columns=['Data'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
wood,"pandas.DataFrame(data=woodsworth_sum,columns=['Data'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,"pandas.DataFrame(data=a,columns=['Time'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
amber,pandas.DataFrame(amber),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mudra,pandas.DataFrame(mudra),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
wood,pandas.DataFrame(wood),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
wood,"pandas.DataFrame(wood,columns=['Data'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
amb,"pandas.DataFrame(data=amber_in_sum,columns=['Data'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mud,"pandas.DataFrame(data=mudra_in_sum,columns=['Data'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
wo,"pandas.DataFrame(data=wood_in_sum,columns=['Data'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
wo,"pandas.DataFrame(wo,columns=['Data'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mud,"pandas.DataFrame(mud,columns=['Data'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
amb,"pandas.DataFrame(amb,columns=['Data'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
w,"pandas.concat([s,amber],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
w,"pandas.concat([s,mudra],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
w,"pandas.concat([s,wood],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
wood_df,"pandas.concat([wood,wood.shift(1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
wo_df,"pandas.concat([wo,wo.shift(1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
wo_dff,"pandas.concat([wo,wo.rolling(2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mud_df,"pandas.concat([mud,mud.shift(1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mud_dff,"pandas.concat([mud,mud.rolling(2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
amb_df,"pandas.concat([amb,amb.shift(1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
amb_dff,"pandas.concat([amb,amb.rolling(2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sale,"pandas.read_excel('CaseData0322.xlsx',sheet_name='Sale',skiprows=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
price,"pandas.read_excel('CaseData0322.xlsx',sheet_name='Special_Price',skiprows=3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
inven,"pandas.read_excel('CaseData0322.xlsx',sheet_name='Inventory',skiprows=3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
amber['Time'],pandas.to_datetime(amber['Time']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mudra['Time'],pandas.to_datetime(mudra['Time']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
wood['Time'],pandas.to_datetime(wood['Time']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
orig,"matplotlib.pyplot.plot(amber,color='blue',label='Original')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean,"matplotlib.pyplot.plot(rolmean,color='red',label='RollingMean')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
std,"matplotlib.pyplot.plot(rolstd,color='black',label='RollingStd')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
orig,"matplotlib.pyplot.plot(timeseries,color='blue',label='Original')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean,"matplotlib.pyplot.plot(movingAverage,color='red',label='RollingMean')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
std,"matplotlib.pyplot.plot(movingSTD,color='black',label='RollingStd')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
orig,"matplotlib.pyplot.plot(mudra,color='blue',label='Original')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean,"matplotlib.pyplot.plot(rolmean,color='red',label='RollingMean')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
std,"matplotlib.pyplot.plot(rolstd,color='black',label='RollingStd')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
orig,"matplotlib.pyplot.plot(wood,color='blue',label='Original')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean,"matplotlib.pyplot.plot(rolmean,color='red',label='RollingMean')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
std,"matplotlib.pyplot.plot(rolstd,color='black',label='RollingStd')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
alice_mask,numpy.array(Image.open('alice_mask.png'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
waffle_chart,"numpy.zeros((height,width)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
waffle_chart,"numpy.zeros((height,width)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
values_cumsum,numpy.cumsum(df_dsn['Total']),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
values_cumsum,numpy.cumsum(values),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_tot,pandas.DataFrame(df_can[years].sum(axis=0),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_can,"pandas.read_excel('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx',
sheet_name='CanadabyCitizenship',
skiprows=range(20)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x='year',y='total',data=df_tot)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green',marker='+')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green',marker='+')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green',marker='+',scatter_kws={'s':200})",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green',marker='+',scatter_kws={'s':200})",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green',marker='+',scatter_kws={'s':200})",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x='year',y='total',data=df_tot,color='green',marker='+',scatter_kws={'s':200})",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_,"numpy.argmax(y_test,1)",CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
true_count+,numpy.sum(predictions),CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
imgplot,matplotlib.pyplot.imshow(image),CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
imgplot,matplotlib.pyplot.imshow(image),CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
tr_start,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
start,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
b_start_time,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
b_end_time,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
end,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
statinfo,os.stat(filepath),CLUSTER_11,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
"fig,ax","matplotlib.pyplot.subplots(1,2)",CLUSTER_30,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,2)",CLUSTER_30,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,2)",CLUSTER_30,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_1
books,"pandas.read_csv('BX-Books.csv',sep=';',error_bad_lines=False,encoding=""latin-1"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ratings,"pandas.read_csv('BX-Book-Ratings.csv',sep=';',error_bad_lines=False,encoding=""latin-1"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
users,"pandas.read_csv('BX-Users.csv',sep=';',error_bad_lines=False,encoding=""latin-1"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
books.Year_Of_Publication,"pandas.to_numeric(books.Year_Of_Publication,errors='coerce')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(dict),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(filedict),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(filedict),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
obj,"pandas.Series([4,7,-5,3])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
obj2,"pandas.Series([4,7,-5,3],index=['d','b','a','c'])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(filename),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fifteenDaysMean,pandas.DataFrame(l),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(filename),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,numpy.array(l),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,23,24)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xs,"numpy.linspace(0,23,1000)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
spl,"scipy.interpolate.UnivariateSpline(x,y)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_feat,"pandas.DataFrame(scaled_features,columns=df.columns[:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('Classified+Data'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.3,random_state=101)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=31),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
user_ids_by_interest,collections.defaultdict(list),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
interests_by_user_id,collections.defaultdict(list),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
salary_by_tenure,collections.defaultdict(list),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
salary_by_tenure_bucket,collections.defaultdict(list),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
image_binary,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('creditcard.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
count_classes,"pandas.value_counts(data['Class'],sort=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
image_id,random.choice(dataset_test.image_ids),CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
mask,"numpy.zeros((info['orig_height'],info['orig_width'],1)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
class_ids,"numpy.zeros((1,)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
mask,"numpy.zeros((info['orig_height'],info['orig_width'],count)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
class_ids,"numpy.zeros((count,)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
image,"numpy.stack((image,)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
image,"numpy.stack((image,)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
fig,"matplotlib.pyplot.figure(figsize=(10,30)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
image_df,"pandas.DataFrame(columns=['path','patientId'])",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
training_data_1,"pandas.DataFrame({'Images':training_imgs,'Target':training_labels_1})",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
test_set,pandas.DataFrame(),CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
cm_df,"pandas.DataFrame(columns=['patientId','y_true','y_pred'])",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
train_labels_df,pandas.read_csv(data_location),CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
temp_df,pandas.read_csv(data_location),CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
CM,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_17,CLUSTER_0,CLUSTER_11,CLUSTER_8,CLUSTER_7
fdist_df,pandas.DataFrame(data=fdist.values(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
df,"pandas.read_csv('/Users/p.szymo/Documents/flatiron/projects/mod5/poetry_genre_classifier/data/poetry_foundation_raw_rescrape.csv',index_col=0)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
df['end_rhyme'],"numpy.where(df.end_rhyme_ratio>=0.25,1,0)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_edit['num_lines'],"numpy.where(df_edit.num_lines>90,90,df_edit.num_lines)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_edit['num_words'],"numpy.where(df_edit.num_words>700,700,df_edit.num_words)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_edit['avg_len_line'],"numpy.where(df_edit.avg_len_line>12,12,df_edit.avg_len_line)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_edit['num_end_rhymes'],"numpy.where(df_edit.num_end_rhymes>50,50,df_edit.num_end_rhymes)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_edit['end_rhyme_ratio'],"numpy.where(df_edit.end_rhyme_ratio>50,50,df_edit.end_rhyme_ratio)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
j,numpy.ceil(n_components/4),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
df['sentiment_polarity'],"numpy.select(conditions,choices,'neutral')",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
"locs,labels",matplotlib.pyplot.xticks(),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
"'Romney':np.array(romney_list)},index",pandas.to_datetime(date_list),CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
xml_text,requests.get(xml_url),CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
S,"numpy.zeros(stI[0,:,:].shape)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
S,"numpy.zeros(stI[0,:,:].shape)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"S[:n,:n]",numpy.diag(SigmaNew),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"S[:n,:n]",numpy.diag(SigmaNew),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
stI,numpy.load('../data/stokesI_sunspot.npy'),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"U,Sigma,Vt","numpy.linalg.svd(stI[0,:,:])",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"f,ax","matplotlib.pyplot.subplots(nrows=2,ncols=4,figsize=(17,8)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df_beta0_simulate,pandas.DataFrame(beta0_simulate),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_beta1_simulate,pandas.DataFrame(beta1_simulate),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_beta2_simulate,pandas.DataFrame(beta2_simulate),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_yield_simulate,pandas.DataFrame(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
mis_val_table,"pandas.concat([mis_val,mis_val_percent],axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_param_simulate,"pandas.concat(
[df_beta0_simulate,df_beta1_simulate,df_beta2_simulate],axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('OIS-daily-data_2016-to-present.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('data_NS_params_tau_1.39407259.csv',index_col=0)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data['date'],pandas.to_datetime(data['date']),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data.index,pandas.to_datetime(data.index),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
month_maturity,"numpy.arange(1,61)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array(np.linspace(start_date,end_date,len(data)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
sd0,numpy.sqrt(np.var(ar_beta0_.resid),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
sd1,numpy.sqrt(np.var(ar_beta1_.resid),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
sd2,numpy.sqrt(np.var(ar_beta2_.resid),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"x,y","numpy.meshgrid(x,y)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(projection='3d'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
dataset,pandas.read_csv(csv_path),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_dataset,pandas.read_csv(csv_path),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
yHat,numpy.array([]),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_test,numpy.array(normalized_dataset),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
one_hot_encode,"numpy.zeros((num_labels,unique)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
dJdW[len(dJdW)-1],"numpy.dot(self.a[a_idx].T,delta)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
dJdW[i],"numpy.dot(self.a[a_idx].T,delta)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
dJdW[0],"numpy.dot(x.T,delta)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ifnp.argmax(y[i]),=numpy.argmax(yHat[i]),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ifnp.argmax(Y_validation[i]),=numpy.argmax(predictions[i]),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
mean[x],numpy.mean(dataset[x]),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
mean[x],numpy.mean(test_dataset[x]),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
std[x],numpy.std(dataset[x]),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
std[x],numpy.std(test_dataset[x]),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
loss,numpy.sum(-y_batch*np.log(yHat),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
loss,numpy.sum(-Y_validation*np.log(predictions),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
e_z,numpy.exp(z-z.max(1),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
e_z,numpy.exp(z-z.max(1),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ret,"numpy.maximum(0,z)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
delta,"numpy.multiply(np.dot(delta,self.W[i+1].T)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
delta,"numpy.multiply(np.dot(delta,self.W[1].T)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
tanh_z,numpy.tanh(z),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
yHat,"numpy.vstack((yHat,yHat_batch)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
splitted,"numpy.split(normalized_dataset,[int(.8*len(dataset)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
mean_price,numpy.mean(prices),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
std_price,numpy.std(prices),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
median_price,numpy.median(prices),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('housing.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.r2_score(y_true,y_predict)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scoring_fnc,sklearn.metrics.make_scorer(performance_metric),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
regressor,sklearn.tree.DecisionTreeRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
factor_volume001,pandas.DataFrame(factor_volume001),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
factor_volume001,"pandas.concat(factor_volume001,axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
start,"datetime.datetime(2013,1,1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
end,"datetime.datetime(2017,4,18,15)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
gp,"sklearn.gaussian_process.GaussianProcessRegressor(kernel=kernel,n_restarts_optimizer=1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
X,"numpy.array([-1,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,-0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y,numpy.sin(1.5*X),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
yactual,numpy.sin(x),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
X2,numpy.atleast_2d(X),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y,numpy.atleast_2d(y),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x,"numpy.atleast_2d(np.array([-0.95,-0.923,-0.921,-0.78,-0.701,-0.6,-0.554,-0.4,-0.344,-0.32,-0.25,-0.175,-0.105,-0.001,0.12,0.225,0.53,0.659,0.70,0.93])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
l1,"numpy.percentile(ds,b1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
l2,"numpy.percentile(ds,b2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"x,y","numpy.unique(insert_sizes,return_counts=True)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"ins_distr_x,ins_distr_y","numpy.unique(ins_quals,return_counts=True)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"subst_distr_x,subst_distr_y","numpy.unique(subst_quals,return_counts=True)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
full_set,pandas.read_csv('D:/Datasets/Titanic/train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
sub_set,pandas.read_csv('D:/Datasets/Titanic/test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
scisvm,sklearn.svm.SVC(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
score,"sklearn.metrics.roc_auc_score(Y_Train,yhat_train)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
score,"sklearn.metrics.roc_auc_score(Y,Y_hat)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y_Train,yhat_train)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(Y,Y_hat)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
values,"pandas.Series(samples.get_values(varname,chains=chain)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(N),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sigma,"numpy.array([[1,.6],[.6,1]])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mu,"numpy.array([.5,.5])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.asarray(x),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
chain,numpy.asarray(chain),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mcmc_map,"numpy.mean(chain,axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
numerator,numpy.exp(-numpy.matrix(x-mu),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"pandas.plotting.autocorrelation_plot(chain[:,0],ax",matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"pandas.plotting.autocorrelation_plot(chain[:,1],ax",matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.title('MCMCvaluesforbivariatenormal'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.title('MCMCvaluesforbivariatenormalwithburn-in'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.title('SyntheticdataforBayesregressionproblem'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.title('SyntheticdataforBayesregressionproblemfor50xsample'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xlabel('Y'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linear_model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linear_model_50,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pred,"numpy.argmax(pred,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_compare,"numpy.argmax(y_test,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies,pandas.get_dummies(df[target]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('HR_comma_sep.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=7)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(y_compare,pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_compare,pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rho,numpy.ones(nx),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
rhon,numpy.ones(nx),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
rho,numpy.ones(nx),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
V,numpy.ones(nx),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,L,nx)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tick_marks,numpy.arange(len(classes),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"f,((ax1,ax2),(ax3,ax4),(ax5,ax6))","matplotlib.pyplot.subplots(3,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(boston.data,
boston.target,
test_size=0.25,
random_state=33)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
classifier,sklearn.tree.DecisionTreeClassifier(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(tree_reg,param_grid,cv=5,
scoring='neg_mean_squared_error',
return_train_score=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
grid_search_r2,"sklearn.model_selection.GridSearchCV(tree_reg,param_grid,cv=5,
scoring='r2',return_train_score=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tree_reg,sklearn.tree.DecisionTreeRegressor(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tree_reg,sklearn.tree.DecisionTreeRegressor(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tree_reg,sklearn.tree.DecisionTreeRegressor(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
rand_search,"sklearn.model_selection.RandomizedSearchCV(tree_reg,param_distributions=param_grid,cv=5,
scoring='neg_mean_squared_error',
n_iter=10,
return_train_score=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_classification(n_classes=2,class_sep=2,weights=[0.3,0.7],
n_informative=3,n_redundant=1,flip_y=0,
n_features=20,n_clusters_per_class=1,
n_samples=80,random_state=10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
lista,numpy.array(lista),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
lista,numpy.array(lista),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
lista,numpy.array(lista),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
Ic,numpy.array([each**2ifeach>0elseeachforeachinliczby]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
ticks,numpy.arange(np.min(data),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_11
weights,"numpy.zeros((filter_size,
filter_size,
number_of_classes,
number_of_classes)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_11
are_equal,"numpy.allclose(upsampled_img_skimage,upsampled_img_tf)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_11
segmentation,numpy.squeeze(segmentation),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_11
expanded_img,"numpy.expand_dims(input_img,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_11
"unique_classes,relabeled_image","numpy.unique(segmentation,
return_inverse=True)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_11
"unique_classes,relabeled_image","numpy.unique(upsampled_predictions,
return_inverse=True)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_11
img,numpy.repeat((x+y),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_11
rank_df,pandas.DataFrame(rank),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
median_income_df,pandas.DataFrame(median_income),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
name_df,pandas.DataFrame(names),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
LA_Times,"pandas.DataFrame({'MedianRank':rank,
'LANeighborhood':names,
'MedianIncome':median_income
},columns=['MedianRank','LANeighborhood','MedianIncome'])",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
LA_Times_diversity,"pandas.DataFrame({'DiversityRank':rank1,
'LANeighborhood':names1,
'DiversityIndex':diversity_index
},columns=['DiversityRank','LANeighborhood','DiversityIndex'])",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
LA_Times_popdensity,"pandas.DataFrame({'PopulationDensityRank':rank2,
'LANeighborhood':names2,
'PopulationPerSqMile':population_density
},columns=['PopulationDensityRank','LANeighborhood','PopulationPerSqMile'])",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
final_location_table1,"pandas.merge(LA_Times,LA_Times_diversity,on=""LANeighborhood"",how=""left"")",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
final_location_table,"pandas.merge(final_location_table1,LA_Times_popdensity,on=""LANeighborhood"",how=""left"")",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
inputMovies,pandas.DataFrame(userInput),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
recommendation_df,pandas.DataFrame(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
inputMovies,"pandas.merge(inputId,inputMovies)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
movies_df,pandas.read_csv('movies.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ratings_df,pandas.read_csv('ratings.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
legend,"matplotlib.pyplot.legend(loc='upperright',frameon=False,title=legend_title,
prop=dict(size='x-small')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,numpy.sin(X),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y_test,numpy.sin(X_test),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
xdata,"numpy.linspace(0,5,50)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_plot,numpy.linspace(X.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"%timebeta_opt,beta_conv","scipy.optimize.leastsq(g,beta_start)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mse,sklearn.metrics.mean_squared_error(model.predict(X_test),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,sklearn.pipeline.make_pipeline(PolynomialFeatures(3),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([(1,i[0],i[1])",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cost,numpy.zeros(iterations),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cost,numpy.zeros(iterations),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cost,numpy.zeros(iterations),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
prediction,"numpy.dot(x,theta)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
prediction,"numpy.dot(x_i,theta)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
prediction,"numpy.dot(x_i,theta)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.load(""Ex3X.npy"")",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.load(""Ex3y.npy"")",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
try:js,json.loads(str(data),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
fig1,matplotlib.pyplot.figure(1),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_29,CLUSTER_8
fig2,matplotlib.pyplot.figure(2),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_29,CLUSTER_8
start,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_29,CLUSTER_8
epochStart,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_29,CLUSTER_8
epochEnd,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_29,CLUSTER_8
end,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_29,CLUSTER_8
train_images,numpy.asarray(train_images),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
train_labels,numpy.asarray(train_labels),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
test_images,numpy.asarray(test_images),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
test_labels,numpy.asarray(test_labels),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
b1,"numpy.zeros((n_h,1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
b2,"numpy.zeros((classes,1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Z1,"numpy.matmul(W1,X)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Z2,"numpy.matmul(W2,A1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
dA1,"numpy.matmul(W2.T,dZ2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Z1,"numpy.matmul(W1,X_test)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Z2,"numpy.matmul(W2,A1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
predictions,"numpy.argmax(A2,axis=0)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
labels,"numpy.argmax(Y_test,axis=0)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
L_sum,"numpy.sum(np.multiply(Y,np.log(Y_hat.clip(min=minval)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
A2,numpy.exp(Z2),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
A2,numpy.exp(Z2),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Y_new,numpy.eye(classes),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Y_new,numpy.eye(classes),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
X_normalized,"sklearn.preprocessing.normalize(X,norm='l1')",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
X_normalized,"sklearn.preprocessing.normalize(X,norm='l2')",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
res,"numpy.argmax(classifier.predict(input_im,1,verbose=0)",CLUSTER_23,CLUSTER_6,CLUSTER_11,CLUSTER_0,CLUSTER_1
text,"re.sub(r""[^a-zA-Z0-9]"","""",text.lower()",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
predictions,numpy.array([]),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
predictions,"numpy.append(predictions,predictor.predict(array)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
split_array,"numpy.array_split(data,int(data.shape[0]/float(rows)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
test_X,pandas.concat([pd.DataFrame(test_X_len),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
train_sample,"pandas.read_csv(os.path.join(data_dir,'train.csv')",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_4
"df_test[""K_pred_LDA""]","numpy.where(delta1_LDA>delta2_LDA,1,2)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"df_test[""K_pred_Bayes""]","numpy.where(delta1_Bayes>delta2_Bayes,1,2)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
muhat1,numpy.mean(X1),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
muhat2,numpy.mean(X2),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
xrange,"numpy.linspace(-5,5,100)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_test,pandas.DataFrame(df_test),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
rgb_img,numpy.squeeze(images[3]),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
correct,numpy.squeeze(correct_tensor.numpy(),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
preds,numpy.squeeze(preds_tensor.numpy(),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(36,36)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
InitialState,"numpy.array([[0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
[0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
[0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0],
[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0],
[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0],
[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
InitialState,"numpy.array([[0,0,0,0,0],
[0,0,0,1,1],
[0,0,0,1,1],
[0,1,1,0,1],
[0,0,1,1,1],
[0,0,0,0,0],
[0,0,0,0,0],
[0,0,0,0,0]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
NextState,"numpy.array([[0,0,0,0,0],
[0,0,0,1,1],
[0,0,0,1,1],
[0,1,1,1,1],
[0,0,1,1,1],
[0,0,0,0,0],
[0,0,0,0,0],
[0,0,0,0,0]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
InitialState,"numpy.array([np.zeros(5,dtype=int)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
ligne,"numpy.zeros(size+size//2,dtype=int)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
"unique,counts","numpy.unique(InitialState,return_counts=True)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
"unique,counts",numpy.unique(MakeParallel(20),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
time_start,time.perf_counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
time_start,time.perf_counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
time_start,time.perf_counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
time_start,time.perf_counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
time_start,time.perf_counter(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
self.data,numpy.arange(5.),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
self.data,numpy.arange(5.),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
self.data,numpy.arange(5.),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
self.data,numpy.arange(50.),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
threshold_scale,numpy.linspace(df_can['Total'].min(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"count,bin_edges","numpy.histogram(df_can[""2013""])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"count,bin_edges","numpy.histogram(df_dsn,15)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_total,pandas.DataFrame(df_can[years].sum(axis=0),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_total,pandas.DataFrame(df_can[years].sum(axis=0),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_incidents,"pandas.read_csv(""Police_Department_Incidents_-_Previous_Year__2016_.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_can,"pandas.read_excel(""Canada.xlsx"",sheet_name=""CanadabyCitizenship"",skiprows=range(20)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x=""Year"",
y=""Total"",
data=df_total)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x=""Year"",
y=""Total"",
data=df_total,
color=""darkblue""
)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x=""Year"",
y=""Total"",
data=df_total,
color=""lime"",
marker=""+""
)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x=""Year"",
y=""Total"",
data=df_total,
color=""chocolate""
)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x=""Year"",
y=""Total"",
data=df_total,
color=""red"",
scatter_kws={""s"":200}
)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x=""Year"",
y=""Total"",
data=df_total,
color=""lime"",
scatter_kws={""s"":200}
)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"pandas.DataFrame(columns=['user','cpu','메인보드','VGA','memory','ssd','HDD','파워','purpose','price'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"pandas.DataFrame([[i,cpu,main,VGA,memory,SSD,HDD,power,purpose,price]],columns=b.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"pandas.DataFrame(columns=['user','cpu','메인보드','VGA','memory','ssd','HDD','파워','purpose','price'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"pandas.DataFrame([[i,cpu,main,VGA,memory,SSD,HDD,power,purpose,price]],columns=b.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dff,pandas.DataFrame(columns=df.columns),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
d,"pandas.DataFrame([a,b,c])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cs_,pandas.DataFrame(cs),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_cs,pandas.DataFrame(cs),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_price,pandas.DataFrame((df_price),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"pandas.concat([b,a],axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"pandas.concat([b,a],axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
c,"pandas.concat([a,b])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
concat_onehot,"pandas.concat([df_cpu_onehot,df_VGA_onehot,df_memory_onehot,df_ssd_onehot,df_HDD_onehot,df_power_onehot,df_main_onehot,df_purpose_onehot,df_price_onehot],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,df_price],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"pandas.read_csv(r'C:\Users\Affinity\Documents\카카오톡받은파일\rec_crawl_168_1.csv',delimiter=',',encoding='utf-16')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,"pandas.read_csv(r'C:\Users\Affinity\Documents\카카오톡받은파일\rec_crawl_168_2.csv',delimiter=',',encoding='utf-16')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(r'C:\Users\Affinity\Downloads\data_cut1.csv',delimiter=',',encoding='utf-16')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('droped_data.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('concat_onehot.csv',encoding='utf-16',delimiter=',')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svd,"sklearn.decomposition.TruncatedSVD(n_components=5,n_iter=7,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=30),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(pred_classes,test_classes)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
t,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
reduced_features,sklearn.manifold.TSNE(n_components=3),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
school_df,pandas.DataFrame(high_school_dicts),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
schools_df,pandas.DataFrame(),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_df_from_dict,pandas.DataFrame(high_schools_dict),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
new_school_df,pandas.DataFrame(),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_series,pandas.Series(high_schools),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
self.df,pandas.DataFrame(),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_22,CLUSTER_0
img_flat_df,pandas.DataFrame(img_flat),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_22,CLUSTER_0
self.df_pca,pandas.DataFrame(pca_result),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_22,CLUSTER_0
self.df_tsne,pandas.DataFrame(tsne_result),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_22,CLUSTER_0
self.df,"pandas.concat([self.df,img_flat_df],sort=True)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_22,CLUSTER_0
train_labels,"pandas.read_csv(dpath+'train_labeled_studies.csv',header=None)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_22,CLUSTER_0
suffixes,os.listdir(path),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_22,CLUSTER_0
hue,"'label',alpha=0.8,legend='full',palette=seaborn.color_palette(""bright"",2)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_22,CLUSTER_0
hue,"'label',alpha=1,legend='full',palette=seaborn.color_palette(""bright"",2)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_22,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=n_comp),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_22,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=n_comp,verbose=0,perplexity=perplexity,n_iter=1000,
learning_rate=learning_rate)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_22,CLUSTER_0
allyears,pandas.concat(names_all),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
names2011,pandas.read_csv('names/yob2011.txt'),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
names2011,"pandas.read_csv('names/yob2011.txt',names=['name','sex','number'])",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
palette,seaborn.color_palette(),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
xtest,"numpy.array([[x,x2,0.]forx2iny])",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(-1.,1.,100)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axs","matplotlib.pyplot.subplots(3,2,figsize=(18,20)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
b1,"numpy.zeros((n_h,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
b2,"numpy.zeros((n_y,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
parameters['b'+str(l)],"numpy.zeros((layer_dims[l],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,"numpy.dot(W,A)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dW,"numpy.dot(dZ,A_prev.T)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dA_prev,"numpy.dot(W.T,dZ)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cost,numpy.squeeze(cost),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
db,"numpy.sum(dZ,axis=1,keepdims=True)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
district_summary_df,"pandas.DataFrame({""TotalSchools"":[total_schools],
""TotalStudents"":[total_students],
""TotalBudget"":[district_school_budget],
""AverageMathScore"":[average_math_score],
""AverageReadingScore"":[average_reading_score],
""PassingMath"":[passing_math_per],
""PassingReading"":[passing_reading_per],
""OverallPassingRate"":[overall_passing_rate_per]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
math_scores,"pandas.DataFrame({""9th"":gr9cum_math/gr9tot_stu,
""10th"":gr10cum_math/gr10tot_stu,
""11th"":gr11cum_math/gr11tot_stu,
""12th"":gr12cum_math/gr11tot_stu})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
read_scores,"pandas.DataFrame({""9th"":gr9cum_read/gr9tot_stu,
""10th"":gr10cum_read/gr10tot_stu,
""11th"":gr11cum_read/gr11tot_stu,
""12th"":gr12cum_read/gr12tot_stu})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_scores_spending,"pandas.DataFrame({""AverageMathScore"":math_scores_spending,
""AverageReadingScore"":reading_scores_spending})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_size_scores,"pandas.DataFrame({""AverageMathScore"":math_scores_size,
""AverageReadingScore"":reading_scores_size})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_type_scores,"pandas.DataFrame({""AverageMathScore"":math_scores_type,
""AverageReadingScore"":reading_scores_type})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"summary[""SpendingRange""]","pandas.cut(summary[""PerStudentBudget""],bins_spending,labels=group_names_spending)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"summary[""SchoolSize""]","pandas.cut(summary[""TotalStudents""],size_bins_sizes,labels=group_names_sizes)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_data_complete,"pandas.merge(student_data,school_data,how=""left"",on=[""school_name"",""school_name""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
school_data,pandas.read_csv(school_data_to_load),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
student_data,pandas.read_csv(student_data_to_load),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
district_school_budget,numpy.sum(district_school_budget),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
end,time.time(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
df,pandas.DataFrame(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sum_set,pandas.DataFrame(lang_sets[key][['Page']]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
df_median,pandas.DataFrame(train_flattened.groupby(['Page']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
df_mean,pandas.DataFrame(train_flattened.groupby(['Page']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
times_series_means,pandas.DataFrame(mean_group),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
"times_series_means[['year','month','day']]","pandas.DataFrame(times_series_means['Date_str'].str.split('-',2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
date_staging,"pandas.DataFrame(times_series_means['day'].str.split('',2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
data_pred,"pandas.DataFrame(pd.Series(data[""date""][data.shape[0]-1]+timedelta(days=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
inter,"pandas.DataFrame(pd.Series(data[""date""][data.shape[0]-1]+timedelta(days=i+2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
to_predict,"pandas.DataFrame(columns=['lag1','lag2','lag3','lag4','lag5','lag6','lag7','lag8','weekday'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
prediction,pandas.DataFrame(columns=['diff']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
prediction,pandas.DataFrame(model.predict(to_predict),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
X,"pandas.DataFrame(index=range(0,len(data)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
dfoutput,"pandas.Series(dftest[0:4],index=['TestStatistic','p-value','
forkey,valueindftest[4].items()",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
row,"pandas.Series([lag1,lag2,lag3,lag4,lag5,lag6,lag7,lag8,weekday]
,['lag1','lag2','lag3','lag4','lag5','lag6','lag7','lag8','weekday'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
data_pred,"pandas.concat([data_pred,inter])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
data_lag,"pandas.concat([data_lag,prediction.join(data_pred[""date""])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
train_flattened,pandas.melt(train[list(train.columns[-50:]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
train,pandas.read_csv(path),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
train,pandas.read_csv(path),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
key,"pandas.read_csv(""../input/key_1.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
train_all,pandas.read_csv(path),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
key,pandas.read_csv(key_path),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
data.index,pandas.to_datetime(data.index),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
data,"numpy.array(train.loc[top_pages[key],cols])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
data,"numpy.array(train.loc[top_pages[key],cols],'f')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
fig,"matplotlib.pyplot.figure(1,figsize=[10,10])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
fig,"matplotlib.pyplot.figure(1,figsize=[15,5])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
fig,"matplotlib.pyplot.figure(2,figsize=[15,5])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
fig,"matplotlib.pyplot.figure(1,figsize=(10,5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
fig,"matplotlib.pyplot.figure(1,figsize=(10,5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
fig,"matplotlib.pyplot.figure(1,figsize=[10,5])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
orig,"matplotlib.pyplot.plot(timeseries,color='blue',label='Original')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
mean,"matplotlib.pyplot.plot(rolmean,color='red',label='RollingMean')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
std,"matplotlib.pyplot.plot(rolstd,color='black',label='RollingStd')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
"line_up,","matplotlib.pyplot.plot(prediction,label='Prediction')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
"line_down,",matplotlib.pyplot.plot(np.array(y_test),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
res,"re.search('[a-z][a-z].wikipedia.org',page)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
r2,sklearn.metrics.r2_score(y_ts.as_matrix(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
fft_complex,scipy.fftpack.fft(sums[key]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
model0,"sklearn.ensemble.AdaBoostRegressor(n_estimators=5000,random_state=42,learning_rate=0.01)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
model1,"sklearn.ensemble.AdaBoostRegressor(n_estimators=5000,random_state=42,learning_rate=0.01)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
model_fin,"sklearn.ensemble.AdaBoostRegressor(n_estimators=5000,random_state=42,learning_rate=0.01)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
Mean_Error,sklearn.metrics.mean_absolute_error(y_ts.as_matrix(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_12,CLUSTER_0
df,pandas.read_csv('tmdb-movies.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sd,numpy.sqrt(p*(1-p),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
se_p,numpy.sqrt(p_null*(1-p_null),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('data/statistical_significance_data.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y_train_df,"pandas.DataFrame({""y_train"":y_train,""log1p(y_train)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_scores_df,"pandas.DataFrame({""test_scores"":test_scores})",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
submission_df,"pandas.DataFrame(data={'Id':test_df.index,'SalePrice':y_xgboost})",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
submission_df2,"pandas.DataFrame(data={'Id':test_df.index,'SalePrice':y_final})",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
all_df,"pandas.concat((train_df,test_df)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
all_dummy_df,pandas.get_dummies(all_df),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_df,"pandas.read_csv('train.csv',index_col=0)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_df,"pandas.read_csv('test.csv',index_col=0)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
min_indx,numpy.argmin(test_scores),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y_xgboost,numpy.expm1(xgboost.predict(X_test),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y_ridge,numpy.expm1(ridge.predict(X_test),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y_train,numpy.log1p(y_train),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_score,"numpy.sqrt(-cross_val_score(clf,X_train,y_train,cv=10,scoring='neg_mean_squared_error')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_score,"numpy.sqrt(-cross_val_score(clf,X_train,y_train,cv=5,scoring='neg_mean_squared_error')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_score,"numpy.sqrt(-cross_val_score(clf,X_train,y_train,cv=10,scoring='neg_mean_squared_error')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_score,"numpy.sqrt(-cross_val_score(clf,X_train,y_train,cv=10,scoring='neg_mean_squared_error')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_score,"numpy.sqrt(-cross_val_score(clf,X_train,y_train,cv=10,scoring='neg_mean_squared_error')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_score,"numpy.sqrt(-cross_val_score(clf,X_train,y_train,cv=10,scoring='neg_mean_squared_error')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
alphas,"numpy.logspace(-3,2,80)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.Ridge(alpha),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ridge,sklearn.linear_model.Ridge(15),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ridge,sklearn.linear_model.Ridge(alpha=13),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestRegressor(n_estimators=200,max_features=max_feat)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
random_model,sklearn.ensemble.RandomForestRegressor(0.3),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.BaggingRegressor(n_estimators=param,base_estimator=ridge)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.AdaBoostRegressor(n_estimators=param),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
a5,"numpy.arange(0,10,2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a8,"numpy.arange(1,13)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
ndarr,"numpy.array([[1,2,3],[4,5,6]],dtype=np.int8)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a3,"numpy.array([[1,2,3],[4,5,6],[7,8,9]],dtype=np.int8)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a4,"numpy.array([[0,2,3],[0,5,6],[0,8,9]],dtype=np.bool)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a6,"numpy.array([1,2,3])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr_int,numpy.arange(max_num),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.arange(1,5,dtype=float)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,"numpy.arange(1,11)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,numpy.arange(12),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,numpy.arange(16),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr1,"numpy.array([1,3,5,8.0])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.array([1,2,3,4,5])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr2d,"numpy.array([[1,2,3],[4,5,6],[7,8,9]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr2d,"numpy.array([[2,5,8],[10,20,30]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,4],[6,9]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.array([1,3,5,7])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,"numpy.array([-4,-6,-7,-10])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
cond,"numpy.array([True,False,False,True])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.array([[1,2,3],[4,5,6]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.array([1,3,12,7,9])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
bool_arr,"numpy.array([True,True,False,True])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
arr,"numpy.array([3,-2,8,1,5])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
names,"numpy.array(['Moran','Rosy','Eyerusalem','Marnie','Moran'])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('../dataset/quora_train.csv',dtype=dtypes)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv('../dataset/quora_test.csv',dtype=dtypes,iterator=True,chunksize=10000)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('ScrapedDataToronto.csv'),CLUSTER_27,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,pandas.read_html(html),CLUSTER_27,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
img,matplotlib.pyplot.imread(BytesIO(byte),CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(6,2,figsize=(200,200)",CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
m,re.match(r'^(\d{3}),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
re_telephone,re.compile(r'^(\d{3}),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('../data/nyc_taxi.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['timestamp'],pandas.to_datetime(data['timestamp']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.RobustScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
regiaoAvaliacao,pandas.DataFrame(regiaoAvaliacao),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
features_minmax,pandas.DataFrame(data=features_raw),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,"pandas.DataFrame(select.scores_,principais_features)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
features_final,pandas.get_dummies(features_minmax),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('20141.csv',sep=';')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
d['DiaAbertura'],pandas.to_datetime(d['DataAbertura']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
d['DiaResposta'],pandas.to_datetime(d['DataResposta']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
d['DiaFinalização'],pandas.to_datetime(d['DataFinalização']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
d['MêsAbertura'],pandas.to_datetime(d['DataAbertura']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
d['MêsResposta'],pandas.to_datetime(d['DataResposta']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
d['MêsFinalização'],pandas.to_datetime(d['DataFinalização']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
select,sklearn.feature_selection.SelectPercentile(percentile=50),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.naive_bayes.MultinomialNB(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.f1_score(y_test,pred,average=""micro"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.f1_score(y_test,pred,average=""micro"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.f1_score(y_test,pred,average=""micro"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_gbc,sklearn.multiclass.OneVsRestClassifier(GradientBoostingClassifier(random_state=101),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_svc,sklearn.multiclass.OneVsRestClassifier(LinearSVC(random_state=101),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_gbc,"sklearn.multiclass.OneVsRestClassifier(GradientBoostingClassifier(learning_rate=0.1,n_estimators=60,min_samples_split=2,min_samples_leaf=40,max_depth=5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_svc,sklearn.multiclass.OneVsRestClassifier(LinearSVC(random_state=101),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scor,"sklearn.metrics.make_scorer(f1_score,average=""micro"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scor,"sklearn.metrics.make_scorer(f1_score,average=""micro"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xvals,"numpy.arange(w_star[0]-tmpdel,w_star[0]+tmpdel,0.01)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
yvals,"numpy.arange(w_star[1]-tmpdel,w_star[1]+tmpdel,0.01)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-1,1,0.01)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.arange(-1,1,0.01)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-10,10,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.arange(-10,10,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-100,100,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.arange(-100,100,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
w_store,numpy.array(algo.wstore),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
loss_transition,numpy.array(algo.loss_store),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
d,"numpy.array([[1,2],[2,3]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
c,"numpy.array([1,2])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
c,"numpy.linspace(0,_t_max,len(w_store)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"x1,x2","numpy.meshgrid(xvals,yvals)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tmpdel,numpy.linalg.norm(w_star-w_init),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
myfig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mse,sklearn.metrics.mean_squared_error(self.org_data[i].flatten(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_0
mse_base_line,sklearn.metrics.mean_squared_error(self.shuffled_data[i].flatten(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_0
data,numpy.array(relation.matrix),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_0
f,numpy.load(filename),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,16)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=3,figsize=(25,6)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_0
ChillerOutTemp_chw_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[27]]
,'fault:06':Chw06_Rm26.ix[:,column[27]]
,'fault:07':Chw07_Rm26.ix[:,column[27]]
,'fault:08':Chw08_Rm26.ix[:,column[27]]
,'fault:09':Chw09_Rm26.ix[:,column[27]]
,'fault:10':Chw10_Rm26.ix[:,column[27]]
,'fault:11':Chw11_Rm26.ix[:,column[27]]
,'fault:12':Chw12_Rm26.ix[:,column[27]]
,'fault:13':Chw12_Rm26.ix[:,column[27]]
,'fault:14':Chw12_Rm26.ix[:,column[27]]
,'fault:15':Chw12_Rm26.ix[:,column[27]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerInTemp_chw_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[26]]
,'fault:06':Chw06_Rm26.ix[:,column[26]]
,'fault:07':Chw07_Rm26.ix[:,column[26]]
,'fault:08':Chw08_Rm26.ix[:,column[26]]
,'fault:09':Chw09_Rm26.ix[:,column[26]]
,'fault:10':Chw10_Rm26.ix[:,column[26]]
,'fault:11':Chw11_Rm26.ix[:,column[26]]
,'fault:12':Chw12_Rm26.ix[:,column[26]]
,'fault:13':Chw12_Rm26.ix[:,column[26]]
,'fault:14':Chw12_Rm26.ix[:,column[26]]
,'fault:15':Chw12_Rm26.ix[:,column[26]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerOutMassflow_chw_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[35]]
,'fault:06':Chw06_Rm26.ix[:,column[35]]
,'fault:07':Chw07_Rm26.ix[:,column[35]]
,'fault:08':Chw08_Rm26.ix[:,column[35]]
,'fault:09':Chw09_Rm26.ix[:,column[35]]
,'fault:10':Chw10_Rm26.ix[:,column[35]]
,'fault:11':Chw11_Rm26.ix[:,column[35]]
,'fault:12':Chw12_Rm26.ix[:,column[35]]
,'fault:13':Chw12_Rm26.ix[:,column[35]]
,'fault:14':Chw12_Rm26.ix[:,column[35]]
,'fault:15':Chw12_Rm26.ix[:,column[35]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerOutTemp_rm_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'rm:18':Chw07_Rm18.ix[:,column[27]]
,'rm:19':Chw07_Rm19.ix[:,column[27]]
,'rm:20':Chw07_Rm20.ix[:,column[27]]
,'rm:21':Chw07_Rm21.ix[:,column[27]]
,'rm:22':Chw07_Rm22.ix[:,column[27]]
,'rm:23':Chw07_Rm23.ix[:,column[27]]
,'rm:24':Chw07_Rm24.ix[:,column[27]]
,'rm:25':Chw07_Rm25.ix[:,column[27]]
,'rm:26':Chw07_Rm26.ix[:,column[27]]
,'rm:27':Chw07_Rm27.ix[:,column[27]]
,'rm:28':Chw07_Rm28.ix[:,column[27]]
,'rm:29':Chw07_Rm29.ix[:,column[27]]
,'rm:30':Chw07_Rm30.ix[:,column[27]]
,'rm:31':Chw07_Rm31.ix[:,column[27]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerInTemp_rm_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'rm:18':Chw07_Rm18.ix[:,column[26]]
,'rm:19':Chw07_Rm19.ix[:,column[26]]
,'rm:20':Chw07_Rm20.ix[:,column[26]]
,'rm:21':Chw07_Rm21.ix[:,column[26]]
,'rm:22':Chw07_Rm22.ix[:,column[26]]
,'rm:23':Chw07_Rm23.ix[:,column[26]]
,'rm:24':Chw07_Rm24.ix[:,column[26]]
,'rm:25':Chw07_Rm25.ix[:,column[26]]
,'rm:26':Chw07_Rm26.ix[:,column[26]]
,'rm:27':Chw07_Rm27.ix[:,column[26]]
,'rm:28':Chw07_Rm28.ix[:,column[26]]
,'rm:29':Chw07_Rm29.ix[:,column[26]]
,'rm:30':Chw07_Rm30.ix[:,column[26]]
,'rm:31':Chw07_Rm31.ix[:,column[26]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
IndoorDryTemp_rm_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'rm:18':Chw07_Rm18.ix[:,column[4]]
,'rm:19':Chw07_Rm19.ix[:,column[4]]
,'rm:20':Chw07_Rm20.ix[:,column[4]]
,'rm:21':Chw07_Rm21.ix[:,column[4]]
,'rm:22':Chw07_Rm22.ix[:,column[4]]
,'rm:23':Chw07_Rm23.ix[:,column[4]]
,'rm:24':Chw07_Rm24.ix[:,column[4]]
,'rm:25':Chw07_Rm25.ix[:,column[4]]
,'rm:26':Chw07_Rm26.ix[:,column[4]]
,'rm:27':Chw07_Rm27.ix[:,column[4]]
,'rm:28':Chw07_Rm28.ix[:,column[4]]
,'rm:29':Chw07_Rm29.ix[:,column[4]]
,'rm:30':Chw07_Rm30.ix[:,column[4]]
,'rm:31':Chw07_Rm31.ix[:,column[4]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
IndoorReHud_rm_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'rm:18':Chw07_Rm18.ix[:,column[5]]
,'rm:19':Chw07_Rm19.ix[:,column[5]]
,'rm:20':Chw07_Rm20.ix[:,column[5]]
,'rm:21':Chw07_Rm21.ix[:,column[5]]
,'rm:22':Chw07_Rm22.ix[:,column[5]]
,'rm:23':Chw07_Rm23.ix[:,column[5]]
,'rm:24':Chw07_Rm24.ix[:,column[5]]
,'rm:25':Chw07_Rm25.ix[:,column[5]]
,'rm:26':Chw07_Rm26.ix[:,column[5]]
,'rm:27':Chw07_Rm27.ix[:,column[5]]
,'rm:28':Chw07_Rm28.ix[:,column[5]]
,'rm:29':Chw07_Rm29.ix[:,column[5]]
,'rm:30':Chw07_Rm30.ix[:,column[5]]
,'rm:31':Chw07_Rm31.ix[:,column[5]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
IndoorDryTemp_chw_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[4]]
,'fault:06':Chw06_Rm26.ix[:,column[4]]
,'fault:07':Chw07_Rm26.ix[:,column[4]]
,'fault:08':Chw08_Rm26.ix[:,column[4]]
,'fault:09':Chw09_Rm26.ix[:,column[4]]
,'fault:10':Chw10_Rm26.ix[:,column[4]]
,'fault:11':Chw11_Rm26.ix[:,column[4]]
,'fault:12':Chw12_Rm26.ix[:,column[4]]
,'fault:13':Chw12_Rm26.ix[:,column[4]]
,'fault:14':Chw12_Rm26.ix[:,column[4]]
,'fault:15':Chw12_Rm26.ix[:,column[4]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
IndoorReHud_chw_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[5]]
,'fault:06':Chw06_Rm26.ix[:,column[5]]
,'fault:07':Chw07_Rm26.ix[:,column[5]]
,'fault:08':Chw08_Rm26.ix[:,column[5]]
,'fault:09':Chw09_Rm26.ix[:,column[5]]
,'fault:10':Chw10_Rm26.ix[:,column[5]]
,'fault:11':Chw11_Rm26.ix[:,column[5]]
,'fault:12':Chw12_Rm26.ix[:,column[5]]
,'fault:13':Chw12_Rm26.ix[:,column[5]]
,'fault:14':Chw12_Rm26.ix[:,column[5]]
,'fault:15':Chw12_Rm26.ix[:,column[5]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerCOP_chw_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[21]]
,'fault:06':Chw06_Rm26.ix[:,column[21]]
,'fault:07':Chw07_Rm26.ix[:,column[21]]
,'fault:08':Chw08_Rm26.ix[:,column[21]]
,'fault:09':Chw09_Rm26.ix[:,column[21]]
,'fault:10':Chw10_Rm26.ix[:,column[21]]
,'fault:11':Chw11_Rm26.ix[:,column[21]]
,'fault:12':Chw12_Rm26.ix[:,column[21]]
,'fault:13':Chw13_Rm26.ix[:,column[21]]
,'fault:14':Chw14_Rm26.ix[:,column[21]]
,'fault:15':Chw15_Rm26.ix[:,column[21]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
COP_chw_chara,"pandas.DataFrame({
'min':COP_chw.loc[:,label[1]:label[11]].min()",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerCOP_rm_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'rm:18':Chw07_Rm18.ix[:,column[21]]
,'rm:19':Chw07_Rm19.ix[:,column[21]]
,'rm:20':Chw07_Rm20.ix[:,column[21]]
,'rm:21':Chw07_Rm21.ix[:,column[21]]
,'rm:22':Chw07_Rm22.ix[:,column[21]]
,'rm:23':Chw07_Rm23.ix[:,column[21]]
,'rm:24':Chw07_Rm24.ix[:,column[21]]
,'rm:25':Chw07_Rm25.ix[:,column[21]]
,'rm:26':Chw07_Rm26.ix[:,column[21]]
,'rm:27':Chw07_Rm27.ix[:,column[21]]
,'rm:28':Chw07_Rm28.ix[:,column[21]]
,'rm:29':Chw07_Rm29.ix[:,column[21]]
,'rm:30':Chw07_Rm30.ix[:,column[21]]
,'rm:31':Chw07_Rm31.ix[:,column[21]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
COP_rm_chara,"pandas.DataFrame({
'min':COP_rm.loc[:,label[1]:label[14]].min()",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerPLR_chw_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[20]]
,'fault:06':Chw06_Rm26.ix[:,column[20]]
,'fault:07':Chw07_Rm26.ix[:,column[20]]
,'fault:08':Chw08_Rm26.ix[:,column[20]]
,'fault:09':Chw09_Rm26.ix[:,column[20]]
,'fault:10':Chw10_Rm26.ix[:,column[20]]
,'fault:11':Chw11_Rm26.ix[:,column[20]]
,'fault:12':Chw12_Rm26.ix[:,column[20]]
,'fault:13':Chw12_Rm26.ix[:,column[20]]
,'fault:14':Chw12_Rm26.ix[:,column[20]]
,'fault:15':Chw12_Rm26.ix[:,column[20]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerPLR_rm_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'rm:18':Chw07_Rm18.ix[:,column[20]]
,'rm:19':Chw07_Rm19.ix[:,column[20]]
,'rm:20':Chw07_Rm20.ix[:,column[20]]
,'rm:21':Chw07_Rm21.ix[:,column[20]]
,'rm:22':Chw07_Rm22.ix[:,column[20]]
,'rm:23':Chw07_Rm23.ix[:,column[20]]
,'rm:24':Chw07_Rm24.ix[:,column[20]]
,'rm:25':Chw07_Rm25.ix[:,column[20]]
,'rm:26':Chw07_Rm26.ix[:,column[20]]
,'rm:27':Chw07_Rm27.ix[:,column[20]]
,'rm:28':Chw07_Rm28.ix[:,column[20]]
,'rm:29':Chw07_Rm29.ix[:,column[20]]
,'rm:30':Chw07_Rm30.ix[:,column[20]]
,'rm:31':Chw07_Rm31.ix[:,column[20]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerElec_chw_falut,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[19]]
,'fault:06':Chw06_Rm26.ix[:,column[19]]
,'fault:07':Chw07_Rm26.ix[:,column[19]]
,'fault:08':Chw08_Rm26.ix[:,column[19]]
,'fault:09':Chw09_Rm26.ix[:,column[19]]
,'fault:10':Chw10_Rm26.ix[:,column[19]]
,'fault:11':Chw11_Rm26.ix[:,column[19]]
,'fault:12':Chw12_Rm26.ix[:,column[19]]
,'fault:13':Chw12_Rm26.ix[:,column[19]]
,'fault:14':Chw12_Rm26.ix[:,column[19]]
,'fault:15':Chw12_Rm26.ix[:,column[19]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerElec_rm_falut,"pandas.DataFrame({
'Time':ClgSeason[:]
,'rm:18':Chw07_Rm18.ix[:,column[19]]
,'rm:19':Chw07_Rm19.ix[:,column[19]]
,'rm:20':Chw07_Rm20.ix[:,column[19]]
,'rm:21':Chw07_Rm21.ix[:,column[19]]
,'rm:22':Chw07_Rm22.ix[:,column[19]]
,'rm:23':Chw07_Rm23.ix[:,column[19]]
,'rm:24':Chw07_Rm24.ix[:,column[19]]
,'rm:25':Chw07_Rm25.ix[:,column[19]]
,'rm:26':Chw07_Rm26.ix[:,column[19]]
,'rm:27':Chw07_Rm27.ix[:,column[19]]
,'rm:28':Chw07_Rm28.ix[:,column[19]]
,'rm:29':Chw07_Rm29.ix[:,column[19]]
,'rm:30':Chw07_Rm30.ix[:,column[19]]
,'rm:31':Chw07_Rm31.ix[:,column[19]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChwPumpElec_chw_falut,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[22]]
,'fault:06':Chw06_Rm26.ix[:,column[22]]
,'fault:07':Chw07_Rm26.ix[:,column[22]]
,'fault:08':Chw08_Rm26.ix[:,column[22]]
,'fault:09':Chw09_Rm26.ix[:,column[22]]
,'fault:10':Chw10_Rm26.ix[:,column[22]]
,'fault:11':Chw11_Rm26.ix[:,column[22]]
,'fault:12':Chw12_Rm26.ix[:,column[22]]
,'fault:13':Chw12_Rm26.ix[:,column[22]]
,'fault:14':Chw12_Rm26.ix[:,column[22]]
,'fault:15':Chw12_Rm26.ix[:,column[22]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChwPumpElec_rm_falut,"pandas.DataFrame({
'Time':ClgSeason[:]
,'rm:18':Chw07_Rm18.ix[:,column[22]]
,'rm:19':Chw07_Rm19.ix[:,column[22]]
,'rm:20':Chw07_Rm20.ix[:,column[22]]
,'rm:21':Chw07_Rm21.ix[:,column[22]]
,'rm:22':Chw07_Rm22.ix[:,column[22]]
,'rm:23':Chw07_Rm23.ix[:,column[22]]
,'rm:24':Chw07_Rm24.ix[:,column[22]]
,'rm:25':Chw07_Rm25.ix[:,column[22]]
,'rm:26':Chw07_Rm26.ix[:,column[22]]
,'rm:27':Chw07_Rm27.ix[:,column[22]]
,'rm:28':Chw07_Rm28.ix[:,column[22]]
,'rm:29':Chw07_Rm29.ix[:,column[22]]
,'rm:30':Chw07_Rm30.ix[:,column[22]]
,'rm:31':Chw07_Rm31.ix[:,column[22]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
scop_chw,"pandas.DataFrame({
'Time':Chw05_Rm26.ix[:,column[0]]
,'fault:05':Chw05_Rm26.ix[:,column[19]]*Chw05_Rm26.ix[:,column[21]]/(
Chw05_Rm26.loc[:,column[19]]+Chw05_Rm26.ix[:,column[23]]+Chw05_Rm26.ix[:,column[25]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
scop_chw_chara,"pandas.DataFrame({
'min':scop_chw.loc[:,label[1]:label[11]].min()",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
scop_rm,"pandas.DataFrame({
'Time':Chw07_Rm18.ix[:,column[0]]
,'rm:18':Chw07_Rm18.ix[:,column[19]]*Chw07_Rm18.ix[:,column[21]]/(
Chw07_Rm18.loc[:,column[19]]+Chw07_Rm18.ix[:,column[23]]+Chw07_Rm18.ix[:,column[25]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
scop_rm_chara,"pandas.DataFrame({
'min':scop_rm.loc[:,label[1]:label[14]].min()",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PMV_4S_chw_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[2]]
,'fault:06':Chw06_Rm26.ix[:,column[2]]
,'fault:07':Chw07_Rm26.ix[:,column[2]]
,'fault:08':Chw08_Rm26.ix[:,column[2]]
,'fault:09':Chw09_Rm26.ix[:,column[2]]
,'fault:10':Chw10_Rm26.ix[:,column[2]]
,'fault:11':Chw11_Rm26.ix[:,column[2]]
,'fault:12':Chw12_Rm26.ix[:,column[2]]
,'fault:13':Chw13_Rm26.ix[:,column[2]]
,'fault:14':Chw14_Rm26.ix[:,column[2]]
,'fault:15':Chw15_Rm26.ix[:,column[2]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PMV_4S_chw_fault_chara,"pandas.DataFrame({
'min':PMV_4S_chw_fault.loc[:,label[1]:label[len(label)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PMV_4s_rm_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'rm:18':Chw07_Rm18.ix[:,column[2]]
,'rm:19':Chw07_Rm19.ix[:,column[2]]
,'rm:20':Chw07_Rm20.ix[:,column[2]]
,'rm:21':Chw07_Rm21.ix[:,column[2]]
,'rm:22':Chw07_Rm22.ix[:,column[2]]
,'rm:23':Chw07_Rm23.ix[:,column[2]]
,'rm:24':Chw07_Rm24.ix[:,column[2]]
,'rm:25':Chw07_Rm25.ix[:,column[2]]
,'rm:26':Chw07_Rm26.ix[:,column[2]]
,'rm:27':Chw07_Rm27.ix[:,column[2]]
,'rm:28':Chw07_Rm28.ix[:,column[2]]
,'rm:29':Chw07_Rm29.ix[:,column[2]]
,'rm:30':Chw07_Rm30.ix[:,column[2]]
,'rm:31':Chw07_Rm31.ix[:,column[2]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PMV_4s_rm_fault_chara,"pandas.DataFrame({
'min':PMV_4s_rm_fault.loc[:,label[1]:label[len(label)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PPD_4s_rm_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'rm:18':Chw07_Rm18.ix[:,column[3]]
,'rm:19':Chw07_Rm19.ix[:,column[3]]
,'rm:20':Chw07_Rm20.ix[:,column[3]]
,'rm:21':Chw07_Rm21.ix[:,column[3]]
,'rm:22':Chw07_Rm22.ix[:,column[3]]
,'rm:23':Chw07_Rm23.ix[:,column[3]]
,'rm:24':Chw07_Rm24.ix[:,column[3]]
,'rm:25':Chw07_Rm25.ix[:,column[3]]
,'rm:26':Chw07_Rm26.ix[:,column[3]]
,'rm:27':Chw07_Rm27.ix[:,column[3]]
,'rm:28':Chw07_Rm28.ix[:,column[3]]
,'rm:29':Chw07_Rm29.ix[:,column[3]]
,'rm:30':Chw07_Rm30.ix[:,column[3]]
,'rm:31':Chw07_Rm31.ix[:,column[3]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PPD_4s_rm_fault_chara,"pandas.DataFrame({
'min':PPD_4s_rm_fault.loc[:,label[1]:label[len(label)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PPD_4S_chw_fault,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[3]]
,'fault:06':Chw06_Rm26.ix[:,column[3]]
,'fault:07':Chw07_Rm26.ix[:,column[3]]
,'fault:08':Chw08_Rm26.ix[:,column[3]]
,'fault:09':Chw09_Rm26.ix[:,column[3]]
,'fault:10':Chw10_Rm26.ix[:,column[3]]
,'fault:11':Chw11_Rm26.ix[:,column[3]]
,'fault:12':Chw12_Rm26.ix[:,column[3]]
,'fault:13':Chw13_Rm26.ix[:,column[3]]
,'fault:14':Chw14_Rm26.ix[:,column[3]]
,'fault:15':Chw15_Rm26.ix[:,column[3]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PPD_4S_chw_fault_chara,"pandas.DataFrame({
'min':PPD_4S_chw_fault.loc[:,label[1]:label[len(label)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
IPLV_COP,"pandas.DataFrame({
'p025':ChillerCOP.quantile(.25)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerCOP_chw05,"pandas.DataFrame({
'Time':ClgSeason[:],
'fault:05':Chw05_Rm26.ix[:,column[21]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerCOP_chw12,"pandas.DataFrame({
'Time':ClgSeason[:],
'fault:12':Chw12_Rm26.ix[:,column[21]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PlrCop,"pandas.DataFrame({'Time':ClgSeason[:]
,'COPfault:05':Chw05_Rm26.ix[:,column[21]]
,'PLRfault:05':Chw05_Rm26.ix[:,column[20]]
,'COPfault:06':Chw06_Rm26.ix[:,column[21]]
,'PLRfault:06':Chw06_Rm26.ix[:,column[20]]
,'COPfault:07':Chw07_Rm26.ix[:,column[21]]
,'PLRfault:07':Chw07_Rm26.ix[:,column[20]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
IPLV,"pandas.DataFrame(data=IPLV,columns=['P25','P50','P75','P100'])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PLR,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[20]]
,'fault:06':Chw06_Rm26.ix[:,column[20]]
,'fault:07':Chw07_Rm26.ix[:,column[20]]
,'fault:08':Chw08_Rm26.ix[:,column[20]]
,'fault:09':Chw09_Rm26.ix[:,column[20]]
,'fault:10':Chw10_Rm26.ix[:,column[20]]
,'fault:11':Chw11_Rm26.ix[:,column[20]]
,'fault:12':Chw12_Rm26.ix[:,column[20]]
,'fault:13':Chw13_Rm26.ix[:,column[20]]
,'fault:14':Chw14_Rm26.ix[:,column[20]]
,'fault:15':Chw15_Rm26.ix[:,column[20]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PlrCop_chw05,"pandas.DataFrame({
'Time':ClgSeason[:],
'COP':Chw05_Rm26.ix[:,column[21]],
'PLR':Chw05_Rm26.ix[:,column[20]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PlrCop_chw12,"pandas.DataFrame({
'Time':ClgSeason[:],
'COP':Chw12_Rm26.ix[:,column[21]],
'PLR':Chw12_Rm26.ix[:,column[20]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerElec,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[19]]
,'fault:06':Chw06_Rm26.ix[:,column[19]]
,'fault:07':Chw07_Rm26.ix[:,column[19]]
,'fault:08':Chw08_Rm26.ix[:,column[19]]
,'fault:09':Chw09_Rm26.ix[:,column[19]]
,'fault:10':Chw10_Rm26.ix[:,column[19]]
,'fault:11':Chw11_Rm26.ix[:,column[19]]
,'fault:12':Chw12_Rm26.ix[:,column[19]]
,'fault:13':Chw13_Rm26.ix[:,column[19]]
,'fault:14':Chw14_Rm26.ix[:,column[19]]
,'fault:15':Chw15_Rm26.ix[:,column[19]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChwPumpElec,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[26]]
,'fault:06':Chw06_Rm26.ix[:,column[26]]
,'fault:07':Chw07_Rm26.ix[:,column[26]]
,'fault:08':Chw08_Rm26.ix[:,column[26]]
,'fault:09':Chw09_Rm26.ix[:,column[26]]
,'fault:10':Chw10_Rm26.ix[:,column[26]]
,'fault:11':Chw11_Rm26.ix[:,column[26]]
,'fault:12':Chw12_Rm26.ix[:,column[26]]
,'fault:13':Chw13_Rm26.ix[:,column[26]]
,'fault:14':Chw14_Rm26.ix[:,column[26]]
,'fault:15':Chw15_Rm26.ix[:,column[26]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChwWtOutMf,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[25]]
,'fault:06':Chw06_Rm26.ix[:,column[25]]
,'fault:07':Chw07_Rm26.ix[:,column[25]]
,'fault:08':Chw08_Rm26.ix[:,column[25]]
,'fault:09':Chw09_Rm26.ix[:,column[25]]
,'fault:10':Chw10_Rm26.ix[:,column[25]]
,'fault:11':Chw11_Rm26.ix[:,column[25]]
,'fault:12':Chw12_Rm26.ix[:,column[25]]
,'fault:13':Chw13_Rm26.ix[:,column[25]]
,'fault:14':Chw14_Rm26.ix[:,column[25]]
,'fault:15':Chw15_Rm26.ix[:,column[25]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChwWtDmBpsMf,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[30]]
,'fault:06':Chw06_Rm26.ix[:,column[30]]
,'fault:07':Chw07_Rm26.ix[:,column[30]]
,'fault:08':Chw08_Rm26.ix[:,column[30]]
,'fault:09':Chw09_Rm26.ix[:,column[30]]
,'fault:10':Chw10_Rm26.ix[:,column[30]]
,'fault:11':Chw11_Rm26.ix[:,column[30]]
,'fault:12':Chw12_Rm26.ix[:,column[30]]
,'fault:13':Chw13_Rm26.ix[:,column[30]]
,'fault:14':Chw14_Rm26.ix[:,column[30]]
,'fault:15':Chw15_Rm26.ix[:,column[30]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChwWtOutTemp,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[24]]
,'fault:06':Chw06_Rm26.ix[:,column[24]]
,'fault:07':Chw07_Rm26.ix[:,column[24]]
,'fault:08':Chw08_Rm26.ix[:,column[24]]
,'fault:09':Chw09_Rm26.ix[:,column[24]]
,'fault:10':Chw10_Rm26.ix[:,column[24]]
,'fault:11':Chw11_Rm26.ix[:,column[24]]
,'fault:12':Chw12_Rm26.ix[:,column[24]]
,'fault:13':Chw13_Rm26.ix[:,column[24]]
,'fault:14':Chw14_Rm26.ix[:,column[24]]
,'fault:15':Chw15_Rm26.ix[:,column[24]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PPD_4S,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[3]]
,'fault:06':Chw06_Rm26.ix[:,column[3]]
,'fault:07':Chw07_Rm26.ix[:,column[3]]
,'fault:08':Chw08_Rm26.ix[:,column[3]]
,'fault:09':Chw09_Rm26.ix[:,column[3]]
,'fault:10':Chw10_Rm26.ix[:,column[3]]
,'fault:11':Chw11_Rm26.ix[:,column[3]]
,'fault:12':Chw12_Rm26.ix[:,column[3]]
,'fault:13':Chw13_Rm26.ix[:,column[3]]
,'fault:14':Chw14_Rm26.ix[:,column[3]]
,'fault:15':Chw15_Rm26.ix[:,column[3]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PPD_4S_chara,"pandas.DataFrame({
'min':PPD_4S.loc[:,label[1]:label[11]].min()",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Temperature_4S,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[4]]
,'fault:06':Chw06_Rm26.ix[:,column[4]]
,'fault:07':Chw07_Rm26.ix[:,column[4]]
,'fault:08':Chw08_Rm26.ix[:,column[4]]
,'fault:09':Chw09_Rm26.ix[:,column[4]]
,'fault:10':Chw10_Rm26.ix[:,column[4]]
,'fault:11':Chw11_Rm26.ix[:,column[4]]
,'fault:12':Chw12_Rm26.ix[:,column[4]]
,'fault:13':Chw13_Rm26.ix[:,column[4]]
,'fault:14':Chw14_Rm26.ix[:,column[4]]
,'fault:15':Chw15_Rm26.ix[:,column[4]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Temperature_4S_chara,"pandas.DataFrame({
'min':Temperature_4S.loc[:,label[1]:label[11]].min()",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
RH_4S,"pandas.DataFrame({
'Time':ClgSeason[:]
,'fault:05':Chw05_Rm26.ix[:,column[5]]
,'fault:06':Chw06_Rm26.ix[:,column[5]]
,'fault:07':Chw07_Rm26.ix[:,column[5]]
,'fault:08':Chw08_Rm26.ix[:,column[5]]
,'fault:09':Chw09_Rm26.ix[:,column[5]]
,'fault:10':Chw10_Rm26.ix[:,column[5]]
,'fault:11':Chw11_Rm26.ix[:,column[5]]
,'fault:12':Chw12_Rm26.ix[:,column[5]]
,'fault:13':Chw13_Rm26.ix[:,column[5]]
,'fault:14':Chw14_Rm26.ix[:,column[5]]
,'fault:15':Chw15_Rm26.ix[:,column[5]]
})",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
RH_4S_chara,"pandas.DataFrame({
'min':RH_4S.loc[:,label[1]:label[11]].min()",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
test,"pandas.DataFrame(Chw05_Rm26.loc[:,column[21]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
bb['bins'],"pandas.cut(bb[column[i]],bins)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
bb['bins'],"pandas.cut(bb[column[i]],bins)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ClgSeason,"pandas.date_range('6/1/201700:15:00',periods=samples,freq='15min')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw05_Rm26,"pandas.read_csv(file1,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw06_Rm26,"pandas.read_csv(file2,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm26,"pandas.read_csv(file3,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw08_Rm26,"pandas.read_csv(file4,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw09_Rm26,"pandas.read_csv(file5,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw10_Rm26,"pandas.read_csv(file6,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw11_Rm26,"pandas.read_csv(file7,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw12_Rm26,"pandas.read_csv(file8,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw13_Rm26,"pandas.read_csv(file9,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw14_Rm26,"pandas.read_csv(file10,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw15_Rm26,"pandas.read_csv(file11,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm18,"pandas.read_csv(file21,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm19,"pandas.read_csv(file22,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm20,"pandas.read_csv(file23,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm21,"pandas.read_csv(file24,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm22,"pandas.read_csv(file25,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm23,"pandas.read_csv(file26,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm24,"pandas.read_csv(file27,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm25,"pandas.read_csv(file28,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm27,"pandas.read_csv(file29,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm28,"pandas.read_csv(file30,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm29,"pandas.read_csv(file31,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm30,"pandas.read_csv(file32,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Chw07_Rm31,"pandas.read_csv(file33,header=0)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ClgSeason,"pandas.to_datetime(ClgSeason,format='%m-%d%H:%M')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerOutTemp_chw_fault.index,pandas.to_datetime(ChillerOutTemp_chw_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerInTemp_chw_fault.index,pandas.to_datetime(ChillerInTemp_chw_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerOutMassflow_chw_fault.index,pandas.to_datetime(ChillerOutMassflow_chw_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerOutTemp_rm_fault.index,pandas.to_datetime(ChillerOutTemp_rm_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerInTemp_rm_fault.index,pandas.to_datetime(ChillerInTemp_rm_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
IndoorDryTemp_rm_fault.index,pandas.to_datetime(IndoorDryTemp_rm_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
IndoorReHud_rm_fault.index,pandas.to_datetime(IndoorReHud_rm_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
IndoorDryTemp_chw_fault.index,pandas.to_datetime(IndoorDryTemp_chw_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
IndoorReHud_chw_fault.index,pandas.to_datetime(IndoorReHud_chw_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerCOP_chw_fault.index,pandas.to_datetime(ChillerCOP_chw_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerCOP_rm_fault.index,pandas.to_datetime(ChillerCOP_rm_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerPLR_chw_fault.index,pandas.to_datetime(ChillerPLR_chw_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerPLR_rm_fault.index,pandas.to_datetime(ChillerPLR_rm_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerElec_chw_falut.index,pandas.to_datetime(ChillerElec_chw_falut['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerElec_rm_falut.index,pandas.to_datetime(ChillerElec_rm_falut['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChwPumpElec_chw_falut.index,pandas.to_datetime(ChwPumpElec_chw_falut['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChwPumpElec_rm_falut.index,pandas.to_datetime(ChwPumpElec_rm_falut['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PMV_4S_chw_fault.index,pandas.to_datetime(PMV_4S_chw_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PMV_4s_rm_fault.index,pandas.to_datetime(PMV_4s_rm_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PPD_4s_rm_fault.index,pandas.to_datetime(PPD_4s_rm_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PPD_4S_chw_fault.index,pandas.to_datetime(PPD_4S_chw_fault['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerCOP_chw05.index,pandas.to_datetime(ChillerCOP_chw05['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerCOP_chw12.index,pandas.to_datetime(ChillerCOP_chw12['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PLR.index,pandas.to_datetime(PLR['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PlrCop_chw05.index,pandas.to_datetime(PlrCop_chw05['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PlrCop_chw12.index,pandas.to_datetime(PlrCop_chw12['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChillerElec.index,pandas.to_datetime(ChillerElec['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChwPumpElec.index,pandas.to_datetime(ChwPumpElec['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChwWtOutMf.index,pandas.to_datetime(ChwWtOutMf['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChwWtDmBpsMf.index,pandas.to_datetime(ChwWtDmBpsMf['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ChwWtOutTemp.index,pandas.to_datetime(ChwWtOutTemp['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
PPD_4S.index,pandas.to_datetime(PPD_4S['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Temperature_4S.index,pandas.to_datetime(Temperature_4S['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
RH_4S.index,pandas.to_datetime(RH_4S['Time']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
avg_sentences,numpy.array(avg_sentences),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.array(list(product(avg_sentences,[avg_question_vec])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,"numpy.array([sent_1_answer,sent_2_answer])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
target,numpy.zeros(max_len*(max_len-1),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
avg_sent_vec,numpy.zeros((100),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
avg_sent_vec,"numpy.divide(avg_sent_vec,count)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'div2_type':[],'facs':[],'catnum':[],'paragraph_text':[],'paragraph_xml':[],
'tag':[],'rend':[],'tag_text':[],'tag_xml':[]})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'catnum':[],'Div2':[],'add':[],'p':[]})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
m,re.match(r'.*(\d{3}.*),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(18,8)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
fig1,matplotlib.pyplot.subplot(121),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
fig2,matplotlib.pyplot.subplot(122),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_1
current_vector,numpy.array([vectors_dc[tokens[0]]iftokens[0]invectors_dcelsevectors_dc['<UNK>']]),CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
test_x,numpy.array(test_sentence_vectors),CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
test_y,numpy.array(test_labels),CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
y_pred,"numpy.argmax(predictions,axis=1)",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
min_max_mean,numpy.hstack([current_vector.min(axis=0),CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
current_vector,"numpy.vstack([current_vector,vectors_dc[word]])",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
current_vector,"numpy.vstack([current_vector,vectors_dc['<UNK>']])",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
arr,"numpy.genfromtxt(filename,delimiter='\n')",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
vectors,"numpy.genfromtxt(vectors_file,delimiter='\t',comments='
names=['Word']+['EV{}'.format(i)",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
vectors,"numpy.genfromtxt(vectors_file,delimiter='\t',comments='
names=['Word']+['EV{}'.format(i)",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
line,re.sub(r'(.),CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
emailsRegex,re.compile(r'[\w\.-]+@[\w\.-]+'),CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
userMentionsRegex,re.compile(r'(?<=^|(?<=[^a-zA-Z0-9-_\.]),CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
urlsRegex,re.compile('r(f|ht),CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
numsRegex,"re.compile(r""\b\d+\b"")",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
punctuationNotEmoticonsRegex,re.compile(r'(?<=\w),CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
emoticonsPattern,"re.compile(""|"".join(rep.keys()",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
roc_auc,"sklearn.metrics.auc(fpr,tpr,'macro')",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
"fpr,tpr,thresh","sklearn.metrics.roc_curve(test_y,y_pred_pos)",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
d,pandas.read_csv('Book1.csv'),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('Book1.csv',usecols=[""beratbadan"",""tinggibadan"",""umur"",""banyaksaudara""])",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('Book1.csv',usecols=[x])",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
mode,scipy.stats.mode(df),CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df2,pandas.DataFrame({'pre':result.flatten(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""WineQuality.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressTest,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""scores.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.barplot(x,y,yerr=yerror)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,"numpy.ones((n+1,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
Y,"numpy.reshape(boston_data.target,(m,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"numpy.hstack([np.ones((m,1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
boston_data,sklearn.datasets.load_boston(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,sklearn.preprocessing.scale(X),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=.3)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
lgr,sklearn.linear_model.LinearRegression(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
A,"numpy.zeros((m,n_H,n_W,n_C)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"A[i,h,w,c]",numpy.mean(a_prev_slice),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_pad,"numpy.pad(X,((0,0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axarr","matplotlib.pyplot.subplots(1,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axarr","matplotlib.pyplot.subplots(1,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
vrJsonData,json.loads(vrLogFile.read(),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(puttyData),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
dfThrowMaxes,pandas.DataFrame(oneFootThrowMaxList+twoFootThrowMaxList+threeFootThrowMaxList),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(logFileDataList),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
dfVrThrowMaxes,pandas.DataFrame(oneFootVrThrowMaxList+twoFootVrThrowMaxList+threeFootVrThrowMaxList),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
logisticRegressionModel,sklearn.linear_model.LogisticRegression(),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
X,
y,
test_size=0.20,
)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
day,"dict(day=datetime.date.strftime(weekday,'%a')",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
weekday,datetime.date.today(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
weekday+,datetime.timedelta(days=1),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
human_files,"numpy.array(glob(""lfw/*/*"")",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
dog_files,"numpy.array(glob(""dogImages/*/*/*"")",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
correct+,numpy.sum(np.squeeze(pred.eq(target.data.view_as(pred),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
df,"pandas.read_csv(filename,delimiter=',',
encoding='ISO-8859-1',
error_bad_lines=False)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
rangeData,"pandas.Series(data=dictData,name='Range')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
IQRData,"pandas.Series(data=dictData,name='IQR')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_quantile,"pandas.concat([a,b,c,d,e,f,g],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('2019.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_mean,numpy.mean(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_mean,numpy.mean(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_mean,numpy.mean(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_mean,numpy.mean(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_mean,numpy.mean(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_mean,numpy.mean(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_mean,numpy.mean(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_std,numpy.std(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_std,numpy.std(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_std,numpy.std(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_std,numpy.std(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_std,numpy.std(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_std,numpy.std(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_std,numpy.std(data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"q1,q3","numpy.percentile(data,[25,75])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"q1,q3","numpy.percentile(data,[25,75])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"q1,q3","numpy.percentile(data,[25,75])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"q1,q3","numpy.percentile(data,[25,75])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"q1,q3","numpy.percentile(data,[25,75])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"q1,q3","numpy.percentile(data,[25,75])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"q1,q3","numpy.percentile(data,[25,75])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
cam_matrix,"numpy.zeros((series_length,nb_classes)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
cam_sample_Y,numpy.where(Y_train[CAM_INDEX]==1),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
cam_sample_Y_1,numpy.where(Y_train[CAM_INDEX_1]==1),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
"cam_matrix[i+1,j]","numpy.dot(cam_output[0][0,i,0,:],class_weights[:,j])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
y_pred,numpy.argmax(self.model.predict(X_test),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
y_t,"numpy.argmax(Y_test,axis=1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
data,"numpy.loadtxt(filename,delimiter=',')",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
sequence_df,"pandas.DataFrame(cam_sample[0,:,0],
index=range(cam_sample.shape[1])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
cam_df,"pandas.DataFrame(cam_matrix,
index=range(cam_matrix.shape[0])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
sequence_df_1,"pandas.DataFrame(cam_sample_1[0,:,0],
index=range(cam_sample_1.shape[1])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
cam_df_1,"pandas.DataFrame(cam_matrix_1,
index=range(cam_matrix_1.shape[0])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,3)",CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
"return(100.0*np.sum(np.argmax(predictions,1)","=numpy.argmax(labels,1)",CLUSTER_20,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_11
df_feat,"pandas.DataFrame(scaled_features,columns=df.columns[:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('KNN_Project_Data'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_features,df['TARGETCLASS'],
test_size=0.30)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=30),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cities,pandas.read_csv('cities.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
df1,"pandas.read_csv(""blocktable.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"X1,X2","numpy.meshgrid(np.arange(start=X_set[:,0].min()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X1,X2","numpy.meshgrid(np.arange(start=X_set[:,0].min()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('Social_Network_Ads.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc_X,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,"sklearn.tree.DecisionTreeClassifier(criterion='entropy',random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
category,random.choice(all_categories),CLUSTER_30,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
line,random.choice(category_lines[category]),CLUSTER_30,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
now,time.time(),CLUSTER_30,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_30,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_30,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
m,math.floor(s/60),CLUSTER_30,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_30,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_30,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
kernel,"numpy.ones((3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
df,pandas.read_csv('911.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['timeStamp'],pandas.to_datetime(df['timeStamp']),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.sin(x),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,2*np.pi,50)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
resp,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
response,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(13,4)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
X_pca,"numpy.append(X_pca,cancer.target.reshape(-1,1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=n_comp),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test","sklearn.model_selection.train_test_split(X,random_state=5,test_size=.1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(cancer.data,cancer.target,random_state=1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X,_","sklearn.datasets.make_blobs(n_samples=50,centers=5,random_state=4,cluster_std=2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
test_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
iris_dataset,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x,numpy.array(x),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,numpy.array(y),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
x,"pandas.read_csv(""data/features_raw.dat"",delim_whitespace=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,"pandas.read_csv(""data/labels_0.dat"",delim_whitespace=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf2,sklearn.tree.DecisionTreeClassifier(random_state=42),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(n_neighbors=70),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
physionet_paths,numpy.concatenate(physionet_paths),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
physionet_paths_valid,numpy.concatenate(physionet_paths_valid),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
s+,"math.pow(p1[i]-p2[i],2)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_7
j,"random.randint(0,len(points)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_7
points,numpy.array(points),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_7
clusters,numpy.array(clusters),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_7
buffer,collections.deque(maxlen=span),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_9,CLUSTER_7
target,"random.randint(0,span-1)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_9,CLUSTER_7
batch,numpy.ndarray(shape=(batch_size),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_9,CLUSTER_7
labels,"numpy.ndarray(shape=(batch_size,1)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_9,CLUSTER_7
vocab,"numpy.array([wordforword,_invocab])",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_9,CLUSTER_7
data,"numpy.array([dictionary.get(word,0)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_9,CLUSTER_7
tsne,"sklearn.manifold.TSNE(perplexity=30,n_components=2,init='pca',n_iter=5000)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_9,CLUSTER_7
correct_out,"numpy.array([[1.49834967,1.70660132,1.91485297],
[3.25553199,3.5141327,3.77273342]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
correct_out,"numpy.array([[0.,0.,0.,0.,],
[0.,0.,0.04545455,0.13636364,],
[0.22727273,0.31818182,0.40909091,0.5,]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
correct_scores,"numpy.asarray(
[[11.53165108,12.2917344,13.05181771,13.81190102,14.57198434,15.33206765,16.09215096],
[12.05769098,12.74614105,13.43459113,14.1230412,14.81149128,15.49994135,16.18839143],
[12.58373087,13.20054771,13.81736455,14.43418138,15.05099822,15.66781506,16.2846319]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y,"numpy.asarray([0,5,1])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[0.1406,0.20738947,0.27417895,0.34096842,0.40775789],
[0.47454737,0.54133684,0.60812632,0.67491579,0.74170526],
[0.80849474,0.87528421,0.94207368,1.00886316,1.07565263],
[1.14244211,1.20923158,1.27602105,1.34281053,1.4096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_velocity,"numpy.asarray([
[0.5406,0.55475789,0.56891579,0.58307368,0.59723158],
[0.61138947,0.62554737,0.63970526,0.65386316,0.66802105],
[0.68217895,0.69633684,0.71049474,0.72465263,0.73881053],
[0.75296842,0.76712632,0.78128421,0.79544211,0.8096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.39223849,-0.34037513,-0.28849239,-0.23659121,-0.18467247],
[-0.132737,-0.08078555,-0.02881884,0.02316247,0.07515774],
[0.12716641,0.17918792,0.23122175,0.28326742,0.33532447],
[0.38739248,0.43947102,0.49155973,0.54365823,0.59576619]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_cache,"numpy.asarray([
[0.5976,0.6126277,0.6277108,0.64284931,0.65804321],
[0.67329252,0.68859723,0.70395734,0.71937285,0.73484377],
[0.75037008,0.7659518,0.78158892,0.79728144,0.81302936],
[0.82883269,0.84469141,0.86060554,0.87657507,0.8926]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.40094747,-0.34836187,-0.29577703,-0.24319299,-0.19060977],
[-0.1380274,-0.08544591,-0.03286534,0.01971428,0.0722929],
[0.1248705,0.17744702,0.23002243,0.28259667,0.33516969],
[0.38774145,0.44031188,0.49288093,0.54544852,0.59801459]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_v,"numpy.asarray([
[0.69966,0.68908382,0.67851319,0.66794809,0.65738853,],
[0.64683452,0.63628604,0.6257431,0.61520571,0.60467385,],
[0.59414753,0.58362676,0.57311152,0.56260183,0.55209767,],
[0.54159906,0.53110598,0.52061845,0.51013645,0.49966,]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_m,"numpy.asarray([
[0.48,0.49947368,0.51894737,0.53842105,0.55789474],
[0.57736842,0.59684211,0.61631579,0.63578947,0.65526316],
[0.67473684,0.69421053,0.71368421,0.73315789,0.75263158],
[0.77210526,0.79157895,0.81105263,0.83052632,0.85]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_test_pred,numpy.argmax(best_model.loss(data['X_test']),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_val_pred,numpy.argmax(best_model.loss(data['X_val']),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-0.1,0.5,num=input_size)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.2,0.3,num=weight_size)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
b,"numpy.linspace(-0.3,0.1,num=output_dim)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-0.5,0.5,num=12)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['W1'],"numpy.linspace(-0.7,0.3,num=D*H)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['b1'],"numpy.linspace(-0.1,0.9,num=H)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['W2'],"numpy.linspace(-0.3,0.4,num=H*C)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['b2'],"numpy.linspace(-0.9,0.1,num=C)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X,"numpy.linspace(-5.5,4.5,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
cache,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
m,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.7,0.5,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
U,"numpy.zeros((n,n)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
V,"numpy.zeros((n,n)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
Up,"numpy.zeros((n,n)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
Vp,"numpy.zeros((n,n)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
theta,numpy.zeros((len(J),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
omega,numpy.zeros((len(J),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
Up,"numpy.zeros((n,n)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
Vp,"numpy.zeros((n,n)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
E,"numpy.zeros((n,n)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
"E[i,j]","numpy.sqrt(pow(U[i,j]-Up[i,j],2)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,Tf,N)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
x1,"numpy.linspace(xlim[0],xlim[1],n)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
x2,"numpy.linspace(ylim[0],ylim[1],n)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
T,"numpy.linspace(0,epoch*ode_t,len(J)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
t,"numpy.linspace(0,2*Tf,2*N)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
t,"numpy.hstack((t,t+t[-1])",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
xlim,numpy.hstack((orig_traj.min(0),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
ylim,numpy.hstack((orig_traj.min(0),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
vecField,"numpy.hstack((X1a,numpy.hstack((X2a,numpy.hstack((Ua,Va)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
error,"numpy.hstack((X1a,numpy.hstack((X2a,Ea)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.vstack((x,x1)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
"X1,X2","numpy.meshgrid(x1,x2)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,7)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"scipy.integrate.odeint(LV,x0,t)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
x1,"scipy.integrate.odeint(LV,x[-1],t)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
sol,"scipy.integrate.odeint(func,x0,t)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
elapsed_time,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
df,pandas.read_json('./data/news.json'),CLUSTER_22,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.pipeline.make_pipeline(tfidf,engine)",CLUSTER_22,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(df['body'],df['categories'],test_size=0.2,random_state=42)",CLUSTER_22,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
C,"matplotlib.pyplot.contour(X,Y,f(X,Y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-3,3,n)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(-3,3,n)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sales,"pandas.read_csv('kc_house_data.csv',dtype=dtype_dict)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
testing,"pandas.read_csv('wk3_kc_house_test_data.csv',dtype=dtype_dict)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
training,"pandas.read_csv('wk3_kc_house_train_data.csv',dtype=dtype_dict)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
validation,"pandas.read_csv('wk3_kc_house_valid_data.csv',dtype=dtype_dict)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model_all,"sklearn.linear_model.Lasso(alpha=5e2,normalize=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.Lasso(alpha=l1_penalty,normalize=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.Lasso(alpha=l1_penalty,normalize=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
l1_penalty_all,"numpy.logspace(1,7,num=13)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
r,"requests.get(""http://www.pythonhow.com/real-estate/rock-springs-wy/LCWYROCKSPRINGS/"")",CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get(base_url+str(page),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(l),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
next_cluster_tuple,random.choice(cluster_queue),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
sel_weight_vec_list,random.sample(weight_vec_dict.keys(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
corr_list,"random.sample(weight_vector_list,num_correct)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
start_time,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
data_prep_time,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
start_time,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
sel_time,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
start_time,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
oracle_time,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
start_time,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
class_time,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
cluster_data,"numpy.zeros([num_weight_vec,num_weights])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
train_data,"numpy.zeros([num_train_vec,num_weights])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
train_class,numpy.zeros(num_train_vec),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
train_weights,numpy.zeros(num_train_vec),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
test_data,"numpy.zeros([num_test_vec,num_weights])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
test_class,numpy.zeros(num_test_vec),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
train_data,"numpy.zeros([num_train_vec,num_weights])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
train_class,numpy.zeros(num_train_vec),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
train_weights,numpy.zeros(num_train_vec),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
test_data,"numpy.zeros([num_test_vec,num_weights])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
test_class,numpy.zeros(num_test_vec),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
classifier,"sklearn.svm.SVC(kernel='linear',C=0.1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
classifier,sklearn.tree.DecisionTreeClassifier(criterion='gini'),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
estatisticas,"pandas.read_csv(estat,index_col=['algoritmosUtilizados','etapa','permutacao'],sep=';')",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
num,re.sub('diverg.*\),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
algUtl,"re.sub('diverg.*\(',r'',arq)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
algUtl,re.sub('\),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_25,CLUSTER_7
df,pandas.read_csv('../Data/iris.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=2,figsize=(10,7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_X,test_X,train_y,test_y","sklearn.model_selection.train_test_split(df.drop('target',axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('../data/vk_main.csv',sep='\t')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pred_naive,numpy.ones(len(y_test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_median,numpy.median(y_train),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,12)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sns_heatmap,seaborn.heatmap(df.isnull(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df_train,df_test","sklearn.model_selection.train_test_split(df,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_regression,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg_forest,sklearn.ensemble.RandomForestRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_cv,"sklearn.model_selection.GridSearchCV(reg_forest,
param_grid,
scoring='neg_mean_absolute_error',
cv=7)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
image,numpy.array(Image.open(filepath),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
image_list,numpy.array(image_list),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
image,numpy.array(Image.open(filepath),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
x,"numpy.expand_dims(x,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
x,"numpy.expand_dims(x,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
x,"numpy.expand_dims(x,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
x,"numpy.expand_dims(x,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-6.,6.,0.2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-6.,6.,0.2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-6.,6.,0.2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-6.,6.,0.2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.maximum(0,x)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.tanh(x),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
avg_temp,"pandas.NamedAgg(column='Temperature',aggfunc='mean')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
avg_fuel_price,"pandas.NamedAgg(column='Fuel_Price',aggfunc='mean')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
avg_cpi,"pandas.NamedAgg(column='CPI',aggfunc='mean')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
avg_unemployment,"pandas.NamedAgg(column='Unemployment',aggfunc='mean')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
.agg(Sales,"pandas.NamedAgg(column='Weekly_Sales',aggfunc='sum')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
.agg(Sales,"pandas.NamedAgg(column='Weekly_Sales',aggfunc='sum')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
sales_data,"pandas.merge(df,store_data,how='left',left_on=['Store','Date'],right_on=['Store','Date'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_sales_data_final_2,"pandas.merge(train_sales_data_final,holidays,how='left',
left_index=True,right_index=True)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(data),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
store_data,pandas.read_csv(features),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_sales_data_final.index,pandas.to_datetime(train_sales_data_final.index),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_sales_data_final.index,pandas.to_datetime(test_sales_data_final.index),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
holidays.index,pandas.to_datetime(holidays.index),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=4,random_state=40,init='random')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_img,"pandas.read_csv(""../../data/spambase/spambase.data"",header=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_img,"pandas.read_csv(""../../data/spambase/spambase.data"",header=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=5,copy=True,whiten=False,svd_solver='auto',tol=0.0,iterated_power='auto',random_state=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=20,copy=True,whiten=False,svd_solver='auto',tol=0.0,iterated_power='auto',random_state=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=20,copy=True,whiten=False,svd_solver='auto',tol=0.0,iterated_power='auto',random_state=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=5,copy=True,whiten=False,svd_solver='auto',tol=0.0,iterated_power='auto',random_state=None)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
logisticRegr,sklearn.linear_model.LogisticRegression(solver='lbfgs'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
logisticRegr,sklearn.linear_model.LogisticRegression(solver='lbfgs'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_img,numpy.array(train_img[int(split_length*split),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_img,numpy.array(train_img[:int(split_length*split),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_lbl,numpy.array(train_lbl[int(split_length*split),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_lbl,numpy.array(train_lbl[:int(split_length*split),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_img,numpy.array(train_img[int(split_length*split),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_img,numpy.array(train_img[:int(split_length*split),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_lbl,numpy.array(train_lbl[int(split_length*split),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_lbl,numpy.array(train_lbl[:int(split_length*split),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
current_path,os.getcwd(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
r,"requests.get(style_url,stream=True)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
r,"requests.get(content_url,stream=True)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
norm_means,"numpy.array([103.939,116.779,123.68])",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
x,"numpy.clip(x,0,255)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
out,"numpy.squeeze(img,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
x,"numpy.squeeze(x,0)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
img,"numpy.expand_dims(img,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
start_time,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
global_start,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
end_time,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
start_time,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
start,time.time(),CLUSTER_10,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_10,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
prog,re.compile(pattern),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(pattern),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'y'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'thon'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'ing'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile('ing'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'ing'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'py.'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'c\wm'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'9\W11'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'Data\swrangling'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,"re.compile(r""scorewas\d\d"")",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'^India'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'Apple$'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'ab*'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'ab+'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'ab?'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'<.*>'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'<.*?>'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'A{3}'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,"re.compile(r'A{2,4}B')",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,"re.compile(r'A{,3}B')",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,"re.compile(r'A{3,}B')",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,"re.compile(r'A{2,4}')",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,"re.compile(r'A{2,4}?')",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,"re.compile(r'[A,B]')",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'[a-zA-Z]+@+[a-zA-Z]+\.com'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'[a-zA-Z0-9]+@+[a-zA-Z]+\.com'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,"re.compile(r'[a-zA-Z0-9]+@+[a-zA-Z]+\.+[a-zA-Z]{2,3}')",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'[0-9]{10}'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(r'[0-9]{10}|[0-9]{3}-[0-9]{3}-[0-9]{4}'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
prog,re.compile(pattern),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
sample_trlabel,numpy.array([train_set[1][0]]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
label_aset.add(data,numpy.array([data[i][1][idx]]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
encoded_df,"pandas.get_dummies(data_df,columns=['weekday'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_df,pandas.read_csv('electric-car.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_df,pandas.read_csv('electric-car.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_df,pandas.read_csv('bike-sharing-cat.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pf_obj,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pf_obj,"sklearn.preprocessing.PolynomialFeatures(degree=5,include_bias=False)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
indexes,numpy.arange(n),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_values,numpy.linspace(min(x),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pred5_tr,"numpy.polyval(coef5,x_tr)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pred5_te,"numpy.polyval(coef5,x_te)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pred10_tr,"numpy.polyval(coef10,x_tr)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pred10_te,"numpy.polyval(coef10,x_te)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
coef5,"numpy.polyfit(x_tr,y_tr,deg=5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
coef10,"numpy.polyfit(x_tr,y_tr,deg=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_tr,x_te,y_tr,y_te","sklearn.model_selection.train_test_split(
x,y,train_size=0.7,test_size=0.3,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
MW_xyz,numpy.array(MW_xyz),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
M31_xyz,numpy.array(M31_xyz),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
M33_xyz,numpy.array(M33_xyz),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xyz_MW,"numpy.array([com_MW[xi]forxiin('x','y','z')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xyz_M31,"numpy.array([com_M31[xi]forxiin('x','y','z')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xyz_M33,"numpy.array([com_M33[xi]forxiin('x','y','z')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
disks_raw,"numpy.concatenate([MW_xyz,M31_xyz,M33_xyz],axis=1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
centroid,"numpy.mean(disks_raw,axis=1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r_MW_M31,"numpy.linalg.norm(xyz_MW-xyz_M31,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r_M33_M31,"numpy.linalg.norm(xyz_M33-xyz_M31,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
r_MW_M33,"numpy.linalg.norm(xyz_MW-xyz_M33,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
idx,"numpy.arange(0,len(data)",CLUSTER_10,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
y,numpy.array(y),CLUSTER_10,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
self.data,numpy.load('../../data/project_4_sector/data.npy'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
universe_end_date,"pandas.Timestamp('2016-01-05',tz='UTC')",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
end_dt,pandas.Timestamp(end_date.strftime('%Y-%m-%d'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
start_dt,pandas.Timestamp(start_date.strftime('%Y-%m-%d'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
df_ls_fra,"pandas.concat(ls_fra,axis=1)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
df_ls_fra,"pandas.concat(ls_fra,axis=1)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('data/b33e77f31fe04969803d8c93eee90701_merge.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
self.pout,numpy.mean(loops_var),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.act_pin,numpy.mean(list_pin),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.act_pout,numpy.mean(list_pout),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.pout,numpy.mean(subfields_var),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.pin,numpy.mean(subfields_var),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.act_pin,numpy.mean(subfields_var),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
beta0,"numpy.degrees(
np.arctan(np.tan(np.radians(solarpos['zenith'][0])",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.radians(theta),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
root,"scipy.optimize.newton(fx,
x,
fprime=dfx,
maxiter=10000)",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
root,"scipy.optimize.newton(fx,
pr0,
fprime=dfx,
maxiter=100000)",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
loop_df,pandas.DataFrame(data),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.dataframe,"pandas.read_csv(path,sep=';',
decimal=',',
dtype=float,
parse_dates=['datetime'],
date_parser=dateparse,
index_col=0)",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.dataframe,"pandas.read_csv(path,sep=';',
decimal=',',
dayfirst=True,
index_col=0)",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.dataframe,"pandas.read_csv(path,sep=';',
decimal=',',
dtype=float)",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.dataframe,"pandas.read_csv(path,sep=';',
decimal=',')",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.dataframe,pandas.read_excel(path),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.dataframe,pandas.read_excel(path),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.dataframe,pandas.read_excel(path),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.dataframe,pandas.read_excel(path),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.dataframe.index,"pandas.to_datetime(self.dataframe.index,infer_datetime_format=True)",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_0,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_1,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_3,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_0,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_0,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_0,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_1,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_2,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_3,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_0,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_1,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_2,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_3,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_00,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
flag_01,datetime.datetime.now(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
prefix,datetime.datetime.today(),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
simulation_settings,json.load(simulation_file),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
q,"numpy.arange(0,imDimension/2)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
fitparams,"numpy.zeros((ravs.shape[1],7)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
theory,"numpy.zeros((ravs.shape[1],len(times)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
AvgROIs,numpy.empty(len(ROI),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
Alphas,numpy.empty(len((ROI),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
Alphas2,numpy.empty(len((ROI),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
a,numpy.where((q>=0.0),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
w,numpy.where((alph[a[0]]>0.3),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
tau,"numpy.zeros_like(ravs[0,:])",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
amp,numpy.zeros_like(tau),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
bg,numpy.zeros_like(tau),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
alph,numpy.zeros_like(tau),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
amp2,numpy.zeros_like(tau),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
tau2,numpy.zeros_like(tau),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
alph2,numpy.zeros_like(tau),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
chi2,numpy.zeros_like(tau),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
stretch,numpy.mean(alph[w[0]]),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
avgDiffCoeff,numpy.nanmean(AvgROIs),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
stdev,numpy.nanstd(AvgROIs),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(8,8/1.618)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
fig2,"matplotlib.pyplot.figure(figsize=(8,8/1.618)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
fig2,"matplotlib.pyplot.figure(figsize=(8,8/1.618)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
ax,matplotlib.pyplot.gca(),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
ax,"matplotlib.pyplot.subplot(2,2,i+1)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8/1.618)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_2,CLUSTER_1
data,"numpy.zeros([filenames.shape[0],resized_height,resized_width,3])",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
img_list_csv,"pandas.read_csv(PATH_IMG_LIST_CSV,sep=',',header=None)",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
base,pandas.read_csv('risco-credito.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
classificador,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"")",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
labelEnconder_previsores,sklearn.preprocessing.LabelEncoder(),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
df_producers,"pandas.read_excel(""./data/producers.xlsx"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_consumers,"pandas.read_excel(""./data/consumers.xlsx"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_suppliers,"pandas.read_excel(""./data/suppliers.xlsx"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
heart,"pandas.read_csv(r""C:\Users\30158\Desktop\IIM-Project\randomForest\heart.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(1,2,figsize=(15,7)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(4,2,figsize=(16,16)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(nrows=4,ncols=2,figsize=(18,18)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_pred,y_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_pred,y_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_pred,y_test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LR,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
DT,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.arange(-10,10,0.1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
X,"numpy.array(data[[0,1]])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
y,numpy.array(data[2]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
del_w,numpy.zeros(weights.shape),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
loss,"numpy.mean(error_formula(targets,out)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
accuracy,numpy.mean(predictions==targets),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('gradient_descent_data.csv',header=None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"ax.hist(intersections_1d,bins",numpy.arange(max(intersections_1d),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.class_indices,numpy.arange(self.N_classes),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
edgeridge_vertices_and_points,numpy.array(edgeridge_vertices_and_points),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
sobel_x,"numpy.array([[-1,-2,-1],[0,0,0],[1,2,1]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
sobel_y,"numpy.array([[-1,0,1],[-2,0,2],[-1,0,1]])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
seeds,numpy.array(seeds),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
deletemask,"numpy.zeros(deconvolution_peaks_thresh.length,dtype=bool)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"x_edges,y_edges",numpy.zeros(4),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"x_edges,y_edges",numpy.zeros(4),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dx_intersections,"numpy.zeros((R_Nx-1,R_Ny)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dy_intersections,"numpy.zeros((R_Nx,R_Ny-1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mean_NN_intersections,"numpy.zeros((R_Nx,R_Ny)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.y,"numpy.zeros(self.N,dtype=bool)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.w,"numpy.zeros(self.N,dtype=float)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.mask,"numpy.zeros((R_Nx,R_Ny)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.counts_per_BP,"numpy.zeros(self.N,dtype=int)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ans,"numpy.zeros(self.N,dtype=bool)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
labelled,"numpy.zeros((R_Nx,R_Ny)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
costs,numpy.zeros(len(rx_test),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
costs,numpy.zeros(len(rx_test),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
costs,numpy.zeros(len(rx_test),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.labelled,"numpy.zeros((self.R_Nx,self.R_Ny)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
costs,numpy.zeros(len(rx),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
costs,numpy.zeros(len(rx),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
grow_steps,numpy.zeros(np.max(grow_merge_new_ratio),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
merge_steps,numpy.zeros(np.max(grow_merge_new_ratio),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
new_steps,numpy.zeros(np.max(grow_merge_new_ratio),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.y,"numpy.zeros(self.N,dtype=bool)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.w,"numpy.zeros(self.N,dtype=float)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.mask,"numpy.zeros((R_Nx,R_Ny)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.counts_per_BP,"numpy.zeros(self.N,dtype=int)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ans,"numpy.zeros(self.N,dtype=bool)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
labelled,"numpy.where(background,True,labelled)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.classification_next,"numpy.where(self.delta_forward!=-2,self.delta_forward,self.classification_next)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.classification_current,"numpy.where(self.delta_forward!=-2,self.delta_forward,self.classification_current)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.classification_next,"numpy.where(self.delta_backward!=-2,self.delta_backward,self.classification_next)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
costs,numpy.zeros_like(np.nonzero(growth_mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
i_edge,"numpy.argmin(np.hypot(x_edges-x_v,y_edges-y_v)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
i_edge,"numpy.argmin(np.hypot(x_edges-x_v,y_edges-y_v)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"max_point_indices_x,max_point_indices_y",numpy.nonzero(maxima),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"maxima_x,maxima_y",numpy.nonzero(py4DSTEM.process.utils.get_maximal_points(blurred_mean_intersections),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(self.mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(background),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
xorx,"numpy.nonzero(np.logical_xor(x,background_class.y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"maxima_x,maxima_y",numpy.nonzero(py4DSTEM.process.utils.get_maximal_points(blurred_mean_intersections),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(growth_mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
xorx,"numpy.nonzero(np.logical_xor(x,current_class.y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx_test,ry_test",numpy.nonzero(growth_mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx_test,ry_test",numpy.nonzero(growth_mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx_test,ry_test",numpy.nonzero(growth_mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(growth_mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(erosion_mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(background),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"maxima_x,maxima_y",numpy.nonzero(py4DSTEM.process.utils.get_maximal_points(blurred_mean_intersections),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(growth_mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rx,ry",numpy.nonzero(self.mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
growth_mask,"numpy.logical_xor(current_class.mask,binary_dilation(current_class.mask)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
growth_mask,"numpy.logical_xor(current_class.mask,binary_dilation(current_class.mask)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
growth_mask,"numpy.logical_xor(current_class.mask,binary_dilation(current_class.mask)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
growth_mask,"numpy.logical_xor(current_class.mask,binary_dilation(current_class.mask)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
erosion_mask,"numpy.logical_xor(current_class.mask,binary_erosion(current_class.mask)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
growth_mask,"numpy.logical_xor(growing_class.mask,binary_dilation(growing_class.mask)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mask,"numpy.logical_xor(class_mask,binary_dilation(class_mask)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"ax.hist(mean_NN_intersections.ravel(),bins","numpy.linspace(0,np.max(mean_NN_intersections)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
intersections_1d,numpy.hstack((dx_intersections.ravel(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
points,"numpy.vstack((deconvolution_peaks_thresh.data['qx'],deconvolution_peaks_thresh.data['qy'])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
vertices,"numpy.vstack((voronoi.vertices[vertex_indices],np.array([x_edge,y_edge])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
points,"numpy.vstack((xx,yy)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
all_steps,"numpy.vstack((grow_steps,merge_steps,new_steps)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
initial_classification,numpy.copy(classification.classification),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
classification_temp,numpy.copy(self.classification_next),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
N_classes_temp,numpy.copy(self.N_classes_next),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
class_index_temp,numpy.copy(self.class_index_next),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
classification_next,numpy.copy(self.classification_current),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.N_classes_next,numpy.copy(self.N_classes_current),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
self.class_index_next,numpy.copy(self.class_index_current),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"xx,yy",numpy.meshgrid(np.arange(nx),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rxx,ryy","numpy.meshgrid(np.arange(rx_min,rx_max)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rxx,ryy","numpy.meshgrid(np.arange(rx_min,rx_max)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rxx,ryy","numpy.meshgrid(np.arange(rx_min,rx_max)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"rxx,ryy","numpy.meshgrid(np.arange(rx_min,rx_max)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,8)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,8)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,12)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,axs","matplotlib.pyplot.subplots(4,4,figsize=(12,12)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,axs","matplotlib.pyplot.subplots(4,4,figsize=(12,12)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(2,1,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(2,1,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(2,1,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(3,1,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,((ax_L1,ax_R1),(ax_L2,ax_R2),(ax_L3,ax_R3))","matplotlib.pyplot.subplots(3,2,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(2,1,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(3,1,figsize=(12,12)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(2,1,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,((ax_L1,ax_R1),(ax_L2,ax_R2),(ax_L3,ax_R3))","matplotlib.pyplot.subplots(3,2,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(6,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(2,1,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(3,1,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(2,1,figsize=(12,6)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(3,1,figsize=(12,12)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(3,1,figsize=(12,12)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(3,1,figsize=(12,12)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,16)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,16)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,16)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,16)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,16)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
voronoi,scipy.spatial.Voronoi(points),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
j,random.choice(tuple(j_options),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
features,"numpy.zeros((m,n)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
y_,"numpy.zeros((m,1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
features_train,numpy.load(features_in),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
y_train,numpy.load(y_in),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
features_test,numpy.load(features_in),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
y_test,numpy.load(y_in),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
features_train_avg,numpy.load(features_in),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
y_train_avg,numpy.load(y_in),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
features_test_avg,numpy.load(features_in),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
y_test_avg,numpy.load(y_in),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
"plt.imshow(image,cmap",matplotlib.pyplot.get_cmap('gray_r'),CLUSTER_2,CLUSTER_11,CLUSTER_1,CLUSTER_0,CLUSTER_1
"plt.imshow(test_image.reshape([28,28]),cmap",matplotlib.pyplot.get_cmap('gray_r'),CLUSTER_2,CLUSTER_11,CLUSTER_1,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df,one_hot],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,one_hot],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
one_hot,"pandas.get_dummies(df['sex'],'sex','_')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
one_hot,"pandas.get_dummies(df['last_meal'],'last_meal','_')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('dataset-alcohol.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ols,"sklearn.pipeline.Pipeline([('standardize',StandardScaler()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lassocv,"sklearn.pipeline.Pipeline([('standardize',StandardScaler()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridgecv,"sklearn.pipeline.Pipeline([('standardize',StandardScaler()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,"sklearn.pipeline.Pipeline([('standardize',StandardScaler()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn_gs,"sklearn.model_selection.GridSearchCV(knn,knn_hyperparameters,scoring='accuracy',cv=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,sklearn.model_selection.KFold(n_splits=splitsize),CLUSTER_30,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
voter_frame,"pandas.DataFrame({""race"":voter_race,""age"":voter_age})",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
voter_frame,"pandas.DataFrame({""race"":voter_race,""age"":voter_age})",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""./weather.csv"")",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ohe,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
voter_age,"numpy.where(voter_race==""white"",white_ages,voter_age)",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
inputs,"numpy.array([[0.5,-0.2,0.1]])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
targets,numpy.array([[0.4]]),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_w_i_h,"numpy.array([[0.1,-0.2],
[0.4,0.5],
[-0.3,0.2]])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
test_w_h_o,"numpy.array([[0.3],
[-0.1]])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
rides,"pandas.concat([rides,dummies],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
dummies,"pandas.get_dummies(rides[each],prefix=each,drop_first=False)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
rides,pandas.read_csv(data_path),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
dates,pandas.to_datetime(rides.ix[test_data.index]['dteday']),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,4)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.ylim(),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
ticks,"numpy.arange(0,len(data.columns)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
all_data,pandas.DataFrame(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.read_excel(f,skiprows=range(0,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.read_excel(""./data/airport_line_airport_line_house_1_fixed.xlsx"",skiprows=range(0,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
college,"pandas.concat([college,college_i])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
score_train,"pandas.merge(subsidy_feature,score_train,how='left',on='id')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
score_train,"pandas.merge(score_train,college_num,how='left',on='college')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
subsidy_feature,pandas.read_csv('all_feature_input/subsidy_train_feature.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
college_num,pandas.read_csv('score_input/college_train_num.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
score_train,"pandas.read_table(path+'/train/score_train.txt',sep=',',header=None,names=score_train_name)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
college_num,pandas.DataFrame(score_train.groupby('college'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
I,"numpy.array([[1,0],[0,1]])",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
X,"numpy.array([[0,1],[1,0]])",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Y,"numpy.array([[0,complex(0,-1)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Z,"numpy.array([[1,0],[0,-1]])",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
p,numpy.zeros(2**n_qubits),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
c,"numpy.zeros(n_qubits,dtype=bool)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
hamiltonian,"numpy.zeros([2**n_qubits,2**n_qubits])",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
psgn,"numpy.kron(psgn,xsgn)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
psgn,"numpy.kron(psgn,xsgn)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
psgn,"numpy.kron(psgn,zsgn)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
psgn,"numpy.kron(psgn,isgn)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ptm,"numpy.kron(ptm,X)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ptm,"numpy.kron(ptm,Y)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ptm,"numpy.kron(ptm,Z)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ptm,"numpy.kron(ptm,I)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"w,v",numpy.linalg.eig(hamiltonian),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"w,v",numpy.linalg.eig(hamiltonian),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mask,numpy.zeros_like(train.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_price_blend,numpy.expm1(blended_model_predict(test_x),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train['SalePrice'],numpy.log1p(train['SalePrice']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(-cross_val_score(model,train_x.values,train_y,scoring='neg_mean_squared_error',cv=kf)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ms,"pandas.DataFrame(columns=['col','missing'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
skewed,pandas.DataFrame({'skew':skewed_feats}),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tmp_blend,"pandas.DataFrame(columns=['Id','SalePrice'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tmp,"pandas.DataFrame(columns=['model','score'])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tmp_mix,pandas.DataFrame(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tmp_final,pandas.DataFrame(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train,test],join='inner')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
final_data,pandas.get_dummies(data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/test.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,pandas.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(20,12)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax1","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(2,2,figsize=(20,12)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"sns.heatmap(train.corr(),cmap","seaborn.diverging_palette(20,220,n=200)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data[col],"scipy.special.boxcox1p(data[col],lam)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_fold,shuffle=True,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
krr,"sklearn.kernel_ridge.KernelRidge(alpha=0.6,kernel='polynomial',degree=2,coef0=2.5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gra,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=3000,learning_rate=0.05,
max_depth=4,max_features='sqrt',
min_samples_leaf=15,min_samples_split=10,
loss='huber',random_state=5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(bootstrap=True,max_depth=70,max_features='auto',min_samples_leaf=4,min_samples_split=10,n_estimators=2200)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
elastic,sklearn.pipeline.make_pipeline(RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
A_u,"numpy.array([[2,1,-2],
[-1,0,1],
[-2,1,2]])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
b_u,"numpy.array([1,1,1])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
c,"numpy.array([1,1,1])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
A_u,"numpy.array([[-2,-1,2],
[1,0,-1],
[2,-1,-2]])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
b_u,"numpy.array([1,1,1])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
c,"numpy.array([1,1,1])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
new_A,"numpy.concatenate((A_u,np.eye(dop_basis_length)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
c,"numpy.concatenate((-c,np.zeros((1,dop_basis_length)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
b_u,"numpy.concatenate((b_u,[0])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
new_A[i],"numpy.dot(new_A[i],-1)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
size,numpy.shape(A_u),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
table,"numpy.hstack((table,b_u)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
table,"numpy.vstack((new_A,c)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(data=table,index=index_arr,columns=columns_arr)",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
inner_solution,"scipy.optimize.linprog(c,A_u,b_u,method='simplex')",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
"X_,y_","numpy.ones([1,13])",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
init_time,time.time(),CLUSTER_6,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(reps),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
beta0,"numpy.zeros((params,1)",CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"se,t","numpy.zeros((params,1)",CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
beta0,"numpy.zeros((params,1)",CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"se,t","numpy.zeros((params,1)",CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.dot(X,beta)",CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
s2,numpy.dot(np.transpose(e),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.dot(X,beta)",CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
s2,numpy.dot(np.transpose(e),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pdf,numpy.exp(-0.5*x**2),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
pdf,numpy.exp(-0.5*x**2),CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
se[i],"numpy.sqrt(cov[i,i])",CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
se[i],"numpy.sqrt(cov[i,i])",CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-3,3,1000)",CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(-3,3,1000)",CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,6)",CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
res,"scipy.optimize.minimize(func,beta0,args=(y,X,obs,params)",CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
res,"scipy.optimize.minimize(func,beta0,args=(y,X,obs,params)",CLUSTER_20,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_train_accuracy,numpy.mean(y_train==y_train_pred),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_val_accuracy,numpy.mean(y_val==y_val_pred),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
grad_difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
date,"datetime.date(2015,1,1)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
date,"datetime.date(2015,1,1)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
date,"datetime.date(2015,1,1)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
date,"datetime.date(2015,1,1)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
date,"datetime.date(2015,1,1)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
date,"datetime.date(2015,1,1)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
date+,datetime.timedelta(days=7),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
date+,datetime.timedelta(days=7),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
date+,datetime.timedelta(days=7),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
date+,datetime.timedelta(days=7),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
date+,datetime.timedelta(days=7),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
date+,datetime.timedelta(days=7),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df,df2])",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df,df2])",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df,df2])",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
seat,"pandas.read_html(f'일별좌석점유율-{start_date}.html',encoding='utf-8')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
seat,"pandas.read_html(f'일별상영점유율-{start_date}.html',encoding='utf-8')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
seat,"pandas.read_html(f'일별스크린점유율-{start_date}.html',encoding='utf-8')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
ST,numpy.transpose(S_dB),CLUSTER_12,CLUSTER_7,CLUSTER_5,CLUSTER_29,CLUSTER_8
since,time.time(),CLUSTER_12,CLUSTER_7,CLUSTER_5,CLUSTER_29,CLUSTER_8
time_elapsed,time.time(),CLUSTER_12,CLUSTER_7,CLUSTER_5,CLUSTER_29,CLUSTER_8
response,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
tables,pandas.read_html(url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
channels,"pandas.DataFrame(data=[(""gift"",20.0,0.20)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
gsol,pandas.DataFrame(),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
comp1_df,"pandas.DataFrame(data=[[""Greedy"",revenue,len(abc)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
comp2_df,"pandas.DataFrame(data=[[""CPLEX"",mdl.objective_value,mdl.kpi_value_by_name('nb_offers')",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
known_behaviors,"pandas.read_csv(""data/known_behaviours.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
unknown_behaviors,"pandas.read_csv(""data/unkown_behaviors.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
figure,"matplotlib.pyplot.figure(figsize=(20,5)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(1,len(products)",CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
dataset,"pandas.get_dummies(df,columns=['Sex','Cp','Fbs','Restecg','Exang','Slope','Ca','Thal'])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""../input/heart-disease-uci/heart.csv"")",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.4,random_state=42)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
standardScaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
dec_clf,"sklearn.tree.DecisionTreeClassifier(max_depth=3,random_state=1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
randomforest_classifier,sklearn.ensemble.RandomForestClassifier(n_estimators=10),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv_score_five,"sklearn.model_selection.cross_val_score(logreg,X,y,cv=5)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv_score_ten,"sklearn.model_selection.cross_val_score(logreg,X,y,cv=10)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv_dec_tree_clf,"sklearn.model_selection.cross_val_score(dec_clf,X,y,cv=10)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.model_selection.cross_val_score(randomforest_classifier,X,y,cv=10)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
npr,pandas.read_csv('npr.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
nmf_model,"sklearn.decomposition.NMF(n_components=7,random_state=42)",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
rating_index,"pandas.pivot_table(rating_index,index='userID',columns='placeID',values='rating')",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
service_index,"pandas.pivot_table(service_index,index='userID',columns='placeID',values='service_rating')",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
food_index,"pandas.pivot_table(food_index,index='userID',columns='placeID',values='food_rating')",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
origin_data,pandas.read_csv('rating_matrix.csv'),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
rating_numpy,numpy.array(rating_index),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
service_numpy,numpy.array(service_index),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
food_numpy,numpy.array(food_index),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
num_K,"numpy.array([range(1,130)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
R,numpy.array(R),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
rating_matrix,"numpy.zeros((n_users_rating,n_items_rating)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
service_matrix,"numpy.zeros((n_users_service,n_items_service)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
food_matrix,"numpy.zeros((n_users_food,n_items_food)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X_pred,"numpy.dot(numpy.dot(u,s_diag_matrix)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X_pred,"numpy.dot(numpy.dot(u,s_diag_matrix)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X_pred,"numpy.dot(numpy.dot(u,s_diag_matrix)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
eR,"numpy.dot(P,Q)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
nR,"numpy.dot(W,H)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
s_diag_matrix,numpy.diag(s),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
s_diag_matrix,numpy.diag(s),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
s_diag_matrix,numpy.diag(s),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
plt_mae,"sklearn.metrics.mean_absolute_error(X_pred,sum_matrix)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
nmf,sklearn.decomposition.NMF(),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,"datetime.datetime(end.year-21,end.month,end.day)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
end,datetime.datetime.now(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(
{
'x':lx,
'a=-2':f.lambdified(lx,-2)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(
{
'lx':lx,
'b=2':f.lambdified(lx,2)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lx,"numpy.linspace(-2,2)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lx,"numpy.linspace(-5,5)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.arange(100),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,numpy.arange(100),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
source,"pandas.DataFrame({
'x':x,
'f(x)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
source,"pandas.DataFrame({
'x':x,
'f(x)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'Actual':y_test.flatten(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
w_df,"pandas.read_csv('weatherww2/SummaryofWeather.csv',low_memory=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
regressor,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
salary_data,pandas.read_csv('Salary_Data.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=1/3,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
app_train,pandas.read_csv(f_app),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
MyDataFrame,"pandas.DataFrame(DaysAndVolDict,index=[0])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
FilterInfo,"pandas.read_excel(""Filterinfo.xlsx"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
states,"pandas.get_dummies(df['location_state'],prefix='_')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
types,"pandas.get_dummies(df['location_type'],prefix='_')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
us,pandas.read_csv('../data/us_kickstarter.zip'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['state'],"numpy.where(df['state']=='successful',1,0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"Xtrain,Xtest,ytrain,ytest","sklearn.model_selection.train_test_split(df,target,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"Xval,Xtest,yval,ytest","sklearn.model_selection.train_test_split(Xtest,ytest,test_size=0.4,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.model_selection.GridSearchCV(RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=10,max_depth=10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bagging,sklearn.ensemble.BaggingClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
idx,numpy.arange(y.shape[0]),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
w_rot,numpy.array(w[::-1]),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
x_padded,numpy.array(x),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
W_rot,numpy.array(W),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
X_orig,numpy.array(X),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
X_data,numpy.array(training_set[0]),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
y_data,numpy.array(training_set[1]),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
X_data,numpy.array(training_set[0]),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
y_data,numpy.array(training_set[1]),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
zero_pad,numpy.zeros(shape=p),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
X_padded,"numpy.zeros(shape=(n1,n2)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
labels,"numpy.fromfile(lbpath,
dtype=np.uint8)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
images,"numpy.fromfile(imgpath,
dtype=np.uint8)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
x_padded,"numpy.concatenate([zero_pad,x_padded,zero_pad])",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
mean_vals,"numpy.mean(X_train,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
n_input_units,numpy.prod(input_shape),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
n_input_units,numpy.prod(input_shape[1:]),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
std_val,numpy.std(X_train),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_6
df1,"pandas.DataFrame(fake,columns=['text'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame(real,columns=['text'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
final,"pandas.concat(frames,ignore_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
final,"pandas.read_csv('final.csv',encoding='utf-8')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
final,"pandas.read_csv('final.csv',encoding='utf-8')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
figure,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
figure,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
plot,matplotlib.pyplot.figure(),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
accuracy_plot,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
loss_plot,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
data,numpy.array(history[k]),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
data,numpy.array(history[k]),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(np.argmax(y,axis=1)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
ax,seaborn.countplot(x=y),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
ax,seaborn.countplot(x=y),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
validDataFrame,"pandas.DataFrame({'label':y_valid,'filename':valid_files})",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
trainDataFrame,"pandas.DataFrame({'label':y_train,'filename':train_files})",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
trainDataFrame,"pandas.DataFrame({'label':y_train,'filename':train_files})",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
validDataFrame,"pandas.DataFrame({'label':y_valid,'filename':valid_files})",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.MinMaxScaler(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
series,"numpy.array([1,2,3,4,5,6,7,8,9,10])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_input,"numpy.array([9,10])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_input,"numpy.array([9,10])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
in_seq1,"numpy.array([10,20,30,40,50,60,70,80,90,100])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
in_seq2,"numpy.array([15,25,35,45,55,65,75,85,95,105])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_input,"numpy.array([[90,95],[100,105]])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
in_seq1,"numpy.array([10,20,30,40,50,60,70,80,90,100])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
in_seq2,"numpy.array([15,25,35,45,55,65,75,85,95,105])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
out_seq,"numpy.array([25,45,65,85,105,125,145,165,185,205])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
in_seq1,"numpy.array([10,20,30,40,50,60,70,80,90,100])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
in_seq2,"numpy.array([15,25,35,45,55,65,75,85,95,105])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
out_seq,"numpy.array([25,45,65,85,105,125,145,165,185,205])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_input,"numpy.array([[100,105]])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
series,"numpy.array([1,2,3,4,5,6,7,8,9,10])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
target,"numpy.array([[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_input,"numpy.array([[9,10]])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_total,"numpy.concatenate([df_train_scaled,df_test_scaled],axis=0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,"numpy.hstack((in_seq1,in_seq2)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,"numpy.hstack((in_seq1,in_seq2)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataset,"numpy.hstack((in_seq1,in_seq2)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
out_seq,"numpy.delete(out_seq,-1)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
out_seq,"numpy.insert(out_seq,0,0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('https://raw.githubusercontent.com/sagarmk/Forecasting-on-Air-pollution-with-RNN-LSTM/master/pollution.csv',index_col=0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
out_seq,"numpy.insert(out_seq,0,0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_data,numpy.array(X_data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.append(y_train,y_test)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dataframe,"pandas.read_json('/Users/karangrewal/TSLA.json',convert_dates=['Time'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
hiddenx,"numpy.arange(1,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hiddeny,"numpy.arange(1,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
principalDf,"pandas.DataFrame(data=principalComponents,columns=['principalcomponent1','principalcomponent2'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
importance,pandas.DataFrame(importance),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
finalDf,"pandas.concat([principalDf,df[['Type']]],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""DatabaseMiniPONS.csv"",sep=';')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kdeplot,seaborn.PairGrid(df),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
diagnosisplot,"seaborn.countplot(df[""Type""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,converted_labels,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(bidf.iloc[:,2:],bidf.iloc[:,0],test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,labels,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,df[""Group""],test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,labels,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,labels,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(norm_features,labels,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,random_state=50)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,random_state=50)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,random_state=50)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=800,min_samples_leaf=10,min_samples_split=4,max_features=""sqrt"",max_depth=50,bootstrap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
norm_features,sklearn.preprocessing.normalize(features),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(probability=True),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(class_weight={""0"":1},kernel=""poly"",probability=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svc,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(class_weight={""0"":1},kernel=""rbf"",C=100,gamma=0.1,probability=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(class_weight={""0"":10},kernel=""linear"",C=0.01,gamma=0.01,probability=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.model_selection.GridSearchCV(svc,params_grid)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.model_selection.GridSearchCV(MLPClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_random,"sklearn.model_selection.RandomizedSearchCV(estimator=rf,param_distributions=random_grid,n_iter=100,cv=5,verbose=2,random_state=42,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.neural_network.MLPClassifier(alpha=0.001,hidden_layer_sizes=(1,2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self._configToReturn,json.load(inConfig),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
xy,random.random(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
t,random.random(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
track,numpy.array(tracks.items(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xsample,numpy.array(xsample),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
track,numpy.array(tracks.items(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
t2,numpy.array(predictedTracks[key]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xtrain,numpy.reshape(np.array(xtrain),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xtest,numpy.reshape(np.array(xtest),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xtrain,"numpy.matrix(train[:,0:2])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ytrain,"numpy.matrix(train[:,2:])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xtest,"numpy.matrix(test[:,0:2])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ytest,"numpy.matrix(test[:,2:])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
tracks,"json.load(open(""../data/groundtruth_tracks.json"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
trainScore,"math.sqrt(mean_squared_error(ytrain,trainPredict)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
testScore,"math.sqrt(mean_squared_error(ytest,testPredict)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
json_data,json.load(f),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
mat04799,scipy.io.loadmat('/Users/vinitsheth/SmlFinalProject/Data/data-starplus-04799-v7.mat'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
mat04820,scipy.io.loadmat('/Users/vinitsheth/SmlFinalProject/Data/data-starplus-04820-v7.mat'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
mat04847,scipy.io.loadmat('/Users/vinitsheth/SmlFinalProject/Data/data-starplus-04847-v7.mat'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
mat05675,scipy.io.loadmat('/Users/vinitsheth/SmlFinalProject/Data/data-starplus-05675-v7.mat'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
mat05680,scipy.io.loadmat('/Users/vinitsheth/SmlFinalProject/Data/data-starplus-05680-v7.mat'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
mat05710,scipy.io.loadmat('/Users/vinitsheth/SmlFinalProject/Data/data-starplus-05710-v7.mat'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x_train04799,x_test04799,y_train04799,y_test04799","sklearn.model_selection.train_test_split(data04799,labels04799,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x_train04820,x_test04820,y_train04820,y_test04820","sklearn.model_selection.train_test_split(data04820,labels04820,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x_train04847,x_test04847,y_train04847,y_test04847","sklearn.model_selection.train_test_split(data04847,labels04847,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x_train05675,x_test05675,y_train05675,y_test05675","sklearn.model_selection.train_test_split(data05675,labels05675,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x_train05680,x_test05680,y_train05680,y_test05680","sklearn.model_selection.train_test_split(data05680,labels05680,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x_train05710,x_test05710,y_train05710,y_test05710","sklearn.model_selection.train_test_split(data05710,labels05710,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x_train04799,x_test04799,y_train04799,y_test04799","sklearn.model_selection.train_test_split(data04799,labels04799,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x_train04820,x_test04820,y_train04820,y_test04820","sklearn.model_selection.train_test_split(data04820,labels04820,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x_train04847,x_test04847,y_train04847,y_test04847","sklearn.model_selection.train_test_split(data04847,labels04847,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x_train05675,x_test05675,y_train05675,y_test05675","sklearn.model_selection.train_test_split(data05675,labels05675,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x_train05680,x_test05680,y_train05680,y_test05680","sklearn.model_selection.train_test_split(data05680,labels05680,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x_train05710,x_test05710,y_train05710,y_test05710","sklearn.model_selection.train_test_split(data05710,labels05710,test_size=0.2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='linear'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test04799,y_pred04799)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test04820,y_pred04820)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test04847,y_pred04847)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test05675,y_pred05675)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test05680,y_pred05680)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test05710,y_pred05710)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test04799,y_pred04799)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test04820,y_pred04820)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test04847,y_pred04847)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test05675,y_pred05675)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test05680,y_pred05680)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(y_test05710,y_pred05710)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y_true,"numpy.array([0,1,1,2,3,3,3,4,4,4,4,4,4,4,4,4])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y_pred,"numpy.array([0,1,0,2,2,3,3,0,1,4,4,4,3,4,1,4])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
randomize,numpy.arange(len(X_test),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
y,numpy.array(cards_label.index.values),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
X,numpy.array(imgs),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
cards_data,"pandas.read_excel(os.path.join(DATA_PATH,'cards_data.xlsx')",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
"plt.imshow(img,cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
"plt.imshow(X_test_randomize[i].reshape(28,28),cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
ROOT_DIR,os.getcwd(),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
random_index,numpy.sort(random_index),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_data,pandas.DataFrame(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_data,pandas.DataFrame(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
Data,"pandas.read_csv(""imdb-dataset-of-50k-movie-reviews/IMDBDataset.csv"")",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
lb,sklearn.preprocessing.LabelBinarizer(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(penalty='l2',max_iter=500,C=1,random_state=42)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_bow_score,"sklearn.metrics.accuracy_score(sentiment_y_test_data,lr_bow_predict)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_tfidf_score,"sklearn.metrics.accuracy_score(sentiment_y_test_data,lr_tfidf_predict)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
text,"re.sub(pattern,'',text)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cumsum,numpy.cumsum(height_ratios),CLUSTER_0,CLUSTER_3,CLUSTER_9,CLUSTER_9,CLUSTER_0
profiles,"pandas.DataFrame(profiles,index=factors)",CLUSTER_0,CLUSTER_3,CLUSTER_9,CLUSTER_9,CLUSTER_0
data_summary,"pandas.read_table(os.path.join(home_dir,'data_summary_detailed.txt')",CLUSTER_0,CLUSTER_3,CLUSTER_9,CLUSTER_9,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(ncols=2,nrows=len(height_ratios)",CLUSTER_0,CLUSTER_3,CLUSTER_9,CLUSTER_9,CLUSTER_0
"f,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(20,10)",CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
box,"collections.namedtuple(""box"",(""xmin"",""xmax"",""ymin"",""ymax"")",CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
frame_size,"random.choice([64,96,128])",CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
X_train,numpy.array(X_train),CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
y_train,numpy.array(y_train),CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
X_val,numpy.array(X_val),CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
y_val,numpy.array(y_val),CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
nonzeroy,numpy.array(nonzero[0]),CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
nonzerox,numpy.array(nonzero[1]),CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
features,numpy.array([get_features(c),CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
heat,"numpy.zeros_like(image[:,:,0])",CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
heat,"numpy.zeros_like(image[:,:,0])",CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
mean_feat,"numpy.mean(X_train,axis=0,keepdims=True)",CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
std_feat,"numpy.std(X_train,axis=0,keepdims=True)",CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
imcopy,numpy.copy(img),CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
d,collections.deque(maxlen=10),CLUSTER_19,CLUSTER_0,CLUSTER_11,CLUSTER_27,CLUSTER_7
user_ip_op,"seaborn.catplot(x=""ClientIP"",y=""UserId"",hue='Operation',data=unique_ip_op_ua,height=5,aspect=2)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
cm,"seaborn.light_palette(""yellow"",as_cmap=True)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
cm,"seaborn.light_palette(""green"",as_cmap=True)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
ip_locs_df,pandas.DataFrame(data=ip_entities),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
ip_locs_df,pandas.DataFrame(data=ip_entities),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
office_ops_merged,pandas.merge(unique_ip_op_ua.query('ClientIP>1'),CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
office_ops_summary_ip_loc,"pandas.merge(office_ops_merged,
ip_locs_df,left_on='ClientIP',
right_on='Address',how='left')",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
office_ops_locs,"pandas.merge(office_ops_restr,ip_locs_df,how='right',left_on='ClientIP',right_on='Address',
indicator=True)",CLUSTER_20,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
filtered_data,"pandas.read_sql_query(""""""
SELECTScore,Text
FROMReviews
WHEREScore!=3
"""""",con)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
tick_marks,numpy.arange(len(set(Score),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
tick_marks,numpy.arange(len(set(Score),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
NB_List,"numpy.linspace(.0001,.001,5)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
bow_myList,"numpy.linspace(.0001,.001,10)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
myList,"numpy.linspace(.0001,.001,10)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
myList,"numpy.linspace(.0001,.001,10)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
TP,numpy.diag(confusion_matrix),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
TP,numpy.diag(confusion_matrix),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
cm_BoW,"sklearn.metrics.confusion_matrix(y_test,pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,pred_tfidf)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
cleantext,"re.sub(cleaner,'',sentance)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
cleaned,"re.sub(r'[?|!|\'|""|
cleaned=re.sub(r'[.|,|)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
cleaner,re.compile('<.*?>'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
NB,sklearn.naive_bayes.BernoulliNB(i),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
NB,sklearn.naive_bayes.BernoulliNB(.0001),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
NB,sklearn.naive_bayes.BernoulliNB(alpha=i),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
NB_optimal,sklearn.naive_bayes.BernoulliNB(alpha=optimal_alpha),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
NB,sklearn.naive_bayes.BernoulliNB(i),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
NB,sklearn.naive_bayes.BernoulliNB(.0001),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
NB,sklearn.naive_bayes.BernoulliNB(alpha=i),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
alpha_optimal,sklearn.naive_bayes.BernoulliNB(alpha=optimal_alpha),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(y_cv,pred,normalize=True)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(y_test,pred,normalize=True)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(y_test,pred_bow)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(y_cv,pred_tfidf,normalize=True)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(y_test,pred_tfidf,normalize=True)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
acc,"sklearn.metrics.accuracy_score(y_test,pred_tfidf)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
dataset,"pandas.DataFrame({
'uid':movies_with_ratings.userId,
'iid':movies_with_ratings.title,
'rating':movies_with_ratings.rating
})",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
movies,pandas.read_csv('movies.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
ratings,pandas.read_csv('ratings.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
divx,"numpy.arange(30,36)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.arange(len(divx),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
lang_cnt,collections.Counter(),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
lang_cnt,collections.Counter(),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
coeffs,"pandas.DataFrame(model.coef_,columns=iris.feature_names,index=iris.target_names)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
coeffs,"pandas.DataFrame(model.coef_,columns=iris.feature_names,index=iris.target_names)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
coeffs_l1,"pandas.DataFrame(model_l1.coef_,columns=iris.feature_names,index=iris.target_names)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_l1,sklearn.linear_model.LogisticRegression(penalty='l1'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_norm,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ecom,pandas.read_csv('EcommercePurchases'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_coords,"pandas.DataFrame(coords,columns=['Latitude','Longitude'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(body),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,"numpy.expand_dims(x,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
X1,"numpy.matmul(X,np.array([[2.5,0],[0,100]])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_abs,numpy.absolute(X),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
inner_ring_flag,"numpy.logical_and(X_abs[:,0]<1.2,X_abs[:,1]<1.2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
keep,"numpy.logical_not(np.logical_or(inner_ring_flag,outer_ring_flag)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.DataFrame(X1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.cluster.KMeans(n_clusters=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.cluster.KMeans(n_clusters=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_in,pandas.read_csv('./input/train.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
test_in,pandas.read_csv('./input/test.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
weather_in,pandas.read_csv('./input/weather.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
spray_in,pandas.read_csv('./input/spray.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
train_in,pandas.read_csv('./input/train.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
bins,"numpy.arange(2,16,2)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
bins,"numpy.arange(0,15,2)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
bins,"numpy.arange(410,560,25)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
bins,"numpy.arange(1700,1860,30)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
bins,"numpy.arange(2,16,2)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
xx_test,"numpy.asarray(load_images(path,new_size=32)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
index,"random.randint(0,len(first_set)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
"fig,axs","matplotlib.pyplot.subplots(row,col,figsize=(row_col,row_col)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
temp_res['winnig_percentage'],numpy.array(temp_res['winning_count'].tolist(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
most_winning_team,"pandas.DataFrame({'team_name':temp_res.index,'winning_count':temp_res.tolist()",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
top_10_Venue,"pandas.DataFrame({'venue':temp_res.index,'count':temp_res.tolist()",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
win_by_run,"pandas.DataFrame({'team_name':temp_res.index,'win_by_runs':temp_res.tolist()",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
win_by_wkt,"pandas.DataFrame({'team_name':temp_res.index,'win_by_wickets':temp_res.tolist()",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
top_10_player_of_match,"pandas.DataFrame({'player_name':player_of_match_name,'count':player_of_match_count})",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
top_10_toss_winner,"pandas.DataFrame({'team':toss_winner_index,'toss_win_count':toss_win_count})",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({'dismissal_kind':index[1:],'total_num':count[1:]})",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
total_matches_played_by_team,"pandas.DataFrame({'team_name':temp_res.index,'total_matches':temp_res.tolist()",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
temp_res,"pandas.concat([matches['team1'],matches['team2']])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pivot,"pandas.pivot_table(deliveries,index='batsman',values=['ball','batsman_runs'],aggfunc={'ball':'count','batsman_runs':np.sum})",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
table,"pandas.pivot_table(deliveries,margins=True,index=['bowling_team'],columns=['batsman'],values=['batsman_runs'],aggfunc='sum',fill_value=0)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
matches,"pandas.read_csv(""matches.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
deliveries,"pandas.read_csv(""deliveries.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(3,5,figsize=(15,8)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_dataframe,"pandas.read_csv(path3,sep="""")",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
test_dataframe,"pandas.read_csv(path6,sep="""")",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
train_labels,"pandas.read_csv(final_train_labels,header=None)",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
test_labels,"pandas.read_csv(final_test_labels,header=None)",CLUSTER_18,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_0
contour_mask,"numpy.zeros(image.shape,np.uint8)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_0,CLUSTER_0
top_contour_points,"numpy.concatenate((largest_contour,second_largest_contour)",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_0,CLUSTER_0
rotated_box,numpy.int0(rotated_box),CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(columns=['Frame_Index','Area','Mean','Radius','Rotated_Box'])",CLUSTER_15,CLUSTER_3,CLUSTER_11,CLUSTER_0,CLUSTER_0
x_ticks,"numpy.arange(0,new_width,pixels_per_cell)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
y_ticks,"numpy.arange(0,new_width,pixels_per_cell)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
img,numpy.array(img),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
entry,"numpy.array([1,x_mid,y_mid,width,height]+obj_enc)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
images,numpy.array(image_data),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
encodings,numpy.array(encoded_data),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
encode,"numpy.zeros((19,19,29)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
cells,"numpy.nonzero(encoding[:,:,0])",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
img,"numpy.flip(img,axis=1)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(1),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
df,"pandas.DataFrame(randn(5,4)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
missing_val_count_by_column,pandas.DataFrame(missing_val_count_by_column),CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
ScaledPrices,pandas.DataFrame(prices),CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
output3,"pandas.DataFrame({'Id':test_processed.Id[1:32].index,
'SalePrice':out2.flatten()",CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
house_predictors,"pandas.concat([trainT,TEST],ignore_index=True)",CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
train_processed,"pandas.concat([house_predictors_sml[:train_len]],axis=1)",CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
train,pandas.read_csv(PATH+'train.csv'),CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
TEST,pandas.read_csv(PATH+'test.csv'),CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
self.cont_X,"numpy.zeros((self.n,1)",CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
self.cat_X,"numpy.zeros((self.n,1)",CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
pid,os.getpid(),CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(train_processed,house_target,
train_size=0.8,random_state=42)",CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
label_encoders[cat_col],sklearn.preprocessing.LabelEncoder(),CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
vloss,collections.defaultdict(list),CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
tloss,collections.defaultdict(list),CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
since,time.time(),CLUSTER_12,CLUSTER_3,CLUSTER_3,CLUSTER_22,CLUSTER_8
v_t1,math.sqrt(g/k1),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
v_t2,math.sqrt(g/k2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
testset,pandas.DataFrame(test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""iris.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cls,"sklearn.neighbors.KNeighborsClassifier(n_neighbors=11,weights='distance')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_predicted,"numpy.argmax(y_predicted,axis=-1)",CLUSTER_16,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
true,"numpy.argmax(y_test2[i],-1)",CLUSTER_16,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
vocab,collections.Counter(),CLUSTER_16,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(pad_X,pad_y,test_size=.2,random_state=777)",CLUSTER_16,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
sched0,json.loads(scheds[0]),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
tweet0,json.loads(tweets[0]),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
date_object,"datetime.datetime.strptime('02:19:47','%I:%M:%S')",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
date_object,"datetime.datetime.strptime('4:02AM','%I:%M%p')",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
date_object,"datetime.datetime.strptime('4:02PM','%I:%M%p')",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
r,"requests.get(API,params=query_needed_params,timeout=1)",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,pandas.DataFrame(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
t,pandas.DataFrame(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"pandas.concat([a,q],ignore_index=True)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
t,"pandas.concat([t,g],ignore_index=True)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
q,pandas.read_csv(f),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
g,pandas.read_csv('/home/martin/TP/MetodosNumericos/metnum-TP3/src/measureTimes/{}Times'.format(m),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
r,pandas.read_csv('/home/martin/TP/MetodosNumericos/metnum-TP3/src/measureTimes/baby_reset_2.txt'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
q,"pandas.read_csv('/home/martin/TP/MetodosNumericos/metnum-TP3/src/resultados/splines_ecm_psnr.csv',usecols=['Video','Salto','PromECM'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,pandas.read_csv('/home/martin/TP/MetodosNumericos/metnum-TP3/src/measureTimes/baby_reset_ecm.txt'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"pyplot.plot(g.Salto,g.PromECM,'-o',label","'{}-{}'.format(video,metodo),c=seaborn.color_palette(palette=palettes[p])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"pyplot.plot(g.Salto,g.PromPSNR,'-o',label","'{}-{}'.format(video,metodo),c=seaborn.color_palette(palette=palettes[p])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"pyplot.plot(g.Salto,g.PromECM,'-o',label","metodo,c=seaborn.color_palette()",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(zong,index=[0])",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
datelist,"pandas.date_range(start='4/1/2015',periods=61,freq='M')",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv('上海.csv',header=None)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(4,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(4,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(10,3)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(1,4,figsize=(12,3)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(12,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
n,"numpy.array([0,1,2,3,4,5])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,5,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(1,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(1,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xx,"numpy.linspace(-0.75,1.,100)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lines,"matplotlib.pyplot.plot(x,y)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
c,numpy.log10(population),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
y,"numpy.sin(x[:,np.newaxis]+np.pi*np.arange(0,2,0.5)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,10,1000)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,10,1000)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
cities,pandas.read_csv('data/california_cities.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
earnings_df,"pandas.DataFrame({'Quarter':quarters,'EarningsperShare':eps,'lastyearEPS':yearago,'PercentChange':percent,'Ticker':symbol})",CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_33,CLUSTER_0
stocks,pandas.read_csv(csvfile),CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_33,CLUSTER_0
earnings_response,requests.get(url),CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_33,CLUSTER_0
dataset,"pandas.read_csv('housingdata.csv',header=None)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
P,"numpy.arange(0,1,1./(len(vals)",CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
P,"numpy.arange(0.,1.,1./len(NN)",CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
a,numpy.zeros(record_len),CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
Pvals,"numpy.zeros([L,L])",CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
Length,"numpy.zeros([L,L])",CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
P_norm,"numpy.zeros([L,L])",CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
order,"numpy.argsort(pca.components_[i,:])",CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
day_station_table,numpy.hstack([A]),CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
EigVec,"numpy.matrix(STAT[m]['eigvec'][:,:k])",CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
P_norm0,numpy.nan_to_num(P_norm),CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean_by_day,"numpy.nanmean(day_station_table,axis=0)",CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
mean_by_station,"numpy.nanmean(day_station_table,axis=1)",CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
pca,"sklearn.decomposition.PCA(n_components=n_comp,svd_solver='full')",CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
pca,"sklearn.decomposition.PCA(n_components=n_comp,svd_solver='full')",CLUSTER_10,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_1
left,"pandas.DataFrame({'A':[1,2],'B':[1,2]})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
right,"pandas.DataFrame({'A':[4,5,6],'B':[2,2,2]})",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame([['Vancouver','Canada',49.249660,-123.119339],
['Portland','UnitedStates',45.523449,-122.676208]],
columns=['City','Country','Latitude','Longitude'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame([['Vancouver','canada',49.249660,-123.119339],
['Portland','UnitedStates',45.523449,-122.676208]],
columns=['City','Country','Latitude','Longitude'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
result,"pandas.concat([df1,df2])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
temp_full2['Vancouver'],"pandas.cut(temp_full2['Vancouver'],bins)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
temp_full2['Portland'],"pandas.cut(temp_full2['Portland'],bins)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
temp_full2['SanFrancisco'],"pandas.cut(temp_full2['SanFrancisco'],bins)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
temp_full2['Seattle'],"pandas.cut(temp_full2['Seattle'],bins)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
temp_full2['LosAngeles'],"pandas.cut(temp_full2['LosAngeles'],bins)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
city_long,"pandas.melt(city_full,id_vars=['Country','City'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
city_temp,"pandas.merge(city_full,temp_small_t,on='City')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
weather_full,pandas.read_csv('../data/weather_description.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
temp_full,pandas.read_csv('../data/temperature.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
city_full,pandas.read_csv('../data/city_attributes.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
temp_full2,pandas.read_csv('../data/temperature.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
weather_full['datetime'],pandas.to_datetime(weather_full['datetime']),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
start_datetime,"datetime.datetime(2012,10,1,9,0)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
end_datetime,"datetime.datetime(2012,10,1,17,0)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
"COPdata[""cop""]","numpy.array(COPdata[""cop""])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
xfft,"numpy.fft.fft(a,n=None,axis=-1,norm=None)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
xifft,numpy.fft.ifft(xfft),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
predictions,"pandas.DataFrame({'id':test.id,'label':AdabM})",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('/Users/darshthakkar/Downloads/fake-news/train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('/Users/darshthakkar/Downloads/fake-news/test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(tfidf,targets,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Ex,"sklearn.ensemble.ExtraTreesClassifier(n_estimators=5,n_jobs=4)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=5,n_jobs=4)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Ad,sklearn.ensemble.AdaBoostClassifier(DecisionTreeClassifier(max_depth=3),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
NB,sklearn.naive_bayes.MultinomialNB(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
response,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
model,"sklearn.cluster.KMeans(n_clusters=3,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.cluster.KMeans(n_clusters=3,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.cluster.KMeans(n_clusters=3,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.silhouette_score(df,predicted,metric='euclidean')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(X,columns=['x','y'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(csv_file),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,"numpy.zeros_like(corrMatrixGalaxy,dtype=np.bool)",CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
datasetIphone,pandas.read_csv('iphone_smallmatrix_labeled_8d.csv'),CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
datasetGalaxy,pandas.read_csv('galaxy_smallmatrix_labeled_8d.csv'),CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(11,9)",CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
selector,sklearn.feature_selection.VarianceThreshold(thresh),CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
Eig,pandas.DataFrame(Res_eig['eigen-vecs'].transpose(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
a,numpy.arange(10),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,numpy.arange(18),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
A,numpy.arange(10),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
A,numpy.arange(10),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
A,numpy.arange(5),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
A,numpy.arange(20),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
B,"numpy.ones(shape=(2,5)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
B,"numpy.ones(shape=(2,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
B,"numpy.ones(shape=(2,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
words_df,pandas.DataFrame(X.toarray(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
examples,"pandas.DataFrame({
'content':[
'SWUNGAMACHETEANDCUTVICHAND',
'GRABBEDVICANDSHOOKVERYHARD',
'SHOTVICONETIMEINLEFTLEG',
'PUNCHEDVICINFACE',
'SLAPPEDVICANDBROKENOSE',
'BURNEDVICWITHHOTIRON'
]
})",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""data/2008-2012.csv"")",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.LinearSVC(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,pandas.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
rets,numpy.zeros(len(available),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
market_ret,numpy.mean(rets),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
start,"datetime.datetime(end.year-5,end.month,end.day)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
start,"datetime.datetime(end.year-5,end.month,end.day)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
end,datetime.datetime.now(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
end,datetime.datetime.now(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ob,"numpy.dot(signal,A)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
z,numpy.sin(3*t+5),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
t,"numpy.linspace(0,100,10000)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
signal,"numpy.vstack([x,y,z])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
ica,sklearn.decomposition.FastICA(n_components=3),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x_train,pandas.DataFrame(),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x_test,pandas.DataFrame(),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
sub,pandas.DataFrame(),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_qs,pandas.Series(df_train['question1'].tolist(),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_qs,pandas.Series(df_test['question1'].tolist(),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
qids,pandas.Series(df_train['qid1'].tolist(),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_train,"pandas.concat([neg_train,neg_train])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
neg_train,"pandas.concat([neg_train,neg_train[:int(scale*len(neg_train)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
x_train,"pandas.concat([pos_train,neg_train])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df_train,"pandas.read_csv(""../input/train.csv"")",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv(""../input/test.csv"")",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
qmarks,numpy.mean(train_qs.apply(lambdax:'?'inx),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
math,numpy.mean(train_qs.apply(lambdax:'[math]'inx),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
fullstop,numpy.mean(train_qs.apply(lambdax:'.'inx),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
capital_first,numpy.mean(train_qs.apply(lambdax:x[0].isupper(),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
capitals,numpy.mean(train_qs.apply(lambdax:max([y.isupper(),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
numbers,numpy.mean(train_qs.apply(lambdax:max([y.isdigit(),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
R,numpy.sum(shared_weights),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
counts,collections.Counter(words),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"requests.get(url,params=params)",CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,"requests.get(url,params=params)",CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,"requests.get(url,params=params)",CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
laLiga,"pandas.read_csv(""laLiga.csv"",delimiter=',')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,numpy.zeros_like(corr),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
error_lasso,"numpy.sqrt(mean_squared_error(y_test,pred_lasso)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=112)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
lassocv,"sklearn.linear_model.LassoCV(alphas=None,cv=10,max_iter=100000,normalize=True)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_lasso,sklearn.linear_model.Lasso(alpha=lassocv.alpha_),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,"pandas.DataFrame({'Target':y_trine,'new_Target':cv_p})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('https://raw.githubusercontent.com/reddyprasade/Data-Sets-For-Machine-Learnig-and-Data-Science/master/DataSets/Breast_Cancer_data.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_trine,x_test,y_trine,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv,"sklearn.model_selection.cross_val_score(model,x_trine,y_trine,cv=20)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(solver='liblinear'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cv_p,"sklearn.model_selection.cross_val_predict(model,x_trine,y_trine)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,numpy.ones(5),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
df['month'],"pandas.Categorical(df['month'],categories=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],ordered=True)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df['weekday'],"pandas.Categorical(df['weekday'],categories=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'],ordered=True)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df['date'],"pandas.to_datetime(df['date'],format='%y/%m/%d:%I:%M:%S%p')",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
messages,"pandas.read_csv('smsspamcollection/SMSSpamCollection',sep='\t',names=['label','message'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
spam_detector,sklearn.naive_bayes.MultinomialNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"msg_train,msg_test,lbl_train,lbl_test","sklearn.model_selection.train_test_split(messages['message'],messages['label'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer(analyzer=text_process)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer(analyzer=text_process)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer(analyzer=text_process)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.Pipeline([
('bow',CountVectorizer(analyzer=text_process)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(data),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_score_table,"pandas.DataFrame(data=score_table,index=[1])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_feat,"pandas.DataFrame({'feature':y,'coefficient':x})",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
miss_val_table,"pandas.concat([miss_val,miss_val_percent,miss_val_type],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.get_dummies(df,columns=['purpose','home_ownership'],drop_first=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('Data_(5),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['issue_year'],"pandas.to_datetime(df['issue_d'],format='%m/%d/%Y')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['earliest_cr_line_yr'],"pandas.to_datetime(df['earliest_cr_line'],format='%m/%d/%Y')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.array(X.columns),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
close_default_clf,numpy.argmin(np.abs(thresholds-t),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"unique_elements,counts_elements","numpy.unique(y_resampled,return_counts=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm_df,seaborn.heatmap(df.corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"chi2,p,dof,expected","scipy.stats.chi2_contingency([group1,group2])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lg,sklearn.linear_model.LogisticRegression(random_state=42),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lg_tuned,"sklearn.linear_model.LogisticRegression(random_state=42,penalty='l1',C=0.001)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_resampled,y_resampled,test_size=.3,random_state=42)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gsearch1,"sklearn.model_selection.GridSearchCV(lg,param_grid=params_1,cv=5,scoring=['f1','roc_auc'],refit='f1')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"tn,fp,fn,tp","sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"precision,recall,thresholds","sklearn.metrics.precision_recall_curve(y_test,lg_tuned_y_prob)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_transformed,sklearn.preprocessing.RobustScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(len(y),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.gca(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pt1,numpy.array(pt1),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pt2,numpy.array(pt2),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
givenPoints,numpy.array(givenPoints),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pt11,"numpy.array([[65,395]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pt12,"numpy.array([[55,85]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pt13,"numpy.array([[255,220]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pt14,"numpy.array([[685,220]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pt05,"numpy.array([[670,400]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pt07,"numpy.array([[670,310]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
rvecs,numpy.asarray(rvecs),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
objp,"numpy.zeros((1,pointPattern[0]*pointPattern[1],3)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
rotation_mat,"numpy.zeros(shape=(3,3)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
epilinesImageL,"numpy.dot(points2,F)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
epilinesImageR,"numpy.dot(F,points1.T)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
rvecs,"numpy.mean(rvecs,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
givenPoints,"numpy.reshape(givenPoints,(-1,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_valsL,"numpy.linspace(-1000,1800,61)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_valsR,"numpy.linspace(-0,4100,61)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
imgPtsSIFT1,"numpy.hstack((imgPtsSIFT1,np.ones((imgPtsSIFT1.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
imgPtsSIFT2,"numpy.hstack((imgPtsSIFT2,np.ones((imgPtsSIFT2.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
shelf0Points,"numpy.hstack((shelf0Points,np.ones((shelf0Points.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
shelfrrPoints,"numpy.hstack((shelfrrPoints,np.ones((shelfrrPoints.shape[0],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pointMatrix,"numpy.vstack((pt11,pt12,pt13,pt14,pt05,pt07)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
P,"numpy.column_stack((np.matmul(mtx,R)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"Ur,Sr,Vr",numpy.linalg.svd(F.T),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"Ul,Sl,Vl",numpy.linalg.svd(F),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df_data,"pandas.DataFrame(boston.data,columns=boston.feature_names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_target,"pandas.DataFrame(boston.target,columns=['MEDV'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df_data,df_target],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.arange(0,40,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_grid,Y_grid","numpy.meshgrid(np.arange(0,40,2.5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lstat_train,lstat_test,y_train,y_test","sklearn.model_selection.train_test_split(lstat,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lstat_quad_train,lstat_quad_test,y_train,y_test","sklearn.model_selection.train_test_split(lstat_quad,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lstat_cubic_train,lstat_cubic_test,_,_","sklearn.model_selection.train_test_split(lstat_cubic,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lstat_ten_train,lstat_ten_test,_,_","sklearn.model_selection.train_test_split(lstat_ten,y,test_size=0.2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_lin,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_quad,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_cubic,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_ten,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
quad,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cubic,sklearn.preprocessing.PolynomialFeatures(degree=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ten,sklearn.preprocessing.PolynomialFeatures(degree=10),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
audit_data,"pandas.read_table(""audit_of_political_engagement_14_2017.tab"")",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,pandas.ExcelFile('EnergyIndicators.xls'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
Top15['bins'],"pandas.cut(Top15['%Renewable'],5)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,"pandas.merge(ScimEn_m,energy,how='inner',left_on='Country',right_on='Country')",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
final_df,"pandas.merge(df,GDP,how='inner',left_on='Country',right_on='Country')",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
GDP,"pandas.read_csv('world_bank.csv',skiprows=4)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
ScimEn,pandas.read_excel(io='scimagojr-3.xlsx'),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
X_new,numpy.array([[22587.0]]),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"numpy.linspace(0,60000,1000)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"numpy.linspace(0,60000,1000)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"numpy.linspace(0,60000,1000)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"numpy.linspace(0,110000,1000)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"numpy.linspace(0,110000,1000)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"numpy.linspace(0,110000,1000)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
full_country_stats,"pandas.merge(left=oecd_bli,right=gdp_per_capita,
left_index=True,right_index=True)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
full_country_stats,"pandas.merge(left=oecd_bli,right=gdp_per_capita,left_index=True,right_index=True)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
full_country_stats,"pandas.merge(left=oecd_bli,right=gdp_per_capita,
left_index=True,right_index=True)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
oecd_bli,"pandas.read_csv(datapath+""oecd_bli_2015.csv"",thousands=',')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
gdp_per_capita,"pandas.read_csv(datapath+""gdp_per_capita.csv"",thousands=',',delimiter='\t',
encoding='latin1',na_values=""n/a"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
oecd_bli,"pandas.read_csv(datapath+""oecd_bli_2015.csv"",thousands=',')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
gdp_per_capita,"pandas.read_csv(datapath+""gdp_per_capita.csv"",thousands=',',delimiter='\t',
encoding='latin1',na_values=""n/a"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
oecd_bli,"pandas.read_csv(datapath+""oecd_bli_2015.csv"",thousands=',')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
gdp_per_capita,"pandas.read_csv(datapath+""gdp_per_capita.csv"",thousands=',',delimiter='\t',
encoding='latin1',na_values=""n/a"")",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin1,sklearn.linear_model.LinearRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_reg_full,sklearn.linear_model.LinearRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
lin_reg2,sklearn.linear_model.LinearRegression(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ridge,sklearn.linear_model.Ridge(alpha=10**9.5),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
model,sklearn.neighbors.KNeighborsRegressor(n_neighbors=3),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
poly,"sklearn.preprocessing.PolynomialFeatures(degree=60,include_bias=False)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pipeline_reg,"sklearn.pipeline.Pipeline([('poly',poly)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
prov,pandas.ExcelFile(xlsfile),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
prov,pandas.ExcelFile(xlsfile),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
rconcat,pandas.concat(raw_dfs),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df_vroll,pandas.concat(voterdfs),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
column_index,"numpy.where(df.iloc[:,0]=='DISTRICT')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
column_index,"numpy.where(df.iloc[:,0]=='DISTRICT')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
OBS_DF,pandas.read_csv('/Users/myliu/local/notebooks/PyCon/PyCon_MinT_obs_2015-2016.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
FCST_DF,pandas.read_csv('/Users/myliu/local/notebooks/PyCon/PyCon_MinT_fcst_2015-2016.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"m,b","numpy.polyfit(yearsBase,meanBase,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"yearsBase,meanBase","numpy.loadtxt('5-year-mean-1951-1980.csv',delimiter=',',usecols=(0,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"years,mean","numpy.loadtxt('5-year-mean-1882-2014.csv',delimiter=',',usecols=(0,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfg,"sklearn.ensemble.RandomForestRegressor(n_estimators=10,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_1,X_test_1,y_train_1,y_test_1","sklearn.model_selection.train_test_split(X_1,Y_1,test_size=0.33,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat((data.drop(['zipcode',\
'property_type','room_type','bed_type','review_scores_rating'],axis=1)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
zipcode_dummies,pandas.get_dummies(data['zipcode']),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
property_dummies,pandas.get_dummies(data['property_type']),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
room_dummies,pandas.get_dummies(data['room_type']),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bed_dummies,pandas.get_dummies(data['bed_type']),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ratings_scores_dummies,pandas.get_dummies(data['review_scores_rating']),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('../datasets/raw_datasets/listings.csv',usecols=cols)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean,numpy.mean(col),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
std,numpy.std(col),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
indexes,numpy.arange(len(labels),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
labels,numpy.asarray(labels),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
train_en['isSpam'],numpy.sign(train_en['spam_score']-0.5),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
test_en['isSpam'],numpy.sign(test_en['spam_score']-0.5),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
news,"pandas.read_csv(""C:/Users/nikhi/OneDrive/Desktop/Py-Practice/Datasets/fake.csv"")",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
counter,collections.Counter(bigrams),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
letters_only,"re.sub(""[^a-zA-Z]"","""",s)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"train,test","sklearn.model_selection.train_test_split(news,test_size=0.2)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
rnd_clf,"sklearn.ensemble.RandomForestClassifier(max_depth=10,min_samples_split=2,
n_estimators=100,random_state=42,n_jobs=-1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
y_train_pred,"sklearn.model_selection.cross_val_predict(rnd_clf,x_train,y_train,cv=13,n_jobs=-1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
cf_matrix,"sklearn.metrics.confusion_matrix(y_train,y_train_pred)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df,"pandas.DataFrame(A,columns=['PostalCode'])",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_df,pandas.DataFrame(cleaned_df),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_geo,pandas.read_csv(file_name),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_data,test_data","sklearn.model_selection.train_test_split(data,test_size=0.05)",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
trainX,numpy.array([prehum(d[0]),CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
trainy,numpy.array([premac(d[1]),CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
testX,numpy.array([prehum(d[0]),CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
testy,numpy.array([premac(d[1]),CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
x,numpy.array([prehum(s),CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
s0,numpy.zeros((len(train_data),CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
c0,numpy.zeros((len(train_data),CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
s1,numpy.zeros((len(test_data),CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
c1,numpy.zeros((len(test_data),CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
s,"numpy.zeros((1,64)",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
c,"numpy.zeros((1,64)",CLUSTER_10,CLUSTER_6,CLUSTER_10,CLUSTER_0,CLUSTER_1
x,"numpy.arange(1,31,0.5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
apps_merged,"pandas.merge(df_apps_1,df_jobs1,on=""JobID"",how=""left"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_apps,"pandas.read_csv('../data/apps.tsv',sep='\t')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_users,"pandas.read_csv('../data/users.tsv',sep='\t')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_jobs1,"pandas.read_csv('../data/splitjobs/jobs1.tsv',sep='\t',low_memory=False,error_bad_lines=False)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_data,test_data","sklearn.model_selection.train_test_split(apps_short,test_size=0.2,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,h)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
lin_svc,sklearn.svm.LinearSVC(C=C),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
svc,"sklearn.svm.SVC(kernel='linear',C=C)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
rbf_svc,"sklearn.svm.SVC(kernel='rbf',gamma=0.7,C=C)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
poly_svc,"sklearn.svm.SVC(kernel='poly',degree=3,C=C)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
tick_marks,numpy.arange(len(classes),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
array_train,"numpy.zeros((nbTrain,subsize)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
array_val,"numpy.zeros((nbVal,subsize)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
array_test,"numpy.zeros((nbTest,subsize)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
array_train,"numpy.zeros((nbTrain,subsize)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
array_val,"numpy.zeros((nbVal,subsize)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
array_test,"numpy.zeros((nbTest,subsize)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
AccScores,numpy.zeros(len(array),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
F1Scores,numpy.zeros(len(array),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
hiddenLayers,"numpy.zeros((layers,)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ids,"numpy.zeros((nb,2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
primitives,"numpy.zeros((nb,length)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
labels,"numpy.zeros((nb,1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ids,"numpy.zeros((nb,2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
primitives,"numpy.zeros((nb,length)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
result,numpy.zeros((len(ids_notag),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
F1Scores[i],"f1_score(array[i][0],array[i][1],average='weighted',labels=numpy.unique(array[i][1])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
acc_new,pandas.DataFrame({'acc':acc}),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
f1_new,pandas.DataFrame({'f1':f1}),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(result),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
AccScores[i],"sklearn.metrics.accuracy_score(array[i][0],array[i][1])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
F1Scores[i],"sklearn.metrics.f1_score(array[i][0],array[i][1],average='weighted',labels=np.unique(array[i][1])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cnf_matrix,"sklearn.metrics.confusion_matrix(Y_test,prediction_test)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.AdaBoostClassifier(base_estimator=DecisionTree_model(depth),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.VotingClassifier(estimators=[('DT',RandomForest_model(25,10,20)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(C=C,gamma=gamma,kernel=name)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(C=C,gamma=gamma,kernel='linear')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(C=C,gamma=gamma,kernel='rbf')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
model,"sklearn.neural_network.MLPClassifier(solver='sgd',alpha=1e-5,hidden_layer_sizes=hiddenLayers,learning_rate_init=learnRate,
max_iter=epochs,random_state=1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
results,collections.defaultdict(list),CLUSTER_6,CLUSTER_7,CLUSTER_1,CLUSTER_0,CLUSTER_1
"x_train_init,x_pool_init,y_train_init,y_pool_init","sklearn.model_selection.train_test_split(x_set,y_set,train_size=start_size)",CLUSTER_6,CLUSTER_7,CLUSTER_1,CLUSTER_0,CLUSTER_1
mabc,pandas.read_csv('data/monthly_arrivals_by_country_filtered.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
fsi,"pandas.read_csv(""data/fragilestatesindex_joined.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
PSQ_TMS,"pandas.read_csv(""data/PSQ_TMS.csv"",skiprows=range(5)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gdp_clean,"pandas.read_csv(""data/world_bank_gdp/GDP_filtered.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gdp_info_raw,"pandas.read_csv(""data/world_bank_gdp/GDP_2011-2015.csv"",skiprows=4)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pov_raw,"pandas.read_csv(""data/world_bank_poverty/Poverty_raw.csv"",skiprows=4)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ged40,"pandas.read_csv(""data/UDCP/ged40.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
brd,"pandas.read_csv(""data/UDCP/ucdp-brd-dyadic-2014.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
hcrpsq,"pandas.read_csv(""data/unhcr_popstats_export_time_series_all_data.csv"",skiprows=range(2)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
unemp,"pandas.read_csv(""data/world_bank_unemployment/API_SL.UEM.TOTL.ZS_DS2_en_csv_v2.csv"",
skiprows=range(3)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cpd,"pandas.read_table(""data/centripetalism.txt"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gdp.index,pandas.to_numeric(gdp.index),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"gdp[""GDP""]","pandas.to_numeric(gdp[""GDP""])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rm,"numpy.sqrt(metrics.mean_squared_error(target_test,prediction)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rm,"numpy.sqrt(metrics.mean_squared_error(target_test,prediction)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rm,"numpy.sqrt(metrics.mean_squared_error(target_test,prediction)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
min_max_scaler,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.AdaBoostRegressor(random_state=0,n_estimators=80)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.GradientBoostingClassifier(random_state=0,n_estimators=600,learning_rate=.8)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestRegressor(random_state=0,n_estimators=80)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,"sklearn.pipeline.Pipeline([(""imputer"",Imputer(missing_values='NaN',
strategy=""mean"",
axis=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
by_carrier,"pandas.DataFrame(columns=['proportion','left','right',
'f_proportion','f_interval',
'name','color'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
arr_df,pandas.DataFrame({'proportion':arr_hist/np.sum(arr_hist),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
by_carrier,"pandas.DataFrame(columns=['proportion','left','right',
'f_proportion','f_interval',
'name','color'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
arr_df,pandas.DataFrame({'proportion':arr_hist/np.sum(arr_hist),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
by_carrier,"pandas.DataFrame(columns=['proportion','left','right',
'f_proportion','f_interval',
'name','color'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
arr_df,pandas.DataFrame({'proportion':arr_hist/np.sum(arr_hist),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
flights,"pandas.read_csv('../data/complete_flights.csv',index_col=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"arr_hist,edges","numpy.histogram(subset['arr_delay'],
bins=int(range_extent/bin_width)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"arr_hist,edges","numpy.histogram(subset['arr_delay'],
bins=int(range_extent/bin_width)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"arr_hist,edges","numpy.histogram(subset['arr_delay'],
bins=int(range_extent/bin_width)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_xml,pandas.DataFrame(columns=dfcols),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
row,pandas.Series([ids[i].get_text(),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df1,df2])",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_combined,"pandas.concat(objs=[df[0],df[1]])",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""Module3Lab.csv"")",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""/Users/Cobena/Desktop/Learn/Code/FTW/StatisticalLearning/DataExtractionandAPI/Module3Lab.csv"")",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""Module3Lab.csv"",parse_dates=['birthday','record_date'])",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""Module3Lab.csv"",
parse_dates=['birthday','record_date'],
index_col=['id'])",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""Module3Lab.txt"",
parse_dates=['birthday','record_date'],
index_col=['id'],
delimiter='\t'
)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""Module3LabSemi.txt"",
parse_dates=['birthday','record_date'],
index_col=['id'],
delimiter=';'
)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_excel('Module3Lab.xlsx'),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df1,"pandas.read_excel('Module3Lab.xlsx',sheet_name='Sheet1')",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df2,"pandas.read_excel('Module3Lab.xlsx',sheet_name='Sheet2')",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_excel('Module3Lab.xlsx',sheet_name=[0,1])",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_json(""Module3Lab.json"")",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,json.load(f),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
y,pandas.get_dummies(y),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('prices.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
iris,pandas.read_csv('Iris-2.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.30,random_state=123)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"train_X,test_X,train_y,test_y","sklearn.model_selection.train_test_split(X,y,test_size=0.30,random_state=123)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
transformer,sklearn.preprocessing.Normalizer(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y_train,numpy.array(y_train),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rgb_img,numpy.squeeze(images[3]),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
correct,numpy.squeeze(correct_tensor.numpy(),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
preds,numpy.squeeze(preds_tensor.numpy(),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(36,36)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(25,4)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_pred_r,"pandas.DataFrame({'PredictedConsumption':y_pred_r[:,0]},index=y_test.index)",CLUSTER_3,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pred_r,"pandas.DataFrame({'PredictedConsumption':y_pred_r[:,0]},index=y_test.index)",CLUSTER_3,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
intervals,"pandas.date_range(start='12/1/2014',end='12/1/2015',freq='15min',closed=None)",CLUSTER_3,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(file_path,names=['Consumption'])",CLUSTER_3,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
dft,"pandas.read_csv(file_path,names=['Actual'])",CLUSTER_3,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
date1,datetime.datetime(int(year),CLUSTER_3,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,sklearn.neighbors.KNeighborsRegressor(n_neighbors=1),CLUSTER_3,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.ensemble.RandomForestRegressor(max_depth=2,random_state=0)",CLUSTER_3,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,"sklearn.ensemble.AdaBoostRegressor(base_estimator=None,n_estimators=50,learning_rate=1.0,loss='linear',random_state=None)",CLUSTER_3,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
W,"numpy.array(np.random.rand(2,1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('data/perceptron.csv',header=None)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
EPOCH,numpy.arange(len(LOST),CLUSTER_2,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
onehot,numpy.zeros((len(data),CLUSTER_2,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
init_value,"numpy.zeros((batch_size,num_layers*2*size_layer)",CLUSTER_2,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
batch_x,"numpy.zeros((batch_size,sequence_length,len(text_vocab)",CLUSTER_2,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
batch_y,"numpy.zeros((batch_size,sequence_length,len(text_vocab)",CLUSTER_2,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
init_value,"numpy.zeros((1,num_layers*2*size_layer)",CLUSTER_2,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
batch_x,"numpy.zeros((1,1,len(text_vocab)",CLUSTER_2,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
batch_x,"numpy.zeros((1,1,len(text_vocab)",CLUSTER_2,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
index,numpy.argmax(prob[0][0]),CLUSTER_2,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
batch_id,"random.sample(possible_batch_id,batch_size)",CLUSTER_2,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
last_time,time.time(),CLUSTER_2,CLUSTER_11,CLUSTER_5,CLUSTER_0,CLUSTER_1
indices,numpy.arange(len(digits.data),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
unlabeled_indices,numpy.arange(n_total_samples),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
delete_indices,numpy.array([]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"delete_index,",numpy.where(unlabeled_indices==image_index),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
delete_indices,"numpy.concatenate((delete_indices,delete_index)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
uncertainty_index,numpy.argsort(pred_entropies),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y_train,numpy.copy(y),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
unlabeled_indices,"numpy.delete(unlabeled_indices,delete_indices)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
f,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
digits,sklearn.datasets.load_digits(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(true_labels,predicted_labels,
labels=lp_model.classes_)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
true_centers,numpy.exp(log_centers),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
log_data,numpy.log(data.copy(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
log_samples,numpy.log(samples.copy(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
Q1,"numpy.percentile(log_data[feature],25)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
Q3,"numpy.percentile(log_data[feature],75)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
samples,"pandas.DataFrame(data.loc[indices],columns=data.keys()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
variance_ratios,"pandas.DataFrame(np.round(ratios,4)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
reduced_data,"pandas.DataFrame(reduced_data,columns=['Dimension1','Dimension2'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
true_centers,pandas.DataFrame(np.round(true_centers),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""customers.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
regressor,sklearn.tree.DecisionTreeRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clusterer,sklearn.cluster.KMeans(n_clusters=n_clusters),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.silhouette_score(reduced_data,preds)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clusters,sklearn.model_selection.GridSearchCV(KMeans(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scorer,sklearn.metrics.make_scorer(silhouette_score),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
bins,"numpy.arange(0,99,10)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
ks_b,numpy.zeros(len(narray),CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
ad_b,numpy.zeros(len(narray),CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
kl_b,numpy.zeros(len(narray),CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
chi2_b,numpy.zeros(len(narray),CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
ks_b,numpy.zeros(len(narray),CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
ad_b,numpy.zeros(len(narray),CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
kl_b,numpy.zeros(len(narray),CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
chi2_b,numpy.zeros(len(narray),CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
mybins,numpy.linspace(min(dist),CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
mybins,numpy.linspace(min(dist),CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-10,10,100)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
"distpdf_n,mybins_n,","numpy.histogram(dist_n,density=True)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
"distpdf_b,mybins_b,","numpy.histogram(dist_b,density=True)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
"distpdf_p,mybins_p,","numpy.histogram(dist_p,density=True)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s,json.load(open(os.getenv('PUI2018'),CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
threshold,"scipy.stats.anderson(dist_n,dist='norm')",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
threshold,"scipy.stats.anderson(dist_n,dist='norm')",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
threshold,"scipy.stats.anderson(dist_b,dist='norm')",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
ad_b[i],"scipy.stats.anderson(dist,dist='norm')",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
ad_b[i],"scipy.stats.anderson(dist,dist='norm')",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
kl_b[i],"scipy.stats.entropy(np.histogram(dist,bins=mybins)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
kl_b[i],"scipy.stats.entropy(np.histogram(dist,bins=mybins)",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
ks_b[i],"scipy.stats.kstest(dist,'norm')",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
ks_b[i],"scipy.stats.kstest(dist,'norm')",CLUSTER_14,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
nums,"numpy.arange(-10,10,step=1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,numpy.array(X.values),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,numpy.array(y.values),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X2,numpy.array(X2.values),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y2,numpy.array(y2.values),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
theta,numpy.zeros(3),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
grad,numpy.zeros(parameters),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
grad,numpy.zeros(parameters),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
theta2,numpy.zeros(11),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
grad[i],numpy.sum(term),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
grad[i],numpy.sum(term),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
first,"numpy.multiply(-y,np.log(sigmoid(X*theta.T)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
second,numpy.multiply((1-y),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
term,"numpy.multiply(error,X[:,i])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
first,"numpy.multiply(-y,np.log(sigmoid(X*theta.T)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
second,numpy.multiply((1-y),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
term,"numpy.multiply(error,X[:,i])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data2['F'+str(i)+str(j)],"numpy.power(x1,i-j)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
theta,numpy.matrix(theta),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,numpy.matrix(X),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,numpy.matrix(y),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
theta,numpy.matrix(theta),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,numpy.matrix(X),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,numpy.matrix(y),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
theta_min,numpy.matrix(result[0]),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
theta,numpy.matrix(theta),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,numpy.matrix(X),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,numpy.matrix(y),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
theta,numpy.matrix(theta),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,numpy.matrix(X),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
y,numpy.matrix(y),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
theta_min,numpy.matrix(result2[0]),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(path,header=None,names=['Exam1','Exam2','Admitted'])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
data2,"pandas.read_csv(path,header=None,names=['Test1','Test2','Accepted'])",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
path,os.getcwd(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
path,os.getcwd(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
result,"scipy.optimize.fmin_tnc(func=cost,x0=theta,fprime=gradient,args=(X,y)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
result2,"scipy.optimize.fmin_tnc(func=costReg,x0=theta2,fprime=gradientReg,args=(X2,y2,learningRate)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.LogisticRegression(penalty='l2',C=1.0)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
directors,collections.defaultdict(list),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
Movie,"collections.namedtuple('Movie','titleyearscore')",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
cnt,collections.Counter(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
training_set,pandas.DataFrame(mean_set.fit_transform(training_set),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_set,pandas.DataFrame(mean_set.fit_transform(test_set),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
file,"pandas.read_csv('data/communities.data',names=columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean,numpy.mean(x_training_set[i]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std,numpy.std(x_training_set[i]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cb,matplotlib.pyplot.colorbar(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
f,"matplotlib.pyplot.figure(figsize=(10,7)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mse,"sklearn.metrics.mean_squared_error(y_test_set,reg.predict(x_test_set)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mse,"sklearn.metrics.mean_squared_error(y_test_set,reg.predict(x_test_set_reduced)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mse[a],"sklearn.metrics.mean_squared_error(y_test_set,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.RidgeCV(cv=10),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.LassoCV(cv=10),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg0,"sklearn.linear_model.LassoCV(cv=10,normalize=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature,sklearn.feature_selection.SelectFromModel(LassoCV(cv=10),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature,sklearn.feature_selection.SelectFromModel(reg0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf_10,"sklearn.model_selection.KFold(n_splits=10,shuffle=True,random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
review,"pandas.concat([ok_date,notok_date])",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
df,pandas.read_pickle('../data/merged_df.pkl'),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
res,"pandas.read_sql(""select*fromrestaurant;"",conn)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
review,"pandas.read_sql(""select*fromreview;"",conn)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
reviewer,"pandas.read_sql(""select*fromreviewer;"",conn)",CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
review.date,pandas.to_datetime(review.date),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
reviewer['yelpJoinDate'],pandas.to_datetime(reviewer['yelpJoinDate']),CLUSTER_16,CLUSTER_2,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,"numpy.array([8.09121212,3.3545454545])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train,numpy.array(raw_data_x),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train,numpy.array(raw_data_y),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
nearst,numpy.argsort(distances),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
nearst,numpy.argsort(distances),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
votes,collections.Counter(topk_y),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
votes,collections.Counter(topk_y),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
graduate_new,"pandas.concat([graduate1,graduate2],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
graduate_new,"pandas.concat([graduate1,graduate2['count']],axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
graduate,"pandas.read_csv(file_path,sep=',',skipinitialspace=True)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
a,"numpy.arange(1,11)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,"numpy.arange(2,11,2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c,"numpy.arange(0,11,3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"numpy.array([2,4,5,6,7,8,9])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
jungle,"numpy.array([""lion"",""horse"",""lion"",""cat"",""Dog""])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
sa,"numpy.load(""randomN.npy"")",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
d,"numpy.load(""multi.npz"")",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
d,"numpy.load(""multi.npz"")",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
d,"numpy.load(""multi.npz"")",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
d,"numpy.load(""multi.npz"")",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
income,pandas.DataFrame(app_train['AMT_INCOME_TOTAL']),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
app_train,pandas.read_csv(f_app_train),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
levels,numpy.arange(n_classes+1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fast_oscillation,numpy.sin(5*x),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
slow_oscillation,numpy.sin(0.5*x),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xfit,"numpy.linspace(0,10,1000)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.linspace(*xlim,num=200)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(6,6)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_blobs(n_samples=300,centers=4,
random_state=0,cluster_std=1.0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bag,"sklearn.ensemble.BaggingClassifier(tree,n_estimators=100,max_samples=0.8,
random_state=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.RandomForestClassifier(n_estimators=1000),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest,sklearn.ensemble.RandomForestRegressor(200),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
digits,sklearn.datasets.load_digits(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mat,"sklearn.metrics.confusion_matrix(ytest,ypred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
live_df,pandas.read_csv('../input/live.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
live_df,pandas.read_csv('live.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kick_data,"pandas.read_csv(""kickstarter_most_backed.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""../input/most_backed.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kick_live,"pandas.read_csv(""../input/live.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"plt.hist(residuals,bins",numpy.ceil(np.sqrt(len(Y),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pvals,"sklearn.feature_selection.f_regression(X,Y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_2,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model_3,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.5,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"P_train,P_test,b_train,b_test","sklearn.model_selection.train_test_split(P,b,test_size=0.5,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"Lx_train,Lx_test,Ly_train,Ly_test","sklearn.model_selection.train_test_split(P,b,test_size=0.5,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
file_df,pandas.read_csv(file),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
galactic_probabilities,numpy.zeros(15),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
extragalactic_probabilities,numpy.zeros(15),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
targets,numpy.hstack([np.unique(meta_data['target']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
galactic_classes,"numpy.append(galactic_classes,14)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
extragalactic_classes,"numpy.append(extragalactic_classes,14)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
galactic_classes,numpy.unique(galactic_data['target_id']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
extragalactic_classes,numpy.unique(extragalactic_data['target_id']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
test_df,"pandas.DataFrame(index=test_meta_data['object_id'],data=test_pred,columns=['class_%d'%iforiintargets])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
meta_data,pandas.read_csv('../input/training_set_metadata.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
test_meta_data,pandas.read_csv('../input/test_set_metadata.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
t,pandas.read_csv('cdata.csv'),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
coaches,"pandas.read_csv(""Coaches.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
stadiums,"pandas.read_csv(""stadiums.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
grad,"pandas.read_csv(""graduation.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
season,"pandas.read_csv(""season2017.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
mat,"numpy.arange(1,26)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
vg_regions,"pandas.read_feather('pickles/vg_region_descriptions.feather',nthreads=4)",CLUSTER_16,CLUSTER_0,CLUSTER_6,CLUSTER_14,CLUSTER_1
coco2014,"pandas.read_feather('pickles/coco_captions_train2014.feather',nthreads=4)",CLUSTER_16,CLUSTER_0,CLUSTER_6,CLUSTER_14,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_2,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_2,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_2,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
auc,sklearn.metrics.roc_auc_score(np.round(preds),CLUSTER_2,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(np.random.randn(100,4)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame({'Category':['A','B','C'],'Values':[32,43,50]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df3,"pandas.DataFrame({'x':[1,2,3,4,5],'y':[10,20,30,20,10],'z':[5,4,3,2,1]})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,numpy.arange(n_books),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.arange(length),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.arange(len(s),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.arange(7),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,numpy.arange(7),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
word_counts,numpy.array(word_counts),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
unique_words,numpy.array(unique_words),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sentence_counts,numpy.array(sentence_counts),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
words_per_chapter,numpy.array(words_per_chapter),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,numpy.array(s),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
counts,numpy.zeros(len(chars),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
m,numpy.nanmean(char_dict[char][book_indices[book][0]:book_indices[book][1]]),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
caps,"re.findall(r""\b[A-Z][A-Z\'-]*\b"",sentences[i])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
caps,"re.findall(r""\b[A-Z][A-Z]*\b"",sentences[i])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('../datasets/movie_metadata.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.xticks(rotation=90),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_features,"pandas.concat([data_train[feature_columns],data_test])",CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data_test,pandas.read_csv(resource_archive.open('TestData.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data_train,pandas.read_csv(resource_archive.open('TrainingData.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
counts,collections.Counter(all_words_list),CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,numpy.arange(12),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
c,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
c_2,"numpy.array([1,2,3])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(np.random.randn(6,4)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,"pandas.Series([1,3,5,np.nan])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dates,"pandas.date_range('20181213',periods=6)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
cbar,matplotlib.pyplot.colorbar(image_plot),CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(9,6)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax0,"matplotlib.pyplot.subplot(gs[0,0])",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax1,"matplotlib.pyplot.subplot(gs[0,1])",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax2,"matplotlib.pyplot.subplot(gs[1,:])",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=1,sharex=True)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=2,sharex=True)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(10,6)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(10,6)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(0,10,0.01)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
t,"numpy.arange(0,10,0.1)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
t,"numpy.arange(0,10,0.1)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
bins,"numpy.arange(0,25,0.1)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(0.,1.,0.1)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
t,"numpy.arange(0.,5.,0.01)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
t,"numpy.arange(0.,5.,0.01)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.sin(2*np.pi*x),CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
ZZ,numpy.sin(0.2*np.pi*XX**2),CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,10,num=500)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.linspace(0,1,num=500)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
"XX,YY","numpy.meshgrid(x,y)",CLUSTER_23,CLUSTER_0,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,pandas.read_excel('catanstats.xlsx'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
resourcedf,"pandas.read_excel('catanstats.xlsx',sheetname=2)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
clf,sklearn.naive_bayes.MultinomialNB(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
content,"pandas.read_csv(filename,sep='，',encoding='utf-8')",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
with_jieba_cut,collections.Counter(jieba.cut(article),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
words_count_2,collections.Counter(TOKEN2),CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
W,numpy.array([0]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
b,numpy.array([0]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(np.array([x,y])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"up,down","numpy.array([(m+err,m-err)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"up,down","numpy.array([(m+err,m-err)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ysNN,numpy.array(ysNN),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ysNNerr,numpy.array(ysNNerr),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ysNN2,numpy.array(ysNN2),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ysNN2err,numpy.array(ysNN2err),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ysNN,numpy.array(ysNN),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ysNNerr,numpy.array(ysNNerr),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ysNN2,numpy.array(ysNN2),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ysNN2err,numpy.array(ysNN2err),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
total_chis,numpy.asarray(5*[0.]),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
total_chis+,numpy.asarray(chis),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
total_chis+,numpy.asarray(neu_chis),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
total_chis,numpy.asarray(5*[0.]),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
total_chis+,numpy.asarray(chis),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
total_chis+,numpy.asarray(neu_chis),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
total_chinpt,numpy.concatenate([total_chis[:3]/(total_pts),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
total_chinpt,numpy.concatenate([total_chis[:3]/(total_pts),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.concatenate((xvals,xvals[::-1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.concatenate((up,down[::-1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.concatenate((xvals,xvals[::-1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.concatenate((up,down[::-1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tms,"numpy.linspace(0.05,0.55,NPTS)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tms,"numpy.linspace(0.05,0.55,NPTS)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,2,figsize=[10,10],sharex=True,sharey='row')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,2,sharex=True,sharey='row',figsize=[10,7])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,2,sharex=True,sharey='row',figsize=[10,7])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df1,"pandas.DataFrame({
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']

},index=[0,1,2,3])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame({
'A':['A4','A5','A6','A7'],
'B':['B4','B5','B6','B7'],
'C':['C4','C5','C6','C7'],
'D':['D4','D5','D6','D7']

},index=[4,5,6,7])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df3,"pandas.DataFrame({
'A':['A8','A9','A10','A11'],
'B':['B8','B9','B10','B11'],
'C':['C8','C9','C10','C11'],
'D':['D8','D9','D10','D11']

},index=[4,5,6,7])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df4,"pandas.DataFrame({
'key':['K0','K1','K2','K3'],
'A':['A0','A1','A2','A3'],
'B':['B0','B1','B2','B3']
})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df5,"pandas.DataFrame({
'key':['K0','K1','K2','K3'],
'C':['C0','C1','C2','C3'],
'D':['D0','D1','D2','D3']
})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df4,"pandas.DataFrame({
'A':['A0','A1','A2'],
'B':['B0','B1','B2']
},index=['K0','K1','K2'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df5,"pandas.DataFrame({
'C':['C0','C1','C2'],
'D':['D0','D1','D2']
},index=['K0','K2','K2'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('Sales.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('Sales.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_html('contoh.html'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_json(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
X_grid,numpy.array([np.ravel(X1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X1,X2","numpy.meshgrid(np.linspace(-1.5,1.5,50)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kpca,"sklearn.decomposition.KernelPCA(kernel=""rbf"",fit_inverse_transform=True,gamma=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_circles(n_samples=400,factor=.3,noise=.05)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""digit-recognizer/train.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
labels,"numpy.array([1,2,3,0,2,1])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
image,"numpy.array(ndimage.imread(fname,flatten=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
time_difference,datetime.timedelta(hours=2),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
test_accuracy,numpy.mean(y_test==y_test_pred),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.reshape(X_val,(X_val.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.reshape(X_dev,(X_dev.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_train,"numpy.hstack([X_train,np.ones((X_train.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_val,"numpy.hstack([X_val,np.ones((X_val.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_test,"numpy.hstack([X_test,np.ones((X_test.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X_dev,"numpy.hstack([X_dev,np.ones((X_dev.shape[0],1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
grad_difference,"numpy.linalg.norm(grad_naive-grad_vectorized,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
cova1,"numpy.matrix([[1.36,-2.35],[-2.35,4.18]])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
sd,"numpy.matrix([[1],[1]])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
sd1,"numpy.matrix([[-0.49],[0.87]])",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
cova,"numpy.cov(data.x1,data.x2)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_excel(""NewMicrosoftExcelWorksheet.xlsx"")",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
y_train,numpy.asarray(train_labels),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_test,numpy.asarray(test_labels),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
results,numpy.zeros((len(sequences),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('./data/data.csv',index_col=0)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
av1,numpy.mean(f1),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std1,numpy.sqrt(np.var(f1),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,5)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
randomNumber,"random.randint(0,endofAnswers)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
a1,requests.get(url),CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
a2,"requests.get(url,headers=headers)",CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
a3,requests.get(url2),CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
a4,"requests.post(url2,data=data)",CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
image,numpy.zeros(((w+pad),CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
data,"numpy.empty((m,3)",CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
target_codings,"numpy.roll(codings_rnd,-1,axis=0)",CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
"data[:,0]",numpy.cos(angles),CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
"data[:,1]",numpy.sin(angles),CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
q,"numpy.linspace(0.001,0.999,500)",CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(4,3)",CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,3*n_test_digits)",CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,2.5*n_digits)",CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_29,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_0
n_bins,numpy.arange(isi.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v,numpy.zeros(n_steps),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v,numpy.zeros(n_steps),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v,numpy.zeros(n_steps),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v,numpy.zeros(n_steps),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v,numpy.zeros(n_steps),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
v,numpy.zeros(n_steps),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
isi,numpy.diff(spike_times),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
counts,"numpy.insert(counts,0,counts[0])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"counts,bins","numpy.histogram(isi,n_bins)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"_,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(ncols=2,figsize=(12,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
exc,scipy.stats.poisson(rate),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
exc,scipy.stats.poisson(rate),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
exc,scipy.stats.poisson(rate),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
exc,scipy.stats.poisson(exc_rate),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
inh,scipy.stats.poisson(inh_rate),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
exc,scipy.stats.poisson(exc_rate),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
inh,scipy.stats.poisson(inh_rate),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
exc,scipy.stats.poisson(exc_rate),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
inh,scipy.stats.poisson(inh_rate),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
control_fn,"re.sub(""image"",""control"",image_fn)",CLUSTER_23,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
control_fn,"re.sub("".jpg"","""",control_fn)",CLUSTER_23,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
			raw_json,json.loads(json_data_xpath[0]ifjson_data_xpathelse''),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
			flight_data,"json.loads(raw_json[""content""])",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
			response,"requests.get(url,headers=headers,verify=False)",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
			flight_info,collections.OrderedDict(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
d,collections.OrderedDict(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(file,**options)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
churn['churn'],"numpy.where(churn['churn']=='True.',True,False)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
churn['churn'],"numpy.where(churn['churn']==True,1,churn['churn'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
churn['churn'],"numpy.where(churn['churn']==False,0,churn['churn'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
chi2_val,"pandas.DataFrame(columns=['state1','state2','chi2_stat','p-value'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
temp_df,"pandas.DataFrame(np.nan,index=[0],columns=['state1','state2','chi2_stat','p-value'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
chi2_val,"pandas.DataFrame(columns=['state1','state2','chi2_stat','p-value'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
temp_df,"pandas.DataFrame(np.nan,index=[0],columns=['state1','state2','chi2_stat','p-value'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fisher_val,"pandas.DataFrame(columns=['state1','state2','fisher_stat','p-value'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
temp_df,"pandas.DataFrame(np.nan,index=[0],columns=['state1','state2','fisher_stat','p-value'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
churn_states,"pandas.crosstab(churn_treatment_1['state'],churn_treatment_1['churn'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
churn_states,"pandas.crosstab(churn['state'],[churn['treatment'],churn['churn']],rownames=['state'],colnames=['treatment','churn'])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
churn,pandas.read_csv('churn_analysis.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
chi2_stat,"scipy.stats.chi2_contingency(chi2_table.values,correction=False)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
chi2_stat,"scipy.stats.chi2_contingency(chi2_table.values,correction=True)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
chi2,scipy.stats.chi2_contingency(confusion_matrix),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fisher_stat,scipy.stats.fisher_exact(fisher_table.values),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
grad,numpy.zeros_like(img),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_6
k,"numpy.outer(k,k)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_6
img_shift,"numpy.roll(numpy.roll(img,sx,1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_6
hw,numpy.float32(img.shape[:2]),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_6
k,"numpy.float32([1,4,6,4,1])",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_6
hw,numpy.float32(img.shape[:2]),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_6
img0,numpy.float32(img0),CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_6
a,"numpy.uint8(np.clip(a,0,1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_10,CLUSTER_6
new_row,collections.OrderedDict(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
normal_df,"pandas.DataFrame(percentage_con_mat,index=Type,columns=Type)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
percentage_df,"pandas.DataFrame(con_mat,index=Type,columns=Type)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
pltx,pandas.DataFrame(Type),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
plty,pandas.DataFrame(predict_prob),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
ans,"pandas.concat([pltx,plty],axis=1)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
image,matplotlib.pyplot.imread(path[i]),CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(30,10)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(15,5)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(7,3,figsize=(20,60)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
plot1,"seaborn.heatmap(normal_df,center=0,annot=True,fmt='.2f',linewidths=2,cmap=""PuBu"",
annot_kws={""size"":15},ax=ax[0],linecolor='black')",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
plot2,"seaborn.heatmap(percentage_df,center=0,annot=True,fmt=""d"",linewidths=2,cmap=""PuBu"",
annot_kws={""size"":15},ax=ax[1],linecolor='black')",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
con_mat,"sklearn.metrics.confusion_matrix(test_true,test_pred)",CLUSTER_29,CLUSTER_3,CLUSTER_11,CLUSTER_5,CLUSTER_0
mask,numpy.zeros_like(corr_df),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
s2,"pandas.merge(sensors,datatypes,left_on='data_type_id',right_on='id')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
full,"pandas.merge(data,s2,left_on='sensor_id',right_on='id_x')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
fullnode,"pandas.merge(full,nodes,left_on='node_id',right_on='id')",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('data/datapoints.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
nodes,pandas.read_csv('data/nodes.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
sensors,pandas.read_csv('data/sensors.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
volcanos,pandas.read_csv('data/volcanos.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
datatypes,pandas.read_csv('data/datatypes.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axarr","matplotlib.pyplot.subplots(10,sharex=True)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
_files,os.listdir(data_dir),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
regr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
os_data_X,"pandas.DataFrame(data=os_data_X,columns=columns)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_12,CLUSTER_0
os_data_y,"pandas.DataFrame(data=os_data_y,columns=['type'])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_12,CLUSTER_0
data_log,"pandas.get_dummies(data_log,drop_first=True)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_12,CLUSTER_0
model_data,"pandas.read_csv(dir+""output/model_data.csv"",index_col=0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_12,CLUSTER_0
inf,"pandas.read_csv(dir+""output/inf.csv"",index_col=0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_12,CLUSTER_0
p,numpy.mean(y_pred==y_test),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_12,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_12,CLUSTER_0
"train,test","sklearn.model_selection.train_test_split(data_log,test_size=1/3,random_state=42)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_12,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(class_weight=""balanced"")",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_12,CLUSTER_0
df,pandas.DataFrame(index=time_index),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
time_index,"pandas.date_range('01/01/2010',periods=5,freq='M')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dataset,"pandas.read_csv(url,names=names)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
"x_train,x_val,y_train,y_val","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=4)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
cv_res,"sklearn.model_selection.cross_val_score(m,x_train,y_train,cv=kf,scoring='accuracy')",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.StratifiedKFold(n_splits=10,random_state=4,shuffle=True)",CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
model,sklearn.discriminant_analysis.LinearDiscriminantAnalysis(),CLUSTER_20,CLUSTER_8,CLUSTER_9,CLUSTER_0,CLUSTER_0
pca_df,"pandas.DataFrame(data=pca_data,columns=('1stPrincipal','2ndPrincipal','labels')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
d0,pandas.read_csv('train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_data,"numpy.vstack((pca_data.T,labels)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
standardized_data,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_feat,"pandas.DataFrame(scaled_features,columns=df.columns[:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""ClassifiedData"",index_col=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_features,df['TARGETCLASS'],
test_size=0.30)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=23),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lreg_rmse,"numpy.sqrt(mean_squared_error(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rr001_rmse,"numpy.sqrt(mean_squared_error(y_test,rr001_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rr100_rmse,"numpy.sqrt(mean_squared_error(y_test,rr100_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr001_rmse,"numpy.sqrt(mean_squared_error(y_test,lr001_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr00001_rmse,"numpy.sqrt(mean_squared_error(y_test,lr00001_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enr_rmse,"numpy.sqrt(mean_squared_error(y_test,enr_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sv_rmse,"numpy.sqrt(mean_squared_error(y_test,sv_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
final,"pandas.DataFrame({'Model':['Linear','Lasso0.01','Lasso0.0001','Ridge001','Ridge100','ElasticNet','SupportVector'],'Score':[lreg.score(x_train,y_train)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('empl.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp,sklearn.impute.SimpleImputer(strategy='most_frequent'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ss,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_new,y,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lreg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lreg_mse,"sklearn.metrics.mean_squared_error(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rr001_mse,"sklearn.metrics.mean_squared_error(y_test,rr001_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rr100_mse,"sklearn.metrics.mean_squared_error(y_test,rr100_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr001_mse,"sklearn.metrics.mean_squared_error(y_test,lr001_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr00001_mse,"sklearn.metrics.mean_squared_error(y_test,lr00001_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enr_mse,"sklearn.metrics.mean_squared_error(y_test,enr_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sv_mse,"sklearn.metrics.mean_squared_error(y_test,sv_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lreg_mae,"sklearn.metrics.mean_absolute_error(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rr001_mae,"sklearn.metrics.mean_absolute_error(y_test,rr001_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rr100_mae,"sklearn.metrics.mean_absolute_error(y_test,rr100_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr001_mae,"sklearn.metrics.mean_absolute_error(y_test,lr001_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr00001_mae,"sklearn.metrics.mean_absolute_error(y_test,lr00001_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enr_mae,"sklearn.metrics.mean_absolute_error(y_test,enr_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sv_mae,"sklearn.metrics.mean_absolute_error(y_test,sv_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lreg_r2,"sklearn.metrics.r2_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rr001_r2,"sklearn.metrics.r2_score(y_test,rr001_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rr100_r2,"sklearn.metrics.r2_score(y_test,rr100_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr001_r2,"sklearn.metrics.r2_score(y_test,lr001_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr00001_r2,"sklearn.metrics.r2_score(y_test,lr00001_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enr_r2,"sklearn.metrics.r2_score(y_test,enr_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sv_r2,"sklearn.metrics.r2_score(y_test,sv_y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr001,sklearn.linear_model.Lasso(alpha=0.01),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr00001,sklearn.linear_model.Lasso(alpha=0.0001),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rr001,sklearn.linear_model.Ridge(alpha=0.01),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rr100,sklearn.linear_model.Ridge(alpha=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
enr,sklearn.linear_model.ElasticNet(alpha=0.01),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sv,sklearn.svm.SVR(kernel=i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sv,sklearn.svm.SVR(kernel='poly'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"numpy.array([[1,2],[1,4],[1,0],
[4,2],[4,4],[4,0]])",CLUSTER_29,CLUSTER_0,CLUSTER_1,CLUSTER_0,CLUSTER_0
X,numpy.array(box_data),CLUSTER_29,CLUSTER_0,CLUSTER_1,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=2,random_state=0)",CLUSTER_29,CLUSTER_0,CLUSTER_1,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=9,random_state=1)",CLUSTER_29,CLUSTER_0,CLUSTER_1,CLUSTER_0,CLUSTER_0
xml_file_dirs,os.listdir(root_dir),CLUSTER_29,CLUSTER_0,CLUSTER_1,CLUSTER_0,CLUSTER_0
temp_xml_file_list,os.listdir(root_dir+xml_file_dir),CLUSTER_29,CLUSTER_0,CLUSTER_1,CLUSTER_0,CLUSTER_0
frame,pandas.DataFrame(data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
car,pandas.read_csv('Data/vehicle_collisions.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
output,pandas.read_csv('Q1_PARTONE.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
car['Year'],pandas.to_datetime(car['DATE']),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
car['Month'],pandas.to_datetime(car['DATE']),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dataMean,"numpy.zeros((3,imgSize,imgSize)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
trn,"numpy.empty((0,numFeature+1)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
channelMean,"numpy.mean(pixData,axis=(1,2)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
res,"numpy.hstack((feat,np.reshape(d['labels'],(len(d['labels'])",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
trn,"numpy.vstack((trn,readBatch(batchName)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
pixData,"numpy.pad(pixData,((0,0)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
root_dir,os.getcwd(),CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
training,"numpy.concatenate((vector[:start],vector[end:])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_x,"numpy.concatenate((X[:split_num*j],X[split_num*(j+1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_y,"numpy.concatenate((y[:split_num*j],y[split_num*(j+1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
mask,"numpy.ones(vector.shape[0],dtype=bool)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
std_price,"numpy.std(prices,axis=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('housing.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
bj_data,pandas.read_csv('bj_housing.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,prices,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"bj_trainData,bj_testData,prices_train,prices_test","sklearn.model_selection.train_test_split(bj_features,bj_prices,test_size=0.3,
random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cross_validator,sklearn.model_selection.KFold(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
bj_crossValidation,sklearn.model_selection.KFold(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.r2_score(y_true,y_predict)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(regressor,params,scoring=scoring_fnc,cv=cross_validator)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
bj_gridCV,"sklearn.model_selection.GridSearchCV(bj_reg,bj_parameters,scoring=bj_scoreFunc,cv=bj_crossValidation)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scoring_fnc,sklearn.metrics.make_scorer(performance_metric),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
bj_scoreFunc,sklearn.metrics.make_scorer(performance_metric),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
regressor,sklearn.tree.DecisionTreeRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
bj_reg,sklearn.tree.DecisionTreeRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeRegressor(max_depth=i),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
batch_features,"numpy.zeros((batch_size,2,105,105,1)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_9
batch_labels,"numpy.zeros((batch_size,1)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_9
indecies,numpy.zeros(2),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_9
not_insame_class,numpy.argmax(lengthes-indecies[0]>0)!=numpy.argmax(lengthes-indecies[1]>0),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_9
first,"numpy.searchsorted(lengthes,np.random.randint(1,len(features)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_9
all_images,numpy.vstack([np.array(all_alphabets[key]),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_9
all_evaluation_images,numpy.vstack([np.array(all_evaluation_alphabets[key]),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_9
lengthes_train,numpy.insert(np.cumsum([len(all_alphabets[key]),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_9
lengthes_val,numpy.insert(np.cumsum([len(all_evaluation_alphabets[key]),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_10,CLUSTER_9
cidx,"numpy.arange(0,nc,1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
cidx,"numpy.arange(0,nc,1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
"[y1,_]","control.matlab.impulse(sys,T=numpy.arange(T)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
X_train,numpy.asarray(X[:thr]),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
y_train,numpy.asarray(y[:thr]),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
X_test,numpy.asarray(X[thr:]),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
y_test,numpy.asarray(y[thr:]),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
batch_s,numpy.empty(shape),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
label,"numpy.reshape(y_test[i],(1,n_classes)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
data,numpy.squeeze(np.transpose(data),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
y,numpy.squeeze(y-1),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
H1,"numpy.squeeze(build_hankel(y1[0,:T],nr,nc,T,dim)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
batch_x,"numpy.squeeze(extract_batch_size(X_train,step,batch_size)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
test,"numpy.squeeze(X_test[i,:])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
ridx,"numpy.transpose(np.arange(1,nr+1,1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
Hidx,"numpy.transpose(np.tile(ridx,(nc,1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
ridx,"numpy.transpose(np.arange(1,nr+1,1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
Hidx,"numpy.transpose(np.tile(ridx,(nc,1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
"[U1,s1,_]",numpy.linalg.svd(H1),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
X,scipy.io.loadmat('/Users/angelsrates/Documents/PhD/4thSemester/Project/poles_data2.mat'),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
y,scipy.io.loadmat('/Users/angelsrates/Documents/PhD/4thSemester/Project/poles_y2.mat'),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_11
X,"numpy.concatenate([X1,X2],axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
T,numpy.concatenate([np.zeros(len(X1),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mu_a,numpy.sum(m_N*X_new),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
variational_parameters,numpy.sqrt(np.diag(variational_parameters_square),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
covariance_N_inverse,numpy.linalg.inv(covariance_0),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
covariance_N,numpy.linalg.inv(covariance_N_numpy.linalg.inverse),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
covariance_0_inverse,numpy.linalg.inv(covariance_0),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
states,numpy.array(tc_states),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_67,numpy.array(traj_no_67_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_67,numpy.array(traj_len_67_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_60,numpy.array(traj_no_60_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_60,numpy.array(traj_len_60_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_50,numpy.array(traj_no_50_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_50,numpy.array(traj_len_50_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_40,numpy.array(traj_no_40_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_40,numpy.array(traj_len_40_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_30,numpy.array(traj_no_30_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_30,numpy.array(traj_len_30_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_20,numpy.array(traj_no_20_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_20,numpy.array(traj_len_20_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_10,numpy.array(traj_no_10_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_10,numpy.array(traj_len_10_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
states,numpy.array(sam_states),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_67,numpy.array(traj_no_67_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_67,numpy.array(traj_len_67_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_60,numpy.array(traj_no_60_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_60,numpy.array(traj_len_60_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_50,numpy.array(traj_no_50_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_50,numpy.array(traj_len_50_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_40,numpy.array(traj_no_40_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_40,numpy.array(traj_len_40_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_30,numpy.array(traj_no_30_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_30,numpy.array(traj_len_30_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_20,numpy.array(traj_no_20_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_20,numpy.array(traj_len_20_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_10,numpy.array(traj_no_10_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_10,numpy.array(traj_len_10_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
states,numpy.array(all_states),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_67,numpy.array(traj_no_67_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_67,numpy.array(traj_len_67_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_60,numpy.array(traj_no_60_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_60,numpy.array(traj_len_60_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_50,numpy.array(traj_no_50_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_50,numpy.array(traj_len_50_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_40,numpy.array(traj_no_40_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_40,numpy.array(traj_len_40_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_30,numpy.array(traj_no_30_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_30,numpy.array(traj_len_30_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_20,numpy.array(traj_no_20_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_20,numpy.array(traj_len_20_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_no_10,numpy.array(traj_no_10_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
traj_len_10,numpy.array(traj_len_10_),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
dih_feat_glob,numpy.load('../dih_featurization_glob.npy'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
tc_states,numpy.load('tc_states.npy'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
sam_states,numpy.load('sam_states.npy'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
all_states,numpy.load('all_states.npy'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pixel_values,numpy.squeeze(img.numpy(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_10,CLUSTER_11
clf,sklearn.svm.SVC(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,"sklearn.neural_network.MLPClassifier(solver='lbfgs',alpha=1e-5,hidden_layer_sizes=(5,2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,pandas.DataFrame(),CLUSTER_28,CLUSTER_3,CLUSTER_7,CLUSTER_0,CLUSTER_0
table,pandas.DataFrame(),CLUSTER_28,CLUSTER_3,CLUSTER_7,CLUSTER_0,CLUSTER_0
distances,pandas.DataFrame(model.transform(features),CLUSTER_28,CLUSTER_3,CLUSTER_7,CLUSTER_0,CLUSTER_0
f,"pandas.read_csv(""./hillary-clinton-emails/Emails.csv"",index_col=""Id"")",CLUSTER_28,CLUSTER_3,CLUSTER_7,CLUSTER_0,CLUSTER_0
feature_names,numpy.array(vectorizer.get_feature_names(),CLUSTER_28,CLUSTER_3,CLUSTER_7,CLUSTER_0,CLUSTER_0
feature_sum,"numpy.array(map(int,np.matrix(csr_matrix.sum(features,axis=0)",CLUSTER_28,CLUSTER_3,CLUSTER_7,CLUSTER_0,CLUSTER_0
arr,"numpy.array(data[column_of_data].iloc[best_i[j]].split(""\n"")",CLUSTER_28,CLUSTER_3,CLUSTER_7,CLUSTER_0,CLUSTER_0
model,"sklearn.cluster.KMeans(n_clusters=num_clusters,n_jobs=-1)",CLUSTER_28,CLUSTER_3,CLUSTER_7,CLUSTER_0,CLUSTER_0
t0,time.time(),CLUSTER_28,CLUSTER_3,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(111),CLUSTER_28,CLUSTER_3,CLUSTER_7,CLUSTER_0,CLUSTER_0
X_pca,sklearn.decomposition.TruncatedSVD(n_components=2),CLUSTER_28,CLUSTER_3,CLUSTER_7,CLUSTER_0,CLUSTER_0
iris_data,pandas.read_csv('iris-data.csv'),CLUSTER_8,CLUSTER_10,CLUSTER_9,CLUSTER_0,CLUSTER_0
app_train['Group_DAYS_BIRTH'],"pandas.cut(app_train[""DAYS_BIRTH""]/(365)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
app_train,pandas.read_csv(f_app_train),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
it_array,numpy.array(guesses),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
it_array,numpy.array(guesses_l1_reg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
it_array,numpy.array(guesses_l2_reg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
it_array,numpy.array(guesses_l1_reg),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
it_array,numpy.array(guesses_l1_reg[int(0.9*num_steps),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
CB,"matplotlib.pyplot.colorbar(CS,label=""dataloss"",shrink=0.8,extend='both')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
CB2,"matplotlib.pyplot.colorbar(CS2,label=""regloss"",shrink=0.8,extend='both')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
CS,"matplotlib.pyplot.contour(xmesh,ymesh,loss_mesh,10,cmap=plt.cm.bone)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
CS2,"matplotlib.pyplot.contour(xmesh,ymesh,l1_mesh,10,linestyles='dashed',levels=list(range(5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
CS3,"matplotlib.pyplot.contour(xmesh,ymesh,l2_mesh,10,linestyles='dashed',levels=list(range(5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
CS4,"matplotlib.pyplot.contour(CS,levels=[0.25,0.5],colors='g')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
CS,"matplotlib.pyplot.contour(xmesh,ymesh,loss_mesh,10,cmap=plt.cm.bone)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(10,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(15,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
unregularized,"matplotlib.pyplot.plot(it_array.T[0],it_array.T[1],""o"",color='g')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
l1,"matplotlib.pyplot.plot(it_array.T[0],it_array.T[1],""+"",color='r')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
l2,"matplotlib.pyplot.plot(it_array.T[0],it_array.T[1],""+"",color='b')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
l1,"matplotlib.pyplot.plot(it_array.T[0],it_array.T[1],""+"",color='r')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('../../DSI-CHI-1/lessons/week-07/2.3-pca-lab-1/assets/datasets/votes.csv',index_col=0)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
classes,"pandas.read_csv('../../DSI-CHI-1/lessons/week-07/2.3-pca-lab-1/assets/datasets/votes.csv',index_col=0)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('../../DSI-CHI-1/lessons/week-07/2.3-pca-lab-1/assets/datasets/Airport_operations.csv'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
Pmatrix,numpy.hstack(fit_me),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
Pmatrix,numpy.hstack(fit_me),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
covariance_matrix,numpy.cov(X_standard.T),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
covariance_matrix,numpy.cov(X_standard.T),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"eigenvalues,eigenvectors",numpy.linalg.eig(covariance_matrix),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"eigenvalues,eigenvectors",numpy.linalg.eig(covariance_matrix),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_standard,sklearn.preprocessing.StandardScaler(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_standard,sklearn.preprocessing.StandardScaler(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=8),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=4),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
regular_model,sklearn.cluster.KMeans(2),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pca_model,sklearn.cluster.KMeans(2),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({u'获救':Survived_1,u'未获救':Survived_0})",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({u'获救':Survived_1,u'未获救':Survived_0})",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({u'男性':Survived_m,u'女性':Survived_f})",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(g.count(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(g.count(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({u'有':Survived_cabin,u'无':Survived_nocabin})",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,pandas.DataFrame({'PassengerId':data_test['PassengerId'].as_matrix(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,pandas.DataFrame({'PassengerId':data_test['PassengerId'].as_matrix(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,pandas.DataFrame({'PassengerId':data_test['PassengerId'].as_matrix(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([data_train,dummies_Cabin,dummies_Embarked,dummies_Sex,dummies_Pclass],axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.concat([data_test,dummies_Cabin,dummies_Embarked,dummies_Sex,dummies_Pclass],axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([data_train,dummies_Cabin,dummies_Embarked,dummies_Sex,dummies_Pclass,dummies_Sex_Pclass],axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.concat([data_test,dummies_Cabin,dummies_Embarked,dummies_Sex,dummies_Pclass,dummies_Sex_Pclass],axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Cabin,"pandas.get_dummies(data_train['Cabin'],prefix='Cabin')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Embarked,"pandas.get_dummies(data_train['Embarked'],prefix='Embarked')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Sex,"pandas.get_dummies(data_train['Sex'],prefix='Sex')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Pclass,"pandas.get_dummies(data_train['Pclass'],prefix='Pclass')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Cabin,"pandas.get_dummies(data_test['Cabin'],prefix='Cabin')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Embarked,"pandas.get_dummies(data_test['Embarked'],prefix='Embarked')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Sex,"pandas.get_dummies(data_test['Sex'],prefix='Sex')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Pclass,"pandas.get_dummies(data_test['Pclass'],prefix='Pclass')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Cabin,"pandas.get_dummies(data_train['Cabin'],prefix='Cabin')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Embarked,"pandas.get_dummies(data_train['Embarked'],prefix='Embarked')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Sex,"pandas.get_dummies(data_train['Sex'],prefix='Sex')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Pclass,"pandas.get_dummies(data_train['Pclass'],prefix='Pclass')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Sex_Pclass,"pandas.get_dummies(data_train['Sex_Pclass'],prefix='Sex_Pclass')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Cabin,"pandas.get_dummies(data_test['Cabin'],prefix='Cabin')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Embarked,"pandas.get_dummies(data_test['Embarked'],prefix='Embarked')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Sex,"pandas.get_dummies(data_test['Sex'],prefix='Sex')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Pclass,"pandas.get_dummies(data_test['Pclass'],prefix='Pclass')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Sex_Pclass,"pandas.get_dummies(data_test['Sex_Pclass'],prefix='Sex_Pclass')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_train,"pandas.read_csv(""Train.csv"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_test,"pandas.read_csv(""test.csv"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
origin_data_train,"pandas.read_csv(""Train.csv"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_train,"pandas.read_csv(""Train.csv"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_test,"pandas.read_csv(""test.csv"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
traindf,pandas.read_csv(train_file),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train,numpy.asarray(y_train),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_ages,numpy.zeros(4),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_sizes,"numpy.linspace(.05,1.,20)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_ages[0],numpy.average(df[df['Title']=='Miss']['Age'].dropna(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_ages[1],numpy.average(df[df['Title']=='Mrs']['Age'].dropna(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_ages[2],numpy.average(df[df['Title']=='Mr']['Age'].dropna(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_ages[3],numpy.average(df[df['Title']=='Master']['Age'].dropna(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df.loc[(df.Fare.isnull())&(df.Pclass,"=1),'Fare']=numpy.median(df[df['Pclass']==1]['Fare'].dropna()",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df.loc[(df.Fare.isnull())&(df.Pclass,"=2),'Fare']=numpy.median(df[df['Pclass']==2]['Fare'].dropna()",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df.loc[(df.Fare.isnull())&(df.Pclass,"=3),'Fare']=numpy.median(df[df['Pclass']==3]['Fare'].dropna()",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr,"sklearn.ensemble.RandomForestRegressor(random_state=0,n_estimators=2000,n_jobs=-1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr,"sklearn.ensemble.RandomForestRegressor(random_state=0,n_estimators=2000,n_jobs=-1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
enc,sklearn.preprocessing.OneHotEncoder(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
bagging_clf,"sklearn.ensemble.BaggingRegressor(clf,n_estimators=10,max_samples=0.8,max_features=1.0,bootstrap=True,bootstrap_features=False,n_jobs=-1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,criterion='entropy',max_depth=5,min_samples_split=1,
min_samples_leaf=1,max_features='auto',bootstrap=False,oob_score=False,n_jobs=1,random_state=seed,
verbose=0)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.Pipeline([('clf',clf)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.rand_choice,"random.randint(0,10)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
self.rand_choice,"random.randint(0,10)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
colors_summary,"pandas.pivot_table(colors,values=['id','name','rgb'],index='is_trans',aggfunc='count')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
parts_by_year,"pandas.pivot_table(sets,index='year',values='num_parts',aggfunc='mean')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
colors,pandas.read_csv('datasets/colors.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
sets,pandas.read_csv('datasets/sets.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
self.x,"random.randint(0,width)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
self.y,"random.randint(-height,0)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
self.z,"random.uniform(zmin,zmax)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
train,"pandas.read_csv(""cybersecurity_training.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
np.where(train.values>,numpy.finfo(np.float64),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train[train,=np.inf]=numpy.finfo(np.float64),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_data,test_data,train_label,test_label","sklearn.model_selection.train_test_split(train,label,test_size=0.3,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_linear,sklearn.svm.SVC(kernel='linear'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svm_linear,sklearn.svm.SVC(kernel='linear'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_logistic,"sklearn.linear_model.LogisticRegression(solver=""liblinear"",max_iter=200)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_logistic,"sklearn.linear_model.LogisticRegression(solver=""liblinear"",max_iter=200)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=10),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
neigh,sklearn.neighbors.KNeighborsClassifier(n_neighbors=10),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest,"sklearn.ensemble.RandomForestClassifier(random_state=42,n_estimators=i)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest,"sklearn.ensemble.RandomForestClassifier(random_state=42,n_estimators=i)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=40,whiten=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
frame,pandas.DataFrame(data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
feature_importances,"pandas.DataFrame(model.feature_importances_,index=choosen_cols,columns=['importance'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
solution,"pandas.DataFrame({'Id':test_data.Id,'SalePrice':prediction})",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df1,"pandas.DataFrame({'col1':['2','2','5','adf'],'col2':[2,4,5,6]})",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2,"pandas.DataFrame({'col2':[5,3,6,2,1,563,2]})",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_all,"pandas.concat([df_train,df_test],sort=False)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df3,"pandas.concat([df1,df2],sort=False)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"data[col+""_cat""]",pandas.factorize(data[col]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['Neighborhood_cat'],pandas.factorize(data.Neighborhood),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['LotShape_cat'],pandas.factorize(data.LotShape),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['BldgType_cat'],pandas.factorize(data.BldgType),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['HouseStyle_cat'],pandas.factorize(data.HouseStyle),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data['MSZoning_cat'],pandas.factorize(data.MSZoning),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv('data/train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('data/test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub_train,"pandas.read_csv(""data/train.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=110,max_leaf_nodes=max_leaf,n_jobs=-1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.RandomForestRegressor(n_estimators=110,max_leaf_nodes=1050,n_jobs=-1,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
file_list_full,"os.listdir(""SimilarityCheck/"")",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
preds,numpy.asarray(preds),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
X,numpy.zeros((len(sentences),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
y,numpy.zeros((len(sentences),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
x,"numpy.zeros((1,maxlen,len(chars)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
exp_preds,numpy.exp(preds),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
preds,numpy.log(preds),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
cwd,os.getcwd(),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
start_index,"random.randint(0,len(text)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
result,"pandas.read_csv('output2.txt',sep='\t',header=None)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
result,"pandas.read_csv('output-04-13-2.txt',sep='\t',header=None)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
result,"pandas.read_csv('output-04-13-Q3-2.txt',sep='\t',header=None)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
da,"pandas.read_csv('what_is_this_answer.txt',header=None,sep='\t')",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
sel,sklearn.feature_selection.VarianceThreshold(threshold=(.8*(1-.8),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,"numpy.array([X1,X2,X3])",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
posts,"sklearn.datasets.fetch_20newsgroups(subset='train',categories=categories,
shuffle=True,random_state=42,
remove=('headers','footers','quotes')",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
chi2score,"sklearn.feature_selection.chi2(X,posts.target)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=20,max_depth=4)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
lasso,sklearn.linear_model.Lasso(alpha=.3),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
ridge,sklearn.linear_model.Ridge(alpha=10),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
acc,"sklearn.metrics.r2_score(Y_test,rf.predict(X_test)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
shuff_acc,"sklearn.metrics.r2_score(Y_test,rf.predict(X_t)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
scores,collections.defaultdict(list),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
rfe,"sklearn.feature_selection.RFE(lr,n_features_to_select=1)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
data_df,"pandas.DataFrame(X,columns=headers)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
class_df,"pandas.DataFrame(y,columns=[""Class""])",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
iris_df,"pandas.concat([data_df,class_df],axis=1)",CLUSTER_20,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
toronto_df,"pandas.DataFrame(l,columns=columns)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
html_content,requests.get(url),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.array([9,7,11,13,2,4,5,5])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,"numpy.array([2.2,10.2,14.7,5.9,4.9,11.1,10.5])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
c,"numpy.array([11/4,21/2,51/2,31/4,21/2])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
mean_vec1,"numpy.array([0,0,0])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
cov_mat1,"numpy.array([[1,0,0],[0,1,0],[0,0,1]])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
mean_vec2,"numpy.array([1,1,1])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
cov_mat2,"numpy.array([[1,0,0],[0,1,0],[0,0,1]])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
all_data,"numpy.concatenate((class1,class2)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
chunk_df,"pandas.DataFrame(list(six_chunk_coll.find({},{'_id':0})",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
prior_df,pandas.DataFrame(data_with_priors),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
params,json.load(f),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_norm,y_norm)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
ridge_cv,"sklearn.linear_model.RidgeCV(alphas=[5,10,20,30],cv=20)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
regr,"sklearn.ensemble.RandomForestRegressor(n_estimators=50,max_depth=2)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler_y,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
crossed,"sklearn.model_selection.cross_validate(regr,X_train,y_train.flatten()",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
r,requests.get(info_address),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_7
img_r,requests.get(img_address),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_7
response,"requests.post('http://rdc28.cwb.gov.tw/TDB/ctrl_typhoon_list/get_typhoon_list_table',data=payload)",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_7
img_response,"requests.post('http://rdc28.cwb.gov.tw/TDB/ctrl_typhoon_list/rtn_typhoon_product',data=payload,headers=headers)",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_7
img_response,"requests.post('http://rdc28.cwb.gov.tw/TDB/ctrl_typhoon_list/rtn_typhoon_product',data=payload,headers=headers)",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_7
img_dic,json.loads(img_str),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_7
find_del_td,"re.search(""<tdwidth=.*?>"",i)",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_7
find_del_id,"re.search('<aclass=""typhoon_id""value=.*?>',i)",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_7
new_end_time,"datetime.datetime.strptime(end_time,""%Y-%m-%d%H:%M"")",CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_7
new_end_time+,datetime.timedelta(hours=12),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_7
df,"pandas.concat([df,categories],axis=1)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.merge(messages,categories,on=""id"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
messages,"pandas.read_csv(""messages.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
categories,"pandas.read_csv(""categories.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
writer,"pandas.ExcelWriter('CH_from_lead_pg3_1st_order_to_pg4.xlsx',engine='xlsxwriter')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
crosstab_ko_count_net,"pandas.crosstab(cm2_pg3_to_pg4['LEAD_PG3_1ST_ORD'],cm2_pg3_to_pg4['OSP_KO_COUNT_NET'],
values=cm2_pg3_to_pg4['SCM_N_ORDER_NR'],
aggfunc='count')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
crosstab_pg3_to_pg4_orders,"pandas.crosstab(next_orders['LEAD_PG3_1ST_ORD'],next_orders['LEAD_PG4_NAME'],
values=next_orders['SCM_N_ORDER_NR'],
aggfunc='count')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
crosstab_pg3_to_pg4_cm2,"pandas.crosstab(cm2_pg3_to_pg4['LEAD_PG3_1ST_ORD'],cm2_pg3_to_pg4['OSP_KO_COUNT_NET'],
values=cm2_pg3_to_pg4['SCM_D_FINANCE_CM2'],
aggfunc='sum')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
crosstab_pg3_to_pg4_perc_cm2,"pandas.crosstab(next_orders['LEAD_PG3_1ST_ORD'],next_orders['LEAD_PG4_NAME'],
values=next_orders['SCM_D_FINANCE_CM2'],
aggfunc='sum')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pg3_orders_count_net_cm2,"pandas.crosstab(cm2_pg3_to_pg4_subset['LEAD_PG3_1ST_ORD'],cm2_pg3_to_pg4_subset['OSP_KO_COUNT_NET'],
values=cm2_pg3_to_pg4_subset['REL_CM2'],
aggfunc='mean')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
crosstab_pg3_to_pg4_rel_cm2,"pandas.crosstab(next_orders_subset['LEAD_PG3_1ST_ORD'],next_orders_subset['LEAD_PG4_NAME'],
values=next_orders_subset['REL_CM2'],
aggfunc='mean')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ord_cm2_crosstab_pg4,"pandas.crosstab(next_orders_subset['LEAD_PG3_1ST_ORD'],next_orders_subset['LEAD_PG4_NAME'],
values=next_orders_subset['REL_CM2'],
aggfunc=[len,np.mean])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('ch_food_n_acc_1st_orders.dsv',sep=';',low_memory=False)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pg3,"pandas.read_sql(query,con=conn)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pg4,"pandas.read_sql(query,con=conn)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data['ORDER_DATETIME'],"pandas.to_datetime(data['TDT_T_KEY_ORDER_DATE']+''+data['THR_C_KEY_ORDER_HOUR']+':00',
format=""%d/%m/%y%H:%M:%S"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data['TDT_T_KEY_ORDER_DATE'],"pandas.to_datetime(data['TDT_T_KEY_ORDER_DATE'],format=""%d/%m/%y"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
row_sums,"numpy.append(row_sums,row_sum)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
row_sums,"numpy.append(row_sums,row_sum)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
row_sums,"numpy.append(row_sums,row_sum)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('banknotes.csv',sep='\t')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
norm_rv,"scipy.stats.norm(0,1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
norm_rv,"scipy.stats.norm(0,1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
norm_rv,"scipy.stats.norm(0,1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
norm_rv,"scipy.stats.norm(0,1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.25,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model_1,sklearn.linear_model.LogisticRegression(random_state=1),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model_2,sklearn.linear_model.LogisticRegression(random_state=1),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
score_1,"sklearn.metrics.accuracy_score(y_test,ypred_1)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
score_2,"sklearn.metrics.accuracy_score(y_test,ypred_2)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
principalDf,"pandas.DataFrame(data=principalComponents,columns=['principalcomponent1','principalcomponent2'])",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
old_data,"pandas.concat([old_data,new_data],axis=1)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_22,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_group,pandas.DataFrame(group),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
combine,"pandas.merge(ref,ann)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ann,"pandas.read_csv('annotations/var_drug_ann.tsv',sep='\t',error_bad_lines=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ref,"pandas.read_table('23andme_v5_hg19_ref.txt',header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
income,"pandas.read_csv('https://github.com/albahnsen/PracticalMachineLearningClass/raw/master/datasets/income.csv.zip',index_col=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('https://github.com/ghuiber/churn/raw/master/data/churn.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg3,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg5,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg2,"sklearn.linear_model.SGDRegressor(max_iter=30000,tol=None)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg4,"sklearn.linear_model.SGDRegressor(max_iter=30000,tol=None)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg6,"sklearn.linear_model.SGDRegressor(max_iter=30000,tol=None)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_validation,Y_train,Y_validation","sklearn.model_selection.train_test_split(X,Y,test_size=validation_size,random_state=seed)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,"sklearn.linear_model.LogisticRegression(solver='liblinear',C=1e9)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
embedding,numpy.array([float(val),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
docs,numpy.array(df.review),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
UPDATED_GLOVE_MODEL[word],"numpy.array([0]*glove_model[""basketball""].shape[0],dtype=np.float64)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
EMBEDDING_MATRIX,"numpy.array(EMBEDDING_MATRIX,dtype=np.float32)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
text,"re.sub(""<[^>]*>"","""",text)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
text,"re.sub(strip_special_chars,"""",text.lower()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
text,"re.sub("""","""",text)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
strip_special_chars,"re.compile(""[^A-Za-z0-9]+"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""/home/kuldeep.singh/clarity_social_media_analysis/imdb_movie_data_project/movie_data.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""wine-data.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
pca,sklearn.decomposition.PCA(n_components=5),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
pca5acc,"sklearn.model_selection.cross_val_score(model,x,y,scoring=""accuracy"")",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
pca2acc,"sklearn.model_selection.cross_val_score(model,x,y,scoring=""accuracy"")",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
nopcacc,"sklearn.model_selection.cross_val_score(model,data.iloc[:,1:11],y,scoring=""accuracy"")",CLUSTER_1,CLUSTER_10,CLUSTER_10,CLUSTER_0,CLUSTER_1
self.program,collections.defaultdict(lambda:'0'),CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
self.program,collections.defaultdict(lambda:'0'),CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
self.map,collections.defaultdict(int),CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
salaries,"scipy.stats.lognorm(1,loc=20,scale=25)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
means,numpy.array([dist.rvs(size=sample_size),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"plt.plot(Xs,sp.stats.norm.pdf(Xs,scale",numpy.sqrt(dist.var(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
stderr,numpy.sqrt(salaries.var(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Xs,numpy.linspace(means.min(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Xs,"numpy.linspace(mu-3*stderr,mu+3*stderr,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Xs,"numpy.linspace(-3,3,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Xs,numpy.linspace(sample_salaries.mean(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"ys,bins,_","matplotlib.pyplot.hist(X,bins=20,normed=True)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
d,"numpy.concatenate([df.Dist_ma,df.Dist_pa])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
d,"numpy.concatenate([df.Dist_ma,df.Dist_pa])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
delx,"numpy.concatenate([delx_ma,delx_pa])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dely,"numpy.concatenate([dely_ma,dely_pa])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
delalt,"numpy.concatenate([delalt_ma,delalt_pa])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
d,"numpy.concatenate([df.Dist_ma,df.Dist_pa])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
min_score_ma,"numpy.minimum(df.Score_phase1_Ma,df.Score_phase1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
min_score_pa,"numpy.minimum(df.Score_phase1_Pa,df.Score_phase1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"plt.hist(dists,bins","numpy.linspace(0,2000,100)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,1000,200)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0,1000,50)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0,600,100)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(-1000,1000,80)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0,2000,100)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0,800,80)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"dens_dis,_","numpy.histogram(dists,bins=bins,density=False)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"dens_count,_","numpy.histogram(counts,bins=bins,density=False)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dist_mat,"numpy.linalg.norm(coords[:,None]-coords,axis=2)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_p,"pandas.concat([df_p,df_t])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df_p,df_geo,left_on=""Kid"",right_on=""PlantID_final"",how='left',suffixes=('','_kid')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df,df_geo,left_on=""Ma"",right_on=""PlantID_final"",how='left',suffixes=('','_Ma')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df,df_geo,left_on=""Pa"",right_on=""PlantID_final"",how='left',suffixes=('','_Pa')",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_p,"pandas.read_csv(in_fld+fls[0],sep="","",index_col=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_t,"pandas.read_csv(in_fld+fls[i],sep="","",index_col=0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_geo,"pandas.read_csv(in_fld+geo_fl,sep="","")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
f,scipy.stats.gaussian_kde(df.Dist_pa),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
g,scipy.stats.gaussian_kde(df.Dist_ma),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
h,scipy.stats.gaussian_kde(d),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
crimes_percap,pandas.DataFrame(geo_crimes.OBJECTID_left.value_counts(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(tracts_crimes[['FAGI_MEDIAN_2010','crimes_percap']])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(tracts_crimes[myvars]),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
crimes,pandas.read_csv('https://opendata.arcgis.com/datasets/fdacfbdda7654e06a161352247d3a2f0_34.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x=""FAGI_MEDIAN_2010"",y=""crimes_percap"",data=tracts_crimes)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.regplot(x=""FAGI_MEDIAN_2010"",y=""crimes_percap"",data=tracts_crimes)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
leg,"matplotlib.pyplot.legend(loc='lowerright',ncol=2)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(filename,sep="""",header=None)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
response,requests.get(source_url),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
response,requests.get('https://newsapi.org/v1/sources?language=en'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
tfidf,pandas.DataFrame(columns=['tfidf']),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
kmeans_df,"pandas.DataFrame(tsne_kmeans,columns=['x','y'])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
data,pandas.read_csv('./news.csv'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
counter,collections.Counter(alltokens),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
colormap,"numpy.array([""
""
""
""

plot_kmeans=bp.figure(plot_width=700,plot_height=600,title=""KMeansclusteringofthenews"",
tools=""pan,wheel_zoom,box_zoom,reset,hover,previewsave"",
x_axis_type=None,y_axis_type=None,min_border=1)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
svd,"sklearn.decomposition.TruncatedSVD(n_components=50,random_state=0)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
kmeans_model,"sklearn.cluster.MiniBatchKMeans(n_clusters=num_clusters,init='k-means++',n_init=1,
init_size=1000,batch_size=1000,verbose=False,max_iter=1000)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
data,pandas.DataFrame(list_records),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
img_array,numpy.array(img),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
li,"pandas.read_csv(""../data/listings.csv"")",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
calendar,"pandas.read_csv(""../data/calendar.csv"")",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
reviews,"pandas.read_csv(""../data/reviews_head100.csv"")",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
listings_key,"pandas.read_csv(""listings_key.csv"")",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
listings_10,"pandas.read_csv(""listings_cleaned_head10.csv"")",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
listings,"pandas.read_csv(""listings_head10.csv"",low_memory=False)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
ncr,"pandas.read_csv(""tps/Neighbourhood_Crime_Rates_Boundary_File_.csv"")",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
calendar_new['date'],pandas.to_datetime(calendar_new['date']),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
matchObj,"re.match(r"".*\b([0-9]+)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
j,json.loads(fp.read(),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dindex,numpy.where(drifters['id'].astype(int),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dindex,numpy.where(drifters['id'].astype(int),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dindex,numpy.where(drifters['id'].astype(int),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dindex,numpy.where(drifters['id'].astype(int),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,axs","matplotlib.pyplot.subplots(3,3,figsize=(17,13)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(8,10)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
date,datetime.datetime.fromordinal(int(t),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
drifters,scipy.io.loadmat('/ocean/shared/drifters/data/L2/drifters_L2.mat'),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
file_data,"pandas.read_csv(""product.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_data1,pandas.read_csv('../DataFactory/FixedPlaintext/FPFK.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_dataT1,pandas.read_csv('../DataFactory/FixedPlaintext/TS1.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_dataT2,pandas.read_csv('../DataFactory/FixedPlaintext/TS2.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_dataT3,pandas.read_csv('../DataFactory/FixedPlaintext/TS3.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_dataT4,pandas.read_csv('../DataFactory/FixedPlaintext/TS4.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_dataT5,pandas.read_csv('../DataFactory/FixedPlaintext/TS5.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_dataT6,pandas.read_csv('../DataFactory/FixedPlaintext/TS6.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_dataT7,pandas.read_csv('../DataFactory/FixedPlaintext/TS7.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_dataT8,pandas.read_csv('../DataFactory/FixedPlaintext/TS8.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dataset,"numpy.loadtxt(""./warehouse/pima-indians-diabetes.csv"",delimiter="","")",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
res,"pandas.DataFrame(data={'item':[col],'number':[(comp!=truth[0])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
tmp,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
wrongcount_v1,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
wrongcount_v2,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
numbers,pandas.Series(list(range(28),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.read_fwf(data,colSpec,
names=['tuid','last','first',
'middle','unnamed1','unnamed2',
'unnamed3','soar','ncorrect','item'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
features,numpy.array(features),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
concat_image,numpy.concatenate([np.asarray(t),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
x,"numpy.expand_dims(x,axis=0)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
pca,sklearn.decomposition.PCA(n_components=300),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_3
D,numpy.empty((len(L),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
x1,"numpy.log10(df_primers[""umis_IGH""])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
x2,"numpy.log10(df_primers[""umis_IGKL""])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0,22,23)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0,10,11)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
x,"numpy.nanmin(D,axis=0)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
df_primers,pandas.DataFrame(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
df_primers,"pandas.concat([df_primers,df_temp])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"df_primers[""ValidIGHTDRprimers""]","pandas.isnull(df_primers[""IGH_pcr1_failure_cause""])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"df_primers[""ValidIGKLTDRprimers""]","pandas.isnull(df_primers[""IGKL_pcr1_failure_cause""])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"df_primers[""ValidIGHcloningprimers""]","pandas.isnull(df_primers[""IGH_pcr2_failure_cause""])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"df_primers[""ValidIGKLcloningprimers""]","pandas.isnull(df_primers[""IGKL_pcr2_failure_cause""])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
df_temp,"pandas.read_csv(infile,header=0,index_col=0)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
array,numpy.asarray(array),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
e01,"numpy.reshape(e01,(size,size)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
e0,"numpy.reshape(e0,(size,size)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
e1,"numpy.reshape(e1,(size,size)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"x1,y1","numpy.meshgrid(x,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"X,Y","numpy.meshgrid(x,y)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,numpy.unique(np.asarray(x),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.unique(np.asarray(y),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,numpy.unique(np.asarray(x),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.unique(np.asarray(y),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
f,matplotlib.pyplot.figure(figsize=size),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
train,"pandas.read_csv(os.path.join(DATA_DIR,'train.csv')",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
validation,"pandas.read_csv(os.path.join(DATA_DIR,'validation.csv')",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
train['payprice'],numpy.log(train['payprice']),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(train,col=""click"")",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
g,"seaborn.FacetGrid(train,col=""click"")",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.kdeplot(set1.log_payprice,set1.log_bidprice,
cmap=""Reds"",shade=True,shade_lowest=False)",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,"seaborn.kdeplot(set2.log_payprice,set2.log_bidprice,
cmap=""Blues"",shade=True,shade_lowest=False)",CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,seaborn.kdeplot(np.log(set2.slotwidth),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax,seaborn.kdeplot(np.log(set1.slotwidth),CLUSTER_14,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
target_probas,numpy.array([([1.]ifobs[2]<0else[0.]),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
discounted,numpy.array(rewards),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
history1,numpy.array(history1),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
history2,numpy.array(history2),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
ifdoneornp.all(self._state,"=numpy.array([3,3])",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
self._state,"numpy.zeros(2,dtype=np.int32)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
obs,"numpy.zeros((4,4)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
obs,"numpy.zeros((4,4)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
self.buffer,"numpy.empty(max_size,dtype=np.object)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
flat_rewards,numpy.concatenate(all_discounted_rewards),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
Q_values,"numpy.full((3,3)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
Q_values,"numpy.full((3,3)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
Q_values,"numpy.full((3,3)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
best_next_actions,"numpy.argmax(next_Q_values,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
best_next_actions,"numpy.argmax(next_Q_values,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
img,"numpy.clip(img/150,0,1)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
"Q_values[s,a]","numpy.sum([
transition_probabilities[s][a][sp]
*(rewards[s][a][sp]+gamma*np.max(Q_prev[sp])",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
"Q_values[s,a]","numpy.sum([
transition_probabilities[s][a][sp]
*(rewards[s][a][sp]+gamma*np.max(Q_prev[sp])",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
current_frame_delta,"numpy.maximum(obs[...,3]-obs[...,:3].mean(axis=-1)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
fig,matplotlib.pyplot.figure(),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
patch,matplotlib.pyplot.imshow(frames[0]),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
"fig,axes","matplotlib.pyplot.subplots(1,2,figsize=(10,4)",CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
replay_memory,collections.deque(maxlen=2000),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
replay_memory,collections.deque(maxlen=2000),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
replay_memory,collections.deque(maxlen=2000),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
mem,collections.deque(maxlen=1000000),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_3,CLUSTER_7
df1,pandas.read_csv('train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2,pandas.read_csv('test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
quebec_model_conf,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
quebec_model_death,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ontario_model_conf,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ontario_model_death,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
alberta_model_conf,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
alberta_model_death,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
british_columbia_model_conf,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
british_columbia_model_death,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nova_scotia_model_conf,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nova_scotia_model_death,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xtx,"pandas.DataFrame(xtx,returns.index,returns.index)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
optim_etf_weights,"pandas.DataFrame(raw_optim_etf_weights_per_date.T,returns.index,returns.columns)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
all_rebalance_weights_df,pandas.DataFrame(np.array(all_rebalance_weights),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
xty,"pandas.Series(xty,returns.index)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(wiki_file_path),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
raw_optim_etf_weights_per_date,"numpy.tile(raw_optim_etf_weights,(len(returns.columns)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
datelist,"pandas.date_range(start=startdatum,end=enddatum)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tickslist,"pandas.date_range(start=startdatum,end=enddatum,freq='1D')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
datelist,"pandas.date_range(start=startdatum,end=enddatum)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tickslist,"pandas.date_range(start=startdatum,end=enddatum,freq=frequenz)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.read_sql(""SELECTid,Titel,Body,Kategorie,Datum,QuelleFROMArtikelWHEREQuelle='Reuters'"",conn,index_col=""id"",parse_dates=True)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
datelist,pandas.to_datetime((datelist),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
datelist,pandas.to_datetime((datelist),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_pos,numpy.arange(len(names),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
json,json.dumps(personenliste),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
json,json.dumps(personenkompakt),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
json,json.dumps(datumliste),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
json,json.dumps(datumkompakt),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
c,collections.Counter(item),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
c,collections.Counter(data),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],X_train.shape[1],1)",CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_test,"numpy.reshape(X_test,(X_test.shape[0],X_test.shape[1],1)",CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
Y_train,"numpy.reshape(Y_train,(Y_train.shape[0],1)",CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
prediction,"pandas.DataFrame(Y_prediction,columns=['item_cnt_month'])",CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
database,"pandas.merge(test,train,on=['item_id','shop_id'],how='left')",CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv(""../input/sales_train.csv"")",CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""../input/test.csv"")",CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
sample_submit,"pandas.read_csv(""../input/sample_submission.csv"")",CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
sc,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_29,CLUSTER_12,CLUSTER_12,CLUSTER_0,CLUSTER_0
app_train,pandas.read_csv(f_app),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,"numpy.array(tuples,dtype=dtype)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
result,numpy.zeros(G.order(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
H,"numpy.zeros((N,N)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pi,numpy.zeros((N),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
newPi,numpy.zeros((N),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tenBest,"numpy.sort(a,order='score')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df1,pandas.DataFrame(getURL),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df_ticker,pandas.DataFrame(df1['ticker']['markets']),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
getURL,requests.get('https://api.cryptonator.com/api/full/btc-usd'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
response,"requests.delete(full_url,params=data,headers=headers,verify=False)",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
image,"scipy.ndimage.gaussian_filter(image,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('../Data/starbucks.csv',index_col='Date',parse_dates=True)",CLUSTER_5,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
correct_idx,numpy.where(pred_y==test_y),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
incorrect_idx,numpy.where(pred_y!=test_y),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
idx,numpy.where(test_y==n),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
classifier,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
start_time,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
end_time,time.time(),CLUSTER_10,CLUSTER_6,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_train_ohe,numpy.array([tran_y(train_labels[i]),CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
y_test_ohe,numpy.array([tran_y(test_labels[i]),CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
shown_images,"numpy.array([[1.,1.]])",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
y_ohe,numpy.zeros(10),CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
result,"numpy.frombuffer(content,dtype=np.uint8,offset=offset)",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
X_train,numpy.concatenate([arr[np.newaxis]forarrinX_train]),CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
X_test,numpy.concatenate([arr[np.newaxis]forarrinX_test]),CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
X_train,numpy.concatenate([arr[np.newaxis]forarrinX_train]),CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
X_test,numpy.concatenate([arr[np.newaxis]forarrinX_test]),CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
dist,numpy.sum((X[i]-shown_images),CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
X_train2,"numpy.vstack((X_train,z)",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
Y_train3,"numpy.vstack((Y_train2,Y_train2[samplelist])",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
X_train2,"numpy.vstack((X_train2,z)",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
Y_train3,"numpy.vstack((Y_train3,Y_train2[samplelist])",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
"X_svd,s,v","numpy.linalg.svd(sample_images,full_matrices=False)",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=2,init='pca',random_state=0)",CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
t0,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
t0,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
t1,time.time(),CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(111),CLUSTER_7,CLUSTER_12,CLUSTER_11,CLUSTER_0,CLUSTER_0
b1,"numpy.zeros((n_h,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
b2,"numpy.zeros((n_y,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
parameters['b'+str(l)],"numpy.zeros((layer_dims[l],1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,"numpy.dot(W,A)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dA_prev,"numpy.dot(W.T,dZ)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cost,numpy.squeeze(cost),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
q_50,numpy.percentile(app_train[~app_train['AMT_ANNUITY'].isnull(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
app_train,pandas.read_csv(f_app),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
value_most,scipy.stats.mode(app_train[~app_train['AMT_ANNUITY'].isnull(),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
input_data,numpy.array(int_text[:(n_batches*(batch_size*seq_length),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
target_data,numpy.array(int_text[1:(n_batches*(batch_size*seq_length),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
batches,"numpy.array(list(zip(inputs,targets)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,numpy.argmax(probabilities),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
inputs,"numpy.split(inputs,n_batches,-1)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
targets,"numpy.split(targets,n_batches,-1)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
word_counts,collections.Counter(text),CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
year_pred,numpy.array([[year%year_from]]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
year_pred,numpy.array([[year%year_from]]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,numpy.asarray(raw_data.index-raw_data.index[0]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pred_concat,"numpy.concatenate([pred_2008_values,pred_2012_values],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(predictions_year,index=raw_data_index)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(predictions_year,index=raw_data_index)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,"pandas.read_csv('data/TrainingSet.csv',index_col=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,"pandas.read_csv('data/SubmissionRows.csv',index_col=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(14,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipe,"sklearn.pipeline.Pipeline([('poly',PolynomialFeatures(degree=degree)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipe,"sklearn.pipeline.Pipeline([('poly',PolynomialFeatures(degree=degree)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
predictions_year,collections.defaultdict(list),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
predictions_year,collections.defaultdict(list),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
titanic_train,"pandas.read_csv(""https://s3-us-west-2.amazonaws.com/cursocienciadatos/train.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pokemon,"pandas.read_csv(""https://s3-us-west-2.amazonaws.com/cursocienciadatos/pokemon.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
countriesDF,"pandas.read_csv(""https://s3-us-west-2.amazonaws.com/cursocienciadatos/countries+of+the+world.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
vgsales,"pandas.read_csv(""https://s3-us-west-2.amazonaws.com/cursocienciadatos/vgsales.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
escuela,"pandas.read_csv(""https://s3-us-west-2.amazonaws.com/cursocienciadatos/escuela.csv"",sep="";"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
r,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
r,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
file_path,os.getenv('ABS_PATH'),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.arange(-99,99,2)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
positive_correlations,numpy.array(raw_correlations),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
raw_correlations,numpy.zeros(50),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
negative_correlations,numpy.flip(positive_correlations),CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
correlations,"numpy.append(negative_correlations,positive_correlations)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(12,5)",CLUSTER_23,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(15,15)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ind,numpy.arange(ring.shape[0]),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
new_rings,numpy.array(new_rings),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"x,y",numpy.where(distances<dr),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"xp,yp",numpy.where(close_ps<dr),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ring,"numpy.vstack([ring,new_rings])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ind,"numpy.delete(ind,d_ring)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
n,"numpy.arange(0,30,2)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
s,numpy.arange(13),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
r,numpy.arange(36),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,numpy.array(mylist),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
y,"numpy.array([4,5,6])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
m,"numpy.array([[7,8,9],[10,11,12]])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
z,"numpy.array([y,y**2])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
z,"numpy.array([y,y**2])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,"numpy.array([-4,-2,1,3,5])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
p,"numpy.ones([2,3],int)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
o,"numpy.linspace(0,4,9)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
e,numpy.diag(y),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
f,numpy.diag(o),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
job_title1,pandas.DataFrame(data1['job_title']),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data1,pandas.read_csv('US.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jt,"re.sub(""-"","""",jt)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jt,"re.sub(u""\\(.*?\\)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jt,"re.sub('/','_',jt)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jt,"re.sub('&','',jt)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jt,"re.sub('\+','',jt)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jt,"re.sub('\$','',jt)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jt,"re.sub('\
jt=re.sub('/*','',jt)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jt,"re.sub('®','',jt)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jt,"re.sub('/*','',jt)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jt,"re.sub('•','',jt)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jt,"re.sub('%','',jt)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jt,"re.sub('@','',jt)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jt,"re.sub(',','',jt)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub(""-"","""",jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub(u""\\(.*?\\)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('\n','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub(r'[a-zA-z]+://[^\s]*','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('[0-9]','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('\+','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('&','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('/','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('\$','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('\
jd=re.sub('/*','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('®','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('/*','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('•','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('%','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('@','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('!','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('\?','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub(':','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub('·','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
jd,"re.sub(';','',jd)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
automobile_data,"pandas.read_csv('datasets/Automobile_data.csv',
na_values='?')",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(6,6)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=30),CLUSTER_22,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=3),CLUSTER_22,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_22,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_22,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"(trainX,testX,trainY,testY)","sklearn.model_selection.train_test_split(data,labels,test_size=0.33,random_state=42)",CLUSTER_22,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(data,labels,test_size=0.33,random_state=42)",CLUSTER_22,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.array(li),CLUSTER_22,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(l),CLUSTER_22,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
_classifier,sklearn.svm.SVC(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,"numpy.zeros((num_rows*num_cols,3)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
Y,"numpy.zeros((num_rows*num_cols,3)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X,"numpy.zeros((num_rows*num_cols-num_past_inform,3*num_past_inform)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
Y,"numpy.zeros((num_rows*num_cols-num_past_inform,3)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp_df,"pandas.DataFrame(grouped[""Deaths""])",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp_df,"pandas.DataFrame(grouped[""Recovered""])",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp_df,"pandas.DataFrame(grouped[""Confirmed""])",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp_df,"pandas.DataFrame(grouped[""Deaths""])",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp_df,"pandas.DataFrame(grouped[""Recovered""])",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
temp_df,"pandas.DataFrame(grouped[""Confirmed""])",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(time_series_files_list[0]),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(item),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xticks(rotation=90),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xticks(rotation=90),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
_,matplotlib.pyplot.xticks(rotation=90),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
death_model,"sklearn.linear_model.LinearRegression(fit_intercept=True,normalize=True,copy_X=True,n_jobs=None)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
death_model,"sklearn.linear_model.LinearRegression(fit_intercept=True,normalize=True,copy_X=True,n_jobs=None)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
confirm_model,"sklearn.linear_model.LinearRegression(fit_intercept=True,normalize=True,copy_X=True,n_jobs=None)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
recover_model,"sklearn.linear_model.LinearRegression(fit_intercept=True,normalize=True,copy_X=True,n_jobs=None)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
death_model,"sklearn.linear_model.LinearRegression(fit_intercept=True,normalize=True,copy_X=True,n_jobs=None)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
confirm_model,"sklearn.linear_model.LinearRegression(fit_intercept=True,normalize=True,copy_X=True,n_jobs=None)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
recover_model,"sklearn.linear_model.LinearRegression(fit_intercept=True,normalize=True,copy_X=True,n_jobs=None)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
death_model,"sklearn.linear_model.LinearRegression(fit_intercept=False,normalize=True,copy_X=True,n_jobs=None)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
confirm_model,"sklearn.linear_model.LinearRegression(fit_intercept=False,normalize=True,copy_X=True,n_jobs=None)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
model,"sklearn.linear_model.LinearRegression(fit_intercept=False,normalize=True,copy_X=True,n_jobs=None)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X[:,0].reshape(-1,1)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X[:,1].reshape(-1,1)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X[:,2].reshape(-1,1)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y[:,0],test_size=0.2,random_state=42)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y[:,1],test_size=0.2,random_state=42)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y[:,2],test_size=0.2,random_state=42)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_,Y[:,0],test_size=0.2,random_state=42)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_,Y[:,1],test_size=0.2,random_state=42)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y[:,0],test_size=0.2,random_state=42)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_model_mse,sklearn.metrics.mean_squared_error(death_model.predict(X),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_model_mse,sklearn.metrics.mean_squared_error(death_model.predict(X_train),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_model_mse,sklearn.metrics.mean_squared_error(death_model.predict(X_test),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_model_mse,sklearn.metrics.mean_squared_error(confirm_model.predict(X_train),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_model_mse,sklearn.metrics.mean_squared_error(confirm_model.predict(X_test),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_model_mse,sklearn.metrics.mean_squared_error(recover_model.predict(X_train),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_model_mse,sklearn.metrics.mean_squared_error(recover_model.predict(X_test),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_model_mse,sklearn.metrics.mean_squared_error(death_model.predict(X_train),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_model_mse,sklearn.metrics.mean_squared_error(death_model.predict(X_test),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_model_mse,sklearn.metrics.mean_squared_error(confirm_model.predict(X_train),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_model_mse,sklearn.metrics.mean_squared_error(confirm_model.predict(X_test),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_model_mse,sklearn.metrics.mean_squared_error(recover_model.predict(X_train),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_model_mse,sklearn.metrics.mean_squared_error(recover_model.predict(X_test),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_model_mse,sklearn.metrics.mean_squared_error(death_model.predict(X_train),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_model_mse,sklearn.metrics.mean_squared_error(death_model.predict(X_test),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_model_mse,sklearn.metrics.mean_squared_error(confirm_model.predict(X_train),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_model_mse,sklearn.metrics.mean_squared_error(confirm_model.predict(X_test),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_model_mse,sklearn.metrics.mean_squared_error(model.predict(X_train),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_model_mse,sklearn.metrics.mean_squared_error(model.predict(X_test),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
poly_features,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
poly_features,sklearn.preprocessing.PolynomialFeatures(degree=2),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pca_reduction,sklearn.decomposition.PCA(n_components=1),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pca_reduction,sklearn.decomposition.PCA(n_components=1),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pca_reduction,sklearn.decomposition.PCA(n_components=1),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pca_reduction,sklearn.decomposition.PCA(n_components=1),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pca_reduction,sklearn.decomposition.PCA(n_components=1),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pca_reduction,sklearn.decomposition.PCA(n_components=1),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pca_reduction,sklearn.decomposition.PCA(n_components=1),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
freq,collections.Counter([x[4]forxindg.dataset]),CLUSTER_5,CLUSTER_0,CLUSTER_5,CLUSTER_9,CLUSTER_7
direction,"random.choice([-1,1])",CLUSTER_5,CLUSTER_0,CLUSTER_5,CLUSTER_9,CLUSTER_7
x,"random.randint(self.length,self.width-self.length)",CLUSTER_5,CLUSTER_0,CLUSTER_5,CLUSTER_9,CLUSTER_7
y,"random.randint(self.length,self.height-self.length)",CLUSTER_5,CLUSTER_0,CLUSTER_5,CLUSTER_9,CLUSTER_7
vertical,"random.randint(0,2)",CLUSTER_5,CLUSTER_0,CLUSTER_5,CLUSTER_9,CLUSTER_7
sd,numpy.array(self.direction(),CLUSTER_5,CLUSTER_0,CLUSTER_5,CLUSTER_9,CLUSTER_7
ad,numpy.array(self.appleDirection(),CLUSTER_5,CLUSTER_0,CLUSTER_5,CLUSTER_9,CLUSTER_7
direction,numpy.argmax(pred),CLUSTER_5,CLUSTER_0,CLUSTER_5,CLUSTER_9,CLUSTER_7
datasetdf,"pandas.DataFrame(dg.dataset,columns=features)",CLUSTER_5,CLUSTER_0,CLUSTER_5,CLUSTER_9,CLUSTER_7
data,"pandas.read_csv(""SnakegameDataset2_1000_1000.csv"",index_col=0)",CLUSTER_5,CLUSTER_0,CLUSTER_5,CLUSTER_9,CLUSTER_7
logprior,numpy.log(D_pos/D_neg),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
loglikelihood[word],numpy.log(p_w_pos/p_w_neg),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
train_y,numpy.append(np.ones(len(train_pos),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
test_y,numpy.append(np.ones(len(test_pos),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
sol,"scipy.optimize.minimize(objective,(9.2,5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
sol,"scipy.optimize.minimize(profit,[60,15],
constraints=[{'type':'eq','fun':c1},
{'type':'eq','fun':c2},
{'type':'ineq','fun':c3},
{'type':'ineq','fun':c4},
{'type':'ineq','fun':c5}])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-3,3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
item,json.dumps(json_item(p),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
item,json.dumps(json_item(p),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
xs,"numpy.arange(-10,10,0.1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(fname,parse_dates=[4],infer_datetime_format=True)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(projection=ccrs.PlateCarree(),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(9,5)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(facecolor=background_color),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
leg,"matplotlib.pyplot.legend(['Afterheatingin650C','Afterheatingin550C','Beforeheating'],fontsize=10)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
X_train_folds,"numpy.array(numpy.array_split(X_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_folds,"numpy.array(numpy.array_split(y_train,num_folds)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
accuracies_mean,numpy.array([np.mean(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
accuracies_std,numpy.array([np.std(v),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train_dat,numpy.concatenate(X_train_folds[combinat]),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_train_dat,numpy.concatenate(y_train_folds[combinat]),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
idxs,numpy.flatnonzero(y_train==y),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
val_accuracy,numpy.mean(y_val_predict==y_train_folds[i]),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_train,"numpy.reshape(X_train,(X_train.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X_test,"numpy.reshape(X_test,(X_test.shape[0],-1)",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
num_correct,numpy.sum(y_test_pred==y_test),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_one,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
difference,"numpy.linalg.norm(dists-dists_two,ord='fro')",CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
tic,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
toc,time.time(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
kor,pandas.read_csv('kor_words.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
kor,pandas.read_csv('clean_kor.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
kor_xls,"pandas.read_excel('kor_words.xls',index_col=None)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2,3],[4,5,7]])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,"numpy.array([[1,2,3],[4,5,6],[7,8,9]])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
a,"numpy.array([[1,3,5],[3,4,5],[7,8,9]])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
b,"numpy.array([[2,3,4],[5,6,7],[8,9,5]])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'x':v1,'y':v2})",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df1,"pandas.DataFrame({'x1':[10,20,30,11],'y1':[11,12,13,14]},index=['a','b','c','d'],dtype=float)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(data,columns=['x1','x2','x3','x4'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df1,"pandas.DataFrame(data,columns=['x1','x2','x3','x4'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,"pandas.Series([1,2,3,4,5,6])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,"pandas.Series([1,2,3,4,5,6],index=['x','y','z','a','b','c'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
numOfFrames,numpy.array(numOfFrames),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
beh,numpy.array(vals[keys[0][0]][:][:]),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
numOfFrames,numpy.array(numOfFrames),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
FDFF,"numpy.zeros([F.shape[0],F.shape[1],F.shape[2]])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
DaysLength,"numpy.zeros([1,len(imaging_days)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
WMF,"numpy.zeros([F.shape[0],nframes,sum(performance==0.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
WMFneu,"numpy.zeros([F.shape[0],nframes,sum(performance==0.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
WMFbas,"numpy.zeros([F.shape[0],nframes,sum(performance==0.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
WMspks,"numpy.zeros([F.shape[0],nframes,sum(performance==0.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
WMspksbas,"numpy.zeros([F.shape[0],nframes,sum(performance==0.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
WMDFF,"numpy.zeros([F.shape[0],nframes,sum(performance==0.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
AMF,"numpy.zeros([F.shape[0],nframes,sum(performance==1.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
AMFneu,"numpy.zeros([F.shape[0],nframes,sum(performance==1.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
AMFbas,"numpy.zeros([F.shape[0],nframes,sum(performance==1.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
AMspks,"numpy.zeros([F.shape[0],nframes,sum(performance==1.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
AMspksbas,"numpy.zeros([F.shape[0],nframes,sum(performance==1.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
AMDFF,"numpy.zeros([F.shape[0],nframes,sum(performance==1.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
WHF,"numpy.zeros([F.shape[0],nframes,sum(performance==2.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
WHFneu,"numpy.zeros([F.shape[0],nframes,sum(performance==2.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
WHFbas,"numpy.zeros([F.shape[0],nframes,sum(performance==2.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
WHspks,"numpy.zeros([F.shape[0],nframes,sum(performance==2.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
WHspksbas,"numpy.zeros([F.shape[0],nframes,sum(performance==2.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
WHDFF,"numpy.zeros([F.shape[0],nframes,sum(performance==2.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
AHF,"numpy.zeros([F.shape[0],nframes,sum(performance==3.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
AHFneu,"numpy.zeros([F.shape[0],nframes,sum(performance==3.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
AHFbas,"numpy.zeros([F.shape[0],nframes,sum(performance==3.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
AHspks,"numpy.zeros([F.shape[0],nframes,sum(performance==3.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
AHspksbas,"numpy.zeros([F.shape[0],nframes,sum(performance==3.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
AHDFF,"numpy.zeros([F.shape[0],nframes,sum(performance==3.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
CRF,"numpy.zeros([F.shape[0],nframes,sum(performance==4.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
CRFneu,"numpy.zeros([F.shape[0],nframes,sum(performance==4.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
CRFbas,"numpy.zeros([F.shape[0],nframes,sum(performance==4.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
CRspks,"numpy.zeros([F.shape[0],nframes,sum(performance==4.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
CRspksbas,"numpy.zeros([F.shape[0],nframes,sum(performance==4.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
CRDFF,"numpy.zeros([F.shape[0],nframes,sum(performance==4.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
FAF,"numpy.zeros([F.shape[0],nframes,sum(performance==5.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
FAFneu,"numpy.zeros([F.shape[0],nframes,sum(performance==5.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
FAFbas,"numpy.zeros([F.shape[0],nframes,sum(performance==5.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
FAspks,"numpy.zeros([F.shape[0],nframes,sum(performance==5.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
FAspksbas,"numpy.zeros([F.shape[0],nframes,sum(performance==5.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
FADFF,"numpy.zeros([F.shape[0],nframes,sum(performance==5.0)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
CellsSign,"numpy.zeros([1,6])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
maxPoints,"numpy.zeros([1,len(CellIndexes[d])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
maxPoints,"numpy.zeros([1,len(CellIndexes[d])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
maxPoints,"numpy.zeros([1,len(CellIndexes[d])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
maxPoints,"numpy.zeros([1,len(CellIndexes[d])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
maxPoints,"numpy.zeros([1,dayData.shape[0]])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
Fbas,"numpy.empty([F.shape[0],F.shape[1]])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
spksbas,"numpy.empty([spks.shape[0],spks.shape[1]])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
mu,"numpy.mean(CRresh,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
MeanBaseline,numpy.mean(Baseline),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
meanTrials,"numpy.mean(dayData,axis=2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
mu,"numpy.mean(CRresh,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
meanTrials,"numpy.mean(dayData,axis=2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
meanTrials,"numpy.mean(dayData,axis=2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
mu,"numpy.mean(CRresh,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
meanTrials,"numpy.mean(dayData,axis=2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
meanTrials,"numpy.mean(dayData,axis=2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
meanTrials,"numpy.mean(dayData,axis=2)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
CRresh,"numpy.reshape(CR,[CR.shape[0],-1])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
CRresh,"numpy.reshape(CR,[CR.shape[0],-1])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
CRresh,"numpy.reshape(CR,[CR.shape[0],-1])",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
sigma,numpy.std(np.concatenate((Fsub[Fsub>np.mean(Fsub),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
sigma,numpy.std(np.concatenate((SpksSub[SpksSub>np.mean(SpksSub),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
sigma,"numpy.std(CRresh,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
StdBaseline,numpy.std(Baseline),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
sigma,"numpy.std(CRresh,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
sigma,"numpy.std(CRresh,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
"DaysLength[0,i]",numpy.sum(numOfFrames),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
"FDFF[i,:,j]","numpy.divide(F[i,:,j]-MeanBaseline,StdBaseline)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
bas,"numpy.polyval(p,np.arange(len(test)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
bas,"numpy.polyval(p,np.arange(len(test)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
p,numpy.polyfit(np.array(xts),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
p,numpy.polyfit(np.array(xts),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
FAll,numpy.load(F_path),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
FneuAll,numpy.load(Fneu_path),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
spksAll,numpy.load(spks_path),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
iscell,numpy.load(iscell_path),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
frames,scipy.io.loadmat(frames_path),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
beh,scipy.io.loadmat(behav_path),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
frames,scipy.io.loadmat(frames_path),CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
"[s,p]","scipy.stats.ranksums(base,test)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
dayData,"scipy.stats.zscore(AllData[d]['WM']['WMspks'],axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_9,CLUSTER_2,CLUSTER_1
x,"numpy.expand_dims(x,axis=0)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
self.start_time,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"tstat,pval","scipy.stats.ttest_1samp(x1,0)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"tstat,pval","scipy.stats.ttest_1samp(x1,1)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"tstat,pval","scipy.stats.ttest_ind(x1,x2)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.array(range(20),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,numpy.array([min(x),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame([[1,2,3.5],[2,2.4,3.1],[3,1.8,2.5]],columns=['a','b','c'])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(zip(x,y)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame(zip(x,y,z)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
rehab_table,"pandas.read_table(url,delimiter="","")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""train.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(d[1:],columns=d[0])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_pop,"pandas.DataFrame(d[1:],columns=d[0])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_ethinic,"pandas.DataFrame(d[1:],columns=d[0])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_river,pandas.DataFrame(d),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_lake,pandas.DataFrame(d),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_elev,pandas.DataFrame(d),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
feats,"pandas.Series(data=estimator.feature_importances_,index=df.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
LEncoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimator,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data3,"pandas.concat((data3.loc[:,[""zip_code"",""mean"",""sale_price""]],data3.loc[:,""AdoptABasket"":])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data1,"pandas.read_csv(""https://serv.cusp.nyu.edu/~lw1474/ADS_Data/session07/data1.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,"pandas.read_csv(""https://serv.cusp.nyu.edu/~lw1474/ADS_Data/session07/original_with_duplicates_noid.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data3,"pandas.read_csv(""https://serv.cusp.nyu.edu/~lw1474/ADS_Data/session06/example4.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data4,"pandas.read_csv(""https://serv.cusp.nyu.edu/~lw1474/ADS_Data/session07/original_with_errors_noid.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
estimate_array,"numpy.array([[p1,p1],[p0,p0]])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
group_totals,"numpy.array([[group_total],[group_total]])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
estimate_array,numpy.array(estimate_array*group_totals),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
success_array,"numpy.array(callback_df.loc['Success',['Black','White']])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
failure_array,"numpy.array(callback_df.loc['Failure',['Black','White']])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
actual_array,"numpy.array([success_array,failure_array])",CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
chi2,numpy.sum(chi2),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
white_std,numpy.sqrt(white_std/group_total),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
black_std,numpy.sqrt(black_std/group_total),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
sigma_diff,numpy.sqrt(var_diff),CLUSTER_1,CLUSTER_1,CLUSTER_7,CLUSTER_0,CLUSTER_1
X_features,"pandas.concat([data['body_len'],data['punct%'],pd.DataFrame(X_tfidf.toarray()",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X_count_feat,"pandas.concat([data['body_len'],data['punct%'],pd.DataFrame(X_count.toarray()",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""SMSSpamCollection.tsv"",sep='\t')",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
tokens,"re.split('\W+',text)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rf_kfold,sklearn.ensemble.RandomForestClassifier(n_jobs=-1),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestClassifier(n_estimators=50,max_depth=20,n_jobs=-1)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rf1,"sklearn.ensemble.RandomForestClassifier(n_estimators=n_est,max_depth=depth,n_jobs=-1)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rf2,sklearn.ensemble.RandomForestClassifier(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
k_fold,sklearn.model_selection.KFold(n_splits=5),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X_features,data['label'],test_size=0.2)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gs,"sklearn.model_selection.GridSearchCV(rf2,param,cv=5,n_jobs=-1)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
clf,"sklearn.model_selection.GridSearchCV(gb2,param,cv=5,n_jobs=-1)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gb,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=est,max_depth=max_depth,learning_rate=lr)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
gb2,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_int,"pandas.merge(title_basics,title_ratings,on='tconst',how='inner')",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,"pandas.merge(df_int,title_crew,on='tconst',how='inner')",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
title_ratings,"pandas.read_csv(""https://datasets.imdbws.com/title.ratings.tsv.gz"",delimiter='\t',date_parser='python',keep_default_na=True,na_values=['\\N'])",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
title_crew,"pandas.read_csv(""https://datasets.imdbws.com/title.crew.tsv.gz"",delimiter='\t',date_parser='python',keep_default_na=True,na_values=['\\N'])",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
title_basics,"pandas.read_csv(""https://datasets.imdbws.com/title.basics.tsv.gz"",delimiter='\t',date_parser='python',keep_default_na=True,na_values=['\\N'])",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
dfTemp,pandas.read_pickle('my_df.pickle'),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
"x_remaining,X_test,y_remaining,y_test","sklearn.model_selection.train_test_split(
X,y,test_size=ratio_test)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(
x_remaining,y_remaining,test_size=ratio_val_adjusted)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
mlb,sklearn.preprocessing.MultiLabelBinarizer(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
ohe,"sklearn.preprocessing.OneHotEncoder(sparse=True,handle_unknown='ignore')",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
cur_time,time.time(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
training_time,time.time(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
cur_time,time.time(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
testing_time,time.time(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
cur_time,time.time(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
score_time,time.time(),CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
scores,"sklearn.model_selection.cross_validate(clf,X_val_ohe,y_val,scoring=scoring,cv=2)",CLUSTER_29,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start_time,time.time(),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
start_time,time.time(),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
start_time,time.time(),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
start_time,time.time(),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
start_time,time.time(),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
start_time,time.time(),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
start_time,time.time(),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
start_time,time.time(),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
positives,numpy.array(positives),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
pos_label,numpy.array(pos_label),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
prob_sign,numpy.array([sample[1]forsampleinprobabilites]),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
predictions,numpy.array(predictions),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
bboxes_sorted,numpy.array(bboxes_sorted),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
coords_sorted,numpy.array(coords_sorted),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
prob_sign,numpy.array([sample[1]forsampleinprobabilities]),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
predictions,numpy.array(predictions),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
bboxes_sorted,numpy.array(bboxes_sorted),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
coords_sorted,numpy.array(coords_sorted),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
self.x1,numpy.zeros(self.x1.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
self.x1p,numpy.zeros(self.x1p.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
self.x2,numpy.zeros(self.x2.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
self.x2p,numpy.zeros(self.x2p.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
self.x3,numpy.zeros(self.x3.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
self.x3p,numpy.zeros(self.x3p.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
self.x1,numpy.zeros(self.x1.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
self.x1p,numpy.zeros(self.x1p.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
self.x2,numpy.zeros(self.x2.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
self.x2p,numpy.zeros(self.x2p.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
self.x3,numpy.zeros(self.x3.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
self.x3p,numpy.zeros(self.x3p.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
"dim0,dim1,dim2,dim3",numpy.indices(curr_inds.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
"dim0,dim1,dim3",numpy.indices(curr_inds.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
"dim0,dim1,dim2,dim3",numpy.indices(curr_inds.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
"dim0,dim1,dim3",numpy.indices(curr_inds.shape),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
maxima,"numpy.amax(numpy.amax(im_re,4)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
im_re,"numpy.amax(im_re,4)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
maxima,"numpy.amax(numpy.amax(im_re,4)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
im_re,"numpy.amax(im_re,4)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
curr_inds,"numpy.argmax(im_re,4)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
curr_inds,"numpy.argmax(im_re,2)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
curr_inds,"numpy.argmax(im_re,4)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
curr_inds,"numpy.argmax(im_re,2)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
prediction,numpy.argmax(self.x6),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
indexes,numpy.argsort(prob_sign),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
indexes,numpy.argsort(prob_sign),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
im_re,"numpy.reshape(images,(k,int(m/2)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
inds,numpy.reshape(np.array(range(im_re.size),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
im_re,"numpy.reshape(images,(k,m/2,2,n/2,2)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
inds,numpy.reshape(np.array(range(im_re.size),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
result[i],numpy.exp(probs[i]),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
loaded,numpy.load('/tmp/lenet5_detection.npz'),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
loaded,numpy.load('/tmp/lenet5.npz'),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
loaded,numpy.load('/tmp/ml_detection.npz'),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
loaded,numpy.load('/tmp/ml_classification.npz'),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
loaded,numpy.load('/tmp/classification.npz'),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
loaded,numpy.load('/tmp/dl_detection.npz'),CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,(ax1)","matplotlib.pyplot.subplots(1,1,figsize=(20,8)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,(ax1)","matplotlib.pyplot.subplots(1,1,figsize=(20,8)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,(ax1)","matplotlib.pyplot.subplots(1,1,figsize=(20,8)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,(ax1)","matplotlib.pyplot.subplots(1,1,figsize=(20,8)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,(ax1)","matplotlib.pyplot.subplots(1,1,figsize=(20,8)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,(ax1)","matplotlib.pyplot.subplots(1,1,figsize=(20,8)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
"fig,(ax1)","matplotlib.pyplot.subplots(1,1,figsize=(20,8)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
linear_svc_hog,"sklearn.svm.LinearSVC(penalty='l2',loss='squared_hinge',dual=True,tol=0.0001,C=1.0,multi_class='ovr',
fit_intercept=True,intercept_scaling=1,class_weight=None,verbose=1,random_state=None,
max_iter=1000)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
linear_svc_hog,"sklearn.svm.LinearSVC(penalty='l2',loss='squared_hinge',dual=True,tol=0.0001,C=1.0,multi_class='ovr',
fit_intercept=True,intercept_scaling=1,class_weight=None,verbose=1,random_state=None,
max_iter=1000)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
svc_hog,"sklearn.svm.SVC(C=1.0,kernel='rbf',degree=3,gamma='auto',coef0=0.0,shrinking=True,probability=True,
tol=0.001,cache_size=200,class_weight=None,verbose=True,max_iter=-1,decision_function_shape='ovr',
random_state=None)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
pca,"sklearn.decomposition.PCA(n_components=1000,copy=True,whiten=False,svd_solver='auto',tol=0.0,iterated_power='auto',random_state=None)",CLUSTER_29,CLUSTER_0,CLUSTER_11,CLUSTER_2,CLUSTER_5
X_train,"numpy.vstack([np.mean(w[doc],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_val,"numpy.vstack([np.mean(w[doc],axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
words_train,numpy.vstack(w[words_in_data]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"text_train_sub,text_val,y_train_sub,y_val","sklearn.model_selection.train_test_split(
text_train,y_train,stratify=y_train,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
reviews_train,"sklearn.datasets.load_files(""../data/aclImdb/train/"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(C=.1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr_w2v,sklearn.linear_model.LogisticRegression(C=100),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
words_train,sklearn.manifold.TSNE(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_scaled,"pandas.DataFrame(s_feat,columns=df.columns[:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('KNN_Project_Data'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=23),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"lon2d,lat2d","numpy.meshgrid(lons_cyclic,lats)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
offset,datetime.timedelta(hours=48),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cbar,"matplotlib.pyplot.colorbar(cs,orientation='horizontal',shrink=0.5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sb,"numpy.zeros((self.nFeatures,self.nFeatures)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sw,"numpy.zeros((self.nFeatures,self.nFeatures)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sw+,numpy.identity(self.nFeatures),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.mu,"numpy.mean(self.X,axis=0)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.reshape(y,[X.shape[0],1])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
b,"numpy.percentile(y,50)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
f,numpy.vectorize(lambdax:0ifx<belse1),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
self.allclasses,numpy.unique(y),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(filename,sep=',',header=None)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
silhouette[i],"sklearn.metrics.silhouette_score(data_train,output_train[ifold])",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"data_train,data_test,trgt_train,trgt_test","sklearn.model_selection.train_test_split(x_train,y_train,test_size=0.0909)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=i),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
pos,numpy.arange(len(np.unique(best_trgt_train),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
intra_mean,"numpy.zeros([n_clusters,1])",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Dkj,"numpy.zeros([n_clusters,n_clusters])",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
intra_cluster,"numpy.zeros([max_clusters,1])",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
f_out,"numpy.zeros([max_clusters,1])",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
silhouette,"numpy.zeros([max_clusters,1])",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
DB_index,"numpy.zeros([max_clusters,1])",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
output_train,"numpy.zeros((n_folds,2000)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
output_test,"numpy.zeros((n_folds,200)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
accuracy_train,"numpy.zeros((n_folds,)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
accuracy_test,"numpy.zeros((n_folds,)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
most_freq,numpy.zeros(i),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
most_freq,numpy.zeros(n_clusters),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
most_freq,numpy.zeros(n_clusters),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
freq,"numpy.zeros([n_clusters,len(np.unique(best_trgt_train)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x_train_new,"numpy.concatenate((x_train_new,x_train_i)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y_train_new,"numpy.concatenate((y_train_new,y_train_i)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x_test_new,"numpy.concatenate((x_test_new,x_test_i)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
y_test_new,"numpy.concatenate((y_test_new,y_test_i)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
most_freq[icluster],numpy.argmax(np.bincount(labels),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
most_freq[icluster],numpy.argmax(np.bincount(labels),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
most_freq[icluster],numpy.argmax(np.bincount(labels),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
mean_data,numpy.mean(data),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
mean_train,numpy.mean(accuracy_train),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
mean_test,numpy.mean(accuracy_test),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
n_clusters,numpy.shape(cluster_centers),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
n_clusters,numpy.shape(cluster_centers),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
n_clusters,numpy.shape(cluster_centers),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
n_clusters,numpy.shape(cluster_centers),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"freq[icluster,iclass]",numpy.sum(labels==iclass),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
err_train,numpy.sqrt(np.var(accuracy_train),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
err_test,numpy.sqrt(np.var(accuracy_test),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
classes,numpy.unique(y_train),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
classes,numpy.unique(y_test),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
classes,numpy.unique(y_train),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
id_clusters,numpy.unique(output_train[ifold]),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
id_clusters,numpy.unique(best_output_train),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
id_clusters,numpy.unique(best_output_train),CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
squared_norm_diff,"numpy.linalg.norm(cluster_centers[k]-mean_data,ord=2)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
intra_mean[k],"numpy.linalg.norm(dist,ord=2)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
dist_clusters,"numpy.linalg.norm(cluster_centers[k_cluster]-cluster_centers[j_cluster],ord=2)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(20,5)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6.5)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_29,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
testdata,pandas.DataFrame(source),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
source,"pandas.DataFrame([
{'country':'GreatBritain','animal':'cattle'},
{'country':'GreatBritain','animal':'cattle'},
{'country':'GreatBritain','animal':'cattle'},
{'country':'GreatBritain','animal':'pigs'},
{'country':'GreatBritain','animal':'pigs'},
{'country':'GreatBritain','animal':'sheep'},
{'country':'GreatBritain','animal':'sheep'},
{'country':'GreatBritain','animal':'sheep'},
{'country':'GreatBritain','animal':'sheep'},
{'country':'GreatBritain','animal':'sheep'},
{'country':'GreatBritain','animal':'sheep'},
{'country':'GreatBritain','animal':'sheep'},
{'country':'GreatBritain','animal':'sheep'},
{'country':'GreatBritain','animal':'sheep'},
{'country':'GreatBritain','animal':'sheep'},
{'country':'UnitedStates','animal':'cattle'},
{'country':'UnitedStates','animal':'cattle'},
{'country':'UnitedStates','animal':'cattle'},
{'country':'UnitedStates','animal':'cattle'},
{'country':'UnitedStates','animal':'cattle'},
{'country':'UnitedStates','animal':'cattle'},
{'country':'UnitedStates','animal':'cattle'},
{'country':'UnitedStates','animal':'cattle'},
{'country':'UnitedStates','animal':'cattle'},
{'country':'UnitedStates','animal':'pigs'},
{'country':'UnitedStates','animal':'pigs'},
{'country':'UnitedStates','animal':'pigs'},
{'country':'UnitedStates','animal':'pigs'},
{'country':'UnitedStates','animal':'pigs'},
{'country':'UnitedStates','animal':'pigs'},
{'country':'UnitedStates','animal':'sheep'},
{'country':'UnitedStates','animal':'sheep'},
{'country':'UnitedStates','animal':'sheep'},
{'country':'UnitedStates','animal':'sheep'},
{'country':'UnitedStates','animal':'sheep'},
{'country':'UnitedStates','animal':'sheep'},
{'country':'UnitedStates','animal':'sheep'}
])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(url),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data+,numpy.arange(side_length),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.array(df['hour'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y1,numpy.array(df['day'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y2,numpy.array(df['SO2'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y3,numpy.array(df['NO2'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y4,numpy.array(df['PM2.5'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y5,numpy.array(df['PM10'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.array(df['TEMP']),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.array(df['hour'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y1,numpy.array(df['PM10'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y2,numpy.array(df['SO2'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y3,numpy.array(df['NO2'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y4,numpy.array(df['PM2.5'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.array(df['hour'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y1,numpy.array(df['SO2'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y2,numpy.array(df['NO2'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y3,numpy.array(df['PM2.5'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y4,numpy.array(df['PM10'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
z_line,numpy.array(df['hour'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_line,numpy.array(df['SO2'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_line,numpy.array(df['NO2'].head(21),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.array(df['SO2'].head(20),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.array(df['NO2'].head(20),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,numpy.array(df['SO2'].head(20),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data+,numpy.reshape(np.arange(side_length),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_points,numpy.cos(z_points),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_line,numpy.cos(z_line),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_points,numpy.cos(z_points),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_points,numpy.sin(z_points),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_line,numpy.sin(z_line),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_points,numpy.sin(z_points),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
z_line,"numpy.linspace(0,15,1000)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.axes(projection=""3d"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.axes(projection=""3d"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.axes(projection=""3d"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(10,8)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax1,"matplotlib.pyplot.subplot2grid((5,2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax2,"matplotlib.pyplot.subplot2grid((5,2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax3,"matplotlib.pyplot.subplot2grid((5,2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax4,"matplotlib.pyplot.subplot2grid((5,2)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.stripplot(x=df['year'],y=df['NO2'].head(20)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dt,"pandas.read_csv(""../input/q_1.csv"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.prod,"random.randint(1,5)",CLUSTER_10,CLUSTER_5,CLUSTER_5,CLUSTER_0,CLUSTER_1
t,time.time(),CLUSTER_10,CLUSTER_5,CLUSTER_5,CLUSTER_0,CLUSTER_1
t2,time.time(),CLUSTER_10,CLUSTER_5,CLUSTER_5,CLUSTER_0,CLUSTER_1
t,time.time(),CLUSTER_10,CLUSTER_5,CLUSTER_5,CLUSTER_0,CLUSTER_1
t2,time.time(),CLUSTER_10,CLUSTER_5,CLUSTER_5,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv('creditcard.csv',sep=',')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
count_classes,"pandas.value_counts(data['Class'],sort=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2)","matplotlib.pyplot.subplots(2,1,sharex=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2)","matplotlib.pyplot.subplots(2,1,sharex=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
g,seaborn.heatmap(data[top_corr_features].corr(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
oof,numpy.zeros(len(df_train),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
predictions,numpy.zeros(len(df_test),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
oof,numpy.zeros(len(df_train),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
predictions,numpy.zeros(len(df_test),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
feature_importance_df,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
fold_importance_df,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model_without_outliers,"pandas.DataFrame({""card_id"":df_test[""card_id""].values})",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
feature_importance_df,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
fold_importance_df,pandas.DataFrame(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_outlier_prob,"pandas.DataFrame({""card_id"":df_test[""card_id""].values})",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
outlier_id,"pandas.DataFrame(df_outlier_prob.sort_values(by='target',ascending=False)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
feature_importance_df,"pandas.concat([feature_importance_df,fold_importance_df],axis=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
feature_importance_df,"pandas.concat([feature_importance_df,fold_importance_df],axis=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv('../input/predicting-outliers-to-improve-your-score/train_clean.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('../input/predicting-outliers-to-improve-your-score/test_clean.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_train,pandas.read_csv('../input/predicting-outliers-to-improve-your-score/train_clean.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df_test,pandas.read_csv('../input/predicting-outliers-to-improve-your-score/test_clean.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
best_submission,pandas.read_csv('../input/predicting-outliers-to-improve-your-score/3.695.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
folds,"sklearn.model_selection.StratifiedKFold(n_splits=5,shuffle=True,random_state=2333)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
folds,"sklearn.model_selection.KFold(n_splits=5,shuffle=True,random_state=15)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
car_df,"pandas.read_csv(""cars-dataset.csv"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=test_size,random_state=seed)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.cluster.KMeans(n_clusters=num_clusters,n_init=10,random_state=10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
final_model,"sklearn.cluster.KMeans(n_clusters=4,n_init=10,random_state=10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
linreg,sklearn.linear_model.LinearRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
coins,"numpy.array(np.random.uniform(0,1.,size=(toss,N)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features_1,numpy.array(([[1]]*N),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features_2,"numpy.array((np.random.uniform(-1,1.,size=(N,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
function_f_points,"numpy.array((np.random.uniform(-1,1.,size=(2,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
random_points_out_sample_pre,"numpy.array((np.random.uniform(-1,1.,size=(1000,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features_1,numpy.array(([[1]]*N),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features_2,"numpy.array((np.random.uniform(-1,1.,size=(N,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
function_f_points,"numpy.array((np.random.uniform(-1,1.,size=(2,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features_1,numpy.array([[1]]*N),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features_2,"numpy.array(np.random.uniform(-1.,1.,size=(N,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features_1,numpy.array([[1]]*N),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features_2,"numpy.array(np.random.uniform(-1.,1.,size=(N,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features_1,numpy.array([[1]]*N),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
out_sample,"numpy.array(np.random.uniform(-1.,1.,size=(N,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
W,numpy.dot(np.linalg.pinv(features),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
W,numpy.dot(np.linalg.pinv(features),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
weights,numpy.dot(np.linalg.pinv(features),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
weights,numpy.dot(np.linalg.pinv(features_new),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
weights,numpy.dot(np.linalg.pinv(out_sample_new),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
output,"numpy.sign(features_2[:,0]*features_2[:,0]+features_2[:,1]*features_2[:,1]-0.6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
predictions,"numpy.sign(np.dot(features,weights)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
output,"numpy.sign(features_2[:,0]*features_2[:,0]+features_2[:,1]*features_2[:,1]-0.6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
out_sample_output,"numpy.sign(out_sample[:,0]*out_sample[:,0]+out_sample[:,1]*out_sample[:,1]-0.6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
out_sample_predictions,"numpy.sign(np.dot(out_sample_new,weights)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features,"numpy.hstack((features_1,features_2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
random_points_out_sample,numpy.hstack((np.array(([[1]]*1000),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features,"numpy.hstack((features_1,features_2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features,"numpy.hstack((features_1,features_2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,"numpy.hstack((features,[[i]foriinoutput_new])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
features_new,"numpy.hstack((features_1,features_new_1,features_new_2,features_new_3,features_new_4,features_new_5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
out_sample_new,"numpy.hstack((features_1,out_sample_new_1,out_sample_new_2,out_sample_new_3,out_sample_new_4,out_sample_new_5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
output_new,numpy.copy(output),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
output_new,numpy.copy(output),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
out_sample_output_new,numpy.copy(out_sample_output),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
misclassified_point,random.choice(misclassified_points),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"df_train,df_test","sklearn.model_selection.train_test_split(
data,test_size=0.2,random_state=42)",CLUSTER_1,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
human_list,pandas.read_table(human_list_f),CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
mouse_list,pandas.read_table(mouse_list_f),CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,axarr","matplotlib.pyplot.subplots(figsize=(1.4,2)",CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,axarr","matplotlib.pyplot.subplots(figsize=(1.4,2)",CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
order,"order,color=seaborn.color_palette(""Set2"")",CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
order,"order,color=seaborn.color_palette(""Set2"")",CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
order,"order,color=seaborn.color_palette(""Set2"")",CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
order,"order,color=seaborn.color_palette(""Set2"")",CLUSTER_20,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
sp500['Log_ret_1w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_2w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_3w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_4w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_8w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_12w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_16w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_20w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_24w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_28w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_32w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_36w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_40w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_44w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_48w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_52w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_56w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_60w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_64w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_68w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_72w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_76w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_80w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_1w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_2w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_3w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_4w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_8w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_12w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_16w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_20w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_24w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_28w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_32w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_36w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_40w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_44w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_48w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_52w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_56w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_60w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_64w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_68w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_72w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_76w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Vol_80w'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_1w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_2w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_3w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_4w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_8w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_12w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_16w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_20w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_24w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_28w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_32w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_36w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_40w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_44w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_48w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_52w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_56w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_60w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_64w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_68w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_72w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_76w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Volume_80w'],pandas.Series(sp500['Volume']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Return_label'],pandas.Series(sp500['Log_ret_1d']),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pvt_1_b,pandas.pivot_table(pd.DataFrame(tuned_model_1_b.cv_results_),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Label'],"numpy.where(sp500['Return_label']>0,1,0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,numpy.zeros_like(corr),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,numpy.zeros_like(corr),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,numpy.zeros_like(corr),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp500['Log_ret_1d'],numpy.log(sp500['Close']/sp500['Close'].shift(1),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
heat,"seaborn.heatmap(corr,ax=ax,mask=mask,square=True,linewidths=0.2,cmap='Blues_r')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
heat,"seaborn.heatmap(corr,ax=ax,mask=mask,vmax=0.5,square=True,linewidths=0.2,cmap='Blues_r')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
heat,"seaborn.heatmap(corr,ax=ax,mask=mask,vmax=0.5,square=True,linewidths=0.2,cmap='Blues_r')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax_1_b,"seaborn.heatmap(pvt_1_b,cmap=""Blues"")",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"heat_fig,ax","matplotlib.pyplot.subplots(1,1,figsize=(9,6)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"heat_fig,(ax)","matplotlib.pyplot.subplots(1,1,figsize=(9,6)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"heat_fig,(ax)","matplotlib.pyplot.subplots(1,1,figsize=(9,6)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
alpha_r_3_b,"scipy.stats.uniform(loc=0.00001,scale=0.0001)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
l1_ratio_r_3_b,"scipy.stats.uniform(loc=0,scale=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start_sp,"datetime.datetime(1980,1,1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
end_sp,"datetime.datetime(2019,2,28)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline_b,sklearn.pipeline.Pipeline(steps_b),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tscv,sklearn.model_selection.TimeSeriesSplit(n_splits=n_splits),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_r_3_b,"sklearn.model_selection.RandomizedSearchCV(pipeline_b,
hyperparameters_r_3_b,
n_iter=20,
random_state=42,
cv=tscv,
verbose=verbose,
n_jobs=-1,
scoring=scoring_b,
refit=metric_b,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_g_1_b,"sklearn.model_selection.GridSearchCV(estimator=pipeline_b,
param_grid=hyperparameters_g_1_b,
cv=tscv,
verbose=0,
n_jobs=-1,
scoring=scoring_b,
refit=metric_b,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_1_lstm,"sklearn.model_selection.GridSearchCV(estimator=clf_1_lstm,
param_grid=hyperparameter_1_lstm,
n_jobs=1,
cv=tscv,
scoring=scoring_lstm,
refit=True,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_g_2_b,"sklearn.model_selection.GridSearchCV(estimator=pipeline_b,
param_grid=hyperparameters_g_2_b,
cv=tscv,
verbose=1,
n_jobs=-1,
scoring=scoring_b,
refit=metric_b,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_2_lstm,"sklearn.model_selection.GridSearchCV(estimator=clf_2_lstm,
param_grid=hyperparameter_2_lstm,
n_jobs=-1,
cv=tscv,
scoring=scoring_lstm,
refit=True,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_3_lstm,"sklearn.model_selection.GridSearchCV(estimator=clf_3_lstm,
param_grid=hyperparameters_3_lstm,
n_jobs=-1,
cv=tscv,
scoring=scoring_lstm,
refit=True,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_g_4_b,"sklearn.model_selection.GridSearchCV(estimator=pipeline_b,
param_grid=hyperparameters_g_4_b,
cv=tscv,
verbose=verbose,
n_jobs=-1,
scoring=scoring_b,
refit=metric_b,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_4_lstm,"sklearn.model_selection.GridSearchCV(estimator=clf_4_lstm,
param_grid=hyperparameter_4_lstm,
n_jobs=-1,
cv=tscv,
scoring=scoring_lstm,
refit=True,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_g_5_b,"sklearn.model_selection.GridSearchCV(estimator=pipeline_b,
param_grid=hyperparameters_g_5_b,
cv=tscv,
verbose=0,
n_jobs=-1,
scoring=scoring_b,
refit=metric_b,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_5_lstm,"sklearn.model_selection.GridSearchCV(estimator=clf_5_lstm,
param_grid=hyperparameter_5_lstm,
n_jobs=1,
cv=tscv,
scoring=scoring_lstm,
refit=True,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_g_6_b,"sklearn.model_selection.GridSearchCV(estimator=pipeline_b,
param_grid=hyperparameters_g_6_b,
cv=tscv,
verbose=0,
n_jobs=-1,
scoring=scoring_b,
refit=metric_b,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_6_lstm,"sklearn.model_selection.GridSearchCV(estimator=clf_6_lstm,
param_grid=hyperparameter_6_lstm,
n_jobs=1,
cv=tscv,
scoring=scoring_lstm,
refit=True,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_g_7_b,"sklearn.model_selection.GridSearchCV(estimator=pipeline_b,
param_grid=hyperparameters_g_7_b,
cv=tscv,
verbose=0,
n_jobs=-1,
scoring=scoring_b,
refit=metric_b,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
search_7_lstm,"sklearn.model_selection.GridSearchCV(estimator=clf_7_lstm,
param_grid=hyperparameter_7_lstm,
n_jobs=1,
cv=tscv,
scoring=scoring_lstm,
refit=True,
return_train_score=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
confu_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
auc,"sklearn.metrics.roc_auc_score(y_test,y_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(y_test,y_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_1,X_test_1,y_train_1,y_test_1","sklearn.model_selection.train_test_split(sp500.iloc[:,24:47],
sp500.iloc[:,70],
test_size=0.1,
shuffle=False,
stratify=None)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_2,X_test_2,y_train_2,y_test_2","sklearn.model_selection.train_test_split(sp500.iloc[:,1:24],
sp500.iloc[:,70],
test_size=0.1,
shuffle=False,
stratify=None)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_3,X_test_3,y_train_3,y_test_3","sklearn.model_selection.train_test_split(sp500.iloc[:,47:70],
sp500.iloc[:,70],
test_size=0.1,
shuffle=False,
stratify=None)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_4,X_test_4,y_train_4,y_test_4","sklearn.model_selection.train_test_split(sp500.iloc[:,1:47],
sp500.iloc[:,70],
test_size=0.1,
shuffle=False,
stratify=None)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_5,X_test_5,y_train_5,y_test_5","sklearn.model_selection.train_test_split(sp500.iloc[:,24:70],
sp500.iloc[:,70],
test_size=0.1,
shuffle=False,
stratify=None)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_6,X_test_6,y_train_6,y_test_6","sklearn.model_selection.train_test_split(pd.concat([sp500.iloc[:,1:24],sp500.iloc[:,47:70]],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_7,X_test_7,y_train_7,y_test_7","sklearn.model_selection.train_test_split(sp500.iloc[:,1:70],
sp500.iloc[:,70],
test_size=0.1,
shuffle=False,
stratify=None)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_true,numpy.array(y_true),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
y_pred,numpy.array(y_pred),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
y_orig,numpy.array(y_orig),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame([x_data,y_data])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame([x_data,y_data])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame([x_data,y_data])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_data,sklearn.datasets.load_boston(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_data,sklearn.datasets.load_boston(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_data,sklearn.datasets.load_boston(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_data,sklearn.datasets.load_boston(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_data,sklearn.datasets.load_boston(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_data,sklearn.datasets.load_boston(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
source,requests.get(url),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
toronto_data,pandas.DataFrame(columns=column_names),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
geo_merged,"pandas.merge(geo_df,Tor_df2,on='Postalcode')",CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
geo_df,pandas.read_csv('http://cocl.us/Geospatial_data'),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
patches,matplotlib.pyplot.barh(range(len(data.index),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
"n,bins,patches","matplotlib.pyplot.hist(world_happiness.life_ladder,bins=40,color='green',label=""lifeladder"")",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_sudan,"pandas.DataFrame(data_population,columns=['year','population_density_per_sq_km'],)",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
population_density,"pandas.melt(population_density,id_vars=[""CountryName"",""CountryCode"",""SeriesName""],var_name=""Year"",value_name=""Value"")",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
population_density,"pandas.read_csv(""population_density.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
world_happiness,"pandas.read_excel(""world_happiness_report_2019.xls"",sheet_name=""Table2.1"")",CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
std_happiness,numpy.std(data),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
sk_r_ew_happiness,scipy.stats.skew(data),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
kurtosis_happiness,scipy.stats.kurtosis(world_happiness.life_ladder),CLUSTER_3,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
X_train,"numpy.pad(X_train,((0,0)",CLUSTER_7,CLUSTER_11,CLUSTER_1,CLUSTER_0,CLUSTER_3
X_validation,"numpy.pad(X_validation,((0,0)",CLUSTER_7,CLUSTER_11,CLUSTER_1,CLUSTER_0,CLUSTER_3
X_test,"numpy.pad(X_test,((0,0)",CLUSTER_7,CLUSTER_11,CLUSTER_1,CLUSTER_0,CLUSTER_3
index,"random.randint(0,len(X_train)",CLUSTER_7,CLUSTER_11,CLUSTER_1,CLUSTER_0,CLUSTER_3
data,json.load(f),CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax1,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax1,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax1,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax2,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax2,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
ax2,matplotlib.pyplot.gca(),CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
results,numpy.array([numpy.array(r),CLUSTER_5,CLUSTER_9,CLUSTER_7,CLUSTER_0,CLUSTER_0
sample_n,numpy.array([]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
sample_n_all,numpy.array([]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
x,"numpy.linspace(gamma.ppf(0.01,a)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
x,"numpy.linspace(1,10,sample_len)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
sample_n,"numpy.append(sample_n,mean_n_i)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
sample_n_all,"numpy.append(sample_n_all,sample_n)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
gamma_func,scipy.stats.gamma(a),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
gamma_func,scipy.stats.gamma(a),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
norm,"scipy.stats.norm(E,math.sqrt(D/element)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
df1,"pandas.DataFrame(np.random.randn(5,2)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(np.arange(24),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(data=BabyDataSet,columns=['Names','Births'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
xlsx,pandas.ExcelFile('path_to_file.xls'),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
s1,pandas.Series(np.random.randn(5),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
dates,"pandas.date_range('20170706',periods=6)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,pandas.read_csv(loc),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(loc,header=None)",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(loc,names=['Names','Births'])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.read_excel(loc,sheetname='Sheet1')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.read_excel(xlsx,'Sheet1')",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
problems,"numpy.array([0.0,1.0,2.0,3.0,4.0,8.0,9.0,10.0,11.0,12.0,26.0,65.0,85.0,94.0,110.0,149.0,152.0,157.0,158.0,181.0,193.0,237.0,260.0,316.0,330.0,427.0,463.0,475.0,546.0,697.0,699.0,753.0,874.0,912.0,920.0,924.0,929.0,931.0,932.0,934.0,966.0,977.0,978.0,991.0,1156.0,1163.0,1178.0,1193.0,1231.0,1292.0,1293.0,1294.0,1309.0,1438.0,1439.0,1440.0,1441.0,1442.0,1443.0,1444.0,1445.0,1446.0,1455.0,1475.0,1490.0,1557.0,1558.0,1562.0,1576.0,1577.0,1579.0,1581.0,1588.0,1606.0,1609.0,1667.0,1675.0,1739.0,1741.0,1742.0,1743.0,1747.0,1748.0,1750.0,1751.0,1753.0,1775.0,1839.0,1869.0,1884.0,1902.0,1908.0,1920.0,1941.0,2046.0,2052.0,3344.0,3673.0,3948.0,3963.0,4622.0,5064.0,6287.0,6576.0,7393.0,7958.0,8012.0,8095.0,8461.0,8465.0,8498.0,9039.0,9171.0,9172.0,9250.0,9430.0,9718.0,9797.0,9799.0,9808.0,9809.0,9817.0,9818.0,9828.0,9844.0,9845.0,9869.0,9871.0,9872.0,9950.0,9951.0,9952.0,9953.0,9989.0,9998.0,10004.0,10021.0,10022.0,10047.0,10050.0,10051.0,10052.0,10053.0,10057.0,10399.0,10403.0,10650.0,10654.0,10718.0,10719.0,10720.0,10721.0,10724.0,10726.0,10727.0,12458.0,13501.0,13502.0,14552.0])",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
arr,numpy.zeros((len(json_data),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
user,numpy.zeros(159),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(arr[3]),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
output,"pandas.DataFrame(columns=['WrongProbability','SolvingProbability'])",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
json_data,json.load(f),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dic,json.loads(json_data[ranker]),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x_data,"numpy.arange(1,107)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_indices,"numpy.arange(1,91)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_indices,"numpy.arange(91,107)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
reg_fit,sklearn.linear_model.LinearRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
page,requests.get(url),CLUSTER_13,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
data_clean,pandas.DataFrame(data_df.transcript.apply(round1),CLUSTER_13,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
data_clean,pandas.DataFrame(data_clean.transcript.apply(round2),CLUSTER_13,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
data_dtm,pandas.DataFrame(data_cv.toarray(),CLUSTER_13,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
text,"re.sub('\[.*?\]','',text)",CLUSTER_13,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
text,re.sub('[%s]'%re.escape(string.punctuation),CLUSTER_13,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
text,"re.sub('\w*\d\w*','',text)",CLUSTER_13,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
text,"re.sub('[‘’“”…]','',text)",CLUSTER_13,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
text,"re.sub('\n','',text)",CLUSTER_13,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
maxwell_distr,scipy.stats.maxwell(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
maxwell_distr,scipy.stats.maxwell(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
norm_rv_Nf,"scipy.stats.norm(maxwell_expect,math.sqrt(maxwell_var/Nf)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
N,"numpy.arange(1,1001)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,5,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,5,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
u,"numpy.ones((nx,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
u,"numpy.ones((nx,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
u,"numpy.ones((nx,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
f,numpy.exp(-(x-4*t),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
u-,numpy.sin(i*x),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,2,nx)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,2,nx)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,2*np.pi,nx)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"stats.norm.interval(0.95,loc",numpy.mean(X),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
std_err,numpy.sqrt((p_hat*(1-p_hat),CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"stats.norm.interval(0.95,loc","np.mean(X),scale=scipy.stats.sem(X)",CLUSTER_10,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(data),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
df,pandas.DataFrame(data),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
dfDone,pandas.read_csv(inFileName),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
urls_all_old,"pandas.read_csv(URLFILEOLD,index_col=0)",CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
df,"pandas.read_csv(URLFILE,index_col=0)",CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
res,"re.search(r""([0-9]+)",CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
res,"re.search(r""^https://www.nu.nl/([^\/]+)",CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
txt_abstract,"re.sub(""\n"",""\\\\n"",txt_abstract)",CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
content,"re.sub(""\n"",""\\\\n"",content)",CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
text,"re.sub(""\n"","""",f.text)",CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
text,"re.sub(""\n"","""",f.text)",CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
indices,numpy.argsort(importances),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Y_mean,numpy.mean(Y_numeric),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_train,numpy.mean(Y_train!=rf_model.predict(X_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_test,numpy.mean(Y_test!=rf_model.predict(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_train,numpy.mean(Y_train!=adab_model.predict(X_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_test,numpy.mean(Y_test!=adab_model.predict(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_train,numpy.mean(Y_train!=gdb_model.predict(X_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_test,numpy.mean(Y_test!=gdb_model.predict(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_train,numpy.mean(Y_train!=Y_train_predict),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_test,numpy.mean(Y_test!=Y_test_predict),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_train,numpy.mean(Y_train!=adab_model.predict(X_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_test,numpy.mean(Y_test!=adab_model.predict(X_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_train,numpy.mean(Y_train!=classifier.predict(X_train_pca),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_test,numpy.mean(Y_test!=classifier.predict(X_test_pca),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_train,numpy.mean(Y_train!=opt_clf.predict(opt_X_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
err_test,numpy.mean(Y_test!=opt_clf.predict(opt_X_test),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_with_pca,pandas.DataFrame(pca.transform(X),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
Y,pandas.Series(['C1'ifval<=Y_meanelse'C2'forvalinY_numeric]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
intY,pandas.Series([0ifvalis'C1'else1forvalinY]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
intY,pandas.Series([0ifvalis'C1'else1forvalinY_train]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
intY_test,pandas.Series([0ifvalis'C1'else1forvalinY_test]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,train_size=0.7,random_state=7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train_pca,X_test_pca,_,_","sklearn.model_selection.train_test_split(X_with_pca,Y,train_size=0.7,random_state=7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"opt_X_train,opt_X_test,_,_","sklearn.model_selection.train_test_split(opt_reduced_X,Y,train_size=0.7,random_state=7)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_model,sklearn.ensemble.RandomForestClassifier(n_estimators=700),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_default,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_grid_cv,"sklearn.model_selection.GridSearchCV(rf_default,param_grid={'n_estimators':n_estimators},cv=None,n_jobs=4)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
adab_grid_cv,"sklearn.model_selection.GridSearchCV(adab_default,param_grid={'n_estimators':n_estimators},cv=None,n_jobs=4)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gdb_grid_cv,"sklearn.model_selection.GridSearchCV(gdb_default,param_grid={'n_estimators':n_estimators},cv=None,n_jobs=4)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca_grid_cv,"sklearn.model_selection.GridSearchCV(ppl,param_grid,n_jobs=2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gdb_grid_cv,"sklearn.model_selection.GridSearchCV(adab_def,param_grid={'n_estimators':n_estimators},cv=None,n_jobs=4)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
adab_model,sklearn.ensemble.AdaBoostClassifier(n_estimators=700),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
adab_default,sklearn.ensemble.AdaBoostClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.ensemble.AdaBoostClassifier(n_estimators=100),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
adab_def,sklearn.ensemble.AdaBoostClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
opt_clf,sklearn.ensemble.AdaBoostClassifier(n_estimators=opt_best_n_estimators),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gdb_model,sklearn.ensemble.GradientBoostingClassifier(n_estimators=700),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
gdb_default,sklearn.ensemble.GradientBoostingClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm_train,"sklearn.metrics.confusion_matrix(Y_train_predict,Y_train)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm_test,"sklearn.metrics.confusion_matrix(Y_test_predict,Y_test)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(intY_test,probability)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(intY_test,probability)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_pca,sklearn.decomposition.PCA(n_components=41),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=7),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
opt_pca,sklearn.decomposition.PCA(n_components=pca_dim_red.n_components),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ppl,sklearn.pipeline.Pipeline(pipeline_estimators),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
t_data,"numpy.arange(0,time_end,sample_time)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
t_data,"numpy.arange(0,time_end,sample_time)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
t_data,"numpy.arange(0,time_end,sample_time)",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
v_data,numpy.zeros_like(t_data),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_data,numpy.zeros_like(t_data),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
x_data,numpy.zeros_like(t_data),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
alpha,numpy.arctan(3/60),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
alpha,numpy.arctan(9/90),CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
data,"numpy.vstack([t_data,x_data])",CLUSTER_7,CLUSTER_4,CLUSTER_9,CLUSTER_0,CLUSTER_1
style_label_batch,"numpy.array(untrained_style_net.blobs['label'].data,dtype=np.int32)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
image,"numpy.require(image,dtype=np.uint8)",CLUSTER_23,CLUSTER_0,CLUSTER_6,CLUSTER_0,CLUSTER_1
data,json.load(f),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_graph,json_load('../sg2im/data/sceneGraphs/train_sceneGraphs.json'),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
val_graph,json_load('../sg2im/data/sceneGraphs/val_sceneGraphs.json'),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
attribute_name_counter,collections.Counter(),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
indexes,numpy.arange(len(labels),CLUSTER_2,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_data,pandas.read_csv('test_transaction.csv'),CLUSTER_27,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('train_transaction.csv'),CLUSTER_27,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
model_logr,sklearn.linear_model.LogisticRegression(C=1e5),CLUSTER_27,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=20)",CLUSTER_27,CLUSTER_12,CLUSTER_9,CLUSTER_0,CLUSTER_0
x1,"numpy.array([1,1,0,
1,1,0,
0,0,0])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x2,"numpy.array([1,1,1,
1,0,1,
1,1,1])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x3,"numpy.array([0,1,0,
1,1,1,
0,1,0])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x4,"numpy.array([0,0,0,
0,1,1,
0,1,1])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x5,"numpy.array([1,0,0,
1,0,0,
1,0,0])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x6,"numpy.array([0,0,0,
1,1,1,
0,0,0])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x7,"numpy.array([0,0,1,
0,0,1,
0,0,1])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x8,"numpy.array([1,0,1,
0,1,0,
1,0,1])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
same_class,numpy.array(same_class),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
diff_class,numpy.array(diff_class),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
samples,"numpy.array([[i,j]foriinx_sampleforjiny_sample])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_sample,numpy.linspace(np.min(h_value),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_sample,numpy.linspace(np.min(h_value),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.vstack([x1,x2,x3,x4,x5,x6,x7,x8])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,"numpy.vstack([same_class,diff_class])",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
label,numpy.vstack([np.ones((len(same_class),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
tips,seaborn.load_dataset('tips'),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sum_of_kde,"numpy.sum(kernel_list,axis=0)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_axis,"numpy.linspace(x_min,x_max,100)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.plot(x_axis,sum_of_kde,color='indianred')",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
kernel,"scipy.stats.norm(data_point,bandwidth)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pnl,numpy.ones(len(valid_return),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pnl,numpy.ones(len(test_return),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
daily_return,"numpy.mean(daily_return,axis=1)",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
valid_return,pandas.Series(Embed_model['valid'].reshape(-1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
test_return,pandas.Series(Embed_model['test'].reshape(-1),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
yearly_weights,"pandas.DataFrame(index=universe.index,columns=universe.columns)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
monthly_weights,"pandas.DataFrame(index=universe.index,columns=universe.columns)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
weekly_weights,"pandas.DataFrame(index=universe.index,columns=universe.columns)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
s,pandas.Series(np.zeros(len(proto),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
universe,"pandas.concat([SPY,VNQ,VEU,TIP,TLT,DBC],axis=1,keys=['SPY','VNQ','VEU','TIP','TLT','DBC'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
start_dt,"datetime.datetime(2007,3,8)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
end_dt,"datetime.datetime(2015,12,31)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
points,"numpy.arange(-5,5,0.01)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
A,"numpy.array([1,2,3,4])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
B,"numpy.array([100,200,300,400])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
condition,"numpy.array([True,True,False,False])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,"numpy.array([[1,2,3],[4,5,6],[7,8,9]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
bool_arr,"numpy.array([True,False,False])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
countries,"numpy.array(['France','Germany','USA','Russia','USA','Mexico','Germany'])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
answer2,"numpy.where(condition,A,B)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"dx,dy","numpy.meshgrid(points,points)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
unique_important_corrs,"pandas.DataFrame(
list(set([(tuple(sorted(key)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
unique_important_corrs,"pandas.DataFrame(
list(set([(tuple(sorted(key)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
unique_important_corrs,"pandas.DataFrame(
list(set([(tuple(sorted(key)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(url,sep='\s+',names=names)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
encoders[column],sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cwd,os.getcwd(),CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
raw,"pandas.read_csv(""A:\\Aditya\\NYU\\Assignments\\DwD\\DM_Project\\lending-club-loan-data\\loan.csv"",usecols=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])",CLUSTER_0,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
dataset,numpy.array(Person),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
class_category,numpy.array(Category),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
product,"numpy.array([0,0,0,0,0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
distance,numpy.sqrt(row_sum),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
class_target,"numpy.tile(target,(len(dataset)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
image_copy,numpy.copy(image),CLUSTER_7,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(9,9)",CLUSTER_7,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(9,9)",CLUSTER_7,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv('BTCPrice.csv',engine='python',delimiter="";"",decimal="","")",CLUSTER_27,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
res,requests.get('https://www.bitstamp.net/api/ticker_hour/'),CLUSTER_27,CLUSTER_9,CLUSTER_2,CLUSTER_0,CLUSTER_1
decodeY,numpy.zeros((yTrain.shape),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
decodeY,numpy.zeros(decodeY.shape),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
decoder_input,"numpy.zeros((x.shape[0],1,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
hist,"numpy.vstack((xLine.reshape(lag,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
preds,"numpy.vstack((-1*np.ones((lag,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
acts,"numpy.vstack((-1*np.ones((lag,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pandas_data,"pandas.read_csv('data/daily-minimum-temperatures-in-me.csv',sep=';',encoding='utf-8')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pandas_data['date'],pandas.to_datetime(pandas_data['date']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dates1,"pandas.to_datetime(dates,unit='s')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(-1,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig2,plt.figure(figsize=matplotlib.pyplot.figaspect(2.0),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig2,matplotlib.pyplot.figure(figsize=plt.figaspect(2.0),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig3,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig4,axes","matplotlib.pyplot.subplots(nrows=2,ncols=2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.hist(pos_ratings,bins","numpy.arange(6.5,11.5,1)",CLUSTER_16,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
"plt.hist(neg_ratings,bins","numpy.arange(-0.5,5.5,1)",CLUSTER_16,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
pos_ratings,numpy.array(positive_data['rating']),CLUSTER_16,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
neg_ratings,numpy.array(negative_data['rating']),CLUSTER_16,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
pd_all_words,"pandas.DataFrame(all_words[:15],columns=['Word','Count'])",CLUSTER_16,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
pd_neg_words,"pandas.DataFrame(neg_words[:15],columns=['Word','Count'])",CLUSTER_16,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
pd_pos_words,"pandas.DataFrame(pos_words[:15],columns=['Word','Count'])",CLUSTER_16,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
pd_to_plot,"pandas.concat([pd_all_words,pd_pos_words,pd_neg_words])",CLUSTER_16,CLUSTER_3,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,numpy.load('../project1/X.npy'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Y,numpy.load('../project1/Y.npy'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,8)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(shape[0],shape[1],i+1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Ydf,"pandas.DataFrame(data=Y,columns=[9,0,7,6,1,8,4,3,2,5])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(history.history),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X,Ydf,test_size=0.1,random_state=SEED)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
conf_mat,"sklearn.metrics.confusion_matrix(y_valid_class,y_pred_class)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
t0,time.time(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
_result,"re.search(""name""+re,ws,regx.IGNORECASE)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
_result,"re.search(""id""+re,ws,regx.IGNORECASE)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
_result,"re.search(__COUNTY__,html)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
result,"re.search(__DATEFORMAT__,html,regx.IGNORECASE)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
_result,"re.findall(__NEXT_PAGE_ID__,currentHTML,regx.IGNORECASE)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
_result,"re.findall(__NEXT_PAGE_HREF__,currentHTML,regx.IGNORECASE)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
_result,"re.findall(__NEXT_PAGE_HREF__,html,regx.IGNORECASE)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
person,"DataStorage(_lName=ln,_fName=fn,_mName=mn,_dob=datetime.datetime(1900,1,1)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
convertedDate,"datetime.datetime.strptime(dob,'%m-%d-%Y')",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
person,"DataStorage(_lName='Smith',_fName='John',_mName='Wayne',_dob=datetime.datetime.strptime('02-20-1997','%m-%d-%Y')",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
img,matplotlib.pyplot.imread(img_path),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
self.csv,pandas.read_csv(csv_file),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
label,"numpy.zeros((H,W)",CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
"x,y",numpy.where(outputs>=alpha),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
label,"numpy.concatenate((2*label,np.ones((Hc,Wc,1)",CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
label,"numpy.argmax(label,axis=2)",CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
img,numpy.squeeze(img),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
outputs,numpy.squeeze(outputs.detach(),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
outputs,numpy.squeeze(outputs.detach(),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
outputs,numpy.exp(outputs),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
outputs,numpy.exp(outputs),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
pt,numpy.load(pt_path),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
end,datetime.datetime.now(),CLUSTER_14,CLUSTER_9,CLUSTER_12,CLUSTER_0,CLUSTER_0
raw_df,pandas.DataFrame(data=final_dictionary),CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
full_df,"pandas.concat(df_list,sort=False)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
full_2008_df,"pandas.concat(df_list_2008,sort=False)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"_,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_3,CLUSTER_8,CLUSTER_12,CLUSTER_0
locations_2_to_use,"numpy.array([
locations_2[i,]
foriinrange(num_features_2)",CLUSTER_14,CLUSTER_3,CLUSTER_8,CLUSTER_12,CLUSTER_0
locations_1_to_use,"numpy.array([
locations_1[indices[i],]
foriinrange(num_features_2)",CLUSTER_14,CLUSTER_3,CLUSTER_8,CLUSTER_12,CLUSTER_0
inlier_idxs,numpy.nonzero(inliers),CLUSTER_14,CLUSTER_3,CLUSTER_8,CLUSTER_12,CLUSTER_0
g,"seaborn.heatmap(
np.inner(message_embeddings_,message_embeddings_)",CLUSTER_14,CLUSTER_3,CLUSTER_8,CLUSTER_12,CLUSTER_0
d1_tree,scipy.spatial.cKDTree(descriptors_1),CLUSTER_14,CLUSTER_3,CLUSTER_8,CLUSTER_12,CLUSTER_0
digits,sklearn.datasets.load_digits(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
user_df,"pandas.DataFrame({'MeanTumorVolume':drug_group_average,'MedianTumorVolume':drug_group_median,'TumorVolumeVariance':drug_group_var,'TumorVolumeStd.Dev.':drug_group_std,'TumorVolumeStd.Err.':drug_group_sem})",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
merge_df,"pandas.merge(study_results,mouse_metadata,on=""MouseID"",how=""left"")",CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
mouse_metadata,pandas.read_csv(mouse_metadata_path),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
study_results,pandas.read_csv(study_results_path),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
"(slope,intercept,rvalue,pvalue,stderr)",scipy.stats.linregress(cap_avg['Weight(g),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
correlation,scipy.stats.pearsonr(cap_avg['Weight(g),CLUSTER_5,CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_1
test_image,numpy.array(test_image),CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
test_image,"numpy.expand_dims(test_image,axis=0)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
test_image,"numpy.expand_dims(test_image,axis=0)",CLUSTER_23,CLUSTER_6,CLUSTER_6,CLUSTER_0,CLUSTER_1
Qtable,"numpy.zeros((state_size,action_size)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
action,"numpy.argmax(Qtable[state,:])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
action,"numpy.argmax(Qtable[state,:])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
exper_expl_tradeoff,"random.uniform(0,1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
action,random.choice(list(action_mapping.keys(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_28,CLUSTER_7
action,"random.randint(0,self.num_actions-1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_28,CLUSTER_7
random_action,"random.randint(0,self.num_actions-1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_28,CLUSTER_7
t,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_28,CLUSTER_7
t,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_28,CLUSTER_7
t,time.time(),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_28,CLUSTER_7
pointgoal,numpy.array([np.linalg.norm(diff),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_28,CLUSTER_7
pointgoal,numpy.ones(2),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_28,CLUSTER_7
ang,"numpy.angle(complex(diff[0],-diff[1])",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_28,CLUSTER_7
ax,"matplotlib.pyplot.subplot(1,3,i+1)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_28,CLUSTER_7
response,"requests.get(url,stream=True)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_28,CLUSTER_7
agg_metrics:Dict,collections.defaultdict(float),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_28,CLUSTER_7
univariate,pandas.Series(univariate[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
univariate,pandas.Series(univariate[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv('paribas.csv',nrows=50000)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('houseprice.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
data.drop(labels=['target','ID'],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
data.drop(labels=['SalePrice'],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
univariate,sklearn.feature_selection.f_classif(X_train.fillna(0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
univariate,sklearn.feature_selection.f_regression(X_train.fillna(0),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sel_,"sklearn.feature_selection.SelectKBest(f_classif,k=10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sel_,"sklearn.feature_selection.SelectPercentile(f_regression,percentile=10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(minis),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.concat([iforiin]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.concat([df,minis[i]],ignore_index=True,axis=0)",CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,pandas.read_json(data[0]),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
temp,pandas.read_json(data_json_str),CLUSTER_1,CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_1
sample,"numpy.zeros((N,2)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
samples,numpy.zeros(N),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
samples,numpy.zeros(N),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.linspace(0,14,101)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.linspace(-5,5,101)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.linspace(-3.5,2.5,101)",CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pd_data,"pandas.read_csv(""german_credit_data_biased_training.csv"",sep="","",header=0)",CLUSTER_27,CLUSTER_5,CLUSTER_12,CLUSTER_33,CLUSTER_0
additional_feedback_data,json.load(feedback_file),CLUSTER_27,CLUSTER_5,CLUSTER_12,CLUSTER_33,CLUSTER_0
scoring_data,json.load(scoring_file),CLUSTER_27,CLUSTER_5,CLUSTER_12,CLUSTER_33,CLUSTER_0
payloads,json.load(history_file),CLUSTER_27,CLUSTER_5,CLUSTER_12,CLUSTER_33,CLUSTER_0
payloads,json.load(history_file),CLUSTER_27,CLUSTER_5,CLUSTER_12,CLUSTER_33,CLUSTER_0
records,json.load(json_file),CLUSTER_27,CLUSTER_5,CLUSTER_12,CLUSTER_33,CLUSTER_0
records,json.load(history_file),CLUSTER_27,CLUSTER_5,CLUSTER_12,CLUSTER_33,CLUSTER_0
drift_daily_measurements,json.load(history_file),CLUSTER_27,CLUSTER_5,CLUSTER_12,CLUSTER_33,CLUSTER_0
score_count,"random.randint(60,600)",CLUSTER_27,CLUSTER_5,CLUSTER_12,CLUSTER_33,CLUSTER_0
score_resp,"random.uniform(60,300)",CLUSTER_27,CLUSTER_5,CLUSTER_12,CLUSTER_33,CLUSTER_0
end_date,datetime.datetime.utcnow(),CLUSTER_27,CLUSTER_5,CLUSTER_12,CLUSTER_33,CLUSTER_0
historical_data_path,os.getcwd(),CLUSTER_27,CLUSTER_5,CLUSTER_12,CLUSTER_33,CLUSTER_0
newdf['Agestat'],"numpy.where(newdf['Age']>18,'adult','child')",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('E:/titanic/train.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('E:/titanic/test.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
n1,"random.randint(min_value,max_value)",CLUSTER_10,CLUSTER_11,CLUSTER_10,CLUSTER_0,CLUSTER_1
n2,"random.randint(min_value,max_value)",CLUSTER_10,CLUSTER_11,CLUSTER_10,CLUSTER_0,CLUSTER_1
"train_set,test_set","sklearn.model_selection.train_test_split(data,test_size=0.2,random_state=42)",CLUSTER_10,CLUSTER_11,CLUSTER_10,CLUSTER_0,CLUSTER_1
model_predictions,"numpy.array(
["""".join(ids_to_sentence(i,id2word)",CLUSTER_10,CLUSTER_11,CLUSTER_10,CLUSTER_0,CLUSTER_1
valid_predictions,"numpy.array([""-""notinids_to_sentence(i[1:],id2word)",CLUSTER_10,CLUSTER_11,CLUSTER_10,CLUSTER_0,CLUSTER_1
ground_truth,numpy.array(ground_truth),CLUSTER_10,CLUSTER_11,CLUSTER_10,CLUSTER_0,CLUSTER_1
model_predictions,"numpy.array(
["""".join(ids_to_sentence(i,id2word)",CLUSTER_10,CLUSTER_11,CLUSTER_10,CLUSTER_0,CLUSTER_1
valid_predictions,"numpy.array([""-""notinids_to_sentence(i[1:],id2word)",CLUSTER_10,CLUSTER_11,CLUSTER_10,CLUSTER_0,CLUSTER_1
ground_truth,numpy.array(ground_truth),CLUSTER_10,CLUSTER_11,CLUSTER_10,CLUSTER_0,CLUSTER_1
mae,"sklearn.metrics.mean_absolute_error(gts,predictions)",CLUSTER_10,CLUSTER_11,CLUSTER_10,CLUSTER_0,CLUSTER_1
mae,"sklearn.metrics.mean_absolute_error(gts,predictions)",CLUSTER_10,CLUSTER_11,CLUSTER_10,CLUSTER_0,CLUSTER_1
annual_enrollment,pandas.DataFrame(annual_enrollment),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
white_enrollment,pandas.DataFrame(white_enrollment),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
male_enrollment,pandas.DataFrame(male_enrollment),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
annual_ell,pandas.DataFrame(annual_ell),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
annual_poverty,pandas.DataFrame(annual_poverty),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
enrollment2,"pandas.merge(enrollment,annual_enrollment,left_index=True,right_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
enrollment2b,"pandas.merge(enrollment2,white_enrollment,left_index=True,right_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
enrollment2c,"pandas.merge(enrollment2b,male_enrollment,left_index=True,right_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ell2,"pandas.merge(ell,annual_ell,left_index=True,right_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
poverty2,"pandas.merge(poverty,annual_poverty,left_index=True,right_index=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
merge,"pandas.merge(enrollment,ell,on=['CDS_CODE','year'],how='outer')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
merge2,"pandas.merge(merge,poverty,on=['CDS_CODE','year'],how='outer')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
All_Schools_Analysis,"pandas.merge(master_list,merge_demo,on=['CDS_CODE'],how='outer')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
Charter_Schools_Analysis,"pandas.merge(Charter_Schools_Analysis,School_Neighbors,on=['CDS_CODE'],how='outer')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
enrollment,pandas.read_csv('Enrollment/enr{}.txt'.format(i),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ell,pandas.read_csv('EL/elsch{}.txt'.format(i),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
School_Neighbors,"pandas.read_csv(""School_Neighbors.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
poverty,pandas.read_excel('Poverty/frpm{}.xls'.format(i),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
master_list,"pandas.read_excel('SchoolDirectory/pubschls.xls',sheet_name='schools',header=0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
enrollment,"pandas.read_pickle(""Enrollment/California_Enrollment_4.pkl"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
enrollment_i,"pandas.read_pickle(""Enrollment/California_Enrollment_{}.pkl"".format(i)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ell,"pandas.read_pickle(""EL/California_ELL_4.pkl"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ell_i,"pandas.read_pickle(""EL/California_ELL_{}.pkl"".format(i)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
poverty,"pandas.read_pickle(""Poverty/California_poverty_4.pkl"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
poverty_i,"pandas.read_pickle(""Poverty/California_poverty_{}.pkl"".format(i)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
zip_data,"pandas.read_pickle(""zip_data.pkl"")",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
enrollment['ENR_WHITE'],"numpy.where(enrollment['ETHNIC']==7,enrollment['ENR_TOTAL'],0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
enrollment['ENR_MALE'],"numpy.where(enrollment['GENDER']==""M"",enrollment['ENR_TOTAL'],0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
All_Schools_Analysis['open_next_year'],"numpy.where(All_Schools_Analysis['last_year']>All_Schools_Analysis['year'],1,0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
All_Schools_Analysis['open_two_years'],"numpy.where(All_Schools_Analysis['last_year']>All_Schools_Analysis['year']+1,1,0)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
Charter_Schools_Analysis['Pct_ELL2'],numpy.where(Charter_Schools_Analysis['Pct_ELL'].isnull(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
Charter_Schools_Analysis['Pct_FRPM2'],numpy.where(Charter_Schools_Analysis['Pct_FRPM'].isnull(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
Charter_Schools_Analysis['zipcode2'],"numpy.where(Charter_Schools_Analysis['zipcode1']==""NoDa"","""",Charter_Schools_Analysis['zipcode1'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
Charter_Schools_Analysis['Pct_ELL2'],numpy.where(Charter_Schools_Analysis['Pct_ELL'].isnull(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
Charter_Schools_Analysis['Pct_FRPM2'],numpy.where(Charter_Schools_Analysis['Pct_FRPM'].isnull(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
Charter_Schools_Analysis['neighborhood_PS_score2'],numpy.where(Charter_Schools_Analysis['neighborhood_PS_score'].isnull(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""https://quality.data.gov.tw/dq_download_csv.php?nid=9336&md5_url=5a029cda9ba76e9641733165b13ad83b"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
file,"pandas.DataFrame({'날짜':a,'시간':b,'기업명':c,'기사':d,'보고서url':e,'주가':f,'1분뒤주가':g})",CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
read,pandas.read_excel('C:/Users/KED/Desktop/상장기업목록.xlsx'),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
a,pandas.read_excel('다트확인.xlsx'),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
b,pandas.read_excel('금융속보.xlsx'),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
c,pandas.read_excel('일반속보.xlsx'),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
check,pandas.read_excel('C:/Users/KED/Desktop/상장기업목록.xlsx'),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
read,pandas.read_excel('C:/Users/KED/Desktop/상장기업목록.xlsx'),CLUSTER_1,CLUSTER_5,CLUSTER_6,CLUSTER_33,CLUSTER_1
temps,"pandas.merge(global_temp,
sf_temp,
on='year',
how='outer',
suffixes=('_glob','_sf')",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sf_temp,pandas.read_csv('data/sanfrancisco.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
global_temp,pandas.read_csv('data/global.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
year,re.search(r'(\d{4}),CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=k,random_state=42,n_jobs=-1)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
palette,"seaborn.hls_palette(20,l=.4,s=.9)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
palette,"seaborn.hls_palette(19,l=.4,s=.9)",CLUSTER_22,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
bars,"matplotlib.pyplot.bar(pos,popularity,align='center',linewidth=0,color='lightslategrey')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
pos,numpy.arange(len(languages),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
img_hsv_change,"numpy.hstack((img,img_hsv_down,img_hsv_up)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
img_bgr_equalHist,"numpy.hstack((img,img_bgr_equal,img_hsv_equal)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
img_contrast_light,"numpy.hstack((img,add_contrast,add_lighness)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
NN,numpy.zeros(len(testx),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
NN,numpy.zeros(len(testx),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
cnfmat,"numpy.zeros([3,3])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
data,"numpy.loadtxt('column_3C.dat',converters={6:lambdas:labels.index(s)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
r,"requests.get(""http://www.pythonhow.com/real-estate/rock-springs-wy/LCWYROCKSPRINGS/"")",CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get(base_url+str(page),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(l),CLUSTER_13,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
url,requests.get('https://gadgets360.com/shop/smartron-t-phone-sunrise-orange-313935322d33333935'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
page,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
tag_vectors,"numpy.zeros((count,embeddings_dim)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
X,"numpy.concatenate([dialogue_df['text'].values,stackoverflow_df['title'].values])",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
dialogue_df,"pandas.read_csv('data/dialogues.tsv',sep='\t')",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
stackoverflow_df,"pandas.read_csv('data/tagged_posts.tsv',sep='\t')",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
posts_df,"pandas.read_csv('data/tagged_posts.tsv',sep='\t')",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.1,random_state=0)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=0)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
intent_recognizer,"sklearn.linear_model.LogisticRegression(solver='newton-cg',C=10,penalty='l2',n_jobs=-1)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
lr,"sklearn.linear_model.LogisticRegression(solver='newton-cg',C=5,penalty='l2',n_jobs=-1)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
test_accuracy,"sklearn.metrics.accuracy_score(y_test,y_test_pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
test_accuracy,"sklearn.metrics.accuracy_score(y_test,y_test_pred)",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
tag_classifier,sklearn.multiclass.OneVsRestClassifier(lr),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_4
df_imdb,"pandas.merge(df_tmdb,df_omdb,on=""omdb_id"",how=""left"")",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
df_tmdb,"pandas.read_csv(""output_data/tmd_api_movie_2019.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
df_omdb,"pandas.read_csv(""output_data/omdb_api_movie_2019.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
sketch,"pandas.DataFrame(np.zeros((num_HashFunctions,num_Columns)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
dd,"pandas.DataFrame(df,columns=['Sym'])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
dfs,"pandas.DataFrame(df,columns=['1:4'])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
kickstarter,"pandas.read_csv(""./Kickstarter_projects_Feb19.csv"")",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
y,numpy.array(df['target']),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp,"sklearn.impute.SimpleImputer(missing_values='?',strategy='most_frequent')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.KFold(n_splits=5,random_state=42)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(imp.fit_transform(df),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"pandas.get_dummies(df.drop(['target'],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""/content/drive/MyDrive/ColabNotebooks/adult.data"",names=columns)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data=np.array(metrics),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
df,"pandas.read_sql_table('labeled_messages',engine)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
df,pd.DataFrame(data=numpy.array(metrics),CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
text,"re.sub(r""[^a-zA-Z0-9]"","""",text.lower()",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=42)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
pipeline,"sklearn.pipeline.Pipeline([
('vect',CountVectorizer(tokenizer=tokenize)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
pipeline2,"sklearn.pipeline.Pipeline([
('vect',CountVectorizer(tokenizer=tokenize)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
accuracy,"sklearn.metrics.accuracy_score(y_test[:,i],y_pred[:,i])",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
precision,"sklearn.metrics.precision_score(y_test[:,i],y_pred[:,i],average='micro')",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
recall,"sklearn.metrics.recall_score(y_test[:,i],y_pred[:,i],average='micro')",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
f1,"sklearn.metrics.f1_score(y_test[:,i],y_pred[:,i],average='micro')",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
cv,"sklearn.model_selection.GridSearchCV(pipeline,param_grid=parameters)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
cv2,"sklearn.model_selection.GridSearchCV(pipeline2,param_grid=parameters2)",CLUSTER_16,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_4
WRESTLERS,pandas.DataFrame(wrestler_data),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
new_match_data,pandas.concat(frames),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
MATCHES,pandas.read_csv('MATCHES.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
WRESTLERS,pandas.read_csv('WRESTLERS.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get(my_url),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(records,columns=['PostalCode','Borough','Neighbourhood'])",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_onehot,"pandas.get_dummies(toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
neighborhoods,"pandas.merge(df2s,df_pcodes,how='right',on='PostalCode')",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_pcodes,pandas.read_csv(url),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(kclusters),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
config,json.load(open(config_file),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
cancer_df,"pandas.DataFrame(cancer[""data""],columns=cancer[""feature_names""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cancer,sklearn.datasets.load_breast_cancer(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,sklearn.model_selection.GridSearchCV(SVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.read_csv('/Users/alice/Desktop/test_a.csv',sep='\t')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_train,"pandas.read_csv('/Users/alice/Desktop/train_set.csv',sep='\t')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
vid_counter,numpy.zeros(30),CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_1
boxes,"numpy.zeros((num_objs,4)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_1
gt_classes,"numpy.zeros(num_objs,dtype=np.int32)",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_1
synsets_image,"scipy.io.loadmat(os.path.join(devkit_path,'data','meta_det.mat')",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_1
synsets_video,"scipy.io.loadmat(os.path.join(devkit_path,'data','meta_vid.mat')",CLUSTER_11,CLUSTER_0,CLUSTER_5,CLUSTER_10,CLUSTER_1
action,"random.randint(0,action_dim-1)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
mini_batch,"random.sample(replay_memory,BATCH_SIZE)",CLUSTER_6,CLUSTER_7,CLUSTER_5,CLUSTER_0,CLUSTER_1
pass_data,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame(data),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.DataFrame({'group':list('aabbabbbabab'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame({'From_To':['LoNDon_paris','MAdrid_miLAN','londON_StockhOlm',
'Budapest_PaRis','Brussels_londOn'],
'FlightNumber':[10045,np.nan,10065,np.nan,10085],
'RecentDelays':[[23,47],[],[24,43,87],[13],[67,32]],
'Airline':['KLM(!)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
final_df,"pandas.concat([df,new_df],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(4/1.5,figheight/1.5)",CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.subplot(2,2,1)",CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.subplot(2,2,2)",CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.subplot(2,2,3)",CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
ax,"matplotlib.pyplot.subplot(2,2,4)",CLUSTER_7,CLUSTER_6,CLUSTER_1,CLUSTER_0,CLUSTER_1
y,numpy.sin(x),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,100,10000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y,numpy.fft.fft(y),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
flights,seaborn.load_dataset('flights'),CLUSTER_8,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_1
tips,seaborn.load_dataset('tips'),CLUSTER_8,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_1
mosquito_data_json,"requests.get(base_url,params=query_params)",CLUSTER_27,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
req,"requests.get(""http://127.0.0.1:5000/events/new"")",CLUSTER_27,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
survey_data,json.load(json_file),CLUSTER_27,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
mosquito_data,json.load(json_file),CLUSTER_27,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(parsedData),CLUSTER_27,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
longs,numpy.array(longs),CLUSTER_27,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
raster_map,"numpy.genfromtxt(
""processed/raster-world-map.txt"",
dtype=np.uint8,
delimiter=1
)",CLUSTER_27,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
lat,"random.uniform(0,159)",CLUSTER_27,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
long,"random.uniform(0,359)",CLUSTER_27,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
j,"pandas.crosstab(x_test['Order_Date_Month'],a,rownames=['Month'],colnames=['Category_ID'])",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
k,"pandas.crosstab(x_test['Order_Date_Dayofweek'],a,rownames=['Dayofweek'],colnames=['Category_ID'])",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
l,"pandas.crosstab(x_test['Order_Date_Year'],a,rownames=['Year'],colnames=['Category_ID'])",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
Z,"pandas.crosstab(x_test['Order_Date_Month'],x_test['Order_Date_Year'],rownames=['Month'],colnames=['Category_ID'])",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
x_ohe,"pandas.get_dummies(x,columns=[1,2,'Order_Date_Month','Order_Date_Year','Order_Date_Dayofweek','Days_to_ship'])",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_excel(""C:\\Users\\CLGUSER\\Desktop\\01_superstore_data__trans_cg6.xlsx"",sheetname=0)",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
c_range,"numpy.logspace(0,4,10)",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
rf2,"sklearn.ensemble.RandomForestClassifier(bootstrap=True,class_weight=None,criterion='gini',
max_depth=None,max_features='auto',max_leaf_nodes=None,
min_impurity_split=1e-07,min_samples_leaf=6,
min_samples_split=2,min_weight_fraction_leaf=0.0,
n_estimators=200,n_jobs=1,oob_score=True,random_state=300,
verbose=0,warm_start=False)",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
rfc,"sklearn.ensemble.RandomForestClassifier(n_jobs=-1,min_samples_leaf=1,random_state=500,max_features='sqrt',n_estimators=50,oob_score=True)",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=1/3)",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(x_ohe,y,test_size=1/3)",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
modelLogisticCV,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
CV_rfc,"sklearn.model_selection.GridSearchCV(estimator=rfc,param_grid=param_grid,cv=5)",CLUSTER_3,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
fruits,"pandas.DataFrame([[30,21]],columns=['Apples','Bananas'])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fruit_sales,"pandas.DataFrame([[35,21],[41,34]],columns=['Apples','Bananas'],
index=['2017Sales','2018Sales'])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
animals,"pandas.DataFrame({'Cows':[12,20],'Goats':[22,19]},index=['Year1','Year2'])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
ingredients,"pandas.Series(quantities,index=items,name='Dinner')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
reviews,"pandas.read_csv('../input/wine-reviews/winemag-data_first150k.csv',index_col=0)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
all_star_rosters,"pandas.DataFrame(columns=['Player','Year'])",CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
tmp,pandas.DataFrame({'averagepoints':list(score_box.keys(),CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
rebound_df,pandas.DataFrame({'averagerebound':list(rebound_box.keys(),CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
assist_df,pandas.DataFrame({'averageassist':list(assist_box.keys(),CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
fgp_df,pandas.DataFrame({'fieldgoalpercent':list(fgp_box.keys(),CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
wp_df,pandas.DataFrame({'teamwinningpercentage':list(wp_box.keys(),CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
pos_df,pandas.DataFrame({'position':list(pos_box.keys(),CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
year_df,"pandas.DataFrame({'Year':year,'C':c_num,'PF':pf_num,'SG':sg_num,'PG':pg_num,'SF':sf_num})",CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
player_stats,pandas.read_csv('Seasons_Stats.csv'),CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
team_stats,pandas.read_csv('nba_team_stats_00_to_18.csv'),CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_html(conferences.prettify(),CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
r,requests.get(url=URL),CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(2,2,figsize=(10,10)",CLUSTER_0,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
"return(100.0*np.sum(np.argmax(predictions,1)","=numpy.argmax(labels,1)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
stddev,numpy.sqrt(2.0/(image_size*image_size),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tf.truncated_normal([num_hidden_nodes1,num_hidden_nodes2],stddev",numpy.sqrt(2.0/num_hidden_nodes1),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tf.truncated_normal([num_hidden_nodes2,num_labels],stddev",numpy.sqrt(2.0/num_hidden_nodes2),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
stddev,numpy.sqrt(2.0/(image_size*image_size),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tf.truncated_normal([num_hidden_nodes1,num_hidden_nodes2],stddev",numpy.sqrt(2.0/num_hidden_nodes1),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tf.truncated_normal([num_hidden_nodes2,num_hidden_nodes3],stddev",numpy.sqrt(2.0/num_hidden_nodes2),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tf.truncated_normal([num_hidden_nodes3,num_labels],stddev",numpy.sqrt(2.0/num_hidden_nodes3),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
stddev,numpy.sqrt(2.0/(image_size*image_size),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tf.truncated_normal([num_hidden_nodes1,num_hidden_nodes2],stddev",numpy.sqrt(2.0/num_hidden_nodes1),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tf.truncated_normal([num_hidden_nodes2,num_hidden_nodes3],stddev",numpy.sqrt(2.0/num_hidden_nodes2),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"tf.truncated_normal([num_hidden_nodes3,num_labels],stddev",numpy.sqrt(2.0/num_hidden_nodes3),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,numpy.asarray(data),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,numpy.asarray(target),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
ma,numpy.sum(data),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
imdb_data,pandas.read_csv('IMDB_Dataset.csv'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
df,pandas.read_csv('IMDB_Dataset.csv'),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
lb,sklearn.preprocessing.LabelBinarizer(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"train_reviews,test_reviews,train_sentiments,test_sentiments","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=42)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
"train_reviews,test_reviews,train_sentiments,test_sentiments","sklearn.model_selection.train_test_split(X,y,test_size=0.25,random_state=42)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
text,"re.sub(pattern,'',text)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
text,"re.sub(r'[^\w\s]','',text,re.UNICODE)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(penalty='l2',max_iter=500,C=1,random_state=42)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
svm,"sklearn.linear_model.SGDClassifier(loss='hinge',n_iter=500,random_state=42)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
mnb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
lr_bow_report,"sklearn.metrics.classification_report(test_sentiments,lr_bow_predict,target_names=['Positive','Negative'])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
lr_tfidf_report,"sklearn.metrics.classification_report(test_sentiments,lr_tfidf_predict,target_names=['Positive','Negative'])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
svm_bow_report,"sklearn.metrics.classification_report(test_sentiments,svm_bow_predict,target_names=['Positive','Negative'])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
svm_tfidf_report,"sklearn.metrics.classification_report(test_sentiments,svm_tfidf_predict,target_names=['Positive','Negative'])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
mnb_bow_report,"sklearn.metrics.classification_report(test_sentiments,mnb_bow_predict,target_names=['Positive','Negative'])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
mnb_tfidf_report,"sklearn.metrics.classification_report(test_sentiments,mnb_tfidf_predict,target_names=['Positive','Negative'])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
cm_bow,"sklearn.metrics.confusion_matrix(test_sentiments,lr_bow_predict,labels=[1,0])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
cm_tfidf,"sklearn.metrics.confusion_matrix(test_sentiments,lr_tfidf_predict,labels=[1,0])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
cm_bow,"sklearn.metrics.confusion_matrix(test_sentiments,svm_bow_predict,labels=[1,0])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
cm_tfidf,"sklearn.metrics.confusion_matrix(test_sentiments,svm_tfidf_predict,labels=[1,0])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
cm_bow,"sklearn.metrics.confusion_matrix(test_sentiments,mnb_bow_predict,labels=[1,0])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
cm_tfidf,"sklearn.metrics.confusion_matrix(test_sentiments,mnb_tfidf_predict,labels=[1,0])",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
lr_bow_score,"sklearn.metrics.accuracy_score(test_sentiments,lr_bow_predict)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
lr_tfidf_score,"sklearn.metrics.accuracy_score(test_sentiments,lr_tfidf_predict)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
svm_bow_score,"sklearn.metrics.accuracy_score(test_sentiments,svm_bow_predict)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
svm_tfidf_score,"sklearn.metrics.accuracy_score(test_sentiments,svm_tfidf_predict)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
mnb_bow_score,"sklearn.metrics.accuracy_score(test_sentiments,mnb_bow_predict)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
mnb_tfidf_score,"sklearn.metrics.accuracy_score(test_sentiments,mnb_tfidf_predict)",CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
path,os.getcwd(),CLUSTER_16,CLUSTER_3,CLUSTER_3,CLUSTER_6,CLUSTER_0
iris_dataset,sklearn.datasets.load_iris(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
iris_dataset['data'],iris_dataset['target'],random_state=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
iris_dataframe,"pandas.DataFrame(X_train,columns=iris_dataset.feature_names)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X_new,"numpy.array([[5,2.9,1,0.2]])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_filter_0To4,numpy.where(y_train<=4),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
test_filter_0To4,numpy.where(y_test<=4),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
train_filter_5To9,numpy.where(y_train>=5),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
test_filter_5To9,numpy.where(y_test>=5),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
data,"pandas.read_csv('/content/drive/MyDrive/AIML_NoteBooks/LabAndAssignments/R8/tweets.csv',encoding='latin1')",CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,random_state=1,test_size=0.25)",CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
nb,sklearn.naive_bayes.MultinomialNB(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_16,CLUSTER_12,CLUSTER_3,CLUSTER_4,CLUSTER_0
theta,random.randrange(18000),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
theta1,math.asin((number_of_ones/100),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
theta_guess,math.asin((number_of_ones/total_shots),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
iris,seaborn.load_dataset('iris'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(10,10,figsize=(8,8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xfit,"numpy.linspace(-1,11)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.decomposition.PCA(n_components=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
digits,sklearn.datasets.load_digits(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
b_b_data,pandas.read_csv('billboard.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
b_b_data['date.entered'],pandas.to_datetime(b_b_data['date.entered']),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(0,15,301)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""Automobile_data.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sns.scatterplot(x,"numpy.array(df[""engine-size""])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df[""engine-size_sqroot""]","numpy.array(df[""engine-size""])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df[""log_price""]","numpy.log(df[""price""])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sns.scatterplot(y,"df[""log_price""],x=numpy.log(np.array(df[""horsepower""])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df[""hp_log_sq""]","numpy.log(np.array(df[""horsepower""])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"df[""city-mpg_log""]","numpy.log(df[""city-mpg""])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
precision,"sklearn.metrics.precision_score(y_true,y_pred)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
recall,"sklearn.metrics.recall_score(y_true,y_pred)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
lista,"numpy.array([1,2,3,4,5])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
listb,"numpy.array([2,3,1,4,5])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({""A"":lista,
""B"":listb,
""C"":listc})",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df2['gpa_bin'],"pandas.cut(df2['gpa'],bins=6,labels=False,precision=1,include_lowest=True)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df2['gre_bin'],"pandas.cut(df2['gre'],bins=10,labels=False,precision=1,include_lowest=True)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dummy_prestige,"pandas.get_dummies(df2['prestige'],prefix=""prestige"")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df2,"pandas.read_csv(""gradschool.csv"")",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
new_neighborhoods,"pandas.DataFrame(row_list,columns=['PostalCode','Borough','Neighborhood'])",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
nearby_venues,pandas.DataFrame([itemforvenue_listinvenues_listforiteminvenue_list]),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
neighborhoods_venues_sorted,pandas.DataFrame(columns=columns),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
toronto_onehot,"pandas.get_dummies(toronto_venues[['VenueCategory']],prefix="""",prefix_sep="""")",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
coord_neighborhoods,"pandas.merge(new_neighborhoods,coordinates,left_on='PostalCode',right_on='PostalCode')",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
coordinates,pandas.read_csv('http://cocl.us/Geospatial_data'),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
tables,pandas.read_html(url),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(kclusters),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,requests.get(url),CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=kclusters,random_state=0)",CLUSTER_27,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(data,columns=['Index','Name','Organization','Type','Comment'])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(data,columns=['Index','Name','Organization','Type','Comment'])",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.read_excel(loc),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.read_excel(loc),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
num_complete_minibatches,math.floor(m/mini_batch_size),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
tic,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
toc,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
tic,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
toc,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
tic,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
toc,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
tic,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
toc,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
tic,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
toc,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
tic,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
toc,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
tic,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
toc,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
tic,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
toc,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
tic,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
toc,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
tic,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
toc,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
tic,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
toc,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
tic,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
toc,time.time(),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
ran_num,"random.randint(1,3000)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
ran_num,"random.randint(1,3000)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
image,numpy.array(image),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
images_array,numpy.zeros((num_image*(num_alphabets+2),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
Y,"numpy.zeros((num_columns,1)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
Y,numpy.eye(C),CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X.T,Y.T,test_size=0.2)",CLUSTER_23,CLUSTER_0,CLUSTER_5,CLUSTER_3,CLUSTER_7
z,"numpy.linspace(-5,5,200)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
x1s,"numpy.linspace(-0.2,1.2,100)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
x2s,"numpy.linspace(-0.2,1.2,100)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"x0,x1","numpy.meshgrid(
np.linspace(axes[0],axes[1],500)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"x1,x2","numpy.meshgrid(x1s,x2s)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
per_clf,"sklearn.linear_model.Perceptron(max_iter=1000,tol=1e-3,random_state=42)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
housing,sklearn.datasets.fetch_california_housing(),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"X_train_full,X_test,y_train_full,y_test","sklearn.model_selection.train_test_split(housing.data,housing.target,random_state=42)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
"X_train,X_valid,y_train,y_valid","sklearn.model_selection.train_test_split(X_train_full,y_train_full,random_state=42)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
run_id,"time.strftime(""run_%Y_%m_%d-%H_%M_%S"")",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
rnd_search_cv,"sklearn.model_selection.RandomizedSearchCV(keras_reg,param_distribs,n_iter=10,cv=3,verbose=2)",CLUSTER_29,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.axes(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,10,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=1,sharex=True,
gridspec_kw={'height_ratios':[4,1]})",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=1,sharex=True,
gridspec_kw={'height_ratios':[4,1]})",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=1,sharex=True,
gridspec_kw={'height_ratios':[4,1]})",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=1,sharex=True,
gridspec_kw={'height_ratios':[4,1]})",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,numpy.logspace(np.log10(np.min(10**features_df.M200c),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dark_positions,"numpy.vstack((dark.x_dmo,dark.y_dmo,dark.z_dmo)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
luminous_positions,"numpy.vstack((luminous.x_dmo,luminous.y_dmo,luminous.z_dmo)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
luminous_test_positions,"numpy.vstack((luminous_test.x_dmo,luminous_test.y_dmo,luminous_test.z_dmo)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
luminous_train_positions,"numpy.vstack((luminous_train.x_dmo,luminous_train.y_dmo,luminous_train.z_dmo)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"nluminous,edges,_","scipy.stats.binned_statistic(10**features_df.M200c,features_df.N_gals>0,
statistic='mean',
bins=bins)",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
interpolator,"scipy.interpolate.interp1d(nluminous,(edges[1:]+edges[:-1])",CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
features_df,pandas.read_hdf('/cosma6/data/dp004/dc-cues1/tng_dataframes/merged_dataframe.h5'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cp_data,"pandas.DataFrame(temp,columns=col)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
cp_col,"pandas.Series(tos,name='비교대상컬럼',index=list(range(len(tos)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mapping_table,"pandas.Series(pandas.Series(km_pre,index=list(range(1,141751)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
M2_set,"pandas.concat([pd.Series(km_pre,name='Peer_Group')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
per_table,"pandas.concat([cp_col,cp_data],axis=1)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('Bigcontest_Mission_NO1.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
temp,numpy.arange(100),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
temp,"numpy.vstack([temp,gr])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
k,"numpy.percentile(data[col],per_li)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
y_train,numpy.asarray(train_labels),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
y_test,numpy.asarray(test_labels),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
results,numpy.zeros((len(sequences),CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
prev,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
train,pandas.read_csv('equip_failures_training_set.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('equip_failures_test_set.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('equip_failures_training_set.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('equip_failures_test_set.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
decision_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
decision_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
decision_tree,sklearn.tree.DecisionTreeClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lreg,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lreg,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lreg,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(1),CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(1),CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_1
random_node,random.choice(g.nodes(),CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(columns=['ds','y'],data=wt[[""Date"",""Temperature(°F)",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.merge(df2,forecast,on=""ds"",how=""inner"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
wt,"pandas.read_csv(""DWeather.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
wt['Date'],pandas.to_datetime(wt['Date']),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(figsize=figsize),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cost,numpy.squeeze(cost),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegressionCV(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
x,"numpy.array([0,1,1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
w,"numpy.array([0.02,0.03,0.03])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dataset,"numpy.array([[0,0,0],[0,1,1],[1,0,1],[1,1,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
w,"numpy.array([[0.03],[0.03],[0.02]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
yhat,"numpy.where(h>0,1,0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
yhat,"numpy.where(h>0,1,0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
yhat,"numpy.where(h>0,1,0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
yhat,"numpy.where(h>0,1,0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.concatenate((X,-np.ones((nData,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.concatenate((X,-np.ones((nData,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.concatenate((X,-np.ones((nData,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
X,"numpy.concatenate((X,-np.ones((nData,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
h,"numpy.dot(x,w)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
h,"numpy.dot(X,w)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
h,"numpy.dot(X,w)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
h,"numpy.dot(X,w)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
h,"numpy.dot(X,w)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
nData,numpy.shape(X),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
nData,numpy.shape(X),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
nIn,numpy.shape(X),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
nOut,numpy.shape(y),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
nData,numpy.shape(X),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
nIn,numpy.shape(X),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
nOut,numpy.shape(y),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
nData,numpy.shape(X),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(raw_data,delimiter="","")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dataset,"numpy.loadtxt(raw_data,delimiter="","")",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([0,1,2,2,1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
correct_scores,"numpy.asarray([
[-0.81233741,-1.27654624,-0.70335995],
[-0.17129677,-1.18803311,-0.47310444],
[-0.51590475,-1.01354314,-0.8504215],
[-0.15419291,-0.48629638,-0.52901952],
[-0.00618733,-0.12435261,-0.15226949]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
play_data,pandas.read_csv('data/tennis.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('data/data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy_1,numpy.zeros((decision_tree.tree_.max_depth-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
depth,numpy.zeros((decision_tree_g.tree_.max_depth-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy_2,numpy.zeros((decision_tree_g.tree_.max_depth-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
class_names,numpy.unique(y_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
class_names,numpy.unique(y_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
decision_tree_clfr,"sklearn.tree.DecisionTreeClassifier(criterion=heuristic,max_depth=tree_depth)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
decision_tree_g,sklearn.tree.DecisionTreeClassifier(criterion=heuristic_g),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy_1[x-startingPoint],"sklearn.metrics.accuracy_score(y_test,predTree)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy_2[x-startingPoint],"sklearn.metrics.accuracy_score(y_test,predTree)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=3)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""https://raw.githubusercontent.com/Thinkful-Ed/data-201-resources/master/ESS_practice_data/ESSdata_Thinkful.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv('breast_cancer_original.txt',header=None)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
is_long,pandas.Series(booleans),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
movies,pandas.read_csv('http://bit.ly/imdbratings'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""Resources/cities.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
s,requests.session(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,"re.search(r'data\-h\=""([a-f0-9]*)",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
hourly_ticks,numpy.arange(24),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
weekend,"numpy.where(datacopy.index.weekday<5,'Weekday','Weekend')",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
weekend,"numpy.where(train_slice.index.weekday<5,'Weekday','Weekend')",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
rmse,"numpy.sqrt(-cross_val_score(model,train_x,train_y,scoring=""neg_mean_squared_error"",cv=cv)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
space,"numpy.hstack((space,colval)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
train_x,pandas.DataFrame(data=train_space.toarray(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
traindata.index,pandas.DatetimeIndex(traindata.index),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
testdata.index,pandas.DatetimeIndex(testdata.index),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
data,"pandas.concat([traindata,testdata])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
train_x,"pandas.merge_asof(train_x,train_ohc,left_index=True,right_index=True)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
train_x,"pandas.merge_asof(train_x,train_norm,left_index=True,right_index=True)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
train_x,"pandas.merge_asof(train_x,train_week,left_index=True,right_index=True)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
test_x,"pandas.merge_asof(test_x,test_ohc,left_index=True,right_index=True)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
test_x,"pandas.merge_asof(test_x,test_norm,left_index=True,right_index=True)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
test_x,"pandas.merge_asof(test_x,test_week,left_index=True,right_index=True)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
traindata,"pandas.read_csv(os.path.join(data_folder,""train.csv"")",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
testdata,"pandas.read_csv(os.path.join(data_folder,""test.csv"")",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2,figsize=(25,15)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
train[cc],sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
train[cc],sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
oneenc,sklearn.preprocessing.OneHotEncoder(sparse=True),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
by_time['hour_coef'],sklearn.preprocessing.MinMaxScaler(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
colval,sklearn.preprocessing.MinMaxScaler(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
train_space,"scipy.sparse.hstack((train_space,train_a)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
cv,"sklearn.model_selection.KFold(n_splits=3,shuffle=True,random_state=42)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
ENet,sklearn.linear_model.ElasticNet(alpha=0.001),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
lasso,sklearn.linear_model.Lasso(alpha=0.001),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
krr,"sklearn.kernel_ridge.KernelRidge(alpha=1,kernel='polynomial',degree=3)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
rfr,"sklearn.ensemble.RandomForestRegressor(n_estimators=3000,n_jobs=-1)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
GBoost,"sklearn.ensemble.GradientBoostingRegressor(n_estimators=3000,learning_rate=0.05,max_depth=4,max_features='sqrt',
min_samples_leaf=15,min_samples_split=10,loss='huber')",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=2),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
image_features_encoded,pandas.DataFrame(encode_images),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
nearest_n,pandas.DataFrame(indices),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
final_train,"pandas.get_dummies(final_train,columns=['Category','Fit','Material','Season','Collection'])",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
train,pandas.read_csv('train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
product,pandas.read_csv('product_attributes.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('../test_nFNPSyV.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
sample,pandas.read_csv('../sample_submission_qfCnaKZ.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
train['OrderDate'],pandas.to_datetime(train['OrderDate']),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
images1,numpy.array(images),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
image,"numpy.expand_dims(image,axis=0)",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
nbrs,"sklearn.neighbors.NearestNeighbors(n_neighbors=25,algorithm='auto',metric='cosine')",CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_10,CLUSTER_0,CLUSTER_0
gongcan,"pandas.read_csv('d:/lcell0303.csv',encoding='gbk')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv('d:/投诉质差待查.csv',encoding='gbk')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv('G:/1-规划/1其他工作输出/20200323庄璇6大场景poi/场景.csv',encoding='gbk')",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('../data/movies_metadata.csv'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df['release_date'],"pandas.to_datetime(df['release_date'],errors='coerce')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
digits,sklearn.datasets.load_digits(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_tsne,sklearn.manifold.TSNE(n_components=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
res,matplotlib.pyplot.hist(flattened.ravel(),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
img,matplotlib.pyplot.imread('hand.jpeg'),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
ans,matplotlib.pyplot.imshow(z_2d.eval(),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
res,matplotlib.pyplot.imshow(convolved_img.eval(),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
res,matplotlib.pyplot.plot(z_2d.eval(),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
peaks,"numpy.zeros((2,L)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
ax,matplotlib.pyplot.subplot(111),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"peaks[0,i]","scipy.signal.argrelextrema(weightfore9[i],np.greater)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"peaks[1,i]","scipy.signal.argrelextrema(weightback9[i],np.greater)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('datasets/Categorical.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(4),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
train_X,"sklearn.preprocessing.normalize(train_X,axis=0)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
test_X,"sklearn.preprocessing.normalize(test_X,axis=0)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
lr_clf,sklearn.linear_model.LogisticRegression(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
rfe_lr,"RFECV(estimator=lr_clf,cv=sklearn.model_selection.StratifiedKFold(3)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"fpr_lr,tpr_lr,thresholds","sklearn.metrics.roc_curve(y_true,y_pred_prob[:,1])",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
"fpr_lr,tpr_lr,thresholds","sklearn.metrics.roc_curve(y_true,y_pred_prob[:,1])",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
roc_auc,"sklearn.metrics.auc(fpr_lr,tpr_lr)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
roc_auc,"sklearn.metrics.auc(fpr_lr,tpr_lr)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_labels,pandas.DataFrame(y_train),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('digit-recognizer/train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
i,numpy.argmax(accuracies),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"plt.imshow(X_train[i].reshape(28,28),cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"plt.imshow(X_test[i].reshape(28,28),cmap",matplotlib.pyplot.get_cmap('gray'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"Xval_train,Xval_test,yval_train,y_val_test","sklearn.model_selection.train_test_split(X_train_lowdim,y_train,test_size=0.1,random_state=45)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
svc_model,sklearn.svm.SVC(random_state=42),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=k),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=kVals[i]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df2,pandas.get_dummies(df),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('mushrooms.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,mesh_step_size)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
verticalalignment,"'center',transform=matplotlib.pyplot.gca()",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(pca,y,random_state=0)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.neighbors.KNeighborsClassifier(n_neighbors=20),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.tree.DecisionTreeClassifier(max_depth=3),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.svm.SVC(kernel='linear'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='rbf',C=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.svm.SVC(kernel='rbf',C=10)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.neural_network.MLPClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('tmdb-movies.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
trainData,pandas.merge(pd.read_csv('/data/topic1/train_x.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
trainData,"pandas.merge(trainData,pd.read_csv('/data/topic1/feature_countapppv.csv')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
trainData,"pandas.merge(trainData,pd.read_csv('/data/topic1/feature_countapp.csv')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
trainData,"pandas.merge(trainData,pd.read_csv('/data/topic1/feature_countoutprovince.csv')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test",sklearn.model_selection.train_test_split(trainData.drop([cn('用户标识'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
grd,"sklearn.ensemble.GradientBoostingClassifier(n_estimators=100,learning_rate=0.1,max_depth=8,max_features='sqrt',subsample=0.9)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
enc,sklearn.preprocessing.OneHotEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
grd_enc,sklearn.preprocessing.OneHotEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
auc,"sklearn.metrics.roc_auc_score(y_test,ypred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cm,numpy.array(cm_df),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
bins,"numpy.array([0,0.5,1])",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
cm,"numpy.histogram2d(actual_values,pred_values,bins=bins)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
cm_df,pandas.DataFrame(results_log.pred_table(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
cm_df,pandas.DataFrame(cm[0]),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
raw_data,pandas.read_csv('2.02.Binarypredictors.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('2.03.Testdataset.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
samples,"numpy.array(
[[-1.0,-5.0],
[-0.81,-4.1],
[-0.8,-4.0],
[-0.5,0.0],
[0.2,-1.9],
[0.8,4.0],
[0.81,4.1],
[1.0,5.0]])",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
discretized_samples,"numpy.array([discretize(sample,grid)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
state_samples,numpy.array([env.observation_space.sample(),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
discretized_state_samples,"numpy.array([discretize(sample,state_grid)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
self.q_table,"numpy.zeros(shape=(self.state_size+(self.action_size,)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
self.last_action,numpy.argmax(self.q_table[self.last_state]),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
action,numpy.argmax(self.q_table[state]),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
action,numpy.argmax(self.q_table[state]),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
q_actions,"numpy.argmax(q_table,axis=2)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
avg_score,numpy.mean(scores[-100:]),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
grid_extended,numpy.hstack((np.array([low]),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
locs,"numpy.stack(grid_centers[i,discretized_samples[:,i]]foriinrange(len(grid)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
rolling_mean,pandas.Series(scores),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
img,matplotlib.pyplot.imshow(env.render(mode='rgb_array'),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
img,matplotlib.pyplot.imshow(env.render(mode='rgb_array'),CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_18,CLUSTER_9,CLUSTER_9,CLUSTER_0,CLUSTER_0
openArray,"numpy.array([1,2,3,3],dtype='float64')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
highArray,"numpy.array([2,3,4,3],dtype='float64')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
lowArray,"numpy.array([0.5,1.5,2.5,1.5],dtype='float64')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
closeArray,"numpy.array([1.5,2.5,3.5,2.5],dtype='float64')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
EMA,"pandas.Series(ta.EMA(closeArray,2)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
candleDF,pandas.concat([pd.Series(openArray),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
timeIndex,"pandas.date_range(""20180808"",periods=len(closeArray)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"fig,(ax)","matplotlib.pyplot.subplots(1,1,sharex=True,figsize=(15,7)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
r,"requests.get(""http://bbs.fxdayu.com"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
rhos_gas,"numpy.array([rho_gas(rtws,cp,M200)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
rhos_r200,"numpy.array([rho_gas(1,c,Mvir)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
Rbars,numpy.empty_like(masses),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
rhos_Rbar,numpy.empty_like(masses),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
loc,"numpy.argmin([np.abs(mt-M_gas(rtws[:trial_loc]*R200s[idx],rhos_gas[idx][:trial_loc])",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
masses,"numpy.logspace(8,9.65,21)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
colourvals,"numpy.linspace(0.,1.,len(rhos_gas)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
rtws,"numpy.geomspace(1e-3,30,1000)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
"rtws,rhos_gas,_",numpy.hsplit(np.loadtxt('../output/rhos_gas_prada_relhic.dat'),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
log_nh_analytic,"numpy.intersect1d(log_nh_approx,log_nh_valid)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
"log_nh,log_T","numpy.loadtxt('../data/nH_T_relhic.dat',unpack=True)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
"log_nH,log_T",numpy.loadtxt('../data/nH_T_{:s}.dat'.format(model_str.lower(),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
"ms,cs",numpy.loadtxt('../data/Mvir_c_{:s}.dat'.format(model_str.title(),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
"halomass,barymass","numpy.loadtxt(""../data/baryfrac.dat"",unpack=True)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
P_interp,"scipy.interpolate.InterpolatedUnivariateSpline(rtws,P_idx)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.__logTfunc,"scipy.interpolate.UnivariateSpline(log_nH,log_T,s=0.001,k=3)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
self.__interp,"scipy.interpolate.interp1d(ms,cs)",CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_2,CLUSTER_8,CLUSTER_5,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(""/data/harris.csv"")",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
future_dates_df,"pandas.DataFrame(index=future_dates[1:],
columns=df.columns)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
future_df,"pandas.concat([df,future_dates_df])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('monthly-milk-production-pounds-p.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df['Month'],pandas.to_datetime(df['Month']),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,8)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
per_game_df,"pandas.DataFrame(per_game_data,columns=per_game_cols)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
misc_df,"pandas.DataFrame(misc_data,columns=misc_cols)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
shooting_df,"pandas.DataFrame(shooting_data,columns=shooting_cols)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
tables,pandas.read_html(sample_url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
select,"pandas.concat([seattle,renton,bellevue,kent,redmond,kirkland,auburn,sammamish,federal_way,issaquah])",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
house,"pandas.read_csv(""kc_house_data.csv"")",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
house.date,"pandas.to_datetime({'year':house.date.str[:4],'month':house.date.str[4:6],'day':house.date.str[6:8]})",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
ax,"seaborn.boxplot(x=""city"",y=""price"",data=one,palette=""Set3"")",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
ax,"seaborn.boxplot(x=""city"",y=""price"",
data=two,palette=""Set3"")",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
ax,"seaborn.boxplot(x=""city"",y=""price"",
data=three,palette=""Set3"")",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
ax,"seaborn.boxplot(x=""city"",y=""price"",
data=four,palette=""Set3"")",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
ax,"seaborn.boxplot(x=""city"",y=""price"",
data=five,palette=""Set3"")",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
g,"seaborn.pairplot(house[['bathrooms','bedrooms','sqft_above','price','grade','sqft_living','sqft_living15']],hue='bedrooms',palette='tab20',size=6)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
result,"re.search(""major_city='(.*)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
result,"re.search(""major_city='(.*)",CLUSTER_8,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_0
texts,numpy.array(file_texts.read(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
scores_str,numpy.array(file_scores.read(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
scores,numpy.array([int(elem),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
text_scores,numpy.array([word2score[elem]forelemintokenizedifeleminword2score]),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
text_scores,numpy.array([word2score[elem]forelemintokenizedifeleminword2score]),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
text_scores,numpy.array([word2score[elem]foreleminresultifeleminword2score]),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
match,"re.search(""\w+"",text)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
match,"re.search(""\w"",text[ind])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
words,"re.split(""\W+"",text)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
model,sklearn.linear_model.PassiveAggressiveRegressor(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
model,sklearn.linear_model.Ridge(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
model,sklearn.linear_model.SGDClassifier(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
model,sklearn.linear_model.SGDClassifier(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
model,sklearn.linear_model.SGDRegressor(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
clf,"sklearn.neural_network.MLPRegressor(solver='lbfgs',alpha=1e-5,
hidden_layer_sizes=(5,3)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
X,"numpy.array([91,82,1])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
W_,numpy.transpose(W[i]),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
correct_out,"numpy.array([[1.49834967,1.70660132,1.91485297],
[3.25553199,3.5141327,3.77273342]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
correct_out,"numpy.array([[0.,0.,0.,0.,],
[0.,0.,0.04545455,0.13636364,],
[0.22727273,0.31818182,0.40909091,0.5,]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
correct_scores,"numpy.asarray(
[[11.53165108,12.2917344,13.05181771,13.81190102,14.57198434,15.33206765,16.09215096],
[12.05769098,12.74614105,13.43459113,14.1230412,14.81149128,15.49994135,16.18839143],
[12.58373087,13.20054771,13.81736455,14.43418138,15.05099822,15.66781506,16.2846319]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y,"numpy.asarray([0,5,1])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[0.1406,0.20738947,0.27417895,0.34096842,0.40775789],
[0.47454737,0.54133684,0.60812632,0.67491579,0.74170526],
[0.80849474,0.87528421,0.94207368,1.00886316,1.07565263],
[1.14244211,1.20923158,1.27602105,1.34281053,1.4096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_velocity,"numpy.asarray([
[0.5406,0.55475789,0.56891579,0.58307368,0.59723158],
[0.61138947,0.62554737,0.63970526,0.65386316,0.66802105],
[0.68217895,0.69633684,0.71049474,0.72465263,0.73881053],
[0.75296842,0.76712632,0.78128421,0.79544211,0.8096]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.39223849,-0.34037513,-0.28849239,-0.23659121,-0.18467247],
[-0.132737,-0.08078555,-0.02881884,0.02316247,0.07515774],
[0.12716641,0.17918792,0.23122175,0.28326742,0.33532447],
[0.38739248,0.43947102,0.49155973,0.54365823,0.59576619]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_cache,"numpy.asarray([
[0.5976,0.6126277,0.6277108,0.64284931,0.65804321],
[0.67329252,0.68859723,0.70395734,0.71937285,0.73484377],
[0.75037008,0.7659518,0.78158892,0.79728144,0.81302936],
[0.82883269,0.84469141,0.86060554,0.87657507,0.8926]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_next_w,"numpy.asarray([
[-0.40094747,-0.34836187,-0.29577703,-0.24319299,-0.19060977],
[-0.1380274,-0.08544591,-0.03286534,0.01971428,0.0722929],
[0.1248705,0.17744702,0.23002243,0.28259667,0.33516969],
[0.38774145,0.44031188,0.49288093,0.54544852,0.59801459]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_v,"numpy.asarray([
[0.69966,0.68908382,0.67851319,0.66794809,0.65738853,],
[0.64683452,0.63628604,0.6257431,0.61520571,0.60467385,],
[0.59414753,0.58362676,0.57311152,0.56260183,0.55209767,],
[0.54159906,0.53110598,0.52061845,0.51013645,0.49966,]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
expected_m,"numpy.asarray([
[0.48,0.49947368,0.51894737,0.53842105,0.55789474],
[0.57736842,0.59684211,0.61631579,0.63578947,0.65526316],
[0.67473684,0.69421053,0.71368421,0.73315789,0.75263158],
[0.77210526,0.79157895,0.81105263,0.83052632,0.85]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_test_pred,numpy.argmax(model.loss(X_test),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
y_val_pred,numpy.argmax(model.loss(X_val),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
mean_image,"numpy.mean(X_train,axis=0)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-0.1,0.5,num=input_size)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.2,0.3,num=weight_size)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
b,"numpy.linspace(-0.3,0.1,num=output_dim)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(-0.5,0.5,num=12)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['W1'],"numpy.linspace(-0.7,0.3,num=D*H)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['b1'],"numpy.linspace(-0.1,0.9,num=H)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['W2'],"numpy.linspace(-0.3,0.4,num=H*C)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
model.params['b2'],"numpy.linspace(-0.9,0.1,num=C)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
X,"numpy.linspace(-5.5,4.5,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
cache,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
w,"numpy.linspace(-0.4,0.6,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
dw,"numpy.linspace(-0.6,0.4,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
m,"numpy.linspace(0.6,0.9,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
v,"numpy.linspace(0.7,0.5,num=N*D)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
t,"numpy.arange(-length/2,(length-dt)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
t,"numpy.arange(0,duration,dt)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
correlated,"numpy.correlate(field,sweep,mode='valid')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
wavelet,"numpy.correlate(sweep,sweep,mode='same')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
syn,"numpy.convolve(rc,w,mode='same')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
field,"numpy.convolve(rc,sweep)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
rc,numpy.nan_to_num(rc),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
wavelet*,numpy.hamming(600),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"t,w","
matplotlib.pyplot.plot(t,w)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
sweep,"scipy.signal.chirp(t,4,duration,60)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
window,"scipy.signal.tukey(sweep.size,alpha=0.1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
returns,pandas.DataFrame(),CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
bank_stocks,"pandas.concat([BAC,C,GS,JPM,MS,WFC],axis=1,keys=tickers)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,"datetime.datetime(2006,1,1)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,"datetime.datetime(2016,1,1)",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
ifi+11<len(datas_mensais)andmath.floor(datas_mensais[i]),=math.floor(datas_mensais[i+11]),CLUSTER_7,CLUSTER_4,CLUSTER_1,CLUSTER_0,CLUSTER_1
data,pandas.read_csv('data/train.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('data/testA.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
dict_vec,sklearn.feature_extraction.DictVectorizer(sparse=False),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.ExtraTreesRegressor(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
beta,"numpy.array([1,0.1,10])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
arparams,"numpy.array([.75,-.25])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
maparams,"numpy.array([.65,.35])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
y,"numpy.dot(X,beta)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
y_true,"numpy.dot(X,beta)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,10,100)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,20,nsample)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
X,"numpy.column_stack((x,x**2)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
X,"numpy.column_stack((x,np.sin(x)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
y,"pandas.Series(y,index=dates)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,math.sqrt(hypo),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,math.sqrt(c-(a**2),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,math.sqrt(hypo),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,math.sqrt(25),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,math.sqrt(hypo),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,math.sqrt(c-(a**2),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
x,math.sqrt(hypo),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,math.sqrt(c-(a**2),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
temp,"pandas.merge(mean_df,mode_df,how='left',on=['Cabin'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
temp,"pandas.merge(temp,median_df,how='left',on=['Cabin'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df,temp,how='left',on=['Cabin'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(data_path+'titanic_train.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
MMEncoder,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
estimator,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
rho_range,numpy.arange(np.around(np.amax(min_rho),CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
n_arr,"numpy.array([10,50,100,300,500])",CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
rho_matrix,"numpy.array([[0,0.1],[0,-0.1]])",CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
AL,"numpy.repeat(numpy.repeat(AL,n//k,0)",CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
BL,"numpy.repeat(numpy.repeat(BL,n//k,0)",CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
rho,"numpy.repeat(numpy.repeat(rho_matrix,n//k,0)",CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
blocks,numpy.repeat(np.arange(k),CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
blocks,numpy.repeat(np.arange(k),CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
blocks,numpy.repeat(np.arange(k),CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
min_rho,numpy.maximum(-np.sqrt(AL*BL/((1-AL),CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
max_rho,numpy.minimum(np.sqrt(AL*(1-BL),CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
n_arr,"numpy.linspace(10,100,10,dtype=int)",CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
n_arr,"numpy.linspace(10,100,10,dtype=int)",CLUSTER_8,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ProbeData,"pandas.read_csv(""Partition6467ProbePoints.csv"",header=None,names=[""ID"",""DateTime"",""SourceCode"",""Lat"",""Lon"",""Alt"",""Speed"",""Heading""])",CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
LinkData,"pandas.read_csv(""Partition6467LinkData.csv"",header=None,names=[""LinkID"",""RefID"",""NRefID"",""Length"",""Class"",""DOT"",""SpeedCat"",""FSpeedLim"",""TSpeedLim"",""FLanes"",""TLanes"",""Digitized"",""Urban"",""TimeZone"",""ShapeInfo"",""CurvatureInfo"",""SlopeInfo""])",CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
ProbeData['DateTime'],"pandas.to_datetime(ProbeData['DateTime'],format='%m/%d/%Y%I:%M:%S%p')",CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,json.load(data_file),CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
waterpred,"pandas.DataFrame({'probability':y_pred_prob_new,'actual':y_test})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
WaterX,"pandas.concat([management_dummies,region_dummies,waterpoint_dummies],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
waterpointregionstatus,"pandas.crosstab(waterjoined.region,waterjoined.status_group)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
waterpointtype,"pandas.crosstab(waterjoined.waterpoint_type,waterjoined.status_group)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
management_dummies,"pandas.get_dummies(waterjoined.management,prefix='Management')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
region_dummies,"pandas.get_dummies(waterjoined.region,prefix='Region')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
waterpoint_dummies,"pandas.get_dummies(waterjoined.waterpoint_type,prefix='WaterPoint')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
waterindep,"pandas.read_csv('waterindependent.csv',header=0,index_col=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
waterdep,"pandas.read_csv('waterdependent.csv',header=0,index_col=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pred_prob_new,numpy.sqrt(y_pred_prob),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(C=1e9),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
confusionmatrix,"sklearn.metrics.confusion_matrix(y_test,y_pred_class)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,y_pred_prob)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
prev,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
st,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
st,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
start,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
st,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
st,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
st,datetime.datetime.now(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
df,"pandas.read_csv('data.csv',sep=',',
names=['movie','user','rating','date'])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
train_df,"pandas.read_csv(""train.csv"",parse_dates=['date'])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
test_df,"pandas.read_csv(""test.csv"")",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
movie_titles,"pandas.read_csv(""movie_titles.csv"",sep=',',header=None,
names=['movie_id','year_of_release','title'],verbose=True,
index_col='movie_id',encoding=""ISO-8859-1"")",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
reg_train,"pandas.read_csv('reg_train.csv',names=['user','movie','GAvg','sur1','sur2','sur3','sur4','sur5','smr1','smr2','smr3','smr4','smr5','UAvg','MAvg','rating'],header=None)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
reg_test_df,"pandas.read_csv('reg_test.csv',names=['user','movie','GAvg','sur1','sur2','sur3','sur4','sur5',
'smr1','smr2','smr3','smr4','smr5',
'UAvg','MAvg','rating'],header=None)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
models,"pandas.read_csv('small_sample_results.csv',index_col=0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
df.date,pandas.to_datetime(df.date),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
actual,numpy.array([pred.r_uiforpredinpredictions]),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
pred,numpy.array([pred.estforpredinpredictions]),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
mape,numpy.mean(np.abs((y_true-y_pred),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
mape,numpy.mean(np.abs(pred-actual),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
mask,"numpy.logical_and(np.isin(row_ind,sample_users)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
rmse,numpy.sqrt(np.mean([(y_true[i]-y_pred[i]),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
rmse,numpy.sqrt(np.mean((pred-actual),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
movie_ids,numpy.unique(m_m_sim_sparse.nonzero(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
users,numpy.unique(row_ind),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
movies,numpy.unique(col_ind),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
fig,plt.figure(figsize=matplotlib.pyplot.figaspect(.5),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
fig,plt.figure(figsize=matplotlib.pyplot.figaspect(.5),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
fig,plt.figure(figsize=matplotlib.pyplot.figaspect(.45),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
"fig,(ax1,ax2)","plt.subplots(nrows=1,ncols=2,figsize=matplotlib.pyplot.figaspect(.5)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
fig,matplotlib.pyplot.figure(figsize=plt.figaspect(.5),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
fig,matplotlib.pyplot.figure(figsize=plt.figaspect(.5),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
fig,matplotlib.pyplot.figure(figsize=plt.figaspect(.45),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
ax1,matplotlib.pyplot.subplot(121),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
ax2,matplotlib.pyplot.subplot(122),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=plt.figaspect(.5)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
train_sparse_matrix,"scipy.sparse.csr_matrix((train_df.rating.values,(train_df.user.values,
train_df.movie.values)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
test_sparse_matrix,"scipy.sparse.csr_matrix((test_df.rating.values,(test_df.user.values,
test_df.movie.values)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
sample_sparse_matrix,"scipy.sparse.csr_matrix((ratings[mask],(row_ind[mask],col_ind[mask])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
"row_ind,col_ind,ratings",scipy.sparse.find(sparse_matrix),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
"sample_train_users,sample_train_movies,sample_train_ratings",scipy.sparse.find(sample_train_sparse_matrix),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
"sample_test_users,sample_test_movies,sample_test_ratings",scipy.sparse.find(sample_test_sparse_matrix),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
train_sparse_matrix,scipy.sparse.load_npz('train_sparse_matrix.npz'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
test_sparse_matrix,scipy.sparse.load_npz('test_sparse_matrix.npz'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
m_m_sim_sparse,"scipy.sparse.load_npz(""m_m_sim_sparse.npz"")",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
sample_train_sparse_matrix,scipy.sparse.load_npz(path),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
sample_test_sparse_matrix,scipy.sparse.load_npz(path),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
skf,"sklearn.model_selection.StratifiedKFold(n_splits=folds,shuffle=True,random_state=1001)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
skf,"sklearn.model_selection.StratifiedKFold(n_splits=folds,shuffle=True,random_state=1001)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
skf,"sklearn.model_selection.StratifiedKFold(n_splits=folds,shuffle=True,random_state=1001)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
skf,"sklearn.model_selection.StratifiedKFold(n_splits=folds,shuffle=True,random_state=1001)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
skf,"sklearn.model_selection.StratifiedKFold(n_splits=folds,shuffle=True,random_state=1001)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
random_search,"sklearn.model_selection.RandomizedSearchCV(xgb,param_distributions=params,n_iter=param_comb,scoring='neg_mean_squared_error',n_jobs=4,cv=skf.split(x_train,y_train)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
random_search,"sklearn.model_selection.RandomizedSearchCV(xgb,param_distributions=params,n_iter=param_comb,scoring='neg_mean_squared_error',n_jobs=4,cv=skf.split(x_train,y_train)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
random_search,"sklearn.model_selection.RandomizedSearchCV(xgb,param_distributions=params,n_iter=param_comb,scoring='neg_mean_squared_error',n_jobs=4,cv=skf.split(x_train,y_train)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
random_search,"sklearn.model_selection.RandomizedSearchCV(xgb,param_distributions=params,n_iter=param_comb,scoring='neg_mean_squared_error',n_jobs=4,cv=skf.split(x_train,y_train)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
random_search,"sklearn.model_selection.RandomizedSearchCV(xgb,param_distributions=params,n_iter=param_comb,scoring='neg_mean_squared_error',n_jobs=4,cv=skf.split(x_train,y_train)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_9,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_2,CLUSTER_6,CLUSTER_4,CLUSTER_0,CLUSTER_1
response,requests.get(target_url),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
response,requests.get(first_link),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
response,requests.get(url),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(arrange_data),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
img,numpy.array(img),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
img,numpy.array(img),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
radnum,"random.randint(10000,50000)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
d,"datetime.datetime(month=2,year=2012,day=13)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
july_4th,"datetime.datetime(month=7,day=4,year=todays_date.year)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
dzis,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
dzis,datetime.datetime.now(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
todays_date,datetime.datetime.today(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
dt,datetime.datetime.today(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
birth,"datetime.date(year=2000,month=5,day=28)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
dt,"datetime.date(year=2018,month=12,day=31)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
dzis,datetime.date.today(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
dt_now,datetime.date.today(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
dt,datetime.timedelta(weeks=4),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
input_u,os.getcwd(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
intervals,numpy.arange(len(publishing_hour),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mask,"numpy.array(Image.open(requests.get('http://www.clker.com/cliparts/O/i/x/Y/q/P/yellow-house-hi.png',stream=True)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
us_videos_copy['likes_log'],numpy.log(us_videos['likes']+1),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
us_videos_copy['dislikes_log'],numpy.log(us_videos['dislikes']+1),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
us_videos_copy['views_log'],numpy.log(us_videos['views']+1),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
us_videos_copy['comment_count_log'],numpy.log(us_videos['comment_count']+1),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
us_videos,pandas.read_csv('USvideos.csv'),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
us_videos_categories,pandas.read_json('US_category_id.json'),CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
us_videos['trending_date'],"pandas.to_datetime(us_videos['trending_date'],errors='ignore',format='%y.%d.%m')",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
publish_time,"pandas.to_datetime(us_videos['publish_time'],format='%Y-%m-%dT%H:%M:%S.%fZ')",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"sns.heatmap(us_videos.corr(),annot","True,xticklabels=h_labels,yticklabels=h_labels,cmap=seaborn.cubehelix_palette(as_cmap=True)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
g1,"seaborn.distplot(us_videos_copy['views_log'],fit=norm)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
g2,"seaborn.distplot(us_videos_copy['comment_count_log'],fit=norm)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
g3,"seaborn.distplot(us_videos_copy['likes_log'],fit=norm)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
g4,"seaborn.distplot(us_videos_copy['dislikes_log'],fit=norm)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(20,10)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,6)",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tStart,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
tStart,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
self.df,"pandas.concat([real_df,fake_df])",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
val_df,"pandas.concat([real_df,fake_df])",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
metadata_df,"pandas.read_csv(""./data/metadata.csv"")",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
train_data_matrix,"numpy.zeros((n_users,n_items)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_data_matrix,"numpy.zeros((n_users,n_items)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
X_pred,"numpy.dot(numpy.dot(u,s_diag_matrix)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
s_diag_matrix,numpy.diag(s),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.merge(df,movie_titles,on='item_id')",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('u.data',sep='\t',names=column_names)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
movie_titles,"pandas.read_csv(""Movie_Id_Titles"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
archives,pandas.concat(archives),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
replies,"pandas.merge(from_users,to_users,how='inner',
right_on='In-Reply-To',left_index=True,
suffixes=['_original','_response'])",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
repliers_count,collections.defaultdict(int),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
array1,"numpy.array([1,2,3,4])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
array1,"numpy.array([1,2,3,4])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
array1,"numpy.array([10,20,30,40])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
array2,"numpy.array([1,2,3,4])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
np_height,numpy.array(height),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
np_weight,numpy.array(weight),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
bike_analysis_df,pandas.DataFrame(count_cat),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
obesity_analysis_df,pandas.DataFrame(count_cat),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df3,"pandas.DataFrame({'Bike_Score':Bike_Score,'Population':y,'city':pop_series})",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dfxx,"pandas.concat(obesity_data_rn[:5],obesity_data_rn[136:137])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_table_to_use['TotalPoints'],"pandas.cut(data_table_to_use[""TotalPoints""],bins_bike,labels=bins_name)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data_table_to_use['ObesityRank'],"pandas.cut(data_table_to_use[""ObesityRank""],bins_obesity,labels=bins_obesity_name)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
merge_data,"pandas.merge(bike_df,obesity_data_df,on=""City_Alt"",how=""inner"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
bike_data,"pandas.read_csv(places_for_bikes,encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
obesity_data,"pandas.read_csv(obesity_raw_data,encoding=""ISO-8859-1"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_axis,numpy.arange(len(obesity_percentage),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
x_axis,numpy.arange(len(obesity_percentage),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
tmp,"pandas.DataFrame(lines,columns=[""mse"",""date""])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
tmp,"pandas.DataFrame(lines,columns=[""mse"",""date""])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
tmp,"pandas.DataFrame(lines,columns=[""mse"",""date""])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
output,pandas.DataFrame(index=None),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
tmp,"pandas.DataFrame(lines,columns=[""mse"",""date""])",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
output,pandas.DataFrame(index=None),CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""/data/henry6/gina/msid.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv(""/home/sf522915/ALL_EPIC_imaging_exams.csv"")",CLUSTER_1,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_1
list_examples,"os.listdir(relative_path+""/""+data_folder)",CLUSTER_23,CLUSTER_8,CLUSTER_6,CLUSTER_0,CLUSTER_1
tic,datetime.datetime.now(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
THIS_DIR,os.getcwd(),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
daytype,"random.choice(np.arange(0,self.NO_OF_DAYTYPE)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
solar_radiation,"pandas.read_csv(sfile,skiprows=4,encoding='shift_jisx0213',usecols=[4])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
seedlist,"numpy.array([161,314,228,271828,230,4271031,5526538,6610165,9849252,34534,73422,8765])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
bin_edges,"numpy.array([0,3.5,6.5,9.0,12.5,15.5,18.5,22.0,25,28])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
self.memory,"numpy.zeros((MEMORY_CAPACITY,N_STATES*2+2)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
transition_rec,"numpy.zeros((capm.eno.TIME_STEPS,N_STATES*2+2)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
yr_record,numpy.empty(4),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
results,numpy.empty(4),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
yr_test_record,numpy.empty(4),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
self.batt,"numpy.clip(self.batt,self.BMIN,self.BMAX)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
self.henergy,"numpy.clip(henergy,self.HMIN,self.HMAX)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
action,"numpy.clip(action,0,self.N_ACTIONS-1)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
self.batt,"numpy.clip(self.batt,self.BMIN,self.BMAX)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
self.henergy,"numpy.clip(self.henergy,self.HMIN,self.HMAX)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
tot_day_radiation,"numpy.sum(self.sradiation,axis=1)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
transition,"numpy.hstack((s,[a,r],s_)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
temp_transitions,numpy.hstack((stdize(s),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
yr_record,"numpy.vstack((yr_record,[s[0],s[2],r,a])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
yr_test_record,"numpy.vstack((yr_test_record,[s[0],s[2],r,a])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
results,"numpy.vstack((results,[int(YEAR)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
get_day_state,numpy.vectorize(self.get_day_state),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
yr_record,"numpy.delete(yr_record,0,0)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
yr_test_record,"numpy.delete(yr_test_record,0,0)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
results,"numpy.delete(results,0,0)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
self.memory,"numpy.insert(self.memory,index,data,0)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
self.btrack,"numpy.append(self.btrack,self.batt)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
self.atrack,"numpy.append(self.atrack,action+1)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
self.htrack,"numpy.append(self.htrack,self.henergy)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
self.btrack,"numpy.append(self.btrack,self.batt)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
avg_reward_rec,"numpy.append(avg_reward_rec,np.mean(yr_reward_rec)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
day_violation_rec,"numpy.append(day_violation_rec,capm.violation_counter)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
batt_violation_rec,"numpy.append(batt_violation_rec,capm.batt_violations)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(24,3)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(18,3)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(9,3)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(24,3)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_9,CLUSTER_0
iris,"pandas.read_csv(""./input/Iris.csv"")",CLUSTER_8,CLUSTER_10,CLUSTER_3,CLUSTER_0,CLUSTER_0
base['filters'],"numpy.select(conditions,choices,default=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
class_names,numpy.unique(y),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
class_names,numpy.unique(y),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"pandas.concat([cats,conts],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
base,pandas.read_csv('base.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=1,figsize=(3,3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=1,figsize=(3,3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=13)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.tree.DecisionTreeClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.tree.DecisionTreeClassifier(criterion=""entropy"",max_depth=3)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest,"sklearn.pipeline.Pipeline([('ss',StandardScaler()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest,"sklearn.pipeline.Pipeline([('ss',StandardScaler()",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('time_data/walmart_stock.csv',index_col='Date',parse_dates=True)",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
app_train,pandas.read_csv(f_app_train),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
n1,"numpy.array([1,2,3])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
n2,"numpy.array([4,5,6])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test,"numpy.concatenate((xx.reshape(-1,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"numpy.linspace(xmin,xmax,300)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.linspace(ymin,ymax,300)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(x,y)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"m,k","numpy.meshgrid(n1,n2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn1,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn2,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train1,X_test1,y_train1,y_test1","sklearn.model_selection.train_test_split(train1,target,test_size=0.2,random_state=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train2,X_test2,y_train2,y_test2","sklearn.model_selection.train_test_split(train2,target,test_size=0.2,random_state=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"numpy.array([
[-2,4,-1],
[4,1,-1],
[1,6,-1],
[2,4,-1],
[6,2,-1],
])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
y,"numpy.array([-1,-1,1,1,1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x2x3,"numpy.array([x2,x3])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
w,numpy.zeros(len(X[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dist,numpy.linalg.norm(encoding-database[identity]),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_1
dist,numpy.linalg.norm(encoding-db_enc),CLUSTER_23,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_1
d,"pandas.DataFrame(
[
[1,2,3,4,5],
[4,5,6,7,8]
],
index=[2,3],
columns=['a','b','c','d','e']
)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
k,"pandas.DataFrame(
np.random.randint(0,10,(6,4)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
liang,"pandas.read_excel('李文杰18.11.12整理-国内差旅_1-.xls',sheet_name='梁教授')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
liang2,"pandas.read_excel('李文杰18.11.12整理-国内差旅_1-.xls',sheet_name='Sheet1')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
table,pandas.read_html('住房统计.htm'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
P,"numpy.zeros((33,33)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
ohlcv_list,os.listdir(dir),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
except_list,"os.listdir('./pred_ohlcv/%s_%s'%(input_data_length,model_num)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_test,numpy.array(X_test),CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
Y_pred,"numpy.where(Y_pred_[:,[-1]]>max_value*limit_line,1,0)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pred_ohlcv,"numpy.concatenate((sliced_ohlcv,sliced_Y)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
closeprice,"numpy.roll(np.array(list(map(lambdax:x[-1][[1]][0],X_test)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
OBV,"numpy.roll(np.array(list(map(lambdax:x[-1][[5]][0],X_test)",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
pred_ohlcv_df,"pandas.DataFrame(pred_ohlcv,columns=['open','close','high','low','volume','OBV','fluc_close'])",CLUSTER_18,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
self.b1,"numpy.zeros(shape=(1,n_1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.b2,"numpy.zeros(shape=(1,n_2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.VdW1,"numpy.zeros(shape=(n_0,n_1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.Vdb1,"numpy.zeros(shape=(1,n_1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.VdW2,"numpy.zeros(shape=(n_1,n_2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.Vdb2,"numpy.zeros(shape=(1,n_2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
X-,"numpy.mean(X,axis=0,keepdims=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cost,numpy.sum(loss),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
class_y,numpy.copy(hat_y),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_circles(n_samples=1000,noise=0.2,factor=0.5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(dict(x=X[:,0],y=X[:,1],label=y)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
draw_korea_raw_stacked,pandas.DataFrame(draw_korea_raw.stack(),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pop,"pandas.merge(pop,draw_korea,how='left',on=['ID'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pop,"pandas.pivot_table(population,
index=['광역시도','시도'],
columns=['구분'],
values=['인구수','20~39세','65세이상'])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
population,"pandas.read_excel('../data/05.population_raw_data.xlsx',header=1)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
draw_korea_raw,"pandas.read_excel('../data/05.draw_korea_raw.xlsx',encoding=""EUC-KR"")",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
masked_mapdata,numpy.ma.masked_where(np.isnan(mapdata),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
masked_mapdata,numpy.ma.masked_where(np.isnan(mapdata),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
cb,"matplotlib.pyplot.colorbar(shrink=.1,aspect=10)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
cb,"matplotlib.pyplot.colorbar(shrink=.1,aspect=10)",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
geo_data,"json.load(open(geo_path,encoding='utf-8')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
grouped_data,collections.defaultdict(list),CLUSTER_8,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""EURUSD.csv"",engine='python',sep='|;',
names=[""DATE"",""TIMESTAMP"",""OPEN"",""HIGH"",""LOW"",""CLOSE"",""VOLUME""])",CLUSTER_8,CLUSTER_9,CLUSTER_3,CLUSTER_0,CLUSTER_0
s,"pandas.Series([7.0,7.3,7.7,8.1,8.4,8.8])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('./train_E6oV3lV.csv'),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
tick_marks,numpy.arange(len(target_names),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
x,numpy.array(int_text),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
accuracy,numpy.trace(cm),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
cmap,matplotlib.pyplot.get_cmap('Blues'),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(x,y,test_size=0.1,random_state=42)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df.tweet,df.label,test_size=0.33,
random_state=5)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
u_words,collections.Counter(words),CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
mnb,"sklearn.pipeline.Pipeline([('vect',CountVectorizer(lowercase=False)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
svm,"sklearn.pipeline.Pipeline([('vect',CountVectorizer(lowercase=False)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,pred,labels=[0,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,pred,labels=[0,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(y_test,pred,labels=[0,1])",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
mt,"sklearn.metrics.matthews_corrcoef(y_test,pred)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
mt,"sklearn.metrics.matthews_corrcoef(y_test,pred)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
mt,"sklearn.metrics.matthews_corrcoef(y_test,pred)",CLUSTER_16,CLUSTER_3,CLUSTER_12,CLUSTER_6,CLUSTER_0
log_dist,numpy.log(kappa),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,"pandas.read_csv('spam.csv',encoding='ISO-8859-1')",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"Xtrain,Xtest,Ytrain,Ytest","sklearn.model_selection.train_test_split(X,Y,test_size=0.33,random_state=0)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
model,sklearn.naive_bayes.MultinomialNB(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
accuracies,"sklearn.model_selection.cross_val_score(estimator=model,X=Xtrain,y=Ytrain,cv=10,n_jobs=1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(Ytest,y_pred)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"arr[:,:,0]","numpy.zeros((500,500)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"arr[:,:,1]","numpy.zeros((500,500)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
encode_mask,"numpy.zeros((color_mask.shape[0],color_mask.shape[1])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,"numpy.zeros((4,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arr,"numpy.ones((500,500,3)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"arr[:,:,2]","numpy.ones((500,500)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,"pandas.read_csv(file_path,header=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"data[""date""]","pandas.to_datetime(data[""date""])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
le_test,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=199),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,12)",CLUSTER_29,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
epoch,numpy.arange(len(train_cost),CLUSTER_29,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
"X,y","sklearn.datasets.make_moons(num_samples,noise=0.20)",CLUSTER_29,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_0
rainy_bbox,"numpy.array([
[-71.19583431678012,-13.861261028444734],
[-69.29519955115512,-13.861261028444734],
[-69.29519955115512,-12.384786628185896],
[-71.19583431678012,-12.384786628185896],
[-71.19583431678012,-13.861261028444734]])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
dry_bbox,"numpy.array([
[-73.59634701209262,-15.105783159621957],
[-71.69571224646762,-15.105783159621957],
[-71.69571224646762,-13.551731041539325],
[-73.59634701209262,-13.551731041539325],
[-73.59634701209262,-15.105783159621957]])",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
predicted_label,numpy.argmax(predictions_array),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
predicted_label,numpy.argmax(predictions_array),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_images,"numpy.reshape(train_images,(train_images.shape[0],train_images.shape[1],train_images.shape[2],1)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_images,"numpy.reshape(test_images,(test_images.shape[0],test_images.shape[1],test_images.shape[2],1)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
img,"numpy.reshape(img,(28,28)",CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
thisplot,matplotlib.pyplot.bar(range(10),CLUSTER_7,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_train,"numpy.pad(x_train,((0,0)",CLUSTER_7,CLUSTER_11,CLUSTER_1,CLUSTER_0,CLUSTER_3
x_validation,"numpy.pad(x_validation,((0,0)",CLUSTER_7,CLUSTER_11,CLUSTER_1,CLUSTER_0,CLUSTER_3
x_test,"numpy.pad(x_test,((0,0)",CLUSTER_7,CLUSTER_11,CLUSTER_1,CLUSTER_0,CLUSTER_3
index,"random.randint(0,len(x_train)",CLUSTER_7,CLUSTER_11,CLUSTER_1,CLUSTER_0,CLUSTER_3
X,numpy.arange(10),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"numpy.array(df.iloc[:100,[0,1,-1]])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
compare_array_positive,numpy.array([1iffeatures[k]>velse-1forkinrange(m),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
compare_array_nagetive,numpy.array([-1iffeatures[k]>velse1forkinrange(m),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,"numpy.array([1,1,1,-1,-1,-1,1,1,1,-1])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame(iris.data,columns=iris.feature_names)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.33)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.AdaBoostClassifier(n_estimators=100,learning_rate=0.5)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Z1,"numpy.dot(W1,X)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Z2,"numpy.dot(W2,A1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Z3,"numpy.dot(W3,A2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dA2,"numpy.dot(W3.T,dZ3)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dA1,"numpy.dot(W2.T,dZ2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
A1,"numpy.multiply(A1,D1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
A2,"numpy.multiply(A2,D2)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dZ2,"numpy.multiply(dA2,np.int64(A2>0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dZ1,"numpy.multiply(dA1,np.int64(A1>0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
features,pandas.get_dummies(features_raw),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
full_data,pandas.read_csv(in_file),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,outcomes,test_size=0.2,random_state=42)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
model,sklearn.tree.DecisionTreeClassifier(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
grid,GridSearchCV(estimator=sklearn.tree.DecisionTreeClassifier(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_accuracy,"sklearn.metrics.accuracy_score(y_train,y_train_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_accuracy,"sklearn.metrics.accuracy_score(y_test,y_test_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_accuracy,"sklearn.metrics.accuracy_score(y_test,y_test_pred)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
grid,"GridSearchCV(estimator=DecisionTreeClassifier(),param_grid=params,scoring=sklearn.metrics.make_scorer(r2_score)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cv_sets,"sklearn.model_selection.ShuffleSplit(n_splits=7,test_size=0.20,random_state=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
grid,sklearn.model_selection.GridSearchCV(estimator=DecisionTreeClassifier(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
points_3d,numpy.array(points_float),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t,"numpy.array([[0,0,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
point,"numpy.array([[1,1,1]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
angular_velocity,"numpy.array([[angle,0,0]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t,"numpy.zeros((3,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t,"numpy.zeros((3,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
linear_velocity,"numpy.cross(angular_velocity,point,axis=0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t,"numpy.ones((3,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
t,"numpy.ones((3,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
theta,numpy.arccos((np.trace(A),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R,numpy.eye(3),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R0,numpy.eye(3),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R0,numpy.eye(3),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
R,numpy.eye(3),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
hiddenx,"numpy.arange(1,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hiddeny,"numpy.arange(1,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
principalDf,"pandas.DataFrame(data=principalComponents,columns=['principalcomponent1','principalcomponent2'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
importance,pandas.DataFrame(importance),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
finalDf,"pandas.concat([principalDf,df[['Type']]],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""DatabaseMiniPONS.csv"",sep=';')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(8,8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kdeplot,seaborn.PairGrid(df),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
diagnosisplot,"seaborn.countplot(df[""Type""])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,converted_labels,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(bidf.iloc[:,2:],bidf.iloc[:,0],test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,labels,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,df[""Group""],test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,labels,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(features,labels,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(norm_features,labels,test_size=0.3,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,random_state=50)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,random_state=50)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=1000,random_state=50)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,"sklearn.ensemble.RandomForestRegressor(n_estimators=800,min_samples_leaf=10,min_samples_split=4,max_features=""sqrt"",max_depth=50,bootstrap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
classifier,sklearn.neighbors.KNeighborsClassifier(n_neighbors=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
norm_features,sklearn.preprocessing.normalize(features),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(probability=True),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(class_weight={""0"":1},kernel=""poly"",probability=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
svc,sklearn.svm.SVC(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(class_weight={""0"":1},kernel=""rbf"",C=100,gamma=0.1,probability=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(class_weight={""0"":10},kernel=""linear"",C=0.01,gamma=0.01,probability=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.model_selection.GridSearchCV(svc,params_grid)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.model_selection.GridSearchCV(MLPClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_random,"sklearn.model_selection.RandomizedSearchCV(estimator=rf,param_distributions=random_grid,n_iter=100,cv=5,verbose=2,random_state=42,n_jobs=-1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.neural_network.MLPClassifier(alpha=0.001,hidden_layer_sizes=(1,2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
a,"numpy.array([[5.0,5.0]])",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,"numpy.array([[2.0],[2.0]])",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(2,5)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
x,numpy.arange(7),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
x,numpy.arange(7),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
x,numpy.arange(7),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
x,numpy.arange(7),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
labels,"numpy.argmax(labels,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
predictions,"numpy.argmax(predictions,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
labels,"numpy.argmax(labels,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
predictions,"numpy.argmax(predictions,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
labels,"numpy.argmax(labels,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
predictions,"numpy.argmax(predictions,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
labels,"numpy.argmax(labels,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
predictions,"numpy.argmax(predictions,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
labels,"numpy.argmax(labels,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
predictions,"numpy.argmax(predictions,axis=1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
imageRaw,matplotlib.pyplot.imread(imageName),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
Customer_DF,"pandas.DataFrame(customer_details,columns=customer_columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Customer_Orders_DF,"pandas.DataFrame(customer_orders,columns=order_columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Customer_Payment_DF,"pandas.DataFrame(customer_payments,columns=payemnt_columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Customer_transaction_DF,"pandas.DataFrame(customer_transactions,columns=transaction_columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
results,pandas.DataFrame(grid.cv_results_),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feat_importances,"pandas.Series(clf.feature_importances_,index=x_train.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feat_importances,"pandas.Series(clf.feature_importances_,index=x_train.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
abc,"pandas.melt(Customer_DF[['No_Transactions','No_Orders','No_Payments','Fraud']],""Fraud"",var_name=""features"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cust_transaction_details,"pandas.read_sql('selectb.customerEmail,b.transactionId,b.orderId,b.paymentMethodId,'+
'(selectpaymentMethodRegistrationFailurefromCustomer_Payment_DFdwhered.customerEmail=b.customerEmailandd.paymentMethodId=b.paymentMethodId)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tsne,"sklearn.manifold.TSNE(n_components=2,random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(data.loc[:,data.columns!='Fraud_Decoded'],data[['Fraud_Decoded']],
test_size=0.3,
random_state=0,
stratify=data[['Fraud_Decoded']])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid,"sklearn.model_selection.GridSearchCV(model,parameters,cv=3,scoring='f1_macro')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb_uni_bow_raw_acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb_uni_bow_raw_acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb_uni_bow_raw_acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb_uni_bow_raw_acc,"sklearn.metrics.accuracy_score(y_test,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
C,"sklearn.metrics.confusion_matrix(test_y,predict_y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb_uni_bow_raw_f1,"sklearn.metrics.f1_score(y_test,y_pred,average='macro')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb_uni_bow_raw_f1,"sklearn.metrics.f1_score(y_test,y_pred,average='macro')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb_uni_bow_raw_f1,"sklearn.metrics.f1_score(y_test,y_pred,average='macro')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb_uni_bow_raw_f1,"sklearn.metrics.f1_score(y_test,y_pred,average='macro')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb_uni_bow_raw_ll,"sklearn.metrics.log_loss(y_test,y_pred_proba)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb_uni_bow_raw_ll,"sklearn.metrics.log_loss(y_test,y_pred_proba)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb_uni_bow_raw_ll,"sklearn.metrics.log_loss(y_test,y_pred_proba)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nb_uni_bow_raw_ll,"sklearn.metrics.log_loss(y_test,y_pred_proba)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pos_weights,"numpy.take(x_train.columns,new_weights[-5:])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pos_weights,"numpy.take(x_train.columns,new_weights[:5])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pos_weights,"numpy.take(x_train.columns,new_weights[-5:])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pos_weights,"numpy.take(x_train.columns,new_weights[:5])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(C=best_alpha),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.svm.SVC(kernel='linear'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(kernel='linear',C=best_alpha,probability=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=best_alpha),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.RandomForestClassifier(n_estimators=best_alpha),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bos,pandas.DataFrame(boston.data),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boston,sklearn.datasets.load_boston(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,train_size=0.70,random_state=40)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.r2_score(y_test,y_pred)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lower_yellow,"numpy.array([20,100,100],dtype=""uint8"")",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
upper_yellow,"numpy.array([30,255,255],dtype=""uint8"")",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
current_frame,"numpy.array([l_x1,l_y1,l_x2,l_y2,r_x1,r_y1,r_x2,r_y2],dtype=""float32"")",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
lower_yellow,"numpy.array([20,100,100],dtype=""uint8"")",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
upper_yellow,"numpy.array([30,255,255],dtype=""uint8"")",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
mask,numpy.zeros_like(img),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
l_slope_mean,"numpy.mean(l_slope,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
r_slope_mean,"numpy.mean(r_slope,axis=0)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
l_mean,numpy.mean(np.array(l_lane),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
r_mean,numpy.mean(np.array(r_lane),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
cumulative_probs,numpy.cumsum(probs),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
loaded_cumulative_probs,numpy.cumsum(loaded_die_probs),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
two_dice_cum_probs,numpy.cumsum(two_dice_probs),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
three_dice_cum_probs,numpy.cumsum(three_dice_probs),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
cum_probs,numpy.cumsum(probs),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
expected_value,numpy.sum(np.multiply(list(outcomes),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
variance,numpy.sum(squared_differences),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
ev,"numpy.sum(np.multiply(outcomes,probs)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
probs,numpy.divide(list(outcomes.values(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
two_dice_probs,numpy.divide(list(two_dice_outcomes.values(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
three_dice_probs,numpy.divide(list(three_dice_outcomes.values(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
std,numpy.sqrt(variance),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
squared_differences,"numpy.subtract(die,expected_value)",CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
df_sum,pandas.DataFrame(),CLUSTER_0,CLUSTER_2,CLUSTER_7,CLUSTER_0,CLUSTER_0
costs,numpy.squeeze(costs),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,"numpy.loadtxt(filename,delimiter=',')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_df,"pandas.read_csv(train_dataset_path,header=None)",CLUSTER_6,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
fr9,pandas.DataFrame(rs9),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
fr10,pandas.DataFrame(rs10),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
fr11,pandas.DataFrame(rs11),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
fr12,pandas.DataFrame(rs12),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
fm9,pandas.DataFrame(ms9),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
fm10,pandas.DataFrame(ms10),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
fm11,pandas.DataFrame(ms11),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
fm12,pandas.DataFrame(ms12),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
cdf,"pandas.merge(scdf,stdf,how=""left"",on=[""school_name"",""school_name""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mdf910r,"pandas.merge(fr9,fr10,how=""left"",on=[""school_name""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mdf91011r,"pandas.merge(mdf910r,fr11,how=""left"",on=[""school_name""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
rsummary,"pandas.merge(mdf91011r,fr12,how=""left"",on=[""school_name""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mdf910m,"pandas.merge(fm9,fm10,how=""left"",on=[""school_name""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mdf91011m,"pandas.merge(mdf910m,fm11,how=""left"",on=[""school_name""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
msummary,"pandas.merge(mdf91011m,fm12,how=""left"",on=[""school_name""])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
scdf,pandas.read_csv(school_raw),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
stdf,pandas.read_csv(student_raw),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
response,requests.get('http://www.imdb.com/chart/top'),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
res,requests.get('http://www.omdbapi.com/?i='+entry+'&plot=full&r=json&tomatoes=true'),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
response,requests.get('http://www.imdb.com/title/'+entry),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
response,requests.get('http://www.imdb.com/title/'+entry),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
response,requests.get('http://www.imdb.com/title/'+entry),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
entries,"re.findall(""<ahref.*?/title/(.*?)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
gross_list,"re.findall(""Gross:</h4>[]*\$([^]*)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
opening_list,"re.findall(""OpeningWeekend:</h4>[]*\$([^]*)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
budget_list,"re.findall(""Budget:</h4>[]*\$([^]*)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
oscar_winner,re.findall(r'([^.]*?Oscar[^.]*\.),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
oscar_noms,re.findall('Nominated\sfor\s(\d),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
awards_won,re.findall('Another\s(\d+),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
other_noms,re.findall('(\d+),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
j,json.loads(res.text),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
df,pandas.DataFrame(entries_dict_list),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
df1,"pandas.DataFrame(grosses,columns=['imdbID','Gross'])",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
df2,"pandas.DataFrame(opening,columns=['imdbID','Opening'])",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
df3,"pandas.DataFrame(budgets,columns=['imdbID','Budget'])",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
summary1,"pandas.DataFrame(summary.loc[:,'Gross'].apply(lambdax:'{0:,.2f}'.format(x)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
actors_df,"pandas.DataFrame(actors_df,columns=actor_col)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
actors,pandas.DataFrame(actors_df.sum(),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
actor_first,"pandas.DataFrame(actor_first,columns=actor_first_col)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
actor_first,pandas.DataFrame(actor_first.sum(),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
directors_df,"pandas.DataFrame(directors_df,columns=directors_col)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
directors,pandas.DataFrame(directors_df.sum(),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
plot_df,"pandas.DataFrame(plot_df,columns=plot_col)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
plot,pandas.DataFrame(plot_df.sum(),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
title_df,"pandas.DataFrame(title_df,columns=title_col)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
title,pandas.DataFrame(title_df.sum(),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
genre_df,"pandas.DataFrame(genre_df,columns=genre_col)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
genre,pandas.DataFrame(genre_df.sum(),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
production_df,"pandas.DataFrame(production_df,columns=production_col)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
production,pandas.DataFrame(production_df.sum(),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
df_imdb,"pandas.merge(df_gross,df_opening,on=""imdbID"")",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
df_imdb,"pandas.merge(df_imdb,df_budget,on=""imdbID"")",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
df,"pandas.merge(df,df_imdb)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,24)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,6)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,6)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,6)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,30)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(nrows=1,ncols=2,figsize=(16,6)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
"fig,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(nrows=1,ncols=3,figsize=(20,6)",CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(),CLUSTER_24,CLUSTER_2,CLUSTER_3,CLUSTER_32,CLUSTER_0
worlddf,pandas.read_json('data/world_bank_projects.json'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
data,json.load((open('data/world_bank_projects.json'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
preds,numpy.squeeze(preds_tensor.numpy(),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
myx,"numpy.arange(0,30,delta)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
myy,"numpy.arange(0,30,delta)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
anoms,numpy.array([myX[x]forxinxrange(myX.shape[0]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
myexp,"numpy.zeros((m,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
epsvec,numpy.zeros(nparams),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
my_ratings,"numpy.zeros((1682,1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
pred_idxs_sorted,numpy.argsort(my_predictions),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mu,"numpy.mean(myX,axis=0)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
sigma2,numpy.sum(np.square(myX-mu),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
P,numpy.sum([int(trueVec[x]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
R,numpy.sum([int(predVec[x]),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Ymean,"numpy.sum(myY,axis=1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
myexp[irow],numpy.exp(-0.5*((xrow-mymu),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
term1,"numpy.multiply(term1,myR)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
term1,"numpy.multiply(term1,myR)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
epses,numpy.linspace(np.min(mypCVs),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Y,"numpy.hstack((Y,my_ratings)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
R,"numpy.hstack((R,myR_row)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
points,numpy.vstack(coord_list),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"meshx,meshy","numpy.meshgrid(myx,myy)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mysig2,numpy.diag(mysig2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
myinv,numpy.linalg.inv(mysig2),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dummy,matplotlib.pyplot.colorbar(),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mycont,"matplotlib.pyplot.contour(meshx,meshy,myz,levels=cont_levels)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(6,6*(1682./943.)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dummy,matplotlib.pyplot.imshow(Y),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dummy,matplotlib.pyplot.xlabel('Users(%d),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dummy,matplotlib.pyplot.ylabel('Movies(%d),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mat,scipy.io.loadmat(datafile),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mat,scipy.io.loadmat(datafile),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mat,scipy.io.loadmat(datafile),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mat,scipy.io.loadmat(datafile),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mat,scipy.io.loadmat(datafile),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
result,"scipy.optimize.fmin_cg(cofiCostFunc,x0=myflat,fprime=cofiGrad,\
args=(Y,R,nu,nm,nf,mylambda)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
gte,"pandas.read_csv('GTExdata.csv',low_memory=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sampleLabels,"pandas.read_csv('SampleLabels.csv',low_memory=False)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"u,s,vt",scipy.linalg.svd(gte),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
arra1d,numpy.array(list),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arra2d,numpy.array(list1),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arra2d,"numpy.array(list1,dtype='float')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
arra,"numpy.array([1,2,3,5,4,6,7])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
array1,"numpy.zeros([4,4])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
index_lessthan5,numpy.where(arra<5),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
array2,"numpy.ones([4,4])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
missing_flag,numpy.isnan(arra2d),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
day,numpy.datetime64('2020-05-0618:30:00'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
oneday,"numpy.timedelta64(1,'D')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
oneminute,"numpy.timedelta64(1,'m')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
shubh_v,"numpy.vectorize(shubh,otypes=[int])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"uniques,counts","numpy.unique(arra2d,return_counts=True)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,"numpy.genfromtxt('https://raw.githubusercontent.com/codeforamerica/ohana-api/master/data/sample-csv/phones.csv',delimiter=',',skip_header=1,filling_values=0,dtype='float')",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data1,"numpy.genfromtxt('https://raw.githubusercontent.com/codeforamerica/ohana-api/master/data/sample-csv/phones.csv',delimiter=',',skip_header=1,filling_values=0,dtype=None)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
df,numpy.load('data.npz'),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
digits,sklearn.datasets.load_digits(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,"sklearn.svm.SVC(gamma=0.001,C=100.)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
q,"numpy.arange(longs[0],longs[-1],1)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"params,params_err","scipy.optimize.curve_fit(model,longs,sins)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"A,sin,r,p,e","scipy.stats.linregress(longs,sins)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dados18,"pandas.read_csv(link+'/seguro18.csv',encoding='utf-8')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cod,pandas.read_csv(link+'/codigos-mun.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cod,"pandas.read_csv(link+'cod-nome-corrigido.csv',encoding='latin1')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
XX,"numpy.asarray(XX,dtype=float)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Xb,"numpy.mean(XX,axis=0)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
S,numpy.cov(XX.T),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(15,7)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"sklearn.preprocessing.scale(dados_centroids.drop(['nome_mun','geometry'],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=k,max_iter=1000)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,"sklearn.cluster.KMeans(n_clusters=k,random_state=10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
t,"numpy.arange(-math.pi,math.pi,0.1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
t,"numpy.arange(5.*-math.pi,5.*math.pi,0.01)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
t,"numpy.arange(5.*-math.pi,5.*math.pi,0.01)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
signal,numpy.array(pil_img.open(file_path),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
img,numpy.array(pil_img.open(file_path),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
signal,numpy.array(pil_img.open(file_path),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
pattern,"numpy.zeros((4,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
sig,numpy.cos(t),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
sig,numpy.cos(t),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
sig1,numpy.cos(t),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
signal,"numpy.tile(pattern,(2,2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
fourier_sig,numpy.fft.fft(sig),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
fourier_noise,numpy.fft.fft(noise),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
fourier_noised_sig,numpy.fft.fft(noised_sig),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
transformed_signal,numpy.fft.fft2(signal),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
transformed_signal,numpy.fft.fft2(signal),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
fourier_img,numpy.fft.fft2(img),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
fourier_noise,numpy.fft.fft2(noise),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
fourier_noised_img,numpy.fft.fft2(noised_img),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
transformed_signal,numpy.fft.fftshift(transformed_signal),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
fourier_img,numpy.fft.fftshift(fourier_img),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
fourier_noise,numpy.fft.fftshift(fourier_noise),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
fourier_noised_img,numpy.fft.fftshift(fourier_noised_img),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
fourier_sig,numpy.fft.fftshift(fourier_sig),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
fourier_noise,numpy.fft.fftshift(fourier_noise),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
fourier_noised_sig,numpy.fft.fftshift(fourier_noised_sig),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
transformed_signal,numpy.fft.fftshift(transformed_signal),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_sig,numpy.fft.ifft(filtered_fourier_sig),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_noise,numpy.fft.ifft(filtered_fourier_noise),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_noised_sig,numpy.fft.ifft(filtered_fourier_noised_sig),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_signal,numpy.fft.ifft2(filtered_transformed_signal),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_signal,numpy.fft.ifft2(filtered_transformed_signal),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_img,numpy.fft.ifft2(filtered_fourier_img),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_noise,numpy.fft.ifft2(filtered_fourier_noise),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_noised_img,numpy.fft.ifft2(filtered_fourier_noised_img),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_transformed_signal,numpy.fft.ifftshift(filtered_transformed_signal),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_fourier_img,numpy.fft.ifftshift(filtered_fourier_img),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_fourier_noise,numpy.fft.ifftshift(filtered_fourier_noise),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_fourier_noised_img,numpy.fft.ifftshift(filtered_fourier_noised_img),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_fourier_sig,numpy.fft.ifftshift(filtered_fourier_sig),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_fourier_noise,numpy.fft.ifftshift(filtered_fourier_noise),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_fourier_noised_sig,numpy.fft.ifftshift(filtered_fourier_noised_sig),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_transformed_signal,numpy.fft.ifftshift(filtered_transformed_signal),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
filtered_signal,numpy.fft.irfft2(filtered_transformed_signal),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
transformed_signal,numpy.fft.rfft2(signal),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
"fig,((ax1,ax2),(ax3,ax4))","matplotlib.pyplot.subplots(2,2,figsize=(14,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
"fig,((ax1,ax2),(ax3,ax4))","matplotlib.pyplot.subplots(2,2,figsize=(14,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
"fig,((ax1,ax4,ax7,ax10),(ax2,ax5,ax8,ax11),(ax3,ax6,ax9,ax12))","matplotlib.pyplot.subplots(3,4,figsize=(16,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
"fig,((ax1,ax4,ax7,ax10),(ax2,ax5,ax8,ax11),(ax3,ax6,ax9,ax12))","matplotlib.pyplot.subplots(3,4,figsize=(16,10)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
"fig,(ax1,ax2)","matplotlib.pyplot.subplots(1,2,figsize=(16,5)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
"fig,((ax1,ax2),(ax3,ax4))","matplotlib.pyplot.subplots(2,2,figsize=(14,8)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_11
output,"pandas.DataFrame(data={""id"":test[""id""],""cuisine"":result})",CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
train,pandas.read_json('../data/train.json/train.json'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
test,pandas.read_json('../data/test.json/test.json'),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_29,CLUSTER_1,CLUSTER_12,CLUSTER_0,CLUSTER_0
melody_sequence,numpy.array(melody_sequence[3:]),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_matches,pandas.DataFrame(sorted(dist),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(get_text_link_from_sel(sel),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,step)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,h)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mesh,numpy.column_stack((xx.ravel(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('C:\\courses\\data\\coe-bidding-results\\coe-results.csv',
usecols=['quota','premium'])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=5),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.Pipeline([
('featureSelection',SelectKBest(f_classif)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
output,"pandas.DataFrame(output,columns=['Adoption','Died','Euthanasia','Return_to_owner','Transfer'])",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
train_data,pandas.read_csv('input/train_prep.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
test_data,pandas.read_csv('input/test_prep.csv'),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
co_county_df,pandas.DataFrame(co_county_pd),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
co_county_y,pandas.DataFrame(region_by_year),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
sales_county_pd,pandas.read_csv(sales_county),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
mask,"numpy.zeros((differ,differ)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(cm1,annot=True,fmt='d',cmap=""Blues"",vmax=50)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(cm1,annot=True,fmt='d',cmap=""Blues"",vmax=20)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(cm1,annot=True,fmt='d',cmap=""Blues"",vmax=20)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(cm1,annot=True,fmt='d',cmap=""Blues"",vmax=10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.heatmap(cm1,annot=True,fmt='d',cmap=""Blues"",vmax=6)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm1,"sklearn.metrics.confusion_matrix(ytest,ypred1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm1,"sklearn.metrics.confusion_matrix(ytest,ypred2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm1,"sklearn.metrics.confusion_matrix(ytest,ypred3)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm1,"sklearn.metrics.confusion_matrix(ytest,ypred4)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm1,"sklearn.metrics.confusion_matrix(ytest,ypred5)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,numpy.arange(epochs),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,numpy.arange(epochs),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,numpy.arange(epochs),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
x,numpy.arange(epochs),CLUSTER_7,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
markdown_fixed,"pandas.DataFrame(imputer.fit_transform(df[['MarkDown1','MarkDown2','MarkDown3','MarkDown4','MarkDown5']])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
avocado_season,"pandas.DataFrame({
'holiday':'avocadoseason',
'ds':pd.to_datetime(['2014-07-31','2014-09-16',
'2015-07-31','2015-09-16',
'2016-07-31','2016-09-16',
'2017-07-31','2017-09-16',
'2018-07-31','2018-09-16',
'2019-07-31','2019-09-16'])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([df,markdown_fixed],axis=1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.get_dummies(df,prefix=['isHoliday_','Type_'],columns=['isHoliday','Type'])",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""data/train.csv"",names=['Store','Dept','Date','weeklySales','isHoliday'],sep=',',header=0)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
features,"pandas.read_csv(""data/features.csv"",names=['Store','Date','Temperature','Fuel_Price','MarkDown1','MarkDown2','MarkDown3','MarkDown4','MarkDown5','CPI','Unemployment','IsHoliday'],sep=',',header=0)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
stores,"pandas.read_csv(""data/stores.csv"",names=['Store','Type','Size'],sep=',',header=0)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"pandas.read_csv(""data/stores.csv"")",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
sample_submission,"pandas.read_csv(""data/sampleSubmission.csv"")",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['ds'],pandas.to_datetime(df.Date),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
test['ds'],pandas.to_datetime(df.Date),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"seaborn.boxplot(x=""Type"",y=""weeklySales"",data=df,showfliers=False)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
imputer,sklearn.impute.SimpleImputer(strategy='median'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(10,8)",CLUSTER_27,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data['cluster'],pandas.DataFrame(gmm.fit(data[cols]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
features_df,"pandas.DataFrame({'column':feas,'importance':feature_rank})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([train_data,test],axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_data,pandas.read_csv('train_data.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,pandas.read_csv('test_a.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
real_data,pandas.read_csv('sub_a_913.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_x,valid_x,train_y,valid_y","sklearn.model_selection.train_test_split(train_,train_target,test_size=0.2,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ln,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mms,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mms,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(pre_train,train_y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(pre_valid,valid_y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(pre_train,train_y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(pre_valid,valid_y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(pre_train,train_y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(pre_valid,valid_y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(pre_train,train_y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(pre_valid,valid_y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(pre_train,train_y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(pre_valid,valid_y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(valid,valid_y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
r2,"sklearn.metrics.r2_score(real_data['pred'],real_data['pre'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gmm,"sklearn.mixture.GaussianMixture(n_components=3,covariance_type='full',random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,sklearn.linear_model.Lasso(alpha=0.1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sk,sklearn.feature_selection.SelectKBest(k=300),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ref,"sklearn.feature_selection.RFE(lr,n_features_to_select=300)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,"sklearn.linear_model.LinearRegression(copy_X=True,fit_intercept=True,n_jobs=None,
normalize=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ridge,sklearn.linear_model.Ridge(alpha=5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf,sklearn.ensemble.RandomForestRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(8,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,matplotlib.pyplot.figure(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=1,ncols=2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(figsize=(12,3)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,6)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(1,3,figsize=(12,4)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,5,11)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
data,"random.sample(range(1,1000)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xi1,"numpy.maximum(box1[0],box2[0])",CLUSTER_14,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
yi1,"numpy.maximum(box1[1],box2[1])",CLUSTER_14,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
xi2,"numpy.minimum(box1[2],box2[2])",CLUSTER_14,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
yi2,"numpy.minimum(box1[3],box2[3])",CLUSTER_14,CLUSTER_0,CLUSTER_8,CLUSTER_5,CLUSTER_11
rel_counts,collections.defaultdict(int),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
X,"numpy.array([[i]foriinrange(1,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
x,"numpy.array([df.values[:,0]])",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,"numpy.array([df.values[:,1]])",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
betta,"numpy.array([[coef[0,0]-quantile[0],
coef[0,0]-quantile[0],
coef[0,0]+quantile[0],
coef[0,0]+quantile[0],
coef[0,0]-quantile[0]],
[coef[0,1]-quantile[1],
coef[0,1]+quantile[1],
coef[0,1]+quantile[1],
coef[0,1]-quantile[1],
coef[0,1]-quantile[1]]])",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D,numpy.array([np.diag(D),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
coef_rounded,"numpy.array([[-9*1e+5,
-9*1e+5,
-4*1e+5,
-1*1e+5,
9*1e+5,
-3*1e+1,
-3*1e+0,
10*1e+0,
-6*1e+4,
1*1e-1]])",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
times,numpy.array([[i*4foriinrange(p_times.shape[0]),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
times,numpy.array([[i*4foriinrange(p_times.shape[0]),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
_t,numpy.array([times]),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
_q,numpy.array([Q]),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
Q_diff_series,"numpy.array([np.diff(Q,n=1)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
dP,"numpy.array([np.diff(P[:,0],n=1)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
_pf,numpy.array((cols),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
_pf,numpy.array([predicts]),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
_pf,numpy.array([_pf]),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
intervals,numpy.array([[conf_int(alpha),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
coords,"numpy.zeros((k,2)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ind,"numpy.zeros((Q.shape[0],12)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ind,"numpy.zeros((Q.shape[0],12)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cycle_diff,"numpy.zeros((12,1)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
pf,"numpy.zeros((dP.shape[0]-10,ar_param)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X1,numpy.concatenate((np.ones(X.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X2,numpy.concatenate((np.ones(X.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X3,numpy.concatenate((np.ones(X.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.concatenate((np.ones(x.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.concatenate((np.ones(x.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.concatenate((np.ones(x.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X_P,numpy.concatenate((np.ones(x.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.concatenate((np.ones(x.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.concatenate((np.ones(x.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.concatenate((np.ones(x.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.concatenate((np.ones(x.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.concatenate((np.ones(x.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.concatenate((np.ones(x.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.concatenate((np.ones(x.shape),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p,"numpy.dot(row.T,L)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p,"numpy.dot(p,row)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p,"numpy.dot(row.T,L)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p,"numpy.dot(p,row)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"ind[i,p]",numpy.mean(Q[p::12]),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
errors,numpy.sort(errors),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
norm,numpy.sort(np.random.normal(size=normed_errors.shape[0]),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
errors,numpy.sort(errors),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
norm,numpy.sort(np.random.normal(size=normed_errors.shape[0]),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
errors,numpy.sort(errors),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
norm,numpy.sort(np.random.normal(size=normed_errors.shape[0]),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
S,numpy.sum(e_all*e_all),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
S,numpy.sum(e_all*e_all),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
S,numpy.sum(e_all*e_all),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
S_p,numpy.sum(e_all_p*e_all_p),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
S,numpy.sum(e_all*e_all),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
S,numpy.sum(e_all*e_all),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
S,numpy.sum(e_all*e_all),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
S,numpy.sum(e_all*e_all),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
S,numpy.sum(e_all*e_all),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
S,numpy.sum(e_all*e_all),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
S,numpy.sum(e_all*e_all),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
S,numpy.sum(e_all*e_all),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
S,numpy.sum(e_all*e_all),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
quantile_t,"numpy.sqrt(f.ppf(1-alpha,2,n-m)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p,"numpy.linspace(0,2*np.pi,1000)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.linspace(-5,5,100)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p_diffs,"numpy.diff(p_times[:,0],n=1)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
z,numpy.column_stack((np.cos(p),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
confidence_interval,"numpy.column_stack((coef.T-dj,coef.T+dj)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
confidence_interval_rounded,"numpy.column_stack((coef_rounded.T-dj,coef_rounded.T+dj)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fourier,numpy.column_stack((np.cos(times*np.pi/T),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
_pf,"numpy.column_stack((pf[:,4:])",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D,numpy.diag(D),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D,numpy.diag(D),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
D,numpy.diag(D),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
B,numpy.linalg.cholesky(A),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
L,"numpy.linalg.inv(np.dot(X.T,X)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ans,matplotlib.pyplot.boxplot(grouped_errors),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ans,matplotlib.pyplot.boxplot(grouped_errors),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ans,matplotlib.pyplot.boxplot(grouped_series),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
ans,matplotlib.pyplot.boxplot(grouped_without_trend),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16,10)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(16*q//rows,10*q//cols)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.read_excel('../data/ls_variants.xls',sheet_name='вар.15')",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p_times,"pandas.read_excel('../data/TimeSeries.xls',sheet_name='Давлениевабсорбере')",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p_times,"pandas.read_excel('../data/TimeSeries.xls',sheet_name='Давлениевабсорбере')",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
q_times,"pandas.read_excel('../data/TimeSeries.xls',sheet_name='РасходнаГРС')",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
p_times,"pandas.read_excel('../data/TimeSeries.xls',sheet_name='Давлениевабсорбере')",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"statistic,p_value",scipy.stats.f_oneway(*grouped_errors),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"statistic,p_value",scipy.stats.f_oneway(*grouped_errors),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
res,scipy.stats.shapiro(normed_errors),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"(quantiles,values),(slope,intercept,r)","scipy.stats.probplot(normed_errors,dist='norm')",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf_p,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
s,"math.pow(alpha_0,2)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
s+,"math.pow(alpha_n,2)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
d_k,"math.pow(alphas[i],2)",CLUSTER_20,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
other_data,"pandas.DataFrame(data=SimpleImputer(strategy='constant',fill_value='NA')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_other_data,"pandas.DataFrame(data=SimpleImputer(strategy='constant',fill_value='NA')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
numric_data,pandas.DataFrame(data=KNN(k=3),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_numric_data,pandas.DataFrame(data=KNN(k=3),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
catog_data,pandas.DataFrame(data=SimpleImputer(strategy='most_frequent'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_catog_data,pandas.DataFrame(data=SimpleImputer(strategy='most_frequent'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub,pandas.DataFrame(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([numric_data,catog_data,other_data],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_data,"pandas.concat([test_numric_data,test_catog_data,test_other_data],axis=1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([data,pd.DataFrame(data=cv.fit_transform(data[column])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_data,"pandas.concat([test_data,pd.DataFrame(data=cv.transform(test_data[column])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.concat([data,pd.DataFrame(data=cv.fit_transform(data[column])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_data,"pandas.concat([test_data,pd.DataFrame(data=cv.transform(test_data[column])",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv('/content/drive/MyDrive/ColabNotebooks/Archives/kaggle_train.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_data,pandas.read_csv('/content/drive/MyDrive/ColabNotebooks/Archives/kaggle_test.csv'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_engineering_data[column.join('cos')],numpy.cos(data[column]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_engineering_test_data[column.join('cos')],numpy.cos(test_data[column]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sub['SalePrice'],numpy.expm1(y_pred),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
saleprice,numpy.log1p(saleprice),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data[skewed_feats],numpy.log1p(data[skewed_feats]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_data[skewed_feats],numpy.log1p(test_data[skewed_feats]),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,numpy.corrcoef(data[top_10_columns].values.T),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
other_data,"pd.DataFrame(data=sklearn.impute.SimpleImputer(strategy='constant',fill_value='NA')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_other_data,"pd.DataFrame(data=sklearn.impute.SimpleImputer(strategy='constant',fill_value='NA')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
catog_data,pd.DataFrame(data=sklearn.impute.SimpleImputer(strategy='most_frequent'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_catog_data,pd.DataFrame(data=sklearn.impute.SimpleImputer(strategy='most_frequent'),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
stdsc,sklearn.preprocessing.StandardScaler(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(data,saleprice,test_size=0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fe_x_train,fe_x_test,fe_y_train,fe_y_test","sklearn.model_selection.train_test_split(feature_engineering_data,saleprice,test_size=0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(data,saleprice,test_size=0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fe_x_train,fe_x_test,fe_y_train,fe_y_test","sklearn.model_selection.train_test_split(feature_engineering_data,saleprice,test_size=0.2)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso,"sklearn.linear_model.LassoCV(
cv=10,
max_iter=50000,
n_jobs=-1,
random_state=42
)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lasso_fe,"sklearn.linear_model.LassoCV(
cv=10,
max_iter=50000,
n_jobs=-1,
random_state=42
)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
RFG,sklearn.ensemble.RandomForestRegressor(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
RFG,sklearn.ensemble.RandomForestRegressor(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfc,"sklearn.model_selection.GridSearchCV(RFG,parameters,cv=10,scoring='r2')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfc_fe,"sklearn.model_selection.GridSearchCV(RFG,parameters,cv=10,scoring='r2')",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
'''xgb,"sklearn.model_selection.GridSearchCV(model,parameters,cv=10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xgb_fe,"sklearn.model_selection.GridSearchCV(model,parameters,cv=10)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"StackingRegressor(regressors=[lasso_fe,xgb_fe,rfc_fe],meta_regressor=sklearn.linear_model.LinearRegression(n_jobs=-1)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
images,numpy.array(processedImages),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
time,"numpy.arange(t+1,dtype=np.uint16)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
vector,numpy.arange(len(h),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
matrix,numpy.zeros(shape=(len(h),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
matrix,numpy.zeros(shape=(len(j),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
vector,numpy.zeros(shape=(len(j),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
matrix,numpy.zeros(shape=(len(j),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
matrix2,numpy.zeros(shape=(len(matrix),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
out,"numpy.zeros([n,len(arrays)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
vector,numpy.zeros(shape=(len(j),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
vector,numpy.zeros(shape=(len(j),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
vector,numpy.zeros(shape=(len(h),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
vector,numpy.zeros(shape=(len(h),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
vector,numpy.zeros(shape=(len(t),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
matrix,numpy.identity(len(j),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
n,numpy.prod([x.sizeforxinarrays]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
"out[:,0]","numpy.repeat(arrays[0],m)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
matrix2[i],numpy.float32(1.0),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
array,"numpy.split(times[:-1],3)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
array,"numpy.split(times[:-1],len(times[:-1])",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,datetime.datetime.now(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,datetime.datetime.now(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
a,datetime.datetime.now(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
b,datetime.datetime.now(),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
bins,"numpy.linspace(0.0001,1.0001,21)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(0.3501,1.0001,14)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(1.5,7.5,7)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(75,325,11)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bins,"numpy.linspace(1.5,10.5,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"pandas.concat([X,salary_dummy],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"pandas.concat([X,department_dummy],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
salary_dummy,pandas.get_dummies(df['salary']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
department_dummy,pandas.get_dummies(df['department']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('HR_comma_sep.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
stdsc,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rf_model,sklearn.ensemble.RandomForestClassifier(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('Dataset/bbc_text.csv',encoding=""ISO-8859-1"")",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
word_counts,collections.Counter(words),CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
vectors,"numpy.zeros((corpus_size,vectors_size)",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=42)",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
"train,test","sklearn.model_selection.train_test_split(df[['category','text']],test_size=0.3,random_state=42)",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(df.text,df.category,random_state=0,test_size=0.2)",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
"train_text,test_text,train_category,test_category","sklearn.model_selection.train_test_split(df.text,df.category,random_state=0,test_size=0.3)",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
nb,"sklearn.pipeline.Pipeline([('tfidf',TfidfVectorizer(min_df=5,max_features=max_features,smooth_idf=True,use_idf=True)",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
sgd,"sklearn.pipeline.Pipeline([('tfidf',TfidfVectorizer(min_df=7,max_features=5000,smooth_idf=True,use_idf=True)",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
logreg,"sklearn.pipeline.Pipeline([('vect',CountVectorizer()",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
xgb,"sklearn.pipeline.Pipeline([('vect',CountVectorizer()",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
logreg,"sklearn.linear_model.LogisticRegression(n_jobs=1,C=1e5)",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
logreg,"sklearn.linear_model.LogisticRegression(n_jobs=1,C=1e5)",CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
encoder,sklearn.preprocessing.LabelEncoder(),CLUSTER_16,CLUSTER_3,CLUSTER_8,CLUSTER_6,CLUSTER_0
tList,numpy.array(['../data/raw/nii/%s'%xforxinos.listdir('../data/raw/nii/'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
conList,numpy.array(['../data/raw/nii/%s'%xforxinos.listdir('../data/raw/nii/'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
conList,numpy.array(['../data/interim/nii/%s'%xforxinos.listdir('../data/interim/nii/'),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
diffData,numpy.array([masker.transform(x),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
flipAffine,numpy.concatenate([np.array([affine[0]*-1]),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
flipAffine,numpy.concatenate([np.array([affine[0]*-1]),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
flipAffine,numpy.concatenate([np.array([affine[0]*-1]),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tVals,"scipy.stats.ttest_1samp(nestDf,0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tVals,"scipy.stats.ttest_1samp(thisDf,0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tVals,"scipy.stats.ttest_1samp(diffDataDf,0)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
myLabeler,sklearn.preprocessing.LabelEncoder(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(tList),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
countDf,pandas.DataFrame(my_all),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
diffDataDf,pandas.DataFrame(diffData),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clinDf,"pandas.concat([clinDf,df],join='inner',axis=1)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
testSet,"pandas.concat([testSet,addTestEntries])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
mergeDf,"pandas.concat([dataDf,clinDf],axis=1,join='inner')",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clinDf,"pandas.read_csv('../data/raw/csv/clinData.csv',index_col=[0])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
wadaDf,"pandas.read_csv('../data/raw/csv/wadaData.csv',index_col=[0])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
os_data_X,"pandas.DataFrame(data=os_data_X,columns=columns)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
os_data_y,"pandas.DataFrame(data=os_data_y,columns=['bad_flag'])",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
submission,pandas.DataFrame(test_data_final),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tstats_df,pandas.DataFrame(),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
temp,"pandas.DataFrame([num_variable,tstats[0],tstats[1]])",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
somersd_df,pandas.DataFrame(),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_score,pandas.DataFrame(result.predict(),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
temp,"pandas.DataFrame([num_variable,somers_d])",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_predicted_prob,pandas.DataFrame(result.predict(train_X),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_predicted_prob,pandas.DataFrame(result.predict(test_X),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
roc_like_df,pandas.DataFrame(),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
roc_like_table,"pandas.DataFrame([cut_off,sensitivity,specificity])",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
new_cust_prob,pandas.DataFrame(result.predict(bankloans_new),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree_train_pred,"pandas.DataFrame({'actual':train_y,
'predicted':clf_tree.predict(train_X)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree_test_pred,"pandas.DataFrame({'actual':test_y,
'predicted':clf_tree.predict(test_X)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree_test_pred,"pandas.DataFrame({'actual':test_y,
'predicted':clf_tree.predict(test_X)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
importances,"pandas.Series(model.feature_importances_,index=X.columns)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_aggdata_train_num1,"pandas.concat((df_aggdata_train_num,df_aggdata_train_count2)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_aggdata_test_num1,"pandas.concat((df_aggdata_test_num,df_aggdata_test_count2)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_aggdata_train_final,"pandas.concat((df_aggdata_train_final,df_aggdata_train_num1)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_aggdata_test_final,"pandas.concat((df_aggdata_test_final,df_aggdata_test_num1)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_data_final,"pandas.concat([train_data_final,df_response_var],axis=1)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tstats_df,"pandas.concat([tstats_df,temp],axis=0,ignore_index=True)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
somersd_df,"pandas.concat([somersd_df,temp],axis=0)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_predict,"pandas.concat([train_actual,train_predicted_prob],axis=1)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_predict,"pandas.concat([test_actual,test_predicted_prob],axis=1)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
roc_like_df,"pandas.concat([roc_like_df,roc_like_table],axis=0)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
bankloans_new1,"pandas.concat([bankloans_new,new_cust_prob.prob1],axis=1)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
binned,"pandas.cut(bankloans_existing[num_variable],bins=10,labels=list(range(1,11)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_aggdata_train_count2,pandas.get_dummies(df_aggdata_train_count1),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_aggdata_test_count2,pandas.get_dummies(df_aggdata_test_count1),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_txndata_train_4,"pandas.merge(left=df_txndata_train_1,right=df_txndata_train_3,left_on='C2',right_on='C2')",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_txndata_test_4,"pandas.merge(left=df_txndata_test_1,right=df_txndata_test_3,left_on='C2',right_on='C2')",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_txndata_train_final,"pandas.merge(left=df_txndata_train_4,right=df_txndata_train_7,how='left',left_on='C2',right_on='C2')",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_txndata_test_final,"pandas.merge(left=df_txndata_test_4,right=df_txndata_test_7,how='left',left_on='C2',right_on='C2')",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_data_final,"pandas.merge(left=df_aggdata_train_final,right=df_txndata_trainfinal,how='left',left_on='V2',right_on='C2')",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_data_final,"pandas.merge(left=df_aggdata_test_final,right=df_txndata_testfinal,how='left',left_on='V2',right_on='C2')",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,"pandas.qcut(x,q=4,labels=quantile_labels,duplicates='drop')",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_predict['Deciles'],"pandas.qcut(train_predict['prob'],10,labels=False)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_aggdata_train,pandas.read_csv('C:/sandeep_operabackup/Analytics/HackerEarth/HDFCCreditScoring/train_data/AggregateData_Train.csv'),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_txndata_train,pandas.read_csv('C:/sandeep_operabackup/Analytics/HackerEarth/HDFCCreditScoring/train_data/TransactionData_Train.csv'),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_aggdata_test,pandas.read_csv('C:/sandeep_operabackup/Analytics/HackerEarth/HDFCCreditScoring/test_data/AggregateData_Test.csv'),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_txndata_test,pandas.read_csv('C:/sandeep_operabackup/Analytics/HackerEarth/HDFCCreditScoring/test_data/TransactionData_Test.csv'),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ser,numpy.log(ser),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(figsize=(10,4)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tstats,"scipy.stats.ttest_ind(train_data_final[train_data_final['bad_flag']==1][num_variable],train_data_final[train_data_final['bad_flag']==0][num_variable])",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=0)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_cv,y_train,y_cv","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=1)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=0)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_cv,y_train,y_cv","sklearn.model_selection.train_test_split(X,y,test_size=0.2)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_cv,y_train,y_cv","sklearn.model_selection.train_test_split(X,y,test_size=0.3)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=0)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_X,test_X","sklearn.model_selection.train_test_split(X,test_size=0.3,random_state=42)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_X,test_X,train_y,test_y","sklearn.model_selection.train_test_split(X[features],
X['default'],
test_size=0.7,
random_state=142)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree_cm,"sklearn.metrics.confusion_matrix(tree_test_pred.predicted,
tree_test_pred.actual,
[1,0])",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree_cm,"sklearn.metrics.confusion_matrix(tree_test_pred.predicted,
tree_test_pred.actual,
[1,0])",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
auc,"sklearn.metrics.roc_auc_score(yvl,pred_test)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
auc,"sklearn.metrics.roc_auc_score(y_cv,pred_cv)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
auc,"sklearn.metrics.roc_auc_score(yvl,pred)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(yvl,pred_test)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(y_cv,pred_cv)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(yvl,pred)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(random_state=1),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(random_state=1),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
logreg,sklearn.linear_model.LogisticRegression(),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LogisticRegression(),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfe,"sklearn.feature_selection.RFE(logreg,10)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(yvl,pred_test)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(yvl,pred_test)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(yvl,pred_test)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(yvl,pred_test)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(yvl,pred_test)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,"sklearn.metrics.accuracy_score(yvl,pred_test)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=1,shuffle=True)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=1,shuffle=True)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=1,shuffle=True)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=1,shuffle=True)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=1,shuffle=True)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
kf,"sklearn.model_selection.StratifiedKFold(n_splits=5,random_state=1,shuffle=True)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.RandomForestClassifier(random_state=1,max_depth=10)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,"sklearn.ensemble.RandomForestClassifier(random_state=1,max_depth=10)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_search,sklearn.model_selection.GridSearchCV(RandomForestClassifier(random_state=1),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tree,sklearn.model_selection.GridSearchCV(DecisionTreeClassifier(),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
confusion_matrix,"sklearn.metrics.confusion_matrix(yvl,pred_test)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
confusion_matrix,"sklearn.metrics.confusion_matrix(y_test,y_pred)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
logit_roc_auc,"sklearn.metrics.roc_auc_score(y_test,logreg.predict(X_test)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(yvl.values,check)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,logreg.predict_proba(X_test)",CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_tree,sklearn.tree.DecisionTreeClassifier(max_depth=3),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf_tree,sklearn.tree.DecisionTreeClassifier(max_depth=5),CLUSTER_20,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
centroids_df,"pandas.DataFrame(centroids,columns=colnames)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
centroids_df,"pandas.DataFrame(centroids,columns=colnames)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('drone_delivery_v1.csv',sep=';')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
colors,"numpy.where(df_copy[""cluster_id""]==0,'r','-')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
colors,"numpy.where(df_copy2[""cluster_id""]==0,'r','-')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
colors,"numpy.where(df_copy3[""cluster_id""]==0,'r','-')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
colors,"numpy.where(df_copy4[""cluster_id""]==0,'r','-')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
agglo,sklearn.cluster.AgglomerativeClustering(n_clusters=num_clusters),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
agglo,sklearn.cluster.AgglomerativeClustering(n_clusters=num_clusters),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=num_clusters),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=num_clusters),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
coeff_df,"pandas.DataFrame(lm.coef_,X.columns,columns=['Coefficient'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
USAhousing,pandas.read_csv('USA_Housing.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.4,random_state=101)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
B,"numpy.array([[False,True,False],
[False,False,True],
[True,True,False]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
row,"numpy.array(board_coords[""x""])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
col,"numpy.array(board_coords[""y""])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,numpy.array([1]*len(coords_df),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
demo_board,"numpy.array([[0,1,1],
[0,1,0],
[1,0,0]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
demo_board,"numpy.array([[0,1,1],
[0,1,0],
[1,0,0]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
demo_count_soln,"numpy.array([[2,2,2],
[3,3,3],
[1,2,1]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
assert(new_demo_board,"=numpy.array([[0,1,1],
[1,1,1],
[0,0,0]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
count,"numpy.zeros(board.shape,dtype=int)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
all_boards,"numpy.zeros((N,N,MAX_STEPS)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mismatches_coords,numpy.where(compare_boards==False),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mismatches,numpy.where(~matches),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
board,"numpy.pad(board,1,pad_with,padder=0)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
a,"numpy.pad(demo_board,1,pad_with,padder=0)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
board_of_life_soln,"numpy.loadtxt(data_paths[""board_of_life_soln2.csv""],delimiter="","",dtype=int)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
step_soln,"numpy.loadtxt(data_paths['step.csv'],delimiter=',',dtype=int)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mismatches_df,"pandas.DataFrame(np.array([mismatches_coords[0],mismatches_coords[1]])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
board_coords,pandas.read_csv(data_paths['life.csv']),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mperr,"numpy.array([1.03,.33,.16,.09,.04,.02,.01,0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mmerr,"numpy.array([.35,.14,.05,.03,.02,.02,.01,0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
aperr,"numpy.array([.34,.24,.14,.11,.07,.05,.03,.02])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
amerr,"numpy.array([.32,.23,.13,.1,.07,.05,.03,.02])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
lnP,numpy.sum(-alpha*np.log(mass),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
mass,numpy.power((1.-phi),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"n,bins,patches","matplotlib.pyplot.hist(mass_samp,bins=30,fill=None,histtype='step',linewidth=2)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
train,"numpy.array(np.split(train,len(train)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
test,"numpy.array(np.split(test,len(test)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
inv_yhat,"numpy.concatenate((yhat,test_X[:,-6:])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
inv_y,"numpy.concatenate((test_y,test_X[:,-6:])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,"numpy.sqrt(mean_squared_error(inv_y,inv_yhat)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
	dff,pandas.DataFrame(data),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
	agg,"pandas.concat(cols,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
d,"pandas.read_csv('household_power_consumption.csv',header=0,infer_datetime_format=True,parse_dates=['datetime'],index_col=['datetime'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(len(years),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(len(months),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(len(days),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(len(years),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.subplot(len(months),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mse,"sklearn.metrics.mean_squared_error(actual[:,i],predicted[:,i])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmse,math.sqrt(mse),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
score,math.sqrt(s/(actual.shape[0]*actual.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
articles,pandas.read_csv('../data/arxiv_math_2007.csv'),CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
groups,"numpy.array([0,1,2,1,1,3,1,3,0,0,1,1,1,0])",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,random_state=1)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
example_df,"pandas.DataFrame(data=data_input,
columns=['A','B'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(data=data_input,columns=col_names)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df1,"pandas.DataFrame([[1,2],[4,5]],columns=['A','B'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df2,"pandas.DataFrame([[2,3],[6,7]],columns=[""B"",'C'])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
result,"pandas.DataFrame({
'Model':model_names,
'RMSLE':rmsle,
})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_results,pandas.DataFrame(grid_gbrt.cv_results_),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,"pandas.concat([
result,
pd.DataFrame(
[
[
'TunedGradientBoostingRegressor',
np.sqrt(
mean_squared_log_error(
y_pred,
y_testing,
)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_result,"pandas.concat([
prev_result,result
],axis=0,sort=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_pickle('../data-fill-windspeed.pkl.xz'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
prev_result,pandas.read_pickle('../rmsle_fill_windspeed.pkl'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_testing,y_train,_,_,y_testing","sklearn.model_selection.train_test_split(
x,y,count_original,
test_size=0.25,random_state=42,
)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
grid_gbrt,"sklearn.model_selection.GridSearchCV(
gbrt_m,
gbrt_params,
scoring=rmsle_scorer,
cv=3
)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
gbrt_m,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
rmsle_scorer,"sklearn.metrics.make_scorer(root_mean_squared_log_error,greater_is_better=False)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
s_aves,numpy.array([tmp[r]['aveFitness']forrinreps]),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
s_errs,numpy.array([tmp[r]['aveError']forrinreps]),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
td[tp],numpy.zeros(len(td),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_lines,numpy.zeros((len(rows),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_lines,numpy.zeros((len(rows),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
all_lines,numpy.zeros((len(rows),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tmp['ave_s'],"numpy.mean(s_aves,axis=1)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
td[tp+'.logfreq.plot'],numpy.log10(np.clip((td[tp]/tmp_sum),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tmp['ave_err'],"numpy.power(np.mean(numpy.power(s_errs,2)",CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tmp_read_dat,numpy.nan_to_num(td.as_matrix([bfa_name+'-'+env+'-'+rep+'-Time'+str(i*8),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dbfa2,pandas.read_csv('../Final_Count_Pipeline/BFA_data/Combined_Counts/dBFA2_counts.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hbfa1,pandas.read_csv('../Final_Count_Pipeline/BFA_data/Combined_Counts/hBFA1_counts.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
hbfa2,pandas.read_csv('../Final_Count_Pipeline/BFA_data/Combined_Counts/hBFA2_counts.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
d_w_pools,pandas.read_csv('../Final_Count_Pipeline/BFA_data/dBFA2_Harvard_1/dBFA2_Harvard_1_bc_counts_clustered.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tp_exclusion,pandas.read_csv('bfa_timepoint_exclusion_list.csv'),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
tp_ex,collections.defaultdict(lambda:collections.defaultdict(lambda:collections.defaultdict(list),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fit_data,collections.defaultdict(dict),CLUSTER_8,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(6,6)",CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(8,8)",CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(6,6)",CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(7,6)",CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
"f,(ax1,ax2)","matplotlib.pyplot.subplots(2,1,sharex=True,sharey=True,figsize=(15,6)",CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
plot,"seaborn.countplot(x='etykieta',data=physionet_overview)",CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
plot,"seaborn.violinplot(x=""baza"",y=""recording_length"",hue=""etykieta"",data=physionet_overview)",CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
physionet_overview,pandas.read_csv(PHYSIONET_DATASET_OVERVIEW),CLUSTER_14,CLUSTER_3,CLUSTER_9,CLUSTER_0,CLUSTER_0
r,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get(url+feature),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get(url_base+img_src),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
dataset,pandas.DataFrame(r.json(),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
options,pandas.DataFrame(r.json(),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
examples,pandas.DataFrame(r.json(),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_0,CLUSTER_1
x,numpy.arange(len(data_ot['MatchShort']),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(len(data_bm['MatchShort']),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_wc,"pandas.read_csv(""WC_2019_OldTrafford.csv"")",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
obj,numpy.array(correlation_map),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv(url),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(train,test,test_size=0.3,shuffle=True)",CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LogisticRegression(),CLUSTER_28,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
price,requests.get(url_price),CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
priceTETCD,requests.get(url_price_TETCD),CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pricecoal,requests.get(url_price_coal),CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pricenaturalgas,requests.get(url_price_naturalgas),CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Oil_data,"pandas.DataFrame({""year"":year,""PriceofOil"":price_value},index=year)",CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
Coal_data,"pandas.DataFrame({""year"":year_COAL,""PriceofCoal"":price_COAL},index=year_COAL)",CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
naturalgas_data,"pandas.DataFrame({""year"":year_NATURALGAS,""PriceofNaturalGas"":price_NATURALGAS},index=year_NATURALGAS)",CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"gas,","matplotlib.pyplot.plot(Price_data_final['year'],Price_data_final['PriceofNaturalGas'],color=""blue"",label=""NaturalGas"")",CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"oil,","matplotlib.pyplot.plot(Price_data_final['year'],Price_data_final['PriceofOil'],color=""green"",label=""Oil"")",CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"coal,","matplotlib.pyplot.plot(Price_data_final['year'],Price_data_final['PriceofCoal'],color=""red"",label=""Coal"")",CLUSTER_27,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
"xx,yy","numpy.meshgrid(np.arange(x_min,x_max,hx)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""wholesale-customers.csv"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=6),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,sklearn.decomposition.PCA(n_components=2),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ica,sklearn.decomposition.FastICA(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_scaled,sklearn.preprocessing.scale(data),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmean,sklearn.cluster.KMeans(n_clusters=num_clusters),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
r,"random.randint(0,len(reduced_data)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
loss,numpy.sum((np.array(originalDF),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tempDF,"pandas.DataFrame(data=xDF.loc[:,0:1],index=xDF.index)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train_PCA,"pandas.DataFrame(data=X_train_PCA,index=X_train.index)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_train_PCA_inverse,"pandas.DataFrame(data=X_train_PCA_inverse,\
index=X_train.index)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test_PCA,"pandas.DataFrame(data=X_test_PCA,index=X_test.index)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_test_PCA_inverse,"pandas.DataFrame(data=X_test_PCA_inverse,\
index=X_test.index)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
loss,"pandas.Series(data=loss,index=originalDF.index)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
preds,"pandas.concat([trueLabels,anomalyScores],axis=1)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
tempDF,"pandas.concat((tempDF,yDF)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
preds,"pandas.concat([y_train,anomalyScoresPCA],axis=1)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
preds,"pandas.concat([y_test,anomalyScorestestPCA],axis=1)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,pandas.read_csv(current_path+file),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
current_path,os.getcwd(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,matplotlib.pyplot.gca(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
color,seaborn.color_palette(),CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(preds['trueLabel'],preds['anomalyScore']>0.02)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
cm,"sklearn.metrics.confusion_matrix(preds['trueLabel'],preds['anomalyScorestestPCA']>0.02)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(preds['trueLabel'],\
preds['anomalyScore'])",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
areaUnderROC,"sklearn.metrics.auc(fpr,tpr)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
pca,"sklearn.decomposition.PCA(n_components=n_components,whiten=whiten,\
random_state=random_state)",CLUSTER_28,CLUSTER_3,CLUSTER_3,CLUSTER_0,CLUSTER_0
dpth,os.getcwd(),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
word_counts,collections.Counter(int_words),CLUSTER_6,CLUSTER_7,CLUSTER_1,CLUSTER_0,CLUSTER_0
valid_examples,numpy.array(random.sample(range(valid_window),CLUSTER_6,CLUSTER_7,CLUSTER_1,CLUSTER_0,CLUSTER_0
valid_examples,"numpy.append(valid_examples,
random.sample(range(1000,1000+valid_window)",CLUSTER_6,CLUSTER_7,CLUSTER_1,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(16,16)",CLUSTER_6,CLUSTER_7,CLUSTER_1,CLUSTER_0,CLUSTER_0
tsne,sklearn.manifold.TSNE(),CLUSTER_6,CLUSTER_7,CLUSTER_1,CLUSTER_0,CLUSTER_0
c,numpy.arange(15),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
res_grid,pandas.DataFrame(grid_search.cv_results_),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
default,pandas.DataFrame(default.cv_results_),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
res,"pandas.concat([res_grid,default],sort=False)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""/mntDrive/MyDrive/НИРмагистратура/Оптимизациягиперпараметровалгоритмовградиентногобустинга/Практика/data/input/prepared_facebook_data.csv"")",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
start,time.time(),CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
grid_search,"sklearn.model_selection.GridSearchCV(clf,param_grid=param_grid,cv=5,scoring=""r2"",iid=False)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
default,"sklearn.model_selection.GridSearchCV(clf,param_grid={'max_depth':[3]},cv=5,scoring=""r2"",iid=False)",CLUSTER_28,CLUSTER_12,CLUSTER_7,CLUSTER_0,CLUSTER_0
df1,pandas.read_csv('Apple.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df2,pandas.read_csv('amazon.csv'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
stock.Date,"pandas.to_datetime(stock.Date,format='%Y%m%d',errors='ignore')",CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
stock.index,pandas.to_datetime(stock.index),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
pred,results.get_prediction(start=pandas.to_datetime('2017-12-31'),CLUSTER_5,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
meta_df,"pandas.DataFrame(index=expr_df.columns,
columns=['genotype','gene','perturbation'])",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
res_df,"pandas.DataFrame(res,index=expr_df.index)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
expr_df,"pandas.read_csv(os.path.join(os.environ['WORKDIR'],'zebra_expression_map_3.tsv')",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
enrichr_results,"pandas.read_excel(enrichr_result_file,sheetname=None)",CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_14,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
X_train,"numpy.reshape(X_train,(1257,1,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
inputs,"numpy.reshape(inputs,(168,1,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
today,pandas.DataFrame(X_train[0:5]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
tomorrow,pandas.DataFrame(y_train[0:5]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
ex,"pandas.concat([today,tomorrow],axis=1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
training_set,pandas.read_csv('Tesla_Stock_Price_Train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_set,pandas.read_csv('Tesla_Stock_Price_Test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_set,pandas.read_csv('Tesla_Stock_Price_Test.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
real_stock_price_train,pandas.read_csv('Tesla_Stock_Price_Train.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sc,sklearn.preprocessing.MinMaxScaler(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
xwb_targets,"numpy.asarray([xwb[k,Y_train_batch[k]]forkinrange(batch_size)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xwb_targets,"numpy.asarray([xwb[k,Y_val[k]]forkinrange(Y_val.shape[0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xwb_targets,"numpy.asarray([xwb[k,Y_test[k]]forkinrange(Y_test.shape[0])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
can,"numpy.zeros((320,320,3)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
b,numpy.zeros(num_classes),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
can,"numpy.zeros((320,32,3)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xwb,"numpy.dot(X_train_batch,W)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
dW,"numpy.dot(X_train_batch.T,softmax)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xwb,"numpy.dot(X_val,W)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xwb,"numpy.dot(X_test,W)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
idxs,numpy.flatnonzero(Y_train_raw==i),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
guesses,"numpy.argmax(xwb,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
guesses,"numpy.argmax(xwb,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
guesses,"numpy.argmax(xwb,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sum_exp,"numpy.sum(xexp,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
train_acc,numpy.sum(matches),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
db,"numpy.sum(softmax,0)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sum_exp,"numpy.sum(xexp,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
val_acc,numpy.sum(matches),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sum_exp,"numpy.sum(xexp,1)",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
test_acc,numpy.sum(matches),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xexp,numpy.exp(xwb),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xexp,numpy.exp(xwb),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
xexp,numpy.exp(xwb),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
log_sum_exp,numpy.log(sum_exp),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
log_sum_exp,numpy.log(sum_exp),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
log_sum_exp,numpy.log(sum_exp),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
sum_exp_stack,numpy.stack([sum_expforkinrange(num_classes),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"plt.hist(residuals,bins",numpy.ceil(np.sqrt(len(y),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
log_y,numpy.log10(y+1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_new,pandas.DataFrame({'X':[50]}),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
weather,pandas.get_dummies(bike_data.weathersit),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mammals,pandas.read_csv(wd+'msleep.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
bike_data,pandas.read_csv(wd+'bikeshare.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cmap,"seaborn.diverging_palette(220,10,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
pvals,"sklearn.feature_selection.f_regression(X,y)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(fit_intercept=False),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(fit_intercept=boolean),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
boundaries,"numpy.arange(start=15,stop=45,step=1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
boundaries,"numpy.arange(start=17,stop=47,step=1)",CLUSTER_23,CLUSTER_11,CLUSTER_8,CLUSTER_0,CLUSTER_1
start,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
end,time.time(),CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('data/human_body_temperature.csv'),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mu,numpy.mean(df.temperature),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sigma,numpy.std(df.temperature),CLUSTER_5,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
logLeg,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"xtrain,xtest,ytrain,ytest","sklearn.model_selection.train_test_split(x,y,test_size=0.3,random_state=0)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
cmData,"sklearn.metrics.confusion_matrix(ytest,rResult)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""Diabetes.csv"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
k,numpy.arange(11),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
k,numpy.arange(6),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_11
chosen_log_pi,numpy.zeros(z_dim),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
chosen_mu,numpy.zeros(z_dim),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
chosen_log_sigma,numpy.zeros(z_dim),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
current_h,numpy.zeros(256),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
current_c,numpy.zeros(256),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
next_h,numpy.zeros(256),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
next_c,numpy.zeros(256),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
next_zs,"numpy.zeros(shape=(32,299)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
next_mus,"numpy.zeros(shape=(32,299)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
next_rews,"numpy.zeros(shape=(1,299)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
hot_zs,numpy.where(np.exp(initial_log_var[0]/2),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
next_z,"numpy.concatenate([next_z,[-1,1,0],[next_reward]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
next_z,"numpy.concatenate([next_z,[-1,1,0],[next_reward]])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
z_pred,"numpy.reshape(z_pred,[-1,GAUSSIAN_MIXTURES*3])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
z_pred,"numpy.reshape(z_pred,[-1,GAUSSIAN_MIXTURES*3])",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
b,"numpy.swapaxes(actual,0,1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
pi,numpy.exp(pi),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
pi,numpy.copy(log_pi),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
"log_pi,mu,log_sigma","numpy.split(z_pred,3,1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
"log_pi,mu,log_sigma","numpy.split(z_pred,3,1)",CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
rnn_files,numpy.load('./data/rnn_files.npz'),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
initial_mu,numpy.load('./data/initial_z.npz'),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
initial_log_var,numpy.load('./data/initial_z.npz'),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
rollout_files,numpy.load('./data/rollout/999206096.npz'),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
series_files,numpy.load('./data/series/999206096.npz'),CLUSTER_2,CLUSTER_4,CLUSTER_5,CLUSTER_0,CLUSTER_1
source,"requests.get('https://www.imsdb.com/scripts/Matrix,-The.html')",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(script_list,columns=['Speaker','Text'])",CLUSTER_18,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
coef,"pandas.Series(linear_model.coef_,predictors)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
automobile_df,pandas.read_csv('datasets/auto-mpg-processed.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(figsize=(12,8)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.2)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
linear_model,sklearn.linear_model.LinearRegression(normalize=True),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
linear_model,sklearn.linear_model.LinearRegression(normalize=True),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
linear_model,sklearn.linear_model.LinearRegression(normalize=True),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
current_seq,"numpy.roll(current_seq,-1,1)",CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
current_seq,"numpy.full((1,sequence_length)",CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
word_count,collections.Counter(text),CLUSTER_10,CLUSTER_7,CLUSTER_0,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame([np.random.normal(32000,200000,3650)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
std,numpy.std(df.loc[id]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
mean,numpy.average(df.loc[id]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
se,scipy.stats.sem(df.loc[id]),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
username_1,"re.match(r'^[0-9a-zA-Z]{6,20}$',username)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
qq_1,"re.match(r'^[1-9]\d{4,11}$',qq)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
ti_huan,"re.sub('[操艹]|傻[比逼叉屌缺]|fuck|shit|逼',
'*',nei_rong,flags=re.IGNORECASE)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
chaifen_poem,"re.split(r'[，。]',poem)",CLUSTER_30,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
u,"numpy.arange(-1,Nu+1)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,numpy.asarray(x),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y,numpy.asarray(y),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dist_tot,numpy.sum(np.sqrt(dx*dx+dy*dy),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
dist,numpy.sqrt(dx*dx+dy*dy),CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y1,"numpy.sqrt(norm(x,0.7,0.05)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,10,100)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x,"numpy.linspace(0,1,100)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"x_int,y_int","scipy.interpolate.splev(u,res[0])",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
res,"scipy.interpolate.splprep([x_scaled,y_scaled],s=0,k=k)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
b,"scipy.signal.firwin(f1,f2*dist_tot,window=('kaiser',f3)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
response,"scipy.signal.lfilter(b,1,coeffs)",CLUSTER_14,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
data2,"pandas.DataFrame(pd.read_excel(""食品上市公司名单2.xlsx"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
datadf,"pandas.DataFrame(data.iloc[:,0:])",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
datadf,"pandas.merge(datadf,data2,on=""市公司简称"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
data,"pandas.read_excel(""供应商.xlsx"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
df2,"pandas.DataFrame(columns=['Artist','Album','TopRating'])",CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df1,pandas.read_csv('music_winter_2020.csv'),CLUSTER_0,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
productivity_df,pandas.DataFrame({'driver_gk':raw_data.driver_gk.value_counts(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
popularity_df,pandas.DataFrame({'order_gk':raw_data.order_gk.value_counts(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
productivity_df['PERFORMANCE_category'],pandas.Series(spisok),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
popularity_df['POPULARITY_category'],pandas.Series(spisok),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
feature_imp,"pandas.Series(model.feature_importances_,index=headers)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_1,pandas.get_dummies(model_df.offer_class_group),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_2,pandas.get_dummies(model_df.ride_type_desc),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
raw_data,pandas.read_csv('taxi.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
v1,"numpy.array([raw_data.driver_latitude[23575],raw_data.driver_longitude[23575]])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
v2,"numpy.array([raw_data.origin_order_latitude[23575],raw_data.origin_order_longitude[23575]])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
v1,"numpy.array([line['driver_latitude'],line['driver_longitude']])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
v2,"numpy.array([line['origin_order_latitude'],line['origin_order_longitude']])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
v1,"numpy.array([line['driver_latitude'],line['driver_longitude']])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
v2,"numpy.array([line['origin_order_latitude'],line['origin_order_longitude']])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cosine,"numpy.dot(v1,v2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cosine,"numpy.dot(v1,v2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
v1Length,numpy.linalg.norm(v1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
v2Length,numpy.linalg.norm(v2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
v1Length,numpy.linalg.norm(v1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
v2Length,numpy.linalg.norm(v2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
distance,"math.hypot(v2[0]-v1[0],v2[1]-v1[1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
distance,"math.hypot(v2[0]-v1[0],v2[1]-v1[1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(input_x,output_y,test_size=0.2,random_state=9)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.ensemble.RandomForestClassifier(n_estimators=50),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['label'],"pandas.cut(df.logerror,[-100,-0.05,-0.004,0.027,0.05,0.1,100],labels=[0,1,2,3,4,5])",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.read_csv('train_data.csv'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
index,numpy.arange(y.shape[0]),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df['label1'],numpy.exp(df.logerror.values),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y,numpy.load('label.npy'),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
lbl,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnist_train_data,"numpy.array(mnist_train_pd.iloc[:,1:])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnist_train_labels,"numpy.array(mnist_train_pd.iloc[:,0])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnist_test_data,"numpy.array(mnist_test_pd.iloc[:,1:])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnist_test_labels,"numpy.array(mnist_test_pd.iloc[:,0])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cifar10_test_labels,numpy.array(test_batch[batch_keys[1]]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cifar10_test_data,numpy.array(test_batch[batch_keys[2]]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cifar10_train_data_f,"numpy.array([row.transpose((1,2,0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cifar10_test_data_f,"numpy.array([row.transpose((1,2,0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X_d,"numpy.array(X[np.where(X[:,0]==d)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
prior,numpy.array(prior),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mu,numpy.array(mu),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
s2,numpy.array(s2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
p_t,numpy.array(p_t),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnist_random_classification,"numpy.array([random.randint(0,K)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cifar10_random_classification,"numpy.array([random.randint(0,K)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
t_label_pred,numpy.array([min(max(round(p),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cifar10_train_labels,numpy.concatenate([data_batch[i][batch_keys[1]]foriinrange(5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cifar10_train_data,numpy.concatenate([data_batch[i][batch_keys[2]]foriinrange(5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
w,"numpy.dot(inv(numpy.dot(X.T,X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
s2,"numpy.dot((t-numpy.dot(X,w)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mu,"numpy.dot(sigma,numpy.dot(X.T,t)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
t_pred,"numpy.dot(X_new,mu)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,numpy.ones(x.shape[0]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
I,numpy.identity(X.shape[1]),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
t_new,"numpy.argmax(p_t,axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
var,"numpy.var(X_d,axis=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnist_train_X,"numpy.hstack((mnist_train_labels.reshape(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cifar10_train_X,"numpy.hstack((cifar10_train_labels.reshape(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
X,"numpy.hstack((X,np.power(x,i+1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cnn_train,"numpy.hstack((mnist_train_labels.reshape(-1,1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame({""mnist_predictions"":mnist_predictions,""mnist_test_labels"":mnist_test_labels})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.DataFrame({""cifar10_predictions"":cifar10_predictions,""cifar10_test_labels"":cifar10_test_labels})",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnist_train_pd,pandas.read_csv(mnist_train_path),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnist_test_pd,pandas.read_csv(mnist_test_path),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(grid[0,0],aspect=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax1,"matplotlib.pyplot.subplot(grid[0,0],aspect=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(n_rows,n_cols,figsize=(7,7)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(n_rows,n_cols,figsize=(7,7)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(1,2,figsize=(20,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(10,10)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axs","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
matrix,"sklearn.metrics.confusion_matrix(y_true,y_pred)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
loss_l,"sklearn.metrics.log_loss(y_true=t,y_pred=p_t.T)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(t,t_new)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mnist_random_accuracy,"sklearn.metrics.accuracy_score(mnist_test_labels,mnist_random_classification)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cifar10_random_accuracy,"sklearn.metrics.accuracy_score(cifar10_test_labels,cifar10_random_classification)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
accuracy,"sklearn.metrics.accuracy_score(t_label_pred,t_new)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sigma,"numpy.linalg.inv((np.dot(X.T,X)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
contents,os.listdir(data_dir),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_5,CLUSTER_3
files,os.listdir(class_path),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_5,CLUSTER_3
labels,numpy.array([eachforeachinreaderiflen(each),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_5,CLUSTER_3
codes,"numpy.fromfile(f,dtype=np.float32)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_5,CLUSTER_3
images,numpy.concatenate(batch),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_5,CLUSTER_3
codes,"numpy.concatenate((codes,codes_batch)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_5,CLUSTER_3
lb,sklearn.preprocessing.LabelBinarizer(),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_5,CLUSTER_3
ss,"sklearn.model_selection.StratifiedShuffleSplit(n_splits=1,test_size=0.2)",CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_5,CLUSTER_3
_,matplotlib.pyplot.yticks(np.arange(5),CLUSTER_29,CLUSTER_8,CLUSTER_8,CLUSTER_5,CLUSTER_3
p,pandas.Period('7/2016'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ts_pd,pandas.Series(range(num_periods),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ts_dt,pandas.Series(range(num_periods),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ts_pd_2,pandas.Series(range(num_periods),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
t,pandas.Timestamp('2016-07-1010:15:15'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
t,pandas.Timestamp('2016-07-108pm'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
t,pandas.Timestamp('7/21/2016'),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
rng,"pandas.date_range('2016Jul1510:15',end='2016Jul25',freq='8H')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
rng,"pandas.date_range('2016Jul15',periods=10,freq='M',normalize=True)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
rng,"pandas.period_range('2016-01-0112:15',freq='H',periods=10)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
rng,"pandas.period_range('2016-01-0112:15',freq='60T',periods=10)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
rng,"pandas.period_range('2016-01-0112:15',freq='1H',periods=10)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"pd.to_datetime('01/07/2016',dayfirst","True)==pandas.to_datetime('01/07/2016',dayfirst=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"pd.to_datetime('01-07-2016',dayfirst","True)==pandas.to_datetime('01-07-2016',dayfirst=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"pd.to_datetime('2016-01-07',dayfirst","True)==pandas.to_datetime('2016-01-07',dayfirst=False)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
coeffecients,"pandas.DataFrame(lm.coef_,X.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
customers,"pandas.read_csv(""EcommerceCustomers"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.3,random_state=101)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lm,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
nonzeroy,numpy.array(nonzero[0]),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
nonzerox,numpy.array(nonzero[1]),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
frame_heatmap,"numpy.zeros_like(image[:,:,0])",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
y,numpy.hstack((np.ones(len(car_features),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
hog_features,"numpy.hstack((hog_feat1,hog_feat2,hog_feat3)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
combined_features,"numpy.hstack((spatial_features,hist_features,hog_features)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
X,"numpy.vstack((car_features,notcar_features)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
draw_image,numpy.copy(image),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
draw_img,numpy.copy(img),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
draw_image,numpy.copy(image),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t2,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t2,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
t,time.time(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
svc,sklearn.svm.LinearSVC(loss='hinge'),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
X_scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_X,y,test_size=0.2,random_state=42)",CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
heatmaps,collections.deque(maxlen=10),CLUSTER_22,CLUSTER_8,CLUSTER_11,CLUSTER_2,CLUSTER_5
iris,seaborn.load_dataset('iris'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(10,10,figsize=(8,8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,axes","matplotlib.pyplot.subplots(10,10,figsize=(8,8)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xfit,"numpy.linspace(-1,11)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.linear_model.LinearRegression(fit_intercept=True),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.naive_bayes.GaussianNB(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
model,sklearn.decomposition.PCA(n_components=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
digits,sklearn.datasets.load_digits(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iso,sklearn.manifold.Isomap(n_components=2),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mat,"sklearn.metrics.confusion_matrix(ytest,y_model)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x,numpy.arange(3),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
current_xj_probability,numpy.log(count_current_class_with_value_xj),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
iris,sklearn.datasets.load_iris(),CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
"X_train,X_test,Y_train,Y_test","sklearn.model_selection.train_test_split(X,Y,test_size=0.25,random_state=0)",CLUSTER_10,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_1
full_df,"pandas.DataFrame(X,columns=names)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
NormalizedDT,"pandas.DataFrame(x_scaled,columns=dtTemp.columns)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
min_max_scaler,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,2)",CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
X,sklearn.datasets.load_breast_cancer(),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
y,sklearn.datasets.load_breast_cancer(),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
names,sklearn.datasets.load_breast_cancer(),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
now,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
now,datetime.datetime.now(),CLUSTER_4,CLUSTER_2,CLUSTER_10,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.subplot(1,batch_size,i+1)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
"f,(ax1,ax2,ax3)","matplotlib.pyplot.subplots(1,3,figsize=(15,5)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
sobel_x,"numpy.array([[-1,0,1],
[-2,0,2],
[-1,0,1]])",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
gray,numpy.array(img),CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
image,"numpy.transpose(image,(1,2,0)",CLUSTER_26,CLUSTER_7,CLUSTER_11,CLUSTER_30,CLUSTER_8
mask,numpy.array([0]*unknowns+[1]*(n*n-unknowns),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
diff,"numpy.zeros([n,n])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
diff,"numpy.zeros([n,n])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
descent_matrix,"numpy.zeros([n,n])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
grad,"numpy.zeros([n,n])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
diff,"numpy.zeros([n,n])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
original,"numpy.dot(U,V.T)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
y_sigma,numpy.ones(np.size(x),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mask,"numpy.reshape(mask,[n,n])",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fit_params_error,numpy.sqrt(np.diag(fit_cov),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
x_fitfunc,numpy.linspace(min(x),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
starting_point,numpy.copy(original),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
starting_point,numpy.copy(original),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"hist,bins","numpy.histogram(normresidual,bins=30)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
descent,"numpy.linalg.lstsq(np.diag(comp_hessian(current_point,boolMask,obj_func)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
prev_norm,"numpy.linalg.norm(starting_point,'nuc')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cur_norm,"numpy.linalg.norm(current_point,'nuc')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
prev_norm,"numpy.linalg.norm(starting_point,'nuc')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
cur_norm,"numpy.linalg.norm(current_point,'nuc')",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
svd,"numpy.linalg.svd(m,compute_uv=False)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
mask,numpy.ma.make_mask(mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
boolMask,numpy.ma.make_mask(np.where(np.array(mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
boolMask,numpy.ma.make_mask(np.where(np.array(mask),CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(7,10)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
"fit_params,fit_cov","scipy.optimize.curve_fit(fit_function,x,y,sigma=y_sigma,p0=guesses,
maxfev=10**5)",CLUSTER_2,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_1
Y_true,"numpy.zeros((n_labels,y_train.shape[0])",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Y_test,"numpy.zeros((n_labels,y_test.shape[0])",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
W1,"numpy.zeros((1,X_train.shape[0])",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
B1,"numpy.zeros((1,X_train.shape[0])",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
W1,"numpy.zeros((next_layer,X_train.shape[0])",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
B1,"numpy.zeros((1,X_train.shape[1])",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,"numpy.matmul(W1,X_train)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,"numpy.matmul(W1,X_train)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,"numpy.matmul(W,X)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
Z,numpy.matmul(cache['W'+str(i),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
pre_mul,"numpy.matmul(dJ.T,dA_dZ)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
dW,"numpy.matmul(pre_mul,cache['A'+str(len(h_params['nn_arch'])",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
pre_mul,numpy.matmul(cache['W'+str(i+1),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
dW,"numpy.matmul(pre_mul,cache['A'+str(i-1)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
pre_mul,numpy.matmul(cache['W'+str(1),CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
dW,"numpy.matmul(pre_mul,X.T)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_train_flattened,"numpy.reshape(x_train,(x_train.shape[0],-1)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
x_test_flattened,"numpy.reshape(x_test,(x_test.shape[0],-1)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
dB,"numpy.sum(pre_mul,axis=1,keepdims=True)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
dB,"numpy.sum(pre_mul,axis=1,keepdims=True)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
dB,"numpy.sum(pre_mul,axis=1,keepdims=True)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
pre_mul,"numpy.multiply(pre_mul,dA_dZ)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
pre_mul,"numpy.multiply(pre_mul,dA_dZ)",CLUSTER_2,CLUSTER_11,CLUSTER_4,CLUSTER_0,CLUSTER_1
"X,Y",numpy.array(X),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
ind,"numpy.zeros((N,K)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
b,numpy.zeros(M2),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
b,numpy.zeros(mo),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Y,"numpy.concatenate((Y0,[1]*len(X1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
Yvalid_flat,"numpy.argmax(Yvalid,axis=1)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
X1,"numpy.repeat(X1,9,axis=0)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
lr,numpy.float32(lr),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
mu,numpy.float32(mu),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
reg,numpy.float32(reg),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
decay,numpy.float32(decay),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
eps,numpy.float32(eps),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
X,"numpy.vstack([X0,X1])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(
data,target,random_state=0)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""C:/Users/Kapila/Desktop/Macquariecoursework/COMP777ComputingMethodsofResearch/FinalProject/Dataset/OnlineNewsPopularity/OnlineNewsPopularity.csv"")",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pos,numpy.arange(len(objects),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_pos,numpy.arange(len(objects),CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
ax,"matplotlib.pyplot.axes(axisbg='
ax.set_axisbelow(True)",CLUSTER_20,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,ax",matplotlib.pyplot.subplots(),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax.set(xticks,numpy.arange(cm.shape[1]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
yticks,numpy.arange(cm.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax.set(xticks,numpy.arange(cm.shape[1]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
yticks,numpy.arange(cm.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
ax.set(xticks,numpy.arange(cm.shape[1]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
yticks,numpy.arange(cm.shape[0]),CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cm,"numpy.array([[241,66],[27,136]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cm,"numpy.array([[300,72],[20,78]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
cm,"numpy.array([[389,27],[19,35]])",CLUSTER_7,CLUSTER_4,CLUSTER_4,CLUSTER_0,CLUSTER_1
embedding_matrix,"numpy.concatenate((embedding_matrix_1,embedding_matrix_2,embedding_matrix_3,embedding_matrix_4)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
all_embs,numpy.stack(embeddings_index.values(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
all_embs,numpy.stack(embeddings_index.values(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
all_embs,numpy.stack(embeddings_index.values(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
submit_df,"pandas.DataFrame({""qid"":test_df[""qid""],""prediction"":y_te})",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
train_df,pandas.read_csv('../input/train.csv'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
test_df,pandas.read_csv('../input/test.csv'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
res,"sklearn.metrics.f1_score(y_val,(pred_val_y>thresh)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"X_tra,X_val,y_tra,y_val","sklearn.model_selection.train_test_split(x_train,y,test_size=0.1,random_state=42)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({
""id"":keys,
""pos"":values
})",CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.concat(df),CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
df_dev,pandas.concat(df_list),CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_parquet(""../data/train.parquet"")",CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_parquet(""../data/brunch/session.parquet"")",CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.read_parquet(""../data/brunch/train.parquet"")",CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
inputs,numpy.array(input_list),CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
label,numpy.array(label_list),CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
mask,numpy.array(mask_list),CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
idx,"numpy.where(~mask,np.arange(mask.shape[1])",CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
session_input,"numpy.concatenate(frame.session_input.values,axis=None)",CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
session_output,"numpy.concatenate(frame.session_output.values,axis=None)",CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
session_mask,"numpy.concatenate(frame.session_mask.values,axis=None)",CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
user_mask,"numpy.concatenate(frame.user_mask.values,axis=None)",CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
mask,numpy.isnan(arr),CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
input_nans,numpy.isnan(session_input),CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
output_nans,numpy.isnan(session_output),CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
value,numpy.float64(dictionary_length),CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
dictionary,json.load(fp),CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
dictionary,json.load(fp),CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
dictionary,json.load(fp),CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
dictionary,json.load(fp),CLUSTER_1,CLUSTER_11,CLUSTER_2,CLUSTER_0,CLUSTER_1
r,requests.get(base_url),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_0,CLUSTER_1
json_stats,"json.loads(resp.content.decode(""utf-8"")",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
js_obj_rx,re.compile(r'.*?responsive-roster-bio\.ashx.*?(?P<obj>{.*?}),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
resp,"requests.get(url,headers=headers)",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
resp,"requests.get(player_url,headers=headers)",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
resp,"requests.get(stats_url,headers=headers)",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
companies,"pandas.read_csv(""C:/Users/hp/Desktop/DNA/training_data.csv"",header=None)",CLUSTER_1,CLUSTER_10,CLUSTER_2,CLUSTER_0,CLUSTER_1
thisDoc,"numpy.array(setOfWords2Vec(myVocabList,testEntry)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
thisDoc,"numpy.array(setOfWords2Vec(myVocabList,testEntry)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
p0Num,numpy.zeros(numWords),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
p1Num,numpy.zeros(numWords),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pAbusive,numpy.sum(trainCategory),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
p1Denom+,numpy.sum(trainMatrix[i]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
p0Denom+,numpy.sum(trainMatrix[i]),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
p1,numpy.sum(vec2Classify*p1Vec),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
p0,numpy.sum(vec2Classify*p0Vec),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
listOfTokens,"re.split(r'\W*',bigString)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
regEx,re.compile('\\W*'),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
all_df,"pandas.read_excel(""car.xlsx"")",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
minmax_scale,"sklearn.preprocessing.MinMaxScaler(feature_range=(0,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
"train_Features,test_Features,train_Label,test_Label","sklearn.model_selection.train_test_split(X,Y,test_size=0.2,random_state=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({
't':t,
'S':sir[:,0],
'I':sir[:,1],
'R':sir[:,2],
})",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
diff,"numpy.array(sir_diff(N,b,g,params,t_)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
s,"numpy.array(list(solve_sir_i(t,N,beta,gamma)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
beta,numpy.concatenate((np.array([beta1]*int(t1*pdf),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
beta,numpy.concatenate((np.array([beta1]*int(t1*pdf),CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
params,"numpy.add(params,diff)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
t,"numpy.linspace(0,days,num=1000)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
t,"numpy.linspace(0,days,num=points)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(3,1,figsize=(15,12)",CLUSTER_0,CLUSTER_2,CLUSTER_9,CLUSTER_0,CLUSTER_0
x0,"numpy.arange(range_min,range_max,.05,dtype=None)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,numpy.array(list(df.avg_unit_price),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
y,numpy.array(list(df.usd),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x,numpy.array(list(df_cgp_petsmart_sku.avg_unit_price),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
y,numpy.array(list(df_cgp_petsmart_sku.usd),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
max_index,numpy.argmax(pred0),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
row[week_comp_pe],numpy.mean(values),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
z,"numpy.polyfit(x,y,3)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x_df,pandas.DataFrame(x),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
y_df,pandas.DataFrame(y),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x_df0,pandas.DataFrame(x0),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
x_df,pandas.DataFrame(x),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
y_df,pandas.DataFrame(y),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_cgp['opt_price'],pandas.Series(np.zeros(len(df_cgp),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_new,"pandas.concat([df,df_market],axis=1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_new0,"pandas.concat([df_new,df_size],axis=1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_new1,"pandas.concat([df_new0,df_years],axis=1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_new2,"pandas.concat([df_new1,df_brand_high],axis=1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_new3,"pandas.concat([df_new2,df_target_animal],axis=1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_market,pandas.get_dummies(df['market']),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_size,pandas.get_dummies(df_new['base_size']),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_years,pandas.get_dummies(df_new0['year']),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_brand_high,pandas.get_dummies(df_new1['brand_high']),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df_target_animal,pandas.get_dummies(df_new2['target_animal']),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
df,pandas.read_csv('petfood_projectkojak.csv'),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"df_kaytee[""weeks_dt""]","pandas.to_datetime(df_kaytee.loc[:,""weeks""].map(convert_weeks)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"df_notkaytee[""weeks_dt""]","pandas.to_datetime(df_notkaytee.loc[:,""weeks""].map(convert_weeks)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
paths,"pandas.unique(df_cgp[['market','brand_high','upc']].values)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
est,sklearn.pipeline.make_pipeline(PolynomialFeatures(degree),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
est,sklearn.pipeline.make_pipeline(PolynomialFeatures(degree),CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
"fig,ax","matplotlib.pyplot.subplots(1,1)",CLUSTER_4,CLUSTER_3,CLUSTER_3,CLUSTER_14,CLUSTER_0
new_df,"pandas.concat([new_df1,tweets])",CLUSTER_27,CLUSTER_3,CLUSTER_12,CLUSTER_33,CLUSTER_4
tweets,"pandas.read_csv(""Test_Twitter_Comments.csv"")",CLUSTER_27,CLUSTER_3,CLUSTER_12,CLUSTER_33,CLUSTER_4
df,"pandas.read_json(""Data_cyb.json"",lines=True,orient=""columns"")",CLUSTER_27,CLUSTER_3,CLUSTER_12,CLUSTER_33,CLUSTER_4
REPLACE_NO_SPACE,"re.compile(""(\.)",CLUSTER_27,CLUSTER_3,CLUSTER_12,CLUSTER_33,CLUSTER_4
REPLACE_WITH_SPACE,"re.compile(""(<br\s*/><br\s*/>)",CLUSTER_27,CLUSTER_3,CLUSTER_12,CLUSTER_33,CLUSTER_4
REPLACE_NO_SPACE,"re.compile(""(\.)",CLUSTER_27,CLUSTER_3,CLUSTER_12,CLUSTER_33,CLUSTER_4
REPLACE_WITH_SPACE,"re.compile(""(<br\s*/><br\s*/>)",CLUSTER_27,CLUSTER_3,CLUSTER_12,CLUSTER_33,CLUSTER_4
"X,X_test,y,y_test","sklearn.model_selection.train_test_split(new_df[""content""],new_df[""rating""],train_size=0.8)",CLUSTER_27,CLUSTER_3,CLUSTER_12,CLUSTER_33,CLUSTER_4
"X_train,X_val,y_train,y_val","sklearn.model_selection.train_test_split(
X,y,train_size=0.5
)",CLUSTER_27,CLUSTER_3,CLUSTER_12,CLUSTER_33,CLUSTER_4
svm,sklearn.svm.LinearSVC(C=c),CLUSTER_27,CLUSTER_3,CLUSTER_12,CLUSTER_33,CLUSTER_4
final,"sklearn.svm.LinearSVC(tol=.000001,C=0.06)",CLUSTER_27,CLUSTER_3,CLUSTER_12,CLUSTER_33,CLUSTER_4
vertices,"numpy.array([[\
((imshape[1]*(1-trap_bottom_width)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
vertices,"numpy.array([[\
((imshape[1]*(1-trap_bottom_width)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
line_img,"numpy.zeros((img.shape[0],img.shape[1],3)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
mask,numpy.zeros_like(img),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
mask,numpy.zeros_like(edges),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
mask,numpy.zeros_like(edges),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
leftV,numpy.poly1d(left_slp),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
rightV,numpy.poly1d(right_slp),CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
left_slp,"numpy.polyfit(left_side_y,left_side_x,1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
right_slp,"numpy.polyfit(right_side_y,right_side_x,1)",CLUSTER_23,CLUSTER_0,CLUSTER_11,CLUSTER_0,CLUSTER_1
self.beta,numpy.zeros(1+X.shape[1]),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"X[:,0]",numpy.ones(X.shape[0]),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"fpr_scratch,tpr_scratch,_","sklearn.metrics.roc_curve(y,preds_scratch)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
"fpr,tpr,_","sklearn.metrics.roc_curve(y,preds[:,1])",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(lr=1.0,epochs=1000,l2=0)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
lr,"sklearn.linear_model.LogisticRegression(lr=1.0,epochs=11,l2=0)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
clf,sklearn.linear_model.LogisticRegression(random_state=0),CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
tax_find,re.search(r'Taxes:(.*?),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
monthly_tax,re.search(r'Taxes(.*?),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
bus_find,re.search(r'RouteNumber:(.*),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
tax_find,re.search(r'Taxes:(.*?),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
monthly_tax,re.search(r'Taxes(.*?),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
bus_find,re.search(r'RouteNumber:(.*),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
garage_type,"re.findall(garage_find,amenities)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
garage_type,"re.findall(garage_find,amenities)",CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
garage_find,re.compile('\w*tachedG'),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
garage_find,re.compile('\w*tachedG'),CLUSTER_30,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
camp_grp,"pandas.concat((camp_grp['campaign'],camp_grp['count'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_with_dummy,"pandas.concat([dummy_job,dummy_marital,dummy_education,dummy_housing,dummy_loan,
dummy_contact,df_copy],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummy_job,"pandas.get_dummies(df['job'],prefix='job')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummy_marital,"pandas.get_dummies(df['marital'],prefix='marital')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummy_education,"pandas.get_dummies(df['education'],prefix='edu')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummy_housing,"pandas.get_dummies(df['housing'],prefix='hous')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummy_loan,"pandas.get_dummies(df['loan'],prefix='loan')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummy_contact,"pandas.get_dummies(df['contact'],prefix='contact')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummy_month,"pandas.get_dummies(df['month'],prefix='month')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummy_day_of_week,"pandas.get_dummies(df['day_of_week'],prefix='dow')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummy_poutcome,"pandas.get_dummies(df['poutcome'],prefix='outcome')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
raw,"pandas.read_csv(""bank-additional-full.csv"",sep=';')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"x_train,x_test,y_train,y_test","sklearn.model_selection.train_test_split(df_with_dummy,y,train_size=0.8,random_state=42)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(10,15)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(10,15)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf3_rf_fit,"sklearn.ensemble.RandomForestClassifier(n_estimators=1500,criterion=""gini"",max_depth=6,
min_samples_split=2,min_samples_leaf=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
auc,"sklearn.metrics.roc_auc_score(y_test,probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"fpr,tpr,thresholds","sklearn.metrics.roc_curve(y_test,probs)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
sel,sklearn.feature_selection.SelectFromModel(RandomForestClassifier(n_estimators=100),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
std,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
infectedProportions,"numpy.arange(0,1.1,0.1)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
notInfectedIndices,numpy.where(isInfected==0),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
actuallyInfected_idx,"numpy.where(np.equal(isInfected,isPositive)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
notInfectedIndices,numpy.where(isInfected==0),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
actuallyInfected_idx,"numpy.where(np.equal(isInfected,isPositive)",CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
nInfected,numpy.sum(isInfected),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pIsInfectedGivenIsPositiveTest,numpy.sum(actuallyInfected),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
nInfected,numpy.sum(isInfected),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pIsInfectedGivenIsPositiveTest,numpy.sum(actuallyInfected),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
pData,numpy.sum(isPositive),CLUSTER_10,CLUSTER_6,CLUSTER_0,CLUSTER_0,CLUSTER_1
transmembrane,"pandas.read_excel(get_file_path(""1_Transmembrane_type.xlsx"")",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
monotopic,"pandas.read_excel(get_file_path(""2_Monotopic_type.xlsx"")",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
peptides,"pandas.read_excel(get_file_path(""3_Peptides_type.xlsx"")",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ax2,"seaborn.boxplot(y='Localization',x='Hydrophobic_Thickness',order=[""Bact.Gram-negouter"",""Bact.Gram-neginner""],data=df,whis=np.inf)",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ax1,"seaborn.swarmplot(x='Hydrophobic_Thickness',y='Localization',data=df,alpha='0.5',color='k')",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ax2,"seaborn.swarmplot(y='Localization',x='Hydrophobic_Thickness',order=[""Bact.Gram-negouter"",""Bact.Gram-neginner""],data=df,size=3,color='k',alpha=0.7)",CLUSTER_8,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
iris,sklearn.datasets.load_iris(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
v1,"numpy.array([1,(a2-a1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
v2,"numpy.array([1,(a2-a1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
Iw,numpy.array([KMeans(n_clusters=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
m1,"numpy.array([5,5])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
m2,"numpy.array([15,10])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
m3,"numpy.array([5,15])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
v,"numpy.array([[1,0],[0,1]])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data.append(np.random.multivariate_normal(size,"nb,mean=numpy.array(m)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
data2,numpy.asarray(test),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
alphas,numpy.zeros(K_max-1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cosa,"numpy.dot(v1,v2)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
iris_df,"pandas.DataFrame(iris['data'],columns=iris['feature_names'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
kmeans,sklearn.cluster.KMeans(n_clusters=k),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
val,"sklearn.metrics.silhouette_score(X,kmeans.labels_,metric='euclidean')",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
angle,math.acos(cosa),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
noisy_imgs,"numpy.clip(noisy_imgs,0.,1.)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
noisy_imgs,"numpy.clip(noisy_imgs,0.,1.)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
img,numpy.squeeze(images[0]),CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(5,5)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
"fig,axes","matplotlib.pyplot.subplots(nrows=2,ncols=10,sharex=True,sharey=True,figsize=(25,4)",CLUSTER_6,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(20,20)",CLUSTER_7,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(12,6)",CLUSTER_7,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
filter_vals,"numpy.array([[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1],[-1,-1,1,1]])",CLUSTER_7,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
filters,"numpy.array([filter_1,filter_2,filter_3,filter_4])",CLUSTER_7,CLUSTER_7,CLUSTER_4,CLUSTER_0,CLUSTER_1
res_forks,"requests.get(get_forks,auth=(user,key)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
res_commit,"requests.get(get_commits,auth=(user,key)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
get_repo,"requests.get(get_repo,auth=(user,key)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
get_contenido,"requests.get(url+tree[i]['path'],auth=(user,key)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
res,"requests.get(baseURL,headers=headers,auth=(user,key)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
html,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
html,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
res,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
res,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
res,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
res,requests.get(url),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
df,"pandas.DataFrame(data,columns=col_names)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
df,pandas.DataFrame(med_paises),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
df,"pandas.DataFrame(data,columns=col_names)",CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
df,pandas.DataFrame(earthquake),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
df,pandas.DataFrame([earthquake]),CLUSTER_13,CLUSTER_5,CLUSTER_2,CLUSTER_33,CLUSTER_1
df_feat,"pandas.DataFrame(scaled_features,columns=df.columns[:-1])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv(""ClassifiedData"",index_col=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(scaled_features,df['TARGETCLASS'],
test_size=0.30)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=i),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=23),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train_X,"pandas.DataFrame(train_X,columns=['temperature','pressure','humidity','wind_direction',
'wind_speed/kph','PM2.5','PM10','NO2'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train_y,"pandas.DataFrame(train_y,columns=['PM2.5_Con','PM10_Con','NO2_Con'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test_X,"pandas.DataFrame(test_X,columns=['temperature','pressure','humidity','wind_direction',
'wind_speed/kph','PM2.5','PM10','NO2'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test_y,"pandas.DataFrame(test_y,columns=['PM2.5_Con','PM10_Con','NO2_Con'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(data),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train_X,"pandas.DataFrame(train_X,columns=['temperature','pressure','humidity','wind_direction',
'wind_speed/kph','PM2.5','PM10','NO2'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train_y,"pandas.DataFrame(train_y,columns=['PM2.5_Con','PM10_Con','NO2_Con'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test_X,"pandas.DataFrame(test_X,columns=['temperature','pressure','humidity','wind_direction',
'wind_speed/kph','PM2.5','PM10','NO2'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test_y,"pandas.DataFrame(test_y,columns=['PM2.5_Con','PM10_Con','NO2_Con'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train_X,"pandas.DataFrame(train_X,columns=['temperature','pressure','humidity','wind_direction',
'wind_speed/kph','PM2.5','PM10','NO2'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train_y,"pandas.DataFrame(train_y,columns=['PM2.5_Con','PM10_Con','NO2_Con'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test_X,"pandas.DataFrame(test_X,columns=['temperature','pressure','humidity','wind_direction',
'wind_speed/kph','PM2.5','PM10','NO2'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test_y,"pandas.DataFrame(test_y,columns=['PM2.5_Con','PM10_Con','NO2_Con'])",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
agg,"pandas.concat(cols,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
agg,"pandas.concat(cols,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,"pandas.concat([df_train_X,df_train_y],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.concat([df_test_X,df_test_y],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
agg,"pandas.concat(cols,axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,"pandas.concat([df_train_X,df_train_y],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.concat([df_test_X,df_test_y],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_train,"pandas.concat([df_train_X,df_train_y],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.concat([df_test_X,df_test_y],axis=1)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cd_final,"pandas.merge(cd1,aq_cd1,on=""time"")",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
aq_data,pandas.read_csv('Beijing_17_18_aq.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
meo_data,pandas.read_csv('Beijing_historical_meo_grid.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
station_data,pandas.read_excel('Beijing_AirQuality_Stations.xlsx'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cd1['time'],"pandas.to_datetime(cd1.utc_time,utc=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
aq_cd1['time'],"pandas.to_datetime(aq_cd1.utc_time,utc=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cd_final['time'],pandas.to_datetime(cd_final['time']),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mask,"numpy.zeros_like(corrmat,dtype=np.bool)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1,"numpy.linspace(115,220,20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1,"numpy.linspace(100,240,20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1,"numpy.linspace(110,226,20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1,"numpy.linspace(115,220,20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
x1,"numpy.linspace(115,220,20)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
"f,ax","matplotlib.pyplot.subplots(figsize=(10,5)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
cmap,"seaborn.diverging_palette(220,1,as_cmap=True)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsClassifier(n_neighbors=1),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
lr1,sklearn.linear_model.LinearRegression(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=10),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn,sklearn.neighbors.KNeighborsRegressor(n_neighbors=3),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn10,sklearn.neighbors.KNeighborsRegressor(n_neighbors=10),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn5,sklearn.neighbors.KNeighborsRegressor(n_neighbors=5),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
knn15,sklearn.neighbors.KNeighborsRegressor(n_neighbors=15),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPRegressor(solver='lbfgs',hidden_layer_sizes=[300,150,100],random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp,"sklearn.neural_network.MLPRegressor(solver='lbfgs',hidden_layer_sizes=[100,100,100],random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
mlp1,"sklearn.neural_network.MLPRegressor(solver='lbfgs',hidden_layer_sizes=[400,200,100],random_state=0)",CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
self.session,requests.Session(),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
page_response,"requests.get(page_link,timeout=5)",CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
credentials,json.load(file_json),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
page_content,json.loads(resp.content.decode('utf-8'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
page_content,json.loads(resp.content.decode('utf-8'),CLUSTER_13,CLUSTER_5,CLUSTER_0,CLUSTER_33,CLUSTER_1
start_time,time.time(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
wait_time,time.time(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
start_time,time.time(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
wait_time,time.time(),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
k,"numpy.arange(2,102,2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
k,"numpy.arange(2,102,2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
k,"numpy.arange(2,102,2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
k,"numpy.arange(2,102,2)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
t,"numpy.arange(1,26,1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
t,"numpy.arange(1,26)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
t,"numpy.arange(1,26,1)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
result,numpy.mean(precisions),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
result,numpy.mean(recalls),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
var[i],numpy.var(j),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
avg_user_rating[i],numpy.average(j),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
avg_user_rating[i],numpy.average(j),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
avg_user_rating[i],numpy.average(j),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
avg_user_rating[i],numpy.average(j),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
axes,matplotlib.pyplot.gca(),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ratings,pandas.read_csv('ml-latest-small/ratings.csv'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ratings,pandas.read_csv('ml-latest-small/ratings.csv'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
ratings,pandas.read_csv('ml-latest-small/ratings.csv'),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
G,collections.defaultdict(list),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
S,collections.defaultdict(list),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
G,collections.defaultdict(list),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
S,collections.defaultdict(list),CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fpr_knn,tpr_knn,_","sklearn.metrics.roc_curve(true_knn,pred_knn)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fpr_nmf,tpr_nmf,_","sklearn.metrics.roc_curve(true_nmf,pred_nmf)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
"fpr_svd,tpr_svd,_","sklearn.metrics.roc_curve(true_svd,pred_svd)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
roc_auc_knn,"sklearn.metrics.auc(fpr_knn,tpr_knn)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
roc_auc_nmf,"sklearn.metrics.auc(fpr_nmf,tpr_nmf)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
roc_auc_svd,"sklearn.metrics.auc(fpr_svd,tpr_svd)",CLUSTER_29,CLUSTER_3,CLUSTER_12,CLUSTER_0,CLUSTER_0
d,json.load(json_data),CLUSTER_13,CLUSTER_5,CLUSTER_1,CLUSTER_0,CLUSTER_1
dateFormatted,datetime.datetime.fromtimestamp(int(t['date']),CLUSTER_13,CLUSTER_5,CLUSTER_1,CLUSTER_0,CLUSTER_1
cell_df,"pandas.read_csv(""cell_samples.csv"")",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tick_marks,numpy.arange(len(classes),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
X,numpy.asarray(feature_df),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
y,numpy.asarray(cell_df['Class']),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
"X_train,X_test,y_train,y_test","sklearn.model_selection.train_test_split(X,y,test_size=0.2,random_state=4)",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(kernel='rbf'),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
clf2,sklearn.svm.SVC(kernel='linear'),CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
cnf_matrix,"sklearn.metrics.confusion_matrix(y_test,yhat,labels=[2,4])",CLUSTER_3,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
tips,seaborn.load_dataset('tips'),CLUSTER_8,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_1
school_obs,"numpy.array([28,8,-3,7,-1,1,18,12])",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
sigmas,"numpy.array([15,10,16,11,9,11,10,18])",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
t,"numpy.array([94.5,15.7,62.9,126.0,5.2,31.4,1.05,1.05,2.1,10.5])",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
failures,"numpy.array([5,1,5,14,3,19,1,1,4,22])",CLUSTER_0,CLUSTER_8,CLUSTER_7,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({u'获救':Survived_1,u'未获救':Survived_0})",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({u'获救':Survived_1,u'未获救':Survived_0})",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({u'男性':Survived_m,u'女性':Survived_f})",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(g.count(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.DataFrame(g.count(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.DataFrame({u'有':Survived_cabin,u'无':Survived_nocabin})",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,pandas.DataFrame({'PassengerId':data_test['PassengerId'].as_matrix(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,pandas.DataFrame({'PassengerId':data_test['PassengerId'].as_matrix(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
result,pandas.DataFrame({'PassengerId':data_test['PassengerId'].as_matrix(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([data_train,dummies_Cabin,dummies_Embarked,dummies_Sex,dummies_Pclass],axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.concat([data_test,dummies_Cabin,dummies_Embarked,dummies_Sex,dummies_Pclass],axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.concat([data_train,dummies_Cabin,dummies_Embarked,dummies_Sex,dummies_Pclass,dummies_Sex_Pclass],axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_test,"pandas.concat([data_test,dummies_Cabin,dummies_Embarked,dummies_Sex,dummies_Pclass,dummies_Sex_Pclass],axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Cabin,"pandas.get_dummies(data_train['Cabin'],prefix='Cabin')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Embarked,"pandas.get_dummies(data_train['Embarked'],prefix='Embarked')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Sex,"pandas.get_dummies(data_train['Sex'],prefix='Sex')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Pclass,"pandas.get_dummies(data_train['Pclass'],prefix='Pclass')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Cabin,"pandas.get_dummies(data_test['Cabin'],prefix='Cabin')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Embarked,"pandas.get_dummies(data_test['Embarked'],prefix='Embarked')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Sex,"pandas.get_dummies(data_test['Sex'],prefix='Sex')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Pclass,"pandas.get_dummies(data_test['Pclass'],prefix='Pclass')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Cabin,"pandas.get_dummies(data_train['Cabin'],prefix='Cabin')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Embarked,"pandas.get_dummies(data_train['Embarked'],prefix='Embarked')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Sex,"pandas.get_dummies(data_train['Sex'],prefix='Sex')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Pclass,"pandas.get_dummies(data_train['Pclass'],prefix='Pclass')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Sex_Pclass,"pandas.get_dummies(data_train['Sex_Pclass'],prefix='Sex_Pclass')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Cabin,"pandas.get_dummies(data_test['Cabin'],prefix='Cabin')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Embarked,"pandas.get_dummies(data_test['Embarked'],prefix='Embarked')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Sex,"pandas.get_dummies(data_test['Sex'],prefix='Sex')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Pclass,"pandas.get_dummies(data_test['Pclass'],prefix='Pclass')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
dummies_Sex_Pclass,"pandas.get_dummies(data_test['Sex_Pclass'],prefix='Sex_Pclass')",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_train,"pandas.read_csv(""Train.csv"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_test,"pandas.read_csv(""test.csv"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
origin_data_train,"pandas.read_csv(""Train.csv"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_train,"pandas.read_csv(""Train.csv"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data_test,"pandas.read_csv(""test.csv"")",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
traindf,pandas.read_csv(train_file),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
y_train,numpy.asarray(y_train),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_ages,numpy.zeros(4),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_mean,"numpy.mean(train_scores,axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_mean,"numpy.mean(test_scores,axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_scores_std,"numpy.std(train_scores,axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
test_scores_std,"numpy.std(test_scores,axis=1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
train_sizes,"numpy.linspace(.05,1.,20)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_ages[0],numpy.average(df[df['Title']=='Miss']['Age'].dropna(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_ages[1],numpy.average(df[df['Title']=='Mrs']['Age'].dropna(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_ages[2],numpy.average(df[df['Title']=='Mr']['Age'].dropna(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
mean_ages[3],numpy.average(df[df['Title']=='Master']['Age'].dropna(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df.loc[(df.Fare.isnull())&(df.Pclass,"=1),'Fare']=numpy.median(df[df['Pclass']==1]['Fare'].dropna()",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df.loc[(df.Fare.isnull())&(df.Pclass,"=2),'Fare']=numpy.median(df[df['Pclass']==2]['Fare'].dropna()",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df.loc[(df.Fare.isnull())&(df.Pclass,"=3),'Fare']=numpy.median(df[df['Pclass']==3]['Fare'].dropna()",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
fig,matplotlib.pyplot.figure(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr,"sklearn.ensemble.RandomForestRegressor(random_state=0,n_estimators=2000,n_jobs=-1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
rfr,"sklearn.ensemble.RandomForestRegressor(random_state=0,n_estimators=2000,n_jobs=-1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
enc,sklearn.preprocessing.OneHotEncoder(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
scaler,sklearn.preprocessing.StandardScaler(),CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
bagging_clf,"sklearn.ensemble.BaggingRegressor(clf,n_estimators=10,max_samples=0.8,max_features=1.0,bootstrap=True,bootstrap_features=False,n_jobs=-1)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=500,criterion='entropy',max_depth=5,min_samples_split=1,
min_samples_leaf=1,max_features='auto',bootstrap=False,oob_score=False,n_jobs=1,random_state=seed,
verbose=0)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
pipeline,"sklearn.pipeline.Pipeline([('clf',clf)",CLUSTER_27,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
tb,pandas.read_csv('tb.csv'),CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
gorgeta,seaborn.load_dataset('tips'),CLUSTER_8,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_1
voos,seaborn.load_dataset('flights'),CLUSTER_8,CLUSTER_10,CLUSTER_1,CLUSTER_0,CLUSTER_1
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
fig,"matplotlib.pyplot.figure(figsize=(12,12)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
image,matplotlib.pyplot.imread(image_path),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
image,matplotlib.pyplot.imread(image_path),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
image,matplotlib.pyplot.imread(image_path),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
gt2ds,numpy.array(label['joints2D']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
gt3ds,numpy.array(label['joints3D']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
pose,numpy.array(label['pose']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
shape,numpy.array(label['shape']),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
rn.camera,"ProjectPoints(v=m,rt=np.zeros(3),t=numpy.array([0,0,2.]),f=numpy.array([w,w])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
c,"numpy.array([w,h])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
light_pos,"numpy.array([-1000,-1000,-2000])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
light_color,"numpy.array([1.,1.,1.])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
rn.camera,"ProjectPoints(v=m,rt=np.zeros(3),t=numpy.array([0,0,2.]),f=numpy.array([w,w])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
c,"numpy.array([w,h])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
light_pos,"numpy.array([-1000,-1000,-2000])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
light_color,"numpy.array([1.,1.,1.])",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
rn.camera,"ProjectPoints(v=m,rt=numpy.zeros(3)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
c,"np.array([w,h])/2.,k=numpy.zeros(5)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
rn.set(v,"m,f=m.f,bgcolor=numpy.zeros(3)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
rn.camera,"ProjectPoints(v=m,rt=numpy.zeros(3)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
c,"np.array([w,h])/2.,k=numpy.zeros(5)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
rn.set(v,"m,f=m.f,bgcolor=numpy.zeros(3)",CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
vc,numpy.ones_like(m),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
vc,numpy.ones_like(m),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
train_names,pandas.read_csv('../../data/surreal_train_names.csv'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
valid_names,pandas.read_csv('../../data/surreal_valid_names.csv'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
names_filter,pandas.read_csv('/home/windward/gcy/Golf/proj/data/names_filter.csv'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
labels_filter,pandas.read_csv('/home/windward/gcy/Golf/proj/data/names_filter.csv'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
train_names,pandas.read_csv('../../data/surreal_train_names.csv'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
valid_names,pandas.read_csv('../../data/surreal_valid_names.csv'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
train_names,pandas.read_csv('../../data/surreal_train_names.csv'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
valid_names,pandas.read_csv('../../data/surreal_valid_names.csv'),CLUSTER_14,CLUSTER_0,CLUSTER_9,CLUSTER_0,CLUSTER_0
imputed_df,"pandas.DataFrame(imputed_df,columns=dfdroppedWSD.columns)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df_trainf,"pandas.read_csv('dengue_features_train.csv',sep=',')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
imp,IterativeImputer(estimator=sklearn.linear_model.BayesianRidge(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
data,"pandas.read_csv(""AB_NYC_2019.csv"")",CLUSTER_18,CLUSTER_9,CLUSTER_4,CLUSTER_0,CLUSTER_0
acc,numpy.zeros(folds-1),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nasdaq,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
djia,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
hkong,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
frankfurt,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
paris,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nikkei,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
london,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
australia,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,"pandas.read_csv('/home/francesco/BigData/Project/CSV/sentiment.csv',index_col='date')",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
sp,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nasdaq,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
djia,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
treasury,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
hkong,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
frankfurt,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
paris,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
nikkei,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
london,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
australia,"pandas.read_csv(name,index_col=0,parse_dates=True)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
forest,"sklearn.ensemble.RandomForestRegressor(n_estimators=100,n_jobs=-1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.AdaBoostRegressor(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.GradientBoostingRegressor(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsRegressor(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.RandomForestClassifier(n_estimators=100,n_jobs=-1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.neighbors.KNeighborsClassifier(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,"sklearn.ensemble.AdaBoostClassifier(n_estimators=n,learning_rate=l)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.ensemble.GradientBoostingClassifier(n_estimators=100),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVR(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
clf,sklearn.svm.SVC(),CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,"datetime.datetime(1993,1,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,"datetime.datetime(2015,8,31)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
start,"datetime.datetime(1993,1,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
end,"datetime.datetime(2015,8,31)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
start_test,"datetime.datetime(2014,4,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
start_test,"datetime.datetime(2014,4,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
cut,"datetime.datetime(1993,1,1)",CLUSTER_3,CLUSTER_12,CLUSTER_3,CLUSTER_0,CLUSTER_0
prediction,pandas.Series(logistic.predict(Xtest),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
peopleData,"pandas.read_csv(""CASC_Constant.csv"",sep="","")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
transactions,"pandas.read_csv(""casc-resto-small.csv"",sep="","")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
transactions.RKDate,pandas.to_datetime(transactions.RKDate),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"ifpd.to_datetime(""2017-12-31"")>","item['RKDate']>=pandas.to_datetime(""2017-07-01"")",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
logistic,sklearn.linear_model.LogisticRegression(),CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
"Xtrn,Xtest,Ytrn,Ytest","sklearn.model_selection.train_test_split(trn,trg,test_size=0.2)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
report,"sklearn.metrics.classification_report(Ytest,prediction)",CLUSTER_3,CLUSTER_1,CLUSTER_10,CLUSTER_0,CLUSTER_0
batches,"numpy.ndarray(shape=[n_batches,2,batch_size,seq_length],dtype=np.int32)",CLUSTER_10,CLUSTER_11,CLUSTER_0,CLUSTER_0,CLUSTER_1
encoded,"numpy.zeros(shape=(FEATURE_SHAPE[0],
FEATURE_SHAPE[1],5)",CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
boxes[label],json.load(src),CLUSTER_15,CLUSTER_0,CLUSTER_11,CLUSTER_5,CLUSTER_9
page,requests.get(current_link),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
pattern,re.compile('https?'),CLUSTER_13,CLUSTER_5,CLUSTER_6,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(p,index=pd.to_datetime(t)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(ar([swh,perpw])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pandas.DataFrame(ar([fg['WVHT'][:],fg['SwH'][:],fg['WWH'][:],
fg['SwP'][:],fg['WWP'][:]])",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
t,pandas.DatetimeIndex([pd.to_datetime(i),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pd.DataFrame(p,index=pandas.to_datetime(t)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,"pd.DataFrame(ar([swh,perpw]).T,index=pandas.to_datetime(t)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
index,pandas.to_datetime([b.decode(),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ts,"re.sub('','-',re.sub('-','',re.sub(':','',f'{df.index[0]}')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
ts,"re.sub('','-',re.sub('-','',re.sub(':','',f'{df.index[0]}')",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df,pandas.read_csv('CampusRecruitment.csv'),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
le,sklearn.preprocessing.LabelEncoder(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
xgb_grid,sklearn.model_selection.GridSearchCV(XGBRegressor(),CLUSTER_4,CLUSTER_2,CLUSTER_3,CLUSTER_0,CLUSTER_0
df,pandas.Series(doc),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
df2['cleaneddate'],pandas.to_datetime(df2['text'].apply(data_search),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mat,"re.search(r'\d?\d[/-]\d?\d[/-]?\d{4}',s)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mat,"re.search(r'\d?\d[/-]\d?\d[/-]\d{2}',s)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mat,"re.search(r'\d{1,2}(Jan(?:uary)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mat,re.search(r'(Jan(?:uary),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mat,re.search(r'((Jan(?:uary),CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
mat,"re.search(r'\d{4}',s)",CLUSTER_1,CLUSTER_1,CLUSTER_2,CLUSTER_0,CLUSTER_1
"X,y","sklearn.datasets.make_regression(n_samples=250,n_features=1,noise=20,random_state=0,bias=50)",CLUSTER_7,CLUSTER_12,CLUSTER_1,CLUSTER_0,CLUSTER_0
